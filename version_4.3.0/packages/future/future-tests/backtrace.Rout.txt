
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:41:32.173] plan(): Setting new future strategy stack:
[17:41:32.174] List of future strategies:
[17:41:32.174] 1. sequential:
[17:41:32.174]    - args: function (..., envir = parent.frame())
[17:41:32.174]    - tweaked: FALSE
[17:41:32.174]    - call: future::plan("sequential")
[17:41:32.187] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[17:41:32.197] getGlobalsAndPackages() ...
[17:41:32.197] Searching for globals...
[17:41:32.204] - globals found: [2] ‘{’, ‘stop’
[17:41:32.204] Searching for globals ... DONE
[17:41:32.204] Resolving globals: FALSE
[17:41:32.205] 
[17:41:32.205] 
[17:41:32.205] getGlobalsAndPackages() ... DONE
[17:41:32.205] run() for ‘Future’ ...
[17:41:32.206] - state: ‘created’
[17:41:32.206] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.206] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.206] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.206]   - Field: ‘label’
[17:41:32.206]   - Field: ‘local’
[17:41:32.206]   - Field: ‘owner’
[17:41:32.207]   - Field: ‘envir’
[17:41:32.207]   - Field: ‘packages’
[17:41:32.207]   - Field: ‘gc’
[17:41:32.207]   - Field: ‘conditions’
[17:41:32.207]   - Field: ‘expr’
[17:41:32.207]   - Field: ‘uuid’
[17:41:32.207]   - Field: ‘seed’
[17:41:32.207]   - Field: ‘version’
[17:41:32.207]   - Field: ‘result’
[17:41:32.207]   - Field: ‘asynchronous’
[17:41:32.208]   - Field: ‘calls’
[17:41:32.208]   - Field: ‘globals’
[17:41:32.208]   - Field: ‘stdout’
[17:41:32.208]   - Field: ‘earlySignal’
[17:41:32.208]   - Field: ‘lazy’
[17:41:32.208]   - Field: ‘state’
[17:41:32.208] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.208] - Launch lazy future ...
[17:41:32.209] Packages needed by the future expression (n = 0): <none>
[17:41:32.209] Packages needed by future strategies (n = 0): <none>
[17:41:32.210] {
[17:41:32.210]     {
[17:41:32.210]         {
[17:41:32.210]             ...future.startTime <- base::Sys.time()
[17:41:32.210]             {
[17:41:32.210]                 {
[17:41:32.210]                   {
[17:41:32.210]                     base::local({
[17:41:32.210]                       has_future <- base::requireNamespace("future", 
[17:41:32.210]                         quietly = TRUE)
[17:41:32.210]                       if (has_future) {
[17:41:32.210]                         ns <- base::getNamespace("future")
[17:41:32.210]                         version <- ns[[".package"]][["version"]]
[17:41:32.210]                         if (is.null(version)) 
[17:41:32.210]                           version <- utils::packageVersion("future")
[17:41:32.210]                       }
[17:41:32.210]                       else {
[17:41:32.210]                         version <- NULL
[17:41:32.210]                       }
[17:41:32.210]                       if (!has_future || version < "1.8.0") {
[17:41:32.210]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.210]                           "", base::R.version$version.string), 
[17:41:32.210]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.210]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.210]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.210]                             "release", "version")], collapse = " "), 
[17:41:32.210]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.210]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.210]                           info)
[17:41:32.210]                         info <- base::paste(info, collapse = "; ")
[17:41:32.210]                         if (!has_future) {
[17:41:32.210]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.210]                             info)
[17:41:32.210]                         }
[17:41:32.210]                         else {
[17:41:32.210]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.210]                             info, version)
[17:41:32.210]                         }
[17:41:32.210]                         base::stop(msg)
[17:41:32.210]                       }
[17:41:32.210]                     })
[17:41:32.210]                   }
[17:41:32.210]                   options(future.plan = NULL)
[17:41:32.210]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.210]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.210]                 }
[17:41:32.210]                 ...future.workdir <- getwd()
[17:41:32.210]             }
[17:41:32.210]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.210]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.210]         }
[17:41:32.210]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.210]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.210]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.210]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.210]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.210]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.210]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.210]             base::names(...future.oldOptions))
[17:41:32.210]     }
[17:41:32.210]     if (FALSE) {
[17:41:32.210]     }
[17:41:32.210]     else {
[17:41:32.210]         if (TRUE) {
[17:41:32.210]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.210]                 open = "w")
[17:41:32.210]         }
[17:41:32.210]         else {
[17:41:32.210]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.210]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.210]         }
[17:41:32.210]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.210]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.210]             base::sink(type = "output", split = FALSE)
[17:41:32.210]             base::close(...future.stdout)
[17:41:32.210]         }, add = TRUE)
[17:41:32.210]     }
[17:41:32.210]     ...future.frame <- base::sys.nframe()
[17:41:32.210]     ...future.conditions <- base::list()
[17:41:32.210]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.210]     if (FALSE) {
[17:41:32.210]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.210]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.210]     }
[17:41:32.210]     ...future.result <- base::tryCatch({
[17:41:32.210]         base::withCallingHandlers({
[17:41:32.210]             ...future.value <- base::withVisible(base::local({
[17:41:32.210]                 42L
[17:41:32.210]                 stop("Woops")
[17:41:32.210]             }))
[17:41:32.210]             future::FutureResult(value = ...future.value$value, 
[17:41:32.210]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.210]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.210]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.210]                     ...future.globalenv.names))
[17:41:32.210]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.210]         }, condition = base::local({
[17:41:32.210]             c <- base::c
[17:41:32.210]             inherits <- base::inherits
[17:41:32.210]             invokeRestart <- base::invokeRestart
[17:41:32.210]             length <- base::length
[17:41:32.210]             list <- base::list
[17:41:32.210]             seq.int <- base::seq.int
[17:41:32.210]             signalCondition <- base::signalCondition
[17:41:32.210]             sys.calls <- base::sys.calls
[17:41:32.210]             `[[` <- base::`[[`
[17:41:32.210]             `+` <- base::`+`
[17:41:32.210]             `<<-` <- base::`<<-`
[17:41:32.210]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.210]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.210]                   3L)]
[17:41:32.210]             }
[17:41:32.210]             function(cond) {
[17:41:32.210]                 is_error <- inherits(cond, "error")
[17:41:32.210]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.210]                   NULL)
[17:41:32.210]                 if (is_error) {
[17:41:32.210]                   sessionInformation <- function() {
[17:41:32.210]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.210]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.210]                       search = base::search(), system = base::Sys.info())
[17:41:32.210]                   }
[17:41:32.210]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.210]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.210]                     cond$call), session = sessionInformation(), 
[17:41:32.210]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.210]                   signalCondition(cond)
[17:41:32.210]                 }
[17:41:32.210]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.210]                 "immediateCondition"))) {
[17:41:32.210]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.210]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.210]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.210]                   if (TRUE && !signal) {
[17:41:32.210]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.210]                     {
[17:41:32.210]                       inherits <- base::inherits
[17:41:32.210]                       invokeRestart <- base::invokeRestart
[17:41:32.210]                       is.null <- base::is.null
[17:41:32.210]                       muffled <- FALSE
[17:41:32.210]                       if (inherits(cond, "message")) {
[17:41:32.210]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.210]                         if (muffled) 
[17:41:32.210]                           invokeRestart("muffleMessage")
[17:41:32.210]                       }
[17:41:32.210]                       else if (inherits(cond, "warning")) {
[17:41:32.210]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.210]                         if (muffled) 
[17:41:32.210]                           invokeRestart("muffleWarning")
[17:41:32.210]                       }
[17:41:32.210]                       else if (inherits(cond, "condition")) {
[17:41:32.210]                         if (!is.null(pattern)) {
[17:41:32.210]                           computeRestarts <- base::computeRestarts
[17:41:32.210]                           grepl <- base::grepl
[17:41:32.210]                           restarts <- computeRestarts(cond)
[17:41:32.210]                           for (restart in restarts) {
[17:41:32.210]                             name <- restart$name
[17:41:32.210]                             if (is.null(name)) 
[17:41:32.210]                               next
[17:41:32.210]                             if (!grepl(pattern, name)) 
[17:41:32.210]                               next
[17:41:32.210]                             invokeRestart(restart)
[17:41:32.210]                             muffled <- TRUE
[17:41:32.210]                             break
[17:41:32.210]                           }
[17:41:32.210]                         }
[17:41:32.210]                       }
[17:41:32.210]                       invisible(muffled)
[17:41:32.210]                     }
[17:41:32.210]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.210]                   }
[17:41:32.210]                 }
[17:41:32.210]                 else {
[17:41:32.210]                   if (TRUE) {
[17:41:32.210]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.210]                     {
[17:41:32.210]                       inherits <- base::inherits
[17:41:32.210]                       invokeRestart <- base::invokeRestart
[17:41:32.210]                       is.null <- base::is.null
[17:41:32.210]                       muffled <- FALSE
[17:41:32.210]                       if (inherits(cond, "message")) {
[17:41:32.210]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.210]                         if (muffled) 
[17:41:32.210]                           invokeRestart("muffleMessage")
[17:41:32.210]                       }
[17:41:32.210]                       else if (inherits(cond, "warning")) {
[17:41:32.210]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.210]                         if (muffled) 
[17:41:32.210]                           invokeRestart("muffleWarning")
[17:41:32.210]                       }
[17:41:32.210]                       else if (inherits(cond, "condition")) {
[17:41:32.210]                         if (!is.null(pattern)) {
[17:41:32.210]                           computeRestarts <- base::computeRestarts
[17:41:32.210]                           grepl <- base::grepl
[17:41:32.210]                           restarts <- computeRestarts(cond)
[17:41:32.210]                           for (restart in restarts) {
[17:41:32.210]                             name <- restart$name
[17:41:32.210]                             if (is.null(name)) 
[17:41:32.210]                               next
[17:41:32.210]                             if (!grepl(pattern, name)) 
[17:41:32.210]                               next
[17:41:32.210]                             invokeRestart(restart)
[17:41:32.210]                             muffled <- TRUE
[17:41:32.210]                             break
[17:41:32.210]                           }
[17:41:32.210]                         }
[17:41:32.210]                       }
[17:41:32.210]                       invisible(muffled)
[17:41:32.210]                     }
[17:41:32.210]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.210]                   }
[17:41:32.210]                 }
[17:41:32.210]             }
[17:41:32.210]         }))
[17:41:32.210]     }, error = function(ex) {
[17:41:32.210]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.210]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.210]                 ...future.rng), started = ...future.startTime, 
[17:41:32.210]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.210]             version = "1.8"), class = "FutureResult")
[17:41:32.210]     }, finally = {
[17:41:32.210]         if (!identical(...future.workdir, getwd())) 
[17:41:32.210]             setwd(...future.workdir)
[17:41:32.210]         {
[17:41:32.210]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.210]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.210]             }
[17:41:32.210]             base::options(...future.oldOptions)
[17:41:32.210]             if (.Platform$OS.type == "windows") {
[17:41:32.210]                 old_names <- names(...future.oldEnvVars)
[17:41:32.210]                 envs <- base::Sys.getenv()
[17:41:32.210]                 names <- names(envs)
[17:41:32.210]                 common <- intersect(names, old_names)
[17:41:32.210]                 added <- setdiff(names, old_names)
[17:41:32.210]                 removed <- setdiff(old_names, names)
[17:41:32.210]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.210]                   envs[common]]
[17:41:32.210]                 NAMES <- toupper(changed)
[17:41:32.210]                 args <- list()
[17:41:32.210]                 for (kk in seq_along(NAMES)) {
[17:41:32.210]                   name <- changed[[kk]]
[17:41:32.210]                   NAME <- NAMES[[kk]]
[17:41:32.210]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.210]                     next
[17:41:32.210]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.210]                 }
[17:41:32.210]                 NAMES <- toupper(added)
[17:41:32.210]                 for (kk in seq_along(NAMES)) {
[17:41:32.210]                   name <- added[[kk]]
[17:41:32.210]                   NAME <- NAMES[[kk]]
[17:41:32.210]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.210]                     next
[17:41:32.210]                   args[[name]] <- ""
[17:41:32.210]                 }
[17:41:32.210]                 NAMES <- toupper(removed)
[17:41:32.210]                 for (kk in seq_along(NAMES)) {
[17:41:32.210]                   name <- removed[[kk]]
[17:41:32.210]                   NAME <- NAMES[[kk]]
[17:41:32.210]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.210]                     next
[17:41:32.210]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.210]                 }
[17:41:32.210]                 if (length(args) > 0) 
[17:41:32.210]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.210]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.210]             }
[17:41:32.210]             else {
[17:41:32.210]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.210]             }
[17:41:32.210]             {
[17:41:32.210]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.210]                   0L) {
[17:41:32.210]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.210]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.210]                   base::options(opts)
[17:41:32.210]                 }
[17:41:32.210]                 {
[17:41:32.210]                   {
[17:41:32.210]                     NULL
[17:41:32.210]                     RNGkind("Mersenne-Twister")
[17:41:32.210]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.210]                       inherits = FALSE)
[17:41:32.210]                   }
[17:41:32.210]                   options(future.plan = NULL)
[17:41:32.210]                   if (is.na(NA_character_)) 
[17:41:32.210]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.210]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.210]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.210]                   {
[17:41:32.210]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.210]                     if (!future$lazy) 
[17:41:32.210]                       future <- run(future)
[17:41:32.210]                     invisible(future)
[17:41:32.210]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.210]                 }
[17:41:32.210]             }
[17:41:32.210]         }
[17:41:32.210]     })
[17:41:32.210]     if (TRUE) {
[17:41:32.210]         base::sink(type = "output", split = FALSE)
[17:41:32.210]         if (TRUE) {
[17:41:32.210]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.210]         }
[17:41:32.210]         else {
[17:41:32.210]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.210]         }
[17:41:32.210]         base::close(...future.stdout)
[17:41:32.210]         ...future.stdout <- NULL
[17:41:32.210]     }
[17:41:32.210]     ...future.result$conditions <- ...future.conditions
[17:41:32.210]     ...future.result$finished <- base::Sys.time()
[17:41:32.210]     ...future.result
[17:41:32.210] }
[17:41:32.212] plan(): Setting new future strategy stack:
[17:41:32.212] List of future strategies:
[17:41:32.212] 1. sequential:
[17:41:32.212]    - args: function (..., envir = parent.frame())
[17:41:32.212]    - tweaked: FALSE
[17:41:32.212]    - call: NULL
[17:41:32.212] plan(): nbrOfWorkers() = 1
[17:41:32.213] plan(): Setting new future strategy stack:
[17:41:32.213] List of future strategies:
[17:41:32.213] 1. sequential:
[17:41:32.213]    - args: function (..., envir = parent.frame())
[17:41:32.213]    - tweaked: FALSE
[17:41:32.213]    - call: future::plan("sequential")
[17:41:32.214] plan(): nbrOfWorkers() = 1
[17:41:32.214] SequentialFuture started (and completed)
[17:41:32.214] signalConditions() ...
[17:41:32.214]  - include = ‘immediateCondition’
[17:41:32.215]  - exclude = 
[17:41:32.215]  - resignal = FALSE
[17:41:32.215]  - Number of conditions: 1
[17:41:32.215] signalConditions() ... done
[17:41:32.215] - Launch lazy future ... done
[17:41:32.215] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:41:32.216] signalConditions() ...
[17:41:32.216]  - include = ‘immediateCondition’
[17:41:32.216]  - exclude = 
[17:41:32.216]  - resignal = FALSE
[17:41:32.216]  - Number of conditions: 1
[17:41:32.216] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[17:41:32.217] resolved() for ‘SequentialFuture’ ...
[17:41:32.217] - state: ‘finished’
[17:41:32.217] - run: TRUE
[17:41:32.218] - result: ‘FutureResult’
[17:41:32.218] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[17:41:32.218] getGlobalsAndPackages() ...
[17:41:32.219] Searching for globals...
[17:41:32.219] - globals found: [2] ‘{’, ‘stop’
[17:41:32.220] Searching for globals ... DONE
[17:41:32.220] Resolving globals: FALSE
[17:41:32.220] 
[17:41:32.220] 
[17:41:32.220] getGlobalsAndPackages() ... DONE
[17:41:32.220] run() for ‘Future’ ...
[17:41:32.221] - state: ‘created’
[17:41:32.221] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.221] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.221] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.223]   - Field: ‘label’
[17:41:32.224]   - Field: ‘local’
[17:41:32.224]   - Field: ‘owner’
[17:41:32.224]   - Field: ‘envir’
[17:41:32.224]   - Field: ‘packages’
[17:41:32.224]   - Field: ‘gc’
[17:41:32.224]   - Field: ‘conditions’
[17:41:32.224]   - Field: ‘expr’
[17:41:32.224]   - Field: ‘uuid’
[17:41:32.224]   - Field: ‘seed’
[17:41:32.224]   - Field: ‘version’
[17:41:32.224]   - Field: ‘result’
[17:41:32.225]   - Field: ‘asynchronous’
[17:41:32.225]   - Field: ‘calls’
[17:41:32.225]   - Field: ‘globals’
[17:41:32.225]   - Field: ‘stdout’
[17:41:32.225]   - Field: ‘earlySignal’
[17:41:32.225]   - Field: ‘lazy’
[17:41:32.225]   - Field: ‘state’
[17:41:32.225] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.225] - Launch lazy future ...
[17:41:32.226] Packages needed by the future expression (n = 0): <none>
[17:41:32.226] Packages needed by future strategies (n = 0): <none>
[17:41:32.226] {
[17:41:32.226]     {
[17:41:32.226]         {
[17:41:32.226]             ...future.startTime <- base::Sys.time()
[17:41:32.226]             {
[17:41:32.226]                 {
[17:41:32.226]                   {
[17:41:32.226]                     base::local({
[17:41:32.226]                       has_future <- base::requireNamespace("future", 
[17:41:32.226]                         quietly = TRUE)
[17:41:32.226]                       if (has_future) {
[17:41:32.226]                         ns <- base::getNamespace("future")
[17:41:32.226]                         version <- ns[[".package"]][["version"]]
[17:41:32.226]                         if (is.null(version)) 
[17:41:32.226]                           version <- utils::packageVersion("future")
[17:41:32.226]                       }
[17:41:32.226]                       else {
[17:41:32.226]                         version <- NULL
[17:41:32.226]                       }
[17:41:32.226]                       if (!has_future || version < "1.8.0") {
[17:41:32.226]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.226]                           "", base::R.version$version.string), 
[17:41:32.226]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.226]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.226]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.226]                             "release", "version")], collapse = " "), 
[17:41:32.226]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.226]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.226]                           info)
[17:41:32.226]                         info <- base::paste(info, collapse = "; ")
[17:41:32.226]                         if (!has_future) {
[17:41:32.226]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.226]                             info)
[17:41:32.226]                         }
[17:41:32.226]                         else {
[17:41:32.226]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.226]                             info, version)
[17:41:32.226]                         }
[17:41:32.226]                         base::stop(msg)
[17:41:32.226]                       }
[17:41:32.226]                     })
[17:41:32.226]                   }
[17:41:32.226]                   options(future.plan = NULL)
[17:41:32.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.226]                 }
[17:41:32.226]                 ...future.workdir <- getwd()
[17:41:32.226]             }
[17:41:32.226]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.226]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.226]         }
[17:41:32.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.226]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.226]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.226]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.226]             base::names(...future.oldOptions))
[17:41:32.226]     }
[17:41:32.226]     if (FALSE) {
[17:41:32.226]     }
[17:41:32.226]     else {
[17:41:32.226]         if (TRUE) {
[17:41:32.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.226]                 open = "w")
[17:41:32.226]         }
[17:41:32.226]         else {
[17:41:32.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.226]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.226]         }
[17:41:32.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.226]             base::sink(type = "output", split = FALSE)
[17:41:32.226]             base::close(...future.stdout)
[17:41:32.226]         }, add = TRUE)
[17:41:32.226]     }
[17:41:32.226]     ...future.frame <- base::sys.nframe()
[17:41:32.226]     ...future.conditions <- base::list()
[17:41:32.226]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.226]     if (FALSE) {
[17:41:32.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.226]     }
[17:41:32.226]     ...future.result <- base::tryCatch({
[17:41:32.226]         base::withCallingHandlers({
[17:41:32.226]             ...future.value <- base::withVisible(base::local({
[17:41:32.226]                 42L
[17:41:32.226]                 stop("Woops")
[17:41:32.226]             }))
[17:41:32.226]             future::FutureResult(value = ...future.value$value, 
[17:41:32.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.226]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.226]                     ...future.globalenv.names))
[17:41:32.226]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.226]         }, condition = base::local({
[17:41:32.226]             c <- base::c
[17:41:32.226]             inherits <- base::inherits
[17:41:32.226]             invokeRestart <- base::invokeRestart
[17:41:32.226]             length <- base::length
[17:41:32.226]             list <- base::list
[17:41:32.226]             seq.int <- base::seq.int
[17:41:32.226]             signalCondition <- base::signalCondition
[17:41:32.226]             sys.calls <- base::sys.calls
[17:41:32.226]             `[[` <- base::`[[`
[17:41:32.226]             `+` <- base::`+`
[17:41:32.226]             `<<-` <- base::`<<-`
[17:41:32.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.226]                   3L)]
[17:41:32.226]             }
[17:41:32.226]             function(cond) {
[17:41:32.226]                 is_error <- inherits(cond, "error")
[17:41:32.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.226]                   NULL)
[17:41:32.226]                 if (is_error) {
[17:41:32.226]                   sessionInformation <- function() {
[17:41:32.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.226]                       search = base::search(), system = base::Sys.info())
[17:41:32.226]                   }
[17:41:32.226]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.226]                     cond$call), session = sessionInformation(), 
[17:41:32.226]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.226]                   signalCondition(cond)
[17:41:32.226]                 }
[17:41:32.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.226]                 "immediateCondition"))) {
[17:41:32.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.226]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.226]                   if (TRUE && !signal) {
[17:41:32.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.226]                     {
[17:41:32.226]                       inherits <- base::inherits
[17:41:32.226]                       invokeRestart <- base::invokeRestart
[17:41:32.226]                       is.null <- base::is.null
[17:41:32.226]                       muffled <- FALSE
[17:41:32.226]                       if (inherits(cond, "message")) {
[17:41:32.226]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.226]                         if (muffled) 
[17:41:32.226]                           invokeRestart("muffleMessage")
[17:41:32.226]                       }
[17:41:32.226]                       else if (inherits(cond, "warning")) {
[17:41:32.226]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.226]                         if (muffled) 
[17:41:32.226]                           invokeRestart("muffleWarning")
[17:41:32.226]                       }
[17:41:32.226]                       else if (inherits(cond, "condition")) {
[17:41:32.226]                         if (!is.null(pattern)) {
[17:41:32.226]                           computeRestarts <- base::computeRestarts
[17:41:32.226]                           grepl <- base::grepl
[17:41:32.226]                           restarts <- computeRestarts(cond)
[17:41:32.226]                           for (restart in restarts) {
[17:41:32.226]                             name <- restart$name
[17:41:32.226]                             if (is.null(name)) 
[17:41:32.226]                               next
[17:41:32.226]                             if (!grepl(pattern, name)) 
[17:41:32.226]                               next
[17:41:32.226]                             invokeRestart(restart)
[17:41:32.226]                             muffled <- TRUE
[17:41:32.226]                             break
[17:41:32.226]                           }
[17:41:32.226]                         }
[17:41:32.226]                       }
[17:41:32.226]                       invisible(muffled)
[17:41:32.226]                     }
[17:41:32.226]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.226]                   }
[17:41:32.226]                 }
[17:41:32.226]                 else {
[17:41:32.226]                   if (TRUE) {
[17:41:32.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.226]                     {
[17:41:32.226]                       inherits <- base::inherits
[17:41:32.226]                       invokeRestart <- base::invokeRestart
[17:41:32.226]                       is.null <- base::is.null
[17:41:32.226]                       muffled <- FALSE
[17:41:32.226]                       if (inherits(cond, "message")) {
[17:41:32.226]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.226]                         if (muffled) 
[17:41:32.226]                           invokeRestart("muffleMessage")
[17:41:32.226]                       }
[17:41:32.226]                       else if (inherits(cond, "warning")) {
[17:41:32.226]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.226]                         if (muffled) 
[17:41:32.226]                           invokeRestart("muffleWarning")
[17:41:32.226]                       }
[17:41:32.226]                       else if (inherits(cond, "condition")) {
[17:41:32.226]                         if (!is.null(pattern)) {
[17:41:32.226]                           computeRestarts <- base::computeRestarts
[17:41:32.226]                           grepl <- base::grepl
[17:41:32.226]                           restarts <- computeRestarts(cond)
[17:41:32.226]                           for (restart in restarts) {
[17:41:32.226]                             name <- restart$name
[17:41:32.226]                             if (is.null(name)) 
[17:41:32.226]                               next
[17:41:32.226]                             if (!grepl(pattern, name)) 
[17:41:32.226]                               next
[17:41:32.226]                             invokeRestart(restart)
[17:41:32.226]                             muffled <- TRUE
[17:41:32.226]                             break
[17:41:32.226]                           }
[17:41:32.226]                         }
[17:41:32.226]                       }
[17:41:32.226]                       invisible(muffled)
[17:41:32.226]                     }
[17:41:32.226]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.226]                   }
[17:41:32.226]                 }
[17:41:32.226]             }
[17:41:32.226]         }))
[17:41:32.226]     }, error = function(ex) {
[17:41:32.226]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.226]                 ...future.rng), started = ...future.startTime, 
[17:41:32.226]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.226]             version = "1.8"), class = "FutureResult")
[17:41:32.226]     }, finally = {
[17:41:32.226]         if (!identical(...future.workdir, getwd())) 
[17:41:32.226]             setwd(...future.workdir)
[17:41:32.226]         {
[17:41:32.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.226]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.226]             }
[17:41:32.226]             base::options(...future.oldOptions)
[17:41:32.226]             if (.Platform$OS.type == "windows") {
[17:41:32.226]                 old_names <- names(...future.oldEnvVars)
[17:41:32.226]                 envs <- base::Sys.getenv()
[17:41:32.226]                 names <- names(envs)
[17:41:32.226]                 common <- intersect(names, old_names)
[17:41:32.226]                 added <- setdiff(names, old_names)
[17:41:32.226]                 removed <- setdiff(old_names, names)
[17:41:32.226]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.226]                   envs[common]]
[17:41:32.226]                 NAMES <- toupper(changed)
[17:41:32.226]                 args <- list()
[17:41:32.226]                 for (kk in seq_along(NAMES)) {
[17:41:32.226]                   name <- changed[[kk]]
[17:41:32.226]                   NAME <- NAMES[[kk]]
[17:41:32.226]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.226]                     next
[17:41:32.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.226]                 }
[17:41:32.226]                 NAMES <- toupper(added)
[17:41:32.226]                 for (kk in seq_along(NAMES)) {
[17:41:32.226]                   name <- added[[kk]]
[17:41:32.226]                   NAME <- NAMES[[kk]]
[17:41:32.226]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.226]                     next
[17:41:32.226]                   args[[name]] <- ""
[17:41:32.226]                 }
[17:41:32.226]                 NAMES <- toupper(removed)
[17:41:32.226]                 for (kk in seq_along(NAMES)) {
[17:41:32.226]                   name <- removed[[kk]]
[17:41:32.226]                   NAME <- NAMES[[kk]]
[17:41:32.226]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.226]                     next
[17:41:32.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.226]                 }
[17:41:32.226]                 if (length(args) > 0) 
[17:41:32.226]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.226]             }
[17:41:32.226]             else {
[17:41:32.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.226]             }
[17:41:32.226]             {
[17:41:32.226]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.226]                   0L) {
[17:41:32.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.226]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.226]                   base::options(opts)
[17:41:32.226]                 }
[17:41:32.226]                 {
[17:41:32.226]                   {
[17:41:32.226]                     NULL
[17:41:32.226]                     RNGkind("Mersenne-Twister")
[17:41:32.226]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.226]                       inherits = FALSE)
[17:41:32.226]                   }
[17:41:32.226]                   options(future.plan = NULL)
[17:41:32.226]                   if (is.na(NA_character_)) 
[17:41:32.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.226]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.226]                   {
[17:41:32.226]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.226]                     if (!future$lazy) 
[17:41:32.226]                       future <- run(future)
[17:41:32.226]                     invisible(future)
[17:41:32.226]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.226]                 }
[17:41:32.226]             }
[17:41:32.226]         }
[17:41:32.226]     })
[17:41:32.226]     if (TRUE) {
[17:41:32.226]         base::sink(type = "output", split = FALSE)
[17:41:32.226]         if (TRUE) {
[17:41:32.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.226]         }
[17:41:32.226]         else {
[17:41:32.226]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.226]         }
[17:41:32.226]         base::close(...future.stdout)
[17:41:32.226]         ...future.stdout <- NULL
[17:41:32.226]     }
[17:41:32.226]     ...future.result$conditions <- ...future.conditions
[17:41:32.226]     ...future.result$finished <- base::Sys.time()
[17:41:32.226]     ...future.result
[17:41:32.226] }
[17:41:32.228] plan(): Setting new future strategy stack:
[17:41:32.228] List of future strategies:
[17:41:32.228] 1. sequential:
[17:41:32.228]    - args: function (..., envir = parent.frame())
[17:41:32.228]    - tweaked: FALSE
[17:41:32.228]    - call: NULL
[17:41:32.228] plan(): nbrOfWorkers() = 1
[17:41:32.229] plan(): Setting new future strategy stack:
[17:41:32.229] List of future strategies:
[17:41:32.229] 1. sequential:
[17:41:32.229]    - args: function (..., envir = parent.frame())
[17:41:32.229]    - tweaked: FALSE
[17:41:32.229]    - call: future::plan("sequential")
[17:41:32.230] plan(): nbrOfWorkers() = 1
[17:41:32.230] SequentialFuture started (and completed)
[17:41:32.230] signalConditions() ...
[17:41:32.230]  - include = ‘immediateCondition’
[17:41:32.230]  - exclude = 
[17:41:32.230]  - resignal = FALSE
[17:41:32.230]  - Number of conditions: 1
[17:41:32.231] signalConditions() ... done
[17:41:32.231] - Launch lazy future ... done
[17:41:32.231] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[17:41:32.231] resolved() for ‘SequentialFuture’ ...
[17:41:32.231] - state: ‘finished’
[17:41:32.231] - run: TRUE
[17:41:32.231] - result: ‘FutureResult’
[17:41:32.231] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[17:41:32.232] getGlobalsAndPackages() ...
[17:41:32.232] Searching for globals...
[17:41:32.233] - globals found: [2] ‘{’, ‘stop’
[17:41:32.233] Searching for globals ... DONE
[17:41:32.234] Resolving globals: FALSE
[17:41:32.234] 
[17:41:32.234] 
[17:41:32.234] getGlobalsAndPackages() ... DONE
[17:41:32.234] run() for ‘Future’ ...
[17:41:32.234] - state: ‘created’
[17:41:32.234] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.235] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.235] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.235]   - Field: ‘label’
[17:41:32.235]   - Field: ‘local’
[17:41:32.235]   - Field: ‘owner’
[17:41:32.235]   - Field: ‘envir’
[17:41:32.235]   - Field: ‘packages’
[17:41:32.235]   - Field: ‘gc’
[17:41:32.236]   - Field: ‘conditions’
[17:41:32.236]   - Field: ‘expr’
[17:41:32.236]   - Field: ‘uuid’
[17:41:32.236]   - Field: ‘seed’
[17:41:32.236]   - Field: ‘version’
[17:41:32.236]   - Field: ‘result’
[17:41:32.236]   - Field: ‘asynchronous’
[17:41:32.236]   - Field: ‘calls’
[17:41:32.236]   - Field: ‘globals’
[17:41:32.236]   - Field: ‘stdout’
[17:41:32.236]   - Field: ‘earlySignal’
[17:41:32.237]   - Field: ‘lazy’
[17:41:32.237]   - Field: ‘state’
[17:41:32.237] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.237] - Launch lazy future ...
[17:41:32.237] Packages needed by the future expression (n = 0): <none>
[17:41:32.237] Packages needed by future strategies (n = 0): <none>
[17:41:32.238] {
[17:41:32.238]     {
[17:41:32.238]         {
[17:41:32.238]             ...future.startTime <- base::Sys.time()
[17:41:32.238]             {
[17:41:32.238]                 {
[17:41:32.238]                   {
[17:41:32.238]                     base::local({
[17:41:32.238]                       has_future <- base::requireNamespace("future", 
[17:41:32.238]                         quietly = TRUE)
[17:41:32.238]                       if (has_future) {
[17:41:32.238]                         ns <- base::getNamespace("future")
[17:41:32.238]                         version <- ns[[".package"]][["version"]]
[17:41:32.238]                         if (is.null(version)) 
[17:41:32.238]                           version <- utils::packageVersion("future")
[17:41:32.238]                       }
[17:41:32.238]                       else {
[17:41:32.238]                         version <- NULL
[17:41:32.238]                       }
[17:41:32.238]                       if (!has_future || version < "1.8.0") {
[17:41:32.238]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.238]                           "", base::R.version$version.string), 
[17:41:32.238]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.238]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.238]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.238]                             "release", "version")], collapse = " "), 
[17:41:32.238]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.238]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.238]                           info)
[17:41:32.238]                         info <- base::paste(info, collapse = "; ")
[17:41:32.238]                         if (!has_future) {
[17:41:32.238]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.238]                             info)
[17:41:32.238]                         }
[17:41:32.238]                         else {
[17:41:32.238]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.238]                             info, version)
[17:41:32.238]                         }
[17:41:32.238]                         base::stop(msg)
[17:41:32.238]                       }
[17:41:32.238]                     })
[17:41:32.238]                   }
[17:41:32.238]                   options(future.plan = NULL)
[17:41:32.238]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.238]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.238]                 }
[17:41:32.238]                 ...future.workdir <- getwd()
[17:41:32.238]             }
[17:41:32.238]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.238]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.238]         }
[17:41:32.238]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.238]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.238]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.238]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.238]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.238]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.238]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.238]             base::names(...future.oldOptions))
[17:41:32.238]     }
[17:41:32.238]     if (FALSE) {
[17:41:32.238]     }
[17:41:32.238]     else {
[17:41:32.238]         if (TRUE) {
[17:41:32.238]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.238]                 open = "w")
[17:41:32.238]         }
[17:41:32.238]         else {
[17:41:32.238]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.238]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.238]         }
[17:41:32.238]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.238]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.238]             base::sink(type = "output", split = FALSE)
[17:41:32.238]             base::close(...future.stdout)
[17:41:32.238]         }, add = TRUE)
[17:41:32.238]     }
[17:41:32.238]     ...future.frame <- base::sys.nframe()
[17:41:32.238]     ...future.conditions <- base::list()
[17:41:32.238]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.238]     if (FALSE) {
[17:41:32.238]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.238]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.238]     }
[17:41:32.238]     ...future.result <- base::tryCatch({
[17:41:32.238]         base::withCallingHandlers({
[17:41:32.238]             ...future.value <- base::withVisible(base::local({
[17:41:32.238]                 42L
[17:41:32.238]                 stop("Woops")
[17:41:32.238]             }))
[17:41:32.238]             future::FutureResult(value = ...future.value$value, 
[17:41:32.238]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.238]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.238]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.238]                     ...future.globalenv.names))
[17:41:32.238]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.238]         }, condition = base::local({
[17:41:32.238]             c <- base::c
[17:41:32.238]             inherits <- base::inherits
[17:41:32.238]             invokeRestart <- base::invokeRestart
[17:41:32.238]             length <- base::length
[17:41:32.238]             list <- base::list
[17:41:32.238]             seq.int <- base::seq.int
[17:41:32.238]             signalCondition <- base::signalCondition
[17:41:32.238]             sys.calls <- base::sys.calls
[17:41:32.238]             `[[` <- base::`[[`
[17:41:32.238]             `+` <- base::`+`
[17:41:32.238]             `<<-` <- base::`<<-`
[17:41:32.238]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.238]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.238]                   3L)]
[17:41:32.238]             }
[17:41:32.238]             function(cond) {
[17:41:32.238]                 is_error <- inherits(cond, "error")
[17:41:32.238]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.238]                   NULL)
[17:41:32.238]                 if (is_error) {
[17:41:32.238]                   sessionInformation <- function() {
[17:41:32.238]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.238]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.238]                       search = base::search(), system = base::Sys.info())
[17:41:32.238]                   }
[17:41:32.238]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.238]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.238]                     cond$call), session = sessionInformation(), 
[17:41:32.238]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.238]                   signalCondition(cond)
[17:41:32.238]                 }
[17:41:32.238]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.238]                 "immediateCondition"))) {
[17:41:32.238]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.238]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.238]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.238]                   if (TRUE && !signal) {
[17:41:32.238]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.238]                     {
[17:41:32.238]                       inherits <- base::inherits
[17:41:32.238]                       invokeRestart <- base::invokeRestart
[17:41:32.238]                       is.null <- base::is.null
[17:41:32.238]                       muffled <- FALSE
[17:41:32.238]                       if (inherits(cond, "message")) {
[17:41:32.238]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.238]                         if (muffled) 
[17:41:32.238]                           invokeRestart("muffleMessage")
[17:41:32.238]                       }
[17:41:32.238]                       else if (inherits(cond, "warning")) {
[17:41:32.238]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.238]                         if (muffled) 
[17:41:32.238]                           invokeRestart("muffleWarning")
[17:41:32.238]                       }
[17:41:32.238]                       else if (inherits(cond, "condition")) {
[17:41:32.238]                         if (!is.null(pattern)) {
[17:41:32.238]                           computeRestarts <- base::computeRestarts
[17:41:32.238]                           grepl <- base::grepl
[17:41:32.238]                           restarts <- computeRestarts(cond)
[17:41:32.238]                           for (restart in restarts) {
[17:41:32.238]                             name <- restart$name
[17:41:32.238]                             if (is.null(name)) 
[17:41:32.238]                               next
[17:41:32.238]                             if (!grepl(pattern, name)) 
[17:41:32.238]                               next
[17:41:32.238]                             invokeRestart(restart)
[17:41:32.238]                             muffled <- TRUE
[17:41:32.238]                             break
[17:41:32.238]                           }
[17:41:32.238]                         }
[17:41:32.238]                       }
[17:41:32.238]                       invisible(muffled)
[17:41:32.238]                     }
[17:41:32.238]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.238]                   }
[17:41:32.238]                 }
[17:41:32.238]                 else {
[17:41:32.238]                   if (TRUE) {
[17:41:32.238]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.238]                     {
[17:41:32.238]                       inherits <- base::inherits
[17:41:32.238]                       invokeRestart <- base::invokeRestart
[17:41:32.238]                       is.null <- base::is.null
[17:41:32.238]                       muffled <- FALSE
[17:41:32.238]                       if (inherits(cond, "message")) {
[17:41:32.238]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.238]                         if (muffled) 
[17:41:32.238]                           invokeRestart("muffleMessage")
[17:41:32.238]                       }
[17:41:32.238]                       else if (inherits(cond, "warning")) {
[17:41:32.238]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.238]                         if (muffled) 
[17:41:32.238]                           invokeRestart("muffleWarning")
[17:41:32.238]                       }
[17:41:32.238]                       else if (inherits(cond, "condition")) {
[17:41:32.238]                         if (!is.null(pattern)) {
[17:41:32.238]                           computeRestarts <- base::computeRestarts
[17:41:32.238]                           grepl <- base::grepl
[17:41:32.238]                           restarts <- computeRestarts(cond)
[17:41:32.238]                           for (restart in restarts) {
[17:41:32.238]                             name <- restart$name
[17:41:32.238]                             if (is.null(name)) 
[17:41:32.238]                               next
[17:41:32.238]                             if (!grepl(pattern, name)) 
[17:41:32.238]                               next
[17:41:32.238]                             invokeRestart(restart)
[17:41:32.238]                             muffled <- TRUE
[17:41:32.238]                             break
[17:41:32.238]                           }
[17:41:32.238]                         }
[17:41:32.238]                       }
[17:41:32.238]                       invisible(muffled)
[17:41:32.238]                     }
[17:41:32.238]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.238]                   }
[17:41:32.238]                 }
[17:41:32.238]             }
[17:41:32.238]         }))
[17:41:32.238]     }, error = function(ex) {
[17:41:32.238]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.238]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.238]                 ...future.rng), started = ...future.startTime, 
[17:41:32.238]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.238]             version = "1.8"), class = "FutureResult")
[17:41:32.238]     }, finally = {
[17:41:32.238]         if (!identical(...future.workdir, getwd())) 
[17:41:32.238]             setwd(...future.workdir)
[17:41:32.238]         {
[17:41:32.238]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.238]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.238]             }
[17:41:32.238]             base::options(...future.oldOptions)
[17:41:32.238]             if (.Platform$OS.type == "windows") {
[17:41:32.238]                 old_names <- names(...future.oldEnvVars)
[17:41:32.238]                 envs <- base::Sys.getenv()
[17:41:32.238]                 names <- names(envs)
[17:41:32.238]                 common <- intersect(names, old_names)
[17:41:32.238]                 added <- setdiff(names, old_names)
[17:41:32.238]                 removed <- setdiff(old_names, names)
[17:41:32.238]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.238]                   envs[common]]
[17:41:32.238]                 NAMES <- toupper(changed)
[17:41:32.238]                 args <- list()
[17:41:32.238]                 for (kk in seq_along(NAMES)) {
[17:41:32.238]                   name <- changed[[kk]]
[17:41:32.238]                   NAME <- NAMES[[kk]]
[17:41:32.238]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.238]                     next
[17:41:32.238]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.238]                 }
[17:41:32.238]                 NAMES <- toupper(added)
[17:41:32.238]                 for (kk in seq_along(NAMES)) {
[17:41:32.238]                   name <- added[[kk]]
[17:41:32.238]                   NAME <- NAMES[[kk]]
[17:41:32.238]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.238]                     next
[17:41:32.238]                   args[[name]] <- ""
[17:41:32.238]                 }
[17:41:32.238]                 NAMES <- toupper(removed)
[17:41:32.238]                 for (kk in seq_along(NAMES)) {
[17:41:32.238]                   name <- removed[[kk]]
[17:41:32.238]                   NAME <- NAMES[[kk]]
[17:41:32.238]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.238]                     next
[17:41:32.238]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.238]                 }
[17:41:32.238]                 if (length(args) > 0) 
[17:41:32.238]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.238]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.238]             }
[17:41:32.238]             else {
[17:41:32.238]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.238]             }
[17:41:32.238]             {
[17:41:32.238]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.238]                   0L) {
[17:41:32.238]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.238]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.238]                   base::options(opts)
[17:41:32.238]                 }
[17:41:32.238]                 {
[17:41:32.238]                   {
[17:41:32.238]                     NULL
[17:41:32.238]                     RNGkind("Mersenne-Twister")
[17:41:32.238]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.238]                       inherits = FALSE)
[17:41:32.238]                   }
[17:41:32.238]                   options(future.plan = NULL)
[17:41:32.238]                   if (is.na(NA_character_)) 
[17:41:32.238]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.238]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.238]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.238]                   {
[17:41:32.238]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.238]                     if (!future$lazy) 
[17:41:32.238]                       future <- run(future)
[17:41:32.238]                     invisible(future)
[17:41:32.238]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.238]                 }
[17:41:32.238]             }
[17:41:32.238]         }
[17:41:32.238]     })
[17:41:32.238]     if (TRUE) {
[17:41:32.238]         base::sink(type = "output", split = FALSE)
[17:41:32.238]         if (TRUE) {
[17:41:32.238]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.238]         }
[17:41:32.238]         else {
[17:41:32.238]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.238]         }
[17:41:32.238]         base::close(...future.stdout)
[17:41:32.238]         ...future.stdout <- NULL
[17:41:32.238]     }
[17:41:32.238]     ...future.result$conditions <- ...future.conditions
[17:41:32.238]     ...future.result$finished <- base::Sys.time()
[17:41:32.238]     ...future.result
[17:41:32.238] }
[17:41:32.239] plan(): Setting new future strategy stack:
[17:41:32.239] List of future strategies:
[17:41:32.239] 1. sequential:
[17:41:32.239]    - args: function (..., envir = parent.frame())
[17:41:32.239]    - tweaked: FALSE
[17:41:32.239]    - call: NULL
[17:41:32.240] plan(): nbrOfWorkers() = 1
[17:41:32.241] plan(): Setting new future strategy stack:
[17:41:32.241] List of future strategies:
[17:41:32.241] 1. sequential:
[17:41:32.241]    - args: function (..., envir = parent.frame())
[17:41:32.241]    - tweaked: FALSE
[17:41:32.241]    - call: future::plan("sequential")
[17:41:32.241] plan(): nbrOfWorkers() = 1
[17:41:32.241] SequentialFuture started (and completed)
[17:41:32.241] signalConditions() ...
[17:41:32.242]  - include = ‘immediateCondition’
[17:41:32.242]  - exclude = 
[17:41:32.242]  - resignal = FALSE
[17:41:32.242]  - Number of conditions: 1
[17:41:32.242] signalConditions() ... done
[17:41:32.242] - Launch lazy future ... done
[17:41:32.242] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[17:41:32.242] getGlobalsAndPackages() ...
[17:41:32.243] Searching for globals...
[17:41:32.243] - globals found: [2] ‘{’, ‘stop’
[17:41:32.244] Searching for globals ... DONE
[17:41:32.244] Resolving globals: FALSE
[17:41:32.244] 
[17:41:32.244] 
[17:41:32.244] getGlobalsAndPackages() ... DONE
[17:41:32.244] run() for ‘Future’ ...
[17:41:32.244] - state: ‘created’
[17:41:32.245] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.245] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.245] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.245]   - Field: ‘label’
[17:41:32.245]   - Field: ‘local’
[17:41:32.245]   - Field: ‘owner’
[17:41:32.245]   - Field: ‘envir’
[17:41:32.245]   - Field: ‘packages’
[17:41:32.246]   - Field: ‘gc’
[17:41:32.246]   - Field: ‘conditions’
[17:41:32.246]   - Field: ‘expr’
[17:41:32.246]   - Field: ‘uuid’
[17:41:32.246]   - Field: ‘seed’
[17:41:32.246]   - Field: ‘version’
[17:41:32.246]   - Field: ‘result’
[17:41:32.246]   - Field: ‘asynchronous’
[17:41:32.246]   - Field: ‘calls’
[17:41:32.246]   - Field: ‘globals’
[17:41:32.246]   - Field: ‘stdout’
[17:41:32.247]   - Field: ‘earlySignal’
[17:41:32.247]   - Field: ‘lazy’
[17:41:32.247]   - Field: ‘state’
[17:41:32.247] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.247] - Launch lazy future ...
[17:41:32.247] Packages needed by the future expression (n = 0): <none>
[17:41:32.247] Packages needed by future strategies (n = 0): <none>
[17:41:32.248] {
[17:41:32.248]     {
[17:41:32.248]         {
[17:41:32.248]             ...future.startTime <- base::Sys.time()
[17:41:32.248]             {
[17:41:32.248]                 {
[17:41:32.248]                   {
[17:41:32.248]                     base::local({
[17:41:32.248]                       has_future <- base::requireNamespace("future", 
[17:41:32.248]                         quietly = TRUE)
[17:41:32.248]                       if (has_future) {
[17:41:32.248]                         ns <- base::getNamespace("future")
[17:41:32.248]                         version <- ns[[".package"]][["version"]]
[17:41:32.248]                         if (is.null(version)) 
[17:41:32.248]                           version <- utils::packageVersion("future")
[17:41:32.248]                       }
[17:41:32.248]                       else {
[17:41:32.248]                         version <- NULL
[17:41:32.248]                       }
[17:41:32.248]                       if (!has_future || version < "1.8.0") {
[17:41:32.248]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.248]                           "", base::R.version$version.string), 
[17:41:32.248]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.248]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.248]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.248]                             "release", "version")], collapse = " "), 
[17:41:32.248]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.248]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.248]                           info)
[17:41:32.248]                         info <- base::paste(info, collapse = "; ")
[17:41:32.248]                         if (!has_future) {
[17:41:32.248]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.248]                             info)
[17:41:32.248]                         }
[17:41:32.248]                         else {
[17:41:32.248]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.248]                             info, version)
[17:41:32.248]                         }
[17:41:32.248]                         base::stop(msg)
[17:41:32.248]                       }
[17:41:32.248]                     })
[17:41:32.248]                   }
[17:41:32.248]                   options(future.plan = NULL)
[17:41:32.248]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.248]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.248]                 }
[17:41:32.248]                 ...future.workdir <- getwd()
[17:41:32.248]             }
[17:41:32.248]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.248]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.248]         }
[17:41:32.248]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.248]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.248]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.248]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.248]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.248]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.248]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.248]             base::names(...future.oldOptions))
[17:41:32.248]     }
[17:41:32.248]     if (FALSE) {
[17:41:32.248]     }
[17:41:32.248]     else {
[17:41:32.248]         if (TRUE) {
[17:41:32.248]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.248]                 open = "w")
[17:41:32.248]         }
[17:41:32.248]         else {
[17:41:32.248]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.248]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.248]         }
[17:41:32.248]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.248]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.248]             base::sink(type = "output", split = FALSE)
[17:41:32.248]             base::close(...future.stdout)
[17:41:32.248]         }, add = TRUE)
[17:41:32.248]     }
[17:41:32.248]     ...future.frame <- base::sys.nframe()
[17:41:32.248]     ...future.conditions <- base::list()
[17:41:32.248]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.248]     if (FALSE) {
[17:41:32.248]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.248]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.248]     }
[17:41:32.248]     ...future.result <- base::tryCatch({
[17:41:32.248]         base::withCallingHandlers({
[17:41:32.248]             ...future.value <- base::withVisible(base::local({
[17:41:32.248]                 42L
[17:41:32.248]                 stop("Woops")
[17:41:32.248]             }))
[17:41:32.248]             future::FutureResult(value = ...future.value$value, 
[17:41:32.248]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.248]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.248]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.248]                     ...future.globalenv.names))
[17:41:32.248]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.248]         }, condition = base::local({
[17:41:32.248]             c <- base::c
[17:41:32.248]             inherits <- base::inherits
[17:41:32.248]             invokeRestart <- base::invokeRestart
[17:41:32.248]             length <- base::length
[17:41:32.248]             list <- base::list
[17:41:32.248]             seq.int <- base::seq.int
[17:41:32.248]             signalCondition <- base::signalCondition
[17:41:32.248]             sys.calls <- base::sys.calls
[17:41:32.248]             `[[` <- base::`[[`
[17:41:32.248]             `+` <- base::`+`
[17:41:32.248]             `<<-` <- base::`<<-`
[17:41:32.248]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.248]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.248]                   3L)]
[17:41:32.248]             }
[17:41:32.248]             function(cond) {
[17:41:32.248]                 is_error <- inherits(cond, "error")
[17:41:32.248]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.248]                   NULL)
[17:41:32.248]                 if (is_error) {
[17:41:32.248]                   sessionInformation <- function() {
[17:41:32.248]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.248]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.248]                       search = base::search(), system = base::Sys.info())
[17:41:32.248]                   }
[17:41:32.248]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.248]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.248]                     cond$call), session = sessionInformation(), 
[17:41:32.248]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.248]                   signalCondition(cond)
[17:41:32.248]                 }
[17:41:32.248]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.248]                 "immediateCondition"))) {
[17:41:32.248]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.248]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.248]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.248]                   if (TRUE && !signal) {
[17:41:32.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.248]                     {
[17:41:32.248]                       inherits <- base::inherits
[17:41:32.248]                       invokeRestart <- base::invokeRestart
[17:41:32.248]                       is.null <- base::is.null
[17:41:32.248]                       muffled <- FALSE
[17:41:32.248]                       if (inherits(cond, "message")) {
[17:41:32.248]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.248]                         if (muffled) 
[17:41:32.248]                           invokeRestart("muffleMessage")
[17:41:32.248]                       }
[17:41:32.248]                       else if (inherits(cond, "warning")) {
[17:41:32.248]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.248]                         if (muffled) 
[17:41:32.248]                           invokeRestart("muffleWarning")
[17:41:32.248]                       }
[17:41:32.248]                       else if (inherits(cond, "condition")) {
[17:41:32.248]                         if (!is.null(pattern)) {
[17:41:32.248]                           computeRestarts <- base::computeRestarts
[17:41:32.248]                           grepl <- base::grepl
[17:41:32.248]                           restarts <- computeRestarts(cond)
[17:41:32.248]                           for (restart in restarts) {
[17:41:32.248]                             name <- restart$name
[17:41:32.248]                             if (is.null(name)) 
[17:41:32.248]                               next
[17:41:32.248]                             if (!grepl(pattern, name)) 
[17:41:32.248]                               next
[17:41:32.248]                             invokeRestart(restart)
[17:41:32.248]                             muffled <- TRUE
[17:41:32.248]                             break
[17:41:32.248]                           }
[17:41:32.248]                         }
[17:41:32.248]                       }
[17:41:32.248]                       invisible(muffled)
[17:41:32.248]                     }
[17:41:32.248]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.248]                   }
[17:41:32.248]                 }
[17:41:32.248]                 else {
[17:41:32.248]                   if (TRUE) {
[17:41:32.248]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.248]                     {
[17:41:32.248]                       inherits <- base::inherits
[17:41:32.248]                       invokeRestart <- base::invokeRestart
[17:41:32.248]                       is.null <- base::is.null
[17:41:32.248]                       muffled <- FALSE
[17:41:32.248]                       if (inherits(cond, "message")) {
[17:41:32.248]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.248]                         if (muffled) 
[17:41:32.248]                           invokeRestart("muffleMessage")
[17:41:32.248]                       }
[17:41:32.248]                       else if (inherits(cond, "warning")) {
[17:41:32.248]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.248]                         if (muffled) 
[17:41:32.248]                           invokeRestart("muffleWarning")
[17:41:32.248]                       }
[17:41:32.248]                       else if (inherits(cond, "condition")) {
[17:41:32.248]                         if (!is.null(pattern)) {
[17:41:32.248]                           computeRestarts <- base::computeRestarts
[17:41:32.248]                           grepl <- base::grepl
[17:41:32.248]                           restarts <- computeRestarts(cond)
[17:41:32.248]                           for (restart in restarts) {
[17:41:32.248]                             name <- restart$name
[17:41:32.248]                             if (is.null(name)) 
[17:41:32.248]                               next
[17:41:32.248]                             if (!grepl(pattern, name)) 
[17:41:32.248]                               next
[17:41:32.248]                             invokeRestart(restart)
[17:41:32.248]                             muffled <- TRUE
[17:41:32.248]                             break
[17:41:32.248]                           }
[17:41:32.248]                         }
[17:41:32.248]                       }
[17:41:32.248]                       invisible(muffled)
[17:41:32.248]                     }
[17:41:32.248]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.248]                   }
[17:41:32.248]                 }
[17:41:32.248]             }
[17:41:32.248]         }))
[17:41:32.248]     }, error = function(ex) {
[17:41:32.248]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.248]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.248]                 ...future.rng), started = ...future.startTime, 
[17:41:32.248]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.248]             version = "1.8"), class = "FutureResult")
[17:41:32.248]     }, finally = {
[17:41:32.248]         if (!identical(...future.workdir, getwd())) 
[17:41:32.248]             setwd(...future.workdir)
[17:41:32.248]         {
[17:41:32.248]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.248]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.248]             }
[17:41:32.248]             base::options(...future.oldOptions)
[17:41:32.248]             if (.Platform$OS.type == "windows") {
[17:41:32.248]                 old_names <- names(...future.oldEnvVars)
[17:41:32.248]                 envs <- base::Sys.getenv()
[17:41:32.248]                 names <- names(envs)
[17:41:32.248]                 common <- intersect(names, old_names)
[17:41:32.248]                 added <- setdiff(names, old_names)
[17:41:32.248]                 removed <- setdiff(old_names, names)
[17:41:32.248]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.248]                   envs[common]]
[17:41:32.248]                 NAMES <- toupper(changed)
[17:41:32.248]                 args <- list()
[17:41:32.248]                 for (kk in seq_along(NAMES)) {
[17:41:32.248]                   name <- changed[[kk]]
[17:41:32.248]                   NAME <- NAMES[[kk]]
[17:41:32.248]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.248]                     next
[17:41:32.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.248]                 }
[17:41:32.248]                 NAMES <- toupper(added)
[17:41:32.248]                 for (kk in seq_along(NAMES)) {
[17:41:32.248]                   name <- added[[kk]]
[17:41:32.248]                   NAME <- NAMES[[kk]]
[17:41:32.248]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.248]                     next
[17:41:32.248]                   args[[name]] <- ""
[17:41:32.248]                 }
[17:41:32.248]                 NAMES <- toupper(removed)
[17:41:32.248]                 for (kk in seq_along(NAMES)) {
[17:41:32.248]                   name <- removed[[kk]]
[17:41:32.248]                   NAME <- NAMES[[kk]]
[17:41:32.248]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.248]                     next
[17:41:32.248]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.248]                 }
[17:41:32.248]                 if (length(args) > 0) 
[17:41:32.248]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.248]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.248]             }
[17:41:32.248]             else {
[17:41:32.248]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.248]             }
[17:41:32.248]             {
[17:41:32.248]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.248]                   0L) {
[17:41:32.248]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.248]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.248]                   base::options(opts)
[17:41:32.248]                 }
[17:41:32.248]                 {
[17:41:32.248]                   {
[17:41:32.248]                     NULL
[17:41:32.248]                     RNGkind("Mersenne-Twister")
[17:41:32.248]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.248]                       inherits = FALSE)
[17:41:32.248]                   }
[17:41:32.248]                   options(future.plan = NULL)
[17:41:32.248]                   if (is.na(NA_character_)) 
[17:41:32.248]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.248]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.248]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.248]                   {
[17:41:32.248]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.248]                     if (!future$lazy) 
[17:41:32.248]                       future <- run(future)
[17:41:32.248]                     invisible(future)
[17:41:32.248]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.248]                 }
[17:41:32.248]             }
[17:41:32.248]         }
[17:41:32.248]     })
[17:41:32.248]     if (TRUE) {
[17:41:32.248]         base::sink(type = "output", split = FALSE)
[17:41:32.248]         if (TRUE) {
[17:41:32.248]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.248]         }
[17:41:32.248]         else {
[17:41:32.248]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.248]         }
[17:41:32.248]         base::close(...future.stdout)
[17:41:32.248]         ...future.stdout <- NULL
[17:41:32.248]     }
[17:41:32.248]     ...future.result$conditions <- ...future.conditions
[17:41:32.248]     ...future.result$finished <- base::Sys.time()
[17:41:32.248]     ...future.result
[17:41:32.248] }
[17:41:32.249] plan(): Setting new future strategy stack:
[17:41:32.250] List of future strategies:
[17:41:32.250] 1. sequential:
[17:41:32.250]    - args: function (..., envir = parent.frame())
[17:41:32.250]    - tweaked: FALSE
[17:41:32.250]    - call: NULL
[17:41:32.250] plan(): nbrOfWorkers() = 1
[17:41:32.251] plan(): Setting new future strategy stack:
[17:41:32.251] List of future strategies:
[17:41:32.251] 1. sequential:
[17:41:32.251]    - args: function (..., envir = parent.frame())
[17:41:32.251]    - tweaked: FALSE
[17:41:32.251]    - call: future::plan("sequential")
[17:41:32.251] plan(): nbrOfWorkers() = 1
[17:41:32.251] SequentialFuture started (and completed)
[17:41:32.252] signalConditions() ...
[17:41:32.252]  - include = ‘immediateCondition’
[17:41:32.252]  - exclude = 
[17:41:32.252]  - resignal = FALSE
[17:41:32.252]  - Number of conditions: 1
[17:41:32.252] signalConditions() ... done
[17:41:32.252] - Launch lazy future ... done
[17:41:32.252] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[17:41:32.253] resolved() for ‘SequentialFuture’ ...
[17:41:32.253] - state: ‘finished’
[17:41:32.253] - run: TRUE
[17:41:32.253] - result: ‘FutureResult’
[17:41:32.253] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[17:41:32.254] getGlobalsAndPackages() ...
[17:41:32.254] Searching for globals...
[17:41:32.255] - globals found: [2] ‘{’, ‘stop’
[17:41:32.255] Searching for globals ... DONE
[17:41:32.256] Resolving globals: FALSE
[17:41:32.256] 
[17:41:32.256] 
[17:41:32.256] getGlobalsAndPackages() ... DONE
[17:41:32.256] run() for ‘Future’ ...
[17:41:32.256] - state: ‘created’
[17:41:32.257] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.257] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.257] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.259]   - Field: ‘label’
[17:41:32.259]   - Field: ‘local’
[17:41:32.259]   - Field: ‘owner’
[17:41:32.259]   - Field: ‘envir’
[17:41:32.259]   - Field: ‘packages’
[17:41:32.259]   - Field: ‘gc’
[17:41:32.259]   - Field: ‘conditions’
[17:41:32.259]   - Field: ‘expr’
[17:41:32.259]   - Field: ‘uuid’
[17:41:32.260]   - Field: ‘seed’
[17:41:32.260]   - Field: ‘version’
[17:41:32.260]   - Field: ‘result’
[17:41:32.260]   - Field: ‘asynchronous’
[17:41:32.260]   - Field: ‘calls’
[17:41:32.260]   - Field: ‘globals’
[17:41:32.260]   - Field: ‘stdout’
[17:41:32.260]   - Field: ‘earlySignal’
[17:41:32.260]   - Field: ‘lazy’
[17:41:32.260]   - Field: ‘state’
[17:41:32.261] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.261] - Launch lazy future ...
[17:41:32.261] Packages needed by the future expression (n = 0): <none>
[17:41:32.261] Packages needed by future strategies (n = 0): <none>
[17:41:32.261] {
[17:41:32.261]     {
[17:41:32.261]         {
[17:41:32.261]             ...future.startTime <- base::Sys.time()
[17:41:32.261]             {
[17:41:32.261]                 {
[17:41:32.261]                   {
[17:41:32.261]                     base::local({
[17:41:32.261]                       has_future <- base::requireNamespace("future", 
[17:41:32.261]                         quietly = TRUE)
[17:41:32.261]                       if (has_future) {
[17:41:32.261]                         ns <- base::getNamespace("future")
[17:41:32.261]                         version <- ns[[".package"]][["version"]]
[17:41:32.261]                         if (is.null(version)) 
[17:41:32.261]                           version <- utils::packageVersion("future")
[17:41:32.261]                       }
[17:41:32.261]                       else {
[17:41:32.261]                         version <- NULL
[17:41:32.261]                       }
[17:41:32.261]                       if (!has_future || version < "1.8.0") {
[17:41:32.261]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.261]                           "", base::R.version$version.string), 
[17:41:32.261]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.261]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.261]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.261]                             "release", "version")], collapse = " "), 
[17:41:32.261]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.261]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.261]                           info)
[17:41:32.261]                         info <- base::paste(info, collapse = "; ")
[17:41:32.261]                         if (!has_future) {
[17:41:32.261]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.261]                             info)
[17:41:32.261]                         }
[17:41:32.261]                         else {
[17:41:32.261]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.261]                             info, version)
[17:41:32.261]                         }
[17:41:32.261]                         base::stop(msg)
[17:41:32.261]                       }
[17:41:32.261]                     })
[17:41:32.261]                   }
[17:41:32.261]                   options(future.plan = NULL)
[17:41:32.261]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.261]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.261]                 }
[17:41:32.261]                 ...future.workdir <- getwd()
[17:41:32.261]             }
[17:41:32.261]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.261]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.261]         }
[17:41:32.261]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.261]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.261]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.261]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.261]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.261]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.261]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.261]             base::names(...future.oldOptions))
[17:41:32.261]     }
[17:41:32.261]     if (FALSE) {
[17:41:32.261]     }
[17:41:32.261]     else {
[17:41:32.261]         if (TRUE) {
[17:41:32.261]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.261]                 open = "w")
[17:41:32.261]         }
[17:41:32.261]         else {
[17:41:32.261]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.261]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.261]         }
[17:41:32.261]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.261]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.261]             base::sink(type = "output", split = FALSE)
[17:41:32.261]             base::close(...future.stdout)
[17:41:32.261]         }, add = TRUE)
[17:41:32.261]     }
[17:41:32.261]     ...future.frame <- base::sys.nframe()
[17:41:32.261]     ...future.conditions <- base::list()
[17:41:32.261]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.261]     if (FALSE) {
[17:41:32.261]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.261]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.261]     }
[17:41:32.261]     ...future.result <- base::tryCatch({
[17:41:32.261]         base::withCallingHandlers({
[17:41:32.261]             ...future.value <- base::withVisible(base::local({
[17:41:32.261]                 42L
[17:41:32.261]                 stop("Woops")
[17:41:32.261]             }))
[17:41:32.261]             future::FutureResult(value = ...future.value$value, 
[17:41:32.261]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.261]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.261]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.261]                     ...future.globalenv.names))
[17:41:32.261]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.261]         }, condition = base::local({
[17:41:32.261]             c <- base::c
[17:41:32.261]             inherits <- base::inherits
[17:41:32.261]             invokeRestart <- base::invokeRestart
[17:41:32.261]             length <- base::length
[17:41:32.261]             list <- base::list
[17:41:32.261]             seq.int <- base::seq.int
[17:41:32.261]             signalCondition <- base::signalCondition
[17:41:32.261]             sys.calls <- base::sys.calls
[17:41:32.261]             `[[` <- base::`[[`
[17:41:32.261]             `+` <- base::`+`
[17:41:32.261]             `<<-` <- base::`<<-`
[17:41:32.261]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.261]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.261]                   3L)]
[17:41:32.261]             }
[17:41:32.261]             function(cond) {
[17:41:32.261]                 is_error <- inherits(cond, "error")
[17:41:32.261]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.261]                   NULL)
[17:41:32.261]                 if (is_error) {
[17:41:32.261]                   sessionInformation <- function() {
[17:41:32.261]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.261]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.261]                       search = base::search(), system = base::Sys.info())
[17:41:32.261]                   }
[17:41:32.261]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.261]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.261]                     cond$call), session = sessionInformation(), 
[17:41:32.261]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.261]                   signalCondition(cond)
[17:41:32.261]                 }
[17:41:32.261]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.261]                 "immediateCondition"))) {
[17:41:32.261]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.261]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.261]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.261]                   if (TRUE && !signal) {
[17:41:32.261]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.261]                     {
[17:41:32.261]                       inherits <- base::inherits
[17:41:32.261]                       invokeRestart <- base::invokeRestart
[17:41:32.261]                       is.null <- base::is.null
[17:41:32.261]                       muffled <- FALSE
[17:41:32.261]                       if (inherits(cond, "message")) {
[17:41:32.261]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.261]                         if (muffled) 
[17:41:32.261]                           invokeRestart("muffleMessage")
[17:41:32.261]                       }
[17:41:32.261]                       else if (inherits(cond, "warning")) {
[17:41:32.261]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.261]                         if (muffled) 
[17:41:32.261]                           invokeRestart("muffleWarning")
[17:41:32.261]                       }
[17:41:32.261]                       else if (inherits(cond, "condition")) {
[17:41:32.261]                         if (!is.null(pattern)) {
[17:41:32.261]                           computeRestarts <- base::computeRestarts
[17:41:32.261]                           grepl <- base::grepl
[17:41:32.261]                           restarts <- computeRestarts(cond)
[17:41:32.261]                           for (restart in restarts) {
[17:41:32.261]                             name <- restart$name
[17:41:32.261]                             if (is.null(name)) 
[17:41:32.261]                               next
[17:41:32.261]                             if (!grepl(pattern, name)) 
[17:41:32.261]                               next
[17:41:32.261]                             invokeRestart(restart)
[17:41:32.261]                             muffled <- TRUE
[17:41:32.261]                             break
[17:41:32.261]                           }
[17:41:32.261]                         }
[17:41:32.261]                       }
[17:41:32.261]                       invisible(muffled)
[17:41:32.261]                     }
[17:41:32.261]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.261]                   }
[17:41:32.261]                 }
[17:41:32.261]                 else {
[17:41:32.261]                   if (TRUE) {
[17:41:32.261]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.261]                     {
[17:41:32.261]                       inherits <- base::inherits
[17:41:32.261]                       invokeRestart <- base::invokeRestart
[17:41:32.261]                       is.null <- base::is.null
[17:41:32.261]                       muffled <- FALSE
[17:41:32.261]                       if (inherits(cond, "message")) {
[17:41:32.261]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.261]                         if (muffled) 
[17:41:32.261]                           invokeRestart("muffleMessage")
[17:41:32.261]                       }
[17:41:32.261]                       else if (inherits(cond, "warning")) {
[17:41:32.261]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.261]                         if (muffled) 
[17:41:32.261]                           invokeRestart("muffleWarning")
[17:41:32.261]                       }
[17:41:32.261]                       else if (inherits(cond, "condition")) {
[17:41:32.261]                         if (!is.null(pattern)) {
[17:41:32.261]                           computeRestarts <- base::computeRestarts
[17:41:32.261]                           grepl <- base::grepl
[17:41:32.261]                           restarts <- computeRestarts(cond)
[17:41:32.261]                           for (restart in restarts) {
[17:41:32.261]                             name <- restart$name
[17:41:32.261]                             if (is.null(name)) 
[17:41:32.261]                               next
[17:41:32.261]                             if (!grepl(pattern, name)) 
[17:41:32.261]                               next
[17:41:32.261]                             invokeRestart(restart)
[17:41:32.261]                             muffled <- TRUE
[17:41:32.261]                             break
[17:41:32.261]                           }
[17:41:32.261]                         }
[17:41:32.261]                       }
[17:41:32.261]                       invisible(muffled)
[17:41:32.261]                     }
[17:41:32.261]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.261]                   }
[17:41:32.261]                 }
[17:41:32.261]             }
[17:41:32.261]         }))
[17:41:32.261]     }, error = function(ex) {
[17:41:32.261]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.261]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.261]                 ...future.rng), started = ...future.startTime, 
[17:41:32.261]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.261]             version = "1.8"), class = "FutureResult")
[17:41:32.261]     }, finally = {
[17:41:32.261]         if (!identical(...future.workdir, getwd())) 
[17:41:32.261]             setwd(...future.workdir)
[17:41:32.261]         {
[17:41:32.261]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.261]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.261]             }
[17:41:32.261]             base::options(...future.oldOptions)
[17:41:32.261]             if (.Platform$OS.type == "windows") {
[17:41:32.261]                 old_names <- names(...future.oldEnvVars)
[17:41:32.261]                 envs <- base::Sys.getenv()
[17:41:32.261]                 names <- names(envs)
[17:41:32.261]                 common <- intersect(names, old_names)
[17:41:32.261]                 added <- setdiff(names, old_names)
[17:41:32.261]                 removed <- setdiff(old_names, names)
[17:41:32.261]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.261]                   envs[common]]
[17:41:32.261]                 NAMES <- toupper(changed)
[17:41:32.261]                 args <- list()
[17:41:32.261]                 for (kk in seq_along(NAMES)) {
[17:41:32.261]                   name <- changed[[kk]]
[17:41:32.261]                   NAME <- NAMES[[kk]]
[17:41:32.261]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.261]                     next
[17:41:32.261]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.261]                 }
[17:41:32.261]                 NAMES <- toupper(added)
[17:41:32.261]                 for (kk in seq_along(NAMES)) {
[17:41:32.261]                   name <- added[[kk]]
[17:41:32.261]                   NAME <- NAMES[[kk]]
[17:41:32.261]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.261]                     next
[17:41:32.261]                   args[[name]] <- ""
[17:41:32.261]                 }
[17:41:32.261]                 NAMES <- toupper(removed)
[17:41:32.261]                 for (kk in seq_along(NAMES)) {
[17:41:32.261]                   name <- removed[[kk]]
[17:41:32.261]                   NAME <- NAMES[[kk]]
[17:41:32.261]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.261]                     next
[17:41:32.261]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.261]                 }
[17:41:32.261]                 if (length(args) > 0) 
[17:41:32.261]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.261]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.261]             }
[17:41:32.261]             else {
[17:41:32.261]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.261]             }
[17:41:32.261]             {
[17:41:32.261]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.261]                   0L) {
[17:41:32.261]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.261]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.261]                   base::options(opts)
[17:41:32.261]                 }
[17:41:32.261]                 {
[17:41:32.261]                   {
[17:41:32.261]                     NULL
[17:41:32.261]                     RNGkind("Mersenne-Twister")
[17:41:32.261]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.261]                       inherits = FALSE)
[17:41:32.261]                   }
[17:41:32.261]                   options(future.plan = NULL)
[17:41:32.261]                   if (is.na(NA_character_)) 
[17:41:32.261]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.261]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.261]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.261]                   {
[17:41:32.261]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.261]                     if (!future$lazy) 
[17:41:32.261]                       future <- run(future)
[17:41:32.261]                     invisible(future)
[17:41:32.261]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.261]                 }
[17:41:32.261]             }
[17:41:32.261]         }
[17:41:32.261]     })
[17:41:32.261]     if (TRUE) {
[17:41:32.261]         base::sink(type = "output", split = FALSE)
[17:41:32.261]         if (TRUE) {
[17:41:32.261]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.261]         }
[17:41:32.261]         else {
[17:41:32.261]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.261]         }
[17:41:32.261]         base::close(...future.stdout)
[17:41:32.261]         ...future.stdout <- NULL
[17:41:32.261]     }
[17:41:32.261]     ...future.result$conditions <- ...future.conditions
[17:41:32.261]     ...future.result$finished <- base::Sys.time()
[17:41:32.261]     ...future.result
[17:41:32.261] }
[17:41:32.263] plan(): Setting new future strategy stack:
[17:41:32.263] List of future strategies:
[17:41:32.263] 1. sequential:
[17:41:32.263]    - args: function (..., envir = parent.frame())
[17:41:32.263]    - tweaked: FALSE
[17:41:32.263]    - call: NULL
[17:41:32.264] plan(): nbrOfWorkers() = 1
[17:41:32.265] plan(): Setting new future strategy stack:
[17:41:32.265] List of future strategies:
[17:41:32.265] 1. sequential:
[17:41:32.265]    - args: function (..., envir = parent.frame())
[17:41:32.265]    - tweaked: FALSE
[17:41:32.265]    - call: future::plan("sequential")
[17:41:32.265] plan(): nbrOfWorkers() = 1
[17:41:32.265] SequentialFuture started (and completed)
[17:41:32.265] signalConditions() ...
[17:41:32.265]  - include = ‘immediateCondition’
[17:41:32.266]  - exclude = 
[17:41:32.266]  - resignal = FALSE
[17:41:32.266]  - Number of conditions: 1
[17:41:32.266] signalConditions() ... done
[17:41:32.266] - Launch lazy future ... done
[17:41:32.266] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[17:41:32.266] getGlobalsAndPackages() ...
[17:41:32.267] Searching for globals...
[17:41:32.267] - globals found: [2] ‘{’, ‘stop’
[17:41:32.268] Searching for globals ... DONE
[17:41:32.268] Resolving globals: FALSE
[17:41:32.268] 
[17:41:32.268] 
[17:41:32.268] getGlobalsAndPackages() ... DONE
[17:41:32.268] run() for ‘Future’ ...
[17:41:32.269] - state: ‘created’
[17:41:32.269] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.269] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.269] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.269]   - Field: ‘label’
[17:41:32.269]   - Field: ‘local’
[17:41:32.269]   - Field: ‘owner’
[17:41:32.269]   - Field: ‘envir’
[17:41:32.270]   - Field: ‘packages’
[17:41:32.270]   - Field: ‘gc’
[17:41:32.270]   - Field: ‘conditions’
[17:41:32.270]   - Field: ‘expr’
[17:41:32.270]   - Field: ‘uuid’
[17:41:32.270]   - Field: ‘seed’
[17:41:32.270]   - Field: ‘version’
[17:41:32.270]   - Field: ‘result’
[17:41:32.270]   - Field: ‘asynchronous’
[17:41:32.270]   - Field: ‘calls’
[17:41:32.270]   - Field: ‘globals’
[17:41:32.271]   - Field: ‘stdout’
[17:41:32.271]   - Field: ‘earlySignal’
[17:41:32.271]   - Field: ‘lazy’
[17:41:32.271]   - Field: ‘state’
[17:41:32.271] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.271] - Launch lazy future ...
[17:41:32.271] Packages needed by the future expression (n = 0): <none>
[17:41:32.271] Packages needed by future strategies (n = 0): <none>
[17:41:32.272] {
[17:41:32.272]     {
[17:41:32.272]         {
[17:41:32.272]             ...future.startTime <- base::Sys.time()
[17:41:32.272]             {
[17:41:32.272]                 {
[17:41:32.272]                   {
[17:41:32.272]                     base::local({
[17:41:32.272]                       has_future <- base::requireNamespace("future", 
[17:41:32.272]                         quietly = TRUE)
[17:41:32.272]                       if (has_future) {
[17:41:32.272]                         ns <- base::getNamespace("future")
[17:41:32.272]                         version <- ns[[".package"]][["version"]]
[17:41:32.272]                         if (is.null(version)) 
[17:41:32.272]                           version <- utils::packageVersion("future")
[17:41:32.272]                       }
[17:41:32.272]                       else {
[17:41:32.272]                         version <- NULL
[17:41:32.272]                       }
[17:41:32.272]                       if (!has_future || version < "1.8.0") {
[17:41:32.272]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.272]                           "", base::R.version$version.string), 
[17:41:32.272]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.272]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.272]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.272]                             "release", "version")], collapse = " "), 
[17:41:32.272]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.272]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.272]                           info)
[17:41:32.272]                         info <- base::paste(info, collapse = "; ")
[17:41:32.272]                         if (!has_future) {
[17:41:32.272]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.272]                             info)
[17:41:32.272]                         }
[17:41:32.272]                         else {
[17:41:32.272]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.272]                             info, version)
[17:41:32.272]                         }
[17:41:32.272]                         base::stop(msg)
[17:41:32.272]                       }
[17:41:32.272]                     })
[17:41:32.272]                   }
[17:41:32.272]                   options(future.plan = NULL)
[17:41:32.272]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.272]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.272]                 }
[17:41:32.272]                 ...future.workdir <- getwd()
[17:41:32.272]             }
[17:41:32.272]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.272]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.272]         }
[17:41:32.272]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.272]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.272]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.272]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.272]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.272]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.272]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.272]             base::names(...future.oldOptions))
[17:41:32.272]     }
[17:41:32.272]     if (FALSE) {
[17:41:32.272]     }
[17:41:32.272]     else {
[17:41:32.272]         if (TRUE) {
[17:41:32.272]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.272]                 open = "w")
[17:41:32.272]         }
[17:41:32.272]         else {
[17:41:32.272]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.272]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.272]         }
[17:41:32.272]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.272]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.272]             base::sink(type = "output", split = FALSE)
[17:41:32.272]             base::close(...future.stdout)
[17:41:32.272]         }, add = TRUE)
[17:41:32.272]     }
[17:41:32.272]     ...future.frame <- base::sys.nframe()
[17:41:32.272]     ...future.conditions <- base::list()
[17:41:32.272]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.272]     if (FALSE) {
[17:41:32.272]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.272]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.272]     }
[17:41:32.272]     ...future.result <- base::tryCatch({
[17:41:32.272]         base::withCallingHandlers({
[17:41:32.272]             ...future.value <- base::withVisible(base::local({
[17:41:32.272]                 42L
[17:41:32.272]                 stop("Woops")
[17:41:32.272]             }))
[17:41:32.272]             future::FutureResult(value = ...future.value$value, 
[17:41:32.272]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.272]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.272]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.272]                     ...future.globalenv.names))
[17:41:32.272]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.272]         }, condition = base::local({
[17:41:32.272]             c <- base::c
[17:41:32.272]             inherits <- base::inherits
[17:41:32.272]             invokeRestart <- base::invokeRestart
[17:41:32.272]             length <- base::length
[17:41:32.272]             list <- base::list
[17:41:32.272]             seq.int <- base::seq.int
[17:41:32.272]             signalCondition <- base::signalCondition
[17:41:32.272]             sys.calls <- base::sys.calls
[17:41:32.272]             `[[` <- base::`[[`
[17:41:32.272]             `+` <- base::`+`
[17:41:32.272]             `<<-` <- base::`<<-`
[17:41:32.272]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.272]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.272]                   3L)]
[17:41:32.272]             }
[17:41:32.272]             function(cond) {
[17:41:32.272]                 is_error <- inherits(cond, "error")
[17:41:32.272]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.272]                   NULL)
[17:41:32.272]                 if (is_error) {
[17:41:32.272]                   sessionInformation <- function() {
[17:41:32.272]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.272]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.272]                       search = base::search(), system = base::Sys.info())
[17:41:32.272]                   }
[17:41:32.272]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.272]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.272]                     cond$call), session = sessionInformation(), 
[17:41:32.272]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.272]                   signalCondition(cond)
[17:41:32.272]                 }
[17:41:32.272]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.272]                 "immediateCondition"))) {
[17:41:32.272]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.272]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.272]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.272]                   if (TRUE && !signal) {
[17:41:32.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.272]                     {
[17:41:32.272]                       inherits <- base::inherits
[17:41:32.272]                       invokeRestart <- base::invokeRestart
[17:41:32.272]                       is.null <- base::is.null
[17:41:32.272]                       muffled <- FALSE
[17:41:32.272]                       if (inherits(cond, "message")) {
[17:41:32.272]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.272]                         if (muffled) 
[17:41:32.272]                           invokeRestart("muffleMessage")
[17:41:32.272]                       }
[17:41:32.272]                       else if (inherits(cond, "warning")) {
[17:41:32.272]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.272]                         if (muffled) 
[17:41:32.272]                           invokeRestart("muffleWarning")
[17:41:32.272]                       }
[17:41:32.272]                       else if (inherits(cond, "condition")) {
[17:41:32.272]                         if (!is.null(pattern)) {
[17:41:32.272]                           computeRestarts <- base::computeRestarts
[17:41:32.272]                           grepl <- base::grepl
[17:41:32.272]                           restarts <- computeRestarts(cond)
[17:41:32.272]                           for (restart in restarts) {
[17:41:32.272]                             name <- restart$name
[17:41:32.272]                             if (is.null(name)) 
[17:41:32.272]                               next
[17:41:32.272]                             if (!grepl(pattern, name)) 
[17:41:32.272]                               next
[17:41:32.272]                             invokeRestart(restart)
[17:41:32.272]                             muffled <- TRUE
[17:41:32.272]                             break
[17:41:32.272]                           }
[17:41:32.272]                         }
[17:41:32.272]                       }
[17:41:32.272]                       invisible(muffled)
[17:41:32.272]                     }
[17:41:32.272]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.272]                   }
[17:41:32.272]                 }
[17:41:32.272]                 else {
[17:41:32.272]                   if (TRUE) {
[17:41:32.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.272]                     {
[17:41:32.272]                       inherits <- base::inherits
[17:41:32.272]                       invokeRestart <- base::invokeRestart
[17:41:32.272]                       is.null <- base::is.null
[17:41:32.272]                       muffled <- FALSE
[17:41:32.272]                       if (inherits(cond, "message")) {
[17:41:32.272]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.272]                         if (muffled) 
[17:41:32.272]                           invokeRestart("muffleMessage")
[17:41:32.272]                       }
[17:41:32.272]                       else if (inherits(cond, "warning")) {
[17:41:32.272]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.272]                         if (muffled) 
[17:41:32.272]                           invokeRestart("muffleWarning")
[17:41:32.272]                       }
[17:41:32.272]                       else if (inherits(cond, "condition")) {
[17:41:32.272]                         if (!is.null(pattern)) {
[17:41:32.272]                           computeRestarts <- base::computeRestarts
[17:41:32.272]                           grepl <- base::grepl
[17:41:32.272]                           restarts <- computeRestarts(cond)
[17:41:32.272]                           for (restart in restarts) {
[17:41:32.272]                             name <- restart$name
[17:41:32.272]                             if (is.null(name)) 
[17:41:32.272]                               next
[17:41:32.272]                             if (!grepl(pattern, name)) 
[17:41:32.272]                               next
[17:41:32.272]                             invokeRestart(restart)
[17:41:32.272]                             muffled <- TRUE
[17:41:32.272]                             break
[17:41:32.272]                           }
[17:41:32.272]                         }
[17:41:32.272]                       }
[17:41:32.272]                       invisible(muffled)
[17:41:32.272]                     }
[17:41:32.272]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.272]                   }
[17:41:32.272]                 }
[17:41:32.272]             }
[17:41:32.272]         }))
[17:41:32.272]     }, error = function(ex) {
[17:41:32.272]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.272]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.272]                 ...future.rng), started = ...future.startTime, 
[17:41:32.272]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.272]             version = "1.8"), class = "FutureResult")
[17:41:32.272]     }, finally = {
[17:41:32.272]         if (!identical(...future.workdir, getwd())) 
[17:41:32.272]             setwd(...future.workdir)
[17:41:32.272]         {
[17:41:32.272]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.272]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.272]             }
[17:41:32.272]             base::options(...future.oldOptions)
[17:41:32.272]             if (.Platform$OS.type == "windows") {
[17:41:32.272]                 old_names <- names(...future.oldEnvVars)
[17:41:32.272]                 envs <- base::Sys.getenv()
[17:41:32.272]                 names <- names(envs)
[17:41:32.272]                 common <- intersect(names, old_names)
[17:41:32.272]                 added <- setdiff(names, old_names)
[17:41:32.272]                 removed <- setdiff(old_names, names)
[17:41:32.272]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.272]                   envs[common]]
[17:41:32.272]                 NAMES <- toupper(changed)
[17:41:32.272]                 args <- list()
[17:41:32.272]                 for (kk in seq_along(NAMES)) {
[17:41:32.272]                   name <- changed[[kk]]
[17:41:32.272]                   NAME <- NAMES[[kk]]
[17:41:32.272]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.272]                     next
[17:41:32.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.272]                 }
[17:41:32.272]                 NAMES <- toupper(added)
[17:41:32.272]                 for (kk in seq_along(NAMES)) {
[17:41:32.272]                   name <- added[[kk]]
[17:41:32.272]                   NAME <- NAMES[[kk]]
[17:41:32.272]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.272]                     next
[17:41:32.272]                   args[[name]] <- ""
[17:41:32.272]                 }
[17:41:32.272]                 NAMES <- toupper(removed)
[17:41:32.272]                 for (kk in seq_along(NAMES)) {
[17:41:32.272]                   name <- removed[[kk]]
[17:41:32.272]                   NAME <- NAMES[[kk]]
[17:41:32.272]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.272]                     next
[17:41:32.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.272]                 }
[17:41:32.272]                 if (length(args) > 0) 
[17:41:32.272]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.272]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.272]             }
[17:41:32.272]             else {
[17:41:32.272]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.272]             }
[17:41:32.272]             {
[17:41:32.272]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.272]                   0L) {
[17:41:32.272]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.272]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.272]                   base::options(opts)
[17:41:32.272]                 }
[17:41:32.272]                 {
[17:41:32.272]                   {
[17:41:32.272]                     NULL
[17:41:32.272]                     RNGkind("Mersenne-Twister")
[17:41:32.272]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.272]                       inherits = FALSE)
[17:41:32.272]                   }
[17:41:32.272]                   options(future.plan = NULL)
[17:41:32.272]                   if (is.na(NA_character_)) 
[17:41:32.272]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.272]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.272]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.272]                   {
[17:41:32.272]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.272]                     if (!future$lazy) 
[17:41:32.272]                       future <- run(future)
[17:41:32.272]                     invisible(future)
[17:41:32.272]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.272]                 }
[17:41:32.272]             }
[17:41:32.272]         }
[17:41:32.272]     })
[17:41:32.272]     if (TRUE) {
[17:41:32.272]         base::sink(type = "output", split = FALSE)
[17:41:32.272]         if (TRUE) {
[17:41:32.272]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.272]         }
[17:41:32.272]         else {
[17:41:32.272]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.272]         }
[17:41:32.272]         base::close(...future.stdout)
[17:41:32.272]         ...future.stdout <- NULL
[17:41:32.272]     }
[17:41:32.272]     ...future.result$conditions <- ...future.conditions
[17:41:32.272]     ...future.result$finished <- base::Sys.time()
[17:41:32.272]     ...future.result
[17:41:32.272] }
[17:41:32.274] plan(): Setting new future strategy stack:
[17:41:32.274] List of future strategies:
[17:41:32.274] 1. sequential:
[17:41:32.274]    - args: function (..., envir = parent.frame())
[17:41:32.274]    - tweaked: FALSE
[17:41:32.274]    - call: NULL
[17:41:32.274] plan(): nbrOfWorkers() = 1
[17:41:32.275] plan(): Setting new future strategy stack:
[17:41:32.275] List of future strategies:
[17:41:32.275] 1. sequential:
[17:41:32.275]    - args: function (..., envir = parent.frame())
[17:41:32.275]    - tweaked: FALSE
[17:41:32.275]    - call: future::plan("sequential")
[17:41:32.275] plan(): nbrOfWorkers() = 1
[17:41:32.275] SequentialFuture started (and completed)
[17:41:32.276] signalConditions() ...
[17:41:32.276]  - include = ‘immediateCondition’
[17:41:32.276]  - exclude = 
[17:41:32.276]  - resignal = FALSE
[17:41:32.276]  - Number of conditions: 1
[17:41:32.276] signalConditions() ... done
[17:41:32.276] - Launch lazy future ... done
[17:41:32.276] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[17:41:32.277] resolved() for ‘SequentialFuture’ ...
[17:41:32.277] - state: ‘finished’
[17:41:32.277] - run: TRUE
[17:41:32.277] - result: ‘FutureResult’
[17:41:32.277] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[17:41:32.278] getGlobalsAndPackages() ...
[17:41:32.278] Searching for globals...
[17:41:32.279] - globals found: [2] ‘{’, ‘stop’
[17:41:32.279] Searching for globals ... DONE
[17:41:32.279] Resolving globals: FALSE
[17:41:32.279] 
[17:41:32.279] 
[17:41:32.279] getGlobalsAndPackages() ... DONE
[17:41:32.279] run() for ‘Future’ ...
[17:41:32.280] - state: ‘created’
[17:41:32.280] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.280] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.280] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.280]   - Field: ‘label’
[17:41:32.280]   - Field: ‘local’
[17:41:32.280]   - Field: ‘owner’
[17:41:32.280]   - Field: ‘envir’
[17:41:32.281]   - Field: ‘packages’
[17:41:32.281]   - Field: ‘gc’
[17:41:32.281]   - Field: ‘conditions’
[17:41:32.281]   - Field: ‘expr’
[17:41:32.281]   - Field: ‘uuid’
[17:41:32.281]   - Field: ‘seed’
[17:41:32.281]   - Field: ‘version’
[17:41:32.281]   - Field: ‘result’
[17:41:32.281]   - Field: ‘asynchronous’
[17:41:32.281]   - Field: ‘calls’
[17:41:32.281]   - Field: ‘globals’
[17:41:32.282]   - Field: ‘stdout’
[17:41:32.282]   - Field: ‘earlySignal’
[17:41:32.282]   - Field: ‘lazy’
[17:41:32.282]   - Field: ‘state’
[17:41:32.282] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.282] - Launch lazy future ...
[17:41:32.282] Packages needed by the future expression (n = 0): <none>
[17:41:32.282] Packages needed by future strategies (n = 0): <none>
[17:41:32.283] {
[17:41:32.283]     {
[17:41:32.283]         {
[17:41:32.283]             ...future.startTime <- base::Sys.time()
[17:41:32.283]             {
[17:41:32.283]                 {
[17:41:32.283]                   {
[17:41:32.283]                     base::local({
[17:41:32.283]                       has_future <- base::requireNamespace("future", 
[17:41:32.283]                         quietly = TRUE)
[17:41:32.283]                       if (has_future) {
[17:41:32.283]                         ns <- base::getNamespace("future")
[17:41:32.283]                         version <- ns[[".package"]][["version"]]
[17:41:32.283]                         if (is.null(version)) 
[17:41:32.283]                           version <- utils::packageVersion("future")
[17:41:32.283]                       }
[17:41:32.283]                       else {
[17:41:32.283]                         version <- NULL
[17:41:32.283]                       }
[17:41:32.283]                       if (!has_future || version < "1.8.0") {
[17:41:32.283]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.283]                           "", base::R.version$version.string), 
[17:41:32.283]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.283]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.283]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.283]                             "release", "version")], collapse = " "), 
[17:41:32.283]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.283]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.283]                           info)
[17:41:32.283]                         info <- base::paste(info, collapse = "; ")
[17:41:32.283]                         if (!has_future) {
[17:41:32.283]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.283]                             info)
[17:41:32.283]                         }
[17:41:32.283]                         else {
[17:41:32.283]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.283]                             info, version)
[17:41:32.283]                         }
[17:41:32.283]                         base::stop(msg)
[17:41:32.283]                       }
[17:41:32.283]                     })
[17:41:32.283]                   }
[17:41:32.283]                   options(future.plan = NULL)
[17:41:32.283]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.283]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.283]                 }
[17:41:32.283]                 ...future.workdir <- getwd()
[17:41:32.283]             }
[17:41:32.283]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.283]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.283]         }
[17:41:32.283]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.283]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.283]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.283]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.283]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.283]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.283]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.283]             base::names(...future.oldOptions))
[17:41:32.283]     }
[17:41:32.283]     if (FALSE) {
[17:41:32.283]     }
[17:41:32.283]     else {
[17:41:32.283]         if (TRUE) {
[17:41:32.283]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.283]                 open = "w")
[17:41:32.283]         }
[17:41:32.283]         else {
[17:41:32.283]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.283]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.283]         }
[17:41:32.283]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.283]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.283]             base::sink(type = "output", split = FALSE)
[17:41:32.283]             base::close(...future.stdout)
[17:41:32.283]         }, add = TRUE)
[17:41:32.283]     }
[17:41:32.283]     ...future.frame <- base::sys.nframe()
[17:41:32.283]     ...future.conditions <- base::list()
[17:41:32.283]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.283]     if (FALSE) {
[17:41:32.283]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.283]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.283]     }
[17:41:32.283]     ...future.result <- base::tryCatch({
[17:41:32.283]         base::withCallingHandlers({
[17:41:32.283]             ...future.value <- base::withVisible(base::local({
[17:41:32.283]                 42L
[17:41:32.283]                 stop("Woops")
[17:41:32.283]             }))
[17:41:32.283]             future::FutureResult(value = ...future.value$value, 
[17:41:32.283]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.283]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.283]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.283]                     ...future.globalenv.names))
[17:41:32.283]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.283]         }, condition = base::local({
[17:41:32.283]             c <- base::c
[17:41:32.283]             inherits <- base::inherits
[17:41:32.283]             invokeRestart <- base::invokeRestart
[17:41:32.283]             length <- base::length
[17:41:32.283]             list <- base::list
[17:41:32.283]             seq.int <- base::seq.int
[17:41:32.283]             signalCondition <- base::signalCondition
[17:41:32.283]             sys.calls <- base::sys.calls
[17:41:32.283]             `[[` <- base::`[[`
[17:41:32.283]             `+` <- base::`+`
[17:41:32.283]             `<<-` <- base::`<<-`
[17:41:32.283]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.283]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.283]                   3L)]
[17:41:32.283]             }
[17:41:32.283]             function(cond) {
[17:41:32.283]                 is_error <- inherits(cond, "error")
[17:41:32.283]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.283]                   NULL)
[17:41:32.283]                 if (is_error) {
[17:41:32.283]                   sessionInformation <- function() {
[17:41:32.283]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.283]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.283]                       search = base::search(), system = base::Sys.info())
[17:41:32.283]                   }
[17:41:32.283]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.283]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.283]                     cond$call), session = sessionInformation(), 
[17:41:32.283]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.283]                   signalCondition(cond)
[17:41:32.283]                 }
[17:41:32.283]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.283]                 "immediateCondition"))) {
[17:41:32.283]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.283]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.283]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.283]                   if (TRUE && !signal) {
[17:41:32.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.283]                     {
[17:41:32.283]                       inherits <- base::inherits
[17:41:32.283]                       invokeRestart <- base::invokeRestart
[17:41:32.283]                       is.null <- base::is.null
[17:41:32.283]                       muffled <- FALSE
[17:41:32.283]                       if (inherits(cond, "message")) {
[17:41:32.283]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.283]                         if (muffled) 
[17:41:32.283]                           invokeRestart("muffleMessage")
[17:41:32.283]                       }
[17:41:32.283]                       else if (inherits(cond, "warning")) {
[17:41:32.283]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.283]                         if (muffled) 
[17:41:32.283]                           invokeRestart("muffleWarning")
[17:41:32.283]                       }
[17:41:32.283]                       else if (inherits(cond, "condition")) {
[17:41:32.283]                         if (!is.null(pattern)) {
[17:41:32.283]                           computeRestarts <- base::computeRestarts
[17:41:32.283]                           grepl <- base::grepl
[17:41:32.283]                           restarts <- computeRestarts(cond)
[17:41:32.283]                           for (restart in restarts) {
[17:41:32.283]                             name <- restart$name
[17:41:32.283]                             if (is.null(name)) 
[17:41:32.283]                               next
[17:41:32.283]                             if (!grepl(pattern, name)) 
[17:41:32.283]                               next
[17:41:32.283]                             invokeRestart(restart)
[17:41:32.283]                             muffled <- TRUE
[17:41:32.283]                             break
[17:41:32.283]                           }
[17:41:32.283]                         }
[17:41:32.283]                       }
[17:41:32.283]                       invisible(muffled)
[17:41:32.283]                     }
[17:41:32.283]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.283]                   }
[17:41:32.283]                 }
[17:41:32.283]                 else {
[17:41:32.283]                   if (TRUE) {
[17:41:32.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.283]                     {
[17:41:32.283]                       inherits <- base::inherits
[17:41:32.283]                       invokeRestart <- base::invokeRestart
[17:41:32.283]                       is.null <- base::is.null
[17:41:32.283]                       muffled <- FALSE
[17:41:32.283]                       if (inherits(cond, "message")) {
[17:41:32.283]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.283]                         if (muffled) 
[17:41:32.283]                           invokeRestart("muffleMessage")
[17:41:32.283]                       }
[17:41:32.283]                       else if (inherits(cond, "warning")) {
[17:41:32.283]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.283]                         if (muffled) 
[17:41:32.283]                           invokeRestart("muffleWarning")
[17:41:32.283]                       }
[17:41:32.283]                       else if (inherits(cond, "condition")) {
[17:41:32.283]                         if (!is.null(pattern)) {
[17:41:32.283]                           computeRestarts <- base::computeRestarts
[17:41:32.283]                           grepl <- base::grepl
[17:41:32.283]                           restarts <- computeRestarts(cond)
[17:41:32.283]                           for (restart in restarts) {
[17:41:32.283]                             name <- restart$name
[17:41:32.283]                             if (is.null(name)) 
[17:41:32.283]                               next
[17:41:32.283]                             if (!grepl(pattern, name)) 
[17:41:32.283]                               next
[17:41:32.283]                             invokeRestart(restart)
[17:41:32.283]                             muffled <- TRUE
[17:41:32.283]                             break
[17:41:32.283]                           }
[17:41:32.283]                         }
[17:41:32.283]                       }
[17:41:32.283]                       invisible(muffled)
[17:41:32.283]                     }
[17:41:32.283]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.283]                   }
[17:41:32.283]                 }
[17:41:32.283]             }
[17:41:32.283]         }))
[17:41:32.283]     }, error = function(ex) {
[17:41:32.283]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.283]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.283]                 ...future.rng), started = ...future.startTime, 
[17:41:32.283]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.283]             version = "1.8"), class = "FutureResult")
[17:41:32.283]     }, finally = {
[17:41:32.283]         if (!identical(...future.workdir, getwd())) 
[17:41:32.283]             setwd(...future.workdir)
[17:41:32.283]         {
[17:41:32.283]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.283]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.283]             }
[17:41:32.283]             base::options(...future.oldOptions)
[17:41:32.283]             if (.Platform$OS.type == "windows") {
[17:41:32.283]                 old_names <- names(...future.oldEnvVars)
[17:41:32.283]                 envs <- base::Sys.getenv()
[17:41:32.283]                 names <- names(envs)
[17:41:32.283]                 common <- intersect(names, old_names)
[17:41:32.283]                 added <- setdiff(names, old_names)
[17:41:32.283]                 removed <- setdiff(old_names, names)
[17:41:32.283]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.283]                   envs[common]]
[17:41:32.283]                 NAMES <- toupper(changed)
[17:41:32.283]                 args <- list()
[17:41:32.283]                 for (kk in seq_along(NAMES)) {
[17:41:32.283]                   name <- changed[[kk]]
[17:41:32.283]                   NAME <- NAMES[[kk]]
[17:41:32.283]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.283]                     next
[17:41:32.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.283]                 }
[17:41:32.283]                 NAMES <- toupper(added)
[17:41:32.283]                 for (kk in seq_along(NAMES)) {
[17:41:32.283]                   name <- added[[kk]]
[17:41:32.283]                   NAME <- NAMES[[kk]]
[17:41:32.283]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.283]                     next
[17:41:32.283]                   args[[name]] <- ""
[17:41:32.283]                 }
[17:41:32.283]                 NAMES <- toupper(removed)
[17:41:32.283]                 for (kk in seq_along(NAMES)) {
[17:41:32.283]                   name <- removed[[kk]]
[17:41:32.283]                   NAME <- NAMES[[kk]]
[17:41:32.283]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.283]                     next
[17:41:32.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.283]                 }
[17:41:32.283]                 if (length(args) > 0) 
[17:41:32.283]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.283]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.283]             }
[17:41:32.283]             else {
[17:41:32.283]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.283]             }
[17:41:32.283]             {
[17:41:32.283]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.283]                   0L) {
[17:41:32.283]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.283]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.283]                   base::options(opts)
[17:41:32.283]                 }
[17:41:32.283]                 {
[17:41:32.283]                   {
[17:41:32.283]                     NULL
[17:41:32.283]                     RNGkind("Mersenne-Twister")
[17:41:32.283]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.283]                       inherits = FALSE)
[17:41:32.283]                   }
[17:41:32.283]                   options(future.plan = NULL)
[17:41:32.283]                   if (is.na(NA_character_)) 
[17:41:32.283]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.283]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.283]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.283]                   {
[17:41:32.283]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.283]                     if (!future$lazy) 
[17:41:32.283]                       future <- run(future)
[17:41:32.283]                     invisible(future)
[17:41:32.283]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.283]                 }
[17:41:32.283]             }
[17:41:32.283]         }
[17:41:32.283]     })
[17:41:32.283]     if (TRUE) {
[17:41:32.283]         base::sink(type = "output", split = FALSE)
[17:41:32.283]         if (TRUE) {
[17:41:32.283]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.283]         }
[17:41:32.283]         else {
[17:41:32.283]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.283]         }
[17:41:32.283]         base::close(...future.stdout)
[17:41:32.283]         ...future.stdout <- NULL
[17:41:32.283]     }
[17:41:32.283]     ...future.result$conditions <- ...future.conditions
[17:41:32.283]     ...future.result$finished <- base::Sys.time()
[17:41:32.283]     ...future.result
[17:41:32.283] }
[17:41:32.284] plan(): Setting new future strategy stack:
[17:41:32.285] List of future strategies:
[17:41:32.285] 1. sequential:
[17:41:32.285]    - args: function (..., envir = parent.frame())
[17:41:32.285]    - tweaked: FALSE
[17:41:32.285]    - call: NULL
[17:41:32.285] plan(): nbrOfWorkers() = 1
[17:41:32.286] plan(): Setting new future strategy stack:
[17:41:32.286] List of future strategies:
[17:41:32.286] 1. sequential:
[17:41:32.286]    - args: function (..., envir = parent.frame())
[17:41:32.286]    - tweaked: FALSE
[17:41:32.286]    - call: future::plan("sequential")
[17:41:32.286] plan(): nbrOfWorkers() = 1
[17:41:32.286] SequentialFuture started (and completed)
[17:41:32.286] signalConditions() ...
[17:41:32.287]  - include = ‘immediateCondition’
[17:41:32.287]  - exclude = 
[17:41:32.287]  - resignal = FALSE
[17:41:32.287]  - Number of conditions: 1
[17:41:32.287] signalConditions() ... done
[17:41:32.287] - Launch lazy future ... done
[17:41:32.287] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[17:41:32.287] getGlobalsAndPackages() ...
[17:41:32.287] Searching for globals...
[17:41:32.288] - globals found: [2] ‘{’, ‘stop’
[17:41:32.288] Searching for globals ... DONE
[17:41:32.288] Resolving globals: FALSE
[17:41:32.289] 
[17:41:32.289] 
[17:41:32.289] getGlobalsAndPackages() ... DONE
[17:41:32.289] run() for ‘Future’ ...
[17:41:32.289] - state: ‘created’
[17:41:32.289] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.290] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.290] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.290]   - Field: ‘label’
[17:41:32.290]   - Field: ‘local’
[17:41:32.290]   - Field: ‘owner’
[17:41:32.290]   - Field: ‘envir’
[17:41:32.290]   - Field: ‘packages’
[17:41:32.290]   - Field: ‘gc’
[17:41:32.290]   - Field: ‘conditions’
[17:41:32.290]   - Field: ‘expr’
[17:41:32.291]   - Field: ‘uuid’
[17:41:32.292]   - Field: ‘seed’
[17:41:32.292]   - Field: ‘version’
[17:41:32.292]   - Field: ‘result’
[17:41:32.293]   - Field: ‘asynchronous’
[17:41:32.293]   - Field: ‘calls’
[17:41:32.293]   - Field: ‘globals’
[17:41:32.293]   - Field: ‘stdout’
[17:41:32.293]   - Field: ‘earlySignal’
[17:41:32.293]   - Field: ‘lazy’
[17:41:32.293]   - Field: ‘state’
[17:41:32.293] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.293] - Launch lazy future ...
[17:41:32.293] Packages needed by the future expression (n = 0): <none>
[17:41:32.294] Packages needed by future strategies (n = 0): <none>
[17:41:32.294] {
[17:41:32.294]     {
[17:41:32.294]         {
[17:41:32.294]             ...future.startTime <- base::Sys.time()
[17:41:32.294]             {
[17:41:32.294]                 {
[17:41:32.294]                   {
[17:41:32.294]                     base::local({
[17:41:32.294]                       has_future <- base::requireNamespace("future", 
[17:41:32.294]                         quietly = TRUE)
[17:41:32.294]                       if (has_future) {
[17:41:32.294]                         ns <- base::getNamespace("future")
[17:41:32.294]                         version <- ns[[".package"]][["version"]]
[17:41:32.294]                         if (is.null(version)) 
[17:41:32.294]                           version <- utils::packageVersion("future")
[17:41:32.294]                       }
[17:41:32.294]                       else {
[17:41:32.294]                         version <- NULL
[17:41:32.294]                       }
[17:41:32.294]                       if (!has_future || version < "1.8.0") {
[17:41:32.294]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.294]                           "", base::R.version$version.string), 
[17:41:32.294]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.294]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.294]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.294]                             "release", "version")], collapse = " "), 
[17:41:32.294]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.294]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.294]                           info)
[17:41:32.294]                         info <- base::paste(info, collapse = "; ")
[17:41:32.294]                         if (!has_future) {
[17:41:32.294]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.294]                             info)
[17:41:32.294]                         }
[17:41:32.294]                         else {
[17:41:32.294]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.294]                             info, version)
[17:41:32.294]                         }
[17:41:32.294]                         base::stop(msg)
[17:41:32.294]                       }
[17:41:32.294]                     })
[17:41:32.294]                   }
[17:41:32.294]                   options(future.plan = NULL)
[17:41:32.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.294]                 }
[17:41:32.294]                 ...future.workdir <- getwd()
[17:41:32.294]             }
[17:41:32.294]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.294]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.294]         }
[17:41:32.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.294]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.294]             base::names(...future.oldOptions))
[17:41:32.294]     }
[17:41:32.294]     if (FALSE) {
[17:41:32.294]     }
[17:41:32.294]     else {
[17:41:32.294]         if (TRUE) {
[17:41:32.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.294]                 open = "w")
[17:41:32.294]         }
[17:41:32.294]         else {
[17:41:32.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.294]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.294]         }
[17:41:32.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.294]             base::sink(type = "output", split = FALSE)
[17:41:32.294]             base::close(...future.stdout)
[17:41:32.294]         }, add = TRUE)
[17:41:32.294]     }
[17:41:32.294]     ...future.frame <- base::sys.nframe()
[17:41:32.294]     ...future.conditions <- base::list()
[17:41:32.294]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.294]     if (FALSE) {
[17:41:32.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.294]     }
[17:41:32.294]     ...future.result <- base::tryCatch({
[17:41:32.294]         base::withCallingHandlers({
[17:41:32.294]             ...future.value <- base::withVisible(base::local({
[17:41:32.294]                 42L
[17:41:32.294]                 stop("Woops")
[17:41:32.294]             }))
[17:41:32.294]             future::FutureResult(value = ...future.value$value, 
[17:41:32.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.294]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.294]                     ...future.globalenv.names))
[17:41:32.294]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.294]         }, condition = base::local({
[17:41:32.294]             c <- base::c
[17:41:32.294]             inherits <- base::inherits
[17:41:32.294]             invokeRestart <- base::invokeRestart
[17:41:32.294]             length <- base::length
[17:41:32.294]             list <- base::list
[17:41:32.294]             seq.int <- base::seq.int
[17:41:32.294]             signalCondition <- base::signalCondition
[17:41:32.294]             sys.calls <- base::sys.calls
[17:41:32.294]             `[[` <- base::`[[`
[17:41:32.294]             `+` <- base::`+`
[17:41:32.294]             `<<-` <- base::`<<-`
[17:41:32.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.294]                   3L)]
[17:41:32.294]             }
[17:41:32.294]             function(cond) {
[17:41:32.294]                 is_error <- inherits(cond, "error")
[17:41:32.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.294]                   NULL)
[17:41:32.294]                 if (is_error) {
[17:41:32.294]                   sessionInformation <- function() {
[17:41:32.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.294]                       search = base::search(), system = base::Sys.info())
[17:41:32.294]                   }
[17:41:32.294]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.294]                     cond$call), session = sessionInformation(), 
[17:41:32.294]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.294]                   signalCondition(cond)
[17:41:32.294]                 }
[17:41:32.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.294]                 "immediateCondition"))) {
[17:41:32.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.294]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.294]                   if (TRUE && !signal) {
[17:41:32.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.294]                     {
[17:41:32.294]                       inherits <- base::inherits
[17:41:32.294]                       invokeRestart <- base::invokeRestart
[17:41:32.294]                       is.null <- base::is.null
[17:41:32.294]                       muffled <- FALSE
[17:41:32.294]                       if (inherits(cond, "message")) {
[17:41:32.294]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.294]                         if (muffled) 
[17:41:32.294]                           invokeRestart("muffleMessage")
[17:41:32.294]                       }
[17:41:32.294]                       else if (inherits(cond, "warning")) {
[17:41:32.294]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.294]                         if (muffled) 
[17:41:32.294]                           invokeRestart("muffleWarning")
[17:41:32.294]                       }
[17:41:32.294]                       else if (inherits(cond, "condition")) {
[17:41:32.294]                         if (!is.null(pattern)) {
[17:41:32.294]                           computeRestarts <- base::computeRestarts
[17:41:32.294]                           grepl <- base::grepl
[17:41:32.294]                           restarts <- computeRestarts(cond)
[17:41:32.294]                           for (restart in restarts) {
[17:41:32.294]                             name <- restart$name
[17:41:32.294]                             if (is.null(name)) 
[17:41:32.294]                               next
[17:41:32.294]                             if (!grepl(pattern, name)) 
[17:41:32.294]                               next
[17:41:32.294]                             invokeRestart(restart)
[17:41:32.294]                             muffled <- TRUE
[17:41:32.294]                             break
[17:41:32.294]                           }
[17:41:32.294]                         }
[17:41:32.294]                       }
[17:41:32.294]                       invisible(muffled)
[17:41:32.294]                     }
[17:41:32.294]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.294]                   }
[17:41:32.294]                 }
[17:41:32.294]                 else {
[17:41:32.294]                   if (TRUE) {
[17:41:32.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.294]                     {
[17:41:32.294]                       inherits <- base::inherits
[17:41:32.294]                       invokeRestart <- base::invokeRestart
[17:41:32.294]                       is.null <- base::is.null
[17:41:32.294]                       muffled <- FALSE
[17:41:32.294]                       if (inherits(cond, "message")) {
[17:41:32.294]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.294]                         if (muffled) 
[17:41:32.294]                           invokeRestart("muffleMessage")
[17:41:32.294]                       }
[17:41:32.294]                       else if (inherits(cond, "warning")) {
[17:41:32.294]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.294]                         if (muffled) 
[17:41:32.294]                           invokeRestart("muffleWarning")
[17:41:32.294]                       }
[17:41:32.294]                       else if (inherits(cond, "condition")) {
[17:41:32.294]                         if (!is.null(pattern)) {
[17:41:32.294]                           computeRestarts <- base::computeRestarts
[17:41:32.294]                           grepl <- base::grepl
[17:41:32.294]                           restarts <- computeRestarts(cond)
[17:41:32.294]                           for (restart in restarts) {
[17:41:32.294]                             name <- restart$name
[17:41:32.294]                             if (is.null(name)) 
[17:41:32.294]                               next
[17:41:32.294]                             if (!grepl(pattern, name)) 
[17:41:32.294]                               next
[17:41:32.294]                             invokeRestart(restart)
[17:41:32.294]                             muffled <- TRUE
[17:41:32.294]                             break
[17:41:32.294]                           }
[17:41:32.294]                         }
[17:41:32.294]                       }
[17:41:32.294]                       invisible(muffled)
[17:41:32.294]                     }
[17:41:32.294]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.294]                   }
[17:41:32.294]                 }
[17:41:32.294]             }
[17:41:32.294]         }))
[17:41:32.294]     }, error = function(ex) {
[17:41:32.294]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.294]                 ...future.rng), started = ...future.startTime, 
[17:41:32.294]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.294]             version = "1.8"), class = "FutureResult")
[17:41:32.294]     }, finally = {
[17:41:32.294]         if (!identical(...future.workdir, getwd())) 
[17:41:32.294]             setwd(...future.workdir)
[17:41:32.294]         {
[17:41:32.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.294]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.294]             }
[17:41:32.294]             base::options(...future.oldOptions)
[17:41:32.294]             if (.Platform$OS.type == "windows") {
[17:41:32.294]                 old_names <- names(...future.oldEnvVars)
[17:41:32.294]                 envs <- base::Sys.getenv()
[17:41:32.294]                 names <- names(envs)
[17:41:32.294]                 common <- intersect(names, old_names)
[17:41:32.294]                 added <- setdiff(names, old_names)
[17:41:32.294]                 removed <- setdiff(old_names, names)
[17:41:32.294]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.294]                   envs[common]]
[17:41:32.294]                 NAMES <- toupper(changed)
[17:41:32.294]                 args <- list()
[17:41:32.294]                 for (kk in seq_along(NAMES)) {
[17:41:32.294]                   name <- changed[[kk]]
[17:41:32.294]                   NAME <- NAMES[[kk]]
[17:41:32.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.294]                     next
[17:41:32.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.294]                 }
[17:41:32.294]                 NAMES <- toupper(added)
[17:41:32.294]                 for (kk in seq_along(NAMES)) {
[17:41:32.294]                   name <- added[[kk]]
[17:41:32.294]                   NAME <- NAMES[[kk]]
[17:41:32.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.294]                     next
[17:41:32.294]                   args[[name]] <- ""
[17:41:32.294]                 }
[17:41:32.294]                 NAMES <- toupper(removed)
[17:41:32.294]                 for (kk in seq_along(NAMES)) {
[17:41:32.294]                   name <- removed[[kk]]
[17:41:32.294]                   NAME <- NAMES[[kk]]
[17:41:32.294]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.294]                     next
[17:41:32.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.294]                 }
[17:41:32.294]                 if (length(args) > 0) 
[17:41:32.294]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.294]             }
[17:41:32.294]             else {
[17:41:32.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.294]             }
[17:41:32.294]             {
[17:41:32.294]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.294]                   0L) {
[17:41:32.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.294]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.294]                   base::options(opts)
[17:41:32.294]                 }
[17:41:32.294]                 {
[17:41:32.294]                   {
[17:41:32.294]                     NULL
[17:41:32.294]                     RNGkind("Mersenne-Twister")
[17:41:32.294]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.294]                       inherits = FALSE)
[17:41:32.294]                   }
[17:41:32.294]                   options(future.plan = NULL)
[17:41:32.294]                   if (is.na(NA_character_)) 
[17:41:32.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.294]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.294]                   {
[17:41:32.294]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.294]                     if (!future$lazy) 
[17:41:32.294]                       future <- run(future)
[17:41:32.294]                     invisible(future)
[17:41:32.294]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.294]                 }
[17:41:32.294]             }
[17:41:32.294]         }
[17:41:32.294]     })
[17:41:32.294]     if (TRUE) {
[17:41:32.294]         base::sink(type = "output", split = FALSE)
[17:41:32.294]         if (TRUE) {
[17:41:32.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.294]         }
[17:41:32.294]         else {
[17:41:32.294]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.294]         }
[17:41:32.294]         base::close(...future.stdout)
[17:41:32.294]         ...future.stdout <- NULL
[17:41:32.294]     }
[17:41:32.294]     ...future.result$conditions <- ...future.conditions
[17:41:32.294]     ...future.result$finished <- base::Sys.time()
[17:41:32.294]     ...future.result
[17:41:32.294] }
[17:41:32.296] plan(): Setting new future strategy stack:
[17:41:32.296] List of future strategies:
[17:41:32.296] 1. sequential:
[17:41:32.296]    - args: function (..., envir = parent.frame())
[17:41:32.296]    - tweaked: FALSE
[17:41:32.296]    - call: NULL
[17:41:32.296] plan(): nbrOfWorkers() = 1
[17:41:32.297] plan(): Setting new future strategy stack:
[17:41:32.297] List of future strategies:
[17:41:32.297] 1. sequential:
[17:41:32.297]    - args: function (..., envir = parent.frame())
[17:41:32.297]    - tweaked: FALSE
[17:41:32.297]    - call: future::plan("sequential")
[17:41:32.298] plan(): nbrOfWorkers() = 1
[17:41:32.298] SequentialFuture started (and completed)
[17:41:32.298] signalConditions() ...
[17:41:32.298]  - include = ‘immediateCondition’
[17:41:32.298]  - exclude = 
[17:41:32.298]  - resignal = FALSE
[17:41:32.298]  - Number of conditions: 1
[17:41:32.298] signalConditions() ... done
[17:41:32.298] - Launch lazy future ... done
[17:41:32.298] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[17:41:32.299] resolve() on list ...
[17:41:32.299]  recursive: 0
[17:41:32.299]  length: 2
[17:41:32.299] 
[17:41:32.300] resolved() for ‘SequentialFuture’ ...
[17:41:32.300] - state: ‘finished’
[17:41:32.300] - run: TRUE
[17:41:32.300] - result: ‘FutureResult’
[17:41:32.300] resolved() for ‘SequentialFuture’ ... done
[17:41:32.300] Future #1
[17:41:32.300] signalConditions() ...
[17:41:32.300]  - include = ‘immediateCondition’
[17:41:32.300]  - exclude = 
[17:41:32.300]  - resignal = FALSE
[17:41:32.301]  - Number of conditions: 1
[17:41:32.301] signalConditions() ... done
[17:41:32.301] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:41:32.301] - nx: 2
[17:41:32.301] - relay: TRUE
[17:41:32.301] - stdout: TRUE
[17:41:32.301] - signal: FALSE
[17:41:32.301] - resignal: FALSE
[17:41:32.301] - force: TRUE
[17:41:32.301] - relayed: [n=2] FALSE, FALSE
[17:41:32.301] - queued futures: [n=2] FALSE, FALSE
[17:41:32.302]  - until=1
[17:41:32.302]  - relaying element #1
[17:41:32.302] signalConditions() ...
[17:41:32.302]  - include = ‘immediateCondition’
[17:41:32.302]  - exclude = 
[17:41:32.302]  - resignal = FALSE
[17:41:32.302]  - Number of conditions: 1
[17:41:32.302] signalConditions() ... done
[17:41:32.302] - relayed: [n=2] TRUE, FALSE
[17:41:32.302] - queued futures: [n=2] TRUE, FALSE
[17:41:32.302] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:41:32.303]  length: 1 (resolved future 1)
[17:41:32.303] resolved() for ‘SequentialFuture’ ...
[17:41:32.303] - state: ‘finished’
[17:41:32.303] - run: TRUE
[17:41:32.303] - result: ‘FutureResult’
[17:41:32.303] resolved() for ‘SequentialFuture’ ... done
[17:41:32.303] Future #2
[17:41:32.303] signalConditions() ...
[17:41:32.304]  - include = ‘immediateCondition’
[17:41:32.304]  - exclude = 
[17:41:32.304]  - resignal = FALSE
[17:41:32.304]  - Number of conditions: 1
[17:41:32.304] signalConditions() ... done
[17:41:32.304] signalConditionsASAP(SequentialFuture, pos=2) ...
[17:41:32.304] - nx: 2
[17:41:32.304] - relay: TRUE
[17:41:32.304] - stdout: TRUE
[17:41:32.304] - signal: FALSE
[17:41:32.304] - resignal: FALSE
[17:41:32.305] - force: TRUE
[17:41:32.305] - relayed: [n=2] TRUE, FALSE
[17:41:32.305] - queued futures: [n=2] TRUE, FALSE
[17:41:32.305]  - until=2
[17:41:32.305]  - relaying element #2
[17:41:32.305] signalConditions() ...
[17:41:32.305]  - include = ‘immediateCondition’
[17:41:32.305]  - exclude = 
[17:41:32.305]  - resignal = FALSE
[17:41:32.305]  - Number of conditions: 1
[17:41:32.305] signalConditions() ... done
[17:41:32.306] - relayed: [n=2] TRUE, TRUE
[17:41:32.306] - queued futures: [n=2] TRUE, TRUE
[17:41:32.306] signalConditionsASAP(SequentialFuture, pos=2) ... done
[17:41:32.306]  length: 0 (resolved future 2)
[17:41:32.306] Relaying remaining futures
[17:41:32.306] signalConditionsASAP(NULL, pos=0) ...
[17:41:32.306] - nx: 2
[17:41:32.306] - relay: TRUE
[17:41:32.306] - stdout: TRUE
[17:41:32.306] - signal: FALSE
[17:41:32.306] - resignal: FALSE
[17:41:32.307] - force: TRUE
[17:41:32.307] - relayed: [n=2] TRUE, TRUE
[17:41:32.307] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:41:32.307] - relayed: [n=2] TRUE, TRUE
[17:41:32.307] - queued futures: [n=2] TRUE, TRUE
[17:41:32.307] signalConditionsASAP(NULL, pos=0) ... done
[17:41:32.307] resolve() on list ... DONE
[17:41:32.307] signalConditions() ...
[17:41:32.307]  - include = ‘immediateCondition’
[17:41:32.307]  - exclude = 
[17:41:32.308]  - resignal = FALSE
[17:41:32.308]  - Number of conditions: 1
[17:41:32.308] signalConditions() ... done
[17:41:32.308] signalConditions() ...
[17:41:32.308]  - include = ‘immediateCondition’
[17:41:32.308]  - exclude = 
[17:41:32.308]  - resignal = FALSE
[17:41:32.308]  - Number of conditions: 1
[17:41:32.308] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[17:41:32.309] resolved() for ‘SequentialFuture’ ...
[17:41:32.309] - state: ‘finished’
[17:41:32.309] - run: TRUE
[17:41:32.309] - result: ‘FutureResult’
[17:41:32.309] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[17:41:32.310] getGlobalsAndPackages() ...
[17:41:32.310] Searching for globals...
[17:41:32.310] 
[17:41:32.310] Searching for globals ... DONE
[17:41:32.310] - globals: [0] <none>
[17:41:32.310] getGlobalsAndPackages() ... DONE
[17:41:32.310] run() for ‘Future’ ...
[17:41:32.311] - state: ‘created’
[17:41:32.311] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.311] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.311] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.311]   - Field: ‘label’
[17:41:32.311]   - Field: ‘local’
[17:41:32.311]   - Field: ‘owner’
[17:41:32.311]   - Field: ‘envir’
[17:41:32.312]   - Field: ‘packages’
[17:41:32.312]   - Field: ‘gc’
[17:41:32.312]   - Field: ‘conditions’
[17:41:32.312]   - Field: ‘expr’
[17:41:32.312]   - Field: ‘uuid’
[17:41:32.312]   - Field: ‘seed’
[17:41:32.312]   - Field: ‘version’
[17:41:32.312]   - Field: ‘result’
[17:41:32.312]   - Field: ‘asynchronous’
[17:41:32.312]   - Field: ‘calls’
[17:41:32.312]   - Field: ‘globals’
[17:41:32.313]   - Field: ‘stdout’
[17:41:32.313]   - Field: ‘earlySignal’
[17:41:32.313]   - Field: ‘lazy’
[17:41:32.313]   - Field: ‘state’
[17:41:32.313] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.313] - Launch lazy future ...
[17:41:32.313] Packages needed by the future expression (n = 0): <none>
[17:41:32.313] Packages needed by future strategies (n = 0): <none>
[17:41:32.314] {
[17:41:32.314]     {
[17:41:32.314]         {
[17:41:32.314]             ...future.startTime <- base::Sys.time()
[17:41:32.314]             {
[17:41:32.314]                 {
[17:41:32.314]                   {
[17:41:32.314]                     base::local({
[17:41:32.314]                       has_future <- base::requireNamespace("future", 
[17:41:32.314]                         quietly = TRUE)
[17:41:32.314]                       if (has_future) {
[17:41:32.314]                         ns <- base::getNamespace("future")
[17:41:32.314]                         version <- ns[[".package"]][["version"]]
[17:41:32.314]                         if (is.null(version)) 
[17:41:32.314]                           version <- utils::packageVersion("future")
[17:41:32.314]                       }
[17:41:32.314]                       else {
[17:41:32.314]                         version <- NULL
[17:41:32.314]                       }
[17:41:32.314]                       if (!has_future || version < "1.8.0") {
[17:41:32.314]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.314]                           "", base::R.version$version.string), 
[17:41:32.314]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.314]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.314]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.314]                             "release", "version")], collapse = " "), 
[17:41:32.314]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.314]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.314]                           info)
[17:41:32.314]                         info <- base::paste(info, collapse = "; ")
[17:41:32.314]                         if (!has_future) {
[17:41:32.314]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.314]                             info)
[17:41:32.314]                         }
[17:41:32.314]                         else {
[17:41:32.314]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.314]                             info, version)
[17:41:32.314]                         }
[17:41:32.314]                         base::stop(msg)
[17:41:32.314]                       }
[17:41:32.314]                     })
[17:41:32.314]                   }
[17:41:32.314]                   options(future.plan = NULL)
[17:41:32.314]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.314]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.314]                 }
[17:41:32.314]                 ...future.workdir <- getwd()
[17:41:32.314]             }
[17:41:32.314]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.314]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.314]         }
[17:41:32.314]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.314]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.314]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.314]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.314]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.314]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.314]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.314]             base::names(...future.oldOptions))
[17:41:32.314]     }
[17:41:32.314]     if (FALSE) {
[17:41:32.314]     }
[17:41:32.314]     else {
[17:41:32.314]         if (TRUE) {
[17:41:32.314]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.314]                 open = "w")
[17:41:32.314]         }
[17:41:32.314]         else {
[17:41:32.314]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.314]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.314]         }
[17:41:32.314]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.314]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.314]             base::sink(type = "output", split = FALSE)
[17:41:32.314]             base::close(...future.stdout)
[17:41:32.314]         }, add = TRUE)
[17:41:32.314]     }
[17:41:32.314]     ...future.frame <- base::sys.nframe()
[17:41:32.314]     ...future.conditions <- base::list()
[17:41:32.314]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.314]     if (FALSE) {
[17:41:32.314]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.314]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.314]     }
[17:41:32.314]     ...future.result <- base::tryCatch({
[17:41:32.314]         base::withCallingHandlers({
[17:41:32.314]             ...future.value <- base::withVisible(base::local(42L))
[17:41:32.314]             future::FutureResult(value = ...future.value$value, 
[17:41:32.314]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.314]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.314]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.314]                     ...future.globalenv.names))
[17:41:32.314]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.314]         }, condition = base::local({
[17:41:32.314]             c <- base::c
[17:41:32.314]             inherits <- base::inherits
[17:41:32.314]             invokeRestart <- base::invokeRestart
[17:41:32.314]             length <- base::length
[17:41:32.314]             list <- base::list
[17:41:32.314]             seq.int <- base::seq.int
[17:41:32.314]             signalCondition <- base::signalCondition
[17:41:32.314]             sys.calls <- base::sys.calls
[17:41:32.314]             `[[` <- base::`[[`
[17:41:32.314]             `+` <- base::`+`
[17:41:32.314]             `<<-` <- base::`<<-`
[17:41:32.314]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.314]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.314]                   3L)]
[17:41:32.314]             }
[17:41:32.314]             function(cond) {
[17:41:32.314]                 is_error <- inherits(cond, "error")
[17:41:32.314]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.314]                   NULL)
[17:41:32.314]                 if (is_error) {
[17:41:32.314]                   sessionInformation <- function() {
[17:41:32.314]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.314]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.314]                       search = base::search(), system = base::Sys.info())
[17:41:32.314]                   }
[17:41:32.314]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.314]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.314]                     cond$call), session = sessionInformation(), 
[17:41:32.314]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.314]                   signalCondition(cond)
[17:41:32.314]                 }
[17:41:32.314]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.314]                 "immediateCondition"))) {
[17:41:32.314]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.314]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.314]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.314]                   if (TRUE && !signal) {
[17:41:32.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.314]                     {
[17:41:32.314]                       inherits <- base::inherits
[17:41:32.314]                       invokeRestart <- base::invokeRestart
[17:41:32.314]                       is.null <- base::is.null
[17:41:32.314]                       muffled <- FALSE
[17:41:32.314]                       if (inherits(cond, "message")) {
[17:41:32.314]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.314]                         if (muffled) 
[17:41:32.314]                           invokeRestart("muffleMessage")
[17:41:32.314]                       }
[17:41:32.314]                       else if (inherits(cond, "warning")) {
[17:41:32.314]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.314]                         if (muffled) 
[17:41:32.314]                           invokeRestart("muffleWarning")
[17:41:32.314]                       }
[17:41:32.314]                       else if (inherits(cond, "condition")) {
[17:41:32.314]                         if (!is.null(pattern)) {
[17:41:32.314]                           computeRestarts <- base::computeRestarts
[17:41:32.314]                           grepl <- base::grepl
[17:41:32.314]                           restarts <- computeRestarts(cond)
[17:41:32.314]                           for (restart in restarts) {
[17:41:32.314]                             name <- restart$name
[17:41:32.314]                             if (is.null(name)) 
[17:41:32.314]                               next
[17:41:32.314]                             if (!grepl(pattern, name)) 
[17:41:32.314]                               next
[17:41:32.314]                             invokeRestart(restart)
[17:41:32.314]                             muffled <- TRUE
[17:41:32.314]                             break
[17:41:32.314]                           }
[17:41:32.314]                         }
[17:41:32.314]                       }
[17:41:32.314]                       invisible(muffled)
[17:41:32.314]                     }
[17:41:32.314]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.314]                   }
[17:41:32.314]                 }
[17:41:32.314]                 else {
[17:41:32.314]                   if (TRUE) {
[17:41:32.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.314]                     {
[17:41:32.314]                       inherits <- base::inherits
[17:41:32.314]                       invokeRestart <- base::invokeRestart
[17:41:32.314]                       is.null <- base::is.null
[17:41:32.314]                       muffled <- FALSE
[17:41:32.314]                       if (inherits(cond, "message")) {
[17:41:32.314]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.314]                         if (muffled) 
[17:41:32.314]                           invokeRestart("muffleMessage")
[17:41:32.314]                       }
[17:41:32.314]                       else if (inherits(cond, "warning")) {
[17:41:32.314]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.314]                         if (muffled) 
[17:41:32.314]                           invokeRestart("muffleWarning")
[17:41:32.314]                       }
[17:41:32.314]                       else if (inherits(cond, "condition")) {
[17:41:32.314]                         if (!is.null(pattern)) {
[17:41:32.314]                           computeRestarts <- base::computeRestarts
[17:41:32.314]                           grepl <- base::grepl
[17:41:32.314]                           restarts <- computeRestarts(cond)
[17:41:32.314]                           for (restart in restarts) {
[17:41:32.314]                             name <- restart$name
[17:41:32.314]                             if (is.null(name)) 
[17:41:32.314]                               next
[17:41:32.314]                             if (!grepl(pattern, name)) 
[17:41:32.314]                               next
[17:41:32.314]                             invokeRestart(restart)
[17:41:32.314]                             muffled <- TRUE
[17:41:32.314]                             break
[17:41:32.314]                           }
[17:41:32.314]                         }
[17:41:32.314]                       }
[17:41:32.314]                       invisible(muffled)
[17:41:32.314]                     }
[17:41:32.314]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.314]                   }
[17:41:32.314]                 }
[17:41:32.314]             }
[17:41:32.314]         }))
[17:41:32.314]     }, error = function(ex) {
[17:41:32.314]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.314]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.314]                 ...future.rng), started = ...future.startTime, 
[17:41:32.314]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.314]             version = "1.8"), class = "FutureResult")
[17:41:32.314]     }, finally = {
[17:41:32.314]         if (!identical(...future.workdir, getwd())) 
[17:41:32.314]             setwd(...future.workdir)
[17:41:32.314]         {
[17:41:32.314]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.314]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.314]             }
[17:41:32.314]             base::options(...future.oldOptions)
[17:41:32.314]             if (.Platform$OS.type == "windows") {
[17:41:32.314]                 old_names <- names(...future.oldEnvVars)
[17:41:32.314]                 envs <- base::Sys.getenv()
[17:41:32.314]                 names <- names(envs)
[17:41:32.314]                 common <- intersect(names, old_names)
[17:41:32.314]                 added <- setdiff(names, old_names)
[17:41:32.314]                 removed <- setdiff(old_names, names)
[17:41:32.314]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.314]                   envs[common]]
[17:41:32.314]                 NAMES <- toupper(changed)
[17:41:32.314]                 args <- list()
[17:41:32.314]                 for (kk in seq_along(NAMES)) {
[17:41:32.314]                   name <- changed[[kk]]
[17:41:32.314]                   NAME <- NAMES[[kk]]
[17:41:32.314]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.314]                     next
[17:41:32.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.314]                 }
[17:41:32.314]                 NAMES <- toupper(added)
[17:41:32.314]                 for (kk in seq_along(NAMES)) {
[17:41:32.314]                   name <- added[[kk]]
[17:41:32.314]                   NAME <- NAMES[[kk]]
[17:41:32.314]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.314]                     next
[17:41:32.314]                   args[[name]] <- ""
[17:41:32.314]                 }
[17:41:32.314]                 NAMES <- toupper(removed)
[17:41:32.314]                 for (kk in seq_along(NAMES)) {
[17:41:32.314]                   name <- removed[[kk]]
[17:41:32.314]                   NAME <- NAMES[[kk]]
[17:41:32.314]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.314]                     next
[17:41:32.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.314]                 }
[17:41:32.314]                 if (length(args) > 0) 
[17:41:32.314]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.314]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.314]             }
[17:41:32.314]             else {
[17:41:32.314]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.314]             }
[17:41:32.314]             {
[17:41:32.314]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.314]                   0L) {
[17:41:32.314]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.314]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.314]                   base::options(opts)
[17:41:32.314]                 }
[17:41:32.314]                 {
[17:41:32.314]                   {
[17:41:32.314]                     NULL
[17:41:32.314]                     RNGkind("Mersenne-Twister")
[17:41:32.314]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.314]                       inherits = FALSE)
[17:41:32.314]                   }
[17:41:32.314]                   options(future.plan = NULL)
[17:41:32.314]                   if (is.na(NA_character_)) 
[17:41:32.314]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.314]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.314]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.314]                   {
[17:41:32.314]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.314]                     if (!future$lazy) 
[17:41:32.314]                       future <- run(future)
[17:41:32.314]                     invisible(future)
[17:41:32.314]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.314]                 }
[17:41:32.314]             }
[17:41:32.314]         }
[17:41:32.314]     })
[17:41:32.314]     if (TRUE) {
[17:41:32.314]         base::sink(type = "output", split = FALSE)
[17:41:32.314]         if (TRUE) {
[17:41:32.314]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.314]         }
[17:41:32.314]         else {
[17:41:32.314]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.314]         }
[17:41:32.314]         base::close(...future.stdout)
[17:41:32.314]         ...future.stdout <- NULL
[17:41:32.314]     }
[17:41:32.314]     ...future.result$conditions <- ...future.conditions
[17:41:32.314]     ...future.result$finished <- base::Sys.time()
[17:41:32.314]     ...future.result
[17:41:32.314] }
[17:41:32.315] plan(): Setting new future strategy stack:
[17:41:32.316] List of future strategies:
[17:41:32.316] 1. sequential:
[17:41:32.316]    - args: function (..., envir = parent.frame())
[17:41:32.316]    - tweaked: FALSE
[17:41:32.316]    - call: NULL
[17:41:32.316] plan(): nbrOfWorkers() = 1
[17:41:32.317] plan(): Setting new future strategy stack:
[17:41:32.317] List of future strategies:
[17:41:32.317] 1. sequential:
[17:41:32.317]    - args: function (..., envir = parent.frame())
[17:41:32.317]    - tweaked: FALSE
[17:41:32.317]    - call: future::plan("sequential")
[17:41:32.317] plan(): nbrOfWorkers() = 1
[17:41:32.318] SequentialFuture started (and completed)
[17:41:32.318] - Launch lazy future ... done
[17:41:32.318] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[17:41:32.318] resolved() for ‘SequentialFuture’ ...
[17:41:32.318] - state: ‘finished’
[17:41:32.318] - run: TRUE
[17:41:32.318] - result: ‘FutureResult’
[17:41:32.319] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[17:41:32.319] getGlobalsAndPackages() ...
[17:41:32.319] Searching for globals...
[17:41:32.320] - globals found: [2] ‘{’, ‘stop’
[17:41:32.320] Searching for globals ... DONE
[17:41:32.320] Resolving globals: FALSE
[17:41:32.320] 
[17:41:32.321] 
[17:41:32.321] getGlobalsAndPackages() ... DONE
[17:41:32.321] run() for ‘Future’ ...
[17:41:32.321] - state: ‘created’
[17:41:32.321] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:41:32.321] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:41:32.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:41:32.322]   - Field: ‘label’
[17:41:32.322]   - Field: ‘local’
[17:41:32.322]   - Field: ‘owner’
[17:41:32.322]   - Field: ‘envir’
[17:41:32.322]   - Field: ‘packages’
[17:41:32.322]   - Field: ‘gc’
[17:41:32.322]   - Field: ‘conditions’
[17:41:32.322]   - Field: ‘expr’
[17:41:32.324]   - Field: ‘uuid’
[17:41:32.324]   - Field: ‘seed’
[17:41:32.324]   - Field: ‘version’
[17:41:32.324]   - Field: ‘result’
[17:41:32.324]   - Field: ‘asynchronous’
[17:41:32.324]   - Field: ‘calls’
[17:41:32.325]   - Field: ‘globals’
[17:41:32.325]   - Field: ‘stdout’
[17:41:32.325]   - Field: ‘earlySignal’
[17:41:32.325]   - Field: ‘lazy’
[17:41:32.325]   - Field: ‘state’
[17:41:32.325] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:41:32.325] - Launch lazy future ...
[17:41:32.325] Packages needed by the future expression (n = 0): <none>
[17:41:32.325] Packages needed by future strategies (n = 0): <none>
[17:41:32.326] {
[17:41:32.326]     {
[17:41:32.326]         {
[17:41:32.326]             ...future.startTime <- base::Sys.time()
[17:41:32.326]             {
[17:41:32.326]                 {
[17:41:32.326]                   {
[17:41:32.326]                     base::local({
[17:41:32.326]                       has_future <- base::requireNamespace("future", 
[17:41:32.326]                         quietly = TRUE)
[17:41:32.326]                       if (has_future) {
[17:41:32.326]                         ns <- base::getNamespace("future")
[17:41:32.326]                         version <- ns[[".package"]][["version"]]
[17:41:32.326]                         if (is.null(version)) 
[17:41:32.326]                           version <- utils::packageVersion("future")
[17:41:32.326]                       }
[17:41:32.326]                       else {
[17:41:32.326]                         version <- NULL
[17:41:32.326]                       }
[17:41:32.326]                       if (!has_future || version < "1.8.0") {
[17:41:32.326]                         info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.326]                           "", base::R.version$version.string), 
[17:41:32.326]                           platform = base::sprintf("%s (%s-bit)", 
[17:41:32.326]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.326]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.326]                             "release", "version")], collapse = " "), 
[17:41:32.326]                           hostname = base::Sys.info()[["nodename"]])
[17:41:32.326]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.326]                           info)
[17:41:32.326]                         info <- base::paste(info, collapse = "; ")
[17:41:32.326]                         if (!has_future) {
[17:41:32.326]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.326]                             info)
[17:41:32.326]                         }
[17:41:32.326]                         else {
[17:41:32.326]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.326]                             info, version)
[17:41:32.326]                         }
[17:41:32.326]                         base::stop(msg)
[17:41:32.326]                       }
[17:41:32.326]                     })
[17:41:32.326]                   }
[17:41:32.326]                   options(future.plan = NULL)
[17:41:32.326]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.326]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.326]                 }
[17:41:32.326]                 ...future.workdir <- getwd()
[17:41:32.326]             }
[17:41:32.326]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.326]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.326]         }
[17:41:32.326]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.326]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.326]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.326]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.326]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.326]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.326]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.326]             base::names(...future.oldOptions))
[17:41:32.326]     }
[17:41:32.326]     if (FALSE) {
[17:41:32.326]     }
[17:41:32.326]     else {
[17:41:32.326]         if (TRUE) {
[17:41:32.326]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.326]                 open = "w")
[17:41:32.326]         }
[17:41:32.326]         else {
[17:41:32.326]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.326]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.326]         }
[17:41:32.326]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.326]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.326]             base::sink(type = "output", split = FALSE)
[17:41:32.326]             base::close(...future.stdout)
[17:41:32.326]         }, add = TRUE)
[17:41:32.326]     }
[17:41:32.326]     ...future.frame <- base::sys.nframe()
[17:41:32.326]     ...future.conditions <- base::list()
[17:41:32.326]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.326]     if (FALSE) {
[17:41:32.326]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.326]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.326]     }
[17:41:32.326]     ...future.result <- base::tryCatch({
[17:41:32.326]         base::withCallingHandlers({
[17:41:32.326]             ...future.value <- base::withVisible(base::local({
[17:41:32.326]                 42L
[17:41:32.326]                 stop("Woops")
[17:41:32.326]             }))
[17:41:32.326]             future::FutureResult(value = ...future.value$value, 
[17:41:32.326]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.326]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.326]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.326]                     ...future.globalenv.names))
[17:41:32.326]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.326]         }, condition = base::local({
[17:41:32.326]             c <- base::c
[17:41:32.326]             inherits <- base::inherits
[17:41:32.326]             invokeRestart <- base::invokeRestart
[17:41:32.326]             length <- base::length
[17:41:32.326]             list <- base::list
[17:41:32.326]             seq.int <- base::seq.int
[17:41:32.326]             signalCondition <- base::signalCondition
[17:41:32.326]             sys.calls <- base::sys.calls
[17:41:32.326]             `[[` <- base::`[[`
[17:41:32.326]             `+` <- base::`+`
[17:41:32.326]             `<<-` <- base::`<<-`
[17:41:32.326]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.326]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.326]                   3L)]
[17:41:32.326]             }
[17:41:32.326]             function(cond) {
[17:41:32.326]                 is_error <- inherits(cond, "error")
[17:41:32.326]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.326]                   NULL)
[17:41:32.326]                 if (is_error) {
[17:41:32.326]                   sessionInformation <- function() {
[17:41:32.326]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.326]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.326]                       search = base::search(), system = base::Sys.info())
[17:41:32.326]                   }
[17:41:32.326]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.326]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.326]                     cond$call), session = sessionInformation(), 
[17:41:32.326]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.326]                   signalCondition(cond)
[17:41:32.326]                 }
[17:41:32.326]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.326]                 "immediateCondition"))) {
[17:41:32.326]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.326]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.326]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.326]                   if (TRUE && !signal) {
[17:41:32.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.326]                     {
[17:41:32.326]                       inherits <- base::inherits
[17:41:32.326]                       invokeRestart <- base::invokeRestart
[17:41:32.326]                       is.null <- base::is.null
[17:41:32.326]                       muffled <- FALSE
[17:41:32.326]                       if (inherits(cond, "message")) {
[17:41:32.326]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.326]                         if (muffled) 
[17:41:32.326]                           invokeRestart("muffleMessage")
[17:41:32.326]                       }
[17:41:32.326]                       else if (inherits(cond, "warning")) {
[17:41:32.326]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.326]                         if (muffled) 
[17:41:32.326]                           invokeRestart("muffleWarning")
[17:41:32.326]                       }
[17:41:32.326]                       else if (inherits(cond, "condition")) {
[17:41:32.326]                         if (!is.null(pattern)) {
[17:41:32.326]                           computeRestarts <- base::computeRestarts
[17:41:32.326]                           grepl <- base::grepl
[17:41:32.326]                           restarts <- computeRestarts(cond)
[17:41:32.326]                           for (restart in restarts) {
[17:41:32.326]                             name <- restart$name
[17:41:32.326]                             if (is.null(name)) 
[17:41:32.326]                               next
[17:41:32.326]                             if (!grepl(pattern, name)) 
[17:41:32.326]                               next
[17:41:32.326]                             invokeRestart(restart)
[17:41:32.326]                             muffled <- TRUE
[17:41:32.326]                             break
[17:41:32.326]                           }
[17:41:32.326]                         }
[17:41:32.326]                       }
[17:41:32.326]                       invisible(muffled)
[17:41:32.326]                     }
[17:41:32.326]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.326]                   }
[17:41:32.326]                 }
[17:41:32.326]                 else {
[17:41:32.326]                   if (TRUE) {
[17:41:32.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.326]                     {
[17:41:32.326]                       inherits <- base::inherits
[17:41:32.326]                       invokeRestart <- base::invokeRestart
[17:41:32.326]                       is.null <- base::is.null
[17:41:32.326]                       muffled <- FALSE
[17:41:32.326]                       if (inherits(cond, "message")) {
[17:41:32.326]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.326]                         if (muffled) 
[17:41:32.326]                           invokeRestart("muffleMessage")
[17:41:32.326]                       }
[17:41:32.326]                       else if (inherits(cond, "warning")) {
[17:41:32.326]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.326]                         if (muffled) 
[17:41:32.326]                           invokeRestart("muffleWarning")
[17:41:32.326]                       }
[17:41:32.326]                       else if (inherits(cond, "condition")) {
[17:41:32.326]                         if (!is.null(pattern)) {
[17:41:32.326]                           computeRestarts <- base::computeRestarts
[17:41:32.326]                           grepl <- base::grepl
[17:41:32.326]                           restarts <- computeRestarts(cond)
[17:41:32.326]                           for (restart in restarts) {
[17:41:32.326]                             name <- restart$name
[17:41:32.326]                             if (is.null(name)) 
[17:41:32.326]                               next
[17:41:32.326]                             if (!grepl(pattern, name)) 
[17:41:32.326]                               next
[17:41:32.326]                             invokeRestart(restart)
[17:41:32.326]                             muffled <- TRUE
[17:41:32.326]                             break
[17:41:32.326]                           }
[17:41:32.326]                         }
[17:41:32.326]                       }
[17:41:32.326]                       invisible(muffled)
[17:41:32.326]                     }
[17:41:32.326]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.326]                   }
[17:41:32.326]                 }
[17:41:32.326]             }
[17:41:32.326]         }))
[17:41:32.326]     }, error = function(ex) {
[17:41:32.326]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.326]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.326]                 ...future.rng), started = ...future.startTime, 
[17:41:32.326]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.326]             version = "1.8"), class = "FutureResult")
[17:41:32.326]     }, finally = {
[17:41:32.326]         if (!identical(...future.workdir, getwd())) 
[17:41:32.326]             setwd(...future.workdir)
[17:41:32.326]         {
[17:41:32.326]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.326]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.326]             }
[17:41:32.326]             base::options(...future.oldOptions)
[17:41:32.326]             if (.Platform$OS.type == "windows") {
[17:41:32.326]                 old_names <- names(...future.oldEnvVars)
[17:41:32.326]                 envs <- base::Sys.getenv()
[17:41:32.326]                 names <- names(envs)
[17:41:32.326]                 common <- intersect(names, old_names)
[17:41:32.326]                 added <- setdiff(names, old_names)
[17:41:32.326]                 removed <- setdiff(old_names, names)
[17:41:32.326]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.326]                   envs[common]]
[17:41:32.326]                 NAMES <- toupper(changed)
[17:41:32.326]                 args <- list()
[17:41:32.326]                 for (kk in seq_along(NAMES)) {
[17:41:32.326]                   name <- changed[[kk]]
[17:41:32.326]                   NAME <- NAMES[[kk]]
[17:41:32.326]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.326]                     next
[17:41:32.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.326]                 }
[17:41:32.326]                 NAMES <- toupper(added)
[17:41:32.326]                 for (kk in seq_along(NAMES)) {
[17:41:32.326]                   name <- added[[kk]]
[17:41:32.326]                   NAME <- NAMES[[kk]]
[17:41:32.326]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.326]                     next
[17:41:32.326]                   args[[name]] <- ""
[17:41:32.326]                 }
[17:41:32.326]                 NAMES <- toupper(removed)
[17:41:32.326]                 for (kk in seq_along(NAMES)) {
[17:41:32.326]                   name <- removed[[kk]]
[17:41:32.326]                   NAME <- NAMES[[kk]]
[17:41:32.326]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.326]                     next
[17:41:32.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.326]                 }
[17:41:32.326]                 if (length(args) > 0) 
[17:41:32.326]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.326]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.326]             }
[17:41:32.326]             else {
[17:41:32.326]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.326]             }
[17:41:32.326]             {
[17:41:32.326]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.326]                   0L) {
[17:41:32.326]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.326]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.326]                   base::options(opts)
[17:41:32.326]                 }
[17:41:32.326]                 {
[17:41:32.326]                   {
[17:41:32.326]                     NULL
[17:41:32.326]                     RNGkind("Mersenne-Twister")
[17:41:32.326]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:41:32.326]                       inherits = FALSE)
[17:41:32.326]                   }
[17:41:32.326]                   options(future.plan = NULL)
[17:41:32.326]                   if (is.na(NA_character_)) 
[17:41:32.326]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.326]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.326]                   future::plan(list(function (..., envir = parent.frame()) 
[17:41:32.326]                   {
[17:41:32.326]                     future <- SequentialFuture(..., envir = envir)
[17:41:32.326]                     if (!future$lazy) 
[17:41:32.326]                       future <- run(future)
[17:41:32.326]                     invisible(future)
[17:41:32.326]                   }), .cleanup = FALSE, .init = FALSE)
[17:41:32.326]                 }
[17:41:32.326]             }
[17:41:32.326]         }
[17:41:32.326]     })
[17:41:32.326]     if (TRUE) {
[17:41:32.326]         base::sink(type = "output", split = FALSE)
[17:41:32.326]         if (TRUE) {
[17:41:32.326]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.326]         }
[17:41:32.326]         else {
[17:41:32.326]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.326]         }
[17:41:32.326]         base::close(...future.stdout)
[17:41:32.326]         ...future.stdout <- NULL
[17:41:32.326]     }
[17:41:32.326]     ...future.result$conditions <- ...future.conditions
[17:41:32.326]     ...future.result$finished <- base::Sys.time()
[17:41:32.326]     ...future.result
[17:41:32.326] }
[17:41:32.328] plan(): Setting new future strategy stack:
[17:41:32.328] List of future strategies:
[17:41:32.328] 1. sequential:
[17:41:32.328]    - args: function (..., envir = parent.frame())
[17:41:32.328]    - tweaked: FALSE
[17:41:32.328]    - call: NULL
[17:41:32.328] plan(): nbrOfWorkers() = 1
[17:41:32.329] plan(): Setting new future strategy stack:
[17:41:32.329] List of future strategies:
[17:41:32.329] 1. sequential:
[17:41:32.329]    - args: function (..., envir = parent.frame())
[17:41:32.329]    - tweaked: FALSE
[17:41:32.329]    - call: future::plan("sequential")
[17:41:32.329] plan(): nbrOfWorkers() = 1
[17:41:32.330] SequentialFuture started (and completed)
[17:41:32.330] signalConditions() ...
[17:41:32.330]  - include = ‘immediateCondition’
[17:41:32.330]  - exclude = 
[17:41:32.330]  - resignal = FALSE
[17:41:32.330]  - Number of conditions: 1
[17:41:32.330] signalConditions() ... done
[17:41:32.330] - Launch lazy future ... done
[17:41:32.330] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:41:32.331] signalConditions() ...
[17:41:32.331]  - include = ‘immediateCondition’
[17:41:32.331]  - exclude = 
[17:41:32.331]  - resignal = FALSE
[17:41:32.331]  - Number of conditions: 1
[17:41:32.331] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[17:41:32.337] plan(): Setting new future strategy stack:
[17:41:32.337] List of future strategies:
[17:41:32.337] 1. multisession:
[17:41:32.337]    - args: function (..., workers = 2L, envir = parent.frame())
[17:41:32.337]    - tweaked: TRUE
[17:41:32.337]    - call: plan(multisession, workers = 2L)
[17:41:32.348] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:41:32.348] multisession:
[17:41:32.348] - args: function (..., workers = 2L, envir = parent.frame())
[17:41:32.348] - tweaked: TRUE
[17:41:32.348] - call: plan(multisession, workers = 2L)
[17:41:32.349] getGlobalsAndPackages() ...
[17:41:32.349] Not searching for globals
[17:41:32.349] - globals: [0] <none>
[17:41:32.349] getGlobalsAndPackages() ... DONE
[17:41:32.350] [local output] makeClusterPSOCK() ...
[17:41:32.381] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:41:32.387] [local output] Base port: 11734
[17:41:32.387] [local output] Getting setup options for 2 cluster nodes ...
[17:41:32.387] [local output]  - Node 1 of 2 ...
[17:41:32.388] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:32.388] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp3FWFoU/worker.rank=1.parallelly.parent=41451.a1eb31447e65.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp3FWFoU/worker.rank=1.parallelly.parent=41451.a1eb31447e65.pid")'’
[17:41:32.576] - Possible to infer worker's PID: TRUE
[17:41:32.576] [local output] Rscript port: 11734

[17:41:32.576] [local output]  - Node 2 of 2 ...
[17:41:32.577] [local output] localMachine=TRUE => revtunnel=FALSE

[17:41:32.577] [local output] Rscript port: 11734

[17:41:32.578] [local output] Getting setup options for 2 cluster nodes ... done
[17:41:32.578] [local output]  - Parallel setup requested for some PSOCK nodes
[17:41:32.578] [local output] Setting up PSOCK nodes in parallel
[17:41:32.578] List of 36
[17:41:32.578]  $ worker          : chr "localhost"
[17:41:32.578]   ..- attr(*, "localhost")= logi TRUE
[17:41:32.578]  $ master          : chr "localhost"
[17:41:32.578]  $ port            : int 11734
[17:41:32.578]  $ connectTimeout  : num 120
[17:41:32.578]  $ timeout         : num 2592000
[17:41:32.578]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:41:32.578]  $ homogeneous     : logi TRUE
[17:41:32.578]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:41:32.578]  $ rscript_envs    : NULL
[17:41:32.578]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:32.578]  $ rscript_startup : NULL
[17:41:32.578]  $ rscript_sh      : chr "sh"
[17:41:32.578]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:32.578]  $ methods         : logi TRUE
[17:41:32.578]  $ socketOptions   : chr "no-delay"
[17:41:32.578]  $ useXDR          : logi FALSE
[17:41:32.578]  $ outfile         : chr "/dev/null"
[17:41:32.578]  $ renice          : int NA
[17:41:32.578]  $ rshcmd          : NULL
[17:41:32.578]  $ user            : chr(0) 
[17:41:32.578]  $ revtunnel       : logi FALSE
[17:41:32.578]  $ rshlogfile      : NULL
[17:41:32.578]  $ rshopts         : chr(0) 
[17:41:32.578]  $ rank            : int 1
[17:41:32.578]  $ manual          : logi FALSE
[17:41:32.578]  $ dryrun          : logi FALSE
[17:41:32.578]  $ quiet           : logi FALSE
[17:41:32.578]  $ setup_strategy  : chr "parallel"
[17:41:32.578]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:32.578]  $ pidfile         : chr "/tmp/Rtmp3FWFoU/worker.rank=1.parallelly.parent=41451.a1eb31447e65.pid"
[17:41:32.578]  $ rshcmd_label    : NULL
[17:41:32.578]  $ rsh_call        : NULL
[17:41:32.578]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:41:32.578]  $ localMachine    : logi TRUE
[17:41:32.578]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:41:32.578]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:41:32.578]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:41:32.578]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:41:32.578]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:41:32.578]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:41:32.578]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:41:32.578]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:41:32.578]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:41:32.578]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:41:32.578]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:41:32.578]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:41:32.578]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:41:32.578]  $ arguments       :List of 28
[17:41:32.578]   ..$ worker          : chr "localhost"
[17:41:32.578]   ..$ master          : NULL
[17:41:32.578]   ..$ port            : int 11734
[17:41:32.578]   ..$ connectTimeout  : num 120
[17:41:32.578]   ..$ timeout         : num 2592000
[17:41:32.578]   ..$ rscript         : NULL
[17:41:32.578]   ..$ homogeneous     : NULL
[17:41:32.578]   ..$ rscript_args    : NULL
[17:41:32.578]   ..$ rscript_envs    : NULL
[17:41:32.578]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:41:32.578]   ..$ rscript_startup : NULL
[17:41:32.578]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:41:32.578]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:41:32.578]   ..$ methods         : logi TRUE
[17:41:32.578]   ..$ socketOptions   : chr "no-delay"
[17:41:32.578]   ..$ useXDR          : logi FALSE
[17:41:32.578]   ..$ outfile         : chr "/dev/null"
[17:41:32.578]   ..$ renice          : int NA
[17:41:32.578]   ..$ rshcmd          : NULL
[17:41:32.578]   ..$ user            : NULL
[17:41:32.578]   ..$ revtunnel       : logi NA
[17:41:32.578]   ..$ rshlogfile      : NULL
[17:41:32.578]   ..$ rshopts         : NULL
[17:41:32.578]   ..$ rank            : int 1
[17:41:32.578]   ..$ manual          : logi FALSE
[17:41:32.578]   ..$ dryrun          : logi FALSE
[17:41:32.578]   ..$ quiet           : logi FALSE
[17:41:32.578]   ..$ setup_strategy  : chr "parallel"
[17:41:32.578]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:41:32.597] [local output] System call to launch all workers:
[17:41:32.597] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp3FWFoU/worker.rank=1.parallelly.parent=41451.a1eb31447e65.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11734 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:41:32.598] [local output] Starting PSOCK main server
[17:41:32.599] [local output] Workers launched
[17:41:32.599] [local output] Waiting for workers to connect back
[17:41:32.600]  - [local output] 0 workers out of 2 ready
[17:41:32.848]  - [local output] 0 workers out of 2 ready
[17:41:32.848]  - [local output] 1 workers out of 2 ready
[17:41:32.852]  - [local output] 1 workers out of 2 ready
[17:41:32.852]  - [local output] 2 workers out of 2 ready
[17:41:32.852] [local output] Launching of workers completed
[17:41:32.852] [local output] Collecting session information from workers
[17:41:32.853] [local output]  - Worker #1 of 2
[17:41:32.854] [local output]  - Worker #2 of 2
[17:41:32.854] [local output] makeClusterPSOCK() ... done
[17:41:32.866] Packages needed by the future expression (n = 0): <none>
[17:41:32.866] Packages needed by future strategies (n = 0): <none>
[17:41:32.867] {
[17:41:32.867]     {
[17:41:32.867]         {
[17:41:32.867]             ...future.startTime <- base::Sys.time()
[17:41:32.867]             {
[17:41:32.867]                 {
[17:41:32.867]                   {
[17:41:32.867]                     {
[17:41:32.867]                       base::local({
[17:41:32.867]                         has_future <- base::requireNamespace("future", 
[17:41:32.867]                           quietly = TRUE)
[17:41:32.867]                         if (has_future) {
[17:41:32.867]                           ns <- base::getNamespace("future")
[17:41:32.867]                           version <- ns[[".package"]][["version"]]
[17:41:32.867]                           if (is.null(version)) 
[17:41:32.867]                             version <- utils::packageVersion("future")
[17:41:32.867]                         }
[17:41:32.867]                         else {
[17:41:32.867]                           version <- NULL
[17:41:32.867]                         }
[17:41:32.867]                         if (!has_future || version < "1.8.0") {
[17:41:32.867]                           info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.867]                             "", base::R.version$version.string), 
[17:41:32.867]                             platform = base::sprintf("%s (%s-bit)", 
[17:41:32.867]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.867]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.867]                               "release", "version")], collapse = " "), 
[17:41:32.867]                             hostname = base::Sys.info()[["nodename"]])
[17:41:32.867]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.867]                             info)
[17:41:32.867]                           info <- base::paste(info, collapse = "; ")
[17:41:32.867]                           if (!has_future) {
[17:41:32.867]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.867]                               info)
[17:41:32.867]                           }
[17:41:32.867]                           else {
[17:41:32.867]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.867]                               info, version)
[17:41:32.867]                           }
[17:41:32.867]                           base::stop(msg)
[17:41:32.867]                         }
[17:41:32.867]                       })
[17:41:32.867]                     }
[17:41:32.867]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:41:32.867]                     base::options(mc.cores = 1L)
[17:41:32.867]                   }
[17:41:32.867]                   options(future.plan = NULL)
[17:41:32.867]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.867]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.867]                 }
[17:41:32.867]                 ...future.workdir <- getwd()
[17:41:32.867]             }
[17:41:32.867]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.867]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.867]         }
[17:41:32.867]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.867]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.867]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.867]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.867]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.867]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.867]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.867]             base::names(...future.oldOptions))
[17:41:32.867]     }
[17:41:32.867]     if (FALSE) {
[17:41:32.867]     }
[17:41:32.867]     else {
[17:41:32.867]         if (TRUE) {
[17:41:32.867]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.867]                 open = "w")
[17:41:32.867]         }
[17:41:32.867]         else {
[17:41:32.867]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.867]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.867]         }
[17:41:32.867]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.867]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.867]             base::sink(type = "output", split = FALSE)
[17:41:32.867]             base::close(...future.stdout)
[17:41:32.867]         }, add = TRUE)
[17:41:32.867]     }
[17:41:32.867]     ...future.frame <- base::sys.nframe()
[17:41:32.867]     ...future.conditions <- base::list()
[17:41:32.867]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.867]     if (FALSE) {
[17:41:32.867]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.867]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.867]     }
[17:41:32.867]     ...future.result <- base::tryCatch({
[17:41:32.867]         base::withCallingHandlers({
[17:41:32.867]             ...future.value <- base::withVisible(base::local({
[17:41:32.867]                 ...future.makeSendCondition <- local({
[17:41:32.867]                   sendCondition <- NULL
[17:41:32.867]                   function(frame = 1L) {
[17:41:32.867]                     if (is.function(sendCondition)) 
[17:41:32.867]                       return(sendCondition)
[17:41:32.867]                     ns <- getNamespace("parallel")
[17:41:32.867]                     if (exists("sendData", mode = "function", 
[17:41:32.867]                       envir = ns)) {
[17:41:32.867]                       parallel_sendData <- get("sendData", mode = "function", 
[17:41:32.867]                         envir = ns)
[17:41:32.867]                       envir <- sys.frame(frame)
[17:41:32.867]                       master <- NULL
[17:41:32.867]                       while (!identical(envir, .GlobalEnv) && 
[17:41:32.867]                         !identical(envir, emptyenv())) {
[17:41:32.867]                         if (exists("master", mode = "list", envir = envir, 
[17:41:32.867]                           inherits = FALSE)) {
[17:41:32.867]                           master <- get("master", mode = "list", 
[17:41:32.867]                             envir = envir, inherits = FALSE)
[17:41:32.867]                           if (inherits(master, c("SOCKnode", 
[17:41:32.867]                             "SOCK0node"))) {
[17:41:32.867]                             sendCondition <<- function(cond) {
[17:41:32.867]                               data <- list(type = "VALUE", value = cond, 
[17:41:32.867]                                 success = TRUE)
[17:41:32.867]                               parallel_sendData(master, data)
[17:41:32.867]                             }
[17:41:32.867]                             return(sendCondition)
[17:41:32.867]                           }
[17:41:32.867]                         }
[17:41:32.867]                         frame <- frame + 1L
[17:41:32.867]                         envir <- sys.frame(frame)
[17:41:32.867]                       }
[17:41:32.867]                     }
[17:41:32.867]                     sendCondition <<- function(cond) NULL
[17:41:32.867]                   }
[17:41:32.867]                 })
[17:41:32.867]                 withCallingHandlers({
[17:41:32.867]                   NA
[17:41:32.867]                 }, immediateCondition = function(cond) {
[17:41:32.867]                   sendCondition <- ...future.makeSendCondition()
[17:41:32.867]                   sendCondition(cond)
[17:41:32.867]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.867]                   {
[17:41:32.867]                     inherits <- base::inherits
[17:41:32.867]                     invokeRestart <- base::invokeRestart
[17:41:32.867]                     is.null <- base::is.null
[17:41:32.867]                     muffled <- FALSE
[17:41:32.867]                     if (inherits(cond, "message")) {
[17:41:32.867]                       muffled <- grepl(pattern, "muffleMessage")
[17:41:32.867]                       if (muffled) 
[17:41:32.867]                         invokeRestart("muffleMessage")
[17:41:32.867]                     }
[17:41:32.867]                     else if (inherits(cond, "warning")) {
[17:41:32.867]                       muffled <- grepl(pattern, "muffleWarning")
[17:41:32.867]                       if (muffled) 
[17:41:32.867]                         invokeRestart("muffleWarning")
[17:41:32.867]                     }
[17:41:32.867]                     else if (inherits(cond, "condition")) {
[17:41:32.867]                       if (!is.null(pattern)) {
[17:41:32.867]                         computeRestarts <- base::computeRestarts
[17:41:32.867]                         grepl <- base::grepl
[17:41:32.867]                         restarts <- computeRestarts(cond)
[17:41:32.867]                         for (restart in restarts) {
[17:41:32.867]                           name <- restart$name
[17:41:32.867]                           if (is.null(name)) 
[17:41:32.867]                             next
[17:41:32.867]                           if (!grepl(pattern, name)) 
[17:41:32.867]                             next
[17:41:32.867]                           invokeRestart(restart)
[17:41:32.867]                           muffled <- TRUE
[17:41:32.867]                           break
[17:41:32.867]                         }
[17:41:32.867]                       }
[17:41:32.867]                     }
[17:41:32.867]                     invisible(muffled)
[17:41:32.867]                   }
[17:41:32.867]                   muffleCondition(cond)
[17:41:32.867]                 })
[17:41:32.867]             }))
[17:41:32.867]             future::FutureResult(value = ...future.value$value, 
[17:41:32.867]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.867]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.867]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.867]                     ...future.globalenv.names))
[17:41:32.867]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.867]         }, condition = base::local({
[17:41:32.867]             c <- base::c
[17:41:32.867]             inherits <- base::inherits
[17:41:32.867]             invokeRestart <- base::invokeRestart
[17:41:32.867]             length <- base::length
[17:41:32.867]             list <- base::list
[17:41:32.867]             seq.int <- base::seq.int
[17:41:32.867]             signalCondition <- base::signalCondition
[17:41:32.867]             sys.calls <- base::sys.calls
[17:41:32.867]             `[[` <- base::`[[`
[17:41:32.867]             `+` <- base::`+`
[17:41:32.867]             `<<-` <- base::`<<-`
[17:41:32.867]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.867]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.867]                   3L)]
[17:41:32.867]             }
[17:41:32.867]             function(cond) {
[17:41:32.867]                 is_error <- inherits(cond, "error")
[17:41:32.867]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.867]                   NULL)
[17:41:32.867]                 if (is_error) {
[17:41:32.867]                   sessionInformation <- function() {
[17:41:32.867]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.867]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.867]                       search = base::search(), system = base::Sys.info())
[17:41:32.867]                   }
[17:41:32.867]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.867]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.867]                     cond$call), session = sessionInformation(), 
[17:41:32.867]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.867]                   signalCondition(cond)
[17:41:32.867]                 }
[17:41:32.867]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.867]                 "immediateCondition"))) {
[17:41:32.867]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.867]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.867]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.867]                   if (TRUE && !signal) {
[17:41:32.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.867]                     {
[17:41:32.867]                       inherits <- base::inherits
[17:41:32.867]                       invokeRestart <- base::invokeRestart
[17:41:32.867]                       is.null <- base::is.null
[17:41:32.867]                       muffled <- FALSE
[17:41:32.867]                       if (inherits(cond, "message")) {
[17:41:32.867]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.867]                         if (muffled) 
[17:41:32.867]                           invokeRestart("muffleMessage")
[17:41:32.867]                       }
[17:41:32.867]                       else if (inherits(cond, "warning")) {
[17:41:32.867]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.867]                         if (muffled) 
[17:41:32.867]                           invokeRestart("muffleWarning")
[17:41:32.867]                       }
[17:41:32.867]                       else if (inherits(cond, "condition")) {
[17:41:32.867]                         if (!is.null(pattern)) {
[17:41:32.867]                           computeRestarts <- base::computeRestarts
[17:41:32.867]                           grepl <- base::grepl
[17:41:32.867]                           restarts <- computeRestarts(cond)
[17:41:32.867]                           for (restart in restarts) {
[17:41:32.867]                             name <- restart$name
[17:41:32.867]                             if (is.null(name)) 
[17:41:32.867]                               next
[17:41:32.867]                             if (!grepl(pattern, name)) 
[17:41:32.867]                               next
[17:41:32.867]                             invokeRestart(restart)
[17:41:32.867]                             muffled <- TRUE
[17:41:32.867]                             break
[17:41:32.867]                           }
[17:41:32.867]                         }
[17:41:32.867]                       }
[17:41:32.867]                       invisible(muffled)
[17:41:32.867]                     }
[17:41:32.867]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.867]                   }
[17:41:32.867]                 }
[17:41:32.867]                 else {
[17:41:32.867]                   if (TRUE) {
[17:41:32.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.867]                     {
[17:41:32.867]                       inherits <- base::inherits
[17:41:32.867]                       invokeRestart <- base::invokeRestart
[17:41:32.867]                       is.null <- base::is.null
[17:41:32.867]                       muffled <- FALSE
[17:41:32.867]                       if (inherits(cond, "message")) {
[17:41:32.867]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.867]                         if (muffled) 
[17:41:32.867]                           invokeRestart("muffleMessage")
[17:41:32.867]                       }
[17:41:32.867]                       else if (inherits(cond, "warning")) {
[17:41:32.867]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.867]                         if (muffled) 
[17:41:32.867]                           invokeRestart("muffleWarning")
[17:41:32.867]                       }
[17:41:32.867]                       else if (inherits(cond, "condition")) {
[17:41:32.867]                         if (!is.null(pattern)) {
[17:41:32.867]                           computeRestarts <- base::computeRestarts
[17:41:32.867]                           grepl <- base::grepl
[17:41:32.867]                           restarts <- computeRestarts(cond)
[17:41:32.867]                           for (restart in restarts) {
[17:41:32.867]                             name <- restart$name
[17:41:32.867]                             if (is.null(name)) 
[17:41:32.867]                               next
[17:41:32.867]                             if (!grepl(pattern, name)) 
[17:41:32.867]                               next
[17:41:32.867]                             invokeRestart(restart)
[17:41:32.867]                             muffled <- TRUE
[17:41:32.867]                             break
[17:41:32.867]                           }
[17:41:32.867]                         }
[17:41:32.867]                       }
[17:41:32.867]                       invisible(muffled)
[17:41:32.867]                     }
[17:41:32.867]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.867]                   }
[17:41:32.867]                 }
[17:41:32.867]             }
[17:41:32.867]         }))
[17:41:32.867]     }, error = function(ex) {
[17:41:32.867]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.867]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.867]                 ...future.rng), started = ...future.startTime, 
[17:41:32.867]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.867]             version = "1.8"), class = "FutureResult")
[17:41:32.867]     }, finally = {
[17:41:32.867]         if (!identical(...future.workdir, getwd())) 
[17:41:32.867]             setwd(...future.workdir)
[17:41:32.867]         {
[17:41:32.867]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.867]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.867]             }
[17:41:32.867]             base::options(...future.oldOptions)
[17:41:32.867]             if (.Platform$OS.type == "windows") {
[17:41:32.867]                 old_names <- names(...future.oldEnvVars)
[17:41:32.867]                 envs <- base::Sys.getenv()
[17:41:32.867]                 names <- names(envs)
[17:41:32.867]                 common <- intersect(names, old_names)
[17:41:32.867]                 added <- setdiff(names, old_names)
[17:41:32.867]                 removed <- setdiff(old_names, names)
[17:41:32.867]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.867]                   envs[common]]
[17:41:32.867]                 NAMES <- toupper(changed)
[17:41:32.867]                 args <- list()
[17:41:32.867]                 for (kk in seq_along(NAMES)) {
[17:41:32.867]                   name <- changed[[kk]]
[17:41:32.867]                   NAME <- NAMES[[kk]]
[17:41:32.867]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.867]                     next
[17:41:32.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.867]                 }
[17:41:32.867]                 NAMES <- toupper(added)
[17:41:32.867]                 for (kk in seq_along(NAMES)) {
[17:41:32.867]                   name <- added[[kk]]
[17:41:32.867]                   NAME <- NAMES[[kk]]
[17:41:32.867]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.867]                     next
[17:41:32.867]                   args[[name]] <- ""
[17:41:32.867]                 }
[17:41:32.867]                 NAMES <- toupper(removed)
[17:41:32.867]                 for (kk in seq_along(NAMES)) {
[17:41:32.867]                   name <- removed[[kk]]
[17:41:32.867]                   NAME <- NAMES[[kk]]
[17:41:32.867]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.867]                     next
[17:41:32.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.867]                 }
[17:41:32.867]                 if (length(args) > 0) 
[17:41:32.867]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.867]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.867]             }
[17:41:32.867]             else {
[17:41:32.867]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.867]             }
[17:41:32.867]             {
[17:41:32.867]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.867]                   0L) {
[17:41:32.867]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.867]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.867]                   base::options(opts)
[17:41:32.867]                 }
[17:41:32.867]                 {
[17:41:32.867]                   {
[17:41:32.867]                     base::options(mc.cores = ...future.mc.cores.old)
[17:41:32.867]                     NULL
[17:41:32.867]                   }
[17:41:32.867]                   options(future.plan = NULL)
[17:41:32.867]                   if (is.na(NA_character_)) 
[17:41:32.867]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.867]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.867]                   future::plan(list(function (..., workers = 2L, 
[17:41:32.867]                     envir = parent.frame()) 
[17:41:32.867]                   strategy(..., workers = workers, envir = envir)), 
[17:41:32.867]                     .cleanup = FALSE, .init = FALSE)
[17:41:32.867]                 }
[17:41:32.867]             }
[17:41:32.867]         }
[17:41:32.867]     })
[17:41:32.867]     if (TRUE) {
[17:41:32.867]         base::sink(type = "output", split = FALSE)
[17:41:32.867]         if (TRUE) {
[17:41:32.867]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.867]         }
[17:41:32.867]         else {
[17:41:32.867]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.867]         }
[17:41:32.867]         base::close(...future.stdout)
[17:41:32.867]         ...future.stdout <- NULL
[17:41:32.867]     }
[17:41:32.867]     ...future.result$conditions <- ...future.conditions
[17:41:32.867]     ...future.result$finished <- base::Sys.time()
[17:41:32.867]     ...future.result
[17:41:32.867] }
[17:41:32.939] MultisessionFuture started
[17:41:32.940] result() for ClusterFuture ...
[17:41:32.940] receiveMessageFromWorker() for ClusterFuture ...
[17:41:32.940] - Validating connection of MultisessionFuture
[17:41:32.964] - received message: FutureResult
[17:41:32.965] - Received FutureResult
[17:41:32.968] - Erased future from FutureRegistry
[17:41:32.968] result() for ClusterFuture ...
[17:41:32.968] - result already collected: FutureResult
[17:41:32.968] result() for ClusterFuture ... done
[17:41:32.968] receiveMessageFromWorker() for ClusterFuture ... done
[17:41:32.968] result() for ClusterFuture ... done
[17:41:32.968] result() for ClusterFuture ...
[17:41:32.969] - result already collected: FutureResult
[17:41:32.969] result() for ClusterFuture ... done
[17:41:32.969] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:41:32.969] plan(): nbrOfWorkers() = 2
[17:41:32.969] getGlobalsAndPackages() ...
[17:41:32.969] Searching for globals...
[17:41:32.971] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[17:41:32.971] Searching for globals ... DONE
[17:41:32.971] Resolving globals: FALSE
[17:41:32.972] 
[17:41:32.972] 
[17:41:32.972] getGlobalsAndPackages() ... DONE
[17:41:32.972] run() for ‘Future’ ...
[17:41:32.972] - state: ‘created’
[17:41:32.973] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:41:32.984] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:41:32.984] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:41:32.984]   - Field: ‘node’
[17:41:32.985]   - Field: ‘label’
[17:41:32.985]   - Field: ‘local’
[17:41:32.985]   - Field: ‘owner’
[17:41:32.985]   - Field: ‘envir’
[17:41:32.985]   - Field: ‘workers’
[17:41:32.985]   - Field: ‘packages’
[17:41:32.985]   - Field: ‘gc’
[17:41:32.985]   - Field: ‘conditions’
[17:41:32.985]   - Field: ‘persistent’
[17:41:32.985]   - Field: ‘expr’
[17:41:32.986]   - Field: ‘uuid’
[17:41:32.986]   - Field: ‘seed’
[17:41:32.986]   - Field: ‘version’
[17:41:32.986]   - Field: ‘result’
[17:41:32.986]   - Field: ‘asynchronous’
[17:41:32.986]   - Field: ‘calls’
[17:41:32.986]   - Field: ‘globals’
[17:41:32.986]   - Field: ‘stdout’
[17:41:32.987]   - Field: ‘earlySignal’
[17:41:32.987]   - Field: ‘lazy’
[17:41:32.987]   - Field: ‘state’
[17:41:32.987] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:41:32.987] - Launch lazy future ...
[17:41:32.987] Packages needed by the future expression (n = 0): <none>
[17:41:32.988] Packages needed by future strategies (n = 0): <none>
[17:41:32.988] {
[17:41:32.988]     {
[17:41:32.988]         {
[17:41:32.988]             ...future.startTime <- base::Sys.time()
[17:41:32.988]             {
[17:41:32.988]                 {
[17:41:32.988]                   {
[17:41:32.988]                     {
[17:41:32.988]                       base::local({
[17:41:32.988]                         has_future <- base::requireNamespace("future", 
[17:41:32.988]                           quietly = TRUE)
[17:41:32.988]                         if (has_future) {
[17:41:32.988]                           ns <- base::getNamespace("future")
[17:41:32.988]                           version <- ns[[".package"]][["version"]]
[17:41:32.988]                           if (is.null(version)) 
[17:41:32.988]                             version <- utils::packageVersion("future")
[17:41:32.988]                         }
[17:41:32.988]                         else {
[17:41:32.988]                           version <- NULL
[17:41:32.988]                         }
[17:41:32.988]                         if (!has_future || version < "1.8.0") {
[17:41:32.988]                           info <- base::c(r_version = base::gsub("R version ", 
[17:41:32.988]                             "", base::R.version$version.string), 
[17:41:32.988]                             platform = base::sprintf("%s (%s-bit)", 
[17:41:32.988]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:41:32.988]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:41:32.988]                               "release", "version")], collapse = " "), 
[17:41:32.988]                             hostname = base::Sys.info()[["nodename"]])
[17:41:32.988]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:41:32.988]                             info)
[17:41:32.988]                           info <- base::paste(info, collapse = "; ")
[17:41:32.988]                           if (!has_future) {
[17:41:32.988]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:41:32.988]                               info)
[17:41:32.988]                           }
[17:41:32.988]                           else {
[17:41:32.988]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:41:32.988]                               info, version)
[17:41:32.988]                           }
[17:41:32.988]                           base::stop(msg)
[17:41:32.988]                         }
[17:41:32.988]                       })
[17:41:32.988]                     }
[17:41:32.988]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:41:32.988]                     base::options(mc.cores = 1L)
[17:41:32.988]                   }
[17:41:32.988]                   options(future.plan = NULL)
[17:41:32.988]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.988]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:41:32.988]                 }
[17:41:32.988]                 ...future.workdir <- getwd()
[17:41:32.988]             }
[17:41:32.988]             ...future.oldOptions <- base::as.list(base::.Options)
[17:41:32.988]             ...future.oldEnvVars <- base::Sys.getenv()
[17:41:32.988]         }
[17:41:32.988]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:41:32.988]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:41:32.988]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:41:32.988]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:41:32.988]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:41:32.988]             future.stdout.windows.reencode = NULL, width = 80L)
[17:41:32.988]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:41:32.988]             base::names(...future.oldOptions))
[17:41:32.988]     }
[17:41:32.988]     if (FALSE) {
[17:41:32.988]     }
[17:41:32.988]     else {
[17:41:32.988]         if (TRUE) {
[17:41:32.988]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:41:32.988]                 open = "w")
[17:41:32.988]         }
[17:41:32.988]         else {
[17:41:32.988]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:41:32.988]                 windows = "NUL", "/dev/null"), open = "w")
[17:41:32.988]         }
[17:41:32.988]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:41:32.988]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:41:32.988]             base::sink(type = "output", split = FALSE)
[17:41:32.988]             base::close(...future.stdout)
[17:41:32.988]         }, add = TRUE)
[17:41:32.988]     }
[17:41:32.988]     ...future.frame <- base::sys.nframe()
[17:41:32.988]     ...future.conditions <- base::list()
[17:41:32.988]     ...future.rng <- base::globalenv()$.Random.seed
[17:41:32.988]     if (FALSE) {
[17:41:32.988]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:41:32.988]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:41:32.988]     }
[17:41:32.988]     ...future.result <- base::tryCatch({
[17:41:32.988]         base::withCallingHandlers({
[17:41:32.988]             ...future.value <- base::withVisible(base::local({
[17:41:32.988]                 ...future.makeSendCondition <- local({
[17:41:32.988]                   sendCondition <- NULL
[17:41:32.988]                   function(frame = 1L) {
[17:41:32.988]                     if (is.function(sendCondition)) 
[17:41:32.988]                       return(sendCondition)
[17:41:32.988]                     ns <- getNamespace("parallel")
[17:41:32.988]                     if (exists("sendData", mode = "function", 
[17:41:32.988]                       envir = ns)) {
[17:41:32.988]                       parallel_sendData <- get("sendData", mode = "function", 
[17:41:32.988]                         envir = ns)
[17:41:32.988]                       envir <- sys.frame(frame)
[17:41:32.988]                       master <- NULL
[17:41:32.988]                       while (!identical(envir, .GlobalEnv) && 
[17:41:32.988]                         !identical(envir, emptyenv())) {
[17:41:32.988]                         if (exists("master", mode = "list", envir = envir, 
[17:41:32.988]                           inherits = FALSE)) {
[17:41:32.988]                           master <- get("master", mode = "list", 
[17:41:32.988]                             envir = envir, inherits = FALSE)
[17:41:32.988]                           if (inherits(master, c("SOCKnode", 
[17:41:32.988]                             "SOCK0node"))) {
[17:41:32.988]                             sendCondition <<- function(cond) {
[17:41:32.988]                               data <- list(type = "VALUE", value = cond, 
[17:41:32.988]                                 success = TRUE)
[17:41:32.988]                               parallel_sendData(master, data)
[17:41:32.988]                             }
[17:41:32.988]                             return(sendCondition)
[17:41:32.988]                           }
[17:41:32.988]                         }
[17:41:32.988]                         frame <- frame + 1L
[17:41:32.988]                         envir <- sys.frame(frame)
[17:41:32.988]                       }
[17:41:32.988]                     }
[17:41:32.988]                     sendCondition <<- function(cond) NULL
[17:41:32.988]                   }
[17:41:32.988]                 })
[17:41:32.988]                 withCallingHandlers({
[17:41:32.988]                   {
[17:41:32.988]                     Sys.sleep(3)
[17:41:32.988]                     42L
[17:41:32.988]                     stop("Woops")
[17:41:32.988]                   }
[17:41:32.988]                 }, immediateCondition = function(cond) {
[17:41:32.988]                   sendCondition <- ...future.makeSendCondition()
[17:41:32.988]                   sendCondition(cond)
[17:41:32.988]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.988]                   {
[17:41:32.988]                     inherits <- base::inherits
[17:41:32.988]                     invokeRestart <- base::invokeRestart
[17:41:32.988]                     is.null <- base::is.null
[17:41:32.988]                     muffled <- FALSE
[17:41:32.988]                     if (inherits(cond, "message")) {
[17:41:32.988]                       muffled <- grepl(pattern, "muffleMessage")
[17:41:32.988]                       if (muffled) 
[17:41:32.988]                         invokeRestart("muffleMessage")
[17:41:32.988]                     }
[17:41:32.988]                     else if (inherits(cond, "warning")) {
[17:41:32.988]                       muffled <- grepl(pattern, "muffleWarning")
[17:41:32.988]                       if (muffled) 
[17:41:32.988]                         invokeRestart("muffleWarning")
[17:41:32.988]                     }
[17:41:32.988]                     else if (inherits(cond, "condition")) {
[17:41:32.988]                       if (!is.null(pattern)) {
[17:41:32.988]                         computeRestarts <- base::computeRestarts
[17:41:32.988]                         grepl <- base::grepl
[17:41:32.988]                         restarts <- computeRestarts(cond)
[17:41:32.988]                         for (restart in restarts) {
[17:41:32.988]                           name <- restart$name
[17:41:32.988]                           if (is.null(name)) 
[17:41:32.988]                             next
[17:41:32.988]                           if (!grepl(pattern, name)) 
[17:41:32.988]                             next
[17:41:32.988]                           invokeRestart(restart)
[17:41:32.988]                           muffled <- TRUE
[17:41:32.988]                           break
[17:41:32.988]                         }
[17:41:32.988]                       }
[17:41:32.988]                     }
[17:41:32.988]                     invisible(muffled)
[17:41:32.988]                   }
[17:41:32.988]                   muffleCondition(cond)
[17:41:32.988]                 })
[17:41:32.988]             }))
[17:41:32.988]             future::FutureResult(value = ...future.value$value, 
[17:41:32.988]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.988]                   ...future.rng), globalenv = if (FALSE) 
[17:41:32.988]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:41:32.988]                     ...future.globalenv.names))
[17:41:32.988]                 else NULL, started = ...future.startTime, version = "1.8")
[17:41:32.988]         }, condition = base::local({
[17:41:32.988]             c <- base::c
[17:41:32.988]             inherits <- base::inherits
[17:41:32.988]             invokeRestart <- base::invokeRestart
[17:41:32.988]             length <- base::length
[17:41:32.988]             list <- base::list
[17:41:32.988]             seq.int <- base::seq.int
[17:41:32.988]             signalCondition <- base::signalCondition
[17:41:32.988]             sys.calls <- base::sys.calls
[17:41:32.988]             `[[` <- base::`[[`
[17:41:32.988]             `+` <- base::`+`
[17:41:32.988]             `<<-` <- base::`<<-`
[17:41:32.988]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:41:32.988]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:41:32.988]                   3L)]
[17:41:32.988]             }
[17:41:32.988]             function(cond) {
[17:41:32.988]                 is_error <- inherits(cond, "error")
[17:41:32.988]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:41:32.988]                   NULL)
[17:41:32.988]                 if (is_error) {
[17:41:32.988]                   sessionInformation <- function() {
[17:41:32.988]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:41:32.988]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:41:32.988]                       search = base::search(), system = base::Sys.info())
[17:41:32.988]                   }
[17:41:32.988]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.988]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:41:32.988]                     cond$call), session = sessionInformation(), 
[17:41:32.988]                     timestamp = base::Sys.time(), signaled = 0L)
[17:41:32.988]                   signalCondition(cond)
[17:41:32.988]                 }
[17:41:32.988]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:41:32.988]                 "immediateCondition"))) {
[17:41:32.988]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:41:32.988]                   ...future.conditions[[length(...future.conditions) + 
[17:41:32.988]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:41:32.988]                   if (TRUE && !signal) {
[17:41:32.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.988]                     {
[17:41:32.988]                       inherits <- base::inherits
[17:41:32.988]                       invokeRestart <- base::invokeRestart
[17:41:32.988]                       is.null <- base::is.null
[17:41:32.988]                       muffled <- FALSE
[17:41:32.988]                       if (inherits(cond, "message")) {
[17:41:32.988]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.988]                         if (muffled) 
[17:41:32.988]                           invokeRestart("muffleMessage")
[17:41:32.988]                       }
[17:41:32.988]                       else if (inherits(cond, "warning")) {
[17:41:32.988]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.988]                         if (muffled) 
[17:41:32.988]                           invokeRestart("muffleWarning")
[17:41:32.988]                       }
[17:41:32.988]                       else if (inherits(cond, "condition")) {
[17:41:32.988]                         if (!is.null(pattern)) {
[17:41:32.988]                           computeRestarts <- base::computeRestarts
[17:41:32.988]                           grepl <- base::grepl
[17:41:32.988]                           restarts <- computeRestarts(cond)
[17:41:32.988]                           for (restart in restarts) {
[17:41:32.988]                             name <- restart$name
[17:41:32.988]                             if (is.null(name)) 
[17:41:32.988]                               next
[17:41:32.988]                             if (!grepl(pattern, name)) 
[17:41:32.988]                               next
[17:41:32.988]                             invokeRestart(restart)
[17:41:32.988]                             muffled <- TRUE
[17:41:32.988]                             break
[17:41:32.988]                           }
[17:41:32.988]                         }
[17:41:32.988]                       }
[17:41:32.988]                       invisible(muffled)
[17:41:32.988]                     }
[17:41:32.988]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.988]                   }
[17:41:32.988]                 }
[17:41:32.988]                 else {
[17:41:32.988]                   if (TRUE) {
[17:41:32.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:41:32.988]                     {
[17:41:32.988]                       inherits <- base::inherits
[17:41:32.988]                       invokeRestart <- base::invokeRestart
[17:41:32.988]                       is.null <- base::is.null
[17:41:32.988]                       muffled <- FALSE
[17:41:32.988]                       if (inherits(cond, "message")) {
[17:41:32.988]                         muffled <- grepl(pattern, "muffleMessage")
[17:41:32.988]                         if (muffled) 
[17:41:32.988]                           invokeRestart("muffleMessage")
[17:41:32.988]                       }
[17:41:32.988]                       else if (inherits(cond, "warning")) {
[17:41:32.988]                         muffled <- grepl(pattern, "muffleWarning")
[17:41:32.988]                         if (muffled) 
[17:41:32.988]                           invokeRestart("muffleWarning")
[17:41:32.988]                       }
[17:41:32.988]                       else if (inherits(cond, "condition")) {
[17:41:32.988]                         if (!is.null(pattern)) {
[17:41:32.988]                           computeRestarts <- base::computeRestarts
[17:41:32.988]                           grepl <- base::grepl
[17:41:32.988]                           restarts <- computeRestarts(cond)
[17:41:32.988]                           for (restart in restarts) {
[17:41:32.988]                             name <- restart$name
[17:41:32.988]                             if (is.null(name)) 
[17:41:32.988]                               next
[17:41:32.988]                             if (!grepl(pattern, name)) 
[17:41:32.988]                               next
[17:41:32.988]                             invokeRestart(restart)
[17:41:32.988]                             muffled <- TRUE
[17:41:32.988]                             break
[17:41:32.988]                           }
[17:41:32.988]                         }
[17:41:32.988]                       }
[17:41:32.988]                       invisible(muffled)
[17:41:32.988]                     }
[17:41:32.988]                     muffleCondition(cond, pattern = "^muffle")
[17:41:32.988]                   }
[17:41:32.988]                 }
[17:41:32.988]             }
[17:41:32.988]         }))
[17:41:32.988]     }, error = function(ex) {
[17:41:32.988]         base::structure(base::list(value = NULL, visible = NULL, 
[17:41:32.988]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:41:32.988]                 ...future.rng), started = ...future.startTime, 
[17:41:32.988]             finished = Sys.time(), session_uuid = NA_character_, 
[17:41:32.988]             version = "1.8"), class = "FutureResult")
[17:41:32.988]     }, finally = {
[17:41:32.988]         if (!identical(...future.workdir, getwd())) 
[17:41:32.988]             setwd(...future.workdir)
[17:41:32.988]         {
[17:41:32.988]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:41:32.988]                 ...future.oldOptions$nwarnings <- NULL
[17:41:32.988]             }
[17:41:32.988]             base::options(...future.oldOptions)
[17:41:32.988]             if (.Platform$OS.type == "windows") {
[17:41:32.988]                 old_names <- names(...future.oldEnvVars)
[17:41:32.988]                 envs <- base::Sys.getenv()
[17:41:32.988]                 names <- names(envs)
[17:41:32.988]                 common <- intersect(names, old_names)
[17:41:32.988]                 added <- setdiff(names, old_names)
[17:41:32.988]                 removed <- setdiff(old_names, names)
[17:41:32.988]                 changed <- common[...future.oldEnvVars[common] != 
[17:41:32.988]                   envs[common]]
[17:41:32.988]                 NAMES <- toupper(changed)
[17:41:32.988]                 args <- list()
[17:41:32.988]                 for (kk in seq_along(NAMES)) {
[17:41:32.988]                   name <- changed[[kk]]
[17:41:32.988]                   NAME <- NAMES[[kk]]
[17:41:32.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.988]                     next
[17:41:32.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.988]                 }
[17:41:32.988]                 NAMES <- toupper(added)
[17:41:32.988]                 for (kk in seq_along(NAMES)) {
[17:41:32.988]                   name <- added[[kk]]
[17:41:32.988]                   NAME <- NAMES[[kk]]
[17:41:32.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.988]                     next
[17:41:32.988]                   args[[name]] <- ""
[17:41:32.988]                 }
[17:41:32.988]                 NAMES <- toupper(removed)
[17:41:32.988]                 for (kk in seq_along(NAMES)) {
[17:41:32.988]                   name <- removed[[kk]]
[17:41:32.988]                   NAME <- NAMES[[kk]]
[17:41:32.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:41:32.988]                     next
[17:41:32.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:41:32.988]                 }
[17:41:32.988]                 if (length(args) > 0) 
[17:41:32.988]                   base::do.call(base::Sys.setenv, args = args)
[17:41:32.988]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:41:32.988]             }
[17:41:32.988]             else {
[17:41:32.988]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:41:32.988]             }
[17:41:32.988]             {
[17:41:32.988]                 if (base::length(...future.futureOptionsAdded) > 
[17:41:32.988]                   0L) {
[17:41:32.988]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:41:32.988]                   base::names(opts) <- ...future.futureOptionsAdded
[17:41:32.988]                   base::options(opts)
[17:41:32.988]                 }
[17:41:32.988]                 {
[17:41:32.988]                   {
[17:41:32.988]                     base::options(mc.cores = ...future.mc.cores.old)
[17:41:32.988]                     NULL
[17:41:32.988]                   }
[17:41:32.988]                   options(future.plan = NULL)
[17:41:32.988]                   if (is.na(NA_character_)) 
[17:41:32.988]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:41:32.988]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:41:32.988]                   future::plan(list(function (..., workers = 2L, 
[17:41:32.988]                     envir = parent.frame()) 
[17:41:32.988]                   strategy(..., workers = workers, envir = envir)), 
[17:41:32.988]                     .cleanup = FALSE, .init = FALSE)
[17:41:32.988]                 }
[17:41:32.988]             }
[17:41:32.988]         }
[17:41:32.988]     })
[17:41:32.988]     if (TRUE) {
[17:41:32.988]         base::sink(type = "output", split = FALSE)
[17:41:32.988]         if (TRUE) {
[17:41:32.988]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:41:32.988]         }
[17:41:32.988]         else {
[17:41:32.988]             ...future.result["stdout"] <- base::list(NULL)
[17:41:32.988]         }
[17:41:32.988]         base::close(...future.stdout)
[17:41:32.988]         ...future.stdout <- NULL
[17:41:32.988]     }
[17:41:32.988]     ...future.result$conditions <- ...future.conditions
[17:41:32.988]     ...future.result$finished <- base::Sys.time()
[17:41:32.988]     ...future.result
[17:41:32.988] }
[17:41:32.991] MultisessionFuture started
[17:41:32.992] - Launch lazy future ... done
[17:41:32.992] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[17:41:36.047] receiveMessageFromWorker() for ClusterFuture ...
[17:41:36.047] - Validating connection of MultisessionFuture
[17:41:36.047] - received message: FutureResult
[17:41:36.048] - Received FutureResult
[17:41:36.048] - Erased future from FutureRegistry
[17:41:36.048] result() for ClusterFuture ...
[17:41:36.048] - result already collected: FutureResult
[17:41:36.048] result() for ClusterFuture ... done
[17:41:36.048] signalConditions() ...
[17:41:36.048]  - include = ‘immediateCondition’
[17:41:36.048]  - exclude = 
[17:41:36.048]  - resignal = FALSE
[17:41:36.048]  - Number of conditions: 1
[17:41:36.048] signalConditions() ... done
[17:41:36.049] receiveMessageFromWorker() for ClusterFuture ... done
[17:41:36.049] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: d34296cc-16c6-6be6-099a-9eb2da18f435
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[17:41:36.050] plan(): Setting new future strategy stack:
[17:41:36.051] List of future strategies:
[17:41:36.051] 1. FutureStrategy:
[17:41:36.051]    - args: function (..., envir = parent.frame())
[17:41:36.051]    - tweaked: FALSE
[17:41:36.051]    - call: future::plan(oplan)
[17:41:36.051] plan(): nbrOfWorkers() = 1
> 
