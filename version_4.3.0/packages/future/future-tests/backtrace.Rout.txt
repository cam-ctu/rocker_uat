
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:19:38.490] plan(): Setting new future strategy stack:
[13:19:38.491] List of future strategies:
[13:19:38.491] 1. sequential:
[13:19:38.491]    - args: function (..., envir = parent.frame())
[13:19:38.491]    - tweaked: FALSE
[13:19:38.491]    - call: future::plan("sequential")
[13:19:38.504] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[13:19:38.515] getGlobalsAndPackages() ...
[13:19:38.515] Searching for globals...
[13:19:38.521] - globals found: [2] ‘{’, ‘stop’
[13:19:38.521] Searching for globals ... DONE
[13:19:38.521] Resolving globals: FALSE
[13:19:38.522] 
[13:19:38.522] 
[13:19:38.522] getGlobalsAndPackages() ... DONE
[13:19:38.523] run() for ‘Future’ ...
[13:19:38.523] - state: ‘created’
[13:19:38.523] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.524] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.524] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.524]   - Field: ‘label’
[13:19:38.524]   - Field: ‘local’
[13:19:38.524]   - Field: ‘owner’
[13:19:38.524]   - Field: ‘envir’
[13:19:38.524]   - Field: ‘packages’
[13:19:38.524]   - Field: ‘gc’
[13:19:38.524]   - Field: ‘conditions’
[13:19:38.524]   - Field: ‘expr’
[13:19:38.525]   - Field: ‘uuid’
[13:19:38.525]   - Field: ‘seed’
[13:19:38.525]   - Field: ‘version’
[13:19:38.525]   - Field: ‘result’
[13:19:38.525]   - Field: ‘asynchronous’
[13:19:38.525]   - Field: ‘calls’
[13:19:38.525]   - Field: ‘globals’
[13:19:38.525]   - Field: ‘stdout’
[13:19:38.525]   - Field: ‘earlySignal’
[13:19:38.525]   - Field: ‘lazy’
[13:19:38.525]   - Field: ‘state’
[13:19:38.526] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.526] - Launch lazy future ...
[13:19:38.526] Packages needed by the future expression (n = 0): <none>
[13:19:38.527] Packages needed by future strategies (n = 0): <none>
[13:19:38.527] {
[13:19:38.527]     {
[13:19:38.527]         {
[13:19:38.527]             ...future.startTime <- base::Sys.time()
[13:19:38.527]             {
[13:19:38.527]                 {
[13:19:38.527]                   {
[13:19:38.527]                     base::local({
[13:19:38.527]                       has_future <- base::requireNamespace("future", 
[13:19:38.527]                         quietly = TRUE)
[13:19:38.527]                       if (has_future) {
[13:19:38.527]                         ns <- base::getNamespace("future")
[13:19:38.527]                         version <- ns[[".package"]][["version"]]
[13:19:38.527]                         if (is.null(version)) 
[13:19:38.527]                           version <- utils::packageVersion("future")
[13:19:38.527]                       }
[13:19:38.527]                       else {
[13:19:38.527]                         version <- NULL
[13:19:38.527]                       }
[13:19:38.527]                       if (!has_future || version < "1.8.0") {
[13:19:38.527]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.527]                           "", base::R.version$version.string), 
[13:19:38.527]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.527]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.527]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.527]                             "release", "version")], collapse = " "), 
[13:19:38.527]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.527]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.527]                           info)
[13:19:38.527]                         info <- base::paste(info, collapse = "; ")
[13:19:38.527]                         if (!has_future) {
[13:19:38.527]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.527]                             info)
[13:19:38.527]                         }
[13:19:38.527]                         else {
[13:19:38.527]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.527]                             info, version)
[13:19:38.527]                         }
[13:19:38.527]                         base::stop(msg)
[13:19:38.527]                       }
[13:19:38.527]                     })
[13:19:38.527]                   }
[13:19:38.527]                   options(future.plan = NULL)
[13:19:38.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.527]                 }
[13:19:38.527]                 ...future.workdir <- getwd()
[13:19:38.527]             }
[13:19:38.527]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.527]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.527]         }
[13:19:38.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.527]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.527]             base::names(...future.oldOptions))
[13:19:38.527]     }
[13:19:38.527]     if (FALSE) {
[13:19:38.527]     }
[13:19:38.527]     else {
[13:19:38.527]         if (TRUE) {
[13:19:38.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.527]                 open = "w")
[13:19:38.527]         }
[13:19:38.527]         else {
[13:19:38.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.527]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.527]         }
[13:19:38.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.527]             base::sink(type = "output", split = FALSE)
[13:19:38.527]             base::close(...future.stdout)
[13:19:38.527]         }, add = TRUE)
[13:19:38.527]     }
[13:19:38.527]     ...future.frame <- base::sys.nframe()
[13:19:38.527]     ...future.conditions <- base::list()
[13:19:38.527]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.527]     if (FALSE) {
[13:19:38.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.527]     }
[13:19:38.527]     ...future.result <- base::tryCatch({
[13:19:38.527]         base::withCallingHandlers({
[13:19:38.527]             ...future.value <- base::withVisible(base::local({
[13:19:38.527]                 42L
[13:19:38.527]                 stop("Woops")
[13:19:38.527]             }))
[13:19:38.527]             future::FutureResult(value = ...future.value$value, 
[13:19:38.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.527]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.527]                     ...future.globalenv.names))
[13:19:38.527]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.527]         }, condition = base::local({
[13:19:38.527]             c <- base::c
[13:19:38.527]             inherits <- base::inherits
[13:19:38.527]             invokeRestart <- base::invokeRestart
[13:19:38.527]             length <- base::length
[13:19:38.527]             list <- base::list
[13:19:38.527]             seq.int <- base::seq.int
[13:19:38.527]             signalCondition <- base::signalCondition
[13:19:38.527]             sys.calls <- base::sys.calls
[13:19:38.527]             `[[` <- base::`[[`
[13:19:38.527]             `+` <- base::`+`
[13:19:38.527]             `<<-` <- base::`<<-`
[13:19:38.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.527]                   3L)]
[13:19:38.527]             }
[13:19:38.527]             function(cond) {
[13:19:38.527]                 is_error <- inherits(cond, "error")
[13:19:38.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.527]                   NULL)
[13:19:38.527]                 if (is_error) {
[13:19:38.527]                   sessionInformation <- function() {
[13:19:38.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.527]                       search = base::search(), system = base::Sys.info())
[13:19:38.527]                   }
[13:19:38.527]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.527]                     cond$call), session = sessionInformation(), 
[13:19:38.527]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.527]                   signalCondition(cond)
[13:19:38.527]                 }
[13:19:38.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.527]                 "immediateCondition"))) {
[13:19:38.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.527]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.527]                   if (TRUE && !signal) {
[13:19:38.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.527]                     {
[13:19:38.527]                       inherits <- base::inherits
[13:19:38.527]                       invokeRestart <- base::invokeRestart
[13:19:38.527]                       is.null <- base::is.null
[13:19:38.527]                       muffled <- FALSE
[13:19:38.527]                       if (inherits(cond, "message")) {
[13:19:38.527]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.527]                         if (muffled) 
[13:19:38.527]                           invokeRestart("muffleMessage")
[13:19:38.527]                       }
[13:19:38.527]                       else if (inherits(cond, "warning")) {
[13:19:38.527]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.527]                         if (muffled) 
[13:19:38.527]                           invokeRestart("muffleWarning")
[13:19:38.527]                       }
[13:19:38.527]                       else if (inherits(cond, "condition")) {
[13:19:38.527]                         if (!is.null(pattern)) {
[13:19:38.527]                           computeRestarts <- base::computeRestarts
[13:19:38.527]                           grepl <- base::grepl
[13:19:38.527]                           restarts <- computeRestarts(cond)
[13:19:38.527]                           for (restart in restarts) {
[13:19:38.527]                             name <- restart$name
[13:19:38.527]                             if (is.null(name)) 
[13:19:38.527]                               next
[13:19:38.527]                             if (!grepl(pattern, name)) 
[13:19:38.527]                               next
[13:19:38.527]                             invokeRestart(restart)
[13:19:38.527]                             muffled <- TRUE
[13:19:38.527]                             break
[13:19:38.527]                           }
[13:19:38.527]                         }
[13:19:38.527]                       }
[13:19:38.527]                       invisible(muffled)
[13:19:38.527]                     }
[13:19:38.527]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.527]                   }
[13:19:38.527]                 }
[13:19:38.527]                 else {
[13:19:38.527]                   if (TRUE) {
[13:19:38.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.527]                     {
[13:19:38.527]                       inherits <- base::inherits
[13:19:38.527]                       invokeRestart <- base::invokeRestart
[13:19:38.527]                       is.null <- base::is.null
[13:19:38.527]                       muffled <- FALSE
[13:19:38.527]                       if (inherits(cond, "message")) {
[13:19:38.527]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.527]                         if (muffled) 
[13:19:38.527]                           invokeRestart("muffleMessage")
[13:19:38.527]                       }
[13:19:38.527]                       else if (inherits(cond, "warning")) {
[13:19:38.527]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.527]                         if (muffled) 
[13:19:38.527]                           invokeRestart("muffleWarning")
[13:19:38.527]                       }
[13:19:38.527]                       else if (inherits(cond, "condition")) {
[13:19:38.527]                         if (!is.null(pattern)) {
[13:19:38.527]                           computeRestarts <- base::computeRestarts
[13:19:38.527]                           grepl <- base::grepl
[13:19:38.527]                           restarts <- computeRestarts(cond)
[13:19:38.527]                           for (restart in restarts) {
[13:19:38.527]                             name <- restart$name
[13:19:38.527]                             if (is.null(name)) 
[13:19:38.527]                               next
[13:19:38.527]                             if (!grepl(pattern, name)) 
[13:19:38.527]                               next
[13:19:38.527]                             invokeRestart(restart)
[13:19:38.527]                             muffled <- TRUE
[13:19:38.527]                             break
[13:19:38.527]                           }
[13:19:38.527]                         }
[13:19:38.527]                       }
[13:19:38.527]                       invisible(muffled)
[13:19:38.527]                     }
[13:19:38.527]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.527]                   }
[13:19:38.527]                 }
[13:19:38.527]             }
[13:19:38.527]         }))
[13:19:38.527]     }, error = function(ex) {
[13:19:38.527]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.527]                 ...future.rng), started = ...future.startTime, 
[13:19:38.527]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.527]             version = "1.8"), class = "FutureResult")
[13:19:38.527]     }, finally = {
[13:19:38.527]         if (!identical(...future.workdir, getwd())) 
[13:19:38.527]             setwd(...future.workdir)
[13:19:38.527]         {
[13:19:38.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.527]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.527]             }
[13:19:38.527]             base::options(...future.oldOptions)
[13:19:38.527]             if (.Platform$OS.type == "windows") {
[13:19:38.527]                 old_names <- names(...future.oldEnvVars)
[13:19:38.527]                 envs <- base::Sys.getenv()
[13:19:38.527]                 names <- names(envs)
[13:19:38.527]                 common <- intersect(names, old_names)
[13:19:38.527]                 added <- setdiff(names, old_names)
[13:19:38.527]                 removed <- setdiff(old_names, names)
[13:19:38.527]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.527]                   envs[common]]
[13:19:38.527]                 NAMES <- toupper(changed)
[13:19:38.527]                 args <- list()
[13:19:38.527]                 for (kk in seq_along(NAMES)) {
[13:19:38.527]                   name <- changed[[kk]]
[13:19:38.527]                   NAME <- NAMES[[kk]]
[13:19:38.527]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.527]                     next
[13:19:38.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.527]                 }
[13:19:38.527]                 NAMES <- toupper(added)
[13:19:38.527]                 for (kk in seq_along(NAMES)) {
[13:19:38.527]                   name <- added[[kk]]
[13:19:38.527]                   NAME <- NAMES[[kk]]
[13:19:38.527]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.527]                     next
[13:19:38.527]                   args[[name]] <- ""
[13:19:38.527]                 }
[13:19:38.527]                 NAMES <- toupper(removed)
[13:19:38.527]                 for (kk in seq_along(NAMES)) {
[13:19:38.527]                   name <- removed[[kk]]
[13:19:38.527]                   NAME <- NAMES[[kk]]
[13:19:38.527]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.527]                     next
[13:19:38.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.527]                 }
[13:19:38.527]                 if (length(args) > 0) 
[13:19:38.527]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.527]             }
[13:19:38.527]             else {
[13:19:38.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.527]             }
[13:19:38.527]             {
[13:19:38.527]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.527]                   0L) {
[13:19:38.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.527]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.527]                   base::options(opts)
[13:19:38.527]                 }
[13:19:38.527]                 {
[13:19:38.527]                   {
[13:19:38.527]                     NULL
[13:19:38.527]                     RNGkind("Mersenne-Twister")
[13:19:38.527]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.527]                       inherits = FALSE)
[13:19:38.527]                   }
[13:19:38.527]                   options(future.plan = NULL)
[13:19:38.527]                   if (is.na(NA_character_)) 
[13:19:38.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.527]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.527]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.527]                   {
[13:19:38.527]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.527]                     if (!future$lazy) 
[13:19:38.527]                       future <- run(future)
[13:19:38.527]                     invisible(future)
[13:19:38.527]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.527]                 }
[13:19:38.527]             }
[13:19:38.527]         }
[13:19:38.527]     })
[13:19:38.527]     if (TRUE) {
[13:19:38.527]         base::sink(type = "output", split = FALSE)
[13:19:38.527]         if (TRUE) {
[13:19:38.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.527]         }
[13:19:38.527]         else {
[13:19:38.527]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.527]         }
[13:19:38.527]         base::close(...future.stdout)
[13:19:38.527]         ...future.stdout <- NULL
[13:19:38.527]     }
[13:19:38.527]     ...future.result$conditions <- ...future.conditions
[13:19:38.527]     ...future.result$finished <- base::Sys.time()
[13:19:38.527]     ...future.result
[13:19:38.527] }
[13:19:38.529] plan(): Setting new future strategy stack:
[13:19:38.529] List of future strategies:
[13:19:38.529] 1. sequential:
[13:19:38.529]    - args: function (..., envir = parent.frame())
[13:19:38.529]    - tweaked: FALSE
[13:19:38.529]    - call: NULL
[13:19:38.530] plan(): nbrOfWorkers() = 1
[13:19:38.531] plan(): Setting new future strategy stack:
[13:19:38.531] List of future strategies:
[13:19:38.531] 1. sequential:
[13:19:38.531]    - args: function (..., envir = parent.frame())
[13:19:38.531]    - tweaked: FALSE
[13:19:38.531]    - call: future::plan("sequential")
[13:19:38.531] plan(): nbrOfWorkers() = 1
[13:19:38.532] SequentialFuture started (and completed)
[13:19:38.532] signalConditions() ...
[13:19:38.532]  - include = ‘immediateCondition’
[13:19:38.532]  - exclude = 
[13:19:38.532]  - resignal = FALSE
[13:19:38.532]  - Number of conditions: 1
[13:19:38.532] signalConditions() ... done
[13:19:38.533] - Launch lazy future ... done
[13:19:38.533] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:19:38.533] signalConditions() ...
[13:19:38.533]  - include = ‘immediateCondition’
[13:19:38.533]  - exclude = 
[13:19:38.533]  - resignal = FALSE
[13:19:38.533]  - Number of conditions: 1
[13:19:38.534] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[13:19:38.535] resolved() for ‘SequentialFuture’ ...
[13:19:38.535] - state: ‘finished’
[13:19:38.535] - run: TRUE
[13:19:38.535] - result: ‘FutureResult’
[13:19:38.535] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[13:19:38.536] getGlobalsAndPackages() ...
[13:19:38.536] Searching for globals...
[13:19:38.537] - globals found: [2] ‘{’, ‘stop’
[13:19:38.537] Searching for globals ... DONE
[13:19:38.537] Resolving globals: FALSE
[13:19:38.537] 
[13:19:38.538] 
[13:19:38.538] getGlobalsAndPackages() ... DONE
[13:19:38.538] run() for ‘Future’ ...
[13:19:38.538] - state: ‘created’
[13:19:38.538] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.538] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.538] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.541]   - Field: ‘label’
[13:19:38.541]   - Field: ‘local’
[13:19:38.541]   - Field: ‘owner’
[13:19:38.541]   - Field: ‘envir’
[13:19:38.541]   - Field: ‘packages’
[13:19:38.541]   - Field: ‘gc’
[13:19:38.542]   - Field: ‘conditions’
[13:19:38.542]   - Field: ‘expr’
[13:19:38.542]   - Field: ‘uuid’
[13:19:38.542]   - Field: ‘seed’
[13:19:38.542]   - Field: ‘version’
[13:19:38.542]   - Field: ‘result’
[13:19:38.542]   - Field: ‘asynchronous’
[13:19:38.542]   - Field: ‘calls’
[13:19:38.542]   - Field: ‘globals’
[13:19:38.542]   - Field: ‘stdout’
[13:19:38.543]   - Field: ‘earlySignal’
[13:19:38.543]   - Field: ‘lazy’
[13:19:38.543]   - Field: ‘state’
[13:19:38.543] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.543] - Launch lazy future ...
[13:19:38.543] Packages needed by the future expression (n = 0): <none>
[13:19:38.543] Packages needed by future strategies (n = 0): <none>
[13:19:38.544] {
[13:19:38.544]     {
[13:19:38.544]         {
[13:19:38.544]             ...future.startTime <- base::Sys.time()
[13:19:38.544]             {
[13:19:38.544]                 {
[13:19:38.544]                   {
[13:19:38.544]                     base::local({
[13:19:38.544]                       has_future <- base::requireNamespace("future", 
[13:19:38.544]                         quietly = TRUE)
[13:19:38.544]                       if (has_future) {
[13:19:38.544]                         ns <- base::getNamespace("future")
[13:19:38.544]                         version <- ns[[".package"]][["version"]]
[13:19:38.544]                         if (is.null(version)) 
[13:19:38.544]                           version <- utils::packageVersion("future")
[13:19:38.544]                       }
[13:19:38.544]                       else {
[13:19:38.544]                         version <- NULL
[13:19:38.544]                       }
[13:19:38.544]                       if (!has_future || version < "1.8.0") {
[13:19:38.544]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.544]                           "", base::R.version$version.string), 
[13:19:38.544]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.544]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.544]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.544]                             "release", "version")], collapse = " "), 
[13:19:38.544]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.544]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.544]                           info)
[13:19:38.544]                         info <- base::paste(info, collapse = "; ")
[13:19:38.544]                         if (!has_future) {
[13:19:38.544]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.544]                             info)
[13:19:38.544]                         }
[13:19:38.544]                         else {
[13:19:38.544]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.544]                             info, version)
[13:19:38.544]                         }
[13:19:38.544]                         base::stop(msg)
[13:19:38.544]                       }
[13:19:38.544]                     })
[13:19:38.544]                   }
[13:19:38.544]                   options(future.plan = NULL)
[13:19:38.544]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.544]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.544]                 }
[13:19:38.544]                 ...future.workdir <- getwd()
[13:19:38.544]             }
[13:19:38.544]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.544]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.544]         }
[13:19:38.544]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.544]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.544]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.544]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.544]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.544]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.544]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.544]             base::names(...future.oldOptions))
[13:19:38.544]     }
[13:19:38.544]     if (FALSE) {
[13:19:38.544]     }
[13:19:38.544]     else {
[13:19:38.544]         if (TRUE) {
[13:19:38.544]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.544]                 open = "w")
[13:19:38.544]         }
[13:19:38.544]         else {
[13:19:38.544]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.544]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.544]         }
[13:19:38.544]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.544]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.544]             base::sink(type = "output", split = FALSE)
[13:19:38.544]             base::close(...future.stdout)
[13:19:38.544]         }, add = TRUE)
[13:19:38.544]     }
[13:19:38.544]     ...future.frame <- base::sys.nframe()
[13:19:38.544]     ...future.conditions <- base::list()
[13:19:38.544]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.544]     if (FALSE) {
[13:19:38.544]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.544]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.544]     }
[13:19:38.544]     ...future.result <- base::tryCatch({
[13:19:38.544]         base::withCallingHandlers({
[13:19:38.544]             ...future.value <- base::withVisible(base::local({
[13:19:38.544]                 42L
[13:19:38.544]                 stop("Woops")
[13:19:38.544]             }))
[13:19:38.544]             future::FutureResult(value = ...future.value$value, 
[13:19:38.544]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.544]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.544]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.544]                     ...future.globalenv.names))
[13:19:38.544]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.544]         }, condition = base::local({
[13:19:38.544]             c <- base::c
[13:19:38.544]             inherits <- base::inherits
[13:19:38.544]             invokeRestart <- base::invokeRestart
[13:19:38.544]             length <- base::length
[13:19:38.544]             list <- base::list
[13:19:38.544]             seq.int <- base::seq.int
[13:19:38.544]             signalCondition <- base::signalCondition
[13:19:38.544]             sys.calls <- base::sys.calls
[13:19:38.544]             `[[` <- base::`[[`
[13:19:38.544]             `+` <- base::`+`
[13:19:38.544]             `<<-` <- base::`<<-`
[13:19:38.544]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.544]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.544]                   3L)]
[13:19:38.544]             }
[13:19:38.544]             function(cond) {
[13:19:38.544]                 is_error <- inherits(cond, "error")
[13:19:38.544]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.544]                   NULL)
[13:19:38.544]                 if (is_error) {
[13:19:38.544]                   sessionInformation <- function() {
[13:19:38.544]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.544]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.544]                       search = base::search(), system = base::Sys.info())
[13:19:38.544]                   }
[13:19:38.544]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.544]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.544]                     cond$call), session = sessionInformation(), 
[13:19:38.544]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.544]                   signalCondition(cond)
[13:19:38.544]                 }
[13:19:38.544]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.544]                 "immediateCondition"))) {
[13:19:38.544]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.544]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.544]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.544]                   if (TRUE && !signal) {
[13:19:38.544]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.544]                     {
[13:19:38.544]                       inherits <- base::inherits
[13:19:38.544]                       invokeRestart <- base::invokeRestart
[13:19:38.544]                       is.null <- base::is.null
[13:19:38.544]                       muffled <- FALSE
[13:19:38.544]                       if (inherits(cond, "message")) {
[13:19:38.544]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.544]                         if (muffled) 
[13:19:38.544]                           invokeRestart("muffleMessage")
[13:19:38.544]                       }
[13:19:38.544]                       else if (inherits(cond, "warning")) {
[13:19:38.544]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.544]                         if (muffled) 
[13:19:38.544]                           invokeRestart("muffleWarning")
[13:19:38.544]                       }
[13:19:38.544]                       else if (inherits(cond, "condition")) {
[13:19:38.544]                         if (!is.null(pattern)) {
[13:19:38.544]                           computeRestarts <- base::computeRestarts
[13:19:38.544]                           grepl <- base::grepl
[13:19:38.544]                           restarts <- computeRestarts(cond)
[13:19:38.544]                           for (restart in restarts) {
[13:19:38.544]                             name <- restart$name
[13:19:38.544]                             if (is.null(name)) 
[13:19:38.544]                               next
[13:19:38.544]                             if (!grepl(pattern, name)) 
[13:19:38.544]                               next
[13:19:38.544]                             invokeRestart(restart)
[13:19:38.544]                             muffled <- TRUE
[13:19:38.544]                             break
[13:19:38.544]                           }
[13:19:38.544]                         }
[13:19:38.544]                       }
[13:19:38.544]                       invisible(muffled)
[13:19:38.544]                     }
[13:19:38.544]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.544]                   }
[13:19:38.544]                 }
[13:19:38.544]                 else {
[13:19:38.544]                   if (TRUE) {
[13:19:38.544]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.544]                     {
[13:19:38.544]                       inherits <- base::inherits
[13:19:38.544]                       invokeRestart <- base::invokeRestart
[13:19:38.544]                       is.null <- base::is.null
[13:19:38.544]                       muffled <- FALSE
[13:19:38.544]                       if (inherits(cond, "message")) {
[13:19:38.544]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.544]                         if (muffled) 
[13:19:38.544]                           invokeRestart("muffleMessage")
[13:19:38.544]                       }
[13:19:38.544]                       else if (inherits(cond, "warning")) {
[13:19:38.544]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.544]                         if (muffled) 
[13:19:38.544]                           invokeRestart("muffleWarning")
[13:19:38.544]                       }
[13:19:38.544]                       else if (inherits(cond, "condition")) {
[13:19:38.544]                         if (!is.null(pattern)) {
[13:19:38.544]                           computeRestarts <- base::computeRestarts
[13:19:38.544]                           grepl <- base::grepl
[13:19:38.544]                           restarts <- computeRestarts(cond)
[13:19:38.544]                           for (restart in restarts) {
[13:19:38.544]                             name <- restart$name
[13:19:38.544]                             if (is.null(name)) 
[13:19:38.544]                               next
[13:19:38.544]                             if (!grepl(pattern, name)) 
[13:19:38.544]                               next
[13:19:38.544]                             invokeRestart(restart)
[13:19:38.544]                             muffled <- TRUE
[13:19:38.544]                             break
[13:19:38.544]                           }
[13:19:38.544]                         }
[13:19:38.544]                       }
[13:19:38.544]                       invisible(muffled)
[13:19:38.544]                     }
[13:19:38.544]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.544]                   }
[13:19:38.544]                 }
[13:19:38.544]             }
[13:19:38.544]         }))
[13:19:38.544]     }, error = function(ex) {
[13:19:38.544]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.544]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.544]                 ...future.rng), started = ...future.startTime, 
[13:19:38.544]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.544]             version = "1.8"), class = "FutureResult")
[13:19:38.544]     }, finally = {
[13:19:38.544]         if (!identical(...future.workdir, getwd())) 
[13:19:38.544]             setwd(...future.workdir)
[13:19:38.544]         {
[13:19:38.544]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.544]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.544]             }
[13:19:38.544]             base::options(...future.oldOptions)
[13:19:38.544]             if (.Platform$OS.type == "windows") {
[13:19:38.544]                 old_names <- names(...future.oldEnvVars)
[13:19:38.544]                 envs <- base::Sys.getenv()
[13:19:38.544]                 names <- names(envs)
[13:19:38.544]                 common <- intersect(names, old_names)
[13:19:38.544]                 added <- setdiff(names, old_names)
[13:19:38.544]                 removed <- setdiff(old_names, names)
[13:19:38.544]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.544]                   envs[common]]
[13:19:38.544]                 NAMES <- toupper(changed)
[13:19:38.544]                 args <- list()
[13:19:38.544]                 for (kk in seq_along(NAMES)) {
[13:19:38.544]                   name <- changed[[kk]]
[13:19:38.544]                   NAME <- NAMES[[kk]]
[13:19:38.544]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.544]                     next
[13:19:38.544]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.544]                 }
[13:19:38.544]                 NAMES <- toupper(added)
[13:19:38.544]                 for (kk in seq_along(NAMES)) {
[13:19:38.544]                   name <- added[[kk]]
[13:19:38.544]                   NAME <- NAMES[[kk]]
[13:19:38.544]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.544]                     next
[13:19:38.544]                   args[[name]] <- ""
[13:19:38.544]                 }
[13:19:38.544]                 NAMES <- toupper(removed)
[13:19:38.544]                 for (kk in seq_along(NAMES)) {
[13:19:38.544]                   name <- removed[[kk]]
[13:19:38.544]                   NAME <- NAMES[[kk]]
[13:19:38.544]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.544]                     next
[13:19:38.544]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.544]                 }
[13:19:38.544]                 if (length(args) > 0) 
[13:19:38.544]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.544]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.544]             }
[13:19:38.544]             else {
[13:19:38.544]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.544]             }
[13:19:38.544]             {
[13:19:38.544]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.544]                   0L) {
[13:19:38.544]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.544]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.544]                   base::options(opts)
[13:19:38.544]                 }
[13:19:38.544]                 {
[13:19:38.544]                   {
[13:19:38.544]                     NULL
[13:19:38.544]                     RNGkind("Mersenne-Twister")
[13:19:38.544]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.544]                       inherits = FALSE)
[13:19:38.544]                   }
[13:19:38.544]                   options(future.plan = NULL)
[13:19:38.544]                   if (is.na(NA_character_)) 
[13:19:38.544]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.544]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.544]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.544]                   {
[13:19:38.544]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.544]                     if (!future$lazy) 
[13:19:38.544]                       future <- run(future)
[13:19:38.544]                     invisible(future)
[13:19:38.544]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.544]                 }
[13:19:38.544]             }
[13:19:38.544]         }
[13:19:38.544]     })
[13:19:38.544]     if (TRUE) {
[13:19:38.544]         base::sink(type = "output", split = FALSE)
[13:19:38.544]         if (TRUE) {
[13:19:38.544]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.544]         }
[13:19:38.544]         else {
[13:19:38.544]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.544]         }
[13:19:38.544]         base::close(...future.stdout)
[13:19:38.544]         ...future.stdout <- NULL
[13:19:38.544]     }
[13:19:38.544]     ...future.result$conditions <- ...future.conditions
[13:19:38.544]     ...future.result$finished <- base::Sys.time()
[13:19:38.544]     ...future.result
[13:19:38.544] }
[13:19:38.545] plan(): Setting new future strategy stack:
[13:19:38.546] List of future strategies:
[13:19:38.546] 1. sequential:
[13:19:38.546]    - args: function (..., envir = parent.frame())
[13:19:38.546]    - tweaked: FALSE
[13:19:38.546]    - call: NULL
[13:19:38.546] plan(): nbrOfWorkers() = 1
[13:19:38.547] plan(): Setting new future strategy stack:
[13:19:38.547] List of future strategies:
[13:19:38.547] 1. sequential:
[13:19:38.547]    - args: function (..., envir = parent.frame())
[13:19:38.547]    - tweaked: FALSE
[13:19:38.547]    - call: future::plan("sequential")
[13:19:38.547] plan(): nbrOfWorkers() = 1
[13:19:38.547] SequentialFuture started (and completed)
[13:19:38.547] signalConditions() ...
[13:19:38.548]  - include = ‘immediateCondition’
[13:19:38.548]  - exclude = 
[13:19:38.548]  - resignal = FALSE
[13:19:38.548]  - Number of conditions: 1
[13:19:38.548] signalConditions() ... done
[13:19:38.548] - Launch lazy future ... done
[13:19:38.548] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[13:19:38.548] resolved() for ‘SequentialFuture’ ...
[13:19:38.549] - state: ‘finished’
[13:19:38.549] - run: TRUE
[13:19:38.549] - result: ‘FutureResult’
[13:19:38.549] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[13:19:38.550] getGlobalsAndPackages() ...
[13:19:38.550] Searching for globals...
[13:19:38.551] - globals found: [2] ‘{’, ‘stop’
[13:19:38.551] Searching for globals ... DONE
[13:19:38.551] Resolving globals: FALSE
[13:19:38.551] 
[13:19:38.551] 
[13:19:38.551] getGlobalsAndPackages() ... DONE
[13:19:38.552] run() for ‘Future’ ...
[13:19:38.552] - state: ‘created’
[13:19:38.552] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.552] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.552] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.552]   - Field: ‘label’
[13:19:38.552]   - Field: ‘local’
[13:19:38.553]   - Field: ‘owner’
[13:19:38.553]   - Field: ‘envir’
[13:19:38.553]   - Field: ‘packages’
[13:19:38.553]   - Field: ‘gc’
[13:19:38.553]   - Field: ‘conditions’
[13:19:38.553]   - Field: ‘expr’
[13:19:38.553]   - Field: ‘uuid’
[13:19:38.553]   - Field: ‘seed’
[13:19:38.553]   - Field: ‘version’
[13:19:38.553]   - Field: ‘result’
[13:19:38.554]   - Field: ‘asynchronous’
[13:19:38.554]   - Field: ‘calls’
[13:19:38.554]   - Field: ‘globals’
[13:19:38.554]   - Field: ‘stdout’
[13:19:38.554]   - Field: ‘earlySignal’
[13:19:38.554]   - Field: ‘lazy’
[13:19:38.554]   - Field: ‘state’
[13:19:38.554] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.554] - Launch lazy future ...
[13:19:38.554] Packages needed by the future expression (n = 0): <none>
[13:19:38.555] Packages needed by future strategies (n = 0): <none>
[13:19:38.555] {
[13:19:38.555]     {
[13:19:38.555]         {
[13:19:38.555]             ...future.startTime <- base::Sys.time()
[13:19:38.555]             {
[13:19:38.555]                 {
[13:19:38.555]                   {
[13:19:38.555]                     base::local({
[13:19:38.555]                       has_future <- base::requireNamespace("future", 
[13:19:38.555]                         quietly = TRUE)
[13:19:38.555]                       if (has_future) {
[13:19:38.555]                         ns <- base::getNamespace("future")
[13:19:38.555]                         version <- ns[[".package"]][["version"]]
[13:19:38.555]                         if (is.null(version)) 
[13:19:38.555]                           version <- utils::packageVersion("future")
[13:19:38.555]                       }
[13:19:38.555]                       else {
[13:19:38.555]                         version <- NULL
[13:19:38.555]                       }
[13:19:38.555]                       if (!has_future || version < "1.8.0") {
[13:19:38.555]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.555]                           "", base::R.version$version.string), 
[13:19:38.555]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.555]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.555]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.555]                             "release", "version")], collapse = " "), 
[13:19:38.555]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.555]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.555]                           info)
[13:19:38.555]                         info <- base::paste(info, collapse = "; ")
[13:19:38.555]                         if (!has_future) {
[13:19:38.555]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.555]                             info)
[13:19:38.555]                         }
[13:19:38.555]                         else {
[13:19:38.555]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.555]                             info, version)
[13:19:38.555]                         }
[13:19:38.555]                         base::stop(msg)
[13:19:38.555]                       }
[13:19:38.555]                     })
[13:19:38.555]                   }
[13:19:38.555]                   options(future.plan = NULL)
[13:19:38.555]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.555]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.555]                 }
[13:19:38.555]                 ...future.workdir <- getwd()
[13:19:38.555]             }
[13:19:38.555]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.555]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.555]         }
[13:19:38.555]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.555]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.555]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.555]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.555]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.555]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.555]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.555]             base::names(...future.oldOptions))
[13:19:38.555]     }
[13:19:38.555]     if (FALSE) {
[13:19:38.555]     }
[13:19:38.555]     else {
[13:19:38.555]         if (TRUE) {
[13:19:38.555]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.555]                 open = "w")
[13:19:38.555]         }
[13:19:38.555]         else {
[13:19:38.555]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.555]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.555]         }
[13:19:38.555]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.555]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.555]             base::sink(type = "output", split = FALSE)
[13:19:38.555]             base::close(...future.stdout)
[13:19:38.555]         }, add = TRUE)
[13:19:38.555]     }
[13:19:38.555]     ...future.frame <- base::sys.nframe()
[13:19:38.555]     ...future.conditions <- base::list()
[13:19:38.555]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.555]     if (FALSE) {
[13:19:38.555]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.555]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.555]     }
[13:19:38.555]     ...future.result <- base::tryCatch({
[13:19:38.555]         base::withCallingHandlers({
[13:19:38.555]             ...future.value <- base::withVisible(base::local({
[13:19:38.555]                 42L
[13:19:38.555]                 stop("Woops")
[13:19:38.555]             }))
[13:19:38.555]             future::FutureResult(value = ...future.value$value, 
[13:19:38.555]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.555]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.555]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.555]                     ...future.globalenv.names))
[13:19:38.555]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.555]         }, condition = base::local({
[13:19:38.555]             c <- base::c
[13:19:38.555]             inherits <- base::inherits
[13:19:38.555]             invokeRestart <- base::invokeRestart
[13:19:38.555]             length <- base::length
[13:19:38.555]             list <- base::list
[13:19:38.555]             seq.int <- base::seq.int
[13:19:38.555]             signalCondition <- base::signalCondition
[13:19:38.555]             sys.calls <- base::sys.calls
[13:19:38.555]             `[[` <- base::`[[`
[13:19:38.555]             `+` <- base::`+`
[13:19:38.555]             `<<-` <- base::`<<-`
[13:19:38.555]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.555]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.555]                   3L)]
[13:19:38.555]             }
[13:19:38.555]             function(cond) {
[13:19:38.555]                 is_error <- inherits(cond, "error")
[13:19:38.555]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.555]                   NULL)
[13:19:38.555]                 if (is_error) {
[13:19:38.555]                   sessionInformation <- function() {
[13:19:38.555]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.555]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.555]                       search = base::search(), system = base::Sys.info())
[13:19:38.555]                   }
[13:19:38.555]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.555]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.555]                     cond$call), session = sessionInformation(), 
[13:19:38.555]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.555]                   signalCondition(cond)
[13:19:38.555]                 }
[13:19:38.555]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.555]                 "immediateCondition"))) {
[13:19:38.555]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.555]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.555]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.555]                   if (TRUE && !signal) {
[13:19:38.555]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.555]                     {
[13:19:38.555]                       inherits <- base::inherits
[13:19:38.555]                       invokeRestart <- base::invokeRestart
[13:19:38.555]                       is.null <- base::is.null
[13:19:38.555]                       muffled <- FALSE
[13:19:38.555]                       if (inherits(cond, "message")) {
[13:19:38.555]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.555]                         if (muffled) 
[13:19:38.555]                           invokeRestart("muffleMessage")
[13:19:38.555]                       }
[13:19:38.555]                       else if (inherits(cond, "warning")) {
[13:19:38.555]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.555]                         if (muffled) 
[13:19:38.555]                           invokeRestart("muffleWarning")
[13:19:38.555]                       }
[13:19:38.555]                       else if (inherits(cond, "condition")) {
[13:19:38.555]                         if (!is.null(pattern)) {
[13:19:38.555]                           computeRestarts <- base::computeRestarts
[13:19:38.555]                           grepl <- base::grepl
[13:19:38.555]                           restarts <- computeRestarts(cond)
[13:19:38.555]                           for (restart in restarts) {
[13:19:38.555]                             name <- restart$name
[13:19:38.555]                             if (is.null(name)) 
[13:19:38.555]                               next
[13:19:38.555]                             if (!grepl(pattern, name)) 
[13:19:38.555]                               next
[13:19:38.555]                             invokeRestart(restart)
[13:19:38.555]                             muffled <- TRUE
[13:19:38.555]                             break
[13:19:38.555]                           }
[13:19:38.555]                         }
[13:19:38.555]                       }
[13:19:38.555]                       invisible(muffled)
[13:19:38.555]                     }
[13:19:38.555]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.555]                   }
[13:19:38.555]                 }
[13:19:38.555]                 else {
[13:19:38.555]                   if (TRUE) {
[13:19:38.555]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.555]                     {
[13:19:38.555]                       inherits <- base::inherits
[13:19:38.555]                       invokeRestart <- base::invokeRestart
[13:19:38.555]                       is.null <- base::is.null
[13:19:38.555]                       muffled <- FALSE
[13:19:38.555]                       if (inherits(cond, "message")) {
[13:19:38.555]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.555]                         if (muffled) 
[13:19:38.555]                           invokeRestart("muffleMessage")
[13:19:38.555]                       }
[13:19:38.555]                       else if (inherits(cond, "warning")) {
[13:19:38.555]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.555]                         if (muffled) 
[13:19:38.555]                           invokeRestart("muffleWarning")
[13:19:38.555]                       }
[13:19:38.555]                       else if (inherits(cond, "condition")) {
[13:19:38.555]                         if (!is.null(pattern)) {
[13:19:38.555]                           computeRestarts <- base::computeRestarts
[13:19:38.555]                           grepl <- base::grepl
[13:19:38.555]                           restarts <- computeRestarts(cond)
[13:19:38.555]                           for (restart in restarts) {
[13:19:38.555]                             name <- restart$name
[13:19:38.555]                             if (is.null(name)) 
[13:19:38.555]                               next
[13:19:38.555]                             if (!grepl(pattern, name)) 
[13:19:38.555]                               next
[13:19:38.555]                             invokeRestart(restart)
[13:19:38.555]                             muffled <- TRUE
[13:19:38.555]                             break
[13:19:38.555]                           }
[13:19:38.555]                         }
[13:19:38.555]                       }
[13:19:38.555]                       invisible(muffled)
[13:19:38.555]                     }
[13:19:38.555]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.555]                   }
[13:19:38.555]                 }
[13:19:38.555]             }
[13:19:38.555]         }))
[13:19:38.555]     }, error = function(ex) {
[13:19:38.555]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.555]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.555]                 ...future.rng), started = ...future.startTime, 
[13:19:38.555]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.555]             version = "1.8"), class = "FutureResult")
[13:19:38.555]     }, finally = {
[13:19:38.555]         if (!identical(...future.workdir, getwd())) 
[13:19:38.555]             setwd(...future.workdir)
[13:19:38.555]         {
[13:19:38.555]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.555]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.555]             }
[13:19:38.555]             base::options(...future.oldOptions)
[13:19:38.555]             if (.Platform$OS.type == "windows") {
[13:19:38.555]                 old_names <- names(...future.oldEnvVars)
[13:19:38.555]                 envs <- base::Sys.getenv()
[13:19:38.555]                 names <- names(envs)
[13:19:38.555]                 common <- intersect(names, old_names)
[13:19:38.555]                 added <- setdiff(names, old_names)
[13:19:38.555]                 removed <- setdiff(old_names, names)
[13:19:38.555]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.555]                   envs[common]]
[13:19:38.555]                 NAMES <- toupper(changed)
[13:19:38.555]                 args <- list()
[13:19:38.555]                 for (kk in seq_along(NAMES)) {
[13:19:38.555]                   name <- changed[[kk]]
[13:19:38.555]                   NAME <- NAMES[[kk]]
[13:19:38.555]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.555]                     next
[13:19:38.555]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.555]                 }
[13:19:38.555]                 NAMES <- toupper(added)
[13:19:38.555]                 for (kk in seq_along(NAMES)) {
[13:19:38.555]                   name <- added[[kk]]
[13:19:38.555]                   NAME <- NAMES[[kk]]
[13:19:38.555]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.555]                     next
[13:19:38.555]                   args[[name]] <- ""
[13:19:38.555]                 }
[13:19:38.555]                 NAMES <- toupper(removed)
[13:19:38.555]                 for (kk in seq_along(NAMES)) {
[13:19:38.555]                   name <- removed[[kk]]
[13:19:38.555]                   NAME <- NAMES[[kk]]
[13:19:38.555]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.555]                     next
[13:19:38.555]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.555]                 }
[13:19:38.555]                 if (length(args) > 0) 
[13:19:38.555]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.555]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.555]             }
[13:19:38.555]             else {
[13:19:38.555]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.555]             }
[13:19:38.555]             {
[13:19:38.555]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.555]                   0L) {
[13:19:38.555]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.555]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.555]                   base::options(opts)
[13:19:38.555]                 }
[13:19:38.555]                 {
[13:19:38.555]                   {
[13:19:38.555]                     NULL
[13:19:38.555]                     RNGkind("Mersenne-Twister")
[13:19:38.555]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.555]                       inherits = FALSE)
[13:19:38.555]                   }
[13:19:38.555]                   options(future.plan = NULL)
[13:19:38.555]                   if (is.na(NA_character_)) 
[13:19:38.555]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.555]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.555]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.555]                   {
[13:19:38.555]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.555]                     if (!future$lazy) 
[13:19:38.555]                       future <- run(future)
[13:19:38.555]                     invisible(future)
[13:19:38.555]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.555]                 }
[13:19:38.555]             }
[13:19:38.555]         }
[13:19:38.555]     })
[13:19:38.555]     if (TRUE) {
[13:19:38.555]         base::sink(type = "output", split = FALSE)
[13:19:38.555]         if (TRUE) {
[13:19:38.555]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.555]         }
[13:19:38.555]         else {
[13:19:38.555]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.555]         }
[13:19:38.555]         base::close(...future.stdout)
[13:19:38.555]         ...future.stdout <- NULL
[13:19:38.555]     }
[13:19:38.555]     ...future.result$conditions <- ...future.conditions
[13:19:38.555]     ...future.result$finished <- base::Sys.time()
[13:19:38.555]     ...future.result
[13:19:38.555] }
[13:19:38.557] plan(): Setting new future strategy stack:
[13:19:38.557] List of future strategies:
[13:19:38.557] 1. sequential:
[13:19:38.557]    - args: function (..., envir = parent.frame())
[13:19:38.557]    - tweaked: FALSE
[13:19:38.557]    - call: NULL
[13:19:38.557] plan(): nbrOfWorkers() = 1
[13:19:38.558] plan(): Setting new future strategy stack:
[13:19:38.558] List of future strategies:
[13:19:38.558] 1. sequential:
[13:19:38.558]    - args: function (..., envir = parent.frame())
[13:19:38.558]    - tweaked: FALSE
[13:19:38.558]    - call: future::plan("sequential")
[13:19:38.558] plan(): nbrOfWorkers() = 1
[13:19:38.559] SequentialFuture started (and completed)
[13:19:38.559] signalConditions() ...
[13:19:38.559]  - include = ‘immediateCondition’
[13:19:38.559]  - exclude = 
[13:19:38.559]  - resignal = FALSE
[13:19:38.559]  - Number of conditions: 1
[13:19:38.559] signalConditions() ... done
[13:19:38.559] - Launch lazy future ... done
[13:19:38.559] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[13:19:38.560] getGlobalsAndPackages() ...
[13:19:38.560] Searching for globals...
[13:19:38.561] - globals found: [2] ‘{’, ‘stop’
[13:19:38.561] Searching for globals ... DONE
[13:19:38.561] Resolving globals: FALSE
[13:19:38.561] 
[13:19:38.561] 
[13:19:38.561] getGlobalsAndPackages() ... DONE
[13:19:38.562] run() for ‘Future’ ...
[13:19:38.562] - state: ‘created’
[13:19:38.562] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.562] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.562] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.562]   - Field: ‘label’
[13:19:38.562]   - Field: ‘local’
[13:19:38.562]   - Field: ‘owner’
[13:19:38.563]   - Field: ‘envir’
[13:19:38.563]   - Field: ‘packages’
[13:19:38.563]   - Field: ‘gc’
[13:19:38.563]   - Field: ‘conditions’
[13:19:38.563]   - Field: ‘expr’
[13:19:38.563]   - Field: ‘uuid’
[13:19:38.563]   - Field: ‘seed’
[13:19:38.563]   - Field: ‘version’
[13:19:38.563]   - Field: ‘result’
[13:19:38.563]   - Field: ‘asynchronous’
[13:19:38.563]   - Field: ‘calls’
[13:19:38.564]   - Field: ‘globals’
[13:19:38.564]   - Field: ‘stdout’
[13:19:38.564]   - Field: ‘earlySignal’
[13:19:38.564]   - Field: ‘lazy’
[13:19:38.564]   - Field: ‘state’
[13:19:38.564] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.564] - Launch lazy future ...
[13:19:38.564] Packages needed by the future expression (n = 0): <none>
[13:19:38.564] Packages needed by future strategies (n = 0): <none>
[13:19:38.565] {
[13:19:38.565]     {
[13:19:38.565]         {
[13:19:38.565]             ...future.startTime <- base::Sys.time()
[13:19:38.565]             {
[13:19:38.565]                 {
[13:19:38.565]                   {
[13:19:38.565]                     base::local({
[13:19:38.565]                       has_future <- base::requireNamespace("future", 
[13:19:38.565]                         quietly = TRUE)
[13:19:38.565]                       if (has_future) {
[13:19:38.565]                         ns <- base::getNamespace("future")
[13:19:38.565]                         version <- ns[[".package"]][["version"]]
[13:19:38.565]                         if (is.null(version)) 
[13:19:38.565]                           version <- utils::packageVersion("future")
[13:19:38.565]                       }
[13:19:38.565]                       else {
[13:19:38.565]                         version <- NULL
[13:19:38.565]                       }
[13:19:38.565]                       if (!has_future || version < "1.8.0") {
[13:19:38.565]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.565]                           "", base::R.version$version.string), 
[13:19:38.565]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.565]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.565]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.565]                             "release", "version")], collapse = " "), 
[13:19:38.565]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.565]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.565]                           info)
[13:19:38.565]                         info <- base::paste(info, collapse = "; ")
[13:19:38.565]                         if (!has_future) {
[13:19:38.565]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.565]                             info)
[13:19:38.565]                         }
[13:19:38.565]                         else {
[13:19:38.565]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.565]                             info, version)
[13:19:38.565]                         }
[13:19:38.565]                         base::stop(msg)
[13:19:38.565]                       }
[13:19:38.565]                     })
[13:19:38.565]                   }
[13:19:38.565]                   options(future.plan = NULL)
[13:19:38.565]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.565]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.565]                 }
[13:19:38.565]                 ...future.workdir <- getwd()
[13:19:38.565]             }
[13:19:38.565]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.565]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.565]         }
[13:19:38.565]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.565]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.565]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.565]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.565]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.565]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.565]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.565]             base::names(...future.oldOptions))
[13:19:38.565]     }
[13:19:38.565]     if (FALSE) {
[13:19:38.565]     }
[13:19:38.565]     else {
[13:19:38.565]         if (TRUE) {
[13:19:38.565]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.565]                 open = "w")
[13:19:38.565]         }
[13:19:38.565]         else {
[13:19:38.565]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.565]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.565]         }
[13:19:38.565]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.565]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.565]             base::sink(type = "output", split = FALSE)
[13:19:38.565]             base::close(...future.stdout)
[13:19:38.565]         }, add = TRUE)
[13:19:38.565]     }
[13:19:38.565]     ...future.frame <- base::sys.nframe()
[13:19:38.565]     ...future.conditions <- base::list()
[13:19:38.565]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.565]     if (FALSE) {
[13:19:38.565]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.565]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.565]     }
[13:19:38.565]     ...future.result <- base::tryCatch({
[13:19:38.565]         base::withCallingHandlers({
[13:19:38.565]             ...future.value <- base::withVisible(base::local({
[13:19:38.565]                 42L
[13:19:38.565]                 stop("Woops")
[13:19:38.565]             }))
[13:19:38.565]             future::FutureResult(value = ...future.value$value, 
[13:19:38.565]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.565]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.565]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.565]                     ...future.globalenv.names))
[13:19:38.565]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.565]         }, condition = base::local({
[13:19:38.565]             c <- base::c
[13:19:38.565]             inherits <- base::inherits
[13:19:38.565]             invokeRestart <- base::invokeRestart
[13:19:38.565]             length <- base::length
[13:19:38.565]             list <- base::list
[13:19:38.565]             seq.int <- base::seq.int
[13:19:38.565]             signalCondition <- base::signalCondition
[13:19:38.565]             sys.calls <- base::sys.calls
[13:19:38.565]             `[[` <- base::`[[`
[13:19:38.565]             `+` <- base::`+`
[13:19:38.565]             `<<-` <- base::`<<-`
[13:19:38.565]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.565]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.565]                   3L)]
[13:19:38.565]             }
[13:19:38.565]             function(cond) {
[13:19:38.565]                 is_error <- inherits(cond, "error")
[13:19:38.565]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.565]                   NULL)
[13:19:38.565]                 if (is_error) {
[13:19:38.565]                   sessionInformation <- function() {
[13:19:38.565]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.565]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.565]                       search = base::search(), system = base::Sys.info())
[13:19:38.565]                   }
[13:19:38.565]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.565]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.565]                     cond$call), session = sessionInformation(), 
[13:19:38.565]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.565]                   signalCondition(cond)
[13:19:38.565]                 }
[13:19:38.565]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.565]                 "immediateCondition"))) {
[13:19:38.565]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.565]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.565]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.565]                   if (TRUE && !signal) {
[13:19:38.565]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.565]                     {
[13:19:38.565]                       inherits <- base::inherits
[13:19:38.565]                       invokeRestart <- base::invokeRestart
[13:19:38.565]                       is.null <- base::is.null
[13:19:38.565]                       muffled <- FALSE
[13:19:38.565]                       if (inherits(cond, "message")) {
[13:19:38.565]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.565]                         if (muffled) 
[13:19:38.565]                           invokeRestart("muffleMessage")
[13:19:38.565]                       }
[13:19:38.565]                       else if (inherits(cond, "warning")) {
[13:19:38.565]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.565]                         if (muffled) 
[13:19:38.565]                           invokeRestart("muffleWarning")
[13:19:38.565]                       }
[13:19:38.565]                       else if (inherits(cond, "condition")) {
[13:19:38.565]                         if (!is.null(pattern)) {
[13:19:38.565]                           computeRestarts <- base::computeRestarts
[13:19:38.565]                           grepl <- base::grepl
[13:19:38.565]                           restarts <- computeRestarts(cond)
[13:19:38.565]                           for (restart in restarts) {
[13:19:38.565]                             name <- restart$name
[13:19:38.565]                             if (is.null(name)) 
[13:19:38.565]                               next
[13:19:38.565]                             if (!grepl(pattern, name)) 
[13:19:38.565]                               next
[13:19:38.565]                             invokeRestart(restart)
[13:19:38.565]                             muffled <- TRUE
[13:19:38.565]                             break
[13:19:38.565]                           }
[13:19:38.565]                         }
[13:19:38.565]                       }
[13:19:38.565]                       invisible(muffled)
[13:19:38.565]                     }
[13:19:38.565]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.565]                   }
[13:19:38.565]                 }
[13:19:38.565]                 else {
[13:19:38.565]                   if (TRUE) {
[13:19:38.565]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.565]                     {
[13:19:38.565]                       inherits <- base::inherits
[13:19:38.565]                       invokeRestart <- base::invokeRestart
[13:19:38.565]                       is.null <- base::is.null
[13:19:38.565]                       muffled <- FALSE
[13:19:38.565]                       if (inherits(cond, "message")) {
[13:19:38.565]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.565]                         if (muffled) 
[13:19:38.565]                           invokeRestart("muffleMessage")
[13:19:38.565]                       }
[13:19:38.565]                       else if (inherits(cond, "warning")) {
[13:19:38.565]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.565]                         if (muffled) 
[13:19:38.565]                           invokeRestart("muffleWarning")
[13:19:38.565]                       }
[13:19:38.565]                       else if (inherits(cond, "condition")) {
[13:19:38.565]                         if (!is.null(pattern)) {
[13:19:38.565]                           computeRestarts <- base::computeRestarts
[13:19:38.565]                           grepl <- base::grepl
[13:19:38.565]                           restarts <- computeRestarts(cond)
[13:19:38.565]                           for (restart in restarts) {
[13:19:38.565]                             name <- restart$name
[13:19:38.565]                             if (is.null(name)) 
[13:19:38.565]                               next
[13:19:38.565]                             if (!grepl(pattern, name)) 
[13:19:38.565]                               next
[13:19:38.565]                             invokeRestart(restart)
[13:19:38.565]                             muffled <- TRUE
[13:19:38.565]                             break
[13:19:38.565]                           }
[13:19:38.565]                         }
[13:19:38.565]                       }
[13:19:38.565]                       invisible(muffled)
[13:19:38.565]                     }
[13:19:38.565]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.565]                   }
[13:19:38.565]                 }
[13:19:38.565]             }
[13:19:38.565]         }))
[13:19:38.565]     }, error = function(ex) {
[13:19:38.565]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.565]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.565]                 ...future.rng), started = ...future.startTime, 
[13:19:38.565]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.565]             version = "1.8"), class = "FutureResult")
[13:19:38.565]     }, finally = {
[13:19:38.565]         if (!identical(...future.workdir, getwd())) 
[13:19:38.565]             setwd(...future.workdir)
[13:19:38.565]         {
[13:19:38.565]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.565]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.565]             }
[13:19:38.565]             base::options(...future.oldOptions)
[13:19:38.565]             if (.Platform$OS.type == "windows") {
[13:19:38.565]                 old_names <- names(...future.oldEnvVars)
[13:19:38.565]                 envs <- base::Sys.getenv()
[13:19:38.565]                 names <- names(envs)
[13:19:38.565]                 common <- intersect(names, old_names)
[13:19:38.565]                 added <- setdiff(names, old_names)
[13:19:38.565]                 removed <- setdiff(old_names, names)
[13:19:38.565]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.565]                   envs[common]]
[13:19:38.565]                 NAMES <- toupper(changed)
[13:19:38.565]                 args <- list()
[13:19:38.565]                 for (kk in seq_along(NAMES)) {
[13:19:38.565]                   name <- changed[[kk]]
[13:19:38.565]                   NAME <- NAMES[[kk]]
[13:19:38.565]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.565]                     next
[13:19:38.565]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.565]                 }
[13:19:38.565]                 NAMES <- toupper(added)
[13:19:38.565]                 for (kk in seq_along(NAMES)) {
[13:19:38.565]                   name <- added[[kk]]
[13:19:38.565]                   NAME <- NAMES[[kk]]
[13:19:38.565]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.565]                     next
[13:19:38.565]                   args[[name]] <- ""
[13:19:38.565]                 }
[13:19:38.565]                 NAMES <- toupper(removed)
[13:19:38.565]                 for (kk in seq_along(NAMES)) {
[13:19:38.565]                   name <- removed[[kk]]
[13:19:38.565]                   NAME <- NAMES[[kk]]
[13:19:38.565]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.565]                     next
[13:19:38.565]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.565]                 }
[13:19:38.565]                 if (length(args) > 0) 
[13:19:38.565]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.565]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.565]             }
[13:19:38.565]             else {
[13:19:38.565]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.565]             }
[13:19:38.565]             {
[13:19:38.565]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.565]                   0L) {
[13:19:38.565]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.565]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.565]                   base::options(opts)
[13:19:38.565]                 }
[13:19:38.565]                 {
[13:19:38.565]                   {
[13:19:38.565]                     NULL
[13:19:38.565]                     RNGkind("Mersenne-Twister")
[13:19:38.565]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.565]                       inherits = FALSE)
[13:19:38.565]                   }
[13:19:38.565]                   options(future.plan = NULL)
[13:19:38.565]                   if (is.na(NA_character_)) 
[13:19:38.565]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.565]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.565]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.565]                   {
[13:19:38.565]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.565]                     if (!future$lazy) 
[13:19:38.565]                       future <- run(future)
[13:19:38.565]                     invisible(future)
[13:19:38.565]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.565]                 }
[13:19:38.565]             }
[13:19:38.565]         }
[13:19:38.565]     })
[13:19:38.565]     if (TRUE) {
[13:19:38.565]         base::sink(type = "output", split = FALSE)
[13:19:38.565]         if (TRUE) {
[13:19:38.565]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.565]         }
[13:19:38.565]         else {
[13:19:38.565]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.565]         }
[13:19:38.565]         base::close(...future.stdout)
[13:19:38.565]         ...future.stdout <- NULL
[13:19:38.565]     }
[13:19:38.565]     ...future.result$conditions <- ...future.conditions
[13:19:38.565]     ...future.result$finished <- base::Sys.time()
[13:19:38.565]     ...future.result
[13:19:38.565] }
[13:19:38.566] plan(): Setting new future strategy stack:
[13:19:38.567] List of future strategies:
[13:19:38.567] 1. sequential:
[13:19:38.567]    - args: function (..., envir = parent.frame())
[13:19:38.567]    - tweaked: FALSE
[13:19:38.567]    - call: NULL
[13:19:38.567] plan(): nbrOfWorkers() = 1
[13:19:38.568] plan(): Setting new future strategy stack:
[13:19:38.568] List of future strategies:
[13:19:38.568] 1. sequential:
[13:19:38.568]    - args: function (..., envir = parent.frame())
[13:19:38.568]    - tweaked: FALSE
[13:19:38.568]    - call: future::plan("sequential")
[13:19:38.568] plan(): nbrOfWorkers() = 1
[13:19:38.568] SequentialFuture started (and completed)
[13:19:38.569] signalConditions() ...
[13:19:38.569]  - include = ‘immediateCondition’
[13:19:38.569]  - exclude = 
[13:19:38.569]  - resignal = FALSE
[13:19:38.569]  - Number of conditions: 1
[13:19:38.569] signalConditions() ... done
[13:19:38.569] - Launch lazy future ... done
[13:19:38.569] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[13:19:38.570] resolved() for ‘SequentialFuture’ ...
[13:19:38.570] - state: ‘finished’
[13:19:38.570] - run: TRUE
[13:19:38.570] - result: ‘FutureResult’
[13:19:38.570] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[13:19:38.571] getGlobalsAndPackages() ...
[13:19:38.571] Searching for globals...
[13:19:38.572] - globals found: [2] ‘{’, ‘stop’
[13:19:38.572] Searching for globals ... DONE
[13:19:38.572] Resolving globals: FALSE
[13:19:38.573] 
[13:19:38.573] 
[13:19:38.573] getGlobalsAndPackages() ... DONE
[13:19:38.573] run() for ‘Future’ ...
[13:19:38.573] - state: ‘created’
[13:19:38.573] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.573] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.574] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.575]   - Field: ‘label’
[13:19:38.575]   - Field: ‘local’
[13:19:38.575]   - Field: ‘owner’
[13:19:38.576]   - Field: ‘envir’
[13:19:38.576]   - Field: ‘packages’
[13:19:38.576]   - Field: ‘gc’
[13:19:38.576]   - Field: ‘conditions’
[13:19:38.576]   - Field: ‘expr’
[13:19:38.576]   - Field: ‘uuid’
[13:19:38.576]   - Field: ‘seed’
[13:19:38.576]   - Field: ‘version’
[13:19:38.576]   - Field: ‘result’
[13:19:38.576]   - Field: ‘asynchronous’
[13:19:38.576]   - Field: ‘calls’
[13:19:38.577]   - Field: ‘globals’
[13:19:38.577]   - Field: ‘stdout’
[13:19:38.577]   - Field: ‘earlySignal’
[13:19:38.577]   - Field: ‘lazy’
[13:19:38.577]   - Field: ‘state’
[13:19:38.577] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.577] - Launch lazy future ...
[13:19:38.577] Packages needed by the future expression (n = 0): <none>
[13:19:38.578] Packages needed by future strategies (n = 0): <none>
[13:19:38.578] {
[13:19:38.578]     {
[13:19:38.578]         {
[13:19:38.578]             ...future.startTime <- base::Sys.time()
[13:19:38.578]             {
[13:19:38.578]                 {
[13:19:38.578]                   {
[13:19:38.578]                     base::local({
[13:19:38.578]                       has_future <- base::requireNamespace("future", 
[13:19:38.578]                         quietly = TRUE)
[13:19:38.578]                       if (has_future) {
[13:19:38.578]                         ns <- base::getNamespace("future")
[13:19:38.578]                         version <- ns[[".package"]][["version"]]
[13:19:38.578]                         if (is.null(version)) 
[13:19:38.578]                           version <- utils::packageVersion("future")
[13:19:38.578]                       }
[13:19:38.578]                       else {
[13:19:38.578]                         version <- NULL
[13:19:38.578]                       }
[13:19:38.578]                       if (!has_future || version < "1.8.0") {
[13:19:38.578]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.578]                           "", base::R.version$version.string), 
[13:19:38.578]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.578]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.578]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.578]                             "release", "version")], collapse = " "), 
[13:19:38.578]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.578]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.578]                           info)
[13:19:38.578]                         info <- base::paste(info, collapse = "; ")
[13:19:38.578]                         if (!has_future) {
[13:19:38.578]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.578]                             info)
[13:19:38.578]                         }
[13:19:38.578]                         else {
[13:19:38.578]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.578]                             info, version)
[13:19:38.578]                         }
[13:19:38.578]                         base::stop(msg)
[13:19:38.578]                       }
[13:19:38.578]                     })
[13:19:38.578]                   }
[13:19:38.578]                   options(future.plan = NULL)
[13:19:38.578]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.578]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.578]                 }
[13:19:38.578]                 ...future.workdir <- getwd()
[13:19:38.578]             }
[13:19:38.578]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.578]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.578]         }
[13:19:38.578]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.578]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.578]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.578]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.578]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.578]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.578]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.578]             base::names(...future.oldOptions))
[13:19:38.578]     }
[13:19:38.578]     if (FALSE) {
[13:19:38.578]     }
[13:19:38.578]     else {
[13:19:38.578]         if (TRUE) {
[13:19:38.578]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.578]                 open = "w")
[13:19:38.578]         }
[13:19:38.578]         else {
[13:19:38.578]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.578]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.578]         }
[13:19:38.578]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.578]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.578]             base::sink(type = "output", split = FALSE)
[13:19:38.578]             base::close(...future.stdout)
[13:19:38.578]         }, add = TRUE)
[13:19:38.578]     }
[13:19:38.578]     ...future.frame <- base::sys.nframe()
[13:19:38.578]     ...future.conditions <- base::list()
[13:19:38.578]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.578]     if (FALSE) {
[13:19:38.578]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.578]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.578]     }
[13:19:38.578]     ...future.result <- base::tryCatch({
[13:19:38.578]         base::withCallingHandlers({
[13:19:38.578]             ...future.value <- base::withVisible(base::local({
[13:19:38.578]                 42L
[13:19:38.578]                 stop("Woops")
[13:19:38.578]             }))
[13:19:38.578]             future::FutureResult(value = ...future.value$value, 
[13:19:38.578]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.578]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.578]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.578]                     ...future.globalenv.names))
[13:19:38.578]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.578]         }, condition = base::local({
[13:19:38.578]             c <- base::c
[13:19:38.578]             inherits <- base::inherits
[13:19:38.578]             invokeRestart <- base::invokeRestart
[13:19:38.578]             length <- base::length
[13:19:38.578]             list <- base::list
[13:19:38.578]             seq.int <- base::seq.int
[13:19:38.578]             signalCondition <- base::signalCondition
[13:19:38.578]             sys.calls <- base::sys.calls
[13:19:38.578]             `[[` <- base::`[[`
[13:19:38.578]             `+` <- base::`+`
[13:19:38.578]             `<<-` <- base::`<<-`
[13:19:38.578]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.578]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.578]                   3L)]
[13:19:38.578]             }
[13:19:38.578]             function(cond) {
[13:19:38.578]                 is_error <- inherits(cond, "error")
[13:19:38.578]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.578]                   NULL)
[13:19:38.578]                 if (is_error) {
[13:19:38.578]                   sessionInformation <- function() {
[13:19:38.578]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.578]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.578]                       search = base::search(), system = base::Sys.info())
[13:19:38.578]                   }
[13:19:38.578]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.578]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.578]                     cond$call), session = sessionInformation(), 
[13:19:38.578]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.578]                   signalCondition(cond)
[13:19:38.578]                 }
[13:19:38.578]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.578]                 "immediateCondition"))) {
[13:19:38.578]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.578]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.578]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.578]                   if (TRUE && !signal) {
[13:19:38.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.578]                     {
[13:19:38.578]                       inherits <- base::inherits
[13:19:38.578]                       invokeRestart <- base::invokeRestart
[13:19:38.578]                       is.null <- base::is.null
[13:19:38.578]                       muffled <- FALSE
[13:19:38.578]                       if (inherits(cond, "message")) {
[13:19:38.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.578]                         if (muffled) 
[13:19:38.578]                           invokeRestart("muffleMessage")
[13:19:38.578]                       }
[13:19:38.578]                       else if (inherits(cond, "warning")) {
[13:19:38.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.578]                         if (muffled) 
[13:19:38.578]                           invokeRestart("muffleWarning")
[13:19:38.578]                       }
[13:19:38.578]                       else if (inherits(cond, "condition")) {
[13:19:38.578]                         if (!is.null(pattern)) {
[13:19:38.578]                           computeRestarts <- base::computeRestarts
[13:19:38.578]                           grepl <- base::grepl
[13:19:38.578]                           restarts <- computeRestarts(cond)
[13:19:38.578]                           for (restart in restarts) {
[13:19:38.578]                             name <- restart$name
[13:19:38.578]                             if (is.null(name)) 
[13:19:38.578]                               next
[13:19:38.578]                             if (!grepl(pattern, name)) 
[13:19:38.578]                               next
[13:19:38.578]                             invokeRestart(restart)
[13:19:38.578]                             muffled <- TRUE
[13:19:38.578]                             break
[13:19:38.578]                           }
[13:19:38.578]                         }
[13:19:38.578]                       }
[13:19:38.578]                       invisible(muffled)
[13:19:38.578]                     }
[13:19:38.578]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.578]                   }
[13:19:38.578]                 }
[13:19:38.578]                 else {
[13:19:38.578]                   if (TRUE) {
[13:19:38.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.578]                     {
[13:19:38.578]                       inherits <- base::inherits
[13:19:38.578]                       invokeRestart <- base::invokeRestart
[13:19:38.578]                       is.null <- base::is.null
[13:19:38.578]                       muffled <- FALSE
[13:19:38.578]                       if (inherits(cond, "message")) {
[13:19:38.578]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.578]                         if (muffled) 
[13:19:38.578]                           invokeRestart("muffleMessage")
[13:19:38.578]                       }
[13:19:38.578]                       else if (inherits(cond, "warning")) {
[13:19:38.578]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.578]                         if (muffled) 
[13:19:38.578]                           invokeRestart("muffleWarning")
[13:19:38.578]                       }
[13:19:38.578]                       else if (inherits(cond, "condition")) {
[13:19:38.578]                         if (!is.null(pattern)) {
[13:19:38.578]                           computeRestarts <- base::computeRestarts
[13:19:38.578]                           grepl <- base::grepl
[13:19:38.578]                           restarts <- computeRestarts(cond)
[13:19:38.578]                           for (restart in restarts) {
[13:19:38.578]                             name <- restart$name
[13:19:38.578]                             if (is.null(name)) 
[13:19:38.578]                               next
[13:19:38.578]                             if (!grepl(pattern, name)) 
[13:19:38.578]                               next
[13:19:38.578]                             invokeRestart(restart)
[13:19:38.578]                             muffled <- TRUE
[13:19:38.578]                             break
[13:19:38.578]                           }
[13:19:38.578]                         }
[13:19:38.578]                       }
[13:19:38.578]                       invisible(muffled)
[13:19:38.578]                     }
[13:19:38.578]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.578]                   }
[13:19:38.578]                 }
[13:19:38.578]             }
[13:19:38.578]         }))
[13:19:38.578]     }, error = function(ex) {
[13:19:38.578]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.578]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.578]                 ...future.rng), started = ...future.startTime, 
[13:19:38.578]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.578]             version = "1.8"), class = "FutureResult")
[13:19:38.578]     }, finally = {
[13:19:38.578]         if (!identical(...future.workdir, getwd())) 
[13:19:38.578]             setwd(...future.workdir)
[13:19:38.578]         {
[13:19:38.578]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.578]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.578]             }
[13:19:38.578]             base::options(...future.oldOptions)
[13:19:38.578]             if (.Platform$OS.type == "windows") {
[13:19:38.578]                 old_names <- names(...future.oldEnvVars)
[13:19:38.578]                 envs <- base::Sys.getenv()
[13:19:38.578]                 names <- names(envs)
[13:19:38.578]                 common <- intersect(names, old_names)
[13:19:38.578]                 added <- setdiff(names, old_names)
[13:19:38.578]                 removed <- setdiff(old_names, names)
[13:19:38.578]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.578]                   envs[common]]
[13:19:38.578]                 NAMES <- toupper(changed)
[13:19:38.578]                 args <- list()
[13:19:38.578]                 for (kk in seq_along(NAMES)) {
[13:19:38.578]                   name <- changed[[kk]]
[13:19:38.578]                   NAME <- NAMES[[kk]]
[13:19:38.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.578]                     next
[13:19:38.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.578]                 }
[13:19:38.578]                 NAMES <- toupper(added)
[13:19:38.578]                 for (kk in seq_along(NAMES)) {
[13:19:38.578]                   name <- added[[kk]]
[13:19:38.578]                   NAME <- NAMES[[kk]]
[13:19:38.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.578]                     next
[13:19:38.578]                   args[[name]] <- ""
[13:19:38.578]                 }
[13:19:38.578]                 NAMES <- toupper(removed)
[13:19:38.578]                 for (kk in seq_along(NAMES)) {
[13:19:38.578]                   name <- removed[[kk]]
[13:19:38.578]                   NAME <- NAMES[[kk]]
[13:19:38.578]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.578]                     next
[13:19:38.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.578]                 }
[13:19:38.578]                 if (length(args) > 0) 
[13:19:38.578]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.578]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.578]             }
[13:19:38.578]             else {
[13:19:38.578]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.578]             }
[13:19:38.578]             {
[13:19:38.578]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.578]                   0L) {
[13:19:38.578]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.578]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.578]                   base::options(opts)
[13:19:38.578]                 }
[13:19:38.578]                 {
[13:19:38.578]                   {
[13:19:38.578]                     NULL
[13:19:38.578]                     RNGkind("Mersenne-Twister")
[13:19:38.578]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.578]                       inherits = FALSE)
[13:19:38.578]                   }
[13:19:38.578]                   options(future.plan = NULL)
[13:19:38.578]                   if (is.na(NA_character_)) 
[13:19:38.578]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.578]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.578]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.578]                   {
[13:19:38.578]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.578]                     if (!future$lazy) 
[13:19:38.578]                       future <- run(future)
[13:19:38.578]                     invisible(future)
[13:19:38.578]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.578]                 }
[13:19:38.578]             }
[13:19:38.578]         }
[13:19:38.578]     })
[13:19:38.578]     if (TRUE) {
[13:19:38.578]         base::sink(type = "output", split = FALSE)
[13:19:38.578]         if (TRUE) {
[13:19:38.578]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.578]         }
[13:19:38.578]         else {
[13:19:38.578]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.578]         }
[13:19:38.578]         base::close(...future.stdout)
[13:19:38.578]         ...future.stdout <- NULL
[13:19:38.578]     }
[13:19:38.578]     ...future.result$conditions <- ...future.conditions
[13:19:38.578]     ...future.result$finished <- base::Sys.time()
[13:19:38.578]     ...future.result
[13:19:38.578] }
[13:19:38.580] plan(): Setting new future strategy stack:
[13:19:38.580] List of future strategies:
[13:19:38.580] 1. sequential:
[13:19:38.580]    - args: function (..., envir = parent.frame())
[13:19:38.580]    - tweaked: FALSE
[13:19:38.580]    - call: NULL
[13:19:38.580] plan(): nbrOfWorkers() = 1
[13:19:38.581] plan(): Setting new future strategy stack:
[13:19:38.581] List of future strategies:
[13:19:38.581] 1. sequential:
[13:19:38.581]    - args: function (..., envir = parent.frame())
[13:19:38.581]    - tweaked: FALSE
[13:19:38.581]    - call: future::plan("sequential")
[13:19:38.581] plan(): nbrOfWorkers() = 1
[13:19:38.582] SequentialFuture started (and completed)
[13:19:38.582] signalConditions() ...
[13:19:38.582]  - include = ‘immediateCondition’
[13:19:38.582]  - exclude = 
[13:19:38.582]  - resignal = FALSE
[13:19:38.582]  - Number of conditions: 1
[13:19:38.582] signalConditions() ... done
[13:19:38.582] - Launch lazy future ... done
[13:19:38.582] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[13:19:38.583] getGlobalsAndPackages() ...
[13:19:38.583] Searching for globals...
[13:19:38.584] - globals found: [2] ‘{’, ‘stop’
[13:19:38.584] Searching for globals ... DONE
[13:19:38.584] Resolving globals: FALSE
[13:19:38.584] 
[13:19:38.584] 
[13:19:38.585] getGlobalsAndPackages() ... DONE
[13:19:38.585] run() for ‘Future’ ...
[13:19:38.585] - state: ‘created’
[13:19:38.585] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.585] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.585] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.586]   - Field: ‘label’
[13:19:38.586]   - Field: ‘local’
[13:19:38.586]   - Field: ‘owner’
[13:19:38.586]   - Field: ‘envir’
[13:19:38.586]   - Field: ‘packages’
[13:19:38.586]   - Field: ‘gc’
[13:19:38.586]   - Field: ‘conditions’
[13:19:38.586]   - Field: ‘expr’
[13:19:38.586]   - Field: ‘uuid’
[13:19:38.586]   - Field: ‘seed’
[13:19:38.586]   - Field: ‘version’
[13:19:38.587]   - Field: ‘result’
[13:19:38.587]   - Field: ‘asynchronous’
[13:19:38.587]   - Field: ‘calls’
[13:19:38.587]   - Field: ‘globals’
[13:19:38.587]   - Field: ‘stdout’
[13:19:38.587]   - Field: ‘earlySignal’
[13:19:38.587]   - Field: ‘lazy’
[13:19:38.587]   - Field: ‘state’
[13:19:38.587] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.587] - Launch lazy future ...
[13:19:38.588] Packages needed by the future expression (n = 0): <none>
[13:19:38.588] Packages needed by future strategies (n = 0): <none>
[13:19:38.588] {
[13:19:38.588]     {
[13:19:38.588]         {
[13:19:38.588]             ...future.startTime <- base::Sys.time()
[13:19:38.588]             {
[13:19:38.588]                 {
[13:19:38.588]                   {
[13:19:38.588]                     base::local({
[13:19:38.588]                       has_future <- base::requireNamespace("future", 
[13:19:38.588]                         quietly = TRUE)
[13:19:38.588]                       if (has_future) {
[13:19:38.588]                         ns <- base::getNamespace("future")
[13:19:38.588]                         version <- ns[[".package"]][["version"]]
[13:19:38.588]                         if (is.null(version)) 
[13:19:38.588]                           version <- utils::packageVersion("future")
[13:19:38.588]                       }
[13:19:38.588]                       else {
[13:19:38.588]                         version <- NULL
[13:19:38.588]                       }
[13:19:38.588]                       if (!has_future || version < "1.8.0") {
[13:19:38.588]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.588]                           "", base::R.version$version.string), 
[13:19:38.588]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.588]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.588]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.588]                             "release", "version")], collapse = " "), 
[13:19:38.588]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.588]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.588]                           info)
[13:19:38.588]                         info <- base::paste(info, collapse = "; ")
[13:19:38.588]                         if (!has_future) {
[13:19:38.588]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.588]                             info)
[13:19:38.588]                         }
[13:19:38.588]                         else {
[13:19:38.588]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.588]                             info, version)
[13:19:38.588]                         }
[13:19:38.588]                         base::stop(msg)
[13:19:38.588]                       }
[13:19:38.588]                     })
[13:19:38.588]                   }
[13:19:38.588]                   options(future.plan = NULL)
[13:19:38.588]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.588]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.588]                 }
[13:19:38.588]                 ...future.workdir <- getwd()
[13:19:38.588]             }
[13:19:38.588]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.588]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.588]         }
[13:19:38.588]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.588]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.588]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.588]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.588]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.588]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.588]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.588]             base::names(...future.oldOptions))
[13:19:38.588]     }
[13:19:38.588]     if (FALSE) {
[13:19:38.588]     }
[13:19:38.588]     else {
[13:19:38.588]         if (TRUE) {
[13:19:38.588]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.588]                 open = "w")
[13:19:38.588]         }
[13:19:38.588]         else {
[13:19:38.588]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.588]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.588]         }
[13:19:38.588]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.588]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.588]             base::sink(type = "output", split = FALSE)
[13:19:38.588]             base::close(...future.stdout)
[13:19:38.588]         }, add = TRUE)
[13:19:38.588]     }
[13:19:38.588]     ...future.frame <- base::sys.nframe()
[13:19:38.588]     ...future.conditions <- base::list()
[13:19:38.588]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.588]     if (FALSE) {
[13:19:38.588]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.588]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.588]     }
[13:19:38.588]     ...future.result <- base::tryCatch({
[13:19:38.588]         base::withCallingHandlers({
[13:19:38.588]             ...future.value <- base::withVisible(base::local({
[13:19:38.588]                 42L
[13:19:38.588]                 stop("Woops")
[13:19:38.588]             }))
[13:19:38.588]             future::FutureResult(value = ...future.value$value, 
[13:19:38.588]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.588]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.588]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.588]                     ...future.globalenv.names))
[13:19:38.588]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.588]         }, condition = base::local({
[13:19:38.588]             c <- base::c
[13:19:38.588]             inherits <- base::inherits
[13:19:38.588]             invokeRestart <- base::invokeRestart
[13:19:38.588]             length <- base::length
[13:19:38.588]             list <- base::list
[13:19:38.588]             seq.int <- base::seq.int
[13:19:38.588]             signalCondition <- base::signalCondition
[13:19:38.588]             sys.calls <- base::sys.calls
[13:19:38.588]             `[[` <- base::`[[`
[13:19:38.588]             `+` <- base::`+`
[13:19:38.588]             `<<-` <- base::`<<-`
[13:19:38.588]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.588]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.588]                   3L)]
[13:19:38.588]             }
[13:19:38.588]             function(cond) {
[13:19:38.588]                 is_error <- inherits(cond, "error")
[13:19:38.588]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.588]                   NULL)
[13:19:38.588]                 if (is_error) {
[13:19:38.588]                   sessionInformation <- function() {
[13:19:38.588]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.588]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.588]                       search = base::search(), system = base::Sys.info())
[13:19:38.588]                   }
[13:19:38.588]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.588]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.588]                     cond$call), session = sessionInformation(), 
[13:19:38.588]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.588]                   signalCondition(cond)
[13:19:38.588]                 }
[13:19:38.588]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.588]                 "immediateCondition"))) {
[13:19:38.588]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.588]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.588]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.588]                   if (TRUE && !signal) {
[13:19:38.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.588]                     {
[13:19:38.588]                       inherits <- base::inherits
[13:19:38.588]                       invokeRestart <- base::invokeRestart
[13:19:38.588]                       is.null <- base::is.null
[13:19:38.588]                       muffled <- FALSE
[13:19:38.588]                       if (inherits(cond, "message")) {
[13:19:38.588]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.588]                         if (muffled) 
[13:19:38.588]                           invokeRestart("muffleMessage")
[13:19:38.588]                       }
[13:19:38.588]                       else if (inherits(cond, "warning")) {
[13:19:38.588]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.588]                         if (muffled) 
[13:19:38.588]                           invokeRestart("muffleWarning")
[13:19:38.588]                       }
[13:19:38.588]                       else if (inherits(cond, "condition")) {
[13:19:38.588]                         if (!is.null(pattern)) {
[13:19:38.588]                           computeRestarts <- base::computeRestarts
[13:19:38.588]                           grepl <- base::grepl
[13:19:38.588]                           restarts <- computeRestarts(cond)
[13:19:38.588]                           for (restart in restarts) {
[13:19:38.588]                             name <- restart$name
[13:19:38.588]                             if (is.null(name)) 
[13:19:38.588]                               next
[13:19:38.588]                             if (!grepl(pattern, name)) 
[13:19:38.588]                               next
[13:19:38.588]                             invokeRestart(restart)
[13:19:38.588]                             muffled <- TRUE
[13:19:38.588]                             break
[13:19:38.588]                           }
[13:19:38.588]                         }
[13:19:38.588]                       }
[13:19:38.588]                       invisible(muffled)
[13:19:38.588]                     }
[13:19:38.588]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.588]                   }
[13:19:38.588]                 }
[13:19:38.588]                 else {
[13:19:38.588]                   if (TRUE) {
[13:19:38.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.588]                     {
[13:19:38.588]                       inherits <- base::inherits
[13:19:38.588]                       invokeRestart <- base::invokeRestart
[13:19:38.588]                       is.null <- base::is.null
[13:19:38.588]                       muffled <- FALSE
[13:19:38.588]                       if (inherits(cond, "message")) {
[13:19:38.588]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.588]                         if (muffled) 
[13:19:38.588]                           invokeRestart("muffleMessage")
[13:19:38.588]                       }
[13:19:38.588]                       else if (inherits(cond, "warning")) {
[13:19:38.588]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.588]                         if (muffled) 
[13:19:38.588]                           invokeRestart("muffleWarning")
[13:19:38.588]                       }
[13:19:38.588]                       else if (inherits(cond, "condition")) {
[13:19:38.588]                         if (!is.null(pattern)) {
[13:19:38.588]                           computeRestarts <- base::computeRestarts
[13:19:38.588]                           grepl <- base::grepl
[13:19:38.588]                           restarts <- computeRestarts(cond)
[13:19:38.588]                           for (restart in restarts) {
[13:19:38.588]                             name <- restart$name
[13:19:38.588]                             if (is.null(name)) 
[13:19:38.588]                               next
[13:19:38.588]                             if (!grepl(pattern, name)) 
[13:19:38.588]                               next
[13:19:38.588]                             invokeRestart(restart)
[13:19:38.588]                             muffled <- TRUE
[13:19:38.588]                             break
[13:19:38.588]                           }
[13:19:38.588]                         }
[13:19:38.588]                       }
[13:19:38.588]                       invisible(muffled)
[13:19:38.588]                     }
[13:19:38.588]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.588]                   }
[13:19:38.588]                 }
[13:19:38.588]             }
[13:19:38.588]         }))
[13:19:38.588]     }, error = function(ex) {
[13:19:38.588]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.588]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.588]                 ...future.rng), started = ...future.startTime, 
[13:19:38.588]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.588]             version = "1.8"), class = "FutureResult")
[13:19:38.588]     }, finally = {
[13:19:38.588]         if (!identical(...future.workdir, getwd())) 
[13:19:38.588]             setwd(...future.workdir)
[13:19:38.588]         {
[13:19:38.588]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.588]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.588]             }
[13:19:38.588]             base::options(...future.oldOptions)
[13:19:38.588]             if (.Platform$OS.type == "windows") {
[13:19:38.588]                 old_names <- names(...future.oldEnvVars)
[13:19:38.588]                 envs <- base::Sys.getenv()
[13:19:38.588]                 names <- names(envs)
[13:19:38.588]                 common <- intersect(names, old_names)
[13:19:38.588]                 added <- setdiff(names, old_names)
[13:19:38.588]                 removed <- setdiff(old_names, names)
[13:19:38.588]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.588]                   envs[common]]
[13:19:38.588]                 NAMES <- toupper(changed)
[13:19:38.588]                 args <- list()
[13:19:38.588]                 for (kk in seq_along(NAMES)) {
[13:19:38.588]                   name <- changed[[kk]]
[13:19:38.588]                   NAME <- NAMES[[kk]]
[13:19:38.588]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.588]                     next
[13:19:38.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.588]                 }
[13:19:38.588]                 NAMES <- toupper(added)
[13:19:38.588]                 for (kk in seq_along(NAMES)) {
[13:19:38.588]                   name <- added[[kk]]
[13:19:38.588]                   NAME <- NAMES[[kk]]
[13:19:38.588]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.588]                     next
[13:19:38.588]                   args[[name]] <- ""
[13:19:38.588]                 }
[13:19:38.588]                 NAMES <- toupper(removed)
[13:19:38.588]                 for (kk in seq_along(NAMES)) {
[13:19:38.588]                   name <- removed[[kk]]
[13:19:38.588]                   NAME <- NAMES[[kk]]
[13:19:38.588]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.588]                     next
[13:19:38.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.588]                 }
[13:19:38.588]                 if (length(args) > 0) 
[13:19:38.588]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.588]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.588]             }
[13:19:38.588]             else {
[13:19:38.588]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.588]             }
[13:19:38.588]             {
[13:19:38.588]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.588]                   0L) {
[13:19:38.588]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.588]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.588]                   base::options(opts)
[13:19:38.588]                 }
[13:19:38.588]                 {
[13:19:38.588]                   {
[13:19:38.588]                     NULL
[13:19:38.588]                     RNGkind("Mersenne-Twister")
[13:19:38.588]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.588]                       inherits = FALSE)
[13:19:38.588]                   }
[13:19:38.588]                   options(future.plan = NULL)
[13:19:38.588]                   if (is.na(NA_character_)) 
[13:19:38.588]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.588]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.588]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.588]                   {
[13:19:38.588]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.588]                     if (!future$lazy) 
[13:19:38.588]                       future <- run(future)
[13:19:38.588]                     invisible(future)
[13:19:38.588]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.588]                 }
[13:19:38.588]             }
[13:19:38.588]         }
[13:19:38.588]     })
[13:19:38.588]     if (TRUE) {
[13:19:38.588]         base::sink(type = "output", split = FALSE)
[13:19:38.588]         if (TRUE) {
[13:19:38.588]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.588]         }
[13:19:38.588]         else {
[13:19:38.588]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.588]         }
[13:19:38.588]         base::close(...future.stdout)
[13:19:38.588]         ...future.stdout <- NULL
[13:19:38.588]     }
[13:19:38.588]     ...future.result$conditions <- ...future.conditions
[13:19:38.588]     ...future.result$finished <- base::Sys.time()
[13:19:38.588]     ...future.result
[13:19:38.588] }
[13:19:38.590] plan(): Setting new future strategy stack:
[13:19:38.590] List of future strategies:
[13:19:38.590] 1. sequential:
[13:19:38.590]    - args: function (..., envir = parent.frame())
[13:19:38.590]    - tweaked: FALSE
[13:19:38.590]    - call: NULL
[13:19:38.590] plan(): nbrOfWorkers() = 1
[13:19:38.591] plan(): Setting new future strategy stack:
[13:19:38.591] List of future strategies:
[13:19:38.591] 1. sequential:
[13:19:38.591]    - args: function (..., envir = parent.frame())
[13:19:38.591]    - tweaked: FALSE
[13:19:38.591]    - call: future::plan("sequential")
[13:19:38.592] plan(): nbrOfWorkers() = 1
[13:19:38.592] SequentialFuture started (and completed)
[13:19:38.592] signalConditions() ...
[13:19:38.592]  - include = ‘immediateCondition’
[13:19:38.592]  - exclude = 
[13:19:38.592]  - resignal = FALSE
[13:19:38.592]  - Number of conditions: 1
[13:19:38.592] signalConditions() ... done
[13:19:38.592] - Launch lazy future ... done
[13:19:38.593] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[13:19:38.593] resolved() for ‘SequentialFuture’ ...
[13:19:38.593] - state: ‘finished’
[13:19:38.593] - run: TRUE
[13:19:38.593] - result: ‘FutureResult’
[13:19:38.593] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[13:19:38.594] getGlobalsAndPackages() ...
[13:19:38.594] Searching for globals...
[13:19:38.595] - globals found: [2] ‘{’, ‘stop’
[13:19:38.595] Searching for globals ... DONE
[13:19:38.595] Resolving globals: FALSE
[13:19:38.595] 
[13:19:38.595] 
[13:19:38.596] getGlobalsAndPackages() ... DONE
[13:19:38.596] run() for ‘Future’ ...
[13:19:38.596] - state: ‘created’
[13:19:38.596] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.596] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.596] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.596]   - Field: ‘label’
[13:19:38.597]   - Field: ‘local’
[13:19:38.597]   - Field: ‘owner’
[13:19:38.597]   - Field: ‘envir’
[13:19:38.597]   - Field: ‘packages’
[13:19:38.597]   - Field: ‘gc’
[13:19:38.597]   - Field: ‘conditions’
[13:19:38.597]   - Field: ‘expr’
[13:19:38.597]   - Field: ‘uuid’
[13:19:38.597]   - Field: ‘seed’
[13:19:38.597]   - Field: ‘version’
[13:19:38.597]   - Field: ‘result’
[13:19:38.598]   - Field: ‘asynchronous’
[13:19:38.598]   - Field: ‘calls’
[13:19:38.598]   - Field: ‘globals’
[13:19:38.598]   - Field: ‘stdout’
[13:19:38.598]   - Field: ‘earlySignal’
[13:19:38.598]   - Field: ‘lazy’
[13:19:38.598]   - Field: ‘state’
[13:19:38.598] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.598] - Launch lazy future ...
[13:19:38.598] Packages needed by the future expression (n = 0): <none>
[13:19:38.599] Packages needed by future strategies (n = 0): <none>
[13:19:38.599] {
[13:19:38.599]     {
[13:19:38.599]         {
[13:19:38.599]             ...future.startTime <- base::Sys.time()
[13:19:38.599]             {
[13:19:38.599]                 {
[13:19:38.599]                   {
[13:19:38.599]                     base::local({
[13:19:38.599]                       has_future <- base::requireNamespace("future", 
[13:19:38.599]                         quietly = TRUE)
[13:19:38.599]                       if (has_future) {
[13:19:38.599]                         ns <- base::getNamespace("future")
[13:19:38.599]                         version <- ns[[".package"]][["version"]]
[13:19:38.599]                         if (is.null(version)) 
[13:19:38.599]                           version <- utils::packageVersion("future")
[13:19:38.599]                       }
[13:19:38.599]                       else {
[13:19:38.599]                         version <- NULL
[13:19:38.599]                       }
[13:19:38.599]                       if (!has_future || version < "1.8.0") {
[13:19:38.599]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.599]                           "", base::R.version$version.string), 
[13:19:38.599]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.599]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.599]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.599]                             "release", "version")], collapse = " "), 
[13:19:38.599]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.599]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.599]                           info)
[13:19:38.599]                         info <- base::paste(info, collapse = "; ")
[13:19:38.599]                         if (!has_future) {
[13:19:38.599]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.599]                             info)
[13:19:38.599]                         }
[13:19:38.599]                         else {
[13:19:38.599]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.599]                             info, version)
[13:19:38.599]                         }
[13:19:38.599]                         base::stop(msg)
[13:19:38.599]                       }
[13:19:38.599]                     })
[13:19:38.599]                   }
[13:19:38.599]                   options(future.plan = NULL)
[13:19:38.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.599]                 }
[13:19:38.599]                 ...future.workdir <- getwd()
[13:19:38.599]             }
[13:19:38.599]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.599]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.599]         }
[13:19:38.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.599]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.599]             base::names(...future.oldOptions))
[13:19:38.599]     }
[13:19:38.599]     if (FALSE) {
[13:19:38.599]     }
[13:19:38.599]     else {
[13:19:38.599]         if (TRUE) {
[13:19:38.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.599]                 open = "w")
[13:19:38.599]         }
[13:19:38.599]         else {
[13:19:38.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.599]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.599]         }
[13:19:38.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.599]             base::sink(type = "output", split = FALSE)
[13:19:38.599]             base::close(...future.stdout)
[13:19:38.599]         }, add = TRUE)
[13:19:38.599]     }
[13:19:38.599]     ...future.frame <- base::sys.nframe()
[13:19:38.599]     ...future.conditions <- base::list()
[13:19:38.599]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.599]     if (FALSE) {
[13:19:38.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.599]     }
[13:19:38.599]     ...future.result <- base::tryCatch({
[13:19:38.599]         base::withCallingHandlers({
[13:19:38.599]             ...future.value <- base::withVisible(base::local({
[13:19:38.599]                 42L
[13:19:38.599]                 stop("Woops")
[13:19:38.599]             }))
[13:19:38.599]             future::FutureResult(value = ...future.value$value, 
[13:19:38.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.599]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.599]                     ...future.globalenv.names))
[13:19:38.599]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.599]         }, condition = base::local({
[13:19:38.599]             c <- base::c
[13:19:38.599]             inherits <- base::inherits
[13:19:38.599]             invokeRestart <- base::invokeRestart
[13:19:38.599]             length <- base::length
[13:19:38.599]             list <- base::list
[13:19:38.599]             seq.int <- base::seq.int
[13:19:38.599]             signalCondition <- base::signalCondition
[13:19:38.599]             sys.calls <- base::sys.calls
[13:19:38.599]             `[[` <- base::`[[`
[13:19:38.599]             `+` <- base::`+`
[13:19:38.599]             `<<-` <- base::`<<-`
[13:19:38.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.599]                   3L)]
[13:19:38.599]             }
[13:19:38.599]             function(cond) {
[13:19:38.599]                 is_error <- inherits(cond, "error")
[13:19:38.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.599]                   NULL)
[13:19:38.599]                 if (is_error) {
[13:19:38.599]                   sessionInformation <- function() {
[13:19:38.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.599]                       search = base::search(), system = base::Sys.info())
[13:19:38.599]                   }
[13:19:38.599]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.599]                     cond$call), session = sessionInformation(), 
[13:19:38.599]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.599]                   signalCondition(cond)
[13:19:38.599]                 }
[13:19:38.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.599]                 "immediateCondition"))) {
[13:19:38.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.599]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.599]                   if (TRUE && !signal) {
[13:19:38.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.599]                     {
[13:19:38.599]                       inherits <- base::inherits
[13:19:38.599]                       invokeRestart <- base::invokeRestart
[13:19:38.599]                       is.null <- base::is.null
[13:19:38.599]                       muffled <- FALSE
[13:19:38.599]                       if (inherits(cond, "message")) {
[13:19:38.599]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.599]                         if (muffled) 
[13:19:38.599]                           invokeRestart("muffleMessage")
[13:19:38.599]                       }
[13:19:38.599]                       else if (inherits(cond, "warning")) {
[13:19:38.599]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.599]                         if (muffled) 
[13:19:38.599]                           invokeRestart("muffleWarning")
[13:19:38.599]                       }
[13:19:38.599]                       else if (inherits(cond, "condition")) {
[13:19:38.599]                         if (!is.null(pattern)) {
[13:19:38.599]                           computeRestarts <- base::computeRestarts
[13:19:38.599]                           grepl <- base::grepl
[13:19:38.599]                           restarts <- computeRestarts(cond)
[13:19:38.599]                           for (restart in restarts) {
[13:19:38.599]                             name <- restart$name
[13:19:38.599]                             if (is.null(name)) 
[13:19:38.599]                               next
[13:19:38.599]                             if (!grepl(pattern, name)) 
[13:19:38.599]                               next
[13:19:38.599]                             invokeRestart(restart)
[13:19:38.599]                             muffled <- TRUE
[13:19:38.599]                             break
[13:19:38.599]                           }
[13:19:38.599]                         }
[13:19:38.599]                       }
[13:19:38.599]                       invisible(muffled)
[13:19:38.599]                     }
[13:19:38.599]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.599]                   }
[13:19:38.599]                 }
[13:19:38.599]                 else {
[13:19:38.599]                   if (TRUE) {
[13:19:38.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.599]                     {
[13:19:38.599]                       inherits <- base::inherits
[13:19:38.599]                       invokeRestart <- base::invokeRestart
[13:19:38.599]                       is.null <- base::is.null
[13:19:38.599]                       muffled <- FALSE
[13:19:38.599]                       if (inherits(cond, "message")) {
[13:19:38.599]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.599]                         if (muffled) 
[13:19:38.599]                           invokeRestart("muffleMessage")
[13:19:38.599]                       }
[13:19:38.599]                       else if (inherits(cond, "warning")) {
[13:19:38.599]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.599]                         if (muffled) 
[13:19:38.599]                           invokeRestart("muffleWarning")
[13:19:38.599]                       }
[13:19:38.599]                       else if (inherits(cond, "condition")) {
[13:19:38.599]                         if (!is.null(pattern)) {
[13:19:38.599]                           computeRestarts <- base::computeRestarts
[13:19:38.599]                           grepl <- base::grepl
[13:19:38.599]                           restarts <- computeRestarts(cond)
[13:19:38.599]                           for (restart in restarts) {
[13:19:38.599]                             name <- restart$name
[13:19:38.599]                             if (is.null(name)) 
[13:19:38.599]                               next
[13:19:38.599]                             if (!grepl(pattern, name)) 
[13:19:38.599]                               next
[13:19:38.599]                             invokeRestart(restart)
[13:19:38.599]                             muffled <- TRUE
[13:19:38.599]                             break
[13:19:38.599]                           }
[13:19:38.599]                         }
[13:19:38.599]                       }
[13:19:38.599]                       invisible(muffled)
[13:19:38.599]                     }
[13:19:38.599]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.599]                   }
[13:19:38.599]                 }
[13:19:38.599]             }
[13:19:38.599]         }))
[13:19:38.599]     }, error = function(ex) {
[13:19:38.599]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.599]                 ...future.rng), started = ...future.startTime, 
[13:19:38.599]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.599]             version = "1.8"), class = "FutureResult")
[13:19:38.599]     }, finally = {
[13:19:38.599]         if (!identical(...future.workdir, getwd())) 
[13:19:38.599]             setwd(...future.workdir)
[13:19:38.599]         {
[13:19:38.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.599]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.599]             }
[13:19:38.599]             base::options(...future.oldOptions)
[13:19:38.599]             if (.Platform$OS.type == "windows") {
[13:19:38.599]                 old_names <- names(...future.oldEnvVars)
[13:19:38.599]                 envs <- base::Sys.getenv()
[13:19:38.599]                 names <- names(envs)
[13:19:38.599]                 common <- intersect(names, old_names)
[13:19:38.599]                 added <- setdiff(names, old_names)
[13:19:38.599]                 removed <- setdiff(old_names, names)
[13:19:38.599]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.599]                   envs[common]]
[13:19:38.599]                 NAMES <- toupper(changed)
[13:19:38.599]                 args <- list()
[13:19:38.599]                 for (kk in seq_along(NAMES)) {
[13:19:38.599]                   name <- changed[[kk]]
[13:19:38.599]                   NAME <- NAMES[[kk]]
[13:19:38.599]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.599]                     next
[13:19:38.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.599]                 }
[13:19:38.599]                 NAMES <- toupper(added)
[13:19:38.599]                 for (kk in seq_along(NAMES)) {
[13:19:38.599]                   name <- added[[kk]]
[13:19:38.599]                   NAME <- NAMES[[kk]]
[13:19:38.599]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.599]                     next
[13:19:38.599]                   args[[name]] <- ""
[13:19:38.599]                 }
[13:19:38.599]                 NAMES <- toupper(removed)
[13:19:38.599]                 for (kk in seq_along(NAMES)) {
[13:19:38.599]                   name <- removed[[kk]]
[13:19:38.599]                   NAME <- NAMES[[kk]]
[13:19:38.599]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.599]                     next
[13:19:38.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.599]                 }
[13:19:38.599]                 if (length(args) > 0) 
[13:19:38.599]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.599]             }
[13:19:38.599]             else {
[13:19:38.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.599]             }
[13:19:38.599]             {
[13:19:38.599]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.599]                   0L) {
[13:19:38.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.599]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.599]                   base::options(opts)
[13:19:38.599]                 }
[13:19:38.599]                 {
[13:19:38.599]                   {
[13:19:38.599]                     NULL
[13:19:38.599]                     RNGkind("Mersenne-Twister")
[13:19:38.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.599]                       inherits = FALSE)
[13:19:38.599]                   }
[13:19:38.599]                   options(future.plan = NULL)
[13:19:38.599]                   if (is.na(NA_character_)) 
[13:19:38.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.599]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.599]                   {
[13:19:38.599]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.599]                     if (!future$lazy) 
[13:19:38.599]                       future <- run(future)
[13:19:38.599]                     invisible(future)
[13:19:38.599]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.599]                 }
[13:19:38.599]             }
[13:19:38.599]         }
[13:19:38.599]     })
[13:19:38.599]     if (TRUE) {
[13:19:38.599]         base::sink(type = "output", split = FALSE)
[13:19:38.599]         if (TRUE) {
[13:19:38.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.599]         }
[13:19:38.599]         else {
[13:19:38.599]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.599]         }
[13:19:38.599]         base::close(...future.stdout)
[13:19:38.599]         ...future.stdout <- NULL
[13:19:38.599]     }
[13:19:38.599]     ...future.result$conditions <- ...future.conditions
[13:19:38.599]     ...future.result$finished <- base::Sys.time()
[13:19:38.599]     ...future.result
[13:19:38.599] }
[13:19:38.601] plan(): Setting new future strategy stack:
[13:19:38.601] List of future strategies:
[13:19:38.601] 1. sequential:
[13:19:38.601]    - args: function (..., envir = parent.frame())
[13:19:38.601]    - tweaked: FALSE
[13:19:38.601]    - call: NULL
[13:19:38.601] plan(): nbrOfWorkers() = 1
[13:19:38.602] plan(): Setting new future strategy stack:
[13:19:38.602] List of future strategies:
[13:19:38.602] 1. sequential:
[13:19:38.602]    - args: function (..., envir = parent.frame())
[13:19:38.602]    - tweaked: FALSE
[13:19:38.602]    - call: future::plan("sequential")
[13:19:38.602] plan(): nbrOfWorkers() = 1
[13:19:38.603] SequentialFuture started (and completed)
[13:19:38.603] signalConditions() ...
[13:19:38.603]  - include = ‘immediateCondition’
[13:19:38.603]  - exclude = 
[13:19:38.603]  - resignal = FALSE
[13:19:38.603]  - Number of conditions: 1
[13:19:38.603] signalConditions() ... done
[13:19:38.603] - Launch lazy future ... done
[13:19:38.603] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[13:19:38.603] getGlobalsAndPackages() ...
[13:19:38.604] Searching for globals...
[13:19:38.604] - globals found: [2] ‘{’, ‘stop’
[13:19:38.605] Searching for globals ... DONE
[13:19:38.605] Resolving globals: FALSE
[13:19:38.605] 
[13:19:38.605] 
[13:19:38.605] getGlobalsAndPackages() ... DONE
[13:19:38.605] run() for ‘Future’ ...
[13:19:38.605] - state: ‘created’
[13:19:38.606] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.606] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.606] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.606]   - Field: ‘label’
[13:19:38.606]   - Field: ‘local’
[13:19:38.606]   - Field: ‘owner’
[13:19:38.606]   - Field: ‘envir’
[13:19:38.606]   - Field: ‘packages’
[13:19:38.606]   - Field: ‘gc’
[13:19:38.607]   - Field: ‘conditions’
[13:19:38.607]   - Field: ‘expr’
[13:19:38.607]   - Field: ‘uuid’
[13:19:38.608]   - Field: ‘seed’
[13:19:38.608]   - Field: ‘version’
[13:19:38.609]   - Field: ‘result’
[13:19:38.609]   - Field: ‘asynchronous’
[13:19:38.609]   - Field: ‘calls’
[13:19:38.609]   - Field: ‘globals’
[13:19:38.609]   - Field: ‘stdout’
[13:19:38.609]   - Field: ‘earlySignal’
[13:19:38.609]   - Field: ‘lazy’
[13:19:38.609]   - Field: ‘state’
[13:19:38.609] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.609] - Launch lazy future ...
[13:19:38.610] Packages needed by the future expression (n = 0): <none>
[13:19:38.610] Packages needed by future strategies (n = 0): <none>
[13:19:38.610] {
[13:19:38.610]     {
[13:19:38.610]         {
[13:19:38.610]             ...future.startTime <- base::Sys.time()
[13:19:38.610]             {
[13:19:38.610]                 {
[13:19:38.610]                   {
[13:19:38.610]                     base::local({
[13:19:38.610]                       has_future <- base::requireNamespace("future", 
[13:19:38.610]                         quietly = TRUE)
[13:19:38.610]                       if (has_future) {
[13:19:38.610]                         ns <- base::getNamespace("future")
[13:19:38.610]                         version <- ns[[".package"]][["version"]]
[13:19:38.610]                         if (is.null(version)) 
[13:19:38.610]                           version <- utils::packageVersion("future")
[13:19:38.610]                       }
[13:19:38.610]                       else {
[13:19:38.610]                         version <- NULL
[13:19:38.610]                       }
[13:19:38.610]                       if (!has_future || version < "1.8.0") {
[13:19:38.610]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.610]                           "", base::R.version$version.string), 
[13:19:38.610]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.610]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.610]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.610]                             "release", "version")], collapse = " "), 
[13:19:38.610]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.610]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.610]                           info)
[13:19:38.610]                         info <- base::paste(info, collapse = "; ")
[13:19:38.610]                         if (!has_future) {
[13:19:38.610]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.610]                             info)
[13:19:38.610]                         }
[13:19:38.610]                         else {
[13:19:38.610]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.610]                             info, version)
[13:19:38.610]                         }
[13:19:38.610]                         base::stop(msg)
[13:19:38.610]                       }
[13:19:38.610]                     })
[13:19:38.610]                   }
[13:19:38.610]                   options(future.plan = NULL)
[13:19:38.610]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.610]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.610]                 }
[13:19:38.610]                 ...future.workdir <- getwd()
[13:19:38.610]             }
[13:19:38.610]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.610]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.610]         }
[13:19:38.610]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.610]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.610]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.610]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.610]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.610]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.610]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.610]             base::names(...future.oldOptions))
[13:19:38.610]     }
[13:19:38.610]     if (FALSE) {
[13:19:38.610]     }
[13:19:38.610]     else {
[13:19:38.610]         if (TRUE) {
[13:19:38.610]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.610]                 open = "w")
[13:19:38.610]         }
[13:19:38.610]         else {
[13:19:38.610]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.610]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.610]         }
[13:19:38.610]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.610]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.610]             base::sink(type = "output", split = FALSE)
[13:19:38.610]             base::close(...future.stdout)
[13:19:38.610]         }, add = TRUE)
[13:19:38.610]     }
[13:19:38.610]     ...future.frame <- base::sys.nframe()
[13:19:38.610]     ...future.conditions <- base::list()
[13:19:38.610]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.610]     if (FALSE) {
[13:19:38.610]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.610]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.610]     }
[13:19:38.610]     ...future.result <- base::tryCatch({
[13:19:38.610]         base::withCallingHandlers({
[13:19:38.610]             ...future.value <- base::withVisible(base::local({
[13:19:38.610]                 42L
[13:19:38.610]                 stop("Woops")
[13:19:38.610]             }))
[13:19:38.610]             future::FutureResult(value = ...future.value$value, 
[13:19:38.610]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.610]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.610]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.610]                     ...future.globalenv.names))
[13:19:38.610]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.610]         }, condition = base::local({
[13:19:38.610]             c <- base::c
[13:19:38.610]             inherits <- base::inherits
[13:19:38.610]             invokeRestart <- base::invokeRestart
[13:19:38.610]             length <- base::length
[13:19:38.610]             list <- base::list
[13:19:38.610]             seq.int <- base::seq.int
[13:19:38.610]             signalCondition <- base::signalCondition
[13:19:38.610]             sys.calls <- base::sys.calls
[13:19:38.610]             `[[` <- base::`[[`
[13:19:38.610]             `+` <- base::`+`
[13:19:38.610]             `<<-` <- base::`<<-`
[13:19:38.610]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.610]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.610]                   3L)]
[13:19:38.610]             }
[13:19:38.610]             function(cond) {
[13:19:38.610]                 is_error <- inherits(cond, "error")
[13:19:38.610]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.610]                   NULL)
[13:19:38.610]                 if (is_error) {
[13:19:38.610]                   sessionInformation <- function() {
[13:19:38.610]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.610]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.610]                       search = base::search(), system = base::Sys.info())
[13:19:38.610]                   }
[13:19:38.610]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.610]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.610]                     cond$call), session = sessionInformation(), 
[13:19:38.610]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.610]                   signalCondition(cond)
[13:19:38.610]                 }
[13:19:38.610]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.610]                 "immediateCondition"))) {
[13:19:38.610]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.610]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.610]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.610]                   if (TRUE && !signal) {
[13:19:38.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.610]                     {
[13:19:38.610]                       inherits <- base::inherits
[13:19:38.610]                       invokeRestart <- base::invokeRestart
[13:19:38.610]                       is.null <- base::is.null
[13:19:38.610]                       muffled <- FALSE
[13:19:38.610]                       if (inherits(cond, "message")) {
[13:19:38.610]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.610]                         if (muffled) 
[13:19:38.610]                           invokeRestart("muffleMessage")
[13:19:38.610]                       }
[13:19:38.610]                       else if (inherits(cond, "warning")) {
[13:19:38.610]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.610]                         if (muffled) 
[13:19:38.610]                           invokeRestart("muffleWarning")
[13:19:38.610]                       }
[13:19:38.610]                       else if (inherits(cond, "condition")) {
[13:19:38.610]                         if (!is.null(pattern)) {
[13:19:38.610]                           computeRestarts <- base::computeRestarts
[13:19:38.610]                           grepl <- base::grepl
[13:19:38.610]                           restarts <- computeRestarts(cond)
[13:19:38.610]                           for (restart in restarts) {
[13:19:38.610]                             name <- restart$name
[13:19:38.610]                             if (is.null(name)) 
[13:19:38.610]                               next
[13:19:38.610]                             if (!grepl(pattern, name)) 
[13:19:38.610]                               next
[13:19:38.610]                             invokeRestart(restart)
[13:19:38.610]                             muffled <- TRUE
[13:19:38.610]                             break
[13:19:38.610]                           }
[13:19:38.610]                         }
[13:19:38.610]                       }
[13:19:38.610]                       invisible(muffled)
[13:19:38.610]                     }
[13:19:38.610]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.610]                   }
[13:19:38.610]                 }
[13:19:38.610]                 else {
[13:19:38.610]                   if (TRUE) {
[13:19:38.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.610]                     {
[13:19:38.610]                       inherits <- base::inherits
[13:19:38.610]                       invokeRestart <- base::invokeRestart
[13:19:38.610]                       is.null <- base::is.null
[13:19:38.610]                       muffled <- FALSE
[13:19:38.610]                       if (inherits(cond, "message")) {
[13:19:38.610]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.610]                         if (muffled) 
[13:19:38.610]                           invokeRestart("muffleMessage")
[13:19:38.610]                       }
[13:19:38.610]                       else if (inherits(cond, "warning")) {
[13:19:38.610]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.610]                         if (muffled) 
[13:19:38.610]                           invokeRestart("muffleWarning")
[13:19:38.610]                       }
[13:19:38.610]                       else if (inherits(cond, "condition")) {
[13:19:38.610]                         if (!is.null(pattern)) {
[13:19:38.610]                           computeRestarts <- base::computeRestarts
[13:19:38.610]                           grepl <- base::grepl
[13:19:38.610]                           restarts <- computeRestarts(cond)
[13:19:38.610]                           for (restart in restarts) {
[13:19:38.610]                             name <- restart$name
[13:19:38.610]                             if (is.null(name)) 
[13:19:38.610]                               next
[13:19:38.610]                             if (!grepl(pattern, name)) 
[13:19:38.610]                               next
[13:19:38.610]                             invokeRestart(restart)
[13:19:38.610]                             muffled <- TRUE
[13:19:38.610]                             break
[13:19:38.610]                           }
[13:19:38.610]                         }
[13:19:38.610]                       }
[13:19:38.610]                       invisible(muffled)
[13:19:38.610]                     }
[13:19:38.610]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.610]                   }
[13:19:38.610]                 }
[13:19:38.610]             }
[13:19:38.610]         }))
[13:19:38.610]     }, error = function(ex) {
[13:19:38.610]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.610]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.610]                 ...future.rng), started = ...future.startTime, 
[13:19:38.610]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.610]             version = "1.8"), class = "FutureResult")
[13:19:38.610]     }, finally = {
[13:19:38.610]         if (!identical(...future.workdir, getwd())) 
[13:19:38.610]             setwd(...future.workdir)
[13:19:38.610]         {
[13:19:38.610]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.610]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.610]             }
[13:19:38.610]             base::options(...future.oldOptions)
[13:19:38.610]             if (.Platform$OS.type == "windows") {
[13:19:38.610]                 old_names <- names(...future.oldEnvVars)
[13:19:38.610]                 envs <- base::Sys.getenv()
[13:19:38.610]                 names <- names(envs)
[13:19:38.610]                 common <- intersect(names, old_names)
[13:19:38.610]                 added <- setdiff(names, old_names)
[13:19:38.610]                 removed <- setdiff(old_names, names)
[13:19:38.610]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.610]                   envs[common]]
[13:19:38.610]                 NAMES <- toupper(changed)
[13:19:38.610]                 args <- list()
[13:19:38.610]                 for (kk in seq_along(NAMES)) {
[13:19:38.610]                   name <- changed[[kk]]
[13:19:38.610]                   NAME <- NAMES[[kk]]
[13:19:38.610]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.610]                     next
[13:19:38.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.610]                 }
[13:19:38.610]                 NAMES <- toupper(added)
[13:19:38.610]                 for (kk in seq_along(NAMES)) {
[13:19:38.610]                   name <- added[[kk]]
[13:19:38.610]                   NAME <- NAMES[[kk]]
[13:19:38.610]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.610]                     next
[13:19:38.610]                   args[[name]] <- ""
[13:19:38.610]                 }
[13:19:38.610]                 NAMES <- toupper(removed)
[13:19:38.610]                 for (kk in seq_along(NAMES)) {
[13:19:38.610]                   name <- removed[[kk]]
[13:19:38.610]                   NAME <- NAMES[[kk]]
[13:19:38.610]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.610]                     next
[13:19:38.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.610]                 }
[13:19:38.610]                 if (length(args) > 0) 
[13:19:38.610]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.610]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.610]             }
[13:19:38.610]             else {
[13:19:38.610]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.610]             }
[13:19:38.610]             {
[13:19:38.610]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.610]                   0L) {
[13:19:38.610]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.610]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.610]                   base::options(opts)
[13:19:38.610]                 }
[13:19:38.610]                 {
[13:19:38.610]                   {
[13:19:38.610]                     NULL
[13:19:38.610]                     RNGkind("Mersenne-Twister")
[13:19:38.610]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.610]                       inherits = FALSE)
[13:19:38.610]                   }
[13:19:38.610]                   options(future.plan = NULL)
[13:19:38.610]                   if (is.na(NA_character_)) 
[13:19:38.610]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.610]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.610]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.610]                   {
[13:19:38.610]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.610]                     if (!future$lazy) 
[13:19:38.610]                       future <- run(future)
[13:19:38.610]                     invisible(future)
[13:19:38.610]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.610]                 }
[13:19:38.610]             }
[13:19:38.610]         }
[13:19:38.610]     })
[13:19:38.610]     if (TRUE) {
[13:19:38.610]         base::sink(type = "output", split = FALSE)
[13:19:38.610]         if (TRUE) {
[13:19:38.610]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.610]         }
[13:19:38.610]         else {
[13:19:38.610]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.610]         }
[13:19:38.610]         base::close(...future.stdout)
[13:19:38.610]         ...future.stdout <- NULL
[13:19:38.610]     }
[13:19:38.610]     ...future.result$conditions <- ...future.conditions
[13:19:38.610]     ...future.result$finished <- base::Sys.time()
[13:19:38.610]     ...future.result
[13:19:38.610] }
[13:19:38.612] plan(): Setting new future strategy stack:
[13:19:38.612] List of future strategies:
[13:19:38.612] 1. sequential:
[13:19:38.612]    - args: function (..., envir = parent.frame())
[13:19:38.612]    - tweaked: FALSE
[13:19:38.612]    - call: NULL
[13:19:38.612] plan(): nbrOfWorkers() = 1
[13:19:38.613] plan(): Setting new future strategy stack:
[13:19:38.613] List of future strategies:
[13:19:38.613] 1. sequential:
[13:19:38.613]    - args: function (..., envir = parent.frame())
[13:19:38.613]    - tweaked: FALSE
[13:19:38.613]    - call: future::plan("sequential")
[13:19:38.614] plan(): nbrOfWorkers() = 1
[13:19:38.614] SequentialFuture started (and completed)
[13:19:38.614] signalConditions() ...
[13:19:38.614]  - include = ‘immediateCondition’
[13:19:38.614]  - exclude = 
[13:19:38.614]  - resignal = FALSE
[13:19:38.614]  - Number of conditions: 1
[13:19:38.614] signalConditions() ... done
[13:19:38.615] - Launch lazy future ... done
[13:19:38.615] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[13:19:38.615] resolve() on list ...
[13:19:38.615]  recursive: 0
[13:19:38.616]  length: 2
[13:19:38.616] 
[13:19:38.616] resolved() for ‘SequentialFuture’ ...
[13:19:38.616] - state: ‘finished’
[13:19:38.616] - run: TRUE
[13:19:38.616] - result: ‘FutureResult’
[13:19:38.616] resolved() for ‘SequentialFuture’ ... done
[13:19:38.616] Future #1
[13:19:38.616] signalConditions() ...
[13:19:38.616]  - include = ‘immediateCondition’
[13:19:38.616]  - exclude = 
[13:19:38.617]  - resignal = FALSE
[13:19:38.617]  - Number of conditions: 1
[13:19:38.617] signalConditions() ... done
[13:19:38.617] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:19:38.617] - nx: 2
[13:19:38.617] - relay: TRUE
[13:19:38.617] - stdout: TRUE
[13:19:38.617] - signal: FALSE
[13:19:38.617] - resignal: FALSE
[13:19:38.617] - force: TRUE
[13:19:38.617] - relayed: [n=2] FALSE, FALSE
[13:19:38.618] - queued futures: [n=2] FALSE, FALSE
[13:19:38.618]  - until=1
[13:19:38.618]  - relaying element #1
[13:19:38.618] signalConditions() ...
[13:19:38.618]  - include = ‘immediateCondition’
[13:19:38.618]  - exclude = 
[13:19:38.618]  - resignal = FALSE
[13:19:38.618]  - Number of conditions: 1
[13:19:38.618] signalConditions() ... done
[13:19:38.618] - relayed: [n=2] TRUE, FALSE
[13:19:38.619] - queued futures: [n=2] TRUE, FALSE
[13:19:38.619] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:19:38.619]  length: 1 (resolved future 1)
[13:19:38.619] resolved() for ‘SequentialFuture’ ...
[13:19:38.619] - state: ‘finished’
[13:19:38.619] - run: TRUE
[13:19:38.619] - result: ‘FutureResult’
[13:19:38.619] resolved() for ‘SequentialFuture’ ... done
[13:19:38.619] Future #2
[13:19:38.620] signalConditions() ...
[13:19:38.620]  - include = ‘immediateCondition’
[13:19:38.620]  - exclude = 
[13:19:38.620]  - resignal = FALSE
[13:19:38.620]  - Number of conditions: 1
[13:19:38.620] signalConditions() ... done
[13:19:38.620] signalConditionsASAP(SequentialFuture, pos=2) ...
[13:19:38.620] - nx: 2
[13:19:38.620] - relay: TRUE
[13:19:38.620] - stdout: TRUE
[13:19:38.620] - signal: FALSE
[13:19:38.621] - resignal: FALSE
[13:19:38.621] - force: TRUE
[13:19:38.621] - relayed: [n=2] TRUE, FALSE
[13:19:38.621] - queued futures: [n=2] TRUE, FALSE
[13:19:38.621]  - until=2
[13:19:38.621]  - relaying element #2
[13:19:38.621] signalConditions() ...
[13:19:38.621]  - include = ‘immediateCondition’
[13:19:38.621]  - exclude = 
[13:19:38.621]  - resignal = FALSE
[13:19:38.621]  - Number of conditions: 1
[13:19:38.622] signalConditions() ... done
[13:19:38.622] - relayed: [n=2] TRUE, TRUE
[13:19:38.622] - queued futures: [n=2] TRUE, TRUE
[13:19:38.622] signalConditionsASAP(SequentialFuture, pos=2) ... done
[13:19:38.622]  length: 0 (resolved future 2)
[13:19:38.622] Relaying remaining futures
[13:19:38.622] signalConditionsASAP(NULL, pos=0) ...
[13:19:38.622] - nx: 2
[13:19:38.622] - relay: TRUE
[13:19:38.622] - stdout: TRUE
[13:19:38.622] - signal: FALSE
[13:19:38.623] - resignal: FALSE
[13:19:38.623] - force: TRUE
[13:19:38.623] - relayed: [n=2] TRUE, TRUE
[13:19:38.623] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:19:38.623] - relayed: [n=2] TRUE, TRUE
[13:19:38.623] - queued futures: [n=2] TRUE, TRUE
[13:19:38.623] signalConditionsASAP(NULL, pos=0) ... done
[13:19:38.623] resolve() on list ... DONE
[13:19:38.623] signalConditions() ...
[13:19:38.623]  - include = ‘immediateCondition’
[13:19:38.624]  - exclude = 
[13:19:38.624]  - resignal = FALSE
[13:19:38.624]  - Number of conditions: 1
[13:19:38.624] signalConditions() ... done
[13:19:38.624] signalConditions() ...
[13:19:38.624]  - include = ‘immediateCondition’
[13:19:38.624]  - exclude = 
[13:19:38.624]  - resignal = FALSE
[13:19:38.624]  - Number of conditions: 1
[13:19:38.624] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[13:19:38.625] resolved() for ‘SequentialFuture’ ...
[13:19:38.625] - state: ‘finished’
[13:19:38.625] - run: TRUE
[13:19:38.625] - result: ‘FutureResult’
[13:19:38.625] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[13:19:38.626] getGlobalsAndPackages() ...
[13:19:38.626] Searching for globals...
[13:19:38.626] 
[13:19:38.626] Searching for globals ... DONE
[13:19:38.626] - globals: [0] <none>
[13:19:38.626] getGlobalsAndPackages() ... DONE
[13:19:38.627] run() for ‘Future’ ...
[13:19:38.627] - state: ‘created’
[13:19:38.627] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.627] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.627] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.627]   - Field: ‘label’
[13:19:38.627]   - Field: ‘local’
[13:19:38.627]   - Field: ‘owner’
[13:19:38.628]   - Field: ‘envir’
[13:19:38.628]   - Field: ‘packages’
[13:19:38.628]   - Field: ‘gc’
[13:19:38.628]   - Field: ‘conditions’
[13:19:38.628]   - Field: ‘expr’
[13:19:38.628]   - Field: ‘uuid’
[13:19:38.628]   - Field: ‘seed’
[13:19:38.628]   - Field: ‘version’
[13:19:38.628]   - Field: ‘result’
[13:19:38.628]   - Field: ‘asynchronous’
[13:19:38.628]   - Field: ‘calls’
[13:19:38.629]   - Field: ‘globals’
[13:19:38.629]   - Field: ‘stdout’
[13:19:38.629]   - Field: ‘earlySignal’
[13:19:38.629]   - Field: ‘lazy’
[13:19:38.629]   - Field: ‘state’
[13:19:38.629] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.629] - Launch lazy future ...
[13:19:38.629] Packages needed by the future expression (n = 0): <none>
[13:19:38.629] Packages needed by future strategies (n = 0): <none>
[13:19:38.630] {
[13:19:38.630]     {
[13:19:38.630]         {
[13:19:38.630]             ...future.startTime <- base::Sys.time()
[13:19:38.630]             {
[13:19:38.630]                 {
[13:19:38.630]                   {
[13:19:38.630]                     base::local({
[13:19:38.630]                       has_future <- base::requireNamespace("future", 
[13:19:38.630]                         quietly = TRUE)
[13:19:38.630]                       if (has_future) {
[13:19:38.630]                         ns <- base::getNamespace("future")
[13:19:38.630]                         version <- ns[[".package"]][["version"]]
[13:19:38.630]                         if (is.null(version)) 
[13:19:38.630]                           version <- utils::packageVersion("future")
[13:19:38.630]                       }
[13:19:38.630]                       else {
[13:19:38.630]                         version <- NULL
[13:19:38.630]                       }
[13:19:38.630]                       if (!has_future || version < "1.8.0") {
[13:19:38.630]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.630]                           "", base::R.version$version.string), 
[13:19:38.630]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.630]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.630]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.630]                             "release", "version")], collapse = " "), 
[13:19:38.630]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.630]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.630]                           info)
[13:19:38.630]                         info <- base::paste(info, collapse = "; ")
[13:19:38.630]                         if (!has_future) {
[13:19:38.630]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.630]                             info)
[13:19:38.630]                         }
[13:19:38.630]                         else {
[13:19:38.630]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.630]                             info, version)
[13:19:38.630]                         }
[13:19:38.630]                         base::stop(msg)
[13:19:38.630]                       }
[13:19:38.630]                     })
[13:19:38.630]                   }
[13:19:38.630]                   options(future.plan = NULL)
[13:19:38.630]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.630]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.630]                 }
[13:19:38.630]                 ...future.workdir <- getwd()
[13:19:38.630]             }
[13:19:38.630]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.630]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.630]         }
[13:19:38.630]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.630]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.630]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.630]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.630]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.630]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.630]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.630]             base::names(...future.oldOptions))
[13:19:38.630]     }
[13:19:38.630]     if (FALSE) {
[13:19:38.630]     }
[13:19:38.630]     else {
[13:19:38.630]         if (TRUE) {
[13:19:38.630]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.630]                 open = "w")
[13:19:38.630]         }
[13:19:38.630]         else {
[13:19:38.630]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.630]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.630]         }
[13:19:38.630]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.630]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.630]             base::sink(type = "output", split = FALSE)
[13:19:38.630]             base::close(...future.stdout)
[13:19:38.630]         }, add = TRUE)
[13:19:38.630]     }
[13:19:38.630]     ...future.frame <- base::sys.nframe()
[13:19:38.630]     ...future.conditions <- base::list()
[13:19:38.630]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.630]     if (FALSE) {
[13:19:38.630]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.630]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.630]     }
[13:19:38.630]     ...future.result <- base::tryCatch({
[13:19:38.630]         base::withCallingHandlers({
[13:19:38.630]             ...future.value <- base::withVisible(base::local(42L))
[13:19:38.630]             future::FutureResult(value = ...future.value$value, 
[13:19:38.630]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.630]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.630]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.630]                     ...future.globalenv.names))
[13:19:38.630]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.630]         }, condition = base::local({
[13:19:38.630]             c <- base::c
[13:19:38.630]             inherits <- base::inherits
[13:19:38.630]             invokeRestart <- base::invokeRestart
[13:19:38.630]             length <- base::length
[13:19:38.630]             list <- base::list
[13:19:38.630]             seq.int <- base::seq.int
[13:19:38.630]             signalCondition <- base::signalCondition
[13:19:38.630]             sys.calls <- base::sys.calls
[13:19:38.630]             `[[` <- base::`[[`
[13:19:38.630]             `+` <- base::`+`
[13:19:38.630]             `<<-` <- base::`<<-`
[13:19:38.630]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.630]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.630]                   3L)]
[13:19:38.630]             }
[13:19:38.630]             function(cond) {
[13:19:38.630]                 is_error <- inherits(cond, "error")
[13:19:38.630]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.630]                   NULL)
[13:19:38.630]                 if (is_error) {
[13:19:38.630]                   sessionInformation <- function() {
[13:19:38.630]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.630]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.630]                       search = base::search(), system = base::Sys.info())
[13:19:38.630]                   }
[13:19:38.630]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.630]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.630]                     cond$call), session = sessionInformation(), 
[13:19:38.630]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.630]                   signalCondition(cond)
[13:19:38.630]                 }
[13:19:38.630]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.630]                 "immediateCondition"))) {
[13:19:38.630]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.630]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.630]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.630]                   if (TRUE && !signal) {
[13:19:38.630]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.630]                     {
[13:19:38.630]                       inherits <- base::inherits
[13:19:38.630]                       invokeRestart <- base::invokeRestart
[13:19:38.630]                       is.null <- base::is.null
[13:19:38.630]                       muffled <- FALSE
[13:19:38.630]                       if (inherits(cond, "message")) {
[13:19:38.630]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.630]                         if (muffled) 
[13:19:38.630]                           invokeRestart("muffleMessage")
[13:19:38.630]                       }
[13:19:38.630]                       else if (inherits(cond, "warning")) {
[13:19:38.630]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.630]                         if (muffled) 
[13:19:38.630]                           invokeRestart("muffleWarning")
[13:19:38.630]                       }
[13:19:38.630]                       else if (inherits(cond, "condition")) {
[13:19:38.630]                         if (!is.null(pattern)) {
[13:19:38.630]                           computeRestarts <- base::computeRestarts
[13:19:38.630]                           grepl <- base::grepl
[13:19:38.630]                           restarts <- computeRestarts(cond)
[13:19:38.630]                           for (restart in restarts) {
[13:19:38.630]                             name <- restart$name
[13:19:38.630]                             if (is.null(name)) 
[13:19:38.630]                               next
[13:19:38.630]                             if (!grepl(pattern, name)) 
[13:19:38.630]                               next
[13:19:38.630]                             invokeRestart(restart)
[13:19:38.630]                             muffled <- TRUE
[13:19:38.630]                             break
[13:19:38.630]                           }
[13:19:38.630]                         }
[13:19:38.630]                       }
[13:19:38.630]                       invisible(muffled)
[13:19:38.630]                     }
[13:19:38.630]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.630]                   }
[13:19:38.630]                 }
[13:19:38.630]                 else {
[13:19:38.630]                   if (TRUE) {
[13:19:38.630]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.630]                     {
[13:19:38.630]                       inherits <- base::inherits
[13:19:38.630]                       invokeRestart <- base::invokeRestart
[13:19:38.630]                       is.null <- base::is.null
[13:19:38.630]                       muffled <- FALSE
[13:19:38.630]                       if (inherits(cond, "message")) {
[13:19:38.630]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.630]                         if (muffled) 
[13:19:38.630]                           invokeRestart("muffleMessage")
[13:19:38.630]                       }
[13:19:38.630]                       else if (inherits(cond, "warning")) {
[13:19:38.630]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.630]                         if (muffled) 
[13:19:38.630]                           invokeRestart("muffleWarning")
[13:19:38.630]                       }
[13:19:38.630]                       else if (inherits(cond, "condition")) {
[13:19:38.630]                         if (!is.null(pattern)) {
[13:19:38.630]                           computeRestarts <- base::computeRestarts
[13:19:38.630]                           grepl <- base::grepl
[13:19:38.630]                           restarts <- computeRestarts(cond)
[13:19:38.630]                           for (restart in restarts) {
[13:19:38.630]                             name <- restart$name
[13:19:38.630]                             if (is.null(name)) 
[13:19:38.630]                               next
[13:19:38.630]                             if (!grepl(pattern, name)) 
[13:19:38.630]                               next
[13:19:38.630]                             invokeRestart(restart)
[13:19:38.630]                             muffled <- TRUE
[13:19:38.630]                             break
[13:19:38.630]                           }
[13:19:38.630]                         }
[13:19:38.630]                       }
[13:19:38.630]                       invisible(muffled)
[13:19:38.630]                     }
[13:19:38.630]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.630]                   }
[13:19:38.630]                 }
[13:19:38.630]             }
[13:19:38.630]         }))
[13:19:38.630]     }, error = function(ex) {
[13:19:38.630]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.630]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.630]                 ...future.rng), started = ...future.startTime, 
[13:19:38.630]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.630]             version = "1.8"), class = "FutureResult")
[13:19:38.630]     }, finally = {
[13:19:38.630]         if (!identical(...future.workdir, getwd())) 
[13:19:38.630]             setwd(...future.workdir)
[13:19:38.630]         {
[13:19:38.630]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.630]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.630]             }
[13:19:38.630]             base::options(...future.oldOptions)
[13:19:38.630]             if (.Platform$OS.type == "windows") {
[13:19:38.630]                 old_names <- names(...future.oldEnvVars)
[13:19:38.630]                 envs <- base::Sys.getenv()
[13:19:38.630]                 names <- names(envs)
[13:19:38.630]                 common <- intersect(names, old_names)
[13:19:38.630]                 added <- setdiff(names, old_names)
[13:19:38.630]                 removed <- setdiff(old_names, names)
[13:19:38.630]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.630]                   envs[common]]
[13:19:38.630]                 NAMES <- toupper(changed)
[13:19:38.630]                 args <- list()
[13:19:38.630]                 for (kk in seq_along(NAMES)) {
[13:19:38.630]                   name <- changed[[kk]]
[13:19:38.630]                   NAME <- NAMES[[kk]]
[13:19:38.630]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.630]                     next
[13:19:38.630]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.630]                 }
[13:19:38.630]                 NAMES <- toupper(added)
[13:19:38.630]                 for (kk in seq_along(NAMES)) {
[13:19:38.630]                   name <- added[[kk]]
[13:19:38.630]                   NAME <- NAMES[[kk]]
[13:19:38.630]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.630]                     next
[13:19:38.630]                   args[[name]] <- ""
[13:19:38.630]                 }
[13:19:38.630]                 NAMES <- toupper(removed)
[13:19:38.630]                 for (kk in seq_along(NAMES)) {
[13:19:38.630]                   name <- removed[[kk]]
[13:19:38.630]                   NAME <- NAMES[[kk]]
[13:19:38.630]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.630]                     next
[13:19:38.630]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.630]                 }
[13:19:38.630]                 if (length(args) > 0) 
[13:19:38.630]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.630]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.630]             }
[13:19:38.630]             else {
[13:19:38.630]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.630]             }
[13:19:38.630]             {
[13:19:38.630]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.630]                   0L) {
[13:19:38.630]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.630]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.630]                   base::options(opts)
[13:19:38.630]                 }
[13:19:38.630]                 {
[13:19:38.630]                   {
[13:19:38.630]                     NULL
[13:19:38.630]                     RNGkind("Mersenne-Twister")
[13:19:38.630]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.630]                       inherits = FALSE)
[13:19:38.630]                   }
[13:19:38.630]                   options(future.plan = NULL)
[13:19:38.630]                   if (is.na(NA_character_)) 
[13:19:38.630]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.630]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.630]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.630]                   {
[13:19:38.630]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.630]                     if (!future$lazy) 
[13:19:38.630]                       future <- run(future)
[13:19:38.630]                     invisible(future)
[13:19:38.630]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.630]                 }
[13:19:38.630]             }
[13:19:38.630]         }
[13:19:38.630]     })
[13:19:38.630]     if (TRUE) {
[13:19:38.630]         base::sink(type = "output", split = FALSE)
[13:19:38.630]         if (TRUE) {
[13:19:38.630]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.630]         }
[13:19:38.630]         else {
[13:19:38.630]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.630]         }
[13:19:38.630]         base::close(...future.stdout)
[13:19:38.630]         ...future.stdout <- NULL
[13:19:38.630]     }
[13:19:38.630]     ...future.result$conditions <- ...future.conditions
[13:19:38.630]     ...future.result$finished <- base::Sys.time()
[13:19:38.630]     ...future.result
[13:19:38.630] }
[13:19:38.632] plan(): Setting new future strategy stack:
[13:19:38.632] List of future strategies:
[13:19:38.632] 1. sequential:
[13:19:38.632]    - args: function (..., envir = parent.frame())
[13:19:38.632]    - tweaked: FALSE
[13:19:38.632]    - call: NULL
[13:19:38.632] plan(): nbrOfWorkers() = 1
[13:19:38.633] plan(): Setting new future strategy stack:
[13:19:38.633] List of future strategies:
[13:19:38.633] 1. sequential:
[13:19:38.633]    - args: function (..., envir = parent.frame())
[13:19:38.633]    - tweaked: FALSE
[13:19:38.633]    - call: future::plan("sequential")
[13:19:38.634] plan(): nbrOfWorkers() = 1
[13:19:38.634] SequentialFuture started (and completed)
[13:19:38.634] - Launch lazy future ... done
[13:19:38.634] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[13:19:38.635] resolved() for ‘SequentialFuture’ ...
[13:19:38.635] - state: ‘finished’
[13:19:38.635] - run: TRUE
[13:19:38.635] - result: ‘FutureResult’
[13:19:38.635] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[13:19:38.636] getGlobalsAndPackages() ...
[13:19:38.636] Searching for globals...
[13:19:38.637] - globals found: [2] ‘{’, ‘stop’
[13:19:38.637] Searching for globals ... DONE
[13:19:38.637] Resolving globals: FALSE
[13:19:38.637] 
[13:19:38.638] 
[13:19:38.638] getGlobalsAndPackages() ... DONE
[13:19:38.638] run() for ‘Future’ ...
[13:19:38.638] - state: ‘created’
[13:19:38.638] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:19:38.638] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:19:38.638] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:19:38.639]   - Field: ‘label’
[13:19:38.639]   - Field: ‘local’
[13:19:38.639]   - Field: ‘owner’
[13:19:38.639]   - Field: ‘envir’
[13:19:38.639]   - Field: ‘packages’
[13:19:38.639]   - Field: ‘gc’
[13:19:38.639]   - Field: ‘conditions’
[13:19:38.639]   - Field: ‘expr’
[13:19:38.641]   - Field: ‘uuid’
[13:19:38.641]   - Field: ‘seed’
[13:19:38.641]   - Field: ‘version’
[13:19:38.641]   - Field: ‘result’
[13:19:38.641]   - Field: ‘asynchronous’
[13:19:38.642]   - Field: ‘calls’
[13:19:38.642]   - Field: ‘globals’
[13:19:38.642]   - Field: ‘stdout’
[13:19:38.642]   - Field: ‘earlySignal’
[13:19:38.642]   - Field: ‘lazy’
[13:19:38.642]   - Field: ‘state’
[13:19:38.642] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:19:38.642] - Launch lazy future ...
[13:19:38.642] Packages needed by the future expression (n = 0): <none>
[13:19:38.643] Packages needed by future strategies (n = 0): <none>
[13:19:38.643] {
[13:19:38.643]     {
[13:19:38.643]         {
[13:19:38.643]             ...future.startTime <- base::Sys.time()
[13:19:38.643]             {
[13:19:38.643]                 {
[13:19:38.643]                   {
[13:19:38.643]                     base::local({
[13:19:38.643]                       has_future <- base::requireNamespace("future", 
[13:19:38.643]                         quietly = TRUE)
[13:19:38.643]                       if (has_future) {
[13:19:38.643]                         ns <- base::getNamespace("future")
[13:19:38.643]                         version <- ns[[".package"]][["version"]]
[13:19:38.643]                         if (is.null(version)) 
[13:19:38.643]                           version <- utils::packageVersion("future")
[13:19:38.643]                       }
[13:19:38.643]                       else {
[13:19:38.643]                         version <- NULL
[13:19:38.643]                       }
[13:19:38.643]                       if (!has_future || version < "1.8.0") {
[13:19:38.643]                         info <- base::c(r_version = base::gsub("R version ", 
[13:19:38.643]                           "", base::R.version$version.string), 
[13:19:38.643]                           platform = base::sprintf("%s (%s-bit)", 
[13:19:38.643]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:38.643]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:38.643]                             "release", "version")], collapse = " "), 
[13:19:38.643]                           hostname = base::Sys.info()[["nodename"]])
[13:19:38.643]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:19:38.643]                           info)
[13:19:38.643]                         info <- base::paste(info, collapse = "; ")
[13:19:38.643]                         if (!has_future) {
[13:19:38.643]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:38.643]                             info)
[13:19:38.643]                         }
[13:19:38.643]                         else {
[13:19:38.643]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:38.643]                             info, version)
[13:19:38.643]                         }
[13:19:38.643]                         base::stop(msg)
[13:19:38.643]                       }
[13:19:38.643]                     })
[13:19:38.643]                   }
[13:19:38.643]                   options(future.plan = NULL)
[13:19:38.643]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.643]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:38.643]                 }
[13:19:38.643]                 ...future.workdir <- getwd()
[13:19:38.643]             }
[13:19:38.643]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:38.643]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:38.643]         }
[13:19:38.643]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:38.643]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:38.643]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:38.643]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:38.643]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:38.643]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:38.643]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:38.643]             base::names(...future.oldOptions))
[13:19:38.643]     }
[13:19:38.643]     if (FALSE) {
[13:19:38.643]     }
[13:19:38.643]     else {
[13:19:38.643]         if (TRUE) {
[13:19:38.643]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:38.643]                 open = "w")
[13:19:38.643]         }
[13:19:38.643]         else {
[13:19:38.643]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:38.643]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:38.643]         }
[13:19:38.643]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:38.643]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:38.643]             base::sink(type = "output", split = FALSE)
[13:19:38.643]             base::close(...future.stdout)
[13:19:38.643]         }, add = TRUE)
[13:19:38.643]     }
[13:19:38.643]     ...future.frame <- base::sys.nframe()
[13:19:38.643]     ...future.conditions <- base::list()
[13:19:38.643]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:38.643]     if (FALSE) {
[13:19:38.643]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:38.643]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:38.643]     }
[13:19:38.643]     ...future.result <- base::tryCatch({
[13:19:38.643]         base::withCallingHandlers({
[13:19:38.643]             ...future.value <- base::withVisible(base::local({
[13:19:38.643]                 42L
[13:19:38.643]                 stop("Woops")
[13:19:38.643]             }))
[13:19:38.643]             future::FutureResult(value = ...future.value$value, 
[13:19:38.643]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.643]                   ...future.rng), globalenv = if (FALSE) 
[13:19:38.643]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:38.643]                     ...future.globalenv.names))
[13:19:38.643]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:38.643]         }, condition = base::local({
[13:19:38.643]             c <- base::c
[13:19:38.643]             inherits <- base::inherits
[13:19:38.643]             invokeRestart <- base::invokeRestart
[13:19:38.643]             length <- base::length
[13:19:38.643]             list <- base::list
[13:19:38.643]             seq.int <- base::seq.int
[13:19:38.643]             signalCondition <- base::signalCondition
[13:19:38.643]             sys.calls <- base::sys.calls
[13:19:38.643]             `[[` <- base::`[[`
[13:19:38.643]             `+` <- base::`+`
[13:19:38.643]             `<<-` <- base::`<<-`
[13:19:38.643]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:38.643]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:38.643]                   3L)]
[13:19:38.643]             }
[13:19:38.643]             function(cond) {
[13:19:38.643]                 is_error <- inherits(cond, "error")
[13:19:38.643]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:38.643]                   NULL)
[13:19:38.643]                 if (is_error) {
[13:19:38.643]                   sessionInformation <- function() {
[13:19:38.643]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:38.643]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:38.643]                       search = base::search(), system = base::Sys.info())
[13:19:38.643]                   }
[13:19:38.643]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.643]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:38.643]                     cond$call), session = sessionInformation(), 
[13:19:38.643]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:38.643]                   signalCondition(cond)
[13:19:38.643]                 }
[13:19:38.643]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:38.643]                 "immediateCondition"))) {
[13:19:38.643]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:38.643]                   ...future.conditions[[length(...future.conditions) + 
[13:19:38.643]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:38.643]                   if (TRUE && !signal) {
[13:19:38.643]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.643]                     {
[13:19:38.643]                       inherits <- base::inherits
[13:19:38.643]                       invokeRestart <- base::invokeRestart
[13:19:38.643]                       is.null <- base::is.null
[13:19:38.643]                       muffled <- FALSE
[13:19:38.643]                       if (inherits(cond, "message")) {
[13:19:38.643]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.643]                         if (muffled) 
[13:19:38.643]                           invokeRestart("muffleMessage")
[13:19:38.643]                       }
[13:19:38.643]                       else if (inherits(cond, "warning")) {
[13:19:38.643]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.643]                         if (muffled) 
[13:19:38.643]                           invokeRestart("muffleWarning")
[13:19:38.643]                       }
[13:19:38.643]                       else if (inherits(cond, "condition")) {
[13:19:38.643]                         if (!is.null(pattern)) {
[13:19:38.643]                           computeRestarts <- base::computeRestarts
[13:19:38.643]                           grepl <- base::grepl
[13:19:38.643]                           restarts <- computeRestarts(cond)
[13:19:38.643]                           for (restart in restarts) {
[13:19:38.643]                             name <- restart$name
[13:19:38.643]                             if (is.null(name)) 
[13:19:38.643]                               next
[13:19:38.643]                             if (!grepl(pattern, name)) 
[13:19:38.643]                               next
[13:19:38.643]                             invokeRestart(restart)
[13:19:38.643]                             muffled <- TRUE
[13:19:38.643]                             break
[13:19:38.643]                           }
[13:19:38.643]                         }
[13:19:38.643]                       }
[13:19:38.643]                       invisible(muffled)
[13:19:38.643]                     }
[13:19:38.643]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.643]                   }
[13:19:38.643]                 }
[13:19:38.643]                 else {
[13:19:38.643]                   if (TRUE) {
[13:19:38.643]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:38.643]                     {
[13:19:38.643]                       inherits <- base::inherits
[13:19:38.643]                       invokeRestart <- base::invokeRestart
[13:19:38.643]                       is.null <- base::is.null
[13:19:38.643]                       muffled <- FALSE
[13:19:38.643]                       if (inherits(cond, "message")) {
[13:19:38.643]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:38.643]                         if (muffled) 
[13:19:38.643]                           invokeRestart("muffleMessage")
[13:19:38.643]                       }
[13:19:38.643]                       else if (inherits(cond, "warning")) {
[13:19:38.643]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:38.643]                         if (muffled) 
[13:19:38.643]                           invokeRestart("muffleWarning")
[13:19:38.643]                       }
[13:19:38.643]                       else if (inherits(cond, "condition")) {
[13:19:38.643]                         if (!is.null(pattern)) {
[13:19:38.643]                           computeRestarts <- base::computeRestarts
[13:19:38.643]                           grepl <- base::grepl
[13:19:38.643]                           restarts <- computeRestarts(cond)
[13:19:38.643]                           for (restart in restarts) {
[13:19:38.643]                             name <- restart$name
[13:19:38.643]                             if (is.null(name)) 
[13:19:38.643]                               next
[13:19:38.643]                             if (!grepl(pattern, name)) 
[13:19:38.643]                               next
[13:19:38.643]                             invokeRestart(restart)
[13:19:38.643]                             muffled <- TRUE
[13:19:38.643]                             break
[13:19:38.643]                           }
[13:19:38.643]                         }
[13:19:38.643]                       }
[13:19:38.643]                       invisible(muffled)
[13:19:38.643]                     }
[13:19:38.643]                     muffleCondition(cond, pattern = "^muffle")
[13:19:38.643]                   }
[13:19:38.643]                 }
[13:19:38.643]             }
[13:19:38.643]         }))
[13:19:38.643]     }, error = function(ex) {
[13:19:38.643]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:38.643]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:38.643]                 ...future.rng), started = ...future.startTime, 
[13:19:38.643]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:38.643]             version = "1.8"), class = "FutureResult")
[13:19:38.643]     }, finally = {
[13:19:38.643]         if (!identical(...future.workdir, getwd())) 
[13:19:38.643]             setwd(...future.workdir)
[13:19:38.643]         {
[13:19:38.643]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:38.643]                 ...future.oldOptions$nwarnings <- NULL
[13:19:38.643]             }
[13:19:38.643]             base::options(...future.oldOptions)
[13:19:38.643]             if (.Platform$OS.type == "windows") {
[13:19:38.643]                 old_names <- names(...future.oldEnvVars)
[13:19:38.643]                 envs <- base::Sys.getenv()
[13:19:38.643]                 names <- names(envs)
[13:19:38.643]                 common <- intersect(names, old_names)
[13:19:38.643]                 added <- setdiff(names, old_names)
[13:19:38.643]                 removed <- setdiff(old_names, names)
[13:19:38.643]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:38.643]                   envs[common]]
[13:19:38.643]                 NAMES <- toupper(changed)
[13:19:38.643]                 args <- list()
[13:19:38.643]                 for (kk in seq_along(NAMES)) {
[13:19:38.643]                   name <- changed[[kk]]
[13:19:38.643]                   NAME <- NAMES[[kk]]
[13:19:38.643]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.643]                     next
[13:19:38.643]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.643]                 }
[13:19:38.643]                 NAMES <- toupper(added)
[13:19:38.643]                 for (kk in seq_along(NAMES)) {
[13:19:38.643]                   name <- added[[kk]]
[13:19:38.643]                   NAME <- NAMES[[kk]]
[13:19:38.643]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.643]                     next
[13:19:38.643]                   args[[name]] <- ""
[13:19:38.643]                 }
[13:19:38.643]                 NAMES <- toupper(removed)
[13:19:38.643]                 for (kk in seq_along(NAMES)) {
[13:19:38.643]                   name <- removed[[kk]]
[13:19:38.643]                   NAME <- NAMES[[kk]]
[13:19:38.643]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:38.643]                     next
[13:19:38.643]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:38.643]                 }
[13:19:38.643]                 if (length(args) > 0) 
[13:19:38.643]                   base::do.call(base::Sys.setenv, args = args)
[13:19:38.643]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:38.643]             }
[13:19:38.643]             else {
[13:19:38.643]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:38.643]             }
[13:19:38.643]             {
[13:19:38.643]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:38.643]                   0L) {
[13:19:38.643]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:38.643]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:38.643]                   base::options(opts)
[13:19:38.643]                 }
[13:19:38.643]                 {
[13:19:38.643]                   {
[13:19:38.643]                     NULL
[13:19:38.643]                     RNGkind("Mersenne-Twister")
[13:19:38.643]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:19:38.643]                       inherits = FALSE)
[13:19:38.643]                   }
[13:19:38.643]                   options(future.plan = NULL)
[13:19:38.643]                   if (is.na(NA_character_)) 
[13:19:38.643]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:38.643]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:38.643]                   future::plan(list(function (..., envir = parent.frame()) 
[13:19:38.643]                   {
[13:19:38.643]                     future <- SequentialFuture(..., envir = envir)
[13:19:38.643]                     if (!future$lazy) 
[13:19:38.643]                       future <- run(future)
[13:19:38.643]                     invisible(future)
[13:19:38.643]                   }), .cleanup = FALSE, .init = FALSE)
[13:19:38.643]                 }
[13:19:38.643]             }
[13:19:38.643]         }
[13:19:38.643]     })
[13:19:38.643]     if (TRUE) {
[13:19:38.643]         base::sink(type = "output", split = FALSE)
[13:19:38.643]         if (TRUE) {
[13:19:38.643]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:38.643]         }
[13:19:38.643]         else {
[13:19:38.643]             ...future.result["stdout"] <- base::list(NULL)
[13:19:38.643]         }
[13:19:38.643]         base::close(...future.stdout)
[13:19:38.643]         ...future.stdout <- NULL
[13:19:38.643]     }
[13:19:38.643]     ...future.result$conditions <- ...future.conditions
[13:19:38.643]     ...future.result$finished <- base::Sys.time()
[13:19:38.643]     ...future.result
[13:19:38.643] }
[13:19:38.645] plan(): Setting new future strategy stack:
[13:19:38.645] List of future strategies:
[13:19:38.645] 1. sequential:
[13:19:38.645]    - args: function (..., envir = parent.frame())
[13:19:38.645]    - tweaked: FALSE
[13:19:38.645]    - call: NULL
[13:19:38.645] plan(): nbrOfWorkers() = 1
[13:19:38.646] plan(): Setting new future strategy stack:
[13:19:38.646] List of future strategies:
[13:19:38.646] 1. sequential:
[13:19:38.646]    - args: function (..., envir = parent.frame())
[13:19:38.646]    - tweaked: FALSE
[13:19:38.646]    - call: future::plan("sequential")
[13:19:38.647] plan(): nbrOfWorkers() = 1
[13:19:38.647] SequentialFuture started (and completed)
[13:19:38.647] signalConditions() ...
[13:19:38.647]  - include = ‘immediateCondition’
[13:19:38.647]  - exclude = 
[13:19:38.647]  - resignal = FALSE
[13:19:38.647]  - Number of conditions: 1
[13:19:38.647] signalConditions() ... done
[13:19:38.648] - Launch lazy future ... done
[13:19:38.648] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:19:38.648] signalConditions() ...
[13:19:38.648]  - include = ‘immediateCondition’
[13:19:38.648]  - exclude = 
[13:19:38.648]  - resignal = FALSE
[13:19:38.648]  - Number of conditions: 1
[13:19:38.648] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[13:19:38.655] plan(): Setting new future strategy stack:
[13:19:38.655] List of future strategies:
[13:19:38.655] 1. multisession:
[13:19:38.655]    - args: function (..., workers = 2L, envir = parent.frame())
[13:19:38.655]    - tweaked: TRUE
[13:19:38.655]    - call: plan(multisession, workers = 2L)
[13:19:38.666] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:19:38.666] multisession:
[13:19:38.666] - args: function (..., workers = 2L, envir = parent.frame())
[13:19:38.666] - tweaked: TRUE
[13:19:38.666] - call: plan(multisession, workers = 2L)
[13:19:38.666] getGlobalsAndPackages() ...
[13:19:38.667] Not searching for globals
[13:19:38.667] - globals: [0] <none>
[13:19:38.667] getGlobalsAndPackages() ... DONE
[13:19:38.667] [local output] makeClusterPSOCK() ...
[13:19:38.700] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:19:38.706] [local output] Base port: 11575
[13:19:38.706] [local output] Getting setup options for 2 cluster nodes ...
[13:19:38.706] [local output]  - Node 1 of 2 ...
[13:19:38.706] [local output] localMachine=TRUE => revtunnel=FALSE

[13:19:38.707] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnpKqbZ/worker.rank=1.parallelly.parent=81100.13cccc42c4cc.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpnpKqbZ/worker.rank=1.parallelly.parent=81100.13cccc42c4cc.pid")'’
[13:19:38.895] - Possible to infer worker's PID: TRUE
[13:19:38.896] [local output] Rscript port: 11575

[13:19:38.896] [local output]  - Node 2 of 2 ...
[13:19:38.896] [local output] localMachine=TRUE => revtunnel=FALSE

[13:19:38.897] [local output] Rscript port: 11575

[13:19:38.897] [local output] Getting setup options for 2 cluster nodes ... done
[13:19:38.897] [local output]  - Parallel setup requested for some PSOCK nodes
[13:19:38.898] [local output] Setting up PSOCK nodes in parallel
[13:19:38.898] List of 36
[13:19:38.898]  $ worker          : chr "localhost"
[13:19:38.898]   ..- attr(*, "localhost")= logi TRUE
[13:19:38.898]  $ master          : chr "localhost"
[13:19:38.898]  $ port            : int 11575
[13:19:38.898]  $ connectTimeout  : num 120
[13:19:38.898]  $ timeout         : num 2592000
[13:19:38.898]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:19:38.898]  $ homogeneous     : logi TRUE
[13:19:38.898]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:19:38.898]  $ rscript_envs    : NULL
[13:19:38.898]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:19:38.898]  $ rscript_startup : NULL
[13:19:38.898]  $ rscript_sh      : chr "sh"
[13:19:38.898]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:19:38.898]  $ methods         : logi TRUE
[13:19:38.898]  $ socketOptions   : chr "no-delay"
[13:19:38.898]  $ useXDR          : logi FALSE
[13:19:38.898]  $ outfile         : chr "/dev/null"
[13:19:38.898]  $ renice          : int NA
[13:19:38.898]  $ rshcmd          : NULL
[13:19:38.898]  $ user            : chr(0) 
[13:19:38.898]  $ revtunnel       : logi FALSE
[13:19:38.898]  $ rshlogfile      : NULL
[13:19:38.898]  $ rshopts         : chr(0) 
[13:19:38.898]  $ rank            : int 1
[13:19:38.898]  $ manual          : logi FALSE
[13:19:38.898]  $ dryrun          : logi FALSE
[13:19:38.898]  $ quiet           : logi FALSE
[13:19:38.898]  $ setup_strategy  : chr "parallel"
[13:19:38.898]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:19:38.898]  $ pidfile         : chr "/tmp/RtmpnpKqbZ/worker.rank=1.parallelly.parent=81100.13cccc42c4cc.pid"
[13:19:38.898]  $ rshcmd_label    : NULL
[13:19:38.898]  $ rsh_call        : NULL
[13:19:38.898]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:19:38.898]  $ localMachine    : logi TRUE
[13:19:38.898]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:19:38.898]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:19:38.898]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:19:38.898]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:19:38.898]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:19:38.898]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:19:38.898]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:19:38.898]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:19:38.898]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:19:38.898]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:19:38.898]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:19:38.898]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:19:38.898]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:19:38.898]  $ arguments       :List of 28
[13:19:38.898]   ..$ worker          : chr "localhost"
[13:19:38.898]   ..$ master          : NULL
[13:19:38.898]   ..$ port            : int 11575
[13:19:38.898]   ..$ connectTimeout  : num 120
[13:19:38.898]   ..$ timeout         : num 2592000
[13:19:38.898]   ..$ rscript         : NULL
[13:19:38.898]   ..$ homogeneous     : NULL
[13:19:38.898]   ..$ rscript_args    : NULL
[13:19:38.898]   ..$ rscript_envs    : NULL
[13:19:38.898]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:19:38.898]   ..$ rscript_startup : NULL
[13:19:38.898]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:19:38.898]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:19:38.898]   ..$ methods         : logi TRUE
[13:19:38.898]   ..$ socketOptions   : chr "no-delay"
[13:19:38.898]   ..$ useXDR          : logi FALSE
[13:19:38.898]   ..$ outfile         : chr "/dev/null"
[13:19:38.898]   ..$ renice          : int NA
[13:19:38.898]   ..$ rshcmd          : NULL
[13:19:38.898]   ..$ user            : NULL
[13:19:38.898]   ..$ revtunnel       : logi NA
[13:19:38.898]   ..$ rshlogfile      : NULL
[13:19:38.898]   ..$ rshopts         : NULL
[13:19:38.898]   ..$ rank            : int 1
[13:19:38.898]   ..$ manual          : logi FALSE
[13:19:38.898]   ..$ dryrun          : logi FALSE
[13:19:38.898]   ..$ quiet           : logi FALSE
[13:19:38.898]   ..$ setup_strategy  : chr "parallel"
[13:19:38.898]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:19:38.917] [local output] System call to launch all workers:
[13:19:38.917] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnpKqbZ/worker.rank=1.parallelly.parent=81100.13cccc42c4cc.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11575 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:19:38.917] [local output] Starting PSOCK main server
[13:19:38.919] [local output] Workers launched
[13:19:38.919] [local output] Waiting for workers to connect back
[13:19:38.919]  - [local output] 0 workers out of 2 ready
[13:19:39.164]  - [local output] 0 workers out of 2 ready
[13:19:39.164]  - [local output] 1 workers out of 2 ready
[13:19:39.171]  - [local output] 1 workers out of 2 ready
[13:19:39.172]  - [local output] 2 workers out of 2 ready
[13:19:39.172] [local output] Launching of workers completed
[13:19:39.172] [local output] Collecting session information from workers
[13:19:39.173] [local output]  - Worker #1 of 2
[13:19:39.173] [local output]  - Worker #2 of 2
[13:19:39.173] [local output] makeClusterPSOCK() ... done
[13:19:39.185] Packages needed by the future expression (n = 0): <none>
[13:19:39.186] Packages needed by future strategies (n = 0): <none>
[13:19:39.186] {
[13:19:39.186]     {
[13:19:39.186]         {
[13:19:39.186]             ...future.startTime <- base::Sys.time()
[13:19:39.186]             {
[13:19:39.186]                 {
[13:19:39.186]                   {
[13:19:39.186]                     {
[13:19:39.186]                       base::local({
[13:19:39.186]                         has_future <- base::requireNamespace("future", 
[13:19:39.186]                           quietly = TRUE)
[13:19:39.186]                         if (has_future) {
[13:19:39.186]                           ns <- base::getNamespace("future")
[13:19:39.186]                           version <- ns[[".package"]][["version"]]
[13:19:39.186]                           if (is.null(version)) 
[13:19:39.186]                             version <- utils::packageVersion("future")
[13:19:39.186]                         }
[13:19:39.186]                         else {
[13:19:39.186]                           version <- NULL
[13:19:39.186]                         }
[13:19:39.186]                         if (!has_future || version < "1.8.0") {
[13:19:39.186]                           info <- base::c(r_version = base::gsub("R version ", 
[13:19:39.186]                             "", base::R.version$version.string), 
[13:19:39.186]                             platform = base::sprintf("%s (%s-bit)", 
[13:19:39.186]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:39.186]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:39.186]                               "release", "version")], collapse = " "), 
[13:19:39.186]                             hostname = base::Sys.info()[["nodename"]])
[13:19:39.186]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:19:39.186]                             info)
[13:19:39.186]                           info <- base::paste(info, collapse = "; ")
[13:19:39.186]                           if (!has_future) {
[13:19:39.186]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:39.186]                               info)
[13:19:39.186]                           }
[13:19:39.186]                           else {
[13:19:39.186]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:39.186]                               info, version)
[13:19:39.186]                           }
[13:19:39.186]                           base::stop(msg)
[13:19:39.186]                         }
[13:19:39.186]                       })
[13:19:39.186]                     }
[13:19:39.186]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:19:39.186]                     base::options(mc.cores = 1L)
[13:19:39.186]                   }
[13:19:39.186]                   options(future.plan = NULL)
[13:19:39.186]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:39.186]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:39.186]                 }
[13:19:39.186]                 ...future.workdir <- getwd()
[13:19:39.186]             }
[13:19:39.186]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:39.186]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:39.186]         }
[13:19:39.186]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:39.186]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:39.186]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:39.186]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:39.186]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:39.186]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:39.186]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:39.186]             base::names(...future.oldOptions))
[13:19:39.186]     }
[13:19:39.186]     if (FALSE) {
[13:19:39.186]     }
[13:19:39.186]     else {
[13:19:39.186]         if (TRUE) {
[13:19:39.186]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:39.186]                 open = "w")
[13:19:39.186]         }
[13:19:39.186]         else {
[13:19:39.186]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:39.186]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:39.186]         }
[13:19:39.186]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:39.186]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:39.186]             base::sink(type = "output", split = FALSE)
[13:19:39.186]             base::close(...future.stdout)
[13:19:39.186]         }, add = TRUE)
[13:19:39.186]     }
[13:19:39.186]     ...future.frame <- base::sys.nframe()
[13:19:39.186]     ...future.conditions <- base::list()
[13:19:39.186]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:39.186]     if (FALSE) {
[13:19:39.186]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:39.186]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:39.186]     }
[13:19:39.186]     ...future.result <- base::tryCatch({
[13:19:39.186]         base::withCallingHandlers({
[13:19:39.186]             ...future.value <- base::withVisible(base::local({
[13:19:39.186]                 ...future.makeSendCondition <- local({
[13:19:39.186]                   sendCondition <- NULL
[13:19:39.186]                   function(frame = 1L) {
[13:19:39.186]                     if (is.function(sendCondition)) 
[13:19:39.186]                       return(sendCondition)
[13:19:39.186]                     ns <- getNamespace("parallel")
[13:19:39.186]                     if (exists("sendData", mode = "function", 
[13:19:39.186]                       envir = ns)) {
[13:19:39.186]                       parallel_sendData <- get("sendData", mode = "function", 
[13:19:39.186]                         envir = ns)
[13:19:39.186]                       envir <- sys.frame(frame)
[13:19:39.186]                       master <- NULL
[13:19:39.186]                       while (!identical(envir, .GlobalEnv) && 
[13:19:39.186]                         !identical(envir, emptyenv())) {
[13:19:39.186]                         if (exists("master", mode = "list", envir = envir, 
[13:19:39.186]                           inherits = FALSE)) {
[13:19:39.186]                           master <- get("master", mode = "list", 
[13:19:39.186]                             envir = envir, inherits = FALSE)
[13:19:39.186]                           if (inherits(master, c("SOCKnode", 
[13:19:39.186]                             "SOCK0node"))) {
[13:19:39.186]                             sendCondition <<- function(cond) {
[13:19:39.186]                               data <- list(type = "VALUE", value = cond, 
[13:19:39.186]                                 success = TRUE)
[13:19:39.186]                               parallel_sendData(master, data)
[13:19:39.186]                             }
[13:19:39.186]                             return(sendCondition)
[13:19:39.186]                           }
[13:19:39.186]                         }
[13:19:39.186]                         frame <- frame + 1L
[13:19:39.186]                         envir <- sys.frame(frame)
[13:19:39.186]                       }
[13:19:39.186]                     }
[13:19:39.186]                     sendCondition <<- function(cond) NULL
[13:19:39.186]                   }
[13:19:39.186]                 })
[13:19:39.186]                 withCallingHandlers({
[13:19:39.186]                   NA
[13:19:39.186]                 }, immediateCondition = function(cond) {
[13:19:39.186]                   sendCondition <- ...future.makeSendCondition()
[13:19:39.186]                   sendCondition(cond)
[13:19:39.186]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:39.186]                   {
[13:19:39.186]                     inherits <- base::inherits
[13:19:39.186]                     invokeRestart <- base::invokeRestart
[13:19:39.186]                     is.null <- base::is.null
[13:19:39.186]                     muffled <- FALSE
[13:19:39.186]                     if (inherits(cond, "message")) {
[13:19:39.186]                       muffled <- grepl(pattern, "muffleMessage")
[13:19:39.186]                       if (muffled) 
[13:19:39.186]                         invokeRestart("muffleMessage")
[13:19:39.186]                     }
[13:19:39.186]                     else if (inherits(cond, "warning")) {
[13:19:39.186]                       muffled <- grepl(pattern, "muffleWarning")
[13:19:39.186]                       if (muffled) 
[13:19:39.186]                         invokeRestart("muffleWarning")
[13:19:39.186]                     }
[13:19:39.186]                     else if (inherits(cond, "condition")) {
[13:19:39.186]                       if (!is.null(pattern)) {
[13:19:39.186]                         computeRestarts <- base::computeRestarts
[13:19:39.186]                         grepl <- base::grepl
[13:19:39.186]                         restarts <- computeRestarts(cond)
[13:19:39.186]                         for (restart in restarts) {
[13:19:39.186]                           name <- restart$name
[13:19:39.186]                           if (is.null(name)) 
[13:19:39.186]                             next
[13:19:39.186]                           if (!grepl(pattern, name)) 
[13:19:39.186]                             next
[13:19:39.186]                           invokeRestart(restart)
[13:19:39.186]                           muffled <- TRUE
[13:19:39.186]                           break
[13:19:39.186]                         }
[13:19:39.186]                       }
[13:19:39.186]                     }
[13:19:39.186]                     invisible(muffled)
[13:19:39.186]                   }
[13:19:39.186]                   muffleCondition(cond)
[13:19:39.186]                 })
[13:19:39.186]             }))
[13:19:39.186]             future::FutureResult(value = ...future.value$value, 
[13:19:39.186]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:39.186]                   ...future.rng), globalenv = if (FALSE) 
[13:19:39.186]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:39.186]                     ...future.globalenv.names))
[13:19:39.186]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:39.186]         }, condition = base::local({
[13:19:39.186]             c <- base::c
[13:19:39.186]             inherits <- base::inherits
[13:19:39.186]             invokeRestart <- base::invokeRestart
[13:19:39.186]             length <- base::length
[13:19:39.186]             list <- base::list
[13:19:39.186]             seq.int <- base::seq.int
[13:19:39.186]             signalCondition <- base::signalCondition
[13:19:39.186]             sys.calls <- base::sys.calls
[13:19:39.186]             `[[` <- base::`[[`
[13:19:39.186]             `+` <- base::`+`
[13:19:39.186]             `<<-` <- base::`<<-`
[13:19:39.186]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:39.186]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:39.186]                   3L)]
[13:19:39.186]             }
[13:19:39.186]             function(cond) {
[13:19:39.186]                 is_error <- inherits(cond, "error")
[13:19:39.186]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:39.186]                   NULL)
[13:19:39.186]                 if (is_error) {
[13:19:39.186]                   sessionInformation <- function() {
[13:19:39.186]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:39.186]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:39.186]                       search = base::search(), system = base::Sys.info())
[13:19:39.186]                   }
[13:19:39.186]                   ...future.conditions[[length(...future.conditions) + 
[13:19:39.186]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:39.186]                     cond$call), session = sessionInformation(), 
[13:19:39.186]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:39.186]                   signalCondition(cond)
[13:19:39.186]                 }
[13:19:39.186]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:39.186]                 "immediateCondition"))) {
[13:19:39.186]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:39.186]                   ...future.conditions[[length(...future.conditions) + 
[13:19:39.186]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:39.186]                   if (TRUE && !signal) {
[13:19:39.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:39.186]                     {
[13:19:39.186]                       inherits <- base::inherits
[13:19:39.186]                       invokeRestart <- base::invokeRestart
[13:19:39.186]                       is.null <- base::is.null
[13:19:39.186]                       muffled <- FALSE
[13:19:39.186]                       if (inherits(cond, "message")) {
[13:19:39.186]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:39.186]                         if (muffled) 
[13:19:39.186]                           invokeRestart("muffleMessage")
[13:19:39.186]                       }
[13:19:39.186]                       else if (inherits(cond, "warning")) {
[13:19:39.186]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:39.186]                         if (muffled) 
[13:19:39.186]                           invokeRestart("muffleWarning")
[13:19:39.186]                       }
[13:19:39.186]                       else if (inherits(cond, "condition")) {
[13:19:39.186]                         if (!is.null(pattern)) {
[13:19:39.186]                           computeRestarts <- base::computeRestarts
[13:19:39.186]                           grepl <- base::grepl
[13:19:39.186]                           restarts <- computeRestarts(cond)
[13:19:39.186]                           for (restart in restarts) {
[13:19:39.186]                             name <- restart$name
[13:19:39.186]                             if (is.null(name)) 
[13:19:39.186]                               next
[13:19:39.186]                             if (!grepl(pattern, name)) 
[13:19:39.186]                               next
[13:19:39.186]                             invokeRestart(restart)
[13:19:39.186]                             muffled <- TRUE
[13:19:39.186]                             break
[13:19:39.186]                           }
[13:19:39.186]                         }
[13:19:39.186]                       }
[13:19:39.186]                       invisible(muffled)
[13:19:39.186]                     }
[13:19:39.186]                     muffleCondition(cond, pattern = "^muffle")
[13:19:39.186]                   }
[13:19:39.186]                 }
[13:19:39.186]                 else {
[13:19:39.186]                   if (TRUE) {
[13:19:39.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:39.186]                     {
[13:19:39.186]                       inherits <- base::inherits
[13:19:39.186]                       invokeRestart <- base::invokeRestart
[13:19:39.186]                       is.null <- base::is.null
[13:19:39.186]                       muffled <- FALSE
[13:19:39.186]                       if (inherits(cond, "message")) {
[13:19:39.186]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:39.186]                         if (muffled) 
[13:19:39.186]                           invokeRestart("muffleMessage")
[13:19:39.186]                       }
[13:19:39.186]                       else if (inherits(cond, "warning")) {
[13:19:39.186]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:39.186]                         if (muffled) 
[13:19:39.186]                           invokeRestart("muffleWarning")
[13:19:39.186]                       }
[13:19:39.186]                       else if (inherits(cond, "condition")) {
[13:19:39.186]                         if (!is.null(pattern)) {
[13:19:39.186]                           computeRestarts <- base::computeRestarts
[13:19:39.186]                           grepl <- base::grepl
[13:19:39.186]                           restarts <- computeRestarts(cond)
[13:19:39.186]                           for (restart in restarts) {
[13:19:39.186]                             name <- restart$name
[13:19:39.186]                             if (is.null(name)) 
[13:19:39.186]                               next
[13:19:39.186]                             if (!grepl(pattern, name)) 
[13:19:39.186]                               next
[13:19:39.186]                             invokeRestart(restart)
[13:19:39.186]                             muffled <- TRUE
[13:19:39.186]                             break
[13:19:39.186]                           }
[13:19:39.186]                         }
[13:19:39.186]                       }
[13:19:39.186]                       invisible(muffled)
[13:19:39.186]                     }
[13:19:39.186]                     muffleCondition(cond, pattern = "^muffle")
[13:19:39.186]                   }
[13:19:39.186]                 }
[13:19:39.186]             }
[13:19:39.186]         }))
[13:19:39.186]     }, error = function(ex) {
[13:19:39.186]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:39.186]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:39.186]                 ...future.rng), started = ...future.startTime, 
[13:19:39.186]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:39.186]             version = "1.8"), class = "FutureResult")
[13:19:39.186]     }, finally = {
[13:19:39.186]         if (!identical(...future.workdir, getwd())) 
[13:19:39.186]             setwd(...future.workdir)
[13:19:39.186]         {
[13:19:39.186]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:39.186]                 ...future.oldOptions$nwarnings <- NULL
[13:19:39.186]             }
[13:19:39.186]             base::options(...future.oldOptions)
[13:19:39.186]             if (.Platform$OS.type == "windows") {
[13:19:39.186]                 old_names <- names(...future.oldEnvVars)
[13:19:39.186]                 envs <- base::Sys.getenv()
[13:19:39.186]                 names <- names(envs)
[13:19:39.186]                 common <- intersect(names, old_names)
[13:19:39.186]                 added <- setdiff(names, old_names)
[13:19:39.186]                 removed <- setdiff(old_names, names)
[13:19:39.186]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:39.186]                   envs[common]]
[13:19:39.186]                 NAMES <- toupper(changed)
[13:19:39.186]                 args <- list()
[13:19:39.186]                 for (kk in seq_along(NAMES)) {
[13:19:39.186]                   name <- changed[[kk]]
[13:19:39.186]                   NAME <- NAMES[[kk]]
[13:19:39.186]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:39.186]                     next
[13:19:39.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:39.186]                 }
[13:19:39.186]                 NAMES <- toupper(added)
[13:19:39.186]                 for (kk in seq_along(NAMES)) {
[13:19:39.186]                   name <- added[[kk]]
[13:19:39.186]                   NAME <- NAMES[[kk]]
[13:19:39.186]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:39.186]                     next
[13:19:39.186]                   args[[name]] <- ""
[13:19:39.186]                 }
[13:19:39.186]                 NAMES <- toupper(removed)
[13:19:39.186]                 for (kk in seq_along(NAMES)) {
[13:19:39.186]                   name <- removed[[kk]]
[13:19:39.186]                   NAME <- NAMES[[kk]]
[13:19:39.186]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:39.186]                     next
[13:19:39.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:39.186]                 }
[13:19:39.186]                 if (length(args) > 0) 
[13:19:39.186]                   base::do.call(base::Sys.setenv, args = args)
[13:19:39.186]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:39.186]             }
[13:19:39.186]             else {
[13:19:39.186]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:39.186]             }
[13:19:39.186]             {
[13:19:39.186]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:39.186]                   0L) {
[13:19:39.186]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:39.186]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:39.186]                   base::options(opts)
[13:19:39.186]                 }
[13:19:39.186]                 {
[13:19:39.186]                   {
[13:19:39.186]                     base::options(mc.cores = ...future.mc.cores.old)
[13:19:39.186]                     NULL
[13:19:39.186]                   }
[13:19:39.186]                   options(future.plan = NULL)
[13:19:39.186]                   if (is.na(NA_character_)) 
[13:19:39.186]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:39.186]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:39.186]                   future::plan(list(function (..., workers = 2L, 
[13:19:39.186]                     envir = parent.frame()) 
[13:19:39.186]                   strategy(..., workers = workers, envir = envir)), 
[13:19:39.186]                     .cleanup = FALSE, .init = FALSE)
[13:19:39.186]                 }
[13:19:39.186]             }
[13:19:39.186]         }
[13:19:39.186]     })
[13:19:39.186]     if (TRUE) {
[13:19:39.186]         base::sink(type = "output", split = FALSE)
[13:19:39.186]         if (TRUE) {
[13:19:39.186]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:39.186]         }
[13:19:39.186]         else {
[13:19:39.186]             ...future.result["stdout"] <- base::list(NULL)
[13:19:39.186]         }
[13:19:39.186]         base::close(...future.stdout)
[13:19:39.186]         ...future.stdout <- NULL
[13:19:39.186]     }
[13:19:39.186]     ...future.result$conditions <- ...future.conditions
[13:19:39.186]     ...future.result$finished <- base::Sys.time()
[13:19:39.186]     ...future.result
[13:19:39.186] }
[13:19:39.258] MultisessionFuture started
[13:19:39.258] result() for ClusterFuture ...
[13:19:39.259] receiveMessageFromWorker() for ClusterFuture ...
[13:19:39.259] - Validating connection of MultisessionFuture
[13:19:39.283] - received message: FutureResult
[13:19:39.283] - Received FutureResult
[13:19:39.286] - Erased future from FutureRegistry
[13:19:39.286] result() for ClusterFuture ...
[13:19:39.286] - result already collected: FutureResult
[13:19:39.287] result() for ClusterFuture ... done
[13:19:39.287] receiveMessageFromWorker() for ClusterFuture ... done
[13:19:39.287] result() for ClusterFuture ... done
[13:19:39.287] result() for ClusterFuture ...
[13:19:39.287] - result already collected: FutureResult
[13:19:39.287] result() for ClusterFuture ... done
[13:19:39.287] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:19:39.288] plan(): nbrOfWorkers() = 2
[13:19:39.288] getGlobalsAndPackages() ...
[13:19:39.288] Searching for globals...
[13:19:39.290] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[13:19:39.290] Searching for globals ... DONE
[13:19:39.290] Resolving globals: FALSE
[13:19:39.290] 
[13:19:39.290] 
[13:19:39.291] getGlobalsAndPackages() ... DONE
[13:19:39.291] run() for ‘Future’ ...
[13:19:39.291] - state: ‘created’
[13:19:39.291] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:19:39.303] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:19:39.303] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:19:39.303]   - Field: ‘node’
[13:19:39.303]   - Field: ‘label’
[13:19:39.303]   - Field: ‘local’
[13:19:39.304]   - Field: ‘owner’
[13:19:39.304]   - Field: ‘envir’
[13:19:39.304]   - Field: ‘workers’
[13:19:39.304]   - Field: ‘packages’
[13:19:39.304]   - Field: ‘gc’
[13:19:39.304]   - Field: ‘conditions’
[13:19:39.304]   - Field: ‘persistent’
[13:19:39.304]   - Field: ‘expr’
[13:19:39.304]   - Field: ‘uuid’
[13:19:39.305]   - Field: ‘seed’
[13:19:39.305]   - Field: ‘version’
[13:19:39.305]   - Field: ‘result’
[13:19:39.305]   - Field: ‘asynchronous’
[13:19:39.305]   - Field: ‘calls’
[13:19:39.305]   - Field: ‘globals’
[13:19:39.305]   - Field: ‘stdout’
[13:19:39.305]   - Field: ‘earlySignal’
[13:19:39.305]   - Field: ‘lazy’
[13:19:39.306]   - Field: ‘state’
[13:19:39.306] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:19:39.306] - Launch lazy future ...
[13:19:39.306] Packages needed by the future expression (n = 0): <none>
[13:19:39.306] Packages needed by future strategies (n = 0): <none>
[13:19:39.307] {
[13:19:39.307]     {
[13:19:39.307]         {
[13:19:39.307]             ...future.startTime <- base::Sys.time()
[13:19:39.307]             {
[13:19:39.307]                 {
[13:19:39.307]                   {
[13:19:39.307]                     {
[13:19:39.307]                       base::local({
[13:19:39.307]                         has_future <- base::requireNamespace("future", 
[13:19:39.307]                           quietly = TRUE)
[13:19:39.307]                         if (has_future) {
[13:19:39.307]                           ns <- base::getNamespace("future")
[13:19:39.307]                           version <- ns[[".package"]][["version"]]
[13:19:39.307]                           if (is.null(version)) 
[13:19:39.307]                             version <- utils::packageVersion("future")
[13:19:39.307]                         }
[13:19:39.307]                         else {
[13:19:39.307]                           version <- NULL
[13:19:39.307]                         }
[13:19:39.307]                         if (!has_future || version < "1.8.0") {
[13:19:39.307]                           info <- base::c(r_version = base::gsub("R version ", 
[13:19:39.307]                             "", base::R.version$version.string), 
[13:19:39.307]                             platform = base::sprintf("%s (%s-bit)", 
[13:19:39.307]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:19:39.307]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:19:39.307]                               "release", "version")], collapse = " "), 
[13:19:39.307]                             hostname = base::Sys.info()[["nodename"]])
[13:19:39.307]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:19:39.307]                             info)
[13:19:39.307]                           info <- base::paste(info, collapse = "; ")
[13:19:39.307]                           if (!has_future) {
[13:19:39.307]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:19:39.307]                               info)
[13:19:39.307]                           }
[13:19:39.307]                           else {
[13:19:39.307]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:19:39.307]                               info, version)
[13:19:39.307]                           }
[13:19:39.307]                           base::stop(msg)
[13:19:39.307]                         }
[13:19:39.307]                       })
[13:19:39.307]                     }
[13:19:39.307]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:19:39.307]                     base::options(mc.cores = 1L)
[13:19:39.307]                   }
[13:19:39.307]                   options(future.plan = NULL)
[13:19:39.307]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:19:39.307]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:19:39.307]                 }
[13:19:39.307]                 ...future.workdir <- getwd()
[13:19:39.307]             }
[13:19:39.307]             ...future.oldOptions <- base::as.list(base::.Options)
[13:19:39.307]             ...future.oldEnvVars <- base::Sys.getenv()
[13:19:39.307]         }
[13:19:39.307]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:19:39.307]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:19:39.307]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:19:39.307]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:19:39.307]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:19:39.307]             future.stdout.windows.reencode = NULL, width = 80L)
[13:19:39.307]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:19:39.307]             base::names(...future.oldOptions))
[13:19:39.307]     }
[13:19:39.307]     if (FALSE) {
[13:19:39.307]     }
[13:19:39.307]     else {
[13:19:39.307]         if (TRUE) {
[13:19:39.307]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:19:39.307]                 open = "w")
[13:19:39.307]         }
[13:19:39.307]         else {
[13:19:39.307]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:19:39.307]                 windows = "NUL", "/dev/null"), open = "w")
[13:19:39.307]         }
[13:19:39.307]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:19:39.307]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:19:39.307]             base::sink(type = "output", split = FALSE)
[13:19:39.307]             base::close(...future.stdout)
[13:19:39.307]         }, add = TRUE)
[13:19:39.307]     }
[13:19:39.307]     ...future.frame <- base::sys.nframe()
[13:19:39.307]     ...future.conditions <- base::list()
[13:19:39.307]     ...future.rng <- base::globalenv()$.Random.seed
[13:19:39.307]     if (FALSE) {
[13:19:39.307]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:19:39.307]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:19:39.307]     }
[13:19:39.307]     ...future.result <- base::tryCatch({
[13:19:39.307]         base::withCallingHandlers({
[13:19:39.307]             ...future.value <- base::withVisible(base::local({
[13:19:39.307]                 ...future.makeSendCondition <- local({
[13:19:39.307]                   sendCondition <- NULL
[13:19:39.307]                   function(frame = 1L) {
[13:19:39.307]                     if (is.function(sendCondition)) 
[13:19:39.307]                       return(sendCondition)
[13:19:39.307]                     ns <- getNamespace("parallel")
[13:19:39.307]                     if (exists("sendData", mode = "function", 
[13:19:39.307]                       envir = ns)) {
[13:19:39.307]                       parallel_sendData <- get("sendData", mode = "function", 
[13:19:39.307]                         envir = ns)
[13:19:39.307]                       envir <- sys.frame(frame)
[13:19:39.307]                       master <- NULL
[13:19:39.307]                       while (!identical(envir, .GlobalEnv) && 
[13:19:39.307]                         !identical(envir, emptyenv())) {
[13:19:39.307]                         if (exists("master", mode = "list", envir = envir, 
[13:19:39.307]                           inherits = FALSE)) {
[13:19:39.307]                           master <- get("master", mode = "list", 
[13:19:39.307]                             envir = envir, inherits = FALSE)
[13:19:39.307]                           if (inherits(master, c("SOCKnode", 
[13:19:39.307]                             "SOCK0node"))) {
[13:19:39.307]                             sendCondition <<- function(cond) {
[13:19:39.307]                               data <- list(type = "VALUE", value = cond, 
[13:19:39.307]                                 success = TRUE)
[13:19:39.307]                               parallel_sendData(master, data)
[13:19:39.307]                             }
[13:19:39.307]                             return(sendCondition)
[13:19:39.307]                           }
[13:19:39.307]                         }
[13:19:39.307]                         frame <- frame + 1L
[13:19:39.307]                         envir <- sys.frame(frame)
[13:19:39.307]                       }
[13:19:39.307]                     }
[13:19:39.307]                     sendCondition <<- function(cond) NULL
[13:19:39.307]                   }
[13:19:39.307]                 })
[13:19:39.307]                 withCallingHandlers({
[13:19:39.307]                   {
[13:19:39.307]                     Sys.sleep(3)
[13:19:39.307]                     42L
[13:19:39.307]                     stop("Woops")
[13:19:39.307]                   }
[13:19:39.307]                 }, immediateCondition = function(cond) {
[13:19:39.307]                   sendCondition <- ...future.makeSendCondition()
[13:19:39.307]                   sendCondition(cond)
[13:19:39.307]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:39.307]                   {
[13:19:39.307]                     inherits <- base::inherits
[13:19:39.307]                     invokeRestart <- base::invokeRestart
[13:19:39.307]                     is.null <- base::is.null
[13:19:39.307]                     muffled <- FALSE
[13:19:39.307]                     if (inherits(cond, "message")) {
[13:19:39.307]                       muffled <- grepl(pattern, "muffleMessage")
[13:19:39.307]                       if (muffled) 
[13:19:39.307]                         invokeRestart("muffleMessage")
[13:19:39.307]                     }
[13:19:39.307]                     else if (inherits(cond, "warning")) {
[13:19:39.307]                       muffled <- grepl(pattern, "muffleWarning")
[13:19:39.307]                       if (muffled) 
[13:19:39.307]                         invokeRestart("muffleWarning")
[13:19:39.307]                     }
[13:19:39.307]                     else if (inherits(cond, "condition")) {
[13:19:39.307]                       if (!is.null(pattern)) {
[13:19:39.307]                         computeRestarts <- base::computeRestarts
[13:19:39.307]                         grepl <- base::grepl
[13:19:39.307]                         restarts <- computeRestarts(cond)
[13:19:39.307]                         for (restart in restarts) {
[13:19:39.307]                           name <- restart$name
[13:19:39.307]                           if (is.null(name)) 
[13:19:39.307]                             next
[13:19:39.307]                           if (!grepl(pattern, name)) 
[13:19:39.307]                             next
[13:19:39.307]                           invokeRestart(restart)
[13:19:39.307]                           muffled <- TRUE
[13:19:39.307]                           break
[13:19:39.307]                         }
[13:19:39.307]                       }
[13:19:39.307]                     }
[13:19:39.307]                     invisible(muffled)
[13:19:39.307]                   }
[13:19:39.307]                   muffleCondition(cond)
[13:19:39.307]                 })
[13:19:39.307]             }))
[13:19:39.307]             future::FutureResult(value = ...future.value$value, 
[13:19:39.307]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:39.307]                   ...future.rng), globalenv = if (FALSE) 
[13:19:39.307]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:19:39.307]                     ...future.globalenv.names))
[13:19:39.307]                 else NULL, started = ...future.startTime, version = "1.8")
[13:19:39.307]         }, condition = base::local({
[13:19:39.307]             c <- base::c
[13:19:39.307]             inherits <- base::inherits
[13:19:39.307]             invokeRestart <- base::invokeRestart
[13:19:39.307]             length <- base::length
[13:19:39.307]             list <- base::list
[13:19:39.307]             seq.int <- base::seq.int
[13:19:39.307]             signalCondition <- base::signalCondition
[13:19:39.307]             sys.calls <- base::sys.calls
[13:19:39.307]             `[[` <- base::`[[`
[13:19:39.307]             `+` <- base::`+`
[13:19:39.307]             `<<-` <- base::`<<-`
[13:19:39.307]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:19:39.307]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:19:39.307]                   3L)]
[13:19:39.307]             }
[13:19:39.307]             function(cond) {
[13:19:39.307]                 is_error <- inherits(cond, "error")
[13:19:39.307]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:19:39.307]                   NULL)
[13:19:39.307]                 if (is_error) {
[13:19:39.307]                   sessionInformation <- function() {
[13:19:39.307]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:19:39.307]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:19:39.307]                       search = base::search(), system = base::Sys.info())
[13:19:39.307]                   }
[13:19:39.307]                   ...future.conditions[[length(...future.conditions) + 
[13:19:39.307]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:19:39.307]                     cond$call), session = sessionInformation(), 
[13:19:39.307]                     timestamp = base::Sys.time(), signaled = 0L)
[13:19:39.307]                   signalCondition(cond)
[13:19:39.307]                 }
[13:19:39.307]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:19:39.307]                 "immediateCondition"))) {
[13:19:39.307]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:19:39.307]                   ...future.conditions[[length(...future.conditions) + 
[13:19:39.307]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:19:39.307]                   if (TRUE && !signal) {
[13:19:39.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:39.307]                     {
[13:19:39.307]                       inherits <- base::inherits
[13:19:39.307]                       invokeRestart <- base::invokeRestart
[13:19:39.307]                       is.null <- base::is.null
[13:19:39.307]                       muffled <- FALSE
[13:19:39.307]                       if (inherits(cond, "message")) {
[13:19:39.307]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:39.307]                         if (muffled) 
[13:19:39.307]                           invokeRestart("muffleMessage")
[13:19:39.307]                       }
[13:19:39.307]                       else if (inherits(cond, "warning")) {
[13:19:39.307]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:39.307]                         if (muffled) 
[13:19:39.307]                           invokeRestart("muffleWarning")
[13:19:39.307]                       }
[13:19:39.307]                       else if (inherits(cond, "condition")) {
[13:19:39.307]                         if (!is.null(pattern)) {
[13:19:39.307]                           computeRestarts <- base::computeRestarts
[13:19:39.307]                           grepl <- base::grepl
[13:19:39.307]                           restarts <- computeRestarts(cond)
[13:19:39.307]                           for (restart in restarts) {
[13:19:39.307]                             name <- restart$name
[13:19:39.307]                             if (is.null(name)) 
[13:19:39.307]                               next
[13:19:39.307]                             if (!grepl(pattern, name)) 
[13:19:39.307]                               next
[13:19:39.307]                             invokeRestart(restart)
[13:19:39.307]                             muffled <- TRUE
[13:19:39.307]                             break
[13:19:39.307]                           }
[13:19:39.307]                         }
[13:19:39.307]                       }
[13:19:39.307]                       invisible(muffled)
[13:19:39.307]                     }
[13:19:39.307]                     muffleCondition(cond, pattern = "^muffle")
[13:19:39.307]                   }
[13:19:39.307]                 }
[13:19:39.307]                 else {
[13:19:39.307]                   if (TRUE) {
[13:19:39.307]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:19:39.307]                     {
[13:19:39.307]                       inherits <- base::inherits
[13:19:39.307]                       invokeRestart <- base::invokeRestart
[13:19:39.307]                       is.null <- base::is.null
[13:19:39.307]                       muffled <- FALSE
[13:19:39.307]                       if (inherits(cond, "message")) {
[13:19:39.307]                         muffled <- grepl(pattern, "muffleMessage")
[13:19:39.307]                         if (muffled) 
[13:19:39.307]                           invokeRestart("muffleMessage")
[13:19:39.307]                       }
[13:19:39.307]                       else if (inherits(cond, "warning")) {
[13:19:39.307]                         muffled <- grepl(pattern, "muffleWarning")
[13:19:39.307]                         if (muffled) 
[13:19:39.307]                           invokeRestart("muffleWarning")
[13:19:39.307]                       }
[13:19:39.307]                       else if (inherits(cond, "condition")) {
[13:19:39.307]                         if (!is.null(pattern)) {
[13:19:39.307]                           computeRestarts <- base::computeRestarts
[13:19:39.307]                           grepl <- base::grepl
[13:19:39.307]                           restarts <- computeRestarts(cond)
[13:19:39.307]                           for (restart in restarts) {
[13:19:39.307]                             name <- restart$name
[13:19:39.307]                             if (is.null(name)) 
[13:19:39.307]                               next
[13:19:39.307]                             if (!grepl(pattern, name)) 
[13:19:39.307]                               next
[13:19:39.307]                             invokeRestart(restart)
[13:19:39.307]                             muffled <- TRUE
[13:19:39.307]                             break
[13:19:39.307]                           }
[13:19:39.307]                         }
[13:19:39.307]                       }
[13:19:39.307]                       invisible(muffled)
[13:19:39.307]                     }
[13:19:39.307]                     muffleCondition(cond, pattern = "^muffle")
[13:19:39.307]                   }
[13:19:39.307]                 }
[13:19:39.307]             }
[13:19:39.307]         }))
[13:19:39.307]     }, error = function(ex) {
[13:19:39.307]         base::structure(base::list(value = NULL, visible = NULL, 
[13:19:39.307]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:19:39.307]                 ...future.rng), started = ...future.startTime, 
[13:19:39.307]             finished = Sys.time(), session_uuid = NA_character_, 
[13:19:39.307]             version = "1.8"), class = "FutureResult")
[13:19:39.307]     }, finally = {
[13:19:39.307]         if (!identical(...future.workdir, getwd())) 
[13:19:39.307]             setwd(...future.workdir)
[13:19:39.307]         {
[13:19:39.307]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:19:39.307]                 ...future.oldOptions$nwarnings <- NULL
[13:19:39.307]             }
[13:19:39.307]             base::options(...future.oldOptions)
[13:19:39.307]             if (.Platform$OS.type == "windows") {
[13:19:39.307]                 old_names <- names(...future.oldEnvVars)
[13:19:39.307]                 envs <- base::Sys.getenv()
[13:19:39.307]                 names <- names(envs)
[13:19:39.307]                 common <- intersect(names, old_names)
[13:19:39.307]                 added <- setdiff(names, old_names)
[13:19:39.307]                 removed <- setdiff(old_names, names)
[13:19:39.307]                 changed <- common[...future.oldEnvVars[common] != 
[13:19:39.307]                   envs[common]]
[13:19:39.307]                 NAMES <- toupper(changed)
[13:19:39.307]                 args <- list()
[13:19:39.307]                 for (kk in seq_along(NAMES)) {
[13:19:39.307]                   name <- changed[[kk]]
[13:19:39.307]                   NAME <- NAMES[[kk]]
[13:19:39.307]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:39.307]                     next
[13:19:39.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:39.307]                 }
[13:19:39.307]                 NAMES <- toupper(added)
[13:19:39.307]                 for (kk in seq_along(NAMES)) {
[13:19:39.307]                   name <- added[[kk]]
[13:19:39.307]                   NAME <- NAMES[[kk]]
[13:19:39.307]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:39.307]                     next
[13:19:39.307]                   args[[name]] <- ""
[13:19:39.307]                 }
[13:19:39.307]                 NAMES <- toupper(removed)
[13:19:39.307]                 for (kk in seq_along(NAMES)) {
[13:19:39.307]                   name <- removed[[kk]]
[13:19:39.307]                   NAME <- NAMES[[kk]]
[13:19:39.307]                   if (name != NAME && is.element(NAME, old_names)) 
[13:19:39.307]                     next
[13:19:39.307]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:19:39.307]                 }
[13:19:39.307]                 if (length(args) > 0) 
[13:19:39.307]                   base::do.call(base::Sys.setenv, args = args)
[13:19:39.307]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:19:39.307]             }
[13:19:39.307]             else {
[13:19:39.307]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:19:39.307]             }
[13:19:39.307]             {
[13:19:39.307]                 if (base::length(...future.futureOptionsAdded) > 
[13:19:39.307]                   0L) {
[13:19:39.307]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:19:39.307]                   base::names(opts) <- ...future.futureOptionsAdded
[13:19:39.307]                   base::options(opts)
[13:19:39.307]                 }
[13:19:39.307]                 {
[13:19:39.307]                   {
[13:19:39.307]                     base::options(mc.cores = ...future.mc.cores.old)
[13:19:39.307]                     NULL
[13:19:39.307]                   }
[13:19:39.307]                   options(future.plan = NULL)
[13:19:39.307]                   if (is.na(NA_character_)) 
[13:19:39.307]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:19:39.307]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:19:39.307]                   future::plan(list(function (..., workers = 2L, 
[13:19:39.307]                     envir = parent.frame()) 
[13:19:39.307]                   strategy(..., workers = workers, envir = envir)), 
[13:19:39.307]                     .cleanup = FALSE, .init = FALSE)
[13:19:39.307]                 }
[13:19:39.307]             }
[13:19:39.307]         }
[13:19:39.307]     })
[13:19:39.307]     if (TRUE) {
[13:19:39.307]         base::sink(type = "output", split = FALSE)
[13:19:39.307]         if (TRUE) {
[13:19:39.307]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:19:39.307]         }
[13:19:39.307]         else {
[13:19:39.307]             ...future.result["stdout"] <- base::list(NULL)
[13:19:39.307]         }
[13:19:39.307]         base::close(...future.stdout)
[13:19:39.307]         ...future.stdout <- NULL
[13:19:39.307]     }
[13:19:39.307]     ...future.result$conditions <- ...future.conditions
[13:19:39.307]     ...future.result$finished <- base::Sys.time()
[13:19:39.307]     ...future.result
[13:19:39.307] }
[13:19:39.310] MultisessionFuture started
[13:19:39.310] - Launch lazy future ... done
[13:19:39.311] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[13:19:42.358] receiveMessageFromWorker() for ClusterFuture ...
[13:19:42.358] - Validating connection of MultisessionFuture
[13:19:42.359] - received message: FutureResult
[13:19:42.359] - Received FutureResult
[13:19:42.359] - Erased future from FutureRegistry
[13:19:42.359] result() for ClusterFuture ...
[13:19:42.359] - result already collected: FutureResult
[13:19:42.359] result() for ClusterFuture ... done
[13:19:42.359] signalConditions() ...
[13:19:42.360]  - include = ‘immediateCondition’
[13:19:42.360]  - exclude = 
[13:19:42.360]  - resignal = FALSE
[13:19:42.360]  - Number of conditions: 1
[13:19:42.360] signalConditions() ... done
[13:19:42.360] receiveMessageFromWorker() for ClusterFuture ... done
[13:19:42.360] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 7ab361c1-f8d6-f66b-7ded-6db5f5b2ce24
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[13:19:42.362] plan(): Setting new future strategy stack:
[13:19:42.362] List of future strategies:
[13:19:42.362] 1. FutureStrategy:
[13:19:42.362]    - args: function (..., envir = parent.frame())
[13:19:42.362]    - tweaked: FALSE
[13:19:42.362]    - call: future::plan(oplan)
[13:19:42.363] plan(): nbrOfWorkers() = 1
> 
