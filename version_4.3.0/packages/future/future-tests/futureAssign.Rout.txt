
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:17.608] plan(): Setting new future strategy stack:
[13:20:17.609] List of future strategies:
[13:20:17.609] 1. sequential:
[13:20:17.609]    - args: function (..., envir = parent.frame())
[13:20:17.609]    - tweaked: FALSE
[13:20:17.609]    - call: future::plan("sequential")
[13:20:17.623] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[13:20:17.634] getGlobalsAndPackages() ...
[13:20:17.634] Searching for globals...
[13:20:17.640] - globals found: [2] ‘{’, ‘cat’
[13:20:17.640] Searching for globals ... DONE
[13:20:17.641] Resolving globals: FALSE
[13:20:17.641] 
[13:20:17.641] 
[13:20:17.641] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[13:20:17.643] run() for ‘Future’ ...
[13:20:17.643] - state: ‘created’
[13:20:17.643] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.643] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.643] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.643]   - Field: ‘label’
[13:20:17.644]   - Field: ‘local’
[13:20:17.644]   - Field: ‘owner’
[13:20:17.644]   - Field: ‘envir’
[13:20:17.644]   - Field: ‘packages’
[13:20:17.644]   - Field: ‘gc’
[13:20:17.644]   - Field: ‘conditions’
[13:20:17.644]   - Field: ‘expr’
[13:20:17.644]   - Field: ‘uuid’
[13:20:17.644]   - Field: ‘seed’
[13:20:17.644]   - Field: ‘version’
[13:20:17.644]   - Field: ‘result’
[13:20:17.645]   - Field: ‘asynchronous’
[13:20:17.645]   - Field: ‘calls’
[13:20:17.645]   - Field: ‘globals’
[13:20:17.645]   - Field: ‘stdout’
[13:20:17.645]   - Field: ‘earlySignal’
[13:20:17.645]   - Field: ‘lazy’
[13:20:17.645]   - Field: ‘state’
[13:20:17.645] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.645] - Launch lazy future ...
[13:20:17.646] Packages needed by the future expression (n = 0): <none>
[13:20:17.646] Packages needed by future strategies (n = 0): <none>
[13:20:17.647] {
[13:20:17.647]     {
[13:20:17.647]         {
[13:20:17.647]             ...future.startTime <- base::Sys.time()
[13:20:17.647]             {
[13:20:17.647]                 {
[13:20:17.647]                   {
[13:20:17.647]                     base::local({
[13:20:17.647]                       has_future <- base::requireNamespace("future", 
[13:20:17.647]                         quietly = TRUE)
[13:20:17.647]                       if (has_future) {
[13:20:17.647]                         ns <- base::getNamespace("future")
[13:20:17.647]                         version <- ns[[".package"]][["version"]]
[13:20:17.647]                         if (is.null(version)) 
[13:20:17.647]                           version <- utils::packageVersion("future")
[13:20:17.647]                       }
[13:20:17.647]                       else {
[13:20:17.647]                         version <- NULL
[13:20:17.647]                       }
[13:20:17.647]                       if (!has_future || version < "1.8.0") {
[13:20:17.647]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.647]                           "", base::R.version$version.string), 
[13:20:17.647]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.647]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.647]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.647]                             "release", "version")], collapse = " "), 
[13:20:17.647]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.647]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.647]                           info)
[13:20:17.647]                         info <- base::paste(info, collapse = "; ")
[13:20:17.647]                         if (!has_future) {
[13:20:17.647]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.647]                             info)
[13:20:17.647]                         }
[13:20:17.647]                         else {
[13:20:17.647]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.647]                             info, version)
[13:20:17.647]                         }
[13:20:17.647]                         base::stop(msg)
[13:20:17.647]                       }
[13:20:17.647]                     })
[13:20:17.647]                   }
[13:20:17.647]                   options(future.plan = NULL)
[13:20:17.647]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.647]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.647]                 }
[13:20:17.647]                 ...future.workdir <- getwd()
[13:20:17.647]             }
[13:20:17.647]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.647]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.647]         }
[13:20:17.647]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.647]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.647]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.647]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.647]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.647]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.647]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.647]             base::names(...future.oldOptions))
[13:20:17.647]     }
[13:20:17.647]     if (FALSE) {
[13:20:17.647]     }
[13:20:17.647]     else {
[13:20:17.647]         if (TRUE) {
[13:20:17.647]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.647]                 open = "w")
[13:20:17.647]         }
[13:20:17.647]         else {
[13:20:17.647]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.647]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.647]         }
[13:20:17.647]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.647]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.647]             base::sink(type = "output", split = FALSE)
[13:20:17.647]             base::close(...future.stdout)
[13:20:17.647]         }, add = TRUE)
[13:20:17.647]     }
[13:20:17.647]     ...future.frame <- base::sys.nframe()
[13:20:17.647]     ...future.conditions <- base::list()
[13:20:17.647]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.647]     if (FALSE) {
[13:20:17.647]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.647]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.647]     }
[13:20:17.647]     ...future.result <- base::tryCatch({
[13:20:17.647]         base::withCallingHandlers({
[13:20:17.647]             ...future.value <- base::withVisible(base::local({
[13:20:17.647]                 cat("Future assignment evaluated\n")
[13:20:17.647]                 2
[13:20:17.647]             }))
[13:20:17.647]             future::FutureResult(value = ...future.value$value, 
[13:20:17.647]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.647]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.647]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.647]                     ...future.globalenv.names))
[13:20:17.647]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.647]         }, condition = base::local({
[13:20:17.647]             c <- base::c
[13:20:17.647]             inherits <- base::inherits
[13:20:17.647]             invokeRestart <- base::invokeRestart
[13:20:17.647]             length <- base::length
[13:20:17.647]             list <- base::list
[13:20:17.647]             seq.int <- base::seq.int
[13:20:17.647]             signalCondition <- base::signalCondition
[13:20:17.647]             sys.calls <- base::sys.calls
[13:20:17.647]             `[[` <- base::`[[`
[13:20:17.647]             `+` <- base::`+`
[13:20:17.647]             `<<-` <- base::`<<-`
[13:20:17.647]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.647]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.647]                   3L)]
[13:20:17.647]             }
[13:20:17.647]             function(cond) {
[13:20:17.647]                 is_error <- inherits(cond, "error")
[13:20:17.647]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.647]                   NULL)
[13:20:17.647]                 if (is_error) {
[13:20:17.647]                   sessionInformation <- function() {
[13:20:17.647]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.647]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.647]                       search = base::search(), system = base::Sys.info())
[13:20:17.647]                   }
[13:20:17.647]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.647]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.647]                     cond$call), session = sessionInformation(), 
[13:20:17.647]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.647]                   signalCondition(cond)
[13:20:17.647]                 }
[13:20:17.647]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.647]                 "immediateCondition"))) {
[13:20:17.647]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.647]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.647]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.647]                   if (TRUE && !signal) {
[13:20:17.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.647]                     {
[13:20:17.647]                       inherits <- base::inherits
[13:20:17.647]                       invokeRestart <- base::invokeRestart
[13:20:17.647]                       is.null <- base::is.null
[13:20:17.647]                       muffled <- FALSE
[13:20:17.647]                       if (inherits(cond, "message")) {
[13:20:17.647]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.647]                         if (muffled) 
[13:20:17.647]                           invokeRestart("muffleMessage")
[13:20:17.647]                       }
[13:20:17.647]                       else if (inherits(cond, "warning")) {
[13:20:17.647]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.647]                         if (muffled) 
[13:20:17.647]                           invokeRestart("muffleWarning")
[13:20:17.647]                       }
[13:20:17.647]                       else if (inherits(cond, "condition")) {
[13:20:17.647]                         if (!is.null(pattern)) {
[13:20:17.647]                           computeRestarts <- base::computeRestarts
[13:20:17.647]                           grepl <- base::grepl
[13:20:17.647]                           restarts <- computeRestarts(cond)
[13:20:17.647]                           for (restart in restarts) {
[13:20:17.647]                             name <- restart$name
[13:20:17.647]                             if (is.null(name)) 
[13:20:17.647]                               next
[13:20:17.647]                             if (!grepl(pattern, name)) 
[13:20:17.647]                               next
[13:20:17.647]                             invokeRestart(restart)
[13:20:17.647]                             muffled <- TRUE
[13:20:17.647]                             break
[13:20:17.647]                           }
[13:20:17.647]                         }
[13:20:17.647]                       }
[13:20:17.647]                       invisible(muffled)
[13:20:17.647]                     }
[13:20:17.647]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.647]                   }
[13:20:17.647]                 }
[13:20:17.647]                 else {
[13:20:17.647]                   if (TRUE) {
[13:20:17.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.647]                     {
[13:20:17.647]                       inherits <- base::inherits
[13:20:17.647]                       invokeRestart <- base::invokeRestart
[13:20:17.647]                       is.null <- base::is.null
[13:20:17.647]                       muffled <- FALSE
[13:20:17.647]                       if (inherits(cond, "message")) {
[13:20:17.647]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.647]                         if (muffled) 
[13:20:17.647]                           invokeRestart("muffleMessage")
[13:20:17.647]                       }
[13:20:17.647]                       else if (inherits(cond, "warning")) {
[13:20:17.647]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.647]                         if (muffled) 
[13:20:17.647]                           invokeRestart("muffleWarning")
[13:20:17.647]                       }
[13:20:17.647]                       else if (inherits(cond, "condition")) {
[13:20:17.647]                         if (!is.null(pattern)) {
[13:20:17.647]                           computeRestarts <- base::computeRestarts
[13:20:17.647]                           grepl <- base::grepl
[13:20:17.647]                           restarts <- computeRestarts(cond)
[13:20:17.647]                           for (restart in restarts) {
[13:20:17.647]                             name <- restart$name
[13:20:17.647]                             if (is.null(name)) 
[13:20:17.647]                               next
[13:20:17.647]                             if (!grepl(pattern, name)) 
[13:20:17.647]                               next
[13:20:17.647]                             invokeRestart(restart)
[13:20:17.647]                             muffled <- TRUE
[13:20:17.647]                             break
[13:20:17.647]                           }
[13:20:17.647]                         }
[13:20:17.647]                       }
[13:20:17.647]                       invisible(muffled)
[13:20:17.647]                     }
[13:20:17.647]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.647]                   }
[13:20:17.647]                 }
[13:20:17.647]             }
[13:20:17.647]         }))
[13:20:17.647]     }, error = function(ex) {
[13:20:17.647]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.647]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.647]                 ...future.rng), started = ...future.startTime, 
[13:20:17.647]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.647]             version = "1.8"), class = "FutureResult")
[13:20:17.647]     }, finally = {
[13:20:17.647]         if (!identical(...future.workdir, getwd())) 
[13:20:17.647]             setwd(...future.workdir)
[13:20:17.647]         {
[13:20:17.647]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.647]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.647]             }
[13:20:17.647]             base::options(...future.oldOptions)
[13:20:17.647]             if (.Platform$OS.type == "windows") {
[13:20:17.647]                 old_names <- names(...future.oldEnvVars)
[13:20:17.647]                 envs <- base::Sys.getenv()
[13:20:17.647]                 names <- names(envs)
[13:20:17.647]                 common <- intersect(names, old_names)
[13:20:17.647]                 added <- setdiff(names, old_names)
[13:20:17.647]                 removed <- setdiff(old_names, names)
[13:20:17.647]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.647]                   envs[common]]
[13:20:17.647]                 NAMES <- toupper(changed)
[13:20:17.647]                 args <- list()
[13:20:17.647]                 for (kk in seq_along(NAMES)) {
[13:20:17.647]                   name <- changed[[kk]]
[13:20:17.647]                   NAME <- NAMES[[kk]]
[13:20:17.647]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.647]                     next
[13:20:17.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.647]                 }
[13:20:17.647]                 NAMES <- toupper(added)
[13:20:17.647]                 for (kk in seq_along(NAMES)) {
[13:20:17.647]                   name <- added[[kk]]
[13:20:17.647]                   NAME <- NAMES[[kk]]
[13:20:17.647]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.647]                     next
[13:20:17.647]                   args[[name]] <- ""
[13:20:17.647]                 }
[13:20:17.647]                 NAMES <- toupper(removed)
[13:20:17.647]                 for (kk in seq_along(NAMES)) {
[13:20:17.647]                   name <- removed[[kk]]
[13:20:17.647]                   NAME <- NAMES[[kk]]
[13:20:17.647]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.647]                     next
[13:20:17.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.647]                 }
[13:20:17.647]                 if (length(args) > 0) 
[13:20:17.647]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.647]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.647]             }
[13:20:17.647]             else {
[13:20:17.647]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.647]             }
[13:20:17.647]             {
[13:20:17.647]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.647]                   0L) {
[13:20:17.647]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.647]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.647]                   base::options(opts)
[13:20:17.647]                 }
[13:20:17.647]                 {
[13:20:17.647]                   {
[13:20:17.647]                     NULL
[13:20:17.647]                     RNGkind("Mersenne-Twister")
[13:20:17.647]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.647]                       inherits = FALSE)
[13:20:17.647]                   }
[13:20:17.647]                   options(future.plan = NULL)
[13:20:17.647]                   if (is.na(NA_character_)) 
[13:20:17.647]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.647]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.647]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.647]                   {
[13:20:17.647]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.647]                     if (!future$lazy) 
[13:20:17.647]                       future <- run(future)
[13:20:17.647]                     invisible(future)
[13:20:17.647]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.647]                 }
[13:20:17.647]             }
[13:20:17.647]         }
[13:20:17.647]     })
[13:20:17.647]     if (TRUE) {
[13:20:17.647]         base::sink(type = "output", split = FALSE)
[13:20:17.647]         if (TRUE) {
[13:20:17.647]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.647]         }
[13:20:17.647]         else {
[13:20:17.647]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.647]         }
[13:20:17.647]         base::close(...future.stdout)
[13:20:17.647]         ...future.stdout <- NULL
[13:20:17.647]     }
[13:20:17.647]     ...future.result$conditions <- ...future.conditions
[13:20:17.647]     ...future.result$finished <- base::Sys.time()
[13:20:17.647]     ...future.result
[13:20:17.647] }
[13:20:17.649] plan(): Setting new future strategy stack:
[13:20:17.649] List of future strategies:
[13:20:17.649] 1. sequential:
[13:20:17.649]    - args: function (..., envir = parent.frame())
[13:20:17.649]    - tweaked: FALSE
[13:20:17.649]    - call: NULL
[13:20:17.650] plan(): nbrOfWorkers() = 1
[13:20:17.651] plan(): Setting new future strategy stack:
[13:20:17.651] List of future strategies:
[13:20:17.651] 1. sequential:
[13:20:17.651]    - args: function (..., envir = parent.frame())
[13:20:17.651]    - tweaked: FALSE
[13:20:17.651]    - call: future::plan("sequential")
[13:20:17.651] plan(): nbrOfWorkers() = 1
[13:20:17.651] SequentialFuture started (and completed)
[13:20:17.652] - Launch lazy future ... done
[13:20:17.652] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[13:20:17.679] plan(): Setting new future strategy stack:
[13:20:17.679] List of future strategies:
[13:20:17.679] 1. sequential:
[13:20:17.679]    - args: function (..., envir = parent.frame())
[13:20:17.679]    - tweaked: FALSE
[13:20:17.679]    - call: plan(strategy)
[13:20:17.695] plan(): nbrOfWorkers() = 1
[13:20:17.695] getGlobalsAndPackages() ...
[13:20:17.695] Searching for globals...
[13:20:17.696] - globals found: [1] ‘{’
[13:20:17.696] Searching for globals ... DONE
[13:20:17.696] Resolving globals: FALSE
[13:20:17.697] 
[13:20:17.697] 
[13:20:17.697] getGlobalsAndPackages() ... DONE
[13:20:17.697] run() for ‘Future’ ...
[13:20:17.698] - state: ‘created’
[13:20:17.698] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.698] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.698] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.698]   - Field: ‘label’
[13:20:17.699]   - Field: ‘local’
[13:20:17.699]   - Field: ‘owner’
[13:20:17.699]   - Field: ‘envir’
[13:20:17.699]   - Field: ‘packages’
[13:20:17.699]   - Field: ‘gc’
[13:20:17.699]   - Field: ‘conditions’
[13:20:17.699]   - Field: ‘expr’
[13:20:17.700]   - Field: ‘uuid’
[13:20:17.700]   - Field: ‘seed’
[13:20:17.700]   - Field: ‘version’
[13:20:17.700]   - Field: ‘result’
[13:20:17.700]   - Field: ‘asynchronous’
[13:20:17.700]   - Field: ‘calls’
[13:20:17.700]   - Field: ‘globals’
[13:20:17.701]   - Field: ‘stdout’
[13:20:17.701]   - Field: ‘earlySignal’
[13:20:17.701]   - Field: ‘lazy’
[13:20:17.701]   - Field: ‘state’
[13:20:17.701] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.701] - Launch lazy future ...
[13:20:17.702] Packages needed by the future expression (n = 0): <none>
[13:20:17.702] Packages needed by future strategies (n = 0): <none>
[13:20:17.702] {
[13:20:17.702]     {
[13:20:17.702]         {
[13:20:17.702]             ...future.startTime <- base::Sys.time()
[13:20:17.702]             {
[13:20:17.702]                 {
[13:20:17.702]                   {
[13:20:17.702]                     base::local({
[13:20:17.702]                       has_future <- base::requireNamespace("future", 
[13:20:17.702]                         quietly = TRUE)
[13:20:17.702]                       if (has_future) {
[13:20:17.702]                         ns <- base::getNamespace("future")
[13:20:17.702]                         version <- ns[[".package"]][["version"]]
[13:20:17.702]                         if (is.null(version)) 
[13:20:17.702]                           version <- utils::packageVersion("future")
[13:20:17.702]                       }
[13:20:17.702]                       else {
[13:20:17.702]                         version <- NULL
[13:20:17.702]                       }
[13:20:17.702]                       if (!has_future || version < "1.8.0") {
[13:20:17.702]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.702]                           "", base::R.version$version.string), 
[13:20:17.702]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.702]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.702]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.702]                             "release", "version")], collapse = " "), 
[13:20:17.702]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.702]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.702]                           info)
[13:20:17.702]                         info <- base::paste(info, collapse = "; ")
[13:20:17.702]                         if (!has_future) {
[13:20:17.702]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.702]                             info)
[13:20:17.702]                         }
[13:20:17.702]                         else {
[13:20:17.702]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.702]                             info, version)
[13:20:17.702]                         }
[13:20:17.702]                         base::stop(msg)
[13:20:17.702]                       }
[13:20:17.702]                     })
[13:20:17.702]                   }
[13:20:17.702]                   options(future.plan = NULL)
[13:20:17.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.702]                 }
[13:20:17.702]                 ...future.workdir <- getwd()
[13:20:17.702]             }
[13:20:17.702]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.702]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.702]         }
[13:20:17.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.702]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.702]             base::names(...future.oldOptions))
[13:20:17.702]     }
[13:20:17.702]     if (FALSE) {
[13:20:17.702]     }
[13:20:17.702]     else {
[13:20:17.702]         if (TRUE) {
[13:20:17.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.702]                 open = "w")
[13:20:17.702]         }
[13:20:17.702]         else {
[13:20:17.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.702]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.702]         }
[13:20:17.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.702]             base::sink(type = "output", split = FALSE)
[13:20:17.702]             base::close(...future.stdout)
[13:20:17.702]         }, add = TRUE)
[13:20:17.702]     }
[13:20:17.702]     ...future.frame <- base::sys.nframe()
[13:20:17.702]     ...future.conditions <- base::list()
[13:20:17.702]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.702]     if (FALSE) {
[13:20:17.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.702]     }
[13:20:17.702]     ...future.result <- base::tryCatch({
[13:20:17.702]         base::withCallingHandlers({
[13:20:17.702]             ...future.value <- base::withVisible(base::local({
[13:20:17.702]                 2
[13:20:17.702]             }))
[13:20:17.702]             future::FutureResult(value = ...future.value$value, 
[13:20:17.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.702]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.702]                     ...future.globalenv.names))
[13:20:17.702]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.702]         }, condition = base::local({
[13:20:17.702]             c <- base::c
[13:20:17.702]             inherits <- base::inherits
[13:20:17.702]             invokeRestart <- base::invokeRestart
[13:20:17.702]             length <- base::length
[13:20:17.702]             list <- base::list
[13:20:17.702]             seq.int <- base::seq.int
[13:20:17.702]             signalCondition <- base::signalCondition
[13:20:17.702]             sys.calls <- base::sys.calls
[13:20:17.702]             `[[` <- base::`[[`
[13:20:17.702]             `+` <- base::`+`
[13:20:17.702]             `<<-` <- base::`<<-`
[13:20:17.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.702]                   3L)]
[13:20:17.702]             }
[13:20:17.702]             function(cond) {
[13:20:17.702]                 is_error <- inherits(cond, "error")
[13:20:17.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.702]                   NULL)
[13:20:17.702]                 if (is_error) {
[13:20:17.702]                   sessionInformation <- function() {
[13:20:17.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.702]                       search = base::search(), system = base::Sys.info())
[13:20:17.702]                   }
[13:20:17.702]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.702]                     cond$call), session = sessionInformation(), 
[13:20:17.702]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.702]                   signalCondition(cond)
[13:20:17.702]                 }
[13:20:17.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.702]                 "immediateCondition"))) {
[13:20:17.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.702]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.702]                   if (TRUE && !signal) {
[13:20:17.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.702]                     {
[13:20:17.702]                       inherits <- base::inherits
[13:20:17.702]                       invokeRestart <- base::invokeRestart
[13:20:17.702]                       is.null <- base::is.null
[13:20:17.702]                       muffled <- FALSE
[13:20:17.702]                       if (inherits(cond, "message")) {
[13:20:17.702]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.702]                         if (muffled) 
[13:20:17.702]                           invokeRestart("muffleMessage")
[13:20:17.702]                       }
[13:20:17.702]                       else if (inherits(cond, "warning")) {
[13:20:17.702]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.702]                         if (muffled) 
[13:20:17.702]                           invokeRestart("muffleWarning")
[13:20:17.702]                       }
[13:20:17.702]                       else if (inherits(cond, "condition")) {
[13:20:17.702]                         if (!is.null(pattern)) {
[13:20:17.702]                           computeRestarts <- base::computeRestarts
[13:20:17.702]                           grepl <- base::grepl
[13:20:17.702]                           restarts <- computeRestarts(cond)
[13:20:17.702]                           for (restart in restarts) {
[13:20:17.702]                             name <- restart$name
[13:20:17.702]                             if (is.null(name)) 
[13:20:17.702]                               next
[13:20:17.702]                             if (!grepl(pattern, name)) 
[13:20:17.702]                               next
[13:20:17.702]                             invokeRestart(restart)
[13:20:17.702]                             muffled <- TRUE
[13:20:17.702]                             break
[13:20:17.702]                           }
[13:20:17.702]                         }
[13:20:17.702]                       }
[13:20:17.702]                       invisible(muffled)
[13:20:17.702]                     }
[13:20:17.702]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.702]                   }
[13:20:17.702]                 }
[13:20:17.702]                 else {
[13:20:17.702]                   if (TRUE) {
[13:20:17.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.702]                     {
[13:20:17.702]                       inherits <- base::inherits
[13:20:17.702]                       invokeRestart <- base::invokeRestart
[13:20:17.702]                       is.null <- base::is.null
[13:20:17.702]                       muffled <- FALSE
[13:20:17.702]                       if (inherits(cond, "message")) {
[13:20:17.702]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.702]                         if (muffled) 
[13:20:17.702]                           invokeRestart("muffleMessage")
[13:20:17.702]                       }
[13:20:17.702]                       else if (inherits(cond, "warning")) {
[13:20:17.702]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.702]                         if (muffled) 
[13:20:17.702]                           invokeRestart("muffleWarning")
[13:20:17.702]                       }
[13:20:17.702]                       else if (inherits(cond, "condition")) {
[13:20:17.702]                         if (!is.null(pattern)) {
[13:20:17.702]                           computeRestarts <- base::computeRestarts
[13:20:17.702]                           grepl <- base::grepl
[13:20:17.702]                           restarts <- computeRestarts(cond)
[13:20:17.702]                           for (restart in restarts) {
[13:20:17.702]                             name <- restart$name
[13:20:17.702]                             if (is.null(name)) 
[13:20:17.702]                               next
[13:20:17.702]                             if (!grepl(pattern, name)) 
[13:20:17.702]                               next
[13:20:17.702]                             invokeRestart(restart)
[13:20:17.702]                             muffled <- TRUE
[13:20:17.702]                             break
[13:20:17.702]                           }
[13:20:17.702]                         }
[13:20:17.702]                       }
[13:20:17.702]                       invisible(muffled)
[13:20:17.702]                     }
[13:20:17.702]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.702]                   }
[13:20:17.702]                 }
[13:20:17.702]             }
[13:20:17.702]         }))
[13:20:17.702]     }, error = function(ex) {
[13:20:17.702]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.702]                 ...future.rng), started = ...future.startTime, 
[13:20:17.702]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.702]             version = "1.8"), class = "FutureResult")
[13:20:17.702]     }, finally = {
[13:20:17.702]         if (!identical(...future.workdir, getwd())) 
[13:20:17.702]             setwd(...future.workdir)
[13:20:17.702]         {
[13:20:17.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.702]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.702]             }
[13:20:17.702]             base::options(...future.oldOptions)
[13:20:17.702]             if (.Platform$OS.type == "windows") {
[13:20:17.702]                 old_names <- names(...future.oldEnvVars)
[13:20:17.702]                 envs <- base::Sys.getenv()
[13:20:17.702]                 names <- names(envs)
[13:20:17.702]                 common <- intersect(names, old_names)
[13:20:17.702]                 added <- setdiff(names, old_names)
[13:20:17.702]                 removed <- setdiff(old_names, names)
[13:20:17.702]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.702]                   envs[common]]
[13:20:17.702]                 NAMES <- toupper(changed)
[13:20:17.702]                 args <- list()
[13:20:17.702]                 for (kk in seq_along(NAMES)) {
[13:20:17.702]                   name <- changed[[kk]]
[13:20:17.702]                   NAME <- NAMES[[kk]]
[13:20:17.702]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.702]                     next
[13:20:17.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.702]                 }
[13:20:17.702]                 NAMES <- toupper(added)
[13:20:17.702]                 for (kk in seq_along(NAMES)) {
[13:20:17.702]                   name <- added[[kk]]
[13:20:17.702]                   NAME <- NAMES[[kk]]
[13:20:17.702]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.702]                     next
[13:20:17.702]                   args[[name]] <- ""
[13:20:17.702]                 }
[13:20:17.702]                 NAMES <- toupper(removed)
[13:20:17.702]                 for (kk in seq_along(NAMES)) {
[13:20:17.702]                   name <- removed[[kk]]
[13:20:17.702]                   NAME <- NAMES[[kk]]
[13:20:17.702]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.702]                     next
[13:20:17.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.702]                 }
[13:20:17.702]                 if (length(args) > 0) 
[13:20:17.702]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.702]             }
[13:20:17.702]             else {
[13:20:17.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.702]             }
[13:20:17.702]             {
[13:20:17.702]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.702]                   0L) {
[13:20:17.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.702]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.702]                   base::options(opts)
[13:20:17.702]                 }
[13:20:17.702]                 {
[13:20:17.702]                   {
[13:20:17.702]                     NULL
[13:20:17.702]                     RNGkind("Mersenne-Twister")
[13:20:17.702]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.702]                       inherits = FALSE)
[13:20:17.702]                   }
[13:20:17.702]                   options(future.plan = NULL)
[13:20:17.702]                   if (is.na(NA_character_)) 
[13:20:17.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.702]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.702]                   {
[13:20:17.702]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.702]                     if (!future$lazy) 
[13:20:17.702]                       future <- run(future)
[13:20:17.702]                     invisible(future)
[13:20:17.702]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.702]                 }
[13:20:17.702]             }
[13:20:17.702]         }
[13:20:17.702]     })
[13:20:17.702]     if (TRUE) {
[13:20:17.702]         base::sink(type = "output", split = FALSE)
[13:20:17.702]         if (TRUE) {
[13:20:17.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.702]         }
[13:20:17.702]         else {
[13:20:17.702]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.702]         }
[13:20:17.702]         base::close(...future.stdout)
[13:20:17.702]         ...future.stdout <- NULL
[13:20:17.702]     }
[13:20:17.702]     ...future.result$conditions <- ...future.conditions
[13:20:17.702]     ...future.result$finished <- base::Sys.time()
[13:20:17.702]     ...future.result
[13:20:17.702] }
[13:20:17.705] plan(): Setting new future strategy stack:
[13:20:17.705] List of future strategies:
[13:20:17.705] 1. sequential:
[13:20:17.705]    - args: function (..., envir = parent.frame())
[13:20:17.705]    - tweaked: FALSE
[13:20:17.705]    - call: NULL
[13:20:17.706] plan(): nbrOfWorkers() = 1
[13:20:17.707] plan(): Setting new future strategy stack:
[13:20:17.707] List of future strategies:
[13:20:17.707] 1. sequential:
[13:20:17.707]    - args: function (..., envir = parent.frame())
[13:20:17.707]    - tweaked: FALSE
[13:20:17.707]    - call: plan(strategy)
[13:20:17.708] plan(): nbrOfWorkers() = 1
[13:20:17.708] SequentialFuture started (and completed)
[13:20:17.708] - Launch lazy future ... done
[13:20:17.708] run() for ‘SequentialFuture’ ... done
[13:20:17.709] getGlobalsAndPackages() ...
[13:20:17.709] Searching for globals...
[13:20:17.710] - globals found: [1] ‘{’
[13:20:17.710] Searching for globals ... DONE
[13:20:17.710] Resolving globals: FALSE
[13:20:17.710] 
[13:20:17.710] 
[13:20:17.711] getGlobalsAndPackages() ... DONE
[13:20:17.711] run() for ‘Future’ ...
[13:20:17.711] - state: ‘created’
[13:20:17.711] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.712] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.712] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.712]   - Field: ‘label’
[13:20:17.712]   - Field: ‘local’
[13:20:17.712]   - Field: ‘owner’
[13:20:17.712]   - Field: ‘envir’
[13:20:17.712]   - Field: ‘packages’
[13:20:17.713]   - Field: ‘gc’
[13:20:17.713]   - Field: ‘conditions’
[13:20:17.713]   - Field: ‘expr’
[13:20:17.713]   - Field: ‘uuid’
[13:20:17.713]   - Field: ‘seed’
[13:20:17.713]   - Field: ‘version’
[13:20:17.713]   - Field: ‘result’
[13:20:17.714]   - Field: ‘asynchronous’
[13:20:17.714]   - Field: ‘calls’
[13:20:17.714]   - Field: ‘globals’
[13:20:17.714]   - Field: ‘stdout’
[13:20:17.714]   - Field: ‘earlySignal’
[13:20:17.714]   - Field: ‘lazy’
[13:20:17.714]   - Field: ‘state’
[13:20:17.715] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.715] - Launch lazy future ...
[13:20:17.715] Packages needed by the future expression (n = 0): <none>
[13:20:17.715] Packages needed by future strategies (n = 0): <none>
[13:20:17.716] {
[13:20:17.716]     {
[13:20:17.716]         {
[13:20:17.716]             ...future.startTime <- base::Sys.time()
[13:20:17.716]             {
[13:20:17.716]                 {
[13:20:17.716]                   {
[13:20:17.716]                     base::local({
[13:20:17.716]                       has_future <- base::requireNamespace("future", 
[13:20:17.716]                         quietly = TRUE)
[13:20:17.716]                       if (has_future) {
[13:20:17.716]                         ns <- base::getNamespace("future")
[13:20:17.716]                         version <- ns[[".package"]][["version"]]
[13:20:17.716]                         if (is.null(version)) 
[13:20:17.716]                           version <- utils::packageVersion("future")
[13:20:17.716]                       }
[13:20:17.716]                       else {
[13:20:17.716]                         version <- NULL
[13:20:17.716]                       }
[13:20:17.716]                       if (!has_future || version < "1.8.0") {
[13:20:17.716]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.716]                           "", base::R.version$version.string), 
[13:20:17.716]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.716]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.716]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.716]                             "release", "version")], collapse = " "), 
[13:20:17.716]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.716]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.716]                           info)
[13:20:17.716]                         info <- base::paste(info, collapse = "; ")
[13:20:17.716]                         if (!has_future) {
[13:20:17.716]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.716]                             info)
[13:20:17.716]                         }
[13:20:17.716]                         else {
[13:20:17.716]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.716]                             info, version)
[13:20:17.716]                         }
[13:20:17.716]                         base::stop(msg)
[13:20:17.716]                       }
[13:20:17.716]                     })
[13:20:17.716]                   }
[13:20:17.716]                   options(future.plan = NULL)
[13:20:17.716]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.716]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.716]                 }
[13:20:17.716]                 ...future.workdir <- getwd()
[13:20:17.716]             }
[13:20:17.716]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.716]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.716]         }
[13:20:17.716]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.716]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.716]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.716]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.716]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.716]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.716]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.716]             base::names(...future.oldOptions))
[13:20:17.716]     }
[13:20:17.716]     if (FALSE) {
[13:20:17.716]     }
[13:20:17.716]     else {
[13:20:17.716]         if (TRUE) {
[13:20:17.716]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.716]                 open = "w")
[13:20:17.716]         }
[13:20:17.716]         else {
[13:20:17.716]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.716]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.716]         }
[13:20:17.716]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.716]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.716]             base::sink(type = "output", split = FALSE)
[13:20:17.716]             base::close(...future.stdout)
[13:20:17.716]         }, add = TRUE)
[13:20:17.716]     }
[13:20:17.716]     ...future.frame <- base::sys.nframe()
[13:20:17.716]     ...future.conditions <- base::list()
[13:20:17.716]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.716]     if (FALSE) {
[13:20:17.716]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.716]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.716]     }
[13:20:17.716]     ...future.result <- base::tryCatch({
[13:20:17.716]         base::withCallingHandlers({
[13:20:17.716]             ...future.value <- base::withVisible(base::local({
[13:20:17.716]                 4
[13:20:17.716]             }))
[13:20:17.716]             future::FutureResult(value = ...future.value$value, 
[13:20:17.716]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.716]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.716]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.716]                     ...future.globalenv.names))
[13:20:17.716]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.716]         }, condition = base::local({
[13:20:17.716]             c <- base::c
[13:20:17.716]             inherits <- base::inherits
[13:20:17.716]             invokeRestart <- base::invokeRestart
[13:20:17.716]             length <- base::length
[13:20:17.716]             list <- base::list
[13:20:17.716]             seq.int <- base::seq.int
[13:20:17.716]             signalCondition <- base::signalCondition
[13:20:17.716]             sys.calls <- base::sys.calls
[13:20:17.716]             `[[` <- base::`[[`
[13:20:17.716]             `+` <- base::`+`
[13:20:17.716]             `<<-` <- base::`<<-`
[13:20:17.716]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.716]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.716]                   3L)]
[13:20:17.716]             }
[13:20:17.716]             function(cond) {
[13:20:17.716]                 is_error <- inherits(cond, "error")
[13:20:17.716]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.716]                   NULL)
[13:20:17.716]                 if (is_error) {
[13:20:17.716]                   sessionInformation <- function() {
[13:20:17.716]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.716]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.716]                       search = base::search(), system = base::Sys.info())
[13:20:17.716]                   }
[13:20:17.716]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.716]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.716]                     cond$call), session = sessionInformation(), 
[13:20:17.716]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.716]                   signalCondition(cond)
[13:20:17.716]                 }
[13:20:17.716]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.716]                 "immediateCondition"))) {
[13:20:17.716]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.716]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.716]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.716]                   if (TRUE && !signal) {
[13:20:17.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.716]                     {
[13:20:17.716]                       inherits <- base::inherits
[13:20:17.716]                       invokeRestart <- base::invokeRestart
[13:20:17.716]                       is.null <- base::is.null
[13:20:17.716]                       muffled <- FALSE
[13:20:17.716]                       if (inherits(cond, "message")) {
[13:20:17.716]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.716]                         if (muffled) 
[13:20:17.716]                           invokeRestart("muffleMessage")
[13:20:17.716]                       }
[13:20:17.716]                       else if (inherits(cond, "warning")) {
[13:20:17.716]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.716]                         if (muffled) 
[13:20:17.716]                           invokeRestart("muffleWarning")
[13:20:17.716]                       }
[13:20:17.716]                       else if (inherits(cond, "condition")) {
[13:20:17.716]                         if (!is.null(pattern)) {
[13:20:17.716]                           computeRestarts <- base::computeRestarts
[13:20:17.716]                           grepl <- base::grepl
[13:20:17.716]                           restarts <- computeRestarts(cond)
[13:20:17.716]                           for (restart in restarts) {
[13:20:17.716]                             name <- restart$name
[13:20:17.716]                             if (is.null(name)) 
[13:20:17.716]                               next
[13:20:17.716]                             if (!grepl(pattern, name)) 
[13:20:17.716]                               next
[13:20:17.716]                             invokeRestart(restart)
[13:20:17.716]                             muffled <- TRUE
[13:20:17.716]                             break
[13:20:17.716]                           }
[13:20:17.716]                         }
[13:20:17.716]                       }
[13:20:17.716]                       invisible(muffled)
[13:20:17.716]                     }
[13:20:17.716]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.716]                   }
[13:20:17.716]                 }
[13:20:17.716]                 else {
[13:20:17.716]                   if (TRUE) {
[13:20:17.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.716]                     {
[13:20:17.716]                       inherits <- base::inherits
[13:20:17.716]                       invokeRestart <- base::invokeRestart
[13:20:17.716]                       is.null <- base::is.null
[13:20:17.716]                       muffled <- FALSE
[13:20:17.716]                       if (inherits(cond, "message")) {
[13:20:17.716]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.716]                         if (muffled) 
[13:20:17.716]                           invokeRestart("muffleMessage")
[13:20:17.716]                       }
[13:20:17.716]                       else if (inherits(cond, "warning")) {
[13:20:17.716]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.716]                         if (muffled) 
[13:20:17.716]                           invokeRestart("muffleWarning")
[13:20:17.716]                       }
[13:20:17.716]                       else if (inherits(cond, "condition")) {
[13:20:17.716]                         if (!is.null(pattern)) {
[13:20:17.716]                           computeRestarts <- base::computeRestarts
[13:20:17.716]                           grepl <- base::grepl
[13:20:17.716]                           restarts <- computeRestarts(cond)
[13:20:17.716]                           for (restart in restarts) {
[13:20:17.716]                             name <- restart$name
[13:20:17.716]                             if (is.null(name)) 
[13:20:17.716]                               next
[13:20:17.716]                             if (!grepl(pattern, name)) 
[13:20:17.716]                               next
[13:20:17.716]                             invokeRestart(restart)
[13:20:17.716]                             muffled <- TRUE
[13:20:17.716]                             break
[13:20:17.716]                           }
[13:20:17.716]                         }
[13:20:17.716]                       }
[13:20:17.716]                       invisible(muffled)
[13:20:17.716]                     }
[13:20:17.716]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.716]                   }
[13:20:17.716]                 }
[13:20:17.716]             }
[13:20:17.716]         }))
[13:20:17.716]     }, error = function(ex) {
[13:20:17.716]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.716]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.716]                 ...future.rng), started = ...future.startTime, 
[13:20:17.716]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.716]             version = "1.8"), class = "FutureResult")
[13:20:17.716]     }, finally = {
[13:20:17.716]         if (!identical(...future.workdir, getwd())) 
[13:20:17.716]             setwd(...future.workdir)
[13:20:17.716]         {
[13:20:17.716]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.716]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.716]             }
[13:20:17.716]             base::options(...future.oldOptions)
[13:20:17.716]             if (.Platform$OS.type == "windows") {
[13:20:17.716]                 old_names <- names(...future.oldEnvVars)
[13:20:17.716]                 envs <- base::Sys.getenv()
[13:20:17.716]                 names <- names(envs)
[13:20:17.716]                 common <- intersect(names, old_names)
[13:20:17.716]                 added <- setdiff(names, old_names)
[13:20:17.716]                 removed <- setdiff(old_names, names)
[13:20:17.716]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.716]                   envs[common]]
[13:20:17.716]                 NAMES <- toupper(changed)
[13:20:17.716]                 args <- list()
[13:20:17.716]                 for (kk in seq_along(NAMES)) {
[13:20:17.716]                   name <- changed[[kk]]
[13:20:17.716]                   NAME <- NAMES[[kk]]
[13:20:17.716]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.716]                     next
[13:20:17.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.716]                 }
[13:20:17.716]                 NAMES <- toupper(added)
[13:20:17.716]                 for (kk in seq_along(NAMES)) {
[13:20:17.716]                   name <- added[[kk]]
[13:20:17.716]                   NAME <- NAMES[[kk]]
[13:20:17.716]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.716]                     next
[13:20:17.716]                   args[[name]] <- ""
[13:20:17.716]                 }
[13:20:17.716]                 NAMES <- toupper(removed)
[13:20:17.716]                 for (kk in seq_along(NAMES)) {
[13:20:17.716]                   name <- removed[[kk]]
[13:20:17.716]                   NAME <- NAMES[[kk]]
[13:20:17.716]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.716]                     next
[13:20:17.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.716]                 }
[13:20:17.716]                 if (length(args) > 0) 
[13:20:17.716]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.716]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.716]             }
[13:20:17.716]             else {
[13:20:17.716]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.716]             }
[13:20:17.716]             {
[13:20:17.716]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.716]                   0L) {
[13:20:17.716]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.716]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.716]                   base::options(opts)
[13:20:17.716]                 }
[13:20:17.716]                 {
[13:20:17.716]                   {
[13:20:17.716]                     NULL
[13:20:17.716]                     RNGkind("Mersenne-Twister")
[13:20:17.716]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.716]                       inherits = FALSE)
[13:20:17.716]                   }
[13:20:17.716]                   options(future.plan = NULL)
[13:20:17.716]                   if (is.na(NA_character_)) 
[13:20:17.716]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.716]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.716]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.716]                   {
[13:20:17.716]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.716]                     if (!future$lazy) 
[13:20:17.716]                       future <- run(future)
[13:20:17.716]                     invisible(future)
[13:20:17.716]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.716]                 }
[13:20:17.716]             }
[13:20:17.716]         }
[13:20:17.716]     })
[13:20:17.716]     if (TRUE) {
[13:20:17.716]         base::sink(type = "output", split = FALSE)
[13:20:17.716]         if (TRUE) {
[13:20:17.716]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.716]         }
[13:20:17.716]         else {
[13:20:17.716]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.716]         }
[13:20:17.716]         base::close(...future.stdout)
[13:20:17.716]         ...future.stdout <- NULL
[13:20:17.716]     }
[13:20:17.716]     ...future.result$conditions <- ...future.conditions
[13:20:17.716]     ...future.result$finished <- base::Sys.time()
[13:20:17.716]     ...future.result
[13:20:17.716] }
[13:20:17.718] plan(): Setting new future strategy stack:
[13:20:17.718] List of future strategies:
[13:20:17.718] 1. sequential:
[13:20:17.718]    - args: function (..., envir = parent.frame())
[13:20:17.718]    - tweaked: FALSE
[13:20:17.718]    - call: NULL
[13:20:17.719] plan(): nbrOfWorkers() = 1
[13:20:17.720] plan(): Setting new future strategy stack:
[13:20:17.720] List of future strategies:
[13:20:17.720] 1. sequential:
[13:20:17.720]    - args: function (..., envir = parent.frame())
[13:20:17.720]    - tweaked: FALSE
[13:20:17.720]    - call: plan(strategy)
[13:20:17.721] plan(): nbrOfWorkers() = 1
[13:20:17.721] SequentialFuture started (and completed)
[13:20:17.721] - Launch lazy future ... done
[13:20:17.721] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[13:20:17.722] getGlobalsAndPackages() ...
[13:20:17.724] Searching for globals...
[13:20:17.725] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.725] Searching for globals ... DONE
[13:20:17.725] Resolving globals: FALSE
[13:20:17.726] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.727] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.727] - globals: [1] ‘a’
[13:20:17.727] 
[13:20:17.727] getGlobalsAndPackages() ... DONE
[13:20:17.728] run() for ‘Future’ ...
[13:20:17.728] - state: ‘created’
[13:20:17.728] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.728] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.729] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.729]   - Field: ‘label’
[13:20:17.729]   - Field: ‘local’
[13:20:17.729]   - Field: ‘owner’
[13:20:17.729]   - Field: ‘envir’
[13:20:17.729]   - Field: ‘packages’
[13:20:17.729]   - Field: ‘gc’
[13:20:17.730]   - Field: ‘conditions’
[13:20:17.730]   - Field: ‘expr’
[13:20:17.730]   - Field: ‘uuid’
[13:20:17.730]   - Field: ‘seed’
[13:20:17.730]   - Field: ‘version’
[13:20:17.730]   - Field: ‘result’
[13:20:17.730]   - Field: ‘asynchronous’
[13:20:17.731]   - Field: ‘calls’
[13:20:17.731]   - Field: ‘globals’
[13:20:17.731]   - Field: ‘stdout’
[13:20:17.731]   - Field: ‘earlySignal’
[13:20:17.731]   - Field: ‘lazy’
[13:20:17.731]   - Field: ‘state’
[13:20:17.731] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.731] - Launch lazy future ...
[13:20:17.732] Packages needed by the future expression (n = 0): <none>
[13:20:17.732] Packages needed by future strategies (n = 0): <none>
[13:20:17.732] {
[13:20:17.732]     {
[13:20:17.732]         {
[13:20:17.732]             ...future.startTime <- base::Sys.time()
[13:20:17.732]             {
[13:20:17.732]                 {
[13:20:17.732]                   {
[13:20:17.732]                     base::local({
[13:20:17.732]                       has_future <- base::requireNamespace("future", 
[13:20:17.732]                         quietly = TRUE)
[13:20:17.732]                       if (has_future) {
[13:20:17.732]                         ns <- base::getNamespace("future")
[13:20:17.732]                         version <- ns[[".package"]][["version"]]
[13:20:17.732]                         if (is.null(version)) 
[13:20:17.732]                           version <- utils::packageVersion("future")
[13:20:17.732]                       }
[13:20:17.732]                       else {
[13:20:17.732]                         version <- NULL
[13:20:17.732]                       }
[13:20:17.732]                       if (!has_future || version < "1.8.0") {
[13:20:17.732]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.732]                           "", base::R.version$version.string), 
[13:20:17.732]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.732]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.732]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.732]                             "release", "version")], collapse = " "), 
[13:20:17.732]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.732]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.732]                           info)
[13:20:17.732]                         info <- base::paste(info, collapse = "; ")
[13:20:17.732]                         if (!has_future) {
[13:20:17.732]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.732]                             info)
[13:20:17.732]                         }
[13:20:17.732]                         else {
[13:20:17.732]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.732]                             info, version)
[13:20:17.732]                         }
[13:20:17.732]                         base::stop(msg)
[13:20:17.732]                       }
[13:20:17.732]                     })
[13:20:17.732]                   }
[13:20:17.732]                   options(future.plan = NULL)
[13:20:17.732]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.732]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.732]                 }
[13:20:17.732]                 ...future.workdir <- getwd()
[13:20:17.732]             }
[13:20:17.732]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.732]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.732]         }
[13:20:17.732]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.732]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.732]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.732]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.732]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.732]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.732]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.732]             base::names(...future.oldOptions))
[13:20:17.732]     }
[13:20:17.732]     if (FALSE) {
[13:20:17.732]     }
[13:20:17.732]     else {
[13:20:17.732]         if (TRUE) {
[13:20:17.732]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.732]                 open = "w")
[13:20:17.732]         }
[13:20:17.732]         else {
[13:20:17.732]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.732]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.732]         }
[13:20:17.732]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.732]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.732]             base::sink(type = "output", split = FALSE)
[13:20:17.732]             base::close(...future.stdout)
[13:20:17.732]         }, add = TRUE)
[13:20:17.732]     }
[13:20:17.732]     ...future.frame <- base::sys.nframe()
[13:20:17.732]     ...future.conditions <- base::list()
[13:20:17.732]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.732]     if (FALSE) {
[13:20:17.732]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.732]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.732]     }
[13:20:17.732]     ...future.result <- base::tryCatch({
[13:20:17.732]         base::withCallingHandlers({
[13:20:17.732]             ...future.value <- base::withVisible(base::local({
[13:20:17.732]                 2 * a
[13:20:17.732]             }))
[13:20:17.732]             future::FutureResult(value = ...future.value$value, 
[13:20:17.732]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.732]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.732]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.732]                     ...future.globalenv.names))
[13:20:17.732]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.732]         }, condition = base::local({
[13:20:17.732]             c <- base::c
[13:20:17.732]             inherits <- base::inherits
[13:20:17.732]             invokeRestart <- base::invokeRestart
[13:20:17.732]             length <- base::length
[13:20:17.732]             list <- base::list
[13:20:17.732]             seq.int <- base::seq.int
[13:20:17.732]             signalCondition <- base::signalCondition
[13:20:17.732]             sys.calls <- base::sys.calls
[13:20:17.732]             `[[` <- base::`[[`
[13:20:17.732]             `+` <- base::`+`
[13:20:17.732]             `<<-` <- base::`<<-`
[13:20:17.732]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.732]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.732]                   3L)]
[13:20:17.732]             }
[13:20:17.732]             function(cond) {
[13:20:17.732]                 is_error <- inherits(cond, "error")
[13:20:17.732]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.732]                   NULL)
[13:20:17.732]                 if (is_error) {
[13:20:17.732]                   sessionInformation <- function() {
[13:20:17.732]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.732]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.732]                       search = base::search(), system = base::Sys.info())
[13:20:17.732]                   }
[13:20:17.732]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.732]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.732]                     cond$call), session = sessionInformation(), 
[13:20:17.732]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.732]                   signalCondition(cond)
[13:20:17.732]                 }
[13:20:17.732]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.732]                 "immediateCondition"))) {
[13:20:17.732]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.732]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.732]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.732]                   if (TRUE && !signal) {
[13:20:17.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.732]                     {
[13:20:17.732]                       inherits <- base::inherits
[13:20:17.732]                       invokeRestart <- base::invokeRestart
[13:20:17.732]                       is.null <- base::is.null
[13:20:17.732]                       muffled <- FALSE
[13:20:17.732]                       if (inherits(cond, "message")) {
[13:20:17.732]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.732]                         if (muffled) 
[13:20:17.732]                           invokeRestart("muffleMessage")
[13:20:17.732]                       }
[13:20:17.732]                       else if (inherits(cond, "warning")) {
[13:20:17.732]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.732]                         if (muffled) 
[13:20:17.732]                           invokeRestart("muffleWarning")
[13:20:17.732]                       }
[13:20:17.732]                       else if (inherits(cond, "condition")) {
[13:20:17.732]                         if (!is.null(pattern)) {
[13:20:17.732]                           computeRestarts <- base::computeRestarts
[13:20:17.732]                           grepl <- base::grepl
[13:20:17.732]                           restarts <- computeRestarts(cond)
[13:20:17.732]                           for (restart in restarts) {
[13:20:17.732]                             name <- restart$name
[13:20:17.732]                             if (is.null(name)) 
[13:20:17.732]                               next
[13:20:17.732]                             if (!grepl(pattern, name)) 
[13:20:17.732]                               next
[13:20:17.732]                             invokeRestart(restart)
[13:20:17.732]                             muffled <- TRUE
[13:20:17.732]                             break
[13:20:17.732]                           }
[13:20:17.732]                         }
[13:20:17.732]                       }
[13:20:17.732]                       invisible(muffled)
[13:20:17.732]                     }
[13:20:17.732]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.732]                   }
[13:20:17.732]                 }
[13:20:17.732]                 else {
[13:20:17.732]                   if (TRUE) {
[13:20:17.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.732]                     {
[13:20:17.732]                       inherits <- base::inherits
[13:20:17.732]                       invokeRestart <- base::invokeRestart
[13:20:17.732]                       is.null <- base::is.null
[13:20:17.732]                       muffled <- FALSE
[13:20:17.732]                       if (inherits(cond, "message")) {
[13:20:17.732]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.732]                         if (muffled) 
[13:20:17.732]                           invokeRestart("muffleMessage")
[13:20:17.732]                       }
[13:20:17.732]                       else if (inherits(cond, "warning")) {
[13:20:17.732]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.732]                         if (muffled) 
[13:20:17.732]                           invokeRestart("muffleWarning")
[13:20:17.732]                       }
[13:20:17.732]                       else if (inherits(cond, "condition")) {
[13:20:17.732]                         if (!is.null(pattern)) {
[13:20:17.732]                           computeRestarts <- base::computeRestarts
[13:20:17.732]                           grepl <- base::grepl
[13:20:17.732]                           restarts <- computeRestarts(cond)
[13:20:17.732]                           for (restart in restarts) {
[13:20:17.732]                             name <- restart$name
[13:20:17.732]                             if (is.null(name)) 
[13:20:17.732]                               next
[13:20:17.732]                             if (!grepl(pattern, name)) 
[13:20:17.732]                               next
[13:20:17.732]                             invokeRestart(restart)
[13:20:17.732]                             muffled <- TRUE
[13:20:17.732]                             break
[13:20:17.732]                           }
[13:20:17.732]                         }
[13:20:17.732]                       }
[13:20:17.732]                       invisible(muffled)
[13:20:17.732]                     }
[13:20:17.732]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.732]                   }
[13:20:17.732]                 }
[13:20:17.732]             }
[13:20:17.732]         }))
[13:20:17.732]     }, error = function(ex) {
[13:20:17.732]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.732]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.732]                 ...future.rng), started = ...future.startTime, 
[13:20:17.732]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.732]             version = "1.8"), class = "FutureResult")
[13:20:17.732]     }, finally = {
[13:20:17.732]         if (!identical(...future.workdir, getwd())) 
[13:20:17.732]             setwd(...future.workdir)
[13:20:17.732]         {
[13:20:17.732]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.732]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.732]             }
[13:20:17.732]             base::options(...future.oldOptions)
[13:20:17.732]             if (.Platform$OS.type == "windows") {
[13:20:17.732]                 old_names <- names(...future.oldEnvVars)
[13:20:17.732]                 envs <- base::Sys.getenv()
[13:20:17.732]                 names <- names(envs)
[13:20:17.732]                 common <- intersect(names, old_names)
[13:20:17.732]                 added <- setdiff(names, old_names)
[13:20:17.732]                 removed <- setdiff(old_names, names)
[13:20:17.732]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.732]                   envs[common]]
[13:20:17.732]                 NAMES <- toupper(changed)
[13:20:17.732]                 args <- list()
[13:20:17.732]                 for (kk in seq_along(NAMES)) {
[13:20:17.732]                   name <- changed[[kk]]
[13:20:17.732]                   NAME <- NAMES[[kk]]
[13:20:17.732]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.732]                     next
[13:20:17.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.732]                 }
[13:20:17.732]                 NAMES <- toupper(added)
[13:20:17.732]                 for (kk in seq_along(NAMES)) {
[13:20:17.732]                   name <- added[[kk]]
[13:20:17.732]                   NAME <- NAMES[[kk]]
[13:20:17.732]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.732]                     next
[13:20:17.732]                   args[[name]] <- ""
[13:20:17.732]                 }
[13:20:17.732]                 NAMES <- toupper(removed)
[13:20:17.732]                 for (kk in seq_along(NAMES)) {
[13:20:17.732]                   name <- removed[[kk]]
[13:20:17.732]                   NAME <- NAMES[[kk]]
[13:20:17.732]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.732]                     next
[13:20:17.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.732]                 }
[13:20:17.732]                 if (length(args) > 0) 
[13:20:17.732]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.732]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.732]             }
[13:20:17.732]             else {
[13:20:17.732]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.732]             }
[13:20:17.732]             {
[13:20:17.732]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.732]                   0L) {
[13:20:17.732]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.732]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.732]                   base::options(opts)
[13:20:17.732]                 }
[13:20:17.732]                 {
[13:20:17.732]                   {
[13:20:17.732]                     NULL
[13:20:17.732]                     RNGkind("Mersenne-Twister")
[13:20:17.732]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.732]                       inherits = FALSE)
[13:20:17.732]                   }
[13:20:17.732]                   options(future.plan = NULL)
[13:20:17.732]                   if (is.na(NA_character_)) 
[13:20:17.732]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.732]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.732]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.732]                   {
[13:20:17.732]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.732]                     if (!future$lazy) 
[13:20:17.732]                       future <- run(future)
[13:20:17.732]                     invisible(future)
[13:20:17.732]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.732]                 }
[13:20:17.732]             }
[13:20:17.732]         }
[13:20:17.732]     })
[13:20:17.732]     if (TRUE) {
[13:20:17.732]         base::sink(type = "output", split = FALSE)
[13:20:17.732]         if (TRUE) {
[13:20:17.732]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.732]         }
[13:20:17.732]         else {
[13:20:17.732]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.732]         }
[13:20:17.732]         base::close(...future.stdout)
[13:20:17.732]         ...future.stdout <- NULL
[13:20:17.732]     }
[13:20:17.732]     ...future.result$conditions <- ...future.conditions
[13:20:17.732]     ...future.result$finished <- base::Sys.time()
[13:20:17.732]     ...future.result
[13:20:17.732] }
[13:20:17.735] assign_globals() ...
[13:20:17.735] List of 1
[13:20:17.735]  $ a: num 1
[13:20:17.735]  - attr(*, "where")=List of 1
[13:20:17.735]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.735]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.735]  - attr(*, "resolved")= logi FALSE
[13:20:17.735]  - attr(*, "total_size")= num 56
[13:20:17.735]  - attr(*, "already-done")= logi TRUE
[13:20:17.742] - copied ‘a’ to environment
[13:20:17.743] assign_globals() ... done
[13:20:17.743] plan(): Setting new future strategy stack:
[13:20:17.743] List of future strategies:
[13:20:17.743] 1. sequential:
[13:20:17.743]    - args: function (..., envir = parent.frame())
[13:20:17.743]    - tweaked: FALSE
[13:20:17.743]    - call: NULL
[13:20:17.744] plan(): nbrOfWorkers() = 1
[13:20:17.745] plan(): Setting new future strategy stack:
[13:20:17.745] List of future strategies:
[13:20:17.745] 1. sequential:
[13:20:17.745]    - args: function (..., envir = parent.frame())
[13:20:17.745]    - tweaked: FALSE
[13:20:17.745]    - call: plan(strategy)
[13:20:17.745] plan(): nbrOfWorkers() = 1
[13:20:17.745] SequentialFuture started (and completed)
[13:20:17.746] - Launch lazy future ... done
[13:20:17.746] run() for ‘SequentialFuture’ ... done
[13:20:17.746] getGlobalsAndPackages() ...
[13:20:17.746] Searching for globals...
[13:20:17.747] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.748] Searching for globals ... DONE
[13:20:17.748] Resolving globals: FALSE
[13:20:17.748] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.749] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.749] - globals: [1] ‘a’
[13:20:17.749] 
[13:20:17.749] getGlobalsAndPackages() ... DONE
[13:20:17.750] run() for ‘Future’ ...
[13:20:17.750] - state: ‘created’
[13:20:17.750] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.750] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.750] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.751]   - Field: ‘label’
[13:20:17.751]   - Field: ‘local’
[13:20:17.751]   - Field: ‘owner’
[13:20:17.751]   - Field: ‘envir’
[13:20:17.751]   - Field: ‘packages’
[13:20:17.751]   - Field: ‘gc’
[13:20:17.751]   - Field: ‘conditions’
[13:20:17.752]   - Field: ‘expr’
[13:20:17.752]   - Field: ‘uuid’
[13:20:17.752]   - Field: ‘seed’
[13:20:17.752]   - Field: ‘version’
[13:20:17.752]   - Field: ‘result’
[13:20:17.752]   - Field: ‘asynchronous’
[13:20:17.752]   - Field: ‘calls’
[13:20:17.752]   - Field: ‘globals’
[13:20:17.753]   - Field: ‘stdout’
[13:20:17.753]   - Field: ‘earlySignal’
[13:20:17.753]   - Field: ‘lazy’
[13:20:17.753]   - Field: ‘state’
[13:20:17.753] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.753] - Launch lazy future ...
[13:20:17.754] Packages needed by the future expression (n = 0): <none>
[13:20:17.754] Packages needed by future strategies (n = 0): <none>
[13:20:17.754] {
[13:20:17.754]     {
[13:20:17.754]         {
[13:20:17.754]             ...future.startTime <- base::Sys.time()
[13:20:17.754]             {
[13:20:17.754]                 {
[13:20:17.754]                   {
[13:20:17.754]                     base::local({
[13:20:17.754]                       has_future <- base::requireNamespace("future", 
[13:20:17.754]                         quietly = TRUE)
[13:20:17.754]                       if (has_future) {
[13:20:17.754]                         ns <- base::getNamespace("future")
[13:20:17.754]                         version <- ns[[".package"]][["version"]]
[13:20:17.754]                         if (is.null(version)) 
[13:20:17.754]                           version <- utils::packageVersion("future")
[13:20:17.754]                       }
[13:20:17.754]                       else {
[13:20:17.754]                         version <- NULL
[13:20:17.754]                       }
[13:20:17.754]                       if (!has_future || version < "1.8.0") {
[13:20:17.754]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.754]                           "", base::R.version$version.string), 
[13:20:17.754]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.754]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.754]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.754]                             "release", "version")], collapse = " "), 
[13:20:17.754]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.754]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.754]                           info)
[13:20:17.754]                         info <- base::paste(info, collapse = "; ")
[13:20:17.754]                         if (!has_future) {
[13:20:17.754]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.754]                             info)
[13:20:17.754]                         }
[13:20:17.754]                         else {
[13:20:17.754]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.754]                             info, version)
[13:20:17.754]                         }
[13:20:17.754]                         base::stop(msg)
[13:20:17.754]                       }
[13:20:17.754]                     })
[13:20:17.754]                   }
[13:20:17.754]                   options(future.plan = NULL)
[13:20:17.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.754]                 }
[13:20:17.754]                 ...future.workdir <- getwd()
[13:20:17.754]             }
[13:20:17.754]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.754]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.754]         }
[13:20:17.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.754]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.754]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.754]             base::names(...future.oldOptions))
[13:20:17.754]     }
[13:20:17.754]     if (FALSE) {
[13:20:17.754]     }
[13:20:17.754]     else {
[13:20:17.754]         if (TRUE) {
[13:20:17.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.754]                 open = "w")
[13:20:17.754]         }
[13:20:17.754]         else {
[13:20:17.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.754]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.754]         }
[13:20:17.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.754]             base::sink(type = "output", split = FALSE)
[13:20:17.754]             base::close(...future.stdout)
[13:20:17.754]         }, add = TRUE)
[13:20:17.754]     }
[13:20:17.754]     ...future.frame <- base::sys.nframe()
[13:20:17.754]     ...future.conditions <- base::list()
[13:20:17.754]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.754]     if (FALSE) {
[13:20:17.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.754]     }
[13:20:17.754]     ...future.result <- base::tryCatch({
[13:20:17.754]         base::withCallingHandlers({
[13:20:17.754]             ...future.value <- base::withVisible(base::local({
[13:20:17.754]                 2 * a
[13:20:17.754]             }))
[13:20:17.754]             future::FutureResult(value = ...future.value$value, 
[13:20:17.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.754]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.754]                     ...future.globalenv.names))
[13:20:17.754]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.754]         }, condition = base::local({
[13:20:17.754]             c <- base::c
[13:20:17.754]             inherits <- base::inherits
[13:20:17.754]             invokeRestart <- base::invokeRestart
[13:20:17.754]             length <- base::length
[13:20:17.754]             list <- base::list
[13:20:17.754]             seq.int <- base::seq.int
[13:20:17.754]             signalCondition <- base::signalCondition
[13:20:17.754]             sys.calls <- base::sys.calls
[13:20:17.754]             `[[` <- base::`[[`
[13:20:17.754]             `+` <- base::`+`
[13:20:17.754]             `<<-` <- base::`<<-`
[13:20:17.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.754]                   3L)]
[13:20:17.754]             }
[13:20:17.754]             function(cond) {
[13:20:17.754]                 is_error <- inherits(cond, "error")
[13:20:17.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.754]                   NULL)
[13:20:17.754]                 if (is_error) {
[13:20:17.754]                   sessionInformation <- function() {
[13:20:17.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.754]                       search = base::search(), system = base::Sys.info())
[13:20:17.754]                   }
[13:20:17.754]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.754]                     cond$call), session = sessionInformation(), 
[13:20:17.754]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.754]                   signalCondition(cond)
[13:20:17.754]                 }
[13:20:17.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.754]                 "immediateCondition"))) {
[13:20:17.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.754]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.754]                   if (TRUE && !signal) {
[13:20:17.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.754]                     {
[13:20:17.754]                       inherits <- base::inherits
[13:20:17.754]                       invokeRestart <- base::invokeRestart
[13:20:17.754]                       is.null <- base::is.null
[13:20:17.754]                       muffled <- FALSE
[13:20:17.754]                       if (inherits(cond, "message")) {
[13:20:17.754]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.754]                         if (muffled) 
[13:20:17.754]                           invokeRestart("muffleMessage")
[13:20:17.754]                       }
[13:20:17.754]                       else if (inherits(cond, "warning")) {
[13:20:17.754]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.754]                         if (muffled) 
[13:20:17.754]                           invokeRestart("muffleWarning")
[13:20:17.754]                       }
[13:20:17.754]                       else if (inherits(cond, "condition")) {
[13:20:17.754]                         if (!is.null(pattern)) {
[13:20:17.754]                           computeRestarts <- base::computeRestarts
[13:20:17.754]                           grepl <- base::grepl
[13:20:17.754]                           restarts <- computeRestarts(cond)
[13:20:17.754]                           for (restart in restarts) {
[13:20:17.754]                             name <- restart$name
[13:20:17.754]                             if (is.null(name)) 
[13:20:17.754]                               next
[13:20:17.754]                             if (!grepl(pattern, name)) 
[13:20:17.754]                               next
[13:20:17.754]                             invokeRestart(restart)
[13:20:17.754]                             muffled <- TRUE
[13:20:17.754]                             break
[13:20:17.754]                           }
[13:20:17.754]                         }
[13:20:17.754]                       }
[13:20:17.754]                       invisible(muffled)
[13:20:17.754]                     }
[13:20:17.754]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.754]                   }
[13:20:17.754]                 }
[13:20:17.754]                 else {
[13:20:17.754]                   if (TRUE) {
[13:20:17.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.754]                     {
[13:20:17.754]                       inherits <- base::inherits
[13:20:17.754]                       invokeRestart <- base::invokeRestart
[13:20:17.754]                       is.null <- base::is.null
[13:20:17.754]                       muffled <- FALSE
[13:20:17.754]                       if (inherits(cond, "message")) {
[13:20:17.754]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.754]                         if (muffled) 
[13:20:17.754]                           invokeRestart("muffleMessage")
[13:20:17.754]                       }
[13:20:17.754]                       else if (inherits(cond, "warning")) {
[13:20:17.754]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.754]                         if (muffled) 
[13:20:17.754]                           invokeRestart("muffleWarning")
[13:20:17.754]                       }
[13:20:17.754]                       else if (inherits(cond, "condition")) {
[13:20:17.754]                         if (!is.null(pattern)) {
[13:20:17.754]                           computeRestarts <- base::computeRestarts
[13:20:17.754]                           grepl <- base::grepl
[13:20:17.754]                           restarts <- computeRestarts(cond)
[13:20:17.754]                           for (restart in restarts) {
[13:20:17.754]                             name <- restart$name
[13:20:17.754]                             if (is.null(name)) 
[13:20:17.754]                               next
[13:20:17.754]                             if (!grepl(pattern, name)) 
[13:20:17.754]                               next
[13:20:17.754]                             invokeRestart(restart)
[13:20:17.754]                             muffled <- TRUE
[13:20:17.754]                             break
[13:20:17.754]                           }
[13:20:17.754]                         }
[13:20:17.754]                       }
[13:20:17.754]                       invisible(muffled)
[13:20:17.754]                     }
[13:20:17.754]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.754]                   }
[13:20:17.754]                 }
[13:20:17.754]             }
[13:20:17.754]         }))
[13:20:17.754]     }, error = function(ex) {
[13:20:17.754]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.754]                 ...future.rng), started = ...future.startTime, 
[13:20:17.754]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.754]             version = "1.8"), class = "FutureResult")
[13:20:17.754]     }, finally = {
[13:20:17.754]         if (!identical(...future.workdir, getwd())) 
[13:20:17.754]             setwd(...future.workdir)
[13:20:17.754]         {
[13:20:17.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.754]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.754]             }
[13:20:17.754]             base::options(...future.oldOptions)
[13:20:17.754]             if (.Platform$OS.type == "windows") {
[13:20:17.754]                 old_names <- names(...future.oldEnvVars)
[13:20:17.754]                 envs <- base::Sys.getenv()
[13:20:17.754]                 names <- names(envs)
[13:20:17.754]                 common <- intersect(names, old_names)
[13:20:17.754]                 added <- setdiff(names, old_names)
[13:20:17.754]                 removed <- setdiff(old_names, names)
[13:20:17.754]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.754]                   envs[common]]
[13:20:17.754]                 NAMES <- toupper(changed)
[13:20:17.754]                 args <- list()
[13:20:17.754]                 for (kk in seq_along(NAMES)) {
[13:20:17.754]                   name <- changed[[kk]]
[13:20:17.754]                   NAME <- NAMES[[kk]]
[13:20:17.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.754]                     next
[13:20:17.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.754]                 }
[13:20:17.754]                 NAMES <- toupper(added)
[13:20:17.754]                 for (kk in seq_along(NAMES)) {
[13:20:17.754]                   name <- added[[kk]]
[13:20:17.754]                   NAME <- NAMES[[kk]]
[13:20:17.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.754]                     next
[13:20:17.754]                   args[[name]] <- ""
[13:20:17.754]                 }
[13:20:17.754]                 NAMES <- toupper(removed)
[13:20:17.754]                 for (kk in seq_along(NAMES)) {
[13:20:17.754]                   name <- removed[[kk]]
[13:20:17.754]                   NAME <- NAMES[[kk]]
[13:20:17.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.754]                     next
[13:20:17.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.754]                 }
[13:20:17.754]                 if (length(args) > 0) 
[13:20:17.754]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.754]             }
[13:20:17.754]             else {
[13:20:17.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.754]             }
[13:20:17.754]             {
[13:20:17.754]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.754]                   0L) {
[13:20:17.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.754]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.754]                   base::options(opts)
[13:20:17.754]                 }
[13:20:17.754]                 {
[13:20:17.754]                   {
[13:20:17.754]                     NULL
[13:20:17.754]                     RNGkind("Mersenne-Twister")
[13:20:17.754]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.754]                       inherits = FALSE)
[13:20:17.754]                   }
[13:20:17.754]                   options(future.plan = NULL)
[13:20:17.754]                   if (is.na(NA_character_)) 
[13:20:17.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.754]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.754]                   {
[13:20:17.754]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.754]                     if (!future$lazy) 
[13:20:17.754]                       future <- run(future)
[13:20:17.754]                     invisible(future)
[13:20:17.754]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.754]                 }
[13:20:17.754]             }
[13:20:17.754]         }
[13:20:17.754]     })
[13:20:17.754]     if (TRUE) {
[13:20:17.754]         base::sink(type = "output", split = FALSE)
[13:20:17.754]         if (TRUE) {
[13:20:17.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.754]         }
[13:20:17.754]         else {
[13:20:17.754]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.754]         }
[13:20:17.754]         base::close(...future.stdout)
[13:20:17.754]         ...future.stdout <- NULL
[13:20:17.754]     }
[13:20:17.754]     ...future.result$conditions <- ...future.conditions
[13:20:17.754]     ...future.result$finished <- base::Sys.time()
[13:20:17.754]     ...future.result
[13:20:17.754] }
[13:20:17.757] assign_globals() ...
[13:20:17.757] List of 1
[13:20:17.757]  $ a: num 1
[13:20:17.757]  - attr(*, "where")=List of 1
[13:20:17.757]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.757]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.757]  - attr(*, "resolved")= logi FALSE
[13:20:17.757]  - attr(*, "total_size")= num 56
[13:20:17.757]  - attr(*, "already-done")= logi TRUE
[13:20:17.760] - copied ‘a’ to environment
[13:20:17.761] assign_globals() ... done
[13:20:17.761] plan(): Setting new future strategy stack:
[13:20:17.761] List of future strategies:
[13:20:17.761] 1. sequential:
[13:20:17.761]    - args: function (..., envir = parent.frame())
[13:20:17.761]    - tweaked: FALSE
[13:20:17.761]    - call: NULL
[13:20:17.762] plan(): nbrOfWorkers() = 1
[13:20:17.763] plan(): Setting new future strategy stack:
[13:20:17.763] List of future strategies:
[13:20:17.763] 1. sequential:
[13:20:17.763]    - args: function (..., envir = parent.frame())
[13:20:17.763]    - tweaked: FALSE
[13:20:17.763]    - call: plan(strategy)
[13:20:17.763] plan(): nbrOfWorkers() = 1
[13:20:17.763] SequentialFuture started (and completed)
[13:20:17.764] - Launch lazy future ... done
[13:20:17.764] run() for ‘SequentialFuture’ ... done
[13:20:17.764] getGlobalsAndPackages() ...
[13:20:17.764] Searching for globals...
[13:20:17.765] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.766] Searching for globals ... DONE
[13:20:17.766] Resolving globals: FALSE
[13:20:17.766] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.767] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.767] - globals: [1] ‘a’
[13:20:17.767] 
[13:20:17.767] getGlobalsAndPackages() ... DONE
[13:20:17.768] run() for ‘Future’ ...
[13:20:17.768] - state: ‘created’
[13:20:17.768] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.768] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.768] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.769]   - Field: ‘label’
[13:20:17.769]   - Field: ‘local’
[13:20:17.769]   - Field: ‘owner’
[13:20:17.769]   - Field: ‘envir’
[13:20:17.769]   - Field: ‘packages’
[13:20:17.769]   - Field: ‘gc’
[13:20:17.772]   - Field: ‘conditions’
[13:20:17.772]   - Field: ‘expr’
[13:20:17.772]   - Field: ‘uuid’
[13:20:17.772]   - Field: ‘seed’
[13:20:17.772]   - Field: ‘version’
[13:20:17.773]   - Field: ‘result’
[13:20:17.773]   - Field: ‘asynchronous’
[13:20:17.773]   - Field: ‘calls’
[13:20:17.773]   - Field: ‘globals’
[13:20:17.773]   - Field: ‘stdout’
[13:20:17.773]   - Field: ‘earlySignal’
[13:20:17.773]   - Field: ‘lazy’
[13:20:17.773]   - Field: ‘state’
[13:20:17.774] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.774] - Launch lazy future ...
[13:20:17.774] Packages needed by the future expression (n = 0): <none>
[13:20:17.774] Packages needed by future strategies (n = 0): <none>
[13:20:17.775] {
[13:20:17.775]     {
[13:20:17.775]         {
[13:20:17.775]             ...future.startTime <- base::Sys.time()
[13:20:17.775]             {
[13:20:17.775]                 {
[13:20:17.775]                   {
[13:20:17.775]                     base::local({
[13:20:17.775]                       has_future <- base::requireNamespace("future", 
[13:20:17.775]                         quietly = TRUE)
[13:20:17.775]                       if (has_future) {
[13:20:17.775]                         ns <- base::getNamespace("future")
[13:20:17.775]                         version <- ns[[".package"]][["version"]]
[13:20:17.775]                         if (is.null(version)) 
[13:20:17.775]                           version <- utils::packageVersion("future")
[13:20:17.775]                       }
[13:20:17.775]                       else {
[13:20:17.775]                         version <- NULL
[13:20:17.775]                       }
[13:20:17.775]                       if (!has_future || version < "1.8.0") {
[13:20:17.775]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.775]                           "", base::R.version$version.string), 
[13:20:17.775]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.775]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.775]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.775]                             "release", "version")], collapse = " "), 
[13:20:17.775]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.775]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.775]                           info)
[13:20:17.775]                         info <- base::paste(info, collapse = "; ")
[13:20:17.775]                         if (!has_future) {
[13:20:17.775]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.775]                             info)
[13:20:17.775]                         }
[13:20:17.775]                         else {
[13:20:17.775]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.775]                             info, version)
[13:20:17.775]                         }
[13:20:17.775]                         base::stop(msg)
[13:20:17.775]                       }
[13:20:17.775]                     })
[13:20:17.775]                   }
[13:20:17.775]                   options(future.plan = NULL)
[13:20:17.775]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.775]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.775]                 }
[13:20:17.775]                 ...future.workdir <- getwd()
[13:20:17.775]             }
[13:20:17.775]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.775]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.775]         }
[13:20:17.775]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.775]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.775]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.775]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.775]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.775]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.775]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.775]             base::names(...future.oldOptions))
[13:20:17.775]     }
[13:20:17.775]     if (FALSE) {
[13:20:17.775]     }
[13:20:17.775]     else {
[13:20:17.775]         if (TRUE) {
[13:20:17.775]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.775]                 open = "w")
[13:20:17.775]         }
[13:20:17.775]         else {
[13:20:17.775]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.775]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.775]         }
[13:20:17.775]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.775]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.775]             base::sink(type = "output", split = FALSE)
[13:20:17.775]             base::close(...future.stdout)
[13:20:17.775]         }, add = TRUE)
[13:20:17.775]     }
[13:20:17.775]     ...future.frame <- base::sys.nframe()
[13:20:17.775]     ...future.conditions <- base::list()
[13:20:17.775]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.775]     if (FALSE) {
[13:20:17.775]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.775]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.775]     }
[13:20:17.775]     ...future.result <- base::tryCatch({
[13:20:17.775]         base::withCallingHandlers({
[13:20:17.775]             ...future.value <- base::withVisible(base::local({
[13:20:17.775]                 2 * a
[13:20:17.775]             }))
[13:20:17.775]             future::FutureResult(value = ...future.value$value, 
[13:20:17.775]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.775]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.775]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.775]                     ...future.globalenv.names))
[13:20:17.775]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.775]         }, condition = base::local({
[13:20:17.775]             c <- base::c
[13:20:17.775]             inherits <- base::inherits
[13:20:17.775]             invokeRestart <- base::invokeRestart
[13:20:17.775]             length <- base::length
[13:20:17.775]             list <- base::list
[13:20:17.775]             seq.int <- base::seq.int
[13:20:17.775]             signalCondition <- base::signalCondition
[13:20:17.775]             sys.calls <- base::sys.calls
[13:20:17.775]             `[[` <- base::`[[`
[13:20:17.775]             `+` <- base::`+`
[13:20:17.775]             `<<-` <- base::`<<-`
[13:20:17.775]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.775]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.775]                   3L)]
[13:20:17.775]             }
[13:20:17.775]             function(cond) {
[13:20:17.775]                 is_error <- inherits(cond, "error")
[13:20:17.775]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.775]                   NULL)
[13:20:17.775]                 if (is_error) {
[13:20:17.775]                   sessionInformation <- function() {
[13:20:17.775]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.775]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.775]                       search = base::search(), system = base::Sys.info())
[13:20:17.775]                   }
[13:20:17.775]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.775]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.775]                     cond$call), session = sessionInformation(), 
[13:20:17.775]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.775]                   signalCondition(cond)
[13:20:17.775]                 }
[13:20:17.775]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.775]                 "immediateCondition"))) {
[13:20:17.775]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.775]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.775]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.775]                   if (TRUE && !signal) {
[13:20:17.775]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.775]                     {
[13:20:17.775]                       inherits <- base::inherits
[13:20:17.775]                       invokeRestart <- base::invokeRestart
[13:20:17.775]                       is.null <- base::is.null
[13:20:17.775]                       muffled <- FALSE
[13:20:17.775]                       if (inherits(cond, "message")) {
[13:20:17.775]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.775]                         if (muffled) 
[13:20:17.775]                           invokeRestart("muffleMessage")
[13:20:17.775]                       }
[13:20:17.775]                       else if (inherits(cond, "warning")) {
[13:20:17.775]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.775]                         if (muffled) 
[13:20:17.775]                           invokeRestart("muffleWarning")
[13:20:17.775]                       }
[13:20:17.775]                       else if (inherits(cond, "condition")) {
[13:20:17.775]                         if (!is.null(pattern)) {
[13:20:17.775]                           computeRestarts <- base::computeRestarts
[13:20:17.775]                           grepl <- base::grepl
[13:20:17.775]                           restarts <- computeRestarts(cond)
[13:20:17.775]                           for (restart in restarts) {
[13:20:17.775]                             name <- restart$name
[13:20:17.775]                             if (is.null(name)) 
[13:20:17.775]                               next
[13:20:17.775]                             if (!grepl(pattern, name)) 
[13:20:17.775]                               next
[13:20:17.775]                             invokeRestart(restart)
[13:20:17.775]                             muffled <- TRUE
[13:20:17.775]                             break
[13:20:17.775]                           }
[13:20:17.775]                         }
[13:20:17.775]                       }
[13:20:17.775]                       invisible(muffled)
[13:20:17.775]                     }
[13:20:17.775]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.775]                   }
[13:20:17.775]                 }
[13:20:17.775]                 else {
[13:20:17.775]                   if (TRUE) {
[13:20:17.775]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.775]                     {
[13:20:17.775]                       inherits <- base::inherits
[13:20:17.775]                       invokeRestart <- base::invokeRestart
[13:20:17.775]                       is.null <- base::is.null
[13:20:17.775]                       muffled <- FALSE
[13:20:17.775]                       if (inherits(cond, "message")) {
[13:20:17.775]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.775]                         if (muffled) 
[13:20:17.775]                           invokeRestart("muffleMessage")
[13:20:17.775]                       }
[13:20:17.775]                       else if (inherits(cond, "warning")) {
[13:20:17.775]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.775]                         if (muffled) 
[13:20:17.775]                           invokeRestart("muffleWarning")
[13:20:17.775]                       }
[13:20:17.775]                       else if (inherits(cond, "condition")) {
[13:20:17.775]                         if (!is.null(pattern)) {
[13:20:17.775]                           computeRestarts <- base::computeRestarts
[13:20:17.775]                           grepl <- base::grepl
[13:20:17.775]                           restarts <- computeRestarts(cond)
[13:20:17.775]                           for (restart in restarts) {
[13:20:17.775]                             name <- restart$name
[13:20:17.775]                             if (is.null(name)) 
[13:20:17.775]                               next
[13:20:17.775]                             if (!grepl(pattern, name)) 
[13:20:17.775]                               next
[13:20:17.775]                             invokeRestart(restart)
[13:20:17.775]                             muffled <- TRUE
[13:20:17.775]                             break
[13:20:17.775]                           }
[13:20:17.775]                         }
[13:20:17.775]                       }
[13:20:17.775]                       invisible(muffled)
[13:20:17.775]                     }
[13:20:17.775]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.775]                   }
[13:20:17.775]                 }
[13:20:17.775]             }
[13:20:17.775]         }))
[13:20:17.775]     }, error = function(ex) {
[13:20:17.775]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.775]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.775]                 ...future.rng), started = ...future.startTime, 
[13:20:17.775]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.775]             version = "1.8"), class = "FutureResult")
[13:20:17.775]     }, finally = {
[13:20:17.775]         if (!identical(...future.workdir, getwd())) 
[13:20:17.775]             setwd(...future.workdir)
[13:20:17.775]         {
[13:20:17.775]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.775]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.775]             }
[13:20:17.775]             base::options(...future.oldOptions)
[13:20:17.775]             if (.Platform$OS.type == "windows") {
[13:20:17.775]                 old_names <- names(...future.oldEnvVars)
[13:20:17.775]                 envs <- base::Sys.getenv()
[13:20:17.775]                 names <- names(envs)
[13:20:17.775]                 common <- intersect(names, old_names)
[13:20:17.775]                 added <- setdiff(names, old_names)
[13:20:17.775]                 removed <- setdiff(old_names, names)
[13:20:17.775]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.775]                   envs[common]]
[13:20:17.775]                 NAMES <- toupper(changed)
[13:20:17.775]                 args <- list()
[13:20:17.775]                 for (kk in seq_along(NAMES)) {
[13:20:17.775]                   name <- changed[[kk]]
[13:20:17.775]                   NAME <- NAMES[[kk]]
[13:20:17.775]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.775]                     next
[13:20:17.775]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.775]                 }
[13:20:17.775]                 NAMES <- toupper(added)
[13:20:17.775]                 for (kk in seq_along(NAMES)) {
[13:20:17.775]                   name <- added[[kk]]
[13:20:17.775]                   NAME <- NAMES[[kk]]
[13:20:17.775]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.775]                     next
[13:20:17.775]                   args[[name]] <- ""
[13:20:17.775]                 }
[13:20:17.775]                 NAMES <- toupper(removed)
[13:20:17.775]                 for (kk in seq_along(NAMES)) {
[13:20:17.775]                   name <- removed[[kk]]
[13:20:17.775]                   NAME <- NAMES[[kk]]
[13:20:17.775]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.775]                     next
[13:20:17.775]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.775]                 }
[13:20:17.775]                 if (length(args) > 0) 
[13:20:17.775]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.775]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.775]             }
[13:20:17.775]             else {
[13:20:17.775]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.775]             }
[13:20:17.775]             {
[13:20:17.775]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.775]                   0L) {
[13:20:17.775]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.775]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.775]                   base::options(opts)
[13:20:17.775]                 }
[13:20:17.775]                 {
[13:20:17.775]                   {
[13:20:17.775]                     NULL
[13:20:17.775]                     RNGkind("Mersenne-Twister")
[13:20:17.775]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.775]                       inherits = FALSE)
[13:20:17.775]                   }
[13:20:17.775]                   options(future.plan = NULL)
[13:20:17.775]                   if (is.na(NA_character_)) 
[13:20:17.775]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.775]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.775]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.775]                   {
[13:20:17.775]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.775]                     if (!future$lazy) 
[13:20:17.775]                       future <- run(future)
[13:20:17.775]                     invisible(future)
[13:20:17.775]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.775]                 }
[13:20:17.775]             }
[13:20:17.775]         }
[13:20:17.775]     })
[13:20:17.775]     if (TRUE) {
[13:20:17.775]         base::sink(type = "output", split = FALSE)
[13:20:17.775]         if (TRUE) {
[13:20:17.775]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.775]         }
[13:20:17.775]         else {
[13:20:17.775]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.775]         }
[13:20:17.775]         base::close(...future.stdout)
[13:20:17.775]         ...future.stdout <- NULL
[13:20:17.775]     }
[13:20:17.775]     ...future.result$conditions <- ...future.conditions
[13:20:17.775]     ...future.result$finished <- base::Sys.time()
[13:20:17.775]     ...future.result
[13:20:17.775] }
[13:20:17.777] assign_globals() ...
[13:20:17.778] List of 1
[13:20:17.778]  $ a: num 1
[13:20:17.778]  - attr(*, "where")=List of 1
[13:20:17.778]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.778]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.778]  - attr(*, "resolved")= logi FALSE
[13:20:17.778]  - attr(*, "total_size")= num 56
[13:20:17.778]  - attr(*, "already-done")= logi TRUE
[13:20:17.781] - copied ‘a’ to environment
[13:20:17.781] assign_globals() ... done
[13:20:17.782] plan(): Setting new future strategy stack:
[13:20:17.782] List of future strategies:
[13:20:17.782] 1. sequential:
[13:20:17.782]    - args: function (..., envir = parent.frame())
[13:20:17.782]    - tweaked: FALSE
[13:20:17.782]    - call: NULL
[13:20:17.782] plan(): nbrOfWorkers() = 1
[13:20:17.783] plan(): Setting new future strategy stack:
[13:20:17.784] List of future strategies:
[13:20:17.784] 1. sequential:
[13:20:17.784]    - args: function (..., envir = parent.frame())
[13:20:17.784]    - tweaked: FALSE
[13:20:17.784]    - call: plan(strategy)
[13:20:17.784] plan(): nbrOfWorkers() = 1
[13:20:17.784] SequentialFuture started (and completed)
[13:20:17.785] - Launch lazy future ... done
[13:20:17.785] run() for ‘SequentialFuture’ ... done
[13:20:17.785] getGlobalsAndPackages() ...
[13:20:17.785] Searching for globals...
[13:20:17.786] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.787] Searching for globals ... DONE
[13:20:17.787] Resolving globals: FALSE
[13:20:17.787] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.788] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.788] - globals: [1] ‘a’
[13:20:17.788] 
[13:20:17.788] getGlobalsAndPackages() ... DONE
[13:20:17.789] run() for ‘Future’ ...
[13:20:17.789] - state: ‘created’
[13:20:17.789] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.789] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.789] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.790]   - Field: ‘label’
[13:20:17.790]   - Field: ‘local’
[13:20:17.790]   - Field: ‘owner’
[13:20:17.790]   - Field: ‘envir’
[13:20:17.790]   - Field: ‘packages’
[13:20:17.790]   - Field: ‘gc’
[13:20:17.790]   - Field: ‘conditions’
[13:20:17.791]   - Field: ‘expr’
[13:20:17.791]   - Field: ‘uuid’
[13:20:17.791]   - Field: ‘seed’
[13:20:17.791]   - Field: ‘version’
[13:20:17.791]   - Field: ‘result’
[13:20:17.791]   - Field: ‘asynchronous’
[13:20:17.791]   - Field: ‘calls’
[13:20:17.791]   - Field: ‘globals’
[13:20:17.792]   - Field: ‘stdout’
[13:20:17.792]   - Field: ‘earlySignal’
[13:20:17.792]   - Field: ‘lazy’
[13:20:17.792]   - Field: ‘state’
[13:20:17.792] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.792] - Launch lazy future ...
[13:20:17.793] Packages needed by the future expression (n = 0): <none>
[13:20:17.793] Packages needed by future strategies (n = 0): <none>
[13:20:17.793] {
[13:20:17.793]     {
[13:20:17.793]         {
[13:20:17.793]             ...future.startTime <- base::Sys.time()
[13:20:17.793]             {
[13:20:17.793]                 {
[13:20:17.793]                   {
[13:20:17.793]                     base::local({
[13:20:17.793]                       has_future <- base::requireNamespace("future", 
[13:20:17.793]                         quietly = TRUE)
[13:20:17.793]                       if (has_future) {
[13:20:17.793]                         ns <- base::getNamespace("future")
[13:20:17.793]                         version <- ns[[".package"]][["version"]]
[13:20:17.793]                         if (is.null(version)) 
[13:20:17.793]                           version <- utils::packageVersion("future")
[13:20:17.793]                       }
[13:20:17.793]                       else {
[13:20:17.793]                         version <- NULL
[13:20:17.793]                       }
[13:20:17.793]                       if (!has_future || version < "1.8.0") {
[13:20:17.793]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.793]                           "", base::R.version$version.string), 
[13:20:17.793]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.793]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.793]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.793]                             "release", "version")], collapse = " "), 
[13:20:17.793]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.793]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.793]                           info)
[13:20:17.793]                         info <- base::paste(info, collapse = "; ")
[13:20:17.793]                         if (!has_future) {
[13:20:17.793]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.793]                             info)
[13:20:17.793]                         }
[13:20:17.793]                         else {
[13:20:17.793]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.793]                             info, version)
[13:20:17.793]                         }
[13:20:17.793]                         base::stop(msg)
[13:20:17.793]                       }
[13:20:17.793]                     })
[13:20:17.793]                   }
[13:20:17.793]                   options(future.plan = NULL)
[13:20:17.793]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.793]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.793]                 }
[13:20:17.793]                 ...future.workdir <- getwd()
[13:20:17.793]             }
[13:20:17.793]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.793]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.793]         }
[13:20:17.793]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.793]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.793]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.793]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.793]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.793]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.793]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.793]             base::names(...future.oldOptions))
[13:20:17.793]     }
[13:20:17.793]     if (FALSE) {
[13:20:17.793]     }
[13:20:17.793]     else {
[13:20:17.793]         if (TRUE) {
[13:20:17.793]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.793]                 open = "w")
[13:20:17.793]         }
[13:20:17.793]         else {
[13:20:17.793]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.793]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.793]         }
[13:20:17.793]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.793]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.793]             base::sink(type = "output", split = FALSE)
[13:20:17.793]             base::close(...future.stdout)
[13:20:17.793]         }, add = TRUE)
[13:20:17.793]     }
[13:20:17.793]     ...future.frame <- base::sys.nframe()
[13:20:17.793]     ...future.conditions <- base::list()
[13:20:17.793]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.793]     if (FALSE) {
[13:20:17.793]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.793]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.793]     }
[13:20:17.793]     ...future.result <- base::tryCatch({
[13:20:17.793]         base::withCallingHandlers({
[13:20:17.793]             ...future.value <- base::withVisible(base::local({
[13:20:17.793]                 2 * a
[13:20:17.793]             }))
[13:20:17.793]             future::FutureResult(value = ...future.value$value, 
[13:20:17.793]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.793]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.793]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.793]                     ...future.globalenv.names))
[13:20:17.793]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.793]         }, condition = base::local({
[13:20:17.793]             c <- base::c
[13:20:17.793]             inherits <- base::inherits
[13:20:17.793]             invokeRestart <- base::invokeRestart
[13:20:17.793]             length <- base::length
[13:20:17.793]             list <- base::list
[13:20:17.793]             seq.int <- base::seq.int
[13:20:17.793]             signalCondition <- base::signalCondition
[13:20:17.793]             sys.calls <- base::sys.calls
[13:20:17.793]             `[[` <- base::`[[`
[13:20:17.793]             `+` <- base::`+`
[13:20:17.793]             `<<-` <- base::`<<-`
[13:20:17.793]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.793]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.793]                   3L)]
[13:20:17.793]             }
[13:20:17.793]             function(cond) {
[13:20:17.793]                 is_error <- inherits(cond, "error")
[13:20:17.793]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.793]                   NULL)
[13:20:17.793]                 if (is_error) {
[13:20:17.793]                   sessionInformation <- function() {
[13:20:17.793]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.793]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.793]                       search = base::search(), system = base::Sys.info())
[13:20:17.793]                   }
[13:20:17.793]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.793]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.793]                     cond$call), session = sessionInformation(), 
[13:20:17.793]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.793]                   signalCondition(cond)
[13:20:17.793]                 }
[13:20:17.793]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.793]                 "immediateCondition"))) {
[13:20:17.793]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.793]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.793]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.793]                   if (TRUE && !signal) {
[13:20:17.793]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.793]                     {
[13:20:17.793]                       inherits <- base::inherits
[13:20:17.793]                       invokeRestart <- base::invokeRestart
[13:20:17.793]                       is.null <- base::is.null
[13:20:17.793]                       muffled <- FALSE
[13:20:17.793]                       if (inherits(cond, "message")) {
[13:20:17.793]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.793]                         if (muffled) 
[13:20:17.793]                           invokeRestart("muffleMessage")
[13:20:17.793]                       }
[13:20:17.793]                       else if (inherits(cond, "warning")) {
[13:20:17.793]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.793]                         if (muffled) 
[13:20:17.793]                           invokeRestart("muffleWarning")
[13:20:17.793]                       }
[13:20:17.793]                       else if (inherits(cond, "condition")) {
[13:20:17.793]                         if (!is.null(pattern)) {
[13:20:17.793]                           computeRestarts <- base::computeRestarts
[13:20:17.793]                           grepl <- base::grepl
[13:20:17.793]                           restarts <- computeRestarts(cond)
[13:20:17.793]                           for (restart in restarts) {
[13:20:17.793]                             name <- restart$name
[13:20:17.793]                             if (is.null(name)) 
[13:20:17.793]                               next
[13:20:17.793]                             if (!grepl(pattern, name)) 
[13:20:17.793]                               next
[13:20:17.793]                             invokeRestart(restart)
[13:20:17.793]                             muffled <- TRUE
[13:20:17.793]                             break
[13:20:17.793]                           }
[13:20:17.793]                         }
[13:20:17.793]                       }
[13:20:17.793]                       invisible(muffled)
[13:20:17.793]                     }
[13:20:17.793]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.793]                   }
[13:20:17.793]                 }
[13:20:17.793]                 else {
[13:20:17.793]                   if (TRUE) {
[13:20:17.793]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.793]                     {
[13:20:17.793]                       inherits <- base::inherits
[13:20:17.793]                       invokeRestart <- base::invokeRestart
[13:20:17.793]                       is.null <- base::is.null
[13:20:17.793]                       muffled <- FALSE
[13:20:17.793]                       if (inherits(cond, "message")) {
[13:20:17.793]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.793]                         if (muffled) 
[13:20:17.793]                           invokeRestart("muffleMessage")
[13:20:17.793]                       }
[13:20:17.793]                       else if (inherits(cond, "warning")) {
[13:20:17.793]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.793]                         if (muffled) 
[13:20:17.793]                           invokeRestart("muffleWarning")
[13:20:17.793]                       }
[13:20:17.793]                       else if (inherits(cond, "condition")) {
[13:20:17.793]                         if (!is.null(pattern)) {
[13:20:17.793]                           computeRestarts <- base::computeRestarts
[13:20:17.793]                           grepl <- base::grepl
[13:20:17.793]                           restarts <- computeRestarts(cond)
[13:20:17.793]                           for (restart in restarts) {
[13:20:17.793]                             name <- restart$name
[13:20:17.793]                             if (is.null(name)) 
[13:20:17.793]                               next
[13:20:17.793]                             if (!grepl(pattern, name)) 
[13:20:17.793]                               next
[13:20:17.793]                             invokeRestart(restart)
[13:20:17.793]                             muffled <- TRUE
[13:20:17.793]                             break
[13:20:17.793]                           }
[13:20:17.793]                         }
[13:20:17.793]                       }
[13:20:17.793]                       invisible(muffled)
[13:20:17.793]                     }
[13:20:17.793]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.793]                   }
[13:20:17.793]                 }
[13:20:17.793]             }
[13:20:17.793]         }))
[13:20:17.793]     }, error = function(ex) {
[13:20:17.793]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.793]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.793]                 ...future.rng), started = ...future.startTime, 
[13:20:17.793]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.793]             version = "1.8"), class = "FutureResult")
[13:20:17.793]     }, finally = {
[13:20:17.793]         if (!identical(...future.workdir, getwd())) 
[13:20:17.793]             setwd(...future.workdir)
[13:20:17.793]         {
[13:20:17.793]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.793]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.793]             }
[13:20:17.793]             base::options(...future.oldOptions)
[13:20:17.793]             if (.Platform$OS.type == "windows") {
[13:20:17.793]                 old_names <- names(...future.oldEnvVars)
[13:20:17.793]                 envs <- base::Sys.getenv()
[13:20:17.793]                 names <- names(envs)
[13:20:17.793]                 common <- intersect(names, old_names)
[13:20:17.793]                 added <- setdiff(names, old_names)
[13:20:17.793]                 removed <- setdiff(old_names, names)
[13:20:17.793]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.793]                   envs[common]]
[13:20:17.793]                 NAMES <- toupper(changed)
[13:20:17.793]                 args <- list()
[13:20:17.793]                 for (kk in seq_along(NAMES)) {
[13:20:17.793]                   name <- changed[[kk]]
[13:20:17.793]                   NAME <- NAMES[[kk]]
[13:20:17.793]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.793]                     next
[13:20:17.793]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.793]                 }
[13:20:17.793]                 NAMES <- toupper(added)
[13:20:17.793]                 for (kk in seq_along(NAMES)) {
[13:20:17.793]                   name <- added[[kk]]
[13:20:17.793]                   NAME <- NAMES[[kk]]
[13:20:17.793]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.793]                     next
[13:20:17.793]                   args[[name]] <- ""
[13:20:17.793]                 }
[13:20:17.793]                 NAMES <- toupper(removed)
[13:20:17.793]                 for (kk in seq_along(NAMES)) {
[13:20:17.793]                   name <- removed[[kk]]
[13:20:17.793]                   NAME <- NAMES[[kk]]
[13:20:17.793]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.793]                     next
[13:20:17.793]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.793]                 }
[13:20:17.793]                 if (length(args) > 0) 
[13:20:17.793]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.793]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.793]             }
[13:20:17.793]             else {
[13:20:17.793]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.793]             }
[13:20:17.793]             {
[13:20:17.793]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.793]                   0L) {
[13:20:17.793]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.793]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.793]                   base::options(opts)
[13:20:17.793]                 }
[13:20:17.793]                 {
[13:20:17.793]                   {
[13:20:17.793]                     NULL
[13:20:17.793]                     RNGkind("Mersenne-Twister")
[13:20:17.793]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.793]                       inherits = FALSE)
[13:20:17.793]                   }
[13:20:17.793]                   options(future.plan = NULL)
[13:20:17.793]                   if (is.na(NA_character_)) 
[13:20:17.793]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.793]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.793]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.793]                   {
[13:20:17.793]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.793]                     if (!future$lazy) 
[13:20:17.793]                       future <- run(future)
[13:20:17.793]                     invisible(future)
[13:20:17.793]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.793]                 }
[13:20:17.793]             }
[13:20:17.793]         }
[13:20:17.793]     })
[13:20:17.793]     if (TRUE) {
[13:20:17.793]         base::sink(type = "output", split = FALSE)
[13:20:17.793]         if (TRUE) {
[13:20:17.793]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.793]         }
[13:20:17.793]         else {
[13:20:17.793]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.793]         }
[13:20:17.793]         base::close(...future.stdout)
[13:20:17.793]         ...future.stdout <- NULL
[13:20:17.793]     }
[13:20:17.793]     ...future.result$conditions <- ...future.conditions
[13:20:17.793]     ...future.result$finished <- base::Sys.time()
[13:20:17.793]     ...future.result
[13:20:17.793] }
[13:20:17.796] assign_globals() ...
[13:20:17.796] List of 1
[13:20:17.796]  $ a: num 1
[13:20:17.796]  - attr(*, "where")=List of 1
[13:20:17.796]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.796]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.796]  - attr(*, "resolved")= logi FALSE
[13:20:17.796]  - attr(*, "total_size")= num 56
[13:20:17.796]  - attr(*, "already-done")= logi TRUE
[13:20:17.800] - copied ‘a’ to environment
[13:20:17.800] assign_globals() ... done
[13:20:17.800] plan(): Setting new future strategy stack:
[13:20:17.800] List of future strategies:
[13:20:17.800] 1. sequential:
[13:20:17.800]    - args: function (..., envir = parent.frame())
[13:20:17.800]    - tweaked: FALSE
[13:20:17.800]    - call: NULL
[13:20:17.801] plan(): nbrOfWorkers() = 1
[13:20:17.802] plan(): Setting new future strategy stack:
[13:20:17.802] List of future strategies:
[13:20:17.802] 1. sequential:
[13:20:17.802]    - args: function (..., envir = parent.frame())
[13:20:17.802]    - tweaked: FALSE
[13:20:17.802]    - call: plan(strategy)
[13:20:17.802] plan(): nbrOfWorkers() = 1
[13:20:17.803] SequentialFuture started (and completed)
[13:20:17.803] - Launch lazy future ... done
[13:20:17.803] run() for ‘SequentialFuture’ ... done
[13:20:17.803] getGlobalsAndPackages() ...
[13:20:17.804] Searching for globals...
[13:20:17.805] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.805] Searching for globals ... DONE
[13:20:17.805] Resolving globals: FALSE
[13:20:17.805] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.806] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.806] - globals: [1] ‘a’
[13:20:17.806] 
[13:20:17.806] getGlobalsAndPackages() ... DONE
[13:20:17.807] run() for ‘Future’ ...
[13:20:17.807] - state: ‘created’
[13:20:17.807] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:17.807] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:17.808] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:17.808]   - Field: ‘label’
[13:20:17.808]   - Field: ‘local’
[13:20:17.808]   - Field: ‘owner’
[13:20:17.808]   - Field: ‘envir’
[13:20:17.808]   - Field: ‘packages’
[13:20:17.809]   - Field: ‘gc’
[13:20:17.809]   - Field: ‘conditions’
[13:20:17.809]   - Field: ‘expr’
[13:20:17.809]   - Field: ‘uuid’
[13:20:17.809]   - Field: ‘seed’
[13:20:17.809]   - Field: ‘version’
[13:20:17.809]   - Field: ‘result’
[13:20:17.810]   - Field: ‘asynchronous’
[13:20:17.810]   - Field: ‘calls’
[13:20:17.810]   - Field: ‘globals’
[13:20:17.810]   - Field: ‘stdout’
[13:20:17.810]   - Field: ‘earlySignal’
[13:20:17.810]   - Field: ‘lazy’
[13:20:17.810]   - Field: ‘state’
[13:20:17.810] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:17.811] - Launch lazy future ...
[13:20:17.811] Packages needed by the future expression (n = 0): <none>
[13:20:17.811] Packages needed by future strategies (n = 0): <none>
[13:20:17.811] {
[13:20:17.811]     {
[13:20:17.811]         {
[13:20:17.811]             ...future.startTime <- base::Sys.time()
[13:20:17.811]             {
[13:20:17.811]                 {
[13:20:17.811]                   {
[13:20:17.811]                     base::local({
[13:20:17.811]                       has_future <- base::requireNamespace("future", 
[13:20:17.811]                         quietly = TRUE)
[13:20:17.811]                       if (has_future) {
[13:20:17.811]                         ns <- base::getNamespace("future")
[13:20:17.811]                         version <- ns[[".package"]][["version"]]
[13:20:17.811]                         if (is.null(version)) 
[13:20:17.811]                           version <- utils::packageVersion("future")
[13:20:17.811]                       }
[13:20:17.811]                       else {
[13:20:17.811]                         version <- NULL
[13:20:17.811]                       }
[13:20:17.811]                       if (!has_future || version < "1.8.0") {
[13:20:17.811]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.811]                           "", base::R.version$version.string), 
[13:20:17.811]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:17.811]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.811]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.811]                             "release", "version")], collapse = " "), 
[13:20:17.811]                           hostname = base::Sys.info()[["nodename"]])
[13:20:17.811]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.811]                           info)
[13:20:17.811]                         info <- base::paste(info, collapse = "; ")
[13:20:17.811]                         if (!has_future) {
[13:20:17.811]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.811]                             info)
[13:20:17.811]                         }
[13:20:17.811]                         else {
[13:20:17.811]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.811]                             info, version)
[13:20:17.811]                         }
[13:20:17.811]                         base::stop(msg)
[13:20:17.811]                       }
[13:20:17.811]                     })
[13:20:17.811]                   }
[13:20:17.811]                   options(future.plan = NULL)
[13:20:17.811]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.811]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.811]                 }
[13:20:17.811]                 ...future.workdir <- getwd()
[13:20:17.811]             }
[13:20:17.811]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.811]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.811]         }
[13:20:17.811]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.811]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.811]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.811]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.811]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.811]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.811]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.811]             base::names(...future.oldOptions))
[13:20:17.811]     }
[13:20:17.811]     if (FALSE) {
[13:20:17.811]     }
[13:20:17.811]     else {
[13:20:17.811]         if (TRUE) {
[13:20:17.811]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.811]                 open = "w")
[13:20:17.811]         }
[13:20:17.811]         else {
[13:20:17.811]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.811]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.811]         }
[13:20:17.811]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.811]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.811]             base::sink(type = "output", split = FALSE)
[13:20:17.811]             base::close(...future.stdout)
[13:20:17.811]         }, add = TRUE)
[13:20:17.811]     }
[13:20:17.811]     ...future.frame <- base::sys.nframe()
[13:20:17.811]     ...future.conditions <- base::list()
[13:20:17.811]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.811]     if (FALSE) {
[13:20:17.811]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.811]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.811]     }
[13:20:17.811]     ...future.result <- base::tryCatch({
[13:20:17.811]         base::withCallingHandlers({
[13:20:17.811]             ...future.value <- base::withVisible(base::local({
[13:20:17.811]                 2 * a
[13:20:17.811]             }))
[13:20:17.811]             future::FutureResult(value = ...future.value$value, 
[13:20:17.811]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.811]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.811]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.811]                     ...future.globalenv.names))
[13:20:17.811]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.811]         }, condition = base::local({
[13:20:17.811]             c <- base::c
[13:20:17.811]             inherits <- base::inherits
[13:20:17.811]             invokeRestart <- base::invokeRestart
[13:20:17.811]             length <- base::length
[13:20:17.811]             list <- base::list
[13:20:17.811]             seq.int <- base::seq.int
[13:20:17.811]             signalCondition <- base::signalCondition
[13:20:17.811]             sys.calls <- base::sys.calls
[13:20:17.811]             `[[` <- base::`[[`
[13:20:17.811]             `+` <- base::`+`
[13:20:17.811]             `<<-` <- base::`<<-`
[13:20:17.811]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.811]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.811]                   3L)]
[13:20:17.811]             }
[13:20:17.811]             function(cond) {
[13:20:17.811]                 is_error <- inherits(cond, "error")
[13:20:17.811]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.811]                   NULL)
[13:20:17.811]                 if (is_error) {
[13:20:17.811]                   sessionInformation <- function() {
[13:20:17.811]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.811]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.811]                       search = base::search(), system = base::Sys.info())
[13:20:17.811]                   }
[13:20:17.811]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.811]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.811]                     cond$call), session = sessionInformation(), 
[13:20:17.811]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.811]                   signalCondition(cond)
[13:20:17.811]                 }
[13:20:17.811]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.811]                 "immediateCondition"))) {
[13:20:17.811]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.811]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.811]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.811]                   if (TRUE && !signal) {
[13:20:17.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.811]                     {
[13:20:17.811]                       inherits <- base::inherits
[13:20:17.811]                       invokeRestart <- base::invokeRestart
[13:20:17.811]                       is.null <- base::is.null
[13:20:17.811]                       muffled <- FALSE
[13:20:17.811]                       if (inherits(cond, "message")) {
[13:20:17.811]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.811]                         if (muffled) 
[13:20:17.811]                           invokeRestart("muffleMessage")
[13:20:17.811]                       }
[13:20:17.811]                       else if (inherits(cond, "warning")) {
[13:20:17.811]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.811]                         if (muffled) 
[13:20:17.811]                           invokeRestart("muffleWarning")
[13:20:17.811]                       }
[13:20:17.811]                       else if (inherits(cond, "condition")) {
[13:20:17.811]                         if (!is.null(pattern)) {
[13:20:17.811]                           computeRestarts <- base::computeRestarts
[13:20:17.811]                           grepl <- base::grepl
[13:20:17.811]                           restarts <- computeRestarts(cond)
[13:20:17.811]                           for (restart in restarts) {
[13:20:17.811]                             name <- restart$name
[13:20:17.811]                             if (is.null(name)) 
[13:20:17.811]                               next
[13:20:17.811]                             if (!grepl(pattern, name)) 
[13:20:17.811]                               next
[13:20:17.811]                             invokeRestart(restart)
[13:20:17.811]                             muffled <- TRUE
[13:20:17.811]                             break
[13:20:17.811]                           }
[13:20:17.811]                         }
[13:20:17.811]                       }
[13:20:17.811]                       invisible(muffled)
[13:20:17.811]                     }
[13:20:17.811]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.811]                   }
[13:20:17.811]                 }
[13:20:17.811]                 else {
[13:20:17.811]                   if (TRUE) {
[13:20:17.811]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.811]                     {
[13:20:17.811]                       inherits <- base::inherits
[13:20:17.811]                       invokeRestart <- base::invokeRestart
[13:20:17.811]                       is.null <- base::is.null
[13:20:17.811]                       muffled <- FALSE
[13:20:17.811]                       if (inherits(cond, "message")) {
[13:20:17.811]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.811]                         if (muffled) 
[13:20:17.811]                           invokeRestart("muffleMessage")
[13:20:17.811]                       }
[13:20:17.811]                       else if (inherits(cond, "warning")) {
[13:20:17.811]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.811]                         if (muffled) 
[13:20:17.811]                           invokeRestart("muffleWarning")
[13:20:17.811]                       }
[13:20:17.811]                       else if (inherits(cond, "condition")) {
[13:20:17.811]                         if (!is.null(pattern)) {
[13:20:17.811]                           computeRestarts <- base::computeRestarts
[13:20:17.811]                           grepl <- base::grepl
[13:20:17.811]                           restarts <- computeRestarts(cond)
[13:20:17.811]                           for (restart in restarts) {
[13:20:17.811]                             name <- restart$name
[13:20:17.811]                             if (is.null(name)) 
[13:20:17.811]                               next
[13:20:17.811]                             if (!grepl(pattern, name)) 
[13:20:17.811]                               next
[13:20:17.811]                             invokeRestart(restart)
[13:20:17.811]                             muffled <- TRUE
[13:20:17.811]                             break
[13:20:17.811]                           }
[13:20:17.811]                         }
[13:20:17.811]                       }
[13:20:17.811]                       invisible(muffled)
[13:20:17.811]                     }
[13:20:17.811]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.811]                   }
[13:20:17.811]                 }
[13:20:17.811]             }
[13:20:17.811]         }))
[13:20:17.811]     }, error = function(ex) {
[13:20:17.811]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.811]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.811]                 ...future.rng), started = ...future.startTime, 
[13:20:17.811]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.811]             version = "1.8"), class = "FutureResult")
[13:20:17.811]     }, finally = {
[13:20:17.811]         if (!identical(...future.workdir, getwd())) 
[13:20:17.811]             setwd(...future.workdir)
[13:20:17.811]         {
[13:20:17.811]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.811]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.811]             }
[13:20:17.811]             base::options(...future.oldOptions)
[13:20:17.811]             if (.Platform$OS.type == "windows") {
[13:20:17.811]                 old_names <- names(...future.oldEnvVars)
[13:20:17.811]                 envs <- base::Sys.getenv()
[13:20:17.811]                 names <- names(envs)
[13:20:17.811]                 common <- intersect(names, old_names)
[13:20:17.811]                 added <- setdiff(names, old_names)
[13:20:17.811]                 removed <- setdiff(old_names, names)
[13:20:17.811]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.811]                   envs[common]]
[13:20:17.811]                 NAMES <- toupper(changed)
[13:20:17.811]                 args <- list()
[13:20:17.811]                 for (kk in seq_along(NAMES)) {
[13:20:17.811]                   name <- changed[[kk]]
[13:20:17.811]                   NAME <- NAMES[[kk]]
[13:20:17.811]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.811]                     next
[13:20:17.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.811]                 }
[13:20:17.811]                 NAMES <- toupper(added)
[13:20:17.811]                 for (kk in seq_along(NAMES)) {
[13:20:17.811]                   name <- added[[kk]]
[13:20:17.811]                   NAME <- NAMES[[kk]]
[13:20:17.811]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.811]                     next
[13:20:17.811]                   args[[name]] <- ""
[13:20:17.811]                 }
[13:20:17.811]                 NAMES <- toupper(removed)
[13:20:17.811]                 for (kk in seq_along(NAMES)) {
[13:20:17.811]                   name <- removed[[kk]]
[13:20:17.811]                   NAME <- NAMES[[kk]]
[13:20:17.811]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.811]                     next
[13:20:17.811]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.811]                 }
[13:20:17.811]                 if (length(args) > 0) 
[13:20:17.811]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.811]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.811]             }
[13:20:17.811]             else {
[13:20:17.811]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.811]             }
[13:20:17.811]             {
[13:20:17.811]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.811]                   0L) {
[13:20:17.811]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.811]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.811]                   base::options(opts)
[13:20:17.811]                 }
[13:20:17.811]                 {
[13:20:17.811]                   {
[13:20:17.811]                     NULL
[13:20:17.811]                     RNGkind("Mersenne-Twister")
[13:20:17.811]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:17.811]                       inherits = FALSE)
[13:20:17.811]                   }
[13:20:17.811]                   options(future.plan = NULL)
[13:20:17.811]                   if (is.na(NA_character_)) 
[13:20:17.811]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.811]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.811]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:17.811]                   {
[13:20:17.811]                     future <- SequentialFuture(..., envir = envir)
[13:20:17.811]                     if (!future$lazy) 
[13:20:17.811]                       future <- run(future)
[13:20:17.811]                     invisible(future)
[13:20:17.811]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.811]                 }
[13:20:17.811]             }
[13:20:17.811]         }
[13:20:17.811]     })
[13:20:17.811]     if (TRUE) {
[13:20:17.811]         base::sink(type = "output", split = FALSE)
[13:20:17.811]         if (TRUE) {
[13:20:17.811]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.811]         }
[13:20:17.811]         else {
[13:20:17.811]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.811]         }
[13:20:17.811]         base::close(...future.stdout)
[13:20:17.811]         ...future.stdout <- NULL
[13:20:17.811]     }
[13:20:17.811]     ...future.result$conditions <- ...future.conditions
[13:20:17.811]     ...future.result$finished <- base::Sys.time()
[13:20:17.811]     ...future.result
[13:20:17.811] }
[13:20:17.813] assign_globals() ...
[13:20:17.813] List of 1
[13:20:17.813]  $ a: num 1
[13:20:17.813]  - attr(*, "where")=List of 1
[13:20:17.813]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.813]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.813]  - attr(*, "resolved")= logi FALSE
[13:20:17.813]  - attr(*, "total_size")= num 56
[13:20:17.813]  - attr(*, "already-done")= logi TRUE
[13:20:17.818] - copied ‘a’ to environment
[13:20:17.818] assign_globals() ... done
[13:20:17.819] plan(): Setting new future strategy stack:
[13:20:17.819] List of future strategies:
[13:20:17.819] 1. sequential:
[13:20:17.819]    - args: function (..., envir = parent.frame())
[13:20:17.819]    - tweaked: FALSE
[13:20:17.819]    - call: NULL
[13:20:17.819] plan(): nbrOfWorkers() = 1
[13:20:17.820] plan(): Setting new future strategy stack:
[13:20:17.820] List of future strategies:
[13:20:17.820] 1. sequential:
[13:20:17.820]    - args: function (..., envir = parent.frame())
[13:20:17.820]    - tweaked: FALSE
[13:20:17.820]    - call: plan(strategy)
[13:20:17.821] plan(): nbrOfWorkers() = 1
[13:20:17.821] SequentialFuture started (and completed)
[13:20:17.821] - Launch lazy future ... done
[13:20:17.821] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[13:20:17.832] plan(): Setting new future strategy stack:
[13:20:17.832] List of future strategies:
[13:20:17.832] 1. multicore:
[13:20:17.832]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:17.832]    - tweaked: FALSE
[13:20:17.832]    - call: plan(strategy)
[13:20:17.838] plan(): nbrOfWorkers() = 2
[13:20:17.839] getGlobalsAndPackages() ...
[13:20:17.839] Searching for globals...
[13:20:17.840] - globals found: [1] ‘{’
[13:20:17.840] Searching for globals ... DONE
[13:20:17.840] Resolving globals: FALSE
[13:20:17.841] 
[13:20:17.841] 
[13:20:17.841] getGlobalsAndPackages() ... DONE
[13:20:17.841] run() for ‘Future’ ...
[13:20:17.842] - state: ‘created’
[13:20:17.842] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:17.845] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:17.845] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:17.846]   - Field: ‘label’
[13:20:17.846]   - Field: ‘local’
[13:20:17.846]   - Field: ‘owner’
[13:20:17.846]   - Field: ‘envir’
[13:20:17.846]   - Field: ‘workers’
[13:20:17.846]   - Field: ‘packages’
[13:20:17.846]   - Field: ‘gc’
[13:20:17.846]   - Field: ‘job’
[13:20:17.846]   - Field: ‘conditions’
[13:20:17.846]   - Field: ‘expr’
[13:20:17.846]   - Field: ‘uuid’
[13:20:17.847]   - Field: ‘seed’
[13:20:17.847]   - Field: ‘version’
[13:20:17.847]   - Field: ‘result’
[13:20:17.847]   - Field: ‘asynchronous’
[13:20:17.847]   - Field: ‘calls’
[13:20:17.847]   - Field: ‘globals’
[13:20:17.847]   - Field: ‘stdout’
[13:20:17.847]   - Field: ‘earlySignal’
[13:20:17.847]   - Field: ‘lazy’
[13:20:17.847]   - Field: ‘state’
[13:20:17.847] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:17.848] - Launch lazy future ...
[13:20:17.849] Packages needed by the future expression (n = 0): <none>
[13:20:17.849] Packages needed by future strategies (n = 0): <none>
[13:20:17.849] {
[13:20:17.849]     {
[13:20:17.849]         {
[13:20:17.849]             ...future.startTime <- base::Sys.time()
[13:20:17.849]             {
[13:20:17.849]                 {
[13:20:17.849]                   {
[13:20:17.849]                     {
[13:20:17.849]                       base::local({
[13:20:17.849]                         has_future <- base::requireNamespace("future", 
[13:20:17.849]                           quietly = TRUE)
[13:20:17.849]                         if (has_future) {
[13:20:17.849]                           ns <- base::getNamespace("future")
[13:20:17.849]                           version <- ns[[".package"]][["version"]]
[13:20:17.849]                           if (is.null(version)) 
[13:20:17.849]                             version <- utils::packageVersion("future")
[13:20:17.849]                         }
[13:20:17.849]                         else {
[13:20:17.849]                           version <- NULL
[13:20:17.849]                         }
[13:20:17.849]                         if (!has_future || version < "1.8.0") {
[13:20:17.849]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.849]                             "", base::R.version$version.string), 
[13:20:17.849]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:17.849]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.849]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.849]                               "release", "version")], collapse = " "), 
[13:20:17.849]                             hostname = base::Sys.info()[["nodename"]])
[13:20:17.849]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.849]                             info)
[13:20:17.849]                           info <- base::paste(info, collapse = "; ")
[13:20:17.849]                           if (!has_future) {
[13:20:17.849]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.849]                               info)
[13:20:17.849]                           }
[13:20:17.849]                           else {
[13:20:17.849]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.849]                               info, version)
[13:20:17.849]                           }
[13:20:17.849]                           base::stop(msg)
[13:20:17.849]                         }
[13:20:17.849]                       })
[13:20:17.849]                     }
[13:20:17.849]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:17.849]                     base::options(mc.cores = 1L)
[13:20:17.849]                   }
[13:20:17.849]                   options(future.plan = NULL)
[13:20:17.849]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.849]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.849]                 }
[13:20:17.849]                 ...future.workdir <- getwd()
[13:20:17.849]             }
[13:20:17.849]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.849]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.849]         }
[13:20:17.849]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.849]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.849]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.849]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.849]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.849]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.849]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.849]             base::names(...future.oldOptions))
[13:20:17.849]     }
[13:20:17.849]     if (FALSE) {
[13:20:17.849]     }
[13:20:17.849]     else {
[13:20:17.849]         if (TRUE) {
[13:20:17.849]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.849]                 open = "w")
[13:20:17.849]         }
[13:20:17.849]         else {
[13:20:17.849]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.849]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.849]         }
[13:20:17.849]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.849]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.849]             base::sink(type = "output", split = FALSE)
[13:20:17.849]             base::close(...future.stdout)
[13:20:17.849]         }, add = TRUE)
[13:20:17.849]     }
[13:20:17.849]     ...future.frame <- base::sys.nframe()
[13:20:17.849]     ...future.conditions <- base::list()
[13:20:17.849]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.849]     if (FALSE) {
[13:20:17.849]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.849]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.849]     }
[13:20:17.849]     ...future.result <- base::tryCatch({
[13:20:17.849]         base::withCallingHandlers({
[13:20:17.849]             ...future.value <- base::withVisible(base::local({
[13:20:17.849]                 withCallingHandlers({
[13:20:17.849]                   {
[13:20:17.849]                     2
[13:20:17.849]                   }
[13:20:17.849]                 }, immediateCondition = function(cond) {
[13:20:17.849]                   save_rds <- function (object, pathname, ...) 
[13:20:17.849]                   {
[13:20:17.849]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:17.849]                     if (file_test("-f", pathname_tmp)) {
[13:20:17.849]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.849]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:17.849]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.849]                         fi_tmp[["mtime"]])
[13:20:17.849]                     }
[13:20:17.849]                     tryCatch({
[13:20:17.849]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:17.849]                     }, error = function(ex) {
[13:20:17.849]                       msg <- conditionMessage(ex)
[13:20:17.849]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.849]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:17.849]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.849]                         fi_tmp[["mtime"]], msg)
[13:20:17.849]                       ex$message <- msg
[13:20:17.849]                       stop(ex)
[13:20:17.849]                     })
[13:20:17.849]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:17.849]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:17.849]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:17.849]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.849]                       fi <- file.info(pathname)
[13:20:17.849]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:17.849]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.849]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:17.849]                         fi[["size"]], fi[["mtime"]])
[13:20:17.849]                       stop(msg)
[13:20:17.849]                     }
[13:20:17.849]                     invisible(pathname)
[13:20:17.849]                   }
[13:20:17.849]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:17.849]                     rootPath = tempdir()) 
[13:20:17.849]                   {
[13:20:17.849]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:17.849]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:17.849]                       tmpdir = path, fileext = ".rds")
[13:20:17.849]                     save_rds(obj, file)
[13:20:17.849]                   }
[13:20:17.849]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:17.849]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.849]                   {
[13:20:17.849]                     inherits <- base::inherits
[13:20:17.849]                     invokeRestart <- base::invokeRestart
[13:20:17.849]                     is.null <- base::is.null
[13:20:17.849]                     muffled <- FALSE
[13:20:17.849]                     if (inherits(cond, "message")) {
[13:20:17.849]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:17.849]                       if (muffled) 
[13:20:17.849]                         invokeRestart("muffleMessage")
[13:20:17.849]                     }
[13:20:17.849]                     else if (inherits(cond, "warning")) {
[13:20:17.849]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:17.849]                       if (muffled) 
[13:20:17.849]                         invokeRestart("muffleWarning")
[13:20:17.849]                     }
[13:20:17.849]                     else if (inherits(cond, "condition")) {
[13:20:17.849]                       if (!is.null(pattern)) {
[13:20:17.849]                         computeRestarts <- base::computeRestarts
[13:20:17.849]                         grepl <- base::grepl
[13:20:17.849]                         restarts <- computeRestarts(cond)
[13:20:17.849]                         for (restart in restarts) {
[13:20:17.849]                           name <- restart$name
[13:20:17.849]                           if (is.null(name)) 
[13:20:17.849]                             next
[13:20:17.849]                           if (!grepl(pattern, name)) 
[13:20:17.849]                             next
[13:20:17.849]                           invokeRestart(restart)
[13:20:17.849]                           muffled <- TRUE
[13:20:17.849]                           break
[13:20:17.849]                         }
[13:20:17.849]                       }
[13:20:17.849]                     }
[13:20:17.849]                     invisible(muffled)
[13:20:17.849]                   }
[13:20:17.849]                   muffleCondition(cond)
[13:20:17.849]                 })
[13:20:17.849]             }))
[13:20:17.849]             future::FutureResult(value = ...future.value$value, 
[13:20:17.849]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.849]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.849]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.849]                     ...future.globalenv.names))
[13:20:17.849]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.849]         }, condition = base::local({
[13:20:17.849]             c <- base::c
[13:20:17.849]             inherits <- base::inherits
[13:20:17.849]             invokeRestart <- base::invokeRestart
[13:20:17.849]             length <- base::length
[13:20:17.849]             list <- base::list
[13:20:17.849]             seq.int <- base::seq.int
[13:20:17.849]             signalCondition <- base::signalCondition
[13:20:17.849]             sys.calls <- base::sys.calls
[13:20:17.849]             `[[` <- base::`[[`
[13:20:17.849]             `+` <- base::`+`
[13:20:17.849]             `<<-` <- base::`<<-`
[13:20:17.849]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.849]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.849]                   3L)]
[13:20:17.849]             }
[13:20:17.849]             function(cond) {
[13:20:17.849]                 is_error <- inherits(cond, "error")
[13:20:17.849]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.849]                   NULL)
[13:20:17.849]                 if (is_error) {
[13:20:17.849]                   sessionInformation <- function() {
[13:20:17.849]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.849]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.849]                       search = base::search(), system = base::Sys.info())
[13:20:17.849]                   }
[13:20:17.849]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.849]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.849]                     cond$call), session = sessionInformation(), 
[13:20:17.849]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.849]                   signalCondition(cond)
[13:20:17.849]                 }
[13:20:17.849]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.849]                 "immediateCondition"))) {
[13:20:17.849]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.849]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.849]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.849]                   if (TRUE && !signal) {
[13:20:17.849]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.849]                     {
[13:20:17.849]                       inherits <- base::inherits
[13:20:17.849]                       invokeRestart <- base::invokeRestart
[13:20:17.849]                       is.null <- base::is.null
[13:20:17.849]                       muffled <- FALSE
[13:20:17.849]                       if (inherits(cond, "message")) {
[13:20:17.849]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.849]                         if (muffled) 
[13:20:17.849]                           invokeRestart("muffleMessage")
[13:20:17.849]                       }
[13:20:17.849]                       else if (inherits(cond, "warning")) {
[13:20:17.849]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.849]                         if (muffled) 
[13:20:17.849]                           invokeRestart("muffleWarning")
[13:20:17.849]                       }
[13:20:17.849]                       else if (inherits(cond, "condition")) {
[13:20:17.849]                         if (!is.null(pattern)) {
[13:20:17.849]                           computeRestarts <- base::computeRestarts
[13:20:17.849]                           grepl <- base::grepl
[13:20:17.849]                           restarts <- computeRestarts(cond)
[13:20:17.849]                           for (restart in restarts) {
[13:20:17.849]                             name <- restart$name
[13:20:17.849]                             if (is.null(name)) 
[13:20:17.849]                               next
[13:20:17.849]                             if (!grepl(pattern, name)) 
[13:20:17.849]                               next
[13:20:17.849]                             invokeRestart(restart)
[13:20:17.849]                             muffled <- TRUE
[13:20:17.849]                             break
[13:20:17.849]                           }
[13:20:17.849]                         }
[13:20:17.849]                       }
[13:20:17.849]                       invisible(muffled)
[13:20:17.849]                     }
[13:20:17.849]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.849]                   }
[13:20:17.849]                 }
[13:20:17.849]                 else {
[13:20:17.849]                   if (TRUE) {
[13:20:17.849]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.849]                     {
[13:20:17.849]                       inherits <- base::inherits
[13:20:17.849]                       invokeRestart <- base::invokeRestart
[13:20:17.849]                       is.null <- base::is.null
[13:20:17.849]                       muffled <- FALSE
[13:20:17.849]                       if (inherits(cond, "message")) {
[13:20:17.849]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.849]                         if (muffled) 
[13:20:17.849]                           invokeRestart("muffleMessage")
[13:20:17.849]                       }
[13:20:17.849]                       else if (inherits(cond, "warning")) {
[13:20:17.849]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.849]                         if (muffled) 
[13:20:17.849]                           invokeRestart("muffleWarning")
[13:20:17.849]                       }
[13:20:17.849]                       else if (inherits(cond, "condition")) {
[13:20:17.849]                         if (!is.null(pattern)) {
[13:20:17.849]                           computeRestarts <- base::computeRestarts
[13:20:17.849]                           grepl <- base::grepl
[13:20:17.849]                           restarts <- computeRestarts(cond)
[13:20:17.849]                           for (restart in restarts) {
[13:20:17.849]                             name <- restart$name
[13:20:17.849]                             if (is.null(name)) 
[13:20:17.849]                               next
[13:20:17.849]                             if (!grepl(pattern, name)) 
[13:20:17.849]                               next
[13:20:17.849]                             invokeRestart(restart)
[13:20:17.849]                             muffled <- TRUE
[13:20:17.849]                             break
[13:20:17.849]                           }
[13:20:17.849]                         }
[13:20:17.849]                       }
[13:20:17.849]                       invisible(muffled)
[13:20:17.849]                     }
[13:20:17.849]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.849]                   }
[13:20:17.849]                 }
[13:20:17.849]             }
[13:20:17.849]         }))
[13:20:17.849]     }, error = function(ex) {
[13:20:17.849]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.849]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.849]                 ...future.rng), started = ...future.startTime, 
[13:20:17.849]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.849]             version = "1.8"), class = "FutureResult")
[13:20:17.849]     }, finally = {
[13:20:17.849]         if (!identical(...future.workdir, getwd())) 
[13:20:17.849]             setwd(...future.workdir)
[13:20:17.849]         {
[13:20:17.849]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.849]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.849]             }
[13:20:17.849]             base::options(...future.oldOptions)
[13:20:17.849]             if (.Platform$OS.type == "windows") {
[13:20:17.849]                 old_names <- names(...future.oldEnvVars)
[13:20:17.849]                 envs <- base::Sys.getenv()
[13:20:17.849]                 names <- names(envs)
[13:20:17.849]                 common <- intersect(names, old_names)
[13:20:17.849]                 added <- setdiff(names, old_names)
[13:20:17.849]                 removed <- setdiff(old_names, names)
[13:20:17.849]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.849]                   envs[common]]
[13:20:17.849]                 NAMES <- toupper(changed)
[13:20:17.849]                 args <- list()
[13:20:17.849]                 for (kk in seq_along(NAMES)) {
[13:20:17.849]                   name <- changed[[kk]]
[13:20:17.849]                   NAME <- NAMES[[kk]]
[13:20:17.849]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.849]                     next
[13:20:17.849]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.849]                 }
[13:20:17.849]                 NAMES <- toupper(added)
[13:20:17.849]                 for (kk in seq_along(NAMES)) {
[13:20:17.849]                   name <- added[[kk]]
[13:20:17.849]                   NAME <- NAMES[[kk]]
[13:20:17.849]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.849]                     next
[13:20:17.849]                   args[[name]] <- ""
[13:20:17.849]                 }
[13:20:17.849]                 NAMES <- toupper(removed)
[13:20:17.849]                 for (kk in seq_along(NAMES)) {
[13:20:17.849]                   name <- removed[[kk]]
[13:20:17.849]                   NAME <- NAMES[[kk]]
[13:20:17.849]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.849]                     next
[13:20:17.849]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.849]                 }
[13:20:17.849]                 if (length(args) > 0) 
[13:20:17.849]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.849]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.849]             }
[13:20:17.849]             else {
[13:20:17.849]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.849]             }
[13:20:17.849]             {
[13:20:17.849]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.849]                   0L) {
[13:20:17.849]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.849]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.849]                   base::options(opts)
[13:20:17.849]                 }
[13:20:17.849]                 {
[13:20:17.849]                   {
[13:20:17.849]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:17.849]                     NULL
[13:20:17.849]                   }
[13:20:17.849]                   options(future.plan = NULL)
[13:20:17.849]                   if (is.na(NA_character_)) 
[13:20:17.849]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.849]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.849]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:17.849]                     envir = parent.frame()) 
[13:20:17.849]                   {
[13:20:17.849]                     default_workers <- missing(workers)
[13:20:17.849]                     if (is.function(workers)) 
[13:20:17.849]                       workers <- workers()
[13:20:17.849]                     workers <- structure(as.integer(workers), 
[13:20:17.849]                       class = class(workers))
[13:20:17.849]                     stop_if_not(is.finite(workers), workers >= 
[13:20:17.849]                       1L)
[13:20:17.849]                     if ((workers == 1L && !inherits(workers, 
[13:20:17.849]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:17.849]                       if (default_workers) 
[13:20:17.849]                         supportsMulticore(warn = TRUE)
[13:20:17.849]                       return(sequential(..., envir = envir))
[13:20:17.849]                     }
[13:20:17.849]                     oopts <- options(mc.cores = workers)
[13:20:17.849]                     on.exit(options(oopts))
[13:20:17.849]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:17.849]                       envir = envir)
[13:20:17.849]                     if (!future$lazy) 
[13:20:17.849]                       future <- run(future)
[13:20:17.849]                     invisible(future)
[13:20:17.849]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.849]                 }
[13:20:17.849]             }
[13:20:17.849]         }
[13:20:17.849]     })
[13:20:17.849]     if (TRUE) {
[13:20:17.849]         base::sink(type = "output", split = FALSE)
[13:20:17.849]         if (TRUE) {
[13:20:17.849]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.849]         }
[13:20:17.849]         else {
[13:20:17.849]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.849]         }
[13:20:17.849]         base::close(...future.stdout)
[13:20:17.849]         ...future.stdout <- NULL
[13:20:17.849]     }
[13:20:17.849]     ...future.result$conditions <- ...future.conditions
[13:20:17.849]     ...future.result$finished <- base::Sys.time()
[13:20:17.849]     ...future.result
[13:20:17.849] }
[13:20:17.852] requestCore(): workers = 2
[13:20:17.855] MulticoreFuture started
[13:20:17.855] - Launch lazy future ... done
[13:20:17.855] run() for ‘MulticoreFuture’ ... done
[13:20:17.855] plan(): Setting new future strategy stack:
[13:20:17.856] getGlobalsAndPackages() ...
[13:20:17.856] Searching for globals...
[13:20:17.856] List of future strategies:
[13:20:17.856] 1. sequential:
[13:20:17.856]    - args: function (..., envir = parent.frame())
[13:20:17.856]    - tweaked: FALSE
[13:20:17.856]    - call: NULL
[13:20:17.857] plan(): nbrOfWorkers() = 1
[13:20:17.858] - globals found: [1] ‘{’
[13:20:17.858] Searching for globals ... DONE
[13:20:17.858] plan(): Setting new future strategy stack:
[13:20:17.858] Resolving globals: FALSE
[13:20:17.859] List of future strategies:
[13:20:17.859] 1. multicore:
[13:20:17.859]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:17.859]    - tweaked: FALSE
[13:20:17.859]    - call: plan(strategy)
[13:20:17.859] 
[13:20:17.859] 
[13:20:17.859] getGlobalsAndPackages() ... DONE
[13:20:17.860] run() for ‘Future’ ...
[13:20:17.860] - state: ‘created’
[13:20:17.860] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:17.864] plan(): nbrOfWorkers() = 2
[13:20:17.865] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:17.865] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:17.866]   - Field: ‘label’
[13:20:17.866]   - Field: ‘local’
[13:20:17.866]   - Field: ‘owner’
[13:20:17.866]   - Field: ‘envir’
[13:20:17.866]   - Field: ‘workers’
[13:20:17.866]   - Field: ‘packages’
[13:20:17.866]   - Field: ‘gc’
[13:20:17.867]   - Field: ‘job’
[13:20:17.867]   - Field: ‘conditions’
[13:20:17.867]   - Field: ‘expr’
[13:20:17.867]   - Field: ‘uuid’
[13:20:17.867]   - Field: ‘seed’
[13:20:17.867]   - Field: ‘version’
[13:20:17.871]   - Field: ‘result’
[13:20:17.872]   - Field: ‘asynchronous’
[13:20:17.872]   - Field: ‘calls’
[13:20:17.872]   - Field: ‘globals’
[13:20:17.872]   - Field: ‘stdout’
[13:20:17.872]   - Field: ‘earlySignal’
[13:20:17.872]   - Field: ‘lazy’
[13:20:17.873]   - Field: ‘state’
[13:20:17.873] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:17.873] - Launch lazy future ...
[13:20:17.873] Packages needed by the future expression (n = 0): <none>
[13:20:17.874] Packages needed by future strategies (n = 0): <none>
[13:20:17.875] {
[13:20:17.875]     {
[13:20:17.875]         {
[13:20:17.875]             ...future.startTime <- base::Sys.time()
[13:20:17.875]             {
[13:20:17.875]                 {
[13:20:17.875]                   {
[13:20:17.875]                     {
[13:20:17.875]                       base::local({
[13:20:17.875]                         has_future <- base::requireNamespace("future", 
[13:20:17.875]                           quietly = TRUE)
[13:20:17.875]                         if (has_future) {
[13:20:17.875]                           ns <- base::getNamespace("future")
[13:20:17.875]                           version <- ns[[".package"]][["version"]]
[13:20:17.875]                           if (is.null(version)) 
[13:20:17.875]                             version <- utils::packageVersion("future")
[13:20:17.875]                         }
[13:20:17.875]                         else {
[13:20:17.875]                           version <- NULL
[13:20:17.875]                         }
[13:20:17.875]                         if (!has_future || version < "1.8.0") {
[13:20:17.875]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.875]                             "", base::R.version$version.string), 
[13:20:17.875]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:17.875]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.875]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.875]                               "release", "version")], collapse = " "), 
[13:20:17.875]                             hostname = base::Sys.info()[["nodename"]])
[13:20:17.875]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.875]                             info)
[13:20:17.875]                           info <- base::paste(info, collapse = "; ")
[13:20:17.875]                           if (!has_future) {
[13:20:17.875]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.875]                               info)
[13:20:17.875]                           }
[13:20:17.875]                           else {
[13:20:17.875]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.875]                               info, version)
[13:20:17.875]                           }
[13:20:17.875]                           base::stop(msg)
[13:20:17.875]                         }
[13:20:17.875]                       })
[13:20:17.875]                     }
[13:20:17.875]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:17.875]                     base::options(mc.cores = 1L)
[13:20:17.875]                   }
[13:20:17.875]                   options(future.plan = NULL)
[13:20:17.875]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.875]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.875]                 }
[13:20:17.875]                 ...future.workdir <- getwd()
[13:20:17.875]             }
[13:20:17.875]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.875]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.875]         }
[13:20:17.875]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.875]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.875]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.875]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.875]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.875]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.875]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.875]             base::names(...future.oldOptions))
[13:20:17.875]     }
[13:20:17.875]     if (FALSE) {
[13:20:17.875]     }
[13:20:17.875]     else {
[13:20:17.875]         if (TRUE) {
[13:20:17.875]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.875]                 open = "w")
[13:20:17.875]         }
[13:20:17.875]         else {
[13:20:17.875]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.875]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.875]         }
[13:20:17.875]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.875]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.875]             base::sink(type = "output", split = FALSE)
[13:20:17.875]             base::close(...future.stdout)
[13:20:17.875]         }, add = TRUE)
[13:20:17.875]     }
[13:20:17.875]     ...future.frame <- base::sys.nframe()
[13:20:17.875]     ...future.conditions <- base::list()
[13:20:17.875]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.875]     if (FALSE) {
[13:20:17.875]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.875]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.875]     }
[13:20:17.875]     ...future.result <- base::tryCatch({
[13:20:17.875]         base::withCallingHandlers({
[13:20:17.875]             ...future.value <- base::withVisible(base::local({
[13:20:17.875]                 withCallingHandlers({
[13:20:17.875]                   {
[13:20:17.875]                     4
[13:20:17.875]                   }
[13:20:17.875]                 }, immediateCondition = function(cond) {
[13:20:17.875]                   save_rds <- function (object, pathname, ...) 
[13:20:17.875]                   {
[13:20:17.875]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:17.875]                     if (file_test("-f", pathname_tmp)) {
[13:20:17.875]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.875]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:17.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.875]                         fi_tmp[["mtime"]])
[13:20:17.875]                     }
[13:20:17.875]                     tryCatch({
[13:20:17.875]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:17.875]                     }, error = function(ex) {
[13:20:17.875]                       msg <- conditionMessage(ex)
[13:20:17.875]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.875]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:17.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.875]                         fi_tmp[["mtime"]], msg)
[13:20:17.875]                       ex$message <- msg
[13:20:17.875]                       stop(ex)
[13:20:17.875]                     })
[13:20:17.875]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:17.875]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:17.875]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:17.875]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.875]                       fi <- file.info(pathname)
[13:20:17.875]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:17.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.875]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:17.875]                         fi[["size"]], fi[["mtime"]])
[13:20:17.875]                       stop(msg)
[13:20:17.875]                     }
[13:20:17.875]                     invisible(pathname)
[13:20:17.875]                   }
[13:20:17.875]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:17.875]                     rootPath = tempdir()) 
[13:20:17.875]                   {
[13:20:17.875]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:17.875]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:17.875]                       tmpdir = path, fileext = ".rds")
[13:20:17.875]                     save_rds(obj, file)
[13:20:17.875]                   }
[13:20:17.875]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:17.875]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.875]                   {
[13:20:17.875]                     inherits <- base::inherits
[13:20:17.875]                     invokeRestart <- base::invokeRestart
[13:20:17.875]                     is.null <- base::is.null
[13:20:17.875]                     muffled <- FALSE
[13:20:17.875]                     if (inherits(cond, "message")) {
[13:20:17.875]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:17.875]                       if (muffled) 
[13:20:17.875]                         invokeRestart("muffleMessage")
[13:20:17.875]                     }
[13:20:17.875]                     else if (inherits(cond, "warning")) {
[13:20:17.875]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:17.875]                       if (muffled) 
[13:20:17.875]                         invokeRestart("muffleWarning")
[13:20:17.875]                     }
[13:20:17.875]                     else if (inherits(cond, "condition")) {
[13:20:17.875]                       if (!is.null(pattern)) {
[13:20:17.875]                         computeRestarts <- base::computeRestarts
[13:20:17.875]                         grepl <- base::grepl
[13:20:17.875]                         restarts <- computeRestarts(cond)
[13:20:17.875]                         for (restart in restarts) {
[13:20:17.875]                           name <- restart$name
[13:20:17.875]                           if (is.null(name)) 
[13:20:17.875]                             next
[13:20:17.875]                           if (!grepl(pattern, name)) 
[13:20:17.875]                             next
[13:20:17.875]                           invokeRestart(restart)
[13:20:17.875]                           muffled <- TRUE
[13:20:17.875]                           break
[13:20:17.875]                         }
[13:20:17.875]                       }
[13:20:17.875]                     }
[13:20:17.875]                     invisible(muffled)
[13:20:17.875]                   }
[13:20:17.875]                   muffleCondition(cond)
[13:20:17.875]                 })
[13:20:17.875]             }))
[13:20:17.875]             future::FutureResult(value = ...future.value$value, 
[13:20:17.875]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.875]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.875]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.875]                     ...future.globalenv.names))
[13:20:17.875]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.875]         }, condition = base::local({
[13:20:17.875]             c <- base::c
[13:20:17.875]             inherits <- base::inherits
[13:20:17.875]             invokeRestart <- base::invokeRestart
[13:20:17.875]             length <- base::length
[13:20:17.875]             list <- base::list
[13:20:17.875]             seq.int <- base::seq.int
[13:20:17.875]             signalCondition <- base::signalCondition
[13:20:17.875]             sys.calls <- base::sys.calls
[13:20:17.875]             `[[` <- base::`[[`
[13:20:17.875]             `+` <- base::`+`
[13:20:17.875]             `<<-` <- base::`<<-`
[13:20:17.875]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.875]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.875]                   3L)]
[13:20:17.875]             }
[13:20:17.875]             function(cond) {
[13:20:17.875]                 is_error <- inherits(cond, "error")
[13:20:17.875]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.875]                   NULL)
[13:20:17.875]                 if (is_error) {
[13:20:17.875]                   sessionInformation <- function() {
[13:20:17.875]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.875]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.875]                       search = base::search(), system = base::Sys.info())
[13:20:17.875]                   }
[13:20:17.875]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.875]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.875]                     cond$call), session = sessionInformation(), 
[13:20:17.875]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.875]                   signalCondition(cond)
[13:20:17.875]                 }
[13:20:17.875]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.875]                 "immediateCondition"))) {
[13:20:17.875]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.875]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.875]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.875]                   if (TRUE && !signal) {
[13:20:17.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.875]                     {
[13:20:17.875]                       inherits <- base::inherits
[13:20:17.875]                       invokeRestart <- base::invokeRestart
[13:20:17.875]                       is.null <- base::is.null
[13:20:17.875]                       muffled <- FALSE
[13:20:17.875]                       if (inherits(cond, "message")) {
[13:20:17.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.875]                         if (muffled) 
[13:20:17.875]                           invokeRestart("muffleMessage")
[13:20:17.875]                       }
[13:20:17.875]                       else if (inherits(cond, "warning")) {
[13:20:17.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.875]                         if (muffled) 
[13:20:17.875]                           invokeRestart("muffleWarning")
[13:20:17.875]                       }
[13:20:17.875]                       else if (inherits(cond, "condition")) {
[13:20:17.875]                         if (!is.null(pattern)) {
[13:20:17.875]                           computeRestarts <- base::computeRestarts
[13:20:17.875]                           grepl <- base::grepl
[13:20:17.875]                           restarts <- computeRestarts(cond)
[13:20:17.875]                           for (restart in restarts) {
[13:20:17.875]                             name <- restart$name
[13:20:17.875]                             if (is.null(name)) 
[13:20:17.875]                               next
[13:20:17.875]                             if (!grepl(pattern, name)) 
[13:20:17.875]                               next
[13:20:17.875]                             invokeRestart(restart)
[13:20:17.875]                             muffled <- TRUE
[13:20:17.875]                             break
[13:20:17.875]                           }
[13:20:17.875]                         }
[13:20:17.875]                       }
[13:20:17.875]                       invisible(muffled)
[13:20:17.875]                     }
[13:20:17.875]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.875]                   }
[13:20:17.875]                 }
[13:20:17.875]                 else {
[13:20:17.875]                   if (TRUE) {
[13:20:17.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.875]                     {
[13:20:17.875]                       inherits <- base::inherits
[13:20:17.875]                       invokeRestart <- base::invokeRestart
[13:20:17.875]                       is.null <- base::is.null
[13:20:17.875]                       muffled <- FALSE
[13:20:17.875]                       if (inherits(cond, "message")) {
[13:20:17.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.875]                         if (muffled) 
[13:20:17.875]                           invokeRestart("muffleMessage")
[13:20:17.875]                       }
[13:20:17.875]                       else if (inherits(cond, "warning")) {
[13:20:17.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.875]                         if (muffled) 
[13:20:17.875]                           invokeRestart("muffleWarning")
[13:20:17.875]                       }
[13:20:17.875]                       else if (inherits(cond, "condition")) {
[13:20:17.875]                         if (!is.null(pattern)) {
[13:20:17.875]                           computeRestarts <- base::computeRestarts
[13:20:17.875]                           grepl <- base::grepl
[13:20:17.875]                           restarts <- computeRestarts(cond)
[13:20:17.875]                           for (restart in restarts) {
[13:20:17.875]                             name <- restart$name
[13:20:17.875]                             if (is.null(name)) 
[13:20:17.875]                               next
[13:20:17.875]                             if (!grepl(pattern, name)) 
[13:20:17.875]                               next
[13:20:17.875]                             invokeRestart(restart)
[13:20:17.875]                             muffled <- TRUE
[13:20:17.875]                             break
[13:20:17.875]                           }
[13:20:17.875]                         }
[13:20:17.875]                       }
[13:20:17.875]                       invisible(muffled)
[13:20:17.875]                     }
[13:20:17.875]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.875]                   }
[13:20:17.875]                 }
[13:20:17.875]             }
[13:20:17.875]         }))
[13:20:17.875]     }, error = function(ex) {
[13:20:17.875]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.875]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.875]                 ...future.rng), started = ...future.startTime, 
[13:20:17.875]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.875]             version = "1.8"), class = "FutureResult")
[13:20:17.875]     }, finally = {
[13:20:17.875]         if (!identical(...future.workdir, getwd())) 
[13:20:17.875]             setwd(...future.workdir)
[13:20:17.875]         {
[13:20:17.875]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.875]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.875]             }
[13:20:17.875]             base::options(...future.oldOptions)
[13:20:17.875]             if (.Platform$OS.type == "windows") {
[13:20:17.875]                 old_names <- names(...future.oldEnvVars)
[13:20:17.875]                 envs <- base::Sys.getenv()
[13:20:17.875]                 names <- names(envs)
[13:20:17.875]                 common <- intersect(names, old_names)
[13:20:17.875]                 added <- setdiff(names, old_names)
[13:20:17.875]                 removed <- setdiff(old_names, names)
[13:20:17.875]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.875]                   envs[common]]
[13:20:17.875]                 NAMES <- toupper(changed)
[13:20:17.875]                 args <- list()
[13:20:17.875]                 for (kk in seq_along(NAMES)) {
[13:20:17.875]                   name <- changed[[kk]]
[13:20:17.875]                   NAME <- NAMES[[kk]]
[13:20:17.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.875]                     next
[13:20:17.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.875]                 }
[13:20:17.875]                 NAMES <- toupper(added)
[13:20:17.875]                 for (kk in seq_along(NAMES)) {
[13:20:17.875]                   name <- added[[kk]]
[13:20:17.875]                   NAME <- NAMES[[kk]]
[13:20:17.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.875]                     next
[13:20:17.875]                   args[[name]] <- ""
[13:20:17.875]                 }
[13:20:17.875]                 NAMES <- toupper(removed)
[13:20:17.875]                 for (kk in seq_along(NAMES)) {
[13:20:17.875]                   name <- removed[[kk]]
[13:20:17.875]                   NAME <- NAMES[[kk]]
[13:20:17.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.875]                     next
[13:20:17.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.875]                 }
[13:20:17.875]                 if (length(args) > 0) 
[13:20:17.875]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.875]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.875]             }
[13:20:17.875]             else {
[13:20:17.875]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.875]             }
[13:20:17.875]             {
[13:20:17.875]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.875]                   0L) {
[13:20:17.875]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.875]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.875]                   base::options(opts)
[13:20:17.875]                 }
[13:20:17.875]                 {
[13:20:17.875]                   {
[13:20:17.875]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:17.875]                     NULL
[13:20:17.875]                   }
[13:20:17.875]                   options(future.plan = NULL)
[13:20:17.875]                   if (is.na(NA_character_)) 
[13:20:17.875]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.875]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.875]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:17.875]                     envir = parent.frame()) 
[13:20:17.875]                   {
[13:20:17.875]                     default_workers <- missing(workers)
[13:20:17.875]                     if (is.function(workers)) 
[13:20:17.875]                       workers <- workers()
[13:20:17.875]                     workers <- structure(as.integer(workers), 
[13:20:17.875]                       class = class(workers))
[13:20:17.875]                     stop_if_not(is.finite(workers), workers >= 
[13:20:17.875]                       1L)
[13:20:17.875]                     if ((workers == 1L && !inherits(workers, 
[13:20:17.875]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:17.875]                       if (default_workers) 
[13:20:17.875]                         supportsMulticore(warn = TRUE)
[13:20:17.875]                       return(sequential(..., envir = envir))
[13:20:17.875]                     }
[13:20:17.875]                     oopts <- options(mc.cores = workers)
[13:20:17.875]                     on.exit(options(oopts))
[13:20:17.875]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:17.875]                       envir = envir)
[13:20:17.875]                     if (!future$lazy) 
[13:20:17.875]                       future <- run(future)
[13:20:17.875]                     invisible(future)
[13:20:17.875]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.875]                 }
[13:20:17.875]             }
[13:20:17.875]         }
[13:20:17.875]     })
[13:20:17.875]     if (TRUE) {
[13:20:17.875]         base::sink(type = "output", split = FALSE)
[13:20:17.875]         if (TRUE) {
[13:20:17.875]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.875]         }
[13:20:17.875]         else {
[13:20:17.875]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.875]         }
[13:20:17.875]         base::close(...future.stdout)
[13:20:17.875]         ...future.stdout <- NULL
[13:20:17.875]     }
[13:20:17.875]     ...future.result$conditions <- ...future.conditions
[13:20:17.875]     ...future.result$finished <- base::Sys.time()
[13:20:17.875]     ...future.result
[13:20:17.875] }
[13:20:17.878] requestCore(): workers = 2
[13:20:17.885] MulticoreFuture started
[13:20:17.885] - Launch lazy future ... done
[13:20:17.885] run() for ‘MulticoreFuture’ ... done
[13:20:17.886] plan(): Setting new future strategy stack:
[13:20:17.886] List of future strategies:
[13:20:17.886] 1. sequential:
[13:20:17.886]    - args: function (..., envir = parent.frame())
[13:20:17.886]    - tweaked: FALSE
[13:20:17.886]    - call: NULL
[13:20:17.887] plan(): nbrOfWorkers() = 1
[13:20:17.889] plan(): Setting new future strategy stack:
u$a = 2
[13:20:17.890] List of future strategies:
[13:20:17.890] 1. multicore:
[13:20:17.890]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:17.890]    - tweaked: FALSE
[13:20:17.890]    - call: plan(strategy)
[13:20:17.895] plan(): nbrOfWorkers() = 2
v$a = 4
[13:20:17.896] getGlobalsAndPackages() ...
[13:20:17.896] Searching for globals...
[13:20:17.898] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.898] Searching for globals ... DONE
[13:20:17.898] Resolving globals: FALSE
[13:20:17.898] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.899] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.899] - globals: [1] ‘a’
[13:20:17.899] 
[13:20:17.899] getGlobalsAndPackages() ... DONE
[13:20:17.900] run() for ‘Future’ ...
[13:20:17.900] - state: ‘created’
[13:20:17.900] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:17.904] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:17.904] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:17.904]   - Field: ‘label’
[13:20:17.904]   - Field: ‘local’
[13:20:17.905]   - Field: ‘owner’
[13:20:17.905]   - Field: ‘envir’
[13:20:17.905]   - Field: ‘workers’
[13:20:17.905]   - Field: ‘packages’
[13:20:17.905]   - Field: ‘gc’
[13:20:17.905]   - Field: ‘job’
[13:20:17.905]   - Field: ‘conditions’
[13:20:17.905]   - Field: ‘expr’
[13:20:17.906]   - Field: ‘uuid’
[13:20:17.906]   - Field: ‘seed’
[13:20:17.906]   - Field: ‘version’
[13:20:17.906]   - Field: ‘result’
[13:20:17.906]   - Field: ‘asynchronous’
[13:20:17.906]   - Field: ‘calls’
[13:20:17.906]   - Field: ‘globals’
[13:20:17.906]   - Field: ‘stdout’
[13:20:17.907]   - Field: ‘earlySignal’
[13:20:17.907]   - Field: ‘lazy’
[13:20:17.907]   - Field: ‘state’
[13:20:17.907] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:17.907] - Launch lazy future ...
[13:20:17.907] Packages needed by the future expression (n = 0): <none>
[13:20:17.907] Packages needed by future strategies (n = 0): <none>
[13:20:17.908] {
[13:20:17.908]     {
[13:20:17.908]         {
[13:20:17.908]             ...future.startTime <- base::Sys.time()
[13:20:17.908]             {
[13:20:17.908]                 {
[13:20:17.908]                   {
[13:20:17.908]                     {
[13:20:17.908]                       base::local({
[13:20:17.908]                         has_future <- base::requireNamespace("future", 
[13:20:17.908]                           quietly = TRUE)
[13:20:17.908]                         if (has_future) {
[13:20:17.908]                           ns <- base::getNamespace("future")
[13:20:17.908]                           version <- ns[[".package"]][["version"]]
[13:20:17.908]                           if (is.null(version)) 
[13:20:17.908]                             version <- utils::packageVersion("future")
[13:20:17.908]                         }
[13:20:17.908]                         else {
[13:20:17.908]                           version <- NULL
[13:20:17.908]                         }
[13:20:17.908]                         if (!has_future || version < "1.8.0") {
[13:20:17.908]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.908]                             "", base::R.version$version.string), 
[13:20:17.908]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:17.908]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.908]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.908]                               "release", "version")], collapse = " "), 
[13:20:17.908]                             hostname = base::Sys.info()[["nodename"]])
[13:20:17.908]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.908]                             info)
[13:20:17.908]                           info <- base::paste(info, collapse = "; ")
[13:20:17.908]                           if (!has_future) {
[13:20:17.908]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.908]                               info)
[13:20:17.908]                           }
[13:20:17.908]                           else {
[13:20:17.908]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.908]                               info, version)
[13:20:17.908]                           }
[13:20:17.908]                           base::stop(msg)
[13:20:17.908]                         }
[13:20:17.908]                       })
[13:20:17.908]                     }
[13:20:17.908]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:17.908]                     base::options(mc.cores = 1L)
[13:20:17.908]                   }
[13:20:17.908]                   options(future.plan = NULL)
[13:20:17.908]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.908]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.908]                 }
[13:20:17.908]                 ...future.workdir <- getwd()
[13:20:17.908]             }
[13:20:17.908]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.908]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.908]         }
[13:20:17.908]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.908]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.908]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.908]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.908]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.908]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.908]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.908]             base::names(...future.oldOptions))
[13:20:17.908]     }
[13:20:17.908]     if (FALSE) {
[13:20:17.908]     }
[13:20:17.908]     else {
[13:20:17.908]         if (TRUE) {
[13:20:17.908]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.908]                 open = "w")
[13:20:17.908]         }
[13:20:17.908]         else {
[13:20:17.908]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.908]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.908]         }
[13:20:17.908]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.908]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.908]             base::sink(type = "output", split = FALSE)
[13:20:17.908]             base::close(...future.stdout)
[13:20:17.908]         }, add = TRUE)
[13:20:17.908]     }
[13:20:17.908]     ...future.frame <- base::sys.nframe()
[13:20:17.908]     ...future.conditions <- base::list()
[13:20:17.908]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.908]     if (FALSE) {
[13:20:17.908]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.908]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.908]     }
[13:20:17.908]     ...future.result <- base::tryCatch({
[13:20:17.908]         base::withCallingHandlers({
[13:20:17.908]             ...future.value <- base::withVisible(base::local({
[13:20:17.908]                 withCallingHandlers({
[13:20:17.908]                   {
[13:20:17.908]                     2 * a
[13:20:17.908]                   }
[13:20:17.908]                 }, immediateCondition = function(cond) {
[13:20:17.908]                   save_rds <- function (object, pathname, ...) 
[13:20:17.908]                   {
[13:20:17.908]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:17.908]                     if (file_test("-f", pathname_tmp)) {
[13:20:17.908]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.908]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:17.908]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.908]                         fi_tmp[["mtime"]])
[13:20:17.908]                     }
[13:20:17.908]                     tryCatch({
[13:20:17.908]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:17.908]                     }, error = function(ex) {
[13:20:17.908]                       msg <- conditionMessage(ex)
[13:20:17.908]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.908]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:17.908]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.908]                         fi_tmp[["mtime"]], msg)
[13:20:17.908]                       ex$message <- msg
[13:20:17.908]                       stop(ex)
[13:20:17.908]                     })
[13:20:17.908]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:17.908]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:17.908]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:17.908]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.908]                       fi <- file.info(pathname)
[13:20:17.908]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:17.908]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.908]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:17.908]                         fi[["size"]], fi[["mtime"]])
[13:20:17.908]                       stop(msg)
[13:20:17.908]                     }
[13:20:17.908]                     invisible(pathname)
[13:20:17.908]                   }
[13:20:17.908]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:17.908]                     rootPath = tempdir()) 
[13:20:17.908]                   {
[13:20:17.908]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:17.908]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:17.908]                       tmpdir = path, fileext = ".rds")
[13:20:17.908]                     save_rds(obj, file)
[13:20:17.908]                   }
[13:20:17.908]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:17.908]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.908]                   {
[13:20:17.908]                     inherits <- base::inherits
[13:20:17.908]                     invokeRestart <- base::invokeRestart
[13:20:17.908]                     is.null <- base::is.null
[13:20:17.908]                     muffled <- FALSE
[13:20:17.908]                     if (inherits(cond, "message")) {
[13:20:17.908]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:17.908]                       if (muffled) 
[13:20:17.908]                         invokeRestart("muffleMessage")
[13:20:17.908]                     }
[13:20:17.908]                     else if (inherits(cond, "warning")) {
[13:20:17.908]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:17.908]                       if (muffled) 
[13:20:17.908]                         invokeRestart("muffleWarning")
[13:20:17.908]                     }
[13:20:17.908]                     else if (inherits(cond, "condition")) {
[13:20:17.908]                       if (!is.null(pattern)) {
[13:20:17.908]                         computeRestarts <- base::computeRestarts
[13:20:17.908]                         grepl <- base::grepl
[13:20:17.908]                         restarts <- computeRestarts(cond)
[13:20:17.908]                         for (restart in restarts) {
[13:20:17.908]                           name <- restart$name
[13:20:17.908]                           if (is.null(name)) 
[13:20:17.908]                             next
[13:20:17.908]                           if (!grepl(pattern, name)) 
[13:20:17.908]                             next
[13:20:17.908]                           invokeRestart(restart)
[13:20:17.908]                           muffled <- TRUE
[13:20:17.908]                           break
[13:20:17.908]                         }
[13:20:17.908]                       }
[13:20:17.908]                     }
[13:20:17.908]                     invisible(muffled)
[13:20:17.908]                   }
[13:20:17.908]                   muffleCondition(cond)
[13:20:17.908]                 })
[13:20:17.908]             }))
[13:20:17.908]             future::FutureResult(value = ...future.value$value, 
[13:20:17.908]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.908]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.908]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.908]                     ...future.globalenv.names))
[13:20:17.908]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.908]         }, condition = base::local({
[13:20:17.908]             c <- base::c
[13:20:17.908]             inherits <- base::inherits
[13:20:17.908]             invokeRestart <- base::invokeRestart
[13:20:17.908]             length <- base::length
[13:20:17.908]             list <- base::list
[13:20:17.908]             seq.int <- base::seq.int
[13:20:17.908]             signalCondition <- base::signalCondition
[13:20:17.908]             sys.calls <- base::sys.calls
[13:20:17.908]             `[[` <- base::`[[`
[13:20:17.908]             `+` <- base::`+`
[13:20:17.908]             `<<-` <- base::`<<-`
[13:20:17.908]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.908]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.908]                   3L)]
[13:20:17.908]             }
[13:20:17.908]             function(cond) {
[13:20:17.908]                 is_error <- inherits(cond, "error")
[13:20:17.908]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.908]                   NULL)
[13:20:17.908]                 if (is_error) {
[13:20:17.908]                   sessionInformation <- function() {
[13:20:17.908]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.908]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.908]                       search = base::search(), system = base::Sys.info())
[13:20:17.908]                   }
[13:20:17.908]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.908]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.908]                     cond$call), session = sessionInformation(), 
[13:20:17.908]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.908]                   signalCondition(cond)
[13:20:17.908]                 }
[13:20:17.908]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.908]                 "immediateCondition"))) {
[13:20:17.908]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.908]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.908]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.908]                   if (TRUE && !signal) {
[13:20:17.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.908]                     {
[13:20:17.908]                       inherits <- base::inherits
[13:20:17.908]                       invokeRestart <- base::invokeRestart
[13:20:17.908]                       is.null <- base::is.null
[13:20:17.908]                       muffled <- FALSE
[13:20:17.908]                       if (inherits(cond, "message")) {
[13:20:17.908]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.908]                         if (muffled) 
[13:20:17.908]                           invokeRestart("muffleMessage")
[13:20:17.908]                       }
[13:20:17.908]                       else if (inherits(cond, "warning")) {
[13:20:17.908]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.908]                         if (muffled) 
[13:20:17.908]                           invokeRestart("muffleWarning")
[13:20:17.908]                       }
[13:20:17.908]                       else if (inherits(cond, "condition")) {
[13:20:17.908]                         if (!is.null(pattern)) {
[13:20:17.908]                           computeRestarts <- base::computeRestarts
[13:20:17.908]                           grepl <- base::grepl
[13:20:17.908]                           restarts <- computeRestarts(cond)
[13:20:17.908]                           for (restart in restarts) {
[13:20:17.908]                             name <- restart$name
[13:20:17.908]                             if (is.null(name)) 
[13:20:17.908]                               next
[13:20:17.908]                             if (!grepl(pattern, name)) 
[13:20:17.908]                               next
[13:20:17.908]                             invokeRestart(restart)
[13:20:17.908]                             muffled <- TRUE
[13:20:17.908]                             break
[13:20:17.908]                           }
[13:20:17.908]                         }
[13:20:17.908]                       }
[13:20:17.908]                       invisible(muffled)
[13:20:17.908]                     }
[13:20:17.908]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.908]                   }
[13:20:17.908]                 }
[13:20:17.908]                 else {
[13:20:17.908]                   if (TRUE) {
[13:20:17.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.908]                     {
[13:20:17.908]                       inherits <- base::inherits
[13:20:17.908]                       invokeRestart <- base::invokeRestart
[13:20:17.908]                       is.null <- base::is.null
[13:20:17.908]                       muffled <- FALSE
[13:20:17.908]                       if (inherits(cond, "message")) {
[13:20:17.908]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.908]                         if (muffled) 
[13:20:17.908]                           invokeRestart("muffleMessage")
[13:20:17.908]                       }
[13:20:17.908]                       else if (inherits(cond, "warning")) {
[13:20:17.908]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.908]                         if (muffled) 
[13:20:17.908]                           invokeRestart("muffleWarning")
[13:20:17.908]                       }
[13:20:17.908]                       else if (inherits(cond, "condition")) {
[13:20:17.908]                         if (!is.null(pattern)) {
[13:20:17.908]                           computeRestarts <- base::computeRestarts
[13:20:17.908]                           grepl <- base::grepl
[13:20:17.908]                           restarts <- computeRestarts(cond)
[13:20:17.908]                           for (restart in restarts) {
[13:20:17.908]                             name <- restart$name
[13:20:17.908]                             if (is.null(name)) 
[13:20:17.908]                               next
[13:20:17.908]                             if (!grepl(pattern, name)) 
[13:20:17.908]                               next
[13:20:17.908]                             invokeRestart(restart)
[13:20:17.908]                             muffled <- TRUE
[13:20:17.908]                             break
[13:20:17.908]                           }
[13:20:17.908]                         }
[13:20:17.908]                       }
[13:20:17.908]                       invisible(muffled)
[13:20:17.908]                     }
[13:20:17.908]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.908]                   }
[13:20:17.908]                 }
[13:20:17.908]             }
[13:20:17.908]         }))
[13:20:17.908]     }, error = function(ex) {
[13:20:17.908]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.908]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.908]                 ...future.rng), started = ...future.startTime, 
[13:20:17.908]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.908]             version = "1.8"), class = "FutureResult")
[13:20:17.908]     }, finally = {
[13:20:17.908]         if (!identical(...future.workdir, getwd())) 
[13:20:17.908]             setwd(...future.workdir)
[13:20:17.908]         {
[13:20:17.908]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.908]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.908]             }
[13:20:17.908]             base::options(...future.oldOptions)
[13:20:17.908]             if (.Platform$OS.type == "windows") {
[13:20:17.908]                 old_names <- names(...future.oldEnvVars)
[13:20:17.908]                 envs <- base::Sys.getenv()
[13:20:17.908]                 names <- names(envs)
[13:20:17.908]                 common <- intersect(names, old_names)
[13:20:17.908]                 added <- setdiff(names, old_names)
[13:20:17.908]                 removed <- setdiff(old_names, names)
[13:20:17.908]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.908]                   envs[common]]
[13:20:17.908]                 NAMES <- toupper(changed)
[13:20:17.908]                 args <- list()
[13:20:17.908]                 for (kk in seq_along(NAMES)) {
[13:20:17.908]                   name <- changed[[kk]]
[13:20:17.908]                   NAME <- NAMES[[kk]]
[13:20:17.908]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.908]                     next
[13:20:17.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.908]                 }
[13:20:17.908]                 NAMES <- toupper(added)
[13:20:17.908]                 for (kk in seq_along(NAMES)) {
[13:20:17.908]                   name <- added[[kk]]
[13:20:17.908]                   NAME <- NAMES[[kk]]
[13:20:17.908]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.908]                     next
[13:20:17.908]                   args[[name]] <- ""
[13:20:17.908]                 }
[13:20:17.908]                 NAMES <- toupper(removed)
[13:20:17.908]                 for (kk in seq_along(NAMES)) {
[13:20:17.908]                   name <- removed[[kk]]
[13:20:17.908]                   NAME <- NAMES[[kk]]
[13:20:17.908]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.908]                     next
[13:20:17.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.908]                 }
[13:20:17.908]                 if (length(args) > 0) 
[13:20:17.908]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.908]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.908]             }
[13:20:17.908]             else {
[13:20:17.908]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.908]             }
[13:20:17.908]             {
[13:20:17.908]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.908]                   0L) {
[13:20:17.908]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.908]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.908]                   base::options(opts)
[13:20:17.908]                 }
[13:20:17.908]                 {
[13:20:17.908]                   {
[13:20:17.908]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:17.908]                     NULL
[13:20:17.908]                   }
[13:20:17.908]                   options(future.plan = NULL)
[13:20:17.908]                   if (is.na(NA_character_)) 
[13:20:17.908]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.908]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.908]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:17.908]                     envir = parent.frame()) 
[13:20:17.908]                   {
[13:20:17.908]                     default_workers <- missing(workers)
[13:20:17.908]                     if (is.function(workers)) 
[13:20:17.908]                       workers <- workers()
[13:20:17.908]                     workers <- structure(as.integer(workers), 
[13:20:17.908]                       class = class(workers))
[13:20:17.908]                     stop_if_not(is.finite(workers), workers >= 
[13:20:17.908]                       1L)
[13:20:17.908]                     if ((workers == 1L && !inherits(workers, 
[13:20:17.908]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:17.908]                       if (default_workers) 
[13:20:17.908]                         supportsMulticore(warn = TRUE)
[13:20:17.908]                       return(sequential(..., envir = envir))
[13:20:17.908]                     }
[13:20:17.908]                     oopts <- options(mc.cores = workers)
[13:20:17.908]                     on.exit(options(oopts))
[13:20:17.908]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:17.908]                       envir = envir)
[13:20:17.908]                     if (!future$lazy) 
[13:20:17.908]                       future <- run(future)
[13:20:17.908]                     invisible(future)
[13:20:17.908]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.908]                 }
[13:20:17.908]             }
[13:20:17.908]         }
[13:20:17.908]     })
[13:20:17.908]     if (TRUE) {
[13:20:17.908]         base::sink(type = "output", split = FALSE)
[13:20:17.908]         if (TRUE) {
[13:20:17.908]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.908]         }
[13:20:17.908]         else {
[13:20:17.908]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.908]         }
[13:20:17.908]         base::close(...future.stdout)
[13:20:17.908]         ...future.stdout <- NULL
[13:20:17.908]     }
[13:20:17.908]     ...future.result$conditions <- ...future.conditions
[13:20:17.908]     ...future.result$finished <- base::Sys.time()
[13:20:17.908]     ...future.result
[13:20:17.908] }
[13:20:17.911] assign_globals() ...
[13:20:17.911] List of 1
[13:20:17.911]  $ a: num 1
[13:20:17.911]  - attr(*, "where")=List of 1
[13:20:17.911]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.911]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.911]  - attr(*, "resolved")= logi FALSE
[13:20:17.911]  - attr(*, "total_size")= num 56
[13:20:17.911]  - attr(*, "already-done")= logi TRUE
[13:20:17.914] - copied ‘a’ to environment
[13:20:17.914] assign_globals() ... done
[13:20:17.914] requestCore(): workers = 2
[13:20:17.916] MulticoreFuture started
[13:20:17.917] - Launch lazy future ... done
[13:20:17.917] run() for ‘MulticoreFuture’ ... done
[13:20:17.917] plan(): Setting new future strategy stack:
[13:20:17.918] List of future strategies:
[13:20:17.918] 1. sequential:
[13:20:17.918]    - args: function (..., envir = parent.frame())
[13:20:17.918]    - tweaked: FALSE
[13:20:17.918]    - call: NULL
[13:20:17.918] plan(): nbrOfWorkers() = 1
[13:20:17.920] plan(): Setting new future strategy stack:
[13:20:17.921] List of future strategies:
[13:20:17.921] 1. multicore:
[13:20:17.921]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:17.921]    - tweaked: FALSE
[13:20:17.921]    - call: plan(strategy)
[13:20:17.926] plan(): nbrOfWorkers() = 2
[13:20:17.927] getGlobalsAndPackages() ...
[13:20:17.927] Searching for globals...
[13:20:17.928] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.928] Searching for globals ... DONE
[13:20:17.929] Resolving globals: FALSE
[13:20:17.929] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.930] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.930] - globals: [1] ‘a’
[13:20:17.930] 
[13:20:17.930] getGlobalsAndPackages() ... DONE
[13:20:17.930] run() for ‘Future’ ...
[13:20:17.931] - state: ‘created’
[13:20:17.931] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:17.935] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:17.935] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:17.935]   - Field: ‘label’
[13:20:17.935]   - Field: ‘local’
[13:20:17.936]   - Field: ‘owner’
[13:20:17.936]   - Field: ‘envir’
[13:20:17.936]   - Field: ‘workers’
[13:20:17.936]   - Field: ‘packages’
[13:20:17.936]   - Field: ‘gc’
[13:20:17.936]   - Field: ‘job’
[13:20:17.936]   - Field: ‘conditions’
[13:20:17.936]   - Field: ‘expr’
[13:20:17.936]   - Field: ‘uuid’
[13:20:17.937]   - Field: ‘seed’
[13:20:17.937]   - Field: ‘version’
[13:20:17.937]   - Field: ‘result’
[13:20:17.937]   - Field: ‘asynchronous’
[13:20:17.937]   - Field: ‘calls’
[13:20:17.937]   - Field: ‘globals’
[13:20:17.937]   - Field: ‘stdout’
[13:20:17.937]   - Field: ‘earlySignal’
[13:20:17.938]   - Field: ‘lazy’
[13:20:17.938]   - Field: ‘state’
[13:20:17.938] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:17.938] - Launch lazy future ...
[13:20:17.938] Packages needed by the future expression (n = 0): <none>
[13:20:17.938] Packages needed by future strategies (n = 0): <none>
[13:20:17.942] {
[13:20:17.942]     {
[13:20:17.942]         {
[13:20:17.942]             ...future.startTime <- base::Sys.time()
[13:20:17.942]             {
[13:20:17.942]                 {
[13:20:17.942]                   {
[13:20:17.942]                     {
[13:20:17.942]                       base::local({
[13:20:17.942]                         has_future <- base::requireNamespace("future", 
[13:20:17.942]                           quietly = TRUE)
[13:20:17.942]                         if (has_future) {
[13:20:17.942]                           ns <- base::getNamespace("future")
[13:20:17.942]                           version <- ns[[".package"]][["version"]]
[13:20:17.942]                           if (is.null(version)) 
[13:20:17.942]                             version <- utils::packageVersion("future")
[13:20:17.942]                         }
[13:20:17.942]                         else {
[13:20:17.942]                           version <- NULL
[13:20:17.942]                         }
[13:20:17.942]                         if (!has_future || version < "1.8.0") {
[13:20:17.942]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.942]                             "", base::R.version$version.string), 
[13:20:17.942]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:17.942]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.942]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.942]                               "release", "version")], collapse = " "), 
[13:20:17.942]                             hostname = base::Sys.info()[["nodename"]])
[13:20:17.942]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.942]                             info)
[13:20:17.942]                           info <- base::paste(info, collapse = "; ")
[13:20:17.942]                           if (!has_future) {
[13:20:17.942]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.942]                               info)
[13:20:17.942]                           }
[13:20:17.942]                           else {
[13:20:17.942]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.942]                               info, version)
[13:20:17.942]                           }
[13:20:17.942]                           base::stop(msg)
[13:20:17.942]                         }
[13:20:17.942]                       })
[13:20:17.942]                     }
[13:20:17.942]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:17.942]                     base::options(mc.cores = 1L)
[13:20:17.942]                   }
[13:20:17.942]                   options(future.plan = NULL)
[13:20:17.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.942]                 }
[13:20:17.942]                 ...future.workdir <- getwd()
[13:20:17.942]             }
[13:20:17.942]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.942]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.942]         }
[13:20:17.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.942]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.942]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.942]             base::names(...future.oldOptions))
[13:20:17.942]     }
[13:20:17.942]     if (FALSE) {
[13:20:17.942]     }
[13:20:17.942]     else {
[13:20:17.942]         if (TRUE) {
[13:20:17.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.942]                 open = "w")
[13:20:17.942]         }
[13:20:17.942]         else {
[13:20:17.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.942]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.942]         }
[13:20:17.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.942]             base::sink(type = "output", split = FALSE)
[13:20:17.942]             base::close(...future.stdout)
[13:20:17.942]         }, add = TRUE)
[13:20:17.942]     }
[13:20:17.942]     ...future.frame <- base::sys.nframe()
[13:20:17.942]     ...future.conditions <- base::list()
[13:20:17.942]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.942]     if (FALSE) {
[13:20:17.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.942]     }
[13:20:17.942]     ...future.result <- base::tryCatch({
[13:20:17.942]         base::withCallingHandlers({
[13:20:17.942]             ...future.value <- base::withVisible(base::local({
[13:20:17.942]                 withCallingHandlers({
[13:20:17.942]                   {
[13:20:17.942]                     2 * a
[13:20:17.942]                   }
[13:20:17.942]                 }, immediateCondition = function(cond) {
[13:20:17.942]                   save_rds <- function (object, pathname, ...) 
[13:20:17.942]                   {
[13:20:17.942]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:17.942]                     if (file_test("-f", pathname_tmp)) {
[13:20:17.942]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.942]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:17.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.942]                         fi_tmp[["mtime"]])
[13:20:17.942]                     }
[13:20:17.942]                     tryCatch({
[13:20:17.942]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:17.942]                     }, error = function(ex) {
[13:20:17.942]                       msg <- conditionMessage(ex)
[13:20:17.942]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.942]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:17.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.942]                         fi_tmp[["mtime"]], msg)
[13:20:17.942]                       ex$message <- msg
[13:20:17.942]                       stop(ex)
[13:20:17.942]                     })
[13:20:17.942]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:17.942]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:17.942]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:17.942]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.942]                       fi <- file.info(pathname)
[13:20:17.942]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:17.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.942]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:17.942]                         fi[["size"]], fi[["mtime"]])
[13:20:17.942]                       stop(msg)
[13:20:17.942]                     }
[13:20:17.942]                     invisible(pathname)
[13:20:17.942]                   }
[13:20:17.942]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:17.942]                     rootPath = tempdir()) 
[13:20:17.942]                   {
[13:20:17.942]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:17.942]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:17.942]                       tmpdir = path, fileext = ".rds")
[13:20:17.942]                     save_rds(obj, file)
[13:20:17.942]                   }
[13:20:17.942]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:17.942]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.942]                   {
[13:20:17.942]                     inherits <- base::inherits
[13:20:17.942]                     invokeRestart <- base::invokeRestart
[13:20:17.942]                     is.null <- base::is.null
[13:20:17.942]                     muffled <- FALSE
[13:20:17.942]                     if (inherits(cond, "message")) {
[13:20:17.942]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:17.942]                       if (muffled) 
[13:20:17.942]                         invokeRestart("muffleMessage")
[13:20:17.942]                     }
[13:20:17.942]                     else if (inherits(cond, "warning")) {
[13:20:17.942]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:17.942]                       if (muffled) 
[13:20:17.942]                         invokeRestart("muffleWarning")
[13:20:17.942]                     }
[13:20:17.942]                     else if (inherits(cond, "condition")) {
[13:20:17.942]                       if (!is.null(pattern)) {
[13:20:17.942]                         computeRestarts <- base::computeRestarts
[13:20:17.942]                         grepl <- base::grepl
[13:20:17.942]                         restarts <- computeRestarts(cond)
[13:20:17.942]                         for (restart in restarts) {
[13:20:17.942]                           name <- restart$name
[13:20:17.942]                           if (is.null(name)) 
[13:20:17.942]                             next
[13:20:17.942]                           if (!grepl(pattern, name)) 
[13:20:17.942]                             next
[13:20:17.942]                           invokeRestart(restart)
[13:20:17.942]                           muffled <- TRUE
[13:20:17.942]                           break
[13:20:17.942]                         }
[13:20:17.942]                       }
[13:20:17.942]                     }
[13:20:17.942]                     invisible(muffled)
[13:20:17.942]                   }
[13:20:17.942]                   muffleCondition(cond)
[13:20:17.942]                 })
[13:20:17.942]             }))
[13:20:17.942]             future::FutureResult(value = ...future.value$value, 
[13:20:17.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.942]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.942]                     ...future.globalenv.names))
[13:20:17.942]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.942]         }, condition = base::local({
[13:20:17.942]             c <- base::c
[13:20:17.942]             inherits <- base::inherits
[13:20:17.942]             invokeRestart <- base::invokeRestart
[13:20:17.942]             length <- base::length
[13:20:17.942]             list <- base::list
[13:20:17.942]             seq.int <- base::seq.int
[13:20:17.942]             signalCondition <- base::signalCondition
[13:20:17.942]             sys.calls <- base::sys.calls
[13:20:17.942]             `[[` <- base::`[[`
[13:20:17.942]             `+` <- base::`+`
[13:20:17.942]             `<<-` <- base::`<<-`
[13:20:17.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.942]                   3L)]
[13:20:17.942]             }
[13:20:17.942]             function(cond) {
[13:20:17.942]                 is_error <- inherits(cond, "error")
[13:20:17.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.942]                   NULL)
[13:20:17.942]                 if (is_error) {
[13:20:17.942]                   sessionInformation <- function() {
[13:20:17.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.942]                       search = base::search(), system = base::Sys.info())
[13:20:17.942]                   }
[13:20:17.942]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.942]                     cond$call), session = sessionInformation(), 
[13:20:17.942]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.942]                   signalCondition(cond)
[13:20:17.942]                 }
[13:20:17.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.942]                 "immediateCondition"))) {
[13:20:17.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.942]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.942]                   if (TRUE && !signal) {
[13:20:17.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.942]                     {
[13:20:17.942]                       inherits <- base::inherits
[13:20:17.942]                       invokeRestart <- base::invokeRestart
[13:20:17.942]                       is.null <- base::is.null
[13:20:17.942]                       muffled <- FALSE
[13:20:17.942]                       if (inherits(cond, "message")) {
[13:20:17.942]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.942]                         if (muffled) 
[13:20:17.942]                           invokeRestart("muffleMessage")
[13:20:17.942]                       }
[13:20:17.942]                       else if (inherits(cond, "warning")) {
[13:20:17.942]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.942]                         if (muffled) 
[13:20:17.942]                           invokeRestart("muffleWarning")
[13:20:17.942]                       }
[13:20:17.942]                       else if (inherits(cond, "condition")) {
[13:20:17.942]                         if (!is.null(pattern)) {
[13:20:17.942]                           computeRestarts <- base::computeRestarts
[13:20:17.942]                           grepl <- base::grepl
[13:20:17.942]                           restarts <- computeRestarts(cond)
[13:20:17.942]                           for (restart in restarts) {
[13:20:17.942]                             name <- restart$name
[13:20:17.942]                             if (is.null(name)) 
[13:20:17.942]                               next
[13:20:17.942]                             if (!grepl(pattern, name)) 
[13:20:17.942]                               next
[13:20:17.942]                             invokeRestart(restart)
[13:20:17.942]                             muffled <- TRUE
[13:20:17.942]                             break
[13:20:17.942]                           }
[13:20:17.942]                         }
[13:20:17.942]                       }
[13:20:17.942]                       invisible(muffled)
[13:20:17.942]                     }
[13:20:17.942]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.942]                   }
[13:20:17.942]                 }
[13:20:17.942]                 else {
[13:20:17.942]                   if (TRUE) {
[13:20:17.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.942]                     {
[13:20:17.942]                       inherits <- base::inherits
[13:20:17.942]                       invokeRestart <- base::invokeRestart
[13:20:17.942]                       is.null <- base::is.null
[13:20:17.942]                       muffled <- FALSE
[13:20:17.942]                       if (inherits(cond, "message")) {
[13:20:17.942]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.942]                         if (muffled) 
[13:20:17.942]                           invokeRestart("muffleMessage")
[13:20:17.942]                       }
[13:20:17.942]                       else if (inherits(cond, "warning")) {
[13:20:17.942]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.942]                         if (muffled) 
[13:20:17.942]                           invokeRestart("muffleWarning")
[13:20:17.942]                       }
[13:20:17.942]                       else if (inherits(cond, "condition")) {
[13:20:17.942]                         if (!is.null(pattern)) {
[13:20:17.942]                           computeRestarts <- base::computeRestarts
[13:20:17.942]                           grepl <- base::grepl
[13:20:17.942]                           restarts <- computeRestarts(cond)
[13:20:17.942]                           for (restart in restarts) {
[13:20:17.942]                             name <- restart$name
[13:20:17.942]                             if (is.null(name)) 
[13:20:17.942]                               next
[13:20:17.942]                             if (!grepl(pattern, name)) 
[13:20:17.942]                               next
[13:20:17.942]                             invokeRestart(restart)
[13:20:17.942]                             muffled <- TRUE
[13:20:17.942]                             break
[13:20:17.942]                           }
[13:20:17.942]                         }
[13:20:17.942]                       }
[13:20:17.942]                       invisible(muffled)
[13:20:17.942]                     }
[13:20:17.942]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.942]                   }
[13:20:17.942]                 }
[13:20:17.942]             }
[13:20:17.942]         }))
[13:20:17.942]     }, error = function(ex) {
[13:20:17.942]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.942]                 ...future.rng), started = ...future.startTime, 
[13:20:17.942]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.942]             version = "1.8"), class = "FutureResult")
[13:20:17.942]     }, finally = {
[13:20:17.942]         if (!identical(...future.workdir, getwd())) 
[13:20:17.942]             setwd(...future.workdir)
[13:20:17.942]         {
[13:20:17.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.942]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.942]             }
[13:20:17.942]             base::options(...future.oldOptions)
[13:20:17.942]             if (.Platform$OS.type == "windows") {
[13:20:17.942]                 old_names <- names(...future.oldEnvVars)
[13:20:17.942]                 envs <- base::Sys.getenv()
[13:20:17.942]                 names <- names(envs)
[13:20:17.942]                 common <- intersect(names, old_names)
[13:20:17.942]                 added <- setdiff(names, old_names)
[13:20:17.942]                 removed <- setdiff(old_names, names)
[13:20:17.942]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.942]                   envs[common]]
[13:20:17.942]                 NAMES <- toupper(changed)
[13:20:17.942]                 args <- list()
[13:20:17.942]                 for (kk in seq_along(NAMES)) {
[13:20:17.942]                   name <- changed[[kk]]
[13:20:17.942]                   NAME <- NAMES[[kk]]
[13:20:17.942]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.942]                     next
[13:20:17.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.942]                 }
[13:20:17.942]                 NAMES <- toupper(added)
[13:20:17.942]                 for (kk in seq_along(NAMES)) {
[13:20:17.942]                   name <- added[[kk]]
[13:20:17.942]                   NAME <- NAMES[[kk]]
[13:20:17.942]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.942]                     next
[13:20:17.942]                   args[[name]] <- ""
[13:20:17.942]                 }
[13:20:17.942]                 NAMES <- toupper(removed)
[13:20:17.942]                 for (kk in seq_along(NAMES)) {
[13:20:17.942]                   name <- removed[[kk]]
[13:20:17.942]                   NAME <- NAMES[[kk]]
[13:20:17.942]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.942]                     next
[13:20:17.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.942]                 }
[13:20:17.942]                 if (length(args) > 0) 
[13:20:17.942]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.942]             }
[13:20:17.942]             else {
[13:20:17.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.942]             }
[13:20:17.942]             {
[13:20:17.942]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.942]                   0L) {
[13:20:17.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.942]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.942]                   base::options(opts)
[13:20:17.942]                 }
[13:20:17.942]                 {
[13:20:17.942]                   {
[13:20:17.942]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:17.942]                     NULL
[13:20:17.942]                   }
[13:20:17.942]                   options(future.plan = NULL)
[13:20:17.942]                   if (is.na(NA_character_)) 
[13:20:17.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.942]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:17.942]                     envir = parent.frame()) 
[13:20:17.942]                   {
[13:20:17.942]                     default_workers <- missing(workers)
[13:20:17.942]                     if (is.function(workers)) 
[13:20:17.942]                       workers <- workers()
[13:20:17.942]                     workers <- structure(as.integer(workers), 
[13:20:17.942]                       class = class(workers))
[13:20:17.942]                     stop_if_not(is.finite(workers), workers >= 
[13:20:17.942]                       1L)
[13:20:17.942]                     if ((workers == 1L && !inherits(workers, 
[13:20:17.942]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:17.942]                       if (default_workers) 
[13:20:17.942]                         supportsMulticore(warn = TRUE)
[13:20:17.942]                       return(sequential(..., envir = envir))
[13:20:17.942]                     }
[13:20:17.942]                     oopts <- options(mc.cores = workers)
[13:20:17.942]                     on.exit(options(oopts))
[13:20:17.942]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:17.942]                       envir = envir)
[13:20:17.942]                     if (!future$lazy) 
[13:20:17.942]                       future <- run(future)
[13:20:17.942]                     invisible(future)
[13:20:17.942]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.942]                 }
[13:20:17.942]             }
[13:20:17.942]         }
[13:20:17.942]     })
[13:20:17.942]     if (TRUE) {
[13:20:17.942]         base::sink(type = "output", split = FALSE)
[13:20:17.942]         if (TRUE) {
[13:20:17.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.942]         }
[13:20:17.942]         else {
[13:20:17.942]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.942]         }
[13:20:17.942]         base::close(...future.stdout)
[13:20:17.942]         ...future.stdout <- NULL
[13:20:17.942]     }
[13:20:17.942]     ...future.result$conditions <- ...future.conditions
[13:20:17.942]     ...future.result$finished <- base::Sys.time()
[13:20:17.942]     ...future.result
[13:20:17.942] }
[13:20:17.944] assign_globals() ...
[13:20:17.944] List of 1
[13:20:17.944]  $ a: num 1
[13:20:17.944]  - attr(*, "where")=List of 1
[13:20:17.944]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.944]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.944]  - attr(*, "resolved")= logi FALSE
[13:20:17.944]  - attr(*, "total_size")= num 56
[13:20:17.944]  - attr(*, "already-done")= logi TRUE
[13:20:17.948] - copied ‘a’ to environment
[13:20:17.948] assign_globals() ... done
[13:20:17.948] requestCore(): workers = 2
[13:20:17.950] MulticoreFuture started
[13:20:17.951] - Launch lazy future ... done
[13:20:17.951] run() for ‘MulticoreFuture’ ... done
[13:20:17.951] plan(): Setting new future strategy stack:
[13:20:17.952] List of future strategies:
[13:20:17.952] 1. sequential:
[13:20:17.952]    - args: function (..., envir = parent.frame())
[13:20:17.952]    - tweaked: FALSE
[13:20:17.952]    - call: NULL
[13:20:17.952] plan(): nbrOfWorkers() = 1
[13:20:17.955] plan(): Setting new future strategy stack:
[13:20:17.955] List of future strategies:
[13:20:17.955] 1. multicore:
[13:20:17.955]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:17.955]    - tweaked: FALSE
[13:20:17.955]    - call: plan(strategy)
[13:20:17.960] plan(): nbrOfWorkers() = 2
[13:20:17.961] getGlobalsAndPackages() ...
[13:20:17.961] Searching for globals...
[13:20:17.963] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.963] Searching for globals ... DONE
[13:20:17.963] Resolving globals: FALSE
[13:20:17.964] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.964] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.964] - globals: [1] ‘a’
[13:20:17.964] 
[13:20:17.965] getGlobalsAndPackages() ... DONE
[13:20:17.965] run() for ‘Future’ ...
[13:20:17.965] - state: ‘created’
[13:20:17.966] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:17.971] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:17.971] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:17.971]   - Field: ‘label’
[13:20:17.971]   - Field: ‘local’
[13:20:17.971]   - Field: ‘owner’
[13:20:17.971]   - Field: ‘envir’
[13:20:17.972]   - Field: ‘workers’
[13:20:17.972]   - Field: ‘packages’
[13:20:17.972]   - Field: ‘gc’
[13:20:17.972]   - Field: ‘job’
[13:20:17.972]   - Field: ‘conditions’
[13:20:17.972]   - Field: ‘expr’
[13:20:17.972]   - Field: ‘uuid’
[13:20:17.972]   - Field: ‘seed’
[13:20:17.972]   - Field: ‘version’
[13:20:17.973]   - Field: ‘result’
[13:20:17.973]   - Field: ‘asynchronous’
[13:20:17.973]   - Field: ‘calls’
[13:20:17.973]   - Field: ‘globals’
[13:20:17.973]   - Field: ‘stdout’
[13:20:17.973]   - Field: ‘earlySignal’
[13:20:17.973]   - Field: ‘lazy’
[13:20:17.973]   - Field: ‘state’
[13:20:17.974] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:17.974] - Launch lazy future ...
[13:20:17.974] Packages needed by the future expression (n = 0): <none>
[13:20:17.974] Packages needed by future strategies (n = 0): <none>
[13:20:17.975] {
[13:20:17.975]     {
[13:20:17.975]         {
[13:20:17.975]             ...future.startTime <- base::Sys.time()
[13:20:17.975]             {
[13:20:17.975]                 {
[13:20:17.975]                   {
[13:20:17.975]                     {
[13:20:17.975]                       base::local({
[13:20:17.975]                         has_future <- base::requireNamespace("future", 
[13:20:17.975]                           quietly = TRUE)
[13:20:17.975]                         if (has_future) {
[13:20:17.975]                           ns <- base::getNamespace("future")
[13:20:17.975]                           version <- ns[[".package"]][["version"]]
[13:20:17.975]                           if (is.null(version)) 
[13:20:17.975]                             version <- utils::packageVersion("future")
[13:20:17.975]                         }
[13:20:17.975]                         else {
[13:20:17.975]                           version <- NULL
[13:20:17.975]                         }
[13:20:17.975]                         if (!has_future || version < "1.8.0") {
[13:20:17.975]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:17.975]                             "", base::R.version$version.string), 
[13:20:17.975]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:17.975]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:17.975]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:17.975]                               "release", "version")], collapse = " "), 
[13:20:17.975]                             hostname = base::Sys.info()[["nodename"]])
[13:20:17.975]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:17.975]                             info)
[13:20:17.975]                           info <- base::paste(info, collapse = "; ")
[13:20:17.975]                           if (!has_future) {
[13:20:17.975]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:17.975]                               info)
[13:20:17.975]                           }
[13:20:17.975]                           else {
[13:20:17.975]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:17.975]                               info, version)
[13:20:17.975]                           }
[13:20:17.975]                           base::stop(msg)
[13:20:17.975]                         }
[13:20:17.975]                       })
[13:20:17.975]                     }
[13:20:17.975]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:17.975]                     base::options(mc.cores = 1L)
[13:20:17.975]                   }
[13:20:17.975]                   options(future.plan = NULL)
[13:20:17.975]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.975]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:17.975]                 }
[13:20:17.975]                 ...future.workdir <- getwd()
[13:20:17.975]             }
[13:20:17.975]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:17.975]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:17.975]         }
[13:20:17.975]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:17.975]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:17.975]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:17.975]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:17.975]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:17.975]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:17.975]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:17.975]             base::names(...future.oldOptions))
[13:20:17.975]     }
[13:20:17.975]     if (FALSE) {
[13:20:17.975]     }
[13:20:17.975]     else {
[13:20:17.975]         if (TRUE) {
[13:20:17.975]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:17.975]                 open = "w")
[13:20:17.975]         }
[13:20:17.975]         else {
[13:20:17.975]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:17.975]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:17.975]         }
[13:20:17.975]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:17.975]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:17.975]             base::sink(type = "output", split = FALSE)
[13:20:17.975]             base::close(...future.stdout)
[13:20:17.975]         }, add = TRUE)
[13:20:17.975]     }
[13:20:17.975]     ...future.frame <- base::sys.nframe()
[13:20:17.975]     ...future.conditions <- base::list()
[13:20:17.975]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:17.975]     if (FALSE) {
[13:20:17.975]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:17.975]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:17.975]     }
[13:20:17.975]     ...future.result <- base::tryCatch({
[13:20:17.975]         base::withCallingHandlers({
[13:20:17.975]             ...future.value <- base::withVisible(base::local({
[13:20:17.975]                 withCallingHandlers({
[13:20:17.975]                   {
[13:20:17.975]                     2 * a
[13:20:17.975]                   }
[13:20:17.975]                 }, immediateCondition = function(cond) {
[13:20:17.975]                   save_rds <- function (object, pathname, ...) 
[13:20:17.975]                   {
[13:20:17.975]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:17.975]                     if (file_test("-f", pathname_tmp)) {
[13:20:17.975]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.975]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:17.975]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.975]                         fi_tmp[["mtime"]])
[13:20:17.975]                     }
[13:20:17.975]                     tryCatch({
[13:20:17.975]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:17.975]                     }, error = function(ex) {
[13:20:17.975]                       msg <- conditionMessage(ex)
[13:20:17.975]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.975]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:17.975]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.975]                         fi_tmp[["mtime"]], msg)
[13:20:17.975]                       ex$message <- msg
[13:20:17.975]                       stop(ex)
[13:20:17.975]                     })
[13:20:17.975]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:17.975]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:17.975]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:17.975]                       fi_tmp <- file.info(pathname_tmp)
[13:20:17.975]                       fi <- file.info(pathname)
[13:20:17.975]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:17.975]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:17.975]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:17.975]                         fi[["size"]], fi[["mtime"]])
[13:20:17.975]                       stop(msg)
[13:20:17.975]                     }
[13:20:17.975]                     invisible(pathname)
[13:20:17.975]                   }
[13:20:17.975]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:17.975]                     rootPath = tempdir()) 
[13:20:17.975]                   {
[13:20:17.975]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:17.975]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:17.975]                       tmpdir = path, fileext = ".rds")
[13:20:17.975]                     save_rds(obj, file)
[13:20:17.975]                   }
[13:20:17.975]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:17.975]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.975]                   {
[13:20:17.975]                     inherits <- base::inherits
[13:20:17.975]                     invokeRestart <- base::invokeRestart
[13:20:17.975]                     is.null <- base::is.null
[13:20:17.975]                     muffled <- FALSE
[13:20:17.975]                     if (inherits(cond, "message")) {
[13:20:17.975]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:17.975]                       if (muffled) 
[13:20:17.975]                         invokeRestart("muffleMessage")
[13:20:17.975]                     }
[13:20:17.975]                     else if (inherits(cond, "warning")) {
[13:20:17.975]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:17.975]                       if (muffled) 
[13:20:17.975]                         invokeRestart("muffleWarning")
[13:20:17.975]                     }
[13:20:17.975]                     else if (inherits(cond, "condition")) {
[13:20:17.975]                       if (!is.null(pattern)) {
[13:20:17.975]                         computeRestarts <- base::computeRestarts
[13:20:17.975]                         grepl <- base::grepl
[13:20:17.975]                         restarts <- computeRestarts(cond)
[13:20:17.975]                         for (restart in restarts) {
[13:20:17.975]                           name <- restart$name
[13:20:17.975]                           if (is.null(name)) 
[13:20:17.975]                             next
[13:20:17.975]                           if (!grepl(pattern, name)) 
[13:20:17.975]                             next
[13:20:17.975]                           invokeRestart(restart)
[13:20:17.975]                           muffled <- TRUE
[13:20:17.975]                           break
[13:20:17.975]                         }
[13:20:17.975]                       }
[13:20:17.975]                     }
[13:20:17.975]                     invisible(muffled)
[13:20:17.975]                   }
[13:20:17.975]                   muffleCondition(cond)
[13:20:17.975]                 })
[13:20:17.975]             }))
[13:20:17.975]             future::FutureResult(value = ...future.value$value, 
[13:20:17.975]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.975]                   ...future.rng), globalenv = if (FALSE) 
[13:20:17.975]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:17.975]                     ...future.globalenv.names))
[13:20:17.975]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:17.975]         }, condition = base::local({
[13:20:17.975]             c <- base::c
[13:20:17.975]             inherits <- base::inherits
[13:20:17.975]             invokeRestart <- base::invokeRestart
[13:20:17.975]             length <- base::length
[13:20:17.975]             list <- base::list
[13:20:17.975]             seq.int <- base::seq.int
[13:20:17.975]             signalCondition <- base::signalCondition
[13:20:17.975]             sys.calls <- base::sys.calls
[13:20:17.975]             `[[` <- base::`[[`
[13:20:17.975]             `+` <- base::`+`
[13:20:17.975]             `<<-` <- base::`<<-`
[13:20:17.975]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:17.975]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:17.975]                   3L)]
[13:20:17.975]             }
[13:20:17.975]             function(cond) {
[13:20:17.975]                 is_error <- inherits(cond, "error")
[13:20:17.975]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:17.975]                   NULL)
[13:20:17.975]                 if (is_error) {
[13:20:17.975]                   sessionInformation <- function() {
[13:20:17.975]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:17.975]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:17.975]                       search = base::search(), system = base::Sys.info())
[13:20:17.975]                   }
[13:20:17.975]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.975]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:17.975]                     cond$call), session = sessionInformation(), 
[13:20:17.975]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:17.975]                   signalCondition(cond)
[13:20:17.975]                 }
[13:20:17.975]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:17.975]                 "immediateCondition"))) {
[13:20:17.975]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:17.975]                   ...future.conditions[[length(...future.conditions) + 
[13:20:17.975]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:17.975]                   if (TRUE && !signal) {
[13:20:17.975]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.975]                     {
[13:20:17.975]                       inherits <- base::inherits
[13:20:17.975]                       invokeRestart <- base::invokeRestart
[13:20:17.975]                       is.null <- base::is.null
[13:20:17.975]                       muffled <- FALSE
[13:20:17.975]                       if (inherits(cond, "message")) {
[13:20:17.975]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.975]                         if (muffled) 
[13:20:17.975]                           invokeRestart("muffleMessage")
[13:20:17.975]                       }
[13:20:17.975]                       else if (inherits(cond, "warning")) {
[13:20:17.975]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.975]                         if (muffled) 
[13:20:17.975]                           invokeRestart("muffleWarning")
[13:20:17.975]                       }
[13:20:17.975]                       else if (inherits(cond, "condition")) {
[13:20:17.975]                         if (!is.null(pattern)) {
[13:20:17.975]                           computeRestarts <- base::computeRestarts
[13:20:17.975]                           grepl <- base::grepl
[13:20:17.975]                           restarts <- computeRestarts(cond)
[13:20:17.975]                           for (restart in restarts) {
[13:20:17.975]                             name <- restart$name
[13:20:17.975]                             if (is.null(name)) 
[13:20:17.975]                               next
[13:20:17.975]                             if (!grepl(pattern, name)) 
[13:20:17.975]                               next
[13:20:17.975]                             invokeRestart(restart)
[13:20:17.975]                             muffled <- TRUE
[13:20:17.975]                             break
[13:20:17.975]                           }
[13:20:17.975]                         }
[13:20:17.975]                       }
[13:20:17.975]                       invisible(muffled)
[13:20:17.975]                     }
[13:20:17.975]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.975]                   }
[13:20:17.975]                 }
[13:20:17.975]                 else {
[13:20:17.975]                   if (TRUE) {
[13:20:17.975]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:17.975]                     {
[13:20:17.975]                       inherits <- base::inherits
[13:20:17.975]                       invokeRestart <- base::invokeRestart
[13:20:17.975]                       is.null <- base::is.null
[13:20:17.975]                       muffled <- FALSE
[13:20:17.975]                       if (inherits(cond, "message")) {
[13:20:17.975]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:17.975]                         if (muffled) 
[13:20:17.975]                           invokeRestart("muffleMessage")
[13:20:17.975]                       }
[13:20:17.975]                       else if (inherits(cond, "warning")) {
[13:20:17.975]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:17.975]                         if (muffled) 
[13:20:17.975]                           invokeRestart("muffleWarning")
[13:20:17.975]                       }
[13:20:17.975]                       else if (inherits(cond, "condition")) {
[13:20:17.975]                         if (!is.null(pattern)) {
[13:20:17.975]                           computeRestarts <- base::computeRestarts
[13:20:17.975]                           grepl <- base::grepl
[13:20:17.975]                           restarts <- computeRestarts(cond)
[13:20:17.975]                           for (restart in restarts) {
[13:20:17.975]                             name <- restart$name
[13:20:17.975]                             if (is.null(name)) 
[13:20:17.975]                               next
[13:20:17.975]                             if (!grepl(pattern, name)) 
[13:20:17.975]                               next
[13:20:17.975]                             invokeRestart(restart)
[13:20:17.975]                             muffled <- TRUE
[13:20:17.975]                             break
[13:20:17.975]                           }
[13:20:17.975]                         }
[13:20:17.975]                       }
[13:20:17.975]                       invisible(muffled)
[13:20:17.975]                     }
[13:20:17.975]                     muffleCondition(cond, pattern = "^muffle")
[13:20:17.975]                   }
[13:20:17.975]                 }
[13:20:17.975]             }
[13:20:17.975]         }))
[13:20:17.975]     }, error = function(ex) {
[13:20:17.975]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:17.975]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:17.975]                 ...future.rng), started = ...future.startTime, 
[13:20:17.975]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:17.975]             version = "1.8"), class = "FutureResult")
[13:20:17.975]     }, finally = {
[13:20:17.975]         if (!identical(...future.workdir, getwd())) 
[13:20:17.975]             setwd(...future.workdir)
[13:20:17.975]         {
[13:20:17.975]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:17.975]                 ...future.oldOptions$nwarnings <- NULL
[13:20:17.975]             }
[13:20:17.975]             base::options(...future.oldOptions)
[13:20:17.975]             if (.Platform$OS.type == "windows") {
[13:20:17.975]                 old_names <- names(...future.oldEnvVars)
[13:20:17.975]                 envs <- base::Sys.getenv()
[13:20:17.975]                 names <- names(envs)
[13:20:17.975]                 common <- intersect(names, old_names)
[13:20:17.975]                 added <- setdiff(names, old_names)
[13:20:17.975]                 removed <- setdiff(old_names, names)
[13:20:17.975]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:17.975]                   envs[common]]
[13:20:17.975]                 NAMES <- toupper(changed)
[13:20:17.975]                 args <- list()
[13:20:17.975]                 for (kk in seq_along(NAMES)) {
[13:20:17.975]                   name <- changed[[kk]]
[13:20:17.975]                   NAME <- NAMES[[kk]]
[13:20:17.975]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.975]                     next
[13:20:17.975]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.975]                 }
[13:20:17.975]                 NAMES <- toupper(added)
[13:20:17.975]                 for (kk in seq_along(NAMES)) {
[13:20:17.975]                   name <- added[[kk]]
[13:20:17.975]                   NAME <- NAMES[[kk]]
[13:20:17.975]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.975]                     next
[13:20:17.975]                   args[[name]] <- ""
[13:20:17.975]                 }
[13:20:17.975]                 NAMES <- toupper(removed)
[13:20:17.975]                 for (kk in seq_along(NAMES)) {
[13:20:17.975]                   name <- removed[[kk]]
[13:20:17.975]                   NAME <- NAMES[[kk]]
[13:20:17.975]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:17.975]                     next
[13:20:17.975]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:17.975]                 }
[13:20:17.975]                 if (length(args) > 0) 
[13:20:17.975]                   base::do.call(base::Sys.setenv, args = args)
[13:20:17.975]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:17.975]             }
[13:20:17.975]             else {
[13:20:17.975]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:17.975]             }
[13:20:17.975]             {
[13:20:17.975]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:17.975]                   0L) {
[13:20:17.975]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:17.975]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:17.975]                   base::options(opts)
[13:20:17.975]                 }
[13:20:17.975]                 {
[13:20:17.975]                   {
[13:20:17.975]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:17.975]                     NULL
[13:20:17.975]                   }
[13:20:17.975]                   options(future.plan = NULL)
[13:20:17.975]                   if (is.na(NA_character_)) 
[13:20:17.975]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:17.975]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:17.975]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:17.975]                     envir = parent.frame()) 
[13:20:17.975]                   {
[13:20:17.975]                     default_workers <- missing(workers)
[13:20:17.975]                     if (is.function(workers)) 
[13:20:17.975]                       workers <- workers()
[13:20:17.975]                     workers <- structure(as.integer(workers), 
[13:20:17.975]                       class = class(workers))
[13:20:17.975]                     stop_if_not(is.finite(workers), workers >= 
[13:20:17.975]                       1L)
[13:20:17.975]                     if ((workers == 1L && !inherits(workers, 
[13:20:17.975]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:17.975]                       if (default_workers) 
[13:20:17.975]                         supportsMulticore(warn = TRUE)
[13:20:17.975]                       return(sequential(..., envir = envir))
[13:20:17.975]                     }
[13:20:17.975]                     oopts <- options(mc.cores = workers)
[13:20:17.975]                     on.exit(options(oopts))
[13:20:17.975]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:17.975]                       envir = envir)
[13:20:17.975]                     if (!future$lazy) 
[13:20:17.975]                       future <- run(future)
[13:20:17.975]                     invisible(future)
[13:20:17.975]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:17.975]                 }
[13:20:17.975]             }
[13:20:17.975]         }
[13:20:17.975]     })
[13:20:17.975]     if (TRUE) {
[13:20:17.975]         base::sink(type = "output", split = FALSE)
[13:20:17.975]         if (TRUE) {
[13:20:17.975]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:17.975]         }
[13:20:17.975]         else {
[13:20:17.975]             ...future.result["stdout"] <- base::list(NULL)
[13:20:17.975]         }
[13:20:17.975]         base::close(...future.stdout)
[13:20:17.975]         ...future.stdout <- NULL
[13:20:17.975]     }
[13:20:17.975]     ...future.result$conditions <- ...future.conditions
[13:20:17.975]     ...future.result$finished <- base::Sys.time()
[13:20:17.975]     ...future.result
[13:20:17.975] }
[13:20:17.978] assign_globals() ...
[13:20:17.978] List of 1
[13:20:17.978]  $ a: num 1
[13:20:17.978]  - attr(*, "where")=List of 1
[13:20:17.978]   ..$ a:<environment: R_EmptyEnv> 
[13:20:17.978]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:17.978]  - attr(*, "resolved")= logi FALSE
[13:20:17.978]  - attr(*, "total_size")= num 56
[13:20:17.978]  - attr(*, "already-done")= logi TRUE
[13:20:17.981] - copied ‘a’ to environment
[13:20:17.981] assign_globals() ... done
[13:20:17.981] requestCore(): workers = 2
[13:20:17.983] MulticoreFuture started
[13:20:17.983] - Launch lazy future ... done
[13:20:17.983] run() for ‘MulticoreFuture’ ... done
[13:20:17.984] plan(): Setting new future strategy stack:
[13:20:17.984] List of future strategies:
[13:20:17.984] 1. sequential:
[13:20:17.984]    - args: function (..., envir = parent.frame())
[13:20:17.984]    - tweaked: FALSE
[13:20:17.984]    - call: NULL
[13:20:17.985] plan(): nbrOfWorkers() = 1
[13:20:17.987] plan(): Setting new future strategy stack:
[13:20:17.987] List of future strategies:
[13:20:17.987] 1. multicore:
[13:20:17.987]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:17.987]    - tweaked: FALSE
[13:20:17.987]    - call: plan(strategy)
[13:20:17.992] plan(): nbrOfWorkers() = 2
[13:20:17.993] getGlobalsAndPackages() ...
[13:20:17.993] Searching for globals...
[13:20:17.994] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:17.995] Searching for globals ... DONE
[13:20:17.995] Resolving globals: FALSE
[13:20:17.995] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:17.996] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:17.996] - globals: [1] ‘a’
[13:20:17.996] 
[13:20:17.996] getGlobalsAndPackages() ... DONE
[13:20:17.997] run() for ‘Future’ ...
[13:20:17.997] - state: ‘created’
[13:20:17.997] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:18.001] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:18.001] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:18.001]   - Field: ‘label’
[13:20:18.001]   - Field: ‘local’
[13:20:18.001]   - Field: ‘owner’
[13:20:18.002]   - Field: ‘envir’
[13:20:18.002]   - Field: ‘workers’
[13:20:18.002]   - Field: ‘packages’
[13:20:18.002]   - Field: ‘gc’
[13:20:18.002]   - Field: ‘job’
[13:20:18.002]   - Field: ‘conditions’
[13:20:18.002]   - Field: ‘expr’
[13:20:18.002]   - Field: ‘uuid’
[13:20:18.002]   - Field: ‘seed’
[13:20:18.003]   - Field: ‘version’
[13:20:18.003]   - Field: ‘result’
[13:20:18.003]   - Field: ‘asynchronous’
[13:20:18.003]   - Field: ‘calls’
[13:20:18.003]   - Field: ‘globals’
[13:20:18.003]   - Field: ‘stdout’
[13:20:18.003]   - Field: ‘earlySignal’
[13:20:18.003]   - Field: ‘lazy’
[13:20:18.003]   - Field: ‘state’
[13:20:18.004] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:18.004] - Launch lazy future ...
[13:20:18.004] Packages needed by the future expression (n = 0): <none>
[13:20:18.004] Packages needed by future strategies (n = 0): <none>
[13:20:18.005] {
[13:20:18.005]     {
[13:20:18.005]         {
[13:20:18.005]             ...future.startTime <- base::Sys.time()
[13:20:18.005]             {
[13:20:18.005]                 {
[13:20:18.005]                   {
[13:20:18.005]                     {
[13:20:18.005]                       base::local({
[13:20:18.005]                         has_future <- base::requireNamespace("future", 
[13:20:18.005]                           quietly = TRUE)
[13:20:18.005]                         if (has_future) {
[13:20:18.005]                           ns <- base::getNamespace("future")
[13:20:18.005]                           version <- ns[[".package"]][["version"]]
[13:20:18.005]                           if (is.null(version)) 
[13:20:18.005]                             version <- utils::packageVersion("future")
[13:20:18.005]                         }
[13:20:18.005]                         else {
[13:20:18.005]                           version <- NULL
[13:20:18.005]                         }
[13:20:18.005]                         if (!has_future || version < "1.8.0") {
[13:20:18.005]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.005]                             "", base::R.version$version.string), 
[13:20:18.005]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.005]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.005]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.005]                               "release", "version")], collapse = " "), 
[13:20:18.005]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.005]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.005]                             info)
[13:20:18.005]                           info <- base::paste(info, collapse = "; ")
[13:20:18.005]                           if (!has_future) {
[13:20:18.005]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.005]                               info)
[13:20:18.005]                           }
[13:20:18.005]                           else {
[13:20:18.005]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.005]                               info, version)
[13:20:18.005]                           }
[13:20:18.005]                           base::stop(msg)
[13:20:18.005]                         }
[13:20:18.005]                       })
[13:20:18.005]                     }
[13:20:18.005]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.005]                     base::options(mc.cores = 1L)
[13:20:18.005]                   }
[13:20:18.005]                   options(future.plan = NULL)
[13:20:18.005]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.005]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.005]                 }
[13:20:18.005]                 ...future.workdir <- getwd()
[13:20:18.005]             }
[13:20:18.005]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.005]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.005]         }
[13:20:18.005]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.005]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.005]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.005]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.005]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.005]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.005]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.005]             base::names(...future.oldOptions))
[13:20:18.005]     }
[13:20:18.005]     if (FALSE) {
[13:20:18.005]     }
[13:20:18.005]     else {
[13:20:18.005]         if (TRUE) {
[13:20:18.005]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.005]                 open = "w")
[13:20:18.005]         }
[13:20:18.005]         else {
[13:20:18.005]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.005]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.005]         }
[13:20:18.005]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.005]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.005]             base::sink(type = "output", split = FALSE)
[13:20:18.005]             base::close(...future.stdout)
[13:20:18.005]         }, add = TRUE)
[13:20:18.005]     }
[13:20:18.005]     ...future.frame <- base::sys.nframe()
[13:20:18.005]     ...future.conditions <- base::list()
[13:20:18.005]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.005]     if (FALSE) {
[13:20:18.005]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.005]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.005]     }
[13:20:18.005]     ...future.result <- base::tryCatch({
[13:20:18.005]         base::withCallingHandlers({
[13:20:18.005]             ...future.value <- base::withVisible(base::local({
[13:20:18.005]                 withCallingHandlers({
[13:20:18.005]                   {
[13:20:18.005]                     2 * a
[13:20:18.005]                   }
[13:20:18.005]                 }, immediateCondition = function(cond) {
[13:20:18.005]                   save_rds <- function (object, pathname, ...) 
[13:20:18.005]                   {
[13:20:18.005]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:18.005]                     if (file_test("-f", pathname_tmp)) {
[13:20:18.005]                       fi_tmp <- file.info(pathname_tmp)
[13:20:18.005]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:18.005]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:18.005]                         fi_tmp[["mtime"]])
[13:20:18.005]                     }
[13:20:18.005]                     tryCatch({
[13:20:18.005]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:18.005]                     }, error = function(ex) {
[13:20:18.005]                       msg <- conditionMessage(ex)
[13:20:18.005]                       fi_tmp <- file.info(pathname_tmp)
[13:20:18.005]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:18.005]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:18.005]                         fi_tmp[["mtime"]], msg)
[13:20:18.005]                       ex$message <- msg
[13:20:18.005]                       stop(ex)
[13:20:18.005]                     })
[13:20:18.005]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:18.005]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:18.005]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:18.005]                       fi_tmp <- file.info(pathname_tmp)
[13:20:18.005]                       fi <- file.info(pathname)
[13:20:18.005]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:18.005]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:18.005]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:18.005]                         fi[["size"]], fi[["mtime"]])
[13:20:18.005]                       stop(msg)
[13:20:18.005]                     }
[13:20:18.005]                     invisible(pathname)
[13:20:18.005]                   }
[13:20:18.005]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:18.005]                     rootPath = tempdir()) 
[13:20:18.005]                   {
[13:20:18.005]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:18.005]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:18.005]                       tmpdir = path, fileext = ".rds")
[13:20:18.005]                     save_rds(obj, file)
[13:20:18.005]                   }
[13:20:18.005]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:18.005]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.005]                   {
[13:20:18.005]                     inherits <- base::inherits
[13:20:18.005]                     invokeRestart <- base::invokeRestart
[13:20:18.005]                     is.null <- base::is.null
[13:20:18.005]                     muffled <- FALSE
[13:20:18.005]                     if (inherits(cond, "message")) {
[13:20:18.005]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.005]                       if (muffled) 
[13:20:18.005]                         invokeRestart("muffleMessage")
[13:20:18.005]                     }
[13:20:18.005]                     else if (inherits(cond, "warning")) {
[13:20:18.005]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.005]                       if (muffled) 
[13:20:18.005]                         invokeRestart("muffleWarning")
[13:20:18.005]                     }
[13:20:18.005]                     else if (inherits(cond, "condition")) {
[13:20:18.005]                       if (!is.null(pattern)) {
[13:20:18.005]                         computeRestarts <- base::computeRestarts
[13:20:18.005]                         grepl <- base::grepl
[13:20:18.005]                         restarts <- computeRestarts(cond)
[13:20:18.005]                         for (restart in restarts) {
[13:20:18.005]                           name <- restart$name
[13:20:18.005]                           if (is.null(name)) 
[13:20:18.005]                             next
[13:20:18.005]                           if (!grepl(pattern, name)) 
[13:20:18.005]                             next
[13:20:18.005]                           invokeRestart(restart)
[13:20:18.005]                           muffled <- TRUE
[13:20:18.005]                           break
[13:20:18.005]                         }
[13:20:18.005]                       }
[13:20:18.005]                     }
[13:20:18.005]                     invisible(muffled)
[13:20:18.005]                   }
[13:20:18.005]                   muffleCondition(cond)
[13:20:18.005]                 })
[13:20:18.005]             }))
[13:20:18.005]             future::FutureResult(value = ...future.value$value, 
[13:20:18.005]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.005]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.005]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.005]                     ...future.globalenv.names))
[13:20:18.005]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.005]         }, condition = base::local({
[13:20:18.005]             c <- base::c
[13:20:18.005]             inherits <- base::inherits
[13:20:18.005]             invokeRestart <- base::invokeRestart
[13:20:18.005]             length <- base::length
[13:20:18.005]             list <- base::list
[13:20:18.005]             seq.int <- base::seq.int
[13:20:18.005]             signalCondition <- base::signalCondition
[13:20:18.005]             sys.calls <- base::sys.calls
[13:20:18.005]             `[[` <- base::`[[`
[13:20:18.005]             `+` <- base::`+`
[13:20:18.005]             `<<-` <- base::`<<-`
[13:20:18.005]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.005]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.005]                   3L)]
[13:20:18.005]             }
[13:20:18.005]             function(cond) {
[13:20:18.005]                 is_error <- inherits(cond, "error")
[13:20:18.005]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.005]                   NULL)
[13:20:18.005]                 if (is_error) {
[13:20:18.005]                   sessionInformation <- function() {
[13:20:18.005]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.005]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.005]                       search = base::search(), system = base::Sys.info())
[13:20:18.005]                   }
[13:20:18.005]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.005]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.005]                     cond$call), session = sessionInformation(), 
[13:20:18.005]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.005]                   signalCondition(cond)
[13:20:18.005]                 }
[13:20:18.005]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.005]                 "immediateCondition"))) {
[13:20:18.005]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.005]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.005]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.005]                   if (TRUE && !signal) {
[13:20:18.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.005]                     {
[13:20:18.005]                       inherits <- base::inherits
[13:20:18.005]                       invokeRestart <- base::invokeRestart
[13:20:18.005]                       is.null <- base::is.null
[13:20:18.005]                       muffled <- FALSE
[13:20:18.005]                       if (inherits(cond, "message")) {
[13:20:18.005]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.005]                         if (muffled) 
[13:20:18.005]                           invokeRestart("muffleMessage")
[13:20:18.005]                       }
[13:20:18.005]                       else if (inherits(cond, "warning")) {
[13:20:18.005]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.005]                         if (muffled) 
[13:20:18.005]                           invokeRestart("muffleWarning")
[13:20:18.005]                       }
[13:20:18.005]                       else if (inherits(cond, "condition")) {
[13:20:18.005]                         if (!is.null(pattern)) {
[13:20:18.005]                           computeRestarts <- base::computeRestarts
[13:20:18.005]                           grepl <- base::grepl
[13:20:18.005]                           restarts <- computeRestarts(cond)
[13:20:18.005]                           for (restart in restarts) {
[13:20:18.005]                             name <- restart$name
[13:20:18.005]                             if (is.null(name)) 
[13:20:18.005]                               next
[13:20:18.005]                             if (!grepl(pattern, name)) 
[13:20:18.005]                               next
[13:20:18.005]                             invokeRestart(restart)
[13:20:18.005]                             muffled <- TRUE
[13:20:18.005]                             break
[13:20:18.005]                           }
[13:20:18.005]                         }
[13:20:18.005]                       }
[13:20:18.005]                       invisible(muffled)
[13:20:18.005]                     }
[13:20:18.005]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.005]                   }
[13:20:18.005]                 }
[13:20:18.005]                 else {
[13:20:18.005]                   if (TRUE) {
[13:20:18.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.005]                     {
[13:20:18.005]                       inherits <- base::inherits
[13:20:18.005]                       invokeRestart <- base::invokeRestart
[13:20:18.005]                       is.null <- base::is.null
[13:20:18.005]                       muffled <- FALSE
[13:20:18.005]                       if (inherits(cond, "message")) {
[13:20:18.005]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.005]                         if (muffled) 
[13:20:18.005]                           invokeRestart("muffleMessage")
[13:20:18.005]                       }
[13:20:18.005]                       else if (inherits(cond, "warning")) {
[13:20:18.005]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.005]                         if (muffled) 
[13:20:18.005]                           invokeRestart("muffleWarning")
[13:20:18.005]                       }
[13:20:18.005]                       else if (inherits(cond, "condition")) {
[13:20:18.005]                         if (!is.null(pattern)) {
[13:20:18.005]                           computeRestarts <- base::computeRestarts
[13:20:18.005]                           grepl <- base::grepl
[13:20:18.005]                           restarts <- computeRestarts(cond)
[13:20:18.005]                           for (restart in restarts) {
[13:20:18.005]                             name <- restart$name
[13:20:18.005]                             if (is.null(name)) 
[13:20:18.005]                               next
[13:20:18.005]                             if (!grepl(pattern, name)) 
[13:20:18.005]                               next
[13:20:18.005]                             invokeRestart(restart)
[13:20:18.005]                             muffled <- TRUE
[13:20:18.005]                             break
[13:20:18.005]                           }
[13:20:18.005]                         }
[13:20:18.005]                       }
[13:20:18.005]                       invisible(muffled)
[13:20:18.005]                     }
[13:20:18.005]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.005]                   }
[13:20:18.005]                 }
[13:20:18.005]             }
[13:20:18.005]         }))
[13:20:18.005]     }, error = function(ex) {
[13:20:18.005]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.005]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.005]                 ...future.rng), started = ...future.startTime, 
[13:20:18.005]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.005]             version = "1.8"), class = "FutureResult")
[13:20:18.005]     }, finally = {
[13:20:18.005]         if (!identical(...future.workdir, getwd())) 
[13:20:18.005]             setwd(...future.workdir)
[13:20:18.005]         {
[13:20:18.005]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.005]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.005]             }
[13:20:18.005]             base::options(...future.oldOptions)
[13:20:18.005]             if (.Platform$OS.type == "windows") {
[13:20:18.005]                 old_names <- names(...future.oldEnvVars)
[13:20:18.005]                 envs <- base::Sys.getenv()
[13:20:18.005]                 names <- names(envs)
[13:20:18.005]                 common <- intersect(names, old_names)
[13:20:18.005]                 added <- setdiff(names, old_names)
[13:20:18.005]                 removed <- setdiff(old_names, names)
[13:20:18.005]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.005]                   envs[common]]
[13:20:18.005]                 NAMES <- toupper(changed)
[13:20:18.005]                 args <- list()
[13:20:18.005]                 for (kk in seq_along(NAMES)) {
[13:20:18.005]                   name <- changed[[kk]]
[13:20:18.005]                   NAME <- NAMES[[kk]]
[13:20:18.005]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.005]                     next
[13:20:18.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.005]                 }
[13:20:18.005]                 NAMES <- toupper(added)
[13:20:18.005]                 for (kk in seq_along(NAMES)) {
[13:20:18.005]                   name <- added[[kk]]
[13:20:18.005]                   NAME <- NAMES[[kk]]
[13:20:18.005]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.005]                     next
[13:20:18.005]                   args[[name]] <- ""
[13:20:18.005]                 }
[13:20:18.005]                 NAMES <- toupper(removed)
[13:20:18.005]                 for (kk in seq_along(NAMES)) {
[13:20:18.005]                   name <- removed[[kk]]
[13:20:18.005]                   NAME <- NAMES[[kk]]
[13:20:18.005]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.005]                     next
[13:20:18.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.005]                 }
[13:20:18.005]                 if (length(args) > 0) 
[13:20:18.005]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.005]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.005]             }
[13:20:18.005]             else {
[13:20:18.005]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.005]             }
[13:20:18.005]             {
[13:20:18.005]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.005]                   0L) {
[13:20:18.005]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.005]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.005]                   base::options(opts)
[13:20:18.005]                 }
[13:20:18.005]                 {
[13:20:18.005]                   {
[13:20:18.005]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.005]                     NULL
[13:20:18.005]                   }
[13:20:18.005]                   options(future.plan = NULL)
[13:20:18.005]                   if (is.na(NA_character_)) 
[13:20:18.005]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.005]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.005]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:18.005]                     envir = parent.frame()) 
[13:20:18.005]                   {
[13:20:18.005]                     default_workers <- missing(workers)
[13:20:18.005]                     if (is.function(workers)) 
[13:20:18.005]                       workers <- workers()
[13:20:18.005]                     workers <- structure(as.integer(workers), 
[13:20:18.005]                       class = class(workers))
[13:20:18.005]                     stop_if_not(is.finite(workers), workers >= 
[13:20:18.005]                       1L)
[13:20:18.005]                     if ((workers == 1L && !inherits(workers, 
[13:20:18.005]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:18.005]                       if (default_workers) 
[13:20:18.005]                         supportsMulticore(warn = TRUE)
[13:20:18.005]                       return(sequential(..., envir = envir))
[13:20:18.005]                     }
[13:20:18.005]                     oopts <- options(mc.cores = workers)
[13:20:18.005]                     on.exit(options(oopts))
[13:20:18.005]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:18.005]                       envir = envir)
[13:20:18.005]                     if (!future$lazy) 
[13:20:18.005]                       future <- run(future)
[13:20:18.005]                     invisible(future)
[13:20:18.005]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.005]                 }
[13:20:18.005]             }
[13:20:18.005]         }
[13:20:18.005]     })
[13:20:18.005]     if (TRUE) {
[13:20:18.005]         base::sink(type = "output", split = FALSE)
[13:20:18.005]         if (TRUE) {
[13:20:18.005]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.005]         }
[13:20:18.005]         else {
[13:20:18.005]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.005]         }
[13:20:18.005]         base::close(...future.stdout)
[13:20:18.005]         ...future.stdout <- NULL
[13:20:18.005]     }
[13:20:18.005]     ...future.result$conditions <- ...future.conditions
[13:20:18.005]     ...future.result$finished <- base::Sys.time()
[13:20:18.005]     ...future.result
[13:20:18.005] }
[13:20:18.007] assign_globals() ...
[13:20:18.007] List of 1
[13:20:18.007]  $ a: num 1
[13:20:18.007]  - attr(*, "where")=List of 1
[13:20:18.007]   ..$ a:<environment: R_EmptyEnv> 
[13:20:18.007]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:18.007]  - attr(*, "resolved")= logi FALSE
[13:20:18.007]  - attr(*, "total_size")= num 56
[13:20:18.007]  - attr(*, "already-done")= logi TRUE
[13:20:18.013] - copied ‘a’ to environment
[13:20:18.013] assign_globals() ... done
[13:20:18.013] requestCore(): workers = 2
[13:20:18.015] MulticoreFuture started
[13:20:18.016] - Launch lazy future ... done
[13:20:18.016] run() for ‘MulticoreFuture’ ... done
[13:20:18.016] plan(): Setting new future strategy stack:
[13:20:18.017] List of future strategies:
[13:20:18.017] 1. sequential:
[13:20:18.017]    - args: function (..., envir = parent.frame())
[13:20:18.017]    - tweaked: FALSE
[13:20:18.017]    - call: NULL
[13:20:18.018] plan(): nbrOfWorkers() = 1
[13:20:18.020] plan(): Setting new future strategy stack:
[13:20:18.020] List of future strategies:
[13:20:18.020] 1. multicore:
[13:20:18.020]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:18.020]    - tweaked: FALSE
[13:20:18.020]    - call: plan(strategy)
[13:20:18.025] plan(): nbrOfWorkers() = 2
[13:20:18.026] getGlobalsAndPackages() ...
[13:20:18.027] Searching for globals...
[13:20:18.028] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:18.028] Searching for globals ... DONE
[13:20:18.028] Resolving globals: FALSE
[13:20:18.029] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:18.029] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:18.030] - globals: [1] ‘a’
[13:20:18.030] 
[13:20:18.030] getGlobalsAndPackages() ... DONE
[13:20:18.030] run() for ‘Future’ ...
[13:20:18.030] - state: ‘created’
[13:20:18.031] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:18.035] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:18.035] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:18.035]   - Field: ‘label’
[13:20:18.035]   - Field: ‘local’
[13:20:18.036]   - Field: ‘owner’
[13:20:18.036]   - Field: ‘envir’
[13:20:18.036]   - Field: ‘workers’
[13:20:18.036]   - Field: ‘packages’
[13:20:18.036]   - Field: ‘gc’
[13:20:18.036]   - Field: ‘job’
[13:20:18.036]   - Field: ‘conditions’
[13:20:18.036]   - Field: ‘expr’
[13:20:18.037]   - Field: ‘uuid’
[13:20:18.037]   - Field: ‘seed’
[13:20:18.037]   - Field: ‘version’
[13:20:18.037]   - Field: ‘result’
[13:20:18.037]   - Field: ‘asynchronous’
[13:20:18.037]   - Field: ‘calls’
[13:20:18.037]   - Field: ‘globals’
[13:20:18.037]   - Field: ‘stdout’
[13:20:18.038]   - Field: ‘earlySignal’
[13:20:18.038]   - Field: ‘lazy’
[13:20:18.038]   - Field: ‘state’
[13:20:18.038] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:18.038] - Launch lazy future ...
[13:20:18.038] Packages needed by the future expression (n = 0): <none>
[13:20:18.039] Packages needed by future strategies (n = 0): <none>
[13:20:18.039] {
[13:20:18.039]     {
[13:20:18.039]         {
[13:20:18.039]             ...future.startTime <- base::Sys.time()
[13:20:18.039]             {
[13:20:18.039]                 {
[13:20:18.039]                   {
[13:20:18.039]                     {
[13:20:18.039]                       base::local({
[13:20:18.039]                         has_future <- base::requireNamespace("future", 
[13:20:18.039]                           quietly = TRUE)
[13:20:18.039]                         if (has_future) {
[13:20:18.039]                           ns <- base::getNamespace("future")
[13:20:18.039]                           version <- ns[[".package"]][["version"]]
[13:20:18.039]                           if (is.null(version)) 
[13:20:18.039]                             version <- utils::packageVersion("future")
[13:20:18.039]                         }
[13:20:18.039]                         else {
[13:20:18.039]                           version <- NULL
[13:20:18.039]                         }
[13:20:18.039]                         if (!has_future || version < "1.8.0") {
[13:20:18.039]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.039]                             "", base::R.version$version.string), 
[13:20:18.039]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.039]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.039]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.039]                               "release", "version")], collapse = " "), 
[13:20:18.039]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.039]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.039]                             info)
[13:20:18.039]                           info <- base::paste(info, collapse = "; ")
[13:20:18.039]                           if (!has_future) {
[13:20:18.039]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.039]                               info)
[13:20:18.039]                           }
[13:20:18.039]                           else {
[13:20:18.039]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.039]                               info, version)
[13:20:18.039]                           }
[13:20:18.039]                           base::stop(msg)
[13:20:18.039]                         }
[13:20:18.039]                       })
[13:20:18.039]                     }
[13:20:18.039]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.039]                     base::options(mc.cores = 1L)
[13:20:18.039]                   }
[13:20:18.039]                   options(future.plan = NULL)
[13:20:18.039]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.039]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.039]                 }
[13:20:18.039]                 ...future.workdir <- getwd()
[13:20:18.039]             }
[13:20:18.039]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.039]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.039]         }
[13:20:18.039]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.039]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.039]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.039]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.039]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.039]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.039]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.039]             base::names(...future.oldOptions))
[13:20:18.039]     }
[13:20:18.039]     if (FALSE) {
[13:20:18.039]     }
[13:20:18.039]     else {
[13:20:18.039]         if (TRUE) {
[13:20:18.039]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.039]                 open = "w")
[13:20:18.039]         }
[13:20:18.039]         else {
[13:20:18.039]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.039]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.039]         }
[13:20:18.039]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.039]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.039]             base::sink(type = "output", split = FALSE)
[13:20:18.039]             base::close(...future.stdout)
[13:20:18.039]         }, add = TRUE)
[13:20:18.039]     }
[13:20:18.039]     ...future.frame <- base::sys.nframe()
[13:20:18.039]     ...future.conditions <- base::list()
[13:20:18.039]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.039]     if (FALSE) {
[13:20:18.039]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.039]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.039]     }
[13:20:18.039]     ...future.result <- base::tryCatch({
[13:20:18.039]         base::withCallingHandlers({
[13:20:18.039]             ...future.value <- base::withVisible(base::local({
[13:20:18.039]                 withCallingHandlers({
[13:20:18.039]                   {
[13:20:18.039]                     2 * a
[13:20:18.039]                   }
[13:20:18.039]                 }, immediateCondition = function(cond) {
[13:20:18.039]                   save_rds <- function (object, pathname, ...) 
[13:20:18.039]                   {
[13:20:18.039]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:18.039]                     if (file_test("-f", pathname_tmp)) {
[13:20:18.039]                       fi_tmp <- file.info(pathname_tmp)
[13:20:18.039]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:18.039]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:18.039]                         fi_tmp[["mtime"]])
[13:20:18.039]                     }
[13:20:18.039]                     tryCatch({
[13:20:18.039]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:18.039]                     }, error = function(ex) {
[13:20:18.039]                       msg <- conditionMessage(ex)
[13:20:18.039]                       fi_tmp <- file.info(pathname_tmp)
[13:20:18.039]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:18.039]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:18.039]                         fi_tmp[["mtime"]], msg)
[13:20:18.039]                       ex$message <- msg
[13:20:18.039]                       stop(ex)
[13:20:18.039]                     })
[13:20:18.039]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:18.039]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:18.039]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:18.039]                       fi_tmp <- file.info(pathname_tmp)
[13:20:18.039]                       fi <- file.info(pathname)
[13:20:18.039]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:18.039]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:18.039]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:18.039]                         fi[["size"]], fi[["mtime"]])
[13:20:18.039]                       stop(msg)
[13:20:18.039]                     }
[13:20:18.039]                     invisible(pathname)
[13:20:18.039]                   }
[13:20:18.039]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:18.039]                     rootPath = tempdir()) 
[13:20:18.039]                   {
[13:20:18.039]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:18.039]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:18.039]                       tmpdir = path, fileext = ".rds")
[13:20:18.039]                     save_rds(obj, file)
[13:20:18.039]                   }
[13:20:18.039]                   saveImmediateCondition(cond, path = "/tmp/RtmpqIQFLC/.future/immediateConditions")
[13:20:18.039]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.039]                   {
[13:20:18.039]                     inherits <- base::inherits
[13:20:18.039]                     invokeRestart <- base::invokeRestart
[13:20:18.039]                     is.null <- base::is.null
[13:20:18.039]                     muffled <- FALSE
[13:20:18.039]                     if (inherits(cond, "message")) {
[13:20:18.039]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.039]                       if (muffled) 
[13:20:18.039]                         invokeRestart("muffleMessage")
[13:20:18.039]                     }
[13:20:18.039]                     else if (inherits(cond, "warning")) {
[13:20:18.039]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.039]                       if (muffled) 
[13:20:18.039]                         invokeRestart("muffleWarning")
[13:20:18.039]                     }
[13:20:18.039]                     else if (inherits(cond, "condition")) {
[13:20:18.039]                       if (!is.null(pattern)) {
[13:20:18.039]                         computeRestarts <- base::computeRestarts
[13:20:18.039]                         grepl <- base::grepl
[13:20:18.039]                         restarts <- computeRestarts(cond)
[13:20:18.039]                         for (restart in restarts) {
[13:20:18.039]                           name <- restart$name
[13:20:18.039]                           if (is.null(name)) 
[13:20:18.039]                             next
[13:20:18.039]                           if (!grepl(pattern, name)) 
[13:20:18.039]                             next
[13:20:18.039]                           invokeRestart(restart)
[13:20:18.039]                           muffled <- TRUE
[13:20:18.039]                           break
[13:20:18.039]                         }
[13:20:18.039]                       }
[13:20:18.039]                     }
[13:20:18.039]                     invisible(muffled)
[13:20:18.039]                   }
[13:20:18.039]                   muffleCondition(cond)
[13:20:18.039]                 })
[13:20:18.039]             }))
[13:20:18.039]             future::FutureResult(value = ...future.value$value, 
[13:20:18.039]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.039]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.039]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.039]                     ...future.globalenv.names))
[13:20:18.039]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.039]         }, condition = base::local({
[13:20:18.039]             c <- base::c
[13:20:18.039]             inherits <- base::inherits
[13:20:18.039]             invokeRestart <- base::invokeRestart
[13:20:18.039]             length <- base::length
[13:20:18.039]             list <- base::list
[13:20:18.039]             seq.int <- base::seq.int
[13:20:18.039]             signalCondition <- base::signalCondition
[13:20:18.039]             sys.calls <- base::sys.calls
[13:20:18.039]             `[[` <- base::`[[`
[13:20:18.039]             `+` <- base::`+`
[13:20:18.039]             `<<-` <- base::`<<-`
[13:20:18.039]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.039]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.039]                   3L)]
[13:20:18.039]             }
[13:20:18.039]             function(cond) {
[13:20:18.039]                 is_error <- inherits(cond, "error")
[13:20:18.039]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.039]                   NULL)
[13:20:18.039]                 if (is_error) {
[13:20:18.039]                   sessionInformation <- function() {
[13:20:18.039]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.039]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.039]                       search = base::search(), system = base::Sys.info())
[13:20:18.039]                   }
[13:20:18.039]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.039]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.039]                     cond$call), session = sessionInformation(), 
[13:20:18.039]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.039]                   signalCondition(cond)
[13:20:18.039]                 }
[13:20:18.039]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.039]                 "immediateCondition"))) {
[13:20:18.039]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.039]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.039]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.039]                   if (TRUE && !signal) {
[13:20:18.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.039]                     {
[13:20:18.039]                       inherits <- base::inherits
[13:20:18.039]                       invokeRestart <- base::invokeRestart
[13:20:18.039]                       is.null <- base::is.null
[13:20:18.039]                       muffled <- FALSE
[13:20:18.039]                       if (inherits(cond, "message")) {
[13:20:18.039]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.039]                         if (muffled) 
[13:20:18.039]                           invokeRestart("muffleMessage")
[13:20:18.039]                       }
[13:20:18.039]                       else if (inherits(cond, "warning")) {
[13:20:18.039]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.039]                         if (muffled) 
[13:20:18.039]                           invokeRestart("muffleWarning")
[13:20:18.039]                       }
[13:20:18.039]                       else if (inherits(cond, "condition")) {
[13:20:18.039]                         if (!is.null(pattern)) {
[13:20:18.039]                           computeRestarts <- base::computeRestarts
[13:20:18.039]                           grepl <- base::grepl
[13:20:18.039]                           restarts <- computeRestarts(cond)
[13:20:18.039]                           for (restart in restarts) {
[13:20:18.039]                             name <- restart$name
[13:20:18.039]                             if (is.null(name)) 
[13:20:18.039]                               next
[13:20:18.039]                             if (!grepl(pattern, name)) 
[13:20:18.039]                               next
[13:20:18.039]                             invokeRestart(restart)
[13:20:18.039]                             muffled <- TRUE
[13:20:18.039]                             break
[13:20:18.039]                           }
[13:20:18.039]                         }
[13:20:18.039]                       }
[13:20:18.039]                       invisible(muffled)
[13:20:18.039]                     }
[13:20:18.039]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.039]                   }
[13:20:18.039]                 }
[13:20:18.039]                 else {
[13:20:18.039]                   if (TRUE) {
[13:20:18.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.039]                     {
[13:20:18.039]                       inherits <- base::inherits
[13:20:18.039]                       invokeRestart <- base::invokeRestart
[13:20:18.039]                       is.null <- base::is.null
[13:20:18.039]                       muffled <- FALSE
[13:20:18.039]                       if (inherits(cond, "message")) {
[13:20:18.039]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.039]                         if (muffled) 
[13:20:18.039]                           invokeRestart("muffleMessage")
[13:20:18.039]                       }
[13:20:18.039]                       else if (inherits(cond, "warning")) {
[13:20:18.039]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.039]                         if (muffled) 
[13:20:18.039]                           invokeRestart("muffleWarning")
[13:20:18.039]                       }
[13:20:18.039]                       else if (inherits(cond, "condition")) {
[13:20:18.039]                         if (!is.null(pattern)) {
[13:20:18.039]                           computeRestarts <- base::computeRestarts
[13:20:18.039]                           grepl <- base::grepl
[13:20:18.039]                           restarts <- computeRestarts(cond)
[13:20:18.039]                           for (restart in restarts) {
[13:20:18.039]                             name <- restart$name
[13:20:18.039]                             if (is.null(name)) 
[13:20:18.039]                               next
[13:20:18.039]                             if (!grepl(pattern, name)) 
[13:20:18.039]                               next
[13:20:18.039]                             invokeRestart(restart)
[13:20:18.039]                             muffled <- TRUE
[13:20:18.039]                             break
[13:20:18.039]                           }
[13:20:18.039]                         }
[13:20:18.039]                       }
[13:20:18.039]                       invisible(muffled)
[13:20:18.039]                     }
[13:20:18.039]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.039]                   }
[13:20:18.039]                 }
[13:20:18.039]             }
[13:20:18.039]         }))
[13:20:18.039]     }, error = function(ex) {
[13:20:18.039]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.039]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.039]                 ...future.rng), started = ...future.startTime, 
[13:20:18.039]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.039]             version = "1.8"), class = "FutureResult")
[13:20:18.039]     }, finally = {
[13:20:18.039]         if (!identical(...future.workdir, getwd())) 
[13:20:18.039]             setwd(...future.workdir)
[13:20:18.039]         {
[13:20:18.039]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.039]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.039]             }
[13:20:18.039]             base::options(...future.oldOptions)
[13:20:18.039]             if (.Platform$OS.type == "windows") {
[13:20:18.039]                 old_names <- names(...future.oldEnvVars)
[13:20:18.039]                 envs <- base::Sys.getenv()
[13:20:18.039]                 names <- names(envs)
[13:20:18.039]                 common <- intersect(names, old_names)
[13:20:18.039]                 added <- setdiff(names, old_names)
[13:20:18.039]                 removed <- setdiff(old_names, names)
[13:20:18.039]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.039]                   envs[common]]
[13:20:18.039]                 NAMES <- toupper(changed)
[13:20:18.039]                 args <- list()
[13:20:18.039]                 for (kk in seq_along(NAMES)) {
[13:20:18.039]                   name <- changed[[kk]]
[13:20:18.039]                   NAME <- NAMES[[kk]]
[13:20:18.039]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.039]                     next
[13:20:18.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.039]                 }
[13:20:18.039]                 NAMES <- toupper(added)
[13:20:18.039]                 for (kk in seq_along(NAMES)) {
[13:20:18.039]                   name <- added[[kk]]
[13:20:18.039]                   NAME <- NAMES[[kk]]
[13:20:18.039]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.039]                     next
[13:20:18.039]                   args[[name]] <- ""
[13:20:18.039]                 }
[13:20:18.039]                 NAMES <- toupper(removed)
[13:20:18.039]                 for (kk in seq_along(NAMES)) {
[13:20:18.039]                   name <- removed[[kk]]
[13:20:18.039]                   NAME <- NAMES[[kk]]
[13:20:18.039]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.039]                     next
[13:20:18.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.039]                 }
[13:20:18.039]                 if (length(args) > 0) 
[13:20:18.039]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.039]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.039]             }
[13:20:18.039]             else {
[13:20:18.039]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.039]             }
[13:20:18.039]             {
[13:20:18.039]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.039]                   0L) {
[13:20:18.039]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.039]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.039]                   base::options(opts)
[13:20:18.039]                 }
[13:20:18.039]                 {
[13:20:18.039]                   {
[13:20:18.039]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.039]                     NULL
[13:20:18.039]                   }
[13:20:18.039]                   options(future.plan = NULL)
[13:20:18.039]                   if (is.na(NA_character_)) 
[13:20:18.039]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.039]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.039]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:18.039]                     envir = parent.frame()) 
[13:20:18.039]                   {
[13:20:18.039]                     default_workers <- missing(workers)
[13:20:18.039]                     if (is.function(workers)) 
[13:20:18.039]                       workers <- workers()
[13:20:18.039]                     workers <- structure(as.integer(workers), 
[13:20:18.039]                       class = class(workers))
[13:20:18.039]                     stop_if_not(is.finite(workers), workers >= 
[13:20:18.039]                       1L)
[13:20:18.039]                     if ((workers == 1L && !inherits(workers, 
[13:20:18.039]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:18.039]                       if (default_workers) 
[13:20:18.039]                         supportsMulticore(warn = TRUE)
[13:20:18.039]                       return(sequential(..., envir = envir))
[13:20:18.039]                     }
[13:20:18.039]                     oopts <- options(mc.cores = workers)
[13:20:18.039]                     on.exit(options(oopts))
[13:20:18.039]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:18.039]                       envir = envir)
[13:20:18.039]                     if (!future$lazy) 
[13:20:18.039]                       future <- run(future)
[13:20:18.039]                     invisible(future)
[13:20:18.039]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.039]                 }
[13:20:18.039]             }
[13:20:18.039]         }
[13:20:18.039]     })
[13:20:18.039]     if (TRUE) {
[13:20:18.039]         base::sink(type = "output", split = FALSE)
[13:20:18.039]         if (TRUE) {
[13:20:18.039]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.039]         }
[13:20:18.039]         else {
[13:20:18.039]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.039]         }
[13:20:18.039]         base::close(...future.stdout)
[13:20:18.039]         ...future.stdout <- NULL
[13:20:18.039]     }
[13:20:18.039]     ...future.result$conditions <- ...future.conditions
[13:20:18.039]     ...future.result$finished <- base::Sys.time()
[13:20:18.039]     ...future.result
[13:20:18.039] }
[13:20:18.042] assign_globals() ...
[13:20:18.042] List of 1
[13:20:18.042]  $ a: num 1
[13:20:18.042]  - attr(*, "where")=List of 1
[13:20:18.042]   ..$ a:<environment: R_EmptyEnv> 
[13:20:18.042]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:18.042]  - attr(*, "resolved")= logi FALSE
[13:20:18.042]  - attr(*, "total_size")= num 56
[13:20:18.042]  - attr(*, "already-done")= logi TRUE
[13:20:18.045] - copied ‘a’ to environment
[13:20:18.045] assign_globals() ... done
[13:20:18.045] requestCore(): workers = 2
[13:20:18.047] MulticoreFuture started
[13:20:18.048] - Launch lazy future ... done
[13:20:18.048] run() for ‘MulticoreFuture’ ... done
[13:20:18.048] plan(): Setting new future strategy stack:
[13:20:18.048] List of future strategies:
[13:20:18.048] 1. sequential:
[13:20:18.048]    - args: function (..., envir = parent.frame())
[13:20:18.048]    - tweaked: FALSE
[13:20:18.048]    - call: NULL
[13:20:18.049] plan(): nbrOfWorkers() = 1
[13:20:18.051] plan(): Setting new future strategy stack:
[13:20:18.051] List of future strategies:
[13:20:18.051] 1. multicore:
[13:20:18.051]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:18.051]    - tweaked: FALSE
[13:20:18.051]    - call: plan(strategy)
[13:20:18.056] plan(): nbrOfWorkers() = 2
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[13:20:18.058] plan(): Setting new future strategy stack:
[13:20:18.058] List of future strategies:
[13:20:18.058] 1. multisession:
[13:20:18.058]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:18.058]    - tweaked: FALSE
[13:20:18.058]    - call: plan(strategy)
[13:20:18.059] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:20:18.059] multisession:
[13:20:18.059] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:18.059] - tweaked: FALSE
[13:20:18.059] - call: plan(strategy)
[13:20:18.066] getGlobalsAndPackages() ...
[13:20:18.066] Not searching for globals
[13:20:18.067] - globals: [0] <none>
[13:20:18.067] getGlobalsAndPackages() ... DONE
[13:20:18.067] [local output] makeClusterPSOCK() ...
[13:20:18.110] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:18.115] [local output] Base port: 11429
[13:20:18.115] [local output] Getting setup options for 2 cluster nodes ...
[13:20:18.115] [local output]  - Node 1 of 2 ...
[13:20:18.116] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:18.116] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqIQFLC/worker.rank=1.parallelly.parent=83674.146da5160ba8e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpqIQFLC/worker.rank=1.parallelly.parent=83674.146da5160ba8e.pid")'’
[13:20:18.306] - Possible to infer worker's PID: TRUE
[13:20:18.307] [local output] Rscript port: 11429

[13:20:18.307] [local output]  - Node 2 of 2 ...
[13:20:18.307] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:18.308] [local output] Rscript port: 11429

[13:20:18.308] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:18.309] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:18.309] [local output] Setting up PSOCK nodes in parallel
[13:20:18.309] List of 36
[13:20:18.309]  $ worker          : chr "localhost"
[13:20:18.309]   ..- attr(*, "localhost")= logi TRUE
[13:20:18.309]  $ master          : chr "localhost"
[13:20:18.309]  $ port            : int 11429
[13:20:18.309]  $ connectTimeout  : num 120
[13:20:18.309]  $ timeout         : num 2592000
[13:20:18.309]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:18.309]  $ homogeneous     : logi TRUE
[13:20:18.309]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:18.309]  $ rscript_envs    : NULL
[13:20:18.309]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:18.309]  $ rscript_startup : NULL
[13:20:18.309]  $ rscript_sh      : chr "sh"
[13:20:18.309]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:18.309]  $ methods         : logi TRUE
[13:20:18.309]  $ socketOptions   : chr "no-delay"
[13:20:18.309]  $ useXDR          : logi FALSE
[13:20:18.309]  $ outfile         : chr "/dev/null"
[13:20:18.309]  $ renice          : int NA
[13:20:18.309]  $ rshcmd          : NULL
[13:20:18.309]  $ user            : chr(0) 
[13:20:18.309]  $ revtunnel       : logi FALSE
[13:20:18.309]  $ rshlogfile      : NULL
[13:20:18.309]  $ rshopts         : chr(0) 
[13:20:18.309]  $ rank            : int 1
[13:20:18.309]  $ manual          : logi FALSE
[13:20:18.309]  $ dryrun          : logi FALSE
[13:20:18.309]  $ quiet           : logi FALSE
[13:20:18.309]  $ setup_strategy  : chr "parallel"
[13:20:18.309]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:18.309]  $ pidfile         : chr "/tmp/RtmpqIQFLC/worker.rank=1.parallelly.parent=83674.146da5160ba8e.pid"
[13:20:18.309]  $ rshcmd_label    : NULL
[13:20:18.309]  $ rsh_call        : NULL
[13:20:18.309]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:18.309]  $ localMachine    : logi TRUE
[13:20:18.309]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:18.309]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:18.309]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:18.309]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:18.309]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:18.309]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:18.309]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:18.309]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:18.309]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:18.309]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:18.309]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:18.309]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:18.309]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:18.309]  $ arguments       :List of 28
[13:20:18.309]   ..$ worker          : chr "localhost"
[13:20:18.309]   ..$ master          : NULL
[13:20:18.309]   ..$ port            : int 11429
[13:20:18.309]   ..$ connectTimeout  : num 120
[13:20:18.309]   ..$ timeout         : num 2592000
[13:20:18.309]   ..$ rscript         : NULL
[13:20:18.309]   ..$ homogeneous     : NULL
[13:20:18.309]   ..$ rscript_args    : NULL
[13:20:18.309]   ..$ rscript_envs    : NULL
[13:20:18.309]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:18.309]   ..$ rscript_startup : NULL
[13:20:18.309]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:18.309]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:18.309]   ..$ methods         : logi TRUE
[13:20:18.309]   ..$ socketOptions   : chr "no-delay"
[13:20:18.309]   ..$ useXDR          : logi FALSE
[13:20:18.309]   ..$ outfile         : chr "/dev/null"
[13:20:18.309]   ..$ renice          : int NA
[13:20:18.309]   ..$ rshcmd          : NULL
[13:20:18.309]   ..$ user            : NULL
[13:20:18.309]   ..$ revtunnel       : logi NA
[13:20:18.309]   ..$ rshlogfile      : NULL
[13:20:18.309]   ..$ rshopts         : NULL
[13:20:18.309]   ..$ rank            : int 1
[13:20:18.309]   ..$ manual          : logi FALSE
[13:20:18.309]   ..$ dryrun          : logi FALSE
[13:20:18.309]   ..$ quiet           : logi FALSE
[13:20:18.309]   ..$ setup_strategy  : chr "parallel"
[13:20:18.309]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:18.326] [local output] System call to launch all workers:
[13:20:18.326] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpqIQFLC/worker.rank=1.parallelly.parent=83674.146da5160ba8e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11429 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:18.326] [local output] Starting PSOCK main server
[13:20:18.328] [local output] Workers launched
[13:20:18.328] [local output] Waiting for workers to connect back
[13:20:18.328]  - [local output] 0 workers out of 2 ready
[13:20:18.574]  - [local output] 0 workers out of 2 ready
[13:20:18.575]  - [local output] 1 workers out of 2 ready
[13:20:18.575]  - [local output] 2 workers out of 2 ready
[13:20:18.575] [local output] Launching of workers completed
[13:20:18.575] [local output] Collecting session information from workers
[13:20:18.576] [local output]  - Worker #1 of 2
[13:20:18.577] [local output]  - Worker #2 of 2
[13:20:18.577] [local output] makeClusterPSOCK() ... done
[13:20:18.590] Packages needed by the future expression (n = 0): <none>
[13:20:18.590] Packages needed by future strategies (n = 0): <none>
[13:20:18.590] {
[13:20:18.590]     {
[13:20:18.590]         {
[13:20:18.590]             ...future.startTime <- base::Sys.time()
[13:20:18.590]             {
[13:20:18.590]                 {
[13:20:18.590]                   {
[13:20:18.590]                     {
[13:20:18.590]                       base::local({
[13:20:18.590]                         has_future <- base::requireNamespace("future", 
[13:20:18.590]                           quietly = TRUE)
[13:20:18.590]                         if (has_future) {
[13:20:18.590]                           ns <- base::getNamespace("future")
[13:20:18.590]                           version <- ns[[".package"]][["version"]]
[13:20:18.590]                           if (is.null(version)) 
[13:20:18.590]                             version <- utils::packageVersion("future")
[13:20:18.590]                         }
[13:20:18.590]                         else {
[13:20:18.590]                           version <- NULL
[13:20:18.590]                         }
[13:20:18.590]                         if (!has_future || version < "1.8.0") {
[13:20:18.590]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.590]                             "", base::R.version$version.string), 
[13:20:18.590]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.590]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.590]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.590]                               "release", "version")], collapse = " "), 
[13:20:18.590]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.590]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.590]                             info)
[13:20:18.590]                           info <- base::paste(info, collapse = "; ")
[13:20:18.590]                           if (!has_future) {
[13:20:18.590]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.590]                               info)
[13:20:18.590]                           }
[13:20:18.590]                           else {
[13:20:18.590]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.590]                               info, version)
[13:20:18.590]                           }
[13:20:18.590]                           base::stop(msg)
[13:20:18.590]                         }
[13:20:18.590]                       })
[13:20:18.590]                     }
[13:20:18.590]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.590]                     base::options(mc.cores = 1L)
[13:20:18.590]                   }
[13:20:18.590]                   options(future.plan = NULL)
[13:20:18.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.590]                 }
[13:20:18.590]                 ...future.workdir <- getwd()
[13:20:18.590]             }
[13:20:18.590]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.590]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.590]         }
[13:20:18.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.590]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.590]             base::names(...future.oldOptions))
[13:20:18.590]     }
[13:20:18.590]     if (FALSE) {
[13:20:18.590]     }
[13:20:18.590]     else {
[13:20:18.590]         if (TRUE) {
[13:20:18.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.590]                 open = "w")
[13:20:18.590]         }
[13:20:18.590]         else {
[13:20:18.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.590]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.590]         }
[13:20:18.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.590]             base::sink(type = "output", split = FALSE)
[13:20:18.590]             base::close(...future.stdout)
[13:20:18.590]         }, add = TRUE)
[13:20:18.590]     }
[13:20:18.590]     ...future.frame <- base::sys.nframe()
[13:20:18.590]     ...future.conditions <- base::list()
[13:20:18.590]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.590]     if (FALSE) {
[13:20:18.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.590]     }
[13:20:18.590]     ...future.result <- base::tryCatch({
[13:20:18.590]         base::withCallingHandlers({
[13:20:18.590]             ...future.value <- base::withVisible(base::local({
[13:20:18.590]                 ...future.makeSendCondition <- local({
[13:20:18.590]                   sendCondition <- NULL
[13:20:18.590]                   function(frame = 1L) {
[13:20:18.590]                     if (is.function(sendCondition)) 
[13:20:18.590]                       return(sendCondition)
[13:20:18.590]                     ns <- getNamespace("parallel")
[13:20:18.590]                     if (exists("sendData", mode = "function", 
[13:20:18.590]                       envir = ns)) {
[13:20:18.590]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:18.590]                         envir = ns)
[13:20:18.590]                       envir <- sys.frame(frame)
[13:20:18.590]                       master <- NULL
[13:20:18.590]                       while (!identical(envir, .GlobalEnv) && 
[13:20:18.590]                         !identical(envir, emptyenv())) {
[13:20:18.590]                         if (exists("master", mode = "list", envir = envir, 
[13:20:18.590]                           inherits = FALSE)) {
[13:20:18.590]                           master <- get("master", mode = "list", 
[13:20:18.590]                             envir = envir, inherits = FALSE)
[13:20:18.590]                           if (inherits(master, c("SOCKnode", 
[13:20:18.590]                             "SOCK0node"))) {
[13:20:18.590]                             sendCondition <<- function(cond) {
[13:20:18.590]                               data <- list(type = "VALUE", value = cond, 
[13:20:18.590]                                 success = TRUE)
[13:20:18.590]                               parallel_sendData(master, data)
[13:20:18.590]                             }
[13:20:18.590]                             return(sendCondition)
[13:20:18.590]                           }
[13:20:18.590]                         }
[13:20:18.590]                         frame <- frame + 1L
[13:20:18.590]                         envir <- sys.frame(frame)
[13:20:18.590]                       }
[13:20:18.590]                     }
[13:20:18.590]                     sendCondition <<- function(cond) NULL
[13:20:18.590]                   }
[13:20:18.590]                 })
[13:20:18.590]                 withCallingHandlers({
[13:20:18.590]                   NA
[13:20:18.590]                 }, immediateCondition = function(cond) {
[13:20:18.590]                   sendCondition <- ...future.makeSendCondition()
[13:20:18.590]                   sendCondition(cond)
[13:20:18.590]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.590]                   {
[13:20:18.590]                     inherits <- base::inherits
[13:20:18.590]                     invokeRestart <- base::invokeRestart
[13:20:18.590]                     is.null <- base::is.null
[13:20:18.590]                     muffled <- FALSE
[13:20:18.590]                     if (inherits(cond, "message")) {
[13:20:18.590]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.590]                       if (muffled) 
[13:20:18.590]                         invokeRestart("muffleMessage")
[13:20:18.590]                     }
[13:20:18.590]                     else if (inherits(cond, "warning")) {
[13:20:18.590]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.590]                       if (muffled) 
[13:20:18.590]                         invokeRestart("muffleWarning")
[13:20:18.590]                     }
[13:20:18.590]                     else if (inherits(cond, "condition")) {
[13:20:18.590]                       if (!is.null(pattern)) {
[13:20:18.590]                         computeRestarts <- base::computeRestarts
[13:20:18.590]                         grepl <- base::grepl
[13:20:18.590]                         restarts <- computeRestarts(cond)
[13:20:18.590]                         for (restart in restarts) {
[13:20:18.590]                           name <- restart$name
[13:20:18.590]                           if (is.null(name)) 
[13:20:18.590]                             next
[13:20:18.590]                           if (!grepl(pattern, name)) 
[13:20:18.590]                             next
[13:20:18.590]                           invokeRestart(restart)
[13:20:18.590]                           muffled <- TRUE
[13:20:18.590]                           break
[13:20:18.590]                         }
[13:20:18.590]                       }
[13:20:18.590]                     }
[13:20:18.590]                     invisible(muffled)
[13:20:18.590]                   }
[13:20:18.590]                   muffleCondition(cond)
[13:20:18.590]                 })
[13:20:18.590]             }))
[13:20:18.590]             future::FutureResult(value = ...future.value$value, 
[13:20:18.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.590]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.590]                     ...future.globalenv.names))
[13:20:18.590]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.590]         }, condition = base::local({
[13:20:18.590]             c <- base::c
[13:20:18.590]             inherits <- base::inherits
[13:20:18.590]             invokeRestart <- base::invokeRestart
[13:20:18.590]             length <- base::length
[13:20:18.590]             list <- base::list
[13:20:18.590]             seq.int <- base::seq.int
[13:20:18.590]             signalCondition <- base::signalCondition
[13:20:18.590]             sys.calls <- base::sys.calls
[13:20:18.590]             `[[` <- base::`[[`
[13:20:18.590]             `+` <- base::`+`
[13:20:18.590]             `<<-` <- base::`<<-`
[13:20:18.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.590]                   3L)]
[13:20:18.590]             }
[13:20:18.590]             function(cond) {
[13:20:18.590]                 is_error <- inherits(cond, "error")
[13:20:18.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.590]                   NULL)
[13:20:18.590]                 if (is_error) {
[13:20:18.590]                   sessionInformation <- function() {
[13:20:18.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.590]                       search = base::search(), system = base::Sys.info())
[13:20:18.590]                   }
[13:20:18.590]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.590]                     cond$call), session = sessionInformation(), 
[13:20:18.590]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.590]                   signalCondition(cond)
[13:20:18.590]                 }
[13:20:18.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.590]                 "immediateCondition"))) {
[13:20:18.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.590]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.590]                   if (TRUE && !signal) {
[13:20:18.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.590]                     {
[13:20:18.590]                       inherits <- base::inherits
[13:20:18.590]                       invokeRestart <- base::invokeRestart
[13:20:18.590]                       is.null <- base::is.null
[13:20:18.590]                       muffled <- FALSE
[13:20:18.590]                       if (inherits(cond, "message")) {
[13:20:18.590]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.590]                         if (muffled) 
[13:20:18.590]                           invokeRestart("muffleMessage")
[13:20:18.590]                       }
[13:20:18.590]                       else if (inherits(cond, "warning")) {
[13:20:18.590]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.590]                         if (muffled) 
[13:20:18.590]                           invokeRestart("muffleWarning")
[13:20:18.590]                       }
[13:20:18.590]                       else if (inherits(cond, "condition")) {
[13:20:18.590]                         if (!is.null(pattern)) {
[13:20:18.590]                           computeRestarts <- base::computeRestarts
[13:20:18.590]                           grepl <- base::grepl
[13:20:18.590]                           restarts <- computeRestarts(cond)
[13:20:18.590]                           for (restart in restarts) {
[13:20:18.590]                             name <- restart$name
[13:20:18.590]                             if (is.null(name)) 
[13:20:18.590]                               next
[13:20:18.590]                             if (!grepl(pattern, name)) 
[13:20:18.590]                               next
[13:20:18.590]                             invokeRestart(restart)
[13:20:18.590]                             muffled <- TRUE
[13:20:18.590]                             break
[13:20:18.590]                           }
[13:20:18.590]                         }
[13:20:18.590]                       }
[13:20:18.590]                       invisible(muffled)
[13:20:18.590]                     }
[13:20:18.590]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.590]                   }
[13:20:18.590]                 }
[13:20:18.590]                 else {
[13:20:18.590]                   if (TRUE) {
[13:20:18.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.590]                     {
[13:20:18.590]                       inherits <- base::inherits
[13:20:18.590]                       invokeRestart <- base::invokeRestart
[13:20:18.590]                       is.null <- base::is.null
[13:20:18.590]                       muffled <- FALSE
[13:20:18.590]                       if (inherits(cond, "message")) {
[13:20:18.590]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.590]                         if (muffled) 
[13:20:18.590]                           invokeRestart("muffleMessage")
[13:20:18.590]                       }
[13:20:18.590]                       else if (inherits(cond, "warning")) {
[13:20:18.590]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.590]                         if (muffled) 
[13:20:18.590]                           invokeRestart("muffleWarning")
[13:20:18.590]                       }
[13:20:18.590]                       else if (inherits(cond, "condition")) {
[13:20:18.590]                         if (!is.null(pattern)) {
[13:20:18.590]                           computeRestarts <- base::computeRestarts
[13:20:18.590]                           grepl <- base::grepl
[13:20:18.590]                           restarts <- computeRestarts(cond)
[13:20:18.590]                           for (restart in restarts) {
[13:20:18.590]                             name <- restart$name
[13:20:18.590]                             if (is.null(name)) 
[13:20:18.590]                               next
[13:20:18.590]                             if (!grepl(pattern, name)) 
[13:20:18.590]                               next
[13:20:18.590]                             invokeRestart(restart)
[13:20:18.590]                             muffled <- TRUE
[13:20:18.590]                             break
[13:20:18.590]                           }
[13:20:18.590]                         }
[13:20:18.590]                       }
[13:20:18.590]                       invisible(muffled)
[13:20:18.590]                     }
[13:20:18.590]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.590]                   }
[13:20:18.590]                 }
[13:20:18.590]             }
[13:20:18.590]         }))
[13:20:18.590]     }, error = function(ex) {
[13:20:18.590]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.590]                 ...future.rng), started = ...future.startTime, 
[13:20:18.590]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.590]             version = "1.8"), class = "FutureResult")
[13:20:18.590]     }, finally = {
[13:20:18.590]         if (!identical(...future.workdir, getwd())) 
[13:20:18.590]             setwd(...future.workdir)
[13:20:18.590]         {
[13:20:18.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.590]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.590]             }
[13:20:18.590]             base::options(...future.oldOptions)
[13:20:18.590]             if (.Platform$OS.type == "windows") {
[13:20:18.590]                 old_names <- names(...future.oldEnvVars)
[13:20:18.590]                 envs <- base::Sys.getenv()
[13:20:18.590]                 names <- names(envs)
[13:20:18.590]                 common <- intersect(names, old_names)
[13:20:18.590]                 added <- setdiff(names, old_names)
[13:20:18.590]                 removed <- setdiff(old_names, names)
[13:20:18.590]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.590]                   envs[common]]
[13:20:18.590]                 NAMES <- toupper(changed)
[13:20:18.590]                 args <- list()
[13:20:18.590]                 for (kk in seq_along(NAMES)) {
[13:20:18.590]                   name <- changed[[kk]]
[13:20:18.590]                   NAME <- NAMES[[kk]]
[13:20:18.590]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.590]                     next
[13:20:18.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.590]                 }
[13:20:18.590]                 NAMES <- toupper(added)
[13:20:18.590]                 for (kk in seq_along(NAMES)) {
[13:20:18.590]                   name <- added[[kk]]
[13:20:18.590]                   NAME <- NAMES[[kk]]
[13:20:18.590]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.590]                     next
[13:20:18.590]                   args[[name]] <- ""
[13:20:18.590]                 }
[13:20:18.590]                 NAMES <- toupper(removed)
[13:20:18.590]                 for (kk in seq_along(NAMES)) {
[13:20:18.590]                   name <- removed[[kk]]
[13:20:18.590]                   NAME <- NAMES[[kk]]
[13:20:18.590]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.590]                     next
[13:20:18.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.590]                 }
[13:20:18.590]                 if (length(args) > 0) 
[13:20:18.590]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.590]             }
[13:20:18.590]             else {
[13:20:18.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.590]             }
[13:20:18.590]             {
[13:20:18.590]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.590]                   0L) {
[13:20:18.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.590]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.590]                   base::options(opts)
[13:20:18.590]                 }
[13:20:18.590]                 {
[13:20:18.590]                   {
[13:20:18.590]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.590]                     NULL
[13:20:18.590]                   }
[13:20:18.590]                   options(future.plan = NULL)
[13:20:18.590]                   if (is.na(NA_character_)) 
[13:20:18.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.590]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:18.590]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:18.590]                     envir = parent.frame()) 
[13:20:18.590]                   {
[13:20:18.590]                     if (is.function(workers)) 
[13:20:18.590]                       workers <- workers()
[13:20:18.590]                     workers <- structure(as.integer(workers), 
[13:20:18.590]                       class = class(workers))
[13:20:18.590]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:18.590]                       workers >= 1)
[13:20:18.590]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:18.590]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:18.590]                     }
[13:20:18.590]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:18.590]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:18.590]                       envir = envir)
[13:20:18.590]                     if (!future$lazy) 
[13:20:18.590]                       future <- run(future)
[13:20:18.590]                     invisible(future)
[13:20:18.590]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.590]                 }
[13:20:18.590]             }
[13:20:18.590]         }
[13:20:18.590]     })
[13:20:18.590]     if (TRUE) {
[13:20:18.590]         base::sink(type = "output", split = FALSE)
[13:20:18.590]         if (TRUE) {
[13:20:18.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.590]         }
[13:20:18.590]         else {
[13:20:18.590]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.590]         }
[13:20:18.590]         base::close(...future.stdout)
[13:20:18.590]         ...future.stdout <- NULL
[13:20:18.590]     }
[13:20:18.590]     ...future.result$conditions <- ...future.conditions
[13:20:18.590]     ...future.result$finished <- base::Sys.time()
[13:20:18.590]     ...future.result
[13:20:18.590] }
[13:20:18.664] MultisessionFuture started
[13:20:18.664] result() for ClusterFuture ...
[13:20:18.665] receiveMessageFromWorker() for ClusterFuture ...
[13:20:18.665] - Validating connection of MultisessionFuture
[13:20:18.698] - received message: FutureResult
[13:20:18.699] - Received FutureResult
[13:20:18.699] - Erased future from FutureRegistry
[13:20:18.699] result() for ClusterFuture ...
[13:20:18.699] - result already collected: FutureResult
[13:20:18.699] result() for ClusterFuture ... done
[13:20:18.699] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:18.699] result() for ClusterFuture ... done
[13:20:18.699] result() for ClusterFuture ...
[13:20:18.700] - result already collected: FutureResult
[13:20:18.700] result() for ClusterFuture ... done
[13:20:18.700] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:20:18.704] plan(): nbrOfWorkers() = 2
[13:20:18.704] getGlobalsAndPackages() ...
[13:20:18.704] Searching for globals...
[13:20:18.705] - globals found: [1] ‘{’
[13:20:18.705] Searching for globals ... DONE
[13:20:18.705] Resolving globals: FALSE
[13:20:18.705] 
[13:20:18.706] 
[13:20:18.706] getGlobalsAndPackages() ... DONE
[13:20:18.706] run() for ‘Future’ ...
[13:20:18.706] - state: ‘created’
[13:20:18.706] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:18.722] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:18.722] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:18.722]   - Field: ‘node’
[13:20:18.722]   - Field: ‘label’
[13:20:18.722]   - Field: ‘local’
[13:20:18.722]   - Field: ‘owner’
[13:20:18.722]   - Field: ‘envir’
[13:20:18.722]   - Field: ‘workers’
[13:20:18.723]   - Field: ‘packages’
[13:20:18.723]   - Field: ‘gc’
[13:20:18.723]   - Field: ‘conditions’
[13:20:18.723]   - Field: ‘persistent’
[13:20:18.723]   - Field: ‘expr’
[13:20:18.723]   - Field: ‘uuid’
[13:20:18.723]   - Field: ‘seed’
[13:20:18.723]   - Field: ‘version’
[13:20:18.723]   - Field: ‘result’
[13:20:18.724]   - Field: ‘asynchronous’
[13:20:18.724]   - Field: ‘calls’
[13:20:18.724]   - Field: ‘globals’
[13:20:18.724]   - Field: ‘stdout’
[13:20:18.724]   - Field: ‘earlySignal’
[13:20:18.724]   - Field: ‘lazy’
[13:20:18.724]   - Field: ‘state’
[13:20:18.724] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:18.724] - Launch lazy future ...
[13:20:18.725] Packages needed by the future expression (n = 0): <none>
[13:20:18.725] Packages needed by future strategies (n = 0): <none>
[13:20:18.726] {
[13:20:18.726]     {
[13:20:18.726]         {
[13:20:18.726]             ...future.startTime <- base::Sys.time()
[13:20:18.726]             {
[13:20:18.726]                 {
[13:20:18.726]                   {
[13:20:18.726]                     {
[13:20:18.726]                       base::local({
[13:20:18.726]                         has_future <- base::requireNamespace("future", 
[13:20:18.726]                           quietly = TRUE)
[13:20:18.726]                         if (has_future) {
[13:20:18.726]                           ns <- base::getNamespace("future")
[13:20:18.726]                           version <- ns[[".package"]][["version"]]
[13:20:18.726]                           if (is.null(version)) 
[13:20:18.726]                             version <- utils::packageVersion("future")
[13:20:18.726]                         }
[13:20:18.726]                         else {
[13:20:18.726]                           version <- NULL
[13:20:18.726]                         }
[13:20:18.726]                         if (!has_future || version < "1.8.0") {
[13:20:18.726]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.726]                             "", base::R.version$version.string), 
[13:20:18.726]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.726]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.726]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.726]                               "release", "version")], collapse = " "), 
[13:20:18.726]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.726]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.726]                             info)
[13:20:18.726]                           info <- base::paste(info, collapse = "; ")
[13:20:18.726]                           if (!has_future) {
[13:20:18.726]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.726]                               info)
[13:20:18.726]                           }
[13:20:18.726]                           else {
[13:20:18.726]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.726]                               info, version)
[13:20:18.726]                           }
[13:20:18.726]                           base::stop(msg)
[13:20:18.726]                         }
[13:20:18.726]                       })
[13:20:18.726]                     }
[13:20:18.726]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.726]                     base::options(mc.cores = 1L)
[13:20:18.726]                   }
[13:20:18.726]                   options(future.plan = NULL)
[13:20:18.726]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.726]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.726]                 }
[13:20:18.726]                 ...future.workdir <- getwd()
[13:20:18.726]             }
[13:20:18.726]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.726]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.726]         }
[13:20:18.726]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.726]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.726]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.726]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.726]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.726]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.726]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.726]             base::names(...future.oldOptions))
[13:20:18.726]     }
[13:20:18.726]     if (FALSE) {
[13:20:18.726]     }
[13:20:18.726]     else {
[13:20:18.726]         if (TRUE) {
[13:20:18.726]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.726]                 open = "w")
[13:20:18.726]         }
[13:20:18.726]         else {
[13:20:18.726]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.726]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.726]         }
[13:20:18.726]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.726]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.726]             base::sink(type = "output", split = FALSE)
[13:20:18.726]             base::close(...future.stdout)
[13:20:18.726]         }, add = TRUE)
[13:20:18.726]     }
[13:20:18.726]     ...future.frame <- base::sys.nframe()
[13:20:18.726]     ...future.conditions <- base::list()
[13:20:18.726]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.726]     if (FALSE) {
[13:20:18.726]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.726]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.726]     }
[13:20:18.726]     ...future.result <- base::tryCatch({
[13:20:18.726]         base::withCallingHandlers({
[13:20:18.726]             ...future.value <- base::withVisible(base::local({
[13:20:18.726]                 ...future.makeSendCondition <- local({
[13:20:18.726]                   sendCondition <- NULL
[13:20:18.726]                   function(frame = 1L) {
[13:20:18.726]                     if (is.function(sendCondition)) 
[13:20:18.726]                       return(sendCondition)
[13:20:18.726]                     ns <- getNamespace("parallel")
[13:20:18.726]                     if (exists("sendData", mode = "function", 
[13:20:18.726]                       envir = ns)) {
[13:20:18.726]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:18.726]                         envir = ns)
[13:20:18.726]                       envir <- sys.frame(frame)
[13:20:18.726]                       master <- NULL
[13:20:18.726]                       while (!identical(envir, .GlobalEnv) && 
[13:20:18.726]                         !identical(envir, emptyenv())) {
[13:20:18.726]                         if (exists("master", mode = "list", envir = envir, 
[13:20:18.726]                           inherits = FALSE)) {
[13:20:18.726]                           master <- get("master", mode = "list", 
[13:20:18.726]                             envir = envir, inherits = FALSE)
[13:20:18.726]                           if (inherits(master, c("SOCKnode", 
[13:20:18.726]                             "SOCK0node"))) {
[13:20:18.726]                             sendCondition <<- function(cond) {
[13:20:18.726]                               data <- list(type = "VALUE", value = cond, 
[13:20:18.726]                                 success = TRUE)
[13:20:18.726]                               parallel_sendData(master, data)
[13:20:18.726]                             }
[13:20:18.726]                             return(sendCondition)
[13:20:18.726]                           }
[13:20:18.726]                         }
[13:20:18.726]                         frame <- frame + 1L
[13:20:18.726]                         envir <- sys.frame(frame)
[13:20:18.726]                       }
[13:20:18.726]                     }
[13:20:18.726]                     sendCondition <<- function(cond) NULL
[13:20:18.726]                   }
[13:20:18.726]                 })
[13:20:18.726]                 withCallingHandlers({
[13:20:18.726]                   {
[13:20:18.726]                     2
[13:20:18.726]                   }
[13:20:18.726]                 }, immediateCondition = function(cond) {
[13:20:18.726]                   sendCondition <- ...future.makeSendCondition()
[13:20:18.726]                   sendCondition(cond)
[13:20:18.726]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.726]                   {
[13:20:18.726]                     inherits <- base::inherits
[13:20:18.726]                     invokeRestart <- base::invokeRestart
[13:20:18.726]                     is.null <- base::is.null
[13:20:18.726]                     muffled <- FALSE
[13:20:18.726]                     if (inherits(cond, "message")) {
[13:20:18.726]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.726]                       if (muffled) 
[13:20:18.726]                         invokeRestart("muffleMessage")
[13:20:18.726]                     }
[13:20:18.726]                     else if (inherits(cond, "warning")) {
[13:20:18.726]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.726]                       if (muffled) 
[13:20:18.726]                         invokeRestart("muffleWarning")
[13:20:18.726]                     }
[13:20:18.726]                     else if (inherits(cond, "condition")) {
[13:20:18.726]                       if (!is.null(pattern)) {
[13:20:18.726]                         computeRestarts <- base::computeRestarts
[13:20:18.726]                         grepl <- base::grepl
[13:20:18.726]                         restarts <- computeRestarts(cond)
[13:20:18.726]                         for (restart in restarts) {
[13:20:18.726]                           name <- restart$name
[13:20:18.726]                           if (is.null(name)) 
[13:20:18.726]                             next
[13:20:18.726]                           if (!grepl(pattern, name)) 
[13:20:18.726]                             next
[13:20:18.726]                           invokeRestart(restart)
[13:20:18.726]                           muffled <- TRUE
[13:20:18.726]                           break
[13:20:18.726]                         }
[13:20:18.726]                       }
[13:20:18.726]                     }
[13:20:18.726]                     invisible(muffled)
[13:20:18.726]                   }
[13:20:18.726]                   muffleCondition(cond)
[13:20:18.726]                 })
[13:20:18.726]             }))
[13:20:18.726]             future::FutureResult(value = ...future.value$value, 
[13:20:18.726]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.726]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.726]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.726]                     ...future.globalenv.names))
[13:20:18.726]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.726]         }, condition = base::local({
[13:20:18.726]             c <- base::c
[13:20:18.726]             inherits <- base::inherits
[13:20:18.726]             invokeRestart <- base::invokeRestart
[13:20:18.726]             length <- base::length
[13:20:18.726]             list <- base::list
[13:20:18.726]             seq.int <- base::seq.int
[13:20:18.726]             signalCondition <- base::signalCondition
[13:20:18.726]             sys.calls <- base::sys.calls
[13:20:18.726]             `[[` <- base::`[[`
[13:20:18.726]             `+` <- base::`+`
[13:20:18.726]             `<<-` <- base::`<<-`
[13:20:18.726]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.726]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.726]                   3L)]
[13:20:18.726]             }
[13:20:18.726]             function(cond) {
[13:20:18.726]                 is_error <- inherits(cond, "error")
[13:20:18.726]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.726]                   NULL)
[13:20:18.726]                 if (is_error) {
[13:20:18.726]                   sessionInformation <- function() {
[13:20:18.726]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.726]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.726]                       search = base::search(), system = base::Sys.info())
[13:20:18.726]                   }
[13:20:18.726]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.726]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.726]                     cond$call), session = sessionInformation(), 
[13:20:18.726]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.726]                   signalCondition(cond)
[13:20:18.726]                 }
[13:20:18.726]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.726]                 "immediateCondition"))) {
[13:20:18.726]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.726]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.726]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.726]                   if (TRUE && !signal) {
[13:20:18.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.726]                     {
[13:20:18.726]                       inherits <- base::inherits
[13:20:18.726]                       invokeRestart <- base::invokeRestart
[13:20:18.726]                       is.null <- base::is.null
[13:20:18.726]                       muffled <- FALSE
[13:20:18.726]                       if (inherits(cond, "message")) {
[13:20:18.726]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.726]                         if (muffled) 
[13:20:18.726]                           invokeRestart("muffleMessage")
[13:20:18.726]                       }
[13:20:18.726]                       else if (inherits(cond, "warning")) {
[13:20:18.726]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.726]                         if (muffled) 
[13:20:18.726]                           invokeRestart("muffleWarning")
[13:20:18.726]                       }
[13:20:18.726]                       else if (inherits(cond, "condition")) {
[13:20:18.726]                         if (!is.null(pattern)) {
[13:20:18.726]                           computeRestarts <- base::computeRestarts
[13:20:18.726]                           grepl <- base::grepl
[13:20:18.726]                           restarts <- computeRestarts(cond)
[13:20:18.726]                           for (restart in restarts) {
[13:20:18.726]                             name <- restart$name
[13:20:18.726]                             if (is.null(name)) 
[13:20:18.726]                               next
[13:20:18.726]                             if (!grepl(pattern, name)) 
[13:20:18.726]                               next
[13:20:18.726]                             invokeRestart(restart)
[13:20:18.726]                             muffled <- TRUE
[13:20:18.726]                             break
[13:20:18.726]                           }
[13:20:18.726]                         }
[13:20:18.726]                       }
[13:20:18.726]                       invisible(muffled)
[13:20:18.726]                     }
[13:20:18.726]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.726]                   }
[13:20:18.726]                 }
[13:20:18.726]                 else {
[13:20:18.726]                   if (TRUE) {
[13:20:18.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.726]                     {
[13:20:18.726]                       inherits <- base::inherits
[13:20:18.726]                       invokeRestart <- base::invokeRestart
[13:20:18.726]                       is.null <- base::is.null
[13:20:18.726]                       muffled <- FALSE
[13:20:18.726]                       if (inherits(cond, "message")) {
[13:20:18.726]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.726]                         if (muffled) 
[13:20:18.726]                           invokeRestart("muffleMessage")
[13:20:18.726]                       }
[13:20:18.726]                       else if (inherits(cond, "warning")) {
[13:20:18.726]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.726]                         if (muffled) 
[13:20:18.726]                           invokeRestart("muffleWarning")
[13:20:18.726]                       }
[13:20:18.726]                       else if (inherits(cond, "condition")) {
[13:20:18.726]                         if (!is.null(pattern)) {
[13:20:18.726]                           computeRestarts <- base::computeRestarts
[13:20:18.726]                           grepl <- base::grepl
[13:20:18.726]                           restarts <- computeRestarts(cond)
[13:20:18.726]                           for (restart in restarts) {
[13:20:18.726]                             name <- restart$name
[13:20:18.726]                             if (is.null(name)) 
[13:20:18.726]                               next
[13:20:18.726]                             if (!grepl(pattern, name)) 
[13:20:18.726]                               next
[13:20:18.726]                             invokeRestart(restart)
[13:20:18.726]                             muffled <- TRUE
[13:20:18.726]                             break
[13:20:18.726]                           }
[13:20:18.726]                         }
[13:20:18.726]                       }
[13:20:18.726]                       invisible(muffled)
[13:20:18.726]                     }
[13:20:18.726]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.726]                   }
[13:20:18.726]                 }
[13:20:18.726]             }
[13:20:18.726]         }))
[13:20:18.726]     }, error = function(ex) {
[13:20:18.726]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.726]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.726]                 ...future.rng), started = ...future.startTime, 
[13:20:18.726]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.726]             version = "1.8"), class = "FutureResult")
[13:20:18.726]     }, finally = {
[13:20:18.726]         if (!identical(...future.workdir, getwd())) 
[13:20:18.726]             setwd(...future.workdir)
[13:20:18.726]         {
[13:20:18.726]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.726]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.726]             }
[13:20:18.726]             base::options(...future.oldOptions)
[13:20:18.726]             if (.Platform$OS.type == "windows") {
[13:20:18.726]                 old_names <- names(...future.oldEnvVars)
[13:20:18.726]                 envs <- base::Sys.getenv()
[13:20:18.726]                 names <- names(envs)
[13:20:18.726]                 common <- intersect(names, old_names)
[13:20:18.726]                 added <- setdiff(names, old_names)
[13:20:18.726]                 removed <- setdiff(old_names, names)
[13:20:18.726]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.726]                   envs[common]]
[13:20:18.726]                 NAMES <- toupper(changed)
[13:20:18.726]                 args <- list()
[13:20:18.726]                 for (kk in seq_along(NAMES)) {
[13:20:18.726]                   name <- changed[[kk]]
[13:20:18.726]                   NAME <- NAMES[[kk]]
[13:20:18.726]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.726]                     next
[13:20:18.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.726]                 }
[13:20:18.726]                 NAMES <- toupper(added)
[13:20:18.726]                 for (kk in seq_along(NAMES)) {
[13:20:18.726]                   name <- added[[kk]]
[13:20:18.726]                   NAME <- NAMES[[kk]]
[13:20:18.726]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.726]                     next
[13:20:18.726]                   args[[name]] <- ""
[13:20:18.726]                 }
[13:20:18.726]                 NAMES <- toupper(removed)
[13:20:18.726]                 for (kk in seq_along(NAMES)) {
[13:20:18.726]                   name <- removed[[kk]]
[13:20:18.726]                   NAME <- NAMES[[kk]]
[13:20:18.726]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.726]                     next
[13:20:18.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.726]                 }
[13:20:18.726]                 if (length(args) > 0) 
[13:20:18.726]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.726]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.726]             }
[13:20:18.726]             else {
[13:20:18.726]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.726]             }
[13:20:18.726]             {
[13:20:18.726]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.726]                   0L) {
[13:20:18.726]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.726]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.726]                   base::options(opts)
[13:20:18.726]                 }
[13:20:18.726]                 {
[13:20:18.726]                   {
[13:20:18.726]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.726]                     NULL
[13:20:18.726]                   }
[13:20:18.726]                   options(future.plan = NULL)
[13:20:18.726]                   if (is.na(NA_character_)) 
[13:20:18.726]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.726]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.726]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:18.726]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:18.726]                     envir = parent.frame()) 
[13:20:18.726]                   {
[13:20:18.726]                     if (is.function(workers)) 
[13:20:18.726]                       workers <- workers()
[13:20:18.726]                     workers <- structure(as.integer(workers), 
[13:20:18.726]                       class = class(workers))
[13:20:18.726]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:18.726]                       workers >= 1)
[13:20:18.726]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:18.726]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:18.726]                     }
[13:20:18.726]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:18.726]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:18.726]                       envir = envir)
[13:20:18.726]                     if (!future$lazy) 
[13:20:18.726]                       future <- run(future)
[13:20:18.726]                     invisible(future)
[13:20:18.726]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.726]                 }
[13:20:18.726]             }
[13:20:18.726]         }
[13:20:18.726]     })
[13:20:18.726]     if (TRUE) {
[13:20:18.726]         base::sink(type = "output", split = FALSE)
[13:20:18.726]         if (TRUE) {
[13:20:18.726]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.726]         }
[13:20:18.726]         else {
[13:20:18.726]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.726]         }
[13:20:18.726]         base::close(...future.stdout)
[13:20:18.726]         ...future.stdout <- NULL
[13:20:18.726]     }
[13:20:18.726]     ...future.result$conditions <- ...future.conditions
[13:20:18.726]     ...future.result$finished <- base::Sys.time()
[13:20:18.726]     ...future.result
[13:20:18.726] }
[13:20:18.729] MultisessionFuture started
[13:20:18.729] - Launch lazy future ... done
[13:20:18.730] run() for ‘MultisessionFuture’ ... done
[13:20:18.730] getGlobalsAndPackages() ...
[13:20:18.730] Searching for globals...
[13:20:18.731] - globals found: [1] ‘{’
[13:20:18.731] Searching for globals ... DONE
[13:20:18.731] Resolving globals: FALSE
[13:20:18.731] 
[13:20:18.732] 
[13:20:18.732] getGlobalsAndPackages() ... DONE
[13:20:18.732] run() for ‘Future’ ...
[13:20:18.732] - state: ‘created’
[13:20:18.732] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:18.748] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:18.748] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:18.748]   - Field: ‘node’
[13:20:18.748]   - Field: ‘label’
[13:20:18.748]   - Field: ‘local’
[13:20:18.748]   - Field: ‘owner’
[13:20:18.748]   - Field: ‘envir’
[13:20:18.749]   - Field: ‘workers’
[13:20:18.749]   - Field: ‘packages’
[13:20:18.749]   - Field: ‘gc’
[13:20:18.749]   - Field: ‘conditions’
[13:20:18.749]   - Field: ‘persistent’
[13:20:18.749]   - Field: ‘expr’
[13:20:18.749]   - Field: ‘uuid’
[13:20:18.749]   - Field: ‘seed’
[13:20:18.750]   - Field: ‘version’
[13:20:18.750]   - Field: ‘result’
[13:20:18.750]   - Field: ‘asynchronous’
[13:20:18.750]   - Field: ‘calls’
[13:20:18.750]   - Field: ‘globals’
[13:20:18.750]   - Field: ‘stdout’
[13:20:18.750]   - Field: ‘earlySignal’
[13:20:18.750]   - Field: ‘lazy’
[13:20:18.750]   - Field: ‘state’
[13:20:18.751] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:18.751] - Launch lazy future ...
[13:20:18.751] Packages needed by the future expression (n = 0): <none>
[13:20:18.751] Packages needed by future strategies (n = 0): <none>
[13:20:18.752] {
[13:20:18.752]     {
[13:20:18.752]         {
[13:20:18.752]             ...future.startTime <- base::Sys.time()
[13:20:18.752]             {
[13:20:18.752]                 {
[13:20:18.752]                   {
[13:20:18.752]                     {
[13:20:18.752]                       base::local({
[13:20:18.752]                         has_future <- base::requireNamespace("future", 
[13:20:18.752]                           quietly = TRUE)
[13:20:18.752]                         if (has_future) {
[13:20:18.752]                           ns <- base::getNamespace("future")
[13:20:18.752]                           version <- ns[[".package"]][["version"]]
[13:20:18.752]                           if (is.null(version)) 
[13:20:18.752]                             version <- utils::packageVersion("future")
[13:20:18.752]                         }
[13:20:18.752]                         else {
[13:20:18.752]                           version <- NULL
[13:20:18.752]                         }
[13:20:18.752]                         if (!has_future || version < "1.8.0") {
[13:20:18.752]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.752]                             "", base::R.version$version.string), 
[13:20:18.752]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.752]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.752]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.752]                               "release", "version")], collapse = " "), 
[13:20:18.752]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.752]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.752]                             info)
[13:20:18.752]                           info <- base::paste(info, collapse = "; ")
[13:20:18.752]                           if (!has_future) {
[13:20:18.752]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.752]                               info)
[13:20:18.752]                           }
[13:20:18.752]                           else {
[13:20:18.752]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.752]                               info, version)
[13:20:18.752]                           }
[13:20:18.752]                           base::stop(msg)
[13:20:18.752]                         }
[13:20:18.752]                       })
[13:20:18.752]                     }
[13:20:18.752]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.752]                     base::options(mc.cores = 1L)
[13:20:18.752]                   }
[13:20:18.752]                   options(future.plan = NULL)
[13:20:18.752]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.752]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.752]                 }
[13:20:18.752]                 ...future.workdir <- getwd()
[13:20:18.752]             }
[13:20:18.752]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.752]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.752]         }
[13:20:18.752]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.752]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.752]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.752]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.752]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.752]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.752]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.752]             base::names(...future.oldOptions))
[13:20:18.752]     }
[13:20:18.752]     if (FALSE) {
[13:20:18.752]     }
[13:20:18.752]     else {
[13:20:18.752]         if (TRUE) {
[13:20:18.752]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.752]                 open = "w")
[13:20:18.752]         }
[13:20:18.752]         else {
[13:20:18.752]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.752]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.752]         }
[13:20:18.752]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.752]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.752]             base::sink(type = "output", split = FALSE)
[13:20:18.752]             base::close(...future.stdout)
[13:20:18.752]         }, add = TRUE)
[13:20:18.752]     }
[13:20:18.752]     ...future.frame <- base::sys.nframe()
[13:20:18.752]     ...future.conditions <- base::list()
[13:20:18.752]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.752]     if (FALSE) {
[13:20:18.752]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.752]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.752]     }
[13:20:18.752]     ...future.result <- base::tryCatch({
[13:20:18.752]         base::withCallingHandlers({
[13:20:18.752]             ...future.value <- base::withVisible(base::local({
[13:20:18.752]                 ...future.makeSendCondition <- local({
[13:20:18.752]                   sendCondition <- NULL
[13:20:18.752]                   function(frame = 1L) {
[13:20:18.752]                     if (is.function(sendCondition)) 
[13:20:18.752]                       return(sendCondition)
[13:20:18.752]                     ns <- getNamespace("parallel")
[13:20:18.752]                     if (exists("sendData", mode = "function", 
[13:20:18.752]                       envir = ns)) {
[13:20:18.752]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:18.752]                         envir = ns)
[13:20:18.752]                       envir <- sys.frame(frame)
[13:20:18.752]                       master <- NULL
[13:20:18.752]                       while (!identical(envir, .GlobalEnv) && 
[13:20:18.752]                         !identical(envir, emptyenv())) {
[13:20:18.752]                         if (exists("master", mode = "list", envir = envir, 
[13:20:18.752]                           inherits = FALSE)) {
[13:20:18.752]                           master <- get("master", mode = "list", 
[13:20:18.752]                             envir = envir, inherits = FALSE)
[13:20:18.752]                           if (inherits(master, c("SOCKnode", 
[13:20:18.752]                             "SOCK0node"))) {
[13:20:18.752]                             sendCondition <<- function(cond) {
[13:20:18.752]                               data <- list(type = "VALUE", value = cond, 
[13:20:18.752]                                 success = TRUE)
[13:20:18.752]                               parallel_sendData(master, data)
[13:20:18.752]                             }
[13:20:18.752]                             return(sendCondition)
[13:20:18.752]                           }
[13:20:18.752]                         }
[13:20:18.752]                         frame <- frame + 1L
[13:20:18.752]                         envir <- sys.frame(frame)
[13:20:18.752]                       }
[13:20:18.752]                     }
[13:20:18.752]                     sendCondition <<- function(cond) NULL
[13:20:18.752]                   }
[13:20:18.752]                 })
[13:20:18.752]                 withCallingHandlers({
[13:20:18.752]                   {
[13:20:18.752]                     4
[13:20:18.752]                   }
[13:20:18.752]                 }, immediateCondition = function(cond) {
[13:20:18.752]                   sendCondition <- ...future.makeSendCondition()
[13:20:18.752]                   sendCondition(cond)
[13:20:18.752]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.752]                   {
[13:20:18.752]                     inherits <- base::inherits
[13:20:18.752]                     invokeRestart <- base::invokeRestart
[13:20:18.752]                     is.null <- base::is.null
[13:20:18.752]                     muffled <- FALSE
[13:20:18.752]                     if (inherits(cond, "message")) {
[13:20:18.752]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.752]                       if (muffled) 
[13:20:18.752]                         invokeRestart("muffleMessage")
[13:20:18.752]                     }
[13:20:18.752]                     else if (inherits(cond, "warning")) {
[13:20:18.752]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.752]                       if (muffled) 
[13:20:18.752]                         invokeRestart("muffleWarning")
[13:20:18.752]                     }
[13:20:18.752]                     else if (inherits(cond, "condition")) {
[13:20:18.752]                       if (!is.null(pattern)) {
[13:20:18.752]                         computeRestarts <- base::computeRestarts
[13:20:18.752]                         grepl <- base::grepl
[13:20:18.752]                         restarts <- computeRestarts(cond)
[13:20:18.752]                         for (restart in restarts) {
[13:20:18.752]                           name <- restart$name
[13:20:18.752]                           if (is.null(name)) 
[13:20:18.752]                             next
[13:20:18.752]                           if (!grepl(pattern, name)) 
[13:20:18.752]                             next
[13:20:18.752]                           invokeRestart(restart)
[13:20:18.752]                           muffled <- TRUE
[13:20:18.752]                           break
[13:20:18.752]                         }
[13:20:18.752]                       }
[13:20:18.752]                     }
[13:20:18.752]                     invisible(muffled)
[13:20:18.752]                   }
[13:20:18.752]                   muffleCondition(cond)
[13:20:18.752]                 })
[13:20:18.752]             }))
[13:20:18.752]             future::FutureResult(value = ...future.value$value, 
[13:20:18.752]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.752]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.752]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.752]                     ...future.globalenv.names))
[13:20:18.752]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.752]         }, condition = base::local({
[13:20:18.752]             c <- base::c
[13:20:18.752]             inherits <- base::inherits
[13:20:18.752]             invokeRestart <- base::invokeRestart
[13:20:18.752]             length <- base::length
[13:20:18.752]             list <- base::list
[13:20:18.752]             seq.int <- base::seq.int
[13:20:18.752]             signalCondition <- base::signalCondition
[13:20:18.752]             sys.calls <- base::sys.calls
[13:20:18.752]             `[[` <- base::`[[`
[13:20:18.752]             `+` <- base::`+`
[13:20:18.752]             `<<-` <- base::`<<-`
[13:20:18.752]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.752]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.752]                   3L)]
[13:20:18.752]             }
[13:20:18.752]             function(cond) {
[13:20:18.752]                 is_error <- inherits(cond, "error")
[13:20:18.752]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.752]                   NULL)
[13:20:18.752]                 if (is_error) {
[13:20:18.752]                   sessionInformation <- function() {
[13:20:18.752]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.752]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.752]                       search = base::search(), system = base::Sys.info())
[13:20:18.752]                   }
[13:20:18.752]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.752]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.752]                     cond$call), session = sessionInformation(), 
[13:20:18.752]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.752]                   signalCondition(cond)
[13:20:18.752]                 }
[13:20:18.752]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.752]                 "immediateCondition"))) {
[13:20:18.752]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.752]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.752]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.752]                   if (TRUE && !signal) {
[13:20:18.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.752]                     {
[13:20:18.752]                       inherits <- base::inherits
[13:20:18.752]                       invokeRestart <- base::invokeRestart
[13:20:18.752]                       is.null <- base::is.null
[13:20:18.752]                       muffled <- FALSE
[13:20:18.752]                       if (inherits(cond, "message")) {
[13:20:18.752]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.752]                         if (muffled) 
[13:20:18.752]                           invokeRestart("muffleMessage")
[13:20:18.752]                       }
[13:20:18.752]                       else if (inherits(cond, "warning")) {
[13:20:18.752]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.752]                         if (muffled) 
[13:20:18.752]                           invokeRestart("muffleWarning")
[13:20:18.752]                       }
[13:20:18.752]                       else if (inherits(cond, "condition")) {
[13:20:18.752]                         if (!is.null(pattern)) {
[13:20:18.752]                           computeRestarts <- base::computeRestarts
[13:20:18.752]                           grepl <- base::grepl
[13:20:18.752]                           restarts <- computeRestarts(cond)
[13:20:18.752]                           for (restart in restarts) {
[13:20:18.752]                             name <- restart$name
[13:20:18.752]                             if (is.null(name)) 
[13:20:18.752]                               next
[13:20:18.752]                             if (!grepl(pattern, name)) 
[13:20:18.752]                               next
[13:20:18.752]                             invokeRestart(restart)
[13:20:18.752]                             muffled <- TRUE
[13:20:18.752]                             break
[13:20:18.752]                           }
[13:20:18.752]                         }
[13:20:18.752]                       }
[13:20:18.752]                       invisible(muffled)
[13:20:18.752]                     }
[13:20:18.752]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.752]                   }
[13:20:18.752]                 }
[13:20:18.752]                 else {
[13:20:18.752]                   if (TRUE) {
[13:20:18.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.752]                     {
[13:20:18.752]                       inherits <- base::inherits
[13:20:18.752]                       invokeRestart <- base::invokeRestart
[13:20:18.752]                       is.null <- base::is.null
[13:20:18.752]                       muffled <- FALSE
[13:20:18.752]                       if (inherits(cond, "message")) {
[13:20:18.752]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.752]                         if (muffled) 
[13:20:18.752]                           invokeRestart("muffleMessage")
[13:20:18.752]                       }
[13:20:18.752]                       else if (inherits(cond, "warning")) {
[13:20:18.752]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.752]                         if (muffled) 
[13:20:18.752]                           invokeRestart("muffleWarning")
[13:20:18.752]                       }
[13:20:18.752]                       else if (inherits(cond, "condition")) {
[13:20:18.752]                         if (!is.null(pattern)) {
[13:20:18.752]                           computeRestarts <- base::computeRestarts
[13:20:18.752]                           grepl <- base::grepl
[13:20:18.752]                           restarts <- computeRestarts(cond)
[13:20:18.752]                           for (restart in restarts) {
[13:20:18.752]                             name <- restart$name
[13:20:18.752]                             if (is.null(name)) 
[13:20:18.752]                               next
[13:20:18.752]                             if (!grepl(pattern, name)) 
[13:20:18.752]                               next
[13:20:18.752]                             invokeRestart(restart)
[13:20:18.752]                             muffled <- TRUE
[13:20:18.752]                             break
[13:20:18.752]                           }
[13:20:18.752]                         }
[13:20:18.752]                       }
[13:20:18.752]                       invisible(muffled)
[13:20:18.752]                     }
[13:20:18.752]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.752]                   }
[13:20:18.752]                 }
[13:20:18.752]             }
[13:20:18.752]         }))
[13:20:18.752]     }, error = function(ex) {
[13:20:18.752]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.752]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.752]                 ...future.rng), started = ...future.startTime, 
[13:20:18.752]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.752]             version = "1.8"), class = "FutureResult")
[13:20:18.752]     }, finally = {
[13:20:18.752]         if (!identical(...future.workdir, getwd())) 
[13:20:18.752]             setwd(...future.workdir)
[13:20:18.752]         {
[13:20:18.752]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.752]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.752]             }
[13:20:18.752]             base::options(...future.oldOptions)
[13:20:18.752]             if (.Platform$OS.type == "windows") {
[13:20:18.752]                 old_names <- names(...future.oldEnvVars)
[13:20:18.752]                 envs <- base::Sys.getenv()
[13:20:18.752]                 names <- names(envs)
[13:20:18.752]                 common <- intersect(names, old_names)
[13:20:18.752]                 added <- setdiff(names, old_names)
[13:20:18.752]                 removed <- setdiff(old_names, names)
[13:20:18.752]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.752]                   envs[common]]
[13:20:18.752]                 NAMES <- toupper(changed)
[13:20:18.752]                 args <- list()
[13:20:18.752]                 for (kk in seq_along(NAMES)) {
[13:20:18.752]                   name <- changed[[kk]]
[13:20:18.752]                   NAME <- NAMES[[kk]]
[13:20:18.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.752]                     next
[13:20:18.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.752]                 }
[13:20:18.752]                 NAMES <- toupper(added)
[13:20:18.752]                 for (kk in seq_along(NAMES)) {
[13:20:18.752]                   name <- added[[kk]]
[13:20:18.752]                   NAME <- NAMES[[kk]]
[13:20:18.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.752]                     next
[13:20:18.752]                   args[[name]] <- ""
[13:20:18.752]                 }
[13:20:18.752]                 NAMES <- toupper(removed)
[13:20:18.752]                 for (kk in seq_along(NAMES)) {
[13:20:18.752]                   name <- removed[[kk]]
[13:20:18.752]                   NAME <- NAMES[[kk]]
[13:20:18.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.752]                     next
[13:20:18.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.752]                 }
[13:20:18.752]                 if (length(args) > 0) 
[13:20:18.752]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.752]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.752]             }
[13:20:18.752]             else {
[13:20:18.752]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.752]             }
[13:20:18.752]             {
[13:20:18.752]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.752]                   0L) {
[13:20:18.752]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.752]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.752]                   base::options(opts)
[13:20:18.752]                 }
[13:20:18.752]                 {
[13:20:18.752]                   {
[13:20:18.752]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.752]                     NULL
[13:20:18.752]                   }
[13:20:18.752]                   options(future.plan = NULL)
[13:20:18.752]                   if (is.na(NA_character_)) 
[13:20:18.752]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.752]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.752]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:18.752]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:18.752]                     envir = parent.frame()) 
[13:20:18.752]                   {
[13:20:18.752]                     if (is.function(workers)) 
[13:20:18.752]                       workers <- workers()
[13:20:18.752]                     workers <- structure(as.integer(workers), 
[13:20:18.752]                       class = class(workers))
[13:20:18.752]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:18.752]                       workers >= 1)
[13:20:18.752]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:18.752]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:18.752]                     }
[13:20:18.752]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:18.752]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:18.752]                       envir = envir)
[13:20:18.752]                     if (!future$lazy) 
[13:20:18.752]                       future <- run(future)
[13:20:18.752]                     invisible(future)
[13:20:18.752]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.752]                 }
[13:20:18.752]             }
[13:20:18.752]         }
[13:20:18.752]     })
[13:20:18.752]     if (TRUE) {
[13:20:18.752]         base::sink(type = "output", split = FALSE)
[13:20:18.752]         if (TRUE) {
[13:20:18.752]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.752]         }
[13:20:18.752]         else {
[13:20:18.752]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.752]         }
[13:20:18.752]         base::close(...future.stdout)
[13:20:18.752]         ...future.stdout <- NULL
[13:20:18.752]     }
[13:20:18.752]     ...future.result$conditions <- ...future.conditions
[13:20:18.752]     ...future.result$finished <- base::Sys.time()
[13:20:18.752]     ...future.result
[13:20:18.752] }
[13:20:18.827] MultisessionFuture started
[13:20:18.827] - Launch lazy future ... done
[13:20:18.827] run() for ‘MultisessionFuture’ ... done
[13:20:18.827] result() for ClusterFuture ...
[13:20:18.827] receiveMessageFromWorker() for ClusterFuture ...
[13:20:18.828] - Validating connection of MultisessionFuture
[13:20:18.828] - received message: FutureResult
[13:20:18.828] - Received FutureResult
[13:20:18.828] - Erased future from FutureRegistry
[13:20:18.828] result() for ClusterFuture ...
[13:20:18.828] - result already collected: FutureResult
[13:20:18.828] result() for ClusterFuture ... done
[13:20:18.829] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:18.829] result() for ClusterFuture ... done
[13:20:18.829] result() for ClusterFuture ...
[13:20:18.829] - result already collected: FutureResult
[13:20:18.829] result() for ClusterFuture ... done
u$a = 2
[13:20:18.829] result() for ClusterFuture ...
[13:20:18.829] receiveMessageFromWorker() for ClusterFuture ...
[13:20:18.830] - Validating connection of MultisessionFuture
[13:20:18.860] - received message: FutureResult
[13:20:18.860] - Received FutureResult
[13:20:18.861] - Erased future from FutureRegistry
[13:20:18.861] result() for ClusterFuture ...
[13:20:18.861] - result already collected: FutureResult
[13:20:18.861] result() for ClusterFuture ... done
[13:20:18.861] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:18.861] result() for ClusterFuture ... done
[13:20:18.861] result() for ClusterFuture ...
[13:20:18.862] - result already collected: FutureResult
[13:20:18.862] result() for ClusterFuture ... done
v$a = 4
[13:20:18.862] getGlobalsAndPackages() ...
[13:20:18.862] Searching for globals...
[13:20:18.863] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:18.863] Searching for globals ... DONE
[13:20:18.864] Resolving globals: FALSE
[13:20:18.864] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:18.864] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:18.865] - globals: [1] ‘a’
[13:20:18.865] 
[13:20:18.865] getGlobalsAndPackages() ... DONE
[13:20:18.865] run() for ‘Future’ ...
[13:20:18.865] - state: ‘created’
[13:20:18.866] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:18.881] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:18.881] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:18.881]   - Field: ‘node’
[13:20:18.881]   - Field: ‘label’
[13:20:18.881]   - Field: ‘local’
[13:20:18.881]   - Field: ‘owner’
[13:20:18.882]   - Field: ‘envir’
[13:20:18.882]   - Field: ‘workers’
[13:20:18.882]   - Field: ‘packages’
[13:20:18.882]   - Field: ‘gc’
[13:20:18.882]   - Field: ‘conditions’
[13:20:18.882]   - Field: ‘persistent’
[13:20:18.882]   - Field: ‘expr’
[13:20:18.882]   - Field: ‘uuid’
[13:20:18.882]   - Field: ‘seed’
[13:20:18.883]   - Field: ‘version’
[13:20:18.883]   - Field: ‘result’
[13:20:18.883]   - Field: ‘asynchronous’
[13:20:18.883]   - Field: ‘calls’
[13:20:18.883]   - Field: ‘globals’
[13:20:18.883]   - Field: ‘stdout’
[13:20:18.883]   - Field: ‘earlySignal’
[13:20:18.883]   - Field: ‘lazy’
[13:20:18.883]   - Field: ‘state’
[13:20:18.884] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:18.884] - Launch lazy future ...
[13:20:18.884] Packages needed by the future expression (n = 0): <none>
[13:20:18.884] Packages needed by future strategies (n = 0): <none>
[13:20:18.885] {
[13:20:18.885]     {
[13:20:18.885]         {
[13:20:18.885]             ...future.startTime <- base::Sys.time()
[13:20:18.885]             {
[13:20:18.885]                 {
[13:20:18.885]                   {
[13:20:18.885]                     {
[13:20:18.885]                       base::local({
[13:20:18.885]                         has_future <- base::requireNamespace("future", 
[13:20:18.885]                           quietly = TRUE)
[13:20:18.885]                         if (has_future) {
[13:20:18.885]                           ns <- base::getNamespace("future")
[13:20:18.885]                           version <- ns[[".package"]][["version"]]
[13:20:18.885]                           if (is.null(version)) 
[13:20:18.885]                             version <- utils::packageVersion("future")
[13:20:18.885]                         }
[13:20:18.885]                         else {
[13:20:18.885]                           version <- NULL
[13:20:18.885]                         }
[13:20:18.885]                         if (!has_future || version < "1.8.0") {
[13:20:18.885]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.885]                             "", base::R.version$version.string), 
[13:20:18.885]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.885]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.885]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.885]                               "release", "version")], collapse = " "), 
[13:20:18.885]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.885]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.885]                             info)
[13:20:18.885]                           info <- base::paste(info, collapse = "; ")
[13:20:18.885]                           if (!has_future) {
[13:20:18.885]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.885]                               info)
[13:20:18.885]                           }
[13:20:18.885]                           else {
[13:20:18.885]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.885]                               info, version)
[13:20:18.885]                           }
[13:20:18.885]                           base::stop(msg)
[13:20:18.885]                         }
[13:20:18.885]                       })
[13:20:18.885]                     }
[13:20:18.885]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.885]                     base::options(mc.cores = 1L)
[13:20:18.885]                   }
[13:20:18.885]                   options(future.plan = NULL)
[13:20:18.885]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.885]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.885]                 }
[13:20:18.885]                 ...future.workdir <- getwd()
[13:20:18.885]             }
[13:20:18.885]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.885]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.885]         }
[13:20:18.885]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.885]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.885]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.885]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.885]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.885]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.885]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.885]             base::names(...future.oldOptions))
[13:20:18.885]     }
[13:20:18.885]     if (FALSE) {
[13:20:18.885]     }
[13:20:18.885]     else {
[13:20:18.885]         if (TRUE) {
[13:20:18.885]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.885]                 open = "w")
[13:20:18.885]         }
[13:20:18.885]         else {
[13:20:18.885]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.885]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.885]         }
[13:20:18.885]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.885]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.885]             base::sink(type = "output", split = FALSE)
[13:20:18.885]             base::close(...future.stdout)
[13:20:18.885]         }, add = TRUE)
[13:20:18.885]     }
[13:20:18.885]     ...future.frame <- base::sys.nframe()
[13:20:18.885]     ...future.conditions <- base::list()
[13:20:18.885]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.885]     if (FALSE) {
[13:20:18.885]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.885]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.885]     }
[13:20:18.885]     ...future.result <- base::tryCatch({
[13:20:18.885]         base::withCallingHandlers({
[13:20:18.885]             ...future.value <- base::withVisible(base::local({
[13:20:18.885]                 ...future.makeSendCondition <- local({
[13:20:18.885]                   sendCondition <- NULL
[13:20:18.885]                   function(frame = 1L) {
[13:20:18.885]                     if (is.function(sendCondition)) 
[13:20:18.885]                       return(sendCondition)
[13:20:18.885]                     ns <- getNamespace("parallel")
[13:20:18.885]                     if (exists("sendData", mode = "function", 
[13:20:18.885]                       envir = ns)) {
[13:20:18.885]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:18.885]                         envir = ns)
[13:20:18.885]                       envir <- sys.frame(frame)
[13:20:18.885]                       master <- NULL
[13:20:18.885]                       while (!identical(envir, .GlobalEnv) && 
[13:20:18.885]                         !identical(envir, emptyenv())) {
[13:20:18.885]                         if (exists("master", mode = "list", envir = envir, 
[13:20:18.885]                           inherits = FALSE)) {
[13:20:18.885]                           master <- get("master", mode = "list", 
[13:20:18.885]                             envir = envir, inherits = FALSE)
[13:20:18.885]                           if (inherits(master, c("SOCKnode", 
[13:20:18.885]                             "SOCK0node"))) {
[13:20:18.885]                             sendCondition <<- function(cond) {
[13:20:18.885]                               data <- list(type = "VALUE", value = cond, 
[13:20:18.885]                                 success = TRUE)
[13:20:18.885]                               parallel_sendData(master, data)
[13:20:18.885]                             }
[13:20:18.885]                             return(sendCondition)
[13:20:18.885]                           }
[13:20:18.885]                         }
[13:20:18.885]                         frame <- frame + 1L
[13:20:18.885]                         envir <- sys.frame(frame)
[13:20:18.885]                       }
[13:20:18.885]                     }
[13:20:18.885]                     sendCondition <<- function(cond) NULL
[13:20:18.885]                   }
[13:20:18.885]                 })
[13:20:18.885]                 withCallingHandlers({
[13:20:18.885]                   {
[13:20:18.885]                     2 * a
[13:20:18.885]                   }
[13:20:18.885]                 }, immediateCondition = function(cond) {
[13:20:18.885]                   sendCondition <- ...future.makeSendCondition()
[13:20:18.885]                   sendCondition(cond)
[13:20:18.885]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.885]                   {
[13:20:18.885]                     inherits <- base::inherits
[13:20:18.885]                     invokeRestart <- base::invokeRestart
[13:20:18.885]                     is.null <- base::is.null
[13:20:18.885]                     muffled <- FALSE
[13:20:18.885]                     if (inherits(cond, "message")) {
[13:20:18.885]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.885]                       if (muffled) 
[13:20:18.885]                         invokeRestart("muffleMessage")
[13:20:18.885]                     }
[13:20:18.885]                     else if (inherits(cond, "warning")) {
[13:20:18.885]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.885]                       if (muffled) 
[13:20:18.885]                         invokeRestart("muffleWarning")
[13:20:18.885]                     }
[13:20:18.885]                     else if (inherits(cond, "condition")) {
[13:20:18.885]                       if (!is.null(pattern)) {
[13:20:18.885]                         computeRestarts <- base::computeRestarts
[13:20:18.885]                         grepl <- base::grepl
[13:20:18.885]                         restarts <- computeRestarts(cond)
[13:20:18.885]                         for (restart in restarts) {
[13:20:18.885]                           name <- restart$name
[13:20:18.885]                           if (is.null(name)) 
[13:20:18.885]                             next
[13:20:18.885]                           if (!grepl(pattern, name)) 
[13:20:18.885]                             next
[13:20:18.885]                           invokeRestart(restart)
[13:20:18.885]                           muffled <- TRUE
[13:20:18.885]                           break
[13:20:18.885]                         }
[13:20:18.885]                       }
[13:20:18.885]                     }
[13:20:18.885]                     invisible(muffled)
[13:20:18.885]                   }
[13:20:18.885]                   muffleCondition(cond)
[13:20:18.885]                 })
[13:20:18.885]             }))
[13:20:18.885]             future::FutureResult(value = ...future.value$value, 
[13:20:18.885]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.885]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.885]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.885]                     ...future.globalenv.names))
[13:20:18.885]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.885]         }, condition = base::local({
[13:20:18.885]             c <- base::c
[13:20:18.885]             inherits <- base::inherits
[13:20:18.885]             invokeRestart <- base::invokeRestart
[13:20:18.885]             length <- base::length
[13:20:18.885]             list <- base::list
[13:20:18.885]             seq.int <- base::seq.int
[13:20:18.885]             signalCondition <- base::signalCondition
[13:20:18.885]             sys.calls <- base::sys.calls
[13:20:18.885]             `[[` <- base::`[[`
[13:20:18.885]             `+` <- base::`+`
[13:20:18.885]             `<<-` <- base::`<<-`
[13:20:18.885]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.885]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.885]                   3L)]
[13:20:18.885]             }
[13:20:18.885]             function(cond) {
[13:20:18.885]                 is_error <- inherits(cond, "error")
[13:20:18.885]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.885]                   NULL)
[13:20:18.885]                 if (is_error) {
[13:20:18.885]                   sessionInformation <- function() {
[13:20:18.885]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.885]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.885]                       search = base::search(), system = base::Sys.info())
[13:20:18.885]                   }
[13:20:18.885]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.885]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.885]                     cond$call), session = sessionInformation(), 
[13:20:18.885]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.885]                   signalCondition(cond)
[13:20:18.885]                 }
[13:20:18.885]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.885]                 "immediateCondition"))) {
[13:20:18.885]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.885]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.885]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.885]                   if (TRUE && !signal) {
[13:20:18.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.885]                     {
[13:20:18.885]                       inherits <- base::inherits
[13:20:18.885]                       invokeRestart <- base::invokeRestart
[13:20:18.885]                       is.null <- base::is.null
[13:20:18.885]                       muffled <- FALSE
[13:20:18.885]                       if (inherits(cond, "message")) {
[13:20:18.885]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.885]                         if (muffled) 
[13:20:18.885]                           invokeRestart("muffleMessage")
[13:20:18.885]                       }
[13:20:18.885]                       else if (inherits(cond, "warning")) {
[13:20:18.885]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.885]                         if (muffled) 
[13:20:18.885]                           invokeRestart("muffleWarning")
[13:20:18.885]                       }
[13:20:18.885]                       else if (inherits(cond, "condition")) {
[13:20:18.885]                         if (!is.null(pattern)) {
[13:20:18.885]                           computeRestarts <- base::computeRestarts
[13:20:18.885]                           grepl <- base::grepl
[13:20:18.885]                           restarts <- computeRestarts(cond)
[13:20:18.885]                           for (restart in restarts) {
[13:20:18.885]                             name <- restart$name
[13:20:18.885]                             if (is.null(name)) 
[13:20:18.885]                               next
[13:20:18.885]                             if (!grepl(pattern, name)) 
[13:20:18.885]                               next
[13:20:18.885]                             invokeRestart(restart)
[13:20:18.885]                             muffled <- TRUE
[13:20:18.885]                             break
[13:20:18.885]                           }
[13:20:18.885]                         }
[13:20:18.885]                       }
[13:20:18.885]                       invisible(muffled)
[13:20:18.885]                     }
[13:20:18.885]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.885]                   }
[13:20:18.885]                 }
[13:20:18.885]                 else {
[13:20:18.885]                   if (TRUE) {
[13:20:18.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.885]                     {
[13:20:18.885]                       inherits <- base::inherits
[13:20:18.885]                       invokeRestart <- base::invokeRestart
[13:20:18.885]                       is.null <- base::is.null
[13:20:18.885]                       muffled <- FALSE
[13:20:18.885]                       if (inherits(cond, "message")) {
[13:20:18.885]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.885]                         if (muffled) 
[13:20:18.885]                           invokeRestart("muffleMessage")
[13:20:18.885]                       }
[13:20:18.885]                       else if (inherits(cond, "warning")) {
[13:20:18.885]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.885]                         if (muffled) 
[13:20:18.885]                           invokeRestart("muffleWarning")
[13:20:18.885]                       }
[13:20:18.885]                       else if (inherits(cond, "condition")) {
[13:20:18.885]                         if (!is.null(pattern)) {
[13:20:18.885]                           computeRestarts <- base::computeRestarts
[13:20:18.885]                           grepl <- base::grepl
[13:20:18.885]                           restarts <- computeRestarts(cond)
[13:20:18.885]                           for (restart in restarts) {
[13:20:18.885]                             name <- restart$name
[13:20:18.885]                             if (is.null(name)) 
[13:20:18.885]                               next
[13:20:18.885]                             if (!grepl(pattern, name)) 
[13:20:18.885]                               next
[13:20:18.885]                             invokeRestart(restart)
[13:20:18.885]                             muffled <- TRUE
[13:20:18.885]                             break
[13:20:18.885]                           }
[13:20:18.885]                         }
[13:20:18.885]                       }
[13:20:18.885]                       invisible(muffled)
[13:20:18.885]                     }
[13:20:18.885]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.885]                   }
[13:20:18.885]                 }
[13:20:18.885]             }
[13:20:18.885]         }))
[13:20:18.885]     }, error = function(ex) {
[13:20:18.885]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.885]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.885]                 ...future.rng), started = ...future.startTime, 
[13:20:18.885]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.885]             version = "1.8"), class = "FutureResult")
[13:20:18.885]     }, finally = {
[13:20:18.885]         if (!identical(...future.workdir, getwd())) 
[13:20:18.885]             setwd(...future.workdir)
[13:20:18.885]         {
[13:20:18.885]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.885]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.885]             }
[13:20:18.885]             base::options(...future.oldOptions)
[13:20:18.885]             if (.Platform$OS.type == "windows") {
[13:20:18.885]                 old_names <- names(...future.oldEnvVars)
[13:20:18.885]                 envs <- base::Sys.getenv()
[13:20:18.885]                 names <- names(envs)
[13:20:18.885]                 common <- intersect(names, old_names)
[13:20:18.885]                 added <- setdiff(names, old_names)
[13:20:18.885]                 removed <- setdiff(old_names, names)
[13:20:18.885]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.885]                   envs[common]]
[13:20:18.885]                 NAMES <- toupper(changed)
[13:20:18.885]                 args <- list()
[13:20:18.885]                 for (kk in seq_along(NAMES)) {
[13:20:18.885]                   name <- changed[[kk]]
[13:20:18.885]                   NAME <- NAMES[[kk]]
[13:20:18.885]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.885]                     next
[13:20:18.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.885]                 }
[13:20:18.885]                 NAMES <- toupper(added)
[13:20:18.885]                 for (kk in seq_along(NAMES)) {
[13:20:18.885]                   name <- added[[kk]]
[13:20:18.885]                   NAME <- NAMES[[kk]]
[13:20:18.885]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.885]                     next
[13:20:18.885]                   args[[name]] <- ""
[13:20:18.885]                 }
[13:20:18.885]                 NAMES <- toupper(removed)
[13:20:18.885]                 for (kk in seq_along(NAMES)) {
[13:20:18.885]                   name <- removed[[kk]]
[13:20:18.885]                   NAME <- NAMES[[kk]]
[13:20:18.885]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.885]                     next
[13:20:18.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.885]                 }
[13:20:18.885]                 if (length(args) > 0) 
[13:20:18.885]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.885]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.885]             }
[13:20:18.885]             else {
[13:20:18.885]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.885]             }
[13:20:18.885]             {
[13:20:18.885]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.885]                   0L) {
[13:20:18.885]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.885]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.885]                   base::options(opts)
[13:20:18.885]                 }
[13:20:18.885]                 {
[13:20:18.885]                   {
[13:20:18.885]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.885]                     NULL
[13:20:18.885]                   }
[13:20:18.885]                   options(future.plan = NULL)
[13:20:18.885]                   if (is.na(NA_character_)) 
[13:20:18.885]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.885]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.885]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:18.885]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:18.885]                     envir = parent.frame()) 
[13:20:18.885]                   {
[13:20:18.885]                     if (is.function(workers)) 
[13:20:18.885]                       workers <- workers()
[13:20:18.885]                     workers <- structure(as.integer(workers), 
[13:20:18.885]                       class = class(workers))
[13:20:18.885]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:18.885]                       workers >= 1)
[13:20:18.885]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:18.885]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:18.885]                     }
[13:20:18.885]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:18.885]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:18.885]                       envir = envir)
[13:20:18.885]                     if (!future$lazy) 
[13:20:18.885]                       future <- run(future)
[13:20:18.885]                     invisible(future)
[13:20:18.885]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.885]                 }
[13:20:18.885]             }
[13:20:18.885]         }
[13:20:18.885]     })
[13:20:18.885]     if (TRUE) {
[13:20:18.885]         base::sink(type = "output", split = FALSE)
[13:20:18.885]         if (TRUE) {
[13:20:18.885]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.885]         }
[13:20:18.885]         else {
[13:20:18.885]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.885]         }
[13:20:18.885]         base::close(...future.stdout)
[13:20:18.885]         ...future.stdout <- NULL
[13:20:18.885]     }
[13:20:18.885]     ...future.result$conditions <- ...future.conditions
[13:20:18.885]     ...future.result$finished <- base::Sys.time()
[13:20:18.885]     ...future.result
[13:20:18.885] }
[13:20:18.888] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:20:18.888] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:20:18.889] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:20:18.889] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:20:18.889] MultisessionFuture started
[13:20:18.890] - Launch lazy future ... done
[13:20:18.890] run() for ‘MultisessionFuture’ ... done
[13:20:18.890] result() for ClusterFuture ...
[13:20:18.890] receiveMessageFromWorker() for ClusterFuture ...
[13:20:18.890] - Validating connection of MultisessionFuture
[13:20:18.938] - received message: FutureResult
[13:20:18.938] - Received FutureResult
[13:20:18.938] - Erased future from FutureRegistry
[13:20:18.939] result() for ClusterFuture ...
[13:20:18.939] - result already collected: FutureResult
[13:20:18.939] result() for ClusterFuture ... done
[13:20:18.939] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:18.939] result() for ClusterFuture ... done
[13:20:18.939] result() for ClusterFuture ...
[13:20:18.939] - result already collected: FutureResult
[13:20:18.939] result() for ClusterFuture ... done
[13:20:18.940] getGlobalsAndPackages() ...
[13:20:18.940] Searching for globals...
[13:20:18.941] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:18.941] Searching for globals ... DONE
[13:20:18.941] Resolving globals: FALSE
[13:20:18.942] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:18.942] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:18.942] - globals: [1] ‘a’
[13:20:18.942] 
[13:20:18.943] getGlobalsAndPackages() ... DONE
[13:20:18.943] run() for ‘Future’ ...
[13:20:18.943] - state: ‘created’
[13:20:18.945] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:18.960] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:18.960] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:18.960]   - Field: ‘node’
[13:20:18.960]   - Field: ‘label’
[13:20:18.960]   - Field: ‘local’
[13:20:18.960]   - Field: ‘owner’
[13:20:18.960]   - Field: ‘envir’
[13:20:18.960]   - Field: ‘workers’
[13:20:18.960]   - Field: ‘packages’
[13:20:18.961]   - Field: ‘gc’
[13:20:18.961]   - Field: ‘conditions’
[13:20:18.961]   - Field: ‘persistent’
[13:20:18.961]   - Field: ‘expr’
[13:20:18.961]   - Field: ‘uuid’
[13:20:18.961]   - Field: ‘seed’
[13:20:18.961]   - Field: ‘version’
[13:20:18.961]   - Field: ‘result’
[13:20:18.961]   - Field: ‘asynchronous’
[13:20:18.961]   - Field: ‘calls’
[13:20:18.961]   - Field: ‘globals’
[13:20:18.962]   - Field: ‘stdout’
[13:20:18.962]   - Field: ‘earlySignal’
[13:20:18.962]   - Field: ‘lazy’
[13:20:18.962]   - Field: ‘state’
[13:20:18.962] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:18.962] - Launch lazy future ...
[13:20:18.962] Packages needed by the future expression (n = 0): <none>
[13:20:18.962] Packages needed by future strategies (n = 0): <none>
[13:20:18.963] {
[13:20:18.963]     {
[13:20:18.963]         {
[13:20:18.963]             ...future.startTime <- base::Sys.time()
[13:20:18.963]             {
[13:20:18.963]                 {
[13:20:18.963]                   {
[13:20:18.963]                     {
[13:20:18.963]                       base::local({
[13:20:18.963]                         has_future <- base::requireNamespace("future", 
[13:20:18.963]                           quietly = TRUE)
[13:20:18.963]                         if (has_future) {
[13:20:18.963]                           ns <- base::getNamespace("future")
[13:20:18.963]                           version <- ns[[".package"]][["version"]]
[13:20:18.963]                           if (is.null(version)) 
[13:20:18.963]                             version <- utils::packageVersion("future")
[13:20:18.963]                         }
[13:20:18.963]                         else {
[13:20:18.963]                           version <- NULL
[13:20:18.963]                         }
[13:20:18.963]                         if (!has_future || version < "1.8.0") {
[13:20:18.963]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:18.963]                             "", base::R.version$version.string), 
[13:20:18.963]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:18.963]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:18.963]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:18.963]                               "release", "version")], collapse = " "), 
[13:20:18.963]                             hostname = base::Sys.info()[["nodename"]])
[13:20:18.963]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:18.963]                             info)
[13:20:18.963]                           info <- base::paste(info, collapse = "; ")
[13:20:18.963]                           if (!has_future) {
[13:20:18.963]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:18.963]                               info)
[13:20:18.963]                           }
[13:20:18.963]                           else {
[13:20:18.963]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:18.963]                               info, version)
[13:20:18.963]                           }
[13:20:18.963]                           base::stop(msg)
[13:20:18.963]                         }
[13:20:18.963]                       })
[13:20:18.963]                     }
[13:20:18.963]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:18.963]                     base::options(mc.cores = 1L)
[13:20:18.963]                   }
[13:20:18.963]                   options(future.plan = NULL)
[13:20:18.963]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.963]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:18.963]                 }
[13:20:18.963]                 ...future.workdir <- getwd()
[13:20:18.963]             }
[13:20:18.963]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:18.963]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:18.963]         }
[13:20:18.963]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:18.963]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:18.963]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:18.963]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:18.963]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:18.963]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:18.963]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:18.963]             base::names(...future.oldOptions))
[13:20:18.963]     }
[13:20:18.963]     if (FALSE) {
[13:20:18.963]     }
[13:20:18.963]     else {
[13:20:18.963]         if (TRUE) {
[13:20:18.963]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:18.963]                 open = "w")
[13:20:18.963]         }
[13:20:18.963]         else {
[13:20:18.963]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:18.963]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:18.963]         }
[13:20:18.963]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:18.963]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:18.963]             base::sink(type = "output", split = FALSE)
[13:20:18.963]             base::close(...future.stdout)
[13:20:18.963]         }, add = TRUE)
[13:20:18.963]     }
[13:20:18.963]     ...future.frame <- base::sys.nframe()
[13:20:18.963]     ...future.conditions <- base::list()
[13:20:18.963]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:18.963]     if (FALSE) {
[13:20:18.963]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:18.963]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:18.963]     }
[13:20:18.963]     ...future.result <- base::tryCatch({
[13:20:18.963]         base::withCallingHandlers({
[13:20:18.963]             ...future.value <- base::withVisible(base::local({
[13:20:18.963]                 ...future.makeSendCondition <- local({
[13:20:18.963]                   sendCondition <- NULL
[13:20:18.963]                   function(frame = 1L) {
[13:20:18.963]                     if (is.function(sendCondition)) 
[13:20:18.963]                       return(sendCondition)
[13:20:18.963]                     ns <- getNamespace("parallel")
[13:20:18.963]                     if (exists("sendData", mode = "function", 
[13:20:18.963]                       envir = ns)) {
[13:20:18.963]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:18.963]                         envir = ns)
[13:20:18.963]                       envir <- sys.frame(frame)
[13:20:18.963]                       master <- NULL
[13:20:18.963]                       while (!identical(envir, .GlobalEnv) && 
[13:20:18.963]                         !identical(envir, emptyenv())) {
[13:20:18.963]                         if (exists("master", mode = "list", envir = envir, 
[13:20:18.963]                           inherits = FALSE)) {
[13:20:18.963]                           master <- get("master", mode = "list", 
[13:20:18.963]                             envir = envir, inherits = FALSE)
[13:20:18.963]                           if (inherits(master, c("SOCKnode", 
[13:20:18.963]                             "SOCK0node"))) {
[13:20:18.963]                             sendCondition <<- function(cond) {
[13:20:18.963]                               data <- list(type = "VALUE", value = cond, 
[13:20:18.963]                                 success = TRUE)
[13:20:18.963]                               parallel_sendData(master, data)
[13:20:18.963]                             }
[13:20:18.963]                             return(sendCondition)
[13:20:18.963]                           }
[13:20:18.963]                         }
[13:20:18.963]                         frame <- frame + 1L
[13:20:18.963]                         envir <- sys.frame(frame)
[13:20:18.963]                       }
[13:20:18.963]                     }
[13:20:18.963]                     sendCondition <<- function(cond) NULL
[13:20:18.963]                   }
[13:20:18.963]                 })
[13:20:18.963]                 withCallingHandlers({
[13:20:18.963]                   {
[13:20:18.963]                     2 * a
[13:20:18.963]                   }
[13:20:18.963]                 }, immediateCondition = function(cond) {
[13:20:18.963]                   sendCondition <- ...future.makeSendCondition()
[13:20:18.963]                   sendCondition(cond)
[13:20:18.963]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.963]                   {
[13:20:18.963]                     inherits <- base::inherits
[13:20:18.963]                     invokeRestart <- base::invokeRestart
[13:20:18.963]                     is.null <- base::is.null
[13:20:18.963]                     muffled <- FALSE
[13:20:18.963]                     if (inherits(cond, "message")) {
[13:20:18.963]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:18.963]                       if (muffled) 
[13:20:18.963]                         invokeRestart("muffleMessage")
[13:20:18.963]                     }
[13:20:18.963]                     else if (inherits(cond, "warning")) {
[13:20:18.963]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:18.963]                       if (muffled) 
[13:20:18.963]                         invokeRestart("muffleWarning")
[13:20:18.963]                     }
[13:20:18.963]                     else if (inherits(cond, "condition")) {
[13:20:18.963]                       if (!is.null(pattern)) {
[13:20:18.963]                         computeRestarts <- base::computeRestarts
[13:20:18.963]                         grepl <- base::grepl
[13:20:18.963]                         restarts <- computeRestarts(cond)
[13:20:18.963]                         for (restart in restarts) {
[13:20:18.963]                           name <- restart$name
[13:20:18.963]                           if (is.null(name)) 
[13:20:18.963]                             next
[13:20:18.963]                           if (!grepl(pattern, name)) 
[13:20:18.963]                             next
[13:20:18.963]                           invokeRestart(restart)
[13:20:18.963]                           muffled <- TRUE
[13:20:18.963]                           break
[13:20:18.963]                         }
[13:20:18.963]                       }
[13:20:18.963]                     }
[13:20:18.963]                     invisible(muffled)
[13:20:18.963]                   }
[13:20:18.963]                   muffleCondition(cond)
[13:20:18.963]                 })
[13:20:18.963]             }))
[13:20:18.963]             future::FutureResult(value = ...future.value$value, 
[13:20:18.963]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.963]                   ...future.rng), globalenv = if (FALSE) 
[13:20:18.963]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:18.963]                     ...future.globalenv.names))
[13:20:18.963]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:18.963]         }, condition = base::local({
[13:20:18.963]             c <- base::c
[13:20:18.963]             inherits <- base::inherits
[13:20:18.963]             invokeRestart <- base::invokeRestart
[13:20:18.963]             length <- base::length
[13:20:18.963]             list <- base::list
[13:20:18.963]             seq.int <- base::seq.int
[13:20:18.963]             signalCondition <- base::signalCondition
[13:20:18.963]             sys.calls <- base::sys.calls
[13:20:18.963]             `[[` <- base::`[[`
[13:20:18.963]             `+` <- base::`+`
[13:20:18.963]             `<<-` <- base::`<<-`
[13:20:18.963]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:18.963]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:18.963]                   3L)]
[13:20:18.963]             }
[13:20:18.963]             function(cond) {
[13:20:18.963]                 is_error <- inherits(cond, "error")
[13:20:18.963]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:18.963]                   NULL)
[13:20:18.963]                 if (is_error) {
[13:20:18.963]                   sessionInformation <- function() {
[13:20:18.963]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:18.963]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:18.963]                       search = base::search(), system = base::Sys.info())
[13:20:18.963]                   }
[13:20:18.963]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.963]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:18.963]                     cond$call), session = sessionInformation(), 
[13:20:18.963]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:18.963]                   signalCondition(cond)
[13:20:18.963]                 }
[13:20:18.963]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:18.963]                 "immediateCondition"))) {
[13:20:18.963]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:18.963]                   ...future.conditions[[length(...future.conditions) + 
[13:20:18.963]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:18.963]                   if (TRUE && !signal) {
[13:20:18.963]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.963]                     {
[13:20:18.963]                       inherits <- base::inherits
[13:20:18.963]                       invokeRestart <- base::invokeRestart
[13:20:18.963]                       is.null <- base::is.null
[13:20:18.963]                       muffled <- FALSE
[13:20:18.963]                       if (inherits(cond, "message")) {
[13:20:18.963]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.963]                         if (muffled) 
[13:20:18.963]                           invokeRestart("muffleMessage")
[13:20:18.963]                       }
[13:20:18.963]                       else if (inherits(cond, "warning")) {
[13:20:18.963]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.963]                         if (muffled) 
[13:20:18.963]                           invokeRestart("muffleWarning")
[13:20:18.963]                       }
[13:20:18.963]                       else if (inherits(cond, "condition")) {
[13:20:18.963]                         if (!is.null(pattern)) {
[13:20:18.963]                           computeRestarts <- base::computeRestarts
[13:20:18.963]                           grepl <- base::grepl
[13:20:18.963]                           restarts <- computeRestarts(cond)
[13:20:18.963]                           for (restart in restarts) {
[13:20:18.963]                             name <- restart$name
[13:20:18.963]                             if (is.null(name)) 
[13:20:18.963]                               next
[13:20:18.963]                             if (!grepl(pattern, name)) 
[13:20:18.963]                               next
[13:20:18.963]                             invokeRestart(restart)
[13:20:18.963]                             muffled <- TRUE
[13:20:18.963]                             break
[13:20:18.963]                           }
[13:20:18.963]                         }
[13:20:18.963]                       }
[13:20:18.963]                       invisible(muffled)
[13:20:18.963]                     }
[13:20:18.963]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.963]                   }
[13:20:18.963]                 }
[13:20:18.963]                 else {
[13:20:18.963]                   if (TRUE) {
[13:20:18.963]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:18.963]                     {
[13:20:18.963]                       inherits <- base::inherits
[13:20:18.963]                       invokeRestart <- base::invokeRestart
[13:20:18.963]                       is.null <- base::is.null
[13:20:18.963]                       muffled <- FALSE
[13:20:18.963]                       if (inherits(cond, "message")) {
[13:20:18.963]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:18.963]                         if (muffled) 
[13:20:18.963]                           invokeRestart("muffleMessage")
[13:20:18.963]                       }
[13:20:18.963]                       else if (inherits(cond, "warning")) {
[13:20:18.963]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:18.963]                         if (muffled) 
[13:20:18.963]                           invokeRestart("muffleWarning")
[13:20:18.963]                       }
[13:20:18.963]                       else if (inherits(cond, "condition")) {
[13:20:18.963]                         if (!is.null(pattern)) {
[13:20:18.963]                           computeRestarts <- base::computeRestarts
[13:20:18.963]                           grepl <- base::grepl
[13:20:18.963]                           restarts <- computeRestarts(cond)
[13:20:18.963]                           for (restart in restarts) {
[13:20:18.963]                             name <- restart$name
[13:20:18.963]                             if (is.null(name)) 
[13:20:18.963]                               next
[13:20:18.963]                             if (!grepl(pattern, name)) 
[13:20:18.963]                               next
[13:20:18.963]                             invokeRestart(restart)
[13:20:18.963]                             muffled <- TRUE
[13:20:18.963]                             break
[13:20:18.963]                           }
[13:20:18.963]                         }
[13:20:18.963]                       }
[13:20:18.963]                       invisible(muffled)
[13:20:18.963]                     }
[13:20:18.963]                     muffleCondition(cond, pattern = "^muffle")
[13:20:18.963]                   }
[13:20:18.963]                 }
[13:20:18.963]             }
[13:20:18.963]         }))
[13:20:18.963]     }, error = function(ex) {
[13:20:18.963]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:18.963]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:18.963]                 ...future.rng), started = ...future.startTime, 
[13:20:18.963]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:18.963]             version = "1.8"), class = "FutureResult")
[13:20:18.963]     }, finally = {
[13:20:18.963]         if (!identical(...future.workdir, getwd())) 
[13:20:18.963]             setwd(...future.workdir)
[13:20:18.963]         {
[13:20:18.963]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:18.963]                 ...future.oldOptions$nwarnings <- NULL
[13:20:18.963]             }
[13:20:18.963]             base::options(...future.oldOptions)
[13:20:18.963]             if (.Platform$OS.type == "windows") {
[13:20:18.963]                 old_names <- names(...future.oldEnvVars)
[13:20:18.963]                 envs <- base::Sys.getenv()
[13:20:18.963]                 names <- names(envs)
[13:20:18.963]                 common <- intersect(names, old_names)
[13:20:18.963]                 added <- setdiff(names, old_names)
[13:20:18.963]                 removed <- setdiff(old_names, names)
[13:20:18.963]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:18.963]                   envs[common]]
[13:20:18.963]                 NAMES <- toupper(changed)
[13:20:18.963]                 args <- list()
[13:20:18.963]                 for (kk in seq_along(NAMES)) {
[13:20:18.963]                   name <- changed[[kk]]
[13:20:18.963]                   NAME <- NAMES[[kk]]
[13:20:18.963]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.963]                     next
[13:20:18.963]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.963]                 }
[13:20:18.963]                 NAMES <- toupper(added)
[13:20:18.963]                 for (kk in seq_along(NAMES)) {
[13:20:18.963]                   name <- added[[kk]]
[13:20:18.963]                   NAME <- NAMES[[kk]]
[13:20:18.963]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.963]                     next
[13:20:18.963]                   args[[name]] <- ""
[13:20:18.963]                 }
[13:20:18.963]                 NAMES <- toupper(removed)
[13:20:18.963]                 for (kk in seq_along(NAMES)) {
[13:20:18.963]                   name <- removed[[kk]]
[13:20:18.963]                   NAME <- NAMES[[kk]]
[13:20:18.963]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:18.963]                     next
[13:20:18.963]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:18.963]                 }
[13:20:18.963]                 if (length(args) > 0) 
[13:20:18.963]                   base::do.call(base::Sys.setenv, args = args)
[13:20:18.963]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:18.963]             }
[13:20:18.963]             else {
[13:20:18.963]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:18.963]             }
[13:20:18.963]             {
[13:20:18.963]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:18.963]                   0L) {
[13:20:18.963]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:18.963]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:18.963]                   base::options(opts)
[13:20:18.963]                 }
[13:20:18.963]                 {
[13:20:18.963]                   {
[13:20:18.963]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:18.963]                     NULL
[13:20:18.963]                   }
[13:20:18.963]                   options(future.plan = NULL)
[13:20:18.963]                   if (is.na(NA_character_)) 
[13:20:18.963]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:18.963]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:18.963]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:18.963]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:18.963]                     envir = parent.frame()) 
[13:20:18.963]                   {
[13:20:18.963]                     if (is.function(workers)) 
[13:20:18.963]                       workers <- workers()
[13:20:18.963]                     workers <- structure(as.integer(workers), 
[13:20:18.963]                       class = class(workers))
[13:20:18.963]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:18.963]                       workers >= 1)
[13:20:18.963]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:18.963]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:18.963]                     }
[13:20:18.963]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:18.963]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:18.963]                       envir = envir)
[13:20:18.963]                     if (!future$lazy) 
[13:20:18.963]                       future <- run(future)
[13:20:18.963]                     invisible(future)
[13:20:18.963]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:18.963]                 }
[13:20:18.963]             }
[13:20:18.963]         }
[13:20:18.963]     })
[13:20:18.963]     if (TRUE) {
[13:20:18.963]         base::sink(type = "output", split = FALSE)
[13:20:18.963]         if (TRUE) {
[13:20:18.963]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:18.963]         }
[13:20:18.963]         else {
[13:20:18.963]             ...future.result["stdout"] <- base::list(NULL)
[13:20:18.963]         }
[13:20:18.963]         base::close(...future.stdout)
[13:20:18.963]         ...future.stdout <- NULL
[13:20:18.963]     }
[13:20:18.963]     ...future.result$conditions <- ...future.conditions
[13:20:18.963]     ...future.result$finished <- base::Sys.time()
[13:20:18.963]     ...future.result
[13:20:18.963] }
[13:20:18.966] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:20:18.966] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:20:18.966] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:20:18.966] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:20:18.967] MultisessionFuture started
[13:20:18.967] - Launch lazy future ... done
[13:20:18.967] run() for ‘MultisessionFuture’ ... done
[13:20:18.967] result() for ClusterFuture ...
[13:20:18.967] receiveMessageFromWorker() for ClusterFuture ...
[13:20:18.968] - Validating connection of MultisessionFuture
[13:20:19.014] - received message: FutureResult
[13:20:19.014] - Received FutureResult
[13:20:19.014] - Erased future from FutureRegistry
[13:20:19.015] result() for ClusterFuture ...
[13:20:19.015] - result already collected: FutureResult
[13:20:19.015] result() for ClusterFuture ... done
[13:20:19.015] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:19.015] result() for ClusterFuture ... done
[13:20:19.015] result() for ClusterFuture ...
[13:20:19.015] - result already collected: FutureResult
[13:20:19.015] result() for ClusterFuture ... done
[13:20:19.015] getGlobalsAndPackages() ...
[13:20:19.016] Searching for globals...
[13:20:19.016] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:19.017] Searching for globals ... DONE
[13:20:19.017] Resolving globals: FALSE
[13:20:19.017] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:19.017] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:19.018] - globals: [1] ‘a’
[13:20:19.018] 
[13:20:19.018] getGlobalsAndPackages() ... DONE
[13:20:19.018] run() for ‘Future’ ...
[13:20:19.018] - state: ‘created’
[13:20:19.018] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:19.032] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:19.032] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:19.032]   - Field: ‘node’
[13:20:19.033]   - Field: ‘label’
[13:20:19.033]   - Field: ‘local’
[13:20:19.033]   - Field: ‘owner’
[13:20:19.033]   - Field: ‘envir’
[13:20:19.033]   - Field: ‘workers’
[13:20:19.033]   - Field: ‘packages’
[13:20:19.033]   - Field: ‘gc’
[13:20:19.033]   - Field: ‘conditions’
[13:20:19.033]   - Field: ‘persistent’
[13:20:19.033]   - Field: ‘expr’
[13:20:19.034]   - Field: ‘uuid’
[13:20:19.034]   - Field: ‘seed’
[13:20:19.034]   - Field: ‘version’
[13:20:19.034]   - Field: ‘result’
[13:20:19.034]   - Field: ‘asynchronous’
[13:20:19.034]   - Field: ‘calls’
[13:20:19.034]   - Field: ‘globals’
[13:20:19.034]   - Field: ‘stdout’
[13:20:19.034]   - Field: ‘earlySignal’
[13:20:19.034]   - Field: ‘lazy’
[13:20:19.034]   - Field: ‘state’
[13:20:19.035] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:19.035] - Launch lazy future ...
[13:20:19.035] Packages needed by the future expression (n = 0): <none>
[13:20:19.035] Packages needed by future strategies (n = 0): <none>
[13:20:19.035] {
[13:20:19.035]     {
[13:20:19.035]         {
[13:20:19.035]             ...future.startTime <- base::Sys.time()
[13:20:19.035]             {
[13:20:19.035]                 {
[13:20:19.035]                   {
[13:20:19.035]                     {
[13:20:19.035]                       base::local({
[13:20:19.035]                         has_future <- base::requireNamespace("future", 
[13:20:19.035]                           quietly = TRUE)
[13:20:19.035]                         if (has_future) {
[13:20:19.035]                           ns <- base::getNamespace("future")
[13:20:19.035]                           version <- ns[[".package"]][["version"]]
[13:20:19.035]                           if (is.null(version)) 
[13:20:19.035]                             version <- utils::packageVersion("future")
[13:20:19.035]                         }
[13:20:19.035]                         else {
[13:20:19.035]                           version <- NULL
[13:20:19.035]                         }
[13:20:19.035]                         if (!has_future || version < "1.8.0") {
[13:20:19.035]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:19.035]                             "", base::R.version$version.string), 
[13:20:19.035]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:19.035]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:19.035]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:19.035]                               "release", "version")], collapse = " "), 
[13:20:19.035]                             hostname = base::Sys.info()[["nodename"]])
[13:20:19.035]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:19.035]                             info)
[13:20:19.035]                           info <- base::paste(info, collapse = "; ")
[13:20:19.035]                           if (!has_future) {
[13:20:19.035]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:19.035]                               info)
[13:20:19.035]                           }
[13:20:19.035]                           else {
[13:20:19.035]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:19.035]                               info, version)
[13:20:19.035]                           }
[13:20:19.035]                           base::stop(msg)
[13:20:19.035]                         }
[13:20:19.035]                       })
[13:20:19.035]                     }
[13:20:19.035]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:19.035]                     base::options(mc.cores = 1L)
[13:20:19.035]                   }
[13:20:19.035]                   options(future.plan = NULL)
[13:20:19.035]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:19.035]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:19.035]                 }
[13:20:19.035]                 ...future.workdir <- getwd()
[13:20:19.035]             }
[13:20:19.035]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:19.035]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:19.035]         }
[13:20:19.035]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:19.035]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:19.035]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:19.035]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:19.035]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:19.035]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:19.035]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:19.035]             base::names(...future.oldOptions))
[13:20:19.035]     }
[13:20:19.035]     if (FALSE) {
[13:20:19.035]     }
[13:20:19.035]     else {
[13:20:19.035]         if (TRUE) {
[13:20:19.035]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:19.035]                 open = "w")
[13:20:19.035]         }
[13:20:19.035]         else {
[13:20:19.035]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:19.035]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:19.035]         }
[13:20:19.035]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:19.035]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:19.035]             base::sink(type = "output", split = FALSE)
[13:20:19.035]             base::close(...future.stdout)
[13:20:19.035]         }, add = TRUE)
[13:20:19.035]     }
[13:20:19.035]     ...future.frame <- base::sys.nframe()
[13:20:19.035]     ...future.conditions <- base::list()
[13:20:19.035]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:19.035]     if (FALSE) {
[13:20:19.035]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:19.035]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:19.035]     }
[13:20:19.035]     ...future.result <- base::tryCatch({
[13:20:19.035]         base::withCallingHandlers({
[13:20:19.035]             ...future.value <- base::withVisible(base::local({
[13:20:19.035]                 ...future.makeSendCondition <- local({
[13:20:19.035]                   sendCondition <- NULL
[13:20:19.035]                   function(frame = 1L) {
[13:20:19.035]                     if (is.function(sendCondition)) 
[13:20:19.035]                       return(sendCondition)
[13:20:19.035]                     ns <- getNamespace("parallel")
[13:20:19.035]                     if (exists("sendData", mode = "function", 
[13:20:19.035]                       envir = ns)) {
[13:20:19.035]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:19.035]                         envir = ns)
[13:20:19.035]                       envir <- sys.frame(frame)
[13:20:19.035]                       master <- NULL
[13:20:19.035]                       while (!identical(envir, .GlobalEnv) && 
[13:20:19.035]                         !identical(envir, emptyenv())) {
[13:20:19.035]                         if (exists("master", mode = "list", envir = envir, 
[13:20:19.035]                           inherits = FALSE)) {
[13:20:19.035]                           master <- get("master", mode = "list", 
[13:20:19.035]                             envir = envir, inherits = FALSE)
[13:20:19.035]                           if (inherits(master, c("SOCKnode", 
[13:20:19.035]                             "SOCK0node"))) {
[13:20:19.035]                             sendCondition <<- function(cond) {
[13:20:19.035]                               data <- list(type = "VALUE", value = cond, 
[13:20:19.035]                                 success = TRUE)
[13:20:19.035]                               parallel_sendData(master, data)
[13:20:19.035]                             }
[13:20:19.035]                             return(sendCondition)
[13:20:19.035]                           }
[13:20:19.035]                         }
[13:20:19.035]                         frame <- frame + 1L
[13:20:19.035]                         envir <- sys.frame(frame)
[13:20:19.035]                       }
[13:20:19.035]                     }
[13:20:19.035]                     sendCondition <<- function(cond) NULL
[13:20:19.035]                   }
[13:20:19.035]                 })
[13:20:19.035]                 withCallingHandlers({
[13:20:19.035]                   {
[13:20:19.035]                     2 * a
[13:20:19.035]                   }
[13:20:19.035]                 }, immediateCondition = function(cond) {
[13:20:19.035]                   sendCondition <- ...future.makeSendCondition()
[13:20:19.035]                   sendCondition(cond)
[13:20:19.035]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.035]                   {
[13:20:19.035]                     inherits <- base::inherits
[13:20:19.035]                     invokeRestart <- base::invokeRestart
[13:20:19.035]                     is.null <- base::is.null
[13:20:19.035]                     muffled <- FALSE
[13:20:19.035]                     if (inherits(cond, "message")) {
[13:20:19.035]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:19.035]                       if (muffled) 
[13:20:19.035]                         invokeRestart("muffleMessage")
[13:20:19.035]                     }
[13:20:19.035]                     else if (inherits(cond, "warning")) {
[13:20:19.035]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:19.035]                       if (muffled) 
[13:20:19.035]                         invokeRestart("muffleWarning")
[13:20:19.035]                     }
[13:20:19.035]                     else if (inherits(cond, "condition")) {
[13:20:19.035]                       if (!is.null(pattern)) {
[13:20:19.035]                         computeRestarts <- base::computeRestarts
[13:20:19.035]                         grepl <- base::grepl
[13:20:19.035]                         restarts <- computeRestarts(cond)
[13:20:19.035]                         for (restart in restarts) {
[13:20:19.035]                           name <- restart$name
[13:20:19.035]                           if (is.null(name)) 
[13:20:19.035]                             next
[13:20:19.035]                           if (!grepl(pattern, name)) 
[13:20:19.035]                             next
[13:20:19.035]                           invokeRestart(restart)
[13:20:19.035]                           muffled <- TRUE
[13:20:19.035]                           break
[13:20:19.035]                         }
[13:20:19.035]                       }
[13:20:19.035]                     }
[13:20:19.035]                     invisible(muffled)
[13:20:19.035]                   }
[13:20:19.035]                   muffleCondition(cond)
[13:20:19.035]                 })
[13:20:19.035]             }))
[13:20:19.035]             future::FutureResult(value = ...future.value$value, 
[13:20:19.035]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:19.035]                   ...future.rng), globalenv = if (FALSE) 
[13:20:19.035]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:19.035]                     ...future.globalenv.names))
[13:20:19.035]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:19.035]         }, condition = base::local({
[13:20:19.035]             c <- base::c
[13:20:19.035]             inherits <- base::inherits
[13:20:19.035]             invokeRestart <- base::invokeRestart
[13:20:19.035]             length <- base::length
[13:20:19.035]             list <- base::list
[13:20:19.035]             seq.int <- base::seq.int
[13:20:19.035]             signalCondition <- base::signalCondition
[13:20:19.035]             sys.calls <- base::sys.calls
[13:20:19.035]             `[[` <- base::`[[`
[13:20:19.035]             `+` <- base::`+`
[13:20:19.035]             `<<-` <- base::`<<-`
[13:20:19.035]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:19.035]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:19.035]                   3L)]
[13:20:19.035]             }
[13:20:19.035]             function(cond) {
[13:20:19.035]                 is_error <- inherits(cond, "error")
[13:20:19.035]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:19.035]                   NULL)
[13:20:19.035]                 if (is_error) {
[13:20:19.035]                   sessionInformation <- function() {
[13:20:19.035]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:19.035]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:19.035]                       search = base::search(), system = base::Sys.info())
[13:20:19.035]                   }
[13:20:19.035]                   ...future.conditions[[length(...future.conditions) + 
[13:20:19.035]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:19.035]                     cond$call), session = sessionInformation(), 
[13:20:19.035]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:19.035]                   signalCondition(cond)
[13:20:19.035]                 }
[13:20:19.035]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:19.035]                 "immediateCondition"))) {
[13:20:19.035]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:19.035]                   ...future.conditions[[length(...future.conditions) + 
[13:20:19.035]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:19.035]                   if (TRUE && !signal) {
[13:20:19.035]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.035]                     {
[13:20:19.035]                       inherits <- base::inherits
[13:20:19.035]                       invokeRestart <- base::invokeRestart
[13:20:19.035]                       is.null <- base::is.null
[13:20:19.035]                       muffled <- FALSE
[13:20:19.035]                       if (inherits(cond, "message")) {
[13:20:19.035]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:19.035]                         if (muffled) 
[13:20:19.035]                           invokeRestart("muffleMessage")
[13:20:19.035]                       }
[13:20:19.035]                       else if (inherits(cond, "warning")) {
[13:20:19.035]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:19.035]                         if (muffled) 
[13:20:19.035]                           invokeRestart("muffleWarning")
[13:20:19.035]                       }
[13:20:19.035]                       else if (inherits(cond, "condition")) {
[13:20:19.035]                         if (!is.null(pattern)) {
[13:20:19.035]                           computeRestarts <- base::computeRestarts
[13:20:19.035]                           grepl <- base::grepl
[13:20:19.035]                           restarts <- computeRestarts(cond)
[13:20:19.035]                           for (restart in restarts) {
[13:20:19.035]                             name <- restart$name
[13:20:19.035]                             if (is.null(name)) 
[13:20:19.035]                               next
[13:20:19.035]                             if (!grepl(pattern, name)) 
[13:20:19.035]                               next
[13:20:19.035]                             invokeRestart(restart)
[13:20:19.035]                             muffled <- TRUE
[13:20:19.035]                             break
[13:20:19.035]                           }
[13:20:19.035]                         }
[13:20:19.035]                       }
[13:20:19.035]                       invisible(muffled)
[13:20:19.035]                     }
[13:20:19.035]                     muffleCondition(cond, pattern = "^muffle")
[13:20:19.035]                   }
[13:20:19.035]                 }
[13:20:19.035]                 else {
[13:20:19.035]                   if (TRUE) {
[13:20:19.035]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.035]                     {
[13:20:19.035]                       inherits <- base::inherits
[13:20:19.035]                       invokeRestart <- base::invokeRestart
[13:20:19.035]                       is.null <- base::is.null
[13:20:19.035]                       muffled <- FALSE
[13:20:19.035]                       if (inherits(cond, "message")) {
[13:20:19.035]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:19.035]                         if (muffled) 
[13:20:19.035]                           invokeRestart("muffleMessage")
[13:20:19.035]                       }
[13:20:19.035]                       else if (inherits(cond, "warning")) {
[13:20:19.035]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:19.035]                         if (muffled) 
[13:20:19.035]                           invokeRestart("muffleWarning")
[13:20:19.035]                       }
[13:20:19.035]                       else if (inherits(cond, "condition")) {
[13:20:19.035]                         if (!is.null(pattern)) {
[13:20:19.035]                           computeRestarts <- base::computeRestarts
[13:20:19.035]                           grepl <- base::grepl
[13:20:19.035]                           restarts <- computeRestarts(cond)
[13:20:19.035]                           for (restart in restarts) {
[13:20:19.035]                             name <- restart$name
[13:20:19.035]                             if (is.null(name)) 
[13:20:19.035]                               next
[13:20:19.035]                             if (!grepl(pattern, name)) 
[13:20:19.035]                               next
[13:20:19.035]                             invokeRestart(restart)
[13:20:19.035]                             muffled <- TRUE
[13:20:19.035]                             break
[13:20:19.035]                           }
[13:20:19.035]                         }
[13:20:19.035]                       }
[13:20:19.035]                       invisible(muffled)
[13:20:19.035]                     }
[13:20:19.035]                     muffleCondition(cond, pattern = "^muffle")
[13:20:19.035]                   }
[13:20:19.035]                 }
[13:20:19.035]             }
[13:20:19.035]         }))
[13:20:19.035]     }, error = function(ex) {
[13:20:19.035]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:19.035]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:19.035]                 ...future.rng), started = ...future.startTime, 
[13:20:19.035]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:19.035]             version = "1.8"), class = "FutureResult")
[13:20:19.035]     }, finally = {
[13:20:19.035]         if (!identical(...future.workdir, getwd())) 
[13:20:19.035]             setwd(...future.workdir)
[13:20:19.035]         {
[13:20:19.035]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:19.035]                 ...future.oldOptions$nwarnings <- NULL
[13:20:19.035]             }
[13:20:19.035]             base::options(...future.oldOptions)
[13:20:19.035]             if (.Platform$OS.type == "windows") {
[13:20:19.035]                 old_names <- names(...future.oldEnvVars)
[13:20:19.035]                 envs <- base::Sys.getenv()
[13:20:19.035]                 names <- names(envs)
[13:20:19.035]                 common <- intersect(names, old_names)
[13:20:19.035]                 added <- setdiff(names, old_names)
[13:20:19.035]                 removed <- setdiff(old_names, names)
[13:20:19.035]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:19.035]                   envs[common]]
[13:20:19.035]                 NAMES <- toupper(changed)
[13:20:19.035]                 args <- list()
[13:20:19.035]                 for (kk in seq_along(NAMES)) {
[13:20:19.035]                   name <- changed[[kk]]
[13:20:19.035]                   NAME <- NAMES[[kk]]
[13:20:19.035]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.035]                     next
[13:20:19.035]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:19.035]                 }
[13:20:19.035]                 NAMES <- toupper(added)
[13:20:19.035]                 for (kk in seq_along(NAMES)) {
[13:20:19.035]                   name <- added[[kk]]
[13:20:19.035]                   NAME <- NAMES[[kk]]
[13:20:19.035]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.035]                     next
[13:20:19.035]                   args[[name]] <- ""
[13:20:19.035]                 }
[13:20:19.035]                 NAMES <- toupper(removed)
[13:20:19.035]                 for (kk in seq_along(NAMES)) {
[13:20:19.035]                   name <- removed[[kk]]
[13:20:19.035]                   NAME <- NAMES[[kk]]
[13:20:19.035]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.035]                     next
[13:20:19.035]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:19.035]                 }
[13:20:19.035]                 if (length(args) > 0) 
[13:20:19.035]                   base::do.call(base::Sys.setenv, args = args)
[13:20:19.035]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:19.035]             }
[13:20:19.035]             else {
[13:20:19.035]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:19.035]             }
[13:20:19.035]             {
[13:20:19.035]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:19.035]                   0L) {
[13:20:19.035]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:19.035]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:19.035]                   base::options(opts)
[13:20:19.035]                 }
[13:20:19.035]                 {
[13:20:19.035]                   {
[13:20:19.035]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:19.035]                     NULL
[13:20:19.035]                   }
[13:20:19.035]                   options(future.plan = NULL)
[13:20:19.035]                   if (is.na(NA_character_)) 
[13:20:19.035]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:19.035]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:19.035]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:19.035]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:19.035]                     envir = parent.frame()) 
[13:20:19.035]                   {
[13:20:19.035]                     if (is.function(workers)) 
[13:20:19.035]                       workers <- workers()
[13:20:19.035]                     workers <- structure(as.integer(workers), 
[13:20:19.035]                       class = class(workers))
[13:20:19.035]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:19.035]                       workers >= 1)
[13:20:19.035]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:19.035]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:19.035]                     }
[13:20:19.035]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:19.035]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:19.035]                       envir = envir)
[13:20:19.035]                     if (!future$lazy) 
[13:20:19.035]                       future <- run(future)
[13:20:19.035]                     invisible(future)
[13:20:19.035]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:19.035]                 }
[13:20:19.035]             }
[13:20:19.035]         }
[13:20:19.035]     })
[13:20:19.035]     if (TRUE) {
[13:20:19.035]         base::sink(type = "output", split = FALSE)
[13:20:19.035]         if (TRUE) {
[13:20:19.035]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:19.035]         }
[13:20:19.035]         else {
[13:20:19.035]             ...future.result["stdout"] <- base::list(NULL)
[13:20:19.035]         }
[13:20:19.035]         base::close(...future.stdout)
[13:20:19.035]         ...future.stdout <- NULL
[13:20:19.035]     }
[13:20:19.035]     ...future.result$conditions <- ...future.conditions
[13:20:19.035]     ...future.result$finished <- base::Sys.time()
[13:20:19.035]     ...future.result
[13:20:19.035] }
[13:20:19.038] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:20:19.038] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:20:19.039] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:20:19.039] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:20:19.040] MultisessionFuture started
[13:20:19.040] - Launch lazy future ... done
[13:20:19.040] run() for ‘MultisessionFuture’ ... done
[13:20:19.040] result() for ClusterFuture ...
[13:20:19.040] receiveMessageFromWorker() for ClusterFuture ...
[13:20:19.040] - Validating connection of MultisessionFuture
[13:20:19.090] - received message: FutureResult
[13:20:19.090] - Received FutureResult
[13:20:19.090] - Erased future from FutureRegistry
[13:20:19.090] result() for ClusterFuture ...
[13:20:19.090] - result already collected: FutureResult
[13:20:19.090] result() for ClusterFuture ... done
[13:20:19.090] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:19.091] result() for ClusterFuture ... done
[13:20:19.091] result() for ClusterFuture ...
[13:20:19.091] - result already collected: FutureResult
[13:20:19.091] result() for ClusterFuture ... done
[13:20:19.091] getGlobalsAndPackages() ...
[13:20:19.091] Searching for globals...
[13:20:19.092] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:19.092] Searching for globals ... DONE
[13:20:19.092] Resolving globals: FALSE
[13:20:19.093] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:19.093] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:19.093] - globals: [1] ‘a’
[13:20:19.093] 
[13:20:19.094] getGlobalsAndPackages() ... DONE
[13:20:19.094] run() for ‘Future’ ...
[13:20:19.094] - state: ‘created’
[13:20:19.094] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:19.109] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:19.109] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:19.109]   - Field: ‘node’
[13:20:19.109]   - Field: ‘label’
[13:20:19.109]   - Field: ‘local’
[13:20:19.109]   - Field: ‘owner’
[13:20:19.109]   - Field: ‘envir’
[13:20:19.109]   - Field: ‘workers’
[13:20:19.110]   - Field: ‘packages’
[13:20:19.110]   - Field: ‘gc’
[13:20:19.110]   - Field: ‘conditions’
[13:20:19.110]   - Field: ‘persistent’
[13:20:19.110]   - Field: ‘expr’
[13:20:19.110]   - Field: ‘uuid’
[13:20:19.110]   - Field: ‘seed’
[13:20:19.110]   - Field: ‘version’
[13:20:19.110]   - Field: ‘result’
[13:20:19.110]   - Field: ‘asynchronous’
[13:20:19.110]   - Field: ‘calls’
[13:20:19.111]   - Field: ‘globals’
[13:20:19.111]   - Field: ‘stdout’
[13:20:19.111]   - Field: ‘earlySignal’
[13:20:19.111]   - Field: ‘lazy’
[13:20:19.111]   - Field: ‘state’
[13:20:19.111] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:19.111] - Launch lazy future ...
[13:20:19.111] Packages needed by the future expression (n = 0): <none>
[13:20:19.111] Packages needed by future strategies (n = 0): <none>
[13:20:19.112] {
[13:20:19.112]     {
[13:20:19.112]         {
[13:20:19.112]             ...future.startTime <- base::Sys.time()
[13:20:19.112]             {
[13:20:19.112]                 {
[13:20:19.112]                   {
[13:20:19.112]                     {
[13:20:19.112]                       base::local({
[13:20:19.112]                         has_future <- base::requireNamespace("future", 
[13:20:19.112]                           quietly = TRUE)
[13:20:19.112]                         if (has_future) {
[13:20:19.112]                           ns <- base::getNamespace("future")
[13:20:19.112]                           version <- ns[[".package"]][["version"]]
[13:20:19.112]                           if (is.null(version)) 
[13:20:19.112]                             version <- utils::packageVersion("future")
[13:20:19.112]                         }
[13:20:19.112]                         else {
[13:20:19.112]                           version <- NULL
[13:20:19.112]                         }
[13:20:19.112]                         if (!has_future || version < "1.8.0") {
[13:20:19.112]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:19.112]                             "", base::R.version$version.string), 
[13:20:19.112]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:19.112]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:19.112]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:19.112]                               "release", "version")], collapse = " "), 
[13:20:19.112]                             hostname = base::Sys.info()[["nodename"]])
[13:20:19.112]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:19.112]                             info)
[13:20:19.112]                           info <- base::paste(info, collapse = "; ")
[13:20:19.112]                           if (!has_future) {
[13:20:19.112]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:19.112]                               info)
[13:20:19.112]                           }
[13:20:19.112]                           else {
[13:20:19.112]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:19.112]                               info, version)
[13:20:19.112]                           }
[13:20:19.112]                           base::stop(msg)
[13:20:19.112]                         }
[13:20:19.112]                       })
[13:20:19.112]                     }
[13:20:19.112]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:19.112]                     base::options(mc.cores = 1L)
[13:20:19.112]                   }
[13:20:19.112]                   options(future.plan = NULL)
[13:20:19.112]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:19.112]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:19.112]                 }
[13:20:19.112]                 ...future.workdir <- getwd()
[13:20:19.112]             }
[13:20:19.112]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:19.112]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:19.112]         }
[13:20:19.112]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:19.112]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:19.112]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:19.112]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:19.112]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:19.112]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:19.112]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:19.112]             base::names(...future.oldOptions))
[13:20:19.112]     }
[13:20:19.112]     if (FALSE) {
[13:20:19.112]     }
[13:20:19.112]     else {
[13:20:19.112]         if (TRUE) {
[13:20:19.112]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:19.112]                 open = "w")
[13:20:19.112]         }
[13:20:19.112]         else {
[13:20:19.112]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:19.112]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:19.112]         }
[13:20:19.112]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:19.112]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:19.112]             base::sink(type = "output", split = FALSE)
[13:20:19.112]             base::close(...future.stdout)
[13:20:19.112]         }, add = TRUE)
[13:20:19.112]     }
[13:20:19.112]     ...future.frame <- base::sys.nframe()
[13:20:19.112]     ...future.conditions <- base::list()
[13:20:19.112]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:19.112]     if (FALSE) {
[13:20:19.112]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:19.112]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:19.112]     }
[13:20:19.112]     ...future.result <- base::tryCatch({
[13:20:19.112]         base::withCallingHandlers({
[13:20:19.112]             ...future.value <- base::withVisible(base::local({
[13:20:19.112]                 ...future.makeSendCondition <- local({
[13:20:19.112]                   sendCondition <- NULL
[13:20:19.112]                   function(frame = 1L) {
[13:20:19.112]                     if (is.function(sendCondition)) 
[13:20:19.112]                       return(sendCondition)
[13:20:19.112]                     ns <- getNamespace("parallel")
[13:20:19.112]                     if (exists("sendData", mode = "function", 
[13:20:19.112]                       envir = ns)) {
[13:20:19.112]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:19.112]                         envir = ns)
[13:20:19.112]                       envir <- sys.frame(frame)
[13:20:19.112]                       master <- NULL
[13:20:19.112]                       while (!identical(envir, .GlobalEnv) && 
[13:20:19.112]                         !identical(envir, emptyenv())) {
[13:20:19.112]                         if (exists("master", mode = "list", envir = envir, 
[13:20:19.112]                           inherits = FALSE)) {
[13:20:19.112]                           master <- get("master", mode = "list", 
[13:20:19.112]                             envir = envir, inherits = FALSE)
[13:20:19.112]                           if (inherits(master, c("SOCKnode", 
[13:20:19.112]                             "SOCK0node"))) {
[13:20:19.112]                             sendCondition <<- function(cond) {
[13:20:19.112]                               data <- list(type = "VALUE", value = cond, 
[13:20:19.112]                                 success = TRUE)
[13:20:19.112]                               parallel_sendData(master, data)
[13:20:19.112]                             }
[13:20:19.112]                             return(sendCondition)
[13:20:19.112]                           }
[13:20:19.112]                         }
[13:20:19.112]                         frame <- frame + 1L
[13:20:19.112]                         envir <- sys.frame(frame)
[13:20:19.112]                       }
[13:20:19.112]                     }
[13:20:19.112]                     sendCondition <<- function(cond) NULL
[13:20:19.112]                   }
[13:20:19.112]                 })
[13:20:19.112]                 withCallingHandlers({
[13:20:19.112]                   {
[13:20:19.112]                     2 * a
[13:20:19.112]                   }
[13:20:19.112]                 }, immediateCondition = function(cond) {
[13:20:19.112]                   sendCondition <- ...future.makeSendCondition()
[13:20:19.112]                   sendCondition(cond)
[13:20:19.112]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.112]                   {
[13:20:19.112]                     inherits <- base::inherits
[13:20:19.112]                     invokeRestart <- base::invokeRestart
[13:20:19.112]                     is.null <- base::is.null
[13:20:19.112]                     muffled <- FALSE
[13:20:19.112]                     if (inherits(cond, "message")) {
[13:20:19.112]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:19.112]                       if (muffled) 
[13:20:19.112]                         invokeRestart("muffleMessage")
[13:20:19.112]                     }
[13:20:19.112]                     else if (inherits(cond, "warning")) {
[13:20:19.112]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:19.112]                       if (muffled) 
[13:20:19.112]                         invokeRestart("muffleWarning")
[13:20:19.112]                     }
[13:20:19.112]                     else if (inherits(cond, "condition")) {
[13:20:19.112]                       if (!is.null(pattern)) {
[13:20:19.112]                         computeRestarts <- base::computeRestarts
[13:20:19.112]                         grepl <- base::grepl
[13:20:19.112]                         restarts <- computeRestarts(cond)
[13:20:19.112]                         for (restart in restarts) {
[13:20:19.112]                           name <- restart$name
[13:20:19.112]                           if (is.null(name)) 
[13:20:19.112]                             next
[13:20:19.112]                           if (!grepl(pattern, name)) 
[13:20:19.112]                             next
[13:20:19.112]                           invokeRestart(restart)
[13:20:19.112]                           muffled <- TRUE
[13:20:19.112]                           break
[13:20:19.112]                         }
[13:20:19.112]                       }
[13:20:19.112]                     }
[13:20:19.112]                     invisible(muffled)
[13:20:19.112]                   }
[13:20:19.112]                   muffleCondition(cond)
[13:20:19.112]                 })
[13:20:19.112]             }))
[13:20:19.112]             future::FutureResult(value = ...future.value$value, 
[13:20:19.112]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:19.112]                   ...future.rng), globalenv = if (FALSE) 
[13:20:19.112]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:19.112]                     ...future.globalenv.names))
[13:20:19.112]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:19.112]         }, condition = base::local({
[13:20:19.112]             c <- base::c
[13:20:19.112]             inherits <- base::inherits
[13:20:19.112]             invokeRestart <- base::invokeRestart
[13:20:19.112]             length <- base::length
[13:20:19.112]             list <- base::list
[13:20:19.112]             seq.int <- base::seq.int
[13:20:19.112]             signalCondition <- base::signalCondition
[13:20:19.112]             sys.calls <- base::sys.calls
[13:20:19.112]             `[[` <- base::`[[`
[13:20:19.112]             `+` <- base::`+`
[13:20:19.112]             `<<-` <- base::`<<-`
[13:20:19.112]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:19.112]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:19.112]                   3L)]
[13:20:19.112]             }
[13:20:19.112]             function(cond) {
[13:20:19.112]                 is_error <- inherits(cond, "error")
[13:20:19.112]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:19.112]                   NULL)
[13:20:19.112]                 if (is_error) {
[13:20:19.112]                   sessionInformation <- function() {
[13:20:19.112]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:19.112]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:19.112]                       search = base::search(), system = base::Sys.info())
[13:20:19.112]                   }
[13:20:19.112]                   ...future.conditions[[length(...future.conditions) + 
[13:20:19.112]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:19.112]                     cond$call), session = sessionInformation(), 
[13:20:19.112]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:19.112]                   signalCondition(cond)
[13:20:19.112]                 }
[13:20:19.112]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:19.112]                 "immediateCondition"))) {
[13:20:19.112]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:19.112]                   ...future.conditions[[length(...future.conditions) + 
[13:20:19.112]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:19.112]                   if (TRUE && !signal) {
[13:20:19.112]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.112]                     {
[13:20:19.112]                       inherits <- base::inherits
[13:20:19.112]                       invokeRestart <- base::invokeRestart
[13:20:19.112]                       is.null <- base::is.null
[13:20:19.112]                       muffled <- FALSE
[13:20:19.112]                       if (inherits(cond, "message")) {
[13:20:19.112]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:19.112]                         if (muffled) 
[13:20:19.112]                           invokeRestart("muffleMessage")
[13:20:19.112]                       }
[13:20:19.112]                       else if (inherits(cond, "warning")) {
[13:20:19.112]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:19.112]                         if (muffled) 
[13:20:19.112]                           invokeRestart("muffleWarning")
[13:20:19.112]                       }
[13:20:19.112]                       else if (inherits(cond, "condition")) {
[13:20:19.112]                         if (!is.null(pattern)) {
[13:20:19.112]                           computeRestarts <- base::computeRestarts
[13:20:19.112]                           grepl <- base::grepl
[13:20:19.112]                           restarts <- computeRestarts(cond)
[13:20:19.112]                           for (restart in restarts) {
[13:20:19.112]                             name <- restart$name
[13:20:19.112]                             if (is.null(name)) 
[13:20:19.112]                               next
[13:20:19.112]                             if (!grepl(pattern, name)) 
[13:20:19.112]                               next
[13:20:19.112]                             invokeRestart(restart)
[13:20:19.112]                             muffled <- TRUE
[13:20:19.112]                             break
[13:20:19.112]                           }
[13:20:19.112]                         }
[13:20:19.112]                       }
[13:20:19.112]                       invisible(muffled)
[13:20:19.112]                     }
[13:20:19.112]                     muffleCondition(cond, pattern = "^muffle")
[13:20:19.112]                   }
[13:20:19.112]                 }
[13:20:19.112]                 else {
[13:20:19.112]                   if (TRUE) {
[13:20:19.112]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.112]                     {
[13:20:19.112]                       inherits <- base::inherits
[13:20:19.112]                       invokeRestart <- base::invokeRestart
[13:20:19.112]                       is.null <- base::is.null
[13:20:19.112]                       muffled <- FALSE
[13:20:19.112]                       if (inherits(cond, "message")) {
[13:20:19.112]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:19.112]                         if (muffled) 
[13:20:19.112]                           invokeRestart("muffleMessage")
[13:20:19.112]                       }
[13:20:19.112]                       else if (inherits(cond, "warning")) {
[13:20:19.112]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:19.112]                         if (muffled) 
[13:20:19.112]                           invokeRestart("muffleWarning")
[13:20:19.112]                       }
[13:20:19.112]                       else if (inherits(cond, "condition")) {
[13:20:19.112]                         if (!is.null(pattern)) {
[13:20:19.112]                           computeRestarts <- base::computeRestarts
[13:20:19.112]                           grepl <- base::grepl
[13:20:19.112]                           restarts <- computeRestarts(cond)
[13:20:19.112]                           for (restart in restarts) {
[13:20:19.112]                             name <- restart$name
[13:20:19.112]                             if (is.null(name)) 
[13:20:19.112]                               next
[13:20:19.112]                             if (!grepl(pattern, name)) 
[13:20:19.112]                               next
[13:20:19.112]                             invokeRestart(restart)
[13:20:19.112]                             muffled <- TRUE
[13:20:19.112]                             break
[13:20:19.112]                           }
[13:20:19.112]                         }
[13:20:19.112]                       }
[13:20:19.112]                       invisible(muffled)
[13:20:19.112]                     }
[13:20:19.112]                     muffleCondition(cond, pattern = "^muffle")
[13:20:19.112]                   }
[13:20:19.112]                 }
[13:20:19.112]             }
[13:20:19.112]         }))
[13:20:19.112]     }, error = function(ex) {
[13:20:19.112]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:19.112]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:19.112]                 ...future.rng), started = ...future.startTime, 
[13:20:19.112]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:19.112]             version = "1.8"), class = "FutureResult")
[13:20:19.112]     }, finally = {
[13:20:19.112]         if (!identical(...future.workdir, getwd())) 
[13:20:19.112]             setwd(...future.workdir)
[13:20:19.112]         {
[13:20:19.112]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:19.112]                 ...future.oldOptions$nwarnings <- NULL
[13:20:19.112]             }
[13:20:19.112]             base::options(...future.oldOptions)
[13:20:19.112]             if (.Platform$OS.type == "windows") {
[13:20:19.112]                 old_names <- names(...future.oldEnvVars)
[13:20:19.112]                 envs <- base::Sys.getenv()
[13:20:19.112]                 names <- names(envs)
[13:20:19.112]                 common <- intersect(names, old_names)
[13:20:19.112]                 added <- setdiff(names, old_names)
[13:20:19.112]                 removed <- setdiff(old_names, names)
[13:20:19.112]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:19.112]                   envs[common]]
[13:20:19.112]                 NAMES <- toupper(changed)
[13:20:19.112]                 args <- list()
[13:20:19.112]                 for (kk in seq_along(NAMES)) {
[13:20:19.112]                   name <- changed[[kk]]
[13:20:19.112]                   NAME <- NAMES[[kk]]
[13:20:19.112]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.112]                     next
[13:20:19.112]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:19.112]                 }
[13:20:19.112]                 NAMES <- toupper(added)
[13:20:19.112]                 for (kk in seq_along(NAMES)) {
[13:20:19.112]                   name <- added[[kk]]
[13:20:19.112]                   NAME <- NAMES[[kk]]
[13:20:19.112]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.112]                     next
[13:20:19.112]                   args[[name]] <- ""
[13:20:19.112]                 }
[13:20:19.112]                 NAMES <- toupper(removed)
[13:20:19.112]                 for (kk in seq_along(NAMES)) {
[13:20:19.112]                   name <- removed[[kk]]
[13:20:19.112]                   NAME <- NAMES[[kk]]
[13:20:19.112]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.112]                     next
[13:20:19.112]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:19.112]                 }
[13:20:19.112]                 if (length(args) > 0) 
[13:20:19.112]                   base::do.call(base::Sys.setenv, args = args)
[13:20:19.112]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:19.112]             }
[13:20:19.112]             else {
[13:20:19.112]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:19.112]             }
[13:20:19.112]             {
[13:20:19.112]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:19.112]                   0L) {
[13:20:19.112]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:19.112]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:19.112]                   base::options(opts)
[13:20:19.112]                 }
[13:20:19.112]                 {
[13:20:19.112]                   {
[13:20:19.112]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:19.112]                     NULL
[13:20:19.112]                   }
[13:20:19.112]                   options(future.plan = NULL)
[13:20:19.112]                   if (is.na(NA_character_)) 
[13:20:19.112]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:19.112]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:19.112]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:19.112]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:19.112]                     envir = parent.frame()) 
[13:20:19.112]                   {
[13:20:19.112]                     if (is.function(workers)) 
[13:20:19.112]                       workers <- workers()
[13:20:19.112]                     workers <- structure(as.integer(workers), 
[13:20:19.112]                       class = class(workers))
[13:20:19.112]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:19.112]                       workers >= 1)
[13:20:19.112]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:19.112]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:19.112]                     }
[13:20:19.112]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:19.112]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:19.112]                       envir = envir)
[13:20:19.112]                     if (!future$lazy) 
[13:20:19.112]                       future <- run(future)
[13:20:19.112]                     invisible(future)
[13:20:19.112]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:19.112]                 }
[13:20:19.112]             }
[13:20:19.112]         }
[13:20:19.112]     })
[13:20:19.112]     if (TRUE) {
[13:20:19.112]         base::sink(type = "output", split = FALSE)
[13:20:19.112]         if (TRUE) {
[13:20:19.112]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:19.112]         }
[13:20:19.112]         else {
[13:20:19.112]             ...future.result["stdout"] <- base::list(NULL)
[13:20:19.112]         }
[13:20:19.112]         base::close(...future.stdout)
[13:20:19.112]         ...future.stdout <- NULL
[13:20:19.112]     }
[13:20:19.112]     ...future.result$conditions <- ...future.conditions
[13:20:19.112]     ...future.result$finished <- base::Sys.time()
[13:20:19.112]     ...future.result
[13:20:19.112] }
[13:20:19.115] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:20:19.115] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:20:19.115] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:20:19.115] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:20:19.116] MultisessionFuture started
[13:20:19.116] - Launch lazy future ... done
[13:20:19.116] run() for ‘MultisessionFuture’ ... done
[13:20:19.116] result() for ClusterFuture ...
[13:20:19.117] receiveMessageFromWorker() for ClusterFuture ...
[13:20:19.117] - Validating connection of MultisessionFuture
[13:20:19.162] - received message: FutureResult
[13:20:19.162] - Received FutureResult
[13:20:19.162] - Erased future from FutureRegistry
[13:20:19.162] result() for ClusterFuture ...
[13:20:19.162] - result already collected: FutureResult
[13:20:19.162] result() for ClusterFuture ... done
[13:20:19.162] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:19.162] result() for ClusterFuture ... done
[13:20:19.162] result() for ClusterFuture ...
[13:20:19.163] - result already collected: FutureResult
[13:20:19.163] result() for ClusterFuture ... done
[13:20:19.163] getGlobalsAndPackages() ...
[13:20:19.163] Searching for globals...
[13:20:19.164] - globals found: [3] ‘{’, ‘*’, ‘a’
[13:20:19.164] Searching for globals ... DONE
[13:20:19.164] Resolving globals: FALSE
[13:20:19.165] The total size of the 1 globals is 56 bytes (56 bytes)
[13:20:19.165] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:20:19.165] - globals: [1] ‘a’
[13:20:19.165] 
[13:20:19.165] getGlobalsAndPackages() ... DONE
[13:20:19.166] run() for ‘Future’ ...
[13:20:19.166] - state: ‘created’
[13:20:19.166] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:19.180] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:19.180] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:19.180]   - Field: ‘node’
[13:20:19.181]   - Field: ‘label’
[13:20:19.181]   - Field: ‘local’
[13:20:19.181]   - Field: ‘owner’
[13:20:19.181]   - Field: ‘envir’
[13:20:19.181]   - Field: ‘workers’
[13:20:19.181]   - Field: ‘packages’
[13:20:19.181]   - Field: ‘gc’
[13:20:19.181]   - Field: ‘conditions’
[13:20:19.181]   - Field: ‘persistent’
[13:20:19.181]   - Field: ‘expr’
[13:20:19.182]   - Field: ‘uuid’
[13:20:19.182]   - Field: ‘seed’
[13:20:19.182]   - Field: ‘version’
[13:20:19.182]   - Field: ‘result’
[13:20:19.182]   - Field: ‘asynchronous’
[13:20:19.182]   - Field: ‘calls’
[13:20:19.182]   - Field: ‘globals’
[13:20:19.182]   - Field: ‘stdout’
[13:20:19.182]   - Field: ‘earlySignal’
[13:20:19.182]   - Field: ‘lazy’
[13:20:19.182]   - Field: ‘state’
[13:20:19.182] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:19.183] - Launch lazy future ...
[13:20:19.183] Packages needed by the future expression (n = 0): <none>
[13:20:19.183] Packages needed by future strategies (n = 0): <none>
[13:20:19.183] {
[13:20:19.183]     {
[13:20:19.183]         {
[13:20:19.183]             ...future.startTime <- base::Sys.time()
[13:20:19.183]             {
[13:20:19.183]                 {
[13:20:19.183]                   {
[13:20:19.183]                     {
[13:20:19.183]                       base::local({
[13:20:19.183]                         has_future <- base::requireNamespace("future", 
[13:20:19.183]                           quietly = TRUE)
[13:20:19.183]                         if (has_future) {
[13:20:19.183]                           ns <- base::getNamespace("future")
[13:20:19.183]                           version <- ns[[".package"]][["version"]]
[13:20:19.183]                           if (is.null(version)) 
[13:20:19.183]                             version <- utils::packageVersion("future")
[13:20:19.183]                         }
[13:20:19.183]                         else {
[13:20:19.183]                           version <- NULL
[13:20:19.183]                         }
[13:20:19.183]                         if (!has_future || version < "1.8.0") {
[13:20:19.183]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:19.183]                             "", base::R.version$version.string), 
[13:20:19.183]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:19.183]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:19.183]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:19.183]                               "release", "version")], collapse = " "), 
[13:20:19.183]                             hostname = base::Sys.info()[["nodename"]])
[13:20:19.183]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:19.183]                             info)
[13:20:19.183]                           info <- base::paste(info, collapse = "; ")
[13:20:19.183]                           if (!has_future) {
[13:20:19.183]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:19.183]                               info)
[13:20:19.183]                           }
[13:20:19.183]                           else {
[13:20:19.183]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:19.183]                               info, version)
[13:20:19.183]                           }
[13:20:19.183]                           base::stop(msg)
[13:20:19.183]                         }
[13:20:19.183]                       })
[13:20:19.183]                     }
[13:20:19.183]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:19.183]                     base::options(mc.cores = 1L)
[13:20:19.183]                   }
[13:20:19.183]                   options(future.plan = NULL)
[13:20:19.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:19.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:19.183]                 }
[13:20:19.183]                 ...future.workdir <- getwd()
[13:20:19.183]             }
[13:20:19.183]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:19.183]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:19.183]         }
[13:20:19.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:19.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:19.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:19.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:19.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:19.183]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:19.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:19.183]             base::names(...future.oldOptions))
[13:20:19.183]     }
[13:20:19.183]     if (FALSE) {
[13:20:19.183]     }
[13:20:19.183]     else {
[13:20:19.183]         if (TRUE) {
[13:20:19.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:19.183]                 open = "w")
[13:20:19.183]         }
[13:20:19.183]         else {
[13:20:19.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:19.183]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:19.183]         }
[13:20:19.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:19.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:19.183]             base::sink(type = "output", split = FALSE)
[13:20:19.183]             base::close(...future.stdout)
[13:20:19.183]         }, add = TRUE)
[13:20:19.183]     }
[13:20:19.183]     ...future.frame <- base::sys.nframe()
[13:20:19.183]     ...future.conditions <- base::list()
[13:20:19.183]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:19.183]     if (FALSE) {
[13:20:19.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:19.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:19.183]     }
[13:20:19.183]     ...future.result <- base::tryCatch({
[13:20:19.183]         base::withCallingHandlers({
[13:20:19.183]             ...future.value <- base::withVisible(base::local({
[13:20:19.183]                 ...future.makeSendCondition <- local({
[13:20:19.183]                   sendCondition <- NULL
[13:20:19.183]                   function(frame = 1L) {
[13:20:19.183]                     if (is.function(sendCondition)) 
[13:20:19.183]                       return(sendCondition)
[13:20:19.183]                     ns <- getNamespace("parallel")
[13:20:19.183]                     if (exists("sendData", mode = "function", 
[13:20:19.183]                       envir = ns)) {
[13:20:19.183]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:19.183]                         envir = ns)
[13:20:19.183]                       envir <- sys.frame(frame)
[13:20:19.183]                       master <- NULL
[13:20:19.183]                       while (!identical(envir, .GlobalEnv) && 
[13:20:19.183]                         !identical(envir, emptyenv())) {
[13:20:19.183]                         if (exists("master", mode = "list", envir = envir, 
[13:20:19.183]                           inherits = FALSE)) {
[13:20:19.183]                           master <- get("master", mode = "list", 
[13:20:19.183]                             envir = envir, inherits = FALSE)
[13:20:19.183]                           if (inherits(master, c("SOCKnode", 
[13:20:19.183]                             "SOCK0node"))) {
[13:20:19.183]                             sendCondition <<- function(cond) {
[13:20:19.183]                               data <- list(type = "VALUE", value = cond, 
[13:20:19.183]                                 success = TRUE)
[13:20:19.183]                               parallel_sendData(master, data)
[13:20:19.183]                             }
[13:20:19.183]                             return(sendCondition)
[13:20:19.183]                           }
[13:20:19.183]                         }
[13:20:19.183]                         frame <- frame + 1L
[13:20:19.183]                         envir <- sys.frame(frame)
[13:20:19.183]                       }
[13:20:19.183]                     }
[13:20:19.183]                     sendCondition <<- function(cond) NULL
[13:20:19.183]                   }
[13:20:19.183]                 })
[13:20:19.183]                 withCallingHandlers({
[13:20:19.183]                   {
[13:20:19.183]                     2 * a
[13:20:19.183]                   }
[13:20:19.183]                 }, immediateCondition = function(cond) {
[13:20:19.183]                   sendCondition <- ...future.makeSendCondition()
[13:20:19.183]                   sendCondition(cond)
[13:20:19.183]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.183]                   {
[13:20:19.183]                     inherits <- base::inherits
[13:20:19.183]                     invokeRestart <- base::invokeRestart
[13:20:19.183]                     is.null <- base::is.null
[13:20:19.183]                     muffled <- FALSE
[13:20:19.183]                     if (inherits(cond, "message")) {
[13:20:19.183]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:19.183]                       if (muffled) 
[13:20:19.183]                         invokeRestart("muffleMessage")
[13:20:19.183]                     }
[13:20:19.183]                     else if (inherits(cond, "warning")) {
[13:20:19.183]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:19.183]                       if (muffled) 
[13:20:19.183]                         invokeRestart("muffleWarning")
[13:20:19.183]                     }
[13:20:19.183]                     else if (inherits(cond, "condition")) {
[13:20:19.183]                       if (!is.null(pattern)) {
[13:20:19.183]                         computeRestarts <- base::computeRestarts
[13:20:19.183]                         grepl <- base::grepl
[13:20:19.183]                         restarts <- computeRestarts(cond)
[13:20:19.183]                         for (restart in restarts) {
[13:20:19.183]                           name <- restart$name
[13:20:19.183]                           if (is.null(name)) 
[13:20:19.183]                             next
[13:20:19.183]                           if (!grepl(pattern, name)) 
[13:20:19.183]                             next
[13:20:19.183]                           invokeRestart(restart)
[13:20:19.183]                           muffled <- TRUE
[13:20:19.183]                           break
[13:20:19.183]                         }
[13:20:19.183]                       }
[13:20:19.183]                     }
[13:20:19.183]                     invisible(muffled)
[13:20:19.183]                   }
[13:20:19.183]                   muffleCondition(cond)
[13:20:19.183]                 })
[13:20:19.183]             }))
[13:20:19.183]             future::FutureResult(value = ...future.value$value, 
[13:20:19.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:19.183]                   ...future.rng), globalenv = if (FALSE) 
[13:20:19.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:19.183]                     ...future.globalenv.names))
[13:20:19.183]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:19.183]         }, condition = base::local({
[13:20:19.183]             c <- base::c
[13:20:19.183]             inherits <- base::inherits
[13:20:19.183]             invokeRestart <- base::invokeRestart
[13:20:19.183]             length <- base::length
[13:20:19.183]             list <- base::list
[13:20:19.183]             seq.int <- base::seq.int
[13:20:19.183]             signalCondition <- base::signalCondition
[13:20:19.183]             sys.calls <- base::sys.calls
[13:20:19.183]             `[[` <- base::`[[`
[13:20:19.183]             `+` <- base::`+`
[13:20:19.183]             `<<-` <- base::`<<-`
[13:20:19.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:19.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:19.183]                   3L)]
[13:20:19.183]             }
[13:20:19.183]             function(cond) {
[13:20:19.183]                 is_error <- inherits(cond, "error")
[13:20:19.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:19.183]                   NULL)
[13:20:19.183]                 if (is_error) {
[13:20:19.183]                   sessionInformation <- function() {
[13:20:19.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:19.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:19.183]                       search = base::search(), system = base::Sys.info())
[13:20:19.183]                   }
[13:20:19.183]                   ...future.conditions[[length(...future.conditions) + 
[13:20:19.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:19.183]                     cond$call), session = sessionInformation(), 
[13:20:19.183]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:19.183]                   signalCondition(cond)
[13:20:19.183]                 }
[13:20:19.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:19.183]                 "immediateCondition"))) {
[13:20:19.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:19.183]                   ...future.conditions[[length(...future.conditions) + 
[13:20:19.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:19.183]                   if (TRUE && !signal) {
[13:20:19.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.183]                     {
[13:20:19.183]                       inherits <- base::inherits
[13:20:19.183]                       invokeRestart <- base::invokeRestart
[13:20:19.183]                       is.null <- base::is.null
[13:20:19.183]                       muffled <- FALSE
[13:20:19.183]                       if (inherits(cond, "message")) {
[13:20:19.183]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:19.183]                         if (muffled) 
[13:20:19.183]                           invokeRestart("muffleMessage")
[13:20:19.183]                       }
[13:20:19.183]                       else if (inherits(cond, "warning")) {
[13:20:19.183]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:19.183]                         if (muffled) 
[13:20:19.183]                           invokeRestart("muffleWarning")
[13:20:19.183]                       }
[13:20:19.183]                       else if (inherits(cond, "condition")) {
[13:20:19.183]                         if (!is.null(pattern)) {
[13:20:19.183]                           computeRestarts <- base::computeRestarts
[13:20:19.183]                           grepl <- base::grepl
[13:20:19.183]                           restarts <- computeRestarts(cond)
[13:20:19.183]                           for (restart in restarts) {
[13:20:19.183]                             name <- restart$name
[13:20:19.183]                             if (is.null(name)) 
[13:20:19.183]                               next
[13:20:19.183]                             if (!grepl(pattern, name)) 
[13:20:19.183]                               next
[13:20:19.183]                             invokeRestart(restart)
[13:20:19.183]                             muffled <- TRUE
[13:20:19.183]                             break
[13:20:19.183]                           }
[13:20:19.183]                         }
[13:20:19.183]                       }
[13:20:19.183]                       invisible(muffled)
[13:20:19.183]                     }
[13:20:19.183]                     muffleCondition(cond, pattern = "^muffle")
[13:20:19.183]                   }
[13:20:19.183]                 }
[13:20:19.183]                 else {
[13:20:19.183]                   if (TRUE) {
[13:20:19.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:19.183]                     {
[13:20:19.183]                       inherits <- base::inherits
[13:20:19.183]                       invokeRestart <- base::invokeRestart
[13:20:19.183]                       is.null <- base::is.null
[13:20:19.183]                       muffled <- FALSE
[13:20:19.183]                       if (inherits(cond, "message")) {
[13:20:19.183]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:19.183]                         if (muffled) 
[13:20:19.183]                           invokeRestart("muffleMessage")
[13:20:19.183]                       }
[13:20:19.183]                       else if (inherits(cond, "warning")) {
[13:20:19.183]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:19.183]                         if (muffled) 
[13:20:19.183]                           invokeRestart("muffleWarning")
[13:20:19.183]                       }
[13:20:19.183]                       else if (inherits(cond, "condition")) {
[13:20:19.183]                         if (!is.null(pattern)) {
[13:20:19.183]                           computeRestarts <- base::computeRestarts
[13:20:19.183]                           grepl <- base::grepl
[13:20:19.183]                           restarts <- computeRestarts(cond)
[13:20:19.183]                           for (restart in restarts) {
[13:20:19.183]                             name <- restart$name
[13:20:19.183]                             if (is.null(name)) 
[13:20:19.183]                               next
[13:20:19.183]                             if (!grepl(pattern, name)) 
[13:20:19.183]                               next
[13:20:19.183]                             invokeRestart(restart)
[13:20:19.183]                             muffled <- TRUE
[13:20:19.183]                             break
[13:20:19.183]                           }
[13:20:19.183]                         }
[13:20:19.183]                       }
[13:20:19.183]                       invisible(muffled)
[13:20:19.183]                     }
[13:20:19.183]                     muffleCondition(cond, pattern = "^muffle")
[13:20:19.183]                   }
[13:20:19.183]                 }
[13:20:19.183]             }
[13:20:19.183]         }))
[13:20:19.183]     }, error = function(ex) {
[13:20:19.183]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:19.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:19.183]                 ...future.rng), started = ...future.startTime, 
[13:20:19.183]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:19.183]             version = "1.8"), class = "FutureResult")
[13:20:19.183]     }, finally = {
[13:20:19.183]         if (!identical(...future.workdir, getwd())) 
[13:20:19.183]             setwd(...future.workdir)
[13:20:19.183]         {
[13:20:19.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:19.183]                 ...future.oldOptions$nwarnings <- NULL
[13:20:19.183]             }
[13:20:19.183]             base::options(...future.oldOptions)
[13:20:19.183]             if (.Platform$OS.type == "windows") {
[13:20:19.183]                 old_names <- names(...future.oldEnvVars)
[13:20:19.183]                 envs <- base::Sys.getenv()
[13:20:19.183]                 names <- names(envs)
[13:20:19.183]                 common <- intersect(names, old_names)
[13:20:19.183]                 added <- setdiff(names, old_names)
[13:20:19.183]                 removed <- setdiff(old_names, names)
[13:20:19.183]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:19.183]                   envs[common]]
[13:20:19.183]                 NAMES <- toupper(changed)
[13:20:19.183]                 args <- list()
[13:20:19.183]                 for (kk in seq_along(NAMES)) {
[13:20:19.183]                   name <- changed[[kk]]
[13:20:19.183]                   NAME <- NAMES[[kk]]
[13:20:19.183]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.183]                     next
[13:20:19.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:19.183]                 }
[13:20:19.183]                 NAMES <- toupper(added)
[13:20:19.183]                 for (kk in seq_along(NAMES)) {
[13:20:19.183]                   name <- added[[kk]]
[13:20:19.183]                   NAME <- NAMES[[kk]]
[13:20:19.183]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.183]                     next
[13:20:19.183]                   args[[name]] <- ""
[13:20:19.183]                 }
[13:20:19.183]                 NAMES <- toupper(removed)
[13:20:19.183]                 for (kk in seq_along(NAMES)) {
[13:20:19.183]                   name <- removed[[kk]]
[13:20:19.183]                   NAME <- NAMES[[kk]]
[13:20:19.183]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:19.183]                     next
[13:20:19.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:19.183]                 }
[13:20:19.183]                 if (length(args) > 0) 
[13:20:19.183]                   base::do.call(base::Sys.setenv, args = args)
[13:20:19.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:19.183]             }
[13:20:19.183]             else {
[13:20:19.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:19.183]             }
[13:20:19.183]             {
[13:20:19.183]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:19.183]                   0L) {
[13:20:19.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:19.183]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:19.183]                   base::options(opts)
[13:20:19.183]                 }
[13:20:19.183]                 {
[13:20:19.183]                   {
[13:20:19.183]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:19.183]                     NULL
[13:20:19.183]                   }
[13:20:19.183]                   options(future.plan = NULL)
[13:20:19.183]                   if (is.na(NA_character_)) 
[13:20:19.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:19.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:19.183]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:19.183]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:19.183]                     envir = parent.frame()) 
[13:20:19.183]                   {
[13:20:19.183]                     if (is.function(workers)) 
[13:20:19.183]                       workers <- workers()
[13:20:19.183]                     workers <- structure(as.integer(workers), 
[13:20:19.183]                       class = class(workers))
[13:20:19.183]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:19.183]                       workers >= 1)
[13:20:19.183]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:19.183]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:19.183]                     }
[13:20:19.183]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:19.183]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:19.183]                       envir = envir)
[13:20:19.183]                     if (!future$lazy) 
[13:20:19.183]                       future <- run(future)
[13:20:19.183]                     invisible(future)
[13:20:19.183]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:19.183]                 }
[13:20:19.183]             }
[13:20:19.183]         }
[13:20:19.183]     })
[13:20:19.183]     if (TRUE) {
[13:20:19.183]         base::sink(type = "output", split = FALSE)
[13:20:19.183]         if (TRUE) {
[13:20:19.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:19.183]         }
[13:20:19.183]         else {
[13:20:19.183]             ...future.result["stdout"] <- base::list(NULL)
[13:20:19.183]         }
[13:20:19.183]         base::close(...future.stdout)
[13:20:19.183]         ...future.stdout <- NULL
[13:20:19.183]     }
[13:20:19.183]     ...future.result$conditions <- ...future.conditions
[13:20:19.183]     ...future.result$finished <- base::Sys.time()
[13:20:19.183]     ...future.result
[13:20:19.183] }
[13:20:19.186] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:20:19.186] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:20:19.187] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:20:19.187] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:20:19.188] MultisessionFuture started
[13:20:19.188] - Launch lazy future ... done
[13:20:19.188] run() for ‘MultisessionFuture’ ... done
[13:20:19.188] result() for ClusterFuture ...
[13:20:19.188] receiveMessageFromWorker() for ClusterFuture ...
[13:20:19.188] - Validating connection of MultisessionFuture
[13:20:19.234] - received message: FutureResult
[13:20:19.234] - Received FutureResult
[13:20:19.234] - Erased future from FutureRegistry
[13:20:19.234] result() for ClusterFuture ...
[13:20:19.234] - result already collected: FutureResult
[13:20:19.234] result() for ClusterFuture ... done
[13:20:19.235] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:19.235] result() for ClusterFuture ... done
[13:20:19.235] result() for ClusterFuture ...
[13:20:19.235] - result already collected: FutureResult
[13:20:19.235] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[13:20:19.236] plan(): Setting new future strategy stack:
[13:20:19.236] List of future strategies:
[13:20:19.236] 1. FutureStrategy:
[13:20:19.236]    - args: function (..., envir = parent.frame())
[13:20:19.236]    - tweaked: FALSE
[13:20:19.236]    - call: future::plan(oplan)
[13:20:19.237] plan(): nbrOfWorkers() = 1
> 
