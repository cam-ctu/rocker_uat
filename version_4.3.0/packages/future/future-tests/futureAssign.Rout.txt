
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:11.802] plan(): Setting new future strategy stack:
[17:42:11.802] List of future strategies:
[17:42:11.802] 1. sequential:
[17:42:11.802]    - args: function (..., envir = parent.frame())
[17:42:11.802]    - tweaked: FALSE
[17:42:11.802]    - call: future::plan("sequential")
[17:42:11.816] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[17:42:11.827] getGlobalsAndPackages() ...
[17:42:11.827] Searching for globals...
[17:42:11.834] - globals found: [2] ‘{’, ‘cat’
[17:42:11.834] Searching for globals ... DONE
[17:42:11.834] Resolving globals: FALSE
[17:42:11.834] 
[17:42:11.834] 
[17:42:11.835] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[17:42:11.836] run() for ‘Future’ ...
[17:42:11.836] - state: ‘created’
[17:42:11.836] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.836] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.837] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.837]   - Field: ‘label’
[17:42:11.837]   - Field: ‘local’
[17:42:11.837]   - Field: ‘owner’
[17:42:11.837]   - Field: ‘envir’
[17:42:11.837]   - Field: ‘packages’
[17:42:11.837]   - Field: ‘gc’
[17:42:11.837]   - Field: ‘conditions’
[17:42:11.837]   - Field: ‘expr’
[17:42:11.837]   - Field: ‘uuid’
[17:42:11.838]   - Field: ‘seed’
[17:42:11.838]   - Field: ‘version’
[17:42:11.838]   - Field: ‘result’
[17:42:11.838]   - Field: ‘asynchronous’
[17:42:11.838]   - Field: ‘calls’
[17:42:11.838]   - Field: ‘globals’
[17:42:11.838]   - Field: ‘stdout’
[17:42:11.838]   - Field: ‘earlySignal’
[17:42:11.838]   - Field: ‘lazy’
[17:42:11.838]   - Field: ‘state’
[17:42:11.838] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.839] - Launch lazy future ...
[17:42:11.839] Packages needed by the future expression (n = 0): <none>
[17:42:11.840] Packages needed by future strategies (n = 0): <none>
[17:42:11.840] {
[17:42:11.840]     {
[17:42:11.840]         {
[17:42:11.840]             ...future.startTime <- base::Sys.time()
[17:42:11.840]             {
[17:42:11.840]                 {
[17:42:11.840]                   {
[17:42:11.840]                     base::local({
[17:42:11.840]                       has_future <- base::requireNamespace("future", 
[17:42:11.840]                         quietly = TRUE)
[17:42:11.840]                       if (has_future) {
[17:42:11.840]                         ns <- base::getNamespace("future")
[17:42:11.840]                         version <- ns[[".package"]][["version"]]
[17:42:11.840]                         if (is.null(version)) 
[17:42:11.840]                           version <- utils::packageVersion("future")
[17:42:11.840]                       }
[17:42:11.840]                       else {
[17:42:11.840]                         version <- NULL
[17:42:11.840]                       }
[17:42:11.840]                       if (!has_future || version < "1.8.0") {
[17:42:11.840]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.840]                           "", base::R.version$version.string), 
[17:42:11.840]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.840]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.840]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.840]                             "release", "version")], collapse = " "), 
[17:42:11.840]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.840]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.840]                           info)
[17:42:11.840]                         info <- base::paste(info, collapse = "; ")
[17:42:11.840]                         if (!has_future) {
[17:42:11.840]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.840]                             info)
[17:42:11.840]                         }
[17:42:11.840]                         else {
[17:42:11.840]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.840]                             info, version)
[17:42:11.840]                         }
[17:42:11.840]                         base::stop(msg)
[17:42:11.840]                       }
[17:42:11.840]                     })
[17:42:11.840]                   }
[17:42:11.840]                   options(future.plan = NULL)
[17:42:11.840]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.840]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.840]                 }
[17:42:11.840]                 ...future.workdir <- getwd()
[17:42:11.840]             }
[17:42:11.840]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.840]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.840]         }
[17:42:11.840]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.840]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.840]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.840]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.840]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.840]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.840]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.840]             base::names(...future.oldOptions))
[17:42:11.840]     }
[17:42:11.840]     if (FALSE) {
[17:42:11.840]     }
[17:42:11.840]     else {
[17:42:11.840]         if (TRUE) {
[17:42:11.840]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.840]                 open = "w")
[17:42:11.840]         }
[17:42:11.840]         else {
[17:42:11.840]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.840]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.840]         }
[17:42:11.840]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.840]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.840]             base::sink(type = "output", split = FALSE)
[17:42:11.840]             base::close(...future.stdout)
[17:42:11.840]         }, add = TRUE)
[17:42:11.840]     }
[17:42:11.840]     ...future.frame <- base::sys.nframe()
[17:42:11.840]     ...future.conditions <- base::list()
[17:42:11.840]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.840]     if (FALSE) {
[17:42:11.840]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.840]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.840]     }
[17:42:11.840]     ...future.result <- base::tryCatch({
[17:42:11.840]         base::withCallingHandlers({
[17:42:11.840]             ...future.value <- base::withVisible(base::local({
[17:42:11.840]                 cat("Future assignment evaluated\n")
[17:42:11.840]                 2
[17:42:11.840]             }))
[17:42:11.840]             future::FutureResult(value = ...future.value$value, 
[17:42:11.840]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.840]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.840]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.840]                     ...future.globalenv.names))
[17:42:11.840]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.840]         }, condition = base::local({
[17:42:11.840]             c <- base::c
[17:42:11.840]             inherits <- base::inherits
[17:42:11.840]             invokeRestart <- base::invokeRestart
[17:42:11.840]             length <- base::length
[17:42:11.840]             list <- base::list
[17:42:11.840]             seq.int <- base::seq.int
[17:42:11.840]             signalCondition <- base::signalCondition
[17:42:11.840]             sys.calls <- base::sys.calls
[17:42:11.840]             `[[` <- base::`[[`
[17:42:11.840]             `+` <- base::`+`
[17:42:11.840]             `<<-` <- base::`<<-`
[17:42:11.840]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.840]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.840]                   3L)]
[17:42:11.840]             }
[17:42:11.840]             function(cond) {
[17:42:11.840]                 is_error <- inherits(cond, "error")
[17:42:11.840]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.840]                   NULL)
[17:42:11.840]                 if (is_error) {
[17:42:11.840]                   sessionInformation <- function() {
[17:42:11.840]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.840]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.840]                       search = base::search(), system = base::Sys.info())
[17:42:11.840]                   }
[17:42:11.840]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.840]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.840]                     cond$call), session = sessionInformation(), 
[17:42:11.840]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.840]                   signalCondition(cond)
[17:42:11.840]                 }
[17:42:11.840]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.840]                 "immediateCondition"))) {
[17:42:11.840]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.840]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.840]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.840]                   if (TRUE && !signal) {
[17:42:11.840]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.840]                     {
[17:42:11.840]                       inherits <- base::inherits
[17:42:11.840]                       invokeRestart <- base::invokeRestart
[17:42:11.840]                       is.null <- base::is.null
[17:42:11.840]                       muffled <- FALSE
[17:42:11.840]                       if (inherits(cond, "message")) {
[17:42:11.840]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.840]                         if (muffled) 
[17:42:11.840]                           invokeRestart("muffleMessage")
[17:42:11.840]                       }
[17:42:11.840]                       else if (inherits(cond, "warning")) {
[17:42:11.840]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.840]                         if (muffled) 
[17:42:11.840]                           invokeRestart("muffleWarning")
[17:42:11.840]                       }
[17:42:11.840]                       else if (inherits(cond, "condition")) {
[17:42:11.840]                         if (!is.null(pattern)) {
[17:42:11.840]                           computeRestarts <- base::computeRestarts
[17:42:11.840]                           grepl <- base::grepl
[17:42:11.840]                           restarts <- computeRestarts(cond)
[17:42:11.840]                           for (restart in restarts) {
[17:42:11.840]                             name <- restart$name
[17:42:11.840]                             if (is.null(name)) 
[17:42:11.840]                               next
[17:42:11.840]                             if (!grepl(pattern, name)) 
[17:42:11.840]                               next
[17:42:11.840]                             invokeRestart(restart)
[17:42:11.840]                             muffled <- TRUE
[17:42:11.840]                             break
[17:42:11.840]                           }
[17:42:11.840]                         }
[17:42:11.840]                       }
[17:42:11.840]                       invisible(muffled)
[17:42:11.840]                     }
[17:42:11.840]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.840]                   }
[17:42:11.840]                 }
[17:42:11.840]                 else {
[17:42:11.840]                   if (TRUE) {
[17:42:11.840]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.840]                     {
[17:42:11.840]                       inherits <- base::inherits
[17:42:11.840]                       invokeRestart <- base::invokeRestart
[17:42:11.840]                       is.null <- base::is.null
[17:42:11.840]                       muffled <- FALSE
[17:42:11.840]                       if (inherits(cond, "message")) {
[17:42:11.840]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.840]                         if (muffled) 
[17:42:11.840]                           invokeRestart("muffleMessage")
[17:42:11.840]                       }
[17:42:11.840]                       else if (inherits(cond, "warning")) {
[17:42:11.840]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.840]                         if (muffled) 
[17:42:11.840]                           invokeRestart("muffleWarning")
[17:42:11.840]                       }
[17:42:11.840]                       else if (inherits(cond, "condition")) {
[17:42:11.840]                         if (!is.null(pattern)) {
[17:42:11.840]                           computeRestarts <- base::computeRestarts
[17:42:11.840]                           grepl <- base::grepl
[17:42:11.840]                           restarts <- computeRestarts(cond)
[17:42:11.840]                           for (restart in restarts) {
[17:42:11.840]                             name <- restart$name
[17:42:11.840]                             if (is.null(name)) 
[17:42:11.840]                               next
[17:42:11.840]                             if (!grepl(pattern, name)) 
[17:42:11.840]                               next
[17:42:11.840]                             invokeRestart(restart)
[17:42:11.840]                             muffled <- TRUE
[17:42:11.840]                             break
[17:42:11.840]                           }
[17:42:11.840]                         }
[17:42:11.840]                       }
[17:42:11.840]                       invisible(muffled)
[17:42:11.840]                     }
[17:42:11.840]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.840]                   }
[17:42:11.840]                 }
[17:42:11.840]             }
[17:42:11.840]         }))
[17:42:11.840]     }, error = function(ex) {
[17:42:11.840]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.840]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.840]                 ...future.rng), started = ...future.startTime, 
[17:42:11.840]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.840]             version = "1.8"), class = "FutureResult")
[17:42:11.840]     }, finally = {
[17:42:11.840]         if (!identical(...future.workdir, getwd())) 
[17:42:11.840]             setwd(...future.workdir)
[17:42:11.840]         {
[17:42:11.840]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.840]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.840]             }
[17:42:11.840]             base::options(...future.oldOptions)
[17:42:11.840]             if (.Platform$OS.type == "windows") {
[17:42:11.840]                 old_names <- names(...future.oldEnvVars)
[17:42:11.840]                 envs <- base::Sys.getenv()
[17:42:11.840]                 names <- names(envs)
[17:42:11.840]                 common <- intersect(names, old_names)
[17:42:11.840]                 added <- setdiff(names, old_names)
[17:42:11.840]                 removed <- setdiff(old_names, names)
[17:42:11.840]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.840]                   envs[common]]
[17:42:11.840]                 NAMES <- toupper(changed)
[17:42:11.840]                 args <- list()
[17:42:11.840]                 for (kk in seq_along(NAMES)) {
[17:42:11.840]                   name <- changed[[kk]]
[17:42:11.840]                   NAME <- NAMES[[kk]]
[17:42:11.840]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.840]                     next
[17:42:11.840]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.840]                 }
[17:42:11.840]                 NAMES <- toupper(added)
[17:42:11.840]                 for (kk in seq_along(NAMES)) {
[17:42:11.840]                   name <- added[[kk]]
[17:42:11.840]                   NAME <- NAMES[[kk]]
[17:42:11.840]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.840]                     next
[17:42:11.840]                   args[[name]] <- ""
[17:42:11.840]                 }
[17:42:11.840]                 NAMES <- toupper(removed)
[17:42:11.840]                 for (kk in seq_along(NAMES)) {
[17:42:11.840]                   name <- removed[[kk]]
[17:42:11.840]                   NAME <- NAMES[[kk]]
[17:42:11.840]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.840]                     next
[17:42:11.840]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.840]                 }
[17:42:11.840]                 if (length(args) > 0) 
[17:42:11.840]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.840]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.840]             }
[17:42:11.840]             else {
[17:42:11.840]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.840]             }
[17:42:11.840]             {
[17:42:11.840]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.840]                   0L) {
[17:42:11.840]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.840]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.840]                   base::options(opts)
[17:42:11.840]                 }
[17:42:11.840]                 {
[17:42:11.840]                   {
[17:42:11.840]                     NULL
[17:42:11.840]                     RNGkind("Mersenne-Twister")
[17:42:11.840]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.840]                       inherits = FALSE)
[17:42:11.840]                   }
[17:42:11.840]                   options(future.plan = NULL)
[17:42:11.840]                   if (is.na(NA_character_)) 
[17:42:11.840]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.840]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.840]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.840]                   {
[17:42:11.840]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.840]                     if (!future$lazy) 
[17:42:11.840]                       future <- run(future)
[17:42:11.840]                     invisible(future)
[17:42:11.840]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.840]                 }
[17:42:11.840]             }
[17:42:11.840]         }
[17:42:11.840]     })
[17:42:11.840]     if (TRUE) {
[17:42:11.840]         base::sink(type = "output", split = FALSE)
[17:42:11.840]         if (TRUE) {
[17:42:11.840]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.840]         }
[17:42:11.840]         else {
[17:42:11.840]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.840]         }
[17:42:11.840]         base::close(...future.stdout)
[17:42:11.840]         ...future.stdout <- NULL
[17:42:11.840]     }
[17:42:11.840]     ...future.result$conditions <- ...future.conditions
[17:42:11.840]     ...future.result$finished <- base::Sys.time()
[17:42:11.840]     ...future.result
[17:42:11.840] }
[17:42:11.842] plan(): Setting new future strategy stack:
[17:42:11.843] List of future strategies:
[17:42:11.843] 1. sequential:
[17:42:11.843]    - args: function (..., envir = parent.frame())
[17:42:11.843]    - tweaked: FALSE
[17:42:11.843]    - call: NULL
[17:42:11.843] plan(): nbrOfWorkers() = 1
[17:42:11.844] plan(): Setting new future strategy stack:
[17:42:11.844] List of future strategies:
[17:42:11.844] 1. sequential:
[17:42:11.844]    - args: function (..., envir = parent.frame())
[17:42:11.844]    - tweaked: FALSE
[17:42:11.844]    - call: future::plan("sequential")
[17:42:11.845] plan(): nbrOfWorkers() = 1
[17:42:11.845] SequentialFuture started (and completed)
[17:42:11.845] - Launch lazy future ... done
[17:42:11.845] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[17:42:11.872] plan(): Setting new future strategy stack:
[17:42:11.872] List of future strategies:
[17:42:11.872] 1. sequential:
[17:42:11.872]    - args: function (..., envir = parent.frame())
[17:42:11.872]    - tweaked: FALSE
[17:42:11.872]    - call: plan(strategy)
[17:42:11.884] plan(): nbrOfWorkers() = 1
[17:42:11.885] getGlobalsAndPackages() ...
[17:42:11.885] Searching for globals...
[17:42:11.885] - globals found: [1] ‘{’
[17:42:11.885] Searching for globals ... DONE
[17:42:11.885] Resolving globals: FALSE
[17:42:11.886] 
[17:42:11.886] 
[17:42:11.886] getGlobalsAndPackages() ... DONE
[17:42:11.886] run() for ‘Future’ ...
[17:42:11.886] - state: ‘created’
[17:42:11.886] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.887] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.887] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.887]   - Field: ‘label’
[17:42:11.887]   - Field: ‘local’
[17:42:11.887]   - Field: ‘owner’
[17:42:11.887]   - Field: ‘envir’
[17:42:11.887]   - Field: ‘packages’
[17:42:11.887]   - Field: ‘gc’
[17:42:11.887]   - Field: ‘conditions’
[17:42:11.888]   - Field: ‘expr’
[17:42:11.888]   - Field: ‘uuid’
[17:42:11.888]   - Field: ‘seed’
[17:42:11.888]   - Field: ‘version’
[17:42:11.888]   - Field: ‘result’
[17:42:11.888]   - Field: ‘asynchronous’
[17:42:11.888]   - Field: ‘calls’
[17:42:11.888]   - Field: ‘globals’
[17:42:11.888]   - Field: ‘stdout’
[17:42:11.888]   - Field: ‘earlySignal’
[17:42:11.888]   - Field: ‘lazy’
[17:42:11.889]   - Field: ‘state’
[17:42:11.889] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.889] - Launch lazy future ...
[17:42:11.889] Packages needed by the future expression (n = 0): <none>
[17:42:11.889] Packages needed by future strategies (n = 0): <none>
[17:42:11.889] {
[17:42:11.889]     {
[17:42:11.889]         {
[17:42:11.889]             ...future.startTime <- base::Sys.time()
[17:42:11.889]             {
[17:42:11.889]                 {
[17:42:11.889]                   {
[17:42:11.889]                     base::local({
[17:42:11.889]                       has_future <- base::requireNamespace("future", 
[17:42:11.889]                         quietly = TRUE)
[17:42:11.889]                       if (has_future) {
[17:42:11.889]                         ns <- base::getNamespace("future")
[17:42:11.889]                         version <- ns[[".package"]][["version"]]
[17:42:11.889]                         if (is.null(version)) 
[17:42:11.889]                           version <- utils::packageVersion("future")
[17:42:11.889]                       }
[17:42:11.889]                       else {
[17:42:11.889]                         version <- NULL
[17:42:11.889]                       }
[17:42:11.889]                       if (!has_future || version < "1.8.0") {
[17:42:11.889]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.889]                           "", base::R.version$version.string), 
[17:42:11.889]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.889]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.889]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.889]                             "release", "version")], collapse = " "), 
[17:42:11.889]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.889]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.889]                           info)
[17:42:11.889]                         info <- base::paste(info, collapse = "; ")
[17:42:11.889]                         if (!has_future) {
[17:42:11.889]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.889]                             info)
[17:42:11.889]                         }
[17:42:11.889]                         else {
[17:42:11.889]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.889]                             info, version)
[17:42:11.889]                         }
[17:42:11.889]                         base::stop(msg)
[17:42:11.889]                       }
[17:42:11.889]                     })
[17:42:11.889]                   }
[17:42:11.889]                   options(future.plan = NULL)
[17:42:11.889]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.889]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.889]                 }
[17:42:11.889]                 ...future.workdir <- getwd()
[17:42:11.889]             }
[17:42:11.889]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.889]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.889]         }
[17:42:11.889]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.889]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.889]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.889]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.889]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.889]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.889]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.889]             base::names(...future.oldOptions))
[17:42:11.889]     }
[17:42:11.889]     if (FALSE) {
[17:42:11.889]     }
[17:42:11.889]     else {
[17:42:11.889]         if (TRUE) {
[17:42:11.889]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.889]                 open = "w")
[17:42:11.889]         }
[17:42:11.889]         else {
[17:42:11.889]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.889]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.889]         }
[17:42:11.889]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.889]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.889]             base::sink(type = "output", split = FALSE)
[17:42:11.889]             base::close(...future.stdout)
[17:42:11.889]         }, add = TRUE)
[17:42:11.889]     }
[17:42:11.889]     ...future.frame <- base::sys.nframe()
[17:42:11.889]     ...future.conditions <- base::list()
[17:42:11.889]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.889]     if (FALSE) {
[17:42:11.889]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.889]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.889]     }
[17:42:11.889]     ...future.result <- base::tryCatch({
[17:42:11.889]         base::withCallingHandlers({
[17:42:11.889]             ...future.value <- base::withVisible(base::local({
[17:42:11.889]                 2
[17:42:11.889]             }))
[17:42:11.889]             future::FutureResult(value = ...future.value$value, 
[17:42:11.889]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.889]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.889]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.889]                     ...future.globalenv.names))
[17:42:11.889]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.889]         }, condition = base::local({
[17:42:11.889]             c <- base::c
[17:42:11.889]             inherits <- base::inherits
[17:42:11.889]             invokeRestart <- base::invokeRestart
[17:42:11.889]             length <- base::length
[17:42:11.889]             list <- base::list
[17:42:11.889]             seq.int <- base::seq.int
[17:42:11.889]             signalCondition <- base::signalCondition
[17:42:11.889]             sys.calls <- base::sys.calls
[17:42:11.889]             `[[` <- base::`[[`
[17:42:11.889]             `+` <- base::`+`
[17:42:11.889]             `<<-` <- base::`<<-`
[17:42:11.889]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.889]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.889]                   3L)]
[17:42:11.889]             }
[17:42:11.889]             function(cond) {
[17:42:11.889]                 is_error <- inherits(cond, "error")
[17:42:11.889]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.889]                   NULL)
[17:42:11.889]                 if (is_error) {
[17:42:11.889]                   sessionInformation <- function() {
[17:42:11.889]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.889]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.889]                       search = base::search(), system = base::Sys.info())
[17:42:11.889]                   }
[17:42:11.889]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.889]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.889]                     cond$call), session = sessionInformation(), 
[17:42:11.889]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.889]                   signalCondition(cond)
[17:42:11.889]                 }
[17:42:11.889]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.889]                 "immediateCondition"))) {
[17:42:11.889]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.889]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.889]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.889]                   if (TRUE && !signal) {
[17:42:11.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.889]                     {
[17:42:11.889]                       inherits <- base::inherits
[17:42:11.889]                       invokeRestart <- base::invokeRestart
[17:42:11.889]                       is.null <- base::is.null
[17:42:11.889]                       muffled <- FALSE
[17:42:11.889]                       if (inherits(cond, "message")) {
[17:42:11.889]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.889]                         if (muffled) 
[17:42:11.889]                           invokeRestart("muffleMessage")
[17:42:11.889]                       }
[17:42:11.889]                       else if (inherits(cond, "warning")) {
[17:42:11.889]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.889]                         if (muffled) 
[17:42:11.889]                           invokeRestart("muffleWarning")
[17:42:11.889]                       }
[17:42:11.889]                       else if (inherits(cond, "condition")) {
[17:42:11.889]                         if (!is.null(pattern)) {
[17:42:11.889]                           computeRestarts <- base::computeRestarts
[17:42:11.889]                           grepl <- base::grepl
[17:42:11.889]                           restarts <- computeRestarts(cond)
[17:42:11.889]                           for (restart in restarts) {
[17:42:11.889]                             name <- restart$name
[17:42:11.889]                             if (is.null(name)) 
[17:42:11.889]                               next
[17:42:11.889]                             if (!grepl(pattern, name)) 
[17:42:11.889]                               next
[17:42:11.889]                             invokeRestart(restart)
[17:42:11.889]                             muffled <- TRUE
[17:42:11.889]                             break
[17:42:11.889]                           }
[17:42:11.889]                         }
[17:42:11.889]                       }
[17:42:11.889]                       invisible(muffled)
[17:42:11.889]                     }
[17:42:11.889]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.889]                   }
[17:42:11.889]                 }
[17:42:11.889]                 else {
[17:42:11.889]                   if (TRUE) {
[17:42:11.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.889]                     {
[17:42:11.889]                       inherits <- base::inherits
[17:42:11.889]                       invokeRestart <- base::invokeRestart
[17:42:11.889]                       is.null <- base::is.null
[17:42:11.889]                       muffled <- FALSE
[17:42:11.889]                       if (inherits(cond, "message")) {
[17:42:11.889]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.889]                         if (muffled) 
[17:42:11.889]                           invokeRestart("muffleMessage")
[17:42:11.889]                       }
[17:42:11.889]                       else if (inherits(cond, "warning")) {
[17:42:11.889]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.889]                         if (muffled) 
[17:42:11.889]                           invokeRestart("muffleWarning")
[17:42:11.889]                       }
[17:42:11.889]                       else if (inherits(cond, "condition")) {
[17:42:11.889]                         if (!is.null(pattern)) {
[17:42:11.889]                           computeRestarts <- base::computeRestarts
[17:42:11.889]                           grepl <- base::grepl
[17:42:11.889]                           restarts <- computeRestarts(cond)
[17:42:11.889]                           for (restart in restarts) {
[17:42:11.889]                             name <- restart$name
[17:42:11.889]                             if (is.null(name)) 
[17:42:11.889]                               next
[17:42:11.889]                             if (!grepl(pattern, name)) 
[17:42:11.889]                               next
[17:42:11.889]                             invokeRestart(restart)
[17:42:11.889]                             muffled <- TRUE
[17:42:11.889]                             break
[17:42:11.889]                           }
[17:42:11.889]                         }
[17:42:11.889]                       }
[17:42:11.889]                       invisible(muffled)
[17:42:11.889]                     }
[17:42:11.889]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.889]                   }
[17:42:11.889]                 }
[17:42:11.889]             }
[17:42:11.889]         }))
[17:42:11.889]     }, error = function(ex) {
[17:42:11.889]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.889]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.889]                 ...future.rng), started = ...future.startTime, 
[17:42:11.889]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.889]             version = "1.8"), class = "FutureResult")
[17:42:11.889]     }, finally = {
[17:42:11.889]         if (!identical(...future.workdir, getwd())) 
[17:42:11.889]             setwd(...future.workdir)
[17:42:11.889]         {
[17:42:11.889]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.889]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.889]             }
[17:42:11.889]             base::options(...future.oldOptions)
[17:42:11.889]             if (.Platform$OS.type == "windows") {
[17:42:11.889]                 old_names <- names(...future.oldEnvVars)
[17:42:11.889]                 envs <- base::Sys.getenv()
[17:42:11.889]                 names <- names(envs)
[17:42:11.889]                 common <- intersect(names, old_names)
[17:42:11.889]                 added <- setdiff(names, old_names)
[17:42:11.889]                 removed <- setdiff(old_names, names)
[17:42:11.889]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.889]                   envs[common]]
[17:42:11.889]                 NAMES <- toupper(changed)
[17:42:11.889]                 args <- list()
[17:42:11.889]                 for (kk in seq_along(NAMES)) {
[17:42:11.889]                   name <- changed[[kk]]
[17:42:11.889]                   NAME <- NAMES[[kk]]
[17:42:11.889]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.889]                     next
[17:42:11.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.889]                 }
[17:42:11.889]                 NAMES <- toupper(added)
[17:42:11.889]                 for (kk in seq_along(NAMES)) {
[17:42:11.889]                   name <- added[[kk]]
[17:42:11.889]                   NAME <- NAMES[[kk]]
[17:42:11.889]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.889]                     next
[17:42:11.889]                   args[[name]] <- ""
[17:42:11.889]                 }
[17:42:11.889]                 NAMES <- toupper(removed)
[17:42:11.889]                 for (kk in seq_along(NAMES)) {
[17:42:11.889]                   name <- removed[[kk]]
[17:42:11.889]                   NAME <- NAMES[[kk]]
[17:42:11.889]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.889]                     next
[17:42:11.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.889]                 }
[17:42:11.889]                 if (length(args) > 0) 
[17:42:11.889]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.889]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.889]             }
[17:42:11.889]             else {
[17:42:11.889]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.889]             }
[17:42:11.889]             {
[17:42:11.889]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.889]                   0L) {
[17:42:11.889]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.889]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.889]                   base::options(opts)
[17:42:11.889]                 }
[17:42:11.889]                 {
[17:42:11.889]                   {
[17:42:11.889]                     NULL
[17:42:11.889]                     RNGkind("Mersenne-Twister")
[17:42:11.889]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.889]                       inherits = FALSE)
[17:42:11.889]                   }
[17:42:11.889]                   options(future.plan = NULL)
[17:42:11.889]                   if (is.na(NA_character_)) 
[17:42:11.889]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.889]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.889]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.889]                   {
[17:42:11.889]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.889]                     if (!future$lazy) 
[17:42:11.889]                       future <- run(future)
[17:42:11.889]                     invisible(future)
[17:42:11.889]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.889]                 }
[17:42:11.889]             }
[17:42:11.889]         }
[17:42:11.889]     })
[17:42:11.889]     if (TRUE) {
[17:42:11.889]         base::sink(type = "output", split = FALSE)
[17:42:11.889]         if (TRUE) {
[17:42:11.889]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.889]         }
[17:42:11.889]         else {
[17:42:11.889]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.889]         }
[17:42:11.889]         base::close(...future.stdout)
[17:42:11.889]         ...future.stdout <- NULL
[17:42:11.889]     }
[17:42:11.889]     ...future.result$conditions <- ...future.conditions
[17:42:11.889]     ...future.result$finished <- base::Sys.time()
[17:42:11.889]     ...future.result
[17:42:11.889] }
[17:42:11.891] plan(): Setting new future strategy stack:
[17:42:11.891] List of future strategies:
[17:42:11.891] 1. sequential:
[17:42:11.891]    - args: function (..., envir = parent.frame())
[17:42:11.891]    - tweaked: FALSE
[17:42:11.891]    - call: NULL
[17:42:11.892] plan(): nbrOfWorkers() = 1
[17:42:11.892] plan(): Setting new future strategy stack:
[17:42:11.892] List of future strategies:
[17:42:11.892] 1. sequential:
[17:42:11.892]    - args: function (..., envir = parent.frame())
[17:42:11.892]    - tweaked: FALSE
[17:42:11.892]    - call: plan(strategy)
[17:42:11.893] plan(): nbrOfWorkers() = 1
[17:42:11.893] SequentialFuture started (and completed)
[17:42:11.893] - Launch lazy future ... done
[17:42:11.893] run() for ‘SequentialFuture’ ... done
[17:42:11.893] getGlobalsAndPackages() ...
[17:42:11.893] Searching for globals...
[17:42:11.894] - globals found: [1] ‘{’
[17:42:11.894] Searching for globals ... DONE
[17:42:11.894] Resolving globals: FALSE
[17:42:11.894] 
[17:42:11.895] 
[17:42:11.895] getGlobalsAndPackages() ... DONE
[17:42:11.895] run() for ‘Future’ ...
[17:42:11.895] - state: ‘created’
[17:42:11.895] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.895] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.896]   - Field: ‘label’
[17:42:11.896]   - Field: ‘local’
[17:42:11.896]   - Field: ‘owner’
[17:42:11.896]   - Field: ‘envir’
[17:42:11.896]   - Field: ‘packages’
[17:42:11.896]   - Field: ‘gc’
[17:42:11.896]   - Field: ‘conditions’
[17:42:11.896]   - Field: ‘expr’
[17:42:11.896]   - Field: ‘uuid’
[17:42:11.896]   - Field: ‘seed’
[17:42:11.897]   - Field: ‘version’
[17:42:11.897]   - Field: ‘result’
[17:42:11.897]   - Field: ‘asynchronous’
[17:42:11.897]   - Field: ‘calls’
[17:42:11.897]   - Field: ‘globals’
[17:42:11.897]   - Field: ‘stdout’
[17:42:11.897]   - Field: ‘earlySignal’
[17:42:11.897]   - Field: ‘lazy’
[17:42:11.897]   - Field: ‘state’
[17:42:11.897] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.898] - Launch lazy future ...
[17:42:11.898] Packages needed by the future expression (n = 0): <none>
[17:42:11.898] Packages needed by future strategies (n = 0): <none>
[17:42:11.898] {
[17:42:11.898]     {
[17:42:11.898]         {
[17:42:11.898]             ...future.startTime <- base::Sys.time()
[17:42:11.898]             {
[17:42:11.898]                 {
[17:42:11.898]                   {
[17:42:11.898]                     base::local({
[17:42:11.898]                       has_future <- base::requireNamespace("future", 
[17:42:11.898]                         quietly = TRUE)
[17:42:11.898]                       if (has_future) {
[17:42:11.898]                         ns <- base::getNamespace("future")
[17:42:11.898]                         version <- ns[[".package"]][["version"]]
[17:42:11.898]                         if (is.null(version)) 
[17:42:11.898]                           version <- utils::packageVersion("future")
[17:42:11.898]                       }
[17:42:11.898]                       else {
[17:42:11.898]                         version <- NULL
[17:42:11.898]                       }
[17:42:11.898]                       if (!has_future || version < "1.8.0") {
[17:42:11.898]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.898]                           "", base::R.version$version.string), 
[17:42:11.898]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.898]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.898]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.898]                             "release", "version")], collapse = " "), 
[17:42:11.898]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.898]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.898]                           info)
[17:42:11.898]                         info <- base::paste(info, collapse = "; ")
[17:42:11.898]                         if (!has_future) {
[17:42:11.898]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.898]                             info)
[17:42:11.898]                         }
[17:42:11.898]                         else {
[17:42:11.898]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.898]                             info, version)
[17:42:11.898]                         }
[17:42:11.898]                         base::stop(msg)
[17:42:11.898]                       }
[17:42:11.898]                     })
[17:42:11.898]                   }
[17:42:11.898]                   options(future.plan = NULL)
[17:42:11.898]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.898]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.898]                 }
[17:42:11.898]                 ...future.workdir <- getwd()
[17:42:11.898]             }
[17:42:11.898]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.898]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.898]         }
[17:42:11.898]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.898]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.898]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.898]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.898]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.898]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.898]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.898]             base::names(...future.oldOptions))
[17:42:11.898]     }
[17:42:11.898]     if (FALSE) {
[17:42:11.898]     }
[17:42:11.898]     else {
[17:42:11.898]         if (TRUE) {
[17:42:11.898]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.898]                 open = "w")
[17:42:11.898]         }
[17:42:11.898]         else {
[17:42:11.898]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.898]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.898]         }
[17:42:11.898]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.898]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.898]             base::sink(type = "output", split = FALSE)
[17:42:11.898]             base::close(...future.stdout)
[17:42:11.898]         }, add = TRUE)
[17:42:11.898]     }
[17:42:11.898]     ...future.frame <- base::sys.nframe()
[17:42:11.898]     ...future.conditions <- base::list()
[17:42:11.898]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.898]     if (FALSE) {
[17:42:11.898]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.898]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.898]     }
[17:42:11.898]     ...future.result <- base::tryCatch({
[17:42:11.898]         base::withCallingHandlers({
[17:42:11.898]             ...future.value <- base::withVisible(base::local({
[17:42:11.898]                 4
[17:42:11.898]             }))
[17:42:11.898]             future::FutureResult(value = ...future.value$value, 
[17:42:11.898]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.898]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.898]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.898]                     ...future.globalenv.names))
[17:42:11.898]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.898]         }, condition = base::local({
[17:42:11.898]             c <- base::c
[17:42:11.898]             inherits <- base::inherits
[17:42:11.898]             invokeRestart <- base::invokeRestart
[17:42:11.898]             length <- base::length
[17:42:11.898]             list <- base::list
[17:42:11.898]             seq.int <- base::seq.int
[17:42:11.898]             signalCondition <- base::signalCondition
[17:42:11.898]             sys.calls <- base::sys.calls
[17:42:11.898]             `[[` <- base::`[[`
[17:42:11.898]             `+` <- base::`+`
[17:42:11.898]             `<<-` <- base::`<<-`
[17:42:11.898]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.898]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.898]                   3L)]
[17:42:11.898]             }
[17:42:11.898]             function(cond) {
[17:42:11.898]                 is_error <- inherits(cond, "error")
[17:42:11.898]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.898]                   NULL)
[17:42:11.898]                 if (is_error) {
[17:42:11.898]                   sessionInformation <- function() {
[17:42:11.898]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.898]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.898]                       search = base::search(), system = base::Sys.info())
[17:42:11.898]                   }
[17:42:11.898]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.898]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.898]                     cond$call), session = sessionInformation(), 
[17:42:11.898]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.898]                   signalCondition(cond)
[17:42:11.898]                 }
[17:42:11.898]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.898]                 "immediateCondition"))) {
[17:42:11.898]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.898]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.898]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.898]                   if (TRUE && !signal) {
[17:42:11.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.898]                     {
[17:42:11.898]                       inherits <- base::inherits
[17:42:11.898]                       invokeRestart <- base::invokeRestart
[17:42:11.898]                       is.null <- base::is.null
[17:42:11.898]                       muffled <- FALSE
[17:42:11.898]                       if (inherits(cond, "message")) {
[17:42:11.898]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.898]                         if (muffled) 
[17:42:11.898]                           invokeRestart("muffleMessage")
[17:42:11.898]                       }
[17:42:11.898]                       else if (inherits(cond, "warning")) {
[17:42:11.898]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.898]                         if (muffled) 
[17:42:11.898]                           invokeRestart("muffleWarning")
[17:42:11.898]                       }
[17:42:11.898]                       else if (inherits(cond, "condition")) {
[17:42:11.898]                         if (!is.null(pattern)) {
[17:42:11.898]                           computeRestarts <- base::computeRestarts
[17:42:11.898]                           grepl <- base::grepl
[17:42:11.898]                           restarts <- computeRestarts(cond)
[17:42:11.898]                           for (restart in restarts) {
[17:42:11.898]                             name <- restart$name
[17:42:11.898]                             if (is.null(name)) 
[17:42:11.898]                               next
[17:42:11.898]                             if (!grepl(pattern, name)) 
[17:42:11.898]                               next
[17:42:11.898]                             invokeRestart(restart)
[17:42:11.898]                             muffled <- TRUE
[17:42:11.898]                             break
[17:42:11.898]                           }
[17:42:11.898]                         }
[17:42:11.898]                       }
[17:42:11.898]                       invisible(muffled)
[17:42:11.898]                     }
[17:42:11.898]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.898]                   }
[17:42:11.898]                 }
[17:42:11.898]                 else {
[17:42:11.898]                   if (TRUE) {
[17:42:11.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.898]                     {
[17:42:11.898]                       inherits <- base::inherits
[17:42:11.898]                       invokeRestart <- base::invokeRestart
[17:42:11.898]                       is.null <- base::is.null
[17:42:11.898]                       muffled <- FALSE
[17:42:11.898]                       if (inherits(cond, "message")) {
[17:42:11.898]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.898]                         if (muffled) 
[17:42:11.898]                           invokeRestart("muffleMessage")
[17:42:11.898]                       }
[17:42:11.898]                       else if (inherits(cond, "warning")) {
[17:42:11.898]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.898]                         if (muffled) 
[17:42:11.898]                           invokeRestart("muffleWarning")
[17:42:11.898]                       }
[17:42:11.898]                       else if (inherits(cond, "condition")) {
[17:42:11.898]                         if (!is.null(pattern)) {
[17:42:11.898]                           computeRestarts <- base::computeRestarts
[17:42:11.898]                           grepl <- base::grepl
[17:42:11.898]                           restarts <- computeRestarts(cond)
[17:42:11.898]                           for (restart in restarts) {
[17:42:11.898]                             name <- restart$name
[17:42:11.898]                             if (is.null(name)) 
[17:42:11.898]                               next
[17:42:11.898]                             if (!grepl(pattern, name)) 
[17:42:11.898]                               next
[17:42:11.898]                             invokeRestart(restart)
[17:42:11.898]                             muffled <- TRUE
[17:42:11.898]                             break
[17:42:11.898]                           }
[17:42:11.898]                         }
[17:42:11.898]                       }
[17:42:11.898]                       invisible(muffled)
[17:42:11.898]                     }
[17:42:11.898]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.898]                   }
[17:42:11.898]                 }
[17:42:11.898]             }
[17:42:11.898]         }))
[17:42:11.898]     }, error = function(ex) {
[17:42:11.898]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.898]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.898]                 ...future.rng), started = ...future.startTime, 
[17:42:11.898]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.898]             version = "1.8"), class = "FutureResult")
[17:42:11.898]     }, finally = {
[17:42:11.898]         if (!identical(...future.workdir, getwd())) 
[17:42:11.898]             setwd(...future.workdir)
[17:42:11.898]         {
[17:42:11.898]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.898]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.898]             }
[17:42:11.898]             base::options(...future.oldOptions)
[17:42:11.898]             if (.Platform$OS.type == "windows") {
[17:42:11.898]                 old_names <- names(...future.oldEnvVars)
[17:42:11.898]                 envs <- base::Sys.getenv()
[17:42:11.898]                 names <- names(envs)
[17:42:11.898]                 common <- intersect(names, old_names)
[17:42:11.898]                 added <- setdiff(names, old_names)
[17:42:11.898]                 removed <- setdiff(old_names, names)
[17:42:11.898]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.898]                   envs[common]]
[17:42:11.898]                 NAMES <- toupper(changed)
[17:42:11.898]                 args <- list()
[17:42:11.898]                 for (kk in seq_along(NAMES)) {
[17:42:11.898]                   name <- changed[[kk]]
[17:42:11.898]                   NAME <- NAMES[[kk]]
[17:42:11.898]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.898]                     next
[17:42:11.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.898]                 }
[17:42:11.898]                 NAMES <- toupper(added)
[17:42:11.898]                 for (kk in seq_along(NAMES)) {
[17:42:11.898]                   name <- added[[kk]]
[17:42:11.898]                   NAME <- NAMES[[kk]]
[17:42:11.898]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.898]                     next
[17:42:11.898]                   args[[name]] <- ""
[17:42:11.898]                 }
[17:42:11.898]                 NAMES <- toupper(removed)
[17:42:11.898]                 for (kk in seq_along(NAMES)) {
[17:42:11.898]                   name <- removed[[kk]]
[17:42:11.898]                   NAME <- NAMES[[kk]]
[17:42:11.898]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.898]                     next
[17:42:11.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.898]                 }
[17:42:11.898]                 if (length(args) > 0) 
[17:42:11.898]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.898]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.898]             }
[17:42:11.898]             else {
[17:42:11.898]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.898]             }
[17:42:11.898]             {
[17:42:11.898]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.898]                   0L) {
[17:42:11.898]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.898]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.898]                   base::options(opts)
[17:42:11.898]                 }
[17:42:11.898]                 {
[17:42:11.898]                   {
[17:42:11.898]                     NULL
[17:42:11.898]                     RNGkind("Mersenne-Twister")
[17:42:11.898]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.898]                       inherits = FALSE)
[17:42:11.898]                   }
[17:42:11.898]                   options(future.plan = NULL)
[17:42:11.898]                   if (is.na(NA_character_)) 
[17:42:11.898]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.898]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.898]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.898]                   {
[17:42:11.898]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.898]                     if (!future$lazy) 
[17:42:11.898]                       future <- run(future)
[17:42:11.898]                     invisible(future)
[17:42:11.898]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.898]                 }
[17:42:11.898]             }
[17:42:11.898]         }
[17:42:11.898]     })
[17:42:11.898]     if (TRUE) {
[17:42:11.898]         base::sink(type = "output", split = FALSE)
[17:42:11.898]         if (TRUE) {
[17:42:11.898]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.898]         }
[17:42:11.898]         else {
[17:42:11.898]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.898]         }
[17:42:11.898]         base::close(...future.stdout)
[17:42:11.898]         ...future.stdout <- NULL
[17:42:11.898]     }
[17:42:11.898]     ...future.result$conditions <- ...future.conditions
[17:42:11.898]     ...future.result$finished <- base::Sys.time()
[17:42:11.898]     ...future.result
[17:42:11.898] }
[17:42:11.900] plan(): Setting new future strategy stack:
[17:42:11.900] List of future strategies:
[17:42:11.900] 1. sequential:
[17:42:11.900]    - args: function (..., envir = parent.frame())
[17:42:11.900]    - tweaked: FALSE
[17:42:11.900]    - call: NULL
[17:42:11.900] plan(): nbrOfWorkers() = 1
[17:42:11.901] plan(): Setting new future strategy stack:
[17:42:11.901] List of future strategies:
[17:42:11.901] 1. sequential:
[17:42:11.901]    - args: function (..., envir = parent.frame())
[17:42:11.901]    - tweaked: FALSE
[17:42:11.901]    - call: plan(strategy)
[17:42:11.901] plan(): nbrOfWorkers() = 1
[17:42:11.902] SequentialFuture started (and completed)
[17:42:11.902] - Launch lazy future ... done
[17:42:11.902] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[17:42:11.902] getGlobalsAndPackages() ...
[17:42:11.902] Searching for globals...
[17:42:11.904] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:11.904] Searching for globals ... DONE
[17:42:11.904] Resolving globals: FALSE
[17:42:11.905] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:11.906] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:11.906] - globals: [1] ‘a’
[17:42:11.906] 
[17:42:11.906] getGlobalsAndPackages() ... DONE
[17:42:11.906] run() for ‘Future’ ...
[17:42:11.906] - state: ‘created’
[17:42:11.907] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.907] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.907] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.907]   - Field: ‘label’
[17:42:11.907]   - Field: ‘local’
[17:42:11.907]   - Field: ‘owner’
[17:42:11.907]   - Field: ‘envir’
[17:42:11.907]   - Field: ‘packages’
[17:42:11.908]   - Field: ‘gc’
[17:42:11.908]   - Field: ‘conditions’
[17:42:11.908]   - Field: ‘expr’
[17:42:11.908]   - Field: ‘uuid’
[17:42:11.908]   - Field: ‘seed’
[17:42:11.908]   - Field: ‘version’
[17:42:11.908]   - Field: ‘result’
[17:42:11.908]   - Field: ‘asynchronous’
[17:42:11.908]   - Field: ‘calls’
[17:42:11.908]   - Field: ‘globals’
[17:42:11.908]   - Field: ‘stdout’
[17:42:11.909]   - Field: ‘earlySignal’
[17:42:11.909]   - Field: ‘lazy’
[17:42:11.909]   - Field: ‘state’
[17:42:11.909] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.909] - Launch lazy future ...
[17:42:11.909] Packages needed by the future expression (n = 0): <none>
[17:42:11.909] Packages needed by future strategies (n = 0): <none>
[17:42:11.910] {
[17:42:11.910]     {
[17:42:11.910]         {
[17:42:11.910]             ...future.startTime <- base::Sys.time()
[17:42:11.910]             {
[17:42:11.910]                 {
[17:42:11.910]                   {
[17:42:11.910]                     base::local({
[17:42:11.910]                       has_future <- base::requireNamespace("future", 
[17:42:11.910]                         quietly = TRUE)
[17:42:11.910]                       if (has_future) {
[17:42:11.910]                         ns <- base::getNamespace("future")
[17:42:11.910]                         version <- ns[[".package"]][["version"]]
[17:42:11.910]                         if (is.null(version)) 
[17:42:11.910]                           version <- utils::packageVersion("future")
[17:42:11.910]                       }
[17:42:11.910]                       else {
[17:42:11.910]                         version <- NULL
[17:42:11.910]                       }
[17:42:11.910]                       if (!has_future || version < "1.8.0") {
[17:42:11.910]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.910]                           "", base::R.version$version.string), 
[17:42:11.910]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.910]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.910]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.910]                             "release", "version")], collapse = " "), 
[17:42:11.910]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.910]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.910]                           info)
[17:42:11.910]                         info <- base::paste(info, collapse = "; ")
[17:42:11.910]                         if (!has_future) {
[17:42:11.910]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.910]                             info)
[17:42:11.910]                         }
[17:42:11.910]                         else {
[17:42:11.910]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.910]                             info, version)
[17:42:11.910]                         }
[17:42:11.910]                         base::stop(msg)
[17:42:11.910]                       }
[17:42:11.910]                     })
[17:42:11.910]                   }
[17:42:11.910]                   options(future.plan = NULL)
[17:42:11.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.910]                 }
[17:42:11.910]                 ...future.workdir <- getwd()
[17:42:11.910]             }
[17:42:11.910]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.910]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.910]         }
[17:42:11.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.910]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.910]             base::names(...future.oldOptions))
[17:42:11.910]     }
[17:42:11.910]     if (FALSE) {
[17:42:11.910]     }
[17:42:11.910]     else {
[17:42:11.910]         if (TRUE) {
[17:42:11.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.910]                 open = "w")
[17:42:11.910]         }
[17:42:11.910]         else {
[17:42:11.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.910]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.910]         }
[17:42:11.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.910]             base::sink(type = "output", split = FALSE)
[17:42:11.910]             base::close(...future.stdout)
[17:42:11.910]         }, add = TRUE)
[17:42:11.910]     }
[17:42:11.910]     ...future.frame <- base::sys.nframe()
[17:42:11.910]     ...future.conditions <- base::list()
[17:42:11.910]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.910]     if (FALSE) {
[17:42:11.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.910]     }
[17:42:11.910]     ...future.result <- base::tryCatch({
[17:42:11.910]         base::withCallingHandlers({
[17:42:11.910]             ...future.value <- base::withVisible(base::local({
[17:42:11.910]                 2 * a
[17:42:11.910]             }))
[17:42:11.910]             future::FutureResult(value = ...future.value$value, 
[17:42:11.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.910]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.910]                     ...future.globalenv.names))
[17:42:11.910]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.910]         }, condition = base::local({
[17:42:11.910]             c <- base::c
[17:42:11.910]             inherits <- base::inherits
[17:42:11.910]             invokeRestart <- base::invokeRestart
[17:42:11.910]             length <- base::length
[17:42:11.910]             list <- base::list
[17:42:11.910]             seq.int <- base::seq.int
[17:42:11.910]             signalCondition <- base::signalCondition
[17:42:11.910]             sys.calls <- base::sys.calls
[17:42:11.910]             `[[` <- base::`[[`
[17:42:11.910]             `+` <- base::`+`
[17:42:11.910]             `<<-` <- base::`<<-`
[17:42:11.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.910]                   3L)]
[17:42:11.910]             }
[17:42:11.910]             function(cond) {
[17:42:11.910]                 is_error <- inherits(cond, "error")
[17:42:11.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.910]                   NULL)
[17:42:11.910]                 if (is_error) {
[17:42:11.910]                   sessionInformation <- function() {
[17:42:11.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.910]                       search = base::search(), system = base::Sys.info())
[17:42:11.910]                   }
[17:42:11.910]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.910]                     cond$call), session = sessionInformation(), 
[17:42:11.910]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.910]                   signalCondition(cond)
[17:42:11.910]                 }
[17:42:11.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.910]                 "immediateCondition"))) {
[17:42:11.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.910]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.910]                   if (TRUE && !signal) {
[17:42:11.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.910]                     {
[17:42:11.910]                       inherits <- base::inherits
[17:42:11.910]                       invokeRestart <- base::invokeRestart
[17:42:11.910]                       is.null <- base::is.null
[17:42:11.910]                       muffled <- FALSE
[17:42:11.910]                       if (inherits(cond, "message")) {
[17:42:11.910]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.910]                         if (muffled) 
[17:42:11.910]                           invokeRestart("muffleMessage")
[17:42:11.910]                       }
[17:42:11.910]                       else if (inherits(cond, "warning")) {
[17:42:11.910]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.910]                         if (muffled) 
[17:42:11.910]                           invokeRestart("muffleWarning")
[17:42:11.910]                       }
[17:42:11.910]                       else if (inherits(cond, "condition")) {
[17:42:11.910]                         if (!is.null(pattern)) {
[17:42:11.910]                           computeRestarts <- base::computeRestarts
[17:42:11.910]                           grepl <- base::grepl
[17:42:11.910]                           restarts <- computeRestarts(cond)
[17:42:11.910]                           for (restart in restarts) {
[17:42:11.910]                             name <- restart$name
[17:42:11.910]                             if (is.null(name)) 
[17:42:11.910]                               next
[17:42:11.910]                             if (!grepl(pattern, name)) 
[17:42:11.910]                               next
[17:42:11.910]                             invokeRestart(restart)
[17:42:11.910]                             muffled <- TRUE
[17:42:11.910]                             break
[17:42:11.910]                           }
[17:42:11.910]                         }
[17:42:11.910]                       }
[17:42:11.910]                       invisible(muffled)
[17:42:11.910]                     }
[17:42:11.910]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.910]                   }
[17:42:11.910]                 }
[17:42:11.910]                 else {
[17:42:11.910]                   if (TRUE) {
[17:42:11.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.910]                     {
[17:42:11.910]                       inherits <- base::inherits
[17:42:11.910]                       invokeRestart <- base::invokeRestart
[17:42:11.910]                       is.null <- base::is.null
[17:42:11.910]                       muffled <- FALSE
[17:42:11.910]                       if (inherits(cond, "message")) {
[17:42:11.910]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.910]                         if (muffled) 
[17:42:11.910]                           invokeRestart("muffleMessage")
[17:42:11.910]                       }
[17:42:11.910]                       else if (inherits(cond, "warning")) {
[17:42:11.910]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.910]                         if (muffled) 
[17:42:11.910]                           invokeRestart("muffleWarning")
[17:42:11.910]                       }
[17:42:11.910]                       else if (inherits(cond, "condition")) {
[17:42:11.910]                         if (!is.null(pattern)) {
[17:42:11.910]                           computeRestarts <- base::computeRestarts
[17:42:11.910]                           grepl <- base::grepl
[17:42:11.910]                           restarts <- computeRestarts(cond)
[17:42:11.910]                           for (restart in restarts) {
[17:42:11.910]                             name <- restart$name
[17:42:11.910]                             if (is.null(name)) 
[17:42:11.910]                               next
[17:42:11.910]                             if (!grepl(pattern, name)) 
[17:42:11.910]                               next
[17:42:11.910]                             invokeRestart(restart)
[17:42:11.910]                             muffled <- TRUE
[17:42:11.910]                             break
[17:42:11.910]                           }
[17:42:11.910]                         }
[17:42:11.910]                       }
[17:42:11.910]                       invisible(muffled)
[17:42:11.910]                     }
[17:42:11.910]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.910]                   }
[17:42:11.910]                 }
[17:42:11.910]             }
[17:42:11.910]         }))
[17:42:11.910]     }, error = function(ex) {
[17:42:11.910]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.910]                 ...future.rng), started = ...future.startTime, 
[17:42:11.910]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.910]             version = "1.8"), class = "FutureResult")
[17:42:11.910]     }, finally = {
[17:42:11.910]         if (!identical(...future.workdir, getwd())) 
[17:42:11.910]             setwd(...future.workdir)
[17:42:11.910]         {
[17:42:11.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.910]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.910]             }
[17:42:11.910]             base::options(...future.oldOptions)
[17:42:11.910]             if (.Platform$OS.type == "windows") {
[17:42:11.910]                 old_names <- names(...future.oldEnvVars)
[17:42:11.910]                 envs <- base::Sys.getenv()
[17:42:11.910]                 names <- names(envs)
[17:42:11.910]                 common <- intersect(names, old_names)
[17:42:11.910]                 added <- setdiff(names, old_names)
[17:42:11.910]                 removed <- setdiff(old_names, names)
[17:42:11.910]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.910]                   envs[common]]
[17:42:11.910]                 NAMES <- toupper(changed)
[17:42:11.910]                 args <- list()
[17:42:11.910]                 for (kk in seq_along(NAMES)) {
[17:42:11.910]                   name <- changed[[kk]]
[17:42:11.910]                   NAME <- NAMES[[kk]]
[17:42:11.910]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.910]                     next
[17:42:11.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.910]                 }
[17:42:11.910]                 NAMES <- toupper(added)
[17:42:11.910]                 for (kk in seq_along(NAMES)) {
[17:42:11.910]                   name <- added[[kk]]
[17:42:11.910]                   NAME <- NAMES[[kk]]
[17:42:11.910]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.910]                     next
[17:42:11.910]                   args[[name]] <- ""
[17:42:11.910]                 }
[17:42:11.910]                 NAMES <- toupper(removed)
[17:42:11.910]                 for (kk in seq_along(NAMES)) {
[17:42:11.910]                   name <- removed[[kk]]
[17:42:11.910]                   NAME <- NAMES[[kk]]
[17:42:11.910]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.910]                     next
[17:42:11.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.910]                 }
[17:42:11.910]                 if (length(args) > 0) 
[17:42:11.910]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.910]             }
[17:42:11.910]             else {
[17:42:11.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.910]             }
[17:42:11.910]             {
[17:42:11.910]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.910]                   0L) {
[17:42:11.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.910]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.910]                   base::options(opts)
[17:42:11.910]                 }
[17:42:11.910]                 {
[17:42:11.910]                   {
[17:42:11.910]                     NULL
[17:42:11.910]                     RNGkind("Mersenne-Twister")
[17:42:11.910]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.910]                       inherits = FALSE)
[17:42:11.910]                   }
[17:42:11.910]                   options(future.plan = NULL)
[17:42:11.910]                   if (is.na(NA_character_)) 
[17:42:11.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.910]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.910]                   {
[17:42:11.910]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.910]                     if (!future$lazy) 
[17:42:11.910]                       future <- run(future)
[17:42:11.910]                     invisible(future)
[17:42:11.910]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.910]                 }
[17:42:11.910]             }
[17:42:11.910]         }
[17:42:11.910]     })
[17:42:11.910]     if (TRUE) {
[17:42:11.910]         base::sink(type = "output", split = FALSE)
[17:42:11.910]         if (TRUE) {
[17:42:11.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.910]         }
[17:42:11.910]         else {
[17:42:11.910]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.910]         }
[17:42:11.910]         base::close(...future.stdout)
[17:42:11.910]         ...future.stdout <- NULL
[17:42:11.910]     }
[17:42:11.910]     ...future.result$conditions <- ...future.conditions
[17:42:11.910]     ...future.result$finished <- base::Sys.time()
[17:42:11.910]     ...future.result
[17:42:11.910] }
[17:42:11.911] assign_globals() ...
[17:42:11.911] List of 1
[17:42:11.911]  $ a: num 1
[17:42:11.911]  - attr(*, "where")=List of 1
[17:42:11.911]   ..$ a:<environment: R_EmptyEnv> 
[17:42:11.911]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:11.911]  - attr(*, "resolved")= logi FALSE
[17:42:11.911]  - attr(*, "total_size")= num 56
[17:42:11.911]  - attr(*, "already-done")= logi TRUE
[17:42:11.916] - copied ‘a’ to environment
[17:42:11.916] assign_globals() ... done
[17:42:11.916] plan(): Setting new future strategy stack:
[17:42:11.917] List of future strategies:
[17:42:11.917] 1. sequential:
[17:42:11.917]    - args: function (..., envir = parent.frame())
[17:42:11.917]    - tweaked: FALSE
[17:42:11.917]    - call: NULL
[17:42:11.917] plan(): nbrOfWorkers() = 1
[17:42:11.918] plan(): Setting new future strategy stack:
[17:42:11.918] List of future strategies:
[17:42:11.918] 1. sequential:
[17:42:11.918]    - args: function (..., envir = parent.frame())
[17:42:11.918]    - tweaked: FALSE
[17:42:11.918]    - call: plan(strategy)
[17:42:11.918] plan(): nbrOfWorkers() = 1
[17:42:11.918] SequentialFuture started (and completed)
[17:42:11.918] - Launch lazy future ... done
[17:42:11.918] run() for ‘SequentialFuture’ ... done
[17:42:11.919] getGlobalsAndPackages() ...
[17:42:11.919] Searching for globals...
[17:42:11.920] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:11.920] Searching for globals ... DONE
[17:42:11.920] Resolving globals: FALSE
[17:42:11.920] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:11.921] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:11.921] - globals: [1] ‘a’
[17:42:11.921] 
[17:42:11.921] getGlobalsAndPackages() ... DONE
[17:42:11.921] run() for ‘Future’ ...
[17:42:11.921] - state: ‘created’
[17:42:11.922] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.922] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.922] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.922]   - Field: ‘label’
[17:42:11.922]   - Field: ‘local’
[17:42:11.922]   - Field: ‘owner’
[17:42:11.922]   - Field: ‘envir’
[17:42:11.922]   - Field: ‘packages’
[17:42:11.922]   - Field: ‘gc’
[17:42:11.923]   - Field: ‘conditions’
[17:42:11.923]   - Field: ‘expr’
[17:42:11.923]   - Field: ‘uuid’
[17:42:11.923]   - Field: ‘seed’
[17:42:11.923]   - Field: ‘version’
[17:42:11.923]   - Field: ‘result’
[17:42:11.923]   - Field: ‘asynchronous’
[17:42:11.923]   - Field: ‘calls’
[17:42:11.923]   - Field: ‘globals’
[17:42:11.923]   - Field: ‘stdout’
[17:42:11.923]   - Field: ‘earlySignal’
[17:42:11.924]   - Field: ‘lazy’
[17:42:11.924]   - Field: ‘state’
[17:42:11.924] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.924] - Launch lazy future ...
[17:42:11.924] Packages needed by the future expression (n = 0): <none>
[17:42:11.924] Packages needed by future strategies (n = 0): <none>
[17:42:11.925] {
[17:42:11.925]     {
[17:42:11.925]         {
[17:42:11.925]             ...future.startTime <- base::Sys.time()
[17:42:11.925]             {
[17:42:11.925]                 {
[17:42:11.925]                   {
[17:42:11.925]                     base::local({
[17:42:11.925]                       has_future <- base::requireNamespace("future", 
[17:42:11.925]                         quietly = TRUE)
[17:42:11.925]                       if (has_future) {
[17:42:11.925]                         ns <- base::getNamespace("future")
[17:42:11.925]                         version <- ns[[".package"]][["version"]]
[17:42:11.925]                         if (is.null(version)) 
[17:42:11.925]                           version <- utils::packageVersion("future")
[17:42:11.925]                       }
[17:42:11.925]                       else {
[17:42:11.925]                         version <- NULL
[17:42:11.925]                       }
[17:42:11.925]                       if (!has_future || version < "1.8.0") {
[17:42:11.925]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.925]                           "", base::R.version$version.string), 
[17:42:11.925]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.925]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.925]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.925]                             "release", "version")], collapse = " "), 
[17:42:11.925]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.925]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.925]                           info)
[17:42:11.925]                         info <- base::paste(info, collapse = "; ")
[17:42:11.925]                         if (!has_future) {
[17:42:11.925]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.925]                             info)
[17:42:11.925]                         }
[17:42:11.925]                         else {
[17:42:11.925]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.925]                             info, version)
[17:42:11.925]                         }
[17:42:11.925]                         base::stop(msg)
[17:42:11.925]                       }
[17:42:11.925]                     })
[17:42:11.925]                   }
[17:42:11.925]                   options(future.plan = NULL)
[17:42:11.925]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.925]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.925]                 }
[17:42:11.925]                 ...future.workdir <- getwd()
[17:42:11.925]             }
[17:42:11.925]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.925]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.925]         }
[17:42:11.925]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.925]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.925]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.925]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.925]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.925]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.925]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.925]             base::names(...future.oldOptions))
[17:42:11.925]     }
[17:42:11.925]     if (FALSE) {
[17:42:11.925]     }
[17:42:11.925]     else {
[17:42:11.925]         if (TRUE) {
[17:42:11.925]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.925]                 open = "w")
[17:42:11.925]         }
[17:42:11.925]         else {
[17:42:11.925]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.925]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.925]         }
[17:42:11.925]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.925]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.925]             base::sink(type = "output", split = FALSE)
[17:42:11.925]             base::close(...future.stdout)
[17:42:11.925]         }, add = TRUE)
[17:42:11.925]     }
[17:42:11.925]     ...future.frame <- base::sys.nframe()
[17:42:11.925]     ...future.conditions <- base::list()
[17:42:11.925]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.925]     if (FALSE) {
[17:42:11.925]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.925]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.925]     }
[17:42:11.925]     ...future.result <- base::tryCatch({
[17:42:11.925]         base::withCallingHandlers({
[17:42:11.925]             ...future.value <- base::withVisible(base::local({
[17:42:11.925]                 2 * a
[17:42:11.925]             }))
[17:42:11.925]             future::FutureResult(value = ...future.value$value, 
[17:42:11.925]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.925]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.925]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.925]                     ...future.globalenv.names))
[17:42:11.925]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.925]         }, condition = base::local({
[17:42:11.925]             c <- base::c
[17:42:11.925]             inherits <- base::inherits
[17:42:11.925]             invokeRestart <- base::invokeRestart
[17:42:11.925]             length <- base::length
[17:42:11.925]             list <- base::list
[17:42:11.925]             seq.int <- base::seq.int
[17:42:11.925]             signalCondition <- base::signalCondition
[17:42:11.925]             sys.calls <- base::sys.calls
[17:42:11.925]             `[[` <- base::`[[`
[17:42:11.925]             `+` <- base::`+`
[17:42:11.925]             `<<-` <- base::`<<-`
[17:42:11.925]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.925]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.925]                   3L)]
[17:42:11.925]             }
[17:42:11.925]             function(cond) {
[17:42:11.925]                 is_error <- inherits(cond, "error")
[17:42:11.925]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.925]                   NULL)
[17:42:11.925]                 if (is_error) {
[17:42:11.925]                   sessionInformation <- function() {
[17:42:11.925]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.925]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.925]                       search = base::search(), system = base::Sys.info())
[17:42:11.925]                   }
[17:42:11.925]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.925]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.925]                     cond$call), session = sessionInformation(), 
[17:42:11.925]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.925]                   signalCondition(cond)
[17:42:11.925]                 }
[17:42:11.925]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.925]                 "immediateCondition"))) {
[17:42:11.925]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.925]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.925]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.925]                   if (TRUE && !signal) {
[17:42:11.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.925]                     {
[17:42:11.925]                       inherits <- base::inherits
[17:42:11.925]                       invokeRestart <- base::invokeRestart
[17:42:11.925]                       is.null <- base::is.null
[17:42:11.925]                       muffled <- FALSE
[17:42:11.925]                       if (inherits(cond, "message")) {
[17:42:11.925]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.925]                         if (muffled) 
[17:42:11.925]                           invokeRestart("muffleMessage")
[17:42:11.925]                       }
[17:42:11.925]                       else if (inherits(cond, "warning")) {
[17:42:11.925]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.925]                         if (muffled) 
[17:42:11.925]                           invokeRestart("muffleWarning")
[17:42:11.925]                       }
[17:42:11.925]                       else if (inherits(cond, "condition")) {
[17:42:11.925]                         if (!is.null(pattern)) {
[17:42:11.925]                           computeRestarts <- base::computeRestarts
[17:42:11.925]                           grepl <- base::grepl
[17:42:11.925]                           restarts <- computeRestarts(cond)
[17:42:11.925]                           for (restart in restarts) {
[17:42:11.925]                             name <- restart$name
[17:42:11.925]                             if (is.null(name)) 
[17:42:11.925]                               next
[17:42:11.925]                             if (!grepl(pattern, name)) 
[17:42:11.925]                               next
[17:42:11.925]                             invokeRestart(restart)
[17:42:11.925]                             muffled <- TRUE
[17:42:11.925]                             break
[17:42:11.925]                           }
[17:42:11.925]                         }
[17:42:11.925]                       }
[17:42:11.925]                       invisible(muffled)
[17:42:11.925]                     }
[17:42:11.925]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.925]                   }
[17:42:11.925]                 }
[17:42:11.925]                 else {
[17:42:11.925]                   if (TRUE) {
[17:42:11.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.925]                     {
[17:42:11.925]                       inherits <- base::inherits
[17:42:11.925]                       invokeRestart <- base::invokeRestart
[17:42:11.925]                       is.null <- base::is.null
[17:42:11.925]                       muffled <- FALSE
[17:42:11.925]                       if (inherits(cond, "message")) {
[17:42:11.925]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.925]                         if (muffled) 
[17:42:11.925]                           invokeRestart("muffleMessage")
[17:42:11.925]                       }
[17:42:11.925]                       else if (inherits(cond, "warning")) {
[17:42:11.925]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.925]                         if (muffled) 
[17:42:11.925]                           invokeRestart("muffleWarning")
[17:42:11.925]                       }
[17:42:11.925]                       else if (inherits(cond, "condition")) {
[17:42:11.925]                         if (!is.null(pattern)) {
[17:42:11.925]                           computeRestarts <- base::computeRestarts
[17:42:11.925]                           grepl <- base::grepl
[17:42:11.925]                           restarts <- computeRestarts(cond)
[17:42:11.925]                           for (restart in restarts) {
[17:42:11.925]                             name <- restart$name
[17:42:11.925]                             if (is.null(name)) 
[17:42:11.925]                               next
[17:42:11.925]                             if (!grepl(pattern, name)) 
[17:42:11.925]                               next
[17:42:11.925]                             invokeRestart(restart)
[17:42:11.925]                             muffled <- TRUE
[17:42:11.925]                             break
[17:42:11.925]                           }
[17:42:11.925]                         }
[17:42:11.925]                       }
[17:42:11.925]                       invisible(muffled)
[17:42:11.925]                     }
[17:42:11.925]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.925]                   }
[17:42:11.925]                 }
[17:42:11.925]             }
[17:42:11.925]         }))
[17:42:11.925]     }, error = function(ex) {
[17:42:11.925]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.925]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.925]                 ...future.rng), started = ...future.startTime, 
[17:42:11.925]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.925]             version = "1.8"), class = "FutureResult")
[17:42:11.925]     }, finally = {
[17:42:11.925]         if (!identical(...future.workdir, getwd())) 
[17:42:11.925]             setwd(...future.workdir)
[17:42:11.925]         {
[17:42:11.925]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.925]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.925]             }
[17:42:11.925]             base::options(...future.oldOptions)
[17:42:11.925]             if (.Platform$OS.type == "windows") {
[17:42:11.925]                 old_names <- names(...future.oldEnvVars)
[17:42:11.925]                 envs <- base::Sys.getenv()
[17:42:11.925]                 names <- names(envs)
[17:42:11.925]                 common <- intersect(names, old_names)
[17:42:11.925]                 added <- setdiff(names, old_names)
[17:42:11.925]                 removed <- setdiff(old_names, names)
[17:42:11.925]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.925]                   envs[common]]
[17:42:11.925]                 NAMES <- toupper(changed)
[17:42:11.925]                 args <- list()
[17:42:11.925]                 for (kk in seq_along(NAMES)) {
[17:42:11.925]                   name <- changed[[kk]]
[17:42:11.925]                   NAME <- NAMES[[kk]]
[17:42:11.925]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.925]                     next
[17:42:11.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.925]                 }
[17:42:11.925]                 NAMES <- toupper(added)
[17:42:11.925]                 for (kk in seq_along(NAMES)) {
[17:42:11.925]                   name <- added[[kk]]
[17:42:11.925]                   NAME <- NAMES[[kk]]
[17:42:11.925]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.925]                     next
[17:42:11.925]                   args[[name]] <- ""
[17:42:11.925]                 }
[17:42:11.925]                 NAMES <- toupper(removed)
[17:42:11.925]                 for (kk in seq_along(NAMES)) {
[17:42:11.925]                   name <- removed[[kk]]
[17:42:11.925]                   NAME <- NAMES[[kk]]
[17:42:11.925]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.925]                     next
[17:42:11.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.925]                 }
[17:42:11.925]                 if (length(args) > 0) 
[17:42:11.925]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.925]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.925]             }
[17:42:11.925]             else {
[17:42:11.925]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.925]             }
[17:42:11.925]             {
[17:42:11.925]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.925]                   0L) {
[17:42:11.925]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.925]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.925]                   base::options(opts)
[17:42:11.925]                 }
[17:42:11.925]                 {
[17:42:11.925]                   {
[17:42:11.925]                     NULL
[17:42:11.925]                     RNGkind("Mersenne-Twister")
[17:42:11.925]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.925]                       inherits = FALSE)
[17:42:11.925]                   }
[17:42:11.925]                   options(future.plan = NULL)
[17:42:11.925]                   if (is.na(NA_character_)) 
[17:42:11.925]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.925]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.925]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.925]                   {
[17:42:11.925]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.925]                     if (!future$lazy) 
[17:42:11.925]                       future <- run(future)
[17:42:11.925]                     invisible(future)
[17:42:11.925]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.925]                 }
[17:42:11.925]             }
[17:42:11.925]         }
[17:42:11.925]     })
[17:42:11.925]     if (TRUE) {
[17:42:11.925]         base::sink(type = "output", split = FALSE)
[17:42:11.925]         if (TRUE) {
[17:42:11.925]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.925]         }
[17:42:11.925]         else {
[17:42:11.925]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.925]         }
[17:42:11.925]         base::close(...future.stdout)
[17:42:11.925]         ...future.stdout <- NULL
[17:42:11.925]     }
[17:42:11.925]     ...future.result$conditions <- ...future.conditions
[17:42:11.925]     ...future.result$finished <- base::Sys.time()
[17:42:11.925]     ...future.result
[17:42:11.925] }
[17:42:11.926] assign_globals() ...
[17:42:11.926] List of 1
[17:42:11.926]  $ a: num 1
[17:42:11.926]  - attr(*, "where")=List of 1
[17:42:11.926]   ..$ a:<environment: R_EmptyEnv> 
[17:42:11.926]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:11.926]  - attr(*, "resolved")= logi FALSE
[17:42:11.926]  - attr(*, "total_size")= num 56
[17:42:11.926]  - attr(*, "already-done")= logi TRUE
[17:42:11.929] - copied ‘a’ to environment
[17:42:11.929] assign_globals() ... done
[17:42:11.929] plan(): Setting new future strategy stack:
[17:42:11.929] List of future strategies:
[17:42:11.929] 1. sequential:
[17:42:11.929]    - args: function (..., envir = parent.frame())
[17:42:11.929]    - tweaked: FALSE
[17:42:11.929]    - call: NULL
[17:42:11.929] plan(): nbrOfWorkers() = 1
[17:42:11.930] plan(): Setting new future strategy stack:
[17:42:11.930] List of future strategies:
[17:42:11.930] 1. sequential:
[17:42:11.930]    - args: function (..., envir = parent.frame())
[17:42:11.930]    - tweaked: FALSE
[17:42:11.930]    - call: plan(strategy)
[17:42:11.930] plan(): nbrOfWorkers() = 1
[17:42:11.931] SequentialFuture started (and completed)
[17:42:11.931] - Launch lazy future ... done
[17:42:11.931] run() for ‘SequentialFuture’ ... done
[17:42:11.931] getGlobalsAndPackages() ...
[17:42:11.931] Searching for globals...
[17:42:11.932] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:11.932] Searching for globals ... DONE
[17:42:11.932] Resolving globals: FALSE
[17:42:11.933] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:11.933] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:11.933] - globals: [1] ‘a’
[17:42:11.933] 
[17:42:11.933] getGlobalsAndPackages() ... DONE
[17:42:11.933] run() for ‘Future’ ...
[17:42:11.934] - state: ‘created’
[17:42:11.934] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.934] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.934] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.934]   - Field: ‘label’
[17:42:11.934]   - Field: ‘local’
[17:42:11.934]   - Field: ‘owner’
[17:42:11.934]   - Field: ‘envir’
[17:42:11.935]   - Field: ‘packages’
[17:42:11.935]   - Field: ‘gc’
[17:42:11.935]   - Field: ‘conditions’
[17:42:11.937]   - Field: ‘expr’
[17:42:11.937]   - Field: ‘uuid’
[17:42:11.937]   - Field: ‘seed’
[17:42:11.937]   - Field: ‘version’
[17:42:11.937]   - Field: ‘result’
[17:42:11.938]   - Field: ‘asynchronous’
[17:42:11.938]   - Field: ‘calls’
[17:42:11.938]   - Field: ‘globals’
[17:42:11.938]   - Field: ‘stdout’
[17:42:11.938]   - Field: ‘earlySignal’
[17:42:11.938]   - Field: ‘lazy’
[17:42:11.938]   - Field: ‘state’
[17:42:11.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.938] - Launch lazy future ...
[17:42:11.939] Packages needed by the future expression (n = 0): <none>
[17:42:11.939] Packages needed by future strategies (n = 0): <none>
[17:42:11.939] {
[17:42:11.939]     {
[17:42:11.939]         {
[17:42:11.939]             ...future.startTime <- base::Sys.time()
[17:42:11.939]             {
[17:42:11.939]                 {
[17:42:11.939]                   {
[17:42:11.939]                     base::local({
[17:42:11.939]                       has_future <- base::requireNamespace("future", 
[17:42:11.939]                         quietly = TRUE)
[17:42:11.939]                       if (has_future) {
[17:42:11.939]                         ns <- base::getNamespace("future")
[17:42:11.939]                         version <- ns[[".package"]][["version"]]
[17:42:11.939]                         if (is.null(version)) 
[17:42:11.939]                           version <- utils::packageVersion("future")
[17:42:11.939]                       }
[17:42:11.939]                       else {
[17:42:11.939]                         version <- NULL
[17:42:11.939]                       }
[17:42:11.939]                       if (!has_future || version < "1.8.0") {
[17:42:11.939]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.939]                           "", base::R.version$version.string), 
[17:42:11.939]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.939]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.939]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.939]                             "release", "version")], collapse = " "), 
[17:42:11.939]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.939]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.939]                           info)
[17:42:11.939]                         info <- base::paste(info, collapse = "; ")
[17:42:11.939]                         if (!has_future) {
[17:42:11.939]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.939]                             info)
[17:42:11.939]                         }
[17:42:11.939]                         else {
[17:42:11.939]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.939]                             info, version)
[17:42:11.939]                         }
[17:42:11.939]                         base::stop(msg)
[17:42:11.939]                       }
[17:42:11.939]                     })
[17:42:11.939]                   }
[17:42:11.939]                   options(future.plan = NULL)
[17:42:11.939]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.939]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.939]                 }
[17:42:11.939]                 ...future.workdir <- getwd()
[17:42:11.939]             }
[17:42:11.939]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.939]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.939]         }
[17:42:11.939]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.939]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.939]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.939]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.939]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.939]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.939]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.939]             base::names(...future.oldOptions))
[17:42:11.939]     }
[17:42:11.939]     if (FALSE) {
[17:42:11.939]     }
[17:42:11.939]     else {
[17:42:11.939]         if (TRUE) {
[17:42:11.939]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.939]                 open = "w")
[17:42:11.939]         }
[17:42:11.939]         else {
[17:42:11.939]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.939]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.939]         }
[17:42:11.939]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.939]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.939]             base::sink(type = "output", split = FALSE)
[17:42:11.939]             base::close(...future.stdout)
[17:42:11.939]         }, add = TRUE)
[17:42:11.939]     }
[17:42:11.939]     ...future.frame <- base::sys.nframe()
[17:42:11.939]     ...future.conditions <- base::list()
[17:42:11.939]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.939]     if (FALSE) {
[17:42:11.939]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.939]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.939]     }
[17:42:11.939]     ...future.result <- base::tryCatch({
[17:42:11.939]         base::withCallingHandlers({
[17:42:11.939]             ...future.value <- base::withVisible(base::local({
[17:42:11.939]                 2 * a
[17:42:11.939]             }))
[17:42:11.939]             future::FutureResult(value = ...future.value$value, 
[17:42:11.939]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.939]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.939]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.939]                     ...future.globalenv.names))
[17:42:11.939]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.939]         }, condition = base::local({
[17:42:11.939]             c <- base::c
[17:42:11.939]             inherits <- base::inherits
[17:42:11.939]             invokeRestart <- base::invokeRestart
[17:42:11.939]             length <- base::length
[17:42:11.939]             list <- base::list
[17:42:11.939]             seq.int <- base::seq.int
[17:42:11.939]             signalCondition <- base::signalCondition
[17:42:11.939]             sys.calls <- base::sys.calls
[17:42:11.939]             `[[` <- base::`[[`
[17:42:11.939]             `+` <- base::`+`
[17:42:11.939]             `<<-` <- base::`<<-`
[17:42:11.939]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.939]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.939]                   3L)]
[17:42:11.939]             }
[17:42:11.939]             function(cond) {
[17:42:11.939]                 is_error <- inherits(cond, "error")
[17:42:11.939]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.939]                   NULL)
[17:42:11.939]                 if (is_error) {
[17:42:11.939]                   sessionInformation <- function() {
[17:42:11.939]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.939]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.939]                       search = base::search(), system = base::Sys.info())
[17:42:11.939]                   }
[17:42:11.939]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.939]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.939]                     cond$call), session = sessionInformation(), 
[17:42:11.939]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.939]                   signalCondition(cond)
[17:42:11.939]                 }
[17:42:11.939]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.939]                 "immediateCondition"))) {
[17:42:11.939]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.939]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.939]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.939]                   if (TRUE && !signal) {
[17:42:11.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.939]                     {
[17:42:11.939]                       inherits <- base::inherits
[17:42:11.939]                       invokeRestart <- base::invokeRestart
[17:42:11.939]                       is.null <- base::is.null
[17:42:11.939]                       muffled <- FALSE
[17:42:11.939]                       if (inherits(cond, "message")) {
[17:42:11.939]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.939]                         if (muffled) 
[17:42:11.939]                           invokeRestart("muffleMessage")
[17:42:11.939]                       }
[17:42:11.939]                       else if (inherits(cond, "warning")) {
[17:42:11.939]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.939]                         if (muffled) 
[17:42:11.939]                           invokeRestart("muffleWarning")
[17:42:11.939]                       }
[17:42:11.939]                       else if (inherits(cond, "condition")) {
[17:42:11.939]                         if (!is.null(pattern)) {
[17:42:11.939]                           computeRestarts <- base::computeRestarts
[17:42:11.939]                           grepl <- base::grepl
[17:42:11.939]                           restarts <- computeRestarts(cond)
[17:42:11.939]                           for (restart in restarts) {
[17:42:11.939]                             name <- restart$name
[17:42:11.939]                             if (is.null(name)) 
[17:42:11.939]                               next
[17:42:11.939]                             if (!grepl(pattern, name)) 
[17:42:11.939]                               next
[17:42:11.939]                             invokeRestart(restart)
[17:42:11.939]                             muffled <- TRUE
[17:42:11.939]                             break
[17:42:11.939]                           }
[17:42:11.939]                         }
[17:42:11.939]                       }
[17:42:11.939]                       invisible(muffled)
[17:42:11.939]                     }
[17:42:11.939]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.939]                   }
[17:42:11.939]                 }
[17:42:11.939]                 else {
[17:42:11.939]                   if (TRUE) {
[17:42:11.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.939]                     {
[17:42:11.939]                       inherits <- base::inherits
[17:42:11.939]                       invokeRestart <- base::invokeRestart
[17:42:11.939]                       is.null <- base::is.null
[17:42:11.939]                       muffled <- FALSE
[17:42:11.939]                       if (inherits(cond, "message")) {
[17:42:11.939]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.939]                         if (muffled) 
[17:42:11.939]                           invokeRestart("muffleMessage")
[17:42:11.939]                       }
[17:42:11.939]                       else if (inherits(cond, "warning")) {
[17:42:11.939]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.939]                         if (muffled) 
[17:42:11.939]                           invokeRestart("muffleWarning")
[17:42:11.939]                       }
[17:42:11.939]                       else if (inherits(cond, "condition")) {
[17:42:11.939]                         if (!is.null(pattern)) {
[17:42:11.939]                           computeRestarts <- base::computeRestarts
[17:42:11.939]                           grepl <- base::grepl
[17:42:11.939]                           restarts <- computeRestarts(cond)
[17:42:11.939]                           for (restart in restarts) {
[17:42:11.939]                             name <- restart$name
[17:42:11.939]                             if (is.null(name)) 
[17:42:11.939]                               next
[17:42:11.939]                             if (!grepl(pattern, name)) 
[17:42:11.939]                               next
[17:42:11.939]                             invokeRestart(restart)
[17:42:11.939]                             muffled <- TRUE
[17:42:11.939]                             break
[17:42:11.939]                           }
[17:42:11.939]                         }
[17:42:11.939]                       }
[17:42:11.939]                       invisible(muffled)
[17:42:11.939]                     }
[17:42:11.939]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.939]                   }
[17:42:11.939]                 }
[17:42:11.939]             }
[17:42:11.939]         }))
[17:42:11.939]     }, error = function(ex) {
[17:42:11.939]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.939]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.939]                 ...future.rng), started = ...future.startTime, 
[17:42:11.939]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.939]             version = "1.8"), class = "FutureResult")
[17:42:11.939]     }, finally = {
[17:42:11.939]         if (!identical(...future.workdir, getwd())) 
[17:42:11.939]             setwd(...future.workdir)
[17:42:11.939]         {
[17:42:11.939]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.939]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.939]             }
[17:42:11.939]             base::options(...future.oldOptions)
[17:42:11.939]             if (.Platform$OS.type == "windows") {
[17:42:11.939]                 old_names <- names(...future.oldEnvVars)
[17:42:11.939]                 envs <- base::Sys.getenv()
[17:42:11.939]                 names <- names(envs)
[17:42:11.939]                 common <- intersect(names, old_names)
[17:42:11.939]                 added <- setdiff(names, old_names)
[17:42:11.939]                 removed <- setdiff(old_names, names)
[17:42:11.939]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.939]                   envs[common]]
[17:42:11.939]                 NAMES <- toupper(changed)
[17:42:11.939]                 args <- list()
[17:42:11.939]                 for (kk in seq_along(NAMES)) {
[17:42:11.939]                   name <- changed[[kk]]
[17:42:11.939]                   NAME <- NAMES[[kk]]
[17:42:11.939]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.939]                     next
[17:42:11.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.939]                 }
[17:42:11.939]                 NAMES <- toupper(added)
[17:42:11.939]                 for (kk in seq_along(NAMES)) {
[17:42:11.939]                   name <- added[[kk]]
[17:42:11.939]                   NAME <- NAMES[[kk]]
[17:42:11.939]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.939]                     next
[17:42:11.939]                   args[[name]] <- ""
[17:42:11.939]                 }
[17:42:11.939]                 NAMES <- toupper(removed)
[17:42:11.939]                 for (kk in seq_along(NAMES)) {
[17:42:11.939]                   name <- removed[[kk]]
[17:42:11.939]                   NAME <- NAMES[[kk]]
[17:42:11.939]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.939]                     next
[17:42:11.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.939]                 }
[17:42:11.939]                 if (length(args) > 0) 
[17:42:11.939]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.939]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.939]             }
[17:42:11.939]             else {
[17:42:11.939]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.939]             }
[17:42:11.939]             {
[17:42:11.939]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.939]                   0L) {
[17:42:11.939]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.939]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.939]                   base::options(opts)
[17:42:11.939]                 }
[17:42:11.939]                 {
[17:42:11.939]                   {
[17:42:11.939]                     NULL
[17:42:11.939]                     RNGkind("Mersenne-Twister")
[17:42:11.939]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.939]                       inherits = FALSE)
[17:42:11.939]                   }
[17:42:11.939]                   options(future.plan = NULL)
[17:42:11.939]                   if (is.na(NA_character_)) 
[17:42:11.939]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.939]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.939]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.939]                   {
[17:42:11.939]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.939]                     if (!future$lazy) 
[17:42:11.939]                       future <- run(future)
[17:42:11.939]                     invisible(future)
[17:42:11.939]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.939]                 }
[17:42:11.939]             }
[17:42:11.939]         }
[17:42:11.939]     })
[17:42:11.939]     if (TRUE) {
[17:42:11.939]         base::sink(type = "output", split = FALSE)
[17:42:11.939]         if (TRUE) {
[17:42:11.939]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.939]         }
[17:42:11.939]         else {
[17:42:11.939]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.939]         }
[17:42:11.939]         base::close(...future.stdout)
[17:42:11.939]         ...future.stdout <- NULL
[17:42:11.939]     }
[17:42:11.939]     ...future.result$conditions <- ...future.conditions
[17:42:11.939]     ...future.result$finished <- base::Sys.time()
[17:42:11.939]     ...future.result
[17:42:11.939] }
[17:42:11.941] assign_globals() ...
[17:42:11.941] List of 1
[17:42:11.941]  $ a: num 1
[17:42:11.941]  - attr(*, "where")=List of 1
[17:42:11.941]   ..$ a:<environment: R_EmptyEnv> 
[17:42:11.941]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:11.941]  - attr(*, "resolved")= logi FALSE
[17:42:11.941]  - attr(*, "total_size")= num 56
[17:42:11.941]  - attr(*, "already-done")= logi TRUE
[17:42:11.943] - copied ‘a’ to environment
[17:42:11.944] assign_globals() ... done
[17:42:11.944] plan(): Setting new future strategy stack:
[17:42:11.944] List of future strategies:
[17:42:11.944] 1. sequential:
[17:42:11.944]    - args: function (..., envir = parent.frame())
[17:42:11.944]    - tweaked: FALSE
[17:42:11.944]    - call: NULL
[17:42:11.944] plan(): nbrOfWorkers() = 1
[17:42:11.945] plan(): Setting new future strategy stack:
[17:42:11.945] List of future strategies:
[17:42:11.945] 1. sequential:
[17:42:11.945]    - args: function (..., envir = parent.frame())
[17:42:11.945]    - tweaked: FALSE
[17:42:11.945]    - call: plan(strategy)
[17:42:11.945] plan(): nbrOfWorkers() = 1
[17:42:11.946] SequentialFuture started (and completed)
[17:42:11.946] - Launch lazy future ... done
[17:42:11.946] run() for ‘SequentialFuture’ ... done
[17:42:11.946] getGlobalsAndPackages() ...
[17:42:11.946] Searching for globals...
[17:42:11.947] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:11.947] Searching for globals ... DONE
[17:42:11.947] Resolving globals: FALSE
[17:42:11.948] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:11.948] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:11.948] - globals: [1] ‘a’
[17:42:11.948] 
[17:42:11.948] getGlobalsAndPackages() ... DONE
[17:42:11.949] run() for ‘Future’ ...
[17:42:11.949] - state: ‘created’
[17:42:11.949] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.949] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.949]   - Field: ‘label’
[17:42:11.949]   - Field: ‘local’
[17:42:11.950]   - Field: ‘owner’
[17:42:11.950]   - Field: ‘envir’
[17:42:11.950]   - Field: ‘packages’
[17:42:11.950]   - Field: ‘gc’
[17:42:11.950]   - Field: ‘conditions’
[17:42:11.950]   - Field: ‘expr’
[17:42:11.950]   - Field: ‘uuid’
[17:42:11.950]   - Field: ‘seed’
[17:42:11.950]   - Field: ‘version’
[17:42:11.950]   - Field: ‘result’
[17:42:11.951]   - Field: ‘asynchronous’
[17:42:11.951]   - Field: ‘calls’
[17:42:11.951]   - Field: ‘globals’
[17:42:11.951]   - Field: ‘stdout’
[17:42:11.951]   - Field: ‘earlySignal’
[17:42:11.952]   - Field: ‘lazy’
[17:42:11.952]   - Field: ‘state’
[17:42:11.952] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.952] - Launch lazy future ...
[17:42:11.952] Packages needed by the future expression (n = 0): <none>
[17:42:11.952] Packages needed by future strategies (n = 0): <none>
[17:42:11.953] {
[17:42:11.953]     {
[17:42:11.953]         {
[17:42:11.953]             ...future.startTime <- base::Sys.time()
[17:42:11.953]             {
[17:42:11.953]                 {
[17:42:11.953]                   {
[17:42:11.953]                     base::local({
[17:42:11.953]                       has_future <- base::requireNamespace("future", 
[17:42:11.953]                         quietly = TRUE)
[17:42:11.953]                       if (has_future) {
[17:42:11.953]                         ns <- base::getNamespace("future")
[17:42:11.953]                         version <- ns[[".package"]][["version"]]
[17:42:11.953]                         if (is.null(version)) 
[17:42:11.953]                           version <- utils::packageVersion("future")
[17:42:11.953]                       }
[17:42:11.953]                       else {
[17:42:11.953]                         version <- NULL
[17:42:11.953]                       }
[17:42:11.953]                       if (!has_future || version < "1.8.0") {
[17:42:11.953]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.953]                           "", base::R.version$version.string), 
[17:42:11.953]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.953]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.953]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.953]                             "release", "version")], collapse = " "), 
[17:42:11.953]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.953]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.953]                           info)
[17:42:11.953]                         info <- base::paste(info, collapse = "; ")
[17:42:11.953]                         if (!has_future) {
[17:42:11.953]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.953]                             info)
[17:42:11.953]                         }
[17:42:11.953]                         else {
[17:42:11.953]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.953]                             info, version)
[17:42:11.953]                         }
[17:42:11.953]                         base::stop(msg)
[17:42:11.953]                       }
[17:42:11.953]                     })
[17:42:11.953]                   }
[17:42:11.953]                   options(future.plan = NULL)
[17:42:11.953]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.953]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.953]                 }
[17:42:11.953]                 ...future.workdir <- getwd()
[17:42:11.953]             }
[17:42:11.953]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.953]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.953]         }
[17:42:11.953]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.953]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.953]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.953]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.953]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.953]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.953]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.953]             base::names(...future.oldOptions))
[17:42:11.953]     }
[17:42:11.953]     if (FALSE) {
[17:42:11.953]     }
[17:42:11.953]     else {
[17:42:11.953]         if (TRUE) {
[17:42:11.953]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.953]                 open = "w")
[17:42:11.953]         }
[17:42:11.953]         else {
[17:42:11.953]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.953]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.953]         }
[17:42:11.953]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.953]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.953]             base::sink(type = "output", split = FALSE)
[17:42:11.953]             base::close(...future.stdout)
[17:42:11.953]         }, add = TRUE)
[17:42:11.953]     }
[17:42:11.953]     ...future.frame <- base::sys.nframe()
[17:42:11.953]     ...future.conditions <- base::list()
[17:42:11.953]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.953]     if (FALSE) {
[17:42:11.953]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.953]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.953]     }
[17:42:11.953]     ...future.result <- base::tryCatch({
[17:42:11.953]         base::withCallingHandlers({
[17:42:11.953]             ...future.value <- base::withVisible(base::local({
[17:42:11.953]                 2 * a
[17:42:11.953]             }))
[17:42:11.953]             future::FutureResult(value = ...future.value$value, 
[17:42:11.953]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.953]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.953]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.953]                     ...future.globalenv.names))
[17:42:11.953]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.953]         }, condition = base::local({
[17:42:11.953]             c <- base::c
[17:42:11.953]             inherits <- base::inherits
[17:42:11.953]             invokeRestart <- base::invokeRestart
[17:42:11.953]             length <- base::length
[17:42:11.953]             list <- base::list
[17:42:11.953]             seq.int <- base::seq.int
[17:42:11.953]             signalCondition <- base::signalCondition
[17:42:11.953]             sys.calls <- base::sys.calls
[17:42:11.953]             `[[` <- base::`[[`
[17:42:11.953]             `+` <- base::`+`
[17:42:11.953]             `<<-` <- base::`<<-`
[17:42:11.953]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.953]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.953]                   3L)]
[17:42:11.953]             }
[17:42:11.953]             function(cond) {
[17:42:11.953]                 is_error <- inherits(cond, "error")
[17:42:11.953]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.953]                   NULL)
[17:42:11.953]                 if (is_error) {
[17:42:11.953]                   sessionInformation <- function() {
[17:42:11.953]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.953]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.953]                       search = base::search(), system = base::Sys.info())
[17:42:11.953]                   }
[17:42:11.953]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.953]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.953]                     cond$call), session = sessionInformation(), 
[17:42:11.953]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.953]                   signalCondition(cond)
[17:42:11.953]                 }
[17:42:11.953]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.953]                 "immediateCondition"))) {
[17:42:11.953]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.953]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.953]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.953]                   if (TRUE && !signal) {
[17:42:11.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.953]                     {
[17:42:11.953]                       inherits <- base::inherits
[17:42:11.953]                       invokeRestart <- base::invokeRestart
[17:42:11.953]                       is.null <- base::is.null
[17:42:11.953]                       muffled <- FALSE
[17:42:11.953]                       if (inherits(cond, "message")) {
[17:42:11.953]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.953]                         if (muffled) 
[17:42:11.953]                           invokeRestart("muffleMessage")
[17:42:11.953]                       }
[17:42:11.953]                       else if (inherits(cond, "warning")) {
[17:42:11.953]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.953]                         if (muffled) 
[17:42:11.953]                           invokeRestart("muffleWarning")
[17:42:11.953]                       }
[17:42:11.953]                       else if (inherits(cond, "condition")) {
[17:42:11.953]                         if (!is.null(pattern)) {
[17:42:11.953]                           computeRestarts <- base::computeRestarts
[17:42:11.953]                           grepl <- base::grepl
[17:42:11.953]                           restarts <- computeRestarts(cond)
[17:42:11.953]                           for (restart in restarts) {
[17:42:11.953]                             name <- restart$name
[17:42:11.953]                             if (is.null(name)) 
[17:42:11.953]                               next
[17:42:11.953]                             if (!grepl(pattern, name)) 
[17:42:11.953]                               next
[17:42:11.953]                             invokeRestart(restart)
[17:42:11.953]                             muffled <- TRUE
[17:42:11.953]                             break
[17:42:11.953]                           }
[17:42:11.953]                         }
[17:42:11.953]                       }
[17:42:11.953]                       invisible(muffled)
[17:42:11.953]                     }
[17:42:11.953]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.953]                   }
[17:42:11.953]                 }
[17:42:11.953]                 else {
[17:42:11.953]                   if (TRUE) {
[17:42:11.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.953]                     {
[17:42:11.953]                       inherits <- base::inherits
[17:42:11.953]                       invokeRestart <- base::invokeRestart
[17:42:11.953]                       is.null <- base::is.null
[17:42:11.953]                       muffled <- FALSE
[17:42:11.953]                       if (inherits(cond, "message")) {
[17:42:11.953]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.953]                         if (muffled) 
[17:42:11.953]                           invokeRestart("muffleMessage")
[17:42:11.953]                       }
[17:42:11.953]                       else if (inherits(cond, "warning")) {
[17:42:11.953]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.953]                         if (muffled) 
[17:42:11.953]                           invokeRestart("muffleWarning")
[17:42:11.953]                       }
[17:42:11.953]                       else if (inherits(cond, "condition")) {
[17:42:11.953]                         if (!is.null(pattern)) {
[17:42:11.953]                           computeRestarts <- base::computeRestarts
[17:42:11.953]                           grepl <- base::grepl
[17:42:11.953]                           restarts <- computeRestarts(cond)
[17:42:11.953]                           for (restart in restarts) {
[17:42:11.953]                             name <- restart$name
[17:42:11.953]                             if (is.null(name)) 
[17:42:11.953]                               next
[17:42:11.953]                             if (!grepl(pattern, name)) 
[17:42:11.953]                               next
[17:42:11.953]                             invokeRestart(restart)
[17:42:11.953]                             muffled <- TRUE
[17:42:11.953]                             break
[17:42:11.953]                           }
[17:42:11.953]                         }
[17:42:11.953]                       }
[17:42:11.953]                       invisible(muffled)
[17:42:11.953]                     }
[17:42:11.953]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.953]                   }
[17:42:11.953]                 }
[17:42:11.953]             }
[17:42:11.953]         }))
[17:42:11.953]     }, error = function(ex) {
[17:42:11.953]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.953]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.953]                 ...future.rng), started = ...future.startTime, 
[17:42:11.953]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.953]             version = "1.8"), class = "FutureResult")
[17:42:11.953]     }, finally = {
[17:42:11.953]         if (!identical(...future.workdir, getwd())) 
[17:42:11.953]             setwd(...future.workdir)
[17:42:11.953]         {
[17:42:11.953]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.953]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.953]             }
[17:42:11.953]             base::options(...future.oldOptions)
[17:42:11.953]             if (.Platform$OS.type == "windows") {
[17:42:11.953]                 old_names <- names(...future.oldEnvVars)
[17:42:11.953]                 envs <- base::Sys.getenv()
[17:42:11.953]                 names <- names(envs)
[17:42:11.953]                 common <- intersect(names, old_names)
[17:42:11.953]                 added <- setdiff(names, old_names)
[17:42:11.953]                 removed <- setdiff(old_names, names)
[17:42:11.953]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.953]                   envs[common]]
[17:42:11.953]                 NAMES <- toupper(changed)
[17:42:11.953]                 args <- list()
[17:42:11.953]                 for (kk in seq_along(NAMES)) {
[17:42:11.953]                   name <- changed[[kk]]
[17:42:11.953]                   NAME <- NAMES[[kk]]
[17:42:11.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.953]                     next
[17:42:11.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.953]                 }
[17:42:11.953]                 NAMES <- toupper(added)
[17:42:11.953]                 for (kk in seq_along(NAMES)) {
[17:42:11.953]                   name <- added[[kk]]
[17:42:11.953]                   NAME <- NAMES[[kk]]
[17:42:11.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.953]                     next
[17:42:11.953]                   args[[name]] <- ""
[17:42:11.953]                 }
[17:42:11.953]                 NAMES <- toupper(removed)
[17:42:11.953]                 for (kk in seq_along(NAMES)) {
[17:42:11.953]                   name <- removed[[kk]]
[17:42:11.953]                   NAME <- NAMES[[kk]]
[17:42:11.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.953]                     next
[17:42:11.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.953]                 }
[17:42:11.953]                 if (length(args) > 0) 
[17:42:11.953]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.953]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.953]             }
[17:42:11.953]             else {
[17:42:11.953]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.953]             }
[17:42:11.953]             {
[17:42:11.953]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.953]                   0L) {
[17:42:11.953]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.953]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.953]                   base::options(opts)
[17:42:11.953]                 }
[17:42:11.953]                 {
[17:42:11.953]                   {
[17:42:11.953]                     NULL
[17:42:11.953]                     RNGkind("Mersenne-Twister")
[17:42:11.953]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.953]                       inherits = FALSE)
[17:42:11.953]                   }
[17:42:11.953]                   options(future.plan = NULL)
[17:42:11.953]                   if (is.na(NA_character_)) 
[17:42:11.953]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.953]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.953]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.953]                   {
[17:42:11.953]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.953]                     if (!future$lazy) 
[17:42:11.953]                       future <- run(future)
[17:42:11.953]                     invisible(future)
[17:42:11.953]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.953]                 }
[17:42:11.953]             }
[17:42:11.953]         }
[17:42:11.953]     })
[17:42:11.953]     if (TRUE) {
[17:42:11.953]         base::sink(type = "output", split = FALSE)
[17:42:11.953]         if (TRUE) {
[17:42:11.953]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.953]         }
[17:42:11.953]         else {
[17:42:11.953]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.953]         }
[17:42:11.953]         base::close(...future.stdout)
[17:42:11.953]         ...future.stdout <- NULL
[17:42:11.953]     }
[17:42:11.953]     ...future.result$conditions <- ...future.conditions
[17:42:11.953]     ...future.result$finished <- base::Sys.time()
[17:42:11.953]     ...future.result
[17:42:11.953] }
[17:42:11.954] assign_globals() ...
[17:42:11.954] List of 1
[17:42:11.954]  $ a: num 1
[17:42:11.954]  - attr(*, "where")=List of 1
[17:42:11.954]   ..$ a:<environment: R_EmptyEnv> 
[17:42:11.954]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:11.954]  - attr(*, "resolved")= logi FALSE
[17:42:11.954]  - attr(*, "total_size")= num 56
[17:42:11.954]  - attr(*, "already-done")= logi TRUE
[17:42:11.957] - copied ‘a’ to environment
[17:42:11.957] assign_globals() ... done
[17:42:11.957] plan(): Setting new future strategy stack:
[17:42:11.957] List of future strategies:
[17:42:11.957] 1. sequential:
[17:42:11.957]    - args: function (..., envir = parent.frame())
[17:42:11.957]    - tweaked: FALSE
[17:42:11.957]    - call: NULL
[17:42:11.958] plan(): nbrOfWorkers() = 1
[17:42:11.958] plan(): Setting new future strategy stack:
[17:42:11.958] List of future strategies:
[17:42:11.958] 1. sequential:
[17:42:11.958]    - args: function (..., envir = parent.frame())
[17:42:11.958]    - tweaked: FALSE
[17:42:11.958]    - call: plan(strategy)
[17:42:11.959] plan(): nbrOfWorkers() = 1
[17:42:11.959] SequentialFuture started (and completed)
[17:42:11.959] - Launch lazy future ... done
[17:42:11.959] run() for ‘SequentialFuture’ ... done
[17:42:11.960] getGlobalsAndPackages() ...
[17:42:11.960] Searching for globals...
[17:42:11.960] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:11.961] Searching for globals ... DONE
[17:42:11.961] Resolving globals: FALSE
[17:42:11.961] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:11.961] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:11.961] - globals: [1] ‘a’
[17:42:11.962] 
[17:42:11.962] getGlobalsAndPackages() ... DONE
[17:42:11.962] run() for ‘Future’ ...
[17:42:11.962] - state: ‘created’
[17:42:11.962] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:11.962] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:11.963] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:11.963]   - Field: ‘label’
[17:42:11.963]   - Field: ‘local’
[17:42:11.963]   - Field: ‘owner’
[17:42:11.963]   - Field: ‘envir’
[17:42:11.963]   - Field: ‘packages’
[17:42:11.963]   - Field: ‘gc’
[17:42:11.963]   - Field: ‘conditions’
[17:42:11.963]   - Field: ‘expr’
[17:42:11.963]   - Field: ‘uuid’
[17:42:11.963]   - Field: ‘seed’
[17:42:11.964]   - Field: ‘version’
[17:42:11.964]   - Field: ‘result’
[17:42:11.964]   - Field: ‘asynchronous’
[17:42:11.964]   - Field: ‘calls’
[17:42:11.964]   - Field: ‘globals’
[17:42:11.964]   - Field: ‘stdout’
[17:42:11.964]   - Field: ‘earlySignal’
[17:42:11.964]   - Field: ‘lazy’
[17:42:11.964]   - Field: ‘state’
[17:42:11.964] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:11.964] - Launch lazy future ...
[17:42:11.965] Packages needed by the future expression (n = 0): <none>
[17:42:11.965] Packages needed by future strategies (n = 0): <none>
[17:42:11.965] {
[17:42:11.965]     {
[17:42:11.965]         {
[17:42:11.965]             ...future.startTime <- base::Sys.time()
[17:42:11.965]             {
[17:42:11.965]                 {
[17:42:11.965]                   {
[17:42:11.965]                     base::local({
[17:42:11.965]                       has_future <- base::requireNamespace("future", 
[17:42:11.965]                         quietly = TRUE)
[17:42:11.965]                       if (has_future) {
[17:42:11.965]                         ns <- base::getNamespace("future")
[17:42:11.965]                         version <- ns[[".package"]][["version"]]
[17:42:11.965]                         if (is.null(version)) 
[17:42:11.965]                           version <- utils::packageVersion("future")
[17:42:11.965]                       }
[17:42:11.965]                       else {
[17:42:11.965]                         version <- NULL
[17:42:11.965]                       }
[17:42:11.965]                       if (!has_future || version < "1.8.0") {
[17:42:11.965]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.965]                           "", base::R.version$version.string), 
[17:42:11.965]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:11.965]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.965]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.965]                             "release", "version")], collapse = " "), 
[17:42:11.965]                           hostname = base::Sys.info()[["nodename"]])
[17:42:11.965]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.965]                           info)
[17:42:11.965]                         info <- base::paste(info, collapse = "; ")
[17:42:11.965]                         if (!has_future) {
[17:42:11.965]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.965]                             info)
[17:42:11.965]                         }
[17:42:11.965]                         else {
[17:42:11.965]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.965]                             info, version)
[17:42:11.965]                         }
[17:42:11.965]                         base::stop(msg)
[17:42:11.965]                       }
[17:42:11.965]                     })
[17:42:11.965]                   }
[17:42:11.965]                   options(future.plan = NULL)
[17:42:11.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.965]                 }
[17:42:11.965]                 ...future.workdir <- getwd()
[17:42:11.965]             }
[17:42:11.965]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.965]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.965]         }
[17:42:11.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.965]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.965]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.965]             base::names(...future.oldOptions))
[17:42:11.965]     }
[17:42:11.965]     if (FALSE) {
[17:42:11.965]     }
[17:42:11.965]     else {
[17:42:11.965]         if (TRUE) {
[17:42:11.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.965]                 open = "w")
[17:42:11.965]         }
[17:42:11.965]         else {
[17:42:11.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.965]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.965]         }
[17:42:11.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.965]             base::sink(type = "output", split = FALSE)
[17:42:11.965]             base::close(...future.stdout)
[17:42:11.965]         }, add = TRUE)
[17:42:11.965]     }
[17:42:11.965]     ...future.frame <- base::sys.nframe()
[17:42:11.965]     ...future.conditions <- base::list()
[17:42:11.965]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.965]     if (FALSE) {
[17:42:11.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.965]     }
[17:42:11.965]     ...future.result <- base::tryCatch({
[17:42:11.965]         base::withCallingHandlers({
[17:42:11.965]             ...future.value <- base::withVisible(base::local({
[17:42:11.965]                 2 * a
[17:42:11.965]             }))
[17:42:11.965]             future::FutureResult(value = ...future.value$value, 
[17:42:11.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.965]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.965]                     ...future.globalenv.names))
[17:42:11.965]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.965]         }, condition = base::local({
[17:42:11.965]             c <- base::c
[17:42:11.965]             inherits <- base::inherits
[17:42:11.965]             invokeRestart <- base::invokeRestart
[17:42:11.965]             length <- base::length
[17:42:11.965]             list <- base::list
[17:42:11.965]             seq.int <- base::seq.int
[17:42:11.965]             signalCondition <- base::signalCondition
[17:42:11.965]             sys.calls <- base::sys.calls
[17:42:11.965]             `[[` <- base::`[[`
[17:42:11.965]             `+` <- base::`+`
[17:42:11.965]             `<<-` <- base::`<<-`
[17:42:11.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.965]                   3L)]
[17:42:11.965]             }
[17:42:11.965]             function(cond) {
[17:42:11.965]                 is_error <- inherits(cond, "error")
[17:42:11.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.965]                   NULL)
[17:42:11.965]                 if (is_error) {
[17:42:11.965]                   sessionInformation <- function() {
[17:42:11.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.965]                       search = base::search(), system = base::Sys.info())
[17:42:11.965]                   }
[17:42:11.965]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.965]                     cond$call), session = sessionInformation(), 
[17:42:11.965]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.965]                   signalCondition(cond)
[17:42:11.965]                 }
[17:42:11.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.965]                 "immediateCondition"))) {
[17:42:11.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.965]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.965]                   if (TRUE && !signal) {
[17:42:11.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.965]                     {
[17:42:11.965]                       inherits <- base::inherits
[17:42:11.965]                       invokeRestart <- base::invokeRestart
[17:42:11.965]                       is.null <- base::is.null
[17:42:11.965]                       muffled <- FALSE
[17:42:11.965]                       if (inherits(cond, "message")) {
[17:42:11.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.965]                         if (muffled) 
[17:42:11.965]                           invokeRestart("muffleMessage")
[17:42:11.965]                       }
[17:42:11.965]                       else if (inherits(cond, "warning")) {
[17:42:11.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.965]                         if (muffled) 
[17:42:11.965]                           invokeRestart("muffleWarning")
[17:42:11.965]                       }
[17:42:11.965]                       else if (inherits(cond, "condition")) {
[17:42:11.965]                         if (!is.null(pattern)) {
[17:42:11.965]                           computeRestarts <- base::computeRestarts
[17:42:11.965]                           grepl <- base::grepl
[17:42:11.965]                           restarts <- computeRestarts(cond)
[17:42:11.965]                           for (restart in restarts) {
[17:42:11.965]                             name <- restart$name
[17:42:11.965]                             if (is.null(name)) 
[17:42:11.965]                               next
[17:42:11.965]                             if (!grepl(pattern, name)) 
[17:42:11.965]                               next
[17:42:11.965]                             invokeRestart(restart)
[17:42:11.965]                             muffled <- TRUE
[17:42:11.965]                             break
[17:42:11.965]                           }
[17:42:11.965]                         }
[17:42:11.965]                       }
[17:42:11.965]                       invisible(muffled)
[17:42:11.965]                     }
[17:42:11.965]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.965]                   }
[17:42:11.965]                 }
[17:42:11.965]                 else {
[17:42:11.965]                   if (TRUE) {
[17:42:11.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.965]                     {
[17:42:11.965]                       inherits <- base::inherits
[17:42:11.965]                       invokeRestart <- base::invokeRestart
[17:42:11.965]                       is.null <- base::is.null
[17:42:11.965]                       muffled <- FALSE
[17:42:11.965]                       if (inherits(cond, "message")) {
[17:42:11.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.965]                         if (muffled) 
[17:42:11.965]                           invokeRestart("muffleMessage")
[17:42:11.965]                       }
[17:42:11.965]                       else if (inherits(cond, "warning")) {
[17:42:11.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.965]                         if (muffled) 
[17:42:11.965]                           invokeRestart("muffleWarning")
[17:42:11.965]                       }
[17:42:11.965]                       else if (inherits(cond, "condition")) {
[17:42:11.965]                         if (!is.null(pattern)) {
[17:42:11.965]                           computeRestarts <- base::computeRestarts
[17:42:11.965]                           grepl <- base::grepl
[17:42:11.965]                           restarts <- computeRestarts(cond)
[17:42:11.965]                           for (restart in restarts) {
[17:42:11.965]                             name <- restart$name
[17:42:11.965]                             if (is.null(name)) 
[17:42:11.965]                               next
[17:42:11.965]                             if (!grepl(pattern, name)) 
[17:42:11.965]                               next
[17:42:11.965]                             invokeRestart(restart)
[17:42:11.965]                             muffled <- TRUE
[17:42:11.965]                             break
[17:42:11.965]                           }
[17:42:11.965]                         }
[17:42:11.965]                       }
[17:42:11.965]                       invisible(muffled)
[17:42:11.965]                     }
[17:42:11.965]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.965]                   }
[17:42:11.965]                 }
[17:42:11.965]             }
[17:42:11.965]         }))
[17:42:11.965]     }, error = function(ex) {
[17:42:11.965]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.965]                 ...future.rng), started = ...future.startTime, 
[17:42:11.965]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.965]             version = "1.8"), class = "FutureResult")
[17:42:11.965]     }, finally = {
[17:42:11.965]         if (!identical(...future.workdir, getwd())) 
[17:42:11.965]             setwd(...future.workdir)
[17:42:11.965]         {
[17:42:11.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.965]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.965]             }
[17:42:11.965]             base::options(...future.oldOptions)
[17:42:11.965]             if (.Platform$OS.type == "windows") {
[17:42:11.965]                 old_names <- names(...future.oldEnvVars)
[17:42:11.965]                 envs <- base::Sys.getenv()
[17:42:11.965]                 names <- names(envs)
[17:42:11.965]                 common <- intersect(names, old_names)
[17:42:11.965]                 added <- setdiff(names, old_names)
[17:42:11.965]                 removed <- setdiff(old_names, names)
[17:42:11.965]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.965]                   envs[common]]
[17:42:11.965]                 NAMES <- toupper(changed)
[17:42:11.965]                 args <- list()
[17:42:11.965]                 for (kk in seq_along(NAMES)) {
[17:42:11.965]                   name <- changed[[kk]]
[17:42:11.965]                   NAME <- NAMES[[kk]]
[17:42:11.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.965]                     next
[17:42:11.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.965]                 }
[17:42:11.965]                 NAMES <- toupper(added)
[17:42:11.965]                 for (kk in seq_along(NAMES)) {
[17:42:11.965]                   name <- added[[kk]]
[17:42:11.965]                   NAME <- NAMES[[kk]]
[17:42:11.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.965]                     next
[17:42:11.965]                   args[[name]] <- ""
[17:42:11.965]                 }
[17:42:11.965]                 NAMES <- toupper(removed)
[17:42:11.965]                 for (kk in seq_along(NAMES)) {
[17:42:11.965]                   name <- removed[[kk]]
[17:42:11.965]                   NAME <- NAMES[[kk]]
[17:42:11.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.965]                     next
[17:42:11.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.965]                 }
[17:42:11.965]                 if (length(args) > 0) 
[17:42:11.965]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.965]             }
[17:42:11.965]             else {
[17:42:11.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.965]             }
[17:42:11.965]             {
[17:42:11.965]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.965]                   0L) {
[17:42:11.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.965]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.965]                   base::options(opts)
[17:42:11.965]                 }
[17:42:11.965]                 {
[17:42:11.965]                   {
[17:42:11.965]                     NULL
[17:42:11.965]                     RNGkind("Mersenne-Twister")
[17:42:11.965]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:11.965]                       inherits = FALSE)
[17:42:11.965]                   }
[17:42:11.965]                   options(future.plan = NULL)
[17:42:11.965]                   if (is.na(NA_character_)) 
[17:42:11.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.965]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:11.965]                   {
[17:42:11.965]                     future <- SequentialFuture(..., envir = envir)
[17:42:11.965]                     if (!future$lazy) 
[17:42:11.965]                       future <- run(future)
[17:42:11.965]                     invisible(future)
[17:42:11.965]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.965]                 }
[17:42:11.965]             }
[17:42:11.965]         }
[17:42:11.965]     })
[17:42:11.965]     if (TRUE) {
[17:42:11.965]         base::sink(type = "output", split = FALSE)
[17:42:11.965]         if (TRUE) {
[17:42:11.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.965]         }
[17:42:11.965]         else {
[17:42:11.965]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.965]         }
[17:42:11.965]         base::close(...future.stdout)
[17:42:11.965]         ...future.stdout <- NULL
[17:42:11.965]     }
[17:42:11.965]     ...future.result$conditions <- ...future.conditions
[17:42:11.965]     ...future.result$finished <- base::Sys.time()
[17:42:11.965]     ...future.result
[17:42:11.965] }
[17:42:11.967] assign_globals() ...
[17:42:11.967] List of 1
[17:42:11.967]  $ a: num 1
[17:42:11.967]  - attr(*, "where")=List of 1
[17:42:11.967]   ..$ a:<environment: R_EmptyEnv> 
[17:42:11.967]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:11.967]  - attr(*, "resolved")= logi FALSE
[17:42:11.967]  - attr(*, "total_size")= num 56
[17:42:11.967]  - attr(*, "already-done")= logi TRUE
[17:42:11.971] - copied ‘a’ to environment
[17:42:11.972] assign_globals() ... done
[17:42:11.972] plan(): Setting new future strategy stack:
[17:42:11.972] List of future strategies:
[17:42:11.972] 1. sequential:
[17:42:11.972]    - args: function (..., envir = parent.frame())
[17:42:11.972]    - tweaked: FALSE
[17:42:11.972]    - call: NULL
[17:42:11.972] plan(): nbrOfWorkers() = 1
[17:42:11.973] plan(): Setting new future strategy stack:
[17:42:11.973] List of future strategies:
[17:42:11.973] 1. sequential:
[17:42:11.973]    - args: function (..., envir = parent.frame())
[17:42:11.973]    - tweaked: FALSE
[17:42:11.973]    - call: plan(strategy)
[17:42:11.974] plan(): nbrOfWorkers() = 1
[17:42:11.974] SequentialFuture started (and completed)
[17:42:11.974] - Launch lazy future ... done
[17:42:11.974] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[17:42:11.980] plan(): Setting new future strategy stack:
[17:42:11.980] List of future strategies:
[17:42:11.980] 1. multicore:
[17:42:11.980]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:11.980]    - tweaked: FALSE
[17:42:11.980]    - call: plan(strategy)
[17:42:11.984] plan(): nbrOfWorkers() = 2
[17:42:11.984] getGlobalsAndPackages() ...
[17:42:11.985] Searching for globals...
[17:42:11.985] - globals found: [1] ‘{’
[17:42:11.985] Searching for globals ... DONE
[17:42:11.985] Resolving globals: FALSE
[17:42:11.986] 
[17:42:11.986] 
[17:42:11.986] getGlobalsAndPackages() ... DONE
[17:42:11.986] run() for ‘Future’ ...
[17:42:11.986] - state: ‘created’
[17:42:11.986] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:11.990] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:11.990] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:11.990]   - Field: ‘label’
[17:42:11.990]   - Field: ‘local’
[17:42:11.990]   - Field: ‘owner’
[17:42:11.990]   - Field: ‘envir’
[17:42:11.990]   - Field: ‘workers’
[17:42:11.991]   - Field: ‘packages’
[17:42:11.991]   - Field: ‘gc’
[17:42:11.991]   - Field: ‘job’
[17:42:11.991]   - Field: ‘conditions’
[17:42:11.991]   - Field: ‘expr’
[17:42:11.991]   - Field: ‘uuid’
[17:42:11.991]   - Field: ‘seed’
[17:42:11.991]   - Field: ‘version’
[17:42:11.991]   - Field: ‘result’
[17:42:11.991]   - Field: ‘asynchronous’
[17:42:11.992]   - Field: ‘calls’
[17:42:11.992]   - Field: ‘globals’
[17:42:11.992]   - Field: ‘stdout’
[17:42:11.992]   - Field: ‘earlySignal’
[17:42:11.992]   - Field: ‘lazy’
[17:42:11.992]   - Field: ‘state’
[17:42:11.992] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:11.992] - Launch lazy future ...
[17:42:11.993] Packages needed by the future expression (n = 0): <none>
[17:42:11.993] Packages needed by future strategies (n = 0): <none>
[17:42:11.994] {
[17:42:11.994]     {
[17:42:11.994]         {
[17:42:11.994]             ...future.startTime <- base::Sys.time()
[17:42:11.994]             {
[17:42:11.994]                 {
[17:42:11.994]                   {
[17:42:11.994]                     {
[17:42:11.994]                       base::local({
[17:42:11.994]                         has_future <- base::requireNamespace("future", 
[17:42:11.994]                           quietly = TRUE)
[17:42:11.994]                         if (has_future) {
[17:42:11.994]                           ns <- base::getNamespace("future")
[17:42:11.994]                           version <- ns[[".package"]][["version"]]
[17:42:11.994]                           if (is.null(version)) 
[17:42:11.994]                             version <- utils::packageVersion("future")
[17:42:11.994]                         }
[17:42:11.994]                         else {
[17:42:11.994]                           version <- NULL
[17:42:11.994]                         }
[17:42:11.994]                         if (!has_future || version < "1.8.0") {
[17:42:11.994]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:11.994]                             "", base::R.version$version.string), 
[17:42:11.994]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:11.994]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:11.994]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:11.994]                               "release", "version")], collapse = " "), 
[17:42:11.994]                             hostname = base::Sys.info()[["nodename"]])
[17:42:11.994]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:11.994]                             info)
[17:42:11.994]                           info <- base::paste(info, collapse = "; ")
[17:42:11.994]                           if (!has_future) {
[17:42:11.994]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:11.994]                               info)
[17:42:11.994]                           }
[17:42:11.994]                           else {
[17:42:11.994]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:11.994]                               info, version)
[17:42:11.994]                           }
[17:42:11.994]                           base::stop(msg)
[17:42:11.994]                         }
[17:42:11.994]                       })
[17:42:11.994]                     }
[17:42:11.994]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:11.994]                     base::options(mc.cores = 1L)
[17:42:11.994]                   }
[17:42:11.994]                   options(future.plan = NULL)
[17:42:11.994]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.994]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:11.994]                 }
[17:42:11.994]                 ...future.workdir <- getwd()
[17:42:11.994]             }
[17:42:11.994]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:11.994]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:11.994]         }
[17:42:11.994]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:11.994]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:11.994]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:11.994]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:11.994]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:11.994]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:11.994]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:11.994]             base::names(...future.oldOptions))
[17:42:11.994]     }
[17:42:11.994]     if (FALSE) {
[17:42:11.994]     }
[17:42:11.994]     else {
[17:42:11.994]         if (TRUE) {
[17:42:11.994]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:11.994]                 open = "w")
[17:42:11.994]         }
[17:42:11.994]         else {
[17:42:11.994]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:11.994]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:11.994]         }
[17:42:11.994]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:11.994]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:11.994]             base::sink(type = "output", split = FALSE)
[17:42:11.994]             base::close(...future.stdout)
[17:42:11.994]         }, add = TRUE)
[17:42:11.994]     }
[17:42:11.994]     ...future.frame <- base::sys.nframe()
[17:42:11.994]     ...future.conditions <- base::list()
[17:42:11.994]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:11.994]     if (FALSE) {
[17:42:11.994]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:11.994]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:11.994]     }
[17:42:11.994]     ...future.result <- base::tryCatch({
[17:42:11.994]         base::withCallingHandlers({
[17:42:11.994]             ...future.value <- base::withVisible(base::local({
[17:42:11.994]                 withCallingHandlers({
[17:42:11.994]                   {
[17:42:11.994]                     2
[17:42:11.994]                   }
[17:42:11.994]                 }, immediateCondition = function(cond) {
[17:42:11.994]                   save_rds <- function (object, pathname, ...) 
[17:42:11.994]                   {
[17:42:11.994]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:11.994]                     if (file_test("-f", pathname_tmp)) {
[17:42:11.994]                       fi_tmp <- file.info(pathname_tmp)
[17:42:11.994]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:11.994]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:11.994]                         fi_tmp[["mtime"]])
[17:42:11.994]                     }
[17:42:11.994]                     tryCatch({
[17:42:11.994]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:11.994]                     }, error = function(ex) {
[17:42:11.994]                       msg <- conditionMessage(ex)
[17:42:11.994]                       fi_tmp <- file.info(pathname_tmp)
[17:42:11.994]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:11.994]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:11.994]                         fi_tmp[["mtime"]], msg)
[17:42:11.994]                       ex$message <- msg
[17:42:11.994]                       stop(ex)
[17:42:11.994]                     })
[17:42:11.994]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:11.994]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:11.994]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:11.994]                       fi_tmp <- file.info(pathname_tmp)
[17:42:11.994]                       fi <- file.info(pathname)
[17:42:11.994]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:11.994]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:11.994]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:11.994]                         fi[["size"]], fi[["mtime"]])
[17:42:11.994]                       stop(msg)
[17:42:11.994]                     }
[17:42:11.994]                     invisible(pathname)
[17:42:11.994]                   }
[17:42:11.994]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:11.994]                     rootPath = tempdir()) 
[17:42:11.994]                   {
[17:42:11.994]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:11.994]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:11.994]                       tmpdir = path, fileext = ".rds")
[17:42:11.994]                     save_rds(obj, file)
[17:42:11.994]                   }
[17:42:11.994]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:11.994]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.994]                   {
[17:42:11.994]                     inherits <- base::inherits
[17:42:11.994]                     invokeRestart <- base::invokeRestart
[17:42:11.994]                     is.null <- base::is.null
[17:42:11.994]                     muffled <- FALSE
[17:42:11.994]                     if (inherits(cond, "message")) {
[17:42:11.994]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:11.994]                       if (muffled) 
[17:42:11.994]                         invokeRestart("muffleMessage")
[17:42:11.994]                     }
[17:42:11.994]                     else if (inherits(cond, "warning")) {
[17:42:11.994]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:11.994]                       if (muffled) 
[17:42:11.994]                         invokeRestart("muffleWarning")
[17:42:11.994]                     }
[17:42:11.994]                     else if (inherits(cond, "condition")) {
[17:42:11.994]                       if (!is.null(pattern)) {
[17:42:11.994]                         computeRestarts <- base::computeRestarts
[17:42:11.994]                         grepl <- base::grepl
[17:42:11.994]                         restarts <- computeRestarts(cond)
[17:42:11.994]                         for (restart in restarts) {
[17:42:11.994]                           name <- restart$name
[17:42:11.994]                           if (is.null(name)) 
[17:42:11.994]                             next
[17:42:11.994]                           if (!grepl(pattern, name)) 
[17:42:11.994]                             next
[17:42:11.994]                           invokeRestart(restart)
[17:42:11.994]                           muffled <- TRUE
[17:42:11.994]                           break
[17:42:11.994]                         }
[17:42:11.994]                       }
[17:42:11.994]                     }
[17:42:11.994]                     invisible(muffled)
[17:42:11.994]                   }
[17:42:11.994]                   muffleCondition(cond)
[17:42:11.994]                 })
[17:42:11.994]             }))
[17:42:11.994]             future::FutureResult(value = ...future.value$value, 
[17:42:11.994]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.994]                   ...future.rng), globalenv = if (FALSE) 
[17:42:11.994]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:11.994]                     ...future.globalenv.names))
[17:42:11.994]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:11.994]         }, condition = base::local({
[17:42:11.994]             c <- base::c
[17:42:11.994]             inherits <- base::inherits
[17:42:11.994]             invokeRestart <- base::invokeRestart
[17:42:11.994]             length <- base::length
[17:42:11.994]             list <- base::list
[17:42:11.994]             seq.int <- base::seq.int
[17:42:11.994]             signalCondition <- base::signalCondition
[17:42:11.994]             sys.calls <- base::sys.calls
[17:42:11.994]             `[[` <- base::`[[`
[17:42:11.994]             `+` <- base::`+`
[17:42:11.994]             `<<-` <- base::`<<-`
[17:42:11.994]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:11.994]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:11.994]                   3L)]
[17:42:11.994]             }
[17:42:11.994]             function(cond) {
[17:42:11.994]                 is_error <- inherits(cond, "error")
[17:42:11.994]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:11.994]                   NULL)
[17:42:11.994]                 if (is_error) {
[17:42:11.994]                   sessionInformation <- function() {
[17:42:11.994]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:11.994]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:11.994]                       search = base::search(), system = base::Sys.info())
[17:42:11.994]                   }
[17:42:11.994]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.994]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:11.994]                     cond$call), session = sessionInformation(), 
[17:42:11.994]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:11.994]                   signalCondition(cond)
[17:42:11.994]                 }
[17:42:11.994]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:11.994]                 "immediateCondition"))) {
[17:42:11.994]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:11.994]                   ...future.conditions[[length(...future.conditions) + 
[17:42:11.994]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:11.994]                   if (TRUE && !signal) {
[17:42:11.994]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.994]                     {
[17:42:11.994]                       inherits <- base::inherits
[17:42:11.994]                       invokeRestart <- base::invokeRestart
[17:42:11.994]                       is.null <- base::is.null
[17:42:11.994]                       muffled <- FALSE
[17:42:11.994]                       if (inherits(cond, "message")) {
[17:42:11.994]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.994]                         if (muffled) 
[17:42:11.994]                           invokeRestart("muffleMessage")
[17:42:11.994]                       }
[17:42:11.994]                       else if (inherits(cond, "warning")) {
[17:42:11.994]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.994]                         if (muffled) 
[17:42:11.994]                           invokeRestart("muffleWarning")
[17:42:11.994]                       }
[17:42:11.994]                       else if (inherits(cond, "condition")) {
[17:42:11.994]                         if (!is.null(pattern)) {
[17:42:11.994]                           computeRestarts <- base::computeRestarts
[17:42:11.994]                           grepl <- base::grepl
[17:42:11.994]                           restarts <- computeRestarts(cond)
[17:42:11.994]                           for (restart in restarts) {
[17:42:11.994]                             name <- restart$name
[17:42:11.994]                             if (is.null(name)) 
[17:42:11.994]                               next
[17:42:11.994]                             if (!grepl(pattern, name)) 
[17:42:11.994]                               next
[17:42:11.994]                             invokeRestart(restart)
[17:42:11.994]                             muffled <- TRUE
[17:42:11.994]                             break
[17:42:11.994]                           }
[17:42:11.994]                         }
[17:42:11.994]                       }
[17:42:11.994]                       invisible(muffled)
[17:42:11.994]                     }
[17:42:11.994]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.994]                   }
[17:42:11.994]                 }
[17:42:11.994]                 else {
[17:42:11.994]                   if (TRUE) {
[17:42:11.994]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:11.994]                     {
[17:42:11.994]                       inherits <- base::inherits
[17:42:11.994]                       invokeRestart <- base::invokeRestart
[17:42:11.994]                       is.null <- base::is.null
[17:42:11.994]                       muffled <- FALSE
[17:42:11.994]                       if (inherits(cond, "message")) {
[17:42:11.994]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:11.994]                         if (muffled) 
[17:42:11.994]                           invokeRestart("muffleMessage")
[17:42:11.994]                       }
[17:42:11.994]                       else if (inherits(cond, "warning")) {
[17:42:11.994]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:11.994]                         if (muffled) 
[17:42:11.994]                           invokeRestart("muffleWarning")
[17:42:11.994]                       }
[17:42:11.994]                       else if (inherits(cond, "condition")) {
[17:42:11.994]                         if (!is.null(pattern)) {
[17:42:11.994]                           computeRestarts <- base::computeRestarts
[17:42:11.994]                           grepl <- base::grepl
[17:42:11.994]                           restarts <- computeRestarts(cond)
[17:42:11.994]                           for (restart in restarts) {
[17:42:11.994]                             name <- restart$name
[17:42:11.994]                             if (is.null(name)) 
[17:42:11.994]                               next
[17:42:11.994]                             if (!grepl(pattern, name)) 
[17:42:11.994]                               next
[17:42:11.994]                             invokeRestart(restart)
[17:42:11.994]                             muffled <- TRUE
[17:42:11.994]                             break
[17:42:11.994]                           }
[17:42:11.994]                         }
[17:42:11.994]                       }
[17:42:11.994]                       invisible(muffled)
[17:42:11.994]                     }
[17:42:11.994]                     muffleCondition(cond, pattern = "^muffle")
[17:42:11.994]                   }
[17:42:11.994]                 }
[17:42:11.994]             }
[17:42:11.994]         }))
[17:42:11.994]     }, error = function(ex) {
[17:42:11.994]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:11.994]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:11.994]                 ...future.rng), started = ...future.startTime, 
[17:42:11.994]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:11.994]             version = "1.8"), class = "FutureResult")
[17:42:11.994]     }, finally = {
[17:42:11.994]         if (!identical(...future.workdir, getwd())) 
[17:42:11.994]             setwd(...future.workdir)
[17:42:11.994]         {
[17:42:11.994]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:11.994]                 ...future.oldOptions$nwarnings <- NULL
[17:42:11.994]             }
[17:42:11.994]             base::options(...future.oldOptions)
[17:42:11.994]             if (.Platform$OS.type == "windows") {
[17:42:11.994]                 old_names <- names(...future.oldEnvVars)
[17:42:11.994]                 envs <- base::Sys.getenv()
[17:42:11.994]                 names <- names(envs)
[17:42:11.994]                 common <- intersect(names, old_names)
[17:42:11.994]                 added <- setdiff(names, old_names)
[17:42:11.994]                 removed <- setdiff(old_names, names)
[17:42:11.994]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:11.994]                   envs[common]]
[17:42:11.994]                 NAMES <- toupper(changed)
[17:42:11.994]                 args <- list()
[17:42:11.994]                 for (kk in seq_along(NAMES)) {
[17:42:11.994]                   name <- changed[[kk]]
[17:42:11.994]                   NAME <- NAMES[[kk]]
[17:42:11.994]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.994]                     next
[17:42:11.994]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.994]                 }
[17:42:11.994]                 NAMES <- toupper(added)
[17:42:11.994]                 for (kk in seq_along(NAMES)) {
[17:42:11.994]                   name <- added[[kk]]
[17:42:11.994]                   NAME <- NAMES[[kk]]
[17:42:11.994]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.994]                     next
[17:42:11.994]                   args[[name]] <- ""
[17:42:11.994]                 }
[17:42:11.994]                 NAMES <- toupper(removed)
[17:42:11.994]                 for (kk in seq_along(NAMES)) {
[17:42:11.994]                   name <- removed[[kk]]
[17:42:11.994]                   NAME <- NAMES[[kk]]
[17:42:11.994]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:11.994]                     next
[17:42:11.994]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:11.994]                 }
[17:42:11.994]                 if (length(args) > 0) 
[17:42:11.994]                   base::do.call(base::Sys.setenv, args = args)
[17:42:11.994]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:11.994]             }
[17:42:11.994]             else {
[17:42:11.994]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:11.994]             }
[17:42:11.994]             {
[17:42:11.994]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:11.994]                   0L) {
[17:42:11.994]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:11.994]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:11.994]                   base::options(opts)
[17:42:11.994]                 }
[17:42:11.994]                 {
[17:42:11.994]                   {
[17:42:11.994]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:11.994]                     NULL
[17:42:11.994]                   }
[17:42:11.994]                   options(future.plan = NULL)
[17:42:11.994]                   if (is.na(NA_character_)) 
[17:42:11.994]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:11.994]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:11.994]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:11.994]                     envir = parent.frame()) 
[17:42:11.994]                   {
[17:42:11.994]                     default_workers <- missing(workers)
[17:42:11.994]                     if (is.function(workers)) 
[17:42:11.994]                       workers <- workers()
[17:42:11.994]                     workers <- structure(as.integer(workers), 
[17:42:11.994]                       class = class(workers))
[17:42:11.994]                     stop_if_not(is.finite(workers), workers >= 
[17:42:11.994]                       1L)
[17:42:11.994]                     if ((workers == 1L && !inherits(workers, 
[17:42:11.994]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:11.994]                       if (default_workers) 
[17:42:11.994]                         supportsMulticore(warn = TRUE)
[17:42:11.994]                       return(sequential(..., envir = envir))
[17:42:11.994]                     }
[17:42:11.994]                     oopts <- options(mc.cores = workers)
[17:42:11.994]                     on.exit(options(oopts))
[17:42:11.994]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:11.994]                       envir = envir)
[17:42:11.994]                     if (!future$lazy) 
[17:42:11.994]                       future <- run(future)
[17:42:11.994]                     invisible(future)
[17:42:11.994]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:11.994]                 }
[17:42:11.994]             }
[17:42:11.994]         }
[17:42:11.994]     })
[17:42:11.994]     if (TRUE) {
[17:42:11.994]         base::sink(type = "output", split = FALSE)
[17:42:11.994]         if (TRUE) {
[17:42:11.994]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:11.994]         }
[17:42:11.994]         else {
[17:42:11.994]             ...future.result["stdout"] <- base::list(NULL)
[17:42:11.994]         }
[17:42:11.994]         base::close(...future.stdout)
[17:42:11.994]         ...future.stdout <- NULL
[17:42:11.994]     }
[17:42:11.994]     ...future.result$conditions <- ...future.conditions
[17:42:11.994]     ...future.result$finished <- base::Sys.time()
[17:42:11.994]     ...future.result
[17:42:11.994] }
[17:42:11.996] requestCore(): workers = 2
[17:42:11.999] MulticoreFuture started
[17:42:11.999] - Launch lazy future ... done
[17:42:11.999] run() for ‘MulticoreFuture’ ... done
[17:42:12.000] plan(): Setting new future strategy stack:
[17:42:12.000] getGlobalsAndPackages() ...
[17:42:12.000] Searching for globals...
[17:42:12.000] List of future strategies:
[17:42:12.000] 1. sequential:
[17:42:12.000]    - args: function (..., envir = parent.frame())
[17:42:12.000]    - tweaked: FALSE
[17:42:12.000]    - call: NULL
[17:42:12.001] plan(): nbrOfWorkers() = 1
[17:42:12.002] - globals found: [1] ‘{’
[17:42:12.002] Searching for globals ... DONE
[17:42:12.002] Resolving globals: FALSE
[17:42:12.002] plan(): Setting new future strategy stack:
[17:42:12.003] List of future strategies:
[17:42:12.003] 1. multicore:
[17:42:12.003]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.003]    - tweaked: FALSE
[17:42:12.003]    - call: plan(strategy)
[17:42:12.003] 
[17:42:12.003] 
[17:42:12.003] getGlobalsAndPackages() ... DONE
[17:42:12.004] run() for ‘Future’ ...
[17:42:12.004] - state: ‘created’
[17:42:12.004] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.007] plan(): nbrOfWorkers() = 2
[17:42:12.009] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.009] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:12.009]   - Field: ‘label’
[17:42:12.009]   - Field: ‘local’
[17:42:12.010]   - Field: ‘owner’
[17:42:12.010]   - Field: ‘envir’
[17:42:12.010]   - Field: ‘workers’
[17:42:12.010]   - Field: ‘packages’
[17:42:12.010]   - Field: ‘gc’
[17:42:12.010]   - Field: ‘job’
[17:42:12.010]   - Field: ‘conditions’
[17:42:12.011]   - Field: ‘expr’
[17:42:12.011]   - Field: ‘uuid’
[17:42:12.011]   - Field: ‘seed’
[17:42:12.011]   - Field: ‘version’
[17:42:12.016]   - Field: ‘result’
[17:42:12.016]   - Field: ‘asynchronous’
[17:42:12.016]   - Field: ‘calls’
[17:42:12.016]   - Field: ‘globals’
[17:42:12.016]   - Field: ‘stdout’
[17:42:12.017]   - Field: ‘earlySignal’
[17:42:12.017]   - Field: ‘lazy’
[17:42:12.017]   - Field: ‘state’
[17:42:12.017] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:12.017] - Launch lazy future ...
[17:42:12.018] Packages needed by the future expression (n = 0): <none>
[17:42:12.018] Packages needed by future strategies (n = 0): <none>
[17:42:12.019] {
[17:42:12.019]     {
[17:42:12.019]         {
[17:42:12.019]             ...future.startTime <- base::Sys.time()
[17:42:12.019]             {
[17:42:12.019]                 {
[17:42:12.019]                   {
[17:42:12.019]                     {
[17:42:12.019]                       base::local({
[17:42:12.019]                         has_future <- base::requireNamespace("future", 
[17:42:12.019]                           quietly = TRUE)
[17:42:12.019]                         if (has_future) {
[17:42:12.019]                           ns <- base::getNamespace("future")
[17:42:12.019]                           version <- ns[[".package"]][["version"]]
[17:42:12.019]                           if (is.null(version)) 
[17:42:12.019]                             version <- utils::packageVersion("future")
[17:42:12.019]                         }
[17:42:12.019]                         else {
[17:42:12.019]                           version <- NULL
[17:42:12.019]                         }
[17:42:12.019]                         if (!has_future || version < "1.8.0") {
[17:42:12.019]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.019]                             "", base::R.version$version.string), 
[17:42:12.019]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.019]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.019]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.019]                               "release", "version")], collapse = " "), 
[17:42:12.019]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.019]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.019]                             info)
[17:42:12.019]                           info <- base::paste(info, collapse = "; ")
[17:42:12.019]                           if (!has_future) {
[17:42:12.019]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.019]                               info)
[17:42:12.019]                           }
[17:42:12.019]                           else {
[17:42:12.019]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.019]                               info, version)
[17:42:12.019]                           }
[17:42:12.019]                           base::stop(msg)
[17:42:12.019]                         }
[17:42:12.019]                       })
[17:42:12.019]                     }
[17:42:12.019]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.019]                     base::options(mc.cores = 1L)
[17:42:12.019]                   }
[17:42:12.019]                   options(future.plan = NULL)
[17:42:12.019]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.019]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.019]                 }
[17:42:12.019]                 ...future.workdir <- getwd()
[17:42:12.019]             }
[17:42:12.019]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.019]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.019]         }
[17:42:12.019]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.019]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.019]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.019]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.019]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.019]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.019]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.019]             base::names(...future.oldOptions))
[17:42:12.019]     }
[17:42:12.019]     if (FALSE) {
[17:42:12.019]     }
[17:42:12.019]     else {
[17:42:12.019]         if (TRUE) {
[17:42:12.019]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.019]                 open = "w")
[17:42:12.019]         }
[17:42:12.019]         else {
[17:42:12.019]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.019]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.019]         }
[17:42:12.019]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.019]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.019]             base::sink(type = "output", split = FALSE)
[17:42:12.019]             base::close(...future.stdout)
[17:42:12.019]         }, add = TRUE)
[17:42:12.019]     }
[17:42:12.019]     ...future.frame <- base::sys.nframe()
[17:42:12.019]     ...future.conditions <- base::list()
[17:42:12.019]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.019]     if (FALSE) {
[17:42:12.019]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.019]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.019]     }
[17:42:12.019]     ...future.result <- base::tryCatch({
[17:42:12.019]         base::withCallingHandlers({
[17:42:12.019]             ...future.value <- base::withVisible(base::local({
[17:42:12.019]                 withCallingHandlers({
[17:42:12.019]                   {
[17:42:12.019]                     4
[17:42:12.019]                   }
[17:42:12.019]                 }, immediateCondition = function(cond) {
[17:42:12.019]                   save_rds <- function (object, pathname, ...) 
[17:42:12.019]                   {
[17:42:12.019]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:12.019]                     if (file_test("-f", pathname_tmp)) {
[17:42:12.019]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.019]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:12.019]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.019]                         fi_tmp[["mtime"]])
[17:42:12.019]                     }
[17:42:12.019]                     tryCatch({
[17:42:12.019]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:12.019]                     }, error = function(ex) {
[17:42:12.019]                       msg <- conditionMessage(ex)
[17:42:12.019]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.019]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:12.019]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.019]                         fi_tmp[["mtime"]], msg)
[17:42:12.019]                       ex$message <- msg
[17:42:12.019]                       stop(ex)
[17:42:12.019]                     })
[17:42:12.019]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:12.019]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:12.019]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:12.019]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.019]                       fi <- file.info(pathname)
[17:42:12.019]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:12.019]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.019]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:12.019]                         fi[["size"]], fi[["mtime"]])
[17:42:12.019]                       stop(msg)
[17:42:12.019]                     }
[17:42:12.019]                     invisible(pathname)
[17:42:12.019]                   }
[17:42:12.019]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:12.019]                     rootPath = tempdir()) 
[17:42:12.019]                   {
[17:42:12.019]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:12.019]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:12.019]                       tmpdir = path, fileext = ".rds")
[17:42:12.019]                     save_rds(obj, file)
[17:42:12.019]                   }
[17:42:12.019]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:12.019]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.019]                   {
[17:42:12.019]                     inherits <- base::inherits
[17:42:12.019]                     invokeRestart <- base::invokeRestart
[17:42:12.019]                     is.null <- base::is.null
[17:42:12.019]                     muffled <- FALSE
[17:42:12.019]                     if (inherits(cond, "message")) {
[17:42:12.019]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.019]                       if (muffled) 
[17:42:12.019]                         invokeRestart("muffleMessage")
[17:42:12.019]                     }
[17:42:12.019]                     else if (inherits(cond, "warning")) {
[17:42:12.019]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.019]                       if (muffled) 
[17:42:12.019]                         invokeRestart("muffleWarning")
[17:42:12.019]                     }
[17:42:12.019]                     else if (inherits(cond, "condition")) {
[17:42:12.019]                       if (!is.null(pattern)) {
[17:42:12.019]                         computeRestarts <- base::computeRestarts
[17:42:12.019]                         grepl <- base::grepl
[17:42:12.019]                         restarts <- computeRestarts(cond)
[17:42:12.019]                         for (restart in restarts) {
[17:42:12.019]                           name <- restart$name
[17:42:12.019]                           if (is.null(name)) 
[17:42:12.019]                             next
[17:42:12.019]                           if (!grepl(pattern, name)) 
[17:42:12.019]                             next
[17:42:12.019]                           invokeRestart(restart)
[17:42:12.019]                           muffled <- TRUE
[17:42:12.019]                           break
[17:42:12.019]                         }
[17:42:12.019]                       }
[17:42:12.019]                     }
[17:42:12.019]                     invisible(muffled)
[17:42:12.019]                   }
[17:42:12.019]                   muffleCondition(cond)
[17:42:12.019]                 })
[17:42:12.019]             }))
[17:42:12.019]             future::FutureResult(value = ...future.value$value, 
[17:42:12.019]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.019]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.019]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.019]                     ...future.globalenv.names))
[17:42:12.019]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.019]         }, condition = base::local({
[17:42:12.019]             c <- base::c
[17:42:12.019]             inherits <- base::inherits
[17:42:12.019]             invokeRestart <- base::invokeRestart
[17:42:12.019]             length <- base::length
[17:42:12.019]             list <- base::list
[17:42:12.019]             seq.int <- base::seq.int
[17:42:12.019]             signalCondition <- base::signalCondition
[17:42:12.019]             sys.calls <- base::sys.calls
[17:42:12.019]             `[[` <- base::`[[`
[17:42:12.019]             `+` <- base::`+`
[17:42:12.019]             `<<-` <- base::`<<-`
[17:42:12.019]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.019]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.019]                   3L)]
[17:42:12.019]             }
[17:42:12.019]             function(cond) {
[17:42:12.019]                 is_error <- inherits(cond, "error")
[17:42:12.019]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.019]                   NULL)
[17:42:12.019]                 if (is_error) {
[17:42:12.019]                   sessionInformation <- function() {
[17:42:12.019]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.019]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.019]                       search = base::search(), system = base::Sys.info())
[17:42:12.019]                   }
[17:42:12.019]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.019]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.019]                     cond$call), session = sessionInformation(), 
[17:42:12.019]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.019]                   signalCondition(cond)
[17:42:12.019]                 }
[17:42:12.019]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.019]                 "immediateCondition"))) {
[17:42:12.019]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.019]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.019]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.019]                   if (TRUE && !signal) {
[17:42:12.019]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.019]                     {
[17:42:12.019]                       inherits <- base::inherits
[17:42:12.019]                       invokeRestart <- base::invokeRestart
[17:42:12.019]                       is.null <- base::is.null
[17:42:12.019]                       muffled <- FALSE
[17:42:12.019]                       if (inherits(cond, "message")) {
[17:42:12.019]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.019]                         if (muffled) 
[17:42:12.019]                           invokeRestart("muffleMessage")
[17:42:12.019]                       }
[17:42:12.019]                       else if (inherits(cond, "warning")) {
[17:42:12.019]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.019]                         if (muffled) 
[17:42:12.019]                           invokeRestart("muffleWarning")
[17:42:12.019]                       }
[17:42:12.019]                       else if (inherits(cond, "condition")) {
[17:42:12.019]                         if (!is.null(pattern)) {
[17:42:12.019]                           computeRestarts <- base::computeRestarts
[17:42:12.019]                           grepl <- base::grepl
[17:42:12.019]                           restarts <- computeRestarts(cond)
[17:42:12.019]                           for (restart in restarts) {
[17:42:12.019]                             name <- restart$name
[17:42:12.019]                             if (is.null(name)) 
[17:42:12.019]                               next
[17:42:12.019]                             if (!grepl(pattern, name)) 
[17:42:12.019]                               next
[17:42:12.019]                             invokeRestart(restart)
[17:42:12.019]                             muffled <- TRUE
[17:42:12.019]                             break
[17:42:12.019]                           }
[17:42:12.019]                         }
[17:42:12.019]                       }
[17:42:12.019]                       invisible(muffled)
[17:42:12.019]                     }
[17:42:12.019]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.019]                   }
[17:42:12.019]                 }
[17:42:12.019]                 else {
[17:42:12.019]                   if (TRUE) {
[17:42:12.019]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.019]                     {
[17:42:12.019]                       inherits <- base::inherits
[17:42:12.019]                       invokeRestart <- base::invokeRestart
[17:42:12.019]                       is.null <- base::is.null
[17:42:12.019]                       muffled <- FALSE
[17:42:12.019]                       if (inherits(cond, "message")) {
[17:42:12.019]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.019]                         if (muffled) 
[17:42:12.019]                           invokeRestart("muffleMessage")
[17:42:12.019]                       }
[17:42:12.019]                       else if (inherits(cond, "warning")) {
[17:42:12.019]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.019]                         if (muffled) 
[17:42:12.019]                           invokeRestart("muffleWarning")
[17:42:12.019]                       }
[17:42:12.019]                       else if (inherits(cond, "condition")) {
[17:42:12.019]                         if (!is.null(pattern)) {
[17:42:12.019]                           computeRestarts <- base::computeRestarts
[17:42:12.019]                           grepl <- base::grepl
[17:42:12.019]                           restarts <- computeRestarts(cond)
[17:42:12.019]                           for (restart in restarts) {
[17:42:12.019]                             name <- restart$name
[17:42:12.019]                             if (is.null(name)) 
[17:42:12.019]                               next
[17:42:12.019]                             if (!grepl(pattern, name)) 
[17:42:12.019]                               next
[17:42:12.019]                             invokeRestart(restart)
[17:42:12.019]                             muffled <- TRUE
[17:42:12.019]                             break
[17:42:12.019]                           }
[17:42:12.019]                         }
[17:42:12.019]                       }
[17:42:12.019]                       invisible(muffled)
[17:42:12.019]                     }
[17:42:12.019]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.019]                   }
[17:42:12.019]                 }
[17:42:12.019]             }
[17:42:12.019]         }))
[17:42:12.019]     }, error = function(ex) {
[17:42:12.019]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.019]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.019]                 ...future.rng), started = ...future.startTime, 
[17:42:12.019]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.019]             version = "1.8"), class = "FutureResult")
[17:42:12.019]     }, finally = {
[17:42:12.019]         if (!identical(...future.workdir, getwd())) 
[17:42:12.019]             setwd(...future.workdir)
[17:42:12.019]         {
[17:42:12.019]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.019]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.019]             }
[17:42:12.019]             base::options(...future.oldOptions)
[17:42:12.019]             if (.Platform$OS.type == "windows") {
[17:42:12.019]                 old_names <- names(...future.oldEnvVars)
[17:42:12.019]                 envs <- base::Sys.getenv()
[17:42:12.019]                 names <- names(envs)
[17:42:12.019]                 common <- intersect(names, old_names)
[17:42:12.019]                 added <- setdiff(names, old_names)
[17:42:12.019]                 removed <- setdiff(old_names, names)
[17:42:12.019]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.019]                   envs[common]]
[17:42:12.019]                 NAMES <- toupper(changed)
[17:42:12.019]                 args <- list()
[17:42:12.019]                 for (kk in seq_along(NAMES)) {
[17:42:12.019]                   name <- changed[[kk]]
[17:42:12.019]                   NAME <- NAMES[[kk]]
[17:42:12.019]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.019]                     next
[17:42:12.019]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.019]                 }
[17:42:12.019]                 NAMES <- toupper(added)
[17:42:12.019]                 for (kk in seq_along(NAMES)) {
[17:42:12.019]                   name <- added[[kk]]
[17:42:12.019]                   NAME <- NAMES[[kk]]
[17:42:12.019]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.019]                     next
[17:42:12.019]                   args[[name]] <- ""
[17:42:12.019]                 }
[17:42:12.019]                 NAMES <- toupper(removed)
[17:42:12.019]                 for (kk in seq_along(NAMES)) {
[17:42:12.019]                   name <- removed[[kk]]
[17:42:12.019]                   NAME <- NAMES[[kk]]
[17:42:12.019]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.019]                     next
[17:42:12.019]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.019]                 }
[17:42:12.019]                 if (length(args) > 0) 
[17:42:12.019]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.019]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.019]             }
[17:42:12.019]             else {
[17:42:12.019]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.019]             }
[17:42:12.019]             {
[17:42:12.019]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.019]                   0L) {
[17:42:12.019]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.019]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.019]                   base::options(opts)
[17:42:12.019]                 }
[17:42:12.019]                 {
[17:42:12.019]                   {
[17:42:12.019]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.019]                     NULL
[17:42:12.019]                   }
[17:42:12.019]                   options(future.plan = NULL)
[17:42:12.019]                   if (is.na(NA_character_)) 
[17:42:12.019]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.019]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.019]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:12.019]                     envir = parent.frame()) 
[17:42:12.019]                   {
[17:42:12.019]                     default_workers <- missing(workers)
[17:42:12.019]                     if (is.function(workers)) 
[17:42:12.019]                       workers <- workers()
[17:42:12.019]                     workers <- structure(as.integer(workers), 
[17:42:12.019]                       class = class(workers))
[17:42:12.019]                     stop_if_not(is.finite(workers), workers >= 
[17:42:12.019]                       1L)
[17:42:12.019]                     if ((workers == 1L && !inherits(workers, 
[17:42:12.019]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:12.019]                       if (default_workers) 
[17:42:12.019]                         supportsMulticore(warn = TRUE)
[17:42:12.019]                       return(sequential(..., envir = envir))
[17:42:12.019]                     }
[17:42:12.019]                     oopts <- options(mc.cores = workers)
[17:42:12.019]                     on.exit(options(oopts))
[17:42:12.019]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:12.019]                       envir = envir)
[17:42:12.019]                     if (!future$lazy) 
[17:42:12.019]                       future <- run(future)
[17:42:12.019]                     invisible(future)
[17:42:12.019]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.019]                 }
[17:42:12.019]             }
[17:42:12.019]         }
[17:42:12.019]     })
[17:42:12.019]     if (TRUE) {
[17:42:12.019]         base::sink(type = "output", split = FALSE)
[17:42:12.019]         if (TRUE) {
[17:42:12.019]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.019]         }
[17:42:12.019]         else {
[17:42:12.019]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.019]         }
[17:42:12.019]         base::close(...future.stdout)
[17:42:12.019]         ...future.stdout <- NULL
[17:42:12.019]     }
[17:42:12.019]     ...future.result$conditions <- ...future.conditions
[17:42:12.019]     ...future.result$finished <- base::Sys.time()
[17:42:12.019]     ...future.result
[17:42:12.019] }
[17:42:12.022] requestCore(): workers = 2
[17:42:12.029] MulticoreFuture started
[17:42:12.029] - Launch lazy future ... done
[17:42:12.029] run() for ‘MulticoreFuture’ ... done
[17:42:12.030] plan(): Setting new future strategy stack:
[17:42:12.030] List of future strategies:
[17:42:12.030] 1. sequential:
[17:42:12.030]    - args: function (..., envir = parent.frame())
[17:42:12.030]    - tweaked: FALSE
[17:42:12.030]    - call: NULL
[17:42:12.031] plan(): nbrOfWorkers() = 1
u$a = 2
[17:42:12.033] plan(): Setting new future strategy stack:
[17:42:12.034] List of future strategies:
[17:42:12.034] 1. multicore:
[17:42:12.034]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.034]    - tweaked: FALSE
[17:42:12.034]    - call: plan(strategy)
[17:42:12.040] plan(): nbrOfWorkers() = 2
v$a = 4
[17:42:12.041] getGlobalsAndPackages() ...
[17:42:12.041] Searching for globals...
[17:42:12.042] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:12.043] Searching for globals ... DONE
[17:42:12.043] Resolving globals: FALSE
[17:42:12.043] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:12.044] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:12.044] - globals: [1] ‘a’
[17:42:12.044] 
[17:42:12.044] getGlobalsAndPackages() ... DONE
[17:42:12.045] run() for ‘Future’ ...
[17:42:12.045] - state: ‘created’
[17:42:12.045] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.049] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.049] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:12.050]   - Field: ‘label’
[17:42:12.050]   - Field: ‘local’
[17:42:12.050]   - Field: ‘owner’
[17:42:12.050]   - Field: ‘envir’
[17:42:12.050]   - Field: ‘workers’
[17:42:12.050]   - Field: ‘packages’
[17:42:12.050]   - Field: ‘gc’
[17:42:12.050]   - Field: ‘job’
[17:42:12.051]   - Field: ‘conditions’
[17:42:12.051]   - Field: ‘expr’
[17:42:12.051]   - Field: ‘uuid’
[17:42:12.051]   - Field: ‘seed’
[17:42:12.051]   - Field: ‘version’
[17:42:12.051]   - Field: ‘result’
[17:42:12.051]   - Field: ‘asynchronous’
[17:42:12.051]   - Field: ‘calls’
[17:42:12.052]   - Field: ‘globals’
[17:42:12.052]   - Field: ‘stdout’
[17:42:12.052]   - Field: ‘earlySignal’
[17:42:12.052]   - Field: ‘lazy’
[17:42:12.052]   - Field: ‘state’
[17:42:12.052] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:12.052] - Launch lazy future ...
[17:42:12.053] Packages needed by the future expression (n = 0): <none>
[17:42:12.053] Packages needed by future strategies (n = 0): <none>
[17:42:12.053] {
[17:42:12.053]     {
[17:42:12.053]         {
[17:42:12.053]             ...future.startTime <- base::Sys.time()
[17:42:12.053]             {
[17:42:12.053]                 {
[17:42:12.053]                   {
[17:42:12.053]                     {
[17:42:12.053]                       base::local({
[17:42:12.053]                         has_future <- base::requireNamespace("future", 
[17:42:12.053]                           quietly = TRUE)
[17:42:12.053]                         if (has_future) {
[17:42:12.053]                           ns <- base::getNamespace("future")
[17:42:12.053]                           version <- ns[[".package"]][["version"]]
[17:42:12.053]                           if (is.null(version)) 
[17:42:12.053]                             version <- utils::packageVersion("future")
[17:42:12.053]                         }
[17:42:12.053]                         else {
[17:42:12.053]                           version <- NULL
[17:42:12.053]                         }
[17:42:12.053]                         if (!has_future || version < "1.8.0") {
[17:42:12.053]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.053]                             "", base::R.version$version.string), 
[17:42:12.053]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.053]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.053]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.053]                               "release", "version")], collapse = " "), 
[17:42:12.053]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.053]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.053]                             info)
[17:42:12.053]                           info <- base::paste(info, collapse = "; ")
[17:42:12.053]                           if (!has_future) {
[17:42:12.053]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.053]                               info)
[17:42:12.053]                           }
[17:42:12.053]                           else {
[17:42:12.053]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.053]                               info, version)
[17:42:12.053]                           }
[17:42:12.053]                           base::stop(msg)
[17:42:12.053]                         }
[17:42:12.053]                       })
[17:42:12.053]                     }
[17:42:12.053]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.053]                     base::options(mc.cores = 1L)
[17:42:12.053]                   }
[17:42:12.053]                   options(future.plan = NULL)
[17:42:12.053]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.053]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.053]                 }
[17:42:12.053]                 ...future.workdir <- getwd()
[17:42:12.053]             }
[17:42:12.053]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.053]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.053]         }
[17:42:12.053]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.053]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.053]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.053]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.053]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.053]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.053]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.053]             base::names(...future.oldOptions))
[17:42:12.053]     }
[17:42:12.053]     if (FALSE) {
[17:42:12.053]     }
[17:42:12.053]     else {
[17:42:12.053]         if (TRUE) {
[17:42:12.053]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.053]                 open = "w")
[17:42:12.053]         }
[17:42:12.053]         else {
[17:42:12.053]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.053]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.053]         }
[17:42:12.053]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.053]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.053]             base::sink(type = "output", split = FALSE)
[17:42:12.053]             base::close(...future.stdout)
[17:42:12.053]         }, add = TRUE)
[17:42:12.053]     }
[17:42:12.053]     ...future.frame <- base::sys.nframe()
[17:42:12.053]     ...future.conditions <- base::list()
[17:42:12.053]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.053]     if (FALSE) {
[17:42:12.053]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.053]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.053]     }
[17:42:12.053]     ...future.result <- base::tryCatch({
[17:42:12.053]         base::withCallingHandlers({
[17:42:12.053]             ...future.value <- base::withVisible(base::local({
[17:42:12.053]                 withCallingHandlers({
[17:42:12.053]                   {
[17:42:12.053]                     2 * a
[17:42:12.053]                   }
[17:42:12.053]                 }, immediateCondition = function(cond) {
[17:42:12.053]                   save_rds <- function (object, pathname, ...) 
[17:42:12.053]                   {
[17:42:12.053]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:12.053]                     if (file_test("-f", pathname_tmp)) {
[17:42:12.053]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.053]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:12.053]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.053]                         fi_tmp[["mtime"]])
[17:42:12.053]                     }
[17:42:12.053]                     tryCatch({
[17:42:12.053]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:12.053]                     }, error = function(ex) {
[17:42:12.053]                       msg <- conditionMessage(ex)
[17:42:12.053]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.053]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:12.053]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.053]                         fi_tmp[["mtime"]], msg)
[17:42:12.053]                       ex$message <- msg
[17:42:12.053]                       stop(ex)
[17:42:12.053]                     })
[17:42:12.053]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:12.053]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:12.053]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:12.053]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.053]                       fi <- file.info(pathname)
[17:42:12.053]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:12.053]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.053]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:12.053]                         fi[["size"]], fi[["mtime"]])
[17:42:12.053]                       stop(msg)
[17:42:12.053]                     }
[17:42:12.053]                     invisible(pathname)
[17:42:12.053]                   }
[17:42:12.053]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:12.053]                     rootPath = tempdir()) 
[17:42:12.053]                   {
[17:42:12.053]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:12.053]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:12.053]                       tmpdir = path, fileext = ".rds")
[17:42:12.053]                     save_rds(obj, file)
[17:42:12.053]                   }
[17:42:12.053]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:12.053]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.053]                   {
[17:42:12.053]                     inherits <- base::inherits
[17:42:12.053]                     invokeRestart <- base::invokeRestart
[17:42:12.053]                     is.null <- base::is.null
[17:42:12.053]                     muffled <- FALSE
[17:42:12.053]                     if (inherits(cond, "message")) {
[17:42:12.053]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.053]                       if (muffled) 
[17:42:12.053]                         invokeRestart("muffleMessage")
[17:42:12.053]                     }
[17:42:12.053]                     else if (inherits(cond, "warning")) {
[17:42:12.053]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.053]                       if (muffled) 
[17:42:12.053]                         invokeRestart("muffleWarning")
[17:42:12.053]                     }
[17:42:12.053]                     else if (inherits(cond, "condition")) {
[17:42:12.053]                       if (!is.null(pattern)) {
[17:42:12.053]                         computeRestarts <- base::computeRestarts
[17:42:12.053]                         grepl <- base::grepl
[17:42:12.053]                         restarts <- computeRestarts(cond)
[17:42:12.053]                         for (restart in restarts) {
[17:42:12.053]                           name <- restart$name
[17:42:12.053]                           if (is.null(name)) 
[17:42:12.053]                             next
[17:42:12.053]                           if (!grepl(pattern, name)) 
[17:42:12.053]                             next
[17:42:12.053]                           invokeRestart(restart)
[17:42:12.053]                           muffled <- TRUE
[17:42:12.053]                           break
[17:42:12.053]                         }
[17:42:12.053]                       }
[17:42:12.053]                     }
[17:42:12.053]                     invisible(muffled)
[17:42:12.053]                   }
[17:42:12.053]                   muffleCondition(cond)
[17:42:12.053]                 })
[17:42:12.053]             }))
[17:42:12.053]             future::FutureResult(value = ...future.value$value, 
[17:42:12.053]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.053]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.053]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.053]                     ...future.globalenv.names))
[17:42:12.053]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.053]         }, condition = base::local({
[17:42:12.053]             c <- base::c
[17:42:12.053]             inherits <- base::inherits
[17:42:12.053]             invokeRestart <- base::invokeRestart
[17:42:12.053]             length <- base::length
[17:42:12.053]             list <- base::list
[17:42:12.053]             seq.int <- base::seq.int
[17:42:12.053]             signalCondition <- base::signalCondition
[17:42:12.053]             sys.calls <- base::sys.calls
[17:42:12.053]             `[[` <- base::`[[`
[17:42:12.053]             `+` <- base::`+`
[17:42:12.053]             `<<-` <- base::`<<-`
[17:42:12.053]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.053]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.053]                   3L)]
[17:42:12.053]             }
[17:42:12.053]             function(cond) {
[17:42:12.053]                 is_error <- inherits(cond, "error")
[17:42:12.053]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.053]                   NULL)
[17:42:12.053]                 if (is_error) {
[17:42:12.053]                   sessionInformation <- function() {
[17:42:12.053]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.053]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.053]                       search = base::search(), system = base::Sys.info())
[17:42:12.053]                   }
[17:42:12.053]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.053]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.053]                     cond$call), session = sessionInformation(), 
[17:42:12.053]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.053]                   signalCondition(cond)
[17:42:12.053]                 }
[17:42:12.053]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.053]                 "immediateCondition"))) {
[17:42:12.053]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.053]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.053]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.053]                   if (TRUE && !signal) {
[17:42:12.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.053]                     {
[17:42:12.053]                       inherits <- base::inherits
[17:42:12.053]                       invokeRestart <- base::invokeRestart
[17:42:12.053]                       is.null <- base::is.null
[17:42:12.053]                       muffled <- FALSE
[17:42:12.053]                       if (inherits(cond, "message")) {
[17:42:12.053]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.053]                         if (muffled) 
[17:42:12.053]                           invokeRestart("muffleMessage")
[17:42:12.053]                       }
[17:42:12.053]                       else if (inherits(cond, "warning")) {
[17:42:12.053]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.053]                         if (muffled) 
[17:42:12.053]                           invokeRestart("muffleWarning")
[17:42:12.053]                       }
[17:42:12.053]                       else if (inherits(cond, "condition")) {
[17:42:12.053]                         if (!is.null(pattern)) {
[17:42:12.053]                           computeRestarts <- base::computeRestarts
[17:42:12.053]                           grepl <- base::grepl
[17:42:12.053]                           restarts <- computeRestarts(cond)
[17:42:12.053]                           for (restart in restarts) {
[17:42:12.053]                             name <- restart$name
[17:42:12.053]                             if (is.null(name)) 
[17:42:12.053]                               next
[17:42:12.053]                             if (!grepl(pattern, name)) 
[17:42:12.053]                               next
[17:42:12.053]                             invokeRestart(restart)
[17:42:12.053]                             muffled <- TRUE
[17:42:12.053]                             break
[17:42:12.053]                           }
[17:42:12.053]                         }
[17:42:12.053]                       }
[17:42:12.053]                       invisible(muffled)
[17:42:12.053]                     }
[17:42:12.053]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.053]                   }
[17:42:12.053]                 }
[17:42:12.053]                 else {
[17:42:12.053]                   if (TRUE) {
[17:42:12.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.053]                     {
[17:42:12.053]                       inherits <- base::inherits
[17:42:12.053]                       invokeRestart <- base::invokeRestart
[17:42:12.053]                       is.null <- base::is.null
[17:42:12.053]                       muffled <- FALSE
[17:42:12.053]                       if (inherits(cond, "message")) {
[17:42:12.053]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.053]                         if (muffled) 
[17:42:12.053]                           invokeRestart("muffleMessage")
[17:42:12.053]                       }
[17:42:12.053]                       else if (inherits(cond, "warning")) {
[17:42:12.053]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.053]                         if (muffled) 
[17:42:12.053]                           invokeRestart("muffleWarning")
[17:42:12.053]                       }
[17:42:12.053]                       else if (inherits(cond, "condition")) {
[17:42:12.053]                         if (!is.null(pattern)) {
[17:42:12.053]                           computeRestarts <- base::computeRestarts
[17:42:12.053]                           grepl <- base::grepl
[17:42:12.053]                           restarts <- computeRestarts(cond)
[17:42:12.053]                           for (restart in restarts) {
[17:42:12.053]                             name <- restart$name
[17:42:12.053]                             if (is.null(name)) 
[17:42:12.053]                               next
[17:42:12.053]                             if (!grepl(pattern, name)) 
[17:42:12.053]                               next
[17:42:12.053]                             invokeRestart(restart)
[17:42:12.053]                             muffled <- TRUE
[17:42:12.053]                             break
[17:42:12.053]                           }
[17:42:12.053]                         }
[17:42:12.053]                       }
[17:42:12.053]                       invisible(muffled)
[17:42:12.053]                     }
[17:42:12.053]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.053]                   }
[17:42:12.053]                 }
[17:42:12.053]             }
[17:42:12.053]         }))
[17:42:12.053]     }, error = function(ex) {
[17:42:12.053]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.053]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.053]                 ...future.rng), started = ...future.startTime, 
[17:42:12.053]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.053]             version = "1.8"), class = "FutureResult")
[17:42:12.053]     }, finally = {
[17:42:12.053]         if (!identical(...future.workdir, getwd())) 
[17:42:12.053]             setwd(...future.workdir)
[17:42:12.053]         {
[17:42:12.053]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.053]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.053]             }
[17:42:12.053]             base::options(...future.oldOptions)
[17:42:12.053]             if (.Platform$OS.type == "windows") {
[17:42:12.053]                 old_names <- names(...future.oldEnvVars)
[17:42:12.053]                 envs <- base::Sys.getenv()
[17:42:12.053]                 names <- names(envs)
[17:42:12.053]                 common <- intersect(names, old_names)
[17:42:12.053]                 added <- setdiff(names, old_names)
[17:42:12.053]                 removed <- setdiff(old_names, names)
[17:42:12.053]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.053]                   envs[common]]
[17:42:12.053]                 NAMES <- toupper(changed)
[17:42:12.053]                 args <- list()
[17:42:12.053]                 for (kk in seq_along(NAMES)) {
[17:42:12.053]                   name <- changed[[kk]]
[17:42:12.053]                   NAME <- NAMES[[kk]]
[17:42:12.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.053]                     next
[17:42:12.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.053]                 }
[17:42:12.053]                 NAMES <- toupper(added)
[17:42:12.053]                 for (kk in seq_along(NAMES)) {
[17:42:12.053]                   name <- added[[kk]]
[17:42:12.053]                   NAME <- NAMES[[kk]]
[17:42:12.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.053]                     next
[17:42:12.053]                   args[[name]] <- ""
[17:42:12.053]                 }
[17:42:12.053]                 NAMES <- toupper(removed)
[17:42:12.053]                 for (kk in seq_along(NAMES)) {
[17:42:12.053]                   name <- removed[[kk]]
[17:42:12.053]                   NAME <- NAMES[[kk]]
[17:42:12.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.053]                     next
[17:42:12.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.053]                 }
[17:42:12.053]                 if (length(args) > 0) 
[17:42:12.053]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.053]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.053]             }
[17:42:12.053]             else {
[17:42:12.053]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.053]             }
[17:42:12.053]             {
[17:42:12.053]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.053]                   0L) {
[17:42:12.053]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.053]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.053]                   base::options(opts)
[17:42:12.053]                 }
[17:42:12.053]                 {
[17:42:12.053]                   {
[17:42:12.053]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.053]                     NULL
[17:42:12.053]                   }
[17:42:12.053]                   options(future.plan = NULL)
[17:42:12.053]                   if (is.na(NA_character_)) 
[17:42:12.053]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.053]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.053]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:12.053]                     envir = parent.frame()) 
[17:42:12.053]                   {
[17:42:12.053]                     default_workers <- missing(workers)
[17:42:12.053]                     if (is.function(workers)) 
[17:42:12.053]                       workers <- workers()
[17:42:12.053]                     workers <- structure(as.integer(workers), 
[17:42:12.053]                       class = class(workers))
[17:42:12.053]                     stop_if_not(is.finite(workers), workers >= 
[17:42:12.053]                       1L)
[17:42:12.053]                     if ((workers == 1L && !inherits(workers, 
[17:42:12.053]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:12.053]                       if (default_workers) 
[17:42:12.053]                         supportsMulticore(warn = TRUE)
[17:42:12.053]                       return(sequential(..., envir = envir))
[17:42:12.053]                     }
[17:42:12.053]                     oopts <- options(mc.cores = workers)
[17:42:12.053]                     on.exit(options(oopts))
[17:42:12.053]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:12.053]                       envir = envir)
[17:42:12.053]                     if (!future$lazy) 
[17:42:12.053]                       future <- run(future)
[17:42:12.053]                     invisible(future)
[17:42:12.053]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.053]                 }
[17:42:12.053]             }
[17:42:12.053]         }
[17:42:12.053]     })
[17:42:12.053]     if (TRUE) {
[17:42:12.053]         base::sink(type = "output", split = FALSE)
[17:42:12.053]         if (TRUE) {
[17:42:12.053]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.053]         }
[17:42:12.053]         else {
[17:42:12.053]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.053]         }
[17:42:12.053]         base::close(...future.stdout)
[17:42:12.053]         ...future.stdout <- NULL
[17:42:12.053]     }
[17:42:12.053]     ...future.result$conditions <- ...future.conditions
[17:42:12.053]     ...future.result$finished <- base::Sys.time()
[17:42:12.053]     ...future.result
[17:42:12.053] }
[17:42:12.056] assign_globals() ...
[17:42:12.056] List of 1
[17:42:12.056]  $ a: num 1
[17:42:12.056]  - attr(*, "where")=List of 1
[17:42:12.056]   ..$ a:<environment: R_EmptyEnv> 
[17:42:12.056]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:12.056]  - attr(*, "resolved")= logi FALSE
[17:42:12.056]  - attr(*, "total_size")= num 56
[17:42:12.056]  - attr(*, "already-done")= logi TRUE
[17:42:12.060] - copied ‘a’ to environment
[17:42:12.060] assign_globals() ... done
[17:42:12.060] requestCore(): workers = 2
[17:42:12.062] MulticoreFuture started
[17:42:12.062] - Launch lazy future ... done
[17:42:12.062] run() for ‘MulticoreFuture’ ... done
[17:42:12.063] plan(): Setting new future strategy stack:
[17:42:12.063] List of future strategies:
[17:42:12.063] 1. sequential:
[17:42:12.063]    - args: function (..., envir = parent.frame())
[17:42:12.063]    - tweaked: FALSE
[17:42:12.063]    - call: NULL
[17:42:12.064] plan(): nbrOfWorkers() = 1
[17:42:12.066] plan(): Setting new future strategy stack:
[17:42:12.066] List of future strategies:
[17:42:12.066] 1. multicore:
[17:42:12.066]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.066]    - tweaked: FALSE
[17:42:12.066]    - call: plan(strategy)
[17:42:12.072] plan(): nbrOfWorkers() = 2
[17:42:12.073] getGlobalsAndPackages() ...
[17:42:12.073] Searching for globals...
[17:42:12.075] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:12.075] Searching for globals ... DONE
[17:42:12.075] Resolving globals: FALSE
[17:42:12.075] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:12.076] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:12.076] - globals: [1] ‘a’
[17:42:12.076] 
[17:42:12.076] getGlobalsAndPackages() ... DONE
[17:42:12.077] run() for ‘Future’ ...
[17:42:12.077] - state: ‘created’
[17:42:12.077] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.081] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.081] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:12.081]   - Field: ‘label’
[17:42:12.082]   - Field: ‘local’
[17:42:12.082]   - Field: ‘owner’
[17:42:12.082]   - Field: ‘envir’
[17:42:12.082]   - Field: ‘workers’
[17:42:12.082]   - Field: ‘packages’
[17:42:12.082]   - Field: ‘gc’
[17:42:12.082]   - Field: ‘job’
[17:42:12.082]   - Field: ‘conditions’
[17:42:12.082]   - Field: ‘expr’
[17:42:12.083]   - Field: ‘uuid’
[17:42:12.083]   - Field: ‘seed’
[17:42:12.083]   - Field: ‘version’
[17:42:12.083]   - Field: ‘result’
[17:42:12.083]   - Field: ‘asynchronous’
[17:42:12.083]   - Field: ‘calls’
[17:42:12.083]   - Field: ‘globals’
[17:42:12.083]   - Field: ‘stdout’
[17:42:12.084]   - Field: ‘earlySignal’
[17:42:12.084]   - Field: ‘lazy’
[17:42:12.084]   - Field: ‘state’
[17:42:12.084] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:12.084] - Launch lazy future ...
[17:42:12.084] Packages needed by the future expression (n = 0): <none>
[17:42:12.084] Packages needed by future strategies (n = 0): <none>
[17:42:12.088] {
[17:42:12.088]     {
[17:42:12.088]         {
[17:42:12.088]             ...future.startTime <- base::Sys.time()
[17:42:12.088]             {
[17:42:12.088]                 {
[17:42:12.088]                   {
[17:42:12.088]                     {
[17:42:12.088]                       base::local({
[17:42:12.088]                         has_future <- base::requireNamespace("future", 
[17:42:12.088]                           quietly = TRUE)
[17:42:12.088]                         if (has_future) {
[17:42:12.088]                           ns <- base::getNamespace("future")
[17:42:12.088]                           version <- ns[[".package"]][["version"]]
[17:42:12.088]                           if (is.null(version)) 
[17:42:12.088]                             version <- utils::packageVersion("future")
[17:42:12.088]                         }
[17:42:12.088]                         else {
[17:42:12.088]                           version <- NULL
[17:42:12.088]                         }
[17:42:12.088]                         if (!has_future || version < "1.8.0") {
[17:42:12.088]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.088]                             "", base::R.version$version.string), 
[17:42:12.088]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.088]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.088]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.088]                               "release", "version")], collapse = " "), 
[17:42:12.088]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.088]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.088]                             info)
[17:42:12.088]                           info <- base::paste(info, collapse = "; ")
[17:42:12.088]                           if (!has_future) {
[17:42:12.088]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.088]                               info)
[17:42:12.088]                           }
[17:42:12.088]                           else {
[17:42:12.088]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.088]                               info, version)
[17:42:12.088]                           }
[17:42:12.088]                           base::stop(msg)
[17:42:12.088]                         }
[17:42:12.088]                       })
[17:42:12.088]                     }
[17:42:12.088]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.088]                     base::options(mc.cores = 1L)
[17:42:12.088]                   }
[17:42:12.088]                   options(future.plan = NULL)
[17:42:12.088]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.088]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.088]                 }
[17:42:12.088]                 ...future.workdir <- getwd()
[17:42:12.088]             }
[17:42:12.088]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.088]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.088]         }
[17:42:12.088]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.088]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.088]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.088]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.088]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.088]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.088]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.088]             base::names(...future.oldOptions))
[17:42:12.088]     }
[17:42:12.088]     if (FALSE) {
[17:42:12.088]     }
[17:42:12.088]     else {
[17:42:12.088]         if (TRUE) {
[17:42:12.088]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.088]                 open = "w")
[17:42:12.088]         }
[17:42:12.088]         else {
[17:42:12.088]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.088]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.088]         }
[17:42:12.088]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.088]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.088]             base::sink(type = "output", split = FALSE)
[17:42:12.088]             base::close(...future.stdout)
[17:42:12.088]         }, add = TRUE)
[17:42:12.088]     }
[17:42:12.088]     ...future.frame <- base::sys.nframe()
[17:42:12.088]     ...future.conditions <- base::list()
[17:42:12.088]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.088]     if (FALSE) {
[17:42:12.088]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.088]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.088]     }
[17:42:12.088]     ...future.result <- base::tryCatch({
[17:42:12.088]         base::withCallingHandlers({
[17:42:12.088]             ...future.value <- base::withVisible(base::local({
[17:42:12.088]                 withCallingHandlers({
[17:42:12.088]                   {
[17:42:12.088]                     2 * a
[17:42:12.088]                   }
[17:42:12.088]                 }, immediateCondition = function(cond) {
[17:42:12.088]                   save_rds <- function (object, pathname, ...) 
[17:42:12.088]                   {
[17:42:12.088]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:12.088]                     if (file_test("-f", pathname_tmp)) {
[17:42:12.088]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.088]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:12.088]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.088]                         fi_tmp[["mtime"]])
[17:42:12.088]                     }
[17:42:12.088]                     tryCatch({
[17:42:12.088]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:12.088]                     }, error = function(ex) {
[17:42:12.088]                       msg <- conditionMessage(ex)
[17:42:12.088]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.088]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:12.088]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.088]                         fi_tmp[["mtime"]], msg)
[17:42:12.088]                       ex$message <- msg
[17:42:12.088]                       stop(ex)
[17:42:12.088]                     })
[17:42:12.088]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:12.088]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:12.088]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:12.088]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.088]                       fi <- file.info(pathname)
[17:42:12.088]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:12.088]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.088]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:12.088]                         fi[["size"]], fi[["mtime"]])
[17:42:12.088]                       stop(msg)
[17:42:12.088]                     }
[17:42:12.088]                     invisible(pathname)
[17:42:12.088]                   }
[17:42:12.088]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:12.088]                     rootPath = tempdir()) 
[17:42:12.088]                   {
[17:42:12.088]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:12.088]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:12.088]                       tmpdir = path, fileext = ".rds")
[17:42:12.088]                     save_rds(obj, file)
[17:42:12.088]                   }
[17:42:12.088]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:12.088]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.088]                   {
[17:42:12.088]                     inherits <- base::inherits
[17:42:12.088]                     invokeRestart <- base::invokeRestart
[17:42:12.088]                     is.null <- base::is.null
[17:42:12.088]                     muffled <- FALSE
[17:42:12.088]                     if (inherits(cond, "message")) {
[17:42:12.088]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.088]                       if (muffled) 
[17:42:12.088]                         invokeRestart("muffleMessage")
[17:42:12.088]                     }
[17:42:12.088]                     else if (inherits(cond, "warning")) {
[17:42:12.088]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.088]                       if (muffled) 
[17:42:12.088]                         invokeRestart("muffleWarning")
[17:42:12.088]                     }
[17:42:12.088]                     else if (inherits(cond, "condition")) {
[17:42:12.088]                       if (!is.null(pattern)) {
[17:42:12.088]                         computeRestarts <- base::computeRestarts
[17:42:12.088]                         grepl <- base::grepl
[17:42:12.088]                         restarts <- computeRestarts(cond)
[17:42:12.088]                         for (restart in restarts) {
[17:42:12.088]                           name <- restart$name
[17:42:12.088]                           if (is.null(name)) 
[17:42:12.088]                             next
[17:42:12.088]                           if (!grepl(pattern, name)) 
[17:42:12.088]                             next
[17:42:12.088]                           invokeRestart(restart)
[17:42:12.088]                           muffled <- TRUE
[17:42:12.088]                           break
[17:42:12.088]                         }
[17:42:12.088]                       }
[17:42:12.088]                     }
[17:42:12.088]                     invisible(muffled)
[17:42:12.088]                   }
[17:42:12.088]                   muffleCondition(cond)
[17:42:12.088]                 })
[17:42:12.088]             }))
[17:42:12.088]             future::FutureResult(value = ...future.value$value, 
[17:42:12.088]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.088]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.088]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.088]                     ...future.globalenv.names))
[17:42:12.088]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.088]         }, condition = base::local({
[17:42:12.088]             c <- base::c
[17:42:12.088]             inherits <- base::inherits
[17:42:12.088]             invokeRestart <- base::invokeRestart
[17:42:12.088]             length <- base::length
[17:42:12.088]             list <- base::list
[17:42:12.088]             seq.int <- base::seq.int
[17:42:12.088]             signalCondition <- base::signalCondition
[17:42:12.088]             sys.calls <- base::sys.calls
[17:42:12.088]             `[[` <- base::`[[`
[17:42:12.088]             `+` <- base::`+`
[17:42:12.088]             `<<-` <- base::`<<-`
[17:42:12.088]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.088]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.088]                   3L)]
[17:42:12.088]             }
[17:42:12.088]             function(cond) {
[17:42:12.088]                 is_error <- inherits(cond, "error")
[17:42:12.088]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.088]                   NULL)
[17:42:12.088]                 if (is_error) {
[17:42:12.088]                   sessionInformation <- function() {
[17:42:12.088]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.088]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.088]                       search = base::search(), system = base::Sys.info())
[17:42:12.088]                   }
[17:42:12.088]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.088]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.088]                     cond$call), session = sessionInformation(), 
[17:42:12.088]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.088]                   signalCondition(cond)
[17:42:12.088]                 }
[17:42:12.088]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.088]                 "immediateCondition"))) {
[17:42:12.088]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.088]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.088]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.088]                   if (TRUE && !signal) {
[17:42:12.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.088]                     {
[17:42:12.088]                       inherits <- base::inherits
[17:42:12.088]                       invokeRestart <- base::invokeRestart
[17:42:12.088]                       is.null <- base::is.null
[17:42:12.088]                       muffled <- FALSE
[17:42:12.088]                       if (inherits(cond, "message")) {
[17:42:12.088]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.088]                         if (muffled) 
[17:42:12.088]                           invokeRestart("muffleMessage")
[17:42:12.088]                       }
[17:42:12.088]                       else if (inherits(cond, "warning")) {
[17:42:12.088]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.088]                         if (muffled) 
[17:42:12.088]                           invokeRestart("muffleWarning")
[17:42:12.088]                       }
[17:42:12.088]                       else if (inherits(cond, "condition")) {
[17:42:12.088]                         if (!is.null(pattern)) {
[17:42:12.088]                           computeRestarts <- base::computeRestarts
[17:42:12.088]                           grepl <- base::grepl
[17:42:12.088]                           restarts <- computeRestarts(cond)
[17:42:12.088]                           for (restart in restarts) {
[17:42:12.088]                             name <- restart$name
[17:42:12.088]                             if (is.null(name)) 
[17:42:12.088]                               next
[17:42:12.088]                             if (!grepl(pattern, name)) 
[17:42:12.088]                               next
[17:42:12.088]                             invokeRestart(restart)
[17:42:12.088]                             muffled <- TRUE
[17:42:12.088]                             break
[17:42:12.088]                           }
[17:42:12.088]                         }
[17:42:12.088]                       }
[17:42:12.088]                       invisible(muffled)
[17:42:12.088]                     }
[17:42:12.088]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.088]                   }
[17:42:12.088]                 }
[17:42:12.088]                 else {
[17:42:12.088]                   if (TRUE) {
[17:42:12.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.088]                     {
[17:42:12.088]                       inherits <- base::inherits
[17:42:12.088]                       invokeRestart <- base::invokeRestart
[17:42:12.088]                       is.null <- base::is.null
[17:42:12.088]                       muffled <- FALSE
[17:42:12.088]                       if (inherits(cond, "message")) {
[17:42:12.088]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.088]                         if (muffled) 
[17:42:12.088]                           invokeRestart("muffleMessage")
[17:42:12.088]                       }
[17:42:12.088]                       else if (inherits(cond, "warning")) {
[17:42:12.088]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.088]                         if (muffled) 
[17:42:12.088]                           invokeRestart("muffleWarning")
[17:42:12.088]                       }
[17:42:12.088]                       else if (inherits(cond, "condition")) {
[17:42:12.088]                         if (!is.null(pattern)) {
[17:42:12.088]                           computeRestarts <- base::computeRestarts
[17:42:12.088]                           grepl <- base::grepl
[17:42:12.088]                           restarts <- computeRestarts(cond)
[17:42:12.088]                           for (restart in restarts) {
[17:42:12.088]                             name <- restart$name
[17:42:12.088]                             if (is.null(name)) 
[17:42:12.088]                               next
[17:42:12.088]                             if (!grepl(pattern, name)) 
[17:42:12.088]                               next
[17:42:12.088]                             invokeRestart(restart)
[17:42:12.088]                             muffled <- TRUE
[17:42:12.088]                             break
[17:42:12.088]                           }
[17:42:12.088]                         }
[17:42:12.088]                       }
[17:42:12.088]                       invisible(muffled)
[17:42:12.088]                     }
[17:42:12.088]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.088]                   }
[17:42:12.088]                 }
[17:42:12.088]             }
[17:42:12.088]         }))
[17:42:12.088]     }, error = function(ex) {
[17:42:12.088]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.088]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.088]                 ...future.rng), started = ...future.startTime, 
[17:42:12.088]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.088]             version = "1.8"), class = "FutureResult")
[17:42:12.088]     }, finally = {
[17:42:12.088]         if (!identical(...future.workdir, getwd())) 
[17:42:12.088]             setwd(...future.workdir)
[17:42:12.088]         {
[17:42:12.088]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.088]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.088]             }
[17:42:12.088]             base::options(...future.oldOptions)
[17:42:12.088]             if (.Platform$OS.type == "windows") {
[17:42:12.088]                 old_names <- names(...future.oldEnvVars)
[17:42:12.088]                 envs <- base::Sys.getenv()
[17:42:12.088]                 names <- names(envs)
[17:42:12.088]                 common <- intersect(names, old_names)
[17:42:12.088]                 added <- setdiff(names, old_names)
[17:42:12.088]                 removed <- setdiff(old_names, names)
[17:42:12.088]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.088]                   envs[common]]
[17:42:12.088]                 NAMES <- toupper(changed)
[17:42:12.088]                 args <- list()
[17:42:12.088]                 for (kk in seq_along(NAMES)) {
[17:42:12.088]                   name <- changed[[kk]]
[17:42:12.088]                   NAME <- NAMES[[kk]]
[17:42:12.088]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.088]                     next
[17:42:12.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.088]                 }
[17:42:12.088]                 NAMES <- toupper(added)
[17:42:12.088]                 for (kk in seq_along(NAMES)) {
[17:42:12.088]                   name <- added[[kk]]
[17:42:12.088]                   NAME <- NAMES[[kk]]
[17:42:12.088]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.088]                     next
[17:42:12.088]                   args[[name]] <- ""
[17:42:12.088]                 }
[17:42:12.088]                 NAMES <- toupper(removed)
[17:42:12.088]                 for (kk in seq_along(NAMES)) {
[17:42:12.088]                   name <- removed[[kk]]
[17:42:12.088]                   NAME <- NAMES[[kk]]
[17:42:12.088]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.088]                     next
[17:42:12.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.088]                 }
[17:42:12.088]                 if (length(args) > 0) 
[17:42:12.088]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.088]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.088]             }
[17:42:12.088]             else {
[17:42:12.088]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.088]             }
[17:42:12.088]             {
[17:42:12.088]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.088]                   0L) {
[17:42:12.088]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.088]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.088]                   base::options(opts)
[17:42:12.088]                 }
[17:42:12.088]                 {
[17:42:12.088]                   {
[17:42:12.088]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.088]                     NULL
[17:42:12.088]                   }
[17:42:12.088]                   options(future.plan = NULL)
[17:42:12.088]                   if (is.na(NA_character_)) 
[17:42:12.088]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.088]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.088]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:12.088]                     envir = parent.frame()) 
[17:42:12.088]                   {
[17:42:12.088]                     default_workers <- missing(workers)
[17:42:12.088]                     if (is.function(workers)) 
[17:42:12.088]                       workers <- workers()
[17:42:12.088]                     workers <- structure(as.integer(workers), 
[17:42:12.088]                       class = class(workers))
[17:42:12.088]                     stop_if_not(is.finite(workers), workers >= 
[17:42:12.088]                       1L)
[17:42:12.088]                     if ((workers == 1L && !inherits(workers, 
[17:42:12.088]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:12.088]                       if (default_workers) 
[17:42:12.088]                         supportsMulticore(warn = TRUE)
[17:42:12.088]                       return(sequential(..., envir = envir))
[17:42:12.088]                     }
[17:42:12.088]                     oopts <- options(mc.cores = workers)
[17:42:12.088]                     on.exit(options(oopts))
[17:42:12.088]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:12.088]                       envir = envir)
[17:42:12.088]                     if (!future$lazy) 
[17:42:12.088]                       future <- run(future)
[17:42:12.088]                     invisible(future)
[17:42:12.088]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.088]                 }
[17:42:12.088]             }
[17:42:12.088]         }
[17:42:12.088]     })
[17:42:12.088]     if (TRUE) {
[17:42:12.088]         base::sink(type = "output", split = FALSE)
[17:42:12.088]         if (TRUE) {
[17:42:12.088]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.088]         }
[17:42:12.088]         else {
[17:42:12.088]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.088]         }
[17:42:12.088]         base::close(...future.stdout)
[17:42:12.088]         ...future.stdout <- NULL
[17:42:12.088]     }
[17:42:12.088]     ...future.result$conditions <- ...future.conditions
[17:42:12.088]     ...future.result$finished <- base::Sys.time()
[17:42:12.088]     ...future.result
[17:42:12.088] }
[17:42:12.090] assign_globals() ...
[17:42:12.090] List of 1
[17:42:12.090]  $ a: num 1
[17:42:12.090]  - attr(*, "where")=List of 1
[17:42:12.090]   ..$ a:<environment: R_EmptyEnv> 
[17:42:12.090]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:12.090]  - attr(*, "resolved")= logi FALSE
[17:42:12.090]  - attr(*, "total_size")= num 56
[17:42:12.090]  - attr(*, "already-done")= logi TRUE
[17:42:12.094] - copied ‘a’ to environment
[17:42:12.094] assign_globals() ... done
[17:42:12.094] requestCore(): workers = 2
[17:42:12.096] MulticoreFuture started
[17:42:12.096] - Launch lazy future ... done
[17:42:12.097] run() for ‘MulticoreFuture’ ... done
[17:42:12.097] plan(): Setting new future strategy stack:
[17:42:12.097] List of future strategies:
[17:42:12.097] 1. sequential:
[17:42:12.097]    - args: function (..., envir = parent.frame())
[17:42:12.097]    - tweaked: FALSE
[17:42:12.097]    - call: NULL
[17:42:12.098] plan(): nbrOfWorkers() = 1
[17:42:12.100] plan(): Setting new future strategy stack:
[17:42:12.100] List of future strategies:
[17:42:12.100] 1. multicore:
[17:42:12.100]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.100]    - tweaked: FALSE
[17:42:12.100]    - call: plan(strategy)
[17:42:12.106] plan(): nbrOfWorkers() = 2
[17:42:12.107] getGlobalsAndPackages() ...
[17:42:12.107] Searching for globals...
[17:42:12.109] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:12.109] Searching for globals ... DONE
[17:42:12.109] Resolving globals: FALSE
[17:42:12.109] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:12.110] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:12.110] - globals: [1] ‘a’
[17:42:12.110] 
[17:42:12.110] getGlobalsAndPackages() ... DONE
[17:42:12.111] run() for ‘Future’ ...
[17:42:12.111] - state: ‘created’
[17:42:12.111] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.115] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.115] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:12.115]   - Field: ‘label’
[17:42:12.115]   - Field: ‘local’
[17:42:12.116]   - Field: ‘owner’
[17:42:12.116]   - Field: ‘envir’
[17:42:12.116]   - Field: ‘workers’
[17:42:12.116]   - Field: ‘packages’
[17:42:12.116]   - Field: ‘gc’
[17:42:12.116]   - Field: ‘job’
[17:42:12.116]   - Field: ‘conditions’
[17:42:12.116]   - Field: ‘expr’
[17:42:12.116]   - Field: ‘uuid’
[17:42:12.117]   - Field: ‘seed’
[17:42:12.117]   - Field: ‘version’
[17:42:12.117]   - Field: ‘result’
[17:42:12.117]   - Field: ‘asynchronous’
[17:42:12.117]   - Field: ‘calls’
[17:42:12.117]   - Field: ‘globals’
[17:42:12.117]   - Field: ‘stdout’
[17:42:12.117]   - Field: ‘earlySignal’
[17:42:12.117]   - Field: ‘lazy’
[17:42:12.118]   - Field: ‘state’
[17:42:12.118] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:12.118] - Launch lazy future ...
[17:42:12.118] Packages needed by the future expression (n = 0): <none>
[17:42:12.118] Packages needed by future strategies (n = 0): <none>
[17:42:12.119] {
[17:42:12.119]     {
[17:42:12.119]         {
[17:42:12.119]             ...future.startTime <- base::Sys.time()
[17:42:12.119]             {
[17:42:12.119]                 {
[17:42:12.119]                   {
[17:42:12.119]                     {
[17:42:12.119]                       base::local({
[17:42:12.119]                         has_future <- base::requireNamespace("future", 
[17:42:12.119]                           quietly = TRUE)
[17:42:12.119]                         if (has_future) {
[17:42:12.119]                           ns <- base::getNamespace("future")
[17:42:12.119]                           version <- ns[[".package"]][["version"]]
[17:42:12.119]                           if (is.null(version)) 
[17:42:12.119]                             version <- utils::packageVersion("future")
[17:42:12.119]                         }
[17:42:12.119]                         else {
[17:42:12.119]                           version <- NULL
[17:42:12.119]                         }
[17:42:12.119]                         if (!has_future || version < "1.8.0") {
[17:42:12.119]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.119]                             "", base::R.version$version.string), 
[17:42:12.119]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.119]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.119]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.119]                               "release", "version")], collapse = " "), 
[17:42:12.119]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.119]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.119]                             info)
[17:42:12.119]                           info <- base::paste(info, collapse = "; ")
[17:42:12.119]                           if (!has_future) {
[17:42:12.119]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.119]                               info)
[17:42:12.119]                           }
[17:42:12.119]                           else {
[17:42:12.119]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.119]                               info, version)
[17:42:12.119]                           }
[17:42:12.119]                           base::stop(msg)
[17:42:12.119]                         }
[17:42:12.119]                       })
[17:42:12.119]                     }
[17:42:12.119]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.119]                     base::options(mc.cores = 1L)
[17:42:12.119]                   }
[17:42:12.119]                   options(future.plan = NULL)
[17:42:12.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.119]                 }
[17:42:12.119]                 ...future.workdir <- getwd()
[17:42:12.119]             }
[17:42:12.119]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.119]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.119]         }
[17:42:12.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.119]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.119]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.119]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.119]             base::names(...future.oldOptions))
[17:42:12.119]     }
[17:42:12.119]     if (FALSE) {
[17:42:12.119]     }
[17:42:12.119]     else {
[17:42:12.119]         if (TRUE) {
[17:42:12.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.119]                 open = "w")
[17:42:12.119]         }
[17:42:12.119]         else {
[17:42:12.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.119]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.119]         }
[17:42:12.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.119]             base::sink(type = "output", split = FALSE)
[17:42:12.119]             base::close(...future.stdout)
[17:42:12.119]         }, add = TRUE)
[17:42:12.119]     }
[17:42:12.119]     ...future.frame <- base::sys.nframe()
[17:42:12.119]     ...future.conditions <- base::list()
[17:42:12.119]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.119]     if (FALSE) {
[17:42:12.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.119]     }
[17:42:12.119]     ...future.result <- base::tryCatch({
[17:42:12.119]         base::withCallingHandlers({
[17:42:12.119]             ...future.value <- base::withVisible(base::local({
[17:42:12.119]                 withCallingHandlers({
[17:42:12.119]                   {
[17:42:12.119]                     2 * a
[17:42:12.119]                   }
[17:42:12.119]                 }, immediateCondition = function(cond) {
[17:42:12.119]                   save_rds <- function (object, pathname, ...) 
[17:42:12.119]                   {
[17:42:12.119]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:12.119]                     if (file_test("-f", pathname_tmp)) {
[17:42:12.119]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.119]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:12.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.119]                         fi_tmp[["mtime"]])
[17:42:12.119]                     }
[17:42:12.119]                     tryCatch({
[17:42:12.119]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:12.119]                     }, error = function(ex) {
[17:42:12.119]                       msg <- conditionMessage(ex)
[17:42:12.119]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.119]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:12.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.119]                         fi_tmp[["mtime"]], msg)
[17:42:12.119]                       ex$message <- msg
[17:42:12.119]                       stop(ex)
[17:42:12.119]                     })
[17:42:12.119]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:12.119]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:12.119]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:12.119]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.119]                       fi <- file.info(pathname)
[17:42:12.119]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:12.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.119]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:12.119]                         fi[["size"]], fi[["mtime"]])
[17:42:12.119]                       stop(msg)
[17:42:12.119]                     }
[17:42:12.119]                     invisible(pathname)
[17:42:12.119]                   }
[17:42:12.119]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:12.119]                     rootPath = tempdir()) 
[17:42:12.119]                   {
[17:42:12.119]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:12.119]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:12.119]                       tmpdir = path, fileext = ".rds")
[17:42:12.119]                     save_rds(obj, file)
[17:42:12.119]                   }
[17:42:12.119]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:12.119]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.119]                   {
[17:42:12.119]                     inherits <- base::inherits
[17:42:12.119]                     invokeRestart <- base::invokeRestart
[17:42:12.119]                     is.null <- base::is.null
[17:42:12.119]                     muffled <- FALSE
[17:42:12.119]                     if (inherits(cond, "message")) {
[17:42:12.119]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.119]                       if (muffled) 
[17:42:12.119]                         invokeRestart("muffleMessage")
[17:42:12.119]                     }
[17:42:12.119]                     else if (inherits(cond, "warning")) {
[17:42:12.119]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.119]                       if (muffled) 
[17:42:12.119]                         invokeRestart("muffleWarning")
[17:42:12.119]                     }
[17:42:12.119]                     else if (inherits(cond, "condition")) {
[17:42:12.119]                       if (!is.null(pattern)) {
[17:42:12.119]                         computeRestarts <- base::computeRestarts
[17:42:12.119]                         grepl <- base::grepl
[17:42:12.119]                         restarts <- computeRestarts(cond)
[17:42:12.119]                         for (restart in restarts) {
[17:42:12.119]                           name <- restart$name
[17:42:12.119]                           if (is.null(name)) 
[17:42:12.119]                             next
[17:42:12.119]                           if (!grepl(pattern, name)) 
[17:42:12.119]                             next
[17:42:12.119]                           invokeRestart(restart)
[17:42:12.119]                           muffled <- TRUE
[17:42:12.119]                           break
[17:42:12.119]                         }
[17:42:12.119]                       }
[17:42:12.119]                     }
[17:42:12.119]                     invisible(muffled)
[17:42:12.119]                   }
[17:42:12.119]                   muffleCondition(cond)
[17:42:12.119]                 })
[17:42:12.119]             }))
[17:42:12.119]             future::FutureResult(value = ...future.value$value, 
[17:42:12.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.119]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.119]                     ...future.globalenv.names))
[17:42:12.119]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.119]         }, condition = base::local({
[17:42:12.119]             c <- base::c
[17:42:12.119]             inherits <- base::inherits
[17:42:12.119]             invokeRestart <- base::invokeRestart
[17:42:12.119]             length <- base::length
[17:42:12.119]             list <- base::list
[17:42:12.119]             seq.int <- base::seq.int
[17:42:12.119]             signalCondition <- base::signalCondition
[17:42:12.119]             sys.calls <- base::sys.calls
[17:42:12.119]             `[[` <- base::`[[`
[17:42:12.119]             `+` <- base::`+`
[17:42:12.119]             `<<-` <- base::`<<-`
[17:42:12.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.119]                   3L)]
[17:42:12.119]             }
[17:42:12.119]             function(cond) {
[17:42:12.119]                 is_error <- inherits(cond, "error")
[17:42:12.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.119]                   NULL)
[17:42:12.119]                 if (is_error) {
[17:42:12.119]                   sessionInformation <- function() {
[17:42:12.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.119]                       search = base::search(), system = base::Sys.info())
[17:42:12.119]                   }
[17:42:12.119]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.119]                     cond$call), session = sessionInformation(), 
[17:42:12.119]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.119]                   signalCondition(cond)
[17:42:12.119]                 }
[17:42:12.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.119]                 "immediateCondition"))) {
[17:42:12.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.119]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.119]                   if (TRUE && !signal) {
[17:42:12.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.119]                     {
[17:42:12.119]                       inherits <- base::inherits
[17:42:12.119]                       invokeRestart <- base::invokeRestart
[17:42:12.119]                       is.null <- base::is.null
[17:42:12.119]                       muffled <- FALSE
[17:42:12.119]                       if (inherits(cond, "message")) {
[17:42:12.119]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.119]                         if (muffled) 
[17:42:12.119]                           invokeRestart("muffleMessage")
[17:42:12.119]                       }
[17:42:12.119]                       else if (inherits(cond, "warning")) {
[17:42:12.119]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.119]                         if (muffled) 
[17:42:12.119]                           invokeRestart("muffleWarning")
[17:42:12.119]                       }
[17:42:12.119]                       else if (inherits(cond, "condition")) {
[17:42:12.119]                         if (!is.null(pattern)) {
[17:42:12.119]                           computeRestarts <- base::computeRestarts
[17:42:12.119]                           grepl <- base::grepl
[17:42:12.119]                           restarts <- computeRestarts(cond)
[17:42:12.119]                           for (restart in restarts) {
[17:42:12.119]                             name <- restart$name
[17:42:12.119]                             if (is.null(name)) 
[17:42:12.119]                               next
[17:42:12.119]                             if (!grepl(pattern, name)) 
[17:42:12.119]                               next
[17:42:12.119]                             invokeRestart(restart)
[17:42:12.119]                             muffled <- TRUE
[17:42:12.119]                             break
[17:42:12.119]                           }
[17:42:12.119]                         }
[17:42:12.119]                       }
[17:42:12.119]                       invisible(muffled)
[17:42:12.119]                     }
[17:42:12.119]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.119]                   }
[17:42:12.119]                 }
[17:42:12.119]                 else {
[17:42:12.119]                   if (TRUE) {
[17:42:12.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.119]                     {
[17:42:12.119]                       inherits <- base::inherits
[17:42:12.119]                       invokeRestart <- base::invokeRestart
[17:42:12.119]                       is.null <- base::is.null
[17:42:12.119]                       muffled <- FALSE
[17:42:12.119]                       if (inherits(cond, "message")) {
[17:42:12.119]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.119]                         if (muffled) 
[17:42:12.119]                           invokeRestart("muffleMessage")
[17:42:12.119]                       }
[17:42:12.119]                       else if (inherits(cond, "warning")) {
[17:42:12.119]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.119]                         if (muffled) 
[17:42:12.119]                           invokeRestart("muffleWarning")
[17:42:12.119]                       }
[17:42:12.119]                       else if (inherits(cond, "condition")) {
[17:42:12.119]                         if (!is.null(pattern)) {
[17:42:12.119]                           computeRestarts <- base::computeRestarts
[17:42:12.119]                           grepl <- base::grepl
[17:42:12.119]                           restarts <- computeRestarts(cond)
[17:42:12.119]                           for (restart in restarts) {
[17:42:12.119]                             name <- restart$name
[17:42:12.119]                             if (is.null(name)) 
[17:42:12.119]                               next
[17:42:12.119]                             if (!grepl(pattern, name)) 
[17:42:12.119]                               next
[17:42:12.119]                             invokeRestart(restart)
[17:42:12.119]                             muffled <- TRUE
[17:42:12.119]                             break
[17:42:12.119]                           }
[17:42:12.119]                         }
[17:42:12.119]                       }
[17:42:12.119]                       invisible(muffled)
[17:42:12.119]                     }
[17:42:12.119]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.119]                   }
[17:42:12.119]                 }
[17:42:12.119]             }
[17:42:12.119]         }))
[17:42:12.119]     }, error = function(ex) {
[17:42:12.119]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.119]                 ...future.rng), started = ...future.startTime, 
[17:42:12.119]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.119]             version = "1.8"), class = "FutureResult")
[17:42:12.119]     }, finally = {
[17:42:12.119]         if (!identical(...future.workdir, getwd())) 
[17:42:12.119]             setwd(...future.workdir)
[17:42:12.119]         {
[17:42:12.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.119]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.119]             }
[17:42:12.119]             base::options(...future.oldOptions)
[17:42:12.119]             if (.Platform$OS.type == "windows") {
[17:42:12.119]                 old_names <- names(...future.oldEnvVars)
[17:42:12.119]                 envs <- base::Sys.getenv()
[17:42:12.119]                 names <- names(envs)
[17:42:12.119]                 common <- intersect(names, old_names)
[17:42:12.119]                 added <- setdiff(names, old_names)
[17:42:12.119]                 removed <- setdiff(old_names, names)
[17:42:12.119]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.119]                   envs[common]]
[17:42:12.119]                 NAMES <- toupper(changed)
[17:42:12.119]                 args <- list()
[17:42:12.119]                 for (kk in seq_along(NAMES)) {
[17:42:12.119]                   name <- changed[[kk]]
[17:42:12.119]                   NAME <- NAMES[[kk]]
[17:42:12.119]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.119]                     next
[17:42:12.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.119]                 }
[17:42:12.119]                 NAMES <- toupper(added)
[17:42:12.119]                 for (kk in seq_along(NAMES)) {
[17:42:12.119]                   name <- added[[kk]]
[17:42:12.119]                   NAME <- NAMES[[kk]]
[17:42:12.119]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.119]                     next
[17:42:12.119]                   args[[name]] <- ""
[17:42:12.119]                 }
[17:42:12.119]                 NAMES <- toupper(removed)
[17:42:12.119]                 for (kk in seq_along(NAMES)) {
[17:42:12.119]                   name <- removed[[kk]]
[17:42:12.119]                   NAME <- NAMES[[kk]]
[17:42:12.119]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.119]                     next
[17:42:12.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.119]                 }
[17:42:12.119]                 if (length(args) > 0) 
[17:42:12.119]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.119]             }
[17:42:12.119]             else {
[17:42:12.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.119]             }
[17:42:12.119]             {
[17:42:12.119]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.119]                   0L) {
[17:42:12.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.119]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.119]                   base::options(opts)
[17:42:12.119]                 }
[17:42:12.119]                 {
[17:42:12.119]                   {
[17:42:12.119]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.119]                     NULL
[17:42:12.119]                   }
[17:42:12.119]                   options(future.plan = NULL)
[17:42:12.119]                   if (is.na(NA_character_)) 
[17:42:12.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.119]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:12.119]                     envir = parent.frame()) 
[17:42:12.119]                   {
[17:42:12.119]                     default_workers <- missing(workers)
[17:42:12.119]                     if (is.function(workers)) 
[17:42:12.119]                       workers <- workers()
[17:42:12.119]                     workers <- structure(as.integer(workers), 
[17:42:12.119]                       class = class(workers))
[17:42:12.119]                     stop_if_not(is.finite(workers), workers >= 
[17:42:12.119]                       1L)
[17:42:12.119]                     if ((workers == 1L && !inherits(workers, 
[17:42:12.119]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:12.119]                       if (default_workers) 
[17:42:12.119]                         supportsMulticore(warn = TRUE)
[17:42:12.119]                       return(sequential(..., envir = envir))
[17:42:12.119]                     }
[17:42:12.119]                     oopts <- options(mc.cores = workers)
[17:42:12.119]                     on.exit(options(oopts))
[17:42:12.119]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:12.119]                       envir = envir)
[17:42:12.119]                     if (!future$lazy) 
[17:42:12.119]                       future <- run(future)
[17:42:12.119]                     invisible(future)
[17:42:12.119]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.119]                 }
[17:42:12.119]             }
[17:42:12.119]         }
[17:42:12.119]     })
[17:42:12.119]     if (TRUE) {
[17:42:12.119]         base::sink(type = "output", split = FALSE)
[17:42:12.119]         if (TRUE) {
[17:42:12.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.119]         }
[17:42:12.119]         else {
[17:42:12.119]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.119]         }
[17:42:12.119]         base::close(...future.stdout)
[17:42:12.119]         ...future.stdout <- NULL
[17:42:12.119]     }
[17:42:12.119]     ...future.result$conditions <- ...future.conditions
[17:42:12.119]     ...future.result$finished <- base::Sys.time()
[17:42:12.119]     ...future.result
[17:42:12.119] }
[17:42:12.122] assign_globals() ...
[17:42:12.122] List of 1
[17:42:12.122]  $ a: num 1
[17:42:12.122]  - attr(*, "where")=List of 1
[17:42:12.122]   ..$ a:<environment: R_EmptyEnv> 
[17:42:12.122]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:12.122]  - attr(*, "resolved")= logi FALSE
[17:42:12.122]  - attr(*, "total_size")= num 56
[17:42:12.122]  - attr(*, "already-done")= logi TRUE
[17:42:12.125] - copied ‘a’ to environment
[17:42:12.125] assign_globals() ... done
[17:42:12.125] requestCore(): workers = 2
[17:42:12.127] MulticoreFuture started
[17:42:12.127] - Launch lazy future ... done
[17:42:12.127] run() for ‘MulticoreFuture’ ... done
[17:42:12.128] plan(): Setting new future strategy stack:
[17:42:12.128] List of future strategies:
[17:42:12.128] 1. sequential:
[17:42:12.128]    - args: function (..., envir = parent.frame())
[17:42:12.128]    - tweaked: FALSE
[17:42:12.128]    - call: NULL
[17:42:12.129] plan(): nbrOfWorkers() = 1
[17:42:12.131] plan(): Setting new future strategy stack:
[17:42:12.131] List of future strategies:
[17:42:12.131] 1. multicore:
[17:42:12.131]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.131]    - tweaked: FALSE
[17:42:12.131]    - call: plan(strategy)
[17:42:12.136] plan(): nbrOfWorkers() = 2
[17:42:12.137] getGlobalsAndPackages() ...
[17:42:12.138] Searching for globals...
[17:42:12.139] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:12.139] Searching for globals ... DONE
[17:42:12.139] Resolving globals: FALSE
[17:42:12.140] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:12.140] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:12.141] - globals: [1] ‘a’
[17:42:12.141] 
[17:42:12.141] getGlobalsAndPackages() ... DONE
[17:42:12.141] run() for ‘Future’ ...
[17:42:12.141] - state: ‘created’
[17:42:12.142] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.146] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.146] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:12.146]   - Field: ‘label’
[17:42:12.146]   - Field: ‘local’
[17:42:12.146]   - Field: ‘owner’
[17:42:12.146]   - Field: ‘envir’
[17:42:12.147]   - Field: ‘workers’
[17:42:12.147]   - Field: ‘packages’
[17:42:12.147]   - Field: ‘gc’
[17:42:12.147]   - Field: ‘job’
[17:42:12.147]   - Field: ‘conditions’
[17:42:12.147]   - Field: ‘expr’
[17:42:12.147]   - Field: ‘uuid’
[17:42:12.147]   - Field: ‘seed’
[17:42:12.147]   - Field: ‘version’
[17:42:12.148]   - Field: ‘result’
[17:42:12.148]   - Field: ‘asynchronous’
[17:42:12.148]   - Field: ‘calls’
[17:42:12.148]   - Field: ‘globals’
[17:42:12.148]   - Field: ‘stdout’
[17:42:12.148]   - Field: ‘earlySignal’
[17:42:12.148]   - Field: ‘lazy’
[17:42:12.148]   - Field: ‘state’
[17:42:12.148] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:12.149] - Launch lazy future ...
[17:42:12.149] Packages needed by the future expression (n = 0): <none>
[17:42:12.149] Packages needed by future strategies (n = 0): <none>
[17:42:12.150] {
[17:42:12.150]     {
[17:42:12.150]         {
[17:42:12.150]             ...future.startTime <- base::Sys.time()
[17:42:12.150]             {
[17:42:12.150]                 {
[17:42:12.150]                   {
[17:42:12.150]                     {
[17:42:12.150]                       base::local({
[17:42:12.150]                         has_future <- base::requireNamespace("future", 
[17:42:12.150]                           quietly = TRUE)
[17:42:12.150]                         if (has_future) {
[17:42:12.150]                           ns <- base::getNamespace("future")
[17:42:12.150]                           version <- ns[[".package"]][["version"]]
[17:42:12.150]                           if (is.null(version)) 
[17:42:12.150]                             version <- utils::packageVersion("future")
[17:42:12.150]                         }
[17:42:12.150]                         else {
[17:42:12.150]                           version <- NULL
[17:42:12.150]                         }
[17:42:12.150]                         if (!has_future || version < "1.8.0") {
[17:42:12.150]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.150]                             "", base::R.version$version.string), 
[17:42:12.150]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.150]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.150]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.150]                               "release", "version")], collapse = " "), 
[17:42:12.150]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.150]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.150]                             info)
[17:42:12.150]                           info <- base::paste(info, collapse = "; ")
[17:42:12.150]                           if (!has_future) {
[17:42:12.150]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.150]                               info)
[17:42:12.150]                           }
[17:42:12.150]                           else {
[17:42:12.150]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.150]                               info, version)
[17:42:12.150]                           }
[17:42:12.150]                           base::stop(msg)
[17:42:12.150]                         }
[17:42:12.150]                       })
[17:42:12.150]                     }
[17:42:12.150]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.150]                     base::options(mc.cores = 1L)
[17:42:12.150]                   }
[17:42:12.150]                   options(future.plan = NULL)
[17:42:12.150]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.150]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.150]                 }
[17:42:12.150]                 ...future.workdir <- getwd()
[17:42:12.150]             }
[17:42:12.150]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.150]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.150]         }
[17:42:12.150]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.150]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.150]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.150]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.150]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.150]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.150]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.150]             base::names(...future.oldOptions))
[17:42:12.150]     }
[17:42:12.150]     if (FALSE) {
[17:42:12.150]     }
[17:42:12.150]     else {
[17:42:12.150]         if (TRUE) {
[17:42:12.150]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.150]                 open = "w")
[17:42:12.150]         }
[17:42:12.150]         else {
[17:42:12.150]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.150]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.150]         }
[17:42:12.150]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.150]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.150]             base::sink(type = "output", split = FALSE)
[17:42:12.150]             base::close(...future.stdout)
[17:42:12.150]         }, add = TRUE)
[17:42:12.150]     }
[17:42:12.150]     ...future.frame <- base::sys.nframe()
[17:42:12.150]     ...future.conditions <- base::list()
[17:42:12.150]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.150]     if (FALSE) {
[17:42:12.150]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.150]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.150]     }
[17:42:12.150]     ...future.result <- base::tryCatch({
[17:42:12.150]         base::withCallingHandlers({
[17:42:12.150]             ...future.value <- base::withVisible(base::local({
[17:42:12.150]                 withCallingHandlers({
[17:42:12.150]                   {
[17:42:12.150]                     2 * a
[17:42:12.150]                   }
[17:42:12.150]                 }, immediateCondition = function(cond) {
[17:42:12.150]                   save_rds <- function (object, pathname, ...) 
[17:42:12.150]                   {
[17:42:12.150]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:12.150]                     if (file_test("-f", pathname_tmp)) {
[17:42:12.150]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.150]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:12.150]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.150]                         fi_tmp[["mtime"]])
[17:42:12.150]                     }
[17:42:12.150]                     tryCatch({
[17:42:12.150]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:12.150]                     }, error = function(ex) {
[17:42:12.150]                       msg <- conditionMessage(ex)
[17:42:12.150]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.150]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:12.150]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.150]                         fi_tmp[["mtime"]], msg)
[17:42:12.150]                       ex$message <- msg
[17:42:12.150]                       stop(ex)
[17:42:12.150]                     })
[17:42:12.150]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:12.150]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:12.150]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:12.150]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.150]                       fi <- file.info(pathname)
[17:42:12.150]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:12.150]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.150]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:12.150]                         fi[["size"]], fi[["mtime"]])
[17:42:12.150]                       stop(msg)
[17:42:12.150]                     }
[17:42:12.150]                     invisible(pathname)
[17:42:12.150]                   }
[17:42:12.150]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:12.150]                     rootPath = tempdir()) 
[17:42:12.150]                   {
[17:42:12.150]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:12.150]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:12.150]                       tmpdir = path, fileext = ".rds")
[17:42:12.150]                     save_rds(obj, file)
[17:42:12.150]                   }
[17:42:12.150]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:12.150]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.150]                   {
[17:42:12.150]                     inherits <- base::inherits
[17:42:12.150]                     invokeRestart <- base::invokeRestart
[17:42:12.150]                     is.null <- base::is.null
[17:42:12.150]                     muffled <- FALSE
[17:42:12.150]                     if (inherits(cond, "message")) {
[17:42:12.150]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.150]                       if (muffled) 
[17:42:12.150]                         invokeRestart("muffleMessage")
[17:42:12.150]                     }
[17:42:12.150]                     else if (inherits(cond, "warning")) {
[17:42:12.150]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.150]                       if (muffled) 
[17:42:12.150]                         invokeRestart("muffleWarning")
[17:42:12.150]                     }
[17:42:12.150]                     else if (inherits(cond, "condition")) {
[17:42:12.150]                       if (!is.null(pattern)) {
[17:42:12.150]                         computeRestarts <- base::computeRestarts
[17:42:12.150]                         grepl <- base::grepl
[17:42:12.150]                         restarts <- computeRestarts(cond)
[17:42:12.150]                         for (restart in restarts) {
[17:42:12.150]                           name <- restart$name
[17:42:12.150]                           if (is.null(name)) 
[17:42:12.150]                             next
[17:42:12.150]                           if (!grepl(pattern, name)) 
[17:42:12.150]                             next
[17:42:12.150]                           invokeRestart(restart)
[17:42:12.150]                           muffled <- TRUE
[17:42:12.150]                           break
[17:42:12.150]                         }
[17:42:12.150]                       }
[17:42:12.150]                     }
[17:42:12.150]                     invisible(muffled)
[17:42:12.150]                   }
[17:42:12.150]                   muffleCondition(cond)
[17:42:12.150]                 })
[17:42:12.150]             }))
[17:42:12.150]             future::FutureResult(value = ...future.value$value, 
[17:42:12.150]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.150]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.150]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.150]                     ...future.globalenv.names))
[17:42:12.150]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.150]         }, condition = base::local({
[17:42:12.150]             c <- base::c
[17:42:12.150]             inherits <- base::inherits
[17:42:12.150]             invokeRestart <- base::invokeRestart
[17:42:12.150]             length <- base::length
[17:42:12.150]             list <- base::list
[17:42:12.150]             seq.int <- base::seq.int
[17:42:12.150]             signalCondition <- base::signalCondition
[17:42:12.150]             sys.calls <- base::sys.calls
[17:42:12.150]             `[[` <- base::`[[`
[17:42:12.150]             `+` <- base::`+`
[17:42:12.150]             `<<-` <- base::`<<-`
[17:42:12.150]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.150]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.150]                   3L)]
[17:42:12.150]             }
[17:42:12.150]             function(cond) {
[17:42:12.150]                 is_error <- inherits(cond, "error")
[17:42:12.150]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.150]                   NULL)
[17:42:12.150]                 if (is_error) {
[17:42:12.150]                   sessionInformation <- function() {
[17:42:12.150]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.150]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.150]                       search = base::search(), system = base::Sys.info())
[17:42:12.150]                   }
[17:42:12.150]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.150]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.150]                     cond$call), session = sessionInformation(), 
[17:42:12.150]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.150]                   signalCondition(cond)
[17:42:12.150]                 }
[17:42:12.150]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.150]                 "immediateCondition"))) {
[17:42:12.150]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.150]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.150]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.150]                   if (TRUE && !signal) {
[17:42:12.150]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.150]                     {
[17:42:12.150]                       inherits <- base::inherits
[17:42:12.150]                       invokeRestart <- base::invokeRestart
[17:42:12.150]                       is.null <- base::is.null
[17:42:12.150]                       muffled <- FALSE
[17:42:12.150]                       if (inherits(cond, "message")) {
[17:42:12.150]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.150]                         if (muffled) 
[17:42:12.150]                           invokeRestart("muffleMessage")
[17:42:12.150]                       }
[17:42:12.150]                       else if (inherits(cond, "warning")) {
[17:42:12.150]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.150]                         if (muffled) 
[17:42:12.150]                           invokeRestart("muffleWarning")
[17:42:12.150]                       }
[17:42:12.150]                       else if (inherits(cond, "condition")) {
[17:42:12.150]                         if (!is.null(pattern)) {
[17:42:12.150]                           computeRestarts <- base::computeRestarts
[17:42:12.150]                           grepl <- base::grepl
[17:42:12.150]                           restarts <- computeRestarts(cond)
[17:42:12.150]                           for (restart in restarts) {
[17:42:12.150]                             name <- restart$name
[17:42:12.150]                             if (is.null(name)) 
[17:42:12.150]                               next
[17:42:12.150]                             if (!grepl(pattern, name)) 
[17:42:12.150]                               next
[17:42:12.150]                             invokeRestart(restart)
[17:42:12.150]                             muffled <- TRUE
[17:42:12.150]                             break
[17:42:12.150]                           }
[17:42:12.150]                         }
[17:42:12.150]                       }
[17:42:12.150]                       invisible(muffled)
[17:42:12.150]                     }
[17:42:12.150]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.150]                   }
[17:42:12.150]                 }
[17:42:12.150]                 else {
[17:42:12.150]                   if (TRUE) {
[17:42:12.150]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.150]                     {
[17:42:12.150]                       inherits <- base::inherits
[17:42:12.150]                       invokeRestart <- base::invokeRestart
[17:42:12.150]                       is.null <- base::is.null
[17:42:12.150]                       muffled <- FALSE
[17:42:12.150]                       if (inherits(cond, "message")) {
[17:42:12.150]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.150]                         if (muffled) 
[17:42:12.150]                           invokeRestart("muffleMessage")
[17:42:12.150]                       }
[17:42:12.150]                       else if (inherits(cond, "warning")) {
[17:42:12.150]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.150]                         if (muffled) 
[17:42:12.150]                           invokeRestart("muffleWarning")
[17:42:12.150]                       }
[17:42:12.150]                       else if (inherits(cond, "condition")) {
[17:42:12.150]                         if (!is.null(pattern)) {
[17:42:12.150]                           computeRestarts <- base::computeRestarts
[17:42:12.150]                           grepl <- base::grepl
[17:42:12.150]                           restarts <- computeRestarts(cond)
[17:42:12.150]                           for (restart in restarts) {
[17:42:12.150]                             name <- restart$name
[17:42:12.150]                             if (is.null(name)) 
[17:42:12.150]                               next
[17:42:12.150]                             if (!grepl(pattern, name)) 
[17:42:12.150]                               next
[17:42:12.150]                             invokeRestart(restart)
[17:42:12.150]                             muffled <- TRUE
[17:42:12.150]                             break
[17:42:12.150]                           }
[17:42:12.150]                         }
[17:42:12.150]                       }
[17:42:12.150]                       invisible(muffled)
[17:42:12.150]                     }
[17:42:12.150]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.150]                   }
[17:42:12.150]                 }
[17:42:12.150]             }
[17:42:12.150]         }))
[17:42:12.150]     }, error = function(ex) {
[17:42:12.150]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.150]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.150]                 ...future.rng), started = ...future.startTime, 
[17:42:12.150]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.150]             version = "1.8"), class = "FutureResult")
[17:42:12.150]     }, finally = {
[17:42:12.150]         if (!identical(...future.workdir, getwd())) 
[17:42:12.150]             setwd(...future.workdir)
[17:42:12.150]         {
[17:42:12.150]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.150]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.150]             }
[17:42:12.150]             base::options(...future.oldOptions)
[17:42:12.150]             if (.Platform$OS.type == "windows") {
[17:42:12.150]                 old_names <- names(...future.oldEnvVars)
[17:42:12.150]                 envs <- base::Sys.getenv()
[17:42:12.150]                 names <- names(envs)
[17:42:12.150]                 common <- intersect(names, old_names)
[17:42:12.150]                 added <- setdiff(names, old_names)
[17:42:12.150]                 removed <- setdiff(old_names, names)
[17:42:12.150]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.150]                   envs[common]]
[17:42:12.150]                 NAMES <- toupper(changed)
[17:42:12.150]                 args <- list()
[17:42:12.150]                 for (kk in seq_along(NAMES)) {
[17:42:12.150]                   name <- changed[[kk]]
[17:42:12.150]                   NAME <- NAMES[[kk]]
[17:42:12.150]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.150]                     next
[17:42:12.150]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.150]                 }
[17:42:12.150]                 NAMES <- toupper(added)
[17:42:12.150]                 for (kk in seq_along(NAMES)) {
[17:42:12.150]                   name <- added[[kk]]
[17:42:12.150]                   NAME <- NAMES[[kk]]
[17:42:12.150]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.150]                     next
[17:42:12.150]                   args[[name]] <- ""
[17:42:12.150]                 }
[17:42:12.150]                 NAMES <- toupper(removed)
[17:42:12.150]                 for (kk in seq_along(NAMES)) {
[17:42:12.150]                   name <- removed[[kk]]
[17:42:12.150]                   NAME <- NAMES[[kk]]
[17:42:12.150]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.150]                     next
[17:42:12.150]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.150]                 }
[17:42:12.150]                 if (length(args) > 0) 
[17:42:12.150]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.150]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.150]             }
[17:42:12.150]             else {
[17:42:12.150]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.150]             }
[17:42:12.150]             {
[17:42:12.150]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.150]                   0L) {
[17:42:12.150]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.150]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.150]                   base::options(opts)
[17:42:12.150]                 }
[17:42:12.150]                 {
[17:42:12.150]                   {
[17:42:12.150]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.150]                     NULL
[17:42:12.150]                   }
[17:42:12.150]                   options(future.plan = NULL)
[17:42:12.150]                   if (is.na(NA_character_)) 
[17:42:12.150]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.150]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.150]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:12.150]                     envir = parent.frame()) 
[17:42:12.150]                   {
[17:42:12.150]                     default_workers <- missing(workers)
[17:42:12.150]                     if (is.function(workers)) 
[17:42:12.150]                       workers <- workers()
[17:42:12.150]                     workers <- structure(as.integer(workers), 
[17:42:12.150]                       class = class(workers))
[17:42:12.150]                     stop_if_not(is.finite(workers), workers >= 
[17:42:12.150]                       1L)
[17:42:12.150]                     if ((workers == 1L && !inherits(workers, 
[17:42:12.150]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:12.150]                       if (default_workers) 
[17:42:12.150]                         supportsMulticore(warn = TRUE)
[17:42:12.150]                       return(sequential(..., envir = envir))
[17:42:12.150]                     }
[17:42:12.150]                     oopts <- options(mc.cores = workers)
[17:42:12.150]                     on.exit(options(oopts))
[17:42:12.150]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:12.150]                       envir = envir)
[17:42:12.150]                     if (!future$lazy) 
[17:42:12.150]                       future <- run(future)
[17:42:12.150]                     invisible(future)
[17:42:12.150]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.150]                 }
[17:42:12.150]             }
[17:42:12.150]         }
[17:42:12.150]     })
[17:42:12.150]     if (TRUE) {
[17:42:12.150]         base::sink(type = "output", split = FALSE)
[17:42:12.150]         if (TRUE) {
[17:42:12.150]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.150]         }
[17:42:12.150]         else {
[17:42:12.150]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.150]         }
[17:42:12.150]         base::close(...future.stdout)
[17:42:12.150]         ...future.stdout <- NULL
[17:42:12.150]     }
[17:42:12.150]     ...future.result$conditions <- ...future.conditions
[17:42:12.150]     ...future.result$finished <- base::Sys.time()
[17:42:12.150]     ...future.result
[17:42:12.150] }
[17:42:12.152] assign_globals() ...
[17:42:12.152] List of 1
[17:42:12.152]  $ a: num 1
[17:42:12.152]  - attr(*, "where")=List of 1
[17:42:12.152]   ..$ a:<environment: R_EmptyEnv> 
[17:42:12.152]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:12.152]  - attr(*, "resolved")= logi FALSE
[17:42:12.152]  - attr(*, "total_size")= num 56
[17:42:12.152]  - attr(*, "already-done")= logi TRUE
[17:42:12.158] - copied ‘a’ to environment
[17:42:12.158] assign_globals() ... done
[17:42:12.158] requestCore(): workers = 2
[17:42:12.160] MulticoreFuture started
[17:42:12.161] - Launch lazy future ... done
[17:42:12.161] run() for ‘MulticoreFuture’ ... done
[17:42:12.161] plan(): Setting new future strategy stack:
[17:42:12.162] List of future strategies:
[17:42:12.162] 1. sequential:
[17:42:12.162]    - args: function (..., envir = parent.frame())
[17:42:12.162]    - tweaked: FALSE
[17:42:12.162]    - call: NULL
[17:42:12.162] plan(): nbrOfWorkers() = 1
[17:42:12.165] plan(): Setting new future strategy stack:
[17:42:12.165] List of future strategies:
[17:42:12.165] 1. multicore:
[17:42:12.165]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.165]    - tweaked: FALSE
[17:42:12.165]    - call: plan(strategy)
[17:42:12.170] plan(): nbrOfWorkers() = 2
[17:42:12.172] getGlobalsAndPackages() ...
[17:42:12.172] Searching for globals...
[17:42:12.174] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:12.174] Searching for globals ... DONE
[17:42:12.174] Resolving globals: FALSE
[17:42:12.174] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:12.175] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:12.175] - globals: [1] ‘a’
[17:42:12.175] 
[17:42:12.175] getGlobalsAndPackages() ... DONE
[17:42:12.176] run() for ‘Future’ ...
[17:42:12.176] - state: ‘created’
[17:42:12.176] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.180] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.180] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:12.180]   - Field: ‘label’
[17:42:12.181]   - Field: ‘local’
[17:42:12.181]   - Field: ‘owner’
[17:42:12.181]   - Field: ‘envir’
[17:42:12.181]   - Field: ‘workers’
[17:42:12.181]   - Field: ‘packages’
[17:42:12.181]   - Field: ‘gc’
[17:42:12.181]   - Field: ‘job’
[17:42:12.181]   - Field: ‘conditions’
[17:42:12.182]   - Field: ‘expr’
[17:42:12.182]   - Field: ‘uuid’
[17:42:12.182]   - Field: ‘seed’
[17:42:12.182]   - Field: ‘version’
[17:42:12.182]   - Field: ‘result’
[17:42:12.182]   - Field: ‘asynchronous’
[17:42:12.182]   - Field: ‘calls’
[17:42:12.182]   - Field: ‘globals’
[17:42:12.183]   - Field: ‘stdout’
[17:42:12.183]   - Field: ‘earlySignal’
[17:42:12.183]   - Field: ‘lazy’
[17:42:12.183]   - Field: ‘state’
[17:42:12.183] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:12.183] - Launch lazy future ...
[17:42:12.184] Packages needed by the future expression (n = 0): <none>
[17:42:12.184] Packages needed by future strategies (n = 0): <none>
[17:42:12.184] {
[17:42:12.184]     {
[17:42:12.184]         {
[17:42:12.184]             ...future.startTime <- base::Sys.time()
[17:42:12.184]             {
[17:42:12.184]                 {
[17:42:12.184]                   {
[17:42:12.184]                     {
[17:42:12.184]                       base::local({
[17:42:12.184]                         has_future <- base::requireNamespace("future", 
[17:42:12.184]                           quietly = TRUE)
[17:42:12.184]                         if (has_future) {
[17:42:12.184]                           ns <- base::getNamespace("future")
[17:42:12.184]                           version <- ns[[".package"]][["version"]]
[17:42:12.184]                           if (is.null(version)) 
[17:42:12.184]                             version <- utils::packageVersion("future")
[17:42:12.184]                         }
[17:42:12.184]                         else {
[17:42:12.184]                           version <- NULL
[17:42:12.184]                         }
[17:42:12.184]                         if (!has_future || version < "1.8.0") {
[17:42:12.184]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.184]                             "", base::R.version$version.string), 
[17:42:12.184]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.184]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.184]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.184]                               "release", "version")], collapse = " "), 
[17:42:12.184]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.184]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.184]                             info)
[17:42:12.184]                           info <- base::paste(info, collapse = "; ")
[17:42:12.184]                           if (!has_future) {
[17:42:12.184]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.184]                               info)
[17:42:12.184]                           }
[17:42:12.184]                           else {
[17:42:12.184]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.184]                               info, version)
[17:42:12.184]                           }
[17:42:12.184]                           base::stop(msg)
[17:42:12.184]                         }
[17:42:12.184]                       })
[17:42:12.184]                     }
[17:42:12.184]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.184]                     base::options(mc.cores = 1L)
[17:42:12.184]                   }
[17:42:12.184]                   options(future.plan = NULL)
[17:42:12.184]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.184]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.184]                 }
[17:42:12.184]                 ...future.workdir <- getwd()
[17:42:12.184]             }
[17:42:12.184]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.184]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.184]         }
[17:42:12.184]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.184]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.184]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.184]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.184]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.184]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.184]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.184]             base::names(...future.oldOptions))
[17:42:12.184]     }
[17:42:12.184]     if (FALSE) {
[17:42:12.184]     }
[17:42:12.184]     else {
[17:42:12.184]         if (TRUE) {
[17:42:12.184]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.184]                 open = "w")
[17:42:12.184]         }
[17:42:12.184]         else {
[17:42:12.184]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.184]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.184]         }
[17:42:12.184]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.184]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.184]             base::sink(type = "output", split = FALSE)
[17:42:12.184]             base::close(...future.stdout)
[17:42:12.184]         }, add = TRUE)
[17:42:12.184]     }
[17:42:12.184]     ...future.frame <- base::sys.nframe()
[17:42:12.184]     ...future.conditions <- base::list()
[17:42:12.184]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.184]     if (FALSE) {
[17:42:12.184]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.184]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.184]     }
[17:42:12.184]     ...future.result <- base::tryCatch({
[17:42:12.184]         base::withCallingHandlers({
[17:42:12.184]             ...future.value <- base::withVisible(base::local({
[17:42:12.184]                 withCallingHandlers({
[17:42:12.184]                   {
[17:42:12.184]                     2 * a
[17:42:12.184]                   }
[17:42:12.184]                 }, immediateCondition = function(cond) {
[17:42:12.184]                   save_rds <- function (object, pathname, ...) 
[17:42:12.184]                   {
[17:42:12.184]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:12.184]                     if (file_test("-f", pathname_tmp)) {
[17:42:12.184]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.184]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:12.184]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.184]                         fi_tmp[["mtime"]])
[17:42:12.184]                     }
[17:42:12.184]                     tryCatch({
[17:42:12.184]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:12.184]                     }, error = function(ex) {
[17:42:12.184]                       msg <- conditionMessage(ex)
[17:42:12.184]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.184]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:12.184]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.184]                         fi_tmp[["mtime"]], msg)
[17:42:12.184]                       ex$message <- msg
[17:42:12.184]                       stop(ex)
[17:42:12.184]                     })
[17:42:12.184]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:12.184]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:12.184]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:12.184]                       fi_tmp <- file.info(pathname_tmp)
[17:42:12.184]                       fi <- file.info(pathname)
[17:42:12.184]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:12.184]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:12.184]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:12.184]                         fi[["size"]], fi[["mtime"]])
[17:42:12.184]                       stop(msg)
[17:42:12.184]                     }
[17:42:12.184]                     invisible(pathname)
[17:42:12.184]                   }
[17:42:12.184]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:12.184]                     rootPath = tempdir()) 
[17:42:12.184]                   {
[17:42:12.184]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:12.184]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:12.184]                       tmpdir = path, fileext = ".rds")
[17:42:12.184]                     save_rds(obj, file)
[17:42:12.184]                   }
[17:42:12.184]                   saveImmediateCondition(cond, path = "/tmp/RtmpXnyYm0/.future/immediateConditions")
[17:42:12.184]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.184]                   {
[17:42:12.184]                     inherits <- base::inherits
[17:42:12.184]                     invokeRestart <- base::invokeRestart
[17:42:12.184]                     is.null <- base::is.null
[17:42:12.184]                     muffled <- FALSE
[17:42:12.184]                     if (inherits(cond, "message")) {
[17:42:12.184]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.184]                       if (muffled) 
[17:42:12.184]                         invokeRestart("muffleMessage")
[17:42:12.184]                     }
[17:42:12.184]                     else if (inherits(cond, "warning")) {
[17:42:12.184]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.184]                       if (muffled) 
[17:42:12.184]                         invokeRestart("muffleWarning")
[17:42:12.184]                     }
[17:42:12.184]                     else if (inherits(cond, "condition")) {
[17:42:12.184]                       if (!is.null(pattern)) {
[17:42:12.184]                         computeRestarts <- base::computeRestarts
[17:42:12.184]                         grepl <- base::grepl
[17:42:12.184]                         restarts <- computeRestarts(cond)
[17:42:12.184]                         for (restart in restarts) {
[17:42:12.184]                           name <- restart$name
[17:42:12.184]                           if (is.null(name)) 
[17:42:12.184]                             next
[17:42:12.184]                           if (!grepl(pattern, name)) 
[17:42:12.184]                             next
[17:42:12.184]                           invokeRestart(restart)
[17:42:12.184]                           muffled <- TRUE
[17:42:12.184]                           break
[17:42:12.184]                         }
[17:42:12.184]                       }
[17:42:12.184]                     }
[17:42:12.184]                     invisible(muffled)
[17:42:12.184]                   }
[17:42:12.184]                   muffleCondition(cond)
[17:42:12.184]                 })
[17:42:12.184]             }))
[17:42:12.184]             future::FutureResult(value = ...future.value$value, 
[17:42:12.184]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.184]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.184]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.184]                     ...future.globalenv.names))
[17:42:12.184]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.184]         }, condition = base::local({
[17:42:12.184]             c <- base::c
[17:42:12.184]             inherits <- base::inherits
[17:42:12.184]             invokeRestart <- base::invokeRestart
[17:42:12.184]             length <- base::length
[17:42:12.184]             list <- base::list
[17:42:12.184]             seq.int <- base::seq.int
[17:42:12.184]             signalCondition <- base::signalCondition
[17:42:12.184]             sys.calls <- base::sys.calls
[17:42:12.184]             `[[` <- base::`[[`
[17:42:12.184]             `+` <- base::`+`
[17:42:12.184]             `<<-` <- base::`<<-`
[17:42:12.184]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.184]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.184]                   3L)]
[17:42:12.184]             }
[17:42:12.184]             function(cond) {
[17:42:12.184]                 is_error <- inherits(cond, "error")
[17:42:12.184]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.184]                   NULL)
[17:42:12.184]                 if (is_error) {
[17:42:12.184]                   sessionInformation <- function() {
[17:42:12.184]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.184]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.184]                       search = base::search(), system = base::Sys.info())
[17:42:12.184]                   }
[17:42:12.184]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.184]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.184]                     cond$call), session = sessionInformation(), 
[17:42:12.184]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.184]                   signalCondition(cond)
[17:42:12.184]                 }
[17:42:12.184]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.184]                 "immediateCondition"))) {
[17:42:12.184]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.184]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.184]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.184]                   if (TRUE && !signal) {
[17:42:12.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.184]                     {
[17:42:12.184]                       inherits <- base::inherits
[17:42:12.184]                       invokeRestart <- base::invokeRestart
[17:42:12.184]                       is.null <- base::is.null
[17:42:12.184]                       muffled <- FALSE
[17:42:12.184]                       if (inherits(cond, "message")) {
[17:42:12.184]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.184]                         if (muffled) 
[17:42:12.184]                           invokeRestart("muffleMessage")
[17:42:12.184]                       }
[17:42:12.184]                       else if (inherits(cond, "warning")) {
[17:42:12.184]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.184]                         if (muffled) 
[17:42:12.184]                           invokeRestart("muffleWarning")
[17:42:12.184]                       }
[17:42:12.184]                       else if (inherits(cond, "condition")) {
[17:42:12.184]                         if (!is.null(pattern)) {
[17:42:12.184]                           computeRestarts <- base::computeRestarts
[17:42:12.184]                           grepl <- base::grepl
[17:42:12.184]                           restarts <- computeRestarts(cond)
[17:42:12.184]                           for (restart in restarts) {
[17:42:12.184]                             name <- restart$name
[17:42:12.184]                             if (is.null(name)) 
[17:42:12.184]                               next
[17:42:12.184]                             if (!grepl(pattern, name)) 
[17:42:12.184]                               next
[17:42:12.184]                             invokeRestart(restart)
[17:42:12.184]                             muffled <- TRUE
[17:42:12.184]                             break
[17:42:12.184]                           }
[17:42:12.184]                         }
[17:42:12.184]                       }
[17:42:12.184]                       invisible(muffled)
[17:42:12.184]                     }
[17:42:12.184]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.184]                   }
[17:42:12.184]                 }
[17:42:12.184]                 else {
[17:42:12.184]                   if (TRUE) {
[17:42:12.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.184]                     {
[17:42:12.184]                       inherits <- base::inherits
[17:42:12.184]                       invokeRestart <- base::invokeRestart
[17:42:12.184]                       is.null <- base::is.null
[17:42:12.184]                       muffled <- FALSE
[17:42:12.184]                       if (inherits(cond, "message")) {
[17:42:12.184]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.184]                         if (muffled) 
[17:42:12.184]                           invokeRestart("muffleMessage")
[17:42:12.184]                       }
[17:42:12.184]                       else if (inherits(cond, "warning")) {
[17:42:12.184]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.184]                         if (muffled) 
[17:42:12.184]                           invokeRestart("muffleWarning")
[17:42:12.184]                       }
[17:42:12.184]                       else if (inherits(cond, "condition")) {
[17:42:12.184]                         if (!is.null(pattern)) {
[17:42:12.184]                           computeRestarts <- base::computeRestarts
[17:42:12.184]                           grepl <- base::grepl
[17:42:12.184]                           restarts <- computeRestarts(cond)
[17:42:12.184]                           for (restart in restarts) {
[17:42:12.184]                             name <- restart$name
[17:42:12.184]                             if (is.null(name)) 
[17:42:12.184]                               next
[17:42:12.184]                             if (!grepl(pattern, name)) 
[17:42:12.184]                               next
[17:42:12.184]                             invokeRestart(restart)
[17:42:12.184]                             muffled <- TRUE
[17:42:12.184]                             break
[17:42:12.184]                           }
[17:42:12.184]                         }
[17:42:12.184]                       }
[17:42:12.184]                       invisible(muffled)
[17:42:12.184]                     }
[17:42:12.184]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.184]                   }
[17:42:12.184]                 }
[17:42:12.184]             }
[17:42:12.184]         }))
[17:42:12.184]     }, error = function(ex) {
[17:42:12.184]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.184]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.184]                 ...future.rng), started = ...future.startTime, 
[17:42:12.184]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.184]             version = "1.8"), class = "FutureResult")
[17:42:12.184]     }, finally = {
[17:42:12.184]         if (!identical(...future.workdir, getwd())) 
[17:42:12.184]             setwd(...future.workdir)
[17:42:12.184]         {
[17:42:12.184]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.184]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.184]             }
[17:42:12.184]             base::options(...future.oldOptions)
[17:42:12.184]             if (.Platform$OS.type == "windows") {
[17:42:12.184]                 old_names <- names(...future.oldEnvVars)
[17:42:12.184]                 envs <- base::Sys.getenv()
[17:42:12.184]                 names <- names(envs)
[17:42:12.184]                 common <- intersect(names, old_names)
[17:42:12.184]                 added <- setdiff(names, old_names)
[17:42:12.184]                 removed <- setdiff(old_names, names)
[17:42:12.184]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.184]                   envs[common]]
[17:42:12.184]                 NAMES <- toupper(changed)
[17:42:12.184]                 args <- list()
[17:42:12.184]                 for (kk in seq_along(NAMES)) {
[17:42:12.184]                   name <- changed[[kk]]
[17:42:12.184]                   NAME <- NAMES[[kk]]
[17:42:12.184]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.184]                     next
[17:42:12.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.184]                 }
[17:42:12.184]                 NAMES <- toupper(added)
[17:42:12.184]                 for (kk in seq_along(NAMES)) {
[17:42:12.184]                   name <- added[[kk]]
[17:42:12.184]                   NAME <- NAMES[[kk]]
[17:42:12.184]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.184]                     next
[17:42:12.184]                   args[[name]] <- ""
[17:42:12.184]                 }
[17:42:12.184]                 NAMES <- toupper(removed)
[17:42:12.184]                 for (kk in seq_along(NAMES)) {
[17:42:12.184]                   name <- removed[[kk]]
[17:42:12.184]                   NAME <- NAMES[[kk]]
[17:42:12.184]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.184]                     next
[17:42:12.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.184]                 }
[17:42:12.184]                 if (length(args) > 0) 
[17:42:12.184]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.184]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.184]             }
[17:42:12.184]             else {
[17:42:12.184]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.184]             }
[17:42:12.184]             {
[17:42:12.184]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.184]                   0L) {
[17:42:12.184]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.184]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.184]                   base::options(opts)
[17:42:12.184]                 }
[17:42:12.184]                 {
[17:42:12.184]                   {
[17:42:12.184]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.184]                     NULL
[17:42:12.184]                   }
[17:42:12.184]                   options(future.plan = NULL)
[17:42:12.184]                   if (is.na(NA_character_)) 
[17:42:12.184]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.184]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.184]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:12.184]                     envir = parent.frame()) 
[17:42:12.184]                   {
[17:42:12.184]                     default_workers <- missing(workers)
[17:42:12.184]                     if (is.function(workers)) 
[17:42:12.184]                       workers <- workers()
[17:42:12.184]                     workers <- structure(as.integer(workers), 
[17:42:12.184]                       class = class(workers))
[17:42:12.184]                     stop_if_not(is.finite(workers), workers >= 
[17:42:12.184]                       1L)
[17:42:12.184]                     if ((workers == 1L && !inherits(workers, 
[17:42:12.184]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:12.184]                       if (default_workers) 
[17:42:12.184]                         supportsMulticore(warn = TRUE)
[17:42:12.184]                       return(sequential(..., envir = envir))
[17:42:12.184]                     }
[17:42:12.184]                     oopts <- options(mc.cores = workers)
[17:42:12.184]                     on.exit(options(oopts))
[17:42:12.184]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:12.184]                       envir = envir)
[17:42:12.184]                     if (!future$lazy) 
[17:42:12.184]                       future <- run(future)
[17:42:12.184]                     invisible(future)
[17:42:12.184]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.184]                 }
[17:42:12.184]             }
[17:42:12.184]         }
[17:42:12.184]     })
[17:42:12.184]     if (TRUE) {
[17:42:12.184]         base::sink(type = "output", split = FALSE)
[17:42:12.184]         if (TRUE) {
[17:42:12.184]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.184]         }
[17:42:12.184]         else {
[17:42:12.184]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.184]         }
[17:42:12.184]         base::close(...future.stdout)
[17:42:12.184]         ...future.stdout <- NULL
[17:42:12.184]     }
[17:42:12.184]     ...future.result$conditions <- ...future.conditions
[17:42:12.184]     ...future.result$finished <- base::Sys.time()
[17:42:12.184]     ...future.result
[17:42:12.184] }
[17:42:12.187] assign_globals() ...
[17:42:12.187] List of 1
[17:42:12.187]  $ a: num 1
[17:42:12.187]  - attr(*, "where")=List of 1
[17:42:12.187]   ..$ a:<environment: R_EmptyEnv> 
[17:42:12.187]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:12.187]  - attr(*, "resolved")= logi FALSE
[17:42:12.187]  - attr(*, "total_size")= num 56
[17:42:12.187]  - attr(*, "already-done")= logi TRUE
[17:42:12.190] - copied ‘a’ to environment
[17:42:12.190] assign_globals() ... done
[17:42:12.191] requestCore(): workers = 2
[17:42:12.192] MulticoreFuture started
[17:42:12.193] - Launch lazy future ... done
[17:42:12.193] run() for ‘MulticoreFuture’ ... done
[17:42:12.193] plan(): Setting new future strategy stack:
[17:42:12.194] List of future strategies:
[17:42:12.194] 1. sequential:
[17:42:12.194]    - args: function (..., envir = parent.frame())
[17:42:12.194]    - tweaked: FALSE
[17:42:12.194]    - call: NULL
[17:42:12.194] plan(): nbrOfWorkers() = 1
[17:42:12.196] plan(): Setting new future strategy stack:
[17:42:12.196] List of future strategies:
[17:42:12.196] 1. multicore:
[17:42:12.196]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:12.196]    - tweaked: FALSE
[17:42:12.196]    - call: plan(strategy)
[17:42:12.202] plan(): nbrOfWorkers() = 2
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[17:42:12.204] plan(): Setting new future strategy stack:
[17:42:12.204] List of future strategies:
[17:42:12.204] 1. multisession:
[17:42:12.204]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:42:12.204]    - tweaked: FALSE
[17:42:12.204]    - call: plan(strategy)
[17:42:12.205] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:42:12.205] multisession:
[17:42:12.205] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:42:12.205] - tweaked: FALSE
[17:42:12.205] - call: plan(strategy)
[17:42:12.212] getGlobalsAndPackages() ...
[17:42:12.213] Not searching for globals
[17:42:12.213] - globals: [0] <none>
[17:42:12.213] getGlobalsAndPackages() ... DONE
[17:42:12.214] [local output] makeClusterPSOCK() ...
[17:42:12.254] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:12.260] [local output] Base port: 11494
[17:42:12.260] [local output] Getting setup options for 2 cluster nodes ...
[17:42:12.260] [local output]  - Node 1 of 2 ...
[17:42:12.261] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:12.262] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXnyYm0/worker.rank=1.parallelly.parent=44025.abf94044f3e9.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpXnyYm0/worker.rank=1.parallelly.parent=44025.abf94044f3e9.pid")'’
[17:42:12.452] - Possible to infer worker's PID: TRUE
[17:42:12.452] [local output] Rscript port: 11494

[17:42:12.452] [local output]  - Node 2 of 2 ...
[17:42:12.453] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:12.453] [local output] Rscript port: 11494

[17:42:12.454] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:12.454] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:12.454] [local output] Setting up PSOCK nodes in parallel
[17:42:12.454] List of 36
[17:42:12.454]  $ worker          : chr "localhost"
[17:42:12.454]   ..- attr(*, "localhost")= logi TRUE
[17:42:12.454]  $ master          : chr "localhost"
[17:42:12.454]  $ port            : int 11494
[17:42:12.454]  $ connectTimeout  : num 120
[17:42:12.454]  $ timeout         : num 2592000
[17:42:12.454]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:12.454]  $ homogeneous     : logi TRUE
[17:42:12.454]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:12.454]  $ rscript_envs    : NULL
[17:42:12.454]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:12.454]  $ rscript_startup : NULL
[17:42:12.454]  $ rscript_sh      : chr "sh"
[17:42:12.454]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:12.454]  $ methods         : logi TRUE
[17:42:12.454]  $ socketOptions   : chr "no-delay"
[17:42:12.454]  $ useXDR          : logi FALSE
[17:42:12.454]  $ outfile         : chr "/dev/null"
[17:42:12.454]  $ renice          : int NA
[17:42:12.454]  $ rshcmd          : NULL
[17:42:12.454]  $ user            : chr(0) 
[17:42:12.454]  $ revtunnel       : logi FALSE
[17:42:12.454]  $ rshlogfile      : NULL
[17:42:12.454]  $ rshopts         : chr(0) 
[17:42:12.454]  $ rank            : int 1
[17:42:12.454]  $ manual          : logi FALSE
[17:42:12.454]  $ dryrun          : logi FALSE
[17:42:12.454]  $ quiet           : logi FALSE
[17:42:12.454]  $ setup_strategy  : chr "parallel"
[17:42:12.454]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:12.454]  $ pidfile         : chr "/tmp/RtmpXnyYm0/worker.rank=1.parallelly.parent=44025.abf94044f3e9.pid"
[17:42:12.454]  $ rshcmd_label    : NULL
[17:42:12.454]  $ rsh_call        : NULL
[17:42:12.454]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:12.454]  $ localMachine    : logi TRUE
[17:42:12.454]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:12.454]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:12.454]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:12.454]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:12.454]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:12.454]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:12.454]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:12.454]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:12.454]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:12.454]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:12.454]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:12.454]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:12.454]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:12.454]  $ arguments       :List of 28
[17:42:12.454]   ..$ worker          : chr "localhost"
[17:42:12.454]   ..$ master          : NULL
[17:42:12.454]   ..$ port            : int 11494
[17:42:12.454]   ..$ connectTimeout  : num 120
[17:42:12.454]   ..$ timeout         : num 2592000
[17:42:12.454]   ..$ rscript         : NULL
[17:42:12.454]   ..$ homogeneous     : NULL
[17:42:12.454]   ..$ rscript_args    : NULL
[17:42:12.454]   ..$ rscript_envs    : NULL
[17:42:12.454]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:12.454]   ..$ rscript_startup : NULL
[17:42:12.454]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:12.454]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:12.454]   ..$ methods         : logi TRUE
[17:42:12.454]   ..$ socketOptions   : chr "no-delay"
[17:42:12.454]   ..$ useXDR          : logi FALSE
[17:42:12.454]   ..$ outfile         : chr "/dev/null"
[17:42:12.454]   ..$ renice          : int NA
[17:42:12.454]   ..$ rshcmd          : NULL
[17:42:12.454]   ..$ user            : NULL
[17:42:12.454]   ..$ revtunnel       : logi NA
[17:42:12.454]   ..$ rshlogfile      : NULL
[17:42:12.454]   ..$ rshopts         : NULL
[17:42:12.454]   ..$ rank            : int 1
[17:42:12.454]   ..$ manual          : logi FALSE
[17:42:12.454]   ..$ dryrun          : logi FALSE
[17:42:12.454]   ..$ quiet           : logi FALSE
[17:42:12.454]   ..$ setup_strategy  : chr "parallel"
[17:42:12.454]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:12.471] [local output] System call to launch all workers:
[17:42:12.471] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXnyYm0/worker.rank=1.parallelly.parent=44025.abf94044f3e9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11494 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:12.471] [local output] Starting PSOCK main server
[17:42:12.473] [local output] Workers launched
[17:42:12.473] [local output] Waiting for workers to connect back
[17:42:12.473]  - [local output] 0 workers out of 2 ready
[17:42:12.720]  - [local output] 0 workers out of 2 ready
[17:42:12.721]  - [local output] 1 workers out of 2 ready
[17:42:12.721]  - [local output] 1 workers out of 2 ready
[17:42:12.722]  - [local output] 2 workers out of 2 ready
[17:42:12.722] [local output] Launching of workers completed
[17:42:12.722] [local output] Collecting session information from workers
[17:42:12.723] [local output]  - Worker #1 of 2
[17:42:12.723] [local output]  - Worker #2 of 2
[17:42:12.724] [local output] makeClusterPSOCK() ... done
[17:42:12.736] Packages needed by the future expression (n = 0): <none>
[17:42:12.736] Packages needed by future strategies (n = 0): <none>
[17:42:12.737] {
[17:42:12.737]     {
[17:42:12.737]         {
[17:42:12.737]             ...future.startTime <- base::Sys.time()
[17:42:12.737]             {
[17:42:12.737]                 {
[17:42:12.737]                   {
[17:42:12.737]                     {
[17:42:12.737]                       base::local({
[17:42:12.737]                         has_future <- base::requireNamespace("future", 
[17:42:12.737]                           quietly = TRUE)
[17:42:12.737]                         if (has_future) {
[17:42:12.737]                           ns <- base::getNamespace("future")
[17:42:12.737]                           version <- ns[[".package"]][["version"]]
[17:42:12.737]                           if (is.null(version)) 
[17:42:12.737]                             version <- utils::packageVersion("future")
[17:42:12.737]                         }
[17:42:12.737]                         else {
[17:42:12.737]                           version <- NULL
[17:42:12.737]                         }
[17:42:12.737]                         if (!has_future || version < "1.8.0") {
[17:42:12.737]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.737]                             "", base::R.version$version.string), 
[17:42:12.737]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.737]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.737]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.737]                               "release", "version")], collapse = " "), 
[17:42:12.737]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.737]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.737]                             info)
[17:42:12.737]                           info <- base::paste(info, collapse = "; ")
[17:42:12.737]                           if (!has_future) {
[17:42:12.737]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.737]                               info)
[17:42:12.737]                           }
[17:42:12.737]                           else {
[17:42:12.737]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.737]                               info, version)
[17:42:12.737]                           }
[17:42:12.737]                           base::stop(msg)
[17:42:12.737]                         }
[17:42:12.737]                       })
[17:42:12.737]                     }
[17:42:12.737]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.737]                     base::options(mc.cores = 1L)
[17:42:12.737]                   }
[17:42:12.737]                   options(future.plan = NULL)
[17:42:12.737]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.737]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.737]                 }
[17:42:12.737]                 ...future.workdir <- getwd()
[17:42:12.737]             }
[17:42:12.737]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.737]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.737]         }
[17:42:12.737]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.737]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.737]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.737]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.737]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.737]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.737]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.737]             base::names(...future.oldOptions))
[17:42:12.737]     }
[17:42:12.737]     if (FALSE) {
[17:42:12.737]     }
[17:42:12.737]     else {
[17:42:12.737]         if (TRUE) {
[17:42:12.737]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.737]                 open = "w")
[17:42:12.737]         }
[17:42:12.737]         else {
[17:42:12.737]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.737]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.737]         }
[17:42:12.737]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.737]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.737]             base::sink(type = "output", split = FALSE)
[17:42:12.737]             base::close(...future.stdout)
[17:42:12.737]         }, add = TRUE)
[17:42:12.737]     }
[17:42:12.737]     ...future.frame <- base::sys.nframe()
[17:42:12.737]     ...future.conditions <- base::list()
[17:42:12.737]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.737]     if (FALSE) {
[17:42:12.737]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.737]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.737]     }
[17:42:12.737]     ...future.result <- base::tryCatch({
[17:42:12.737]         base::withCallingHandlers({
[17:42:12.737]             ...future.value <- base::withVisible(base::local({
[17:42:12.737]                 ...future.makeSendCondition <- local({
[17:42:12.737]                   sendCondition <- NULL
[17:42:12.737]                   function(frame = 1L) {
[17:42:12.737]                     if (is.function(sendCondition)) 
[17:42:12.737]                       return(sendCondition)
[17:42:12.737]                     ns <- getNamespace("parallel")
[17:42:12.737]                     if (exists("sendData", mode = "function", 
[17:42:12.737]                       envir = ns)) {
[17:42:12.737]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:12.737]                         envir = ns)
[17:42:12.737]                       envir <- sys.frame(frame)
[17:42:12.737]                       master <- NULL
[17:42:12.737]                       while (!identical(envir, .GlobalEnv) && 
[17:42:12.737]                         !identical(envir, emptyenv())) {
[17:42:12.737]                         if (exists("master", mode = "list", envir = envir, 
[17:42:12.737]                           inherits = FALSE)) {
[17:42:12.737]                           master <- get("master", mode = "list", 
[17:42:12.737]                             envir = envir, inherits = FALSE)
[17:42:12.737]                           if (inherits(master, c("SOCKnode", 
[17:42:12.737]                             "SOCK0node"))) {
[17:42:12.737]                             sendCondition <<- function(cond) {
[17:42:12.737]                               data <- list(type = "VALUE", value = cond, 
[17:42:12.737]                                 success = TRUE)
[17:42:12.737]                               parallel_sendData(master, data)
[17:42:12.737]                             }
[17:42:12.737]                             return(sendCondition)
[17:42:12.737]                           }
[17:42:12.737]                         }
[17:42:12.737]                         frame <- frame + 1L
[17:42:12.737]                         envir <- sys.frame(frame)
[17:42:12.737]                       }
[17:42:12.737]                     }
[17:42:12.737]                     sendCondition <<- function(cond) NULL
[17:42:12.737]                   }
[17:42:12.737]                 })
[17:42:12.737]                 withCallingHandlers({
[17:42:12.737]                   NA
[17:42:12.737]                 }, immediateCondition = function(cond) {
[17:42:12.737]                   sendCondition <- ...future.makeSendCondition()
[17:42:12.737]                   sendCondition(cond)
[17:42:12.737]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.737]                   {
[17:42:12.737]                     inherits <- base::inherits
[17:42:12.737]                     invokeRestart <- base::invokeRestart
[17:42:12.737]                     is.null <- base::is.null
[17:42:12.737]                     muffled <- FALSE
[17:42:12.737]                     if (inherits(cond, "message")) {
[17:42:12.737]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.737]                       if (muffled) 
[17:42:12.737]                         invokeRestart("muffleMessage")
[17:42:12.737]                     }
[17:42:12.737]                     else if (inherits(cond, "warning")) {
[17:42:12.737]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.737]                       if (muffled) 
[17:42:12.737]                         invokeRestart("muffleWarning")
[17:42:12.737]                     }
[17:42:12.737]                     else if (inherits(cond, "condition")) {
[17:42:12.737]                       if (!is.null(pattern)) {
[17:42:12.737]                         computeRestarts <- base::computeRestarts
[17:42:12.737]                         grepl <- base::grepl
[17:42:12.737]                         restarts <- computeRestarts(cond)
[17:42:12.737]                         for (restart in restarts) {
[17:42:12.737]                           name <- restart$name
[17:42:12.737]                           if (is.null(name)) 
[17:42:12.737]                             next
[17:42:12.737]                           if (!grepl(pattern, name)) 
[17:42:12.737]                             next
[17:42:12.737]                           invokeRestart(restart)
[17:42:12.737]                           muffled <- TRUE
[17:42:12.737]                           break
[17:42:12.737]                         }
[17:42:12.737]                       }
[17:42:12.737]                     }
[17:42:12.737]                     invisible(muffled)
[17:42:12.737]                   }
[17:42:12.737]                   muffleCondition(cond)
[17:42:12.737]                 })
[17:42:12.737]             }))
[17:42:12.737]             future::FutureResult(value = ...future.value$value, 
[17:42:12.737]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.737]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.737]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.737]                     ...future.globalenv.names))
[17:42:12.737]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.737]         }, condition = base::local({
[17:42:12.737]             c <- base::c
[17:42:12.737]             inherits <- base::inherits
[17:42:12.737]             invokeRestart <- base::invokeRestart
[17:42:12.737]             length <- base::length
[17:42:12.737]             list <- base::list
[17:42:12.737]             seq.int <- base::seq.int
[17:42:12.737]             signalCondition <- base::signalCondition
[17:42:12.737]             sys.calls <- base::sys.calls
[17:42:12.737]             `[[` <- base::`[[`
[17:42:12.737]             `+` <- base::`+`
[17:42:12.737]             `<<-` <- base::`<<-`
[17:42:12.737]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.737]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.737]                   3L)]
[17:42:12.737]             }
[17:42:12.737]             function(cond) {
[17:42:12.737]                 is_error <- inherits(cond, "error")
[17:42:12.737]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.737]                   NULL)
[17:42:12.737]                 if (is_error) {
[17:42:12.737]                   sessionInformation <- function() {
[17:42:12.737]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.737]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.737]                       search = base::search(), system = base::Sys.info())
[17:42:12.737]                   }
[17:42:12.737]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.737]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.737]                     cond$call), session = sessionInformation(), 
[17:42:12.737]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.737]                   signalCondition(cond)
[17:42:12.737]                 }
[17:42:12.737]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.737]                 "immediateCondition"))) {
[17:42:12.737]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.737]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.737]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.737]                   if (TRUE && !signal) {
[17:42:12.737]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.737]                     {
[17:42:12.737]                       inherits <- base::inherits
[17:42:12.737]                       invokeRestart <- base::invokeRestart
[17:42:12.737]                       is.null <- base::is.null
[17:42:12.737]                       muffled <- FALSE
[17:42:12.737]                       if (inherits(cond, "message")) {
[17:42:12.737]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.737]                         if (muffled) 
[17:42:12.737]                           invokeRestart("muffleMessage")
[17:42:12.737]                       }
[17:42:12.737]                       else if (inherits(cond, "warning")) {
[17:42:12.737]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.737]                         if (muffled) 
[17:42:12.737]                           invokeRestart("muffleWarning")
[17:42:12.737]                       }
[17:42:12.737]                       else if (inherits(cond, "condition")) {
[17:42:12.737]                         if (!is.null(pattern)) {
[17:42:12.737]                           computeRestarts <- base::computeRestarts
[17:42:12.737]                           grepl <- base::grepl
[17:42:12.737]                           restarts <- computeRestarts(cond)
[17:42:12.737]                           for (restart in restarts) {
[17:42:12.737]                             name <- restart$name
[17:42:12.737]                             if (is.null(name)) 
[17:42:12.737]                               next
[17:42:12.737]                             if (!grepl(pattern, name)) 
[17:42:12.737]                               next
[17:42:12.737]                             invokeRestart(restart)
[17:42:12.737]                             muffled <- TRUE
[17:42:12.737]                             break
[17:42:12.737]                           }
[17:42:12.737]                         }
[17:42:12.737]                       }
[17:42:12.737]                       invisible(muffled)
[17:42:12.737]                     }
[17:42:12.737]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.737]                   }
[17:42:12.737]                 }
[17:42:12.737]                 else {
[17:42:12.737]                   if (TRUE) {
[17:42:12.737]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.737]                     {
[17:42:12.737]                       inherits <- base::inherits
[17:42:12.737]                       invokeRestart <- base::invokeRestart
[17:42:12.737]                       is.null <- base::is.null
[17:42:12.737]                       muffled <- FALSE
[17:42:12.737]                       if (inherits(cond, "message")) {
[17:42:12.737]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.737]                         if (muffled) 
[17:42:12.737]                           invokeRestart("muffleMessage")
[17:42:12.737]                       }
[17:42:12.737]                       else if (inherits(cond, "warning")) {
[17:42:12.737]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.737]                         if (muffled) 
[17:42:12.737]                           invokeRestart("muffleWarning")
[17:42:12.737]                       }
[17:42:12.737]                       else if (inherits(cond, "condition")) {
[17:42:12.737]                         if (!is.null(pattern)) {
[17:42:12.737]                           computeRestarts <- base::computeRestarts
[17:42:12.737]                           grepl <- base::grepl
[17:42:12.737]                           restarts <- computeRestarts(cond)
[17:42:12.737]                           for (restart in restarts) {
[17:42:12.737]                             name <- restart$name
[17:42:12.737]                             if (is.null(name)) 
[17:42:12.737]                               next
[17:42:12.737]                             if (!grepl(pattern, name)) 
[17:42:12.737]                               next
[17:42:12.737]                             invokeRestart(restart)
[17:42:12.737]                             muffled <- TRUE
[17:42:12.737]                             break
[17:42:12.737]                           }
[17:42:12.737]                         }
[17:42:12.737]                       }
[17:42:12.737]                       invisible(muffled)
[17:42:12.737]                     }
[17:42:12.737]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.737]                   }
[17:42:12.737]                 }
[17:42:12.737]             }
[17:42:12.737]         }))
[17:42:12.737]     }, error = function(ex) {
[17:42:12.737]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.737]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.737]                 ...future.rng), started = ...future.startTime, 
[17:42:12.737]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.737]             version = "1.8"), class = "FutureResult")
[17:42:12.737]     }, finally = {
[17:42:12.737]         if (!identical(...future.workdir, getwd())) 
[17:42:12.737]             setwd(...future.workdir)
[17:42:12.737]         {
[17:42:12.737]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.737]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.737]             }
[17:42:12.737]             base::options(...future.oldOptions)
[17:42:12.737]             if (.Platform$OS.type == "windows") {
[17:42:12.737]                 old_names <- names(...future.oldEnvVars)
[17:42:12.737]                 envs <- base::Sys.getenv()
[17:42:12.737]                 names <- names(envs)
[17:42:12.737]                 common <- intersect(names, old_names)
[17:42:12.737]                 added <- setdiff(names, old_names)
[17:42:12.737]                 removed <- setdiff(old_names, names)
[17:42:12.737]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.737]                   envs[common]]
[17:42:12.737]                 NAMES <- toupper(changed)
[17:42:12.737]                 args <- list()
[17:42:12.737]                 for (kk in seq_along(NAMES)) {
[17:42:12.737]                   name <- changed[[kk]]
[17:42:12.737]                   NAME <- NAMES[[kk]]
[17:42:12.737]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.737]                     next
[17:42:12.737]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.737]                 }
[17:42:12.737]                 NAMES <- toupper(added)
[17:42:12.737]                 for (kk in seq_along(NAMES)) {
[17:42:12.737]                   name <- added[[kk]]
[17:42:12.737]                   NAME <- NAMES[[kk]]
[17:42:12.737]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.737]                     next
[17:42:12.737]                   args[[name]] <- ""
[17:42:12.737]                 }
[17:42:12.737]                 NAMES <- toupper(removed)
[17:42:12.737]                 for (kk in seq_along(NAMES)) {
[17:42:12.737]                   name <- removed[[kk]]
[17:42:12.737]                   NAME <- NAMES[[kk]]
[17:42:12.737]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.737]                     next
[17:42:12.737]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.737]                 }
[17:42:12.737]                 if (length(args) > 0) 
[17:42:12.737]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.737]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.737]             }
[17:42:12.737]             else {
[17:42:12.737]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.737]             }
[17:42:12.737]             {
[17:42:12.737]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.737]                   0L) {
[17:42:12.737]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.737]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.737]                   base::options(opts)
[17:42:12.737]                 }
[17:42:12.737]                 {
[17:42:12.737]                   {
[17:42:12.737]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.737]                     NULL
[17:42:12.737]                   }
[17:42:12.737]                   options(future.plan = NULL)
[17:42:12.737]                   if (is.na(NA_character_)) 
[17:42:12.737]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.737]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.737]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:12.737]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:12.737]                     envir = parent.frame()) 
[17:42:12.737]                   {
[17:42:12.737]                     if (is.function(workers)) 
[17:42:12.737]                       workers <- workers()
[17:42:12.737]                     workers <- structure(as.integer(workers), 
[17:42:12.737]                       class = class(workers))
[17:42:12.737]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:12.737]                       workers >= 1)
[17:42:12.737]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:12.737]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:12.737]                     }
[17:42:12.737]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:12.737]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:12.737]                       envir = envir)
[17:42:12.737]                     if (!future$lazy) 
[17:42:12.737]                       future <- run(future)
[17:42:12.737]                     invisible(future)
[17:42:12.737]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.737]                 }
[17:42:12.737]             }
[17:42:12.737]         }
[17:42:12.737]     })
[17:42:12.737]     if (TRUE) {
[17:42:12.737]         base::sink(type = "output", split = FALSE)
[17:42:12.737]         if (TRUE) {
[17:42:12.737]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.737]         }
[17:42:12.737]         else {
[17:42:12.737]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.737]         }
[17:42:12.737]         base::close(...future.stdout)
[17:42:12.737]         ...future.stdout <- NULL
[17:42:12.737]     }
[17:42:12.737]     ...future.result$conditions <- ...future.conditions
[17:42:12.737]     ...future.result$finished <- base::Sys.time()
[17:42:12.737]     ...future.result
[17:42:12.737] }
[17:42:12.808] MultisessionFuture started
[17:42:12.809] result() for ClusterFuture ...
[17:42:12.810] receiveMessageFromWorker() for ClusterFuture ...
[17:42:12.810] - Validating connection of MultisessionFuture
[17:42:12.841] - received message: FutureResult
[17:42:12.841] - Received FutureResult
[17:42:12.842] - Erased future from FutureRegistry
[17:42:12.842] result() for ClusterFuture ...
[17:42:12.842] - result already collected: FutureResult
[17:42:12.842] result() for ClusterFuture ... done
[17:42:12.842] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:12.842] result() for ClusterFuture ... done
[17:42:12.842] result() for ClusterFuture ...
[17:42:12.842] - result already collected: FutureResult
[17:42:12.842] result() for ClusterFuture ... done
[17:42:12.843] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:42:12.847] plan(): nbrOfWorkers() = 2
[17:42:12.847] getGlobalsAndPackages() ...
[17:42:12.847] Searching for globals...
[17:42:12.848] - globals found: [1] ‘{’
[17:42:12.848] Searching for globals ... DONE
[17:42:12.848] Resolving globals: FALSE
[17:42:12.848] 
[17:42:12.849] 
[17:42:12.849] getGlobalsAndPackages() ... DONE
[17:42:12.849] run() for ‘Future’ ...
[17:42:12.849] - state: ‘created’
[17:42:12.849] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.864] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.864] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:12.865]   - Field: ‘node’
[17:42:12.865]   - Field: ‘label’
[17:42:12.865]   - Field: ‘local’
[17:42:12.865]   - Field: ‘owner’
[17:42:12.865]   - Field: ‘envir’
[17:42:12.865]   - Field: ‘workers’
[17:42:12.865]   - Field: ‘packages’
[17:42:12.865]   - Field: ‘gc’
[17:42:12.865]   - Field: ‘conditions’
[17:42:12.865]   - Field: ‘persistent’
[17:42:12.866]   - Field: ‘expr’
[17:42:12.866]   - Field: ‘uuid’
[17:42:12.866]   - Field: ‘seed’
[17:42:12.866]   - Field: ‘version’
[17:42:12.866]   - Field: ‘result’
[17:42:12.866]   - Field: ‘asynchronous’
[17:42:12.866]   - Field: ‘calls’
[17:42:12.866]   - Field: ‘globals’
[17:42:12.866]   - Field: ‘stdout’
[17:42:12.867]   - Field: ‘earlySignal’
[17:42:12.867]   - Field: ‘lazy’
[17:42:12.867]   - Field: ‘state’
[17:42:12.867] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:12.867] - Launch lazy future ...
[17:42:12.867] Packages needed by the future expression (n = 0): <none>
[17:42:12.868] Packages needed by future strategies (n = 0): <none>
[17:42:12.868] {
[17:42:12.868]     {
[17:42:12.868]         {
[17:42:12.868]             ...future.startTime <- base::Sys.time()
[17:42:12.868]             {
[17:42:12.868]                 {
[17:42:12.868]                   {
[17:42:12.868]                     {
[17:42:12.868]                       base::local({
[17:42:12.868]                         has_future <- base::requireNamespace("future", 
[17:42:12.868]                           quietly = TRUE)
[17:42:12.868]                         if (has_future) {
[17:42:12.868]                           ns <- base::getNamespace("future")
[17:42:12.868]                           version <- ns[[".package"]][["version"]]
[17:42:12.868]                           if (is.null(version)) 
[17:42:12.868]                             version <- utils::packageVersion("future")
[17:42:12.868]                         }
[17:42:12.868]                         else {
[17:42:12.868]                           version <- NULL
[17:42:12.868]                         }
[17:42:12.868]                         if (!has_future || version < "1.8.0") {
[17:42:12.868]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.868]                             "", base::R.version$version.string), 
[17:42:12.868]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.868]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.868]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.868]                               "release", "version")], collapse = " "), 
[17:42:12.868]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.868]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.868]                             info)
[17:42:12.868]                           info <- base::paste(info, collapse = "; ")
[17:42:12.868]                           if (!has_future) {
[17:42:12.868]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.868]                               info)
[17:42:12.868]                           }
[17:42:12.868]                           else {
[17:42:12.868]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.868]                               info, version)
[17:42:12.868]                           }
[17:42:12.868]                           base::stop(msg)
[17:42:12.868]                         }
[17:42:12.868]                       })
[17:42:12.868]                     }
[17:42:12.868]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.868]                     base::options(mc.cores = 1L)
[17:42:12.868]                   }
[17:42:12.868]                   options(future.plan = NULL)
[17:42:12.868]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.868]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.868]                 }
[17:42:12.868]                 ...future.workdir <- getwd()
[17:42:12.868]             }
[17:42:12.868]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.868]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.868]         }
[17:42:12.868]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.868]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.868]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.868]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.868]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.868]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.868]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.868]             base::names(...future.oldOptions))
[17:42:12.868]     }
[17:42:12.868]     if (FALSE) {
[17:42:12.868]     }
[17:42:12.868]     else {
[17:42:12.868]         if (TRUE) {
[17:42:12.868]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.868]                 open = "w")
[17:42:12.868]         }
[17:42:12.868]         else {
[17:42:12.868]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.868]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.868]         }
[17:42:12.868]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.868]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.868]             base::sink(type = "output", split = FALSE)
[17:42:12.868]             base::close(...future.stdout)
[17:42:12.868]         }, add = TRUE)
[17:42:12.868]     }
[17:42:12.868]     ...future.frame <- base::sys.nframe()
[17:42:12.868]     ...future.conditions <- base::list()
[17:42:12.868]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.868]     if (FALSE) {
[17:42:12.868]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.868]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.868]     }
[17:42:12.868]     ...future.result <- base::tryCatch({
[17:42:12.868]         base::withCallingHandlers({
[17:42:12.868]             ...future.value <- base::withVisible(base::local({
[17:42:12.868]                 ...future.makeSendCondition <- local({
[17:42:12.868]                   sendCondition <- NULL
[17:42:12.868]                   function(frame = 1L) {
[17:42:12.868]                     if (is.function(sendCondition)) 
[17:42:12.868]                       return(sendCondition)
[17:42:12.868]                     ns <- getNamespace("parallel")
[17:42:12.868]                     if (exists("sendData", mode = "function", 
[17:42:12.868]                       envir = ns)) {
[17:42:12.868]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:12.868]                         envir = ns)
[17:42:12.868]                       envir <- sys.frame(frame)
[17:42:12.868]                       master <- NULL
[17:42:12.868]                       while (!identical(envir, .GlobalEnv) && 
[17:42:12.868]                         !identical(envir, emptyenv())) {
[17:42:12.868]                         if (exists("master", mode = "list", envir = envir, 
[17:42:12.868]                           inherits = FALSE)) {
[17:42:12.868]                           master <- get("master", mode = "list", 
[17:42:12.868]                             envir = envir, inherits = FALSE)
[17:42:12.868]                           if (inherits(master, c("SOCKnode", 
[17:42:12.868]                             "SOCK0node"))) {
[17:42:12.868]                             sendCondition <<- function(cond) {
[17:42:12.868]                               data <- list(type = "VALUE", value = cond, 
[17:42:12.868]                                 success = TRUE)
[17:42:12.868]                               parallel_sendData(master, data)
[17:42:12.868]                             }
[17:42:12.868]                             return(sendCondition)
[17:42:12.868]                           }
[17:42:12.868]                         }
[17:42:12.868]                         frame <- frame + 1L
[17:42:12.868]                         envir <- sys.frame(frame)
[17:42:12.868]                       }
[17:42:12.868]                     }
[17:42:12.868]                     sendCondition <<- function(cond) NULL
[17:42:12.868]                   }
[17:42:12.868]                 })
[17:42:12.868]                 withCallingHandlers({
[17:42:12.868]                   {
[17:42:12.868]                     2
[17:42:12.868]                   }
[17:42:12.868]                 }, immediateCondition = function(cond) {
[17:42:12.868]                   sendCondition <- ...future.makeSendCondition()
[17:42:12.868]                   sendCondition(cond)
[17:42:12.868]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.868]                   {
[17:42:12.868]                     inherits <- base::inherits
[17:42:12.868]                     invokeRestart <- base::invokeRestart
[17:42:12.868]                     is.null <- base::is.null
[17:42:12.868]                     muffled <- FALSE
[17:42:12.868]                     if (inherits(cond, "message")) {
[17:42:12.868]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.868]                       if (muffled) 
[17:42:12.868]                         invokeRestart("muffleMessage")
[17:42:12.868]                     }
[17:42:12.868]                     else if (inherits(cond, "warning")) {
[17:42:12.868]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.868]                       if (muffled) 
[17:42:12.868]                         invokeRestart("muffleWarning")
[17:42:12.868]                     }
[17:42:12.868]                     else if (inherits(cond, "condition")) {
[17:42:12.868]                       if (!is.null(pattern)) {
[17:42:12.868]                         computeRestarts <- base::computeRestarts
[17:42:12.868]                         grepl <- base::grepl
[17:42:12.868]                         restarts <- computeRestarts(cond)
[17:42:12.868]                         for (restart in restarts) {
[17:42:12.868]                           name <- restart$name
[17:42:12.868]                           if (is.null(name)) 
[17:42:12.868]                             next
[17:42:12.868]                           if (!grepl(pattern, name)) 
[17:42:12.868]                             next
[17:42:12.868]                           invokeRestart(restart)
[17:42:12.868]                           muffled <- TRUE
[17:42:12.868]                           break
[17:42:12.868]                         }
[17:42:12.868]                       }
[17:42:12.868]                     }
[17:42:12.868]                     invisible(muffled)
[17:42:12.868]                   }
[17:42:12.868]                   muffleCondition(cond)
[17:42:12.868]                 })
[17:42:12.868]             }))
[17:42:12.868]             future::FutureResult(value = ...future.value$value, 
[17:42:12.868]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.868]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.868]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.868]                     ...future.globalenv.names))
[17:42:12.868]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.868]         }, condition = base::local({
[17:42:12.868]             c <- base::c
[17:42:12.868]             inherits <- base::inherits
[17:42:12.868]             invokeRestart <- base::invokeRestart
[17:42:12.868]             length <- base::length
[17:42:12.868]             list <- base::list
[17:42:12.868]             seq.int <- base::seq.int
[17:42:12.868]             signalCondition <- base::signalCondition
[17:42:12.868]             sys.calls <- base::sys.calls
[17:42:12.868]             `[[` <- base::`[[`
[17:42:12.868]             `+` <- base::`+`
[17:42:12.868]             `<<-` <- base::`<<-`
[17:42:12.868]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.868]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.868]                   3L)]
[17:42:12.868]             }
[17:42:12.868]             function(cond) {
[17:42:12.868]                 is_error <- inherits(cond, "error")
[17:42:12.868]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.868]                   NULL)
[17:42:12.868]                 if (is_error) {
[17:42:12.868]                   sessionInformation <- function() {
[17:42:12.868]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.868]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.868]                       search = base::search(), system = base::Sys.info())
[17:42:12.868]                   }
[17:42:12.868]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.868]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.868]                     cond$call), session = sessionInformation(), 
[17:42:12.868]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.868]                   signalCondition(cond)
[17:42:12.868]                 }
[17:42:12.868]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.868]                 "immediateCondition"))) {
[17:42:12.868]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.868]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.868]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.868]                   if (TRUE && !signal) {
[17:42:12.868]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.868]                     {
[17:42:12.868]                       inherits <- base::inherits
[17:42:12.868]                       invokeRestart <- base::invokeRestart
[17:42:12.868]                       is.null <- base::is.null
[17:42:12.868]                       muffled <- FALSE
[17:42:12.868]                       if (inherits(cond, "message")) {
[17:42:12.868]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.868]                         if (muffled) 
[17:42:12.868]                           invokeRestart("muffleMessage")
[17:42:12.868]                       }
[17:42:12.868]                       else if (inherits(cond, "warning")) {
[17:42:12.868]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.868]                         if (muffled) 
[17:42:12.868]                           invokeRestart("muffleWarning")
[17:42:12.868]                       }
[17:42:12.868]                       else if (inherits(cond, "condition")) {
[17:42:12.868]                         if (!is.null(pattern)) {
[17:42:12.868]                           computeRestarts <- base::computeRestarts
[17:42:12.868]                           grepl <- base::grepl
[17:42:12.868]                           restarts <- computeRestarts(cond)
[17:42:12.868]                           for (restart in restarts) {
[17:42:12.868]                             name <- restart$name
[17:42:12.868]                             if (is.null(name)) 
[17:42:12.868]                               next
[17:42:12.868]                             if (!grepl(pattern, name)) 
[17:42:12.868]                               next
[17:42:12.868]                             invokeRestart(restart)
[17:42:12.868]                             muffled <- TRUE
[17:42:12.868]                             break
[17:42:12.868]                           }
[17:42:12.868]                         }
[17:42:12.868]                       }
[17:42:12.868]                       invisible(muffled)
[17:42:12.868]                     }
[17:42:12.868]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.868]                   }
[17:42:12.868]                 }
[17:42:12.868]                 else {
[17:42:12.868]                   if (TRUE) {
[17:42:12.868]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.868]                     {
[17:42:12.868]                       inherits <- base::inherits
[17:42:12.868]                       invokeRestart <- base::invokeRestart
[17:42:12.868]                       is.null <- base::is.null
[17:42:12.868]                       muffled <- FALSE
[17:42:12.868]                       if (inherits(cond, "message")) {
[17:42:12.868]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.868]                         if (muffled) 
[17:42:12.868]                           invokeRestart("muffleMessage")
[17:42:12.868]                       }
[17:42:12.868]                       else if (inherits(cond, "warning")) {
[17:42:12.868]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.868]                         if (muffled) 
[17:42:12.868]                           invokeRestart("muffleWarning")
[17:42:12.868]                       }
[17:42:12.868]                       else if (inherits(cond, "condition")) {
[17:42:12.868]                         if (!is.null(pattern)) {
[17:42:12.868]                           computeRestarts <- base::computeRestarts
[17:42:12.868]                           grepl <- base::grepl
[17:42:12.868]                           restarts <- computeRestarts(cond)
[17:42:12.868]                           for (restart in restarts) {
[17:42:12.868]                             name <- restart$name
[17:42:12.868]                             if (is.null(name)) 
[17:42:12.868]                               next
[17:42:12.868]                             if (!grepl(pattern, name)) 
[17:42:12.868]                               next
[17:42:12.868]                             invokeRestart(restart)
[17:42:12.868]                             muffled <- TRUE
[17:42:12.868]                             break
[17:42:12.868]                           }
[17:42:12.868]                         }
[17:42:12.868]                       }
[17:42:12.868]                       invisible(muffled)
[17:42:12.868]                     }
[17:42:12.868]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.868]                   }
[17:42:12.868]                 }
[17:42:12.868]             }
[17:42:12.868]         }))
[17:42:12.868]     }, error = function(ex) {
[17:42:12.868]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.868]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.868]                 ...future.rng), started = ...future.startTime, 
[17:42:12.868]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.868]             version = "1.8"), class = "FutureResult")
[17:42:12.868]     }, finally = {
[17:42:12.868]         if (!identical(...future.workdir, getwd())) 
[17:42:12.868]             setwd(...future.workdir)
[17:42:12.868]         {
[17:42:12.868]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.868]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.868]             }
[17:42:12.868]             base::options(...future.oldOptions)
[17:42:12.868]             if (.Platform$OS.type == "windows") {
[17:42:12.868]                 old_names <- names(...future.oldEnvVars)
[17:42:12.868]                 envs <- base::Sys.getenv()
[17:42:12.868]                 names <- names(envs)
[17:42:12.868]                 common <- intersect(names, old_names)
[17:42:12.868]                 added <- setdiff(names, old_names)
[17:42:12.868]                 removed <- setdiff(old_names, names)
[17:42:12.868]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.868]                   envs[common]]
[17:42:12.868]                 NAMES <- toupper(changed)
[17:42:12.868]                 args <- list()
[17:42:12.868]                 for (kk in seq_along(NAMES)) {
[17:42:12.868]                   name <- changed[[kk]]
[17:42:12.868]                   NAME <- NAMES[[kk]]
[17:42:12.868]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.868]                     next
[17:42:12.868]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.868]                 }
[17:42:12.868]                 NAMES <- toupper(added)
[17:42:12.868]                 for (kk in seq_along(NAMES)) {
[17:42:12.868]                   name <- added[[kk]]
[17:42:12.868]                   NAME <- NAMES[[kk]]
[17:42:12.868]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.868]                     next
[17:42:12.868]                   args[[name]] <- ""
[17:42:12.868]                 }
[17:42:12.868]                 NAMES <- toupper(removed)
[17:42:12.868]                 for (kk in seq_along(NAMES)) {
[17:42:12.868]                   name <- removed[[kk]]
[17:42:12.868]                   NAME <- NAMES[[kk]]
[17:42:12.868]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.868]                     next
[17:42:12.868]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.868]                 }
[17:42:12.868]                 if (length(args) > 0) 
[17:42:12.868]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.868]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.868]             }
[17:42:12.868]             else {
[17:42:12.868]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.868]             }
[17:42:12.868]             {
[17:42:12.868]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.868]                   0L) {
[17:42:12.868]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.868]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.868]                   base::options(opts)
[17:42:12.868]                 }
[17:42:12.868]                 {
[17:42:12.868]                   {
[17:42:12.868]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.868]                     NULL
[17:42:12.868]                   }
[17:42:12.868]                   options(future.plan = NULL)
[17:42:12.868]                   if (is.na(NA_character_)) 
[17:42:12.868]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.868]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.868]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:12.868]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:12.868]                     envir = parent.frame()) 
[17:42:12.868]                   {
[17:42:12.868]                     if (is.function(workers)) 
[17:42:12.868]                       workers <- workers()
[17:42:12.868]                     workers <- structure(as.integer(workers), 
[17:42:12.868]                       class = class(workers))
[17:42:12.868]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:12.868]                       workers >= 1)
[17:42:12.868]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:12.868]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:12.868]                     }
[17:42:12.868]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:12.868]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:12.868]                       envir = envir)
[17:42:12.868]                     if (!future$lazy) 
[17:42:12.868]                       future <- run(future)
[17:42:12.868]                     invisible(future)
[17:42:12.868]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.868]                 }
[17:42:12.868]             }
[17:42:12.868]         }
[17:42:12.868]     })
[17:42:12.868]     if (TRUE) {
[17:42:12.868]         base::sink(type = "output", split = FALSE)
[17:42:12.868]         if (TRUE) {
[17:42:12.868]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.868]         }
[17:42:12.868]         else {
[17:42:12.868]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.868]         }
[17:42:12.868]         base::close(...future.stdout)
[17:42:12.868]         ...future.stdout <- NULL
[17:42:12.868]     }
[17:42:12.868]     ...future.result$conditions <- ...future.conditions
[17:42:12.868]     ...future.result$finished <- base::Sys.time()
[17:42:12.868]     ...future.result
[17:42:12.868] }
[17:42:12.872] MultisessionFuture started
[17:42:12.872] - Launch lazy future ... done
[17:42:12.872] run() for ‘MultisessionFuture’ ... done
[17:42:12.873] getGlobalsAndPackages() ...
[17:42:12.873] Searching for globals...
[17:42:12.873] - globals found: [1] ‘{’
[17:42:12.874] Searching for globals ... DONE
[17:42:12.874] Resolving globals: FALSE
[17:42:12.874] 
[17:42:12.874] 
[17:42:12.874] getGlobalsAndPackages() ... DONE
[17:42:12.875] run() for ‘Future’ ...
[17:42:12.875] - state: ‘created’
[17:42:12.875] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:12.890] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:12.890] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:12.891]   - Field: ‘node’
[17:42:12.891]   - Field: ‘label’
[17:42:12.891]   - Field: ‘local’
[17:42:12.891]   - Field: ‘owner’
[17:42:12.891]   - Field: ‘envir’
[17:42:12.891]   - Field: ‘workers’
[17:42:12.891]   - Field: ‘packages’
[17:42:12.891]   - Field: ‘gc’
[17:42:12.891]   - Field: ‘conditions’
[17:42:12.892]   - Field: ‘persistent’
[17:42:12.892]   - Field: ‘expr’
[17:42:12.892]   - Field: ‘uuid’
[17:42:12.892]   - Field: ‘seed’
[17:42:12.892]   - Field: ‘version’
[17:42:12.892]   - Field: ‘result’
[17:42:12.892]   - Field: ‘asynchronous’
[17:42:12.892]   - Field: ‘calls’
[17:42:12.892]   - Field: ‘globals’
[17:42:12.893]   - Field: ‘stdout’
[17:42:12.893]   - Field: ‘earlySignal’
[17:42:12.893]   - Field: ‘lazy’
[17:42:12.893]   - Field: ‘state’
[17:42:12.893] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:12.893] - Launch lazy future ...
[17:42:12.894] Packages needed by the future expression (n = 0): <none>
[17:42:12.894] Packages needed by future strategies (n = 0): <none>
[17:42:12.894] {
[17:42:12.894]     {
[17:42:12.894]         {
[17:42:12.894]             ...future.startTime <- base::Sys.time()
[17:42:12.894]             {
[17:42:12.894]                 {
[17:42:12.894]                   {
[17:42:12.894]                     {
[17:42:12.894]                       base::local({
[17:42:12.894]                         has_future <- base::requireNamespace("future", 
[17:42:12.894]                           quietly = TRUE)
[17:42:12.894]                         if (has_future) {
[17:42:12.894]                           ns <- base::getNamespace("future")
[17:42:12.894]                           version <- ns[[".package"]][["version"]]
[17:42:12.894]                           if (is.null(version)) 
[17:42:12.894]                             version <- utils::packageVersion("future")
[17:42:12.894]                         }
[17:42:12.894]                         else {
[17:42:12.894]                           version <- NULL
[17:42:12.894]                         }
[17:42:12.894]                         if (!has_future || version < "1.8.0") {
[17:42:12.894]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:12.894]                             "", base::R.version$version.string), 
[17:42:12.894]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:12.894]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:12.894]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:12.894]                               "release", "version")], collapse = " "), 
[17:42:12.894]                             hostname = base::Sys.info()[["nodename"]])
[17:42:12.894]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:12.894]                             info)
[17:42:12.894]                           info <- base::paste(info, collapse = "; ")
[17:42:12.894]                           if (!has_future) {
[17:42:12.894]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:12.894]                               info)
[17:42:12.894]                           }
[17:42:12.894]                           else {
[17:42:12.894]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:12.894]                               info, version)
[17:42:12.894]                           }
[17:42:12.894]                           base::stop(msg)
[17:42:12.894]                         }
[17:42:12.894]                       })
[17:42:12.894]                     }
[17:42:12.894]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:12.894]                     base::options(mc.cores = 1L)
[17:42:12.894]                   }
[17:42:12.894]                   options(future.plan = NULL)
[17:42:12.894]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.894]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:12.894]                 }
[17:42:12.894]                 ...future.workdir <- getwd()
[17:42:12.894]             }
[17:42:12.894]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:12.894]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:12.894]         }
[17:42:12.894]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:12.894]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:12.894]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:12.894]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:12.894]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:12.894]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:12.894]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:12.894]             base::names(...future.oldOptions))
[17:42:12.894]     }
[17:42:12.894]     if (FALSE) {
[17:42:12.894]     }
[17:42:12.894]     else {
[17:42:12.894]         if (TRUE) {
[17:42:12.894]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:12.894]                 open = "w")
[17:42:12.894]         }
[17:42:12.894]         else {
[17:42:12.894]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:12.894]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:12.894]         }
[17:42:12.894]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:12.894]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:12.894]             base::sink(type = "output", split = FALSE)
[17:42:12.894]             base::close(...future.stdout)
[17:42:12.894]         }, add = TRUE)
[17:42:12.894]     }
[17:42:12.894]     ...future.frame <- base::sys.nframe()
[17:42:12.894]     ...future.conditions <- base::list()
[17:42:12.894]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:12.894]     if (FALSE) {
[17:42:12.894]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:12.894]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:12.894]     }
[17:42:12.894]     ...future.result <- base::tryCatch({
[17:42:12.894]         base::withCallingHandlers({
[17:42:12.894]             ...future.value <- base::withVisible(base::local({
[17:42:12.894]                 ...future.makeSendCondition <- local({
[17:42:12.894]                   sendCondition <- NULL
[17:42:12.894]                   function(frame = 1L) {
[17:42:12.894]                     if (is.function(sendCondition)) 
[17:42:12.894]                       return(sendCondition)
[17:42:12.894]                     ns <- getNamespace("parallel")
[17:42:12.894]                     if (exists("sendData", mode = "function", 
[17:42:12.894]                       envir = ns)) {
[17:42:12.894]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:12.894]                         envir = ns)
[17:42:12.894]                       envir <- sys.frame(frame)
[17:42:12.894]                       master <- NULL
[17:42:12.894]                       while (!identical(envir, .GlobalEnv) && 
[17:42:12.894]                         !identical(envir, emptyenv())) {
[17:42:12.894]                         if (exists("master", mode = "list", envir = envir, 
[17:42:12.894]                           inherits = FALSE)) {
[17:42:12.894]                           master <- get("master", mode = "list", 
[17:42:12.894]                             envir = envir, inherits = FALSE)
[17:42:12.894]                           if (inherits(master, c("SOCKnode", 
[17:42:12.894]                             "SOCK0node"))) {
[17:42:12.894]                             sendCondition <<- function(cond) {
[17:42:12.894]                               data <- list(type = "VALUE", value = cond, 
[17:42:12.894]                                 success = TRUE)
[17:42:12.894]                               parallel_sendData(master, data)
[17:42:12.894]                             }
[17:42:12.894]                             return(sendCondition)
[17:42:12.894]                           }
[17:42:12.894]                         }
[17:42:12.894]                         frame <- frame + 1L
[17:42:12.894]                         envir <- sys.frame(frame)
[17:42:12.894]                       }
[17:42:12.894]                     }
[17:42:12.894]                     sendCondition <<- function(cond) NULL
[17:42:12.894]                   }
[17:42:12.894]                 })
[17:42:12.894]                 withCallingHandlers({
[17:42:12.894]                   {
[17:42:12.894]                     4
[17:42:12.894]                   }
[17:42:12.894]                 }, immediateCondition = function(cond) {
[17:42:12.894]                   sendCondition <- ...future.makeSendCondition()
[17:42:12.894]                   sendCondition(cond)
[17:42:12.894]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.894]                   {
[17:42:12.894]                     inherits <- base::inherits
[17:42:12.894]                     invokeRestart <- base::invokeRestart
[17:42:12.894]                     is.null <- base::is.null
[17:42:12.894]                     muffled <- FALSE
[17:42:12.894]                     if (inherits(cond, "message")) {
[17:42:12.894]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:12.894]                       if (muffled) 
[17:42:12.894]                         invokeRestart("muffleMessage")
[17:42:12.894]                     }
[17:42:12.894]                     else if (inherits(cond, "warning")) {
[17:42:12.894]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:12.894]                       if (muffled) 
[17:42:12.894]                         invokeRestart("muffleWarning")
[17:42:12.894]                     }
[17:42:12.894]                     else if (inherits(cond, "condition")) {
[17:42:12.894]                       if (!is.null(pattern)) {
[17:42:12.894]                         computeRestarts <- base::computeRestarts
[17:42:12.894]                         grepl <- base::grepl
[17:42:12.894]                         restarts <- computeRestarts(cond)
[17:42:12.894]                         for (restart in restarts) {
[17:42:12.894]                           name <- restart$name
[17:42:12.894]                           if (is.null(name)) 
[17:42:12.894]                             next
[17:42:12.894]                           if (!grepl(pattern, name)) 
[17:42:12.894]                             next
[17:42:12.894]                           invokeRestart(restart)
[17:42:12.894]                           muffled <- TRUE
[17:42:12.894]                           break
[17:42:12.894]                         }
[17:42:12.894]                       }
[17:42:12.894]                     }
[17:42:12.894]                     invisible(muffled)
[17:42:12.894]                   }
[17:42:12.894]                   muffleCondition(cond)
[17:42:12.894]                 })
[17:42:12.894]             }))
[17:42:12.894]             future::FutureResult(value = ...future.value$value, 
[17:42:12.894]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.894]                   ...future.rng), globalenv = if (FALSE) 
[17:42:12.894]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:12.894]                     ...future.globalenv.names))
[17:42:12.894]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:12.894]         }, condition = base::local({
[17:42:12.894]             c <- base::c
[17:42:12.894]             inherits <- base::inherits
[17:42:12.894]             invokeRestart <- base::invokeRestart
[17:42:12.894]             length <- base::length
[17:42:12.894]             list <- base::list
[17:42:12.894]             seq.int <- base::seq.int
[17:42:12.894]             signalCondition <- base::signalCondition
[17:42:12.894]             sys.calls <- base::sys.calls
[17:42:12.894]             `[[` <- base::`[[`
[17:42:12.894]             `+` <- base::`+`
[17:42:12.894]             `<<-` <- base::`<<-`
[17:42:12.894]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:12.894]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:12.894]                   3L)]
[17:42:12.894]             }
[17:42:12.894]             function(cond) {
[17:42:12.894]                 is_error <- inherits(cond, "error")
[17:42:12.894]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:12.894]                   NULL)
[17:42:12.894]                 if (is_error) {
[17:42:12.894]                   sessionInformation <- function() {
[17:42:12.894]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:12.894]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:12.894]                       search = base::search(), system = base::Sys.info())
[17:42:12.894]                   }
[17:42:12.894]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.894]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:12.894]                     cond$call), session = sessionInformation(), 
[17:42:12.894]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:12.894]                   signalCondition(cond)
[17:42:12.894]                 }
[17:42:12.894]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:12.894]                 "immediateCondition"))) {
[17:42:12.894]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:12.894]                   ...future.conditions[[length(...future.conditions) + 
[17:42:12.894]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:12.894]                   if (TRUE && !signal) {
[17:42:12.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.894]                     {
[17:42:12.894]                       inherits <- base::inherits
[17:42:12.894]                       invokeRestart <- base::invokeRestart
[17:42:12.894]                       is.null <- base::is.null
[17:42:12.894]                       muffled <- FALSE
[17:42:12.894]                       if (inherits(cond, "message")) {
[17:42:12.894]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.894]                         if (muffled) 
[17:42:12.894]                           invokeRestart("muffleMessage")
[17:42:12.894]                       }
[17:42:12.894]                       else if (inherits(cond, "warning")) {
[17:42:12.894]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.894]                         if (muffled) 
[17:42:12.894]                           invokeRestart("muffleWarning")
[17:42:12.894]                       }
[17:42:12.894]                       else if (inherits(cond, "condition")) {
[17:42:12.894]                         if (!is.null(pattern)) {
[17:42:12.894]                           computeRestarts <- base::computeRestarts
[17:42:12.894]                           grepl <- base::grepl
[17:42:12.894]                           restarts <- computeRestarts(cond)
[17:42:12.894]                           for (restart in restarts) {
[17:42:12.894]                             name <- restart$name
[17:42:12.894]                             if (is.null(name)) 
[17:42:12.894]                               next
[17:42:12.894]                             if (!grepl(pattern, name)) 
[17:42:12.894]                               next
[17:42:12.894]                             invokeRestart(restart)
[17:42:12.894]                             muffled <- TRUE
[17:42:12.894]                             break
[17:42:12.894]                           }
[17:42:12.894]                         }
[17:42:12.894]                       }
[17:42:12.894]                       invisible(muffled)
[17:42:12.894]                     }
[17:42:12.894]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.894]                   }
[17:42:12.894]                 }
[17:42:12.894]                 else {
[17:42:12.894]                   if (TRUE) {
[17:42:12.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:12.894]                     {
[17:42:12.894]                       inherits <- base::inherits
[17:42:12.894]                       invokeRestart <- base::invokeRestart
[17:42:12.894]                       is.null <- base::is.null
[17:42:12.894]                       muffled <- FALSE
[17:42:12.894]                       if (inherits(cond, "message")) {
[17:42:12.894]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:12.894]                         if (muffled) 
[17:42:12.894]                           invokeRestart("muffleMessage")
[17:42:12.894]                       }
[17:42:12.894]                       else if (inherits(cond, "warning")) {
[17:42:12.894]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:12.894]                         if (muffled) 
[17:42:12.894]                           invokeRestart("muffleWarning")
[17:42:12.894]                       }
[17:42:12.894]                       else if (inherits(cond, "condition")) {
[17:42:12.894]                         if (!is.null(pattern)) {
[17:42:12.894]                           computeRestarts <- base::computeRestarts
[17:42:12.894]                           grepl <- base::grepl
[17:42:12.894]                           restarts <- computeRestarts(cond)
[17:42:12.894]                           for (restart in restarts) {
[17:42:12.894]                             name <- restart$name
[17:42:12.894]                             if (is.null(name)) 
[17:42:12.894]                               next
[17:42:12.894]                             if (!grepl(pattern, name)) 
[17:42:12.894]                               next
[17:42:12.894]                             invokeRestart(restart)
[17:42:12.894]                             muffled <- TRUE
[17:42:12.894]                             break
[17:42:12.894]                           }
[17:42:12.894]                         }
[17:42:12.894]                       }
[17:42:12.894]                       invisible(muffled)
[17:42:12.894]                     }
[17:42:12.894]                     muffleCondition(cond, pattern = "^muffle")
[17:42:12.894]                   }
[17:42:12.894]                 }
[17:42:12.894]             }
[17:42:12.894]         }))
[17:42:12.894]     }, error = function(ex) {
[17:42:12.894]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:12.894]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:12.894]                 ...future.rng), started = ...future.startTime, 
[17:42:12.894]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:12.894]             version = "1.8"), class = "FutureResult")
[17:42:12.894]     }, finally = {
[17:42:12.894]         if (!identical(...future.workdir, getwd())) 
[17:42:12.894]             setwd(...future.workdir)
[17:42:12.894]         {
[17:42:12.894]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:12.894]                 ...future.oldOptions$nwarnings <- NULL
[17:42:12.894]             }
[17:42:12.894]             base::options(...future.oldOptions)
[17:42:12.894]             if (.Platform$OS.type == "windows") {
[17:42:12.894]                 old_names <- names(...future.oldEnvVars)
[17:42:12.894]                 envs <- base::Sys.getenv()
[17:42:12.894]                 names <- names(envs)
[17:42:12.894]                 common <- intersect(names, old_names)
[17:42:12.894]                 added <- setdiff(names, old_names)
[17:42:12.894]                 removed <- setdiff(old_names, names)
[17:42:12.894]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:12.894]                   envs[common]]
[17:42:12.894]                 NAMES <- toupper(changed)
[17:42:12.894]                 args <- list()
[17:42:12.894]                 for (kk in seq_along(NAMES)) {
[17:42:12.894]                   name <- changed[[kk]]
[17:42:12.894]                   NAME <- NAMES[[kk]]
[17:42:12.894]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.894]                     next
[17:42:12.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.894]                 }
[17:42:12.894]                 NAMES <- toupper(added)
[17:42:12.894]                 for (kk in seq_along(NAMES)) {
[17:42:12.894]                   name <- added[[kk]]
[17:42:12.894]                   NAME <- NAMES[[kk]]
[17:42:12.894]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.894]                     next
[17:42:12.894]                   args[[name]] <- ""
[17:42:12.894]                 }
[17:42:12.894]                 NAMES <- toupper(removed)
[17:42:12.894]                 for (kk in seq_along(NAMES)) {
[17:42:12.894]                   name <- removed[[kk]]
[17:42:12.894]                   NAME <- NAMES[[kk]]
[17:42:12.894]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:12.894]                     next
[17:42:12.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:12.894]                 }
[17:42:12.894]                 if (length(args) > 0) 
[17:42:12.894]                   base::do.call(base::Sys.setenv, args = args)
[17:42:12.894]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:12.894]             }
[17:42:12.894]             else {
[17:42:12.894]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:12.894]             }
[17:42:12.894]             {
[17:42:12.894]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:12.894]                   0L) {
[17:42:12.894]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:12.894]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:12.894]                   base::options(opts)
[17:42:12.894]                 }
[17:42:12.894]                 {
[17:42:12.894]                   {
[17:42:12.894]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:12.894]                     NULL
[17:42:12.894]                   }
[17:42:12.894]                   options(future.plan = NULL)
[17:42:12.894]                   if (is.na(NA_character_)) 
[17:42:12.894]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:12.894]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:12.894]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:12.894]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:12.894]                     envir = parent.frame()) 
[17:42:12.894]                   {
[17:42:12.894]                     if (is.function(workers)) 
[17:42:12.894]                       workers <- workers()
[17:42:12.894]                     workers <- structure(as.integer(workers), 
[17:42:12.894]                       class = class(workers))
[17:42:12.894]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:12.894]                       workers >= 1)
[17:42:12.894]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:12.894]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:12.894]                     }
[17:42:12.894]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:12.894]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:12.894]                       envir = envir)
[17:42:12.894]                     if (!future$lazy) 
[17:42:12.894]                       future <- run(future)
[17:42:12.894]                     invisible(future)
[17:42:12.894]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:12.894]                 }
[17:42:12.894]             }
[17:42:12.894]         }
[17:42:12.894]     })
[17:42:12.894]     if (TRUE) {
[17:42:12.894]         base::sink(type = "output", split = FALSE)
[17:42:12.894]         if (TRUE) {
[17:42:12.894]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:12.894]         }
[17:42:12.894]         else {
[17:42:12.894]             ...future.result["stdout"] <- base::list(NULL)
[17:42:12.894]         }
[17:42:12.894]         base::close(...future.stdout)
[17:42:12.894]         ...future.stdout <- NULL
[17:42:12.894]     }
[17:42:12.894]     ...future.result$conditions <- ...future.conditions
[17:42:12.894]     ...future.result$finished <- base::Sys.time()
[17:42:12.894]     ...future.result
[17:42:12.894] }
[17:42:12.969] MultisessionFuture started
[17:42:12.969] - Launch lazy future ... done
[17:42:12.969] run() for ‘MultisessionFuture’ ... done
[17:42:12.969] result() for ClusterFuture ...
[17:42:12.969] receiveMessageFromWorker() for ClusterFuture ...
[17:42:12.970] - Validating connection of MultisessionFuture
[17:42:12.970] - received message: FutureResult
[17:42:12.970] - Received FutureResult
[17:42:12.970] - Erased future from FutureRegistry
[17:42:12.970] result() for ClusterFuture ...
[17:42:12.970] - result already collected: FutureResult
[17:42:12.970] result() for ClusterFuture ... done
[17:42:12.971] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:12.971] result() for ClusterFuture ... done
[17:42:12.971] result() for ClusterFuture ...
[17:42:12.971] - result already collected: FutureResult
[17:42:12.971] result() for ClusterFuture ... done
u$a = 2
[17:42:12.971] result() for ClusterFuture ...
[17:42:12.971] receiveMessageFromWorker() for ClusterFuture ...
[17:42:12.972] - Validating connection of MultisessionFuture
[17:42:13.002] - received message: FutureResult
[17:42:13.002] - Received FutureResult
[17:42:13.002] - Erased future from FutureRegistry
[17:42:13.002] result() for ClusterFuture ...
[17:42:13.003] - result already collected: FutureResult
[17:42:13.003] result() for ClusterFuture ... done
[17:42:13.003] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:13.003] result() for ClusterFuture ... done
[17:42:13.003] result() for ClusterFuture ...
[17:42:13.003] - result already collected: FutureResult
[17:42:13.003] result() for ClusterFuture ... done
v$a = 4
[17:42:13.004] getGlobalsAndPackages() ...
[17:42:13.004] Searching for globals...
[17:42:13.005] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:13.005] Searching for globals ... DONE
[17:42:13.005] Resolving globals: FALSE
[17:42:13.006] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:13.006] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:13.006] - globals: [1] ‘a’
[17:42:13.006] 
[17:42:13.007] getGlobalsAndPackages() ... DONE
[17:42:13.007] run() for ‘Future’ ...
[17:42:13.007] - state: ‘created’
[17:42:13.007] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:13.023] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:13.023] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:13.023]   - Field: ‘node’
[17:42:13.023]   - Field: ‘label’
[17:42:13.023]   - Field: ‘local’
[17:42:13.024]   - Field: ‘owner’
[17:42:13.024]   - Field: ‘envir’
[17:42:13.024]   - Field: ‘workers’
[17:42:13.024]   - Field: ‘packages’
[17:42:13.024]   - Field: ‘gc’
[17:42:13.024]   - Field: ‘conditions’
[17:42:13.024]   - Field: ‘persistent’
[17:42:13.024]   - Field: ‘expr’
[17:42:13.024]   - Field: ‘uuid’
[17:42:13.024]   - Field: ‘seed’
[17:42:13.025]   - Field: ‘version’
[17:42:13.025]   - Field: ‘result’
[17:42:13.025]   - Field: ‘asynchronous’
[17:42:13.025]   - Field: ‘calls’
[17:42:13.025]   - Field: ‘globals’
[17:42:13.025]   - Field: ‘stdout’
[17:42:13.025]   - Field: ‘earlySignal’
[17:42:13.025]   - Field: ‘lazy’
[17:42:13.026]   - Field: ‘state’
[17:42:13.026] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:13.026] - Launch lazy future ...
[17:42:13.026] Packages needed by the future expression (n = 0): <none>
[17:42:13.026] Packages needed by future strategies (n = 0): <none>
[17:42:13.027] {
[17:42:13.027]     {
[17:42:13.027]         {
[17:42:13.027]             ...future.startTime <- base::Sys.time()
[17:42:13.027]             {
[17:42:13.027]                 {
[17:42:13.027]                   {
[17:42:13.027]                     {
[17:42:13.027]                       base::local({
[17:42:13.027]                         has_future <- base::requireNamespace("future", 
[17:42:13.027]                           quietly = TRUE)
[17:42:13.027]                         if (has_future) {
[17:42:13.027]                           ns <- base::getNamespace("future")
[17:42:13.027]                           version <- ns[[".package"]][["version"]]
[17:42:13.027]                           if (is.null(version)) 
[17:42:13.027]                             version <- utils::packageVersion("future")
[17:42:13.027]                         }
[17:42:13.027]                         else {
[17:42:13.027]                           version <- NULL
[17:42:13.027]                         }
[17:42:13.027]                         if (!has_future || version < "1.8.0") {
[17:42:13.027]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:13.027]                             "", base::R.version$version.string), 
[17:42:13.027]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:13.027]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:13.027]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:13.027]                               "release", "version")], collapse = " "), 
[17:42:13.027]                             hostname = base::Sys.info()[["nodename"]])
[17:42:13.027]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:13.027]                             info)
[17:42:13.027]                           info <- base::paste(info, collapse = "; ")
[17:42:13.027]                           if (!has_future) {
[17:42:13.027]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:13.027]                               info)
[17:42:13.027]                           }
[17:42:13.027]                           else {
[17:42:13.027]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:13.027]                               info, version)
[17:42:13.027]                           }
[17:42:13.027]                           base::stop(msg)
[17:42:13.027]                         }
[17:42:13.027]                       })
[17:42:13.027]                     }
[17:42:13.027]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:13.027]                     base::options(mc.cores = 1L)
[17:42:13.027]                   }
[17:42:13.027]                   options(future.plan = NULL)
[17:42:13.027]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.027]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:13.027]                 }
[17:42:13.027]                 ...future.workdir <- getwd()
[17:42:13.027]             }
[17:42:13.027]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:13.027]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:13.027]         }
[17:42:13.027]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:13.027]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:13.027]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:13.027]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:13.027]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:13.027]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:13.027]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:13.027]             base::names(...future.oldOptions))
[17:42:13.027]     }
[17:42:13.027]     if (FALSE) {
[17:42:13.027]     }
[17:42:13.027]     else {
[17:42:13.027]         if (TRUE) {
[17:42:13.027]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:13.027]                 open = "w")
[17:42:13.027]         }
[17:42:13.027]         else {
[17:42:13.027]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:13.027]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:13.027]         }
[17:42:13.027]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:13.027]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:13.027]             base::sink(type = "output", split = FALSE)
[17:42:13.027]             base::close(...future.stdout)
[17:42:13.027]         }, add = TRUE)
[17:42:13.027]     }
[17:42:13.027]     ...future.frame <- base::sys.nframe()
[17:42:13.027]     ...future.conditions <- base::list()
[17:42:13.027]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:13.027]     if (FALSE) {
[17:42:13.027]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:13.027]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:13.027]     }
[17:42:13.027]     ...future.result <- base::tryCatch({
[17:42:13.027]         base::withCallingHandlers({
[17:42:13.027]             ...future.value <- base::withVisible(base::local({
[17:42:13.027]                 ...future.makeSendCondition <- local({
[17:42:13.027]                   sendCondition <- NULL
[17:42:13.027]                   function(frame = 1L) {
[17:42:13.027]                     if (is.function(sendCondition)) 
[17:42:13.027]                       return(sendCondition)
[17:42:13.027]                     ns <- getNamespace("parallel")
[17:42:13.027]                     if (exists("sendData", mode = "function", 
[17:42:13.027]                       envir = ns)) {
[17:42:13.027]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:13.027]                         envir = ns)
[17:42:13.027]                       envir <- sys.frame(frame)
[17:42:13.027]                       master <- NULL
[17:42:13.027]                       while (!identical(envir, .GlobalEnv) && 
[17:42:13.027]                         !identical(envir, emptyenv())) {
[17:42:13.027]                         if (exists("master", mode = "list", envir = envir, 
[17:42:13.027]                           inherits = FALSE)) {
[17:42:13.027]                           master <- get("master", mode = "list", 
[17:42:13.027]                             envir = envir, inherits = FALSE)
[17:42:13.027]                           if (inherits(master, c("SOCKnode", 
[17:42:13.027]                             "SOCK0node"))) {
[17:42:13.027]                             sendCondition <<- function(cond) {
[17:42:13.027]                               data <- list(type = "VALUE", value = cond, 
[17:42:13.027]                                 success = TRUE)
[17:42:13.027]                               parallel_sendData(master, data)
[17:42:13.027]                             }
[17:42:13.027]                             return(sendCondition)
[17:42:13.027]                           }
[17:42:13.027]                         }
[17:42:13.027]                         frame <- frame + 1L
[17:42:13.027]                         envir <- sys.frame(frame)
[17:42:13.027]                       }
[17:42:13.027]                     }
[17:42:13.027]                     sendCondition <<- function(cond) NULL
[17:42:13.027]                   }
[17:42:13.027]                 })
[17:42:13.027]                 withCallingHandlers({
[17:42:13.027]                   {
[17:42:13.027]                     2 * a
[17:42:13.027]                   }
[17:42:13.027]                 }, immediateCondition = function(cond) {
[17:42:13.027]                   sendCondition <- ...future.makeSendCondition()
[17:42:13.027]                   sendCondition(cond)
[17:42:13.027]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.027]                   {
[17:42:13.027]                     inherits <- base::inherits
[17:42:13.027]                     invokeRestart <- base::invokeRestart
[17:42:13.027]                     is.null <- base::is.null
[17:42:13.027]                     muffled <- FALSE
[17:42:13.027]                     if (inherits(cond, "message")) {
[17:42:13.027]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:13.027]                       if (muffled) 
[17:42:13.027]                         invokeRestart("muffleMessage")
[17:42:13.027]                     }
[17:42:13.027]                     else if (inherits(cond, "warning")) {
[17:42:13.027]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:13.027]                       if (muffled) 
[17:42:13.027]                         invokeRestart("muffleWarning")
[17:42:13.027]                     }
[17:42:13.027]                     else if (inherits(cond, "condition")) {
[17:42:13.027]                       if (!is.null(pattern)) {
[17:42:13.027]                         computeRestarts <- base::computeRestarts
[17:42:13.027]                         grepl <- base::grepl
[17:42:13.027]                         restarts <- computeRestarts(cond)
[17:42:13.027]                         for (restart in restarts) {
[17:42:13.027]                           name <- restart$name
[17:42:13.027]                           if (is.null(name)) 
[17:42:13.027]                             next
[17:42:13.027]                           if (!grepl(pattern, name)) 
[17:42:13.027]                             next
[17:42:13.027]                           invokeRestart(restart)
[17:42:13.027]                           muffled <- TRUE
[17:42:13.027]                           break
[17:42:13.027]                         }
[17:42:13.027]                       }
[17:42:13.027]                     }
[17:42:13.027]                     invisible(muffled)
[17:42:13.027]                   }
[17:42:13.027]                   muffleCondition(cond)
[17:42:13.027]                 })
[17:42:13.027]             }))
[17:42:13.027]             future::FutureResult(value = ...future.value$value, 
[17:42:13.027]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.027]                   ...future.rng), globalenv = if (FALSE) 
[17:42:13.027]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:13.027]                     ...future.globalenv.names))
[17:42:13.027]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:13.027]         }, condition = base::local({
[17:42:13.027]             c <- base::c
[17:42:13.027]             inherits <- base::inherits
[17:42:13.027]             invokeRestart <- base::invokeRestart
[17:42:13.027]             length <- base::length
[17:42:13.027]             list <- base::list
[17:42:13.027]             seq.int <- base::seq.int
[17:42:13.027]             signalCondition <- base::signalCondition
[17:42:13.027]             sys.calls <- base::sys.calls
[17:42:13.027]             `[[` <- base::`[[`
[17:42:13.027]             `+` <- base::`+`
[17:42:13.027]             `<<-` <- base::`<<-`
[17:42:13.027]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:13.027]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:13.027]                   3L)]
[17:42:13.027]             }
[17:42:13.027]             function(cond) {
[17:42:13.027]                 is_error <- inherits(cond, "error")
[17:42:13.027]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:13.027]                   NULL)
[17:42:13.027]                 if (is_error) {
[17:42:13.027]                   sessionInformation <- function() {
[17:42:13.027]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:13.027]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:13.027]                       search = base::search(), system = base::Sys.info())
[17:42:13.027]                   }
[17:42:13.027]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.027]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:13.027]                     cond$call), session = sessionInformation(), 
[17:42:13.027]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:13.027]                   signalCondition(cond)
[17:42:13.027]                 }
[17:42:13.027]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:13.027]                 "immediateCondition"))) {
[17:42:13.027]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:13.027]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.027]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:13.027]                   if (TRUE && !signal) {
[17:42:13.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.027]                     {
[17:42:13.027]                       inherits <- base::inherits
[17:42:13.027]                       invokeRestart <- base::invokeRestart
[17:42:13.027]                       is.null <- base::is.null
[17:42:13.027]                       muffled <- FALSE
[17:42:13.027]                       if (inherits(cond, "message")) {
[17:42:13.027]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.027]                         if (muffled) 
[17:42:13.027]                           invokeRestart("muffleMessage")
[17:42:13.027]                       }
[17:42:13.027]                       else if (inherits(cond, "warning")) {
[17:42:13.027]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.027]                         if (muffled) 
[17:42:13.027]                           invokeRestart("muffleWarning")
[17:42:13.027]                       }
[17:42:13.027]                       else if (inherits(cond, "condition")) {
[17:42:13.027]                         if (!is.null(pattern)) {
[17:42:13.027]                           computeRestarts <- base::computeRestarts
[17:42:13.027]                           grepl <- base::grepl
[17:42:13.027]                           restarts <- computeRestarts(cond)
[17:42:13.027]                           for (restart in restarts) {
[17:42:13.027]                             name <- restart$name
[17:42:13.027]                             if (is.null(name)) 
[17:42:13.027]                               next
[17:42:13.027]                             if (!grepl(pattern, name)) 
[17:42:13.027]                               next
[17:42:13.027]                             invokeRestart(restart)
[17:42:13.027]                             muffled <- TRUE
[17:42:13.027]                             break
[17:42:13.027]                           }
[17:42:13.027]                         }
[17:42:13.027]                       }
[17:42:13.027]                       invisible(muffled)
[17:42:13.027]                     }
[17:42:13.027]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.027]                   }
[17:42:13.027]                 }
[17:42:13.027]                 else {
[17:42:13.027]                   if (TRUE) {
[17:42:13.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.027]                     {
[17:42:13.027]                       inherits <- base::inherits
[17:42:13.027]                       invokeRestart <- base::invokeRestart
[17:42:13.027]                       is.null <- base::is.null
[17:42:13.027]                       muffled <- FALSE
[17:42:13.027]                       if (inherits(cond, "message")) {
[17:42:13.027]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.027]                         if (muffled) 
[17:42:13.027]                           invokeRestart("muffleMessage")
[17:42:13.027]                       }
[17:42:13.027]                       else if (inherits(cond, "warning")) {
[17:42:13.027]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.027]                         if (muffled) 
[17:42:13.027]                           invokeRestart("muffleWarning")
[17:42:13.027]                       }
[17:42:13.027]                       else if (inherits(cond, "condition")) {
[17:42:13.027]                         if (!is.null(pattern)) {
[17:42:13.027]                           computeRestarts <- base::computeRestarts
[17:42:13.027]                           grepl <- base::grepl
[17:42:13.027]                           restarts <- computeRestarts(cond)
[17:42:13.027]                           for (restart in restarts) {
[17:42:13.027]                             name <- restart$name
[17:42:13.027]                             if (is.null(name)) 
[17:42:13.027]                               next
[17:42:13.027]                             if (!grepl(pattern, name)) 
[17:42:13.027]                               next
[17:42:13.027]                             invokeRestart(restart)
[17:42:13.027]                             muffled <- TRUE
[17:42:13.027]                             break
[17:42:13.027]                           }
[17:42:13.027]                         }
[17:42:13.027]                       }
[17:42:13.027]                       invisible(muffled)
[17:42:13.027]                     }
[17:42:13.027]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.027]                   }
[17:42:13.027]                 }
[17:42:13.027]             }
[17:42:13.027]         }))
[17:42:13.027]     }, error = function(ex) {
[17:42:13.027]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:13.027]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.027]                 ...future.rng), started = ...future.startTime, 
[17:42:13.027]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:13.027]             version = "1.8"), class = "FutureResult")
[17:42:13.027]     }, finally = {
[17:42:13.027]         if (!identical(...future.workdir, getwd())) 
[17:42:13.027]             setwd(...future.workdir)
[17:42:13.027]         {
[17:42:13.027]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:13.027]                 ...future.oldOptions$nwarnings <- NULL
[17:42:13.027]             }
[17:42:13.027]             base::options(...future.oldOptions)
[17:42:13.027]             if (.Platform$OS.type == "windows") {
[17:42:13.027]                 old_names <- names(...future.oldEnvVars)
[17:42:13.027]                 envs <- base::Sys.getenv()
[17:42:13.027]                 names <- names(envs)
[17:42:13.027]                 common <- intersect(names, old_names)
[17:42:13.027]                 added <- setdiff(names, old_names)
[17:42:13.027]                 removed <- setdiff(old_names, names)
[17:42:13.027]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:13.027]                   envs[common]]
[17:42:13.027]                 NAMES <- toupper(changed)
[17:42:13.027]                 args <- list()
[17:42:13.027]                 for (kk in seq_along(NAMES)) {
[17:42:13.027]                   name <- changed[[kk]]
[17:42:13.027]                   NAME <- NAMES[[kk]]
[17:42:13.027]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.027]                     next
[17:42:13.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.027]                 }
[17:42:13.027]                 NAMES <- toupper(added)
[17:42:13.027]                 for (kk in seq_along(NAMES)) {
[17:42:13.027]                   name <- added[[kk]]
[17:42:13.027]                   NAME <- NAMES[[kk]]
[17:42:13.027]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.027]                     next
[17:42:13.027]                   args[[name]] <- ""
[17:42:13.027]                 }
[17:42:13.027]                 NAMES <- toupper(removed)
[17:42:13.027]                 for (kk in seq_along(NAMES)) {
[17:42:13.027]                   name <- removed[[kk]]
[17:42:13.027]                   NAME <- NAMES[[kk]]
[17:42:13.027]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.027]                     next
[17:42:13.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.027]                 }
[17:42:13.027]                 if (length(args) > 0) 
[17:42:13.027]                   base::do.call(base::Sys.setenv, args = args)
[17:42:13.027]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:13.027]             }
[17:42:13.027]             else {
[17:42:13.027]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:13.027]             }
[17:42:13.027]             {
[17:42:13.027]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:13.027]                   0L) {
[17:42:13.027]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:13.027]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:13.027]                   base::options(opts)
[17:42:13.027]                 }
[17:42:13.027]                 {
[17:42:13.027]                   {
[17:42:13.027]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:13.027]                     NULL
[17:42:13.027]                   }
[17:42:13.027]                   options(future.plan = NULL)
[17:42:13.027]                   if (is.na(NA_character_)) 
[17:42:13.027]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.027]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:13.027]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:13.027]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:13.027]                     envir = parent.frame()) 
[17:42:13.027]                   {
[17:42:13.027]                     if (is.function(workers)) 
[17:42:13.027]                       workers <- workers()
[17:42:13.027]                     workers <- structure(as.integer(workers), 
[17:42:13.027]                       class = class(workers))
[17:42:13.027]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:13.027]                       workers >= 1)
[17:42:13.027]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:13.027]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:13.027]                     }
[17:42:13.027]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:13.027]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:13.027]                       envir = envir)
[17:42:13.027]                     if (!future$lazy) 
[17:42:13.027]                       future <- run(future)
[17:42:13.027]                     invisible(future)
[17:42:13.027]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:13.027]                 }
[17:42:13.027]             }
[17:42:13.027]         }
[17:42:13.027]     })
[17:42:13.027]     if (TRUE) {
[17:42:13.027]         base::sink(type = "output", split = FALSE)
[17:42:13.027]         if (TRUE) {
[17:42:13.027]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:13.027]         }
[17:42:13.027]         else {
[17:42:13.027]             ...future.result["stdout"] <- base::list(NULL)
[17:42:13.027]         }
[17:42:13.027]         base::close(...future.stdout)
[17:42:13.027]         ...future.stdout <- NULL
[17:42:13.027]     }
[17:42:13.027]     ...future.result$conditions <- ...future.conditions
[17:42:13.027]     ...future.result$finished <- base::Sys.time()
[17:42:13.027]     ...future.result
[17:42:13.027] }
[17:42:13.030] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:13.030] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:42:13.030] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:42:13.031] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:13.031] MultisessionFuture started
[17:42:13.032] - Launch lazy future ... done
[17:42:13.032] run() for ‘MultisessionFuture’ ... done
[17:42:13.032] result() for ClusterFuture ...
[17:42:13.032] receiveMessageFromWorker() for ClusterFuture ...
[17:42:13.032] - Validating connection of MultisessionFuture
[17:42:13.080] - received message: FutureResult
[17:42:13.080] - Received FutureResult
[17:42:13.081] - Erased future from FutureRegistry
[17:42:13.081] result() for ClusterFuture ...
[17:42:13.081] - result already collected: FutureResult
[17:42:13.081] result() for ClusterFuture ... done
[17:42:13.081] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:13.081] result() for ClusterFuture ... done
[17:42:13.082] result() for ClusterFuture ...
[17:42:13.082] - result already collected: FutureResult
[17:42:13.082] result() for ClusterFuture ... done
[17:42:13.082] getGlobalsAndPackages() ...
[17:42:13.082] Searching for globals...
[17:42:13.083] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:13.084] Searching for globals ... DONE
[17:42:13.084] Resolving globals: FALSE
[17:42:13.084] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:13.085] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:13.085] - globals: [1] ‘a’
[17:42:13.085] 
[17:42:13.085] getGlobalsAndPackages() ... DONE
[17:42:13.085] run() for ‘Future’ ...
[17:42:13.088] - state: ‘created’
[17:42:13.088] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:13.102] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:13.102] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:13.103]   - Field: ‘node’
[17:42:13.103]   - Field: ‘label’
[17:42:13.103]   - Field: ‘local’
[17:42:13.103]   - Field: ‘owner’
[17:42:13.103]   - Field: ‘envir’
[17:42:13.103]   - Field: ‘workers’
[17:42:13.103]   - Field: ‘packages’
[17:42:13.103]   - Field: ‘gc’
[17:42:13.103]   - Field: ‘conditions’
[17:42:13.103]   - Field: ‘persistent’
[17:42:13.104]   - Field: ‘expr’
[17:42:13.104]   - Field: ‘uuid’
[17:42:13.104]   - Field: ‘seed’
[17:42:13.104]   - Field: ‘version’
[17:42:13.104]   - Field: ‘result’
[17:42:13.104]   - Field: ‘asynchronous’
[17:42:13.104]   - Field: ‘calls’
[17:42:13.104]   - Field: ‘globals’
[17:42:13.104]   - Field: ‘stdout’
[17:42:13.104]   - Field: ‘earlySignal’
[17:42:13.104]   - Field: ‘lazy’
[17:42:13.104]   - Field: ‘state’
[17:42:13.105] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:13.105] - Launch lazy future ...
[17:42:13.105] Packages needed by the future expression (n = 0): <none>
[17:42:13.105] Packages needed by future strategies (n = 0): <none>
[17:42:13.106] {
[17:42:13.106]     {
[17:42:13.106]         {
[17:42:13.106]             ...future.startTime <- base::Sys.time()
[17:42:13.106]             {
[17:42:13.106]                 {
[17:42:13.106]                   {
[17:42:13.106]                     {
[17:42:13.106]                       base::local({
[17:42:13.106]                         has_future <- base::requireNamespace("future", 
[17:42:13.106]                           quietly = TRUE)
[17:42:13.106]                         if (has_future) {
[17:42:13.106]                           ns <- base::getNamespace("future")
[17:42:13.106]                           version <- ns[[".package"]][["version"]]
[17:42:13.106]                           if (is.null(version)) 
[17:42:13.106]                             version <- utils::packageVersion("future")
[17:42:13.106]                         }
[17:42:13.106]                         else {
[17:42:13.106]                           version <- NULL
[17:42:13.106]                         }
[17:42:13.106]                         if (!has_future || version < "1.8.0") {
[17:42:13.106]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:13.106]                             "", base::R.version$version.string), 
[17:42:13.106]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:13.106]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:13.106]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:13.106]                               "release", "version")], collapse = " "), 
[17:42:13.106]                             hostname = base::Sys.info()[["nodename"]])
[17:42:13.106]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:13.106]                             info)
[17:42:13.106]                           info <- base::paste(info, collapse = "; ")
[17:42:13.106]                           if (!has_future) {
[17:42:13.106]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:13.106]                               info)
[17:42:13.106]                           }
[17:42:13.106]                           else {
[17:42:13.106]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:13.106]                               info, version)
[17:42:13.106]                           }
[17:42:13.106]                           base::stop(msg)
[17:42:13.106]                         }
[17:42:13.106]                       })
[17:42:13.106]                     }
[17:42:13.106]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:13.106]                     base::options(mc.cores = 1L)
[17:42:13.106]                   }
[17:42:13.106]                   options(future.plan = NULL)
[17:42:13.106]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.106]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:13.106]                 }
[17:42:13.106]                 ...future.workdir <- getwd()
[17:42:13.106]             }
[17:42:13.106]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:13.106]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:13.106]         }
[17:42:13.106]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:13.106]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:13.106]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:13.106]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:13.106]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:13.106]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:13.106]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:13.106]             base::names(...future.oldOptions))
[17:42:13.106]     }
[17:42:13.106]     if (FALSE) {
[17:42:13.106]     }
[17:42:13.106]     else {
[17:42:13.106]         if (TRUE) {
[17:42:13.106]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:13.106]                 open = "w")
[17:42:13.106]         }
[17:42:13.106]         else {
[17:42:13.106]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:13.106]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:13.106]         }
[17:42:13.106]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:13.106]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:13.106]             base::sink(type = "output", split = FALSE)
[17:42:13.106]             base::close(...future.stdout)
[17:42:13.106]         }, add = TRUE)
[17:42:13.106]     }
[17:42:13.106]     ...future.frame <- base::sys.nframe()
[17:42:13.106]     ...future.conditions <- base::list()
[17:42:13.106]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:13.106]     if (FALSE) {
[17:42:13.106]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:13.106]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:13.106]     }
[17:42:13.106]     ...future.result <- base::tryCatch({
[17:42:13.106]         base::withCallingHandlers({
[17:42:13.106]             ...future.value <- base::withVisible(base::local({
[17:42:13.106]                 ...future.makeSendCondition <- local({
[17:42:13.106]                   sendCondition <- NULL
[17:42:13.106]                   function(frame = 1L) {
[17:42:13.106]                     if (is.function(sendCondition)) 
[17:42:13.106]                       return(sendCondition)
[17:42:13.106]                     ns <- getNamespace("parallel")
[17:42:13.106]                     if (exists("sendData", mode = "function", 
[17:42:13.106]                       envir = ns)) {
[17:42:13.106]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:13.106]                         envir = ns)
[17:42:13.106]                       envir <- sys.frame(frame)
[17:42:13.106]                       master <- NULL
[17:42:13.106]                       while (!identical(envir, .GlobalEnv) && 
[17:42:13.106]                         !identical(envir, emptyenv())) {
[17:42:13.106]                         if (exists("master", mode = "list", envir = envir, 
[17:42:13.106]                           inherits = FALSE)) {
[17:42:13.106]                           master <- get("master", mode = "list", 
[17:42:13.106]                             envir = envir, inherits = FALSE)
[17:42:13.106]                           if (inherits(master, c("SOCKnode", 
[17:42:13.106]                             "SOCK0node"))) {
[17:42:13.106]                             sendCondition <<- function(cond) {
[17:42:13.106]                               data <- list(type = "VALUE", value = cond, 
[17:42:13.106]                                 success = TRUE)
[17:42:13.106]                               parallel_sendData(master, data)
[17:42:13.106]                             }
[17:42:13.106]                             return(sendCondition)
[17:42:13.106]                           }
[17:42:13.106]                         }
[17:42:13.106]                         frame <- frame + 1L
[17:42:13.106]                         envir <- sys.frame(frame)
[17:42:13.106]                       }
[17:42:13.106]                     }
[17:42:13.106]                     sendCondition <<- function(cond) NULL
[17:42:13.106]                   }
[17:42:13.106]                 })
[17:42:13.106]                 withCallingHandlers({
[17:42:13.106]                   {
[17:42:13.106]                     2 * a
[17:42:13.106]                   }
[17:42:13.106]                 }, immediateCondition = function(cond) {
[17:42:13.106]                   sendCondition <- ...future.makeSendCondition()
[17:42:13.106]                   sendCondition(cond)
[17:42:13.106]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.106]                   {
[17:42:13.106]                     inherits <- base::inherits
[17:42:13.106]                     invokeRestart <- base::invokeRestart
[17:42:13.106]                     is.null <- base::is.null
[17:42:13.106]                     muffled <- FALSE
[17:42:13.106]                     if (inherits(cond, "message")) {
[17:42:13.106]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:13.106]                       if (muffled) 
[17:42:13.106]                         invokeRestart("muffleMessage")
[17:42:13.106]                     }
[17:42:13.106]                     else if (inherits(cond, "warning")) {
[17:42:13.106]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:13.106]                       if (muffled) 
[17:42:13.106]                         invokeRestart("muffleWarning")
[17:42:13.106]                     }
[17:42:13.106]                     else if (inherits(cond, "condition")) {
[17:42:13.106]                       if (!is.null(pattern)) {
[17:42:13.106]                         computeRestarts <- base::computeRestarts
[17:42:13.106]                         grepl <- base::grepl
[17:42:13.106]                         restarts <- computeRestarts(cond)
[17:42:13.106]                         for (restart in restarts) {
[17:42:13.106]                           name <- restart$name
[17:42:13.106]                           if (is.null(name)) 
[17:42:13.106]                             next
[17:42:13.106]                           if (!grepl(pattern, name)) 
[17:42:13.106]                             next
[17:42:13.106]                           invokeRestart(restart)
[17:42:13.106]                           muffled <- TRUE
[17:42:13.106]                           break
[17:42:13.106]                         }
[17:42:13.106]                       }
[17:42:13.106]                     }
[17:42:13.106]                     invisible(muffled)
[17:42:13.106]                   }
[17:42:13.106]                   muffleCondition(cond)
[17:42:13.106]                 })
[17:42:13.106]             }))
[17:42:13.106]             future::FutureResult(value = ...future.value$value, 
[17:42:13.106]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.106]                   ...future.rng), globalenv = if (FALSE) 
[17:42:13.106]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:13.106]                     ...future.globalenv.names))
[17:42:13.106]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:13.106]         }, condition = base::local({
[17:42:13.106]             c <- base::c
[17:42:13.106]             inherits <- base::inherits
[17:42:13.106]             invokeRestart <- base::invokeRestart
[17:42:13.106]             length <- base::length
[17:42:13.106]             list <- base::list
[17:42:13.106]             seq.int <- base::seq.int
[17:42:13.106]             signalCondition <- base::signalCondition
[17:42:13.106]             sys.calls <- base::sys.calls
[17:42:13.106]             `[[` <- base::`[[`
[17:42:13.106]             `+` <- base::`+`
[17:42:13.106]             `<<-` <- base::`<<-`
[17:42:13.106]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:13.106]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:13.106]                   3L)]
[17:42:13.106]             }
[17:42:13.106]             function(cond) {
[17:42:13.106]                 is_error <- inherits(cond, "error")
[17:42:13.106]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:13.106]                   NULL)
[17:42:13.106]                 if (is_error) {
[17:42:13.106]                   sessionInformation <- function() {
[17:42:13.106]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:13.106]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:13.106]                       search = base::search(), system = base::Sys.info())
[17:42:13.106]                   }
[17:42:13.106]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.106]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:13.106]                     cond$call), session = sessionInformation(), 
[17:42:13.106]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:13.106]                   signalCondition(cond)
[17:42:13.106]                 }
[17:42:13.106]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:13.106]                 "immediateCondition"))) {
[17:42:13.106]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:13.106]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.106]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:13.106]                   if (TRUE && !signal) {
[17:42:13.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.106]                     {
[17:42:13.106]                       inherits <- base::inherits
[17:42:13.106]                       invokeRestart <- base::invokeRestart
[17:42:13.106]                       is.null <- base::is.null
[17:42:13.106]                       muffled <- FALSE
[17:42:13.106]                       if (inherits(cond, "message")) {
[17:42:13.106]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.106]                         if (muffled) 
[17:42:13.106]                           invokeRestart("muffleMessage")
[17:42:13.106]                       }
[17:42:13.106]                       else if (inherits(cond, "warning")) {
[17:42:13.106]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.106]                         if (muffled) 
[17:42:13.106]                           invokeRestart("muffleWarning")
[17:42:13.106]                       }
[17:42:13.106]                       else if (inherits(cond, "condition")) {
[17:42:13.106]                         if (!is.null(pattern)) {
[17:42:13.106]                           computeRestarts <- base::computeRestarts
[17:42:13.106]                           grepl <- base::grepl
[17:42:13.106]                           restarts <- computeRestarts(cond)
[17:42:13.106]                           for (restart in restarts) {
[17:42:13.106]                             name <- restart$name
[17:42:13.106]                             if (is.null(name)) 
[17:42:13.106]                               next
[17:42:13.106]                             if (!grepl(pattern, name)) 
[17:42:13.106]                               next
[17:42:13.106]                             invokeRestart(restart)
[17:42:13.106]                             muffled <- TRUE
[17:42:13.106]                             break
[17:42:13.106]                           }
[17:42:13.106]                         }
[17:42:13.106]                       }
[17:42:13.106]                       invisible(muffled)
[17:42:13.106]                     }
[17:42:13.106]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.106]                   }
[17:42:13.106]                 }
[17:42:13.106]                 else {
[17:42:13.106]                   if (TRUE) {
[17:42:13.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.106]                     {
[17:42:13.106]                       inherits <- base::inherits
[17:42:13.106]                       invokeRestart <- base::invokeRestart
[17:42:13.106]                       is.null <- base::is.null
[17:42:13.106]                       muffled <- FALSE
[17:42:13.106]                       if (inherits(cond, "message")) {
[17:42:13.106]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.106]                         if (muffled) 
[17:42:13.106]                           invokeRestart("muffleMessage")
[17:42:13.106]                       }
[17:42:13.106]                       else if (inherits(cond, "warning")) {
[17:42:13.106]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.106]                         if (muffled) 
[17:42:13.106]                           invokeRestart("muffleWarning")
[17:42:13.106]                       }
[17:42:13.106]                       else if (inherits(cond, "condition")) {
[17:42:13.106]                         if (!is.null(pattern)) {
[17:42:13.106]                           computeRestarts <- base::computeRestarts
[17:42:13.106]                           grepl <- base::grepl
[17:42:13.106]                           restarts <- computeRestarts(cond)
[17:42:13.106]                           for (restart in restarts) {
[17:42:13.106]                             name <- restart$name
[17:42:13.106]                             if (is.null(name)) 
[17:42:13.106]                               next
[17:42:13.106]                             if (!grepl(pattern, name)) 
[17:42:13.106]                               next
[17:42:13.106]                             invokeRestart(restart)
[17:42:13.106]                             muffled <- TRUE
[17:42:13.106]                             break
[17:42:13.106]                           }
[17:42:13.106]                         }
[17:42:13.106]                       }
[17:42:13.106]                       invisible(muffled)
[17:42:13.106]                     }
[17:42:13.106]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.106]                   }
[17:42:13.106]                 }
[17:42:13.106]             }
[17:42:13.106]         }))
[17:42:13.106]     }, error = function(ex) {
[17:42:13.106]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:13.106]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.106]                 ...future.rng), started = ...future.startTime, 
[17:42:13.106]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:13.106]             version = "1.8"), class = "FutureResult")
[17:42:13.106]     }, finally = {
[17:42:13.106]         if (!identical(...future.workdir, getwd())) 
[17:42:13.106]             setwd(...future.workdir)
[17:42:13.106]         {
[17:42:13.106]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:13.106]                 ...future.oldOptions$nwarnings <- NULL
[17:42:13.106]             }
[17:42:13.106]             base::options(...future.oldOptions)
[17:42:13.106]             if (.Platform$OS.type == "windows") {
[17:42:13.106]                 old_names <- names(...future.oldEnvVars)
[17:42:13.106]                 envs <- base::Sys.getenv()
[17:42:13.106]                 names <- names(envs)
[17:42:13.106]                 common <- intersect(names, old_names)
[17:42:13.106]                 added <- setdiff(names, old_names)
[17:42:13.106]                 removed <- setdiff(old_names, names)
[17:42:13.106]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:13.106]                   envs[common]]
[17:42:13.106]                 NAMES <- toupper(changed)
[17:42:13.106]                 args <- list()
[17:42:13.106]                 for (kk in seq_along(NAMES)) {
[17:42:13.106]                   name <- changed[[kk]]
[17:42:13.106]                   NAME <- NAMES[[kk]]
[17:42:13.106]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.106]                     next
[17:42:13.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.106]                 }
[17:42:13.106]                 NAMES <- toupper(added)
[17:42:13.106]                 for (kk in seq_along(NAMES)) {
[17:42:13.106]                   name <- added[[kk]]
[17:42:13.106]                   NAME <- NAMES[[kk]]
[17:42:13.106]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.106]                     next
[17:42:13.106]                   args[[name]] <- ""
[17:42:13.106]                 }
[17:42:13.106]                 NAMES <- toupper(removed)
[17:42:13.106]                 for (kk in seq_along(NAMES)) {
[17:42:13.106]                   name <- removed[[kk]]
[17:42:13.106]                   NAME <- NAMES[[kk]]
[17:42:13.106]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.106]                     next
[17:42:13.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.106]                 }
[17:42:13.106]                 if (length(args) > 0) 
[17:42:13.106]                   base::do.call(base::Sys.setenv, args = args)
[17:42:13.106]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:13.106]             }
[17:42:13.106]             else {
[17:42:13.106]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:13.106]             }
[17:42:13.106]             {
[17:42:13.106]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:13.106]                   0L) {
[17:42:13.106]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:13.106]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:13.106]                   base::options(opts)
[17:42:13.106]                 }
[17:42:13.106]                 {
[17:42:13.106]                   {
[17:42:13.106]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:13.106]                     NULL
[17:42:13.106]                   }
[17:42:13.106]                   options(future.plan = NULL)
[17:42:13.106]                   if (is.na(NA_character_)) 
[17:42:13.106]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.106]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:13.106]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:13.106]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:13.106]                     envir = parent.frame()) 
[17:42:13.106]                   {
[17:42:13.106]                     if (is.function(workers)) 
[17:42:13.106]                       workers <- workers()
[17:42:13.106]                     workers <- structure(as.integer(workers), 
[17:42:13.106]                       class = class(workers))
[17:42:13.106]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:13.106]                       workers >= 1)
[17:42:13.106]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:13.106]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:13.106]                     }
[17:42:13.106]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:13.106]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:13.106]                       envir = envir)
[17:42:13.106]                     if (!future$lazy) 
[17:42:13.106]                       future <- run(future)
[17:42:13.106]                     invisible(future)
[17:42:13.106]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:13.106]                 }
[17:42:13.106]             }
[17:42:13.106]         }
[17:42:13.106]     })
[17:42:13.106]     if (TRUE) {
[17:42:13.106]         base::sink(type = "output", split = FALSE)
[17:42:13.106]         if (TRUE) {
[17:42:13.106]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:13.106]         }
[17:42:13.106]         else {
[17:42:13.106]             ...future.result["stdout"] <- base::list(NULL)
[17:42:13.106]         }
[17:42:13.106]         base::close(...future.stdout)
[17:42:13.106]         ...future.stdout <- NULL
[17:42:13.106]     }
[17:42:13.106]     ...future.result$conditions <- ...future.conditions
[17:42:13.106]     ...future.result$finished <- base::Sys.time()
[17:42:13.106]     ...future.result
[17:42:13.106] }
[17:42:13.108] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:13.109] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:42:13.109] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:42:13.109] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:13.110] MultisessionFuture started
[17:42:13.110] - Launch lazy future ... done
[17:42:13.110] run() for ‘MultisessionFuture’ ... done
[17:42:13.110] result() for ClusterFuture ...
[17:42:13.110] receiveMessageFromWorker() for ClusterFuture ...
[17:42:13.110] - Validating connection of MultisessionFuture
[17:42:13.156] - received message: FutureResult
[17:42:13.156] - Received FutureResult
[17:42:13.156] - Erased future from FutureRegistry
[17:42:13.156] result() for ClusterFuture ...
[17:42:13.157] - result already collected: FutureResult
[17:42:13.157] result() for ClusterFuture ... done
[17:42:13.157] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:13.157] result() for ClusterFuture ... done
[17:42:13.157] result() for ClusterFuture ...
[17:42:13.157] - result already collected: FutureResult
[17:42:13.157] result() for ClusterFuture ... done
[17:42:13.157] getGlobalsAndPackages() ...
[17:42:13.157] Searching for globals...
[17:42:13.158] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:13.158] Searching for globals ... DONE
[17:42:13.159] Resolving globals: FALSE
[17:42:13.159] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:13.159] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:13.159] - globals: [1] ‘a’
[17:42:13.160] 
[17:42:13.160] getGlobalsAndPackages() ... DONE
[17:42:13.160] run() for ‘Future’ ...
[17:42:13.160] - state: ‘created’
[17:42:13.160] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:13.175] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:13.175] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:13.175]   - Field: ‘node’
[17:42:13.175]   - Field: ‘label’
[17:42:13.175]   - Field: ‘local’
[17:42:13.175]   - Field: ‘owner’
[17:42:13.176]   - Field: ‘envir’
[17:42:13.176]   - Field: ‘workers’
[17:42:13.176]   - Field: ‘packages’
[17:42:13.176]   - Field: ‘gc’
[17:42:13.176]   - Field: ‘conditions’
[17:42:13.176]   - Field: ‘persistent’
[17:42:13.176]   - Field: ‘expr’
[17:42:13.176]   - Field: ‘uuid’
[17:42:13.176]   - Field: ‘seed’
[17:42:13.176]   - Field: ‘version’
[17:42:13.176]   - Field: ‘result’
[17:42:13.177]   - Field: ‘asynchronous’
[17:42:13.177]   - Field: ‘calls’
[17:42:13.177]   - Field: ‘globals’
[17:42:13.177]   - Field: ‘stdout’
[17:42:13.177]   - Field: ‘earlySignal’
[17:42:13.177]   - Field: ‘lazy’
[17:42:13.177]   - Field: ‘state’
[17:42:13.177] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:13.177] - Launch lazy future ...
[17:42:13.178] Packages needed by the future expression (n = 0): <none>
[17:42:13.178] Packages needed by future strategies (n = 0): <none>
[17:42:13.178] {
[17:42:13.178]     {
[17:42:13.178]         {
[17:42:13.178]             ...future.startTime <- base::Sys.time()
[17:42:13.178]             {
[17:42:13.178]                 {
[17:42:13.178]                   {
[17:42:13.178]                     {
[17:42:13.178]                       base::local({
[17:42:13.178]                         has_future <- base::requireNamespace("future", 
[17:42:13.178]                           quietly = TRUE)
[17:42:13.178]                         if (has_future) {
[17:42:13.178]                           ns <- base::getNamespace("future")
[17:42:13.178]                           version <- ns[[".package"]][["version"]]
[17:42:13.178]                           if (is.null(version)) 
[17:42:13.178]                             version <- utils::packageVersion("future")
[17:42:13.178]                         }
[17:42:13.178]                         else {
[17:42:13.178]                           version <- NULL
[17:42:13.178]                         }
[17:42:13.178]                         if (!has_future || version < "1.8.0") {
[17:42:13.178]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:13.178]                             "", base::R.version$version.string), 
[17:42:13.178]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:13.178]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:13.178]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:13.178]                               "release", "version")], collapse = " "), 
[17:42:13.178]                             hostname = base::Sys.info()[["nodename"]])
[17:42:13.178]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:13.178]                             info)
[17:42:13.178]                           info <- base::paste(info, collapse = "; ")
[17:42:13.178]                           if (!has_future) {
[17:42:13.178]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:13.178]                               info)
[17:42:13.178]                           }
[17:42:13.178]                           else {
[17:42:13.178]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:13.178]                               info, version)
[17:42:13.178]                           }
[17:42:13.178]                           base::stop(msg)
[17:42:13.178]                         }
[17:42:13.178]                       })
[17:42:13.178]                     }
[17:42:13.178]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:13.178]                     base::options(mc.cores = 1L)
[17:42:13.178]                   }
[17:42:13.178]                   options(future.plan = NULL)
[17:42:13.178]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.178]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:13.178]                 }
[17:42:13.178]                 ...future.workdir <- getwd()
[17:42:13.178]             }
[17:42:13.178]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:13.178]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:13.178]         }
[17:42:13.178]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:13.178]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:13.178]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:13.178]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:13.178]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:13.178]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:13.178]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:13.178]             base::names(...future.oldOptions))
[17:42:13.178]     }
[17:42:13.178]     if (FALSE) {
[17:42:13.178]     }
[17:42:13.178]     else {
[17:42:13.178]         if (TRUE) {
[17:42:13.178]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:13.178]                 open = "w")
[17:42:13.178]         }
[17:42:13.178]         else {
[17:42:13.178]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:13.178]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:13.178]         }
[17:42:13.178]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:13.178]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:13.178]             base::sink(type = "output", split = FALSE)
[17:42:13.178]             base::close(...future.stdout)
[17:42:13.178]         }, add = TRUE)
[17:42:13.178]     }
[17:42:13.178]     ...future.frame <- base::sys.nframe()
[17:42:13.178]     ...future.conditions <- base::list()
[17:42:13.178]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:13.178]     if (FALSE) {
[17:42:13.178]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:13.178]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:13.178]     }
[17:42:13.178]     ...future.result <- base::tryCatch({
[17:42:13.178]         base::withCallingHandlers({
[17:42:13.178]             ...future.value <- base::withVisible(base::local({
[17:42:13.178]                 ...future.makeSendCondition <- local({
[17:42:13.178]                   sendCondition <- NULL
[17:42:13.178]                   function(frame = 1L) {
[17:42:13.178]                     if (is.function(sendCondition)) 
[17:42:13.178]                       return(sendCondition)
[17:42:13.178]                     ns <- getNamespace("parallel")
[17:42:13.178]                     if (exists("sendData", mode = "function", 
[17:42:13.178]                       envir = ns)) {
[17:42:13.178]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:13.178]                         envir = ns)
[17:42:13.178]                       envir <- sys.frame(frame)
[17:42:13.178]                       master <- NULL
[17:42:13.178]                       while (!identical(envir, .GlobalEnv) && 
[17:42:13.178]                         !identical(envir, emptyenv())) {
[17:42:13.178]                         if (exists("master", mode = "list", envir = envir, 
[17:42:13.178]                           inherits = FALSE)) {
[17:42:13.178]                           master <- get("master", mode = "list", 
[17:42:13.178]                             envir = envir, inherits = FALSE)
[17:42:13.178]                           if (inherits(master, c("SOCKnode", 
[17:42:13.178]                             "SOCK0node"))) {
[17:42:13.178]                             sendCondition <<- function(cond) {
[17:42:13.178]                               data <- list(type = "VALUE", value = cond, 
[17:42:13.178]                                 success = TRUE)
[17:42:13.178]                               parallel_sendData(master, data)
[17:42:13.178]                             }
[17:42:13.178]                             return(sendCondition)
[17:42:13.178]                           }
[17:42:13.178]                         }
[17:42:13.178]                         frame <- frame + 1L
[17:42:13.178]                         envir <- sys.frame(frame)
[17:42:13.178]                       }
[17:42:13.178]                     }
[17:42:13.178]                     sendCondition <<- function(cond) NULL
[17:42:13.178]                   }
[17:42:13.178]                 })
[17:42:13.178]                 withCallingHandlers({
[17:42:13.178]                   {
[17:42:13.178]                     2 * a
[17:42:13.178]                   }
[17:42:13.178]                 }, immediateCondition = function(cond) {
[17:42:13.178]                   sendCondition <- ...future.makeSendCondition()
[17:42:13.178]                   sendCondition(cond)
[17:42:13.178]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.178]                   {
[17:42:13.178]                     inherits <- base::inherits
[17:42:13.178]                     invokeRestart <- base::invokeRestart
[17:42:13.178]                     is.null <- base::is.null
[17:42:13.178]                     muffled <- FALSE
[17:42:13.178]                     if (inherits(cond, "message")) {
[17:42:13.178]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:13.178]                       if (muffled) 
[17:42:13.178]                         invokeRestart("muffleMessage")
[17:42:13.178]                     }
[17:42:13.178]                     else if (inherits(cond, "warning")) {
[17:42:13.178]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:13.178]                       if (muffled) 
[17:42:13.178]                         invokeRestart("muffleWarning")
[17:42:13.178]                     }
[17:42:13.178]                     else if (inherits(cond, "condition")) {
[17:42:13.178]                       if (!is.null(pattern)) {
[17:42:13.178]                         computeRestarts <- base::computeRestarts
[17:42:13.178]                         grepl <- base::grepl
[17:42:13.178]                         restarts <- computeRestarts(cond)
[17:42:13.178]                         for (restart in restarts) {
[17:42:13.178]                           name <- restart$name
[17:42:13.178]                           if (is.null(name)) 
[17:42:13.178]                             next
[17:42:13.178]                           if (!grepl(pattern, name)) 
[17:42:13.178]                             next
[17:42:13.178]                           invokeRestart(restart)
[17:42:13.178]                           muffled <- TRUE
[17:42:13.178]                           break
[17:42:13.178]                         }
[17:42:13.178]                       }
[17:42:13.178]                     }
[17:42:13.178]                     invisible(muffled)
[17:42:13.178]                   }
[17:42:13.178]                   muffleCondition(cond)
[17:42:13.178]                 })
[17:42:13.178]             }))
[17:42:13.178]             future::FutureResult(value = ...future.value$value, 
[17:42:13.178]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.178]                   ...future.rng), globalenv = if (FALSE) 
[17:42:13.178]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:13.178]                     ...future.globalenv.names))
[17:42:13.178]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:13.178]         }, condition = base::local({
[17:42:13.178]             c <- base::c
[17:42:13.178]             inherits <- base::inherits
[17:42:13.178]             invokeRestart <- base::invokeRestart
[17:42:13.178]             length <- base::length
[17:42:13.178]             list <- base::list
[17:42:13.178]             seq.int <- base::seq.int
[17:42:13.178]             signalCondition <- base::signalCondition
[17:42:13.178]             sys.calls <- base::sys.calls
[17:42:13.178]             `[[` <- base::`[[`
[17:42:13.178]             `+` <- base::`+`
[17:42:13.178]             `<<-` <- base::`<<-`
[17:42:13.178]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:13.178]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:13.178]                   3L)]
[17:42:13.178]             }
[17:42:13.178]             function(cond) {
[17:42:13.178]                 is_error <- inherits(cond, "error")
[17:42:13.178]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:13.178]                   NULL)
[17:42:13.178]                 if (is_error) {
[17:42:13.178]                   sessionInformation <- function() {
[17:42:13.178]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:13.178]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:13.178]                       search = base::search(), system = base::Sys.info())
[17:42:13.178]                   }
[17:42:13.178]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.178]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:13.178]                     cond$call), session = sessionInformation(), 
[17:42:13.178]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:13.178]                   signalCondition(cond)
[17:42:13.178]                 }
[17:42:13.178]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:13.178]                 "immediateCondition"))) {
[17:42:13.178]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:13.178]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.178]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:13.178]                   if (TRUE && !signal) {
[17:42:13.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.178]                     {
[17:42:13.178]                       inherits <- base::inherits
[17:42:13.178]                       invokeRestart <- base::invokeRestart
[17:42:13.178]                       is.null <- base::is.null
[17:42:13.178]                       muffled <- FALSE
[17:42:13.178]                       if (inherits(cond, "message")) {
[17:42:13.178]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.178]                         if (muffled) 
[17:42:13.178]                           invokeRestart("muffleMessage")
[17:42:13.178]                       }
[17:42:13.178]                       else if (inherits(cond, "warning")) {
[17:42:13.178]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.178]                         if (muffled) 
[17:42:13.178]                           invokeRestart("muffleWarning")
[17:42:13.178]                       }
[17:42:13.178]                       else if (inherits(cond, "condition")) {
[17:42:13.178]                         if (!is.null(pattern)) {
[17:42:13.178]                           computeRestarts <- base::computeRestarts
[17:42:13.178]                           grepl <- base::grepl
[17:42:13.178]                           restarts <- computeRestarts(cond)
[17:42:13.178]                           for (restart in restarts) {
[17:42:13.178]                             name <- restart$name
[17:42:13.178]                             if (is.null(name)) 
[17:42:13.178]                               next
[17:42:13.178]                             if (!grepl(pattern, name)) 
[17:42:13.178]                               next
[17:42:13.178]                             invokeRestart(restart)
[17:42:13.178]                             muffled <- TRUE
[17:42:13.178]                             break
[17:42:13.178]                           }
[17:42:13.178]                         }
[17:42:13.178]                       }
[17:42:13.178]                       invisible(muffled)
[17:42:13.178]                     }
[17:42:13.178]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.178]                   }
[17:42:13.178]                 }
[17:42:13.178]                 else {
[17:42:13.178]                   if (TRUE) {
[17:42:13.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.178]                     {
[17:42:13.178]                       inherits <- base::inherits
[17:42:13.178]                       invokeRestart <- base::invokeRestart
[17:42:13.178]                       is.null <- base::is.null
[17:42:13.178]                       muffled <- FALSE
[17:42:13.178]                       if (inherits(cond, "message")) {
[17:42:13.178]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.178]                         if (muffled) 
[17:42:13.178]                           invokeRestart("muffleMessage")
[17:42:13.178]                       }
[17:42:13.178]                       else if (inherits(cond, "warning")) {
[17:42:13.178]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.178]                         if (muffled) 
[17:42:13.178]                           invokeRestart("muffleWarning")
[17:42:13.178]                       }
[17:42:13.178]                       else if (inherits(cond, "condition")) {
[17:42:13.178]                         if (!is.null(pattern)) {
[17:42:13.178]                           computeRestarts <- base::computeRestarts
[17:42:13.178]                           grepl <- base::grepl
[17:42:13.178]                           restarts <- computeRestarts(cond)
[17:42:13.178]                           for (restart in restarts) {
[17:42:13.178]                             name <- restart$name
[17:42:13.178]                             if (is.null(name)) 
[17:42:13.178]                               next
[17:42:13.178]                             if (!grepl(pattern, name)) 
[17:42:13.178]                               next
[17:42:13.178]                             invokeRestart(restart)
[17:42:13.178]                             muffled <- TRUE
[17:42:13.178]                             break
[17:42:13.178]                           }
[17:42:13.178]                         }
[17:42:13.178]                       }
[17:42:13.178]                       invisible(muffled)
[17:42:13.178]                     }
[17:42:13.178]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.178]                   }
[17:42:13.178]                 }
[17:42:13.178]             }
[17:42:13.178]         }))
[17:42:13.178]     }, error = function(ex) {
[17:42:13.178]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:13.178]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.178]                 ...future.rng), started = ...future.startTime, 
[17:42:13.178]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:13.178]             version = "1.8"), class = "FutureResult")
[17:42:13.178]     }, finally = {
[17:42:13.178]         if (!identical(...future.workdir, getwd())) 
[17:42:13.178]             setwd(...future.workdir)
[17:42:13.178]         {
[17:42:13.178]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:13.178]                 ...future.oldOptions$nwarnings <- NULL
[17:42:13.178]             }
[17:42:13.178]             base::options(...future.oldOptions)
[17:42:13.178]             if (.Platform$OS.type == "windows") {
[17:42:13.178]                 old_names <- names(...future.oldEnvVars)
[17:42:13.178]                 envs <- base::Sys.getenv()
[17:42:13.178]                 names <- names(envs)
[17:42:13.178]                 common <- intersect(names, old_names)
[17:42:13.178]                 added <- setdiff(names, old_names)
[17:42:13.178]                 removed <- setdiff(old_names, names)
[17:42:13.178]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:13.178]                   envs[common]]
[17:42:13.178]                 NAMES <- toupper(changed)
[17:42:13.178]                 args <- list()
[17:42:13.178]                 for (kk in seq_along(NAMES)) {
[17:42:13.178]                   name <- changed[[kk]]
[17:42:13.178]                   NAME <- NAMES[[kk]]
[17:42:13.178]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.178]                     next
[17:42:13.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.178]                 }
[17:42:13.178]                 NAMES <- toupper(added)
[17:42:13.178]                 for (kk in seq_along(NAMES)) {
[17:42:13.178]                   name <- added[[kk]]
[17:42:13.178]                   NAME <- NAMES[[kk]]
[17:42:13.178]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.178]                     next
[17:42:13.178]                   args[[name]] <- ""
[17:42:13.178]                 }
[17:42:13.178]                 NAMES <- toupper(removed)
[17:42:13.178]                 for (kk in seq_along(NAMES)) {
[17:42:13.178]                   name <- removed[[kk]]
[17:42:13.178]                   NAME <- NAMES[[kk]]
[17:42:13.178]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.178]                     next
[17:42:13.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.178]                 }
[17:42:13.178]                 if (length(args) > 0) 
[17:42:13.178]                   base::do.call(base::Sys.setenv, args = args)
[17:42:13.178]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:13.178]             }
[17:42:13.178]             else {
[17:42:13.178]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:13.178]             }
[17:42:13.178]             {
[17:42:13.178]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:13.178]                   0L) {
[17:42:13.178]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:13.178]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:13.178]                   base::options(opts)
[17:42:13.178]                 }
[17:42:13.178]                 {
[17:42:13.178]                   {
[17:42:13.178]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:13.178]                     NULL
[17:42:13.178]                   }
[17:42:13.178]                   options(future.plan = NULL)
[17:42:13.178]                   if (is.na(NA_character_)) 
[17:42:13.178]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.178]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:13.178]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:13.178]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:13.178]                     envir = parent.frame()) 
[17:42:13.178]                   {
[17:42:13.178]                     if (is.function(workers)) 
[17:42:13.178]                       workers <- workers()
[17:42:13.178]                     workers <- structure(as.integer(workers), 
[17:42:13.178]                       class = class(workers))
[17:42:13.178]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:13.178]                       workers >= 1)
[17:42:13.178]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:13.178]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:13.178]                     }
[17:42:13.178]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:13.178]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:13.178]                       envir = envir)
[17:42:13.178]                     if (!future$lazy) 
[17:42:13.178]                       future <- run(future)
[17:42:13.178]                     invisible(future)
[17:42:13.178]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:13.178]                 }
[17:42:13.178]             }
[17:42:13.178]         }
[17:42:13.178]     })
[17:42:13.178]     if (TRUE) {
[17:42:13.178]         base::sink(type = "output", split = FALSE)
[17:42:13.178]         if (TRUE) {
[17:42:13.178]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:13.178]         }
[17:42:13.178]         else {
[17:42:13.178]             ...future.result["stdout"] <- base::list(NULL)
[17:42:13.178]         }
[17:42:13.178]         base::close(...future.stdout)
[17:42:13.178]         ...future.stdout <- NULL
[17:42:13.178]     }
[17:42:13.178]     ...future.result$conditions <- ...future.conditions
[17:42:13.178]     ...future.result$finished <- base::Sys.time()
[17:42:13.178]     ...future.result
[17:42:13.178] }
[17:42:13.181] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:13.181] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:42:13.181] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:42:13.182] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:13.182] MultisessionFuture started
[17:42:13.182] - Launch lazy future ... done
[17:42:13.182] run() for ‘MultisessionFuture’ ... done
[17:42:13.183] result() for ClusterFuture ...
[17:42:13.183] receiveMessageFromWorker() for ClusterFuture ...
[17:42:13.183] - Validating connection of MultisessionFuture
[17:42:13.228] - received message: FutureResult
[17:42:13.228] - Received FutureResult
[17:42:13.228] - Erased future from FutureRegistry
[17:42:13.228] result() for ClusterFuture ...
[17:42:13.228] - result already collected: FutureResult
[17:42:13.229] result() for ClusterFuture ... done
[17:42:13.229] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:13.229] result() for ClusterFuture ... done
[17:42:13.229] result() for ClusterFuture ...
[17:42:13.229] - result already collected: FutureResult
[17:42:13.229] result() for ClusterFuture ... done
[17:42:13.229] getGlobalsAndPackages() ...
[17:42:13.229] Searching for globals...
[17:42:13.230] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:13.230] Searching for globals ... DONE
[17:42:13.230] Resolving globals: FALSE
[17:42:13.231] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:13.231] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:13.231] - globals: [1] ‘a’
[17:42:13.231] 
[17:42:13.232] getGlobalsAndPackages() ... DONE
[17:42:13.232] run() for ‘Future’ ...
[17:42:13.232] - state: ‘created’
[17:42:13.232] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:13.247] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:13.248] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:13.248]   - Field: ‘node’
[17:42:13.248]   - Field: ‘label’
[17:42:13.248]   - Field: ‘local’
[17:42:13.248]   - Field: ‘owner’
[17:42:13.248]   - Field: ‘envir’
[17:42:13.248]   - Field: ‘workers’
[17:42:13.248]   - Field: ‘packages’
[17:42:13.248]   - Field: ‘gc’
[17:42:13.249]   - Field: ‘conditions’
[17:42:13.249]   - Field: ‘persistent’
[17:42:13.249]   - Field: ‘expr’
[17:42:13.249]   - Field: ‘uuid’
[17:42:13.249]   - Field: ‘seed’
[17:42:13.249]   - Field: ‘version’
[17:42:13.249]   - Field: ‘result’
[17:42:13.249]   - Field: ‘asynchronous’
[17:42:13.249]   - Field: ‘calls’
[17:42:13.249]   - Field: ‘globals’
[17:42:13.249]   - Field: ‘stdout’
[17:42:13.250]   - Field: ‘earlySignal’
[17:42:13.250]   - Field: ‘lazy’
[17:42:13.250]   - Field: ‘state’
[17:42:13.250] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:13.250] - Launch lazy future ...
[17:42:13.250] Packages needed by the future expression (n = 0): <none>
[17:42:13.250] Packages needed by future strategies (n = 0): <none>
[17:42:13.251] {
[17:42:13.251]     {
[17:42:13.251]         {
[17:42:13.251]             ...future.startTime <- base::Sys.time()
[17:42:13.251]             {
[17:42:13.251]                 {
[17:42:13.251]                   {
[17:42:13.251]                     {
[17:42:13.251]                       base::local({
[17:42:13.251]                         has_future <- base::requireNamespace("future", 
[17:42:13.251]                           quietly = TRUE)
[17:42:13.251]                         if (has_future) {
[17:42:13.251]                           ns <- base::getNamespace("future")
[17:42:13.251]                           version <- ns[[".package"]][["version"]]
[17:42:13.251]                           if (is.null(version)) 
[17:42:13.251]                             version <- utils::packageVersion("future")
[17:42:13.251]                         }
[17:42:13.251]                         else {
[17:42:13.251]                           version <- NULL
[17:42:13.251]                         }
[17:42:13.251]                         if (!has_future || version < "1.8.0") {
[17:42:13.251]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:13.251]                             "", base::R.version$version.string), 
[17:42:13.251]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:13.251]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:13.251]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:13.251]                               "release", "version")], collapse = " "), 
[17:42:13.251]                             hostname = base::Sys.info()[["nodename"]])
[17:42:13.251]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:13.251]                             info)
[17:42:13.251]                           info <- base::paste(info, collapse = "; ")
[17:42:13.251]                           if (!has_future) {
[17:42:13.251]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:13.251]                               info)
[17:42:13.251]                           }
[17:42:13.251]                           else {
[17:42:13.251]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:13.251]                               info, version)
[17:42:13.251]                           }
[17:42:13.251]                           base::stop(msg)
[17:42:13.251]                         }
[17:42:13.251]                       })
[17:42:13.251]                     }
[17:42:13.251]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:13.251]                     base::options(mc.cores = 1L)
[17:42:13.251]                   }
[17:42:13.251]                   options(future.plan = NULL)
[17:42:13.251]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.251]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:13.251]                 }
[17:42:13.251]                 ...future.workdir <- getwd()
[17:42:13.251]             }
[17:42:13.251]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:13.251]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:13.251]         }
[17:42:13.251]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:13.251]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:13.251]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:13.251]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:13.251]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:13.251]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:13.251]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:13.251]             base::names(...future.oldOptions))
[17:42:13.251]     }
[17:42:13.251]     if (FALSE) {
[17:42:13.251]     }
[17:42:13.251]     else {
[17:42:13.251]         if (TRUE) {
[17:42:13.251]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:13.251]                 open = "w")
[17:42:13.251]         }
[17:42:13.251]         else {
[17:42:13.251]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:13.251]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:13.251]         }
[17:42:13.251]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:13.251]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:13.251]             base::sink(type = "output", split = FALSE)
[17:42:13.251]             base::close(...future.stdout)
[17:42:13.251]         }, add = TRUE)
[17:42:13.251]     }
[17:42:13.251]     ...future.frame <- base::sys.nframe()
[17:42:13.251]     ...future.conditions <- base::list()
[17:42:13.251]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:13.251]     if (FALSE) {
[17:42:13.251]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:13.251]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:13.251]     }
[17:42:13.251]     ...future.result <- base::tryCatch({
[17:42:13.251]         base::withCallingHandlers({
[17:42:13.251]             ...future.value <- base::withVisible(base::local({
[17:42:13.251]                 ...future.makeSendCondition <- local({
[17:42:13.251]                   sendCondition <- NULL
[17:42:13.251]                   function(frame = 1L) {
[17:42:13.251]                     if (is.function(sendCondition)) 
[17:42:13.251]                       return(sendCondition)
[17:42:13.251]                     ns <- getNamespace("parallel")
[17:42:13.251]                     if (exists("sendData", mode = "function", 
[17:42:13.251]                       envir = ns)) {
[17:42:13.251]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:13.251]                         envir = ns)
[17:42:13.251]                       envir <- sys.frame(frame)
[17:42:13.251]                       master <- NULL
[17:42:13.251]                       while (!identical(envir, .GlobalEnv) && 
[17:42:13.251]                         !identical(envir, emptyenv())) {
[17:42:13.251]                         if (exists("master", mode = "list", envir = envir, 
[17:42:13.251]                           inherits = FALSE)) {
[17:42:13.251]                           master <- get("master", mode = "list", 
[17:42:13.251]                             envir = envir, inherits = FALSE)
[17:42:13.251]                           if (inherits(master, c("SOCKnode", 
[17:42:13.251]                             "SOCK0node"))) {
[17:42:13.251]                             sendCondition <<- function(cond) {
[17:42:13.251]                               data <- list(type = "VALUE", value = cond, 
[17:42:13.251]                                 success = TRUE)
[17:42:13.251]                               parallel_sendData(master, data)
[17:42:13.251]                             }
[17:42:13.251]                             return(sendCondition)
[17:42:13.251]                           }
[17:42:13.251]                         }
[17:42:13.251]                         frame <- frame + 1L
[17:42:13.251]                         envir <- sys.frame(frame)
[17:42:13.251]                       }
[17:42:13.251]                     }
[17:42:13.251]                     sendCondition <<- function(cond) NULL
[17:42:13.251]                   }
[17:42:13.251]                 })
[17:42:13.251]                 withCallingHandlers({
[17:42:13.251]                   {
[17:42:13.251]                     2 * a
[17:42:13.251]                   }
[17:42:13.251]                 }, immediateCondition = function(cond) {
[17:42:13.251]                   sendCondition <- ...future.makeSendCondition()
[17:42:13.251]                   sendCondition(cond)
[17:42:13.251]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.251]                   {
[17:42:13.251]                     inherits <- base::inherits
[17:42:13.251]                     invokeRestart <- base::invokeRestart
[17:42:13.251]                     is.null <- base::is.null
[17:42:13.251]                     muffled <- FALSE
[17:42:13.251]                     if (inherits(cond, "message")) {
[17:42:13.251]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:13.251]                       if (muffled) 
[17:42:13.251]                         invokeRestart("muffleMessage")
[17:42:13.251]                     }
[17:42:13.251]                     else if (inherits(cond, "warning")) {
[17:42:13.251]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:13.251]                       if (muffled) 
[17:42:13.251]                         invokeRestart("muffleWarning")
[17:42:13.251]                     }
[17:42:13.251]                     else if (inherits(cond, "condition")) {
[17:42:13.251]                       if (!is.null(pattern)) {
[17:42:13.251]                         computeRestarts <- base::computeRestarts
[17:42:13.251]                         grepl <- base::grepl
[17:42:13.251]                         restarts <- computeRestarts(cond)
[17:42:13.251]                         for (restart in restarts) {
[17:42:13.251]                           name <- restart$name
[17:42:13.251]                           if (is.null(name)) 
[17:42:13.251]                             next
[17:42:13.251]                           if (!grepl(pattern, name)) 
[17:42:13.251]                             next
[17:42:13.251]                           invokeRestart(restart)
[17:42:13.251]                           muffled <- TRUE
[17:42:13.251]                           break
[17:42:13.251]                         }
[17:42:13.251]                       }
[17:42:13.251]                     }
[17:42:13.251]                     invisible(muffled)
[17:42:13.251]                   }
[17:42:13.251]                   muffleCondition(cond)
[17:42:13.251]                 })
[17:42:13.251]             }))
[17:42:13.251]             future::FutureResult(value = ...future.value$value, 
[17:42:13.251]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.251]                   ...future.rng), globalenv = if (FALSE) 
[17:42:13.251]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:13.251]                     ...future.globalenv.names))
[17:42:13.251]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:13.251]         }, condition = base::local({
[17:42:13.251]             c <- base::c
[17:42:13.251]             inherits <- base::inherits
[17:42:13.251]             invokeRestart <- base::invokeRestart
[17:42:13.251]             length <- base::length
[17:42:13.251]             list <- base::list
[17:42:13.251]             seq.int <- base::seq.int
[17:42:13.251]             signalCondition <- base::signalCondition
[17:42:13.251]             sys.calls <- base::sys.calls
[17:42:13.251]             `[[` <- base::`[[`
[17:42:13.251]             `+` <- base::`+`
[17:42:13.251]             `<<-` <- base::`<<-`
[17:42:13.251]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:13.251]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:13.251]                   3L)]
[17:42:13.251]             }
[17:42:13.251]             function(cond) {
[17:42:13.251]                 is_error <- inherits(cond, "error")
[17:42:13.251]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:13.251]                   NULL)
[17:42:13.251]                 if (is_error) {
[17:42:13.251]                   sessionInformation <- function() {
[17:42:13.251]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:13.251]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:13.251]                       search = base::search(), system = base::Sys.info())
[17:42:13.251]                   }
[17:42:13.251]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.251]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:13.251]                     cond$call), session = sessionInformation(), 
[17:42:13.251]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:13.251]                   signalCondition(cond)
[17:42:13.251]                 }
[17:42:13.251]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:13.251]                 "immediateCondition"))) {
[17:42:13.251]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:13.251]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.251]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:13.251]                   if (TRUE && !signal) {
[17:42:13.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.251]                     {
[17:42:13.251]                       inherits <- base::inherits
[17:42:13.251]                       invokeRestart <- base::invokeRestart
[17:42:13.251]                       is.null <- base::is.null
[17:42:13.251]                       muffled <- FALSE
[17:42:13.251]                       if (inherits(cond, "message")) {
[17:42:13.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.251]                         if (muffled) 
[17:42:13.251]                           invokeRestart("muffleMessage")
[17:42:13.251]                       }
[17:42:13.251]                       else if (inherits(cond, "warning")) {
[17:42:13.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.251]                         if (muffled) 
[17:42:13.251]                           invokeRestart("muffleWarning")
[17:42:13.251]                       }
[17:42:13.251]                       else if (inherits(cond, "condition")) {
[17:42:13.251]                         if (!is.null(pattern)) {
[17:42:13.251]                           computeRestarts <- base::computeRestarts
[17:42:13.251]                           grepl <- base::grepl
[17:42:13.251]                           restarts <- computeRestarts(cond)
[17:42:13.251]                           for (restart in restarts) {
[17:42:13.251]                             name <- restart$name
[17:42:13.251]                             if (is.null(name)) 
[17:42:13.251]                               next
[17:42:13.251]                             if (!grepl(pattern, name)) 
[17:42:13.251]                               next
[17:42:13.251]                             invokeRestart(restart)
[17:42:13.251]                             muffled <- TRUE
[17:42:13.251]                             break
[17:42:13.251]                           }
[17:42:13.251]                         }
[17:42:13.251]                       }
[17:42:13.251]                       invisible(muffled)
[17:42:13.251]                     }
[17:42:13.251]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.251]                   }
[17:42:13.251]                 }
[17:42:13.251]                 else {
[17:42:13.251]                   if (TRUE) {
[17:42:13.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.251]                     {
[17:42:13.251]                       inherits <- base::inherits
[17:42:13.251]                       invokeRestart <- base::invokeRestart
[17:42:13.251]                       is.null <- base::is.null
[17:42:13.251]                       muffled <- FALSE
[17:42:13.251]                       if (inherits(cond, "message")) {
[17:42:13.251]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.251]                         if (muffled) 
[17:42:13.251]                           invokeRestart("muffleMessage")
[17:42:13.251]                       }
[17:42:13.251]                       else if (inherits(cond, "warning")) {
[17:42:13.251]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.251]                         if (muffled) 
[17:42:13.251]                           invokeRestart("muffleWarning")
[17:42:13.251]                       }
[17:42:13.251]                       else if (inherits(cond, "condition")) {
[17:42:13.251]                         if (!is.null(pattern)) {
[17:42:13.251]                           computeRestarts <- base::computeRestarts
[17:42:13.251]                           grepl <- base::grepl
[17:42:13.251]                           restarts <- computeRestarts(cond)
[17:42:13.251]                           for (restart in restarts) {
[17:42:13.251]                             name <- restart$name
[17:42:13.251]                             if (is.null(name)) 
[17:42:13.251]                               next
[17:42:13.251]                             if (!grepl(pattern, name)) 
[17:42:13.251]                               next
[17:42:13.251]                             invokeRestart(restart)
[17:42:13.251]                             muffled <- TRUE
[17:42:13.251]                             break
[17:42:13.251]                           }
[17:42:13.251]                         }
[17:42:13.251]                       }
[17:42:13.251]                       invisible(muffled)
[17:42:13.251]                     }
[17:42:13.251]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.251]                   }
[17:42:13.251]                 }
[17:42:13.251]             }
[17:42:13.251]         }))
[17:42:13.251]     }, error = function(ex) {
[17:42:13.251]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:13.251]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.251]                 ...future.rng), started = ...future.startTime, 
[17:42:13.251]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:13.251]             version = "1.8"), class = "FutureResult")
[17:42:13.251]     }, finally = {
[17:42:13.251]         if (!identical(...future.workdir, getwd())) 
[17:42:13.251]             setwd(...future.workdir)
[17:42:13.251]         {
[17:42:13.251]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:13.251]                 ...future.oldOptions$nwarnings <- NULL
[17:42:13.251]             }
[17:42:13.251]             base::options(...future.oldOptions)
[17:42:13.251]             if (.Platform$OS.type == "windows") {
[17:42:13.251]                 old_names <- names(...future.oldEnvVars)
[17:42:13.251]                 envs <- base::Sys.getenv()
[17:42:13.251]                 names <- names(envs)
[17:42:13.251]                 common <- intersect(names, old_names)
[17:42:13.251]                 added <- setdiff(names, old_names)
[17:42:13.251]                 removed <- setdiff(old_names, names)
[17:42:13.251]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:13.251]                   envs[common]]
[17:42:13.251]                 NAMES <- toupper(changed)
[17:42:13.251]                 args <- list()
[17:42:13.251]                 for (kk in seq_along(NAMES)) {
[17:42:13.251]                   name <- changed[[kk]]
[17:42:13.251]                   NAME <- NAMES[[kk]]
[17:42:13.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.251]                     next
[17:42:13.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.251]                 }
[17:42:13.251]                 NAMES <- toupper(added)
[17:42:13.251]                 for (kk in seq_along(NAMES)) {
[17:42:13.251]                   name <- added[[kk]]
[17:42:13.251]                   NAME <- NAMES[[kk]]
[17:42:13.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.251]                     next
[17:42:13.251]                   args[[name]] <- ""
[17:42:13.251]                 }
[17:42:13.251]                 NAMES <- toupper(removed)
[17:42:13.251]                 for (kk in seq_along(NAMES)) {
[17:42:13.251]                   name <- removed[[kk]]
[17:42:13.251]                   NAME <- NAMES[[kk]]
[17:42:13.251]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.251]                     next
[17:42:13.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.251]                 }
[17:42:13.251]                 if (length(args) > 0) 
[17:42:13.251]                   base::do.call(base::Sys.setenv, args = args)
[17:42:13.251]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:13.251]             }
[17:42:13.251]             else {
[17:42:13.251]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:13.251]             }
[17:42:13.251]             {
[17:42:13.251]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:13.251]                   0L) {
[17:42:13.251]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:13.251]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:13.251]                   base::options(opts)
[17:42:13.251]                 }
[17:42:13.251]                 {
[17:42:13.251]                   {
[17:42:13.251]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:13.251]                     NULL
[17:42:13.251]                   }
[17:42:13.251]                   options(future.plan = NULL)
[17:42:13.251]                   if (is.na(NA_character_)) 
[17:42:13.251]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.251]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:13.251]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:13.251]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:13.251]                     envir = parent.frame()) 
[17:42:13.251]                   {
[17:42:13.251]                     if (is.function(workers)) 
[17:42:13.251]                       workers <- workers()
[17:42:13.251]                     workers <- structure(as.integer(workers), 
[17:42:13.251]                       class = class(workers))
[17:42:13.251]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:13.251]                       workers >= 1)
[17:42:13.251]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:13.251]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:13.251]                     }
[17:42:13.251]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:13.251]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:13.251]                       envir = envir)
[17:42:13.251]                     if (!future$lazy) 
[17:42:13.251]                       future <- run(future)
[17:42:13.251]                     invisible(future)
[17:42:13.251]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:13.251]                 }
[17:42:13.251]             }
[17:42:13.251]         }
[17:42:13.251]     })
[17:42:13.251]     if (TRUE) {
[17:42:13.251]         base::sink(type = "output", split = FALSE)
[17:42:13.251]         if (TRUE) {
[17:42:13.251]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:13.251]         }
[17:42:13.251]         else {
[17:42:13.251]             ...future.result["stdout"] <- base::list(NULL)
[17:42:13.251]         }
[17:42:13.251]         base::close(...future.stdout)
[17:42:13.251]         ...future.stdout <- NULL
[17:42:13.251]     }
[17:42:13.251]     ...future.result$conditions <- ...future.conditions
[17:42:13.251]     ...future.result$finished <- base::Sys.time()
[17:42:13.251]     ...future.result
[17:42:13.251] }
[17:42:13.254] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:13.254] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:42:13.254] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:42:13.254] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:13.255] MultisessionFuture started
[17:42:13.255] - Launch lazy future ... done
[17:42:13.255] run() for ‘MultisessionFuture’ ... done
[17:42:13.255] result() for ClusterFuture ...
[17:42:13.255] receiveMessageFromWorker() for ClusterFuture ...
[17:42:13.255] - Validating connection of MultisessionFuture
[17:42:13.304] - received message: FutureResult
[17:42:13.305] - Received FutureResult
[17:42:13.305] - Erased future from FutureRegistry
[17:42:13.305] result() for ClusterFuture ...
[17:42:13.305] - result already collected: FutureResult
[17:42:13.305] result() for ClusterFuture ... done
[17:42:13.305] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:13.305] result() for ClusterFuture ... done
[17:42:13.305] result() for ClusterFuture ...
[17:42:13.305] - result already collected: FutureResult
[17:42:13.306] result() for ClusterFuture ... done
[17:42:13.306] getGlobalsAndPackages() ...
[17:42:13.306] Searching for globals...
[17:42:13.307] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:42:13.307] Searching for globals ... DONE
[17:42:13.307] Resolving globals: FALSE
[17:42:13.308] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:13.308] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:13.308] - globals: [1] ‘a’
[17:42:13.308] 
[17:42:13.308] getGlobalsAndPackages() ... DONE
[17:42:13.309] run() for ‘Future’ ...
[17:42:13.309] - state: ‘created’
[17:42:13.309] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:13.323] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:13.323] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:13.323]   - Field: ‘node’
[17:42:13.323]   - Field: ‘label’
[17:42:13.324]   - Field: ‘local’
[17:42:13.324]   - Field: ‘owner’
[17:42:13.324]   - Field: ‘envir’
[17:42:13.324]   - Field: ‘workers’
[17:42:13.324]   - Field: ‘packages’
[17:42:13.324]   - Field: ‘gc’
[17:42:13.324]   - Field: ‘conditions’
[17:42:13.324]   - Field: ‘persistent’
[17:42:13.324]   - Field: ‘expr’
[17:42:13.324]   - Field: ‘uuid’
[17:42:13.324]   - Field: ‘seed’
[17:42:13.325]   - Field: ‘version’
[17:42:13.325]   - Field: ‘result’
[17:42:13.325]   - Field: ‘asynchronous’
[17:42:13.325]   - Field: ‘calls’
[17:42:13.325]   - Field: ‘globals’
[17:42:13.325]   - Field: ‘stdout’
[17:42:13.325]   - Field: ‘earlySignal’
[17:42:13.325]   - Field: ‘lazy’
[17:42:13.325]   - Field: ‘state’
[17:42:13.325] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:13.325] - Launch lazy future ...
[17:42:13.326] Packages needed by the future expression (n = 0): <none>
[17:42:13.326] Packages needed by future strategies (n = 0): <none>
[17:42:13.326] {
[17:42:13.326]     {
[17:42:13.326]         {
[17:42:13.326]             ...future.startTime <- base::Sys.time()
[17:42:13.326]             {
[17:42:13.326]                 {
[17:42:13.326]                   {
[17:42:13.326]                     {
[17:42:13.326]                       base::local({
[17:42:13.326]                         has_future <- base::requireNamespace("future", 
[17:42:13.326]                           quietly = TRUE)
[17:42:13.326]                         if (has_future) {
[17:42:13.326]                           ns <- base::getNamespace("future")
[17:42:13.326]                           version <- ns[[".package"]][["version"]]
[17:42:13.326]                           if (is.null(version)) 
[17:42:13.326]                             version <- utils::packageVersion("future")
[17:42:13.326]                         }
[17:42:13.326]                         else {
[17:42:13.326]                           version <- NULL
[17:42:13.326]                         }
[17:42:13.326]                         if (!has_future || version < "1.8.0") {
[17:42:13.326]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:13.326]                             "", base::R.version$version.string), 
[17:42:13.326]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:13.326]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:13.326]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:13.326]                               "release", "version")], collapse = " "), 
[17:42:13.326]                             hostname = base::Sys.info()[["nodename"]])
[17:42:13.326]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:13.326]                             info)
[17:42:13.326]                           info <- base::paste(info, collapse = "; ")
[17:42:13.326]                           if (!has_future) {
[17:42:13.326]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:13.326]                               info)
[17:42:13.326]                           }
[17:42:13.326]                           else {
[17:42:13.326]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:13.326]                               info, version)
[17:42:13.326]                           }
[17:42:13.326]                           base::stop(msg)
[17:42:13.326]                         }
[17:42:13.326]                       })
[17:42:13.326]                     }
[17:42:13.326]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:13.326]                     base::options(mc.cores = 1L)
[17:42:13.326]                   }
[17:42:13.326]                   options(future.plan = NULL)
[17:42:13.326]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.326]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:13.326]                 }
[17:42:13.326]                 ...future.workdir <- getwd()
[17:42:13.326]             }
[17:42:13.326]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:13.326]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:13.326]         }
[17:42:13.326]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:13.326]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:13.326]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:13.326]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:13.326]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:13.326]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:13.326]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:13.326]             base::names(...future.oldOptions))
[17:42:13.326]     }
[17:42:13.326]     if (FALSE) {
[17:42:13.326]     }
[17:42:13.326]     else {
[17:42:13.326]         if (TRUE) {
[17:42:13.326]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:13.326]                 open = "w")
[17:42:13.326]         }
[17:42:13.326]         else {
[17:42:13.326]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:13.326]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:13.326]         }
[17:42:13.326]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:13.326]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:13.326]             base::sink(type = "output", split = FALSE)
[17:42:13.326]             base::close(...future.stdout)
[17:42:13.326]         }, add = TRUE)
[17:42:13.326]     }
[17:42:13.326]     ...future.frame <- base::sys.nframe()
[17:42:13.326]     ...future.conditions <- base::list()
[17:42:13.326]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:13.326]     if (FALSE) {
[17:42:13.326]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:13.326]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:13.326]     }
[17:42:13.326]     ...future.result <- base::tryCatch({
[17:42:13.326]         base::withCallingHandlers({
[17:42:13.326]             ...future.value <- base::withVisible(base::local({
[17:42:13.326]                 ...future.makeSendCondition <- local({
[17:42:13.326]                   sendCondition <- NULL
[17:42:13.326]                   function(frame = 1L) {
[17:42:13.326]                     if (is.function(sendCondition)) 
[17:42:13.326]                       return(sendCondition)
[17:42:13.326]                     ns <- getNamespace("parallel")
[17:42:13.326]                     if (exists("sendData", mode = "function", 
[17:42:13.326]                       envir = ns)) {
[17:42:13.326]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:13.326]                         envir = ns)
[17:42:13.326]                       envir <- sys.frame(frame)
[17:42:13.326]                       master <- NULL
[17:42:13.326]                       while (!identical(envir, .GlobalEnv) && 
[17:42:13.326]                         !identical(envir, emptyenv())) {
[17:42:13.326]                         if (exists("master", mode = "list", envir = envir, 
[17:42:13.326]                           inherits = FALSE)) {
[17:42:13.326]                           master <- get("master", mode = "list", 
[17:42:13.326]                             envir = envir, inherits = FALSE)
[17:42:13.326]                           if (inherits(master, c("SOCKnode", 
[17:42:13.326]                             "SOCK0node"))) {
[17:42:13.326]                             sendCondition <<- function(cond) {
[17:42:13.326]                               data <- list(type = "VALUE", value = cond, 
[17:42:13.326]                                 success = TRUE)
[17:42:13.326]                               parallel_sendData(master, data)
[17:42:13.326]                             }
[17:42:13.326]                             return(sendCondition)
[17:42:13.326]                           }
[17:42:13.326]                         }
[17:42:13.326]                         frame <- frame + 1L
[17:42:13.326]                         envir <- sys.frame(frame)
[17:42:13.326]                       }
[17:42:13.326]                     }
[17:42:13.326]                     sendCondition <<- function(cond) NULL
[17:42:13.326]                   }
[17:42:13.326]                 })
[17:42:13.326]                 withCallingHandlers({
[17:42:13.326]                   {
[17:42:13.326]                     2 * a
[17:42:13.326]                   }
[17:42:13.326]                 }, immediateCondition = function(cond) {
[17:42:13.326]                   sendCondition <- ...future.makeSendCondition()
[17:42:13.326]                   sendCondition(cond)
[17:42:13.326]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.326]                   {
[17:42:13.326]                     inherits <- base::inherits
[17:42:13.326]                     invokeRestart <- base::invokeRestart
[17:42:13.326]                     is.null <- base::is.null
[17:42:13.326]                     muffled <- FALSE
[17:42:13.326]                     if (inherits(cond, "message")) {
[17:42:13.326]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:13.326]                       if (muffled) 
[17:42:13.326]                         invokeRestart("muffleMessage")
[17:42:13.326]                     }
[17:42:13.326]                     else if (inherits(cond, "warning")) {
[17:42:13.326]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:13.326]                       if (muffled) 
[17:42:13.326]                         invokeRestart("muffleWarning")
[17:42:13.326]                     }
[17:42:13.326]                     else if (inherits(cond, "condition")) {
[17:42:13.326]                       if (!is.null(pattern)) {
[17:42:13.326]                         computeRestarts <- base::computeRestarts
[17:42:13.326]                         grepl <- base::grepl
[17:42:13.326]                         restarts <- computeRestarts(cond)
[17:42:13.326]                         for (restart in restarts) {
[17:42:13.326]                           name <- restart$name
[17:42:13.326]                           if (is.null(name)) 
[17:42:13.326]                             next
[17:42:13.326]                           if (!grepl(pattern, name)) 
[17:42:13.326]                             next
[17:42:13.326]                           invokeRestart(restart)
[17:42:13.326]                           muffled <- TRUE
[17:42:13.326]                           break
[17:42:13.326]                         }
[17:42:13.326]                       }
[17:42:13.326]                     }
[17:42:13.326]                     invisible(muffled)
[17:42:13.326]                   }
[17:42:13.326]                   muffleCondition(cond)
[17:42:13.326]                 })
[17:42:13.326]             }))
[17:42:13.326]             future::FutureResult(value = ...future.value$value, 
[17:42:13.326]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.326]                   ...future.rng), globalenv = if (FALSE) 
[17:42:13.326]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:13.326]                     ...future.globalenv.names))
[17:42:13.326]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:13.326]         }, condition = base::local({
[17:42:13.326]             c <- base::c
[17:42:13.326]             inherits <- base::inherits
[17:42:13.326]             invokeRestart <- base::invokeRestart
[17:42:13.326]             length <- base::length
[17:42:13.326]             list <- base::list
[17:42:13.326]             seq.int <- base::seq.int
[17:42:13.326]             signalCondition <- base::signalCondition
[17:42:13.326]             sys.calls <- base::sys.calls
[17:42:13.326]             `[[` <- base::`[[`
[17:42:13.326]             `+` <- base::`+`
[17:42:13.326]             `<<-` <- base::`<<-`
[17:42:13.326]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:13.326]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:13.326]                   3L)]
[17:42:13.326]             }
[17:42:13.326]             function(cond) {
[17:42:13.326]                 is_error <- inherits(cond, "error")
[17:42:13.326]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:13.326]                   NULL)
[17:42:13.326]                 if (is_error) {
[17:42:13.326]                   sessionInformation <- function() {
[17:42:13.326]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:13.326]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:13.326]                       search = base::search(), system = base::Sys.info())
[17:42:13.326]                   }
[17:42:13.326]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.326]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:13.326]                     cond$call), session = sessionInformation(), 
[17:42:13.326]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:13.326]                   signalCondition(cond)
[17:42:13.326]                 }
[17:42:13.326]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:13.326]                 "immediateCondition"))) {
[17:42:13.326]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:13.326]                   ...future.conditions[[length(...future.conditions) + 
[17:42:13.326]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:13.326]                   if (TRUE && !signal) {
[17:42:13.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.326]                     {
[17:42:13.326]                       inherits <- base::inherits
[17:42:13.326]                       invokeRestart <- base::invokeRestart
[17:42:13.326]                       is.null <- base::is.null
[17:42:13.326]                       muffled <- FALSE
[17:42:13.326]                       if (inherits(cond, "message")) {
[17:42:13.326]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.326]                         if (muffled) 
[17:42:13.326]                           invokeRestart("muffleMessage")
[17:42:13.326]                       }
[17:42:13.326]                       else if (inherits(cond, "warning")) {
[17:42:13.326]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.326]                         if (muffled) 
[17:42:13.326]                           invokeRestart("muffleWarning")
[17:42:13.326]                       }
[17:42:13.326]                       else if (inherits(cond, "condition")) {
[17:42:13.326]                         if (!is.null(pattern)) {
[17:42:13.326]                           computeRestarts <- base::computeRestarts
[17:42:13.326]                           grepl <- base::grepl
[17:42:13.326]                           restarts <- computeRestarts(cond)
[17:42:13.326]                           for (restart in restarts) {
[17:42:13.326]                             name <- restart$name
[17:42:13.326]                             if (is.null(name)) 
[17:42:13.326]                               next
[17:42:13.326]                             if (!grepl(pattern, name)) 
[17:42:13.326]                               next
[17:42:13.326]                             invokeRestart(restart)
[17:42:13.326]                             muffled <- TRUE
[17:42:13.326]                             break
[17:42:13.326]                           }
[17:42:13.326]                         }
[17:42:13.326]                       }
[17:42:13.326]                       invisible(muffled)
[17:42:13.326]                     }
[17:42:13.326]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.326]                   }
[17:42:13.326]                 }
[17:42:13.326]                 else {
[17:42:13.326]                   if (TRUE) {
[17:42:13.326]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:13.326]                     {
[17:42:13.326]                       inherits <- base::inherits
[17:42:13.326]                       invokeRestart <- base::invokeRestart
[17:42:13.326]                       is.null <- base::is.null
[17:42:13.326]                       muffled <- FALSE
[17:42:13.326]                       if (inherits(cond, "message")) {
[17:42:13.326]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:13.326]                         if (muffled) 
[17:42:13.326]                           invokeRestart("muffleMessage")
[17:42:13.326]                       }
[17:42:13.326]                       else if (inherits(cond, "warning")) {
[17:42:13.326]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:13.326]                         if (muffled) 
[17:42:13.326]                           invokeRestart("muffleWarning")
[17:42:13.326]                       }
[17:42:13.326]                       else if (inherits(cond, "condition")) {
[17:42:13.326]                         if (!is.null(pattern)) {
[17:42:13.326]                           computeRestarts <- base::computeRestarts
[17:42:13.326]                           grepl <- base::grepl
[17:42:13.326]                           restarts <- computeRestarts(cond)
[17:42:13.326]                           for (restart in restarts) {
[17:42:13.326]                             name <- restart$name
[17:42:13.326]                             if (is.null(name)) 
[17:42:13.326]                               next
[17:42:13.326]                             if (!grepl(pattern, name)) 
[17:42:13.326]                               next
[17:42:13.326]                             invokeRestart(restart)
[17:42:13.326]                             muffled <- TRUE
[17:42:13.326]                             break
[17:42:13.326]                           }
[17:42:13.326]                         }
[17:42:13.326]                       }
[17:42:13.326]                       invisible(muffled)
[17:42:13.326]                     }
[17:42:13.326]                     muffleCondition(cond, pattern = "^muffle")
[17:42:13.326]                   }
[17:42:13.326]                 }
[17:42:13.326]             }
[17:42:13.326]         }))
[17:42:13.326]     }, error = function(ex) {
[17:42:13.326]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:13.326]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:13.326]                 ...future.rng), started = ...future.startTime, 
[17:42:13.326]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:13.326]             version = "1.8"), class = "FutureResult")
[17:42:13.326]     }, finally = {
[17:42:13.326]         if (!identical(...future.workdir, getwd())) 
[17:42:13.326]             setwd(...future.workdir)
[17:42:13.326]         {
[17:42:13.326]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:13.326]                 ...future.oldOptions$nwarnings <- NULL
[17:42:13.326]             }
[17:42:13.326]             base::options(...future.oldOptions)
[17:42:13.326]             if (.Platform$OS.type == "windows") {
[17:42:13.326]                 old_names <- names(...future.oldEnvVars)
[17:42:13.326]                 envs <- base::Sys.getenv()
[17:42:13.326]                 names <- names(envs)
[17:42:13.326]                 common <- intersect(names, old_names)
[17:42:13.326]                 added <- setdiff(names, old_names)
[17:42:13.326]                 removed <- setdiff(old_names, names)
[17:42:13.326]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:13.326]                   envs[common]]
[17:42:13.326]                 NAMES <- toupper(changed)
[17:42:13.326]                 args <- list()
[17:42:13.326]                 for (kk in seq_along(NAMES)) {
[17:42:13.326]                   name <- changed[[kk]]
[17:42:13.326]                   NAME <- NAMES[[kk]]
[17:42:13.326]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.326]                     next
[17:42:13.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.326]                 }
[17:42:13.326]                 NAMES <- toupper(added)
[17:42:13.326]                 for (kk in seq_along(NAMES)) {
[17:42:13.326]                   name <- added[[kk]]
[17:42:13.326]                   NAME <- NAMES[[kk]]
[17:42:13.326]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.326]                     next
[17:42:13.326]                   args[[name]] <- ""
[17:42:13.326]                 }
[17:42:13.326]                 NAMES <- toupper(removed)
[17:42:13.326]                 for (kk in seq_along(NAMES)) {
[17:42:13.326]                   name <- removed[[kk]]
[17:42:13.326]                   NAME <- NAMES[[kk]]
[17:42:13.326]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:13.326]                     next
[17:42:13.326]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:13.326]                 }
[17:42:13.326]                 if (length(args) > 0) 
[17:42:13.326]                   base::do.call(base::Sys.setenv, args = args)
[17:42:13.326]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:13.326]             }
[17:42:13.326]             else {
[17:42:13.326]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:13.326]             }
[17:42:13.326]             {
[17:42:13.326]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:13.326]                   0L) {
[17:42:13.326]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:13.326]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:13.326]                   base::options(opts)
[17:42:13.326]                 }
[17:42:13.326]                 {
[17:42:13.326]                   {
[17:42:13.326]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:13.326]                     NULL
[17:42:13.326]                   }
[17:42:13.326]                   options(future.plan = NULL)
[17:42:13.326]                   if (is.na(NA_character_)) 
[17:42:13.326]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:13.326]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:13.326]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:13.326]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:13.326]                     envir = parent.frame()) 
[17:42:13.326]                   {
[17:42:13.326]                     if (is.function(workers)) 
[17:42:13.326]                       workers <- workers()
[17:42:13.326]                     workers <- structure(as.integer(workers), 
[17:42:13.326]                       class = class(workers))
[17:42:13.326]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:13.326]                       workers >= 1)
[17:42:13.326]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:13.326]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:13.326]                     }
[17:42:13.326]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:13.326]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:13.326]                       envir = envir)
[17:42:13.326]                     if (!future$lazy) 
[17:42:13.326]                       future <- run(future)
[17:42:13.326]                     invisible(future)
[17:42:13.326]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:13.326]                 }
[17:42:13.326]             }
[17:42:13.326]         }
[17:42:13.326]     })
[17:42:13.326]     if (TRUE) {
[17:42:13.326]         base::sink(type = "output", split = FALSE)
[17:42:13.326]         if (TRUE) {
[17:42:13.326]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:13.326]         }
[17:42:13.326]         else {
[17:42:13.326]             ...future.result["stdout"] <- base::list(NULL)
[17:42:13.326]         }
[17:42:13.326]         base::close(...future.stdout)
[17:42:13.326]         ...future.stdout <- NULL
[17:42:13.326]     }
[17:42:13.326]     ...future.result$conditions <- ...future.conditions
[17:42:13.326]     ...future.result$finished <- base::Sys.time()
[17:42:13.326]     ...future.result
[17:42:13.326] }
[17:42:13.329] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:13.329] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:42:13.330] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:42:13.330] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:13.330] MultisessionFuture started
[17:42:13.330] - Launch lazy future ... done
[17:42:13.331] run() for ‘MultisessionFuture’ ... done
[17:42:13.331] result() for ClusterFuture ...
[17:42:13.331] receiveMessageFromWorker() for ClusterFuture ...
[17:42:13.331] - Validating connection of MultisessionFuture
[17:42:13.376] - received message: FutureResult
[17:42:13.376] - Received FutureResult
[17:42:13.376] - Erased future from FutureRegistry
[17:42:13.377] result() for ClusterFuture ...
[17:42:13.377] - result already collected: FutureResult
[17:42:13.377] result() for ClusterFuture ... done
[17:42:13.377] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:13.377] result() for ClusterFuture ... done
[17:42:13.377] result() for ClusterFuture ...
[17:42:13.377] - result already collected: FutureResult
[17:42:13.377] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[17:42:13.378] plan(): Setting new future strategy stack:
[17:42:13.378] List of future strategies:
[17:42:13.378] 1. FutureStrategy:
[17:42:13.378]    - args: function (..., envir = parent.frame())
[17:42:13.378]    - tweaked: FALSE
[17:42:13.378]    - call: future::plan(oplan)
[17:42:13.379] plan(): nbrOfWorkers() = 1
> 
