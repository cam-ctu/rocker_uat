
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:16.697] plan(): Setting new future strategy stack:
[16:12:16.697] List of future strategies:
[16:12:16.697] 1. sequential:
[16:12:16.697]    - args: function (..., envir = parent.frame())
[16:12:16.697]    - tweaked: FALSE
[16:12:16.697]    - call: future::plan("sequential")
[16:12:16.711] plan(): nbrOfWorkers() = 1
> 
> message("*** %<-% ...")
*** %<-% ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** %%<-%% with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     rm(list = intersect(c("x", "y"), ls()))
+ 
+     message("** Future evaluation without globals")
+     v1 %<-% { x <- 1 }
+     stopifnot(!exists("x", inherits = FALSE), identical(v1, 1))
+ 
+     message("** Future evaluation with globals")
+     a <- 2
+     v2 %<-% { x <- a }
+     stopifnot(!exists("x", inherits = FALSE), identical(v2, a))
+ 
+     message("** Future evaluation with errors")
+     v3 %<-% {
+       x <- 3
+       stop("Woops!")
+       x
+     }
+     stopifnot(!exists("x", inherits = FALSE))
+     res <- tryCatch(identical(v3, 3), error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     y <- listenv::listenv()
+     for (ii in 1:3) {
+       y[[ii]] %<-% {
+         if (ii %% 2 == 0) stop("Woops!")
+         ii
+       }
+     }
+     res <- tryCatch(as.list(y), error = identity)
+     stopifnot(inherits(res, "error"))
+     z <- y[c(1, 3)]
+     z <- unlist(z)
+     stopifnot(all(z == c(1, 3)))
+     res <- tryCatch(y[[2]], error = identity)
+     stopifnot(inherits(res, "error"))
+     res <- tryCatch(y[1:2], error = identity)
+     stopifnot(inherits(res, "error"))
+ 
+ 
+     message("** Future evaluation with a poor-man's \"progress bar\"")
+     v4 %<-% {
+       cat("Processing: ")
+       for (ii in 1:10) { cat(".") }
+       cat(" [100%]\n")
+       4
+     }
+ 
+ 
+     message("** Collecting results")
+     printf("v1 = %s\n", v1)
+     stopifnot(v1 == 1)
+ 
+     printf("v2 = %s\n", v2)
+     stopifnot(v2 == a)
+ 
+     stopifnot(tryCatch({
+       printf("v3 = %s\n", v3)
+     }, error = function(ex) {
+       printf("v3: <%s> (as expect)\n", class(ex)[1])
+       TRUE
+     }))
+ 
+     printf("v4 = %s\n", v4)
+     #stopifnot(v4 == 4)
+ 
+ 
+     message("** Left-to-right and right-to-left future assignments")
+     c %<-% 1
+     printf("c = %s\n", c)
+     1 %->% d
+     printf("d = %s\n", d)
+     stopifnot(d == c)
+ 
+ 
+ 
+     message("** Nested future assignments")
+     a %<-% {
+       b <- 1
+       c %<-% 2
+       3 -> d
+       4 %->% e
+       b + c + d + e
+     }
+     printf("a = %s\n", a)
+     stopifnot(a == 10)
+ 
+     { a + 1 } %->% b
+     printf("b = %s\n", b)
+     stopifnot(b == a + 1)
+ 
+     message(sprintf("*** %%<-%% with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** %<-% with ‘sequential’ futures ...
[16:12:16.766] plan(): Setting new future strategy stack:
[16:12:16.766] List of future strategies:
[16:12:16.766] 1. sequential:
[16:12:16.766]    - args: function (..., envir = parent.frame())
[16:12:16.766]    - tweaked: FALSE
[16:12:16.766]    - call: plan(strategy)
[16:12:16.776] plan(): nbrOfWorkers() = 1
** Future evaluation without globals
[16:12:16.778] getGlobalsAndPackages() ...
[16:12:16.778] Searching for globals...
[16:12:16.782] - globals found: [2] ‘{’, ‘<-’
[16:12:16.783] Searching for globals ... DONE
[16:12:16.783] Resolving globals: FALSE
[16:12:16.783] 
[16:12:16.783] 
[16:12:16.783] getGlobalsAndPackages() ... DONE
[16:12:16.784] run() for ‘Future’ ...
[16:12:16.784] - state: ‘created’
[16:12:16.784] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.785] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.785] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.785]   - Field: ‘label’
[16:12:16.785]   - Field: ‘local’
[16:12:16.785]   - Field: ‘owner’
[16:12:16.785]   - Field: ‘envir’
[16:12:16.785]   - Field: ‘packages’
[16:12:16.785]   - Field: ‘gc’
[16:12:16.786]   - Field: ‘conditions’
[16:12:16.786]   - Field: ‘expr’
[16:12:16.786]   - Field: ‘uuid’
[16:12:16.786]   - Field: ‘seed’
[16:12:16.786]   - Field: ‘version’
[16:12:16.786]   - Field: ‘result’
[16:12:16.786]   - Field: ‘asynchronous’
[16:12:16.786]   - Field: ‘calls’
[16:12:16.786]   - Field: ‘globals’
[16:12:16.786]   - Field: ‘stdout’
[16:12:16.786]   - Field: ‘earlySignal’
[16:12:16.787]   - Field: ‘lazy’
[16:12:16.787]   - Field: ‘state’
[16:12:16.787] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.787] - Launch lazy future ...
[16:12:16.788] Packages needed by the future expression (n = 0): <none>
[16:12:16.788] Packages needed by future strategies (n = 0): <none>
[16:12:16.788] {
[16:12:16.788]     {
[16:12:16.788]         {
[16:12:16.788]             ...future.startTime <- base::Sys.time()
[16:12:16.788]             {
[16:12:16.788]                 {
[16:12:16.788]                   {
[16:12:16.788]                     base::local({
[16:12:16.788]                       has_future <- base::requireNamespace("future", 
[16:12:16.788]                         quietly = TRUE)
[16:12:16.788]                       if (has_future) {
[16:12:16.788]                         ns <- base::getNamespace("future")
[16:12:16.788]                         version <- ns[[".package"]][["version"]]
[16:12:16.788]                         if (is.null(version)) 
[16:12:16.788]                           version <- utils::packageVersion("future")
[16:12:16.788]                       }
[16:12:16.788]                       else {
[16:12:16.788]                         version <- NULL
[16:12:16.788]                       }
[16:12:16.788]                       if (!has_future || version < "1.8.0") {
[16:12:16.788]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.788]                           "", base::R.version$version.string), 
[16:12:16.788]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.788]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.788]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.788]                             "release", "version")], collapse = " "), 
[16:12:16.788]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.788]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.788]                           info)
[16:12:16.788]                         info <- base::paste(info, collapse = "; ")
[16:12:16.788]                         if (!has_future) {
[16:12:16.788]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.788]                             info)
[16:12:16.788]                         }
[16:12:16.788]                         else {
[16:12:16.788]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.788]                             info, version)
[16:12:16.788]                         }
[16:12:16.788]                         base::stop(msg)
[16:12:16.788]                       }
[16:12:16.788]                     })
[16:12:16.788]                   }
[16:12:16.788]                   options(future.plan = NULL)
[16:12:16.788]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.788]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.788]                 }
[16:12:16.788]                 ...future.workdir <- getwd()
[16:12:16.788]             }
[16:12:16.788]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.788]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.788]         }
[16:12:16.788]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.788]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.788]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.788]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.788]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.788]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.788]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.788]             base::names(...future.oldOptions))
[16:12:16.788]     }
[16:12:16.788]     if (FALSE) {
[16:12:16.788]     }
[16:12:16.788]     else {
[16:12:16.788]         if (TRUE) {
[16:12:16.788]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.788]                 open = "w")
[16:12:16.788]         }
[16:12:16.788]         else {
[16:12:16.788]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.788]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.788]         }
[16:12:16.788]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.788]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.788]             base::sink(type = "output", split = FALSE)
[16:12:16.788]             base::close(...future.stdout)
[16:12:16.788]         }, add = TRUE)
[16:12:16.788]     }
[16:12:16.788]     ...future.frame <- base::sys.nframe()
[16:12:16.788]     ...future.conditions <- base::list()
[16:12:16.788]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.788]     if (FALSE) {
[16:12:16.788]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.788]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.788]     }
[16:12:16.788]     ...future.result <- base::tryCatch({
[16:12:16.788]         base::withCallingHandlers({
[16:12:16.788]             ...future.value <- base::withVisible(base::local({
[16:12:16.788]                 x <- 1
[16:12:16.788]             }))
[16:12:16.788]             future::FutureResult(value = ...future.value$value, 
[16:12:16.788]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.788]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.788]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.788]                     ...future.globalenv.names))
[16:12:16.788]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.788]         }, condition = base::local({
[16:12:16.788]             c <- base::c
[16:12:16.788]             inherits <- base::inherits
[16:12:16.788]             invokeRestart <- base::invokeRestart
[16:12:16.788]             length <- base::length
[16:12:16.788]             list <- base::list
[16:12:16.788]             seq.int <- base::seq.int
[16:12:16.788]             signalCondition <- base::signalCondition
[16:12:16.788]             sys.calls <- base::sys.calls
[16:12:16.788]             `[[` <- base::`[[`
[16:12:16.788]             `+` <- base::`+`
[16:12:16.788]             `<<-` <- base::`<<-`
[16:12:16.788]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.788]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.788]                   3L)]
[16:12:16.788]             }
[16:12:16.788]             function(cond) {
[16:12:16.788]                 is_error <- inherits(cond, "error")
[16:12:16.788]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.788]                   NULL)
[16:12:16.788]                 if (is_error) {
[16:12:16.788]                   sessionInformation <- function() {
[16:12:16.788]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.788]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.788]                       search = base::search(), system = base::Sys.info())
[16:12:16.788]                   }
[16:12:16.788]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.788]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.788]                     cond$call), session = sessionInformation(), 
[16:12:16.788]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.788]                   signalCondition(cond)
[16:12:16.788]                 }
[16:12:16.788]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.788]                 "immediateCondition"))) {
[16:12:16.788]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.788]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.788]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.788]                   if (TRUE && !signal) {
[16:12:16.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.788]                     {
[16:12:16.788]                       inherits <- base::inherits
[16:12:16.788]                       invokeRestart <- base::invokeRestart
[16:12:16.788]                       is.null <- base::is.null
[16:12:16.788]                       muffled <- FALSE
[16:12:16.788]                       if (inherits(cond, "message")) {
[16:12:16.788]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.788]                         if (muffled) 
[16:12:16.788]                           invokeRestart("muffleMessage")
[16:12:16.788]                       }
[16:12:16.788]                       else if (inherits(cond, "warning")) {
[16:12:16.788]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.788]                         if (muffled) 
[16:12:16.788]                           invokeRestart("muffleWarning")
[16:12:16.788]                       }
[16:12:16.788]                       else if (inherits(cond, "condition")) {
[16:12:16.788]                         if (!is.null(pattern)) {
[16:12:16.788]                           computeRestarts <- base::computeRestarts
[16:12:16.788]                           grepl <- base::grepl
[16:12:16.788]                           restarts <- computeRestarts(cond)
[16:12:16.788]                           for (restart in restarts) {
[16:12:16.788]                             name <- restart$name
[16:12:16.788]                             if (is.null(name)) 
[16:12:16.788]                               next
[16:12:16.788]                             if (!grepl(pattern, name)) 
[16:12:16.788]                               next
[16:12:16.788]                             invokeRestart(restart)
[16:12:16.788]                             muffled <- TRUE
[16:12:16.788]                             break
[16:12:16.788]                           }
[16:12:16.788]                         }
[16:12:16.788]                       }
[16:12:16.788]                       invisible(muffled)
[16:12:16.788]                     }
[16:12:16.788]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.788]                   }
[16:12:16.788]                 }
[16:12:16.788]                 else {
[16:12:16.788]                   if (TRUE) {
[16:12:16.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.788]                     {
[16:12:16.788]                       inherits <- base::inherits
[16:12:16.788]                       invokeRestart <- base::invokeRestart
[16:12:16.788]                       is.null <- base::is.null
[16:12:16.788]                       muffled <- FALSE
[16:12:16.788]                       if (inherits(cond, "message")) {
[16:12:16.788]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.788]                         if (muffled) 
[16:12:16.788]                           invokeRestart("muffleMessage")
[16:12:16.788]                       }
[16:12:16.788]                       else if (inherits(cond, "warning")) {
[16:12:16.788]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.788]                         if (muffled) 
[16:12:16.788]                           invokeRestart("muffleWarning")
[16:12:16.788]                       }
[16:12:16.788]                       else if (inherits(cond, "condition")) {
[16:12:16.788]                         if (!is.null(pattern)) {
[16:12:16.788]                           computeRestarts <- base::computeRestarts
[16:12:16.788]                           grepl <- base::grepl
[16:12:16.788]                           restarts <- computeRestarts(cond)
[16:12:16.788]                           for (restart in restarts) {
[16:12:16.788]                             name <- restart$name
[16:12:16.788]                             if (is.null(name)) 
[16:12:16.788]                               next
[16:12:16.788]                             if (!grepl(pattern, name)) 
[16:12:16.788]                               next
[16:12:16.788]                             invokeRestart(restart)
[16:12:16.788]                             muffled <- TRUE
[16:12:16.788]                             break
[16:12:16.788]                           }
[16:12:16.788]                         }
[16:12:16.788]                       }
[16:12:16.788]                       invisible(muffled)
[16:12:16.788]                     }
[16:12:16.788]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.788]                   }
[16:12:16.788]                 }
[16:12:16.788]             }
[16:12:16.788]         }))
[16:12:16.788]     }, error = function(ex) {
[16:12:16.788]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.788]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.788]                 ...future.rng), started = ...future.startTime, 
[16:12:16.788]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.788]             version = "1.8"), class = "FutureResult")
[16:12:16.788]     }, finally = {
[16:12:16.788]         if (!identical(...future.workdir, getwd())) 
[16:12:16.788]             setwd(...future.workdir)
[16:12:16.788]         {
[16:12:16.788]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.788]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.788]             }
[16:12:16.788]             base::options(...future.oldOptions)
[16:12:16.788]             if (.Platform$OS.type == "windows") {
[16:12:16.788]                 old_names <- names(...future.oldEnvVars)
[16:12:16.788]                 envs <- base::Sys.getenv()
[16:12:16.788]                 names <- names(envs)
[16:12:16.788]                 common <- intersect(names, old_names)
[16:12:16.788]                 added <- setdiff(names, old_names)
[16:12:16.788]                 removed <- setdiff(old_names, names)
[16:12:16.788]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.788]                   envs[common]]
[16:12:16.788]                 NAMES <- toupper(changed)
[16:12:16.788]                 args <- list()
[16:12:16.788]                 for (kk in seq_along(NAMES)) {
[16:12:16.788]                   name <- changed[[kk]]
[16:12:16.788]                   NAME <- NAMES[[kk]]
[16:12:16.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.788]                     next
[16:12:16.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.788]                 }
[16:12:16.788]                 NAMES <- toupper(added)
[16:12:16.788]                 for (kk in seq_along(NAMES)) {
[16:12:16.788]                   name <- added[[kk]]
[16:12:16.788]                   NAME <- NAMES[[kk]]
[16:12:16.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.788]                     next
[16:12:16.788]                   args[[name]] <- ""
[16:12:16.788]                 }
[16:12:16.788]                 NAMES <- toupper(removed)
[16:12:16.788]                 for (kk in seq_along(NAMES)) {
[16:12:16.788]                   name <- removed[[kk]]
[16:12:16.788]                   NAME <- NAMES[[kk]]
[16:12:16.788]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.788]                     next
[16:12:16.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.788]                 }
[16:12:16.788]                 if (length(args) > 0) 
[16:12:16.788]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.788]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.788]             }
[16:12:16.788]             else {
[16:12:16.788]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.788]             }
[16:12:16.788]             {
[16:12:16.788]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.788]                   0L) {
[16:12:16.788]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.788]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.788]                   base::options(opts)
[16:12:16.788]                 }
[16:12:16.788]                 {
[16:12:16.788]                   {
[16:12:16.788]                     NULL
[16:12:16.788]                     RNGkind("Mersenne-Twister")
[16:12:16.788]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.788]                       inherits = FALSE)
[16:12:16.788]                   }
[16:12:16.788]                   options(future.plan = NULL)
[16:12:16.788]                   if (is.na(NA_character_)) 
[16:12:16.788]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.788]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.788]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.788]                   {
[16:12:16.788]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.788]                     if (!future$lazy) 
[16:12:16.788]                       future <- run(future)
[16:12:16.788]                     invisible(future)
[16:12:16.788]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.788]                 }
[16:12:16.788]             }
[16:12:16.788]         }
[16:12:16.788]     })
[16:12:16.788]     if (TRUE) {
[16:12:16.788]         base::sink(type = "output", split = FALSE)
[16:12:16.788]         if (TRUE) {
[16:12:16.788]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.788]         }
[16:12:16.788]         else {
[16:12:16.788]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.788]         }
[16:12:16.788]         base::close(...future.stdout)
[16:12:16.788]         ...future.stdout <- NULL
[16:12:16.788]     }
[16:12:16.788]     ...future.result$conditions <- ...future.conditions
[16:12:16.788]     ...future.result$finished <- base::Sys.time()
[16:12:16.788]     ...future.result
[16:12:16.788] }
[16:12:16.790] plan(): Setting new future strategy stack:
[16:12:16.791] List of future strategies:
[16:12:16.791] 1. sequential:
[16:12:16.791]    - args: function (..., envir = parent.frame())
[16:12:16.791]    - tweaked: FALSE
[16:12:16.791]    - call: NULL
[16:12:16.791] plan(): nbrOfWorkers() = 1
[16:12:16.792] plan(): Setting new future strategy stack:
[16:12:16.792] List of future strategies:
[16:12:16.792] 1. sequential:
[16:12:16.792]    - args: function (..., envir = parent.frame())
[16:12:16.792]    - tweaked: FALSE
[16:12:16.792]    - call: plan(strategy)
[16:12:16.792] plan(): nbrOfWorkers() = 1
[16:12:16.793] SequentialFuture started (and completed)
[16:12:16.793] - Launch lazy future ... done
[16:12:16.793] run() for ‘SequentialFuture’ ... done
** Future evaluation with globals
[16:12:16.794] getGlobalsAndPackages() ...
[16:12:16.794] Searching for globals...
[16:12:16.795] - globals found: [3] ‘{’, ‘<-’, ‘a’
[16:12:16.795] Searching for globals ... DONE
[16:12:16.795] Resolving globals: FALSE
[16:12:16.797] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:16.798] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:12:16.798] - globals: [1] ‘a’
[16:12:16.798] 
[16:12:16.798] getGlobalsAndPackages() ... DONE
[16:12:16.798] run() for ‘Future’ ...
[16:12:16.798] - state: ‘created’
[16:12:16.798] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.799] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.799] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.799]   - Field: ‘label’
[16:12:16.799]   - Field: ‘local’
[16:12:16.799]   - Field: ‘owner’
[16:12:16.799]   - Field: ‘envir’
[16:12:16.799]   - Field: ‘packages’
[16:12:16.799]   - Field: ‘gc’
[16:12:16.799]   - Field: ‘conditions’
[16:12:16.800]   - Field: ‘expr’
[16:12:16.800]   - Field: ‘uuid’
[16:12:16.800]   - Field: ‘seed’
[16:12:16.800]   - Field: ‘version’
[16:12:16.800]   - Field: ‘result’
[16:12:16.800]   - Field: ‘asynchronous’
[16:12:16.800]   - Field: ‘calls’
[16:12:16.800]   - Field: ‘globals’
[16:12:16.800]   - Field: ‘stdout’
[16:12:16.800]   - Field: ‘earlySignal’
[16:12:16.800]   - Field: ‘lazy’
[16:12:16.801]   - Field: ‘state’
[16:12:16.801] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.801] - Launch lazy future ...
[16:12:16.801] Packages needed by the future expression (n = 0): <none>
[16:12:16.801] Packages needed by future strategies (n = 0): <none>
[16:12:16.801] {
[16:12:16.801]     {
[16:12:16.801]         {
[16:12:16.801]             ...future.startTime <- base::Sys.time()
[16:12:16.801]             {
[16:12:16.801]                 {
[16:12:16.801]                   {
[16:12:16.801]                     base::local({
[16:12:16.801]                       has_future <- base::requireNamespace("future", 
[16:12:16.801]                         quietly = TRUE)
[16:12:16.801]                       if (has_future) {
[16:12:16.801]                         ns <- base::getNamespace("future")
[16:12:16.801]                         version <- ns[[".package"]][["version"]]
[16:12:16.801]                         if (is.null(version)) 
[16:12:16.801]                           version <- utils::packageVersion("future")
[16:12:16.801]                       }
[16:12:16.801]                       else {
[16:12:16.801]                         version <- NULL
[16:12:16.801]                       }
[16:12:16.801]                       if (!has_future || version < "1.8.0") {
[16:12:16.801]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.801]                           "", base::R.version$version.string), 
[16:12:16.801]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.801]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.801]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.801]                             "release", "version")], collapse = " "), 
[16:12:16.801]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.801]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.801]                           info)
[16:12:16.801]                         info <- base::paste(info, collapse = "; ")
[16:12:16.801]                         if (!has_future) {
[16:12:16.801]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.801]                             info)
[16:12:16.801]                         }
[16:12:16.801]                         else {
[16:12:16.801]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.801]                             info, version)
[16:12:16.801]                         }
[16:12:16.801]                         base::stop(msg)
[16:12:16.801]                       }
[16:12:16.801]                     })
[16:12:16.801]                   }
[16:12:16.801]                   options(future.plan = NULL)
[16:12:16.801]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.801]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.801]                 }
[16:12:16.801]                 ...future.workdir <- getwd()
[16:12:16.801]             }
[16:12:16.801]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.801]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.801]         }
[16:12:16.801]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.801]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.801]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.801]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.801]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.801]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.801]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.801]             base::names(...future.oldOptions))
[16:12:16.801]     }
[16:12:16.801]     if (FALSE) {
[16:12:16.801]     }
[16:12:16.801]     else {
[16:12:16.801]         if (TRUE) {
[16:12:16.801]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.801]                 open = "w")
[16:12:16.801]         }
[16:12:16.801]         else {
[16:12:16.801]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.801]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.801]         }
[16:12:16.801]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.801]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.801]             base::sink(type = "output", split = FALSE)
[16:12:16.801]             base::close(...future.stdout)
[16:12:16.801]         }, add = TRUE)
[16:12:16.801]     }
[16:12:16.801]     ...future.frame <- base::sys.nframe()
[16:12:16.801]     ...future.conditions <- base::list()
[16:12:16.801]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.801]     if (FALSE) {
[16:12:16.801]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.801]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.801]     }
[16:12:16.801]     ...future.result <- base::tryCatch({
[16:12:16.801]         base::withCallingHandlers({
[16:12:16.801]             ...future.value <- base::withVisible(base::local({
[16:12:16.801]                 x <- a
[16:12:16.801]             }))
[16:12:16.801]             future::FutureResult(value = ...future.value$value, 
[16:12:16.801]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.801]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.801]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.801]                     ...future.globalenv.names))
[16:12:16.801]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.801]         }, condition = base::local({
[16:12:16.801]             c <- base::c
[16:12:16.801]             inherits <- base::inherits
[16:12:16.801]             invokeRestart <- base::invokeRestart
[16:12:16.801]             length <- base::length
[16:12:16.801]             list <- base::list
[16:12:16.801]             seq.int <- base::seq.int
[16:12:16.801]             signalCondition <- base::signalCondition
[16:12:16.801]             sys.calls <- base::sys.calls
[16:12:16.801]             `[[` <- base::`[[`
[16:12:16.801]             `+` <- base::`+`
[16:12:16.801]             `<<-` <- base::`<<-`
[16:12:16.801]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.801]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.801]                   3L)]
[16:12:16.801]             }
[16:12:16.801]             function(cond) {
[16:12:16.801]                 is_error <- inherits(cond, "error")
[16:12:16.801]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.801]                   NULL)
[16:12:16.801]                 if (is_error) {
[16:12:16.801]                   sessionInformation <- function() {
[16:12:16.801]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.801]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.801]                       search = base::search(), system = base::Sys.info())
[16:12:16.801]                   }
[16:12:16.801]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.801]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.801]                     cond$call), session = sessionInformation(), 
[16:12:16.801]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.801]                   signalCondition(cond)
[16:12:16.801]                 }
[16:12:16.801]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.801]                 "immediateCondition"))) {
[16:12:16.801]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.801]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.801]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.801]                   if (TRUE && !signal) {
[16:12:16.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.801]                     {
[16:12:16.801]                       inherits <- base::inherits
[16:12:16.801]                       invokeRestart <- base::invokeRestart
[16:12:16.801]                       is.null <- base::is.null
[16:12:16.801]                       muffled <- FALSE
[16:12:16.801]                       if (inherits(cond, "message")) {
[16:12:16.801]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.801]                         if (muffled) 
[16:12:16.801]                           invokeRestart("muffleMessage")
[16:12:16.801]                       }
[16:12:16.801]                       else if (inherits(cond, "warning")) {
[16:12:16.801]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.801]                         if (muffled) 
[16:12:16.801]                           invokeRestart("muffleWarning")
[16:12:16.801]                       }
[16:12:16.801]                       else if (inherits(cond, "condition")) {
[16:12:16.801]                         if (!is.null(pattern)) {
[16:12:16.801]                           computeRestarts <- base::computeRestarts
[16:12:16.801]                           grepl <- base::grepl
[16:12:16.801]                           restarts <- computeRestarts(cond)
[16:12:16.801]                           for (restart in restarts) {
[16:12:16.801]                             name <- restart$name
[16:12:16.801]                             if (is.null(name)) 
[16:12:16.801]                               next
[16:12:16.801]                             if (!grepl(pattern, name)) 
[16:12:16.801]                               next
[16:12:16.801]                             invokeRestart(restart)
[16:12:16.801]                             muffled <- TRUE
[16:12:16.801]                             break
[16:12:16.801]                           }
[16:12:16.801]                         }
[16:12:16.801]                       }
[16:12:16.801]                       invisible(muffled)
[16:12:16.801]                     }
[16:12:16.801]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.801]                   }
[16:12:16.801]                 }
[16:12:16.801]                 else {
[16:12:16.801]                   if (TRUE) {
[16:12:16.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.801]                     {
[16:12:16.801]                       inherits <- base::inherits
[16:12:16.801]                       invokeRestart <- base::invokeRestart
[16:12:16.801]                       is.null <- base::is.null
[16:12:16.801]                       muffled <- FALSE
[16:12:16.801]                       if (inherits(cond, "message")) {
[16:12:16.801]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.801]                         if (muffled) 
[16:12:16.801]                           invokeRestart("muffleMessage")
[16:12:16.801]                       }
[16:12:16.801]                       else if (inherits(cond, "warning")) {
[16:12:16.801]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.801]                         if (muffled) 
[16:12:16.801]                           invokeRestart("muffleWarning")
[16:12:16.801]                       }
[16:12:16.801]                       else if (inherits(cond, "condition")) {
[16:12:16.801]                         if (!is.null(pattern)) {
[16:12:16.801]                           computeRestarts <- base::computeRestarts
[16:12:16.801]                           grepl <- base::grepl
[16:12:16.801]                           restarts <- computeRestarts(cond)
[16:12:16.801]                           for (restart in restarts) {
[16:12:16.801]                             name <- restart$name
[16:12:16.801]                             if (is.null(name)) 
[16:12:16.801]                               next
[16:12:16.801]                             if (!grepl(pattern, name)) 
[16:12:16.801]                               next
[16:12:16.801]                             invokeRestart(restart)
[16:12:16.801]                             muffled <- TRUE
[16:12:16.801]                             break
[16:12:16.801]                           }
[16:12:16.801]                         }
[16:12:16.801]                       }
[16:12:16.801]                       invisible(muffled)
[16:12:16.801]                     }
[16:12:16.801]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.801]                   }
[16:12:16.801]                 }
[16:12:16.801]             }
[16:12:16.801]         }))
[16:12:16.801]     }, error = function(ex) {
[16:12:16.801]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.801]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.801]                 ...future.rng), started = ...future.startTime, 
[16:12:16.801]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.801]             version = "1.8"), class = "FutureResult")
[16:12:16.801]     }, finally = {
[16:12:16.801]         if (!identical(...future.workdir, getwd())) 
[16:12:16.801]             setwd(...future.workdir)
[16:12:16.801]         {
[16:12:16.801]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.801]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.801]             }
[16:12:16.801]             base::options(...future.oldOptions)
[16:12:16.801]             if (.Platform$OS.type == "windows") {
[16:12:16.801]                 old_names <- names(...future.oldEnvVars)
[16:12:16.801]                 envs <- base::Sys.getenv()
[16:12:16.801]                 names <- names(envs)
[16:12:16.801]                 common <- intersect(names, old_names)
[16:12:16.801]                 added <- setdiff(names, old_names)
[16:12:16.801]                 removed <- setdiff(old_names, names)
[16:12:16.801]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.801]                   envs[common]]
[16:12:16.801]                 NAMES <- toupper(changed)
[16:12:16.801]                 args <- list()
[16:12:16.801]                 for (kk in seq_along(NAMES)) {
[16:12:16.801]                   name <- changed[[kk]]
[16:12:16.801]                   NAME <- NAMES[[kk]]
[16:12:16.801]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.801]                     next
[16:12:16.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.801]                 }
[16:12:16.801]                 NAMES <- toupper(added)
[16:12:16.801]                 for (kk in seq_along(NAMES)) {
[16:12:16.801]                   name <- added[[kk]]
[16:12:16.801]                   NAME <- NAMES[[kk]]
[16:12:16.801]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.801]                     next
[16:12:16.801]                   args[[name]] <- ""
[16:12:16.801]                 }
[16:12:16.801]                 NAMES <- toupper(removed)
[16:12:16.801]                 for (kk in seq_along(NAMES)) {
[16:12:16.801]                   name <- removed[[kk]]
[16:12:16.801]                   NAME <- NAMES[[kk]]
[16:12:16.801]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.801]                     next
[16:12:16.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.801]                 }
[16:12:16.801]                 if (length(args) > 0) 
[16:12:16.801]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.801]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.801]             }
[16:12:16.801]             else {
[16:12:16.801]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.801]             }
[16:12:16.801]             {
[16:12:16.801]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.801]                   0L) {
[16:12:16.801]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.801]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.801]                   base::options(opts)
[16:12:16.801]                 }
[16:12:16.801]                 {
[16:12:16.801]                   {
[16:12:16.801]                     NULL
[16:12:16.801]                     RNGkind("Mersenne-Twister")
[16:12:16.801]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.801]                       inherits = FALSE)
[16:12:16.801]                   }
[16:12:16.801]                   options(future.plan = NULL)
[16:12:16.801]                   if (is.na(NA_character_)) 
[16:12:16.801]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.801]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.801]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.801]                   {
[16:12:16.801]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.801]                     if (!future$lazy) 
[16:12:16.801]                       future <- run(future)
[16:12:16.801]                     invisible(future)
[16:12:16.801]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.801]                 }
[16:12:16.801]             }
[16:12:16.801]         }
[16:12:16.801]     })
[16:12:16.801]     if (TRUE) {
[16:12:16.801]         base::sink(type = "output", split = FALSE)
[16:12:16.801]         if (TRUE) {
[16:12:16.801]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.801]         }
[16:12:16.801]         else {
[16:12:16.801]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.801]         }
[16:12:16.801]         base::close(...future.stdout)
[16:12:16.801]         ...future.stdout <- NULL
[16:12:16.801]     }
[16:12:16.801]     ...future.result$conditions <- ...future.conditions
[16:12:16.801]     ...future.result$finished <- base::Sys.time()
[16:12:16.801]     ...future.result
[16:12:16.801] }
[16:12:16.803] assign_globals() ...
[16:12:16.803] List of 1
[16:12:16.803]  $ a: num 2
[16:12:16.803]  - attr(*, "where")=List of 1
[16:12:16.803]   ..$ a:<environment: R_EmptyEnv> 
[16:12:16.803]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.803]  - attr(*, "resolved")= logi FALSE
[16:12:16.803]  - attr(*, "total_size")= num 56
[16:12:16.803]  - attr(*, "already-done")= logi TRUE
[16:12:16.808] - copied ‘a’ to environment
[16:12:16.808] assign_globals() ... done
[16:12:16.808] plan(): Setting new future strategy stack:
[16:12:16.808] List of future strategies:
[16:12:16.808] 1. sequential:
[16:12:16.808]    - args: function (..., envir = parent.frame())
[16:12:16.808]    - tweaked: FALSE
[16:12:16.808]    - call: NULL
[16:12:16.809] plan(): nbrOfWorkers() = 1
[16:12:16.809] plan(): Setting new future strategy stack:
[16:12:16.809] List of future strategies:
[16:12:16.809] 1. sequential:
[16:12:16.809]    - args: function (..., envir = parent.frame())
[16:12:16.809]    - tweaked: FALSE
[16:12:16.809]    - call: plan(strategy)
[16:12:16.810] plan(): nbrOfWorkers() = 1
[16:12:16.810] SequentialFuture started (and completed)
[16:12:16.810] - Launch lazy future ... done
[16:12:16.810] run() for ‘SequentialFuture’ ... done
** Future evaluation with errors
[16:12:16.811] getGlobalsAndPackages() ...
[16:12:16.811] Searching for globals...
[16:12:16.814] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[16:12:16.814] Searching for globals ... DONE
[16:12:16.814] Resolving globals: FALSE
[16:12:16.814] 
[16:12:16.814] 
[16:12:16.814] getGlobalsAndPackages() ... DONE
[16:12:16.815] run() for ‘Future’ ...
[16:12:16.815] - state: ‘created’
[16:12:16.815] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.815] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.815] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.815]   - Field: ‘label’
[16:12:16.815]   - Field: ‘local’
[16:12:16.815]   - Field: ‘owner’
[16:12:16.815]   - Field: ‘envir’
[16:12:16.816]   - Field: ‘packages’
[16:12:16.816]   - Field: ‘gc’
[16:12:16.816]   - Field: ‘conditions’
[16:12:16.816]   - Field: ‘expr’
[16:12:16.816]   - Field: ‘uuid’
[16:12:16.816]   - Field: ‘seed’
[16:12:16.816]   - Field: ‘version’
[16:12:16.816]   - Field: ‘result’
[16:12:16.816]   - Field: ‘asynchronous’
[16:12:16.816]   - Field: ‘calls’
[16:12:16.816]   - Field: ‘globals’
[16:12:16.817]   - Field: ‘stdout’
[16:12:16.817]   - Field: ‘earlySignal’
[16:12:16.817]   - Field: ‘lazy’
[16:12:16.817]   - Field: ‘state’
[16:12:16.817] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.817] - Launch lazy future ...
[16:12:16.817] Packages needed by the future expression (n = 0): <none>
[16:12:16.817] Packages needed by future strategies (n = 0): <none>
[16:12:16.818] {
[16:12:16.818]     {
[16:12:16.818]         {
[16:12:16.818]             ...future.startTime <- base::Sys.time()
[16:12:16.818]             {
[16:12:16.818]                 {
[16:12:16.818]                   {
[16:12:16.818]                     base::local({
[16:12:16.818]                       has_future <- base::requireNamespace("future", 
[16:12:16.818]                         quietly = TRUE)
[16:12:16.818]                       if (has_future) {
[16:12:16.818]                         ns <- base::getNamespace("future")
[16:12:16.818]                         version <- ns[[".package"]][["version"]]
[16:12:16.818]                         if (is.null(version)) 
[16:12:16.818]                           version <- utils::packageVersion("future")
[16:12:16.818]                       }
[16:12:16.818]                       else {
[16:12:16.818]                         version <- NULL
[16:12:16.818]                       }
[16:12:16.818]                       if (!has_future || version < "1.8.0") {
[16:12:16.818]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.818]                           "", base::R.version$version.string), 
[16:12:16.818]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.818]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.818]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.818]                             "release", "version")], collapse = " "), 
[16:12:16.818]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.818]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.818]                           info)
[16:12:16.818]                         info <- base::paste(info, collapse = "; ")
[16:12:16.818]                         if (!has_future) {
[16:12:16.818]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.818]                             info)
[16:12:16.818]                         }
[16:12:16.818]                         else {
[16:12:16.818]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.818]                             info, version)
[16:12:16.818]                         }
[16:12:16.818]                         base::stop(msg)
[16:12:16.818]                       }
[16:12:16.818]                     })
[16:12:16.818]                   }
[16:12:16.818]                   options(future.plan = NULL)
[16:12:16.818]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.818]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.818]                 }
[16:12:16.818]                 ...future.workdir <- getwd()
[16:12:16.818]             }
[16:12:16.818]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.818]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.818]         }
[16:12:16.818]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.818]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.818]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.818]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.818]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.818]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.818]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.818]             base::names(...future.oldOptions))
[16:12:16.818]     }
[16:12:16.818]     if (FALSE) {
[16:12:16.818]     }
[16:12:16.818]     else {
[16:12:16.818]         if (TRUE) {
[16:12:16.818]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.818]                 open = "w")
[16:12:16.818]         }
[16:12:16.818]         else {
[16:12:16.818]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.818]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.818]         }
[16:12:16.818]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.818]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.818]             base::sink(type = "output", split = FALSE)
[16:12:16.818]             base::close(...future.stdout)
[16:12:16.818]         }, add = TRUE)
[16:12:16.818]     }
[16:12:16.818]     ...future.frame <- base::sys.nframe()
[16:12:16.818]     ...future.conditions <- base::list()
[16:12:16.818]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.818]     if (FALSE) {
[16:12:16.818]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.818]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.818]     }
[16:12:16.818]     ...future.result <- base::tryCatch({
[16:12:16.818]         base::withCallingHandlers({
[16:12:16.818]             ...future.value <- base::withVisible(base::local({
[16:12:16.818]                 x <- 3
[16:12:16.818]                 stop("Woops!")
[16:12:16.818]                 x
[16:12:16.818]             }))
[16:12:16.818]             future::FutureResult(value = ...future.value$value, 
[16:12:16.818]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.818]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.818]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.818]                     ...future.globalenv.names))
[16:12:16.818]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.818]         }, condition = base::local({
[16:12:16.818]             c <- base::c
[16:12:16.818]             inherits <- base::inherits
[16:12:16.818]             invokeRestart <- base::invokeRestart
[16:12:16.818]             length <- base::length
[16:12:16.818]             list <- base::list
[16:12:16.818]             seq.int <- base::seq.int
[16:12:16.818]             signalCondition <- base::signalCondition
[16:12:16.818]             sys.calls <- base::sys.calls
[16:12:16.818]             `[[` <- base::`[[`
[16:12:16.818]             `+` <- base::`+`
[16:12:16.818]             `<<-` <- base::`<<-`
[16:12:16.818]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.818]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.818]                   3L)]
[16:12:16.818]             }
[16:12:16.818]             function(cond) {
[16:12:16.818]                 is_error <- inherits(cond, "error")
[16:12:16.818]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.818]                   NULL)
[16:12:16.818]                 if (is_error) {
[16:12:16.818]                   sessionInformation <- function() {
[16:12:16.818]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.818]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.818]                       search = base::search(), system = base::Sys.info())
[16:12:16.818]                   }
[16:12:16.818]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.818]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.818]                     cond$call), session = sessionInformation(), 
[16:12:16.818]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.818]                   signalCondition(cond)
[16:12:16.818]                 }
[16:12:16.818]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.818]                 "immediateCondition"))) {
[16:12:16.818]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.818]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.818]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.818]                   if (TRUE && !signal) {
[16:12:16.818]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.818]                     {
[16:12:16.818]                       inherits <- base::inherits
[16:12:16.818]                       invokeRestart <- base::invokeRestart
[16:12:16.818]                       is.null <- base::is.null
[16:12:16.818]                       muffled <- FALSE
[16:12:16.818]                       if (inherits(cond, "message")) {
[16:12:16.818]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.818]                         if (muffled) 
[16:12:16.818]                           invokeRestart("muffleMessage")
[16:12:16.818]                       }
[16:12:16.818]                       else if (inherits(cond, "warning")) {
[16:12:16.818]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.818]                         if (muffled) 
[16:12:16.818]                           invokeRestart("muffleWarning")
[16:12:16.818]                       }
[16:12:16.818]                       else if (inherits(cond, "condition")) {
[16:12:16.818]                         if (!is.null(pattern)) {
[16:12:16.818]                           computeRestarts <- base::computeRestarts
[16:12:16.818]                           grepl <- base::grepl
[16:12:16.818]                           restarts <- computeRestarts(cond)
[16:12:16.818]                           for (restart in restarts) {
[16:12:16.818]                             name <- restart$name
[16:12:16.818]                             if (is.null(name)) 
[16:12:16.818]                               next
[16:12:16.818]                             if (!grepl(pattern, name)) 
[16:12:16.818]                               next
[16:12:16.818]                             invokeRestart(restart)
[16:12:16.818]                             muffled <- TRUE
[16:12:16.818]                             break
[16:12:16.818]                           }
[16:12:16.818]                         }
[16:12:16.818]                       }
[16:12:16.818]                       invisible(muffled)
[16:12:16.818]                     }
[16:12:16.818]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.818]                   }
[16:12:16.818]                 }
[16:12:16.818]                 else {
[16:12:16.818]                   if (TRUE) {
[16:12:16.818]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.818]                     {
[16:12:16.818]                       inherits <- base::inherits
[16:12:16.818]                       invokeRestart <- base::invokeRestart
[16:12:16.818]                       is.null <- base::is.null
[16:12:16.818]                       muffled <- FALSE
[16:12:16.818]                       if (inherits(cond, "message")) {
[16:12:16.818]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.818]                         if (muffled) 
[16:12:16.818]                           invokeRestart("muffleMessage")
[16:12:16.818]                       }
[16:12:16.818]                       else if (inherits(cond, "warning")) {
[16:12:16.818]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.818]                         if (muffled) 
[16:12:16.818]                           invokeRestart("muffleWarning")
[16:12:16.818]                       }
[16:12:16.818]                       else if (inherits(cond, "condition")) {
[16:12:16.818]                         if (!is.null(pattern)) {
[16:12:16.818]                           computeRestarts <- base::computeRestarts
[16:12:16.818]                           grepl <- base::grepl
[16:12:16.818]                           restarts <- computeRestarts(cond)
[16:12:16.818]                           for (restart in restarts) {
[16:12:16.818]                             name <- restart$name
[16:12:16.818]                             if (is.null(name)) 
[16:12:16.818]                               next
[16:12:16.818]                             if (!grepl(pattern, name)) 
[16:12:16.818]                               next
[16:12:16.818]                             invokeRestart(restart)
[16:12:16.818]                             muffled <- TRUE
[16:12:16.818]                             break
[16:12:16.818]                           }
[16:12:16.818]                         }
[16:12:16.818]                       }
[16:12:16.818]                       invisible(muffled)
[16:12:16.818]                     }
[16:12:16.818]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.818]                   }
[16:12:16.818]                 }
[16:12:16.818]             }
[16:12:16.818]         }))
[16:12:16.818]     }, error = function(ex) {
[16:12:16.818]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.818]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.818]                 ...future.rng), started = ...future.startTime, 
[16:12:16.818]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.818]             version = "1.8"), class = "FutureResult")
[16:12:16.818]     }, finally = {
[16:12:16.818]         if (!identical(...future.workdir, getwd())) 
[16:12:16.818]             setwd(...future.workdir)
[16:12:16.818]         {
[16:12:16.818]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.818]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.818]             }
[16:12:16.818]             base::options(...future.oldOptions)
[16:12:16.818]             if (.Platform$OS.type == "windows") {
[16:12:16.818]                 old_names <- names(...future.oldEnvVars)
[16:12:16.818]                 envs <- base::Sys.getenv()
[16:12:16.818]                 names <- names(envs)
[16:12:16.818]                 common <- intersect(names, old_names)
[16:12:16.818]                 added <- setdiff(names, old_names)
[16:12:16.818]                 removed <- setdiff(old_names, names)
[16:12:16.818]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.818]                   envs[common]]
[16:12:16.818]                 NAMES <- toupper(changed)
[16:12:16.818]                 args <- list()
[16:12:16.818]                 for (kk in seq_along(NAMES)) {
[16:12:16.818]                   name <- changed[[kk]]
[16:12:16.818]                   NAME <- NAMES[[kk]]
[16:12:16.818]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.818]                     next
[16:12:16.818]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.818]                 }
[16:12:16.818]                 NAMES <- toupper(added)
[16:12:16.818]                 for (kk in seq_along(NAMES)) {
[16:12:16.818]                   name <- added[[kk]]
[16:12:16.818]                   NAME <- NAMES[[kk]]
[16:12:16.818]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.818]                     next
[16:12:16.818]                   args[[name]] <- ""
[16:12:16.818]                 }
[16:12:16.818]                 NAMES <- toupper(removed)
[16:12:16.818]                 for (kk in seq_along(NAMES)) {
[16:12:16.818]                   name <- removed[[kk]]
[16:12:16.818]                   NAME <- NAMES[[kk]]
[16:12:16.818]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.818]                     next
[16:12:16.818]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.818]                 }
[16:12:16.818]                 if (length(args) > 0) 
[16:12:16.818]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.818]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.818]             }
[16:12:16.818]             else {
[16:12:16.818]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.818]             }
[16:12:16.818]             {
[16:12:16.818]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.818]                   0L) {
[16:12:16.818]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.818]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.818]                   base::options(opts)
[16:12:16.818]                 }
[16:12:16.818]                 {
[16:12:16.818]                   {
[16:12:16.818]                     NULL
[16:12:16.818]                     RNGkind("Mersenne-Twister")
[16:12:16.818]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.818]                       inherits = FALSE)
[16:12:16.818]                   }
[16:12:16.818]                   options(future.plan = NULL)
[16:12:16.818]                   if (is.na(NA_character_)) 
[16:12:16.818]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.818]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.818]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.818]                   {
[16:12:16.818]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.818]                     if (!future$lazy) 
[16:12:16.818]                       future <- run(future)
[16:12:16.818]                     invisible(future)
[16:12:16.818]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.818]                 }
[16:12:16.818]             }
[16:12:16.818]         }
[16:12:16.818]     })
[16:12:16.818]     if (TRUE) {
[16:12:16.818]         base::sink(type = "output", split = FALSE)
[16:12:16.818]         if (TRUE) {
[16:12:16.818]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.818]         }
[16:12:16.818]         else {
[16:12:16.818]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.818]         }
[16:12:16.818]         base::close(...future.stdout)
[16:12:16.818]         ...future.stdout <- NULL
[16:12:16.818]     }
[16:12:16.818]     ...future.result$conditions <- ...future.conditions
[16:12:16.818]     ...future.result$finished <- base::Sys.time()
[16:12:16.818]     ...future.result
[16:12:16.818] }
[16:12:16.819] plan(): Setting new future strategy stack:
[16:12:16.819] List of future strategies:
[16:12:16.819] 1. sequential:
[16:12:16.819]    - args: function (..., envir = parent.frame())
[16:12:16.819]    - tweaked: FALSE
[16:12:16.819]    - call: NULL
[16:12:16.820] plan(): nbrOfWorkers() = 1
[16:12:16.821] plan(): Setting new future strategy stack:
[16:12:16.821] List of future strategies:
[16:12:16.821] 1. sequential:
[16:12:16.821]    - args: function (..., envir = parent.frame())
[16:12:16.821]    - tweaked: FALSE
[16:12:16.821]    - call: plan(strategy)
[16:12:16.821] plan(): nbrOfWorkers() = 1
[16:12:16.821] SequentialFuture started (and completed)
[16:12:16.821] signalConditions() ...
[16:12:16.822]  - include = ‘immediateCondition’
[16:12:16.822]  - exclude = 
[16:12:16.822]  - resignal = FALSE
[16:12:16.822]  - Number of conditions: 1
[16:12:16.822] signalConditions() ... done
[16:12:16.822] - Launch lazy future ... done
[16:12:16.822] run() for ‘SequentialFuture’ ... done
[16:12:16.822] signalConditions() ...
[16:12:16.822]  - include = ‘immediateCondition’
[16:12:16.822]  - exclude = 
[16:12:16.822]  - resignal = FALSE
[16:12:16.823]  - Number of conditions: 1
[16:12:16.823] signalConditions() ... done
[16:12:16.823] Future state: ‘finished’
[16:12:16.823] signalConditions() ...
[16:12:16.823]  - include = ‘condition’
[16:12:16.823]  - exclude = ‘immediateCondition’
[16:12:16.823]  - resignal = TRUE
[16:12:16.823]  - Number of conditions: 1
[16:12:16.823]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:16.823] signalConditions() ... done
[16:12:16.824] getGlobalsAndPackages() ...
[16:12:16.824] Searching for globals...
[16:12:16.827] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:16.827] Searching for globals ... DONE
[16:12:16.827] Resolving globals: FALSE
[16:12:16.828] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:16.828] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:16.828] - globals: [1] ‘ii’
[16:12:16.828] 
[16:12:16.828] getGlobalsAndPackages() ... DONE
[16:12:16.829] run() for ‘Future’ ...
[16:12:16.829] - state: ‘created’
[16:12:16.829] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.829] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.829] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.829]   - Field: ‘label’
[16:12:16.829]   - Field: ‘local’
[16:12:16.829]   - Field: ‘owner’
[16:12:16.830]   - Field: ‘envir’
[16:12:16.830]   - Field: ‘packages’
[16:12:16.830]   - Field: ‘gc’
[16:12:16.830]   - Field: ‘conditions’
[16:12:16.830]   - Field: ‘expr’
[16:12:16.830]   - Field: ‘uuid’
[16:12:16.830]   - Field: ‘seed’
[16:12:16.830]   - Field: ‘version’
[16:12:16.830]   - Field: ‘result’
[16:12:16.830]   - Field: ‘asynchronous’
[16:12:16.830]   - Field: ‘calls’
[16:12:16.831]   - Field: ‘globals’
[16:12:16.831]   - Field: ‘stdout’
[16:12:16.831]   - Field: ‘earlySignal’
[16:12:16.831]   - Field: ‘lazy’
[16:12:16.831]   - Field: ‘state’
[16:12:16.831] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.831] - Launch lazy future ...
[16:12:16.831] Packages needed by the future expression (n = 0): <none>
[16:12:16.831] Packages needed by future strategies (n = 0): <none>
[16:12:16.832] {
[16:12:16.832]     {
[16:12:16.832]         {
[16:12:16.832]             ...future.startTime <- base::Sys.time()
[16:12:16.832]             {
[16:12:16.832]                 {
[16:12:16.832]                   {
[16:12:16.832]                     base::local({
[16:12:16.832]                       has_future <- base::requireNamespace("future", 
[16:12:16.832]                         quietly = TRUE)
[16:12:16.832]                       if (has_future) {
[16:12:16.832]                         ns <- base::getNamespace("future")
[16:12:16.832]                         version <- ns[[".package"]][["version"]]
[16:12:16.832]                         if (is.null(version)) 
[16:12:16.832]                           version <- utils::packageVersion("future")
[16:12:16.832]                       }
[16:12:16.832]                       else {
[16:12:16.832]                         version <- NULL
[16:12:16.832]                       }
[16:12:16.832]                       if (!has_future || version < "1.8.0") {
[16:12:16.832]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.832]                           "", base::R.version$version.string), 
[16:12:16.832]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.832]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.832]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.832]                             "release", "version")], collapse = " "), 
[16:12:16.832]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.832]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.832]                           info)
[16:12:16.832]                         info <- base::paste(info, collapse = "; ")
[16:12:16.832]                         if (!has_future) {
[16:12:16.832]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.832]                             info)
[16:12:16.832]                         }
[16:12:16.832]                         else {
[16:12:16.832]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.832]                             info, version)
[16:12:16.832]                         }
[16:12:16.832]                         base::stop(msg)
[16:12:16.832]                       }
[16:12:16.832]                     })
[16:12:16.832]                   }
[16:12:16.832]                   options(future.plan = NULL)
[16:12:16.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.832]                 }
[16:12:16.832]                 ...future.workdir <- getwd()
[16:12:16.832]             }
[16:12:16.832]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.832]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.832]         }
[16:12:16.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.832]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.832]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.832]             base::names(...future.oldOptions))
[16:12:16.832]     }
[16:12:16.832]     if (FALSE) {
[16:12:16.832]     }
[16:12:16.832]     else {
[16:12:16.832]         if (TRUE) {
[16:12:16.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.832]                 open = "w")
[16:12:16.832]         }
[16:12:16.832]         else {
[16:12:16.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.832]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.832]         }
[16:12:16.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.832]             base::sink(type = "output", split = FALSE)
[16:12:16.832]             base::close(...future.stdout)
[16:12:16.832]         }, add = TRUE)
[16:12:16.832]     }
[16:12:16.832]     ...future.frame <- base::sys.nframe()
[16:12:16.832]     ...future.conditions <- base::list()
[16:12:16.832]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.832]     if (FALSE) {
[16:12:16.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.832]     }
[16:12:16.832]     ...future.result <- base::tryCatch({
[16:12:16.832]         base::withCallingHandlers({
[16:12:16.832]             ...future.value <- base::withVisible(base::local({
[16:12:16.832]                 if (ii%%2 == 0) 
[16:12:16.832]                   stop("Woops!")
[16:12:16.832]                 ii
[16:12:16.832]             }))
[16:12:16.832]             future::FutureResult(value = ...future.value$value, 
[16:12:16.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.832]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.832]                     ...future.globalenv.names))
[16:12:16.832]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.832]         }, condition = base::local({
[16:12:16.832]             c <- base::c
[16:12:16.832]             inherits <- base::inherits
[16:12:16.832]             invokeRestart <- base::invokeRestart
[16:12:16.832]             length <- base::length
[16:12:16.832]             list <- base::list
[16:12:16.832]             seq.int <- base::seq.int
[16:12:16.832]             signalCondition <- base::signalCondition
[16:12:16.832]             sys.calls <- base::sys.calls
[16:12:16.832]             `[[` <- base::`[[`
[16:12:16.832]             `+` <- base::`+`
[16:12:16.832]             `<<-` <- base::`<<-`
[16:12:16.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.832]                   3L)]
[16:12:16.832]             }
[16:12:16.832]             function(cond) {
[16:12:16.832]                 is_error <- inherits(cond, "error")
[16:12:16.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.832]                   NULL)
[16:12:16.832]                 if (is_error) {
[16:12:16.832]                   sessionInformation <- function() {
[16:12:16.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.832]                       search = base::search(), system = base::Sys.info())
[16:12:16.832]                   }
[16:12:16.832]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.832]                     cond$call), session = sessionInformation(), 
[16:12:16.832]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.832]                   signalCondition(cond)
[16:12:16.832]                 }
[16:12:16.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.832]                 "immediateCondition"))) {
[16:12:16.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.832]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.832]                   if (TRUE && !signal) {
[16:12:16.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.832]                     {
[16:12:16.832]                       inherits <- base::inherits
[16:12:16.832]                       invokeRestart <- base::invokeRestart
[16:12:16.832]                       is.null <- base::is.null
[16:12:16.832]                       muffled <- FALSE
[16:12:16.832]                       if (inherits(cond, "message")) {
[16:12:16.832]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.832]                         if (muffled) 
[16:12:16.832]                           invokeRestart("muffleMessage")
[16:12:16.832]                       }
[16:12:16.832]                       else if (inherits(cond, "warning")) {
[16:12:16.832]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.832]                         if (muffled) 
[16:12:16.832]                           invokeRestart("muffleWarning")
[16:12:16.832]                       }
[16:12:16.832]                       else if (inherits(cond, "condition")) {
[16:12:16.832]                         if (!is.null(pattern)) {
[16:12:16.832]                           computeRestarts <- base::computeRestarts
[16:12:16.832]                           grepl <- base::grepl
[16:12:16.832]                           restarts <- computeRestarts(cond)
[16:12:16.832]                           for (restart in restarts) {
[16:12:16.832]                             name <- restart$name
[16:12:16.832]                             if (is.null(name)) 
[16:12:16.832]                               next
[16:12:16.832]                             if (!grepl(pattern, name)) 
[16:12:16.832]                               next
[16:12:16.832]                             invokeRestart(restart)
[16:12:16.832]                             muffled <- TRUE
[16:12:16.832]                             break
[16:12:16.832]                           }
[16:12:16.832]                         }
[16:12:16.832]                       }
[16:12:16.832]                       invisible(muffled)
[16:12:16.832]                     }
[16:12:16.832]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.832]                   }
[16:12:16.832]                 }
[16:12:16.832]                 else {
[16:12:16.832]                   if (TRUE) {
[16:12:16.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.832]                     {
[16:12:16.832]                       inherits <- base::inherits
[16:12:16.832]                       invokeRestart <- base::invokeRestart
[16:12:16.832]                       is.null <- base::is.null
[16:12:16.832]                       muffled <- FALSE
[16:12:16.832]                       if (inherits(cond, "message")) {
[16:12:16.832]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.832]                         if (muffled) 
[16:12:16.832]                           invokeRestart("muffleMessage")
[16:12:16.832]                       }
[16:12:16.832]                       else if (inherits(cond, "warning")) {
[16:12:16.832]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.832]                         if (muffled) 
[16:12:16.832]                           invokeRestart("muffleWarning")
[16:12:16.832]                       }
[16:12:16.832]                       else if (inherits(cond, "condition")) {
[16:12:16.832]                         if (!is.null(pattern)) {
[16:12:16.832]                           computeRestarts <- base::computeRestarts
[16:12:16.832]                           grepl <- base::grepl
[16:12:16.832]                           restarts <- computeRestarts(cond)
[16:12:16.832]                           for (restart in restarts) {
[16:12:16.832]                             name <- restart$name
[16:12:16.832]                             if (is.null(name)) 
[16:12:16.832]                               next
[16:12:16.832]                             if (!grepl(pattern, name)) 
[16:12:16.832]                               next
[16:12:16.832]                             invokeRestart(restart)
[16:12:16.832]                             muffled <- TRUE
[16:12:16.832]                             break
[16:12:16.832]                           }
[16:12:16.832]                         }
[16:12:16.832]                       }
[16:12:16.832]                       invisible(muffled)
[16:12:16.832]                     }
[16:12:16.832]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.832]                   }
[16:12:16.832]                 }
[16:12:16.832]             }
[16:12:16.832]         }))
[16:12:16.832]     }, error = function(ex) {
[16:12:16.832]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.832]                 ...future.rng), started = ...future.startTime, 
[16:12:16.832]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.832]             version = "1.8"), class = "FutureResult")
[16:12:16.832]     }, finally = {
[16:12:16.832]         if (!identical(...future.workdir, getwd())) 
[16:12:16.832]             setwd(...future.workdir)
[16:12:16.832]         {
[16:12:16.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.832]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.832]             }
[16:12:16.832]             base::options(...future.oldOptions)
[16:12:16.832]             if (.Platform$OS.type == "windows") {
[16:12:16.832]                 old_names <- names(...future.oldEnvVars)
[16:12:16.832]                 envs <- base::Sys.getenv()
[16:12:16.832]                 names <- names(envs)
[16:12:16.832]                 common <- intersect(names, old_names)
[16:12:16.832]                 added <- setdiff(names, old_names)
[16:12:16.832]                 removed <- setdiff(old_names, names)
[16:12:16.832]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.832]                   envs[common]]
[16:12:16.832]                 NAMES <- toupper(changed)
[16:12:16.832]                 args <- list()
[16:12:16.832]                 for (kk in seq_along(NAMES)) {
[16:12:16.832]                   name <- changed[[kk]]
[16:12:16.832]                   NAME <- NAMES[[kk]]
[16:12:16.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.832]                     next
[16:12:16.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.832]                 }
[16:12:16.832]                 NAMES <- toupper(added)
[16:12:16.832]                 for (kk in seq_along(NAMES)) {
[16:12:16.832]                   name <- added[[kk]]
[16:12:16.832]                   NAME <- NAMES[[kk]]
[16:12:16.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.832]                     next
[16:12:16.832]                   args[[name]] <- ""
[16:12:16.832]                 }
[16:12:16.832]                 NAMES <- toupper(removed)
[16:12:16.832]                 for (kk in seq_along(NAMES)) {
[16:12:16.832]                   name <- removed[[kk]]
[16:12:16.832]                   NAME <- NAMES[[kk]]
[16:12:16.832]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.832]                     next
[16:12:16.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.832]                 }
[16:12:16.832]                 if (length(args) > 0) 
[16:12:16.832]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.832]             }
[16:12:16.832]             else {
[16:12:16.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.832]             }
[16:12:16.832]             {
[16:12:16.832]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.832]                   0L) {
[16:12:16.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.832]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.832]                   base::options(opts)
[16:12:16.832]                 }
[16:12:16.832]                 {
[16:12:16.832]                   {
[16:12:16.832]                     NULL
[16:12:16.832]                     RNGkind("Mersenne-Twister")
[16:12:16.832]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.832]                       inherits = FALSE)
[16:12:16.832]                   }
[16:12:16.832]                   options(future.plan = NULL)
[16:12:16.832]                   if (is.na(NA_character_)) 
[16:12:16.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.832]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.832]                   {
[16:12:16.832]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.832]                     if (!future$lazy) 
[16:12:16.832]                       future <- run(future)
[16:12:16.832]                     invisible(future)
[16:12:16.832]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.832]                 }
[16:12:16.832]             }
[16:12:16.832]         }
[16:12:16.832]     })
[16:12:16.832]     if (TRUE) {
[16:12:16.832]         base::sink(type = "output", split = FALSE)
[16:12:16.832]         if (TRUE) {
[16:12:16.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.832]         }
[16:12:16.832]         else {
[16:12:16.832]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.832]         }
[16:12:16.832]         base::close(...future.stdout)
[16:12:16.832]         ...future.stdout <- NULL
[16:12:16.832]     }
[16:12:16.832]     ...future.result$conditions <- ...future.conditions
[16:12:16.832]     ...future.result$finished <- base::Sys.time()
[16:12:16.832]     ...future.result
[16:12:16.832] }
[16:12:16.833] assign_globals() ...
[16:12:16.833] List of 1
[16:12:16.833]  $ ii: int 1
[16:12:16.833]  - attr(*, "where")=List of 1
[16:12:16.833]   ..$ ii:<environment: R_EmptyEnv> 
[16:12:16.833]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.833]  - attr(*, "resolved")= logi FALSE
[16:12:16.833]  - attr(*, "total_size")= num 56
[16:12:16.833]  - attr(*, "already-done")= logi TRUE
[16:12:16.836] - copied ‘ii’ to environment
[16:12:16.836] assign_globals() ... done
[16:12:16.836] plan(): Setting new future strategy stack:
[16:12:16.836] List of future strategies:
[16:12:16.836] 1. sequential:
[16:12:16.836]    - args: function (..., envir = parent.frame())
[16:12:16.836]    - tweaked: FALSE
[16:12:16.836]    - call: NULL
[16:12:16.836] plan(): nbrOfWorkers() = 1
[16:12:16.837] plan(): Setting new future strategy stack:
[16:12:16.837] List of future strategies:
[16:12:16.837] 1. sequential:
[16:12:16.837]    - args: function (..., envir = parent.frame())
[16:12:16.837]    - tweaked: FALSE
[16:12:16.837]    - call: plan(strategy)
[16:12:16.838] plan(): nbrOfWorkers() = 1
[16:12:16.838] SequentialFuture started (and completed)
[16:12:16.838] - Launch lazy future ... done
[16:12:16.838] run() for ‘SequentialFuture’ ... done
[16:12:16.838] getGlobalsAndPackages() ...
[16:12:16.838] Searching for globals...
[16:12:16.840] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:16.840] Searching for globals ... DONE
[16:12:16.840] Resolving globals: FALSE
[16:12:16.840] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:16.841] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:16.841] - globals: [1] ‘ii’
[16:12:16.841] 
[16:12:16.841] getGlobalsAndPackages() ... DONE
[16:12:16.841] run() for ‘Future’ ...
[16:12:16.841] - state: ‘created’
[16:12:16.841] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.842] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.842] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.842]   - Field: ‘label’
[16:12:16.842]   - Field: ‘local’
[16:12:16.842]   - Field: ‘owner’
[16:12:16.842]   - Field: ‘envir’
[16:12:16.842]   - Field: ‘packages’
[16:12:16.842]   - Field: ‘gc’
[16:12:16.842]   - Field: ‘conditions’
[16:12:16.842]   - Field: ‘expr’
[16:12:16.843]   - Field: ‘uuid’
[16:12:16.843]   - Field: ‘seed’
[16:12:16.843]   - Field: ‘version’
[16:12:16.843]   - Field: ‘result’
[16:12:16.843]   - Field: ‘asynchronous’
[16:12:16.843]   - Field: ‘calls’
[16:12:16.843]   - Field: ‘globals’
[16:12:16.843]   - Field: ‘stdout’
[16:12:16.843]   - Field: ‘earlySignal’
[16:12:16.843]   - Field: ‘lazy’
[16:12:16.843]   - Field: ‘state’
[16:12:16.843] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.844] - Launch lazy future ...
[16:12:16.844] Packages needed by the future expression (n = 0): <none>
[16:12:16.844] Packages needed by future strategies (n = 0): <none>
[16:12:16.844] {
[16:12:16.844]     {
[16:12:16.844]         {
[16:12:16.844]             ...future.startTime <- base::Sys.time()
[16:12:16.844]             {
[16:12:16.844]                 {
[16:12:16.844]                   {
[16:12:16.844]                     base::local({
[16:12:16.844]                       has_future <- base::requireNamespace("future", 
[16:12:16.844]                         quietly = TRUE)
[16:12:16.844]                       if (has_future) {
[16:12:16.844]                         ns <- base::getNamespace("future")
[16:12:16.844]                         version <- ns[[".package"]][["version"]]
[16:12:16.844]                         if (is.null(version)) 
[16:12:16.844]                           version <- utils::packageVersion("future")
[16:12:16.844]                       }
[16:12:16.844]                       else {
[16:12:16.844]                         version <- NULL
[16:12:16.844]                       }
[16:12:16.844]                       if (!has_future || version < "1.8.0") {
[16:12:16.844]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.844]                           "", base::R.version$version.string), 
[16:12:16.844]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.844]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.844]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.844]                             "release", "version")], collapse = " "), 
[16:12:16.844]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.844]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.844]                           info)
[16:12:16.844]                         info <- base::paste(info, collapse = "; ")
[16:12:16.844]                         if (!has_future) {
[16:12:16.844]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.844]                             info)
[16:12:16.844]                         }
[16:12:16.844]                         else {
[16:12:16.844]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.844]                             info, version)
[16:12:16.844]                         }
[16:12:16.844]                         base::stop(msg)
[16:12:16.844]                       }
[16:12:16.844]                     })
[16:12:16.844]                   }
[16:12:16.844]                   options(future.plan = NULL)
[16:12:16.844]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.844]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.844]                 }
[16:12:16.844]                 ...future.workdir <- getwd()
[16:12:16.844]             }
[16:12:16.844]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.844]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.844]         }
[16:12:16.844]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.844]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.844]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.844]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.844]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.844]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.844]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.844]             base::names(...future.oldOptions))
[16:12:16.844]     }
[16:12:16.844]     if (FALSE) {
[16:12:16.844]     }
[16:12:16.844]     else {
[16:12:16.844]         if (TRUE) {
[16:12:16.844]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.844]                 open = "w")
[16:12:16.844]         }
[16:12:16.844]         else {
[16:12:16.844]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.844]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.844]         }
[16:12:16.844]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.844]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.844]             base::sink(type = "output", split = FALSE)
[16:12:16.844]             base::close(...future.stdout)
[16:12:16.844]         }, add = TRUE)
[16:12:16.844]     }
[16:12:16.844]     ...future.frame <- base::sys.nframe()
[16:12:16.844]     ...future.conditions <- base::list()
[16:12:16.844]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.844]     if (FALSE) {
[16:12:16.844]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.844]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.844]     }
[16:12:16.844]     ...future.result <- base::tryCatch({
[16:12:16.844]         base::withCallingHandlers({
[16:12:16.844]             ...future.value <- base::withVisible(base::local({
[16:12:16.844]                 if (ii%%2 == 0) 
[16:12:16.844]                   stop("Woops!")
[16:12:16.844]                 ii
[16:12:16.844]             }))
[16:12:16.844]             future::FutureResult(value = ...future.value$value, 
[16:12:16.844]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.844]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.844]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.844]                     ...future.globalenv.names))
[16:12:16.844]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.844]         }, condition = base::local({
[16:12:16.844]             c <- base::c
[16:12:16.844]             inherits <- base::inherits
[16:12:16.844]             invokeRestart <- base::invokeRestart
[16:12:16.844]             length <- base::length
[16:12:16.844]             list <- base::list
[16:12:16.844]             seq.int <- base::seq.int
[16:12:16.844]             signalCondition <- base::signalCondition
[16:12:16.844]             sys.calls <- base::sys.calls
[16:12:16.844]             `[[` <- base::`[[`
[16:12:16.844]             `+` <- base::`+`
[16:12:16.844]             `<<-` <- base::`<<-`
[16:12:16.844]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.844]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.844]                   3L)]
[16:12:16.844]             }
[16:12:16.844]             function(cond) {
[16:12:16.844]                 is_error <- inherits(cond, "error")
[16:12:16.844]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.844]                   NULL)
[16:12:16.844]                 if (is_error) {
[16:12:16.844]                   sessionInformation <- function() {
[16:12:16.844]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.844]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.844]                       search = base::search(), system = base::Sys.info())
[16:12:16.844]                   }
[16:12:16.844]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.844]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.844]                     cond$call), session = sessionInformation(), 
[16:12:16.844]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.844]                   signalCondition(cond)
[16:12:16.844]                 }
[16:12:16.844]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.844]                 "immediateCondition"))) {
[16:12:16.844]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.844]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.844]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.844]                   if (TRUE && !signal) {
[16:12:16.844]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.844]                     {
[16:12:16.844]                       inherits <- base::inherits
[16:12:16.844]                       invokeRestart <- base::invokeRestart
[16:12:16.844]                       is.null <- base::is.null
[16:12:16.844]                       muffled <- FALSE
[16:12:16.844]                       if (inherits(cond, "message")) {
[16:12:16.844]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.844]                         if (muffled) 
[16:12:16.844]                           invokeRestart("muffleMessage")
[16:12:16.844]                       }
[16:12:16.844]                       else if (inherits(cond, "warning")) {
[16:12:16.844]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.844]                         if (muffled) 
[16:12:16.844]                           invokeRestart("muffleWarning")
[16:12:16.844]                       }
[16:12:16.844]                       else if (inherits(cond, "condition")) {
[16:12:16.844]                         if (!is.null(pattern)) {
[16:12:16.844]                           computeRestarts <- base::computeRestarts
[16:12:16.844]                           grepl <- base::grepl
[16:12:16.844]                           restarts <- computeRestarts(cond)
[16:12:16.844]                           for (restart in restarts) {
[16:12:16.844]                             name <- restart$name
[16:12:16.844]                             if (is.null(name)) 
[16:12:16.844]                               next
[16:12:16.844]                             if (!grepl(pattern, name)) 
[16:12:16.844]                               next
[16:12:16.844]                             invokeRestart(restart)
[16:12:16.844]                             muffled <- TRUE
[16:12:16.844]                             break
[16:12:16.844]                           }
[16:12:16.844]                         }
[16:12:16.844]                       }
[16:12:16.844]                       invisible(muffled)
[16:12:16.844]                     }
[16:12:16.844]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.844]                   }
[16:12:16.844]                 }
[16:12:16.844]                 else {
[16:12:16.844]                   if (TRUE) {
[16:12:16.844]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.844]                     {
[16:12:16.844]                       inherits <- base::inherits
[16:12:16.844]                       invokeRestart <- base::invokeRestart
[16:12:16.844]                       is.null <- base::is.null
[16:12:16.844]                       muffled <- FALSE
[16:12:16.844]                       if (inherits(cond, "message")) {
[16:12:16.844]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.844]                         if (muffled) 
[16:12:16.844]                           invokeRestart("muffleMessage")
[16:12:16.844]                       }
[16:12:16.844]                       else if (inherits(cond, "warning")) {
[16:12:16.844]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.844]                         if (muffled) 
[16:12:16.844]                           invokeRestart("muffleWarning")
[16:12:16.844]                       }
[16:12:16.844]                       else if (inherits(cond, "condition")) {
[16:12:16.844]                         if (!is.null(pattern)) {
[16:12:16.844]                           computeRestarts <- base::computeRestarts
[16:12:16.844]                           grepl <- base::grepl
[16:12:16.844]                           restarts <- computeRestarts(cond)
[16:12:16.844]                           for (restart in restarts) {
[16:12:16.844]                             name <- restart$name
[16:12:16.844]                             if (is.null(name)) 
[16:12:16.844]                               next
[16:12:16.844]                             if (!grepl(pattern, name)) 
[16:12:16.844]                               next
[16:12:16.844]                             invokeRestart(restart)
[16:12:16.844]                             muffled <- TRUE
[16:12:16.844]                             break
[16:12:16.844]                           }
[16:12:16.844]                         }
[16:12:16.844]                       }
[16:12:16.844]                       invisible(muffled)
[16:12:16.844]                     }
[16:12:16.844]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.844]                   }
[16:12:16.844]                 }
[16:12:16.844]             }
[16:12:16.844]         }))
[16:12:16.844]     }, error = function(ex) {
[16:12:16.844]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.844]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.844]                 ...future.rng), started = ...future.startTime, 
[16:12:16.844]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.844]             version = "1.8"), class = "FutureResult")
[16:12:16.844]     }, finally = {
[16:12:16.844]         if (!identical(...future.workdir, getwd())) 
[16:12:16.844]             setwd(...future.workdir)
[16:12:16.844]         {
[16:12:16.844]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.844]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.844]             }
[16:12:16.844]             base::options(...future.oldOptions)
[16:12:16.844]             if (.Platform$OS.type == "windows") {
[16:12:16.844]                 old_names <- names(...future.oldEnvVars)
[16:12:16.844]                 envs <- base::Sys.getenv()
[16:12:16.844]                 names <- names(envs)
[16:12:16.844]                 common <- intersect(names, old_names)
[16:12:16.844]                 added <- setdiff(names, old_names)
[16:12:16.844]                 removed <- setdiff(old_names, names)
[16:12:16.844]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.844]                   envs[common]]
[16:12:16.844]                 NAMES <- toupper(changed)
[16:12:16.844]                 args <- list()
[16:12:16.844]                 for (kk in seq_along(NAMES)) {
[16:12:16.844]                   name <- changed[[kk]]
[16:12:16.844]                   NAME <- NAMES[[kk]]
[16:12:16.844]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.844]                     next
[16:12:16.844]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.844]                 }
[16:12:16.844]                 NAMES <- toupper(added)
[16:12:16.844]                 for (kk in seq_along(NAMES)) {
[16:12:16.844]                   name <- added[[kk]]
[16:12:16.844]                   NAME <- NAMES[[kk]]
[16:12:16.844]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.844]                     next
[16:12:16.844]                   args[[name]] <- ""
[16:12:16.844]                 }
[16:12:16.844]                 NAMES <- toupper(removed)
[16:12:16.844]                 for (kk in seq_along(NAMES)) {
[16:12:16.844]                   name <- removed[[kk]]
[16:12:16.844]                   NAME <- NAMES[[kk]]
[16:12:16.844]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.844]                     next
[16:12:16.844]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.844]                 }
[16:12:16.844]                 if (length(args) > 0) 
[16:12:16.844]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.844]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.844]             }
[16:12:16.844]             else {
[16:12:16.844]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.844]             }
[16:12:16.844]             {
[16:12:16.844]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.844]                   0L) {
[16:12:16.844]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.844]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.844]                   base::options(opts)
[16:12:16.844]                 }
[16:12:16.844]                 {
[16:12:16.844]                   {
[16:12:16.844]                     NULL
[16:12:16.844]                     RNGkind("Mersenne-Twister")
[16:12:16.844]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.844]                       inherits = FALSE)
[16:12:16.844]                   }
[16:12:16.844]                   options(future.plan = NULL)
[16:12:16.844]                   if (is.na(NA_character_)) 
[16:12:16.844]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.844]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.844]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.844]                   {
[16:12:16.844]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.844]                     if (!future$lazy) 
[16:12:16.844]                       future <- run(future)
[16:12:16.844]                     invisible(future)
[16:12:16.844]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.844]                 }
[16:12:16.844]             }
[16:12:16.844]         }
[16:12:16.844]     })
[16:12:16.844]     if (TRUE) {
[16:12:16.844]         base::sink(type = "output", split = FALSE)
[16:12:16.844]         if (TRUE) {
[16:12:16.844]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.844]         }
[16:12:16.844]         else {
[16:12:16.844]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.844]         }
[16:12:16.844]         base::close(...future.stdout)
[16:12:16.844]         ...future.stdout <- NULL
[16:12:16.844]     }
[16:12:16.844]     ...future.result$conditions <- ...future.conditions
[16:12:16.844]     ...future.result$finished <- base::Sys.time()
[16:12:16.844]     ...future.result
[16:12:16.844] }
[16:12:16.846] assign_globals() ...
[16:12:16.846] List of 1
[16:12:16.846]  $ ii: int 2
[16:12:16.846]  - attr(*, "where")=List of 1
[16:12:16.846]   ..$ ii:<environment: R_EmptyEnv> 
[16:12:16.846]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.846]  - attr(*, "resolved")= logi FALSE
[16:12:16.846]  - attr(*, "total_size")= num 56
[16:12:16.846]  - attr(*, "already-done")= logi TRUE
[16:12:16.848] - copied ‘ii’ to environment
[16:12:16.848] assign_globals() ... done
[16:12:16.848] plan(): Setting new future strategy stack:
[16:12:16.849] List of future strategies:
[16:12:16.849] 1. sequential:
[16:12:16.849]    - args: function (..., envir = parent.frame())
[16:12:16.849]    - tweaked: FALSE
[16:12:16.849]    - call: NULL
[16:12:16.849] plan(): nbrOfWorkers() = 1
[16:12:16.850] plan(): Setting new future strategy stack:
[16:12:16.850] List of future strategies:
[16:12:16.850] 1. sequential:
[16:12:16.850]    - args: function (..., envir = parent.frame())
[16:12:16.850]    - tweaked: FALSE
[16:12:16.850]    - call: plan(strategy)
[16:12:16.850] plan(): nbrOfWorkers() = 1
[16:12:16.850] SequentialFuture started (and completed)
[16:12:16.850] signalConditions() ...
[16:12:16.850]  - include = ‘immediateCondition’
[16:12:16.851]  - exclude = 
[16:12:16.851]  - resignal = FALSE
[16:12:16.851]  - Number of conditions: 1
[16:12:16.851] signalConditions() ... done
[16:12:16.851] - Launch lazy future ... done
[16:12:16.851] run() for ‘SequentialFuture’ ... done
[16:12:16.851] getGlobalsAndPackages() ...
[16:12:16.851] Searching for globals...
[16:12:16.854] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:16.854] Searching for globals ... DONE
[16:12:16.854] Resolving globals: FALSE
[16:12:16.854] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:16.855] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:16.855] - globals: [1] ‘ii’
[16:12:16.855] 
[16:12:16.855] getGlobalsAndPackages() ... DONE
[16:12:16.855] run() for ‘Future’ ...
[16:12:16.855] - state: ‘created’
[16:12:16.856] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.856] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.856] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.856]   - Field: ‘label’
[16:12:16.856]   - Field: ‘local’
[16:12:16.856]   - Field: ‘owner’
[16:12:16.856]   - Field: ‘envir’
[16:12:16.856]   - Field: ‘packages’
[16:12:16.856]   - Field: ‘gc’
[16:12:16.857]   - Field: ‘conditions’
[16:12:16.857]   - Field: ‘expr’
[16:12:16.857]   - Field: ‘uuid’
[16:12:16.857]   - Field: ‘seed’
[16:12:16.857]   - Field: ‘version’
[16:12:16.857]   - Field: ‘result’
[16:12:16.857]   - Field: ‘asynchronous’
[16:12:16.857]   - Field: ‘calls’
[16:12:16.857]   - Field: ‘globals’
[16:12:16.857]   - Field: ‘stdout’
[16:12:16.857]   - Field: ‘earlySignal’
[16:12:16.858]   - Field: ‘lazy’
[16:12:16.858]   - Field: ‘state’
[16:12:16.858] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.858] - Launch lazy future ...
[16:12:16.858] Packages needed by the future expression (n = 0): <none>
[16:12:16.858] Packages needed by future strategies (n = 0): <none>
[16:12:16.858] {
[16:12:16.858]     {
[16:12:16.858]         {
[16:12:16.858]             ...future.startTime <- base::Sys.time()
[16:12:16.858]             {
[16:12:16.858]                 {
[16:12:16.858]                   {
[16:12:16.858]                     base::local({
[16:12:16.858]                       has_future <- base::requireNamespace("future", 
[16:12:16.858]                         quietly = TRUE)
[16:12:16.858]                       if (has_future) {
[16:12:16.858]                         ns <- base::getNamespace("future")
[16:12:16.858]                         version <- ns[[".package"]][["version"]]
[16:12:16.858]                         if (is.null(version)) 
[16:12:16.858]                           version <- utils::packageVersion("future")
[16:12:16.858]                       }
[16:12:16.858]                       else {
[16:12:16.858]                         version <- NULL
[16:12:16.858]                       }
[16:12:16.858]                       if (!has_future || version < "1.8.0") {
[16:12:16.858]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.858]                           "", base::R.version$version.string), 
[16:12:16.858]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.858]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.858]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.858]                             "release", "version")], collapse = " "), 
[16:12:16.858]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.858]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.858]                           info)
[16:12:16.858]                         info <- base::paste(info, collapse = "; ")
[16:12:16.858]                         if (!has_future) {
[16:12:16.858]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.858]                             info)
[16:12:16.858]                         }
[16:12:16.858]                         else {
[16:12:16.858]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.858]                             info, version)
[16:12:16.858]                         }
[16:12:16.858]                         base::stop(msg)
[16:12:16.858]                       }
[16:12:16.858]                     })
[16:12:16.858]                   }
[16:12:16.858]                   options(future.plan = NULL)
[16:12:16.858]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.858]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.858]                 }
[16:12:16.858]                 ...future.workdir <- getwd()
[16:12:16.858]             }
[16:12:16.858]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.858]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.858]         }
[16:12:16.858]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.858]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.858]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.858]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.858]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.858]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.858]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.858]             base::names(...future.oldOptions))
[16:12:16.858]     }
[16:12:16.858]     if (FALSE) {
[16:12:16.858]     }
[16:12:16.858]     else {
[16:12:16.858]         if (TRUE) {
[16:12:16.858]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.858]                 open = "w")
[16:12:16.858]         }
[16:12:16.858]         else {
[16:12:16.858]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.858]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.858]         }
[16:12:16.858]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.858]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.858]             base::sink(type = "output", split = FALSE)
[16:12:16.858]             base::close(...future.stdout)
[16:12:16.858]         }, add = TRUE)
[16:12:16.858]     }
[16:12:16.858]     ...future.frame <- base::sys.nframe()
[16:12:16.858]     ...future.conditions <- base::list()
[16:12:16.858]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.858]     if (FALSE) {
[16:12:16.858]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.858]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.858]     }
[16:12:16.858]     ...future.result <- base::tryCatch({
[16:12:16.858]         base::withCallingHandlers({
[16:12:16.858]             ...future.value <- base::withVisible(base::local({
[16:12:16.858]                 if (ii%%2 == 0) 
[16:12:16.858]                   stop("Woops!")
[16:12:16.858]                 ii
[16:12:16.858]             }))
[16:12:16.858]             future::FutureResult(value = ...future.value$value, 
[16:12:16.858]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.858]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.858]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.858]                     ...future.globalenv.names))
[16:12:16.858]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.858]         }, condition = base::local({
[16:12:16.858]             c <- base::c
[16:12:16.858]             inherits <- base::inherits
[16:12:16.858]             invokeRestart <- base::invokeRestart
[16:12:16.858]             length <- base::length
[16:12:16.858]             list <- base::list
[16:12:16.858]             seq.int <- base::seq.int
[16:12:16.858]             signalCondition <- base::signalCondition
[16:12:16.858]             sys.calls <- base::sys.calls
[16:12:16.858]             `[[` <- base::`[[`
[16:12:16.858]             `+` <- base::`+`
[16:12:16.858]             `<<-` <- base::`<<-`
[16:12:16.858]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.858]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.858]                   3L)]
[16:12:16.858]             }
[16:12:16.858]             function(cond) {
[16:12:16.858]                 is_error <- inherits(cond, "error")
[16:12:16.858]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.858]                   NULL)
[16:12:16.858]                 if (is_error) {
[16:12:16.858]                   sessionInformation <- function() {
[16:12:16.858]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.858]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.858]                       search = base::search(), system = base::Sys.info())
[16:12:16.858]                   }
[16:12:16.858]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.858]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.858]                     cond$call), session = sessionInformation(), 
[16:12:16.858]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.858]                   signalCondition(cond)
[16:12:16.858]                 }
[16:12:16.858]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.858]                 "immediateCondition"))) {
[16:12:16.858]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.858]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.858]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.858]                   if (TRUE && !signal) {
[16:12:16.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.858]                     {
[16:12:16.858]                       inherits <- base::inherits
[16:12:16.858]                       invokeRestart <- base::invokeRestart
[16:12:16.858]                       is.null <- base::is.null
[16:12:16.858]                       muffled <- FALSE
[16:12:16.858]                       if (inherits(cond, "message")) {
[16:12:16.858]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.858]                         if (muffled) 
[16:12:16.858]                           invokeRestart("muffleMessage")
[16:12:16.858]                       }
[16:12:16.858]                       else if (inherits(cond, "warning")) {
[16:12:16.858]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.858]                         if (muffled) 
[16:12:16.858]                           invokeRestart("muffleWarning")
[16:12:16.858]                       }
[16:12:16.858]                       else if (inherits(cond, "condition")) {
[16:12:16.858]                         if (!is.null(pattern)) {
[16:12:16.858]                           computeRestarts <- base::computeRestarts
[16:12:16.858]                           grepl <- base::grepl
[16:12:16.858]                           restarts <- computeRestarts(cond)
[16:12:16.858]                           for (restart in restarts) {
[16:12:16.858]                             name <- restart$name
[16:12:16.858]                             if (is.null(name)) 
[16:12:16.858]                               next
[16:12:16.858]                             if (!grepl(pattern, name)) 
[16:12:16.858]                               next
[16:12:16.858]                             invokeRestart(restart)
[16:12:16.858]                             muffled <- TRUE
[16:12:16.858]                             break
[16:12:16.858]                           }
[16:12:16.858]                         }
[16:12:16.858]                       }
[16:12:16.858]                       invisible(muffled)
[16:12:16.858]                     }
[16:12:16.858]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.858]                   }
[16:12:16.858]                 }
[16:12:16.858]                 else {
[16:12:16.858]                   if (TRUE) {
[16:12:16.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.858]                     {
[16:12:16.858]                       inherits <- base::inherits
[16:12:16.858]                       invokeRestart <- base::invokeRestart
[16:12:16.858]                       is.null <- base::is.null
[16:12:16.858]                       muffled <- FALSE
[16:12:16.858]                       if (inherits(cond, "message")) {
[16:12:16.858]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.858]                         if (muffled) 
[16:12:16.858]                           invokeRestart("muffleMessage")
[16:12:16.858]                       }
[16:12:16.858]                       else if (inherits(cond, "warning")) {
[16:12:16.858]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.858]                         if (muffled) 
[16:12:16.858]                           invokeRestart("muffleWarning")
[16:12:16.858]                       }
[16:12:16.858]                       else if (inherits(cond, "condition")) {
[16:12:16.858]                         if (!is.null(pattern)) {
[16:12:16.858]                           computeRestarts <- base::computeRestarts
[16:12:16.858]                           grepl <- base::grepl
[16:12:16.858]                           restarts <- computeRestarts(cond)
[16:12:16.858]                           for (restart in restarts) {
[16:12:16.858]                             name <- restart$name
[16:12:16.858]                             if (is.null(name)) 
[16:12:16.858]                               next
[16:12:16.858]                             if (!grepl(pattern, name)) 
[16:12:16.858]                               next
[16:12:16.858]                             invokeRestart(restart)
[16:12:16.858]                             muffled <- TRUE
[16:12:16.858]                             break
[16:12:16.858]                           }
[16:12:16.858]                         }
[16:12:16.858]                       }
[16:12:16.858]                       invisible(muffled)
[16:12:16.858]                     }
[16:12:16.858]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.858]                   }
[16:12:16.858]                 }
[16:12:16.858]             }
[16:12:16.858]         }))
[16:12:16.858]     }, error = function(ex) {
[16:12:16.858]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.858]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.858]                 ...future.rng), started = ...future.startTime, 
[16:12:16.858]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.858]             version = "1.8"), class = "FutureResult")
[16:12:16.858]     }, finally = {
[16:12:16.858]         if (!identical(...future.workdir, getwd())) 
[16:12:16.858]             setwd(...future.workdir)
[16:12:16.858]         {
[16:12:16.858]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.858]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.858]             }
[16:12:16.858]             base::options(...future.oldOptions)
[16:12:16.858]             if (.Platform$OS.type == "windows") {
[16:12:16.858]                 old_names <- names(...future.oldEnvVars)
[16:12:16.858]                 envs <- base::Sys.getenv()
[16:12:16.858]                 names <- names(envs)
[16:12:16.858]                 common <- intersect(names, old_names)
[16:12:16.858]                 added <- setdiff(names, old_names)
[16:12:16.858]                 removed <- setdiff(old_names, names)
[16:12:16.858]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.858]                   envs[common]]
[16:12:16.858]                 NAMES <- toupper(changed)
[16:12:16.858]                 args <- list()
[16:12:16.858]                 for (kk in seq_along(NAMES)) {
[16:12:16.858]                   name <- changed[[kk]]
[16:12:16.858]                   NAME <- NAMES[[kk]]
[16:12:16.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.858]                     next
[16:12:16.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.858]                 }
[16:12:16.858]                 NAMES <- toupper(added)
[16:12:16.858]                 for (kk in seq_along(NAMES)) {
[16:12:16.858]                   name <- added[[kk]]
[16:12:16.858]                   NAME <- NAMES[[kk]]
[16:12:16.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.858]                     next
[16:12:16.858]                   args[[name]] <- ""
[16:12:16.858]                 }
[16:12:16.858]                 NAMES <- toupper(removed)
[16:12:16.858]                 for (kk in seq_along(NAMES)) {
[16:12:16.858]                   name <- removed[[kk]]
[16:12:16.858]                   NAME <- NAMES[[kk]]
[16:12:16.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.858]                     next
[16:12:16.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.858]                 }
[16:12:16.858]                 if (length(args) > 0) 
[16:12:16.858]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.858]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.858]             }
[16:12:16.858]             else {
[16:12:16.858]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.858]             }
[16:12:16.858]             {
[16:12:16.858]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.858]                   0L) {
[16:12:16.858]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.858]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.858]                   base::options(opts)
[16:12:16.858]                 }
[16:12:16.858]                 {
[16:12:16.858]                   {
[16:12:16.858]                     NULL
[16:12:16.858]                     RNGkind("Mersenne-Twister")
[16:12:16.858]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.858]                       inherits = FALSE)
[16:12:16.858]                   }
[16:12:16.858]                   options(future.plan = NULL)
[16:12:16.858]                   if (is.na(NA_character_)) 
[16:12:16.858]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.858]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.858]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.858]                   {
[16:12:16.858]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.858]                     if (!future$lazy) 
[16:12:16.858]                       future <- run(future)
[16:12:16.858]                     invisible(future)
[16:12:16.858]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.858]                 }
[16:12:16.858]             }
[16:12:16.858]         }
[16:12:16.858]     })
[16:12:16.858]     if (TRUE) {
[16:12:16.858]         base::sink(type = "output", split = FALSE)
[16:12:16.858]         if (TRUE) {
[16:12:16.858]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.858]         }
[16:12:16.858]         else {
[16:12:16.858]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.858]         }
[16:12:16.858]         base::close(...future.stdout)
[16:12:16.858]         ...future.stdout <- NULL
[16:12:16.858]     }
[16:12:16.858]     ...future.result$conditions <- ...future.conditions
[16:12:16.858]     ...future.result$finished <- base::Sys.time()
[16:12:16.858]     ...future.result
[16:12:16.858] }
[16:12:16.860] assign_globals() ...
[16:12:16.860] List of 1
[16:12:16.860]  $ ii: int 3
[16:12:16.860]  - attr(*, "where")=List of 1
[16:12:16.860]   ..$ ii:<environment: R_EmptyEnv> 
[16:12:16.860]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.860]  - attr(*, "resolved")= logi FALSE
[16:12:16.860]  - attr(*, "total_size")= num 56
[16:12:16.860]  - attr(*, "already-done")= logi TRUE
[16:12:16.862] - copied ‘ii’ to environment
[16:12:16.862] assign_globals() ... done
[16:12:16.863] plan(): Setting new future strategy stack:
[16:12:16.863] List of future strategies:
[16:12:16.863] 1. sequential:
[16:12:16.863]    - args: function (..., envir = parent.frame())
[16:12:16.863]    - tweaked: FALSE
[16:12:16.863]    - call: NULL
[16:12:16.863] plan(): nbrOfWorkers() = 1
[16:12:16.864] plan(): Setting new future strategy stack:
[16:12:16.864] List of future strategies:
[16:12:16.864] 1. sequential:
[16:12:16.864]    - args: function (..., envir = parent.frame())
[16:12:16.864]    - tweaked: FALSE
[16:12:16.864]    - call: plan(strategy)
[16:12:16.864] plan(): nbrOfWorkers() = 1
[16:12:16.864] SequentialFuture started (and completed)
[16:12:16.864] - Launch lazy future ... done
[16:12:16.865] run() for ‘SequentialFuture’ ... done
[16:12:16.865] signalConditions() ...
[16:12:16.865]  - include = ‘immediateCondition’
[16:12:16.865]  - exclude = 
[16:12:16.865]  - resignal = FALSE
[16:12:16.865]  - Number of conditions: 1
[16:12:16.865] signalConditions() ... done
[16:12:16.865] Future state: ‘finished’
[16:12:16.866] signalConditions() ...
[16:12:16.866]  - include = ‘condition’
[16:12:16.866]  - exclude = ‘immediateCondition’
[16:12:16.866]  - resignal = TRUE
[16:12:16.866]  - Number of conditions: 1
[16:12:16.866]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:16.866] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:12:16.867] signalConditions() ...
[16:12:16.867]  - include = ‘immediateCondition’
[16:12:16.867]  - exclude = 
[16:12:16.867]  - resignal = FALSE
[16:12:16.868]  - Number of conditions: 1
[16:12:16.868] signalConditions() ... done
[16:12:16.868] Future state: ‘finished’
[16:12:16.868] signalConditions() ...
[16:12:16.868]  - include = ‘condition’
[16:12:16.868]  - exclude = ‘immediateCondition’
[16:12:16.868]  - resignal = TRUE
[16:12:16.868]  - Number of conditions: 1
[16:12:16.868]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:16.868] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:12:16.869] signalConditions() ...
[16:12:16.869]  - include = ‘immediateCondition’
[16:12:16.869]  - exclude = 
[16:12:16.869]  - resignal = FALSE
[16:12:16.869]  - Number of conditions: 1
[16:12:16.869] signalConditions() ... done
[16:12:16.869] Future state: ‘finished’
[16:12:16.869] signalConditions() ...
[16:12:16.870]  - include = ‘condition’
[16:12:16.870]  - exclude = ‘immediateCondition’
[16:12:16.870]  - resignal = TRUE
[16:12:16.870]  - Number of conditions: 1
[16:12:16.870]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:16.870] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[16:12:16.870] getGlobalsAndPackages() ...
[16:12:16.870] Searching for globals...
[16:12:16.872] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[16:12:16.872] Searching for globals ... DONE
[16:12:16.872] Resolving globals: FALSE
[16:12:16.873] 
[16:12:16.873] 
[16:12:16.873] getGlobalsAndPackages() ... DONE
[16:12:16.873] run() for ‘Future’ ...
[16:12:16.873] - state: ‘created’
[16:12:16.873] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.874] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.874] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.874]   - Field: ‘label’
[16:12:16.874]   - Field: ‘local’
[16:12:16.874]   - Field: ‘owner’
[16:12:16.874]   - Field: ‘envir’
[16:12:16.874]   - Field: ‘packages’
[16:12:16.874]   - Field: ‘gc’
[16:12:16.874]   - Field: ‘conditions’
[16:12:16.875]   - Field: ‘expr’
[16:12:16.875]   - Field: ‘uuid’
[16:12:16.875]   - Field: ‘seed’
[16:12:16.875]   - Field: ‘version’
[16:12:16.875]   - Field: ‘result’
[16:12:16.875]   - Field: ‘asynchronous’
[16:12:16.875]   - Field: ‘calls’
[16:12:16.875]   - Field: ‘globals’
[16:12:16.875]   - Field: ‘stdout’
[16:12:16.875]   - Field: ‘earlySignal’
[16:12:16.875]   - Field: ‘lazy’
[16:12:16.875]   - Field: ‘state’
[16:12:16.876] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.876] - Launch lazy future ...
[16:12:16.876] Packages needed by the future expression (n = 0): <none>
[16:12:16.876] Packages needed by future strategies (n = 0): <none>
[16:12:16.876] {
[16:12:16.876]     {
[16:12:16.876]         {
[16:12:16.876]             ...future.startTime <- base::Sys.time()
[16:12:16.876]             {
[16:12:16.876]                 {
[16:12:16.876]                   {
[16:12:16.876]                     base::local({
[16:12:16.876]                       has_future <- base::requireNamespace("future", 
[16:12:16.876]                         quietly = TRUE)
[16:12:16.876]                       if (has_future) {
[16:12:16.876]                         ns <- base::getNamespace("future")
[16:12:16.876]                         version <- ns[[".package"]][["version"]]
[16:12:16.876]                         if (is.null(version)) 
[16:12:16.876]                           version <- utils::packageVersion("future")
[16:12:16.876]                       }
[16:12:16.876]                       else {
[16:12:16.876]                         version <- NULL
[16:12:16.876]                       }
[16:12:16.876]                       if (!has_future || version < "1.8.0") {
[16:12:16.876]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.876]                           "", base::R.version$version.string), 
[16:12:16.876]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.876]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.876]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.876]                             "release", "version")], collapse = " "), 
[16:12:16.876]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.876]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.876]                           info)
[16:12:16.876]                         info <- base::paste(info, collapse = "; ")
[16:12:16.876]                         if (!has_future) {
[16:12:16.876]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.876]                             info)
[16:12:16.876]                         }
[16:12:16.876]                         else {
[16:12:16.876]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.876]                             info, version)
[16:12:16.876]                         }
[16:12:16.876]                         base::stop(msg)
[16:12:16.876]                       }
[16:12:16.876]                     })
[16:12:16.876]                   }
[16:12:16.876]                   options(future.plan = NULL)
[16:12:16.876]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.876]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.876]                 }
[16:12:16.876]                 ...future.workdir <- getwd()
[16:12:16.876]             }
[16:12:16.876]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.876]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.876]         }
[16:12:16.876]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.876]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.876]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.876]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.876]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.876]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.876]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.876]             base::names(...future.oldOptions))
[16:12:16.876]     }
[16:12:16.876]     if (FALSE) {
[16:12:16.876]     }
[16:12:16.876]     else {
[16:12:16.876]         if (TRUE) {
[16:12:16.876]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.876]                 open = "w")
[16:12:16.876]         }
[16:12:16.876]         else {
[16:12:16.876]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.876]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.876]         }
[16:12:16.876]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.876]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.876]             base::sink(type = "output", split = FALSE)
[16:12:16.876]             base::close(...future.stdout)
[16:12:16.876]         }, add = TRUE)
[16:12:16.876]     }
[16:12:16.876]     ...future.frame <- base::sys.nframe()
[16:12:16.876]     ...future.conditions <- base::list()
[16:12:16.876]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.876]     if (FALSE) {
[16:12:16.876]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.876]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.876]     }
[16:12:16.876]     ...future.result <- base::tryCatch({
[16:12:16.876]         base::withCallingHandlers({
[16:12:16.876]             ...future.value <- base::withVisible(base::local({
[16:12:16.876]                 cat("Processing: ")
[16:12:16.876]                 for (ii in 1:10) {
[16:12:16.876]                   cat(".")
[16:12:16.876]                 }
[16:12:16.876]                 cat(" [100%]\n")
[16:12:16.876]                 4
[16:12:16.876]             }))
[16:12:16.876]             future::FutureResult(value = ...future.value$value, 
[16:12:16.876]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.876]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.876]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.876]                     ...future.globalenv.names))
[16:12:16.876]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.876]         }, condition = base::local({
[16:12:16.876]             c <- base::c
[16:12:16.876]             inherits <- base::inherits
[16:12:16.876]             invokeRestart <- base::invokeRestart
[16:12:16.876]             length <- base::length
[16:12:16.876]             list <- base::list
[16:12:16.876]             seq.int <- base::seq.int
[16:12:16.876]             signalCondition <- base::signalCondition
[16:12:16.876]             sys.calls <- base::sys.calls
[16:12:16.876]             `[[` <- base::`[[`
[16:12:16.876]             `+` <- base::`+`
[16:12:16.876]             `<<-` <- base::`<<-`
[16:12:16.876]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.876]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.876]                   3L)]
[16:12:16.876]             }
[16:12:16.876]             function(cond) {
[16:12:16.876]                 is_error <- inherits(cond, "error")
[16:12:16.876]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.876]                   NULL)
[16:12:16.876]                 if (is_error) {
[16:12:16.876]                   sessionInformation <- function() {
[16:12:16.876]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.876]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.876]                       search = base::search(), system = base::Sys.info())
[16:12:16.876]                   }
[16:12:16.876]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.876]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.876]                     cond$call), session = sessionInformation(), 
[16:12:16.876]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.876]                   signalCondition(cond)
[16:12:16.876]                 }
[16:12:16.876]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.876]                 "immediateCondition"))) {
[16:12:16.876]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.876]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.876]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.876]                   if (TRUE && !signal) {
[16:12:16.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.876]                     {
[16:12:16.876]                       inherits <- base::inherits
[16:12:16.876]                       invokeRestart <- base::invokeRestart
[16:12:16.876]                       is.null <- base::is.null
[16:12:16.876]                       muffled <- FALSE
[16:12:16.876]                       if (inherits(cond, "message")) {
[16:12:16.876]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.876]                         if (muffled) 
[16:12:16.876]                           invokeRestart("muffleMessage")
[16:12:16.876]                       }
[16:12:16.876]                       else if (inherits(cond, "warning")) {
[16:12:16.876]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.876]                         if (muffled) 
[16:12:16.876]                           invokeRestart("muffleWarning")
[16:12:16.876]                       }
[16:12:16.876]                       else if (inherits(cond, "condition")) {
[16:12:16.876]                         if (!is.null(pattern)) {
[16:12:16.876]                           computeRestarts <- base::computeRestarts
[16:12:16.876]                           grepl <- base::grepl
[16:12:16.876]                           restarts <- computeRestarts(cond)
[16:12:16.876]                           for (restart in restarts) {
[16:12:16.876]                             name <- restart$name
[16:12:16.876]                             if (is.null(name)) 
[16:12:16.876]                               next
[16:12:16.876]                             if (!grepl(pattern, name)) 
[16:12:16.876]                               next
[16:12:16.876]                             invokeRestart(restart)
[16:12:16.876]                             muffled <- TRUE
[16:12:16.876]                             break
[16:12:16.876]                           }
[16:12:16.876]                         }
[16:12:16.876]                       }
[16:12:16.876]                       invisible(muffled)
[16:12:16.876]                     }
[16:12:16.876]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.876]                   }
[16:12:16.876]                 }
[16:12:16.876]                 else {
[16:12:16.876]                   if (TRUE) {
[16:12:16.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.876]                     {
[16:12:16.876]                       inherits <- base::inherits
[16:12:16.876]                       invokeRestart <- base::invokeRestart
[16:12:16.876]                       is.null <- base::is.null
[16:12:16.876]                       muffled <- FALSE
[16:12:16.876]                       if (inherits(cond, "message")) {
[16:12:16.876]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.876]                         if (muffled) 
[16:12:16.876]                           invokeRestart("muffleMessage")
[16:12:16.876]                       }
[16:12:16.876]                       else if (inherits(cond, "warning")) {
[16:12:16.876]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.876]                         if (muffled) 
[16:12:16.876]                           invokeRestart("muffleWarning")
[16:12:16.876]                       }
[16:12:16.876]                       else if (inherits(cond, "condition")) {
[16:12:16.876]                         if (!is.null(pattern)) {
[16:12:16.876]                           computeRestarts <- base::computeRestarts
[16:12:16.876]                           grepl <- base::grepl
[16:12:16.876]                           restarts <- computeRestarts(cond)
[16:12:16.876]                           for (restart in restarts) {
[16:12:16.876]                             name <- restart$name
[16:12:16.876]                             if (is.null(name)) 
[16:12:16.876]                               next
[16:12:16.876]                             if (!grepl(pattern, name)) 
[16:12:16.876]                               next
[16:12:16.876]                             invokeRestart(restart)
[16:12:16.876]                             muffled <- TRUE
[16:12:16.876]                             break
[16:12:16.876]                           }
[16:12:16.876]                         }
[16:12:16.876]                       }
[16:12:16.876]                       invisible(muffled)
[16:12:16.876]                     }
[16:12:16.876]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.876]                   }
[16:12:16.876]                 }
[16:12:16.876]             }
[16:12:16.876]         }))
[16:12:16.876]     }, error = function(ex) {
[16:12:16.876]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.876]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.876]                 ...future.rng), started = ...future.startTime, 
[16:12:16.876]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.876]             version = "1.8"), class = "FutureResult")
[16:12:16.876]     }, finally = {
[16:12:16.876]         if (!identical(...future.workdir, getwd())) 
[16:12:16.876]             setwd(...future.workdir)
[16:12:16.876]         {
[16:12:16.876]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.876]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.876]             }
[16:12:16.876]             base::options(...future.oldOptions)
[16:12:16.876]             if (.Platform$OS.type == "windows") {
[16:12:16.876]                 old_names <- names(...future.oldEnvVars)
[16:12:16.876]                 envs <- base::Sys.getenv()
[16:12:16.876]                 names <- names(envs)
[16:12:16.876]                 common <- intersect(names, old_names)
[16:12:16.876]                 added <- setdiff(names, old_names)
[16:12:16.876]                 removed <- setdiff(old_names, names)
[16:12:16.876]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.876]                   envs[common]]
[16:12:16.876]                 NAMES <- toupper(changed)
[16:12:16.876]                 args <- list()
[16:12:16.876]                 for (kk in seq_along(NAMES)) {
[16:12:16.876]                   name <- changed[[kk]]
[16:12:16.876]                   NAME <- NAMES[[kk]]
[16:12:16.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.876]                     next
[16:12:16.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.876]                 }
[16:12:16.876]                 NAMES <- toupper(added)
[16:12:16.876]                 for (kk in seq_along(NAMES)) {
[16:12:16.876]                   name <- added[[kk]]
[16:12:16.876]                   NAME <- NAMES[[kk]]
[16:12:16.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.876]                     next
[16:12:16.876]                   args[[name]] <- ""
[16:12:16.876]                 }
[16:12:16.876]                 NAMES <- toupper(removed)
[16:12:16.876]                 for (kk in seq_along(NAMES)) {
[16:12:16.876]                   name <- removed[[kk]]
[16:12:16.876]                   NAME <- NAMES[[kk]]
[16:12:16.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.876]                     next
[16:12:16.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.876]                 }
[16:12:16.876]                 if (length(args) > 0) 
[16:12:16.876]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.876]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.876]             }
[16:12:16.876]             else {
[16:12:16.876]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.876]             }
[16:12:16.876]             {
[16:12:16.876]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.876]                   0L) {
[16:12:16.876]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.876]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.876]                   base::options(opts)
[16:12:16.876]                 }
[16:12:16.876]                 {
[16:12:16.876]                   {
[16:12:16.876]                     NULL
[16:12:16.876]                     RNGkind("Mersenne-Twister")
[16:12:16.876]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.876]                       inherits = FALSE)
[16:12:16.876]                   }
[16:12:16.876]                   options(future.plan = NULL)
[16:12:16.876]                   if (is.na(NA_character_)) 
[16:12:16.876]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.876]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.876]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.876]                   {
[16:12:16.876]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.876]                     if (!future$lazy) 
[16:12:16.876]                       future <- run(future)
[16:12:16.876]                     invisible(future)
[16:12:16.876]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.876]                 }
[16:12:16.876]             }
[16:12:16.876]         }
[16:12:16.876]     })
[16:12:16.876]     if (TRUE) {
[16:12:16.876]         base::sink(type = "output", split = FALSE)
[16:12:16.876]         if (TRUE) {
[16:12:16.876]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.876]         }
[16:12:16.876]         else {
[16:12:16.876]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.876]         }
[16:12:16.876]         base::close(...future.stdout)
[16:12:16.876]         ...future.stdout <- NULL
[16:12:16.876]     }
[16:12:16.876]     ...future.result$conditions <- ...future.conditions
[16:12:16.876]     ...future.result$finished <- base::Sys.time()
[16:12:16.876]     ...future.result
[16:12:16.876] }
[16:12:16.878] plan(): Setting new future strategy stack:
[16:12:16.878] List of future strategies:
[16:12:16.878] 1. sequential:
[16:12:16.878]    - args: function (..., envir = parent.frame())
[16:12:16.878]    - tweaked: FALSE
[16:12:16.878]    - call: NULL
[16:12:16.879] plan(): nbrOfWorkers() = 1
[16:12:16.881] plan(): Setting new future strategy stack:
[16:12:16.881] List of future strategies:
[16:12:16.881] 1. sequential:
[16:12:16.881]    - args: function (..., envir = parent.frame())
[16:12:16.881]    - tweaked: FALSE
[16:12:16.881]    - call: plan(strategy)
[16:12:16.881] plan(): nbrOfWorkers() = 1
[16:12:16.882] SequentialFuture started (and completed)
[16:12:16.882] - Launch lazy future ... done
[16:12:16.882] run() for ‘SequentialFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[16:12:16.883] signalConditions() ...
[16:12:16.883]  - include = ‘immediateCondition’
[16:12:16.883]  - exclude = 
[16:12:16.884]  - resignal = FALSE
[16:12:16.884]  - Number of conditions: 1
[16:12:16.884] signalConditions() ... done
[16:12:16.884] Future state: ‘finished’
[16:12:16.884] signalConditions() ...
[16:12:16.884]  - include = ‘condition’
[16:12:16.884]  - exclude = ‘immediateCondition’
[16:12:16.884]  - resignal = TRUE
[16:12:16.884]  - Number of conditions: 1
[16:12:16.884]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:16.885] signalConditions() ... done
v3: <simpleError> (as expect)
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[16:12:16.885] getGlobalsAndPackages() ...
[16:12:16.885] Searching for globals...
[16:12:16.885] 
[16:12:16.885] Searching for globals ... DONE
[16:12:16.886] - globals: [0] <none>
[16:12:16.886] getGlobalsAndPackages() ... DONE
[16:12:16.886] run() for ‘Future’ ...
[16:12:16.886] - state: ‘created’
[16:12:16.886] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.886] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.886] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.887]   - Field: ‘label’
[16:12:16.887]   - Field: ‘local’
[16:12:16.887]   - Field: ‘owner’
[16:12:16.887]   - Field: ‘envir’
[16:12:16.887]   - Field: ‘packages’
[16:12:16.887]   - Field: ‘gc’
[16:12:16.887]   - Field: ‘conditions’
[16:12:16.887]   - Field: ‘expr’
[16:12:16.887]   - Field: ‘uuid’
[16:12:16.887]   - Field: ‘seed’
[16:12:16.887]   - Field: ‘version’
[16:12:16.888]   - Field: ‘result’
[16:12:16.888]   - Field: ‘asynchronous’
[16:12:16.888]   - Field: ‘calls’
[16:12:16.888]   - Field: ‘globals’
[16:12:16.888]   - Field: ‘stdout’
[16:12:16.888]   - Field: ‘earlySignal’
[16:12:16.888]   - Field: ‘lazy’
[16:12:16.888]   - Field: ‘state’
[16:12:16.888] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.888] - Launch lazy future ...
[16:12:16.889] Packages needed by the future expression (n = 0): <none>
[16:12:16.889] Packages needed by future strategies (n = 0): <none>
[16:12:16.889] {
[16:12:16.889]     {
[16:12:16.889]         {
[16:12:16.889]             ...future.startTime <- base::Sys.time()
[16:12:16.889]             {
[16:12:16.889]                 {
[16:12:16.889]                   {
[16:12:16.889]                     base::local({
[16:12:16.889]                       has_future <- base::requireNamespace("future", 
[16:12:16.889]                         quietly = TRUE)
[16:12:16.889]                       if (has_future) {
[16:12:16.889]                         ns <- base::getNamespace("future")
[16:12:16.889]                         version <- ns[[".package"]][["version"]]
[16:12:16.889]                         if (is.null(version)) 
[16:12:16.889]                           version <- utils::packageVersion("future")
[16:12:16.889]                       }
[16:12:16.889]                       else {
[16:12:16.889]                         version <- NULL
[16:12:16.889]                       }
[16:12:16.889]                       if (!has_future || version < "1.8.0") {
[16:12:16.889]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.889]                           "", base::R.version$version.string), 
[16:12:16.889]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.889]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.889]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.889]                             "release", "version")], collapse = " "), 
[16:12:16.889]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.889]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.889]                           info)
[16:12:16.889]                         info <- base::paste(info, collapse = "; ")
[16:12:16.889]                         if (!has_future) {
[16:12:16.889]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.889]                             info)
[16:12:16.889]                         }
[16:12:16.889]                         else {
[16:12:16.889]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.889]                             info, version)
[16:12:16.889]                         }
[16:12:16.889]                         base::stop(msg)
[16:12:16.889]                       }
[16:12:16.889]                     })
[16:12:16.889]                   }
[16:12:16.889]                   options(future.plan = NULL)
[16:12:16.889]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.889]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.889]                 }
[16:12:16.889]                 ...future.workdir <- getwd()
[16:12:16.889]             }
[16:12:16.889]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.889]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.889]         }
[16:12:16.889]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.889]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.889]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.889]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.889]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.889]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.889]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.889]             base::names(...future.oldOptions))
[16:12:16.889]     }
[16:12:16.889]     if (FALSE) {
[16:12:16.889]     }
[16:12:16.889]     else {
[16:12:16.889]         if (TRUE) {
[16:12:16.889]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.889]                 open = "w")
[16:12:16.889]         }
[16:12:16.889]         else {
[16:12:16.889]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.889]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.889]         }
[16:12:16.889]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.889]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.889]             base::sink(type = "output", split = FALSE)
[16:12:16.889]             base::close(...future.stdout)
[16:12:16.889]         }, add = TRUE)
[16:12:16.889]     }
[16:12:16.889]     ...future.frame <- base::sys.nframe()
[16:12:16.889]     ...future.conditions <- base::list()
[16:12:16.889]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.889]     if (FALSE) {
[16:12:16.889]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.889]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.889]     }
[16:12:16.889]     ...future.result <- base::tryCatch({
[16:12:16.889]         base::withCallingHandlers({
[16:12:16.889]             ...future.value <- base::withVisible(base::local(1))
[16:12:16.889]             future::FutureResult(value = ...future.value$value, 
[16:12:16.889]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.889]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.889]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.889]                     ...future.globalenv.names))
[16:12:16.889]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.889]         }, condition = base::local({
[16:12:16.889]             c <- base::c
[16:12:16.889]             inherits <- base::inherits
[16:12:16.889]             invokeRestart <- base::invokeRestart
[16:12:16.889]             length <- base::length
[16:12:16.889]             list <- base::list
[16:12:16.889]             seq.int <- base::seq.int
[16:12:16.889]             signalCondition <- base::signalCondition
[16:12:16.889]             sys.calls <- base::sys.calls
[16:12:16.889]             `[[` <- base::`[[`
[16:12:16.889]             `+` <- base::`+`
[16:12:16.889]             `<<-` <- base::`<<-`
[16:12:16.889]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.889]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.889]                   3L)]
[16:12:16.889]             }
[16:12:16.889]             function(cond) {
[16:12:16.889]                 is_error <- inherits(cond, "error")
[16:12:16.889]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.889]                   NULL)
[16:12:16.889]                 if (is_error) {
[16:12:16.889]                   sessionInformation <- function() {
[16:12:16.889]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.889]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.889]                       search = base::search(), system = base::Sys.info())
[16:12:16.889]                   }
[16:12:16.889]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.889]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.889]                     cond$call), session = sessionInformation(), 
[16:12:16.889]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.889]                   signalCondition(cond)
[16:12:16.889]                 }
[16:12:16.889]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.889]                 "immediateCondition"))) {
[16:12:16.889]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.889]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.889]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.889]                   if (TRUE && !signal) {
[16:12:16.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.889]                     {
[16:12:16.889]                       inherits <- base::inherits
[16:12:16.889]                       invokeRestart <- base::invokeRestart
[16:12:16.889]                       is.null <- base::is.null
[16:12:16.889]                       muffled <- FALSE
[16:12:16.889]                       if (inherits(cond, "message")) {
[16:12:16.889]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.889]                         if (muffled) 
[16:12:16.889]                           invokeRestart("muffleMessage")
[16:12:16.889]                       }
[16:12:16.889]                       else if (inherits(cond, "warning")) {
[16:12:16.889]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.889]                         if (muffled) 
[16:12:16.889]                           invokeRestart("muffleWarning")
[16:12:16.889]                       }
[16:12:16.889]                       else if (inherits(cond, "condition")) {
[16:12:16.889]                         if (!is.null(pattern)) {
[16:12:16.889]                           computeRestarts <- base::computeRestarts
[16:12:16.889]                           grepl <- base::grepl
[16:12:16.889]                           restarts <- computeRestarts(cond)
[16:12:16.889]                           for (restart in restarts) {
[16:12:16.889]                             name <- restart$name
[16:12:16.889]                             if (is.null(name)) 
[16:12:16.889]                               next
[16:12:16.889]                             if (!grepl(pattern, name)) 
[16:12:16.889]                               next
[16:12:16.889]                             invokeRestart(restart)
[16:12:16.889]                             muffled <- TRUE
[16:12:16.889]                             break
[16:12:16.889]                           }
[16:12:16.889]                         }
[16:12:16.889]                       }
[16:12:16.889]                       invisible(muffled)
[16:12:16.889]                     }
[16:12:16.889]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.889]                   }
[16:12:16.889]                 }
[16:12:16.889]                 else {
[16:12:16.889]                   if (TRUE) {
[16:12:16.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.889]                     {
[16:12:16.889]                       inherits <- base::inherits
[16:12:16.889]                       invokeRestart <- base::invokeRestart
[16:12:16.889]                       is.null <- base::is.null
[16:12:16.889]                       muffled <- FALSE
[16:12:16.889]                       if (inherits(cond, "message")) {
[16:12:16.889]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.889]                         if (muffled) 
[16:12:16.889]                           invokeRestart("muffleMessage")
[16:12:16.889]                       }
[16:12:16.889]                       else if (inherits(cond, "warning")) {
[16:12:16.889]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.889]                         if (muffled) 
[16:12:16.889]                           invokeRestart("muffleWarning")
[16:12:16.889]                       }
[16:12:16.889]                       else if (inherits(cond, "condition")) {
[16:12:16.889]                         if (!is.null(pattern)) {
[16:12:16.889]                           computeRestarts <- base::computeRestarts
[16:12:16.889]                           grepl <- base::grepl
[16:12:16.889]                           restarts <- computeRestarts(cond)
[16:12:16.889]                           for (restart in restarts) {
[16:12:16.889]                             name <- restart$name
[16:12:16.889]                             if (is.null(name)) 
[16:12:16.889]                               next
[16:12:16.889]                             if (!grepl(pattern, name)) 
[16:12:16.889]                               next
[16:12:16.889]                             invokeRestart(restart)
[16:12:16.889]                             muffled <- TRUE
[16:12:16.889]                             break
[16:12:16.889]                           }
[16:12:16.889]                         }
[16:12:16.889]                       }
[16:12:16.889]                       invisible(muffled)
[16:12:16.889]                     }
[16:12:16.889]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.889]                   }
[16:12:16.889]                 }
[16:12:16.889]             }
[16:12:16.889]         }))
[16:12:16.889]     }, error = function(ex) {
[16:12:16.889]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.889]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.889]                 ...future.rng), started = ...future.startTime, 
[16:12:16.889]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.889]             version = "1.8"), class = "FutureResult")
[16:12:16.889]     }, finally = {
[16:12:16.889]         if (!identical(...future.workdir, getwd())) 
[16:12:16.889]             setwd(...future.workdir)
[16:12:16.889]         {
[16:12:16.889]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.889]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.889]             }
[16:12:16.889]             base::options(...future.oldOptions)
[16:12:16.889]             if (.Platform$OS.type == "windows") {
[16:12:16.889]                 old_names <- names(...future.oldEnvVars)
[16:12:16.889]                 envs <- base::Sys.getenv()
[16:12:16.889]                 names <- names(envs)
[16:12:16.889]                 common <- intersect(names, old_names)
[16:12:16.889]                 added <- setdiff(names, old_names)
[16:12:16.889]                 removed <- setdiff(old_names, names)
[16:12:16.889]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.889]                   envs[common]]
[16:12:16.889]                 NAMES <- toupper(changed)
[16:12:16.889]                 args <- list()
[16:12:16.889]                 for (kk in seq_along(NAMES)) {
[16:12:16.889]                   name <- changed[[kk]]
[16:12:16.889]                   NAME <- NAMES[[kk]]
[16:12:16.889]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.889]                     next
[16:12:16.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.889]                 }
[16:12:16.889]                 NAMES <- toupper(added)
[16:12:16.889]                 for (kk in seq_along(NAMES)) {
[16:12:16.889]                   name <- added[[kk]]
[16:12:16.889]                   NAME <- NAMES[[kk]]
[16:12:16.889]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.889]                     next
[16:12:16.889]                   args[[name]] <- ""
[16:12:16.889]                 }
[16:12:16.889]                 NAMES <- toupper(removed)
[16:12:16.889]                 for (kk in seq_along(NAMES)) {
[16:12:16.889]                   name <- removed[[kk]]
[16:12:16.889]                   NAME <- NAMES[[kk]]
[16:12:16.889]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.889]                     next
[16:12:16.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.889]                 }
[16:12:16.889]                 if (length(args) > 0) 
[16:12:16.889]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.889]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.889]             }
[16:12:16.889]             else {
[16:12:16.889]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.889]             }
[16:12:16.889]             {
[16:12:16.889]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.889]                   0L) {
[16:12:16.889]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.889]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.889]                   base::options(opts)
[16:12:16.889]                 }
[16:12:16.889]                 {
[16:12:16.889]                   {
[16:12:16.889]                     NULL
[16:12:16.889]                     RNGkind("Mersenne-Twister")
[16:12:16.889]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.889]                       inherits = FALSE)
[16:12:16.889]                   }
[16:12:16.889]                   options(future.plan = NULL)
[16:12:16.889]                   if (is.na(NA_character_)) 
[16:12:16.889]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.889]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.889]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.889]                   {
[16:12:16.889]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.889]                     if (!future$lazy) 
[16:12:16.889]                       future <- run(future)
[16:12:16.889]                     invisible(future)
[16:12:16.889]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.889]                 }
[16:12:16.889]             }
[16:12:16.889]         }
[16:12:16.889]     })
[16:12:16.889]     if (TRUE) {
[16:12:16.889]         base::sink(type = "output", split = FALSE)
[16:12:16.889]         if (TRUE) {
[16:12:16.889]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.889]         }
[16:12:16.889]         else {
[16:12:16.889]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.889]         }
[16:12:16.889]         base::close(...future.stdout)
[16:12:16.889]         ...future.stdout <- NULL
[16:12:16.889]     }
[16:12:16.889]     ...future.result$conditions <- ...future.conditions
[16:12:16.889]     ...future.result$finished <- base::Sys.time()
[16:12:16.889]     ...future.result
[16:12:16.889] }
[16:12:16.891] plan(): Setting new future strategy stack:
[16:12:16.891] List of future strategies:
[16:12:16.891] 1. sequential:
[16:12:16.891]    - args: function (..., envir = parent.frame())
[16:12:16.891]    - tweaked: FALSE
[16:12:16.891]    - call: NULL
[16:12:16.891] plan(): nbrOfWorkers() = 1
[16:12:16.892] plan(): Setting new future strategy stack:
[16:12:16.892] List of future strategies:
[16:12:16.892] 1. sequential:
[16:12:16.892]    - args: function (..., envir = parent.frame())
[16:12:16.892]    - tweaked: FALSE
[16:12:16.892]    - call: plan(strategy)
[16:12:16.892] plan(): nbrOfWorkers() = 1
[16:12:16.893] SequentialFuture started (and completed)
[16:12:16.893] - Launch lazy future ... done
[16:12:16.893] run() for ‘SequentialFuture’ ... done
c = 1
[16:12:16.893] getGlobalsAndPackages() ...
[16:12:16.893] Searching for globals...
[16:12:16.894] 
[16:12:16.894] Searching for globals ... DONE
[16:12:16.894] - globals: [0] <none>
[16:12:16.894] getGlobalsAndPackages() ... DONE
[16:12:16.894] run() for ‘Future’ ...
[16:12:16.894] - state: ‘created’
[16:12:16.894] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.895] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.895]   - Field: ‘label’
[16:12:16.895]   - Field: ‘local’
[16:12:16.895]   - Field: ‘owner’
[16:12:16.895]   - Field: ‘envir’
[16:12:16.895]   - Field: ‘packages’
[16:12:16.895]   - Field: ‘gc’
[16:12:16.895]   - Field: ‘conditions’
[16:12:16.895]   - Field: ‘expr’
[16:12:16.895]   - Field: ‘uuid’
[16:12:16.896]   - Field: ‘seed’
[16:12:16.896]   - Field: ‘version’
[16:12:16.896]   - Field: ‘result’
[16:12:16.896]   - Field: ‘asynchronous’
[16:12:16.896]   - Field: ‘calls’
[16:12:16.896]   - Field: ‘globals’
[16:12:16.896]   - Field: ‘stdout’
[16:12:16.896]   - Field: ‘earlySignal’
[16:12:16.896]   - Field: ‘lazy’
[16:12:16.896]   - Field: ‘state’
[16:12:16.897] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.897] - Launch lazy future ...
[16:12:16.897] Packages needed by the future expression (n = 0): <none>
[16:12:16.897] Packages needed by future strategies (n = 0): <none>
[16:12:16.897] {
[16:12:16.897]     {
[16:12:16.897]         {
[16:12:16.897]             ...future.startTime <- base::Sys.time()
[16:12:16.897]             {
[16:12:16.897]                 {
[16:12:16.897]                   {
[16:12:16.897]                     base::local({
[16:12:16.897]                       has_future <- base::requireNamespace("future", 
[16:12:16.897]                         quietly = TRUE)
[16:12:16.897]                       if (has_future) {
[16:12:16.897]                         ns <- base::getNamespace("future")
[16:12:16.897]                         version <- ns[[".package"]][["version"]]
[16:12:16.897]                         if (is.null(version)) 
[16:12:16.897]                           version <- utils::packageVersion("future")
[16:12:16.897]                       }
[16:12:16.897]                       else {
[16:12:16.897]                         version <- NULL
[16:12:16.897]                       }
[16:12:16.897]                       if (!has_future || version < "1.8.0") {
[16:12:16.897]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.897]                           "", base::R.version$version.string), 
[16:12:16.897]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.897]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.897]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.897]                             "release", "version")], collapse = " "), 
[16:12:16.897]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.897]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.897]                           info)
[16:12:16.897]                         info <- base::paste(info, collapse = "; ")
[16:12:16.897]                         if (!has_future) {
[16:12:16.897]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.897]                             info)
[16:12:16.897]                         }
[16:12:16.897]                         else {
[16:12:16.897]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.897]                             info, version)
[16:12:16.897]                         }
[16:12:16.897]                         base::stop(msg)
[16:12:16.897]                       }
[16:12:16.897]                     })
[16:12:16.897]                   }
[16:12:16.897]                   options(future.plan = NULL)
[16:12:16.897]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.897]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.897]                 }
[16:12:16.897]                 ...future.workdir <- getwd()
[16:12:16.897]             }
[16:12:16.897]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.897]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.897]         }
[16:12:16.897]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.897]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.897]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.897]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.897]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.897]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.897]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.897]             base::names(...future.oldOptions))
[16:12:16.897]     }
[16:12:16.897]     if (FALSE) {
[16:12:16.897]     }
[16:12:16.897]     else {
[16:12:16.897]         if (TRUE) {
[16:12:16.897]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.897]                 open = "w")
[16:12:16.897]         }
[16:12:16.897]         else {
[16:12:16.897]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.897]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.897]         }
[16:12:16.897]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.897]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.897]             base::sink(type = "output", split = FALSE)
[16:12:16.897]             base::close(...future.stdout)
[16:12:16.897]         }, add = TRUE)
[16:12:16.897]     }
[16:12:16.897]     ...future.frame <- base::sys.nframe()
[16:12:16.897]     ...future.conditions <- base::list()
[16:12:16.897]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.897]     if (FALSE) {
[16:12:16.897]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.897]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.897]     }
[16:12:16.897]     ...future.result <- base::tryCatch({
[16:12:16.897]         base::withCallingHandlers({
[16:12:16.897]             ...future.value <- base::withVisible(base::local(1))
[16:12:16.897]             future::FutureResult(value = ...future.value$value, 
[16:12:16.897]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.897]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.897]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.897]                     ...future.globalenv.names))
[16:12:16.897]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.897]         }, condition = base::local({
[16:12:16.897]             c <- base::c
[16:12:16.897]             inherits <- base::inherits
[16:12:16.897]             invokeRestart <- base::invokeRestart
[16:12:16.897]             length <- base::length
[16:12:16.897]             list <- base::list
[16:12:16.897]             seq.int <- base::seq.int
[16:12:16.897]             signalCondition <- base::signalCondition
[16:12:16.897]             sys.calls <- base::sys.calls
[16:12:16.897]             `[[` <- base::`[[`
[16:12:16.897]             `+` <- base::`+`
[16:12:16.897]             `<<-` <- base::`<<-`
[16:12:16.897]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.897]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.897]                   3L)]
[16:12:16.897]             }
[16:12:16.897]             function(cond) {
[16:12:16.897]                 is_error <- inherits(cond, "error")
[16:12:16.897]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.897]                   NULL)
[16:12:16.897]                 if (is_error) {
[16:12:16.897]                   sessionInformation <- function() {
[16:12:16.897]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.897]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.897]                       search = base::search(), system = base::Sys.info())
[16:12:16.897]                   }
[16:12:16.897]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.897]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.897]                     cond$call), session = sessionInformation(), 
[16:12:16.897]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.897]                   signalCondition(cond)
[16:12:16.897]                 }
[16:12:16.897]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.897]                 "immediateCondition"))) {
[16:12:16.897]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.897]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.897]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.897]                   if (TRUE && !signal) {
[16:12:16.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.897]                     {
[16:12:16.897]                       inherits <- base::inherits
[16:12:16.897]                       invokeRestart <- base::invokeRestart
[16:12:16.897]                       is.null <- base::is.null
[16:12:16.897]                       muffled <- FALSE
[16:12:16.897]                       if (inherits(cond, "message")) {
[16:12:16.897]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.897]                         if (muffled) 
[16:12:16.897]                           invokeRestart("muffleMessage")
[16:12:16.897]                       }
[16:12:16.897]                       else if (inherits(cond, "warning")) {
[16:12:16.897]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.897]                         if (muffled) 
[16:12:16.897]                           invokeRestart("muffleWarning")
[16:12:16.897]                       }
[16:12:16.897]                       else if (inherits(cond, "condition")) {
[16:12:16.897]                         if (!is.null(pattern)) {
[16:12:16.897]                           computeRestarts <- base::computeRestarts
[16:12:16.897]                           grepl <- base::grepl
[16:12:16.897]                           restarts <- computeRestarts(cond)
[16:12:16.897]                           for (restart in restarts) {
[16:12:16.897]                             name <- restart$name
[16:12:16.897]                             if (is.null(name)) 
[16:12:16.897]                               next
[16:12:16.897]                             if (!grepl(pattern, name)) 
[16:12:16.897]                               next
[16:12:16.897]                             invokeRestart(restart)
[16:12:16.897]                             muffled <- TRUE
[16:12:16.897]                             break
[16:12:16.897]                           }
[16:12:16.897]                         }
[16:12:16.897]                       }
[16:12:16.897]                       invisible(muffled)
[16:12:16.897]                     }
[16:12:16.897]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.897]                   }
[16:12:16.897]                 }
[16:12:16.897]                 else {
[16:12:16.897]                   if (TRUE) {
[16:12:16.897]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.897]                     {
[16:12:16.897]                       inherits <- base::inherits
[16:12:16.897]                       invokeRestart <- base::invokeRestart
[16:12:16.897]                       is.null <- base::is.null
[16:12:16.897]                       muffled <- FALSE
[16:12:16.897]                       if (inherits(cond, "message")) {
[16:12:16.897]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.897]                         if (muffled) 
[16:12:16.897]                           invokeRestart("muffleMessage")
[16:12:16.897]                       }
[16:12:16.897]                       else if (inherits(cond, "warning")) {
[16:12:16.897]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.897]                         if (muffled) 
[16:12:16.897]                           invokeRestart("muffleWarning")
[16:12:16.897]                       }
[16:12:16.897]                       else if (inherits(cond, "condition")) {
[16:12:16.897]                         if (!is.null(pattern)) {
[16:12:16.897]                           computeRestarts <- base::computeRestarts
[16:12:16.897]                           grepl <- base::grepl
[16:12:16.897]                           restarts <- computeRestarts(cond)
[16:12:16.897]                           for (restart in restarts) {
[16:12:16.897]                             name <- restart$name
[16:12:16.897]                             if (is.null(name)) 
[16:12:16.897]                               next
[16:12:16.897]                             if (!grepl(pattern, name)) 
[16:12:16.897]                               next
[16:12:16.897]                             invokeRestart(restart)
[16:12:16.897]                             muffled <- TRUE
[16:12:16.897]                             break
[16:12:16.897]                           }
[16:12:16.897]                         }
[16:12:16.897]                       }
[16:12:16.897]                       invisible(muffled)
[16:12:16.897]                     }
[16:12:16.897]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.897]                   }
[16:12:16.897]                 }
[16:12:16.897]             }
[16:12:16.897]         }))
[16:12:16.897]     }, error = function(ex) {
[16:12:16.897]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.897]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.897]                 ...future.rng), started = ...future.startTime, 
[16:12:16.897]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.897]             version = "1.8"), class = "FutureResult")
[16:12:16.897]     }, finally = {
[16:12:16.897]         if (!identical(...future.workdir, getwd())) 
[16:12:16.897]             setwd(...future.workdir)
[16:12:16.897]         {
[16:12:16.897]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.897]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.897]             }
[16:12:16.897]             base::options(...future.oldOptions)
[16:12:16.897]             if (.Platform$OS.type == "windows") {
[16:12:16.897]                 old_names <- names(...future.oldEnvVars)
[16:12:16.897]                 envs <- base::Sys.getenv()
[16:12:16.897]                 names <- names(envs)
[16:12:16.897]                 common <- intersect(names, old_names)
[16:12:16.897]                 added <- setdiff(names, old_names)
[16:12:16.897]                 removed <- setdiff(old_names, names)
[16:12:16.897]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.897]                   envs[common]]
[16:12:16.897]                 NAMES <- toupper(changed)
[16:12:16.897]                 args <- list()
[16:12:16.897]                 for (kk in seq_along(NAMES)) {
[16:12:16.897]                   name <- changed[[kk]]
[16:12:16.897]                   NAME <- NAMES[[kk]]
[16:12:16.897]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.897]                     next
[16:12:16.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.897]                 }
[16:12:16.897]                 NAMES <- toupper(added)
[16:12:16.897]                 for (kk in seq_along(NAMES)) {
[16:12:16.897]                   name <- added[[kk]]
[16:12:16.897]                   NAME <- NAMES[[kk]]
[16:12:16.897]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.897]                     next
[16:12:16.897]                   args[[name]] <- ""
[16:12:16.897]                 }
[16:12:16.897]                 NAMES <- toupper(removed)
[16:12:16.897]                 for (kk in seq_along(NAMES)) {
[16:12:16.897]                   name <- removed[[kk]]
[16:12:16.897]                   NAME <- NAMES[[kk]]
[16:12:16.897]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.897]                     next
[16:12:16.897]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.897]                 }
[16:12:16.897]                 if (length(args) > 0) 
[16:12:16.897]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.897]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.897]             }
[16:12:16.897]             else {
[16:12:16.897]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.897]             }
[16:12:16.897]             {
[16:12:16.897]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.897]                   0L) {
[16:12:16.897]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.897]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.897]                   base::options(opts)
[16:12:16.897]                 }
[16:12:16.897]                 {
[16:12:16.897]                   {
[16:12:16.897]                     NULL
[16:12:16.897]                     RNGkind("Mersenne-Twister")
[16:12:16.897]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.897]                       inherits = FALSE)
[16:12:16.897]                   }
[16:12:16.897]                   options(future.plan = NULL)
[16:12:16.897]                   if (is.na(NA_character_)) 
[16:12:16.897]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.897]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.897]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.897]                   {
[16:12:16.897]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.897]                     if (!future$lazy) 
[16:12:16.897]                       future <- run(future)
[16:12:16.897]                     invisible(future)
[16:12:16.897]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.897]                 }
[16:12:16.897]             }
[16:12:16.897]         }
[16:12:16.897]     })
[16:12:16.897]     if (TRUE) {
[16:12:16.897]         base::sink(type = "output", split = FALSE)
[16:12:16.897]         if (TRUE) {
[16:12:16.897]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.897]         }
[16:12:16.897]         else {
[16:12:16.897]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.897]         }
[16:12:16.897]         base::close(...future.stdout)
[16:12:16.897]         ...future.stdout <- NULL
[16:12:16.897]     }
[16:12:16.897]     ...future.result$conditions <- ...future.conditions
[16:12:16.897]     ...future.result$finished <- base::Sys.time()
[16:12:16.897]     ...future.result
[16:12:16.897] }
[16:12:16.899] plan(): Setting new future strategy stack:
[16:12:16.899] List of future strategies:
[16:12:16.899] 1. sequential:
[16:12:16.899]    - args: function (..., envir = parent.frame())
[16:12:16.899]    - tweaked: FALSE
[16:12:16.899]    - call: NULL
[16:12:16.899] plan(): nbrOfWorkers() = 1
[16:12:16.900] plan(): Setting new future strategy stack:
[16:12:16.900] List of future strategies:
[16:12:16.900] 1. sequential:
[16:12:16.900]    - args: function (..., envir = parent.frame())
[16:12:16.900]    - tweaked: FALSE
[16:12:16.900]    - call: plan(strategy)
[16:12:16.901] plan(): nbrOfWorkers() = 1
[16:12:16.901] SequentialFuture started (and completed)
[16:12:16.901] - Launch lazy future ... done
[16:12:16.901] run() for ‘SequentialFuture’ ... done
d = 1
** Nested future assignments
[16:12:16.901] getGlobalsAndPackages() ...
[16:12:16.902] Searching for globals...
[16:12:16.905] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[16:12:16.905] Searching for globals ... DONE
[16:12:16.905] Resolving globals: FALSE
[16:12:16.906] 
[16:12:16.906] - packages: [1] ‘future’
[16:12:16.906] getGlobalsAndPackages() ... DONE
[16:12:16.907] run() for ‘Future’ ...
[16:12:16.908] - state: ‘created’
[16:12:16.908] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.908] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.908] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.908]   - Field: ‘label’
[16:12:16.908]   - Field: ‘local’
[16:12:16.908]   - Field: ‘owner’
[16:12:16.908]   - Field: ‘envir’
[16:12:16.909]   - Field: ‘packages’
[16:12:16.909]   - Field: ‘gc’
[16:12:16.909]   - Field: ‘conditions’
[16:12:16.909]   - Field: ‘expr’
[16:12:16.909]   - Field: ‘uuid’
[16:12:16.909]   - Field: ‘seed’
[16:12:16.909]   - Field: ‘version’
[16:12:16.909]   - Field: ‘result’
[16:12:16.909]   - Field: ‘asynchronous’
[16:12:16.909]   - Field: ‘calls’
[16:12:16.910]   - Field: ‘globals’
[16:12:16.910]   - Field: ‘stdout’
[16:12:16.910]   - Field: ‘earlySignal’
[16:12:16.910]   - Field: ‘lazy’
[16:12:16.910]   - Field: ‘state’
[16:12:16.910] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.910] - Launch lazy future ...
[16:12:16.910] Packages needed by the future expression (n = 1): ‘future’
[16:12:16.910] Packages needed by future strategies (n = 0): <none>
[16:12:16.911] {
[16:12:16.911]     {
[16:12:16.911]         {
[16:12:16.911]             ...future.startTime <- base::Sys.time()
[16:12:16.911]             {
[16:12:16.911]                 {
[16:12:16.911]                   {
[16:12:16.911]                     {
[16:12:16.911]                       base::local({
[16:12:16.911]                         has_future <- base::requireNamespace("future", 
[16:12:16.911]                           quietly = TRUE)
[16:12:16.911]                         if (has_future) {
[16:12:16.911]                           ns <- base::getNamespace("future")
[16:12:16.911]                           version <- ns[[".package"]][["version"]]
[16:12:16.911]                           if (is.null(version)) 
[16:12:16.911]                             version <- utils::packageVersion("future")
[16:12:16.911]                         }
[16:12:16.911]                         else {
[16:12:16.911]                           version <- NULL
[16:12:16.911]                         }
[16:12:16.911]                         if (!has_future || version < "1.8.0") {
[16:12:16.911]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.911]                             "", base::R.version$version.string), 
[16:12:16.911]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:16.911]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.911]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.911]                               "release", "version")], collapse = " "), 
[16:12:16.911]                             hostname = base::Sys.info()[["nodename"]])
[16:12:16.911]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.911]                             info)
[16:12:16.911]                           info <- base::paste(info, collapse = "; ")
[16:12:16.911]                           if (!has_future) {
[16:12:16.911]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.911]                               info)
[16:12:16.911]                           }
[16:12:16.911]                           else {
[16:12:16.911]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.911]                               info, version)
[16:12:16.911]                           }
[16:12:16.911]                           base::stop(msg)
[16:12:16.911]                         }
[16:12:16.911]                       })
[16:12:16.911]                     }
[16:12:16.911]                     base::local({
[16:12:16.911]                       for (pkg in "future") {
[16:12:16.911]                         base::loadNamespace(pkg)
[16:12:16.911]                         base::library(pkg, character.only = TRUE)
[16:12:16.911]                       }
[16:12:16.911]                     })
[16:12:16.911]                   }
[16:12:16.911]                   options(future.plan = NULL)
[16:12:16.911]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.911]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.911]                 }
[16:12:16.911]                 ...future.workdir <- getwd()
[16:12:16.911]             }
[16:12:16.911]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.911]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.911]         }
[16:12:16.911]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.911]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.911]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.911]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.911]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.911]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.911]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.911]             base::names(...future.oldOptions))
[16:12:16.911]     }
[16:12:16.911]     if (FALSE) {
[16:12:16.911]     }
[16:12:16.911]     else {
[16:12:16.911]         if (TRUE) {
[16:12:16.911]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.911]                 open = "w")
[16:12:16.911]         }
[16:12:16.911]         else {
[16:12:16.911]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.911]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.911]         }
[16:12:16.911]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.911]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.911]             base::sink(type = "output", split = FALSE)
[16:12:16.911]             base::close(...future.stdout)
[16:12:16.911]         }, add = TRUE)
[16:12:16.911]     }
[16:12:16.911]     ...future.frame <- base::sys.nframe()
[16:12:16.911]     ...future.conditions <- base::list()
[16:12:16.911]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.911]     if (FALSE) {
[16:12:16.911]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.911]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.911]     }
[16:12:16.911]     ...future.result <- base::tryCatch({
[16:12:16.911]         base::withCallingHandlers({
[16:12:16.911]             ...future.value <- base::withVisible(base::local({
[16:12:16.911]                 b <- 1
[16:12:16.911]                 c %<-% 2
[16:12:16.911]                 d <- 3
[16:12:16.911]                 4 %->% e
[16:12:16.911]                 b + c + d + e
[16:12:16.911]             }))
[16:12:16.911]             future::FutureResult(value = ...future.value$value, 
[16:12:16.911]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.911]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.911]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.911]                     ...future.globalenv.names))
[16:12:16.911]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.911]         }, condition = base::local({
[16:12:16.911]             c <- base::c
[16:12:16.911]             inherits <- base::inherits
[16:12:16.911]             invokeRestart <- base::invokeRestart
[16:12:16.911]             length <- base::length
[16:12:16.911]             list <- base::list
[16:12:16.911]             seq.int <- base::seq.int
[16:12:16.911]             signalCondition <- base::signalCondition
[16:12:16.911]             sys.calls <- base::sys.calls
[16:12:16.911]             `[[` <- base::`[[`
[16:12:16.911]             `+` <- base::`+`
[16:12:16.911]             `<<-` <- base::`<<-`
[16:12:16.911]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.911]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.911]                   3L)]
[16:12:16.911]             }
[16:12:16.911]             function(cond) {
[16:12:16.911]                 is_error <- inherits(cond, "error")
[16:12:16.911]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.911]                   NULL)
[16:12:16.911]                 if (is_error) {
[16:12:16.911]                   sessionInformation <- function() {
[16:12:16.911]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.911]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.911]                       search = base::search(), system = base::Sys.info())
[16:12:16.911]                   }
[16:12:16.911]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.911]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.911]                     cond$call), session = sessionInformation(), 
[16:12:16.911]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.911]                   signalCondition(cond)
[16:12:16.911]                 }
[16:12:16.911]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.911]                 "immediateCondition"))) {
[16:12:16.911]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.911]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.911]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.911]                   if (TRUE && !signal) {
[16:12:16.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.911]                     {
[16:12:16.911]                       inherits <- base::inherits
[16:12:16.911]                       invokeRestart <- base::invokeRestart
[16:12:16.911]                       is.null <- base::is.null
[16:12:16.911]                       muffled <- FALSE
[16:12:16.911]                       if (inherits(cond, "message")) {
[16:12:16.911]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.911]                         if (muffled) 
[16:12:16.911]                           invokeRestart("muffleMessage")
[16:12:16.911]                       }
[16:12:16.911]                       else if (inherits(cond, "warning")) {
[16:12:16.911]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.911]                         if (muffled) 
[16:12:16.911]                           invokeRestart("muffleWarning")
[16:12:16.911]                       }
[16:12:16.911]                       else if (inherits(cond, "condition")) {
[16:12:16.911]                         if (!is.null(pattern)) {
[16:12:16.911]                           computeRestarts <- base::computeRestarts
[16:12:16.911]                           grepl <- base::grepl
[16:12:16.911]                           restarts <- computeRestarts(cond)
[16:12:16.911]                           for (restart in restarts) {
[16:12:16.911]                             name <- restart$name
[16:12:16.911]                             if (is.null(name)) 
[16:12:16.911]                               next
[16:12:16.911]                             if (!grepl(pattern, name)) 
[16:12:16.911]                               next
[16:12:16.911]                             invokeRestart(restart)
[16:12:16.911]                             muffled <- TRUE
[16:12:16.911]                             break
[16:12:16.911]                           }
[16:12:16.911]                         }
[16:12:16.911]                       }
[16:12:16.911]                       invisible(muffled)
[16:12:16.911]                     }
[16:12:16.911]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.911]                   }
[16:12:16.911]                 }
[16:12:16.911]                 else {
[16:12:16.911]                   if (TRUE) {
[16:12:16.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.911]                     {
[16:12:16.911]                       inherits <- base::inherits
[16:12:16.911]                       invokeRestart <- base::invokeRestart
[16:12:16.911]                       is.null <- base::is.null
[16:12:16.911]                       muffled <- FALSE
[16:12:16.911]                       if (inherits(cond, "message")) {
[16:12:16.911]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.911]                         if (muffled) 
[16:12:16.911]                           invokeRestart("muffleMessage")
[16:12:16.911]                       }
[16:12:16.911]                       else if (inherits(cond, "warning")) {
[16:12:16.911]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.911]                         if (muffled) 
[16:12:16.911]                           invokeRestart("muffleWarning")
[16:12:16.911]                       }
[16:12:16.911]                       else if (inherits(cond, "condition")) {
[16:12:16.911]                         if (!is.null(pattern)) {
[16:12:16.911]                           computeRestarts <- base::computeRestarts
[16:12:16.911]                           grepl <- base::grepl
[16:12:16.911]                           restarts <- computeRestarts(cond)
[16:12:16.911]                           for (restart in restarts) {
[16:12:16.911]                             name <- restart$name
[16:12:16.911]                             if (is.null(name)) 
[16:12:16.911]                               next
[16:12:16.911]                             if (!grepl(pattern, name)) 
[16:12:16.911]                               next
[16:12:16.911]                             invokeRestart(restart)
[16:12:16.911]                             muffled <- TRUE
[16:12:16.911]                             break
[16:12:16.911]                           }
[16:12:16.911]                         }
[16:12:16.911]                       }
[16:12:16.911]                       invisible(muffled)
[16:12:16.911]                     }
[16:12:16.911]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.911]                   }
[16:12:16.911]                 }
[16:12:16.911]             }
[16:12:16.911]         }))
[16:12:16.911]     }, error = function(ex) {
[16:12:16.911]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.911]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.911]                 ...future.rng), started = ...future.startTime, 
[16:12:16.911]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.911]             version = "1.8"), class = "FutureResult")
[16:12:16.911]     }, finally = {
[16:12:16.911]         if (!identical(...future.workdir, getwd())) 
[16:12:16.911]             setwd(...future.workdir)
[16:12:16.911]         {
[16:12:16.911]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.911]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.911]             }
[16:12:16.911]             base::options(...future.oldOptions)
[16:12:16.911]             if (.Platform$OS.type == "windows") {
[16:12:16.911]                 old_names <- names(...future.oldEnvVars)
[16:12:16.911]                 envs <- base::Sys.getenv()
[16:12:16.911]                 names <- names(envs)
[16:12:16.911]                 common <- intersect(names, old_names)
[16:12:16.911]                 added <- setdiff(names, old_names)
[16:12:16.911]                 removed <- setdiff(old_names, names)
[16:12:16.911]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.911]                   envs[common]]
[16:12:16.911]                 NAMES <- toupper(changed)
[16:12:16.911]                 args <- list()
[16:12:16.911]                 for (kk in seq_along(NAMES)) {
[16:12:16.911]                   name <- changed[[kk]]
[16:12:16.911]                   NAME <- NAMES[[kk]]
[16:12:16.911]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.911]                     next
[16:12:16.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.911]                 }
[16:12:16.911]                 NAMES <- toupper(added)
[16:12:16.911]                 for (kk in seq_along(NAMES)) {
[16:12:16.911]                   name <- added[[kk]]
[16:12:16.911]                   NAME <- NAMES[[kk]]
[16:12:16.911]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.911]                     next
[16:12:16.911]                   args[[name]] <- ""
[16:12:16.911]                 }
[16:12:16.911]                 NAMES <- toupper(removed)
[16:12:16.911]                 for (kk in seq_along(NAMES)) {
[16:12:16.911]                   name <- removed[[kk]]
[16:12:16.911]                   NAME <- NAMES[[kk]]
[16:12:16.911]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.911]                     next
[16:12:16.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.911]                 }
[16:12:16.911]                 if (length(args) > 0) 
[16:12:16.911]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.911]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.911]             }
[16:12:16.911]             else {
[16:12:16.911]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.911]             }
[16:12:16.911]             {
[16:12:16.911]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.911]                   0L) {
[16:12:16.911]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.911]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.911]                   base::options(opts)
[16:12:16.911]                 }
[16:12:16.911]                 {
[16:12:16.911]                   {
[16:12:16.911]                     NULL
[16:12:16.911]                     RNGkind("Mersenne-Twister")
[16:12:16.911]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.911]                       inherits = FALSE)
[16:12:16.911]                   }
[16:12:16.911]                   options(future.plan = NULL)
[16:12:16.911]                   if (is.na(NA_character_)) 
[16:12:16.911]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.911]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.911]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.911]                   {
[16:12:16.911]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.911]                     if (!future$lazy) 
[16:12:16.911]                       future <- run(future)
[16:12:16.911]                     invisible(future)
[16:12:16.911]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.911]                 }
[16:12:16.911]             }
[16:12:16.911]         }
[16:12:16.911]     })
[16:12:16.911]     if (TRUE) {
[16:12:16.911]         base::sink(type = "output", split = FALSE)
[16:12:16.911]         if (TRUE) {
[16:12:16.911]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.911]         }
[16:12:16.911]         else {
[16:12:16.911]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.911]         }
[16:12:16.911]         base::close(...future.stdout)
[16:12:16.911]         ...future.stdout <- NULL
[16:12:16.911]     }
[16:12:16.911]     ...future.result$conditions <- ...future.conditions
[16:12:16.911]     ...future.result$finished <- base::Sys.time()
[16:12:16.911]     ...future.result
[16:12:16.911] }
[16:12:16.913] plan(): Setting new future strategy stack:
[16:12:16.913] List of future strategies:
[16:12:16.913] 1. sequential:
[16:12:16.913]    - args: function (..., envir = parent.frame())
[16:12:16.913]    - tweaked: FALSE
[16:12:16.913]    - call: NULL
[16:12:16.913] plan(): nbrOfWorkers() = 1
[16:12:16.946] plan(): Setting new future strategy stack:
[16:12:16.946] List of future strategies:
[16:12:16.946] 1. sequential:
[16:12:16.946]    - args: function (..., envir = parent.frame())
[16:12:16.946]    - tweaked: FALSE
[16:12:16.946]    - call: plan(strategy)
[16:12:16.947] plan(): nbrOfWorkers() = 1
[16:12:16.947] SequentialFuture started (and completed)
[16:12:16.947] signalConditions() ...
[16:12:16.947]  - include = ‘immediateCondition’
[16:12:16.947]  - exclude = 
[16:12:16.947]  - resignal = FALSE
[16:12:16.947]  - Number of conditions: 88
[16:12:16.947] signalConditions() ... done
[16:12:16.947] - Launch lazy future ... done
[16:12:16.948] run() for ‘SequentialFuture’ ... done
[16:12:16.948] signalConditions() ...
[16:12:16.948]  - include = ‘immediateCondition’
[16:12:16.948]  - exclude = 
[16:12:16.948]  - resignal = FALSE
[16:12:16.948]  - Number of conditions: 88
[16:12:16.948] signalConditions() ... done
[16:12:16.948] Future state: ‘finished’
[16:12:16.948] signalConditions() ...
[16:12:16.949]  - include = ‘condition’
[16:12:16.949]  - exclude = ‘immediateCondition’
[16:12:16.949]  - resignal = TRUE
[16:12:16.949]  - Number of conditions: 88
[16:12:16.949]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.914] getGlobalsAndPackages() ...
[16:12:16.949]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.914] Searching for globals...
[16:12:16.949]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.927] 
[16:12:16.949]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.928] Searching for globals ... DONE
[16:12:16.949]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.929] - globals: [0] <none>
[16:12:16.950]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.929] getGlobalsAndPackages() ... DONE
[16:12:16.950]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.929] run() for ‘Future’ ...
[16:12:16.950]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930] - state: ‘created’
[16:12:16.950]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.950]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.950]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.950]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930]   - Field: ‘label’
[16:12:16.950]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930]   - Field: ‘local’
[16:12:16.951]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.930]   - Field: ‘owner’
[16:12:16.951]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘envir’
[16:12:16.951]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘packages’
[16:12:16.951]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘gc’
[16:12:16.951]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘conditions’
[16:12:16.951]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘expr’
[16:12:16.951]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘uuid’
[16:12:16.952]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘seed’
[16:12:16.952]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘version’
[16:12:16.952]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.931]   - Field: ‘result’
[16:12:16.952]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘asynchronous’
[16:12:16.952]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘calls’
[16:12:16.952]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘globals’
[16:12:16.952]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘stdout’
[16:12:16.952]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘earlySignal’
[16:12:16.953]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘lazy’
[16:12:16.953]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932]   - Field: ‘state’
[16:12:16.953]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.953]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.932] - Launch lazy future ...
[16:12:16.953]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.933] Packages needed by the future expression (n = 0): <none>
[16:12:16.953]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.933] Packages needed by future strategies (n = 0): <none>
[16:12:16.953]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.933] {
[16:12:16.933]     {
[16:12:16.933]         {
[16:12:16.933]             ...future.startTime <- base::Sys.time()
[16:12:16.933]             {
[16:12:16.933]                 {
[16:12:16.933]                   {
[16:12:16.933]                     base::local({
[16:12:16.933]                       has_future <- base::requireNamespace("future", 
[16:12:16.933]                         quietly = TRUE)
[16:12:16.933]                       if (has_future) {
[16:12:16.933]                         ns <- base::getNamespace("future")
[16:12:16.933]                         version <- ns[[".package"]][["version"]]
[16:12:16.933]                         if (is.null(version)) 
[16:12:16.933]                           version <- utils::packageVersion("future")
[16:12:16.933]                       }
[16:12:16.933]                       else {
[16:12:16.933]                         version <- NULL
[16:12:16.933]                       }
[16:12:16.933]                       if (!has_future || version < "1.8.0") {
[16:12:16.933]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.933]                           "", base::R.version$version.string), 
[16:12:16.933]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.933]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.933]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.933]                             "release", "version")], collapse = " "), 
[16:12:16.933]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.933]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.933]                           info)
[16:12:16.933]                         info <- base::paste(info, collapse = "; ")
[16:12:16.933]                         if (!has_future) {
[16:12:16.933]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.933]                             info)
[16:12:16.933]                         }
[16:12:16.933]                         else {
[16:12:16.933]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.933]                             info, version)
[16:12:16.933]                         }
[16:12:16.933]                         base::stop(msg)
[16:12:16.933]                       }
[16:12:16.933]                     })
[16:12:16.933]                   }
[16:12:16.933]                   options(future.plan = NULL)
[16:12:16.933]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.933]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.933]                 }
[16:12:16.933]                 ...future.workdir <- getwd()
[16:12:16.933]             }
[16:12:16.933]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.933]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.933]         }
[16:12:16.933]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.933]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.933]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.933]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.933]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.933]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.933]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.933]             base::names(...future.oldOptions))
[16:12:16.933]     }
[16:12:16.933]     if (FALSE) {
[16:12:16.933]     }
[16:12:16.933]     else {
[16:12:16.933]         if (TRUE) {
[16:12:16.933]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.933]                 open = "w")
[16:12:16.933]         }
[16:12:16.933]         else {
[16:12:16.933]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.933]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.933]         }
[16:12:16.933]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.933]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.933]             base::sink(type = "output", split = FALSE)
[16:12:16.933]             base::close(...future.stdout)
[16:12:16.933]         }, add = TRUE)
[16:12:16.933]     }
[16:12:16.933]     ...future.frame <- base::sys.nframe()
[16:12:16.933]     ...future.conditions <- base::list()
[16:12:16.933]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.933]     if (FALSE) {
[16:12:16.933]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.933]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.933]     }
[16:12:16.933]     ...future.result <- base::tryCatch({
[16:12:16.933]         base::withCallingHandlers({
[16:12:16.933]             ...future.value <- base::withVisible(base::local(2))
[16:12:16.933]             future::FutureResult(value = ...future.value$value, 
[16:12:16.933]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.933]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.933]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.933]                     ...future.globalenv.names))
[16:12:16.933]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.933]         }, condition = base::local({
[16:12:16.933]             c <- base::c
[16:12:16.933]             inherits <- base::inherits
[16:12:16.933]             invokeRestart <- base::invokeRestart
[16:12:16.933]             length <- base::length
[16:12:16.933]             list <- base::list
[16:12:16.933]             seq.int <- base::seq.int
[16:12:16.933]             signalCondition <- base::signalCondition
[16:12:16.933]             sys.calls <- base::sys.calls
[16:12:16.933]             `[[` <- base::`[[`
[16:12:16.933]             `+` <- base::`+`
[16:12:16.933]             `<<-` <- base::`<<-`
[16:12:16.933]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.933]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.933]                   3L)]
[16:12:16.933]             }
[16:12:16.933]             function(cond) {
[16:12:16.933]                 is_error <- inherits(cond, "error")
[16:12:16.933]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.933]                   NULL)
[16:12:16.933]                 if (is_error) {
[16:12:16.933]                   sessionInformation <- function() {
[16:12:16.933]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.933]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.933]                       search = base::search(), system = base::Sys.info())
[16:12:16.933]                   }
[16:12:16.933]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.933]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.933]                     cond$call), session = sessionInformation(), 
[16:12:16.933]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.933]                   signalCondition(cond)
[16:12:16.933]                 }
[16:12:16.933]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.933]                 "immediateCondition"))) {
[16:12:16.933]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.933]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.933]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.933]                   if (TRUE && !signal) {
[16:12:16.933]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.933]                     {
[16:12:16.933]                       inherits <- base::inherits
[16:12:16.933]                       invokeRestart <- base::invokeRestart
[16:12:16.933]                       is.null <- base::is.null
[16:12:16.933]                       muffled <- FALSE
[16:12:16.933]                       if (inherits(cond, "message")) {
[16:12:16.933]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.933]                         if (muffled) 
[16:12:16.933]                           invokeRestart("muffleMessage")
[16:12:16.933]                       }
[16:12:16.933]                       else if (inherits(cond, "warning")) {
[16:12:16.933]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.933]                         if (muffled) 
[16:12:16.933]                           invokeRestart("muffleWarning")
[16:12:16.933]                       }
[16:12:16.933]                       else if (inherits(cond, "condition")) {
[16:12:16.933]                         if (!is.null(pattern)) {
[16:12:16.933]                           computeRestarts <- base::computeRestarts
[16:12:16.933]                           grepl <- base::grepl
[16:12:16.933]                           restarts <- computeRestarts(cond)
[16:12:16.933]                           for (restart in restarts) {
[16:12:16.933]                             name <- restart$name
[16:12:16.933]                             if (is.null(name)) 
[16:12:16.933]                               next
[16:12:16.933]                             if (!grepl(pattern, name)) 
[16:12:16.933]                               next
[16:12:16.933]                             invokeRestart(restart)
[16:12:16.933]                             muffled <- TRUE
[16:12:16.933]                             break
[16:12:16.933]                           }
[16:12:16.933]                         }
[16:12:16.933]                       }
[16:12:16.933]                       invisible(muffled)
[16:12:16.933]                     }
[16:12:16.933]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.933]                   }
[16:12:16.933]                 }
[16:12:16.933]                 else {
[16:12:16.933]                   if (TRUE) {
[16:12:16.933]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.933]                     {
[16:12:16.933]                       inherits <- base::inherits
[16:12:16.933]                       invokeRestart <- base::invokeRestart
[16:12:16.933]                       is.null <- base::is.null
[16:12:16.933]                       muffled <- FALSE
[16:12:16.933]                       if (inherits(cond, "message")) {
[16:12:16.933]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.933]                         if (muffled) 
[16:12:16.933]                           invokeRestart("muffleMessage")
[16:12:16.933]                       }
[16:12:16.933]                       else if (inherits(cond, "warning")) {
[16:12:16.933]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.933]                         if (muffled) 
[16:12:16.933]                           invokeRestart("muffleWarning")
[16:12:16.933]                       }
[16:12:16.933]                       else if (inherits(cond, "condition")) {
[16:12:16.933]                         if (!is.null(pattern)) {
[16:12:16.933]                           computeRestarts <- base::computeRestarts
[16:12:16.933]                           grepl <- base::grepl
[16:12:16.933]                           restarts <- computeRestarts(cond)
[16:12:16.933]                           for (restart in restarts) {
[16:12:16.933]                             name <- restart$name
[16:12:16.933]                             if (is.null(name)) 
[16:12:16.933]                               next
[16:12:16.933]                             if (!grepl(pattern, name)) 
[16:12:16.933]                               next
[16:12:16.933]                             invokeRestart(restart)
[16:12:16.933]                             muffled <- TRUE
[16:12:16.933]                             break
[16:12:16.933]                           }
[16:12:16.933]                         }
[16:12:16.933]                       }
[16:12:16.933]                       invisible(muffled)
[16:12:16.933]                     }
[16:12:16.933]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.933]                   }
[16:12:16.933]                 }
[16:12:16.933]             }
[16:12:16.933]         }))
[16:12:16.933]     }, error = function(ex) {
[16:12:16.933]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.933]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.933]                 ...future.rng), started = ...future.startTime, 
[16:12:16.933]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.933]             version = "1.8"), class = "FutureResult")
[16:12:16.933]     }, finally = {
[16:12:16.933]         if (!identical(...future.workdir, getwd())) 
[16:12:16.933]             setwd(...future.workdir)
[16:12:16.933]         {
[16:12:16.933]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.933]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.933]             }
[16:12:16.933]             base::options(...future.oldOptions)
[16:12:16.933]             if (.Platform$OS.type == "windows") {
[16:12:16.933]                 old_names <- names(...future.oldEnvVars)
[16:12:16.933]                 envs <- base::Sys.getenv()
[16:12:16.933]                 names <- names(envs)
[16:12:16.933]                 common <- intersect(names, old_names)
[16:12:16.933]                 added <- setdiff(names, old_names)
[16:12:16.933]                 removed <- setdiff(old_names, names)
[16:12:16.933]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.933]                   envs[common]]
[16:12:16.933]                 NAMES <- toupper(changed)
[16:12:16.933]                 args <- list()
[16:12:16.933]                 for (kk in seq_along(NAMES)) {
[16:12:16.933]                   name <- changed[[kk]]
[16:12:16.933]                   NAME <- NAMES[[kk]]
[16:12:16.933]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.933]                     next
[16:12:16.933]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.933]                 }
[16:12:16.933]                 NAMES <- toupper(added)
[16:12:16.933]                 for (kk in seq_along(NAMES)) {
[16:12:16.933]                   name <- added[[kk]]
[16:12:16.933]                   NAME <- NAMES[[kk]]
[16:12:16.933]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.933]                     next
[16:12:16.933]                   args[[name]] <- ""
[16:12:16.933]                 }
[16:12:16.933]                 NAMES <- toupper(removed)
[16:12:16.933]                 for (kk in seq_along(NAMES)) {
[16:12:16.933]                   name <- removed[[kk]]
[16:12:16.933]                   NAME <- NAMES[[kk]]
[16:12:16.933]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.933]                     next
[16:12:16.933]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.933]                 }
[16:12:16.933]                 if (length(args) > 0) 
[16:12:16.933]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.933]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.933]             }
[16:12:16.933]             else {
[16:12:16.933]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.933]             }
[16:12:16.933]             {
[16:12:16.933]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.933]                   0L) {
[16:12:16.933]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.933]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.933]                   base::options(opts)
[16:12:16.933]                 }
[16:12:16.933]                 {
[16:12:16.933]                   {
[16:12:16.933]                     NULL
[16:12:16.933]                     RNGkind("Mersenne-Twister")
[16:12:16.933]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.933]                       inherits = FALSE)
[16:12:16.933]                   }
[16:12:16.933]                   options(future.plan = NULL)
[16:12:16.933]                   if (is.na(NA_character_)) 
[16:12:16.933]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.933]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.933]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.933]                   {
[16:12:16.933]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.933]                     if (!future$lazy) 
[16:12:16.933]                       future <- run(future)
[16:12:16.933]                     invisible(future)
[16:12:16.933]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.933]                 }
[16:12:16.933]             }
[16:12:16.933]         }
[16:12:16.933]     })
[16:12:16.933]     if (TRUE) {
[16:12:16.933]         base::sink(type = "output", split = FALSE)
[16:12:16.933]         if (TRUE) {
[16:12:16.933]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.933]         }
[16:12:16.933]         else {
[16:12:16.933]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.933]         }
[16:12:16.933]         base::close(...future.stdout)
[16:12:16.933]         ...future.stdout <- NULL
[16:12:16.933]     }
[16:12:16.933]     ...future.result$conditions <- ...future.conditions
[16:12:16.933]     ...future.result$finished <- base::Sys.time()
[16:12:16.933]     ...future.result
[16:12:16.933] }
[16:12:16.953]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.935] plan(): Setting new future strategy stack:
[16:12:16.954]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.935] List of future strategies:
[16:12:16.935] 1. sequential:
[16:12:16.935]    - args: function (..., envir = parent.frame())
[16:12:16.935]    - tweaked: FALSE
[16:12:16.935]    - call: NULL
[16:12:16.955]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.935] plan(): nbrOfWorkers() = 1
[16:12:16.955]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.936] plan(): Setting new future strategy stack:
[16:12:16.955]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.936] List of future strategies:
[16:12:16.936] 1. sequential:
[16:12:16.936]    - args: function (..., envir = parent.frame())
[16:12:16.936]    - tweaked: FALSE
[16:12:16.936]    - call: NULL
[16:12:16.955]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.937] plan(): nbrOfWorkers() = 1
[16:12:16.956]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.937] SequentialFuture started (and completed)
[16:12:16.956]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.937] - Launch lazy future ... done
[16:12:16.956]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.937] run() for ‘SequentialFuture’ ... done
[16:12:16.956]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.937] getGlobalsAndPackages() ...
[16:12:16.956]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.937] Searching for globals...
[16:12:16.956]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] 
[16:12:16.956]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] Searching for globals ... DONE
[16:12:16.957]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] - globals: [0] <none>
[16:12:16.957]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] getGlobalsAndPackages() ... DONE
[16:12:16.957]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] run() for ‘Future’ ...
[16:12:16.957]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] - state: ‘created’
[16:12:16.957]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.938] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.957]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.957]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.957]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939]   - Field: ‘label’
[16:12:16.958]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939]   - Field: ‘local’
[16:12:16.958]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939]   - Field: ‘owner’
[16:12:16.958]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939]   - Field: ‘envir’
[16:12:16.958]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939]   - Field: ‘packages’
[16:12:16.958]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.939]   - Field: ‘gc’
[16:12:16.958]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘conditions’
[16:12:16.958]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘expr’
[16:12:16.958]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘uuid’
[16:12:16.959]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘seed’
[16:12:16.959]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘version’
[16:12:16.959]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘result’
[16:12:16.959]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘asynchronous’
[16:12:16.959]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘calls’
[16:12:16.959]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.940]   - Field: ‘globals’
[16:12:16.959]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941]   - Field: ‘stdout’
[16:12:16.959]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941]   - Field: ‘earlySignal’
[16:12:16.960]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941]   - Field: ‘lazy’
[16:12:16.960]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941]   - Field: ‘state’
[16:12:16.960]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.960]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941] - Launch lazy future ...
[16:12:16.960]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941] Packages needed by the future expression (n = 0): <none>
[16:12:16.960]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.941] Packages needed by future strategies (n = 0): <none>
[16:12:16.960]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.942] {
[16:12:16.942]     {
[16:12:16.942]         {
[16:12:16.942]             ...future.startTime <- base::Sys.time()
[16:12:16.942]             {
[16:12:16.942]                 {
[16:12:16.942]                   {
[16:12:16.942]                     base::local({
[16:12:16.942]                       has_future <- base::requireNamespace("future", 
[16:12:16.942]                         quietly = TRUE)
[16:12:16.942]                       if (has_future) {
[16:12:16.942]                         ns <- base::getNamespace("future")
[16:12:16.942]                         version <- ns[[".package"]][["version"]]
[16:12:16.942]                         if (is.null(version)) 
[16:12:16.942]                           version <- utils::packageVersion("future")
[16:12:16.942]                       }
[16:12:16.942]                       else {
[16:12:16.942]                         version <- NULL
[16:12:16.942]                       }
[16:12:16.942]                       if (!has_future || version < "1.8.0") {
[16:12:16.942]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.942]                           "", base::R.version$version.string), 
[16:12:16.942]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.942]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.942]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.942]                             "release", "version")], collapse = " "), 
[16:12:16.942]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.942]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.942]                           info)
[16:12:16.942]                         info <- base::paste(info, collapse = "; ")
[16:12:16.942]                         if (!has_future) {
[16:12:16.942]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.942]                             info)
[16:12:16.942]                         }
[16:12:16.942]                         else {
[16:12:16.942]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.942]                             info, version)
[16:12:16.942]                         }
[16:12:16.942]                         base::stop(msg)
[16:12:16.942]                       }
[16:12:16.942]                     })
[16:12:16.942]                   }
[16:12:16.942]                   options(future.plan = NULL)
[16:12:16.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.942]                 }
[16:12:16.942]                 ...future.workdir <- getwd()
[16:12:16.942]             }
[16:12:16.942]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.942]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.942]         }
[16:12:16.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.942]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.942]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.942]             base::names(...future.oldOptions))
[16:12:16.942]     }
[16:12:16.942]     if (FALSE) {
[16:12:16.942]     }
[16:12:16.942]     else {
[16:12:16.942]         if (TRUE) {
[16:12:16.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.942]                 open = "w")
[16:12:16.942]         }
[16:12:16.942]         else {
[16:12:16.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.942]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.942]         }
[16:12:16.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.942]             base::sink(type = "output", split = FALSE)
[16:12:16.942]             base::close(...future.stdout)
[16:12:16.942]         }, add = TRUE)
[16:12:16.942]     }
[16:12:16.942]     ...future.frame <- base::sys.nframe()
[16:12:16.942]     ...future.conditions <- base::list()
[16:12:16.942]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.942]     if (FALSE) {
[16:12:16.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.942]     }
[16:12:16.942]     ...future.result <- base::tryCatch({
[16:12:16.942]         base::withCallingHandlers({
[16:12:16.942]             ...future.value <- base::withVisible(base::local(4))
[16:12:16.942]             future::FutureResult(value = ...future.value$value, 
[16:12:16.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.942]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.942]                     ...future.globalenv.names))
[16:12:16.942]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.942]         }, condition = base::local({
[16:12:16.942]             c <- base::c
[16:12:16.942]             inherits <- base::inherits
[16:12:16.942]             invokeRestart <- base::invokeRestart
[16:12:16.942]             length <- base::length
[16:12:16.942]             list <- base::list
[16:12:16.942]             seq.int <- base::seq.int
[16:12:16.942]             signalCondition <- base::signalCondition
[16:12:16.942]             sys.calls <- base::sys.calls
[16:12:16.942]             `[[` <- base::`[[`
[16:12:16.942]             `+` <- base::`+`
[16:12:16.942]             `<<-` <- base::`<<-`
[16:12:16.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.942]                   3L)]
[16:12:16.942]             }
[16:12:16.942]             function(cond) {
[16:12:16.942]                 is_error <- inherits(cond, "error")
[16:12:16.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.942]                   NULL)
[16:12:16.942]                 if (is_error) {
[16:12:16.942]                   sessionInformation <- function() {
[16:12:16.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.942]                       search = base::search(), system = base::Sys.info())
[16:12:16.942]                   }
[16:12:16.942]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.942]                     cond$call), session = sessionInformation(), 
[16:12:16.942]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.942]                   signalCondition(cond)
[16:12:16.942]                 }
[16:12:16.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.942]                 "immediateCondition"))) {
[16:12:16.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.942]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.942]                   if (TRUE && !signal) {
[16:12:16.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.942]                     {
[16:12:16.942]                       inherits <- base::inherits
[16:12:16.942]                       invokeRestart <- base::invokeRestart
[16:12:16.942]                       is.null <- base::is.null
[16:12:16.942]                       muffled <- FALSE
[16:12:16.942]                       if (inherits(cond, "message")) {
[16:12:16.942]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.942]                         if (muffled) 
[16:12:16.942]                           invokeRestart("muffleMessage")
[16:12:16.942]                       }
[16:12:16.942]                       else if (inherits(cond, "warning")) {
[16:12:16.942]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.942]                         if (muffled) 
[16:12:16.942]                           invokeRestart("muffleWarning")
[16:12:16.942]                       }
[16:12:16.942]                       else if (inherits(cond, "condition")) {
[16:12:16.942]                         if (!is.null(pattern)) {
[16:12:16.942]                           computeRestarts <- base::computeRestarts
[16:12:16.942]                           grepl <- base::grepl
[16:12:16.942]                           restarts <- computeRestarts(cond)
[16:12:16.942]                           for (restart in restarts) {
[16:12:16.942]                             name <- restart$name
[16:12:16.942]                             if (is.null(name)) 
[16:12:16.942]                               next
[16:12:16.942]                             if (!grepl(pattern, name)) 
[16:12:16.942]                               next
[16:12:16.942]                             invokeRestart(restart)
[16:12:16.942]                             muffled <- TRUE
[16:12:16.942]                             break
[16:12:16.942]                           }
[16:12:16.942]                         }
[16:12:16.942]                       }
[16:12:16.942]                       invisible(muffled)
[16:12:16.942]                     }
[16:12:16.942]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.942]                   }
[16:12:16.942]                 }
[16:12:16.942]                 else {
[16:12:16.942]                   if (TRUE) {
[16:12:16.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.942]                     {
[16:12:16.942]                       inherits <- base::inherits
[16:12:16.942]                       invokeRestart <- base::invokeRestart
[16:12:16.942]                       is.null <- base::is.null
[16:12:16.942]                       muffled <- FALSE
[16:12:16.942]                       if (inherits(cond, "message")) {
[16:12:16.942]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.942]                         if (muffled) 
[16:12:16.942]                           invokeRestart("muffleMessage")
[16:12:16.942]                       }
[16:12:16.942]                       else if (inherits(cond, "warning")) {
[16:12:16.942]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.942]                         if (muffled) 
[16:12:16.942]                           invokeRestart("muffleWarning")
[16:12:16.942]                       }
[16:12:16.942]                       else if (inherits(cond, "condition")) {
[16:12:16.942]                         if (!is.null(pattern)) {
[16:12:16.942]                           computeRestarts <- base::computeRestarts
[16:12:16.942]                           grepl <- base::grepl
[16:12:16.942]                           restarts <- computeRestarts(cond)
[16:12:16.942]                           for (restart in restarts) {
[16:12:16.942]                             name <- restart$name
[16:12:16.942]                             if (is.null(name)) 
[16:12:16.942]                               next
[16:12:16.942]                             if (!grepl(pattern, name)) 
[16:12:16.942]                               next
[16:12:16.942]                             invokeRestart(restart)
[16:12:16.942]                             muffled <- TRUE
[16:12:16.942]                             break
[16:12:16.942]                           }
[16:12:16.942]                         }
[16:12:16.942]                       }
[16:12:16.942]                       invisible(muffled)
[16:12:16.942]                     }
[16:12:16.942]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.942]                   }
[16:12:16.942]                 }
[16:12:16.942]             }
[16:12:16.942]         }))
[16:12:16.942]     }, error = function(ex) {
[16:12:16.942]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.942]                 ...future.rng), started = ...future.startTime, 
[16:12:16.942]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.942]             version = "1.8"), class = "FutureResult")
[16:12:16.942]     }, finally = {
[16:12:16.942]         if (!identical(...future.workdir, getwd())) 
[16:12:16.942]             setwd(...future.workdir)
[16:12:16.942]         {
[16:12:16.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.942]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.942]             }
[16:12:16.942]             base::options(...future.oldOptions)
[16:12:16.942]             if (.Platform$OS.type == "windows") {
[16:12:16.942]                 old_names <- names(...future.oldEnvVars)
[16:12:16.942]                 envs <- base::Sys.getenv()
[16:12:16.942]                 names <- names(envs)
[16:12:16.942]                 common <- intersect(names, old_names)
[16:12:16.942]                 added <- setdiff(names, old_names)
[16:12:16.942]                 removed <- setdiff(old_names, names)
[16:12:16.942]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.942]                   envs[common]]
[16:12:16.942]                 NAMES <- toupper(changed)
[16:12:16.942]                 args <- list()
[16:12:16.942]                 for (kk in seq_along(NAMES)) {
[16:12:16.942]                   name <- changed[[kk]]
[16:12:16.942]                   NAME <- NAMES[[kk]]
[16:12:16.942]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.942]                     next
[16:12:16.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.942]                 }
[16:12:16.942]                 NAMES <- toupper(added)
[16:12:16.942]                 for (kk in seq_along(NAMES)) {
[16:12:16.942]                   name <- added[[kk]]
[16:12:16.942]                   NAME <- NAMES[[kk]]
[16:12:16.942]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.942]                     next
[16:12:16.942]                   args[[name]] <- ""
[16:12:16.942]                 }
[16:12:16.942]                 NAMES <- toupper(removed)
[16:12:16.942]                 for (kk in seq_along(NAMES)) {
[16:12:16.942]                   name <- removed[[kk]]
[16:12:16.942]                   NAME <- NAMES[[kk]]
[16:12:16.942]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.942]                     next
[16:12:16.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.942]                 }
[16:12:16.942]                 if (length(args) > 0) 
[16:12:16.942]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.942]             }
[16:12:16.942]             else {
[16:12:16.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.942]             }
[16:12:16.942]             {
[16:12:16.942]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.942]                   0L) {
[16:12:16.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.942]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.942]                   base::options(opts)
[16:12:16.942]                 }
[16:12:16.942]                 {
[16:12:16.942]                   {
[16:12:16.942]                     NULL
[16:12:16.942]                     RNGkind("Mersenne-Twister")
[16:12:16.942]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.942]                       inherits = FALSE)
[16:12:16.942]                   }
[16:12:16.942]                   options(future.plan = NULL)
[16:12:16.942]                   if (is.na(NA_character_)) 
[16:12:16.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.942]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.942]                   {
[16:12:16.942]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.942]                     if (!future$lazy) 
[16:12:16.942]                       future <- run(future)
[16:12:16.942]                     invisible(future)
[16:12:16.942]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.942]                 }
[16:12:16.942]             }
[16:12:16.942]         }
[16:12:16.942]     })
[16:12:16.942]     if (TRUE) {
[16:12:16.942]         base::sink(type = "output", split = FALSE)
[16:12:16.942]         if (TRUE) {
[16:12:16.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.942]         }
[16:12:16.942]         else {
[16:12:16.942]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.942]         }
[16:12:16.942]         base::close(...future.stdout)
[16:12:16.942]         ...future.stdout <- NULL
[16:12:16.942]     }
[16:12:16.942]     ...future.result$conditions <- ...future.conditions
[16:12:16.942]     ...future.result$finished <- base::Sys.time()
[16:12:16.942]     ...future.result
[16:12:16.942] }
[16:12:16.961]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.943] plan(): Setting new future strategy stack:
[16:12:16.961]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.943] List of future strategies:
[16:12:16.943] 1. sequential:
[16:12:16.943]    - args: function (..., envir = parent.frame())
[16:12:16.943]    - tweaked: FALSE
[16:12:16.943]    - call: NULL
[16:12:16.961]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.944] plan(): nbrOfWorkers() = 1
[16:12:16.961]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.945] plan(): Setting new future strategy stack:
[16:12:16.961]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.945] List of future strategies:
[16:12:16.945] 1. sequential:
[16:12:16.945]    - args: function (..., envir = parent.frame())
[16:12:16.945]    - tweaked: FALSE
[16:12:16.945]    - call: NULL
[16:12:16.961]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.945] plan(): nbrOfWorkers() = 1
[16:12:16.961]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.945] SequentialFuture started (and completed)
[16:12:16.961]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.945] - Launch lazy future ... done
[16:12:16.962]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:16.946] run() for ‘SequentialFuture’ ... done
[16:12:16.962] signalConditions() ... done
a = 10
[16:12:16.962] getGlobalsAndPackages() ...
[16:12:16.962] Searching for globals...
[16:12:16.963] - globals found: [3] ‘{’, ‘+’, ‘a’
[16:12:16.963] Searching for globals ... DONE
[16:12:16.963] Resolving globals: FALSE
[16:12:16.963] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:16.964] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:12:16.964] - globals: [1] ‘a’
[16:12:16.964] 
[16:12:16.964] getGlobalsAndPackages() ... DONE
[16:12:16.964] run() for ‘Future’ ...
[16:12:16.964] - state: ‘created’
[16:12:16.965] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:16.965] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:16.965] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:16.965]   - Field: ‘label’
[16:12:16.965]   - Field: ‘local’
[16:12:16.965]   - Field: ‘owner’
[16:12:16.965]   - Field: ‘envir’
[16:12:16.965]   - Field: ‘packages’
[16:12:16.965]   - Field: ‘gc’
[16:12:16.966]   - Field: ‘conditions’
[16:12:16.966]   - Field: ‘expr’
[16:12:16.966]   - Field: ‘uuid’
[16:12:16.966]   - Field: ‘seed’
[16:12:16.966]   - Field: ‘version’
[16:12:16.966]   - Field: ‘result’
[16:12:16.966]   - Field: ‘asynchronous’
[16:12:16.966]   - Field: ‘calls’
[16:12:16.966]   - Field: ‘globals’
[16:12:16.966]   - Field: ‘stdout’
[16:12:16.966]   - Field: ‘earlySignal’
[16:12:16.966]   - Field: ‘lazy’
[16:12:16.967]   - Field: ‘state’
[16:12:16.967] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:16.967] - Launch lazy future ...
[16:12:16.967] Packages needed by the future expression (n = 0): <none>
[16:12:16.967] Packages needed by future strategies (n = 0): <none>
[16:12:16.967] {
[16:12:16.967]     {
[16:12:16.967]         {
[16:12:16.967]             ...future.startTime <- base::Sys.time()
[16:12:16.967]             {
[16:12:16.967]                 {
[16:12:16.967]                   {
[16:12:16.967]                     base::local({
[16:12:16.967]                       has_future <- base::requireNamespace("future", 
[16:12:16.967]                         quietly = TRUE)
[16:12:16.967]                       if (has_future) {
[16:12:16.967]                         ns <- base::getNamespace("future")
[16:12:16.967]                         version <- ns[[".package"]][["version"]]
[16:12:16.967]                         if (is.null(version)) 
[16:12:16.967]                           version <- utils::packageVersion("future")
[16:12:16.967]                       }
[16:12:16.967]                       else {
[16:12:16.967]                         version <- NULL
[16:12:16.967]                       }
[16:12:16.967]                       if (!has_future || version < "1.8.0") {
[16:12:16.967]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.967]                           "", base::R.version$version.string), 
[16:12:16.967]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:16.967]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.967]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.967]                             "release", "version")], collapse = " "), 
[16:12:16.967]                           hostname = base::Sys.info()[["nodename"]])
[16:12:16.967]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.967]                           info)
[16:12:16.967]                         info <- base::paste(info, collapse = "; ")
[16:12:16.967]                         if (!has_future) {
[16:12:16.967]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.967]                             info)
[16:12:16.967]                         }
[16:12:16.967]                         else {
[16:12:16.967]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.967]                             info, version)
[16:12:16.967]                         }
[16:12:16.967]                         base::stop(msg)
[16:12:16.967]                       }
[16:12:16.967]                     })
[16:12:16.967]                   }
[16:12:16.967]                   options(future.plan = NULL)
[16:12:16.967]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.967]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.967]                 }
[16:12:16.967]                 ...future.workdir <- getwd()
[16:12:16.967]             }
[16:12:16.967]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.967]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.967]         }
[16:12:16.967]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.967]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.967]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.967]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.967]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.967]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.967]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.967]             base::names(...future.oldOptions))
[16:12:16.967]     }
[16:12:16.967]     if (FALSE) {
[16:12:16.967]     }
[16:12:16.967]     else {
[16:12:16.967]         if (TRUE) {
[16:12:16.967]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.967]                 open = "w")
[16:12:16.967]         }
[16:12:16.967]         else {
[16:12:16.967]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.967]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.967]         }
[16:12:16.967]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.967]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.967]             base::sink(type = "output", split = FALSE)
[16:12:16.967]             base::close(...future.stdout)
[16:12:16.967]         }, add = TRUE)
[16:12:16.967]     }
[16:12:16.967]     ...future.frame <- base::sys.nframe()
[16:12:16.967]     ...future.conditions <- base::list()
[16:12:16.967]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.967]     if (FALSE) {
[16:12:16.967]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.967]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.967]     }
[16:12:16.967]     ...future.result <- base::tryCatch({
[16:12:16.967]         base::withCallingHandlers({
[16:12:16.967]             ...future.value <- base::withVisible(base::local({
[16:12:16.967]                 a + 1
[16:12:16.967]             }))
[16:12:16.967]             future::FutureResult(value = ...future.value$value, 
[16:12:16.967]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.967]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.967]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.967]                     ...future.globalenv.names))
[16:12:16.967]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.967]         }, condition = base::local({
[16:12:16.967]             c <- base::c
[16:12:16.967]             inherits <- base::inherits
[16:12:16.967]             invokeRestart <- base::invokeRestart
[16:12:16.967]             length <- base::length
[16:12:16.967]             list <- base::list
[16:12:16.967]             seq.int <- base::seq.int
[16:12:16.967]             signalCondition <- base::signalCondition
[16:12:16.967]             sys.calls <- base::sys.calls
[16:12:16.967]             `[[` <- base::`[[`
[16:12:16.967]             `+` <- base::`+`
[16:12:16.967]             `<<-` <- base::`<<-`
[16:12:16.967]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.967]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.967]                   3L)]
[16:12:16.967]             }
[16:12:16.967]             function(cond) {
[16:12:16.967]                 is_error <- inherits(cond, "error")
[16:12:16.967]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.967]                   NULL)
[16:12:16.967]                 if (is_error) {
[16:12:16.967]                   sessionInformation <- function() {
[16:12:16.967]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.967]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.967]                       search = base::search(), system = base::Sys.info())
[16:12:16.967]                   }
[16:12:16.967]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.967]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.967]                     cond$call), session = sessionInformation(), 
[16:12:16.967]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.967]                   signalCondition(cond)
[16:12:16.967]                 }
[16:12:16.967]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.967]                 "immediateCondition"))) {
[16:12:16.967]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.967]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.967]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.967]                   if (TRUE && !signal) {
[16:12:16.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.967]                     {
[16:12:16.967]                       inherits <- base::inherits
[16:12:16.967]                       invokeRestart <- base::invokeRestart
[16:12:16.967]                       is.null <- base::is.null
[16:12:16.967]                       muffled <- FALSE
[16:12:16.967]                       if (inherits(cond, "message")) {
[16:12:16.967]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.967]                         if (muffled) 
[16:12:16.967]                           invokeRestart("muffleMessage")
[16:12:16.967]                       }
[16:12:16.967]                       else if (inherits(cond, "warning")) {
[16:12:16.967]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.967]                         if (muffled) 
[16:12:16.967]                           invokeRestart("muffleWarning")
[16:12:16.967]                       }
[16:12:16.967]                       else if (inherits(cond, "condition")) {
[16:12:16.967]                         if (!is.null(pattern)) {
[16:12:16.967]                           computeRestarts <- base::computeRestarts
[16:12:16.967]                           grepl <- base::grepl
[16:12:16.967]                           restarts <- computeRestarts(cond)
[16:12:16.967]                           for (restart in restarts) {
[16:12:16.967]                             name <- restart$name
[16:12:16.967]                             if (is.null(name)) 
[16:12:16.967]                               next
[16:12:16.967]                             if (!grepl(pattern, name)) 
[16:12:16.967]                               next
[16:12:16.967]                             invokeRestart(restart)
[16:12:16.967]                             muffled <- TRUE
[16:12:16.967]                             break
[16:12:16.967]                           }
[16:12:16.967]                         }
[16:12:16.967]                       }
[16:12:16.967]                       invisible(muffled)
[16:12:16.967]                     }
[16:12:16.967]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.967]                   }
[16:12:16.967]                 }
[16:12:16.967]                 else {
[16:12:16.967]                   if (TRUE) {
[16:12:16.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.967]                     {
[16:12:16.967]                       inherits <- base::inherits
[16:12:16.967]                       invokeRestart <- base::invokeRestart
[16:12:16.967]                       is.null <- base::is.null
[16:12:16.967]                       muffled <- FALSE
[16:12:16.967]                       if (inherits(cond, "message")) {
[16:12:16.967]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.967]                         if (muffled) 
[16:12:16.967]                           invokeRestart("muffleMessage")
[16:12:16.967]                       }
[16:12:16.967]                       else if (inherits(cond, "warning")) {
[16:12:16.967]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.967]                         if (muffled) 
[16:12:16.967]                           invokeRestart("muffleWarning")
[16:12:16.967]                       }
[16:12:16.967]                       else if (inherits(cond, "condition")) {
[16:12:16.967]                         if (!is.null(pattern)) {
[16:12:16.967]                           computeRestarts <- base::computeRestarts
[16:12:16.967]                           grepl <- base::grepl
[16:12:16.967]                           restarts <- computeRestarts(cond)
[16:12:16.967]                           for (restart in restarts) {
[16:12:16.967]                             name <- restart$name
[16:12:16.967]                             if (is.null(name)) 
[16:12:16.967]                               next
[16:12:16.967]                             if (!grepl(pattern, name)) 
[16:12:16.967]                               next
[16:12:16.967]                             invokeRestart(restart)
[16:12:16.967]                             muffled <- TRUE
[16:12:16.967]                             break
[16:12:16.967]                           }
[16:12:16.967]                         }
[16:12:16.967]                       }
[16:12:16.967]                       invisible(muffled)
[16:12:16.967]                     }
[16:12:16.967]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.967]                   }
[16:12:16.967]                 }
[16:12:16.967]             }
[16:12:16.967]         }))
[16:12:16.967]     }, error = function(ex) {
[16:12:16.967]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.967]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.967]                 ...future.rng), started = ...future.startTime, 
[16:12:16.967]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.967]             version = "1.8"), class = "FutureResult")
[16:12:16.967]     }, finally = {
[16:12:16.967]         if (!identical(...future.workdir, getwd())) 
[16:12:16.967]             setwd(...future.workdir)
[16:12:16.967]         {
[16:12:16.967]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.967]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.967]             }
[16:12:16.967]             base::options(...future.oldOptions)
[16:12:16.967]             if (.Platform$OS.type == "windows") {
[16:12:16.967]                 old_names <- names(...future.oldEnvVars)
[16:12:16.967]                 envs <- base::Sys.getenv()
[16:12:16.967]                 names <- names(envs)
[16:12:16.967]                 common <- intersect(names, old_names)
[16:12:16.967]                 added <- setdiff(names, old_names)
[16:12:16.967]                 removed <- setdiff(old_names, names)
[16:12:16.967]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.967]                   envs[common]]
[16:12:16.967]                 NAMES <- toupper(changed)
[16:12:16.967]                 args <- list()
[16:12:16.967]                 for (kk in seq_along(NAMES)) {
[16:12:16.967]                   name <- changed[[kk]]
[16:12:16.967]                   NAME <- NAMES[[kk]]
[16:12:16.967]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.967]                     next
[16:12:16.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.967]                 }
[16:12:16.967]                 NAMES <- toupper(added)
[16:12:16.967]                 for (kk in seq_along(NAMES)) {
[16:12:16.967]                   name <- added[[kk]]
[16:12:16.967]                   NAME <- NAMES[[kk]]
[16:12:16.967]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.967]                     next
[16:12:16.967]                   args[[name]] <- ""
[16:12:16.967]                 }
[16:12:16.967]                 NAMES <- toupper(removed)
[16:12:16.967]                 for (kk in seq_along(NAMES)) {
[16:12:16.967]                   name <- removed[[kk]]
[16:12:16.967]                   NAME <- NAMES[[kk]]
[16:12:16.967]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.967]                     next
[16:12:16.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.967]                 }
[16:12:16.967]                 if (length(args) > 0) 
[16:12:16.967]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.967]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.967]             }
[16:12:16.967]             else {
[16:12:16.967]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.967]             }
[16:12:16.967]             {
[16:12:16.967]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.967]                   0L) {
[16:12:16.967]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.967]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.967]                   base::options(opts)
[16:12:16.967]                 }
[16:12:16.967]                 {
[16:12:16.967]                   {
[16:12:16.967]                     NULL
[16:12:16.967]                     RNGkind("Mersenne-Twister")
[16:12:16.967]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:16.967]                       inherits = FALSE)
[16:12:16.967]                   }
[16:12:16.967]                   options(future.plan = NULL)
[16:12:16.967]                   if (is.na(NA_character_)) 
[16:12:16.967]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.967]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.967]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:16.967]                   {
[16:12:16.967]                     future <- SequentialFuture(..., envir = envir)
[16:12:16.967]                     if (!future$lazy) 
[16:12:16.967]                       future <- run(future)
[16:12:16.967]                     invisible(future)
[16:12:16.967]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.967]                 }
[16:12:16.967]             }
[16:12:16.967]         }
[16:12:16.967]     })
[16:12:16.967]     if (TRUE) {
[16:12:16.967]         base::sink(type = "output", split = FALSE)
[16:12:16.967]         if (TRUE) {
[16:12:16.967]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.967]         }
[16:12:16.967]         else {
[16:12:16.967]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.967]         }
[16:12:16.967]         base::close(...future.stdout)
[16:12:16.967]         ...future.stdout <- NULL
[16:12:16.967]     }
[16:12:16.967]     ...future.result$conditions <- ...future.conditions
[16:12:16.967]     ...future.result$finished <- base::Sys.time()
[16:12:16.967]     ...future.result
[16:12:16.967] }
[16:12:16.969] assign_globals() ...
[16:12:16.969] List of 1
[16:12:16.969]  $ a: num 10
[16:12:16.969]  - attr(*, "where")=List of 1
[16:12:16.969]   ..$ a:<environment: R_EmptyEnv> 
[16:12:16.969]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:16.969]  - attr(*, "resolved")= logi FALSE
[16:12:16.969]  - attr(*, "total_size")= num 56
[16:12:16.969]  - attr(*, "already-done")= logi TRUE
[16:12:16.971] - copied ‘a’ to environment
[16:12:16.972] assign_globals() ... done
[16:12:16.972] plan(): Setting new future strategy stack:
[16:12:16.972] List of future strategies:
[16:12:16.972] 1. sequential:
[16:12:16.972]    - args: function (..., envir = parent.frame())
[16:12:16.972]    - tweaked: FALSE
[16:12:16.972]    - call: NULL
[16:12:16.972] plan(): nbrOfWorkers() = 1
[16:12:16.973] plan(): Setting new future strategy stack:
[16:12:16.973] List of future strategies:
[16:12:16.973] 1. sequential:
[16:12:16.973]    - args: function (..., envir = parent.frame())
[16:12:16.973]    - tweaked: FALSE
[16:12:16.973]    - call: plan(strategy)
[16:12:16.973] plan(): nbrOfWorkers() = 1
[16:12:16.974] SequentialFuture started (and completed)
[16:12:16.974] - Launch lazy future ... done
[16:12:16.974] run() for ‘SequentialFuture’ ... done
b = 11
*** %<-% with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** %<-% with ‘multicore’ futures ...
[16:12:16.981] plan(): Setting new future strategy stack:
[16:12:16.981] List of future strategies:
[16:12:16.981] 1. multicore:
[16:12:16.981]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:16.981]    - tweaked: FALSE
[16:12:16.981]    - call: plan(strategy)
[16:12:16.985] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[16:12:16.985] getGlobalsAndPackages() ...
[16:12:16.985] Searching for globals...
[16:12:16.986] - globals found: [2] ‘{’, ‘<-’
[16:12:16.986] Searching for globals ... DONE
[16:12:16.987] Resolving globals: FALSE
[16:12:16.987] 
[16:12:16.987] 
[16:12:16.987] getGlobalsAndPackages() ... DONE
[16:12:16.987] run() for ‘Future’ ...
[16:12:16.987] - state: ‘created’
[16:12:16.988] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:16.991] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:16.991] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:16.991]   - Field: ‘label’
[16:12:16.991]   - Field: ‘local’
[16:12:16.991]   - Field: ‘owner’
[16:12:16.991]   - Field: ‘envir’
[16:12:16.992]   - Field: ‘workers’
[16:12:16.992]   - Field: ‘packages’
[16:12:16.992]   - Field: ‘gc’
[16:12:16.992]   - Field: ‘job’
[16:12:16.992]   - Field: ‘conditions’
[16:12:16.992]   - Field: ‘expr’
[16:12:16.992]   - Field: ‘uuid’
[16:12:16.992]   - Field: ‘seed’
[16:12:16.992]   - Field: ‘version’
[16:12:16.992]   - Field: ‘result’
[16:12:16.992]   - Field: ‘asynchronous’
[16:12:16.993]   - Field: ‘calls’
[16:12:16.993]   - Field: ‘globals’
[16:12:16.993]   - Field: ‘stdout’
[16:12:16.993]   - Field: ‘earlySignal’
[16:12:16.993]   - Field: ‘lazy’
[16:12:16.993]   - Field: ‘state’
[16:12:16.993] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:16.993] - Launch lazy future ...
[16:12:16.994] Packages needed by the future expression (n = 0): <none>
[16:12:16.994] Packages needed by future strategies (n = 0): <none>
[16:12:16.995] {
[16:12:16.995]     {
[16:12:16.995]         {
[16:12:16.995]             ...future.startTime <- base::Sys.time()
[16:12:16.995]             {
[16:12:16.995]                 {
[16:12:16.995]                   {
[16:12:16.995]                     {
[16:12:16.995]                       base::local({
[16:12:16.995]                         has_future <- base::requireNamespace("future", 
[16:12:16.995]                           quietly = TRUE)
[16:12:16.995]                         if (has_future) {
[16:12:16.995]                           ns <- base::getNamespace("future")
[16:12:16.995]                           version <- ns[[".package"]][["version"]]
[16:12:16.995]                           if (is.null(version)) 
[16:12:16.995]                             version <- utils::packageVersion("future")
[16:12:16.995]                         }
[16:12:16.995]                         else {
[16:12:16.995]                           version <- NULL
[16:12:16.995]                         }
[16:12:16.995]                         if (!has_future || version < "1.8.0") {
[16:12:16.995]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:16.995]                             "", base::R.version$version.string), 
[16:12:16.995]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:16.995]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:16.995]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:16.995]                               "release", "version")], collapse = " "), 
[16:12:16.995]                             hostname = base::Sys.info()[["nodename"]])
[16:12:16.995]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:16.995]                             info)
[16:12:16.995]                           info <- base::paste(info, collapse = "; ")
[16:12:16.995]                           if (!has_future) {
[16:12:16.995]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:16.995]                               info)
[16:12:16.995]                           }
[16:12:16.995]                           else {
[16:12:16.995]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:16.995]                               info, version)
[16:12:16.995]                           }
[16:12:16.995]                           base::stop(msg)
[16:12:16.995]                         }
[16:12:16.995]                       })
[16:12:16.995]                     }
[16:12:16.995]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:16.995]                     base::options(mc.cores = 1L)
[16:12:16.995]                   }
[16:12:16.995]                   options(future.plan = NULL)
[16:12:16.995]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.995]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:16.995]                 }
[16:12:16.995]                 ...future.workdir <- getwd()
[16:12:16.995]             }
[16:12:16.995]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:16.995]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:16.995]         }
[16:12:16.995]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:16.995]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:16.995]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:16.995]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:16.995]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:16.995]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:16.995]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:16.995]             base::names(...future.oldOptions))
[16:12:16.995]     }
[16:12:16.995]     if (FALSE) {
[16:12:16.995]     }
[16:12:16.995]     else {
[16:12:16.995]         if (TRUE) {
[16:12:16.995]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:16.995]                 open = "w")
[16:12:16.995]         }
[16:12:16.995]         else {
[16:12:16.995]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:16.995]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:16.995]         }
[16:12:16.995]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:16.995]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:16.995]             base::sink(type = "output", split = FALSE)
[16:12:16.995]             base::close(...future.stdout)
[16:12:16.995]         }, add = TRUE)
[16:12:16.995]     }
[16:12:16.995]     ...future.frame <- base::sys.nframe()
[16:12:16.995]     ...future.conditions <- base::list()
[16:12:16.995]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:16.995]     if (FALSE) {
[16:12:16.995]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:16.995]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:16.995]     }
[16:12:16.995]     ...future.result <- base::tryCatch({
[16:12:16.995]         base::withCallingHandlers({
[16:12:16.995]             ...future.value <- base::withVisible(base::local({
[16:12:16.995]                 withCallingHandlers({
[16:12:16.995]                   {
[16:12:16.995]                     x <- 1
[16:12:16.995]                   }
[16:12:16.995]                 }, immediateCondition = function(cond) {
[16:12:16.995]                   save_rds <- function (object, pathname, ...) 
[16:12:16.995]                   {
[16:12:16.995]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:16.995]                     if (file_test("-f", pathname_tmp)) {
[16:12:16.995]                       fi_tmp <- file.info(pathname_tmp)
[16:12:16.995]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:16.995]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:16.995]                         fi_tmp[["mtime"]])
[16:12:16.995]                     }
[16:12:16.995]                     tryCatch({
[16:12:16.995]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:16.995]                     }, error = function(ex) {
[16:12:16.995]                       msg <- conditionMessage(ex)
[16:12:16.995]                       fi_tmp <- file.info(pathname_tmp)
[16:12:16.995]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:16.995]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:16.995]                         fi_tmp[["mtime"]], msg)
[16:12:16.995]                       ex$message <- msg
[16:12:16.995]                       stop(ex)
[16:12:16.995]                     })
[16:12:16.995]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:16.995]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:16.995]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:16.995]                       fi_tmp <- file.info(pathname_tmp)
[16:12:16.995]                       fi <- file.info(pathname)
[16:12:16.995]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:16.995]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:16.995]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:16.995]                         fi[["size"]], fi[["mtime"]])
[16:12:16.995]                       stop(msg)
[16:12:16.995]                     }
[16:12:16.995]                     invisible(pathname)
[16:12:16.995]                   }
[16:12:16.995]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:16.995]                     rootPath = tempdir()) 
[16:12:16.995]                   {
[16:12:16.995]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:16.995]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:16.995]                       tmpdir = path, fileext = ".rds")
[16:12:16.995]                     save_rds(obj, file)
[16:12:16.995]                   }
[16:12:16.995]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:16.995]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.995]                   {
[16:12:16.995]                     inherits <- base::inherits
[16:12:16.995]                     invokeRestart <- base::invokeRestart
[16:12:16.995]                     is.null <- base::is.null
[16:12:16.995]                     muffled <- FALSE
[16:12:16.995]                     if (inherits(cond, "message")) {
[16:12:16.995]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:16.995]                       if (muffled) 
[16:12:16.995]                         invokeRestart("muffleMessage")
[16:12:16.995]                     }
[16:12:16.995]                     else if (inherits(cond, "warning")) {
[16:12:16.995]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:16.995]                       if (muffled) 
[16:12:16.995]                         invokeRestart("muffleWarning")
[16:12:16.995]                     }
[16:12:16.995]                     else if (inherits(cond, "condition")) {
[16:12:16.995]                       if (!is.null(pattern)) {
[16:12:16.995]                         computeRestarts <- base::computeRestarts
[16:12:16.995]                         grepl <- base::grepl
[16:12:16.995]                         restarts <- computeRestarts(cond)
[16:12:16.995]                         for (restart in restarts) {
[16:12:16.995]                           name <- restart$name
[16:12:16.995]                           if (is.null(name)) 
[16:12:16.995]                             next
[16:12:16.995]                           if (!grepl(pattern, name)) 
[16:12:16.995]                             next
[16:12:16.995]                           invokeRestart(restart)
[16:12:16.995]                           muffled <- TRUE
[16:12:16.995]                           break
[16:12:16.995]                         }
[16:12:16.995]                       }
[16:12:16.995]                     }
[16:12:16.995]                     invisible(muffled)
[16:12:16.995]                   }
[16:12:16.995]                   muffleCondition(cond)
[16:12:16.995]                 })
[16:12:16.995]             }))
[16:12:16.995]             future::FutureResult(value = ...future.value$value, 
[16:12:16.995]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.995]                   ...future.rng), globalenv = if (FALSE) 
[16:12:16.995]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:16.995]                     ...future.globalenv.names))
[16:12:16.995]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:16.995]         }, condition = base::local({
[16:12:16.995]             c <- base::c
[16:12:16.995]             inherits <- base::inherits
[16:12:16.995]             invokeRestart <- base::invokeRestart
[16:12:16.995]             length <- base::length
[16:12:16.995]             list <- base::list
[16:12:16.995]             seq.int <- base::seq.int
[16:12:16.995]             signalCondition <- base::signalCondition
[16:12:16.995]             sys.calls <- base::sys.calls
[16:12:16.995]             `[[` <- base::`[[`
[16:12:16.995]             `+` <- base::`+`
[16:12:16.995]             `<<-` <- base::`<<-`
[16:12:16.995]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:16.995]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:16.995]                   3L)]
[16:12:16.995]             }
[16:12:16.995]             function(cond) {
[16:12:16.995]                 is_error <- inherits(cond, "error")
[16:12:16.995]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:16.995]                   NULL)
[16:12:16.995]                 if (is_error) {
[16:12:16.995]                   sessionInformation <- function() {
[16:12:16.995]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:16.995]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:16.995]                       search = base::search(), system = base::Sys.info())
[16:12:16.995]                   }
[16:12:16.995]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.995]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:16.995]                     cond$call), session = sessionInformation(), 
[16:12:16.995]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:16.995]                   signalCondition(cond)
[16:12:16.995]                 }
[16:12:16.995]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:16.995]                 "immediateCondition"))) {
[16:12:16.995]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:16.995]                   ...future.conditions[[length(...future.conditions) + 
[16:12:16.995]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:16.995]                   if (TRUE && !signal) {
[16:12:16.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.995]                     {
[16:12:16.995]                       inherits <- base::inherits
[16:12:16.995]                       invokeRestart <- base::invokeRestart
[16:12:16.995]                       is.null <- base::is.null
[16:12:16.995]                       muffled <- FALSE
[16:12:16.995]                       if (inherits(cond, "message")) {
[16:12:16.995]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.995]                         if (muffled) 
[16:12:16.995]                           invokeRestart("muffleMessage")
[16:12:16.995]                       }
[16:12:16.995]                       else if (inherits(cond, "warning")) {
[16:12:16.995]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.995]                         if (muffled) 
[16:12:16.995]                           invokeRestart("muffleWarning")
[16:12:16.995]                       }
[16:12:16.995]                       else if (inherits(cond, "condition")) {
[16:12:16.995]                         if (!is.null(pattern)) {
[16:12:16.995]                           computeRestarts <- base::computeRestarts
[16:12:16.995]                           grepl <- base::grepl
[16:12:16.995]                           restarts <- computeRestarts(cond)
[16:12:16.995]                           for (restart in restarts) {
[16:12:16.995]                             name <- restart$name
[16:12:16.995]                             if (is.null(name)) 
[16:12:16.995]                               next
[16:12:16.995]                             if (!grepl(pattern, name)) 
[16:12:16.995]                               next
[16:12:16.995]                             invokeRestart(restart)
[16:12:16.995]                             muffled <- TRUE
[16:12:16.995]                             break
[16:12:16.995]                           }
[16:12:16.995]                         }
[16:12:16.995]                       }
[16:12:16.995]                       invisible(muffled)
[16:12:16.995]                     }
[16:12:16.995]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.995]                   }
[16:12:16.995]                 }
[16:12:16.995]                 else {
[16:12:16.995]                   if (TRUE) {
[16:12:16.995]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:16.995]                     {
[16:12:16.995]                       inherits <- base::inherits
[16:12:16.995]                       invokeRestart <- base::invokeRestart
[16:12:16.995]                       is.null <- base::is.null
[16:12:16.995]                       muffled <- FALSE
[16:12:16.995]                       if (inherits(cond, "message")) {
[16:12:16.995]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:16.995]                         if (muffled) 
[16:12:16.995]                           invokeRestart("muffleMessage")
[16:12:16.995]                       }
[16:12:16.995]                       else if (inherits(cond, "warning")) {
[16:12:16.995]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:16.995]                         if (muffled) 
[16:12:16.995]                           invokeRestart("muffleWarning")
[16:12:16.995]                       }
[16:12:16.995]                       else if (inherits(cond, "condition")) {
[16:12:16.995]                         if (!is.null(pattern)) {
[16:12:16.995]                           computeRestarts <- base::computeRestarts
[16:12:16.995]                           grepl <- base::grepl
[16:12:16.995]                           restarts <- computeRestarts(cond)
[16:12:16.995]                           for (restart in restarts) {
[16:12:16.995]                             name <- restart$name
[16:12:16.995]                             if (is.null(name)) 
[16:12:16.995]                               next
[16:12:16.995]                             if (!grepl(pattern, name)) 
[16:12:16.995]                               next
[16:12:16.995]                             invokeRestart(restart)
[16:12:16.995]                             muffled <- TRUE
[16:12:16.995]                             break
[16:12:16.995]                           }
[16:12:16.995]                         }
[16:12:16.995]                       }
[16:12:16.995]                       invisible(muffled)
[16:12:16.995]                     }
[16:12:16.995]                     muffleCondition(cond, pattern = "^muffle")
[16:12:16.995]                   }
[16:12:16.995]                 }
[16:12:16.995]             }
[16:12:16.995]         }))
[16:12:16.995]     }, error = function(ex) {
[16:12:16.995]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:16.995]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:16.995]                 ...future.rng), started = ...future.startTime, 
[16:12:16.995]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:16.995]             version = "1.8"), class = "FutureResult")
[16:12:16.995]     }, finally = {
[16:12:16.995]         if (!identical(...future.workdir, getwd())) 
[16:12:16.995]             setwd(...future.workdir)
[16:12:16.995]         {
[16:12:16.995]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:16.995]                 ...future.oldOptions$nwarnings <- NULL
[16:12:16.995]             }
[16:12:16.995]             base::options(...future.oldOptions)
[16:12:16.995]             if (.Platform$OS.type == "windows") {
[16:12:16.995]                 old_names <- names(...future.oldEnvVars)
[16:12:16.995]                 envs <- base::Sys.getenv()
[16:12:16.995]                 names <- names(envs)
[16:12:16.995]                 common <- intersect(names, old_names)
[16:12:16.995]                 added <- setdiff(names, old_names)
[16:12:16.995]                 removed <- setdiff(old_names, names)
[16:12:16.995]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:16.995]                   envs[common]]
[16:12:16.995]                 NAMES <- toupper(changed)
[16:12:16.995]                 args <- list()
[16:12:16.995]                 for (kk in seq_along(NAMES)) {
[16:12:16.995]                   name <- changed[[kk]]
[16:12:16.995]                   NAME <- NAMES[[kk]]
[16:12:16.995]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.995]                     next
[16:12:16.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.995]                 }
[16:12:16.995]                 NAMES <- toupper(added)
[16:12:16.995]                 for (kk in seq_along(NAMES)) {
[16:12:16.995]                   name <- added[[kk]]
[16:12:16.995]                   NAME <- NAMES[[kk]]
[16:12:16.995]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.995]                     next
[16:12:16.995]                   args[[name]] <- ""
[16:12:16.995]                 }
[16:12:16.995]                 NAMES <- toupper(removed)
[16:12:16.995]                 for (kk in seq_along(NAMES)) {
[16:12:16.995]                   name <- removed[[kk]]
[16:12:16.995]                   NAME <- NAMES[[kk]]
[16:12:16.995]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:16.995]                     next
[16:12:16.995]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:16.995]                 }
[16:12:16.995]                 if (length(args) > 0) 
[16:12:16.995]                   base::do.call(base::Sys.setenv, args = args)
[16:12:16.995]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:16.995]             }
[16:12:16.995]             else {
[16:12:16.995]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:16.995]             }
[16:12:16.995]             {
[16:12:16.995]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:16.995]                   0L) {
[16:12:16.995]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:16.995]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:16.995]                   base::options(opts)
[16:12:16.995]                 }
[16:12:16.995]                 {
[16:12:16.995]                   {
[16:12:16.995]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:16.995]                     NULL
[16:12:16.995]                   }
[16:12:16.995]                   options(future.plan = NULL)
[16:12:16.995]                   if (is.na(NA_character_)) 
[16:12:16.995]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:16.995]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:16.995]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:16.995]                     envir = parent.frame()) 
[16:12:16.995]                   {
[16:12:16.995]                     default_workers <- missing(workers)
[16:12:16.995]                     if (is.function(workers)) 
[16:12:16.995]                       workers <- workers()
[16:12:16.995]                     workers <- structure(as.integer(workers), 
[16:12:16.995]                       class = class(workers))
[16:12:16.995]                     stop_if_not(is.finite(workers), workers >= 
[16:12:16.995]                       1L)
[16:12:16.995]                     if ((workers == 1L && !inherits(workers, 
[16:12:16.995]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:16.995]                       if (default_workers) 
[16:12:16.995]                         supportsMulticore(warn = TRUE)
[16:12:16.995]                       return(sequential(..., envir = envir))
[16:12:16.995]                     }
[16:12:16.995]                     oopts <- options(mc.cores = workers)
[16:12:16.995]                     on.exit(options(oopts))
[16:12:16.995]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:16.995]                       envir = envir)
[16:12:16.995]                     if (!future$lazy) 
[16:12:16.995]                       future <- run(future)
[16:12:16.995]                     invisible(future)
[16:12:16.995]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:16.995]                 }
[16:12:16.995]             }
[16:12:16.995]         }
[16:12:16.995]     })
[16:12:16.995]     if (TRUE) {
[16:12:16.995]         base::sink(type = "output", split = FALSE)
[16:12:16.995]         if (TRUE) {
[16:12:16.995]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:16.995]         }
[16:12:16.995]         else {
[16:12:16.995]             ...future.result["stdout"] <- base::list(NULL)
[16:12:16.995]         }
[16:12:16.995]         base::close(...future.stdout)
[16:12:16.995]         ...future.stdout <- NULL
[16:12:16.995]     }
[16:12:16.995]     ...future.result$conditions <- ...future.conditions
[16:12:16.995]     ...future.result$finished <- base::Sys.time()
[16:12:16.995]     ...future.result
[16:12:16.995] }
[16:12:16.997] requestCore(): workers = 2
[16:12:17.000] MulticoreFuture started
[16:12:17.000] - Launch lazy future ... done
[16:12:17.000] run() for ‘MulticoreFuture’ ... done
[16:12:17.000] plan(): Setting new future strategy stack:
[16:12:17.001] List of future strategies:
[16:12:17.001] 1. sequential:
[16:12:17.001]    - args: function (..., envir = parent.frame())
[16:12:17.001]    - tweaked: FALSE
[16:12:17.001]    - call: NULL
[16:12:17.001] plan(): nbrOfWorkers() = 1
[16:12:17.003] plan(): Setting new future strategy stack:
[16:12:17.003] List of future strategies:
[16:12:17.003] 1. multicore:
[16:12:17.003]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.003]    - tweaked: FALSE
[16:12:17.003]    - call: plan(strategy)
[16:12:17.008] plan(): nbrOfWorkers() = 2
** Future evaluation with globals
[16:12:17.013] getGlobalsAndPackages() ...
[16:12:17.013] Searching for globals...
[16:12:17.014] - globals found: [3] ‘{’, ‘<-’, ‘a’
[16:12:17.014] Searching for globals ... DONE
[16:12:17.015] Resolving globals: FALSE
[16:12:17.015] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:17.015] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:12:17.016] - globals: [1] ‘a’
[16:12:17.016] 
[16:12:17.016] getGlobalsAndPackages() ... DONE
[16:12:17.016] run() for ‘Future’ ...
[16:12:17.016] - state: ‘created’
[16:12:17.016] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.020] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.021] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.021]   - Field: ‘label’
[16:12:17.021]   - Field: ‘local’
[16:12:17.021]   - Field: ‘owner’
[16:12:17.021]   - Field: ‘envir’
[16:12:17.021]   - Field: ‘workers’
[16:12:17.021]   - Field: ‘packages’
[16:12:17.021]   - Field: ‘gc’
[16:12:17.022]   - Field: ‘job’
[16:12:17.022]   - Field: ‘conditions’
[16:12:17.022]   - Field: ‘expr’
[16:12:17.022]   - Field: ‘uuid’
[16:12:17.022]   - Field: ‘seed’
[16:12:17.022]   - Field: ‘version’
[16:12:17.022]   - Field: ‘result’
[16:12:17.022]   - Field: ‘asynchronous’
[16:12:17.023]   - Field: ‘calls’
[16:12:17.023]   - Field: ‘globals’
[16:12:17.023]   - Field: ‘stdout’
[16:12:17.023]   - Field: ‘earlySignal’
[16:12:17.023]   - Field: ‘lazy’
[16:12:17.025]   - Field: ‘state’
[16:12:17.026] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.026] - Launch lazy future ...
[16:12:17.026] Packages needed by the future expression (n = 0): <none>
[16:12:17.026] Packages needed by future strategies (n = 0): <none>
[16:12:17.027] {
[16:12:17.027]     {
[16:12:17.027]         {
[16:12:17.027]             ...future.startTime <- base::Sys.time()
[16:12:17.027]             {
[16:12:17.027]                 {
[16:12:17.027]                   {
[16:12:17.027]                     {
[16:12:17.027]                       base::local({
[16:12:17.027]                         has_future <- base::requireNamespace("future", 
[16:12:17.027]                           quietly = TRUE)
[16:12:17.027]                         if (has_future) {
[16:12:17.027]                           ns <- base::getNamespace("future")
[16:12:17.027]                           version <- ns[[".package"]][["version"]]
[16:12:17.027]                           if (is.null(version)) 
[16:12:17.027]                             version <- utils::packageVersion("future")
[16:12:17.027]                         }
[16:12:17.027]                         else {
[16:12:17.027]                           version <- NULL
[16:12:17.027]                         }
[16:12:17.027]                         if (!has_future || version < "1.8.0") {
[16:12:17.027]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.027]                             "", base::R.version$version.string), 
[16:12:17.027]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.027]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.027]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.027]                               "release", "version")], collapse = " "), 
[16:12:17.027]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.027]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.027]                             info)
[16:12:17.027]                           info <- base::paste(info, collapse = "; ")
[16:12:17.027]                           if (!has_future) {
[16:12:17.027]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.027]                               info)
[16:12:17.027]                           }
[16:12:17.027]                           else {
[16:12:17.027]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.027]                               info, version)
[16:12:17.027]                           }
[16:12:17.027]                           base::stop(msg)
[16:12:17.027]                         }
[16:12:17.027]                       })
[16:12:17.027]                     }
[16:12:17.027]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.027]                     base::options(mc.cores = 1L)
[16:12:17.027]                   }
[16:12:17.027]                   options(future.plan = NULL)
[16:12:17.027]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.027]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.027]                 }
[16:12:17.027]                 ...future.workdir <- getwd()
[16:12:17.027]             }
[16:12:17.027]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.027]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.027]         }
[16:12:17.027]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.027]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.027]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.027]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.027]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.027]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.027]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.027]             base::names(...future.oldOptions))
[16:12:17.027]     }
[16:12:17.027]     if (FALSE) {
[16:12:17.027]     }
[16:12:17.027]     else {
[16:12:17.027]         if (TRUE) {
[16:12:17.027]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.027]                 open = "w")
[16:12:17.027]         }
[16:12:17.027]         else {
[16:12:17.027]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.027]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.027]         }
[16:12:17.027]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.027]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.027]             base::sink(type = "output", split = FALSE)
[16:12:17.027]             base::close(...future.stdout)
[16:12:17.027]         }, add = TRUE)
[16:12:17.027]     }
[16:12:17.027]     ...future.frame <- base::sys.nframe()
[16:12:17.027]     ...future.conditions <- base::list()
[16:12:17.027]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.027]     if (FALSE) {
[16:12:17.027]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.027]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.027]     }
[16:12:17.027]     ...future.result <- base::tryCatch({
[16:12:17.027]         base::withCallingHandlers({
[16:12:17.027]             ...future.value <- base::withVisible(base::local({
[16:12:17.027]                 withCallingHandlers({
[16:12:17.027]                   {
[16:12:17.027]                     x <- a
[16:12:17.027]                   }
[16:12:17.027]                 }, immediateCondition = function(cond) {
[16:12:17.027]                   save_rds <- function (object, pathname, ...) 
[16:12:17.027]                   {
[16:12:17.027]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.027]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.027]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.027]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.027]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.027]                         fi_tmp[["mtime"]])
[16:12:17.027]                     }
[16:12:17.027]                     tryCatch({
[16:12:17.027]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.027]                     }, error = function(ex) {
[16:12:17.027]                       msg <- conditionMessage(ex)
[16:12:17.027]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.027]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.027]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.027]                         fi_tmp[["mtime"]], msg)
[16:12:17.027]                       ex$message <- msg
[16:12:17.027]                       stop(ex)
[16:12:17.027]                     })
[16:12:17.027]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.027]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.027]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.027]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.027]                       fi <- file.info(pathname)
[16:12:17.027]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.027]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.027]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.027]                         fi[["size"]], fi[["mtime"]])
[16:12:17.027]                       stop(msg)
[16:12:17.027]                     }
[16:12:17.027]                     invisible(pathname)
[16:12:17.027]                   }
[16:12:17.027]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.027]                     rootPath = tempdir()) 
[16:12:17.027]                   {
[16:12:17.027]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.027]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.027]                       tmpdir = path, fileext = ".rds")
[16:12:17.027]                     save_rds(obj, file)
[16:12:17.027]                   }
[16:12:17.027]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.027]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.027]                   {
[16:12:17.027]                     inherits <- base::inherits
[16:12:17.027]                     invokeRestart <- base::invokeRestart
[16:12:17.027]                     is.null <- base::is.null
[16:12:17.027]                     muffled <- FALSE
[16:12:17.027]                     if (inherits(cond, "message")) {
[16:12:17.027]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.027]                       if (muffled) 
[16:12:17.027]                         invokeRestart("muffleMessage")
[16:12:17.027]                     }
[16:12:17.027]                     else if (inherits(cond, "warning")) {
[16:12:17.027]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.027]                       if (muffled) 
[16:12:17.027]                         invokeRestart("muffleWarning")
[16:12:17.027]                     }
[16:12:17.027]                     else if (inherits(cond, "condition")) {
[16:12:17.027]                       if (!is.null(pattern)) {
[16:12:17.027]                         computeRestarts <- base::computeRestarts
[16:12:17.027]                         grepl <- base::grepl
[16:12:17.027]                         restarts <- computeRestarts(cond)
[16:12:17.027]                         for (restart in restarts) {
[16:12:17.027]                           name <- restart$name
[16:12:17.027]                           if (is.null(name)) 
[16:12:17.027]                             next
[16:12:17.027]                           if (!grepl(pattern, name)) 
[16:12:17.027]                             next
[16:12:17.027]                           invokeRestart(restart)
[16:12:17.027]                           muffled <- TRUE
[16:12:17.027]                           break
[16:12:17.027]                         }
[16:12:17.027]                       }
[16:12:17.027]                     }
[16:12:17.027]                     invisible(muffled)
[16:12:17.027]                   }
[16:12:17.027]                   muffleCondition(cond)
[16:12:17.027]                 })
[16:12:17.027]             }))
[16:12:17.027]             future::FutureResult(value = ...future.value$value, 
[16:12:17.027]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.027]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.027]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.027]                     ...future.globalenv.names))
[16:12:17.027]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.027]         }, condition = base::local({
[16:12:17.027]             c <- base::c
[16:12:17.027]             inherits <- base::inherits
[16:12:17.027]             invokeRestart <- base::invokeRestart
[16:12:17.027]             length <- base::length
[16:12:17.027]             list <- base::list
[16:12:17.027]             seq.int <- base::seq.int
[16:12:17.027]             signalCondition <- base::signalCondition
[16:12:17.027]             sys.calls <- base::sys.calls
[16:12:17.027]             `[[` <- base::`[[`
[16:12:17.027]             `+` <- base::`+`
[16:12:17.027]             `<<-` <- base::`<<-`
[16:12:17.027]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.027]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.027]                   3L)]
[16:12:17.027]             }
[16:12:17.027]             function(cond) {
[16:12:17.027]                 is_error <- inherits(cond, "error")
[16:12:17.027]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.027]                   NULL)
[16:12:17.027]                 if (is_error) {
[16:12:17.027]                   sessionInformation <- function() {
[16:12:17.027]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.027]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.027]                       search = base::search(), system = base::Sys.info())
[16:12:17.027]                   }
[16:12:17.027]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.027]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.027]                     cond$call), session = sessionInformation(), 
[16:12:17.027]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.027]                   signalCondition(cond)
[16:12:17.027]                 }
[16:12:17.027]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.027]                 "immediateCondition"))) {
[16:12:17.027]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.027]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.027]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.027]                   if (TRUE && !signal) {
[16:12:17.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.027]                     {
[16:12:17.027]                       inherits <- base::inherits
[16:12:17.027]                       invokeRestart <- base::invokeRestart
[16:12:17.027]                       is.null <- base::is.null
[16:12:17.027]                       muffled <- FALSE
[16:12:17.027]                       if (inherits(cond, "message")) {
[16:12:17.027]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.027]                         if (muffled) 
[16:12:17.027]                           invokeRestart("muffleMessage")
[16:12:17.027]                       }
[16:12:17.027]                       else if (inherits(cond, "warning")) {
[16:12:17.027]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.027]                         if (muffled) 
[16:12:17.027]                           invokeRestart("muffleWarning")
[16:12:17.027]                       }
[16:12:17.027]                       else if (inherits(cond, "condition")) {
[16:12:17.027]                         if (!is.null(pattern)) {
[16:12:17.027]                           computeRestarts <- base::computeRestarts
[16:12:17.027]                           grepl <- base::grepl
[16:12:17.027]                           restarts <- computeRestarts(cond)
[16:12:17.027]                           for (restart in restarts) {
[16:12:17.027]                             name <- restart$name
[16:12:17.027]                             if (is.null(name)) 
[16:12:17.027]                               next
[16:12:17.027]                             if (!grepl(pattern, name)) 
[16:12:17.027]                               next
[16:12:17.027]                             invokeRestart(restart)
[16:12:17.027]                             muffled <- TRUE
[16:12:17.027]                             break
[16:12:17.027]                           }
[16:12:17.027]                         }
[16:12:17.027]                       }
[16:12:17.027]                       invisible(muffled)
[16:12:17.027]                     }
[16:12:17.027]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.027]                   }
[16:12:17.027]                 }
[16:12:17.027]                 else {
[16:12:17.027]                   if (TRUE) {
[16:12:17.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.027]                     {
[16:12:17.027]                       inherits <- base::inherits
[16:12:17.027]                       invokeRestart <- base::invokeRestart
[16:12:17.027]                       is.null <- base::is.null
[16:12:17.027]                       muffled <- FALSE
[16:12:17.027]                       if (inherits(cond, "message")) {
[16:12:17.027]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.027]                         if (muffled) 
[16:12:17.027]                           invokeRestart("muffleMessage")
[16:12:17.027]                       }
[16:12:17.027]                       else if (inherits(cond, "warning")) {
[16:12:17.027]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.027]                         if (muffled) 
[16:12:17.027]                           invokeRestart("muffleWarning")
[16:12:17.027]                       }
[16:12:17.027]                       else if (inherits(cond, "condition")) {
[16:12:17.027]                         if (!is.null(pattern)) {
[16:12:17.027]                           computeRestarts <- base::computeRestarts
[16:12:17.027]                           grepl <- base::grepl
[16:12:17.027]                           restarts <- computeRestarts(cond)
[16:12:17.027]                           for (restart in restarts) {
[16:12:17.027]                             name <- restart$name
[16:12:17.027]                             if (is.null(name)) 
[16:12:17.027]                               next
[16:12:17.027]                             if (!grepl(pattern, name)) 
[16:12:17.027]                               next
[16:12:17.027]                             invokeRestart(restart)
[16:12:17.027]                             muffled <- TRUE
[16:12:17.027]                             break
[16:12:17.027]                           }
[16:12:17.027]                         }
[16:12:17.027]                       }
[16:12:17.027]                       invisible(muffled)
[16:12:17.027]                     }
[16:12:17.027]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.027]                   }
[16:12:17.027]                 }
[16:12:17.027]             }
[16:12:17.027]         }))
[16:12:17.027]     }, error = function(ex) {
[16:12:17.027]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.027]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.027]                 ...future.rng), started = ...future.startTime, 
[16:12:17.027]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.027]             version = "1.8"), class = "FutureResult")
[16:12:17.027]     }, finally = {
[16:12:17.027]         if (!identical(...future.workdir, getwd())) 
[16:12:17.027]             setwd(...future.workdir)
[16:12:17.027]         {
[16:12:17.027]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.027]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.027]             }
[16:12:17.027]             base::options(...future.oldOptions)
[16:12:17.027]             if (.Platform$OS.type == "windows") {
[16:12:17.027]                 old_names <- names(...future.oldEnvVars)
[16:12:17.027]                 envs <- base::Sys.getenv()
[16:12:17.027]                 names <- names(envs)
[16:12:17.027]                 common <- intersect(names, old_names)
[16:12:17.027]                 added <- setdiff(names, old_names)
[16:12:17.027]                 removed <- setdiff(old_names, names)
[16:12:17.027]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.027]                   envs[common]]
[16:12:17.027]                 NAMES <- toupper(changed)
[16:12:17.027]                 args <- list()
[16:12:17.027]                 for (kk in seq_along(NAMES)) {
[16:12:17.027]                   name <- changed[[kk]]
[16:12:17.027]                   NAME <- NAMES[[kk]]
[16:12:17.027]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.027]                     next
[16:12:17.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.027]                 }
[16:12:17.027]                 NAMES <- toupper(added)
[16:12:17.027]                 for (kk in seq_along(NAMES)) {
[16:12:17.027]                   name <- added[[kk]]
[16:12:17.027]                   NAME <- NAMES[[kk]]
[16:12:17.027]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.027]                     next
[16:12:17.027]                   args[[name]] <- ""
[16:12:17.027]                 }
[16:12:17.027]                 NAMES <- toupper(removed)
[16:12:17.027]                 for (kk in seq_along(NAMES)) {
[16:12:17.027]                   name <- removed[[kk]]
[16:12:17.027]                   NAME <- NAMES[[kk]]
[16:12:17.027]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.027]                     next
[16:12:17.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.027]                 }
[16:12:17.027]                 if (length(args) > 0) 
[16:12:17.027]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.027]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.027]             }
[16:12:17.027]             else {
[16:12:17.027]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.027]             }
[16:12:17.027]             {
[16:12:17.027]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.027]                   0L) {
[16:12:17.027]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.027]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.027]                   base::options(opts)
[16:12:17.027]                 }
[16:12:17.027]                 {
[16:12:17.027]                   {
[16:12:17.027]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.027]                     NULL
[16:12:17.027]                   }
[16:12:17.027]                   options(future.plan = NULL)
[16:12:17.027]                   if (is.na(NA_character_)) 
[16:12:17.027]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.027]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.027]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.027]                     envir = parent.frame()) 
[16:12:17.027]                   {
[16:12:17.027]                     default_workers <- missing(workers)
[16:12:17.027]                     if (is.function(workers)) 
[16:12:17.027]                       workers <- workers()
[16:12:17.027]                     workers <- structure(as.integer(workers), 
[16:12:17.027]                       class = class(workers))
[16:12:17.027]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.027]                       1L)
[16:12:17.027]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.027]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.027]                       if (default_workers) 
[16:12:17.027]                         supportsMulticore(warn = TRUE)
[16:12:17.027]                       return(sequential(..., envir = envir))
[16:12:17.027]                     }
[16:12:17.027]                     oopts <- options(mc.cores = workers)
[16:12:17.027]                     on.exit(options(oopts))
[16:12:17.027]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.027]                       envir = envir)
[16:12:17.027]                     if (!future$lazy) 
[16:12:17.027]                       future <- run(future)
[16:12:17.027]                     invisible(future)
[16:12:17.027]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.027]                 }
[16:12:17.027]             }
[16:12:17.027]         }
[16:12:17.027]     })
[16:12:17.027]     if (TRUE) {
[16:12:17.027]         base::sink(type = "output", split = FALSE)
[16:12:17.027]         if (TRUE) {
[16:12:17.027]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.027]         }
[16:12:17.027]         else {
[16:12:17.027]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.027]         }
[16:12:17.027]         base::close(...future.stdout)
[16:12:17.027]         ...future.stdout <- NULL
[16:12:17.027]     }
[16:12:17.027]     ...future.result$conditions <- ...future.conditions
[16:12:17.027]     ...future.result$finished <- base::Sys.time()
[16:12:17.027]     ...future.result
[16:12:17.027] }
[16:12:17.029] assign_globals() ...
[16:12:17.030] List of 1
[16:12:17.030]  $ a: num 2
[16:12:17.030]  - attr(*, "where")=List of 1
[16:12:17.030]   ..$ a:<environment: R_EmptyEnv> 
[16:12:17.030]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:17.030]  - attr(*, "resolved")= logi FALSE
[16:12:17.030]  - attr(*, "total_size")= num 56
[16:12:17.030]  - attr(*, "already-done")= logi TRUE
[16:12:17.033] - copied ‘a’ to environment
[16:12:17.033] assign_globals() ... done
[16:12:17.033] requestCore(): workers = 2
[16:12:17.035] MulticoreFuture started
[16:12:17.035] - Launch lazy future ... done
[16:12:17.035] run() for ‘MulticoreFuture’ ... done
[16:12:17.036] plan(): Setting new future strategy stack:
[16:12:17.036] List of future strategies:
[16:12:17.036] 1. sequential:
[16:12:17.036]    - args: function (..., envir = parent.frame())
[16:12:17.036]    - tweaked: FALSE
[16:12:17.036]    - call: NULL
[16:12:17.037] plan(): nbrOfWorkers() = 1
[16:12:17.039] plan(): Setting new future strategy stack:
[16:12:17.039] List of future strategies:
[16:12:17.039] 1. multicore:
[16:12:17.039]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.039]    - tweaked: FALSE
[16:12:17.039]    - call: plan(strategy)
[16:12:17.044] plan(): nbrOfWorkers() = 2
** Future evaluation with errors
[16:12:17.046] getGlobalsAndPackages() ...
[16:12:17.046] Searching for globals...
[16:12:17.048] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[16:12:17.048] Searching for globals ... DONE
[16:12:17.048] Resolving globals: FALSE
[16:12:17.048] 
[16:12:17.049] 
[16:12:17.049] getGlobalsAndPackages() ... DONE
[16:12:17.049] run() for ‘Future’ ...
[16:12:17.049] - state: ‘created’
[16:12:17.049] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.053] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.053] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.054]   - Field: ‘label’
[16:12:17.054]   - Field: ‘local’
[16:12:17.054]   - Field: ‘owner’
[16:12:17.054]   - Field: ‘envir’
[16:12:17.054]   - Field: ‘workers’
[16:12:17.054]   - Field: ‘packages’
[16:12:17.054]   - Field: ‘gc’
[16:12:17.054]   - Field: ‘job’
[16:12:17.055]   - Field: ‘conditions’
[16:12:17.055]   - Field: ‘expr’
[16:12:17.055]   - Field: ‘uuid’
[16:12:17.055]   - Field: ‘seed’
[16:12:17.055]   - Field: ‘version’
[16:12:17.055]   - Field: ‘result’
[16:12:17.055]   - Field: ‘asynchronous’
[16:12:17.055]   - Field: ‘calls’
[16:12:17.055]   - Field: ‘globals’
[16:12:17.056]   - Field: ‘stdout’
[16:12:17.056]   - Field: ‘earlySignal’
[16:12:17.056]   - Field: ‘lazy’
[16:12:17.056]   - Field: ‘state’
[16:12:17.056] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.056] - Launch lazy future ...
[16:12:17.056] Packages needed by the future expression (n = 0): <none>
[16:12:17.057] Packages needed by future strategies (n = 0): <none>
[16:12:17.057] {
[16:12:17.057]     {
[16:12:17.057]         {
[16:12:17.057]             ...future.startTime <- base::Sys.time()
[16:12:17.057]             {
[16:12:17.057]                 {
[16:12:17.057]                   {
[16:12:17.057]                     {
[16:12:17.057]                       base::local({
[16:12:17.057]                         has_future <- base::requireNamespace("future", 
[16:12:17.057]                           quietly = TRUE)
[16:12:17.057]                         if (has_future) {
[16:12:17.057]                           ns <- base::getNamespace("future")
[16:12:17.057]                           version <- ns[[".package"]][["version"]]
[16:12:17.057]                           if (is.null(version)) 
[16:12:17.057]                             version <- utils::packageVersion("future")
[16:12:17.057]                         }
[16:12:17.057]                         else {
[16:12:17.057]                           version <- NULL
[16:12:17.057]                         }
[16:12:17.057]                         if (!has_future || version < "1.8.0") {
[16:12:17.057]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.057]                             "", base::R.version$version.string), 
[16:12:17.057]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.057]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.057]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.057]                               "release", "version")], collapse = " "), 
[16:12:17.057]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.057]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.057]                             info)
[16:12:17.057]                           info <- base::paste(info, collapse = "; ")
[16:12:17.057]                           if (!has_future) {
[16:12:17.057]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.057]                               info)
[16:12:17.057]                           }
[16:12:17.057]                           else {
[16:12:17.057]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.057]                               info, version)
[16:12:17.057]                           }
[16:12:17.057]                           base::stop(msg)
[16:12:17.057]                         }
[16:12:17.057]                       })
[16:12:17.057]                     }
[16:12:17.057]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.057]                     base::options(mc.cores = 1L)
[16:12:17.057]                   }
[16:12:17.057]                   options(future.plan = NULL)
[16:12:17.057]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.057]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.057]                 }
[16:12:17.057]                 ...future.workdir <- getwd()
[16:12:17.057]             }
[16:12:17.057]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.057]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.057]         }
[16:12:17.057]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.057]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.057]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.057]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.057]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.057]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.057]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.057]             base::names(...future.oldOptions))
[16:12:17.057]     }
[16:12:17.057]     if (FALSE) {
[16:12:17.057]     }
[16:12:17.057]     else {
[16:12:17.057]         if (TRUE) {
[16:12:17.057]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.057]                 open = "w")
[16:12:17.057]         }
[16:12:17.057]         else {
[16:12:17.057]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.057]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.057]         }
[16:12:17.057]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.057]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.057]             base::sink(type = "output", split = FALSE)
[16:12:17.057]             base::close(...future.stdout)
[16:12:17.057]         }, add = TRUE)
[16:12:17.057]     }
[16:12:17.057]     ...future.frame <- base::sys.nframe()
[16:12:17.057]     ...future.conditions <- base::list()
[16:12:17.057]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.057]     if (FALSE) {
[16:12:17.057]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.057]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.057]     }
[16:12:17.057]     ...future.result <- base::tryCatch({
[16:12:17.057]         base::withCallingHandlers({
[16:12:17.057]             ...future.value <- base::withVisible(base::local({
[16:12:17.057]                 withCallingHandlers({
[16:12:17.057]                   {
[16:12:17.057]                     x <- 3
[16:12:17.057]                     stop("Woops!")
[16:12:17.057]                     x
[16:12:17.057]                   }
[16:12:17.057]                 }, immediateCondition = function(cond) {
[16:12:17.057]                   save_rds <- function (object, pathname, ...) 
[16:12:17.057]                   {
[16:12:17.057]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.057]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.057]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.057]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.057]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.057]                         fi_tmp[["mtime"]])
[16:12:17.057]                     }
[16:12:17.057]                     tryCatch({
[16:12:17.057]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.057]                     }, error = function(ex) {
[16:12:17.057]                       msg <- conditionMessage(ex)
[16:12:17.057]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.057]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.057]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.057]                         fi_tmp[["mtime"]], msg)
[16:12:17.057]                       ex$message <- msg
[16:12:17.057]                       stop(ex)
[16:12:17.057]                     })
[16:12:17.057]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.057]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.057]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.057]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.057]                       fi <- file.info(pathname)
[16:12:17.057]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.057]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.057]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.057]                         fi[["size"]], fi[["mtime"]])
[16:12:17.057]                       stop(msg)
[16:12:17.057]                     }
[16:12:17.057]                     invisible(pathname)
[16:12:17.057]                   }
[16:12:17.057]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.057]                     rootPath = tempdir()) 
[16:12:17.057]                   {
[16:12:17.057]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.057]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.057]                       tmpdir = path, fileext = ".rds")
[16:12:17.057]                     save_rds(obj, file)
[16:12:17.057]                   }
[16:12:17.057]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.057]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.057]                   {
[16:12:17.057]                     inherits <- base::inherits
[16:12:17.057]                     invokeRestart <- base::invokeRestart
[16:12:17.057]                     is.null <- base::is.null
[16:12:17.057]                     muffled <- FALSE
[16:12:17.057]                     if (inherits(cond, "message")) {
[16:12:17.057]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.057]                       if (muffled) 
[16:12:17.057]                         invokeRestart("muffleMessage")
[16:12:17.057]                     }
[16:12:17.057]                     else if (inherits(cond, "warning")) {
[16:12:17.057]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.057]                       if (muffled) 
[16:12:17.057]                         invokeRestart("muffleWarning")
[16:12:17.057]                     }
[16:12:17.057]                     else if (inherits(cond, "condition")) {
[16:12:17.057]                       if (!is.null(pattern)) {
[16:12:17.057]                         computeRestarts <- base::computeRestarts
[16:12:17.057]                         grepl <- base::grepl
[16:12:17.057]                         restarts <- computeRestarts(cond)
[16:12:17.057]                         for (restart in restarts) {
[16:12:17.057]                           name <- restart$name
[16:12:17.057]                           if (is.null(name)) 
[16:12:17.057]                             next
[16:12:17.057]                           if (!grepl(pattern, name)) 
[16:12:17.057]                             next
[16:12:17.057]                           invokeRestart(restart)
[16:12:17.057]                           muffled <- TRUE
[16:12:17.057]                           break
[16:12:17.057]                         }
[16:12:17.057]                       }
[16:12:17.057]                     }
[16:12:17.057]                     invisible(muffled)
[16:12:17.057]                   }
[16:12:17.057]                   muffleCondition(cond)
[16:12:17.057]                 })
[16:12:17.057]             }))
[16:12:17.057]             future::FutureResult(value = ...future.value$value, 
[16:12:17.057]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.057]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.057]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.057]                     ...future.globalenv.names))
[16:12:17.057]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.057]         }, condition = base::local({
[16:12:17.057]             c <- base::c
[16:12:17.057]             inherits <- base::inherits
[16:12:17.057]             invokeRestart <- base::invokeRestart
[16:12:17.057]             length <- base::length
[16:12:17.057]             list <- base::list
[16:12:17.057]             seq.int <- base::seq.int
[16:12:17.057]             signalCondition <- base::signalCondition
[16:12:17.057]             sys.calls <- base::sys.calls
[16:12:17.057]             `[[` <- base::`[[`
[16:12:17.057]             `+` <- base::`+`
[16:12:17.057]             `<<-` <- base::`<<-`
[16:12:17.057]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.057]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.057]                   3L)]
[16:12:17.057]             }
[16:12:17.057]             function(cond) {
[16:12:17.057]                 is_error <- inherits(cond, "error")
[16:12:17.057]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.057]                   NULL)
[16:12:17.057]                 if (is_error) {
[16:12:17.057]                   sessionInformation <- function() {
[16:12:17.057]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.057]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.057]                       search = base::search(), system = base::Sys.info())
[16:12:17.057]                   }
[16:12:17.057]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.057]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.057]                     cond$call), session = sessionInformation(), 
[16:12:17.057]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.057]                   signalCondition(cond)
[16:12:17.057]                 }
[16:12:17.057]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.057]                 "immediateCondition"))) {
[16:12:17.057]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.057]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.057]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.057]                   if (TRUE && !signal) {
[16:12:17.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.057]                     {
[16:12:17.057]                       inherits <- base::inherits
[16:12:17.057]                       invokeRestart <- base::invokeRestart
[16:12:17.057]                       is.null <- base::is.null
[16:12:17.057]                       muffled <- FALSE
[16:12:17.057]                       if (inherits(cond, "message")) {
[16:12:17.057]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.057]                         if (muffled) 
[16:12:17.057]                           invokeRestart("muffleMessage")
[16:12:17.057]                       }
[16:12:17.057]                       else if (inherits(cond, "warning")) {
[16:12:17.057]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.057]                         if (muffled) 
[16:12:17.057]                           invokeRestart("muffleWarning")
[16:12:17.057]                       }
[16:12:17.057]                       else if (inherits(cond, "condition")) {
[16:12:17.057]                         if (!is.null(pattern)) {
[16:12:17.057]                           computeRestarts <- base::computeRestarts
[16:12:17.057]                           grepl <- base::grepl
[16:12:17.057]                           restarts <- computeRestarts(cond)
[16:12:17.057]                           for (restart in restarts) {
[16:12:17.057]                             name <- restart$name
[16:12:17.057]                             if (is.null(name)) 
[16:12:17.057]                               next
[16:12:17.057]                             if (!grepl(pattern, name)) 
[16:12:17.057]                               next
[16:12:17.057]                             invokeRestart(restart)
[16:12:17.057]                             muffled <- TRUE
[16:12:17.057]                             break
[16:12:17.057]                           }
[16:12:17.057]                         }
[16:12:17.057]                       }
[16:12:17.057]                       invisible(muffled)
[16:12:17.057]                     }
[16:12:17.057]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.057]                   }
[16:12:17.057]                 }
[16:12:17.057]                 else {
[16:12:17.057]                   if (TRUE) {
[16:12:17.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.057]                     {
[16:12:17.057]                       inherits <- base::inherits
[16:12:17.057]                       invokeRestart <- base::invokeRestart
[16:12:17.057]                       is.null <- base::is.null
[16:12:17.057]                       muffled <- FALSE
[16:12:17.057]                       if (inherits(cond, "message")) {
[16:12:17.057]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.057]                         if (muffled) 
[16:12:17.057]                           invokeRestart("muffleMessage")
[16:12:17.057]                       }
[16:12:17.057]                       else if (inherits(cond, "warning")) {
[16:12:17.057]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.057]                         if (muffled) 
[16:12:17.057]                           invokeRestart("muffleWarning")
[16:12:17.057]                       }
[16:12:17.057]                       else if (inherits(cond, "condition")) {
[16:12:17.057]                         if (!is.null(pattern)) {
[16:12:17.057]                           computeRestarts <- base::computeRestarts
[16:12:17.057]                           grepl <- base::grepl
[16:12:17.057]                           restarts <- computeRestarts(cond)
[16:12:17.057]                           for (restart in restarts) {
[16:12:17.057]                             name <- restart$name
[16:12:17.057]                             if (is.null(name)) 
[16:12:17.057]                               next
[16:12:17.057]                             if (!grepl(pattern, name)) 
[16:12:17.057]                               next
[16:12:17.057]                             invokeRestart(restart)
[16:12:17.057]                             muffled <- TRUE
[16:12:17.057]                             break
[16:12:17.057]                           }
[16:12:17.057]                         }
[16:12:17.057]                       }
[16:12:17.057]                       invisible(muffled)
[16:12:17.057]                     }
[16:12:17.057]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.057]                   }
[16:12:17.057]                 }
[16:12:17.057]             }
[16:12:17.057]         }))
[16:12:17.057]     }, error = function(ex) {
[16:12:17.057]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.057]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.057]                 ...future.rng), started = ...future.startTime, 
[16:12:17.057]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.057]             version = "1.8"), class = "FutureResult")
[16:12:17.057]     }, finally = {
[16:12:17.057]         if (!identical(...future.workdir, getwd())) 
[16:12:17.057]             setwd(...future.workdir)
[16:12:17.057]         {
[16:12:17.057]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.057]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.057]             }
[16:12:17.057]             base::options(...future.oldOptions)
[16:12:17.057]             if (.Platform$OS.type == "windows") {
[16:12:17.057]                 old_names <- names(...future.oldEnvVars)
[16:12:17.057]                 envs <- base::Sys.getenv()
[16:12:17.057]                 names <- names(envs)
[16:12:17.057]                 common <- intersect(names, old_names)
[16:12:17.057]                 added <- setdiff(names, old_names)
[16:12:17.057]                 removed <- setdiff(old_names, names)
[16:12:17.057]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.057]                   envs[common]]
[16:12:17.057]                 NAMES <- toupper(changed)
[16:12:17.057]                 args <- list()
[16:12:17.057]                 for (kk in seq_along(NAMES)) {
[16:12:17.057]                   name <- changed[[kk]]
[16:12:17.057]                   NAME <- NAMES[[kk]]
[16:12:17.057]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.057]                     next
[16:12:17.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.057]                 }
[16:12:17.057]                 NAMES <- toupper(added)
[16:12:17.057]                 for (kk in seq_along(NAMES)) {
[16:12:17.057]                   name <- added[[kk]]
[16:12:17.057]                   NAME <- NAMES[[kk]]
[16:12:17.057]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.057]                     next
[16:12:17.057]                   args[[name]] <- ""
[16:12:17.057]                 }
[16:12:17.057]                 NAMES <- toupper(removed)
[16:12:17.057]                 for (kk in seq_along(NAMES)) {
[16:12:17.057]                   name <- removed[[kk]]
[16:12:17.057]                   NAME <- NAMES[[kk]]
[16:12:17.057]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.057]                     next
[16:12:17.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.057]                 }
[16:12:17.057]                 if (length(args) > 0) 
[16:12:17.057]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.057]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.057]             }
[16:12:17.057]             else {
[16:12:17.057]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.057]             }
[16:12:17.057]             {
[16:12:17.057]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.057]                   0L) {
[16:12:17.057]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.057]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.057]                   base::options(opts)
[16:12:17.057]                 }
[16:12:17.057]                 {
[16:12:17.057]                   {
[16:12:17.057]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.057]                     NULL
[16:12:17.057]                   }
[16:12:17.057]                   options(future.plan = NULL)
[16:12:17.057]                   if (is.na(NA_character_)) 
[16:12:17.057]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.057]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.057]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.057]                     envir = parent.frame()) 
[16:12:17.057]                   {
[16:12:17.057]                     default_workers <- missing(workers)
[16:12:17.057]                     if (is.function(workers)) 
[16:12:17.057]                       workers <- workers()
[16:12:17.057]                     workers <- structure(as.integer(workers), 
[16:12:17.057]                       class = class(workers))
[16:12:17.057]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.057]                       1L)
[16:12:17.057]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.057]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.057]                       if (default_workers) 
[16:12:17.057]                         supportsMulticore(warn = TRUE)
[16:12:17.057]                       return(sequential(..., envir = envir))
[16:12:17.057]                     }
[16:12:17.057]                     oopts <- options(mc.cores = workers)
[16:12:17.057]                     on.exit(options(oopts))
[16:12:17.057]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.057]                       envir = envir)
[16:12:17.057]                     if (!future$lazy) 
[16:12:17.057]                       future <- run(future)
[16:12:17.057]                     invisible(future)
[16:12:17.057]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.057]                 }
[16:12:17.057]             }
[16:12:17.057]         }
[16:12:17.057]     })
[16:12:17.057]     if (TRUE) {
[16:12:17.057]         base::sink(type = "output", split = FALSE)
[16:12:17.057]         if (TRUE) {
[16:12:17.057]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.057]         }
[16:12:17.057]         else {
[16:12:17.057]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.057]         }
[16:12:17.057]         base::close(...future.stdout)
[16:12:17.057]         ...future.stdout <- NULL
[16:12:17.057]     }
[16:12:17.057]     ...future.result$conditions <- ...future.conditions
[16:12:17.057]     ...future.result$finished <- base::Sys.time()
[16:12:17.057]     ...future.result
[16:12:17.057] }
[16:12:17.060] requestCore(): workers = 2
[16:12:17.062] MulticoreFuture started
[16:12:17.062] - Launch lazy future ... done
[16:12:17.062] run() for ‘MulticoreFuture’ ... done
[16:12:17.063] plan(): Setting new future strategy stack:
[16:12:17.063] List of future strategies:
[16:12:17.063] 1. sequential:
[16:12:17.063]    - args: function (..., envir = parent.frame())
[16:12:17.063]    - tweaked: FALSE
[16:12:17.063]    - call: NULL
[16:12:17.064] plan(): nbrOfWorkers() = 1
[16:12:17.066] plan(): Setting new future strategy stack:
[16:12:17.066] List of future strategies:
[16:12:17.066] 1. multicore:
[16:12:17.066]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.066]    - tweaked: FALSE
[16:12:17.066]    - call: plan(strategy)
[16:12:17.071] plan(): nbrOfWorkers() = 2
[16:12:17.075] signalConditions() ...
[16:12:17.076]  - include = ‘immediateCondition’
[16:12:17.076]  - exclude = 
[16:12:17.076]  - resignal = FALSE
[16:12:17.076]  - Number of conditions: 1
[16:12:17.076] signalConditions() ... done
[16:12:17.076] signalConditions() ...
[16:12:17.076]  - include = ‘immediateCondition’
[16:12:17.076]  - exclude = 
[16:12:17.077]  - resignal = FALSE
[16:12:17.077]  - Number of conditions: 1
[16:12:17.077] signalConditions() ... done
[16:12:17.077] Future state: ‘finished’
[16:12:17.077] signalConditions() ...
[16:12:17.077]  - include = ‘condition’
[16:12:17.077]  - exclude = ‘immediateCondition’
[16:12:17.077]  - resignal = TRUE
[16:12:17.078]  - Number of conditions: 1
[16:12:17.078]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:17.078] signalConditions() ... done
[16:12:17.078] getGlobalsAndPackages() ...
[16:12:17.079] Searching for globals...
[16:12:17.081] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:17.081] Searching for globals ... DONE
[16:12:17.081] Resolving globals: FALSE
[16:12:17.081] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:17.082] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:17.082] - globals: [1] ‘ii’
[16:12:17.082] 
[16:12:17.082] getGlobalsAndPackages() ... DONE
[16:12:17.083] run() for ‘Future’ ...
[16:12:17.083] - state: ‘created’
[16:12:17.083] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.089] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.090] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.090]   - Field: ‘label’
[16:12:17.090]   - Field: ‘local’
[16:12:17.090]   - Field: ‘owner’
[16:12:17.090]   - Field: ‘envir’
[16:12:17.090]   - Field: ‘workers’
[16:12:17.090]   - Field: ‘packages’
[16:12:17.091]   - Field: ‘gc’
[16:12:17.091]   - Field: ‘job’
[16:12:17.091]   - Field: ‘conditions’
[16:12:17.091]   - Field: ‘expr’
[16:12:17.091]   - Field: ‘uuid’
[16:12:17.091]   - Field: ‘seed’
[16:12:17.091]   - Field: ‘version’
[16:12:17.091]   - Field: ‘result’
[16:12:17.092]   - Field: ‘asynchronous’
[16:12:17.092]   - Field: ‘calls’
[16:12:17.092]   - Field: ‘globals’
[16:12:17.092]   - Field: ‘stdout’
[16:12:17.092]   - Field: ‘earlySignal’
[16:12:17.092]   - Field: ‘lazy’
[16:12:17.092]   - Field: ‘state’
[16:12:17.093] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.093] - Launch lazy future ...
[16:12:17.093] Packages needed by the future expression (n = 0): <none>
[16:12:17.093] Packages needed by future strategies (n = 0): <none>
[16:12:17.094] {
[16:12:17.094]     {
[16:12:17.094]         {
[16:12:17.094]             ...future.startTime <- base::Sys.time()
[16:12:17.094]             {
[16:12:17.094]                 {
[16:12:17.094]                   {
[16:12:17.094]                     {
[16:12:17.094]                       base::local({
[16:12:17.094]                         has_future <- base::requireNamespace("future", 
[16:12:17.094]                           quietly = TRUE)
[16:12:17.094]                         if (has_future) {
[16:12:17.094]                           ns <- base::getNamespace("future")
[16:12:17.094]                           version <- ns[[".package"]][["version"]]
[16:12:17.094]                           if (is.null(version)) 
[16:12:17.094]                             version <- utils::packageVersion("future")
[16:12:17.094]                         }
[16:12:17.094]                         else {
[16:12:17.094]                           version <- NULL
[16:12:17.094]                         }
[16:12:17.094]                         if (!has_future || version < "1.8.0") {
[16:12:17.094]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.094]                             "", base::R.version$version.string), 
[16:12:17.094]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.094]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.094]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.094]                               "release", "version")], collapse = " "), 
[16:12:17.094]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.094]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.094]                             info)
[16:12:17.094]                           info <- base::paste(info, collapse = "; ")
[16:12:17.094]                           if (!has_future) {
[16:12:17.094]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.094]                               info)
[16:12:17.094]                           }
[16:12:17.094]                           else {
[16:12:17.094]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.094]                               info, version)
[16:12:17.094]                           }
[16:12:17.094]                           base::stop(msg)
[16:12:17.094]                         }
[16:12:17.094]                       })
[16:12:17.094]                     }
[16:12:17.094]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.094]                     base::options(mc.cores = 1L)
[16:12:17.094]                   }
[16:12:17.094]                   options(future.plan = NULL)
[16:12:17.094]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.094]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.094]                 }
[16:12:17.094]                 ...future.workdir <- getwd()
[16:12:17.094]             }
[16:12:17.094]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.094]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.094]         }
[16:12:17.094]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.094]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.094]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.094]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.094]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.094]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.094]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.094]             base::names(...future.oldOptions))
[16:12:17.094]     }
[16:12:17.094]     if (FALSE) {
[16:12:17.094]     }
[16:12:17.094]     else {
[16:12:17.094]         if (TRUE) {
[16:12:17.094]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.094]                 open = "w")
[16:12:17.094]         }
[16:12:17.094]         else {
[16:12:17.094]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.094]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.094]         }
[16:12:17.094]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.094]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.094]             base::sink(type = "output", split = FALSE)
[16:12:17.094]             base::close(...future.stdout)
[16:12:17.094]         }, add = TRUE)
[16:12:17.094]     }
[16:12:17.094]     ...future.frame <- base::sys.nframe()
[16:12:17.094]     ...future.conditions <- base::list()
[16:12:17.094]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.094]     if (FALSE) {
[16:12:17.094]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.094]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.094]     }
[16:12:17.094]     ...future.result <- base::tryCatch({
[16:12:17.094]         base::withCallingHandlers({
[16:12:17.094]             ...future.value <- base::withVisible(base::local({
[16:12:17.094]                 withCallingHandlers({
[16:12:17.094]                   {
[16:12:17.094]                     if (ii%%2 == 0) 
[16:12:17.094]                       stop("Woops!")
[16:12:17.094]                     ii
[16:12:17.094]                   }
[16:12:17.094]                 }, immediateCondition = function(cond) {
[16:12:17.094]                   save_rds <- function (object, pathname, ...) 
[16:12:17.094]                   {
[16:12:17.094]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.094]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.094]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.094]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.094]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.094]                         fi_tmp[["mtime"]])
[16:12:17.094]                     }
[16:12:17.094]                     tryCatch({
[16:12:17.094]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.094]                     }, error = function(ex) {
[16:12:17.094]                       msg <- conditionMessage(ex)
[16:12:17.094]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.094]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.094]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.094]                         fi_tmp[["mtime"]], msg)
[16:12:17.094]                       ex$message <- msg
[16:12:17.094]                       stop(ex)
[16:12:17.094]                     })
[16:12:17.094]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.094]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.094]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.094]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.094]                       fi <- file.info(pathname)
[16:12:17.094]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.094]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.094]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.094]                         fi[["size"]], fi[["mtime"]])
[16:12:17.094]                       stop(msg)
[16:12:17.094]                     }
[16:12:17.094]                     invisible(pathname)
[16:12:17.094]                   }
[16:12:17.094]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.094]                     rootPath = tempdir()) 
[16:12:17.094]                   {
[16:12:17.094]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.094]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.094]                       tmpdir = path, fileext = ".rds")
[16:12:17.094]                     save_rds(obj, file)
[16:12:17.094]                   }
[16:12:17.094]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.094]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.094]                   {
[16:12:17.094]                     inherits <- base::inherits
[16:12:17.094]                     invokeRestart <- base::invokeRestart
[16:12:17.094]                     is.null <- base::is.null
[16:12:17.094]                     muffled <- FALSE
[16:12:17.094]                     if (inherits(cond, "message")) {
[16:12:17.094]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.094]                       if (muffled) 
[16:12:17.094]                         invokeRestart("muffleMessage")
[16:12:17.094]                     }
[16:12:17.094]                     else if (inherits(cond, "warning")) {
[16:12:17.094]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.094]                       if (muffled) 
[16:12:17.094]                         invokeRestart("muffleWarning")
[16:12:17.094]                     }
[16:12:17.094]                     else if (inherits(cond, "condition")) {
[16:12:17.094]                       if (!is.null(pattern)) {
[16:12:17.094]                         computeRestarts <- base::computeRestarts
[16:12:17.094]                         grepl <- base::grepl
[16:12:17.094]                         restarts <- computeRestarts(cond)
[16:12:17.094]                         for (restart in restarts) {
[16:12:17.094]                           name <- restart$name
[16:12:17.094]                           if (is.null(name)) 
[16:12:17.094]                             next
[16:12:17.094]                           if (!grepl(pattern, name)) 
[16:12:17.094]                             next
[16:12:17.094]                           invokeRestart(restart)
[16:12:17.094]                           muffled <- TRUE
[16:12:17.094]                           break
[16:12:17.094]                         }
[16:12:17.094]                       }
[16:12:17.094]                     }
[16:12:17.094]                     invisible(muffled)
[16:12:17.094]                   }
[16:12:17.094]                   muffleCondition(cond)
[16:12:17.094]                 })
[16:12:17.094]             }))
[16:12:17.094]             future::FutureResult(value = ...future.value$value, 
[16:12:17.094]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.094]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.094]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.094]                     ...future.globalenv.names))
[16:12:17.094]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.094]         }, condition = base::local({
[16:12:17.094]             c <- base::c
[16:12:17.094]             inherits <- base::inherits
[16:12:17.094]             invokeRestart <- base::invokeRestart
[16:12:17.094]             length <- base::length
[16:12:17.094]             list <- base::list
[16:12:17.094]             seq.int <- base::seq.int
[16:12:17.094]             signalCondition <- base::signalCondition
[16:12:17.094]             sys.calls <- base::sys.calls
[16:12:17.094]             `[[` <- base::`[[`
[16:12:17.094]             `+` <- base::`+`
[16:12:17.094]             `<<-` <- base::`<<-`
[16:12:17.094]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.094]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.094]                   3L)]
[16:12:17.094]             }
[16:12:17.094]             function(cond) {
[16:12:17.094]                 is_error <- inherits(cond, "error")
[16:12:17.094]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.094]                   NULL)
[16:12:17.094]                 if (is_error) {
[16:12:17.094]                   sessionInformation <- function() {
[16:12:17.094]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.094]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.094]                       search = base::search(), system = base::Sys.info())
[16:12:17.094]                   }
[16:12:17.094]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.094]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.094]                     cond$call), session = sessionInformation(), 
[16:12:17.094]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.094]                   signalCondition(cond)
[16:12:17.094]                 }
[16:12:17.094]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.094]                 "immediateCondition"))) {
[16:12:17.094]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.094]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.094]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.094]                   if (TRUE && !signal) {
[16:12:17.094]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.094]                     {
[16:12:17.094]                       inherits <- base::inherits
[16:12:17.094]                       invokeRestart <- base::invokeRestart
[16:12:17.094]                       is.null <- base::is.null
[16:12:17.094]                       muffled <- FALSE
[16:12:17.094]                       if (inherits(cond, "message")) {
[16:12:17.094]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.094]                         if (muffled) 
[16:12:17.094]                           invokeRestart("muffleMessage")
[16:12:17.094]                       }
[16:12:17.094]                       else if (inherits(cond, "warning")) {
[16:12:17.094]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.094]                         if (muffled) 
[16:12:17.094]                           invokeRestart("muffleWarning")
[16:12:17.094]                       }
[16:12:17.094]                       else if (inherits(cond, "condition")) {
[16:12:17.094]                         if (!is.null(pattern)) {
[16:12:17.094]                           computeRestarts <- base::computeRestarts
[16:12:17.094]                           grepl <- base::grepl
[16:12:17.094]                           restarts <- computeRestarts(cond)
[16:12:17.094]                           for (restart in restarts) {
[16:12:17.094]                             name <- restart$name
[16:12:17.094]                             if (is.null(name)) 
[16:12:17.094]                               next
[16:12:17.094]                             if (!grepl(pattern, name)) 
[16:12:17.094]                               next
[16:12:17.094]                             invokeRestart(restart)
[16:12:17.094]                             muffled <- TRUE
[16:12:17.094]                             break
[16:12:17.094]                           }
[16:12:17.094]                         }
[16:12:17.094]                       }
[16:12:17.094]                       invisible(muffled)
[16:12:17.094]                     }
[16:12:17.094]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.094]                   }
[16:12:17.094]                 }
[16:12:17.094]                 else {
[16:12:17.094]                   if (TRUE) {
[16:12:17.094]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.094]                     {
[16:12:17.094]                       inherits <- base::inherits
[16:12:17.094]                       invokeRestart <- base::invokeRestart
[16:12:17.094]                       is.null <- base::is.null
[16:12:17.094]                       muffled <- FALSE
[16:12:17.094]                       if (inherits(cond, "message")) {
[16:12:17.094]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.094]                         if (muffled) 
[16:12:17.094]                           invokeRestart("muffleMessage")
[16:12:17.094]                       }
[16:12:17.094]                       else if (inherits(cond, "warning")) {
[16:12:17.094]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.094]                         if (muffled) 
[16:12:17.094]                           invokeRestart("muffleWarning")
[16:12:17.094]                       }
[16:12:17.094]                       else if (inherits(cond, "condition")) {
[16:12:17.094]                         if (!is.null(pattern)) {
[16:12:17.094]                           computeRestarts <- base::computeRestarts
[16:12:17.094]                           grepl <- base::grepl
[16:12:17.094]                           restarts <- computeRestarts(cond)
[16:12:17.094]                           for (restart in restarts) {
[16:12:17.094]                             name <- restart$name
[16:12:17.094]                             if (is.null(name)) 
[16:12:17.094]                               next
[16:12:17.094]                             if (!grepl(pattern, name)) 
[16:12:17.094]                               next
[16:12:17.094]                             invokeRestart(restart)
[16:12:17.094]                             muffled <- TRUE
[16:12:17.094]                             break
[16:12:17.094]                           }
[16:12:17.094]                         }
[16:12:17.094]                       }
[16:12:17.094]                       invisible(muffled)
[16:12:17.094]                     }
[16:12:17.094]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.094]                   }
[16:12:17.094]                 }
[16:12:17.094]             }
[16:12:17.094]         }))
[16:12:17.094]     }, error = function(ex) {
[16:12:17.094]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.094]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.094]                 ...future.rng), started = ...future.startTime, 
[16:12:17.094]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.094]             version = "1.8"), class = "FutureResult")
[16:12:17.094]     }, finally = {
[16:12:17.094]         if (!identical(...future.workdir, getwd())) 
[16:12:17.094]             setwd(...future.workdir)
[16:12:17.094]         {
[16:12:17.094]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.094]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.094]             }
[16:12:17.094]             base::options(...future.oldOptions)
[16:12:17.094]             if (.Platform$OS.type == "windows") {
[16:12:17.094]                 old_names <- names(...future.oldEnvVars)
[16:12:17.094]                 envs <- base::Sys.getenv()
[16:12:17.094]                 names <- names(envs)
[16:12:17.094]                 common <- intersect(names, old_names)
[16:12:17.094]                 added <- setdiff(names, old_names)
[16:12:17.094]                 removed <- setdiff(old_names, names)
[16:12:17.094]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.094]                   envs[common]]
[16:12:17.094]                 NAMES <- toupper(changed)
[16:12:17.094]                 args <- list()
[16:12:17.094]                 for (kk in seq_along(NAMES)) {
[16:12:17.094]                   name <- changed[[kk]]
[16:12:17.094]                   NAME <- NAMES[[kk]]
[16:12:17.094]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.094]                     next
[16:12:17.094]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.094]                 }
[16:12:17.094]                 NAMES <- toupper(added)
[16:12:17.094]                 for (kk in seq_along(NAMES)) {
[16:12:17.094]                   name <- added[[kk]]
[16:12:17.094]                   NAME <- NAMES[[kk]]
[16:12:17.094]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.094]                     next
[16:12:17.094]                   args[[name]] <- ""
[16:12:17.094]                 }
[16:12:17.094]                 NAMES <- toupper(removed)
[16:12:17.094]                 for (kk in seq_along(NAMES)) {
[16:12:17.094]                   name <- removed[[kk]]
[16:12:17.094]                   NAME <- NAMES[[kk]]
[16:12:17.094]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.094]                     next
[16:12:17.094]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.094]                 }
[16:12:17.094]                 if (length(args) > 0) 
[16:12:17.094]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.094]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.094]             }
[16:12:17.094]             else {
[16:12:17.094]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.094]             }
[16:12:17.094]             {
[16:12:17.094]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.094]                   0L) {
[16:12:17.094]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.094]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.094]                   base::options(opts)
[16:12:17.094]                 }
[16:12:17.094]                 {
[16:12:17.094]                   {
[16:12:17.094]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.094]                     NULL
[16:12:17.094]                   }
[16:12:17.094]                   options(future.plan = NULL)
[16:12:17.094]                   if (is.na(NA_character_)) 
[16:12:17.094]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.094]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.094]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.094]                     envir = parent.frame()) 
[16:12:17.094]                   {
[16:12:17.094]                     default_workers <- missing(workers)
[16:12:17.094]                     if (is.function(workers)) 
[16:12:17.094]                       workers <- workers()
[16:12:17.094]                     workers <- structure(as.integer(workers), 
[16:12:17.094]                       class = class(workers))
[16:12:17.094]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.094]                       1L)
[16:12:17.094]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.094]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.094]                       if (default_workers) 
[16:12:17.094]                         supportsMulticore(warn = TRUE)
[16:12:17.094]                       return(sequential(..., envir = envir))
[16:12:17.094]                     }
[16:12:17.094]                     oopts <- options(mc.cores = workers)
[16:12:17.094]                     on.exit(options(oopts))
[16:12:17.094]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.094]                       envir = envir)
[16:12:17.094]                     if (!future$lazy) 
[16:12:17.094]                       future <- run(future)
[16:12:17.094]                     invisible(future)
[16:12:17.094]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.094]                 }
[16:12:17.094]             }
[16:12:17.094]         }
[16:12:17.094]     })
[16:12:17.094]     if (TRUE) {
[16:12:17.094]         base::sink(type = "output", split = FALSE)
[16:12:17.094]         if (TRUE) {
[16:12:17.094]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.094]         }
[16:12:17.094]         else {
[16:12:17.094]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.094]         }
[16:12:17.094]         base::close(...future.stdout)
[16:12:17.094]         ...future.stdout <- NULL
[16:12:17.094]     }
[16:12:17.094]     ...future.result$conditions <- ...future.conditions
[16:12:17.094]     ...future.result$finished <- base::Sys.time()
[16:12:17.094]     ...future.result
[16:12:17.094] }
[16:12:17.096] assign_globals() ...
[16:12:17.096] List of 1
[16:12:17.096]  $ ii: int 1
[16:12:17.096]  - attr(*, "where")=List of 1
[16:12:17.096]   ..$ ii:<environment: R_EmptyEnv> 
[16:12:17.096]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:17.096]  - attr(*, "resolved")= logi FALSE
[16:12:17.096]  - attr(*, "total_size")= num 56
[16:12:17.096]  - attr(*, "already-done")= logi TRUE
[16:12:17.099] - copied ‘ii’ to environment
[16:12:17.099] assign_globals() ... done
[16:12:17.100] requestCore(): workers = 2
[16:12:17.101] MulticoreFuture started
[16:12:17.102] - Launch lazy future ... done
[16:12:17.102] run() for ‘MulticoreFuture’ ... done
[16:12:17.102] plan(): Setting new future strategy stack:
[16:12:17.103] getGlobalsAndPackages() ...
[16:12:17.103] Searching for globals...
[16:12:17.103] List of future strategies:
[16:12:17.103] 1. sequential:
[16:12:17.103]    - args: function (..., envir = parent.frame())
[16:12:17.103]    - tweaked: FALSE
[16:12:17.103]    - call: NULL
[16:12:17.103] plan(): nbrOfWorkers() = 1
[16:12:17.105] plan(): Setting new future strategy stack:
[16:12:17.105] List of future strategies:
[16:12:17.105] 1. multicore:
[16:12:17.105]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.105]    - tweaked: FALSE
[16:12:17.105]    - call: plan(strategy)
[16:12:17.106] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:17.106] Searching for globals ... DONE
[16:12:17.107] Resolving globals: FALSE
[16:12:17.107] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:17.108] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:17.108] - globals: [1] ‘ii’
[16:12:17.108] 
[16:12:17.109] getGlobalsAndPackages() ... DONE
[16:12:17.109] run() for ‘Future’ ...
[16:12:17.109] - state: ‘created’
[16:12:17.109] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.110] plan(): nbrOfWorkers() = 2
[16:12:17.114] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.114] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.114]   - Field: ‘label’
[16:12:17.114]   - Field: ‘local’
[16:12:17.114]   - Field: ‘owner’
[16:12:17.115]   - Field: ‘envir’
[16:12:17.115]   - Field: ‘workers’
[16:12:17.115]   - Field: ‘packages’
[16:12:17.115]   - Field: ‘gc’
[16:12:17.115]   - Field: ‘job’
[16:12:17.115]   - Field: ‘conditions’
[16:12:17.116]   - Field: ‘expr’
[16:12:17.116]   - Field: ‘uuid’
[16:12:17.116]   - Field: ‘seed’
[16:12:17.116]   - Field: ‘version’
[16:12:17.116]   - Field: ‘result’
[16:12:17.116]   - Field: ‘asynchronous’
[16:12:17.116]   - Field: ‘calls’
[16:12:17.117]   - Field: ‘globals’
[16:12:17.117]   - Field: ‘stdout’
[16:12:17.117]   - Field: ‘earlySignal’
[16:12:17.117]   - Field: ‘lazy’
[16:12:17.117]   - Field: ‘state’
[16:12:17.117] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.117] - Launch lazy future ...
[16:12:17.118] Packages needed by the future expression (n = 0): <none>
[16:12:17.118] Packages needed by future strategies (n = 0): <none>
[16:12:17.119] {
[16:12:17.119]     {
[16:12:17.119]         {
[16:12:17.119]             ...future.startTime <- base::Sys.time()
[16:12:17.119]             {
[16:12:17.119]                 {
[16:12:17.119]                   {
[16:12:17.119]                     {
[16:12:17.119]                       base::local({
[16:12:17.119]                         has_future <- base::requireNamespace("future", 
[16:12:17.119]                           quietly = TRUE)
[16:12:17.119]                         if (has_future) {
[16:12:17.119]                           ns <- base::getNamespace("future")
[16:12:17.119]                           version <- ns[[".package"]][["version"]]
[16:12:17.119]                           if (is.null(version)) 
[16:12:17.119]                             version <- utils::packageVersion("future")
[16:12:17.119]                         }
[16:12:17.119]                         else {
[16:12:17.119]                           version <- NULL
[16:12:17.119]                         }
[16:12:17.119]                         if (!has_future || version < "1.8.0") {
[16:12:17.119]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.119]                             "", base::R.version$version.string), 
[16:12:17.119]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.119]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.119]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.119]                               "release", "version")], collapse = " "), 
[16:12:17.119]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.119]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.119]                             info)
[16:12:17.119]                           info <- base::paste(info, collapse = "; ")
[16:12:17.119]                           if (!has_future) {
[16:12:17.119]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.119]                               info)
[16:12:17.119]                           }
[16:12:17.119]                           else {
[16:12:17.119]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.119]                               info, version)
[16:12:17.119]                           }
[16:12:17.119]                           base::stop(msg)
[16:12:17.119]                         }
[16:12:17.119]                       })
[16:12:17.119]                     }
[16:12:17.119]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.119]                     base::options(mc.cores = 1L)
[16:12:17.119]                   }
[16:12:17.119]                   options(future.plan = NULL)
[16:12:17.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.119]                 }
[16:12:17.119]                 ...future.workdir <- getwd()
[16:12:17.119]             }
[16:12:17.119]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.119]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.119]         }
[16:12:17.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.119]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.119]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.119]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.119]             base::names(...future.oldOptions))
[16:12:17.119]     }
[16:12:17.119]     if (FALSE) {
[16:12:17.119]     }
[16:12:17.119]     else {
[16:12:17.119]         if (TRUE) {
[16:12:17.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.119]                 open = "w")
[16:12:17.119]         }
[16:12:17.119]         else {
[16:12:17.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.119]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.119]         }
[16:12:17.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.119]             base::sink(type = "output", split = FALSE)
[16:12:17.119]             base::close(...future.stdout)
[16:12:17.119]         }, add = TRUE)
[16:12:17.119]     }
[16:12:17.119]     ...future.frame <- base::sys.nframe()
[16:12:17.119]     ...future.conditions <- base::list()
[16:12:17.119]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.119]     if (FALSE) {
[16:12:17.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.119]     }
[16:12:17.119]     ...future.result <- base::tryCatch({
[16:12:17.119]         base::withCallingHandlers({
[16:12:17.119]             ...future.value <- base::withVisible(base::local({
[16:12:17.119]                 withCallingHandlers({
[16:12:17.119]                   {
[16:12:17.119]                     if (ii%%2 == 0) 
[16:12:17.119]                       stop("Woops!")
[16:12:17.119]                     ii
[16:12:17.119]                   }
[16:12:17.119]                 }, immediateCondition = function(cond) {
[16:12:17.119]                   save_rds <- function (object, pathname, ...) 
[16:12:17.119]                   {
[16:12:17.119]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.119]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.119]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.119]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.119]                         fi_tmp[["mtime"]])
[16:12:17.119]                     }
[16:12:17.119]                     tryCatch({
[16:12:17.119]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.119]                     }, error = function(ex) {
[16:12:17.119]                       msg <- conditionMessage(ex)
[16:12:17.119]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.119]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.119]                         fi_tmp[["mtime"]], msg)
[16:12:17.119]                       ex$message <- msg
[16:12:17.119]                       stop(ex)
[16:12:17.119]                     })
[16:12:17.119]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.119]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.119]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.119]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.119]                       fi <- file.info(pathname)
[16:12:17.119]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.119]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.119]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.119]                         fi[["size"]], fi[["mtime"]])
[16:12:17.119]                       stop(msg)
[16:12:17.119]                     }
[16:12:17.119]                     invisible(pathname)
[16:12:17.119]                   }
[16:12:17.119]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.119]                     rootPath = tempdir()) 
[16:12:17.119]                   {
[16:12:17.119]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.119]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.119]                       tmpdir = path, fileext = ".rds")
[16:12:17.119]                     save_rds(obj, file)
[16:12:17.119]                   }
[16:12:17.119]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.119]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.119]                   {
[16:12:17.119]                     inherits <- base::inherits
[16:12:17.119]                     invokeRestart <- base::invokeRestart
[16:12:17.119]                     is.null <- base::is.null
[16:12:17.119]                     muffled <- FALSE
[16:12:17.119]                     if (inherits(cond, "message")) {
[16:12:17.119]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.119]                       if (muffled) 
[16:12:17.119]                         invokeRestart("muffleMessage")
[16:12:17.119]                     }
[16:12:17.119]                     else if (inherits(cond, "warning")) {
[16:12:17.119]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.119]                       if (muffled) 
[16:12:17.119]                         invokeRestart("muffleWarning")
[16:12:17.119]                     }
[16:12:17.119]                     else if (inherits(cond, "condition")) {
[16:12:17.119]                       if (!is.null(pattern)) {
[16:12:17.119]                         computeRestarts <- base::computeRestarts
[16:12:17.119]                         grepl <- base::grepl
[16:12:17.119]                         restarts <- computeRestarts(cond)
[16:12:17.119]                         for (restart in restarts) {
[16:12:17.119]                           name <- restart$name
[16:12:17.119]                           if (is.null(name)) 
[16:12:17.119]                             next
[16:12:17.119]                           if (!grepl(pattern, name)) 
[16:12:17.119]                             next
[16:12:17.119]                           invokeRestart(restart)
[16:12:17.119]                           muffled <- TRUE
[16:12:17.119]                           break
[16:12:17.119]                         }
[16:12:17.119]                       }
[16:12:17.119]                     }
[16:12:17.119]                     invisible(muffled)
[16:12:17.119]                   }
[16:12:17.119]                   muffleCondition(cond)
[16:12:17.119]                 })
[16:12:17.119]             }))
[16:12:17.119]             future::FutureResult(value = ...future.value$value, 
[16:12:17.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.119]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.119]                     ...future.globalenv.names))
[16:12:17.119]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.119]         }, condition = base::local({
[16:12:17.119]             c <- base::c
[16:12:17.119]             inherits <- base::inherits
[16:12:17.119]             invokeRestart <- base::invokeRestart
[16:12:17.119]             length <- base::length
[16:12:17.119]             list <- base::list
[16:12:17.119]             seq.int <- base::seq.int
[16:12:17.119]             signalCondition <- base::signalCondition
[16:12:17.119]             sys.calls <- base::sys.calls
[16:12:17.119]             `[[` <- base::`[[`
[16:12:17.119]             `+` <- base::`+`
[16:12:17.119]             `<<-` <- base::`<<-`
[16:12:17.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.119]                   3L)]
[16:12:17.119]             }
[16:12:17.119]             function(cond) {
[16:12:17.119]                 is_error <- inherits(cond, "error")
[16:12:17.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.119]                   NULL)
[16:12:17.119]                 if (is_error) {
[16:12:17.119]                   sessionInformation <- function() {
[16:12:17.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.119]                       search = base::search(), system = base::Sys.info())
[16:12:17.119]                   }
[16:12:17.119]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.119]                     cond$call), session = sessionInformation(), 
[16:12:17.119]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.119]                   signalCondition(cond)
[16:12:17.119]                 }
[16:12:17.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.119]                 "immediateCondition"))) {
[16:12:17.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.119]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.119]                   if (TRUE && !signal) {
[16:12:17.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.119]                     {
[16:12:17.119]                       inherits <- base::inherits
[16:12:17.119]                       invokeRestart <- base::invokeRestart
[16:12:17.119]                       is.null <- base::is.null
[16:12:17.119]                       muffled <- FALSE
[16:12:17.119]                       if (inherits(cond, "message")) {
[16:12:17.119]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.119]                         if (muffled) 
[16:12:17.119]                           invokeRestart("muffleMessage")
[16:12:17.119]                       }
[16:12:17.119]                       else if (inherits(cond, "warning")) {
[16:12:17.119]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.119]                         if (muffled) 
[16:12:17.119]                           invokeRestart("muffleWarning")
[16:12:17.119]                       }
[16:12:17.119]                       else if (inherits(cond, "condition")) {
[16:12:17.119]                         if (!is.null(pattern)) {
[16:12:17.119]                           computeRestarts <- base::computeRestarts
[16:12:17.119]                           grepl <- base::grepl
[16:12:17.119]                           restarts <- computeRestarts(cond)
[16:12:17.119]                           for (restart in restarts) {
[16:12:17.119]                             name <- restart$name
[16:12:17.119]                             if (is.null(name)) 
[16:12:17.119]                               next
[16:12:17.119]                             if (!grepl(pattern, name)) 
[16:12:17.119]                               next
[16:12:17.119]                             invokeRestart(restart)
[16:12:17.119]                             muffled <- TRUE
[16:12:17.119]                             break
[16:12:17.119]                           }
[16:12:17.119]                         }
[16:12:17.119]                       }
[16:12:17.119]                       invisible(muffled)
[16:12:17.119]                     }
[16:12:17.119]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.119]                   }
[16:12:17.119]                 }
[16:12:17.119]                 else {
[16:12:17.119]                   if (TRUE) {
[16:12:17.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.119]                     {
[16:12:17.119]                       inherits <- base::inherits
[16:12:17.119]                       invokeRestart <- base::invokeRestart
[16:12:17.119]                       is.null <- base::is.null
[16:12:17.119]                       muffled <- FALSE
[16:12:17.119]                       if (inherits(cond, "message")) {
[16:12:17.119]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.119]                         if (muffled) 
[16:12:17.119]                           invokeRestart("muffleMessage")
[16:12:17.119]                       }
[16:12:17.119]                       else if (inherits(cond, "warning")) {
[16:12:17.119]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.119]                         if (muffled) 
[16:12:17.119]                           invokeRestart("muffleWarning")
[16:12:17.119]                       }
[16:12:17.119]                       else if (inherits(cond, "condition")) {
[16:12:17.119]                         if (!is.null(pattern)) {
[16:12:17.119]                           computeRestarts <- base::computeRestarts
[16:12:17.119]                           grepl <- base::grepl
[16:12:17.119]                           restarts <- computeRestarts(cond)
[16:12:17.119]                           for (restart in restarts) {
[16:12:17.119]                             name <- restart$name
[16:12:17.119]                             if (is.null(name)) 
[16:12:17.119]                               next
[16:12:17.119]                             if (!grepl(pattern, name)) 
[16:12:17.119]                               next
[16:12:17.119]                             invokeRestart(restart)
[16:12:17.119]                             muffled <- TRUE
[16:12:17.119]                             break
[16:12:17.119]                           }
[16:12:17.119]                         }
[16:12:17.119]                       }
[16:12:17.119]                       invisible(muffled)
[16:12:17.119]                     }
[16:12:17.119]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.119]                   }
[16:12:17.119]                 }
[16:12:17.119]             }
[16:12:17.119]         }))
[16:12:17.119]     }, error = function(ex) {
[16:12:17.119]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.119]                 ...future.rng), started = ...future.startTime, 
[16:12:17.119]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.119]             version = "1.8"), class = "FutureResult")
[16:12:17.119]     }, finally = {
[16:12:17.119]         if (!identical(...future.workdir, getwd())) 
[16:12:17.119]             setwd(...future.workdir)
[16:12:17.119]         {
[16:12:17.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.119]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.119]             }
[16:12:17.119]             base::options(...future.oldOptions)
[16:12:17.119]             if (.Platform$OS.type == "windows") {
[16:12:17.119]                 old_names <- names(...future.oldEnvVars)
[16:12:17.119]                 envs <- base::Sys.getenv()
[16:12:17.119]                 names <- names(envs)
[16:12:17.119]                 common <- intersect(names, old_names)
[16:12:17.119]                 added <- setdiff(names, old_names)
[16:12:17.119]                 removed <- setdiff(old_names, names)
[16:12:17.119]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.119]                   envs[common]]
[16:12:17.119]                 NAMES <- toupper(changed)
[16:12:17.119]                 args <- list()
[16:12:17.119]                 for (kk in seq_along(NAMES)) {
[16:12:17.119]                   name <- changed[[kk]]
[16:12:17.119]                   NAME <- NAMES[[kk]]
[16:12:17.119]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.119]                     next
[16:12:17.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.119]                 }
[16:12:17.119]                 NAMES <- toupper(added)
[16:12:17.119]                 for (kk in seq_along(NAMES)) {
[16:12:17.119]                   name <- added[[kk]]
[16:12:17.119]                   NAME <- NAMES[[kk]]
[16:12:17.119]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.119]                     next
[16:12:17.119]                   args[[name]] <- ""
[16:12:17.119]                 }
[16:12:17.119]                 NAMES <- toupper(removed)
[16:12:17.119]                 for (kk in seq_along(NAMES)) {
[16:12:17.119]                   name <- removed[[kk]]
[16:12:17.119]                   NAME <- NAMES[[kk]]
[16:12:17.119]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.119]                     next
[16:12:17.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.119]                 }
[16:12:17.119]                 if (length(args) > 0) 
[16:12:17.119]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.119]             }
[16:12:17.119]             else {
[16:12:17.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.119]             }
[16:12:17.119]             {
[16:12:17.119]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.119]                   0L) {
[16:12:17.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.119]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.119]                   base::options(opts)
[16:12:17.119]                 }
[16:12:17.119]                 {
[16:12:17.119]                   {
[16:12:17.119]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.119]                     NULL
[16:12:17.119]                   }
[16:12:17.119]                   options(future.plan = NULL)
[16:12:17.119]                   if (is.na(NA_character_)) 
[16:12:17.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.119]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.119]                     envir = parent.frame()) 
[16:12:17.119]                   {
[16:12:17.119]                     default_workers <- missing(workers)
[16:12:17.119]                     if (is.function(workers)) 
[16:12:17.119]                       workers <- workers()
[16:12:17.119]                     workers <- structure(as.integer(workers), 
[16:12:17.119]                       class = class(workers))
[16:12:17.119]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.119]                       1L)
[16:12:17.119]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.119]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.119]                       if (default_workers) 
[16:12:17.119]                         supportsMulticore(warn = TRUE)
[16:12:17.119]                       return(sequential(..., envir = envir))
[16:12:17.119]                     }
[16:12:17.119]                     oopts <- options(mc.cores = workers)
[16:12:17.119]                     on.exit(options(oopts))
[16:12:17.119]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.119]                       envir = envir)
[16:12:17.119]                     if (!future$lazy) 
[16:12:17.119]                       future <- run(future)
[16:12:17.119]                     invisible(future)
[16:12:17.119]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.119]                 }
[16:12:17.119]             }
[16:12:17.119]         }
[16:12:17.119]     })
[16:12:17.119]     if (TRUE) {
[16:12:17.119]         base::sink(type = "output", split = FALSE)
[16:12:17.119]         if (TRUE) {
[16:12:17.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.119]         }
[16:12:17.119]         else {
[16:12:17.119]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.119]         }
[16:12:17.119]         base::close(...future.stdout)
[16:12:17.119]         ...future.stdout <- NULL
[16:12:17.119]     }
[16:12:17.119]     ...future.result$conditions <- ...future.conditions
[16:12:17.119]     ...future.result$finished <- base::Sys.time()
[16:12:17.119]     ...future.result
[16:12:17.119] }
[16:12:17.122] assign_globals() ...
[16:12:17.122] List of 1
[16:12:17.122]  $ ii: int 2
[16:12:17.122]  - attr(*, "where")=List of 1
[16:12:17.122]   ..$ ii:<environment: R_EmptyEnv> 
[16:12:17.122]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:17.122]  - attr(*, "resolved")= logi FALSE
[16:12:17.122]  - attr(*, "total_size")= num 56
[16:12:17.122]  - attr(*, "already-done")= logi TRUE
[16:12:17.126] - copied ‘ii’ to environment
[16:12:17.126] assign_globals() ... done
[16:12:17.126] requestCore(): workers = 2
[16:12:17.128] MulticoreFuture started
[16:12:17.128] - Launch lazy future ... done
[16:12:17.128] run() for ‘MulticoreFuture’ ... done
[16:12:17.129] getGlobalsAndPackages() ...
[16:12:17.130] Searching for globals...
[16:12:17.130] plan(): Setting new future strategy stack:
[16:12:17.130] List of future strategies:
[16:12:17.130] 1. sequential:
[16:12:17.130]    - args: function (..., envir = parent.frame())
[16:12:17.130]    - tweaked: FALSE
[16:12:17.130]    - call: NULL
[16:12:17.131] plan(): nbrOfWorkers() = 1
[16:12:17.134] plan(): Setting new future strategy stack:
[16:12:17.137] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:17.137] Searching for globals ... DONE
[16:12:17.134] List of future strategies:
[16:12:17.134] 1. multicore:
[16:12:17.134]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.134]    - tweaked: FALSE
[16:12:17.134]    - call: plan(strategy)
[16:12:17.138] Resolving globals: FALSE
[16:12:17.139] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:17.139] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:17.140] - globals: [1] ‘ii’
[16:12:17.140] 
[16:12:17.140] getGlobalsAndPackages() ... DONE
[16:12:17.141] run() for ‘Future’ ...
[16:12:17.141] - state: ‘created’
[16:12:17.141] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.142] plan(): nbrOfWorkers() = 2
[16:12:17.146] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.146] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.147]   - Field: ‘label’
[16:12:17.147]   - Field: ‘local’
[16:12:17.147]   - Field: ‘owner’
[16:12:17.147]   - Field: ‘envir’
[16:12:17.147]   - Field: ‘workers’
[16:12:17.147]   - Field: ‘packages’
[16:12:17.148]   - Field: ‘gc’
[16:12:17.148]   - Field: ‘job’
[16:12:17.148]   - Field: ‘conditions’
[16:12:17.148]   - Field: ‘expr’
[16:12:17.148]   - Field: ‘uuid’
[16:12:17.148]   - Field: ‘seed’
[16:12:17.148]   - Field: ‘version’
[16:12:17.149]   - Field: ‘result’
[16:12:17.149]   - Field: ‘asynchronous’
[16:12:17.149]   - Field: ‘calls’
[16:12:17.149]   - Field: ‘globals’
[16:12:17.149]   - Field: ‘stdout’
[16:12:17.149]   - Field: ‘earlySignal’
[16:12:17.149]   - Field: ‘lazy’
[16:12:17.150]   - Field: ‘state’
[16:12:17.150] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.150] - Launch lazy future ...
[16:12:17.150] Packages needed by the future expression (n = 0): <none>
[16:12:17.151] Packages needed by future strategies (n = 0): <none>
[16:12:17.151] {
[16:12:17.151]     {
[16:12:17.151]         {
[16:12:17.151]             ...future.startTime <- base::Sys.time()
[16:12:17.151]             {
[16:12:17.151]                 {
[16:12:17.151]                   {
[16:12:17.151]                     {
[16:12:17.151]                       base::local({
[16:12:17.151]                         has_future <- base::requireNamespace("future", 
[16:12:17.151]                           quietly = TRUE)
[16:12:17.151]                         if (has_future) {
[16:12:17.151]                           ns <- base::getNamespace("future")
[16:12:17.151]                           version <- ns[[".package"]][["version"]]
[16:12:17.151]                           if (is.null(version)) 
[16:12:17.151]                             version <- utils::packageVersion("future")
[16:12:17.151]                         }
[16:12:17.151]                         else {
[16:12:17.151]                           version <- NULL
[16:12:17.151]                         }
[16:12:17.151]                         if (!has_future || version < "1.8.0") {
[16:12:17.151]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.151]                             "", base::R.version$version.string), 
[16:12:17.151]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.151]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.151]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.151]                               "release", "version")], collapse = " "), 
[16:12:17.151]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.151]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.151]                             info)
[16:12:17.151]                           info <- base::paste(info, collapse = "; ")
[16:12:17.151]                           if (!has_future) {
[16:12:17.151]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.151]                               info)
[16:12:17.151]                           }
[16:12:17.151]                           else {
[16:12:17.151]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.151]                               info, version)
[16:12:17.151]                           }
[16:12:17.151]                           base::stop(msg)
[16:12:17.151]                         }
[16:12:17.151]                       })
[16:12:17.151]                     }
[16:12:17.151]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.151]                     base::options(mc.cores = 1L)
[16:12:17.151]                   }
[16:12:17.151]                   options(future.plan = NULL)
[16:12:17.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.151]                 }
[16:12:17.151]                 ...future.workdir <- getwd()
[16:12:17.151]             }
[16:12:17.151]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.151]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.151]         }
[16:12:17.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.151]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.151]             base::names(...future.oldOptions))
[16:12:17.151]     }
[16:12:17.151]     if (FALSE) {
[16:12:17.151]     }
[16:12:17.151]     else {
[16:12:17.151]         if (TRUE) {
[16:12:17.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.151]                 open = "w")
[16:12:17.151]         }
[16:12:17.151]         else {
[16:12:17.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.151]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.151]         }
[16:12:17.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.151]             base::sink(type = "output", split = FALSE)
[16:12:17.151]             base::close(...future.stdout)
[16:12:17.151]         }, add = TRUE)
[16:12:17.151]     }
[16:12:17.151]     ...future.frame <- base::sys.nframe()
[16:12:17.151]     ...future.conditions <- base::list()
[16:12:17.151]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.151]     if (FALSE) {
[16:12:17.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.151]     }
[16:12:17.151]     ...future.result <- base::tryCatch({
[16:12:17.151]         base::withCallingHandlers({
[16:12:17.151]             ...future.value <- base::withVisible(base::local({
[16:12:17.151]                 withCallingHandlers({
[16:12:17.151]                   {
[16:12:17.151]                     if (ii%%2 == 0) 
[16:12:17.151]                       stop("Woops!")
[16:12:17.151]                     ii
[16:12:17.151]                   }
[16:12:17.151]                 }, immediateCondition = function(cond) {
[16:12:17.151]                   save_rds <- function (object, pathname, ...) 
[16:12:17.151]                   {
[16:12:17.151]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.151]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.151]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.151]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.151]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.151]                         fi_tmp[["mtime"]])
[16:12:17.151]                     }
[16:12:17.151]                     tryCatch({
[16:12:17.151]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.151]                     }, error = function(ex) {
[16:12:17.151]                       msg <- conditionMessage(ex)
[16:12:17.151]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.151]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.151]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.151]                         fi_tmp[["mtime"]], msg)
[16:12:17.151]                       ex$message <- msg
[16:12:17.151]                       stop(ex)
[16:12:17.151]                     })
[16:12:17.151]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.151]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.151]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.151]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.151]                       fi <- file.info(pathname)
[16:12:17.151]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.151]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.151]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.151]                         fi[["size"]], fi[["mtime"]])
[16:12:17.151]                       stop(msg)
[16:12:17.151]                     }
[16:12:17.151]                     invisible(pathname)
[16:12:17.151]                   }
[16:12:17.151]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.151]                     rootPath = tempdir()) 
[16:12:17.151]                   {
[16:12:17.151]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.151]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.151]                       tmpdir = path, fileext = ".rds")
[16:12:17.151]                     save_rds(obj, file)
[16:12:17.151]                   }
[16:12:17.151]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.151]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.151]                   {
[16:12:17.151]                     inherits <- base::inherits
[16:12:17.151]                     invokeRestart <- base::invokeRestart
[16:12:17.151]                     is.null <- base::is.null
[16:12:17.151]                     muffled <- FALSE
[16:12:17.151]                     if (inherits(cond, "message")) {
[16:12:17.151]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.151]                       if (muffled) 
[16:12:17.151]                         invokeRestart("muffleMessage")
[16:12:17.151]                     }
[16:12:17.151]                     else if (inherits(cond, "warning")) {
[16:12:17.151]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.151]                       if (muffled) 
[16:12:17.151]                         invokeRestart("muffleWarning")
[16:12:17.151]                     }
[16:12:17.151]                     else if (inherits(cond, "condition")) {
[16:12:17.151]                       if (!is.null(pattern)) {
[16:12:17.151]                         computeRestarts <- base::computeRestarts
[16:12:17.151]                         grepl <- base::grepl
[16:12:17.151]                         restarts <- computeRestarts(cond)
[16:12:17.151]                         for (restart in restarts) {
[16:12:17.151]                           name <- restart$name
[16:12:17.151]                           if (is.null(name)) 
[16:12:17.151]                             next
[16:12:17.151]                           if (!grepl(pattern, name)) 
[16:12:17.151]                             next
[16:12:17.151]                           invokeRestart(restart)
[16:12:17.151]                           muffled <- TRUE
[16:12:17.151]                           break
[16:12:17.151]                         }
[16:12:17.151]                       }
[16:12:17.151]                     }
[16:12:17.151]                     invisible(muffled)
[16:12:17.151]                   }
[16:12:17.151]                   muffleCondition(cond)
[16:12:17.151]                 })
[16:12:17.151]             }))
[16:12:17.151]             future::FutureResult(value = ...future.value$value, 
[16:12:17.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.151]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.151]                     ...future.globalenv.names))
[16:12:17.151]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.151]         }, condition = base::local({
[16:12:17.151]             c <- base::c
[16:12:17.151]             inherits <- base::inherits
[16:12:17.151]             invokeRestart <- base::invokeRestart
[16:12:17.151]             length <- base::length
[16:12:17.151]             list <- base::list
[16:12:17.151]             seq.int <- base::seq.int
[16:12:17.151]             signalCondition <- base::signalCondition
[16:12:17.151]             sys.calls <- base::sys.calls
[16:12:17.151]             `[[` <- base::`[[`
[16:12:17.151]             `+` <- base::`+`
[16:12:17.151]             `<<-` <- base::`<<-`
[16:12:17.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.151]                   3L)]
[16:12:17.151]             }
[16:12:17.151]             function(cond) {
[16:12:17.151]                 is_error <- inherits(cond, "error")
[16:12:17.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.151]                   NULL)
[16:12:17.151]                 if (is_error) {
[16:12:17.151]                   sessionInformation <- function() {
[16:12:17.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.151]                       search = base::search(), system = base::Sys.info())
[16:12:17.151]                   }
[16:12:17.151]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.151]                     cond$call), session = sessionInformation(), 
[16:12:17.151]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.151]                   signalCondition(cond)
[16:12:17.151]                 }
[16:12:17.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.151]                 "immediateCondition"))) {
[16:12:17.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.151]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.151]                   if (TRUE && !signal) {
[16:12:17.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.151]                     {
[16:12:17.151]                       inherits <- base::inherits
[16:12:17.151]                       invokeRestart <- base::invokeRestart
[16:12:17.151]                       is.null <- base::is.null
[16:12:17.151]                       muffled <- FALSE
[16:12:17.151]                       if (inherits(cond, "message")) {
[16:12:17.151]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.151]                         if (muffled) 
[16:12:17.151]                           invokeRestart("muffleMessage")
[16:12:17.151]                       }
[16:12:17.151]                       else if (inherits(cond, "warning")) {
[16:12:17.151]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.151]                         if (muffled) 
[16:12:17.151]                           invokeRestart("muffleWarning")
[16:12:17.151]                       }
[16:12:17.151]                       else if (inherits(cond, "condition")) {
[16:12:17.151]                         if (!is.null(pattern)) {
[16:12:17.151]                           computeRestarts <- base::computeRestarts
[16:12:17.151]                           grepl <- base::grepl
[16:12:17.151]                           restarts <- computeRestarts(cond)
[16:12:17.151]                           for (restart in restarts) {
[16:12:17.151]                             name <- restart$name
[16:12:17.151]                             if (is.null(name)) 
[16:12:17.151]                               next
[16:12:17.151]                             if (!grepl(pattern, name)) 
[16:12:17.151]                               next
[16:12:17.151]                             invokeRestart(restart)
[16:12:17.151]                             muffled <- TRUE
[16:12:17.151]                             break
[16:12:17.151]                           }
[16:12:17.151]                         }
[16:12:17.151]                       }
[16:12:17.151]                       invisible(muffled)
[16:12:17.151]                     }
[16:12:17.151]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.151]                   }
[16:12:17.151]                 }
[16:12:17.151]                 else {
[16:12:17.151]                   if (TRUE) {
[16:12:17.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.151]                     {
[16:12:17.151]                       inherits <- base::inherits
[16:12:17.151]                       invokeRestart <- base::invokeRestart
[16:12:17.151]                       is.null <- base::is.null
[16:12:17.151]                       muffled <- FALSE
[16:12:17.151]                       if (inherits(cond, "message")) {
[16:12:17.151]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.151]                         if (muffled) 
[16:12:17.151]                           invokeRestart("muffleMessage")
[16:12:17.151]                       }
[16:12:17.151]                       else if (inherits(cond, "warning")) {
[16:12:17.151]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.151]                         if (muffled) 
[16:12:17.151]                           invokeRestart("muffleWarning")
[16:12:17.151]                       }
[16:12:17.151]                       else if (inherits(cond, "condition")) {
[16:12:17.151]                         if (!is.null(pattern)) {
[16:12:17.151]                           computeRestarts <- base::computeRestarts
[16:12:17.151]                           grepl <- base::grepl
[16:12:17.151]                           restarts <- computeRestarts(cond)
[16:12:17.151]                           for (restart in restarts) {
[16:12:17.151]                             name <- restart$name
[16:12:17.151]                             if (is.null(name)) 
[16:12:17.151]                               next
[16:12:17.151]                             if (!grepl(pattern, name)) 
[16:12:17.151]                               next
[16:12:17.151]                             invokeRestart(restart)
[16:12:17.151]                             muffled <- TRUE
[16:12:17.151]                             break
[16:12:17.151]                           }
[16:12:17.151]                         }
[16:12:17.151]                       }
[16:12:17.151]                       invisible(muffled)
[16:12:17.151]                     }
[16:12:17.151]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.151]                   }
[16:12:17.151]                 }
[16:12:17.151]             }
[16:12:17.151]         }))
[16:12:17.151]     }, error = function(ex) {
[16:12:17.151]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.151]                 ...future.rng), started = ...future.startTime, 
[16:12:17.151]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.151]             version = "1.8"), class = "FutureResult")
[16:12:17.151]     }, finally = {
[16:12:17.151]         if (!identical(...future.workdir, getwd())) 
[16:12:17.151]             setwd(...future.workdir)
[16:12:17.151]         {
[16:12:17.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.151]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.151]             }
[16:12:17.151]             base::options(...future.oldOptions)
[16:12:17.151]             if (.Platform$OS.type == "windows") {
[16:12:17.151]                 old_names <- names(...future.oldEnvVars)
[16:12:17.151]                 envs <- base::Sys.getenv()
[16:12:17.151]                 names <- names(envs)
[16:12:17.151]                 common <- intersect(names, old_names)
[16:12:17.151]                 added <- setdiff(names, old_names)
[16:12:17.151]                 removed <- setdiff(old_names, names)
[16:12:17.151]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.151]                   envs[common]]
[16:12:17.151]                 NAMES <- toupper(changed)
[16:12:17.151]                 args <- list()
[16:12:17.151]                 for (kk in seq_along(NAMES)) {
[16:12:17.151]                   name <- changed[[kk]]
[16:12:17.151]                   NAME <- NAMES[[kk]]
[16:12:17.151]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.151]                     next
[16:12:17.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.151]                 }
[16:12:17.151]                 NAMES <- toupper(added)
[16:12:17.151]                 for (kk in seq_along(NAMES)) {
[16:12:17.151]                   name <- added[[kk]]
[16:12:17.151]                   NAME <- NAMES[[kk]]
[16:12:17.151]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.151]                     next
[16:12:17.151]                   args[[name]] <- ""
[16:12:17.151]                 }
[16:12:17.151]                 NAMES <- toupper(removed)
[16:12:17.151]                 for (kk in seq_along(NAMES)) {
[16:12:17.151]                   name <- removed[[kk]]
[16:12:17.151]                   NAME <- NAMES[[kk]]
[16:12:17.151]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.151]                     next
[16:12:17.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.151]                 }
[16:12:17.151]                 if (length(args) > 0) 
[16:12:17.151]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.151]             }
[16:12:17.151]             else {
[16:12:17.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.151]             }
[16:12:17.151]             {
[16:12:17.151]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.151]                   0L) {
[16:12:17.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.151]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.151]                   base::options(opts)
[16:12:17.151]                 }
[16:12:17.151]                 {
[16:12:17.151]                   {
[16:12:17.151]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.151]                     NULL
[16:12:17.151]                   }
[16:12:17.151]                   options(future.plan = NULL)
[16:12:17.151]                   if (is.na(NA_character_)) 
[16:12:17.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.151]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.151]                     envir = parent.frame()) 
[16:12:17.151]                   {
[16:12:17.151]                     default_workers <- missing(workers)
[16:12:17.151]                     if (is.function(workers)) 
[16:12:17.151]                       workers <- workers()
[16:12:17.151]                     workers <- structure(as.integer(workers), 
[16:12:17.151]                       class = class(workers))
[16:12:17.151]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.151]                       1L)
[16:12:17.151]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.151]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.151]                       if (default_workers) 
[16:12:17.151]                         supportsMulticore(warn = TRUE)
[16:12:17.151]                       return(sequential(..., envir = envir))
[16:12:17.151]                     }
[16:12:17.151]                     oopts <- options(mc.cores = workers)
[16:12:17.151]                     on.exit(options(oopts))
[16:12:17.151]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.151]                       envir = envir)
[16:12:17.151]                     if (!future$lazy) 
[16:12:17.151]                       future <- run(future)
[16:12:17.151]                     invisible(future)
[16:12:17.151]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.151]                 }
[16:12:17.151]             }
[16:12:17.151]         }
[16:12:17.151]     })
[16:12:17.151]     if (TRUE) {
[16:12:17.151]         base::sink(type = "output", split = FALSE)
[16:12:17.151]         if (TRUE) {
[16:12:17.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.151]         }
[16:12:17.151]         else {
[16:12:17.151]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.151]         }
[16:12:17.151]         base::close(...future.stdout)
[16:12:17.151]         ...future.stdout <- NULL
[16:12:17.151]     }
[16:12:17.151]     ...future.result$conditions <- ...future.conditions
[16:12:17.151]     ...future.result$finished <- base::Sys.time()
[16:12:17.151]     ...future.result
[16:12:17.151] }
[16:12:17.154] assign_globals() ...
[16:12:17.154] List of 1
[16:12:17.154]  $ ii: int 3
[16:12:17.154]  - attr(*, "where")=List of 1
[16:12:17.154]   ..$ ii:<environment: R_EmptyEnv> 
[16:12:17.154]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:17.154]  - attr(*, "resolved")= logi FALSE
[16:12:17.154]  - attr(*, "total_size")= num 56
[16:12:17.154]  - attr(*, "already-done")= logi TRUE
[16:12:17.158] - copied ‘ii’ to environment
[16:12:17.158] assign_globals() ... done
[16:12:17.158] requestCore(): workers = 2
[16:12:17.159] Poll #1 (0): usedCores() = 2, workers = 2
[16:12:17.174] MulticoreFuture started
[16:12:17.175] - Launch lazy future ... done
[16:12:17.175] run() for ‘MulticoreFuture’ ... done
[16:12:17.175] plan(): Setting new future strategy stack:
[16:12:17.175] List of future strategies:
[16:12:17.175] 1. sequential:
[16:12:17.175]    - args: function (..., envir = parent.frame())
[16:12:17.175]    - tweaked: FALSE
[16:12:17.175]    - call: NULL
[16:12:17.177] plan(): nbrOfWorkers() = 1
[16:12:17.179] plan(): Setting new future strategy stack:
[16:12:17.179] List of future strategies:
[16:12:17.179] 1. multicore:
[16:12:17.179]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.179]    - tweaked: FALSE
[16:12:17.179]    - call: plan(strategy)
[16:12:17.180] signalConditions() ...
[16:12:17.180]  - include = ‘immediateCondition’
[16:12:17.180]  - exclude = 
[16:12:17.180]  - resignal = FALSE
[16:12:17.180]  - Number of conditions: 1
[16:12:17.181] signalConditions() ... done
[16:12:17.181] signalConditions() ...
[16:12:17.181]  - include = ‘immediateCondition’
[16:12:17.181]  - exclude = 
[16:12:17.181]  - resignal = FALSE
[16:12:17.182]  - Number of conditions: 1
[16:12:17.182] signalConditions() ... done
[16:12:17.182] Future state: ‘finished’
[16:12:17.182] signalConditions() ...
[16:12:17.182]  - include = ‘condition’
[16:12:17.183]  - exclude = ‘immediateCondition’
[16:12:17.183]  - resignal = TRUE
[16:12:17.183]  - Number of conditions: 1
[16:12:17.183]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:17.184] signalConditions() ... done
[16:12:17.184] plan(): nbrOfWorkers() = 2
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:12:17.185] signalConditions() ...
[16:12:17.185]  - include = ‘immediateCondition’
[16:12:17.185]  - exclude = 
[16:12:17.185]  - resignal = FALSE
[16:12:17.186]  - Number of conditions: 1
[16:12:17.186] signalConditions() ... done
[16:12:17.186] Future state: ‘finished’
[16:12:17.186] signalConditions() ...
[16:12:17.186]  - include = ‘condition’
[16:12:17.186]  - exclude = ‘immediateCondition’
[16:12:17.186]  - resignal = TRUE
[16:12:17.187]  - Number of conditions: 1
[16:12:17.187]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:17.187] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:12:17.187] signalConditions() ...
[16:12:17.187]  - include = ‘immediateCondition’
[16:12:17.187]  - exclude = 
[16:12:17.188]  - resignal = FALSE
[16:12:17.188]  - Number of conditions: 1
[16:12:17.188] signalConditions() ... done
[16:12:17.188] Future state: ‘finished’
[16:12:17.188] signalConditions() ...
[16:12:17.188]  - include = ‘condition’
[16:12:17.188]  - exclude = ‘immediateCondition’
[16:12:17.188]  - resignal = TRUE
[16:12:17.188]  - Number of conditions: 1
[16:12:17.189]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:17.189] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[16:12:17.189] getGlobalsAndPackages() ...
[16:12:17.189] Searching for globals...
[16:12:17.195] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[16:12:17.195] Searching for globals ... DONE
[16:12:17.195] Resolving globals: FALSE
[16:12:17.196] 
[16:12:17.196] 
[16:12:17.196] getGlobalsAndPackages() ... DONE
[16:12:17.196] run() for ‘Future’ ...
[16:12:17.196] - state: ‘created’
[16:12:17.197] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.201] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.201] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.201]   - Field: ‘label’
[16:12:17.201]   - Field: ‘local’
[16:12:17.201]   - Field: ‘owner’
[16:12:17.202]   - Field: ‘envir’
[16:12:17.202]   - Field: ‘workers’
[16:12:17.202]   - Field: ‘packages’
[16:12:17.202]   - Field: ‘gc’
[16:12:17.202]   - Field: ‘job’
[16:12:17.202]   - Field: ‘conditions’
[16:12:17.202]   - Field: ‘expr’
[16:12:17.202]   - Field: ‘uuid’
[16:12:17.202]   - Field: ‘seed’
[16:12:17.203]   - Field: ‘version’
[16:12:17.203]   - Field: ‘result’
[16:12:17.203]   - Field: ‘asynchronous’
[16:12:17.203]   - Field: ‘calls’
[16:12:17.203]   - Field: ‘globals’
[16:12:17.203]   - Field: ‘stdout’
[16:12:17.203]   - Field: ‘earlySignal’
[16:12:17.203]   - Field: ‘lazy’
[16:12:17.203]   - Field: ‘state’
[16:12:17.204] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.204] - Launch lazy future ...
[16:12:17.204] Packages needed by the future expression (n = 0): <none>
[16:12:17.204] Packages needed by future strategies (n = 0): <none>
[16:12:17.205] {
[16:12:17.205]     {
[16:12:17.205]         {
[16:12:17.205]             ...future.startTime <- base::Sys.time()
[16:12:17.205]             {
[16:12:17.205]                 {
[16:12:17.205]                   {
[16:12:17.205]                     {
[16:12:17.205]                       base::local({
[16:12:17.205]                         has_future <- base::requireNamespace("future", 
[16:12:17.205]                           quietly = TRUE)
[16:12:17.205]                         if (has_future) {
[16:12:17.205]                           ns <- base::getNamespace("future")
[16:12:17.205]                           version <- ns[[".package"]][["version"]]
[16:12:17.205]                           if (is.null(version)) 
[16:12:17.205]                             version <- utils::packageVersion("future")
[16:12:17.205]                         }
[16:12:17.205]                         else {
[16:12:17.205]                           version <- NULL
[16:12:17.205]                         }
[16:12:17.205]                         if (!has_future || version < "1.8.0") {
[16:12:17.205]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.205]                             "", base::R.version$version.string), 
[16:12:17.205]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.205]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.205]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.205]                               "release", "version")], collapse = " "), 
[16:12:17.205]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.205]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.205]                             info)
[16:12:17.205]                           info <- base::paste(info, collapse = "; ")
[16:12:17.205]                           if (!has_future) {
[16:12:17.205]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.205]                               info)
[16:12:17.205]                           }
[16:12:17.205]                           else {
[16:12:17.205]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.205]                               info, version)
[16:12:17.205]                           }
[16:12:17.205]                           base::stop(msg)
[16:12:17.205]                         }
[16:12:17.205]                       })
[16:12:17.205]                     }
[16:12:17.205]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.205]                     base::options(mc.cores = 1L)
[16:12:17.205]                   }
[16:12:17.205]                   options(future.plan = NULL)
[16:12:17.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.205]                 }
[16:12:17.205]                 ...future.workdir <- getwd()
[16:12:17.205]             }
[16:12:17.205]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.205]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.205]         }
[16:12:17.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.205]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.205]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.205]             base::names(...future.oldOptions))
[16:12:17.205]     }
[16:12:17.205]     if (FALSE) {
[16:12:17.205]     }
[16:12:17.205]     else {
[16:12:17.205]         if (TRUE) {
[16:12:17.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.205]                 open = "w")
[16:12:17.205]         }
[16:12:17.205]         else {
[16:12:17.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.205]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.205]         }
[16:12:17.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.205]             base::sink(type = "output", split = FALSE)
[16:12:17.205]             base::close(...future.stdout)
[16:12:17.205]         }, add = TRUE)
[16:12:17.205]     }
[16:12:17.205]     ...future.frame <- base::sys.nframe()
[16:12:17.205]     ...future.conditions <- base::list()
[16:12:17.205]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.205]     if (FALSE) {
[16:12:17.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.205]     }
[16:12:17.205]     ...future.result <- base::tryCatch({
[16:12:17.205]         base::withCallingHandlers({
[16:12:17.205]             ...future.value <- base::withVisible(base::local({
[16:12:17.205]                 withCallingHandlers({
[16:12:17.205]                   {
[16:12:17.205]                     cat("Processing: ")
[16:12:17.205]                     for (ii in 1:10) {
[16:12:17.205]                       cat(".")
[16:12:17.205]                     }
[16:12:17.205]                     cat(" [100%]\n")
[16:12:17.205]                     4
[16:12:17.205]                   }
[16:12:17.205]                 }, immediateCondition = function(cond) {
[16:12:17.205]                   save_rds <- function (object, pathname, ...) 
[16:12:17.205]                   {
[16:12:17.205]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.205]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.205]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.205]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.205]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.205]                         fi_tmp[["mtime"]])
[16:12:17.205]                     }
[16:12:17.205]                     tryCatch({
[16:12:17.205]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.205]                     }, error = function(ex) {
[16:12:17.205]                       msg <- conditionMessage(ex)
[16:12:17.205]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.205]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.205]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.205]                         fi_tmp[["mtime"]], msg)
[16:12:17.205]                       ex$message <- msg
[16:12:17.205]                       stop(ex)
[16:12:17.205]                     })
[16:12:17.205]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.205]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.205]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.205]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.205]                       fi <- file.info(pathname)
[16:12:17.205]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.205]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.205]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.205]                         fi[["size"]], fi[["mtime"]])
[16:12:17.205]                       stop(msg)
[16:12:17.205]                     }
[16:12:17.205]                     invisible(pathname)
[16:12:17.205]                   }
[16:12:17.205]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.205]                     rootPath = tempdir()) 
[16:12:17.205]                   {
[16:12:17.205]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.205]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.205]                       tmpdir = path, fileext = ".rds")
[16:12:17.205]                     save_rds(obj, file)
[16:12:17.205]                   }
[16:12:17.205]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.205]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.205]                   {
[16:12:17.205]                     inherits <- base::inherits
[16:12:17.205]                     invokeRestart <- base::invokeRestart
[16:12:17.205]                     is.null <- base::is.null
[16:12:17.205]                     muffled <- FALSE
[16:12:17.205]                     if (inherits(cond, "message")) {
[16:12:17.205]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.205]                       if (muffled) 
[16:12:17.205]                         invokeRestart("muffleMessage")
[16:12:17.205]                     }
[16:12:17.205]                     else if (inherits(cond, "warning")) {
[16:12:17.205]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.205]                       if (muffled) 
[16:12:17.205]                         invokeRestart("muffleWarning")
[16:12:17.205]                     }
[16:12:17.205]                     else if (inherits(cond, "condition")) {
[16:12:17.205]                       if (!is.null(pattern)) {
[16:12:17.205]                         computeRestarts <- base::computeRestarts
[16:12:17.205]                         grepl <- base::grepl
[16:12:17.205]                         restarts <- computeRestarts(cond)
[16:12:17.205]                         for (restart in restarts) {
[16:12:17.205]                           name <- restart$name
[16:12:17.205]                           if (is.null(name)) 
[16:12:17.205]                             next
[16:12:17.205]                           if (!grepl(pattern, name)) 
[16:12:17.205]                             next
[16:12:17.205]                           invokeRestart(restart)
[16:12:17.205]                           muffled <- TRUE
[16:12:17.205]                           break
[16:12:17.205]                         }
[16:12:17.205]                       }
[16:12:17.205]                     }
[16:12:17.205]                     invisible(muffled)
[16:12:17.205]                   }
[16:12:17.205]                   muffleCondition(cond)
[16:12:17.205]                 })
[16:12:17.205]             }))
[16:12:17.205]             future::FutureResult(value = ...future.value$value, 
[16:12:17.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.205]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.205]                     ...future.globalenv.names))
[16:12:17.205]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.205]         }, condition = base::local({
[16:12:17.205]             c <- base::c
[16:12:17.205]             inherits <- base::inherits
[16:12:17.205]             invokeRestart <- base::invokeRestart
[16:12:17.205]             length <- base::length
[16:12:17.205]             list <- base::list
[16:12:17.205]             seq.int <- base::seq.int
[16:12:17.205]             signalCondition <- base::signalCondition
[16:12:17.205]             sys.calls <- base::sys.calls
[16:12:17.205]             `[[` <- base::`[[`
[16:12:17.205]             `+` <- base::`+`
[16:12:17.205]             `<<-` <- base::`<<-`
[16:12:17.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.205]                   3L)]
[16:12:17.205]             }
[16:12:17.205]             function(cond) {
[16:12:17.205]                 is_error <- inherits(cond, "error")
[16:12:17.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.205]                   NULL)
[16:12:17.205]                 if (is_error) {
[16:12:17.205]                   sessionInformation <- function() {
[16:12:17.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.205]                       search = base::search(), system = base::Sys.info())
[16:12:17.205]                   }
[16:12:17.205]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.205]                     cond$call), session = sessionInformation(), 
[16:12:17.205]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.205]                   signalCondition(cond)
[16:12:17.205]                 }
[16:12:17.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.205]                 "immediateCondition"))) {
[16:12:17.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.205]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.205]                   if (TRUE && !signal) {
[16:12:17.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.205]                     {
[16:12:17.205]                       inherits <- base::inherits
[16:12:17.205]                       invokeRestart <- base::invokeRestart
[16:12:17.205]                       is.null <- base::is.null
[16:12:17.205]                       muffled <- FALSE
[16:12:17.205]                       if (inherits(cond, "message")) {
[16:12:17.205]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.205]                         if (muffled) 
[16:12:17.205]                           invokeRestart("muffleMessage")
[16:12:17.205]                       }
[16:12:17.205]                       else if (inherits(cond, "warning")) {
[16:12:17.205]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.205]                         if (muffled) 
[16:12:17.205]                           invokeRestart("muffleWarning")
[16:12:17.205]                       }
[16:12:17.205]                       else if (inherits(cond, "condition")) {
[16:12:17.205]                         if (!is.null(pattern)) {
[16:12:17.205]                           computeRestarts <- base::computeRestarts
[16:12:17.205]                           grepl <- base::grepl
[16:12:17.205]                           restarts <- computeRestarts(cond)
[16:12:17.205]                           for (restart in restarts) {
[16:12:17.205]                             name <- restart$name
[16:12:17.205]                             if (is.null(name)) 
[16:12:17.205]                               next
[16:12:17.205]                             if (!grepl(pattern, name)) 
[16:12:17.205]                               next
[16:12:17.205]                             invokeRestart(restart)
[16:12:17.205]                             muffled <- TRUE
[16:12:17.205]                             break
[16:12:17.205]                           }
[16:12:17.205]                         }
[16:12:17.205]                       }
[16:12:17.205]                       invisible(muffled)
[16:12:17.205]                     }
[16:12:17.205]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.205]                   }
[16:12:17.205]                 }
[16:12:17.205]                 else {
[16:12:17.205]                   if (TRUE) {
[16:12:17.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.205]                     {
[16:12:17.205]                       inherits <- base::inherits
[16:12:17.205]                       invokeRestart <- base::invokeRestart
[16:12:17.205]                       is.null <- base::is.null
[16:12:17.205]                       muffled <- FALSE
[16:12:17.205]                       if (inherits(cond, "message")) {
[16:12:17.205]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.205]                         if (muffled) 
[16:12:17.205]                           invokeRestart("muffleMessage")
[16:12:17.205]                       }
[16:12:17.205]                       else if (inherits(cond, "warning")) {
[16:12:17.205]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.205]                         if (muffled) 
[16:12:17.205]                           invokeRestart("muffleWarning")
[16:12:17.205]                       }
[16:12:17.205]                       else if (inherits(cond, "condition")) {
[16:12:17.205]                         if (!is.null(pattern)) {
[16:12:17.205]                           computeRestarts <- base::computeRestarts
[16:12:17.205]                           grepl <- base::grepl
[16:12:17.205]                           restarts <- computeRestarts(cond)
[16:12:17.205]                           for (restart in restarts) {
[16:12:17.205]                             name <- restart$name
[16:12:17.205]                             if (is.null(name)) 
[16:12:17.205]                               next
[16:12:17.205]                             if (!grepl(pattern, name)) 
[16:12:17.205]                               next
[16:12:17.205]                             invokeRestart(restart)
[16:12:17.205]                             muffled <- TRUE
[16:12:17.205]                             break
[16:12:17.205]                           }
[16:12:17.205]                         }
[16:12:17.205]                       }
[16:12:17.205]                       invisible(muffled)
[16:12:17.205]                     }
[16:12:17.205]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.205]                   }
[16:12:17.205]                 }
[16:12:17.205]             }
[16:12:17.205]         }))
[16:12:17.205]     }, error = function(ex) {
[16:12:17.205]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.205]                 ...future.rng), started = ...future.startTime, 
[16:12:17.205]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.205]             version = "1.8"), class = "FutureResult")
[16:12:17.205]     }, finally = {
[16:12:17.205]         if (!identical(...future.workdir, getwd())) 
[16:12:17.205]             setwd(...future.workdir)
[16:12:17.205]         {
[16:12:17.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.205]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.205]             }
[16:12:17.205]             base::options(...future.oldOptions)
[16:12:17.205]             if (.Platform$OS.type == "windows") {
[16:12:17.205]                 old_names <- names(...future.oldEnvVars)
[16:12:17.205]                 envs <- base::Sys.getenv()
[16:12:17.205]                 names <- names(envs)
[16:12:17.205]                 common <- intersect(names, old_names)
[16:12:17.205]                 added <- setdiff(names, old_names)
[16:12:17.205]                 removed <- setdiff(old_names, names)
[16:12:17.205]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.205]                   envs[common]]
[16:12:17.205]                 NAMES <- toupper(changed)
[16:12:17.205]                 args <- list()
[16:12:17.205]                 for (kk in seq_along(NAMES)) {
[16:12:17.205]                   name <- changed[[kk]]
[16:12:17.205]                   NAME <- NAMES[[kk]]
[16:12:17.205]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.205]                     next
[16:12:17.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.205]                 }
[16:12:17.205]                 NAMES <- toupper(added)
[16:12:17.205]                 for (kk in seq_along(NAMES)) {
[16:12:17.205]                   name <- added[[kk]]
[16:12:17.205]                   NAME <- NAMES[[kk]]
[16:12:17.205]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.205]                     next
[16:12:17.205]                   args[[name]] <- ""
[16:12:17.205]                 }
[16:12:17.205]                 NAMES <- toupper(removed)
[16:12:17.205]                 for (kk in seq_along(NAMES)) {
[16:12:17.205]                   name <- removed[[kk]]
[16:12:17.205]                   NAME <- NAMES[[kk]]
[16:12:17.205]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.205]                     next
[16:12:17.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.205]                 }
[16:12:17.205]                 if (length(args) > 0) 
[16:12:17.205]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.205]             }
[16:12:17.205]             else {
[16:12:17.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.205]             }
[16:12:17.205]             {
[16:12:17.205]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.205]                   0L) {
[16:12:17.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.205]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.205]                   base::options(opts)
[16:12:17.205]                 }
[16:12:17.205]                 {
[16:12:17.205]                   {
[16:12:17.205]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.205]                     NULL
[16:12:17.205]                   }
[16:12:17.205]                   options(future.plan = NULL)
[16:12:17.205]                   if (is.na(NA_character_)) 
[16:12:17.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.205]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.205]                     envir = parent.frame()) 
[16:12:17.205]                   {
[16:12:17.205]                     default_workers <- missing(workers)
[16:12:17.205]                     if (is.function(workers)) 
[16:12:17.205]                       workers <- workers()
[16:12:17.205]                     workers <- structure(as.integer(workers), 
[16:12:17.205]                       class = class(workers))
[16:12:17.205]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.205]                       1L)
[16:12:17.205]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.205]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.205]                       if (default_workers) 
[16:12:17.205]                         supportsMulticore(warn = TRUE)
[16:12:17.205]                       return(sequential(..., envir = envir))
[16:12:17.205]                     }
[16:12:17.205]                     oopts <- options(mc.cores = workers)
[16:12:17.205]                     on.exit(options(oopts))
[16:12:17.205]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.205]                       envir = envir)
[16:12:17.205]                     if (!future$lazy) 
[16:12:17.205]                       future <- run(future)
[16:12:17.205]                     invisible(future)
[16:12:17.205]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.205]                 }
[16:12:17.205]             }
[16:12:17.205]         }
[16:12:17.205]     })
[16:12:17.205]     if (TRUE) {
[16:12:17.205]         base::sink(type = "output", split = FALSE)
[16:12:17.205]         if (TRUE) {
[16:12:17.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.205]         }
[16:12:17.205]         else {
[16:12:17.205]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.205]         }
[16:12:17.205]         base::close(...future.stdout)
[16:12:17.205]         ...future.stdout <- NULL
[16:12:17.205]     }
[16:12:17.205]     ...future.result$conditions <- ...future.conditions
[16:12:17.205]     ...future.result$finished <- base::Sys.time()
[16:12:17.205]     ...future.result
[16:12:17.205] }
[16:12:17.207] requestCore(): workers = 2
[16:12:17.209] MulticoreFuture started
[16:12:17.209] - Launch lazy future ... done
[16:12:17.210] run() for ‘MulticoreFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
[16:12:17.210] plan(): Setting new future strategy stack:
Warning in sprintf(...) : restarting interrupted promise evaluation
[16:12:17.211] signalConditions() ...
[16:12:17.211]  - include = ‘immediateCondition’
[16:12:17.210] List of future strategies:
[16:12:17.210] 1. sequential:
[16:12:17.210]    - args: function (..., envir = parent.frame())
[16:12:17.210]    - tweaked: FALSE
[16:12:17.210]    - call: NULL
[16:12:17.211]  - exclude = 
[16:12:17.211]  - resignal = FALSE
[16:12:17.211]  - Number of conditions: 1
[16:12:17.211] plan(): nbrOfWorkers() = 1
[16:12:17.211] signalConditions() ... done
[16:12:17.212] Future state: ‘finished’
[16:12:17.212] signalConditions() ...
[16:12:17.212]  - include = ‘condition’
[16:12:17.212]  - exclude = ‘immediateCondition’
[16:12:17.212]  - resignal = TRUE
[16:12:17.212]  - Number of conditions: 1
[16:12:17.213]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:17.213] signalConditions() ... done
v3: <simpleError> (as expect)
[16:12:17.213] plan(): Setting new future strategy stack:
[16:12:17.213] List of future strategies:
[16:12:17.213] 1. multicore:
[16:12:17.213]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.213]    - tweaked: FALSE
[16:12:17.213]    - call: plan(strategy)
[16:12:17.218] plan(): nbrOfWorkers() = 2
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[16:12:17.220] getGlobalsAndPackages() ...
[16:12:17.220] Searching for globals...
[16:12:17.220] 
[16:12:17.220] Searching for globals ... DONE
[16:12:17.221] - globals: [0] <none>
[16:12:17.221] getGlobalsAndPackages() ... DONE
[16:12:17.221] run() for ‘Future’ ...
[16:12:17.221] - state: ‘created’
[16:12:17.221] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.226] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.226] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.226]   - Field: ‘label’
[16:12:17.226]   - Field: ‘local’
[16:12:17.226]   - Field: ‘owner’
[16:12:17.226]   - Field: ‘envir’
[16:12:17.226]   - Field: ‘workers’
[16:12:17.227]   - Field: ‘packages’
[16:12:17.227]   - Field: ‘gc’
[16:12:17.227]   - Field: ‘job’
[16:12:17.227]   - Field: ‘conditions’
[16:12:17.227]   - Field: ‘expr’
[16:12:17.227]   - Field: ‘uuid’
[16:12:17.227]   - Field: ‘seed’
[16:12:17.227]   - Field: ‘version’
[16:12:17.227]   - Field: ‘result’
[16:12:17.228]   - Field: ‘asynchronous’
[16:12:17.228]   - Field: ‘calls’
[16:12:17.228]   - Field: ‘globals’
[16:12:17.228]   - Field: ‘stdout’
[16:12:17.228]   - Field: ‘earlySignal’
[16:12:17.228]   - Field: ‘lazy’
[16:12:17.228]   - Field: ‘state’
[16:12:17.228] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.228] - Launch lazy future ...
[16:12:17.229] Packages needed by the future expression (n = 0): <none>
[16:12:17.229] Packages needed by future strategies (n = 0): <none>
[16:12:17.229] {
[16:12:17.229]     {
[16:12:17.229]         {
[16:12:17.229]             ...future.startTime <- base::Sys.time()
[16:12:17.229]             {
[16:12:17.229]                 {
[16:12:17.229]                   {
[16:12:17.229]                     {
[16:12:17.229]                       base::local({
[16:12:17.229]                         has_future <- base::requireNamespace("future", 
[16:12:17.229]                           quietly = TRUE)
[16:12:17.229]                         if (has_future) {
[16:12:17.229]                           ns <- base::getNamespace("future")
[16:12:17.229]                           version <- ns[[".package"]][["version"]]
[16:12:17.229]                           if (is.null(version)) 
[16:12:17.229]                             version <- utils::packageVersion("future")
[16:12:17.229]                         }
[16:12:17.229]                         else {
[16:12:17.229]                           version <- NULL
[16:12:17.229]                         }
[16:12:17.229]                         if (!has_future || version < "1.8.0") {
[16:12:17.229]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.229]                             "", base::R.version$version.string), 
[16:12:17.229]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.229]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.229]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.229]                               "release", "version")], collapse = " "), 
[16:12:17.229]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.229]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.229]                             info)
[16:12:17.229]                           info <- base::paste(info, collapse = "; ")
[16:12:17.229]                           if (!has_future) {
[16:12:17.229]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.229]                               info)
[16:12:17.229]                           }
[16:12:17.229]                           else {
[16:12:17.229]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.229]                               info, version)
[16:12:17.229]                           }
[16:12:17.229]                           base::stop(msg)
[16:12:17.229]                         }
[16:12:17.229]                       })
[16:12:17.229]                     }
[16:12:17.229]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.229]                     base::options(mc.cores = 1L)
[16:12:17.229]                   }
[16:12:17.229]                   options(future.plan = NULL)
[16:12:17.229]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.229]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.229]                 }
[16:12:17.229]                 ...future.workdir <- getwd()
[16:12:17.229]             }
[16:12:17.229]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.229]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.229]         }
[16:12:17.229]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.229]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.229]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.229]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.229]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.229]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.229]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.229]             base::names(...future.oldOptions))
[16:12:17.229]     }
[16:12:17.229]     if (FALSE) {
[16:12:17.229]     }
[16:12:17.229]     else {
[16:12:17.229]         if (TRUE) {
[16:12:17.229]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.229]                 open = "w")
[16:12:17.229]         }
[16:12:17.229]         else {
[16:12:17.229]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.229]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.229]         }
[16:12:17.229]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.229]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.229]             base::sink(type = "output", split = FALSE)
[16:12:17.229]             base::close(...future.stdout)
[16:12:17.229]         }, add = TRUE)
[16:12:17.229]     }
[16:12:17.229]     ...future.frame <- base::sys.nframe()
[16:12:17.229]     ...future.conditions <- base::list()
[16:12:17.229]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.229]     if (FALSE) {
[16:12:17.229]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.229]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.229]     }
[16:12:17.229]     ...future.result <- base::tryCatch({
[16:12:17.229]         base::withCallingHandlers({
[16:12:17.229]             ...future.value <- base::withVisible(base::local({
[16:12:17.229]                 withCallingHandlers({
[16:12:17.229]                   1
[16:12:17.229]                 }, immediateCondition = function(cond) {
[16:12:17.229]                   save_rds <- function (object, pathname, ...) 
[16:12:17.229]                   {
[16:12:17.229]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.229]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.229]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.229]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.229]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.229]                         fi_tmp[["mtime"]])
[16:12:17.229]                     }
[16:12:17.229]                     tryCatch({
[16:12:17.229]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.229]                     }, error = function(ex) {
[16:12:17.229]                       msg <- conditionMessage(ex)
[16:12:17.229]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.229]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.229]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.229]                         fi_tmp[["mtime"]], msg)
[16:12:17.229]                       ex$message <- msg
[16:12:17.229]                       stop(ex)
[16:12:17.229]                     })
[16:12:17.229]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.229]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.229]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.229]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.229]                       fi <- file.info(pathname)
[16:12:17.229]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.229]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.229]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.229]                         fi[["size"]], fi[["mtime"]])
[16:12:17.229]                       stop(msg)
[16:12:17.229]                     }
[16:12:17.229]                     invisible(pathname)
[16:12:17.229]                   }
[16:12:17.229]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.229]                     rootPath = tempdir()) 
[16:12:17.229]                   {
[16:12:17.229]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.229]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.229]                       tmpdir = path, fileext = ".rds")
[16:12:17.229]                     save_rds(obj, file)
[16:12:17.229]                   }
[16:12:17.229]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.229]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.229]                   {
[16:12:17.229]                     inherits <- base::inherits
[16:12:17.229]                     invokeRestart <- base::invokeRestart
[16:12:17.229]                     is.null <- base::is.null
[16:12:17.229]                     muffled <- FALSE
[16:12:17.229]                     if (inherits(cond, "message")) {
[16:12:17.229]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.229]                       if (muffled) 
[16:12:17.229]                         invokeRestart("muffleMessage")
[16:12:17.229]                     }
[16:12:17.229]                     else if (inherits(cond, "warning")) {
[16:12:17.229]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.229]                       if (muffled) 
[16:12:17.229]                         invokeRestart("muffleWarning")
[16:12:17.229]                     }
[16:12:17.229]                     else if (inherits(cond, "condition")) {
[16:12:17.229]                       if (!is.null(pattern)) {
[16:12:17.229]                         computeRestarts <- base::computeRestarts
[16:12:17.229]                         grepl <- base::grepl
[16:12:17.229]                         restarts <- computeRestarts(cond)
[16:12:17.229]                         for (restart in restarts) {
[16:12:17.229]                           name <- restart$name
[16:12:17.229]                           if (is.null(name)) 
[16:12:17.229]                             next
[16:12:17.229]                           if (!grepl(pattern, name)) 
[16:12:17.229]                             next
[16:12:17.229]                           invokeRestart(restart)
[16:12:17.229]                           muffled <- TRUE
[16:12:17.229]                           break
[16:12:17.229]                         }
[16:12:17.229]                       }
[16:12:17.229]                     }
[16:12:17.229]                     invisible(muffled)
[16:12:17.229]                   }
[16:12:17.229]                   muffleCondition(cond)
[16:12:17.229]                 })
[16:12:17.229]             }))
[16:12:17.229]             future::FutureResult(value = ...future.value$value, 
[16:12:17.229]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.229]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.229]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.229]                     ...future.globalenv.names))
[16:12:17.229]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.229]         }, condition = base::local({
[16:12:17.229]             c <- base::c
[16:12:17.229]             inherits <- base::inherits
[16:12:17.229]             invokeRestart <- base::invokeRestart
[16:12:17.229]             length <- base::length
[16:12:17.229]             list <- base::list
[16:12:17.229]             seq.int <- base::seq.int
[16:12:17.229]             signalCondition <- base::signalCondition
[16:12:17.229]             sys.calls <- base::sys.calls
[16:12:17.229]             `[[` <- base::`[[`
[16:12:17.229]             `+` <- base::`+`
[16:12:17.229]             `<<-` <- base::`<<-`
[16:12:17.229]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.229]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.229]                   3L)]
[16:12:17.229]             }
[16:12:17.229]             function(cond) {
[16:12:17.229]                 is_error <- inherits(cond, "error")
[16:12:17.229]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.229]                   NULL)
[16:12:17.229]                 if (is_error) {
[16:12:17.229]                   sessionInformation <- function() {
[16:12:17.229]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.229]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.229]                       search = base::search(), system = base::Sys.info())
[16:12:17.229]                   }
[16:12:17.229]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.229]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.229]                     cond$call), session = sessionInformation(), 
[16:12:17.229]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.229]                   signalCondition(cond)
[16:12:17.229]                 }
[16:12:17.229]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.229]                 "immediateCondition"))) {
[16:12:17.229]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.229]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.229]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.229]                   if (TRUE && !signal) {
[16:12:17.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.229]                     {
[16:12:17.229]                       inherits <- base::inherits
[16:12:17.229]                       invokeRestart <- base::invokeRestart
[16:12:17.229]                       is.null <- base::is.null
[16:12:17.229]                       muffled <- FALSE
[16:12:17.229]                       if (inherits(cond, "message")) {
[16:12:17.229]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.229]                         if (muffled) 
[16:12:17.229]                           invokeRestart("muffleMessage")
[16:12:17.229]                       }
[16:12:17.229]                       else if (inherits(cond, "warning")) {
[16:12:17.229]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.229]                         if (muffled) 
[16:12:17.229]                           invokeRestart("muffleWarning")
[16:12:17.229]                       }
[16:12:17.229]                       else if (inherits(cond, "condition")) {
[16:12:17.229]                         if (!is.null(pattern)) {
[16:12:17.229]                           computeRestarts <- base::computeRestarts
[16:12:17.229]                           grepl <- base::grepl
[16:12:17.229]                           restarts <- computeRestarts(cond)
[16:12:17.229]                           for (restart in restarts) {
[16:12:17.229]                             name <- restart$name
[16:12:17.229]                             if (is.null(name)) 
[16:12:17.229]                               next
[16:12:17.229]                             if (!grepl(pattern, name)) 
[16:12:17.229]                               next
[16:12:17.229]                             invokeRestart(restart)
[16:12:17.229]                             muffled <- TRUE
[16:12:17.229]                             break
[16:12:17.229]                           }
[16:12:17.229]                         }
[16:12:17.229]                       }
[16:12:17.229]                       invisible(muffled)
[16:12:17.229]                     }
[16:12:17.229]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.229]                   }
[16:12:17.229]                 }
[16:12:17.229]                 else {
[16:12:17.229]                   if (TRUE) {
[16:12:17.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.229]                     {
[16:12:17.229]                       inherits <- base::inherits
[16:12:17.229]                       invokeRestart <- base::invokeRestart
[16:12:17.229]                       is.null <- base::is.null
[16:12:17.229]                       muffled <- FALSE
[16:12:17.229]                       if (inherits(cond, "message")) {
[16:12:17.229]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.229]                         if (muffled) 
[16:12:17.229]                           invokeRestart("muffleMessage")
[16:12:17.229]                       }
[16:12:17.229]                       else if (inherits(cond, "warning")) {
[16:12:17.229]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.229]                         if (muffled) 
[16:12:17.229]                           invokeRestart("muffleWarning")
[16:12:17.229]                       }
[16:12:17.229]                       else if (inherits(cond, "condition")) {
[16:12:17.229]                         if (!is.null(pattern)) {
[16:12:17.229]                           computeRestarts <- base::computeRestarts
[16:12:17.229]                           grepl <- base::grepl
[16:12:17.229]                           restarts <- computeRestarts(cond)
[16:12:17.229]                           for (restart in restarts) {
[16:12:17.229]                             name <- restart$name
[16:12:17.229]                             if (is.null(name)) 
[16:12:17.229]                               next
[16:12:17.229]                             if (!grepl(pattern, name)) 
[16:12:17.229]                               next
[16:12:17.229]                             invokeRestart(restart)
[16:12:17.229]                             muffled <- TRUE
[16:12:17.229]                             break
[16:12:17.229]                           }
[16:12:17.229]                         }
[16:12:17.229]                       }
[16:12:17.229]                       invisible(muffled)
[16:12:17.229]                     }
[16:12:17.229]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.229]                   }
[16:12:17.229]                 }
[16:12:17.229]             }
[16:12:17.229]         }))
[16:12:17.229]     }, error = function(ex) {
[16:12:17.229]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.229]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.229]                 ...future.rng), started = ...future.startTime, 
[16:12:17.229]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.229]             version = "1.8"), class = "FutureResult")
[16:12:17.229]     }, finally = {
[16:12:17.229]         if (!identical(...future.workdir, getwd())) 
[16:12:17.229]             setwd(...future.workdir)
[16:12:17.229]         {
[16:12:17.229]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.229]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.229]             }
[16:12:17.229]             base::options(...future.oldOptions)
[16:12:17.229]             if (.Platform$OS.type == "windows") {
[16:12:17.229]                 old_names <- names(...future.oldEnvVars)
[16:12:17.229]                 envs <- base::Sys.getenv()
[16:12:17.229]                 names <- names(envs)
[16:12:17.229]                 common <- intersect(names, old_names)
[16:12:17.229]                 added <- setdiff(names, old_names)
[16:12:17.229]                 removed <- setdiff(old_names, names)
[16:12:17.229]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.229]                   envs[common]]
[16:12:17.229]                 NAMES <- toupper(changed)
[16:12:17.229]                 args <- list()
[16:12:17.229]                 for (kk in seq_along(NAMES)) {
[16:12:17.229]                   name <- changed[[kk]]
[16:12:17.229]                   NAME <- NAMES[[kk]]
[16:12:17.229]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.229]                     next
[16:12:17.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.229]                 }
[16:12:17.229]                 NAMES <- toupper(added)
[16:12:17.229]                 for (kk in seq_along(NAMES)) {
[16:12:17.229]                   name <- added[[kk]]
[16:12:17.229]                   NAME <- NAMES[[kk]]
[16:12:17.229]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.229]                     next
[16:12:17.229]                   args[[name]] <- ""
[16:12:17.229]                 }
[16:12:17.229]                 NAMES <- toupper(removed)
[16:12:17.229]                 for (kk in seq_along(NAMES)) {
[16:12:17.229]                   name <- removed[[kk]]
[16:12:17.229]                   NAME <- NAMES[[kk]]
[16:12:17.229]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.229]                     next
[16:12:17.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.229]                 }
[16:12:17.229]                 if (length(args) > 0) 
[16:12:17.229]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.229]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.229]             }
[16:12:17.229]             else {
[16:12:17.229]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.229]             }
[16:12:17.229]             {
[16:12:17.229]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.229]                   0L) {
[16:12:17.229]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.229]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.229]                   base::options(opts)
[16:12:17.229]                 }
[16:12:17.229]                 {
[16:12:17.229]                   {
[16:12:17.229]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.229]                     NULL
[16:12:17.229]                   }
[16:12:17.229]                   options(future.plan = NULL)
[16:12:17.229]                   if (is.na(NA_character_)) 
[16:12:17.229]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.229]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.229]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.229]                     envir = parent.frame()) 
[16:12:17.229]                   {
[16:12:17.229]                     default_workers <- missing(workers)
[16:12:17.229]                     if (is.function(workers)) 
[16:12:17.229]                       workers <- workers()
[16:12:17.229]                     workers <- structure(as.integer(workers), 
[16:12:17.229]                       class = class(workers))
[16:12:17.229]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.229]                       1L)
[16:12:17.229]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.229]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.229]                       if (default_workers) 
[16:12:17.229]                         supportsMulticore(warn = TRUE)
[16:12:17.229]                       return(sequential(..., envir = envir))
[16:12:17.229]                     }
[16:12:17.229]                     oopts <- options(mc.cores = workers)
[16:12:17.229]                     on.exit(options(oopts))
[16:12:17.229]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.229]                       envir = envir)
[16:12:17.229]                     if (!future$lazy) 
[16:12:17.229]                       future <- run(future)
[16:12:17.229]                     invisible(future)
[16:12:17.229]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.229]                 }
[16:12:17.229]             }
[16:12:17.229]         }
[16:12:17.229]     })
[16:12:17.229]     if (TRUE) {
[16:12:17.229]         base::sink(type = "output", split = FALSE)
[16:12:17.229]         if (TRUE) {
[16:12:17.229]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.229]         }
[16:12:17.229]         else {
[16:12:17.229]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.229]         }
[16:12:17.229]         base::close(...future.stdout)
[16:12:17.229]         ...future.stdout <- NULL
[16:12:17.229]     }
[16:12:17.229]     ...future.result$conditions <- ...future.conditions
[16:12:17.229]     ...future.result$finished <- base::Sys.time()
[16:12:17.229]     ...future.result
[16:12:17.229] }
[16:12:17.232] requestCore(): workers = 2
[16:12:17.234] MulticoreFuture started
[16:12:17.234] - Launch lazy future ... done
[16:12:17.235] run() for ‘MulticoreFuture’ ... done
[16:12:17.235] plan(): Setting new future strategy stack:
[16:12:17.235] List of future strategies:
[16:12:17.235] 1. sequential:
[16:12:17.235]    - args: function (..., envir = parent.frame())
[16:12:17.235]    - tweaked: FALSE
[16:12:17.235]    - call: NULL
[16:12:17.236] plan(): nbrOfWorkers() = 1
[16:12:17.238] plan(): Setting new future strategy stack:
[16:12:17.238] List of future strategies:
[16:12:17.238] 1. multicore:
[16:12:17.238]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.238]    - tweaked: FALSE
[16:12:17.238]    - call: plan(strategy)
[16:12:17.248] plan(): nbrOfWorkers() = 2
c = 1
[16:12:17.249] getGlobalsAndPackages() ...
[16:12:17.249] Searching for globals...
[16:12:17.250] 
[16:12:17.250] Searching for globals ... DONE
[16:12:17.250] - globals: [0] <none>
[16:12:17.250] getGlobalsAndPackages() ... DONE
[16:12:17.251] run() for ‘Future’ ...
[16:12:17.251] - state: ‘created’
[16:12:17.251] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.258] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.258] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.258]   - Field: ‘label’
[16:12:17.258]   - Field: ‘local’
[16:12:17.258]   - Field: ‘owner’
[16:12:17.259]   - Field: ‘envir’
[16:12:17.259]   - Field: ‘workers’
[16:12:17.259]   - Field: ‘packages’
[16:12:17.259]   - Field: ‘gc’
[16:12:17.259]   - Field: ‘job’
[16:12:17.259]   - Field: ‘conditions’
[16:12:17.259]   - Field: ‘expr’
[16:12:17.259]   - Field: ‘uuid’
[16:12:17.260]   - Field: ‘seed’
[16:12:17.260]   - Field: ‘version’
[16:12:17.260]   - Field: ‘result’
[16:12:17.260]   - Field: ‘asynchronous’
[16:12:17.260]   - Field: ‘calls’
[16:12:17.260]   - Field: ‘globals’
[16:12:17.260]   - Field: ‘stdout’
[16:12:17.261]   - Field: ‘earlySignal’
[16:12:17.261]   - Field: ‘lazy’
[16:12:17.261]   - Field: ‘state’
[16:12:17.261] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.261] - Launch lazy future ...
[16:12:17.261] Packages needed by the future expression (n = 0): <none>
[16:12:17.261] Packages needed by future strategies (n = 0): <none>
[16:12:17.262] {
[16:12:17.262]     {
[16:12:17.262]         {
[16:12:17.262]             ...future.startTime <- base::Sys.time()
[16:12:17.262]             {
[16:12:17.262]                 {
[16:12:17.262]                   {
[16:12:17.262]                     {
[16:12:17.262]                       base::local({
[16:12:17.262]                         has_future <- base::requireNamespace("future", 
[16:12:17.262]                           quietly = TRUE)
[16:12:17.262]                         if (has_future) {
[16:12:17.262]                           ns <- base::getNamespace("future")
[16:12:17.262]                           version <- ns[[".package"]][["version"]]
[16:12:17.262]                           if (is.null(version)) 
[16:12:17.262]                             version <- utils::packageVersion("future")
[16:12:17.262]                         }
[16:12:17.262]                         else {
[16:12:17.262]                           version <- NULL
[16:12:17.262]                         }
[16:12:17.262]                         if (!has_future || version < "1.8.0") {
[16:12:17.262]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.262]                             "", base::R.version$version.string), 
[16:12:17.262]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.262]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.262]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.262]                               "release", "version")], collapse = " "), 
[16:12:17.262]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.262]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.262]                             info)
[16:12:17.262]                           info <- base::paste(info, collapse = "; ")
[16:12:17.262]                           if (!has_future) {
[16:12:17.262]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.262]                               info)
[16:12:17.262]                           }
[16:12:17.262]                           else {
[16:12:17.262]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.262]                               info, version)
[16:12:17.262]                           }
[16:12:17.262]                           base::stop(msg)
[16:12:17.262]                         }
[16:12:17.262]                       })
[16:12:17.262]                     }
[16:12:17.262]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.262]                     base::options(mc.cores = 1L)
[16:12:17.262]                   }
[16:12:17.262]                   options(future.plan = NULL)
[16:12:17.262]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.262]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.262]                 }
[16:12:17.262]                 ...future.workdir <- getwd()
[16:12:17.262]             }
[16:12:17.262]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.262]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.262]         }
[16:12:17.262]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.262]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.262]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.262]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.262]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.262]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.262]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.262]             base::names(...future.oldOptions))
[16:12:17.262]     }
[16:12:17.262]     if (FALSE) {
[16:12:17.262]     }
[16:12:17.262]     else {
[16:12:17.262]         if (TRUE) {
[16:12:17.262]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.262]                 open = "w")
[16:12:17.262]         }
[16:12:17.262]         else {
[16:12:17.262]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.262]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.262]         }
[16:12:17.262]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.262]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.262]             base::sink(type = "output", split = FALSE)
[16:12:17.262]             base::close(...future.stdout)
[16:12:17.262]         }, add = TRUE)
[16:12:17.262]     }
[16:12:17.262]     ...future.frame <- base::sys.nframe()
[16:12:17.262]     ...future.conditions <- base::list()
[16:12:17.262]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.262]     if (FALSE) {
[16:12:17.262]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.262]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.262]     }
[16:12:17.262]     ...future.result <- base::tryCatch({
[16:12:17.262]         base::withCallingHandlers({
[16:12:17.262]             ...future.value <- base::withVisible(base::local({
[16:12:17.262]                 withCallingHandlers({
[16:12:17.262]                   1
[16:12:17.262]                 }, immediateCondition = function(cond) {
[16:12:17.262]                   save_rds <- function (object, pathname, ...) 
[16:12:17.262]                   {
[16:12:17.262]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.262]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.262]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.262]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.262]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.262]                         fi_tmp[["mtime"]])
[16:12:17.262]                     }
[16:12:17.262]                     tryCatch({
[16:12:17.262]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.262]                     }, error = function(ex) {
[16:12:17.262]                       msg <- conditionMessage(ex)
[16:12:17.262]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.262]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.262]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.262]                         fi_tmp[["mtime"]], msg)
[16:12:17.262]                       ex$message <- msg
[16:12:17.262]                       stop(ex)
[16:12:17.262]                     })
[16:12:17.262]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.262]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.262]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.262]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.262]                       fi <- file.info(pathname)
[16:12:17.262]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.262]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.262]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.262]                         fi[["size"]], fi[["mtime"]])
[16:12:17.262]                       stop(msg)
[16:12:17.262]                     }
[16:12:17.262]                     invisible(pathname)
[16:12:17.262]                   }
[16:12:17.262]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.262]                     rootPath = tempdir()) 
[16:12:17.262]                   {
[16:12:17.262]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.262]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.262]                       tmpdir = path, fileext = ".rds")
[16:12:17.262]                     save_rds(obj, file)
[16:12:17.262]                   }
[16:12:17.262]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.262]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.262]                   {
[16:12:17.262]                     inherits <- base::inherits
[16:12:17.262]                     invokeRestart <- base::invokeRestart
[16:12:17.262]                     is.null <- base::is.null
[16:12:17.262]                     muffled <- FALSE
[16:12:17.262]                     if (inherits(cond, "message")) {
[16:12:17.262]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.262]                       if (muffled) 
[16:12:17.262]                         invokeRestart("muffleMessage")
[16:12:17.262]                     }
[16:12:17.262]                     else if (inherits(cond, "warning")) {
[16:12:17.262]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.262]                       if (muffled) 
[16:12:17.262]                         invokeRestart("muffleWarning")
[16:12:17.262]                     }
[16:12:17.262]                     else if (inherits(cond, "condition")) {
[16:12:17.262]                       if (!is.null(pattern)) {
[16:12:17.262]                         computeRestarts <- base::computeRestarts
[16:12:17.262]                         grepl <- base::grepl
[16:12:17.262]                         restarts <- computeRestarts(cond)
[16:12:17.262]                         for (restart in restarts) {
[16:12:17.262]                           name <- restart$name
[16:12:17.262]                           if (is.null(name)) 
[16:12:17.262]                             next
[16:12:17.262]                           if (!grepl(pattern, name)) 
[16:12:17.262]                             next
[16:12:17.262]                           invokeRestart(restart)
[16:12:17.262]                           muffled <- TRUE
[16:12:17.262]                           break
[16:12:17.262]                         }
[16:12:17.262]                       }
[16:12:17.262]                     }
[16:12:17.262]                     invisible(muffled)
[16:12:17.262]                   }
[16:12:17.262]                   muffleCondition(cond)
[16:12:17.262]                 })
[16:12:17.262]             }))
[16:12:17.262]             future::FutureResult(value = ...future.value$value, 
[16:12:17.262]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.262]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.262]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.262]                     ...future.globalenv.names))
[16:12:17.262]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.262]         }, condition = base::local({
[16:12:17.262]             c <- base::c
[16:12:17.262]             inherits <- base::inherits
[16:12:17.262]             invokeRestart <- base::invokeRestart
[16:12:17.262]             length <- base::length
[16:12:17.262]             list <- base::list
[16:12:17.262]             seq.int <- base::seq.int
[16:12:17.262]             signalCondition <- base::signalCondition
[16:12:17.262]             sys.calls <- base::sys.calls
[16:12:17.262]             `[[` <- base::`[[`
[16:12:17.262]             `+` <- base::`+`
[16:12:17.262]             `<<-` <- base::`<<-`
[16:12:17.262]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.262]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.262]                   3L)]
[16:12:17.262]             }
[16:12:17.262]             function(cond) {
[16:12:17.262]                 is_error <- inherits(cond, "error")
[16:12:17.262]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.262]                   NULL)
[16:12:17.262]                 if (is_error) {
[16:12:17.262]                   sessionInformation <- function() {
[16:12:17.262]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.262]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.262]                       search = base::search(), system = base::Sys.info())
[16:12:17.262]                   }
[16:12:17.262]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.262]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.262]                     cond$call), session = sessionInformation(), 
[16:12:17.262]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.262]                   signalCondition(cond)
[16:12:17.262]                 }
[16:12:17.262]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.262]                 "immediateCondition"))) {
[16:12:17.262]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.262]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.262]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.262]                   if (TRUE && !signal) {
[16:12:17.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.262]                     {
[16:12:17.262]                       inherits <- base::inherits
[16:12:17.262]                       invokeRestart <- base::invokeRestart
[16:12:17.262]                       is.null <- base::is.null
[16:12:17.262]                       muffled <- FALSE
[16:12:17.262]                       if (inherits(cond, "message")) {
[16:12:17.262]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.262]                         if (muffled) 
[16:12:17.262]                           invokeRestart("muffleMessage")
[16:12:17.262]                       }
[16:12:17.262]                       else if (inherits(cond, "warning")) {
[16:12:17.262]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.262]                         if (muffled) 
[16:12:17.262]                           invokeRestart("muffleWarning")
[16:12:17.262]                       }
[16:12:17.262]                       else if (inherits(cond, "condition")) {
[16:12:17.262]                         if (!is.null(pattern)) {
[16:12:17.262]                           computeRestarts <- base::computeRestarts
[16:12:17.262]                           grepl <- base::grepl
[16:12:17.262]                           restarts <- computeRestarts(cond)
[16:12:17.262]                           for (restart in restarts) {
[16:12:17.262]                             name <- restart$name
[16:12:17.262]                             if (is.null(name)) 
[16:12:17.262]                               next
[16:12:17.262]                             if (!grepl(pattern, name)) 
[16:12:17.262]                               next
[16:12:17.262]                             invokeRestart(restart)
[16:12:17.262]                             muffled <- TRUE
[16:12:17.262]                             break
[16:12:17.262]                           }
[16:12:17.262]                         }
[16:12:17.262]                       }
[16:12:17.262]                       invisible(muffled)
[16:12:17.262]                     }
[16:12:17.262]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.262]                   }
[16:12:17.262]                 }
[16:12:17.262]                 else {
[16:12:17.262]                   if (TRUE) {
[16:12:17.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.262]                     {
[16:12:17.262]                       inherits <- base::inherits
[16:12:17.262]                       invokeRestart <- base::invokeRestart
[16:12:17.262]                       is.null <- base::is.null
[16:12:17.262]                       muffled <- FALSE
[16:12:17.262]                       if (inherits(cond, "message")) {
[16:12:17.262]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.262]                         if (muffled) 
[16:12:17.262]                           invokeRestart("muffleMessage")
[16:12:17.262]                       }
[16:12:17.262]                       else if (inherits(cond, "warning")) {
[16:12:17.262]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.262]                         if (muffled) 
[16:12:17.262]                           invokeRestart("muffleWarning")
[16:12:17.262]                       }
[16:12:17.262]                       else if (inherits(cond, "condition")) {
[16:12:17.262]                         if (!is.null(pattern)) {
[16:12:17.262]                           computeRestarts <- base::computeRestarts
[16:12:17.262]                           grepl <- base::grepl
[16:12:17.262]                           restarts <- computeRestarts(cond)
[16:12:17.262]                           for (restart in restarts) {
[16:12:17.262]                             name <- restart$name
[16:12:17.262]                             if (is.null(name)) 
[16:12:17.262]                               next
[16:12:17.262]                             if (!grepl(pattern, name)) 
[16:12:17.262]                               next
[16:12:17.262]                             invokeRestart(restart)
[16:12:17.262]                             muffled <- TRUE
[16:12:17.262]                             break
[16:12:17.262]                           }
[16:12:17.262]                         }
[16:12:17.262]                       }
[16:12:17.262]                       invisible(muffled)
[16:12:17.262]                     }
[16:12:17.262]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.262]                   }
[16:12:17.262]                 }
[16:12:17.262]             }
[16:12:17.262]         }))
[16:12:17.262]     }, error = function(ex) {
[16:12:17.262]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.262]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.262]                 ...future.rng), started = ...future.startTime, 
[16:12:17.262]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.262]             version = "1.8"), class = "FutureResult")
[16:12:17.262]     }, finally = {
[16:12:17.262]         if (!identical(...future.workdir, getwd())) 
[16:12:17.262]             setwd(...future.workdir)
[16:12:17.262]         {
[16:12:17.262]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.262]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.262]             }
[16:12:17.262]             base::options(...future.oldOptions)
[16:12:17.262]             if (.Platform$OS.type == "windows") {
[16:12:17.262]                 old_names <- names(...future.oldEnvVars)
[16:12:17.262]                 envs <- base::Sys.getenv()
[16:12:17.262]                 names <- names(envs)
[16:12:17.262]                 common <- intersect(names, old_names)
[16:12:17.262]                 added <- setdiff(names, old_names)
[16:12:17.262]                 removed <- setdiff(old_names, names)
[16:12:17.262]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.262]                   envs[common]]
[16:12:17.262]                 NAMES <- toupper(changed)
[16:12:17.262]                 args <- list()
[16:12:17.262]                 for (kk in seq_along(NAMES)) {
[16:12:17.262]                   name <- changed[[kk]]
[16:12:17.262]                   NAME <- NAMES[[kk]]
[16:12:17.262]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.262]                     next
[16:12:17.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.262]                 }
[16:12:17.262]                 NAMES <- toupper(added)
[16:12:17.262]                 for (kk in seq_along(NAMES)) {
[16:12:17.262]                   name <- added[[kk]]
[16:12:17.262]                   NAME <- NAMES[[kk]]
[16:12:17.262]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.262]                     next
[16:12:17.262]                   args[[name]] <- ""
[16:12:17.262]                 }
[16:12:17.262]                 NAMES <- toupper(removed)
[16:12:17.262]                 for (kk in seq_along(NAMES)) {
[16:12:17.262]                   name <- removed[[kk]]
[16:12:17.262]                   NAME <- NAMES[[kk]]
[16:12:17.262]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.262]                     next
[16:12:17.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.262]                 }
[16:12:17.262]                 if (length(args) > 0) 
[16:12:17.262]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.262]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.262]             }
[16:12:17.262]             else {
[16:12:17.262]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.262]             }
[16:12:17.262]             {
[16:12:17.262]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.262]                   0L) {
[16:12:17.262]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.262]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.262]                   base::options(opts)
[16:12:17.262]                 }
[16:12:17.262]                 {
[16:12:17.262]                   {
[16:12:17.262]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.262]                     NULL
[16:12:17.262]                   }
[16:12:17.262]                   options(future.plan = NULL)
[16:12:17.262]                   if (is.na(NA_character_)) 
[16:12:17.262]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.262]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.262]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.262]                     envir = parent.frame()) 
[16:12:17.262]                   {
[16:12:17.262]                     default_workers <- missing(workers)
[16:12:17.262]                     if (is.function(workers)) 
[16:12:17.262]                       workers <- workers()
[16:12:17.262]                     workers <- structure(as.integer(workers), 
[16:12:17.262]                       class = class(workers))
[16:12:17.262]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.262]                       1L)
[16:12:17.262]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.262]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.262]                       if (default_workers) 
[16:12:17.262]                         supportsMulticore(warn = TRUE)
[16:12:17.262]                       return(sequential(..., envir = envir))
[16:12:17.262]                     }
[16:12:17.262]                     oopts <- options(mc.cores = workers)
[16:12:17.262]                     on.exit(options(oopts))
[16:12:17.262]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.262]                       envir = envir)
[16:12:17.262]                     if (!future$lazy) 
[16:12:17.262]                       future <- run(future)
[16:12:17.262]                     invisible(future)
[16:12:17.262]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.262]                 }
[16:12:17.262]             }
[16:12:17.262]         }
[16:12:17.262]     })
[16:12:17.262]     if (TRUE) {
[16:12:17.262]         base::sink(type = "output", split = FALSE)
[16:12:17.262]         if (TRUE) {
[16:12:17.262]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.262]         }
[16:12:17.262]         else {
[16:12:17.262]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.262]         }
[16:12:17.262]         base::close(...future.stdout)
[16:12:17.262]         ...future.stdout <- NULL
[16:12:17.262]     }
[16:12:17.262]     ...future.result$conditions <- ...future.conditions
[16:12:17.262]     ...future.result$finished <- base::Sys.time()
[16:12:17.262]     ...future.result
[16:12:17.262] }
[16:12:17.265] requestCore(): workers = 2
[16:12:17.266] MulticoreFuture started
[16:12:17.267] - Launch lazy future ... done
[16:12:17.267] run() for ‘MulticoreFuture’ ... done
[16:12:17.268] plan(): Setting new future strategy stack:
[16:12:17.268] List of future strategies:
[16:12:17.268] 1. sequential:
[16:12:17.268]    - args: function (..., envir = parent.frame())
[16:12:17.268]    - tweaked: FALSE
[16:12:17.268]    - call: NULL
[16:12:17.269] plan(): nbrOfWorkers() = 1
[16:12:17.271] plan(): Setting new future strategy stack:
[16:12:17.271] List of future strategies:
[16:12:17.271] 1. multicore:
[16:12:17.271]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.271]    - tweaked: FALSE
[16:12:17.271]    - call: plan(strategy)
[16:12:17.276] plan(): nbrOfWorkers() = 2
d = 1
** Nested future assignments
[16:12:17.277] getGlobalsAndPackages() ...
[16:12:17.277] Searching for globals...
[16:12:17.282] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[16:12:17.283] Searching for globals ... DONE
[16:12:17.283] Resolving globals: FALSE
[16:12:17.283] 
[16:12:17.283] - packages: [1] ‘future’
[16:12:17.284] getGlobalsAndPackages() ... DONE
[16:12:17.284] run() for ‘Future’ ...
[16:12:17.284] - state: ‘created’
[16:12:17.284] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.288] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.288] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.288]   - Field: ‘label’
[16:12:17.289]   - Field: ‘local’
[16:12:17.289]   - Field: ‘owner’
[16:12:17.289]   - Field: ‘envir’
[16:12:17.289]   - Field: ‘workers’
[16:12:17.289]   - Field: ‘packages’
[16:12:17.289]   - Field: ‘gc’
[16:12:17.289]   - Field: ‘job’
[16:12:17.289]   - Field: ‘conditions’
[16:12:17.290]   - Field: ‘expr’
[16:12:17.290]   - Field: ‘uuid’
[16:12:17.290]   - Field: ‘seed’
[16:12:17.290]   - Field: ‘version’
[16:12:17.290]   - Field: ‘result’
[16:12:17.290]   - Field: ‘asynchronous’
[16:12:17.290]   - Field: ‘calls’
[16:12:17.290]   - Field: ‘globals’
[16:12:17.290]   - Field: ‘stdout’
[16:12:17.291]   - Field: ‘earlySignal’
[16:12:17.291]   - Field: ‘lazy’
[16:12:17.291]   - Field: ‘state’
[16:12:17.291] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.291] - Launch lazy future ...
[16:12:17.291] Packages needed by the future expression (n = 1): ‘future’
[16:12:17.291] Packages needed by future strategies (n = 0): <none>
[16:12:17.292] {
[16:12:17.292]     {
[16:12:17.292]         {
[16:12:17.292]             ...future.startTime <- base::Sys.time()
[16:12:17.292]             {
[16:12:17.292]                 {
[16:12:17.292]                   {
[16:12:17.292]                     {
[16:12:17.292]                       {
[16:12:17.292]                         base::local({
[16:12:17.292]                           has_future <- base::requireNamespace("future", 
[16:12:17.292]                             quietly = TRUE)
[16:12:17.292]                           if (has_future) {
[16:12:17.292]                             ns <- base::getNamespace("future")
[16:12:17.292]                             version <- ns[[".package"]][["version"]]
[16:12:17.292]                             if (is.null(version)) 
[16:12:17.292]                               version <- utils::packageVersion("future")
[16:12:17.292]                           }
[16:12:17.292]                           else {
[16:12:17.292]                             version <- NULL
[16:12:17.292]                           }
[16:12:17.292]                           if (!has_future || version < "1.8.0") {
[16:12:17.292]                             info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.292]                               "", base::R.version$version.string), 
[16:12:17.292]                               platform = base::sprintf("%s (%s-bit)", 
[16:12:17.292]                                 base::R.version$platform, 8 * 
[16:12:17.292]                                   base::.Machine$sizeof.pointer), 
[16:12:17.292]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.292]                                 "release", "version")], collapse = " "), 
[16:12:17.292]                               hostname = base::Sys.info()[["nodename"]])
[16:12:17.292]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.292]                               info)
[16:12:17.292]                             info <- base::paste(info, collapse = "; ")
[16:12:17.292]                             if (!has_future) {
[16:12:17.292]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.292]                                 info)
[16:12:17.292]                             }
[16:12:17.292]                             else {
[16:12:17.292]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.292]                                 info, version)
[16:12:17.292]                             }
[16:12:17.292]                             base::stop(msg)
[16:12:17.292]                           }
[16:12:17.292]                         })
[16:12:17.292]                       }
[16:12:17.292]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.292]                       base::options(mc.cores = 1L)
[16:12:17.292]                     }
[16:12:17.292]                     base::local({
[16:12:17.292]                       for (pkg in "future") {
[16:12:17.292]                         base::loadNamespace(pkg)
[16:12:17.292]                         base::library(pkg, character.only = TRUE)
[16:12:17.292]                       }
[16:12:17.292]                     })
[16:12:17.292]                   }
[16:12:17.292]                   options(future.plan = NULL)
[16:12:17.292]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.292]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.292]                 }
[16:12:17.292]                 ...future.workdir <- getwd()
[16:12:17.292]             }
[16:12:17.292]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.292]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.292]         }
[16:12:17.292]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.292]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.292]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.292]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.292]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.292]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.292]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.292]             base::names(...future.oldOptions))
[16:12:17.292]     }
[16:12:17.292]     if (FALSE) {
[16:12:17.292]     }
[16:12:17.292]     else {
[16:12:17.292]         if (TRUE) {
[16:12:17.292]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.292]                 open = "w")
[16:12:17.292]         }
[16:12:17.292]         else {
[16:12:17.292]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.292]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.292]         }
[16:12:17.292]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.292]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.292]             base::sink(type = "output", split = FALSE)
[16:12:17.292]             base::close(...future.stdout)
[16:12:17.292]         }, add = TRUE)
[16:12:17.292]     }
[16:12:17.292]     ...future.frame <- base::sys.nframe()
[16:12:17.292]     ...future.conditions <- base::list()
[16:12:17.292]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.292]     if (FALSE) {
[16:12:17.292]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.292]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.292]     }
[16:12:17.292]     ...future.result <- base::tryCatch({
[16:12:17.292]         base::withCallingHandlers({
[16:12:17.292]             ...future.value <- base::withVisible(base::local({
[16:12:17.292]                 withCallingHandlers({
[16:12:17.292]                   {
[16:12:17.292]                     b <- 1
[16:12:17.292]                     c %<-% 2
[16:12:17.292]                     d <- 3
[16:12:17.292]                     4 %->% e
[16:12:17.292]                     b + c + d + e
[16:12:17.292]                   }
[16:12:17.292]                 }, immediateCondition = function(cond) {
[16:12:17.292]                   save_rds <- function (object, pathname, ...) 
[16:12:17.292]                   {
[16:12:17.292]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.292]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.292]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.292]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.292]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.292]                         fi_tmp[["mtime"]])
[16:12:17.292]                     }
[16:12:17.292]                     tryCatch({
[16:12:17.292]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.292]                     }, error = function(ex) {
[16:12:17.292]                       msg <- conditionMessage(ex)
[16:12:17.292]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.292]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.292]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.292]                         fi_tmp[["mtime"]], msg)
[16:12:17.292]                       ex$message <- msg
[16:12:17.292]                       stop(ex)
[16:12:17.292]                     })
[16:12:17.292]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.292]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.292]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.292]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.292]                       fi <- file.info(pathname)
[16:12:17.292]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.292]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.292]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.292]                         fi[["size"]], fi[["mtime"]])
[16:12:17.292]                       stop(msg)
[16:12:17.292]                     }
[16:12:17.292]                     invisible(pathname)
[16:12:17.292]                   }
[16:12:17.292]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.292]                     rootPath = tempdir()) 
[16:12:17.292]                   {
[16:12:17.292]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.292]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.292]                       tmpdir = path, fileext = ".rds")
[16:12:17.292]                     save_rds(obj, file)
[16:12:17.292]                   }
[16:12:17.292]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.292]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.292]                   {
[16:12:17.292]                     inherits <- base::inherits
[16:12:17.292]                     invokeRestart <- base::invokeRestart
[16:12:17.292]                     is.null <- base::is.null
[16:12:17.292]                     muffled <- FALSE
[16:12:17.292]                     if (inherits(cond, "message")) {
[16:12:17.292]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.292]                       if (muffled) 
[16:12:17.292]                         invokeRestart("muffleMessage")
[16:12:17.292]                     }
[16:12:17.292]                     else if (inherits(cond, "warning")) {
[16:12:17.292]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.292]                       if (muffled) 
[16:12:17.292]                         invokeRestart("muffleWarning")
[16:12:17.292]                     }
[16:12:17.292]                     else if (inherits(cond, "condition")) {
[16:12:17.292]                       if (!is.null(pattern)) {
[16:12:17.292]                         computeRestarts <- base::computeRestarts
[16:12:17.292]                         grepl <- base::grepl
[16:12:17.292]                         restarts <- computeRestarts(cond)
[16:12:17.292]                         for (restart in restarts) {
[16:12:17.292]                           name <- restart$name
[16:12:17.292]                           if (is.null(name)) 
[16:12:17.292]                             next
[16:12:17.292]                           if (!grepl(pattern, name)) 
[16:12:17.292]                             next
[16:12:17.292]                           invokeRestart(restart)
[16:12:17.292]                           muffled <- TRUE
[16:12:17.292]                           break
[16:12:17.292]                         }
[16:12:17.292]                       }
[16:12:17.292]                     }
[16:12:17.292]                     invisible(muffled)
[16:12:17.292]                   }
[16:12:17.292]                   muffleCondition(cond)
[16:12:17.292]                 })
[16:12:17.292]             }))
[16:12:17.292]             future::FutureResult(value = ...future.value$value, 
[16:12:17.292]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.292]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.292]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.292]                     ...future.globalenv.names))
[16:12:17.292]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.292]         }, condition = base::local({
[16:12:17.292]             c <- base::c
[16:12:17.292]             inherits <- base::inherits
[16:12:17.292]             invokeRestart <- base::invokeRestart
[16:12:17.292]             length <- base::length
[16:12:17.292]             list <- base::list
[16:12:17.292]             seq.int <- base::seq.int
[16:12:17.292]             signalCondition <- base::signalCondition
[16:12:17.292]             sys.calls <- base::sys.calls
[16:12:17.292]             `[[` <- base::`[[`
[16:12:17.292]             `+` <- base::`+`
[16:12:17.292]             `<<-` <- base::`<<-`
[16:12:17.292]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.292]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.292]                   3L)]
[16:12:17.292]             }
[16:12:17.292]             function(cond) {
[16:12:17.292]                 is_error <- inherits(cond, "error")
[16:12:17.292]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.292]                   NULL)
[16:12:17.292]                 if (is_error) {
[16:12:17.292]                   sessionInformation <- function() {
[16:12:17.292]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.292]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.292]                       search = base::search(), system = base::Sys.info())
[16:12:17.292]                   }
[16:12:17.292]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.292]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.292]                     cond$call), session = sessionInformation(), 
[16:12:17.292]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.292]                   signalCondition(cond)
[16:12:17.292]                 }
[16:12:17.292]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.292]                 "immediateCondition"))) {
[16:12:17.292]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.292]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.292]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.292]                   if (TRUE && !signal) {
[16:12:17.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.292]                     {
[16:12:17.292]                       inherits <- base::inherits
[16:12:17.292]                       invokeRestart <- base::invokeRestart
[16:12:17.292]                       is.null <- base::is.null
[16:12:17.292]                       muffled <- FALSE
[16:12:17.292]                       if (inherits(cond, "message")) {
[16:12:17.292]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.292]                         if (muffled) 
[16:12:17.292]                           invokeRestart("muffleMessage")
[16:12:17.292]                       }
[16:12:17.292]                       else if (inherits(cond, "warning")) {
[16:12:17.292]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.292]                         if (muffled) 
[16:12:17.292]                           invokeRestart("muffleWarning")
[16:12:17.292]                       }
[16:12:17.292]                       else if (inherits(cond, "condition")) {
[16:12:17.292]                         if (!is.null(pattern)) {
[16:12:17.292]                           computeRestarts <- base::computeRestarts
[16:12:17.292]                           grepl <- base::grepl
[16:12:17.292]                           restarts <- computeRestarts(cond)
[16:12:17.292]                           for (restart in restarts) {
[16:12:17.292]                             name <- restart$name
[16:12:17.292]                             if (is.null(name)) 
[16:12:17.292]                               next
[16:12:17.292]                             if (!grepl(pattern, name)) 
[16:12:17.292]                               next
[16:12:17.292]                             invokeRestart(restart)
[16:12:17.292]                             muffled <- TRUE
[16:12:17.292]                             break
[16:12:17.292]                           }
[16:12:17.292]                         }
[16:12:17.292]                       }
[16:12:17.292]                       invisible(muffled)
[16:12:17.292]                     }
[16:12:17.292]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.292]                   }
[16:12:17.292]                 }
[16:12:17.292]                 else {
[16:12:17.292]                   if (TRUE) {
[16:12:17.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.292]                     {
[16:12:17.292]                       inherits <- base::inherits
[16:12:17.292]                       invokeRestart <- base::invokeRestart
[16:12:17.292]                       is.null <- base::is.null
[16:12:17.292]                       muffled <- FALSE
[16:12:17.292]                       if (inherits(cond, "message")) {
[16:12:17.292]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.292]                         if (muffled) 
[16:12:17.292]                           invokeRestart("muffleMessage")
[16:12:17.292]                       }
[16:12:17.292]                       else if (inherits(cond, "warning")) {
[16:12:17.292]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.292]                         if (muffled) 
[16:12:17.292]                           invokeRestart("muffleWarning")
[16:12:17.292]                       }
[16:12:17.292]                       else if (inherits(cond, "condition")) {
[16:12:17.292]                         if (!is.null(pattern)) {
[16:12:17.292]                           computeRestarts <- base::computeRestarts
[16:12:17.292]                           grepl <- base::grepl
[16:12:17.292]                           restarts <- computeRestarts(cond)
[16:12:17.292]                           for (restart in restarts) {
[16:12:17.292]                             name <- restart$name
[16:12:17.292]                             if (is.null(name)) 
[16:12:17.292]                               next
[16:12:17.292]                             if (!grepl(pattern, name)) 
[16:12:17.292]                               next
[16:12:17.292]                             invokeRestart(restart)
[16:12:17.292]                             muffled <- TRUE
[16:12:17.292]                             break
[16:12:17.292]                           }
[16:12:17.292]                         }
[16:12:17.292]                       }
[16:12:17.292]                       invisible(muffled)
[16:12:17.292]                     }
[16:12:17.292]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.292]                   }
[16:12:17.292]                 }
[16:12:17.292]             }
[16:12:17.292]         }))
[16:12:17.292]     }, error = function(ex) {
[16:12:17.292]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.292]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.292]                 ...future.rng), started = ...future.startTime, 
[16:12:17.292]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.292]             version = "1.8"), class = "FutureResult")
[16:12:17.292]     }, finally = {
[16:12:17.292]         if (!identical(...future.workdir, getwd())) 
[16:12:17.292]             setwd(...future.workdir)
[16:12:17.292]         {
[16:12:17.292]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.292]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.292]             }
[16:12:17.292]             base::options(...future.oldOptions)
[16:12:17.292]             if (.Platform$OS.type == "windows") {
[16:12:17.292]                 old_names <- names(...future.oldEnvVars)
[16:12:17.292]                 envs <- base::Sys.getenv()
[16:12:17.292]                 names <- names(envs)
[16:12:17.292]                 common <- intersect(names, old_names)
[16:12:17.292]                 added <- setdiff(names, old_names)
[16:12:17.292]                 removed <- setdiff(old_names, names)
[16:12:17.292]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.292]                   envs[common]]
[16:12:17.292]                 NAMES <- toupper(changed)
[16:12:17.292]                 args <- list()
[16:12:17.292]                 for (kk in seq_along(NAMES)) {
[16:12:17.292]                   name <- changed[[kk]]
[16:12:17.292]                   NAME <- NAMES[[kk]]
[16:12:17.292]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.292]                     next
[16:12:17.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.292]                 }
[16:12:17.292]                 NAMES <- toupper(added)
[16:12:17.292]                 for (kk in seq_along(NAMES)) {
[16:12:17.292]                   name <- added[[kk]]
[16:12:17.292]                   NAME <- NAMES[[kk]]
[16:12:17.292]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.292]                     next
[16:12:17.292]                   args[[name]] <- ""
[16:12:17.292]                 }
[16:12:17.292]                 NAMES <- toupper(removed)
[16:12:17.292]                 for (kk in seq_along(NAMES)) {
[16:12:17.292]                   name <- removed[[kk]]
[16:12:17.292]                   NAME <- NAMES[[kk]]
[16:12:17.292]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.292]                     next
[16:12:17.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.292]                 }
[16:12:17.292]                 if (length(args) > 0) 
[16:12:17.292]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.292]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.292]             }
[16:12:17.292]             else {
[16:12:17.292]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.292]             }
[16:12:17.292]             {
[16:12:17.292]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.292]                   0L) {
[16:12:17.292]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.292]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.292]                   base::options(opts)
[16:12:17.292]                 }
[16:12:17.292]                 {
[16:12:17.292]                   {
[16:12:17.292]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.292]                     NULL
[16:12:17.292]                   }
[16:12:17.292]                   options(future.plan = NULL)
[16:12:17.292]                   if (is.na(NA_character_)) 
[16:12:17.292]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.292]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.292]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.292]                     envir = parent.frame()) 
[16:12:17.292]                   {
[16:12:17.292]                     default_workers <- missing(workers)
[16:12:17.292]                     if (is.function(workers)) 
[16:12:17.292]                       workers <- workers()
[16:12:17.292]                     workers <- structure(as.integer(workers), 
[16:12:17.292]                       class = class(workers))
[16:12:17.292]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.292]                       1L)
[16:12:17.292]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.292]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.292]                       if (default_workers) 
[16:12:17.292]                         supportsMulticore(warn = TRUE)
[16:12:17.292]                       return(sequential(..., envir = envir))
[16:12:17.292]                     }
[16:12:17.292]                     oopts <- options(mc.cores = workers)
[16:12:17.292]                     on.exit(options(oopts))
[16:12:17.292]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.292]                       envir = envir)
[16:12:17.292]                     if (!future$lazy) 
[16:12:17.292]                       future <- run(future)
[16:12:17.292]                     invisible(future)
[16:12:17.292]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.292]                 }
[16:12:17.292]             }
[16:12:17.292]         }
[16:12:17.292]     })
[16:12:17.292]     if (TRUE) {
[16:12:17.292]         base::sink(type = "output", split = FALSE)
[16:12:17.292]         if (TRUE) {
[16:12:17.292]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.292]         }
[16:12:17.292]         else {
[16:12:17.292]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.292]         }
[16:12:17.292]         base::close(...future.stdout)
[16:12:17.292]         ...future.stdout <- NULL
[16:12:17.292]     }
[16:12:17.292]     ...future.result$conditions <- ...future.conditions
[16:12:17.292]     ...future.result$finished <- base::Sys.time()
[16:12:17.292]     ...future.result
[16:12:17.292] }
[16:12:17.295] requestCore(): workers = 2
[16:12:17.297] MulticoreFuture started
[16:12:17.297] - Launch lazy future ... done
[16:12:17.297] run() for ‘MulticoreFuture’ ... done
[16:12:17.298] plan(): Setting new future strategy stack:
[16:12:17.298] List of future strategies:
[16:12:17.298] 1. sequential:
[16:12:17.298]    - args: function (..., envir = parent.frame())
[16:12:17.298]    - tweaked: FALSE
[16:12:17.298]    - call: NULL
[16:12:17.299] plan(): nbrOfWorkers() = 1
[16:12:17.333] plan(): Setting new future strategy stack:
[16:12:17.333] List of future strategies:
[16:12:17.333] 1. multicore:
[16:12:17.333]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.333]    - tweaked: FALSE
[16:12:17.333]    - call: plan(strategy)
[16:12:17.338] plan(): nbrOfWorkers() = 2
[16:12:17.339] signalConditions() ...
[16:12:17.339]  - include = ‘immediateCondition’
[16:12:17.340]  - exclude = 
[16:12:17.340]  - resignal = FALSE
[16:12:17.340]  - Number of conditions: 88
[16:12:17.340] signalConditions() ... done
[16:12:17.343] signalConditions() ...
[16:12:17.344]  - include = ‘immediateCondition’
[16:12:17.344]  - exclude = 
[16:12:17.344]  - resignal = FALSE
[16:12:17.344]  - Number of conditions: 88
[16:12:17.344] signalConditions() ... done
[16:12:17.344] Future state: ‘finished’
[16:12:17.345] signalConditions() ...
[16:12:17.345]  - include = ‘condition’
[16:12:17.345]  - exclude = ‘immediateCondition’
[16:12:17.345]  - resignal = TRUE
[16:12:17.345]  - Number of conditions: 88
[16:12:17.345]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.300] getGlobalsAndPackages() ...
[16:12:17.346]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.301] Searching for globals...
[16:12:17.346]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.306] 
[16:12:17.346]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.306] Searching for globals ... DONE
[16:12:17.346]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.306] - globals: [0] <none>
[16:12:17.346]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.307] getGlobalsAndPackages() ... DONE
[16:12:17.346]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.307] run() for ‘Future’ ...
[16:12:17.347]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.308] - state: ‘created’
[16:12:17.347]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.308] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:17.347]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.309] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:17.347]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.309] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:17.347]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.310]   - Field: ‘label’
[16:12:17.348]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.310]   - Field: ‘local’
[16:12:17.348]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.310]   - Field: ‘owner’
[16:12:17.348]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.310]   - Field: ‘envir’
[16:12:17.348]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.310]   - Field: ‘packages’
[16:12:17.348]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.311]   - Field: ‘gc’
[16:12:17.349]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.311]   - Field: ‘conditions’
[16:12:17.349]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.311]   - Field: ‘expr’
[16:12:17.349]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.311]   - Field: ‘uuid’
[16:12:17.349]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.311]   - Field: ‘seed’
[16:12:17.349]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.312]   - Field: ‘version’
[16:12:17.349]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.312]   - Field: ‘result’
[16:12:17.350]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.312]   - Field: ‘asynchronous’
[16:12:17.350]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.312]   - Field: ‘calls’
[16:12:17.350]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.312]   - Field: ‘globals’
[16:12:17.350]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.313]   - Field: ‘stdout’
[16:12:17.350]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.313]   - Field: ‘earlySignal’
[16:12:17.350]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.313]   - Field: ‘lazy’
[16:12:17.351]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.313]   - Field: ‘state’
[16:12:17.351]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.313] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:17.351]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.314] - Launch lazy future ...
[16:12:17.351]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.314] Packages needed by the future expression (n = 0): <none>
[16:12:17.351]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.314] Packages needed by future strategies (n = 0): <none>
[16:12:17.351]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.315] {
[16:12:17.315]     {
[16:12:17.315]         {
[16:12:17.315]             ...future.startTime <- base::Sys.time()
[16:12:17.315]             {
[16:12:17.315]                 {
[16:12:17.315]                   {
[16:12:17.315]                     base::local({
[16:12:17.315]                       has_future <- base::requireNamespace("future", 
[16:12:17.315]                         quietly = TRUE)
[16:12:17.315]                       if (has_future) {
[16:12:17.315]                         ns <- base::getNamespace("future")
[16:12:17.315]                         version <- ns[[".package"]][["version"]]
[16:12:17.315]                         if (is.null(version)) 
[16:12:17.315]                           version <- utils::packageVersion("future")
[16:12:17.315]                       }
[16:12:17.315]                       else {
[16:12:17.315]                         version <- NULL
[16:12:17.315]                       }
[16:12:17.315]                       if (!has_future || version < "1.8.0") {
[16:12:17.315]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.315]                           "", base::R.version$version.string), 
[16:12:17.315]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:17.315]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.315]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.315]                             "release", "version")], collapse = " "), 
[16:12:17.315]                           hostname = base::Sys.info()[["nodename"]])
[16:12:17.315]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.315]                           info)
[16:12:17.315]                         info <- base::paste(info, collapse = "; ")
[16:12:17.315]                         if (!has_future) {
[16:12:17.315]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.315]                             info)
[16:12:17.315]                         }
[16:12:17.315]                         else {
[16:12:17.315]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.315]                             info, version)
[16:12:17.315]                         }
[16:12:17.315]                         base::stop(msg)
[16:12:17.315]                       }
[16:12:17.315]                     })
[16:12:17.315]                   }
[16:12:17.315]                   options(future.plan = NULL)
[16:12:17.315]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.315]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.315]                 }
[16:12:17.315]                 ...future.workdir <- getwd()
[16:12:17.315]             }
[16:12:17.315]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.315]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.315]         }
[16:12:17.315]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.315]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.315]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.315]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.315]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.315]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.315]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.315]             base::names(...future.oldOptions))
[16:12:17.315]     }
[16:12:17.315]     if (FALSE) {
[16:12:17.315]     }
[16:12:17.315]     else {
[16:12:17.315]         if (TRUE) {
[16:12:17.315]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.315]                 open = "w")
[16:12:17.315]         }
[16:12:17.315]         else {
[16:12:17.315]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.315]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.315]         }
[16:12:17.315]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.315]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.315]             base::sink(type = "output", split = FALSE)
[16:12:17.315]             base::close(...future.stdout)
[16:12:17.315]         }, add = TRUE)
[16:12:17.315]     }
[16:12:17.315]     ...future.frame <- base::sys.nframe()
[16:12:17.315]     ...future.conditions <- base::list()
[16:12:17.315]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.315]     if (FALSE) {
[16:12:17.315]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.315]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.315]     }
[16:12:17.315]     ...future.result <- base::tryCatch({
[16:12:17.315]         base::withCallingHandlers({
[16:12:17.315]             ...future.value <- base::withVisible(base::local(2))
[16:12:17.315]             future::FutureResult(value = ...future.value$value, 
[16:12:17.315]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.315]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.315]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.315]                     ...future.globalenv.names))
[16:12:17.315]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.315]         }, condition = base::local({
[16:12:17.315]             c <- base::c
[16:12:17.315]             inherits <- base::inherits
[16:12:17.315]             invokeRestart <- base::invokeRestart
[16:12:17.315]             length <- base::length
[16:12:17.315]             list <- base::list
[16:12:17.315]             seq.int <- base::seq.int
[16:12:17.315]             signalCondition <- base::signalCondition
[16:12:17.315]             sys.calls <- base::sys.calls
[16:12:17.315]             `[[` <- base::`[[`
[16:12:17.315]             `+` <- base::`+`
[16:12:17.315]             `<<-` <- base::`<<-`
[16:12:17.315]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.315]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.315]                   3L)]
[16:12:17.315]             }
[16:12:17.315]             function(cond) {
[16:12:17.315]                 is_error <- inherits(cond, "error")
[16:12:17.315]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.315]                   NULL)
[16:12:17.315]                 if (is_error) {
[16:12:17.315]                   sessionInformation <- function() {
[16:12:17.315]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.315]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.315]                       search = base::search(), system = base::Sys.info())
[16:12:17.315]                   }
[16:12:17.315]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.315]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.315]                     cond$call), session = sessionInformation(), 
[16:12:17.315]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.315]                   signalCondition(cond)
[16:12:17.315]                 }
[16:12:17.315]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.315]                 "immediateCondition"))) {
[16:12:17.315]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.315]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.315]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.315]                   if (TRUE && !signal) {
[16:12:17.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.315]                     {
[16:12:17.315]                       inherits <- base::inherits
[16:12:17.315]                       invokeRestart <- base::invokeRestart
[16:12:17.315]                       is.null <- base::is.null
[16:12:17.315]                       muffled <- FALSE
[16:12:17.315]                       if (inherits(cond, "message")) {
[16:12:17.315]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.315]                         if (muffled) 
[16:12:17.315]                           invokeRestart("muffleMessage")
[16:12:17.315]                       }
[16:12:17.315]                       else if (inherits(cond, "warning")) {
[16:12:17.315]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.315]                         if (muffled) 
[16:12:17.315]                           invokeRestart("muffleWarning")
[16:12:17.315]                       }
[16:12:17.315]                       else if (inherits(cond, "condition")) {
[16:12:17.315]                         if (!is.null(pattern)) {
[16:12:17.315]                           computeRestarts <- base::computeRestarts
[16:12:17.315]                           grepl <- base::grepl
[16:12:17.315]                           restarts <- computeRestarts(cond)
[16:12:17.315]                           for (restart in restarts) {
[16:12:17.315]                             name <- restart$name
[16:12:17.315]                             if (is.null(name)) 
[16:12:17.315]                               next
[16:12:17.315]                             if (!grepl(pattern, name)) 
[16:12:17.315]                               next
[16:12:17.315]                             invokeRestart(restart)
[16:12:17.315]                             muffled <- TRUE
[16:12:17.315]                             break
[16:12:17.315]                           }
[16:12:17.315]                         }
[16:12:17.315]                       }
[16:12:17.315]                       invisible(muffled)
[16:12:17.315]                     }
[16:12:17.315]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.315]                   }
[16:12:17.315]                 }
[16:12:17.315]                 else {
[16:12:17.315]                   if (TRUE) {
[16:12:17.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.315]                     {
[16:12:17.315]                       inherits <- base::inherits
[16:12:17.315]                       invokeRestart <- base::invokeRestart
[16:12:17.315]                       is.null <- base::is.null
[16:12:17.315]                       muffled <- FALSE
[16:12:17.315]                       if (inherits(cond, "message")) {
[16:12:17.315]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.315]                         if (muffled) 
[16:12:17.315]                           invokeRestart("muffleMessage")
[16:12:17.315]                       }
[16:12:17.315]                       else if (inherits(cond, "warning")) {
[16:12:17.315]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.315]                         if (muffled) 
[16:12:17.315]                           invokeRestart("muffleWarning")
[16:12:17.315]                       }
[16:12:17.315]                       else if (inherits(cond, "condition")) {
[16:12:17.315]                         if (!is.null(pattern)) {
[16:12:17.315]                           computeRestarts <- base::computeRestarts
[16:12:17.315]                           grepl <- base::grepl
[16:12:17.315]                           restarts <- computeRestarts(cond)
[16:12:17.315]                           for (restart in restarts) {
[16:12:17.315]                             name <- restart$name
[16:12:17.315]                             if (is.null(name)) 
[16:12:17.315]                               next
[16:12:17.315]                             if (!grepl(pattern, name)) 
[16:12:17.315]                               next
[16:12:17.315]                             invokeRestart(restart)
[16:12:17.315]                             muffled <- TRUE
[16:12:17.315]                             break
[16:12:17.315]                           }
[16:12:17.315]                         }
[16:12:17.315]                       }
[16:12:17.315]                       invisible(muffled)
[16:12:17.315]                     }
[16:12:17.315]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.315]                   }
[16:12:17.315]                 }
[16:12:17.315]             }
[16:12:17.315]         }))
[16:12:17.315]     }, error = function(ex) {
[16:12:17.315]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.315]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.315]                 ...future.rng), started = ...future.startTime, 
[16:12:17.315]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.315]             version = "1.8"), class = "FutureResult")
[16:12:17.315]     }, finally = {
[16:12:17.315]         if (!identical(...future.workdir, getwd())) 
[16:12:17.315]             setwd(...future.workdir)
[16:12:17.315]         {
[16:12:17.315]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.315]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.315]             }
[16:12:17.315]             base::options(...future.oldOptions)
[16:12:17.315]             if (.Platform$OS.type == "windows") {
[16:12:17.315]                 old_names <- names(...future.oldEnvVars)
[16:12:17.315]                 envs <- base::Sys.getenv()
[16:12:17.315]                 names <- names(envs)
[16:12:17.315]                 common <- intersect(names, old_names)
[16:12:17.315]                 added <- setdiff(names, old_names)
[16:12:17.315]                 removed <- setdiff(old_names, names)
[16:12:17.315]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.315]                   envs[common]]
[16:12:17.315]                 NAMES <- toupper(changed)
[16:12:17.315]                 args <- list()
[16:12:17.315]                 for (kk in seq_along(NAMES)) {
[16:12:17.315]                   name <- changed[[kk]]
[16:12:17.315]                   NAME <- NAMES[[kk]]
[16:12:17.315]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.315]                     next
[16:12:17.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.315]                 }
[16:12:17.315]                 NAMES <- toupper(added)
[16:12:17.315]                 for (kk in seq_along(NAMES)) {
[16:12:17.315]                   name <- added[[kk]]
[16:12:17.315]                   NAME <- NAMES[[kk]]
[16:12:17.315]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.315]                     next
[16:12:17.315]                   args[[name]] <- ""
[16:12:17.315]                 }
[16:12:17.315]                 NAMES <- toupper(removed)
[16:12:17.315]                 for (kk in seq_along(NAMES)) {
[16:12:17.315]                   name <- removed[[kk]]
[16:12:17.315]                   NAME <- NAMES[[kk]]
[16:12:17.315]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.315]                     next
[16:12:17.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.315]                 }
[16:12:17.315]                 if (length(args) > 0) 
[16:12:17.315]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.315]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.315]             }
[16:12:17.315]             else {
[16:12:17.315]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.315]             }
[16:12:17.315]             {
[16:12:17.315]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.315]                   0L) {
[16:12:17.315]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.315]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.315]                   base::options(opts)
[16:12:17.315]                 }
[16:12:17.315]                 {
[16:12:17.315]                   {
[16:12:17.315]                     NULL
[16:12:17.315]                     RNGkind("Mersenne-Twister")
[16:12:17.315]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:17.315]                       inherits = FALSE)
[16:12:17.315]                   }
[16:12:17.315]                   options(future.plan = NULL)
[16:12:17.315]                   if (is.na(NA_character_)) 
[16:12:17.315]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.315]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.315]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:17.315]                   {
[16:12:17.315]                     future <- SequentialFuture(..., envir = envir)
[16:12:17.315]                     if (!future$lazy) 
[16:12:17.315]                       future <- run(future)
[16:12:17.315]                     invisible(future)
[16:12:17.315]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.315]                 }
[16:12:17.315]             }
[16:12:17.315]         }
[16:12:17.315]     })
[16:12:17.315]     if (TRUE) {
[16:12:17.315]         base::sink(type = "output", split = FALSE)
[16:12:17.315]         if (TRUE) {
[16:12:17.315]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.315]         }
[16:12:17.315]         else {
[16:12:17.315]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.315]         }
[16:12:17.315]         base::close(...future.stdout)
[16:12:17.315]         ...future.stdout <- NULL
[16:12:17.315]     }
[16:12:17.315]     ...future.result$conditions <- ...future.conditions
[16:12:17.315]     ...future.result$finished <- base::Sys.time()
[16:12:17.315]     ...future.result
[16:12:17.315] }
[16:12:17.352]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.317] plan(): Setting new future strategy stack:
[16:12:17.352]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.317] List of future strategies:
[16:12:17.317] 1. sequential:
[16:12:17.317]    - args: function (..., envir = parent.frame())
[16:12:17.317]    - tweaked: FALSE
[16:12:17.317]    - call: NULL
[16:12:17.352]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.318] plan(): nbrOfWorkers() = 1
[16:12:17.352]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.319] plan(): Setting new future strategy stack:
[16:12:17.352]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.319] List of future strategies:
[16:12:17.319] 1. sequential:
[16:12:17.319]    - args: function (..., envir = parent.frame())
[16:12:17.319]    - tweaked: FALSE
[16:12:17.319]    - call: NULL
[16:12:17.353]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.320] plan(): nbrOfWorkers() = 1
[16:12:17.353]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.320] SequentialFuture started (and completed)
[16:12:17.353]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.320] - Launch lazy future ... done
[16:12:17.353]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.320] run() for ‘SequentialFuture’ ... done
[16:12:17.353]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.321] getGlobalsAndPackages() ...
[16:12:17.353]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.321] Searching for globals...
[16:12:17.354]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.321] 
[16:12:17.354]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.321] Searching for globals ... DONE
[16:12:17.354]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.322] - globals: [0] <none>
[16:12:17.354]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.322] getGlobalsAndPackages() ... DONE
[16:12:17.354]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.322] run() for ‘Future’ ...
[16:12:17.354]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.322] - state: ‘created’
[16:12:17.355]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.323] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:17.355]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.323] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:17.355]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.323] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:17.355]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.323]   - Field: ‘label’
[16:12:17.355]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.324]   - Field: ‘local’
[16:12:17.355]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.324]   - Field: ‘owner’
[16:12:17.356]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.324]   - Field: ‘envir’
[16:12:17.356]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.324]   - Field: ‘packages’
[16:12:17.356]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.324]   - Field: ‘gc’
[16:12:17.356]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.324]   - Field: ‘conditions’
[16:12:17.356]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.325]   - Field: ‘expr’
[16:12:17.357]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.325]   - Field: ‘uuid’
[16:12:17.357]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.325]   - Field: ‘seed’
[16:12:17.357]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.325]   - Field: ‘version’
[16:12:17.357]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.325]   - Field: ‘result’
[16:12:17.357]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.325]   - Field: ‘asynchronous’
[16:12:17.357]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.326]   - Field: ‘calls’
[16:12:17.358]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.326]   - Field: ‘globals’
[16:12:17.358]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.326]   - Field: ‘stdout’
[16:12:17.358]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.326]   - Field: ‘earlySignal’
[16:12:17.358]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.326]   - Field: ‘lazy’
[16:12:17.358]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.326]   - Field: ‘state’
[16:12:17.358]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.327] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:17.358]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.327] - Launch lazy future ...
[16:12:17.359]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.327] Packages needed by the future expression (n = 0): <none>
[16:12:17.359]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.327] Packages needed by future strategies (n = 0): <none>
[16:12:17.359]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.328] {
[16:12:17.328]     {
[16:12:17.328]         {
[16:12:17.328]             ...future.startTime <- base::Sys.time()
[16:12:17.328]             {
[16:12:17.328]                 {
[16:12:17.328]                   {
[16:12:17.328]                     base::local({
[16:12:17.328]                       has_future <- base::requireNamespace("future", 
[16:12:17.328]                         quietly = TRUE)
[16:12:17.328]                       if (has_future) {
[16:12:17.328]                         ns <- base::getNamespace("future")
[16:12:17.328]                         version <- ns[[".package"]][["version"]]
[16:12:17.328]                         if (is.null(version)) 
[16:12:17.328]                           version <- utils::packageVersion("future")
[16:12:17.328]                       }
[16:12:17.328]                       else {
[16:12:17.328]                         version <- NULL
[16:12:17.328]                       }
[16:12:17.328]                       if (!has_future || version < "1.8.0") {
[16:12:17.328]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.328]                           "", base::R.version$version.string), 
[16:12:17.328]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:17.328]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.328]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.328]                             "release", "version")], collapse = " "), 
[16:12:17.328]                           hostname = base::Sys.info()[["nodename"]])
[16:12:17.328]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.328]                           info)
[16:12:17.328]                         info <- base::paste(info, collapse = "; ")
[16:12:17.328]                         if (!has_future) {
[16:12:17.328]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.328]                             info)
[16:12:17.328]                         }
[16:12:17.328]                         else {
[16:12:17.328]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.328]                             info, version)
[16:12:17.328]                         }
[16:12:17.328]                         base::stop(msg)
[16:12:17.328]                       }
[16:12:17.328]                     })
[16:12:17.328]                   }
[16:12:17.328]                   options(future.plan = NULL)
[16:12:17.328]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.328]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.328]                 }
[16:12:17.328]                 ...future.workdir <- getwd()
[16:12:17.328]             }
[16:12:17.328]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.328]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.328]         }
[16:12:17.328]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.328]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.328]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.328]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.328]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.328]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.328]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.328]             base::names(...future.oldOptions))
[16:12:17.328]     }
[16:12:17.328]     if (FALSE) {
[16:12:17.328]     }
[16:12:17.328]     else {
[16:12:17.328]         if (TRUE) {
[16:12:17.328]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.328]                 open = "w")
[16:12:17.328]         }
[16:12:17.328]         else {
[16:12:17.328]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.328]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.328]         }
[16:12:17.328]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.328]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.328]             base::sink(type = "output", split = FALSE)
[16:12:17.328]             base::close(...future.stdout)
[16:12:17.328]         }, add = TRUE)
[16:12:17.328]     }
[16:12:17.328]     ...future.frame <- base::sys.nframe()
[16:12:17.328]     ...future.conditions <- base::list()
[16:12:17.328]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.328]     if (FALSE) {
[16:12:17.328]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.328]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.328]     }
[16:12:17.328]     ...future.result <- base::tryCatch({
[16:12:17.328]         base::withCallingHandlers({
[16:12:17.328]             ...future.value <- base::withVisible(base::local(4))
[16:12:17.328]             future::FutureResult(value = ...future.value$value, 
[16:12:17.328]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.328]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.328]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.328]                     ...future.globalenv.names))
[16:12:17.328]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.328]         }, condition = base::local({
[16:12:17.328]             c <- base::c
[16:12:17.328]             inherits <- base::inherits
[16:12:17.328]             invokeRestart <- base::invokeRestart
[16:12:17.328]             length <- base::length
[16:12:17.328]             list <- base::list
[16:12:17.328]             seq.int <- base::seq.int
[16:12:17.328]             signalCondition <- base::signalCondition
[16:12:17.328]             sys.calls <- base::sys.calls
[16:12:17.328]             `[[` <- base::`[[`
[16:12:17.328]             `+` <- base::`+`
[16:12:17.328]             `<<-` <- base::`<<-`
[16:12:17.328]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.328]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.328]                   3L)]
[16:12:17.328]             }
[16:12:17.328]             function(cond) {
[16:12:17.328]                 is_error <- inherits(cond, "error")
[16:12:17.328]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.328]                   NULL)
[16:12:17.328]                 if (is_error) {
[16:12:17.328]                   sessionInformation <- function() {
[16:12:17.328]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.328]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.328]                       search = base::search(), system = base::Sys.info())
[16:12:17.328]                   }
[16:12:17.328]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.328]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.328]                     cond$call), session = sessionInformation(), 
[16:12:17.328]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.328]                   signalCondition(cond)
[16:12:17.328]                 }
[16:12:17.328]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.328]                 "immediateCondition"))) {
[16:12:17.328]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.328]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.328]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.328]                   if (TRUE && !signal) {
[16:12:17.328]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.328]                     {
[16:12:17.328]                       inherits <- base::inherits
[16:12:17.328]                       invokeRestart <- base::invokeRestart
[16:12:17.328]                       is.null <- base::is.null
[16:12:17.328]                       muffled <- FALSE
[16:12:17.328]                       if (inherits(cond, "message")) {
[16:12:17.328]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.328]                         if (muffled) 
[16:12:17.328]                           invokeRestart("muffleMessage")
[16:12:17.328]                       }
[16:12:17.328]                       else if (inherits(cond, "warning")) {
[16:12:17.328]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.328]                         if (muffled) 
[16:12:17.328]                           invokeRestart("muffleWarning")
[16:12:17.328]                       }
[16:12:17.328]                       else if (inherits(cond, "condition")) {
[16:12:17.328]                         if (!is.null(pattern)) {
[16:12:17.328]                           computeRestarts <- base::computeRestarts
[16:12:17.328]                           grepl <- base::grepl
[16:12:17.328]                           restarts <- computeRestarts(cond)
[16:12:17.328]                           for (restart in restarts) {
[16:12:17.328]                             name <- restart$name
[16:12:17.328]                             if (is.null(name)) 
[16:12:17.328]                               next
[16:12:17.328]                             if (!grepl(pattern, name)) 
[16:12:17.328]                               next
[16:12:17.328]                             invokeRestart(restart)
[16:12:17.328]                             muffled <- TRUE
[16:12:17.328]                             break
[16:12:17.328]                           }
[16:12:17.328]                         }
[16:12:17.328]                       }
[16:12:17.328]                       invisible(muffled)
[16:12:17.328]                     }
[16:12:17.328]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.328]                   }
[16:12:17.328]                 }
[16:12:17.328]                 else {
[16:12:17.328]                   if (TRUE) {
[16:12:17.328]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.328]                     {
[16:12:17.328]                       inherits <- base::inherits
[16:12:17.328]                       invokeRestart <- base::invokeRestart
[16:12:17.328]                       is.null <- base::is.null
[16:12:17.328]                       muffled <- FALSE
[16:12:17.328]                       if (inherits(cond, "message")) {
[16:12:17.328]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.328]                         if (muffled) 
[16:12:17.328]                           invokeRestart("muffleMessage")
[16:12:17.328]                       }
[16:12:17.328]                       else if (inherits(cond, "warning")) {
[16:12:17.328]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.328]                         if (muffled) 
[16:12:17.328]                           invokeRestart("muffleWarning")
[16:12:17.328]                       }
[16:12:17.328]                       else if (inherits(cond, "condition")) {
[16:12:17.328]                         if (!is.null(pattern)) {
[16:12:17.328]                           computeRestarts <- base::computeRestarts
[16:12:17.328]                           grepl <- base::grepl
[16:12:17.328]                           restarts <- computeRestarts(cond)
[16:12:17.328]                           for (restart in restarts) {
[16:12:17.328]                             name <- restart$name
[16:12:17.328]                             if (is.null(name)) 
[16:12:17.328]                               next
[16:12:17.328]                             if (!grepl(pattern, name)) 
[16:12:17.328]                               next
[16:12:17.328]                             invokeRestart(restart)
[16:12:17.328]                             muffled <- TRUE
[16:12:17.328]                             break
[16:12:17.328]                           }
[16:12:17.328]                         }
[16:12:17.328]                       }
[16:12:17.328]                       invisible(muffled)
[16:12:17.328]                     }
[16:12:17.328]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.328]                   }
[16:12:17.328]                 }
[16:12:17.328]             }
[16:12:17.328]         }))
[16:12:17.328]     }, error = function(ex) {
[16:12:17.328]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.328]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.328]                 ...future.rng), started = ...future.startTime, 
[16:12:17.328]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.328]             version = "1.8"), class = "FutureResult")
[16:12:17.328]     }, finally = {
[16:12:17.328]         if (!identical(...future.workdir, getwd())) 
[16:12:17.328]             setwd(...future.workdir)
[16:12:17.328]         {
[16:12:17.328]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.328]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.328]             }
[16:12:17.328]             base::options(...future.oldOptions)
[16:12:17.328]             if (.Platform$OS.type == "windows") {
[16:12:17.328]                 old_names <- names(...future.oldEnvVars)
[16:12:17.328]                 envs <- base::Sys.getenv()
[16:12:17.328]                 names <- names(envs)
[16:12:17.328]                 common <- intersect(names, old_names)
[16:12:17.328]                 added <- setdiff(names, old_names)
[16:12:17.328]                 removed <- setdiff(old_names, names)
[16:12:17.328]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.328]                   envs[common]]
[16:12:17.328]                 NAMES <- toupper(changed)
[16:12:17.328]                 args <- list()
[16:12:17.328]                 for (kk in seq_along(NAMES)) {
[16:12:17.328]                   name <- changed[[kk]]
[16:12:17.328]                   NAME <- NAMES[[kk]]
[16:12:17.328]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.328]                     next
[16:12:17.328]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.328]                 }
[16:12:17.328]                 NAMES <- toupper(added)
[16:12:17.328]                 for (kk in seq_along(NAMES)) {
[16:12:17.328]                   name <- added[[kk]]
[16:12:17.328]                   NAME <- NAMES[[kk]]
[16:12:17.328]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.328]                     next
[16:12:17.328]                   args[[name]] <- ""
[16:12:17.328]                 }
[16:12:17.328]                 NAMES <- toupper(removed)
[16:12:17.328]                 for (kk in seq_along(NAMES)) {
[16:12:17.328]                   name <- removed[[kk]]
[16:12:17.328]                   NAME <- NAMES[[kk]]
[16:12:17.328]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.328]                     next
[16:12:17.328]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.328]                 }
[16:12:17.328]                 if (length(args) > 0) 
[16:12:17.328]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.328]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.328]             }
[16:12:17.328]             else {
[16:12:17.328]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.328]             }
[16:12:17.328]             {
[16:12:17.328]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.328]                   0L) {
[16:12:17.328]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.328]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.328]                   base::options(opts)
[16:12:17.328]                 }
[16:12:17.328]                 {
[16:12:17.328]                   {
[16:12:17.328]                     NULL
[16:12:17.328]                     RNGkind("Mersenne-Twister")
[16:12:17.328]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:17.328]                       inherits = FALSE)
[16:12:17.328]                   }
[16:12:17.328]                   options(future.plan = NULL)
[16:12:17.328]                   if (is.na(NA_character_)) 
[16:12:17.328]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.328]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.328]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:17.328]                   {
[16:12:17.328]                     future <- SequentialFuture(..., envir = envir)
[16:12:17.328]                     if (!future$lazy) 
[16:12:17.328]                       future <- run(future)
[16:12:17.328]                     invisible(future)
[16:12:17.328]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.328]                 }
[16:12:17.328]             }
[16:12:17.328]         }
[16:12:17.328]     })
[16:12:17.328]     if (TRUE) {
[16:12:17.328]         base::sink(type = "output", split = FALSE)
[16:12:17.328]         if (TRUE) {
[16:12:17.328]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.328]         }
[16:12:17.328]         else {
[16:12:17.328]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.328]         }
[16:12:17.328]         base::close(...future.stdout)
[16:12:17.328]         ...future.stdout <- NULL
[16:12:17.328]     }
[16:12:17.328]     ...future.result$conditions <- ...future.conditions
[16:12:17.328]     ...future.result$finished <- base::Sys.time()
[16:12:17.328]     ...future.result
[16:12:17.328] }
[16:12:17.359]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.330] plan(): Setting new future strategy stack:
[16:12:17.359]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.330] List of future strategies:
[16:12:17.330] 1. sequential:
[16:12:17.330]    - args: function (..., envir = parent.frame())
[16:12:17.330]    - tweaked: FALSE
[16:12:17.330]    - call: NULL
[16:12:17.359]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.330] plan(): nbrOfWorkers() = 1
[16:12:17.360]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.331] plan(): Setting new future strategy stack:
[16:12:17.360]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.332] List of future strategies:
[16:12:17.332] 1. sequential:
[16:12:17.332]    - args: function (..., envir = parent.frame())
[16:12:17.332]    - tweaked: FALSE
[16:12:17.332]    - call: NULL
[16:12:17.360]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.332] plan(): nbrOfWorkers() = 1
[16:12:17.360]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.332] SequentialFuture started (and completed)
[16:12:17.360]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.332] - Launch lazy future ... done
[16:12:17.360]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:17.333] run() for ‘SequentialFuture’ ... done
[16:12:17.361] signalConditions() ... done
a = 10
[16:12:17.361] getGlobalsAndPackages() ...
[16:12:17.361] Searching for globals...
[16:12:17.362] - globals found: [3] ‘{’, ‘+’, ‘a’
[16:12:17.362] Searching for globals ... DONE
[16:12:17.363] Resolving globals: FALSE
[16:12:17.363] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:17.363] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:12:17.364] - globals: [1] ‘a’
[16:12:17.364] 
[16:12:17.364] getGlobalsAndPackages() ... DONE
[16:12:17.364] run() for ‘Future’ ...
[16:12:17.364] - state: ‘created’
[16:12:17.364] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:17.371] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:17.371] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:17.371]   - Field: ‘label’
[16:12:17.371]   - Field: ‘local’
[16:12:17.371]   - Field: ‘owner’
[16:12:17.372]   - Field: ‘envir’
[16:12:17.372]   - Field: ‘workers’
[16:12:17.372]   - Field: ‘packages’
[16:12:17.372]   - Field: ‘gc’
[16:12:17.372]   - Field: ‘job’
[16:12:17.372]   - Field: ‘conditions’
[16:12:17.372]   - Field: ‘expr’
[16:12:17.372]   - Field: ‘uuid’
[16:12:17.372]   - Field: ‘seed’
[16:12:17.372]   - Field: ‘version’
[16:12:17.373]   - Field: ‘result’
[16:12:17.373]   - Field: ‘asynchronous’
[16:12:17.373]   - Field: ‘calls’
[16:12:17.373]   - Field: ‘globals’
[16:12:17.373]   - Field: ‘stdout’
[16:12:17.373]   - Field: ‘earlySignal’
[16:12:17.373]   - Field: ‘lazy’
[16:12:17.373]   - Field: ‘state’
[16:12:17.373] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:17.373] - Launch lazy future ...
[16:12:17.374] Packages needed by the future expression (n = 0): <none>
[16:12:17.374] Packages needed by future strategies (n = 0): <none>
[16:12:17.374] {
[16:12:17.374]     {
[16:12:17.374]         {
[16:12:17.374]             ...future.startTime <- base::Sys.time()
[16:12:17.374]             {
[16:12:17.374]                 {
[16:12:17.374]                   {
[16:12:17.374]                     {
[16:12:17.374]                       base::local({
[16:12:17.374]                         has_future <- base::requireNamespace("future", 
[16:12:17.374]                           quietly = TRUE)
[16:12:17.374]                         if (has_future) {
[16:12:17.374]                           ns <- base::getNamespace("future")
[16:12:17.374]                           version <- ns[[".package"]][["version"]]
[16:12:17.374]                           if (is.null(version)) 
[16:12:17.374]                             version <- utils::packageVersion("future")
[16:12:17.374]                         }
[16:12:17.374]                         else {
[16:12:17.374]                           version <- NULL
[16:12:17.374]                         }
[16:12:17.374]                         if (!has_future || version < "1.8.0") {
[16:12:17.374]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.374]                             "", base::R.version$version.string), 
[16:12:17.374]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.374]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.374]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.374]                               "release", "version")], collapse = " "), 
[16:12:17.374]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.374]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.374]                             info)
[16:12:17.374]                           info <- base::paste(info, collapse = "; ")
[16:12:17.374]                           if (!has_future) {
[16:12:17.374]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.374]                               info)
[16:12:17.374]                           }
[16:12:17.374]                           else {
[16:12:17.374]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.374]                               info, version)
[16:12:17.374]                           }
[16:12:17.374]                           base::stop(msg)
[16:12:17.374]                         }
[16:12:17.374]                       })
[16:12:17.374]                     }
[16:12:17.374]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.374]                     base::options(mc.cores = 1L)
[16:12:17.374]                   }
[16:12:17.374]                   options(future.plan = NULL)
[16:12:17.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.374]                 }
[16:12:17.374]                 ...future.workdir <- getwd()
[16:12:17.374]             }
[16:12:17.374]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.374]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.374]         }
[16:12:17.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.374]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.374]             base::names(...future.oldOptions))
[16:12:17.374]     }
[16:12:17.374]     if (FALSE) {
[16:12:17.374]     }
[16:12:17.374]     else {
[16:12:17.374]         if (TRUE) {
[16:12:17.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.374]                 open = "w")
[16:12:17.374]         }
[16:12:17.374]         else {
[16:12:17.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.374]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.374]         }
[16:12:17.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.374]             base::sink(type = "output", split = FALSE)
[16:12:17.374]             base::close(...future.stdout)
[16:12:17.374]         }, add = TRUE)
[16:12:17.374]     }
[16:12:17.374]     ...future.frame <- base::sys.nframe()
[16:12:17.374]     ...future.conditions <- base::list()
[16:12:17.374]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.374]     if (FALSE) {
[16:12:17.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.374]     }
[16:12:17.374]     ...future.result <- base::tryCatch({
[16:12:17.374]         base::withCallingHandlers({
[16:12:17.374]             ...future.value <- base::withVisible(base::local({
[16:12:17.374]                 withCallingHandlers({
[16:12:17.374]                   {
[16:12:17.374]                     a + 1
[16:12:17.374]                   }
[16:12:17.374]                 }, immediateCondition = function(cond) {
[16:12:17.374]                   save_rds <- function (object, pathname, ...) 
[16:12:17.374]                   {
[16:12:17.374]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:17.374]                     if (file_test("-f", pathname_tmp)) {
[16:12:17.374]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.374]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:17.374]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.374]                         fi_tmp[["mtime"]])
[16:12:17.374]                     }
[16:12:17.374]                     tryCatch({
[16:12:17.374]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:17.374]                     }, error = function(ex) {
[16:12:17.374]                       msg <- conditionMessage(ex)
[16:12:17.374]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.374]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:17.374]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.374]                         fi_tmp[["mtime"]], msg)
[16:12:17.374]                       ex$message <- msg
[16:12:17.374]                       stop(ex)
[16:12:17.374]                     })
[16:12:17.374]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:17.374]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:17.374]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:17.374]                       fi_tmp <- file.info(pathname_tmp)
[16:12:17.374]                       fi <- file.info(pathname)
[16:12:17.374]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:17.374]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:17.374]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:17.374]                         fi[["size"]], fi[["mtime"]])
[16:12:17.374]                       stop(msg)
[16:12:17.374]                     }
[16:12:17.374]                     invisible(pathname)
[16:12:17.374]                   }
[16:12:17.374]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:17.374]                     rootPath = tempdir()) 
[16:12:17.374]                   {
[16:12:17.374]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:17.374]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:17.374]                       tmpdir = path, fileext = ".rds")
[16:12:17.374]                     save_rds(obj, file)
[16:12:17.374]                   }
[16:12:17.374]                   saveImmediateCondition(cond, path = "/tmp/RtmpiqGU7u/.future/immediateConditions")
[16:12:17.374]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.374]                   {
[16:12:17.374]                     inherits <- base::inherits
[16:12:17.374]                     invokeRestart <- base::invokeRestart
[16:12:17.374]                     is.null <- base::is.null
[16:12:17.374]                     muffled <- FALSE
[16:12:17.374]                     if (inherits(cond, "message")) {
[16:12:17.374]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.374]                       if (muffled) 
[16:12:17.374]                         invokeRestart("muffleMessage")
[16:12:17.374]                     }
[16:12:17.374]                     else if (inherits(cond, "warning")) {
[16:12:17.374]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.374]                       if (muffled) 
[16:12:17.374]                         invokeRestart("muffleWarning")
[16:12:17.374]                     }
[16:12:17.374]                     else if (inherits(cond, "condition")) {
[16:12:17.374]                       if (!is.null(pattern)) {
[16:12:17.374]                         computeRestarts <- base::computeRestarts
[16:12:17.374]                         grepl <- base::grepl
[16:12:17.374]                         restarts <- computeRestarts(cond)
[16:12:17.374]                         for (restart in restarts) {
[16:12:17.374]                           name <- restart$name
[16:12:17.374]                           if (is.null(name)) 
[16:12:17.374]                             next
[16:12:17.374]                           if (!grepl(pattern, name)) 
[16:12:17.374]                             next
[16:12:17.374]                           invokeRestart(restart)
[16:12:17.374]                           muffled <- TRUE
[16:12:17.374]                           break
[16:12:17.374]                         }
[16:12:17.374]                       }
[16:12:17.374]                     }
[16:12:17.374]                     invisible(muffled)
[16:12:17.374]                   }
[16:12:17.374]                   muffleCondition(cond)
[16:12:17.374]                 })
[16:12:17.374]             }))
[16:12:17.374]             future::FutureResult(value = ...future.value$value, 
[16:12:17.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.374]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.374]                     ...future.globalenv.names))
[16:12:17.374]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.374]         }, condition = base::local({
[16:12:17.374]             c <- base::c
[16:12:17.374]             inherits <- base::inherits
[16:12:17.374]             invokeRestart <- base::invokeRestart
[16:12:17.374]             length <- base::length
[16:12:17.374]             list <- base::list
[16:12:17.374]             seq.int <- base::seq.int
[16:12:17.374]             signalCondition <- base::signalCondition
[16:12:17.374]             sys.calls <- base::sys.calls
[16:12:17.374]             `[[` <- base::`[[`
[16:12:17.374]             `+` <- base::`+`
[16:12:17.374]             `<<-` <- base::`<<-`
[16:12:17.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.374]                   3L)]
[16:12:17.374]             }
[16:12:17.374]             function(cond) {
[16:12:17.374]                 is_error <- inherits(cond, "error")
[16:12:17.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.374]                   NULL)
[16:12:17.374]                 if (is_error) {
[16:12:17.374]                   sessionInformation <- function() {
[16:12:17.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.374]                       search = base::search(), system = base::Sys.info())
[16:12:17.374]                   }
[16:12:17.374]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.374]                     cond$call), session = sessionInformation(), 
[16:12:17.374]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.374]                   signalCondition(cond)
[16:12:17.374]                 }
[16:12:17.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.374]                 "immediateCondition"))) {
[16:12:17.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.374]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.374]                   if (TRUE && !signal) {
[16:12:17.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.374]                     {
[16:12:17.374]                       inherits <- base::inherits
[16:12:17.374]                       invokeRestart <- base::invokeRestart
[16:12:17.374]                       is.null <- base::is.null
[16:12:17.374]                       muffled <- FALSE
[16:12:17.374]                       if (inherits(cond, "message")) {
[16:12:17.374]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.374]                         if (muffled) 
[16:12:17.374]                           invokeRestart("muffleMessage")
[16:12:17.374]                       }
[16:12:17.374]                       else if (inherits(cond, "warning")) {
[16:12:17.374]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.374]                         if (muffled) 
[16:12:17.374]                           invokeRestart("muffleWarning")
[16:12:17.374]                       }
[16:12:17.374]                       else if (inherits(cond, "condition")) {
[16:12:17.374]                         if (!is.null(pattern)) {
[16:12:17.374]                           computeRestarts <- base::computeRestarts
[16:12:17.374]                           grepl <- base::grepl
[16:12:17.374]                           restarts <- computeRestarts(cond)
[16:12:17.374]                           for (restart in restarts) {
[16:12:17.374]                             name <- restart$name
[16:12:17.374]                             if (is.null(name)) 
[16:12:17.374]                               next
[16:12:17.374]                             if (!grepl(pattern, name)) 
[16:12:17.374]                               next
[16:12:17.374]                             invokeRestart(restart)
[16:12:17.374]                             muffled <- TRUE
[16:12:17.374]                             break
[16:12:17.374]                           }
[16:12:17.374]                         }
[16:12:17.374]                       }
[16:12:17.374]                       invisible(muffled)
[16:12:17.374]                     }
[16:12:17.374]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.374]                   }
[16:12:17.374]                 }
[16:12:17.374]                 else {
[16:12:17.374]                   if (TRUE) {
[16:12:17.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.374]                     {
[16:12:17.374]                       inherits <- base::inherits
[16:12:17.374]                       invokeRestart <- base::invokeRestart
[16:12:17.374]                       is.null <- base::is.null
[16:12:17.374]                       muffled <- FALSE
[16:12:17.374]                       if (inherits(cond, "message")) {
[16:12:17.374]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.374]                         if (muffled) 
[16:12:17.374]                           invokeRestart("muffleMessage")
[16:12:17.374]                       }
[16:12:17.374]                       else if (inherits(cond, "warning")) {
[16:12:17.374]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.374]                         if (muffled) 
[16:12:17.374]                           invokeRestart("muffleWarning")
[16:12:17.374]                       }
[16:12:17.374]                       else if (inherits(cond, "condition")) {
[16:12:17.374]                         if (!is.null(pattern)) {
[16:12:17.374]                           computeRestarts <- base::computeRestarts
[16:12:17.374]                           grepl <- base::grepl
[16:12:17.374]                           restarts <- computeRestarts(cond)
[16:12:17.374]                           for (restart in restarts) {
[16:12:17.374]                             name <- restart$name
[16:12:17.374]                             if (is.null(name)) 
[16:12:17.374]                               next
[16:12:17.374]                             if (!grepl(pattern, name)) 
[16:12:17.374]                               next
[16:12:17.374]                             invokeRestart(restart)
[16:12:17.374]                             muffled <- TRUE
[16:12:17.374]                             break
[16:12:17.374]                           }
[16:12:17.374]                         }
[16:12:17.374]                       }
[16:12:17.374]                       invisible(muffled)
[16:12:17.374]                     }
[16:12:17.374]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.374]                   }
[16:12:17.374]                 }
[16:12:17.374]             }
[16:12:17.374]         }))
[16:12:17.374]     }, error = function(ex) {
[16:12:17.374]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.374]                 ...future.rng), started = ...future.startTime, 
[16:12:17.374]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.374]             version = "1.8"), class = "FutureResult")
[16:12:17.374]     }, finally = {
[16:12:17.374]         if (!identical(...future.workdir, getwd())) 
[16:12:17.374]             setwd(...future.workdir)
[16:12:17.374]         {
[16:12:17.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.374]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.374]             }
[16:12:17.374]             base::options(...future.oldOptions)
[16:12:17.374]             if (.Platform$OS.type == "windows") {
[16:12:17.374]                 old_names <- names(...future.oldEnvVars)
[16:12:17.374]                 envs <- base::Sys.getenv()
[16:12:17.374]                 names <- names(envs)
[16:12:17.374]                 common <- intersect(names, old_names)
[16:12:17.374]                 added <- setdiff(names, old_names)
[16:12:17.374]                 removed <- setdiff(old_names, names)
[16:12:17.374]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.374]                   envs[common]]
[16:12:17.374]                 NAMES <- toupper(changed)
[16:12:17.374]                 args <- list()
[16:12:17.374]                 for (kk in seq_along(NAMES)) {
[16:12:17.374]                   name <- changed[[kk]]
[16:12:17.374]                   NAME <- NAMES[[kk]]
[16:12:17.374]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.374]                     next
[16:12:17.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.374]                 }
[16:12:17.374]                 NAMES <- toupper(added)
[16:12:17.374]                 for (kk in seq_along(NAMES)) {
[16:12:17.374]                   name <- added[[kk]]
[16:12:17.374]                   NAME <- NAMES[[kk]]
[16:12:17.374]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.374]                     next
[16:12:17.374]                   args[[name]] <- ""
[16:12:17.374]                 }
[16:12:17.374]                 NAMES <- toupper(removed)
[16:12:17.374]                 for (kk in seq_along(NAMES)) {
[16:12:17.374]                   name <- removed[[kk]]
[16:12:17.374]                   NAME <- NAMES[[kk]]
[16:12:17.374]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.374]                     next
[16:12:17.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.374]                 }
[16:12:17.374]                 if (length(args) > 0) 
[16:12:17.374]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.374]             }
[16:12:17.374]             else {
[16:12:17.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.374]             }
[16:12:17.374]             {
[16:12:17.374]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.374]                   0L) {
[16:12:17.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.374]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.374]                   base::options(opts)
[16:12:17.374]                 }
[16:12:17.374]                 {
[16:12:17.374]                   {
[16:12:17.374]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.374]                     NULL
[16:12:17.374]                   }
[16:12:17.374]                   options(future.plan = NULL)
[16:12:17.374]                   if (is.na(NA_character_)) 
[16:12:17.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.374]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:17.374]                     envir = parent.frame()) 
[16:12:17.374]                   {
[16:12:17.374]                     default_workers <- missing(workers)
[16:12:17.374]                     if (is.function(workers)) 
[16:12:17.374]                       workers <- workers()
[16:12:17.374]                     workers <- structure(as.integer(workers), 
[16:12:17.374]                       class = class(workers))
[16:12:17.374]                     stop_if_not(is.finite(workers), workers >= 
[16:12:17.374]                       1L)
[16:12:17.374]                     if ((workers == 1L && !inherits(workers, 
[16:12:17.374]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:17.374]                       if (default_workers) 
[16:12:17.374]                         supportsMulticore(warn = TRUE)
[16:12:17.374]                       return(sequential(..., envir = envir))
[16:12:17.374]                     }
[16:12:17.374]                     oopts <- options(mc.cores = workers)
[16:12:17.374]                     on.exit(options(oopts))
[16:12:17.374]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:17.374]                       envir = envir)
[16:12:17.374]                     if (!future$lazy) 
[16:12:17.374]                       future <- run(future)
[16:12:17.374]                     invisible(future)
[16:12:17.374]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.374]                 }
[16:12:17.374]             }
[16:12:17.374]         }
[16:12:17.374]     })
[16:12:17.374]     if (TRUE) {
[16:12:17.374]         base::sink(type = "output", split = FALSE)
[16:12:17.374]         if (TRUE) {
[16:12:17.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.374]         }
[16:12:17.374]         else {
[16:12:17.374]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.374]         }
[16:12:17.374]         base::close(...future.stdout)
[16:12:17.374]         ...future.stdout <- NULL
[16:12:17.374]     }
[16:12:17.374]     ...future.result$conditions <- ...future.conditions
[16:12:17.374]     ...future.result$finished <- base::Sys.time()
[16:12:17.374]     ...future.result
[16:12:17.374] }
[16:12:17.377] assign_globals() ...
[16:12:17.377] List of 1
[16:12:17.377]  $ a: num 10
[16:12:17.377]  - attr(*, "where")=List of 1
[16:12:17.377]   ..$ a:<environment: R_EmptyEnv> 
[16:12:17.377]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:17.377]  - attr(*, "resolved")= logi FALSE
[16:12:17.377]  - attr(*, "total_size")= num 56
[16:12:17.377]  - attr(*, "already-done")= logi TRUE
[16:12:17.379] - copied ‘a’ to environment
[16:12:17.380] assign_globals() ... done
[16:12:17.380] requestCore(): workers = 2
[16:12:17.382] MulticoreFuture started
[16:12:17.382] - Launch lazy future ... done
[16:12:17.382] run() for ‘MulticoreFuture’ ... done
[16:12:17.383] plan(): Setting new future strategy stack:
[16:12:17.383] List of future strategies:
[16:12:17.383] 1. sequential:
[16:12:17.383]    - args: function (..., envir = parent.frame())
[16:12:17.383]    - tweaked: FALSE
[16:12:17.383]    - call: NULL
[16:12:17.384] plan(): nbrOfWorkers() = 1
[16:12:17.386] plan(): Setting new future strategy stack:
[16:12:17.386] List of future strategies:
[16:12:17.386] 1. multicore:
[16:12:17.386]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:17.386]    - tweaked: FALSE
[16:12:17.386]    - call: plan(strategy)
[16:12:17.391] plan(): nbrOfWorkers() = 2
b = 11
*** %<-% with ‘multicore’ futures ... DONE
*** %<-% with ‘multisession’ futures ...
[16:12:17.393] plan(): Setting new future strategy stack:
[16:12:17.393] List of future strategies:
[16:12:17.393] 1. multisession:
[16:12:17.393]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:17.393]    - tweaked: FALSE
[16:12:17.393]    - call: plan(strategy)
[16:12:17.394] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:17.394] multisession:
[16:12:17.394] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:17.394] - tweaked: FALSE
[16:12:17.394] - call: plan(strategy)
[16:12:17.401] getGlobalsAndPackages() ...
[16:12:17.401] Not searching for globals
[16:12:17.401] - globals: [0] <none>
[16:12:17.401] getGlobalsAndPackages() ... DONE
[16:12:17.402] [local output] makeClusterPSOCK() ...
[16:12:17.443] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:17.449] [local output] Base port: 11786
[16:12:17.449] [local output] Getting setup options for 2 cluster nodes ...
[16:12:17.449] [local output]  - Node 1 of 2 ...
[16:12:17.450] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:17.450] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpiqGU7u/worker.rank=1.parallelly.parent=82299.1417b99bf357.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpiqGU7u/worker.rank=1.parallelly.parent=82299.1417b99bf357.pid")'’
[16:12:17.639] - Possible to infer worker's PID: TRUE
[16:12:17.639] [local output] Rscript port: 11786

[16:12:17.640] [local output]  - Node 2 of 2 ...
[16:12:17.640] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:17.641] [local output] Rscript port: 11786

[16:12:17.641] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:17.641] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:17.642] [local output] Setting up PSOCK nodes in parallel
[16:12:17.642] List of 36
[16:12:17.642]  $ worker          : chr "localhost"
[16:12:17.642]   ..- attr(*, "localhost")= logi TRUE
[16:12:17.642]  $ master          : chr "localhost"
[16:12:17.642]  $ port            : int 11786
[16:12:17.642]  $ connectTimeout  : num 120
[16:12:17.642]  $ timeout         : num 2592000
[16:12:17.642]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:17.642]  $ homogeneous     : logi TRUE
[16:12:17.642]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:17.642]  $ rscript_envs    : NULL
[16:12:17.642]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:17.642]  $ rscript_startup : NULL
[16:12:17.642]  $ rscript_sh      : chr "sh"
[16:12:17.642]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:17.642]  $ methods         : logi TRUE
[16:12:17.642]  $ socketOptions   : chr "no-delay"
[16:12:17.642]  $ useXDR          : logi FALSE
[16:12:17.642]  $ outfile         : chr "/dev/null"
[16:12:17.642]  $ renice          : int NA
[16:12:17.642]  $ rshcmd          : NULL
[16:12:17.642]  $ user            : chr(0) 
[16:12:17.642]  $ revtunnel       : logi FALSE
[16:12:17.642]  $ rshlogfile      : NULL
[16:12:17.642]  $ rshopts         : chr(0) 
[16:12:17.642]  $ rank            : int 1
[16:12:17.642]  $ manual          : logi FALSE
[16:12:17.642]  $ dryrun          : logi FALSE
[16:12:17.642]  $ quiet           : logi FALSE
[16:12:17.642]  $ setup_strategy  : chr "parallel"
[16:12:17.642]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:17.642]  $ pidfile         : chr "/tmp/RtmpiqGU7u/worker.rank=1.parallelly.parent=82299.1417b99bf357.pid"
[16:12:17.642]  $ rshcmd_label    : NULL
[16:12:17.642]  $ rsh_call        : NULL
[16:12:17.642]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:17.642]  $ localMachine    : logi TRUE
[16:12:17.642]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:17.642]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:17.642]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:17.642]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:17.642]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:17.642]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:17.642]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:17.642]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:17.642]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:17.642]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:17.642]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:17.642]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:17.642]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:17.642]  $ arguments       :List of 28
[16:12:17.642]   ..$ worker          : chr "localhost"
[16:12:17.642]   ..$ master          : NULL
[16:12:17.642]   ..$ port            : int 11786
[16:12:17.642]   ..$ connectTimeout  : num 120
[16:12:17.642]   ..$ timeout         : num 2592000
[16:12:17.642]   ..$ rscript         : NULL
[16:12:17.642]   ..$ homogeneous     : NULL
[16:12:17.642]   ..$ rscript_args    : NULL
[16:12:17.642]   ..$ rscript_envs    : NULL
[16:12:17.642]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:17.642]   ..$ rscript_startup : NULL
[16:12:17.642]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:17.642]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:17.642]   ..$ methods         : logi TRUE
[16:12:17.642]   ..$ socketOptions   : chr "no-delay"
[16:12:17.642]   ..$ useXDR          : logi FALSE
[16:12:17.642]   ..$ outfile         : chr "/dev/null"
[16:12:17.642]   ..$ renice          : int NA
[16:12:17.642]   ..$ rshcmd          : NULL
[16:12:17.642]   ..$ user            : NULL
[16:12:17.642]   ..$ revtunnel       : logi NA
[16:12:17.642]   ..$ rshlogfile      : NULL
[16:12:17.642]   ..$ rshopts         : NULL
[16:12:17.642]   ..$ rank            : int 1
[16:12:17.642]   ..$ manual          : logi FALSE
[16:12:17.642]   ..$ dryrun          : logi FALSE
[16:12:17.642]   ..$ quiet           : logi FALSE
[16:12:17.642]   ..$ setup_strategy  : chr "parallel"
[16:12:17.642]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:17.659] [local output] System call to launch all workers:
[16:12:17.659] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpiqGU7u/worker.rank=1.parallelly.parent=82299.1417b99bf357.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11786 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:17.659] [local output] Starting PSOCK main server
[16:12:17.660] [local output] Workers launched
[16:12:17.660] [local output] Waiting for workers to connect back
[16:12:17.661]  - [local output] 0 workers out of 2 ready
[16:12:17.925]  - [local output] 0 workers out of 2 ready
[16:12:17.926]  - [local output] 1 workers out of 2 ready
[16:12:17.926]  - [local output] 2 workers out of 2 ready
[16:12:17.926] [local output] Launching of workers completed
[16:12:17.926] [local output] Collecting session information from workers
[16:12:17.927] [local output]  - Worker #1 of 2
[16:12:17.928] [local output]  - Worker #2 of 2
[16:12:17.928] [local output] makeClusterPSOCK() ... done
[16:12:17.940] Packages needed by the future expression (n = 0): <none>
[16:12:17.940] Packages needed by future strategies (n = 0): <none>
[16:12:17.941] {
[16:12:17.941]     {
[16:12:17.941]         {
[16:12:17.941]             ...future.startTime <- base::Sys.time()
[16:12:17.941]             {
[16:12:17.941]                 {
[16:12:17.941]                   {
[16:12:17.941]                     {
[16:12:17.941]                       base::local({
[16:12:17.941]                         has_future <- base::requireNamespace("future", 
[16:12:17.941]                           quietly = TRUE)
[16:12:17.941]                         if (has_future) {
[16:12:17.941]                           ns <- base::getNamespace("future")
[16:12:17.941]                           version <- ns[[".package"]][["version"]]
[16:12:17.941]                           if (is.null(version)) 
[16:12:17.941]                             version <- utils::packageVersion("future")
[16:12:17.941]                         }
[16:12:17.941]                         else {
[16:12:17.941]                           version <- NULL
[16:12:17.941]                         }
[16:12:17.941]                         if (!has_future || version < "1.8.0") {
[16:12:17.941]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:17.941]                             "", base::R.version$version.string), 
[16:12:17.941]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:17.941]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:17.941]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:17.941]                               "release", "version")], collapse = " "), 
[16:12:17.941]                             hostname = base::Sys.info()[["nodename"]])
[16:12:17.941]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:17.941]                             info)
[16:12:17.941]                           info <- base::paste(info, collapse = "; ")
[16:12:17.941]                           if (!has_future) {
[16:12:17.941]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:17.941]                               info)
[16:12:17.941]                           }
[16:12:17.941]                           else {
[16:12:17.941]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:17.941]                               info, version)
[16:12:17.941]                           }
[16:12:17.941]                           base::stop(msg)
[16:12:17.941]                         }
[16:12:17.941]                       })
[16:12:17.941]                     }
[16:12:17.941]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:17.941]                     base::options(mc.cores = 1L)
[16:12:17.941]                   }
[16:12:17.941]                   options(future.plan = NULL)
[16:12:17.941]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.941]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:17.941]                 }
[16:12:17.941]                 ...future.workdir <- getwd()
[16:12:17.941]             }
[16:12:17.941]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:17.941]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:17.941]         }
[16:12:17.941]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:17.941]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:17.941]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:17.941]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:17.941]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:17.941]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:17.941]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:17.941]             base::names(...future.oldOptions))
[16:12:17.941]     }
[16:12:17.941]     if (FALSE) {
[16:12:17.941]     }
[16:12:17.941]     else {
[16:12:17.941]         if (TRUE) {
[16:12:17.941]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:17.941]                 open = "w")
[16:12:17.941]         }
[16:12:17.941]         else {
[16:12:17.941]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:17.941]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:17.941]         }
[16:12:17.941]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:17.941]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:17.941]             base::sink(type = "output", split = FALSE)
[16:12:17.941]             base::close(...future.stdout)
[16:12:17.941]         }, add = TRUE)
[16:12:17.941]     }
[16:12:17.941]     ...future.frame <- base::sys.nframe()
[16:12:17.941]     ...future.conditions <- base::list()
[16:12:17.941]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:17.941]     if (FALSE) {
[16:12:17.941]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:17.941]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:17.941]     }
[16:12:17.941]     ...future.result <- base::tryCatch({
[16:12:17.941]         base::withCallingHandlers({
[16:12:17.941]             ...future.value <- base::withVisible(base::local({
[16:12:17.941]                 ...future.makeSendCondition <- local({
[16:12:17.941]                   sendCondition <- NULL
[16:12:17.941]                   function(frame = 1L) {
[16:12:17.941]                     if (is.function(sendCondition)) 
[16:12:17.941]                       return(sendCondition)
[16:12:17.941]                     ns <- getNamespace("parallel")
[16:12:17.941]                     if (exists("sendData", mode = "function", 
[16:12:17.941]                       envir = ns)) {
[16:12:17.941]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:17.941]                         envir = ns)
[16:12:17.941]                       envir <- sys.frame(frame)
[16:12:17.941]                       master <- NULL
[16:12:17.941]                       while (!identical(envir, .GlobalEnv) && 
[16:12:17.941]                         !identical(envir, emptyenv())) {
[16:12:17.941]                         if (exists("master", mode = "list", envir = envir, 
[16:12:17.941]                           inherits = FALSE)) {
[16:12:17.941]                           master <- get("master", mode = "list", 
[16:12:17.941]                             envir = envir, inherits = FALSE)
[16:12:17.941]                           if (inherits(master, c("SOCKnode", 
[16:12:17.941]                             "SOCK0node"))) {
[16:12:17.941]                             sendCondition <<- function(cond) {
[16:12:17.941]                               data <- list(type = "VALUE", value = cond, 
[16:12:17.941]                                 success = TRUE)
[16:12:17.941]                               parallel_sendData(master, data)
[16:12:17.941]                             }
[16:12:17.941]                             return(sendCondition)
[16:12:17.941]                           }
[16:12:17.941]                         }
[16:12:17.941]                         frame <- frame + 1L
[16:12:17.941]                         envir <- sys.frame(frame)
[16:12:17.941]                       }
[16:12:17.941]                     }
[16:12:17.941]                     sendCondition <<- function(cond) NULL
[16:12:17.941]                   }
[16:12:17.941]                 })
[16:12:17.941]                 withCallingHandlers({
[16:12:17.941]                   NA
[16:12:17.941]                 }, immediateCondition = function(cond) {
[16:12:17.941]                   sendCondition <- ...future.makeSendCondition()
[16:12:17.941]                   sendCondition(cond)
[16:12:17.941]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.941]                   {
[16:12:17.941]                     inherits <- base::inherits
[16:12:17.941]                     invokeRestart <- base::invokeRestart
[16:12:17.941]                     is.null <- base::is.null
[16:12:17.941]                     muffled <- FALSE
[16:12:17.941]                     if (inherits(cond, "message")) {
[16:12:17.941]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:17.941]                       if (muffled) 
[16:12:17.941]                         invokeRestart("muffleMessage")
[16:12:17.941]                     }
[16:12:17.941]                     else if (inherits(cond, "warning")) {
[16:12:17.941]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:17.941]                       if (muffled) 
[16:12:17.941]                         invokeRestart("muffleWarning")
[16:12:17.941]                     }
[16:12:17.941]                     else if (inherits(cond, "condition")) {
[16:12:17.941]                       if (!is.null(pattern)) {
[16:12:17.941]                         computeRestarts <- base::computeRestarts
[16:12:17.941]                         grepl <- base::grepl
[16:12:17.941]                         restarts <- computeRestarts(cond)
[16:12:17.941]                         for (restart in restarts) {
[16:12:17.941]                           name <- restart$name
[16:12:17.941]                           if (is.null(name)) 
[16:12:17.941]                             next
[16:12:17.941]                           if (!grepl(pattern, name)) 
[16:12:17.941]                             next
[16:12:17.941]                           invokeRestart(restart)
[16:12:17.941]                           muffled <- TRUE
[16:12:17.941]                           break
[16:12:17.941]                         }
[16:12:17.941]                       }
[16:12:17.941]                     }
[16:12:17.941]                     invisible(muffled)
[16:12:17.941]                   }
[16:12:17.941]                   muffleCondition(cond)
[16:12:17.941]                 })
[16:12:17.941]             }))
[16:12:17.941]             future::FutureResult(value = ...future.value$value, 
[16:12:17.941]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.941]                   ...future.rng), globalenv = if (FALSE) 
[16:12:17.941]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:17.941]                     ...future.globalenv.names))
[16:12:17.941]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:17.941]         }, condition = base::local({
[16:12:17.941]             c <- base::c
[16:12:17.941]             inherits <- base::inherits
[16:12:17.941]             invokeRestart <- base::invokeRestart
[16:12:17.941]             length <- base::length
[16:12:17.941]             list <- base::list
[16:12:17.941]             seq.int <- base::seq.int
[16:12:17.941]             signalCondition <- base::signalCondition
[16:12:17.941]             sys.calls <- base::sys.calls
[16:12:17.941]             `[[` <- base::`[[`
[16:12:17.941]             `+` <- base::`+`
[16:12:17.941]             `<<-` <- base::`<<-`
[16:12:17.941]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:17.941]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:17.941]                   3L)]
[16:12:17.941]             }
[16:12:17.941]             function(cond) {
[16:12:17.941]                 is_error <- inherits(cond, "error")
[16:12:17.941]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:17.941]                   NULL)
[16:12:17.941]                 if (is_error) {
[16:12:17.941]                   sessionInformation <- function() {
[16:12:17.941]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:17.941]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:17.941]                       search = base::search(), system = base::Sys.info())
[16:12:17.941]                   }
[16:12:17.941]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.941]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:17.941]                     cond$call), session = sessionInformation(), 
[16:12:17.941]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:17.941]                   signalCondition(cond)
[16:12:17.941]                 }
[16:12:17.941]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:17.941]                 "immediateCondition"))) {
[16:12:17.941]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:17.941]                   ...future.conditions[[length(...future.conditions) + 
[16:12:17.941]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:17.941]                   if (TRUE && !signal) {
[16:12:17.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.941]                     {
[16:12:17.941]                       inherits <- base::inherits
[16:12:17.941]                       invokeRestart <- base::invokeRestart
[16:12:17.941]                       is.null <- base::is.null
[16:12:17.941]                       muffled <- FALSE
[16:12:17.941]                       if (inherits(cond, "message")) {
[16:12:17.941]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.941]                         if (muffled) 
[16:12:17.941]                           invokeRestart("muffleMessage")
[16:12:17.941]                       }
[16:12:17.941]                       else if (inherits(cond, "warning")) {
[16:12:17.941]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.941]                         if (muffled) 
[16:12:17.941]                           invokeRestart("muffleWarning")
[16:12:17.941]                       }
[16:12:17.941]                       else if (inherits(cond, "condition")) {
[16:12:17.941]                         if (!is.null(pattern)) {
[16:12:17.941]                           computeRestarts <- base::computeRestarts
[16:12:17.941]                           grepl <- base::grepl
[16:12:17.941]                           restarts <- computeRestarts(cond)
[16:12:17.941]                           for (restart in restarts) {
[16:12:17.941]                             name <- restart$name
[16:12:17.941]                             if (is.null(name)) 
[16:12:17.941]                               next
[16:12:17.941]                             if (!grepl(pattern, name)) 
[16:12:17.941]                               next
[16:12:17.941]                             invokeRestart(restart)
[16:12:17.941]                             muffled <- TRUE
[16:12:17.941]                             break
[16:12:17.941]                           }
[16:12:17.941]                         }
[16:12:17.941]                       }
[16:12:17.941]                       invisible(muffled)
[16:12:17.941]                     }
[16:12:17.941]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.941]                   }
[16:12:17.941]                 }
[16:12:17.941]                 else {
[16:12:17.941]                   if (TRUE) {
[16:12:17.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:17.941]                     {
[16:12:17.941]                       inherits <- base::inherits
[16:12:17.941]                       invokeRestart <- base::invokeRestart
[16:12:17.941]                       is.null <- base::is.null
[16:12:17.941]                       muffled <- FALSE
[16:12:17.941]                       if (inherits(cond, "message")) {
[16:12:17.941]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:17.941]                         if (muffled) 
[16:12:17.941]                           invokeRestart("muffleMessage")
[16:12:17.941]                       }
[16:12:17.941]                       else if (inherits(cond, "warning")) {
[16:12:17.941]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:17.941]                         if (muffled) 
[16:12:17.941]                           invokeRestart("muffleWarning")
[16:12:17.941]                       }
[16:12:17.941]                       else if (inherits(cond, "condition")) {
[16:12:17.941]                         if (!is.null(pattern)) {
[16:12:17.941]                           computeRestarts <- base::computeRestarts
[16:12:17.941]                           grepl <- base::grepl
[16:12:17.941]                           restarts <- computeRestarts(cond)
[16:12:17.941]                           for (restart in restarts) {
[16:12:17.941]                             name <- restart$name
[16:12:17.941]                             if (is.null(name)) 
[16:12:17.941]                               next
[16:12:17.941]                             if (!grepl(pattern, name)) 
[16:12:17.941]                               next
[16:12:17.941]                             invokeRestart(restart)
[16:12:17.941]                             muffled <- TRUE
[16:12:17.941]                             break
[16:12:17.941]                           }
[16:12:17.941]                         }
[16:12:17.941]                       }
[16:12:17.941]                       invisible(muffled)
[16:12:17.941]                     }
[16:12:17.941]                     muffleCondition(cond, pattern = "^muffle")
[16:12:17.941]                   }
[16:12:17.941]                 }
[16:12:17.941]             }
[16:12:17.941]         }))
[16:12:17.941]     }, error = function(ex) {
[16:12:17.941]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:17.941]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:17.941]                 ...future.rng), started = ...future.startTime, 
[16:12:17.941]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:17.941]             version = "1.8"), class = "FutureResult")
[16:12:17.941]     }, finally = {
[16:12:17.941]         if (!identical(...future.workdir, getwd())) 
[16:12:17.941]             setwd(...future.workdir)
[16:12:17.941]         {
[16:12:17.941]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:17.941]                 ...future.oldOptions$nwarnings <- NULL
[16:12:17.941]             }
[16:12:17.941]             base::options(...future.oldOptions)
[16:12:17.941]             if (.Platform$OS.type == "windows") {
[16:12:17.941]                 old_names <- names(...future.oldEnvVars)
[16:12:17.941]                 envs <- base::Sys.getenv()
[16:12:17.941]                 names <- names(envs)
[16:12:17.941]                 common <- intersect(names, old_names)
[16:12:17.941]                 added <- setdiff(names, old_names)
[16:12:17.941]                 removed <- setdiff(old_names, names)
[16:12:17.941]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:17.941]                   envs[common]]
[16:12:17.941]                 NAMES <- toupper(changed)
[16:12:17.941]                 args <- list()
[16:12:17.941]                 for (kk in seq_along(NAMES)) {
[16:12:17.941]                   name <- changed[[kk]]
[16:12:17.941]                   NAME <- NAMES[[kk]]
[16:12:17.941]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.941]                     next
[16:12:17.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.941]                 }
[16:12:17.941]                 NAMES <- toupper(added)
[16:12:17.941]                 for (kk in seq_along(NAMES)) {
[16:12:17.941]                   name <- added[[kk]]
[16:12:17.941]                   NAME <- NAMES[[kk]]
[16:12:17.941]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.941]                     next
[16:12:17.941]                   args[[name]] <- ""
[16:12:17.941]                 }
[16:12:17.941]                 NAMES <- toupper(removed)
[16:12:17.941]                 for (kk in seq_along(NAMES)) {
[16:12:17.941]                   name <- removed[[kk]]
[16:12:17.941]                   NAME <- NAMES[[kk]]
[16:12:17.941]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:17.941]                     next
[16:12:17.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:17.941]                 }
[16:12:17.941]                 if (length(args) > 0) 
[16:12:17.941]                   base::do.call(base::Sys.setenv, args = args)
[16:12:17.941]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:17.941]             }
[16:12:17.941]             else {
[16:12:17.941]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:17.941]             }
[16:12:17.941]             {
[16:12:17.941]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:17.941]                   0L) {
[16:12:17.941]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:17.941]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:17.941]                   base::options(opts)
[16:12:17.941]                 }
[16:12:17.941]                 {
[16:12:17.941]                   {
[16:12:17.941]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:17.941]                     NULL
[16:12:17.941]                   }
[16:12:17.941]                   options(future.plan = NULL)
[16:12:17.941]                   if (is.na(NA_character_)) 
[16:12:17.941]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:17.941]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:17.941]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:17.941]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:17.941]                     envir = parent.frame()) 
[16:12:17.941]                   {
[16:12:17.941]                     if (is.function(workers)) 
[16:12:17.941]                       workers <- workers()
[16:12:17.941]                     workers <- structure(as.integer(workers), 
[16:12:17.941]                       class = class(workers))
[16:12:17.941]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:17.941]                       workers >= 1)
[16:12:17.941]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:17.941]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:17.941]                     }
[16:12:17.941]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:17.941]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:17.941]                       envir = envir)
[16:12:17.941]                     if (!future$lazy) 
[16:12:17.941]                       future <- run(future)
[16:12:17.941]                     invisible(future)
[16:12:17.941]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:17.941]                 }
[16:12:17.941]             }
[16:12:17.941]         }
[16:12:17.941]     })
[16:12:17.941]     if (TRUE) {
[16:12:17.941]         base::sink(type = "output", split = FALSE)
[16:12:17.941]         if (TRUE) {
[16:12:17.941]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:17.941]         }
[16:12:17.941]         else {
[16:12:17.941]             ...future.result["stdout"] <- base::list(NULL)
[16:12:17.941]         }
[16:12:17.941]         base::close(...future.stdout)
[16:12:17.941]         ...future.stdout <- NULL
[16:12:17.941]     }
[16:12:17.941]     ...future.result$conditions <- ...future.conditions
[16:12:17.941]     ...future.result$finished <- base::Sys.time()
[16:12:17.941]     ...future.result
[16:12:17.941] }
[16:12:18.013] MultisessionFuture started
[16:12:18.013] result() for ClusterFuture ...
[16:12:18.014] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.014] - Validating connection of MultisessionFuture
[16:12:18.044] - received message: FutureResult
[16:12:18.044] - Received FutureResult
[16:12:18.044] - Erased future from FutureRegistry
[16:12:18.045] result() for ClusterFuture ...
[16:12:18.045] - result already collected: FutureResult
[16:12:18.045] result() for ClusterFuture ... done
[16:12:18.045] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.045] result() for ClusterFuture ... done
[16:12:18.045] result() for ClusterFuture ...
[16:12:18.045] - result already collected: FutureResult
[16:12:18.045] result() for ClusterFuture ... done
[16:12:18.046] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:18.049] plan(): nbrOfWorkers() = 2
** Future evaluation without globals
[16:12:18.050] getGlobalsAndPackages() ...
[16:12:18.050] Searching for globals...
[16:12:18.051] - globals found: [2] ‘{’, ‘<-’
[16:12:18.051] Searching for globals ... DONE
[16:12:18.051] Resolving globals: FALSE
[16:12:18.052] 
[16:12:18.052] 
[16:12:18.052] getGlobalsAndPackages() ... DONE
[16:12:18.052] run() for ‘Future’ ...
[16:12:18.052] - state: ‘created’
[16:12:18.053] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.067] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.068] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.068]   - Field: ‘node’
[16:12:18.068]   - Field: ‘label’
[16:12:18.068]   - Field: ‘local’
[16:12:18.068]   - Field: ‘owner’
[16:12:18.068]   - Field: ‘envir’
[16:12:18.068]   - Field: ‘workers’
[16:12:18.068]   - Field: ‘packages’
[16:12:18.068]   - Field: ‘gc’
[16:12:18.069]   - Field: ‘conditions’
[16:12:18.069]   - Field: ‘persistent’
[16:12:18.069]   - Field: ‘expr’
[16:12:18.069]   - Field: ‘uuid’
[16:12:18.069]   - Field: ‘seed’
[16:12:18.069]   - Field: ‘version’
[16:12:18.069]   - Field: ‘result’
[16:12:18.069]   - Field: ‘asynchronous’
[16:12:18.069]   - Field: ‘calls’
[16:12:18.070]   - Field: ‘globals’
[16:12:18.070]   - Field: ‘stdout’
[16:12:18.070]   - Field: ‘earlySignal’
[16:12:18.070]   - Field: ‘lazy’
[16:12:18.070]   - Field: ‘state’
[16:12:18.070] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.070] - Launch lazy future ...
[16:12:18.071] Packages needed by the future expression (n = 0): <none>
[16:12:18.071] Packages needed by future strategies (n = 0): <none>
[16:12:18.071] {
[16:12:18.071]     {
[16:12:18.071]         {
[16:12:18.071]             ...future.startTime <- base::Sys.time()
[16:12:18.071]             {
[16:12:18.071]                 {
[16:12:18.071]                   {
[16:12:18.071]                     {
[16:12:18.071]                       base::local({
[16:12:18.071]                         has_future <- base::requireNamespace("future", 
[16:12:18.071]                           quietly = TRUE)
[16:12:18.071]                         if (has_future) {
[16:12:18.071]                           ns <- base::getNamespace("future")
[16:12:18.071]                           version <- ns[[".package"]][["version"]]
[16:12:18.071]                           if (is.null(version)) 
[16:12:18.071]                             version <- utils::packageVersion("future")
[16:12:18.071]                         }
[16:12:18.071]                         else {
[16:12:18.071]                           version <- NULL
[16:12:18.071]                         }
[16:12:18.071]                         if (!has_future || version < "1.8.0") {
[16:12:18.071]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.071]                             "", base::R.version$version.string), 
[16:12:18.071]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.071]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.071]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.071]                               "release", "version")], collapse = " "), 
[16:12:18.071]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.071]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.071]                             info)
[16:12:18.071]                           info <- base::paste(info, collapse = "; ")
[16:12:18.071]                           if (!has_future) {
[16:12:18.071]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.071]                               info)
[16:12:18.071]                           }
[16:12:18.071]                           else {
[16:12:18.071]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.071]                               info, version)
[16:12:18.071]                           }
[16:12:18.071]                           base::stop(msg)
[16:12:18.071]                         }
[16:12:18.071]                       })
[16:12:18.071]                     }
[16:12:18.071]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.071]                     base::options(mc.cores = 1L)
[16:12:18.071]                   }
[16:12:18.071]                   options(future.plan = NULL)
[16:12:18.071]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.071]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.071]                 }
[16:12:18.071]                 ...future.workdir <- getwd()
[16:12:18.071]             }
[16:12:18.071]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.071]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.071]         }
[16:12:18.071]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.071]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.071]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.071]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.071]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.071]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.071]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.071]             base::names(...future.oldOptions))
[16:12:18.071]     }
[16:12:18.071]     if (FALSE) {
[16:12:18.071]     }
[16:12:18.071]     else {
[16:12:18.071]         if (TRUE) {
[16:12:18.071]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.071]                 open = "w")
[16:12:18.071]         }
[16:12:18.071]         else {
[16:12:18.071]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.071]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.071]         }
[16:12:18.071]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.071]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.071]             base::sink(type = "output", split = FALSE)
[16:12:18.071]             base::close(...future.stdout)
[16:12:18.071]         }, add = TRUE)
[16:12:18.071]     }
[16:12:18.071]     ...future.frame <- base::sys.nframe()
[16:12:18.071]     ...future.conditions <- base::list()
[16:12:18.071]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.071]     if (FALSE) {
[16:12:18.071]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.071]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.071]     }
[16:12:18.071]     ...future.result <- base::tryCatch({
[16:12:18.071]         base::withCallingHandlers({
[16:12:18.071]             ...future.value <- base::withVisible(base::local({
[16:12:18.071]                 ...future.makeSendCondition <- local({
[16:12:18.071]                   sendCondition <- NULL
[16:12:18.071]                   function(frame = 1L) {
[16:12:18.071]                     if (is.function(sendCondition)) 
[16:12:18.071]                       return(sendCondition)
[16:12:18.071]                     ns <- getNamespace("parallel")
[16:12:18.071]                     if (exists("sendData", mode = "function", 
[16:12:18.071]                       envir = ns)) {
[16:12:18.071]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.071]                         envir = ns)
[16:12:18.071]                       envir <- sys.frame(frame)
[16:12:18.071]                       master <- NULL
[16:12:18.071]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.071]                         !identical(envir, emptyenv())) {
[16:12:18.071]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.071]                           inherits = FALSE)) {
[16:12:18.071]                           master <- get("master", mode = "list", 
[16:12:18.071]                             envir = envir, inherits = FALSE)
[16:12:18.071]                           if (inherits(master, c("SOCKnode", 
[16:12:18.071]                             "SOCK0node"))) {
[16:12:18.071]                             sendCondition <<- function(cond) {
[16:12:18.071]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.071]                                 success = TRUE)
[16:12:18.071]                               parallel_sendData(master, data)
[16:12:18.071]                             }
[16:12:18.071]                             return(sendCondition)
[16:12:18.071]                           }
[16:12:18.071]                         }
[16:12:18.071]                         frame <- frame + 1L
[16:12:18.071]                         envir <- sys.frame(frame)
[16:12:18.071]                       }
[16:12:18.071]                     }
[16:12:18.071]                     sendCondition <<- function(cond) NULL
[16:12:18.071]                   }
[16:12:18.071]                 })
[16:12:18.071]                 withCallingHandlers({
[16:12:18.071]                   {
[16:12:18.071]                     x <- 1
[16:12:18.071]                   }
[16:12:18.071]                 }, immediateCondition = function(cond) {
[16:12:18.071]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.071]                   sendCondition(cond)
[16:12:18.071]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.071]                   {
[16:12:18.071]                     inherits <- base::inherits
[16:12:18.071]                     invokeRestart <- base::invokeRestart
[16:12:18.071]                     is.null <- base::is.null
[16:12:18.071]                     muffled <- FALSE
[16:12:18.071]                     if (inherits(cond, "message")) {
[16:12:18.071]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.071]                       if (muffled) 
[16:12:18.071]                         invokeRestart("muffleMessage")
[16:12:18.071]                     }
[16:12:18.071]                     else if (inherits(cond, "warning")) {
[16:12:18.071]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.071]                       if (muffled) 
[16:12:18.071]                         invokeRestart("muffleWarning")
[16:12:18.071]                     }
[16:12:18.071]                     else if (inherits(cond, "condition")) {
[16:12:18.071]                       if (!is.null(pattern)) {
[16:12:18.071]                         computeRestarts <- base::computeRestarts
[16:12:18.071]                         grepl <- base::grepl
[16:12:18.071]                         restarts <- computeRestarts(cond)
[16:12:18.071]                         for (restart in restarts) {
[16:12:18.071]                           name <- restart$name
[16:12:18.071]                           if (is.null(name)) 
[16:12:18.071]                             next
[16:12:18.071]                           if (!grepl(pattern, name)) 
[16:12:18.071]                             next
[16:12:18.071]                           invokeRestart(restart)
[16:12:18.071]                           muffled <- TRUE
[16:12:18.071]                           break
[16:12:18.071]                         }
[16:12:18.071]                       }
[16:12:18.071]                     }
[16:12:18.071]                     invisible(muffled)
[16:12:18.071]                   }
[16:12:18.071]                   muffleCondition(cond)
[16:12:18.071]                 })
[16:12:18.071]             }))
[16:12:18.071]             future::FutureResult(value = ...future.value$value, 
[16:12:18.071]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.071]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.071]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.071]                     ...future.globalenv.names))
[16:12:18.071]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.071]         }, condition = base::local({
[16:12:18.071]             c <- base::c
[16:12:18.071]             inherits <- base::inherits
[16:12:18.071]             invokeRestart <- base::invokeRestart
[16:12:18.071]             length <- base::length
[16:12:18.071]             list <- base::list
[16:12:18.071]             seq.int <- base::seq.int
[16:12:18.071]             signalCondition <- base::signalCondition
[16:12:18.071]             sys.calls <- base::sys.calls
[16:12:18.071]             `[[` <- base::`[[`
[16:12:18.071]             `+` <- base::`+`
[16:12:18.071]             `<<-` <- base::`<<-`
[16:12:18.071]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.071]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.071]                   3L)]
[16:12:18.071]             }
[16:12:18.071]             function(cond) {
[16:12:18.071]                 is_error <- inherits(cond, "error")
[16:12:18.071]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.071]                   NULL)
[16:12:18.071]                 if (is_error) {
[16:12:18.071]                   sessionInformation <- function() {
[16:12:18.071]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.071]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.071]                       search = base::search(), system = base::Sys.info())
[16:12:18.071]                   }
[16:12:18.071]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.071]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.071]                     cond$call), session = sessionInformation(), 
[16:12:18.071]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.071]                   signalCondition(cond)
[16:12:18.071]                 }
[16:12:18.071]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.071]                 "immediateCondition"))) {
[16:12:18.071]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.071]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.071]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.071]                   if (TRUE && !signal) {
[16:12:18.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.071]                     {
[16:12:18.071]                       inherits <- base::inherits
[16:12:18.071]                       invokeRestart <- base::invokeRestart
[16:12:18.071]                       is.null <- base::is.null
[16:12:18.071]                       muffled <- FALSE
[16:12:18.071]                       if (inherits(cond, "message")) {
[16:12:18.071]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.071]                         if (muffled) 
[16:12:18.071]                           invokeRestart("muffleMessage")
[16:12:18.071]                       }
[16:12:18.071]                       else if (inherits(cond, "warning")) {
[16:12:18.071]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.071]                         if (muffled) 
[16:12:18.071]                           invokeRestart("muffleWarning")
[16:12:18.071]                       }
[16:12:18.071]                       else if (inherits(cond, "condition")) {
[16:12:18.071]                         if (!is.null(pattern)) {
[16:12:18.071]                           computeRestarts <- base::computeRestarts
[16:12:18.071]                           grepl <- base::grepl
[16:12:18.071]                           restarts <- computeRestarts(cond)
[16:12:18.071]                           for (restart in restarts) {
[16:12:18.071]                             name <- restart$name
[16:12:18.071]                             if (is.null(name)) 
[16:12:18.071]                               next
[16:12:18.071]                             if (!grepl(pattern, name)) 
[16:12:18.071]                               next
[16:12:18.071]                             invokeRestart(restart)
[16:12:18.071]                             muffled <- TRUE
[16:12:18.071]                             break
[16:12:18.071]                           }
[16:12:18.071]                         }
[16:12:18.071]                       }
[16:12:18.071]                       invisible(muffled)
[16:12:18.071]                     }
[16:12:18.071]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.071]                   }
[16:12:18.071]                 }
[16:12:18.071]                 else {
[16:12:18.071]                   if (TRUE) {
[16:12:18.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.071]                     {
[16:12:18.071]                       inherits <- base::inherits
[16:12:18.071]                       invokeRestart <- base::invokeRestart
[16:12:18.071]                       is.null <- base::is.null
[16:12:18.071]                       muffled <- FALSE
[16:12:18.071]                       if (inherits(cond, "message")) {
[16:12:18.071]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.071]                         if (muffled) 
[16:12:18.071]                           invokeRestart("muffleMessage")
[16:12:18.071]                       }
[16:12:18.071]                       else if (inherits(cond, "warning")) {
[16:12:18.071]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.071]                         if (muffled) 
[16:12:18.071]                           invokeRestart("muffleWarning")
[16:12:18.071]                       }
[16:12:18.071]                       else if (inherits(cond, "condition")) {
[16:12:18.071]                         if (!is.null(pattern)) {
[16:12:18.071]                           computeRestarts <- base::computeRestarts
[16:12:18.071]                           grepl <- base::grepl
[16:12:18.071]                           restarts <- computeRestarts(cond)
[16:12:18.071]                           for (restart in restarts) {
[16:12:18.071]                             name <- restart$name
[16:12:18.071]                             if (is.null(name)) 
[16:12:18.071]                               next
[16:12:18.071]                             if (!grepl(pattern, name)) 
[16:12:18.071]                               next
[16:12:18.071]                             invokeRestart(restart)
[16:12:18.071]                             muffled <- TRUE
[16:12:18.071]                             break
[16:12:18.071]                           }
[16:12:18.071]                         }
[16:12:18.071]                       }
[16:12:18.071]                       invisible(muffled)
[16:12:18.071]                     }
[16:12:18.071]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.071]                   }
[16:12:18.071]                 }
[16:12:18.071]             }
[16:12:18.071]         }))
[16:12:18.071]     }, error = function(ex) {
[16:12:18.071]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.071]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.071]                 ...future.rng), started = ...future.startTime, 
[16:12:18.071]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.071]             version = "1.8"), class = "FutureResult")
[16:12:18.071]     }, finally = {
[16:12:18.071]         if (!identical(...future.workdir, getwd())) 
[16:12:18.071]             setwd(...future.workdir)
[16:12:18.071]         {
[16:12:18.071]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.071]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.071]             }
[16:12:18.071]             base::options(...future.oldOptions)
[16:12:18.071]             if (.Platform$OS.type == "windows") {
[16:12:18.071]                 old_names <- names(...future.oldEnvVars)
[16:12:18.071]                 envs <- base::Sys.getenv()
[16:12:18.071]                 names <- names(envs)
[16:12:18.071]                 common <- intersect(names, old_names)
[16:12:18.071]                 added <- setdiff(names, old_names)
[16:12:18.071]                 removed <- setdiff(old_names, names)
[16:12:18.071]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.071]                   envs[common]]
[16:12:18.071]                 NAMES <- toupper(changed)
[16:12:18.071]                 args <- list()
[16:12:18.071]                 for (kk in seq_along(NAMES)) {
[16:12:18.071]                   name <- changed[[kk]]
[16:12:18.071]                   NAME <- NAMES[[kk]]
[16:12:18.071]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.071]                     next
[16:12:18.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.071]                 }
[16:12:18.071]                 NAMES <- toupper(added)
[16:12:18.071]                 for (kk in seq_along(NAMES)) {
[16:12:18.071]                   name <- added[[kk]]
[16:12:18.071]                   NAME <- NAMES[[kk]]
[16:12:18.071]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.071]                     next
[16:12:18.071]                   args[[name]] <- ""
[16:12:18.071]                 }
[16:12:18.071]                 NAMES <- toupper(removed)
[16:12:18.071]                 for (kk in seq_along(NAMES)) {
[16:12:18.071]                   name <- removed[[kk]]
[16:12:18.071]                   NAME <- NAMES[[kk]]
[16:12:18.071]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.071]                     next
[16:12:18.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.071]                 }
[16:12:18.071]                 if (length(args) > 0) 
[16:12:18.071]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.071]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.071]             }
[16:12:18.071]             else {
[16:12:18.071]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.071]             }
[16:12:18.071]             {
[16:12:18.071]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.071]                   0L) {
[16:12:18.071]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.071]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.071]                   base::options(opts)
[16:12:18.071]                 }
[16:12:18.071]                 {
[16:12:18.071]                   {
[16:12:18.071]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.071]                     NULL
[16:12:18.071]                   }
[16:12:18.071]                   options(future.plan = NULL)
[16:12:18.071]                   if (is.na(NA_character_)) 
[16:12:18.071]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.071]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.071]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.071]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.071]                     envir = parent.frame()) 
[16:12:18.071]                   {
[16:12:18.071]                     if (is.function(workers)) 
[16:12:18.071]                       workers <- workers()
[16:12:18.071]                     workers <- structure(as.integer(workers), 
[16:12:18.071]                       class = class(workers))
[16:12:18.071]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.071]                       workers >= 1)
[16:12:18.071]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.071]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.071]                     }
[16:12:18.071]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.071]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.071]                       envir = envir)
[16:12:18.071]                     if (!future$lazy) 
[16:12:18.071]                       future <- run(future)
[16:12:18.071]                     invisible(future)
[16:12:18.071]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.071]                 }
[16:12:18.071]             }
[16:12:18.071]         }
[16:12:18.071]     })
[16:12:18.071]     if (TRUE) {
[16:12:18.071]         base::sink(type = "output", split = FALSE)
[16:12:18.071]         if (TRUE) {
[16:12:18.071]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.071]         }
[16:12:18.071]         else {
[16:12:18.071]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.071]         }
[16:12:18.071]         base::close(...future.stdout)
[16:12:18.071]         ...future.stdout <- NULL
[16:12:18.071]     }
[16:12:18.071]     ...future.result$conditions <- ...future.conditions
[16:12:18.071]     ...future.result$finished <- base::Sys.time()
[16:12:18.071]     ...future.result
[16:12:18.071] }
[16:12:18.075] MultisessionFuture started
[16:12:18.075] - Launch lazy future ... done
[16:12:18.075] run() for ‘MultisessionFuture’ ... done
[16:12:18.075] result() for ClusterFuture ...
[16:12:18.075] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.075] - Validating connection of MultisessionFuture
[16:12:18.120] - received message: FutureResult
[16:12:18.120] - Received FutureResult
[16:12:18.120] - Erased future from FutureRegistry
[16:12:18.120] result() for ClusterFuture ...
[16:12:18.121] - result already collected: FutureResult
[16:12:18.121] result() for ClusterFuture ... done
[16:12:18.121] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.121] result() for ClusterFuture ... done
[16:12:18.121] result() for ClusterFuture ...
[16:12:18.121] - result already collected: FutureResult
[16:12:18.121] result() for ClusterFuture ... done
** Future evaluation with globals
[16:12:18.122] getGlobalsAndPackages() ...
[16:12:18.122] Searching for globals...
[16:12:18.123] - globals found: [3] ‘{’, ‘<-’, ‘a’
[16:12:18.123] Searching for globals ... DONE
[16:12:18.123] Resolving globals: FALSE
[16:12:18.124] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:18.124] The total size of the 1 globals exported for future expression (‘{; x <- a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:12:18.124] - globals: [1] ‘a’
[16:12:18.124] 
[16:12:18.125] getGlobalsAndPackages() ... DONE
[16:12:18.125] run() for ‘Future’ ...
[16:12:18.125] - state: ‘created’
[16:12:18.125] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.140] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.140] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.140]   - Field: ‘node’
[16:12:18.140]   - Field: ‘label’
[16:12:18.140]   - Field: ‘local’
[16:12:18.140]   - Field: ‘owner’
[16:12:18.141]   - Field: ‘envir’
[16:12:18.141]   - Field: ‘workers’
[16:12:18.141]   - Field: ‘packages’
[16:12:18.141]   - Field: ‘gc’
[16:12:18.141]   - Field: ‘conditions’
[16:12:18.141]   - Field: ‘persistent’
[16:12:18.141]   - Field: ‘expr’
[16:12:18.141]   - Field: ‘uuid’
[16:12:18.141]   - Field: ‘seed’
[16:12:18.142]   - Field: ‘version’
[16:12:18.142]   - Field: ‘result’
[16:12:18.142]   - Field: ‘asynchronous’
[16:12:18.142]   - Field: ‘calls’
[16:12:18.142]   - Field: ‘globals’
[16:12:18.142]   - Field: ‘stdout’
[16:12:18.142]   - Field: ‘earlySignal’
[16:12:18.142]   - Field: ‘lazy’
[16:12:18.142]   - Field: ‘state’
[16:12:18.143] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.143] - Launch lazy future ...
[16:12:18.143] Packages needed by the future expression (n = 0): <none>
[16:12:18.143] Packages needed by future strategies (n = 0): <none>
[16:12:18.144] {
[16:12:18.144]     {
[16:12:18.144]         {
[16:12:18.144]             ...future.startTime <- base::Sys.time()
[16:12:18.144]             {
[16:12:18.144]                 {
[16:12:18.144]                   {
[16:12:18.144]                     {
[16:12:18.144]                       base::local({
[16:12:18.144]                         has_future <- base::requireNamespace("future", 
[16:12:18.144]                           quietly = TRUE)
[16:12:18.144]                         if (has_future) {
[16:12:18.144]                           ns <- base::getNamespace("future")
[16:12:18.144]                           version <- ns[[".package"]][["version"]]
[16:12:18.144]                           if (is.null(version)) 
[16:12:18.144]                             version <- utils::packageVersion("future")
[16:12:18.144]                         }
[16:12:18.144]                         else {
[16:12:18.144]                           version <- NULL
[16:12:18.144]                         }
[16:12:18.144]                         if (!has_future || version < "1.8.0") {
[16:12:18.144]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.144]                             "", base::R.version$version.string), 
[16:12:18.144]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.144]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.144]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.144]                               "release", "version")], collapse = " "), 
[16:12:18.144]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.144]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.144]                             info)
[16:12:18.144]                           info <- base::paste(info, collapse = "; ")
[16:12:18.144]                           if (!has_future) {
[16:12:18.144]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.144]                               info)
[16:12:18.144]                           }
[16:12:18.144]                           else {
[16:12:18.144]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.144]                               info, version)
[16:12:18.144]                           }
[16:12:18.144]                           base::stop(msg)
[16:12:18.144]                         }
[16:12:18.144]                       })
[16:12:18.144]                     }
[16:12:18.144]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.144]                     base::options(mc.cores = 1L)
[16:12:18.144]                   }
[16:12:18.144]                   options(future.plan = NULL)
[16:12:18.144]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.144]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.144]                 }
[16:12:18.144]                 ...future.workdir <- getwd()
[16:12:18.144]             }
[16:12:18.144]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.144]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.144]         }
[16:12:18.144]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.144]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.144]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.144]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.144]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.144]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.144]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.144]             base::names(...future.oldOptions))
[16:12:18.144]     }
[16:12:18.144]     if (FALSE) {
[16:12:18.144]     }
[16:12:18.144]     else {
[16:12:18.144]         if (TRUE) {
[16:12:18.144]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.144]                 open = "w")
[16:12:18.144]         }
[16:12:18.144]         else {
[16:12:18.144]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.144]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.144]         }
[16:12:18.144]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.144]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.144]             base::sink(type = "output", split = FALSE)
[16:12:18.144]             base::close(...future.stdout)
[16:12:18.144]         }, add = TRUE)
[16:12:18.144]     }
[16:12:18.144]     ...future.frame <- base::sys.nframe()
[16:12:18.144]     ...future.conditions <- base::list()
[16:12:18.144]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.144]     if (FALSE) {
[16:12:18.144]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.144]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.144]     }
[16:12:18.144]     ...future.result <- base::tryCatch({
[16:12:18.144]         base::withCallingHandlers({
[16:12:18.144]             ...future.value <- base::withVisible(base::local({
[16:12:18.144]                 ...future.makeSendCondition <- local({
[16:12:18.144]                   sendCondition <- NULL
[16:12:18.144]                   function(frame = 1L) {
[16:12:18.144]                     if (is.function(sendCondition)) 
[16:12:18.144]                       return(sendCondition)
[16:12:18.144]                     ns <- getNamespace("parallel")
[16:12:18.144]                     if (exists("sendData", mode = "function", 
[16:12:18.144]                       envir = ns)) {
[16:12:18.144]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.144]                         envir = ns)
[16:12:18.144]                       envir <- sys.frame(frame)
[16:12:18.144]                       master <- NULL
[16:12:18.144]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.144]                         !identical(envir, emptyenv())) {
[16:12:18.144]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.144]                           inherits = FALSE)) {
[16:12:18.144]                           master <- get("master", mode = "list", 
[16:12:18.144]                             envir = envir, inherits = FALSE)
[16:12:18.144]                           if (inherits(master, c("SOCKnode", 
[16:12:18.144]                             "SOCK0node"))) {
[16:12:18.144]                             sendCondition <<- function(cond) {
[16:12:18.144]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.144]                                 success = TRUE)
[16:12:18.144]                               parallel_sendData(master, data)
[16:12:18.144]                             }
[16:12:18.144]                             return(sendCondition)
[16:12:18.144]                           }
[16:12:18.144]                         }
[16:12:18.144]                         frame <- frame + 1L
[16:12:18.144]                         envir <- sys.frame(frame)
[16:12:18.144]                       }
[16:12:18.144]                     }
[16:12:18.144]                     sendCondition <<- function(cond) NULL
[16:12:18.144]                   }
[16:12:18.144]                 })
[16:12:18.144]                 withCallingHandlers({
[16:12:18.144]                   {
[16:12:18.144]                     x <- a
[16:12:18.144]                   }
[16:12:18.144]                 }, immediateCondition = function(cond) {
[16:12:18.144]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.144]                   sendCondition(cond)
[16:12:18.144]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.144]                   {
[16:12:18.144]                     inherits <- base::inherits
[16:12:18.144]                     invokeRestart <- base::invokeRestart
[16:12:18.144]                     is.null <- base::is.null
[16:12:18.144]                     muffled <- FALSE
[16:12:18.144]                     if (inherits(cond, "message")) {
[16:12:18.144]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.144]                       if (muffled) 
[16:12:18.144]                         invokeRestart("muffleMessage")
[16:12:18.144]                     }
[16:12:18.144]                     else if (inherits(cond, "warning")) {
[16:12:18.144]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.144]                       if (muffled) 
[16:12:18.144]                         invokeRestart("muffleWarning")
[16:12:18.144]                     }
[16:12:18.144]                     else if (inherits(cond, "condition")) {
[16:12:18.144]                       if (!is.null(pattern)) {
[16:12:18.144]                         computeRestarts <- base::computeRestarts
[16:12:18.144]                         grepl <- base::grepl
[16:12:18.144]                         restarts <- computeRestarts(cond)
[16:12:18.144]                         for (restart in restarts) {
[16:12:18.144]                           name <- restart$name
[16:12:18.144]                           if (is.null(name)) 
[16:12:18.144]                             next
[16:12:18.144]                           if (!grepl(pattern, name)) 
[16:12:18.144]                             next
[16:12:18.144]                           invokeRestart(restart)
[16:12:18.144]                           muffled <- TRUE
[16:12:18.144]                           break
[16:12:18.144]                         }
[16:12:18.144]                       }
[16:12:18.144]                     }
[16:12:18.144]                     invisible(muffled)
[16:12:18.144]                   }
[16:12:18.144]                   muffleCondition(cond)
[16:12:18.144]                 })
[16:12:18.144]             }))
[16:12:18.144]             future::FutureResult(value = ...future.value$value, 
[16:12:18.144]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.144]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.144]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.144]                     ...future.globalenv.names))
[16:12:18.144]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.144]         }, condition = base::local({
[16:12:18.144]             c <- base::c
[16:12:18.144]             inherits <- base::inherits
[16:12:18.144]             invokeRestart <- base::invokeRestart
[16:12:18.144]             length <- base::length
[16:12:18.144]             list <- base::list
[16:12:18.144]             seq.int <- base::seq.int
[16:12:18.144]             signalCondition <- base::signalCondition
[16:12:18.144]             sys.calls <- base::sys.calls
[16:12:18.144]             `[[` <- base::`[[`
[16:12:18.144]             `+` <- base::`+`
[16:12:18.144]             `<<-` <- base::`<<-`
[16:12:18.144]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.144]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.144]                   3L)]
[16:12:18.144]             }
[16:12:18.144]             function(cond) {
[16:12:18.144]                 is_error <- inherits(cond, "error")
[16:12:18.144]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.144]                   NULL)
[16:12:18.144]                 if (is_error) {
[16:12:18.144]                   sessionInformation <- function() {
[16:12:18.144]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.144]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.144]                       search = base::search(), system = base::Sys.info())
[16:12:18.144]                   }
[16:12:18.144]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.144]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.144]                     cond$call), session = sessionInformation(), 
[16:12:18.144]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.144]                   signalCondition(cond)
[16:12:18.144]                 }
[16:12:18.144]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.144]                 "immediateCondition"))) {
[16:12:18.144]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.144]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.144]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.144]                   if (TRUE && !signal) {
[16:12:18.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.144]                     {
[16:12:18.144]                       inherits <- base::inherits
[16:12:18.144]                       invokeRestart <- base::invokeRestart
[16:12:18.144]                       is.null <- base::is.null
[16:12:18.144]                       muffled <- FALSE
[16:12:18.144]                       if (inherits(cond, "message")) {
[16:12:18.144]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.144]                         if (muffled) 
[16:12:18.144]                           invokeRestart("muffleMessage")
[16:12:18.144]                       }
[16:12:18.144]                       else if (inherits(cond, "warning")) {
[16:12:18.144]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.144]                         if (muffled) 
[16:12:18.144]                           invokeRestart("muffleWarning")
[16:12:18.144]                       }
[16:12:18.144]                       else if (inherits(cond, "condition")) {
[16:12:18.144]                         if (!is.null(pattern)) {
[16:12:18.144]                           computeRestarts <- base::computeRestarts
[16:12:18.144]                           grepl <- base::grepl
[16:12:18.144]                           restarts <- computeRestarts(cond)
[16:12:18.144]                           for (restart in restarts) {
[16:12:18.144]                             name <- restart$name
[16:12:18.144]                             if (is.null(name)) 
[16:12:18.144]                               next
[16:12:18.144]                             if (!grepl(pattern, name)) 
[16:12:18.144]                               next
[16:12:18.144]                             invokeRestart(restart)
[16:12:18.144]                             muffled <- TRUE
[16:12:18.144]                             break
[16:12:18.144]                           }
[16:12:18.144]                         }
[16:12:18.144]                       }
[16:12:18.144]                       invisible(muffled)
[16:12:18.144]                     }
[16:12:18.144]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.144]                   }
[16:12:18.144]                 }
[16:12:18.144]                 else {
[16:12:18.144]                   if (TRUE) {
[16:12:18.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.144]                     {
[16:12:18.144]                       inherits <- base::inherits
[16:12:18.144]                       invokeRestart <- base::invokeRestart
[16:12:18.144]                       is.null <- base::is.null
[16:12:18.144]                       muffled <- FALSE
[16:12:18.144]                       if (inherits(cond, "message")) {
[16:12:18.144]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.144]                         if (muffled) 
[16:12:18.144]                           invokeRestart("muffleMessage")
[16:12:18.144]                       }
[16:12:18.144]                       else if (inherits(cond, "warning")) {
[16:12:18.144]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.144]                         if (muffled) 
[16:12:18.144]                           invokeRestart("muffleWarning")
[16:12:18.144]                       }
[16:12:18.144]                       else if (inherits(cond, "condition")) {
[16:12:18.144]                         if (!is.null(pattern)) {
[16:12:18.144]                           computeRestarts <- base::computeRestarts
[16:12:18.144]                           grepl <- base::grepl
[16:12:18.144]                           restarts <- computeRestarts(cond)
[16:12:18.144]                           for (restart in restarts) {
[16:12:18.144]                             name <- restart$name
[16:12:18.144]                             if (is.null(name)) 
[16:12:18.144]                               next
[16:12:18.144]                             if (!grepl(pattern, name)) 
[16:12:18.144]                               next
[16:12:18.144]                             invokeRestart(restart)
[16:12:18.144]                             muffled <- TRUE
[16:12:18.144]                             break
[16:12:18.144]                           }
[16:12:18.144]                         }
[16:12:18.144]                       }
[16:12:18.144]                       invisible(muffled)
[16:12:18.144]                     }
[16:12:18.144]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.144]                   }
[16:12:18.144]                 }
[16:12:18.144]             }
[16:12:18.144]         }))
[16:12:18.144]     }, error = function(ex) {
[16:12:18.144]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.144]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.144]                 ...future.rng), started = ...future.startTime, 
[16:12:18.144]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.144]             version = "1.8"), class = "FutureResult")
[16:12:18.144]     }, finally = {
[16:12:18.144]         if (!identical(...future.workdir, getwd())) 
[16:12:18.144]             setwd(...future.workdir)
[16:12:18.144]         {
[16:12:18.144]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.144]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.144]             }
[16:12:18.144]             base::options(...future.oldOptions)
[16:12:18.144]             if (.Platform$OS.type == "windows") {
[16:12:18.144]                 old_names <- names(...future.oldEnvVars)
[16:12:18.144]                 envs <- base::Sys.getenv()
[16:12:18.144]                 names <- names(envs)
[16:12:18.144]                 common <- intersect(names, old_names)
[16:12:18.144]                 added <- setdiff(names, old_names)
[16:12:18.144]                 removed <- setdiff(old_names, names)
[16:12:18.144]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.144]                   envs[common]]
[16:12:18.144]                 NAMES <- toupper(changed)
[16:12:18.144]                 args <- list()
[16:12:18.144]                 for (kk in seq_along(NAMES)) {
[16:12:18.144]                   name <- changed[[kk]]
[16:12:18.144]                   NAME <- NAMES[[kk]]
[16:12:18.144]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.144]                     next
[16:12:18.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.144]                 }
[16:12:18.144]                 NAMES <- toupper(added)
[16:12:18.144]                 for (kk in seq_along(NAMES)) {
[16:12:18.144]                   name <- added[[kk]]
[16:12:18.144]                   NAME <- NAMES[[kk]]
[16:12:18.144]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.144]                     next
[16:12:18.144]                   args[[name]] <- ""
[16:12:18.144]                 }
[16:12:18.144]                 NAMES <- toupper(removed)
[16:12:18.144]                 for (kk in seq_along(NAMES)) {
[16:12:18.144]                   name <- removed[[kk]]
[16:12:18.144]                   NAME <- NAMES[[kk]]
[16:12:18.144]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.144]                     next
[16:12:18.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.144]                 }
[16:12:18.144]                 if (length(args) > 0) 
[16:12:18.144]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.144]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.144]             }
[16:12:18.144]             else {
[16:12:18.144]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.144]             }
[16:12:18.144]             {
[16:12:18.144]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.144]                   0L) {
[16:12:18.144]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.144]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.144]                   base::options(opts)
[16:12:18.144]                 }
[16:12:18.144]                 {
[16:12:18.144]                   {
[16:12:18.144]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.144]                     NULL
[16:12:18.144]                   }
[16:12:18.144]                   options(future.plan = NULL)
[16:12:18.144]                   if (is.na(NA_character_)) 
[16:12:18.144]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.144]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.144]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.144]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.144]                     envir = parent.frame()) 
[16:12:18.144]                   {
[16:12:18.144]                     if (is.function(workers)) 
[16:12:18.144]                       workers <- workers()
[16:12:18.144]                     workers <- structure(as.integer(workers), 
[16:12:18.144]                       class = class(workers))
[16:12:18.144]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.144]                       workers >= 1)
[16:12:18.144]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.144]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.144]                     }
[16:12:18.144]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.144]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.144]                       envir = envir)
[16:12:18.144]                     if (!future$lazy) 
[16:12:18.144]                       future <- run(future)
[16:12:18.144]                     invisible(future)
[16:12:18.144]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.144]                 }
[16:12:18.144]             }
[16:12:18.144]         }
[16:12:18.144]     })
[16:12:18.144]     if (TRUE) {
[16:12:18.144]         base::sink(type = "output", split = FALSE)
[16:12:18.144]         if (TRUE) {
[16:12:18.144]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.144]         }
[16:12:18.144]         else {
[16:12:18.144]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.144]         }
[16:12:18.144]         base::close(...future.stdout)
[16:12:18.144]         ...future.stdout <- NULL
[16:12:18.144]     }
[16:12:18.144]     ...future.result$conditions <- ...future.conditions
[16:12:18.144]     ...future.result$finished <- base::Sys.time()
[16:12:18.144]     ...future.result
[16:12:18.144] }
[16:12:18.147] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:12:18.147] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[16:12:18.147] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[16:12:18.147] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:12:18.148] MultisessionFuture started
[16:12:18.148] - Launch lazy future ... done
[16:12:18.148] run() for ‘MultisessionFuture’ ... done
[16:12:18.148] result() for ClusterFuture ...
[16:12:18.149] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.149] - Validating connection of MultisessionFuture
[16:12:18.196] - received message: FutureResult
[16:12:18.196] - Received FutureResult
[16:12:18.196] - Erased future from FutureRegistry
[16:12:18.197] result() for ClusterFuture ...
[16:12:18.197] - result already collected: FutureResult
[16:12:18.197] result() for ClusterFuture ... done
[16:12:18.197] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.197] result() for ClusterFuture ... done
[16:12:18.197] result() for ClusterFuture ...
[16:12:18.197] - result already collected: FutureResult
[16:12:18.197] result() for ClusterFuture ... done
** Future evaluation with errors
[16:12:18.198] getGlobalsAndPackages() ...
[16:12:18.198] Searching for globals...
[16:12:18.200] - globals found: [3] ‘{’, ‘<-’, ‘stop’
[16:12:18.200] Searching for globals ... DONE
[16:12:18.200] Resolving globals: FALSE
[16:12:18.200] 
[16:12:18.201] 
[16:12:18.201] getGlobalsAndPackages() ... DONE
[16:12:18.201] run() for ‘Future’ ...
[16:12:18.201] - state: ‘created’
[16:12:18.201] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.216] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.216] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.216]   - Field: ‘node’
[16:12:18.216]   - Field: ‘label’
[16:12:18.217]   - Field: ‘local’
[16:12:18.217]   - Field: ‘owner’
[16:12:18.217]   - Field: ‘envir’
[16:12:18.217]   - Field: ‘workers’
[16:12:18.217]   - Field: ‘packages’
[16:12:18.217]   - Field: ‘gc’
[16:12:18.217]   - Field: ‘conditions’
[16:12:18.217]   - Field: ‘persistent’
[16:12:18.217]   - Field: ‘expr’
[16:12:18.218]   - Field: ‘uuid’
[16:12:18.218]   - Field: ‘seed’
[16:12:18.218]   - Field: ‘version’
[16:12:18.218]   - Field: ‘result’
[16:12:18.218]   - Field: ‘asynchronous’
[16:12:18.218]   - Field: ‘calls’
[16:12:18.218]   - Field: ‘globals’
[16:12:18.218]   - Field: ‘stdout’
[16:12:18.218]   - Field: ‘earlySignal’
[16:12:18.219]   - Field: ‘lazy’
[16:12:18.219]   - Field: ‘state’
[16:12:18.219] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.219] - Launch lazy future ...
[16:12:18.219] Packages needed by the future expression (n = 0): <none>
[16:12:18.219] Packages needed by future strategies (n = 0): <none>
[16:12:18.220] {
[16:12:18.220]     {
[16:12:18.220]         {
[16:12:18.220]             ...future.startTime <- base::Sys.time()
[16:12:18.220]             {
[16:12:18.220]                 {
[16:12:18.220]                   {
[16:12:18.220]                     {
[16:12:18.220]                       base::local({
[16:12:18.220]                         has_future <- base::requireNamespace("future", 
[16:12:18.220]                           quietly = TRUE)
[16:12:18.220]                         if (has_future) {
[16:12:18.220]                           ns <- base::getNamespace("future")
[16:12:18.220]                           version <- ns[[".package"]][["version"]]
[16:12:18.220]                           if (is.null(version)) 
[16:12:18.220]                             version <- utils::packageVersion("future")
[16:12:18.220]                         }
[16:12:18.220]                         else {
[16:12:18.220]                           version <- NULL
[16:12:18.220]                         }
[16:12:18.220]                         if (!has_future || version < "1.8.0") {
[16:12:18.220]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.220]                             "", base::R.version$version.string), 
[16:12:18.220]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.220]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.220]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.220]                               "release", "version")], collapse = " "), 
[16:12:18.220]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.220]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.220]                             info)
[16:12:18.220]                           info <- base::paste(info, collapse = "; ")
[16:12:18.220]                           if (!has_future) {
[16:12:18.220]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.220]                               info)
[16:12:18.220]                           }
[16:12:18.220]                           else {
[16:12:18.220]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.220]                               info, version)
[16:12:18.220]                           }
[16:12:18.220]                           base::stop(msg)
[16:12:18.220]                         }
[16:12:18.220]                       })
[16:12:18.220]                     }
[16:12:18.220]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.220]                     base::options(mc.cores = 1L)
[16:12:18.220]                   }
[16:12:18.220]                   options(future.plan = NULL)
[16:12:18.220]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.220]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.220]                 }
[16:12:18.220]                 ...future.workdir <- getwd()
[16:12:18.220]             }
[16:12:18.220]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.220]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.220]         }
[16:12:18.220]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.220]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.220]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.220]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.220]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.220]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.220]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.220]             base::names(...future.oldOptions))
[16:12:18.220]     }
[16:12:18.220]     if (FALSE) {
[16:12:18.220]     }
[16:12:18.220]     else {
[16:12:18.220]         if (TRUE) {
[16:12:18.220]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.220]                 open = "w")
[16:12:18.220]         }
[16:12:18.220]         else {
[16:12:18.220]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.220]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.220]         }
[16:12:18.220]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.220]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.220]             base::sink(type = "output", split = FALSE)
[16:12:18.220]             base::close(...future.stdout)
[16:12:18.220]         }, add = TRUE)
[16:12:18.220]     }
[16:12:18.220]     ...future.frame <- base::sys.nframe()
[16:12:18.220]     ...future.conditions <- base::list()
[16:12:18.220]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.220]     if (FALSE) {
[16:12:18.220]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.220]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.220]     }
[16:12:18.220]     ...future.result <- base::tryCatch({
[16:12:18.220]         base::withCallingHandlers({
[16:12:18.220]             ...future.value <- base::withVisible(base::local({
[16:12:18.220]                 ...future.makeSendCondition <- local({
[16:12:18.220]                   sendCondition <- NULL
[16:12:18.220]                   function(frame = 1L) {
[16:12:18.220]                     if (is.function(sendCondition)) 
[16:12:18.220]                       return(sendCondition)
[16:12:18.220]                     ns <- getNamespace("parallel")
[16:12:18.220]                     if (exists("sendData", mode = "function", 
[16:12:18.220]                       envir = ns)) {
[16:12:18.220]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.220]                         envir = ns)
[16:12:18.220]                       envir <- sys.frame(frame)
[16:12:18.220]                       master <- NULL
[16:12:18.220]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.220]                         !identical(envir, emptyenv())) {
[16:12:18.220]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.220]                           inherits = FALSE)) {
[16:12:18.220]                           master <- get("master", mode = "list", 
[16:12:18.220]                             envir = envir, inherits = FALSE)
[16:12:18.220]                           if (inherits(master, c("SOCKnode", 
[16:12:18.220]                             "SOCK0node"))) {
[16:12:18.220]                             sendCondition <<- function(cond) {
[16:12:18.220]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.220]                                 success = TRUE)
[16:12:18.220]                               parallel_sendData(master, data)
[16:12:18.220]                             }
[16:12:18.220]                             return(sendCondition)
[16:12:18.220]                           }
[16:12:18.220]                         }
[16:12:18.220]                         frame <- frame + 1L
[16:12:18.220]                         envir <- sys.frame(frame)
[16:12:18.220]                       }
[16:12:18.220]                     }
[16:12:18.220]                     sendCondition <<- function(cond) NULL
[16:12:18.220]                   }
[16:12:18.220]                 })
[16:12:18.220]                 withCallingHandlers({
[16:12:18.220]                   {
[16:12:18.220]                     x <- 3
[16:12:18.220]                     stop("Woops!")
[16:12:18.220]                     x
[16:12:18.220]                   }
[16:12:18.220]                 }, immediateCondition = function(cond) {
[16:12:18.220]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.220]                   sendCondition(cond)
[16:12:18.220]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.220]                   {
[16:12:18.220]                     inherits <- base::inherits
[16:12:18.220]                     invokeRestart <- base::invokeRestart
[16:12:18.220]                     is.null <- base::is.null
[16:12:18.220]                     muffled <- FALSE
[16:12:18.220]                     if (inherits(cond, "message")) {
[16:12:18.220]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.220]                       if (muffled) 
[16:12:18.220]                         invokeRestart("muffleMessage")
[16:12:18.220]                     }
[16:12:18.220]                     else if (inherits(cond, "warning")) {
[16:12:18.220]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.220]                       if (muffled) 
[16:12:18.220]                         invokeRestart("muffleWarning")
[16:12:18.220]                     }
[16:12:18.220]                     else if (inherits(cond, "condition")) {
[16:12:18.220]                       if (!is.null(pattern)) {
[16:12:18.220]                         computeRestarts <- base::computeRestarts
[16:12:18.220]                         grepl <- base::grepl
[16:12:18.220]                         restarts <- computeRestarts(cond)
[16:12:18.220]                         for (restart in restarts) {
[16:12:18.220]                           name <- restart$name
[16:12:18.220]                           if (is.null(name)) 
[16:12:18.220]                             next
[16:12:18.220]                           if (!grepl(pattern, name)) 
[16:12:18.220]                             next
[16:12:18.220]                           invokeRestart(restart)
[16:12:18.220]                           muffled <- TRUE
[16:12:18.220]                           break
[16:12:18.220]                         }
[16:12:18.220]                       }
[16:12:18.220]                     }
[16:12:18.220]                     invisible(muffled)
[16:12:18.220]                   }
[16:12:18.220]                   muffleCondition(cond)
[16:12:18.220]                 })
[16:12:18.220]             }))
[16:12:18.220]             future::FutureResult(value = ...future.value$value, 
[16:12:18.220]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.220]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.220]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.220]                     ...future.globalenv.names))
[16:12:18.220]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.220]         }, condition = base::local({
[16:12:18.220]             c <- base::c
[16:12:18.220]             inherits <- base::inherits
[16:12:18.220]             invokeRestart <- base::invokeRestart
[16:12:18.220]             length <- base::length
[16:12:18.220]             list <- base::list
[16:12:18.220]             seq.int <- base::seq.int
[16:12:18.220]             signalCondition <- base::signalCondition
[16:12:18.220]             sys.calls <- base::sys.calls
[16:12:18.220]             `[[` <- base::`[[`
[16:12:18.220]             `+` <- base::`+`
[16:12:18.220]             `<<-` <- base::`<<-`
[16:12:18.220]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.220]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.220]                   3L)]
[16:12:18.220]             }
[16:12:18.220]             function(cond) {
[16:12:18.220]                 is_error <- inherits(cond, "error")
[16:12:18.220]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.220]                   NULL)
[16:12:18.220]                 if (is_error) {
[16:12:18.220]                   sessionInformation <- function() {
[16:12:18.220]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.220]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.220]                       search = base::search(), system = base::Sys.info())
[16:12:18.220]                   }
[16:12:18.220]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.220]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.220]                     cond$call), session = sessionInformation(), 
[16:12:18.220]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.220]                   signalCondition(cond)
[16:12:18.220]                 }
[16:12:18.220]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.220]                 "immediateCondition"))) {
[16:12:18.220]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.220]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.220]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.220]                   if (TRUE && !signal) {
[16:12:18.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.220]                     {
[16:12:18.220]                       inherits <- base::inherits
[16:12:18.220]                       invokeRestart <- base::invokeRestart
[16:12:18.220]                       is.null <- base::is.null
[16:12:18.220]                       muffled <- FALSE
[16:12:18.220]                       if (inherits(cond, "message")) {
[16:12:18.220]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.220]                         if (muffled) 
[16:12:18.220]                           invokeRestart("muffleMessage")
[16:12:18.220]                       }
[16:12:18.220]                       else if (inherits(cond, "warning")) {
[16:12:18.220]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.220]                         if (muffled) 
[16:12:18.220]                           invokeRestart("muffleWarning")
[16:12:18.220]                       }
[16:12:18.220]                       else if (inherits(cond, "condition")) {
[16:12:18.220]                         if (!is.null(pattern)) {
[16:12:18.220]                           computeRestarts <- base::computeRestarts
[16:12:18.220]                           grepl <- base::grepl
[16:12:18.220]                           restarts <- computeRestarts(cond)
[16:12:18.220]                           for (restart in restarts) {
[16:12:18.220]                             name <- restart$name
[16:12:18.220]                             if (is.null(name)) 
[16:12:18.220]                               next
[16:12:18.220]                             if (!grepl(pattern, name)) 
[16:12:18.220]                               next
[16:12:18.220]                             invokeRestart(restart)
[16:12:18.220]                             muffled <- TRUE
[16:12:18.220]                             break
[16:12:18.220]                           }
[16:12:18.220]                         }
[16:12:18.220]                       }
[16:12:18.220]                       invisible(muffled)
[16:12:18.220]                     }
[16:12:18.220]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.220]                   }
[16:12:18.220]                 }
[16:12:18.220]                 else {
[16:12:18.220]                   if (TRUE) {
[16:12:18.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.220]                     {
[16:12:18.220]                       inherits <- base::inherits
[16:12:18.220]                       invokeRestart <- base::invokeRestart
[16:12:18.220]                       is.null <- base::is.null
[16:12:18.220]                       muffled <- FALSE
[16:12:18.220]                       if (inherits(cond, "message")) {
[16:12:18.220]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.220]                         if (muffled) 
[16:12:18.220]                           invokeRestart("muffleMessage")
[16:12:18.220]                       }
[16:12:18.220]                       else if (inherits(cond, "warning")) {
[16:12:18.220]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.220]                         if (muffled) 
[16:12:18.220]                           invokeRestart("muffleWarning")
[16:12:18.220]                       }
[16:12:18.220]                       else if (inherits(cond, "condition")) {
[16:12:18.220]                         if (!is.null(pattern)) {
[16:12:18.220]                           computeRestarts <- base::computeRestarts
[16:12:18.220]                           grepl <- base::grepl
[16:12:18.220]                           restarts <- computeRestarts(cond)
[16:12:18.220]                           for (restart in restarts) {
[16:12:18.220]                             name <- restart$name
[16:12:18.220]                             if (is.null(name)) 
[16:12:18.220]                               next
[16:12:18.220]                             if (!grepl(pattern, name)) 
[16:12:18.220]                               next
[16:12:18.220]                             invokeRestart(restart)
[16:12:18.220]                             muffled <- TRUE
[16:12:18.220]                             break
[16:12:18.220]                           }
[16:12:18.220]                         }
[16:12:18.220]                       }
[16:12:18.220]                       invisible(muffled)
[16:12:18.220]                     }
[16:12:18.220]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.220]                   }
[16:12:18.220]                 }
[16:12:18.220]             }
[16:12:18.220]         }))
[16:12:18.220]     }, error = function(ex) {
[16:12:18.220]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.220]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.220]                 ...future.rng), started = ...future.startTime, 
[16:12:18.220]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.220]             version = "1.8"), class = "FutureResult")
[16:12:18.220]     }, finally = {
[16:12:18.220]         if (!identical(...future.workdir, getwd())) 
[16:12:18.220]             setwd(...future.workdir)
[16:12:18.220]         {
[16:12:18.220]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.220]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.220]             }
[16:12:18.220]             base::options(...future.oldOptions)
[16:12:18.220]             if (.Platform$OS.type == "windows") {
[16:12:18.220]                 old_names <- names(...future.oldEnvVars)
[16:12:18.220]                 envs <- base::Sys.getenv()
[16:12:18.220]                 names <- names(envs)
[16:12:18.220]                 common <- intersect(names, old_names)
[16:12:18.220]                 added <- setdiff(names, old_names)
[16:12:18.220]                 removed <- setdiff(old_names, names)
[16:12:18.220]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.220]                   envs[common]]
[16:12:18.220]                 NAMES <- toupper(changed)
[16:12:18.220]                 args <- list()
[16:12:18.220]                 for (kk in seq_along(NAMES)) {
[16:12:18.220]                   name <- changed[[kk]]
[16:12:18.220]                   NAME <- NAMES[[kk]]
[16:12:18.220]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.220]                     next
[16:12:18.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.220]                 }
[16:12:18.220]                 NAMES <- toupper(added)
[16:12:18.220]                 for (kk in seq_along(NAMES)) {
[16:12:18.220]                   name <- added[[kk]]
[16:12:18.220]                   NAME <- NAMES[[kk]]
[16:12:18.220]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.220]                     next
[16:12:18.220]                   args[[name]] <- ""
[16:12:18.220]                 }
[16:12:18.220]                 NAMES <- toupper(removed)
[16:12:18.220]                 for (kk in seq_along(NAMES)) {
[16:12:18.220]                   name <- removed[[kk]]
[16:12:18.220]                   NAME <- NAMES[[kk]]
[16:12:18.220]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.220]                     next
[16:12:18.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.220]                 }
[16:12:18.220]                 if (length(args) > 0) 
[16:12:18.220]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.220]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.220]             }
[16:12:18.220]             else {
[16:12:18.220]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.220]             }
[16:12:18.220]             {
[16:12:18.220]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.220]                   0L) {
[16:12:18.220]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.220]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.220]                   base::options(opts)
[16:12:18.220]                 }
[16:12:18.220]                 {
[16:12:18.220]                   {
[16:12:18.220]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.220]                     NULL
[16:12:18.220]                   }
[16:12:18.220]                   options(future.plan = NULL)
[16:12:18.220]                   if (is.na(NA_character_)) 
[16:12:18.220]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.220]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.220]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.220]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.220]                     envir = parent.frame()) 
[16:12:18.220]                   {
[16:12:18.220]                     if (is.function(workers)) 
[16:12:18.220]                       workers <- workers()
[16:12:18.220]                     workers <- structure(as.integer(workers), 
[16:12:18.220]                       class = class(workers))
[16:12:18.220]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.220]                       workers >= 1)
[16:12:18.220]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.220]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.220]                     }
[16:12:18.220]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.220]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.220]                       envir = envir)
[16:12:18.220]                     if (!future$lazy) 
[16:12:18.220]                       future <- run(future)
[16:12:18.220]                     invisible(future)
[16:12:18.220]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.220]                 }
[16:12:18.220]             }
[16:12:18.220]         }
[16:12:18.220]     })
[16:12:18.220]     if (TRUE) {
[16:12:18.220]         base::sink(type = "output", split = FALSE)
[16:12:18.220]         if (TRUE) {
[16:12:18.220]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.220]         }
[16:12:18.220]         else {
[16:12:18.220]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.220]         }
[16:12:18.220]         base::close(...future.stdout)
[16:12:18.220]         ...future.stdout <- NULL
[16:12:18.220]     }
[16:12:18.220]     ...future.result$conditions <- ...future.conditions
[16:12:18.220]     ...future.result$finished <- base::Sys.time()
[16:12:18.220]     ...future.result
[16:12:18.220] }
[16:12:18.223] MultisessionFuture started
[16:12:18.223] - Launch lazy future ... done
[16:12:18.224] run() for ‘MultisessionFuture’ ... done
[16:12:18.224] result() for ClusterFuture ...
[16:12:18.224] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.224] - Validating connection of MultisessionFuture
[16:12:18.269] - received message: FutureResult
[16:12:18.269] - Received FutureResult
[16:12:18.269] - Erased future from FutureRegistry
[16:12:18.269] result() for ClusterFuture ...
[16:12:18.269] - result already collected: FutureResult
[16:12:18.270] result() for ClusterFuture ... done
[16:12:18.270] signalConditions() ...
[16:12:18.270]  - include = ‘immediateCondition’
[16:12:18.270]  - exclude = 
[16:12:18.270]  - resignal = FALSE
[16:12:18.270]  - Number of conditions: 1
[16:12:18.270] signalConditions() ... done
[16:12:18.270] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.270] result() for ClusterFuture ... done
[16:12:18.271] result() for ClusterFuture ...
[16:12:18.271] - result already collected: FutureResult
[16:12:18.271] result() for ClusterFuture ... done
[16:12:18.271] signalConditions() ...
[16:12:18.271]  - include = ‘immediateCondition’
[16:12:18.271]  - exclude = 
[16:12:18.271]  - resignal = FALSE
[16:12:18.271]  - Number of conditions: 1
[16:12:18.271] signalConditions() ... done
[16:12:18.272] Future state: ‘finished’
[16:12:18.272] result() for ClusterFuture ...
[16:12:18.272] - result already collected: FutureResult
[16:12:18.272] result() for ClusterFuture ... done
[16:12:18.272] signalConditions() ...
[16:12:18.272]  - include = ‘condition’
[16:12:18.272]  - exclude = ‘immediateCondition’
[16:12:18.272]  - resignal = TRUE
[16:12:18.272]  - Number of conditions: 1
[16:12:18.273]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:18.273] signalConditions() ... done
[16:12:18.273] getGlobalsAndPackages() ...
[16:12:18.273] Searching for globals...
[16:12:18.275] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:18.275] Searching for globals ... DONE
[16:12:18.276] Resolving globals: FALSE
[16:12:18.276] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:18.277] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:18.277] - globals: [1] ‘ii’
[16:12:18.277] 
[16:12:18.277] getGlobalsAndPackages() ... DONE
[16:12:18.277] run() for ‘Future’ ...
[16:12:18.277] - state: ‘created’
[16:12:18.278] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.294] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.294] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.294]   - Field: ‘node’
[16:12:18.294]   - Field: ‘label’
[16:12:18.294]   - Field: ‘local’
[16:12:18.295]   - Field: ‘owner’
[16:12:18.295]   - Field: ‘envir’
[16:12:18.295]   - Field: ‘workers’
[16:12:18.295]   - Field: ‘packages’
[16:12:18.295]   - Field: ‘gc’
[16:12:18.295]   - Field: ‘conditions’
[16:12:18.295]   - Field: ‘persistent’
[16:12:18.295]   - Field: ‘expr’
[16:12:18.295]   - Field: ‘uuid’
[16:12:18.295]   - Field: ‘seed’
[16:12:18.295]   - Field: ‘version’
[16:12:18.296]   - Field: ‘result’
[16:12:18.296]   - Field: ‘asynchronous’
[16:12:18.296]   - Field: ‘calls’
[16:12:18.296]   - Field: ‘globals’
[16:12:18.296]   - Field: ‘stdout’
[16:12:18.296]   - Field: ‘earlySignal’
[16:12:18.296]   - Field: ‘lazy’
[16:12:18.296]   - Field: ‘state’
[16:12:18.296] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.296] - Launch lazy future ...
[16:12:18.297] Packages needed by the future expression (n = 0): <none>
[16:12:18.297] Packages needed by future strategies (n = 0): <none>
[16:12:18.297] {
[16:12:18.297]     {
[16:12:18.297]         {
[16:12:18.297]             ...future.startTime <- base::Sys.time()
[16:12:18.297]             {
[16:12:18.297]                 {
[16:12:18.297]                   {
[16:12:18.297]                     {
[16:12:18.297]                       base::local({
[16:12:18.297]                         has_future <- base::requireNamespace("future", 
[16:12:18.297]                           quietly = TRUE)
[16:12:18.297]                         if (has_future) {
[16:12:18.297]                           ns <- base::getNamespace("future")
[16:12:18.297]                           version <- ns[[".package"]][["version"]]
[16:12:18.297]                           if (is.null(version)) 
[16:12:18.297]                             version <- utils::packageVersion("future")
[16:12:18.297]                         }
[16:12:18.297]                         else {
[16:12:18.297]                           version <- NULL
[16:12:18.297]                         }
[16:12:18.297]                         if (!has_future || version < "1.8.0") {
[16:12:18.297]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.297]                             "", base::R.version$version.string), 
[16:12:18.297]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.297]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.297]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.297]                               "release", "version")], collapse = " "), 
[16:12:18.297]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.297]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.297]                             info)
[16:12:18.297]                           info <- base::paste(info, collapse = "; ")
[16:12:18.297]                           if (!has_future) {
[16:12:18.297]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.297]                               info)
[16:12:18.297]                           }
[16:12:18.297]                           else {
[16:12:18.297]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.297]                               info, version)
[16:12:18.297]                           }
[16:12:18.297]                           base::stop(msg)
[16:12:18.297]                         }
[16:12:18.297]                       })
[16:12:18.297]                     }
[16:12:18.297]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.297]                     base::options(mc.cores = 1L)
[16:12:18.297]                   }
[16:12:18.297]                   options(future.plan = NULL)
[16:12:18.297]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.297]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.297]                 }
[16:12:18.297]                 ...future.workdir <- getwd()
[16:12:18.297]             }
[16:12:18.297]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.297]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.297]         }
[16:12:18.297]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.297]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.297]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.297]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.297]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.297]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.297]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.297]             base::names(...future.oldOptions))
[16:12:18.297]     }
[16:12:18.297]     if (FALSE) {
[16:12:18.297]     }
[16:12:18.297]     else {
[16:12:18.297]         if (TRUE) {
[16:12:18.297]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.297]                 open = "w")
[16:12:18.297]         }
[16:12:18.297]         else {
[16:12:18.297]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.297]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.297]         }
[16:12:18.297]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.297]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.297]             base::sink(type = "output", split = FALSE)
[16:12:18.297]             base::close(...future.stdout)
[16:12:18.297]         }, add = TRUE)
[16:12:18.297]     }
[16:12:18.297]     ...future.frame <- base::sys.nframe()
[16:12:18.297]     ...future.conditions <- base::list()
[16:12:18.297]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.297]     if (FALSE) {
[16:12:18.297]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.297]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.297]     }
[16:12:18.297]     ...future.result <- base::tryCatch({
[16:12:18.297]         base::withCallingHandlers({
[16:12:18.297]             ...future.value <- base::withVisible(base::local({
[16:12:18.297]                 ...future.makeSendCondition <- local({
[16:12:18.297]                   sendCondition <- NULL
[16:12:18.297]                   function(frame = 1L) {
[16:12:18.297]                     if (is.function(sendCondition)) 
[16:12:18.297]                       return(sendCondition)
[16:12:18.297]                     ns <- getNamespace("parallel")
[16:12:18.297]                     if (exists("sendData", mode = "function", 
[16:12:18.297]                       envir = ns)) {
[16:12:18.297]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.297]                         envir = ns)
[16:12:18.297]                       envir <- sys.frame(frame)
[16:12:18.297]                       master <- NULL
[16:12:18.297]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.297]                         !identical(envir, emptyenv())) {
[16:12:18.297]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.297]                           inherits = FALSE)) {
[16:12:18.297]                           master <- get("master", mode = "list", 
[16:12:18.297]                             envir = envir, inherits = FALSE)
[16:12:18.297]                           if (inherits(master, c("SOCKnode", 
[16:12:18.297]                             "SOCK0node"))) {
[16:12:18.297]                             sendCondition <<- function(cond) {
[16:12:18.297]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.297]                                 success = TRUE)
[16:12:18.297]                               parallel_sendData(master, data)
[16:12:18.297]                             }
[16:12:18.297]                             return(sendCondition)
[16:12:18.297]                           }
[16:12:18.297]                         }
[16:12:18.297]                         frame <- frame + 1L
[16:12:18.297]                         envir <- sys.frame(frame)
[16:12:18.297]                       }
[16:12:18.297]                     }
[16:12:18.297]                     sendCondition <<- function(cond) NULL
[16:12:18.297]                   }
[16:12:18.297]                 })
[16:12:18.297]                 withCallingHandlers({
[16:12:18.297]                   {
[16:12:18.297]                     if (ii%%2 == 0) 
[16:12:18.297]                       stop("Woops!")
[16:12:18.297]                     ii
[16:12:18.297]                   }
[16:12:18.297]                 }, immediateCondition = function(cond) {
[16:12:18.297]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.297]                   sendCondition(cond)
[16:12:18.297]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.297]                   {
[16:12:18.297]                     inherits <- base::inherits
[16:12:18.297]                     invokeRestart <- base::invokeRestart
[16:12:18.297]                     is.null <- base::is.null
[16:12:18.297]                     muffled <- FALSE
[16:12:18.297]                     if (inherits(cond, "message")) {
[16:12:18.297]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.297]                       if (muffled) 
[16:12:18.297]                         invokeRestart("muffleMessage")
[16:12:18.297]                     }
[16:12:18.297]                     else if (inherits(cond, "warning")) {
[16:12:18.297]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.297]                       if (muffled) 
[16:12:18.297]                         invokeRestart("muffleWarning")
[16:12:18.297]                     }
[16:12:18.297]                     else if (inherits(cond, "condition")) {
[16:12:18.297]                       if (!is.null(pattern)) {
[16:12:18.297]                         computeRestarts <- base::computeRestarts
[16:12:18.297]                         grepl <- base::grepl
[16:12:18.297]                         restarts <- computeRestarts(cond)
[16:12:18.297]                         for (restart in restarts) {
[16:12:18.297]                           name <- restart$name
[16:12:18.297]                           if (is.null(name)) 
[16:12:18.297]                             next
[16:12:18.297]                           if (!grepl(pattern, name)) 
[16:12:18.297]                             next
[16:12:18.297]                           invokeRestart(restart)
[16:12:18.297]                           muffled <- TRUE
[16:12:18.297]                           break
[16:12:18.297]                         }
[16:12:18.297]                       }
[16:12:18.297]                     }
[16:12:18.297]                     invisible(muffled)
[16:12:18.297]                   }
[16:12:18.297]                   muffleCondition(cond)
[16:12:18.297]                 })
[16:12:18.297]             }))
[16:12:18.297]             future::FutureResult(value = ...future.value$value, 
[16:12:18.297]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.297]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.297]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.297]                     ...future.globalenv.names))
[16:12:18.297]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.297]         }, condition = base::local({
[16:12:18.297]             c <- base::c
[16:12:18.297]             inherits <- base::inherits
[16:12:18.297]             invokeRestart <- base::invokeRestart
[16:12:18.297]             length <- base::length
[16:12:18.297]             list <- base::list
[16:12:18.297]             seq.int <- base::seq.int
[16:12:18.297]             signalCondition <- base::signalCondition
[16:12:18.297]             sys.calls <- base::sys.calls
[16:12:18.297]             `[[` <- base::`[[`
[16:12:18.297]             `+` <- base::`+`
[16:12:18.297]             `<<-` <- base::`<<-`
[16:12:18.297]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.297]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.297]                   3L)]
[16:12:18.297]             }
[16:12:18.297]             function(cond) {
[16:12:18.297]                 is_error <- inherits(cond, "error")
[16:12:18.297]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.297]                   NULL)
[16:12:18.297]                 if (is_error) {
[16:12:18.297]                   sessionInformation <- function() {
[16:12:18.297]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.297]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.297]                       search = base::search(), system = base::Sys.info())
[16:12:18.297]                   }
[16:12:18.297]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.297]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.297]                     cond$call), session = sessionInformation(), 
[16:12:18.297]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.297]                   signalCondition(cond)
[16:12:18.297]                 }
[16:12:18.297]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.297]                 "immediateCondition"))) {
[16:12:18.297]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.297]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.297]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.297]                   if (TRUE && !signal) {
[16:12:18.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.297]                     {
[16:12:18.297]                       inherits <- base::inherits
[16:12:18.297]                       invokeRestart <- base::invokeRestart
[16:12:18.297]                       is.null <- base::is.null
[16:12:18.297]                       muffled <- FALSE
[16:12:18.297]                       if (inherits(cond, "message")) {
[16:12:18.297]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.297]                         if (muffled) 
[16:12:18.297]                           invokeRestart("muffleMessage")
[16:12:18.297]                       }
[16:12:18.297]                       else if (inherits(cond, "warning")) {
[16:12:18.297]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.297]                         if (muffled) 
[16:12:18.297]                           invokeRestart("muffleWarning")
[16:12:18.297]                       }
[16:12:18.297]                       else if (inherits(cond, "condition")) {
[16:12:18.297]                         if (!is.null(pattern)) {
[16:12:18.297]                           computeRestarts <- base::computeRestarts
[16:12:18.297]                           grepl <- base::grepl
[16:12:18.297]                           restarts <- computeRestarts(cond)
[16:12:18.297]                           for (restart in restarts) {
[16:12:18.297]                             name <- restart$name
[16:12:18.297]                             if (is.null(name)) 
[16:12:18.297]                               next
[16:12:18.297]                             if (!grepl(pattern, name)) 
[16:12:18.297]                               next
[16:12:18.297]                             invokeRestart(restart)
[16:12:18.297]                             muffled <- TRUE
[16:12:18.297]                             break
[16:12:18.297]                           }
[16:12:18.297]                         }
[16:12:18.297]                       }
[16:12:18.297]                       invisible(muffled)
[16:12:18.297]                     }
[16:12:18.297]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.297]                   }
[16:12:18.297]                 }
[16:12:18.297]                 else {
[16:12:18.297]                   if (TRUE) {
[16:12:18.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.297]                     {
[16:12:18.297]                       inherits <- base::inherits
[16:12:18.297]                       invokeRestart <- base::invokeRestart
[16:12:18.297]                       is.null <- base::is.null
[16:12:18.297]                       muffled <- FALSE
[16:12:18.297]                       if (inherits(cond, "message")) {
[16:12:18.297]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.297]                         if (muffled) 
[16:12:18.297]                           invokeRestart("muffleMessage")
[16:12:18.297]                       }
[16:12:18.297]                       else if (inherits(cond, "warning")) {
[16:12:18.297]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.297]                         if (muffled) 
[16:12:18.297]                           invokeRestart("muffleWarning")
[16:12:18.297]                       }
[16:12:18.297]                       else if (inherits(cond, "condition")) {
[16:12:18.297]                         if (!is.null(pattern)) {
[16:12:18.297]                           computeRestarts <- base::computeRestarts
[16:12:18.297]                           grepl <- base::grepl
[16:12:18.297]                           restarts <- computeRestarts(cond)
[16:12:18.297]                           for (restart in restarts) {
[16:12:18.297]                             name <- restart$name
[16:12:18.297]                             if (is.null(name)) 
[16:12:18.297]                               next
[16:12:18.297]                             if (!grepl(pattern, name)) 
[16:12:18.297]                               next
[16:12:18.297]                             invokeRestart(restart)
[16:12:18.297]                             muffled <- TRUE
[16:12:18.297]                             break
[16:12:18.297]                           }
[16:12:18.297]                         }
[16:12:18.297]                       }
[16:12:18.297]                       invisible(muffled)
[16:12:18.297]                     }
[16:12:18.297]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.297]                   }
[16:12:18.297]                 }
[16:12:18.297]             }
[16:12:18.297]         }))
[16:12:18.297]     }, error = function(ex) {
[16:12:18.297]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.297]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.297]                 ...future.rng), started = ...future.startTime, 
[16:12:18.297]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.297]             version = "1.8"), class = "FutureResult")
[16:12:18.297]     }, finally = {
[16:12:18.297]         if (!identical(...future.workdir, getwd())) 
[16:12:18.297]             setwd(...future.workdir)
[16:12:18.297]         {
[16:12:18.297]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.297]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.297]             }
[16:12:18.297]             base::options(...future.oldOptions)
[16:12:18.297]             if (.Platform$OS.type == "windows") {
[16:12:18.297]                 old_names <- names(...future.oldEnvVars)
[16:12:18.297]                 envs <- base::Sys.getenv()
[16:12:18.297]                 names <- names(envs)
[16:12:18.297]                 common <- intersect(names, old_names)
[16:12:18.297]                 added <- setdiff(names, old_names)
[16:12:18.297]                 removed <- setdiff(old_names, names)
[16:12:18.297]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.297]                   envs[common]]
[16:12:18.297]                 NAMES <- toupper(changed)
[16:12:18.297]                 args <- list()
[16:12:18.297]                 for (kk in seq_along(NAMES)) {
[16:12:18.297]                   name <- changed[[kk]]
[16:12:18.297]                   NAME <- NAMES[[kk]]
[16:12:18.297]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.297]                     next
[16:12:18.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.297]                 }
[16:12:18.297]                 NAMES <- toupper(added)
[16:12:18.297]                 for (kk in seq_along(NAMES)) {
[16:12:18.297]                   name <- added[[kk]]
[16:12:18.297]                   NAME <- NAMES[[kk]]
[16:12:18.297]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.297]                     next
[16:12:18.297]                   args[[name]] <- ""
[16:12:18.297]                 }
[16:12:18.297]                 NAMES <- toupper(removed)
[16:12:18.297]                 for (kk in seq_along(NAMES)) {
[16:12:18.297]                   name <- removed[[kk]]
[16:12:18.297]                   NAME <- NAMES[[kk]]
[16:12:18.297]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.297]                     next
[16:12:18.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.297]                 }
[16:12:18.297]                 if (length(args) > 0) 
[16:12:18.297]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.297]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.297]             }
[16:12:18.297]             else {
[16:12:18.297]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.297]             }
[16:12:18.297]             {
[16:12:18.297]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.297]                   0L) {
[16:12:18.297]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.297]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.297]                   base::options(opts)
[16:12:18.297]                 }
[16:12:18.297]                 {
[16:12:18.297]                   {
[16:12:18.297]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.297]                     NULL
[16:12:18.297]                   }
[16:12:18.297]                   options(future.plan = NULL)
[16:12:18.297]                   if (is.na(NA_character_)) 
[16:12:18.297]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.297]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.297]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.297]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.297]                     envir = parent.frame()) 
[16:12:18.297]                   {
[16:12:18.297]                     if (is.function(workers)) 
[16:12:18.297]                       workers <- workers()
[16:12:18.297]                     workers <- structure(as.integer(workers), 
[16:12:18.297]                       class = class(workers))
[16:12:18.297]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.297]                       workers >= 1)
[16:12:18.297]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.297]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.297]                     }
[16:12:18.297]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.297]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.297]                       envir = envir)
[16:12:18.297]                     if (!future$lazy) 
[16:12:18.297]                       future <- run(future)
[16:12:18.297]                     invisible(future)
[16:12:18.297]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.297]                 }
[16:12:18.297]             }
[16:12:18.297]         }
[16:12:18.297]     })
[16:12:18.297]     if (TRUE) {
[16:12:18.297]         base::sink(type = "output", split = FALSE)
[16:12:18.297]         if (TRUE) {
[16:12:18.297]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.297]         }
[16:12:18.297]         else {
[16:12:18.297]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.297]         }
[16:12:18.297]         base::close(...future.stdout)
[16:12:18.297]         ...future.stdout <- NULL
[16:12:18.297]     }
[16:12:18.297]     ...future.result$conditions <- ...future.conditions
[16:12:18.297]     ...future.result$finished <- base::Sys.time()
[16:12:18.297]     ...future.result
[16:12:18.297] }
[16:12:18.300] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:12:18.300] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:12:18.300] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:12:18.300] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:12:18.301] MultisessionFuture started
[16:12:18.301] - Launch lazy future ... done
[16:12:18.301] run() for ‘MultisessionFuture’ ... done
[16:12:18.301] getGlobalsAndPackages() ...
[16:12:18.301] Searching for globals...
[16:12:18.303] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:18.303] Searching for globals ... DONE
[16:12:18.303] Resolving globals: FALSE
[16:12:18.303] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:18.304] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:18.304] - globals: [1] ‘ii’
[16:12:18.304] 
[16:12:18.304] getGlobalsAndPackages() ... DONE
[16:12:18.304] run() for ‘Future’ ...
[16:12:18.304] - state: ‘created’
[16:12:18.305] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.318] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.318] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.319]   - Field: ‘node’
[16:12:18.319]   - Field: ‘label’
[16:12:18.319]   - Field: ‘local’
[16:12:18.319]   - Field: ‘owner’
[16:12:18.319]   - Field: ‘envir’
[16:12:18.319]   - Field: ‘workers’
[16:12:18.319]   - Field: ‘packages’
[16:12:18.319]   - Field: ‘gc’
[16:12:18.319]   - Field: ‘conditions’
[16:12:18.319]   - Field: ‘persistent’
[16:12:18.320]   - Field: ‘expr’
[16:12:18.320]   - Field: ‘uuid’
[16:12:18.320]   - Field: ‘seed’
[16:12:18.320]   - Field: ‘version’
[16:12:18.320]   - Field: ‘result’
[16:12:18.320]   - Field: ‘asynchronous’
[16:12:18.320]   - Field: ‘calls’
[16:12:18.320]   - Field: ‘globals’
[16:12:18.320]   - Field: ‘stdout’
[16:12:18.320]   - Field: ‘earlySignal’
[16:12:18.320]   - Field: ‘lazy’
[16:12:18.321]   - Field: ‘state’
[16:12:18.321] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.321] - Launch lazy future ...
[16:12:18.321] Packages needed by the future expression (n = 0): <none>
[16:12:18.321] Packages needed by future strategies (n = 0): <none>
[16:12:18.322] {
[16:12:18.322]     {
[16:12:18.322]         {
[16:12:18.322]             ...future.startTime <- base::Sys.time()
[16:12:18.322]             {
[16:12:18.322]                 {
[16:12:18.322]                   {
[16:12:18.322]                     {
[16:12:18.322]                       base::local({
[16:12:18.322]                         has_future <- base::requireNamespace("future", 
[16:12:18.322]                           quietly = TRUE)
[16:12:18.322]                         if (has_future) {
[16:12:18.322]                           ns <- base::getNamespace("future")
[16:12:18.322]                           version <- ns[[".package"]][["version"]]
[16:12:18.322]                           if (is.null(version)) 
[16:12:18.322]                             version <- utils::packageVersion("future")
[16:12:18.322]                         }
[16:12:18.322]                         else {
[16:12:18.322]                           version <- NULL
[16:12:18.322]                         }
[16:12:18.322]                         if (!has_future || version < "1.8.0") {
[16:12:18.322]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.322]                             "", base::R.version$version.string), 
[16:12:18.322]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.322]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.322]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.322]                               "release", "version")], collapse = " "), 
[16:12:18.322]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.322]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.322]                             info)
[16:12:18.322]                           info <- base::paste(info, collapse = "; ")
[16:12:18.322]                           if (!has_future) {
[16:12:18.322]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.322]                               info)
[16:12:18.322]                           }
[16:12:18.322]                           else {
[16:12:18.322]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.322]                               info, version)
[16:12:18.322]                           }
[16:12:18.322]                           base::stop(msg)
[16:12:18.322]                         }
[16:12:18.322]                       })
[16:12:18.322]                     }
[16:12:18.322]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.322]                     base::options(mc.cores = 1L)
[16:12:18.322]                   }
[16:12:18.322]                   options(future.plan = NULL)
[16:12:18.322]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.322]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.322]                 }
[16:12:18.322]                 ...future.workdir <- getwd()
[16:12:18.322]             }
[16:12:18.322]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.322]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.322]         }
[16:12:18.322]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.322]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.322]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.322]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.322]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.322]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.322]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.322]             base::names(...future.oldOptions))
[16:12:18.322]     }
[16:12:18.322]     if (FALSE) {
[16:12:18.322]     }
[16:12:18.322]     else {
[16:12:18.322]         if (TRUE) {
[16:12:18.322]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.322]                 open = "w")
[16:12:18.322]         }
[16:12:18.322]         else {
[16:12:18.322]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.322]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.322]         }
[16:12:18.322]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.322]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.322]             base::sink(type = "output", split = FALSE)
[16:12:18.322]             base::close(...future.stdout)
[16:12:18.322]         }, add = TRUE)
[16:12:18.322]     }
[16:12:18.322]     ...future.frame <- base::sys.nframe()
[16:12:18.322]     ...future.conditions <- base::list()
[16:12:18.322]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.322]     if (FALSE) {
[16:12:18.322]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.322]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.322]     }
[16:12:18.322]     ...future.result <- base::tryCatch({
[16:12:18.322]         base::withCallingHandlers({
[16:12:18.322]             ...future.value <- base::withVisible(base::local({
[16:12:18.322]                 ...future.makeSendCondition <- local({
[16:12:18.322]                   sendCondition <- NULL
[16:12:18.322]                   function(frame = 1L) {
[16:12:18.322]                     if (is.function(sendCondition)) 
[16:12:18.322]                       return(sendCondition)
[16:12:18.322]                     ns <- getNamespace("parallel")
[16:12:18.322]                     if (exists("sendData", mode = "function", 
[16:12:18.322]                       envir = ns)) {
[16:12:18.322]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.322]                         envir = ns)
[16:12:18.322]                       envir <- sys.frame(frame)
[16:12:18.322]                       master <- NULL
[16:12:18.322]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.322]                         !identical(envir, emptyenv())) {
[16:12:18.322]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.322]                           inherits = FALSE)) {
[16:12:18.322]                           master <- get("master", mode = "list", 
[16:12:18.322]                             envir = envir, inherits = FALSE)
[16:12:18.322]                           if (inherits(master, c("SOCKnode", 
[16:12:18.322]                             "SOCK0node"))) {
[16:12:18.322]                             sendCondition <<- function(cond) {
[16:12:18.322]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.322]                                 success = TRUE)
[16:12:18.322]                               parallel_sendData(master, data)
[16:12:18.322]                             }
[16:12:18.322]                             return(sendCondition)
[16:12:18.322]                           }
[16:12:18.322]                         }
[16:12:18.322]                         frame <- frame + 1L
[16:12:18.322]                         envir <- sys.frame(frame)
[16:12:18.322]                       }
[16:12:18.322]                     }
[16:12:18.322]                     sendCondition <<- function(cond) NULL
[16:12:18.322]                   }
[16:12:18.322]                 })
[16:12:18.322]                 withCallingHandlers({
[16:12:18.322]                   {
[16:12:18.322]                     if (ii%%2 == 0) 
[16:12:18.322]                       stop("Woops!")
[16:12:18.322]                     ii
[16:12:18.322]                   }
[16:12:18.322]                 }, immediateCondition = function(cond) {
[16:12:18.322]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.322]                   sendCondition(cond)
[16:12:18.322]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.322]                   {
[16:12:18.322]                     inherits <- base::inherits
[16:12:18.322]                     invokeRestart <- base::invokeRestart
[16:12:18.322]                     is.null <- base::is.null
[16:12:18.322]                     muffled <- FALSE
[16:12:18.322]                     if (inherits(cond, "message")) {
[16:12:18.322]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.322]                       if (muffled) 
[16:12:18.322]                         invokeRestart("muffleMessage")
[16:12:18.322]                     }
[16:12:18.322]                     else if (inherits(cond, "warning")) {
[16:12:18.322]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.322]                       if (muffled) 
[16:12:18.322]                         invokeRestart("muffleWarning")
[16:12:18.322]                     }
[16:12:18.322]                     else if (inherits(cond, "condition")) {
[16:12:18.322]                       if (!is.null(pattern)) {
[16:12:18.322]                         computeRestarts <- base::computeRestarts
[16:12:18.322]                         grepl <- base::grepl
[16:12:18.322]                         restarts <- computeRestarts(cond)
[16:12:18.322]                         for (restart in restarts) {
[16:12:18.322]                           name <- restart$name
[16:12:18.322]                           if (is.null(name)) 
[16:12:18.322]                             next
[16:12:18.322]                           if (!grepl(pattern, name)) 
[16:12:18.322]                             next
[16:12:18.322]                           invokeRestart(restart)
[16:12:18.322]                           muffled <- TRUE
[16:12:18.322]                           break
[16:12:18.322]                         }
[16:12:18.322]                       }
[16:12:18.322]                     }
[16:12:18.322]                     invisible(muffled)
[16:12:18.322]                   }
[16:12:18.322]                   muffleCondition(cond)
[16:12:18.322]                 })
[16:12:18.322]             }))
[16:12:18.322]             future::FutureResult(value = ...future.value$value, 
[16:12:18.322]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.322]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.322]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.322]                     ...future.globalenv.names))
[16:12:18.322]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.322]         }, condition = base::local({
[16:12:18.322]             c <- base::c
[16:12:18.322]             inherits <- base::inherits
[16:12:18.322]             invokeRestart <- base::invokeRestart
[16:12:18.322]             length <- base::length
[16:12:18.322]             list <- base::list
[16:12:18.322]             seq.int <- base::seq.int
[16:12:18.322]             signalCondition <- base::signalCondition
[16:12:18.322]             sys.calls <- base::sys.calls
[16:12:18.322]             `[[` <- base::`[[`
[16:12:18.322]             `+` <- base::`+`
[16:12:18.322]             `<<-` <- base::`<<-`
[16:12:18.322]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.322]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.322]                   3L)]
[16:12:18.322]             }
[16:12:18.322]             function(cond) {
[16:12:18.322]                 is_error <- inherits(cond, "error")
[16:12:18.322]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.322]                   NULL)
[16:12:18.322]                 if (is_error) {
[16:12:18.322]                   sessionInformation <- function() {
[16:12:18.322]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.322]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.322]                       search = base::search(), system = base::Sys.info())
[16:12:18.322]                   }
[16:12:18.322]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.322]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.322]                     cond$call), session = sessionInformation(), 
[16:12:18.322]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.322]                   signalCondition(cond)
[16:12:18.322]                 }
[16:12:18.322]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.322]                 "immediateCondition"))) {
[16:12:18.322]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.322]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.322]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.322]                   if (TRUE && !signal) {
[16:12:18.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.322]                     {
[16:12:18.322]                       inherits <- base::inherits
[16:12:18.322]                       invokeRestart <- base::invokeRestart
[16:12:18.322]                       is.null <- base::is.null
[16:12:18.322]                       muffled <- FALSE
[16:12:18.322]                       if (inherits(cond, "message")) {
[16:12:18.322]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.322]                         if (muffled) 
[16:12:18.322]                           invokeRestart("muffleMessage")
[16:12:18.322]                       }
[16:12:18.322]                       else if (inherits(cond, "warning")) {
[16:12:18.322]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.322]                         if (muffled) 
[16:12:18.322]                           invokeRestart("muffleWarning")
[16:12:18.322]                       }
[16:12:18.322]                       else if (inherits(cond, "condition")) {
[16:12:18.322]                         if (!is.null(pattern)) {
[16:12:18.322]                           computeRestarts <- base::computeRestarts
[16:12:18.322]                           grepl <- base::grepl
[16:12:18.322]                           restarts <- computeRestarts(cond)
[16:12:18.322]                           for (restart in restarts) {
[16:12:18.322]                             name <- restart$name
[16:12:18.322]                             if (is.null(name)) 
[16:12:18.322]                               next
[16:12:18.322]                             if (!grepl(pattern, name)) 
[16:12:18.322]                               next
[16:12:18.322]                             invokeRestart(restart)
[16:12:18.322]                             muffled <- TRUE
[16:12:18.322]                             break
[16:12:18.322]                           }
[16:12:18.322]                         }
[16:12:18.322]                       }
[16:12:18.322]                       invisible(muffled)
[16:12:18.322]                     }
[16:12:18.322]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.322]                   }
[16:12:18.322]                 }
[16:12:18.322]                 else {
[16:12:18.322]                   if (TRUE) {
[16:12:18.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.322]                     {
[16:12:18.322]                       inherits <- base::inherits
[16:12:18.322]                       invokeRestart <- base::invokeRestart
[16:12:18.322]                       is.null <- base::is.null
[16:12:18.322]                       muffled <- FALSE
[16:12:18.322]                       if (inherits(cond, "message")) {
[16:12:18.322]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.322]                         if (muffled) 
[16:12:18.322]                           invokeRestart("muffleMessage")
[16:12:18.322]                       }
[16:12:18.322]                       else if (inherits(cond, "warning")) {
[16:12:18.322]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.322]                         if (muffled) 
[16:12:18.322]                           invokeRestart("muffleWarning")
[16:12:18.322]                       }
[16:12:18.322]                       else if (inherits(cond, "condition")) {
[16:12:18.322]                         if (!is.null(pattern)) {
[16:12:18.322]                           computeRestarts <- base::computeRestarts
[16:12:18.322]                           grepl <- base::grepl
[16:12:18.322]                           restarts <- computeRestarts(cond)
[16:12:18.322]                           for (restart in restarts) {
[16:12:18.322]                             name <- restart$name
[16:12:18.322]                             if (is.null(name)) 
[16:12:18.322]                               next
[16:12:18.322]                             if (!grepl(pattern, name)) 
[16:12:18.322]                               next
[16:12:18.322]                             invokeRestart(restart)
[16:12:18.322]                             muffled <- TRUE
[16:12:18.322]                             break
[16:12:18.322]                           }
[16:12:18.322]                         }
[16:12:18.322]                       }
[16:12:18.322]                       invisible(muffled)
[16:12:18.322]                     }
[16:12:18.322]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.322]                   }
[16:12:18.322]                 }
[16:12:18.322]             }
[16:12:18.322]         }))
[16:12:18.322]     }, error = function(ex) {
[16:12:18.322]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.322]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.322]                 ...future.rng), started = ...future.startTime, 
[16:12:18.322]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.322]             version = "1.8"), class = "FutureResult")
[16:12:18.322]     }, finally = {
[16:12:18.322]         if (!identical(...future.workdir, getwd())) 
[16:12:18.322]             setwd(...future.workdir)
[16:12:18.322]         {
[16:12:18.322]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.322]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.322]             }
[16:12:18.322]             base::options(...future.oldOptions)
[16:12:18.322]             if (.Platform$OS.type == "windows") {
[16:12:18.322]                 old_names <- names(...future.oldEnvVars)
[16:12:18.322]                 envs <- base::Sys.getenv()
[16:12:18.322]                 names <- names(envs)
[16:12:18.322]                 common <- intersect(names, old_names)
[16:12:18.322]                 added <- setdiff(names, old_names)
[16:12:18.322]                 removed <- setdiff(old_names, names)
[16:12:18.322]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.322]                   envs[common]]
[16:12:18.322]                 NAMES <- toupper(changed)
[16:12:18.322]                 args <- list()
[16:12:18.322]                 for (kk in seq_along(NAMES)) {
[16:12:18.322]                   name <- changed[[kk]]
[16:12:18.322]                   NAME <- NAMES[[kk]]
[16:12:18.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.322]                     next
[16:12:18.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.322]                 }
[16:12:18.322]                 NAMES <- toupper(added)
[16:12:18.322]                 for (kk in seq_along(NAMES)) {
[16:12:18.322]                   name <- added[[kk]]
[16:12:18.322]                   NAME <- NAMES[[kk]]
[16:12:18.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.322]                     next
[16:12:18.322]                   args[[name]] <- ""
[16:12:18.322]                 }
[16:12:18.322]                 NAMES <- toupper(removed)
[16:12:18.322]                 for (kk in seq_along(NAMES)) {
[16:12:18.322]                   name <- removed[[kk]]
[16:12:18.322]                   NAME <- NAMES[[kk]]
[16:12:18.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.322]                     next
[16:12:18.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.322]                 }
[16:12:18.322]                 if (length(args) > 0) 
[16:12:18.322]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.322]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.322]             }
[16:12:18.322]             else {
[16:12:18.322]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.322]             }
[16:12:18.322]             {
[16:12:18.322]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.322]                   0L) {
[16:12:18.322]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.322]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.322]                   base::options(opts)
[16:12:18.322]                 }
[16:12:18.322]                 {
[16:12:18.322]                   {
[16:12:18.322]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.322]                     NULL
[16:12:18.322]                   }
[16:12:18.322]                   options(future.plan = NULL)
[16:12:18.322]                   if (is.na(NA_character_)) 
[16:12:18.322]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.322]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.322]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.322]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.322]                     envir = parent.frame()) 
[16:12:18.322]                   {
[16:12:18.322]                     if (is.function(workers)) 
[16:12:18.322]                       workers <- workers()
[16:12:18.322]                     workers <- structure(as.integer(workers), 
[16:12:18.322]                       class = class(workers))
[16:12:18.322]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.322]                       workers >= 1)
[16:12:18.322]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.322]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.322]                     }
[16:12:18.322]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.322]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.322]                       envir = envir)
[16:12:18.322]                     if (!future$lazy) 
[16:12:18.322]                       future <- run(future)
[16:12:18.322]                     invisible(future)
[16:12:18.322]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.322]                 }
[16:12:18.322]             }
[16:12:18.322]         }
[16:12:18.322]     })
[16:12:18.322]     if (TRUE) {
[16:12:18.322]         base::sink(type = "output", split = FALSE)
[16:12:18.322]         if (TRUE) {
[16:12:18.322]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.322]         }
[16:12:18.322]         else {
[16:12:18.322]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.322]         }
[16:12:18.322]         base::close(...future.stdout)
[16:12:18.322]         ...future.stdout <- NULL
[16:12:18.322]     }
[16:12:18.322]     ...future.result$conditions <- ...future.conditions
[16:12:18.322]     ...future.result$finished <- base::Sys.time()
[16:12:18.322]     ...future.result
[16:12:18.322] }
[16:12:18.393] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[16:12:18.393] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[16:12:18.393] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[16:12:18.393] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[16:12:18.394] MultisessionFuture started
[16:12:18.394] - Launch lazy future ... done
[16:12:18.394] run() for ‘MultisessionFuture’ ... done
[16:12:18.395] getGlobalsAndPackages() ...
[16:12:18.395] Searching for globals...
[16:12:18.396] - globals found: [6] ‘{’, ‘if’, ‘==’, ‘%%’, ‘ii’, ‘stop’
[16:12:18.396] Searching for globals ... DONE
[16:12:18.397] Resolving globals: FALSE
[16:12:18.397] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:18.397] The total size of the 1 globals exported for future expression (‘{; if (ii%%2 == 0); stop("Woops!"); ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[16:12:18.397] - globals: [1] ‘ii’
[16:12:18.398] 
[16:12:18.398] getGlobalsAndPackages() ... DONE
[16:12:18.398] run() for ‘Future’ ...
[16:12:18.398] - state: ‘created’
[16:12:18.398] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.413] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.413] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.413]   - Field: ‘node’
[16:12:18.413]   - Field: ‘label’
[16:12:18.414]   - Field: ‘local’
[16:12:18.414]   - Field: ‘owner’
[16:12:18.414]   - Field: ‘envir’
[16:12:18.414]   - Field: ‘workers’
[16:12:18.414]   - Field: ‘packages’
[16:12:18.414]   - Field: ‘gc’
[16:12:18.414]   - Field: ‘conditions’
[16:12:18.414]   - Field: ‘persistent’
[16:12:18.414]   - Field: ‘expr’
[16:12:18.414]   - Field: ‘uuid’
[16:12:18.415]   - Field: ‘seed’
[16:12:18.415]   - Field: ‘version’
[16:12:18.415]   - Field: ‘result’
[16:12:18.415]   - Field: ‘asynchronous’
[16:12:18.415]   - Field: ‘calls’
[16:12:18.415]   - Field: ‘globals’
[16:12:18.415]   - Field: ‘stdout’
[16:12:18.415]   - Field: ‘earlySignal’
[16:12:18.415]   - Field: ‘lazy’
[16:12:18.415]   - Field: ‘state’
[16:12:18.415] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.416] - Launch lazy future ...
[16:12:18.416] Packages needed by the future expression (n = 0): <none>
[16:12:18.416] Packages needed by future strategies (n = 0): <none>
[16:12:18.416] {
[16:12:18.416]     {
[16:12:18.416]         {
[16:12:18.416]             ...future.startTime <- base::Sys.time()
[16:12:18.416]             {
[16:12:18.416]                 {
[16:12:18.416]                   {
[16:12:18.416]                     {
[16:12:18.416]                       base::local({
[16:12:18.416]                         has_future <- base::requireNamespace("future", 
[16:12:18.416]                           quietly = TRUE)
[16:12:18.416]                         if (has_future) {
[16:12:18.416]                           ns <- base::getNamespace("future")
[16:12:18.416]                           version <- ns[[".package"]][["version"]]
[16:12:18.416]                           if (is.null(version)) 
[16:12:18.416]                             version <- utils::packageVersion("future")
[16:12:18.416]                         }
[16:12:18.416]                         else {
[16:12:18.416]                           version <- NULL
[16:12:18.416]                         }
[16:12:18.416]                         if (!has_future || version < "1.8.0") {
[16:12:18.416]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.416]                             "", base::R.version$version.string), 
[16:12:18.416]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.416]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.416]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.416]                               "release", "version")], collapse = " "), 
[16:12:18.416]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.416]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.416]                             info)
[16:12:18.416]                           info <- base::paste(info, collapse = "; ")
[16:12:18.416]                           if (!has_future) {
[16:12:18.416]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.416]                               info)
[16:12:18.416]                           }
[16:12:18.416]                           else {
[16:12:18.416]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.416]                               info, version)
[16:12:18.416]                           }
[16:12:18.416]                           base::stop(msg)
[16:12:18.416]                         }
[16:12:18.416]                       })
[16:12:18.416]                     }
[16:12:18.416]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.416]                     base::options(mc.cores = 1L)
[16:12:18.416]                   }
[16:12:18.416]                   options(future.plan = NULL)
[16:12:18.416]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.416]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.416]                 }
[16:12:18.416]                 ...future.workdir <- getwd()
[16:12:18.416]             }
[16:12:18.416]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.416]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.416]         }
[16:12:18.416]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.416]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.416]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.416]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.416]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.416]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.416]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.416]             base::names(...future.oldOptions))
[16:12:18.416]     }
[16:12:18.416]     if (FALSE) {
[16:12:18.416]     }
[16:12:18.416]     else {
[16:12:18.416]         if (TRUE) {
[16:12:18.416]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.416]                 open = "w")
[16:12:18.416]         }
[16:12:18.416]         else {
[16:12:18.416]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.416]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.416]         }
[16:12:18.416]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.416]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.416]             base::sink(type = "output", split = FALSE)
[16:12:18.416]             base::close(...future.stdout)
[16:12:18.416]         }, add = TRUE)
[16:12:18.416]     }
[16:12:18.416]     ...future.frame <- base::sys.nframe()
[16:12:18.416]     ...future.conditions <- base::list()
[16:12:18.416]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.416]     if (FALSE) {
[16:12:18.416]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.416]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.416]     }
[16:12:18.416]     ...future.result <- base::tryCatch({
[16:12:18.416]         base::withCallingHandlers({
[16:12:18.416]             ...future.value <- base::withVisible(base::local({
[16:12:18.416]                 ...future.makeSendCondition <- local({
[16:12:18.416]                   sendCondition <- NULL
[16:12:18.416]                   function(frame = 1L) {
[16:12:18.416]                     if (is.function(sendCondition)) 
[16:12:18.416]                       return(sendCondition)
[16:12:18.416]                     ns <- getNamespace("parallel")
[16:12:18.416]                     if (exists("sendData", mode = "function", 
[16:12:18.416]                       envir = ns)) {
[16:12:18.416]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.416]                         envir = ns)
[16:12:18.416]                       envir <- sys.frame(frame)
[16:12:18.416]                       master <- NULL
[16:12:18.416]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.416]                         !identical(envir, emptyenv())) {
[16:12:18.416]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.416]                           inherits = FALSE)) {
[16:12:18.416]                           master <- get("master", mode = "list", 
[16:12:18.416]                             envir = envir, inherits = FALSE)
[16:12:18.416]                           if (inherits(master, c("SOCKnode", 
[16:12:18.416]                             "SOCK0node"))) {
[16:12:18.416]                             sendCondition <<- function(cond) {
[16:12:18.416]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.416]                                 success = TRUE)
[16:12:18.416]                               parallel_sendData(master, data)
[16:12:18.416]                             }
[16:12:18.416]                             return(sendCondition)
[16:12:18.416]                           }
[16:12:18.416]                         }
[16:12:18.416]                         frame <- frame + 1L
[16:12:18.416]                         envir <- sys.frame(frame)
[16:12:18.416]                       }
[16:12:18.416]                     }
[16:12:18.416]                     sendCondition <<- function(cond) NULL
[16:12:18.416]                   }
[16:12:18.416]                 })
[16:12:18.416]                 withCallingHandlers({
[16:12:18.416]                   {
[16:12:18.416]                     if (ii%%2 == 0) 
[16:12:18.416]                       stop("Woops!")
[16:12:18.416]                     ii
[16:12:18.416]                   }
[16:12:18.416]                 }, immediateCondition = function(cond) {
[16:12:18.416]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.416]                   sendCondition(cond)
[16:12:18.416]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.416]                   {
[16:12:18.416]                     inherits <- base::inherits
[16:12:18.416]                     invokeRestart <- base::invokeRestart
[16:12:18.416]                     is.null <- base::is.null
[16:12:18.416]                     muffled <- FALSE
[16:12:18.416]                     if (inherits(cond, "message")) {
[16:12:18.416]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.416]                       if (muffled) 
[16:12:18.416]                         invokeRestart("muffleMessage")
[16:12:18.416]                     }
[16:12:18.416]                     else if (inherits(cond, "warning")) {
[16:12:18.416]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.416]                       if (muffled) 
[16:12:18.416]                         invokeRestart("muffleWarning")
[16:12:18.416]                     }
[16:12:18.416]                     else if (inherits(cond, "condition")) {
[16:12:18.416]                       if (!is.null(pattern)) {
[16:12:18.416]                         computeRestarts <- base::computeRestarts
[16:12:18.416]                         grepl <- base::grepl
[16:12:18.416]                         restarts <- computeRestarts(cond)
[16:12:18.416]                         for (restart in restarts) {
[16:12:18.416]                           name <- restart$name
[16:12:18.416]                           if (is.null(name)) 
[16:12:18.416]                             next
[16:12:18.416]                           if (!grepl(pattern, name)) 
[16:12:18.416]                             next
[16:12:18.416]                           invokeRestart(restart)
[16:12:18.416]                           muffled <- TRUE
[16:12:18.416]                           break
[16:12:18.416]                         }
[16:12:18.416]                       }
[16:12:18.416]                     }
[16:12:18.416]                     invisible(muffled)
[16:12:18.416]                   }
[16:12:18.416]                   muffleCondition(cond)
[16:12:18.416]                 })
[16:12:18.416]             }))
[16:12:18.416]             future::FutureResult(value = ...future.value$value, 
[16:12:18.416]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.416]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.416]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.416]                     ...future.globalenv.names))
[16:12:18.416]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.416]         }, condition = base::local({
[16:12:18.416]             c <- base::c
[16:12:18.416]             inherits <- base::inherits
[16:12:18.416]             invokeRestart <- base::invokeRestart
[16:12:18.416]             length <- base::length
[16:12:18.416]             list <- base::list
[16:12:18.416]             seq.int <- base::seq.int
[16:12:18.416]             signalCondition <- base::signalCondition
[16:12:18.416]             sys.calls <- base::sys.calls
[16:12:18.416]             `[[` <- base::`[[`
[16:12:18.416]             `+` <- base::`+`
[16:12:18.416]             `<<-` <- base::`<<-`
[16:12:18.416]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.416]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.416]                   3L)]
[16:12:18.416]             }
[16:12:18.416]             function(cond) {
[16:12:18.416]                 is_error <- inherits(cond, "error")
[16:12:18.416]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.416]                   NULL)
[16:12:18.416]                 if (is_error) {
[16:12:18.416]                   sessionInformation <- function() {
[16:12:18.416]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.416]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.416]                       search = base::search(), system = base::Sys.info())
[16:12:18.416]                   }
[16:12:18.416]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.416]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.416]                     cond$call), session = sessionInformation(), 
[16:12:18.416]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.416]                   signalCondition(cond)
[16:12:18.416]                 }
[16:12:18.416]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.416]                 "immediateCondition"))) {
[16:12:18.416]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.416]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.416]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.416]                   if (TRUE && !signal) {
[16:12:18.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.416]                     {
[16:12:18.416]                       inherits <- base::inherits
[16:12:18.416]                       invokeRestart <- base::invokeRestart
[16:12:18.416]                       is.null <- base::is.null
[16:12:18.416]                       muffled <- FALSE
[16:12:18.416]                       if (inherits(cond, "message")) {
[16:12:18.416]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.416]                         if (muffled) 
[16:12:18.416]                           invokeRestart("muffleMessage")
[16:12:18.416]                       }
[16:12:18.416]                       else if (inherits(cond, "warning")) {
[16:12:18.416]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.416]                         if (muffled) 
[16:12:18.416]                           invokeRestart("muffleWarning")
[16:12:18.416]                       }
[16:12:18.416]                       else if (inherits(cond, "condition")) {
[16:12:18.416]                         if (!is.null(pattern)) {
[16:12:18.416]                           computeRestarts <- base::computeRestarts
[16:12:18.416]                           grepl <- base::grepl
[16:12:18.416]                           restarts <- computeRestarts(cond)
[16:12:18.416]                           for (restart in restarts) {
[16:12:18.416]                             name <- restart$name
[16:12:18.416]                             if (is.null(name)) 
[16:12:18.416]                               next
[16:12:18.416]                             if (!grepl(pattern, name)) 
[16:12:18.416]                               next
[16:12:18.416]                             invokeRestart(restart)
[16:12:18.416]                             muffled <- TRUE
[16:12:18.416]                             break
[16:12:18.416]                           }
[16:12:18.416]                         }
[16:12:18.416]                       }
[16:12:18.416]                       invisible(muffled)
[16:12:18.416]                     }
[16:12:18.416]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.416]                   }
[16:12:18.416]                 }
[16:12:18.416]                 else {
[16:12:18.416]                   if (TRUE) {
[16:12:18.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.416]                     {
[16:12:18.416]                       inherits <- base::inherits
[16:12:18.416]                       invokeRestart <- base::invokeRestart
[16:12:18.416]                       is.null <- base::is.null
[16:12:18.416]                       muffled <- FALSE
[16:12:18.416]                       if (inherits(cond, "message")) {
[16:12:18.416]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.416]                         if (muffled) 
[16:12:18.416]                           invokeRestart("muffleMessage")
[16:12:18.416]                       }
[16:12:18.416]                       else if (inherits(cond, "warning")) {
[16:12:18.416]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.416]                         if (muffled) 
[16:12:18.416]                           invokeRestart("muffleWarning")
[16:12:18.416]                       }
[16:12:18.416]                       else if (inherits(cond, "condition")) {
[16:12:18.416]                         if (!is.null(pattern)) {
[16:12:18.416]                           computeRestarts <- base::computeRestarts
[16:12:18.416]                           grepl <- base::grepl
[16:12:18.416]                           restarts <- computeRestarts(cond)
[16:12:18.416]                           for (restart in restarts) {
[16:12:18.416]                             name <- restart$name
[16:12:18.416]                             if (is.null(name)) 
[16:12:18.416]                               next
[16:12:18.416]                             if (!grepl(pattern, name)) 
[16:12:18.416]                               next
[16:12:18.416]                             invokeRestart(restart)
[16:12:18.416]                             muffled <- TRUE
[16:12:18.416]                             break
[16:12:18.416]                           }
[16:12:18.416]                         }
[16:12:18.416]                       }
[16:12:18.416]                       invisible(muffled)
[16:12:18.416]                     }
[16:12:18.416]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.416]                   }
[16:12:18.416]                 }
[16:12:18.416]             }
[16:12:18.416]         }))
[16:12:18.416]     }, error = function(ex) {
[16:12:18.416]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.416]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.416]                 ...future.rng), started = ...future.startTime, 
[16:12:18.416]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.416]             version = "1.8"), class = "FutureResult")
[16:12:18.416]     }, finally = {
[16:12:18.416]         if (!identical(...future.workdir, getwd())) 
[16:12:18.416]             setwd(...future.workdir)
[16:12:18.416]         {
[16:12:18.416]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.416]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.416]             }
[16:12:18.416]             base::options(...future.oldOptions)
[16:12:18.416]             if (.Platform$OS.type == "windows") {
[16:12:18.416]                 old_names <- names(...future.oldEnvVars)
[16:12:18.416]                 envs <- base::Sys.getenv()
[16:12:18.416]                 names <- names(envs)
[16:12:18.416]                 common <- intersect(names, old_names)
[16:12:18.416]                 added <- setdiff(names, old_names)
[16:12:18.416]                 removed <- setdiff(old_names, names)
[16:12:18.416]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.416]                   envs[common]]
[16:12:18.416]                 NAMES <- toupper(changed)
[16:12:18.416]                 args <- list()
[16:12:18.416]                 for (kk in seq_along(NAMES)) {
[16:12:18.416]                   name <- changed[[kk]]
[16:12:18.416]                   NAME <- NAMES[[kk]]
[16:12:18.416]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.416]                     next
[16:12:18.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.416]                 }
[16:12:18.416]                 NAMES <- toupper(added)
[16:12:18.416]                 for (kk in seq_along(NAMES)) {
[16:12:18.416]                   name <- added[[kk]]
[16:12:18.416]                   NAME <- NAMES[[kk]]
[16:12:18.416]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.416]                     next
[16:12:18.416]                   args[[name]] <- ""
[16:12:18.416]                 }
[16:12:18.416]                 NAMES <- toupper(removed)
[16:12:18.416]                 for (kk in seq_along(NAMES)) {
[16:12:18.416]                   name <- removed[[kk]]
[16:12:18.416]                   NAME <- NAMES[[kk]]
[16:12:18.416]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.416]                     next
[16:12:18.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.416]                 }
[16:12:18.416]                 if (length(args) > 0) 
[16:12:18.416]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.416]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.416]             }
[16:12:18.416]             else {
[16:12:18.416]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.416]             }
[16:12:18.416]             {
[16:12:18.416]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.416]                   0L) {
[16:12:18.416]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.416]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.416]                   base::options(opts)
[16:12:18.416]                 }
[16:12:18.416]                 {
[16:12:18.416]                   {
[16:12:18.416]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.416]                     NULL
[16:12:18.416]                   }
[16:12:18.416]                   options(future.plan = NULL)
[16:12:18.416]                   if (is.na(NA_character_)) 
[16:12:18.416]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.416]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.416]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.416]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.416]                     envir = parent.frame()) 
[16:12:18.416]                   {
[16:12:18.416]                     if (is.function(workers)) 
[16:12:18.416]                       workers <- workers()
[16:12:18.416]                     workers <- structure(as.integer(workers), 
[16:12:18.416]                       class = class(workers))
[16:12:18.416]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.416]                       workers >= 1)
[16:12:18.416]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.416]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.416]                     }
[16:12:18.416]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.416]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.416]                       envir = envir)
[16:12:18.416]                     if (!future$lazy) 
[16:12:18.416]                       future <- run(future)
[16:12:18.416]                     invisible(future)
[16:12:18.416]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.416]                 }
[16:12:18.416]             }
[16:12:18.416]         }
[16:12:18.416]     })
[16:12:18.416]     if (TRUE) {
[16:12:18.416]         base::sink(type = "output", split = FALSE)
[16:12:18.416]         if (TRUE) {
[16:12:18.416]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.416]         }
[16:12:18.416]         else {
[16:12:18.416]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.416]         }
[16:12:18.416]         base::close(...future.stdout)
[16:12:18.416]         ...future.stdout <- NULL
[16:12:18.416]     }
[16:12:18.416]     ...future.result$conditions <- ...future.conditions
[16:12:18.416]     ...future.result$finished <- base::Sys.time()
[16:12:18.416]     ...future.result
[16:12:18.416] }
[16:12:18.419] Poll #1 (0): usedNodes() = 2, workers = 2
[16:12:18.438] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.438] - Validating connection of MultisessionFuture
[16:12:18.438] - received message: FutureResult
[16:12:18.438] - Received FutureResult
[16:12:18.438] - Erased future from FutureRegistry
[16:12:18.438] result() for ClusterFuture ...
[16:12:18.439] - result already collected: FutureResult
[16:12:18.439] result() for ClusterFuture ... done
[16:12:18.439] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.439] result() for ClusterFuture ...
[16:12:18.439] - result already collected: FutureResult
[16:12:18.439] result() for ClusterFuture ... done
[16:12:18.439] result() for ClusterFuture ...
[16:12:18.439] - result already collected: FutureResult
[16:12:18.439] result() for ClusterFuture ... done
[16:12:18.440] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:12:18.440] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:12:18.441] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:12:18.441] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:12:18.441] MultisessionFuture started
[16:12:18.441] - Launch lazy future ... done
[16:12:18.441] run() for ‘MultisessionFuture’ ... done
[16:12:18.442] result() for ClusterFuture ...
[16:12:18.442] - result already collected: FutureResult
[16:12:18.442] result() for ClusterFuture ... done
[16:12:18.442] result() for ClusterFuture ...
[16:12:18.442] - result already collected: FutureResult
[16:12:18.442] result() for ClusterFuture ... done
[16:12:18.442] result() for ClusterFuture ...
[16:12:18.442] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.442] - Validating connection of MultisessionFuture
[16:12:18.470] - received message: FutureResult
[16:12:18.470] - Received FutureResult
[16:12:18.470] - Erased future from FutureRegistry
[16:12:18.470] result() for ClusterFuture ...
[16:12:18.470] - result already collected: FutureResult
[16:12:18.470] result() for ClusterFuture ... done
[16:12:18.470] signalConditions() ...
[16:12:18.470]  - include = ‘immediateCondition’
[16:12:18.470]  - exclude = 
[16:12:18.470]  - resignal = FALSE
[16:12:18.471]  - Number of conditions: 1
[16:12:18.471] signalConditions() ... done
[16:12:18.471] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.471] result() for ClusterFuture ... done
[16:12:18.471] result() for ClusterFuture ...
[16:12:18.471] - result already collected: FutureResult
[16:12:18.471] result() for ClusterFuture ... done
[16:12:18.471] signalConditions() ...
[16:12:18.471]  - include = ‘immediateCondition’
[16:12:18.471]  - exclude = 
[16:12:18.471]  - resignal = FALSE
[16:12:18.471]  - Number of conditions: 1
[16:12:18.472] signalConditions() ... done
[16:12:18.472] Future state: ‘finished’
[16:12:18.472] result() for ClusterFuture ...
[16:12:18.472] - result already collected: FutureResult
[16:12:18.472] result() for ClusterFuture ... done
[16:12:18.472] signalConditions() ...
[16:12:18.472]  - include = ‘condition’
[16:12:18.472]  - exclude = ‘immediateCondition’
[16:12:18.472]  - resignal = TRUE
[16:12:18.472]  - Number of conditions: 1
[16:12:18.473]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:18.473] signalConditions() ... done
[16:12:18.473] result() for ClusterFuture ...
[16:12:18.473] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.473] - Validating connection of MultisessionFuture
[16:12:18.492] - received message: FutureResult
[16:12:18.492] - Received FutureResult
[16:12:18.493] - Erased future from FutureRegistry
[16:12:18.493] result() for ClusterFuture ...
[16:12:18.493] - result already collected: FutureResult
[16:12:18.493] result() for ClusterFuture ... done
[16:12:18.493] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.493] result() for ClusterFuture ... done
[16:12:18.493] result() for ClusterFuture ...
[16:12:18.493] - result already collected: FutureResult
[16:12:18.493] result() for ClusterFuture ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:12:18.494] result() for ClusterFuture ...
[16:12:18.494] - result already collected: FutureResult
[16:12:18.494] result() for ClusterFuture ... done
[16:12:18.494] result() for ClusterFuture ...
[16:12:18.494] - result already collected: FutureResult
[16:12:18.494] result() for ClusterFuture ... done
[16:12:18.494] signalConditions() ...
[16:12:18.494]  - include = ‘immediateCondition’
[16:12:18.494]  - exclude = 
[16:12:18.494]  - resignal = FALSE
[16:12:18.494]  - Number of conditions: 1
[16:12:18.495] signalConditions() ... done
[16:12:18.495] Future state: ‘finished’
[16:12:18.495] result() for ClusterFuture ...
[16:12:18.495] - result already collected: FutureResult
[16:12:18.495] result() for ClusterFuture ... done
[16:12:18.495] signalConditions() ...
[16:12:18.495]  - include = ‘condition’
[16:12:18.495]  - exclude = ‘immediateCondition’
[16:12:18.495]  - resignal = TRUE
[16:12:18.495]  - Number of conditions: 1
[16:12:18.495]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:18.496] signalConditions() ... done
Warning in get(var, envir = x, inherits = FALSE) :
  restarting interrupted promise evaluation
[16:12:18.496] result() for ClusterFuture ...
[16:12:18.496] - result already collected: FutureResult
[16:12:18.496] result() for ClusterFuture ... done
[16:12:18.496] result() for ClusterFuture ...
[16:12:18.496] - result already collected: FutureResult
[16:12:18.496] result() for ClusterFuture ... done
[16:12:18.497] signalConditions() ...
[16:12:18.497]  - include = ‘immediateCondition’
[16:12:18.497]  - exclude = 
[16:12:18.497]  - resignal = FALSE
[16:12:18.497]  - Number of conditions: 1
[16:12:18.497] signalConditions() ... done
[16:12:18.497] Future state: ‘finished’
[16:12:18.497] result() for ClusterFuture ...
[16:12:18.497] - result already collected: FutureResult
[16:12:18.497] result() for ClusterFuture ... done
[16:12:18.497] signalConditions() ...
[16:12:18.498]  - include = ‘condition’
[16:12:18.498]  - exclude = ‘immediateCondition’
[16:12:18.498]  - resignal = TRUE
[16:12:18.498]  - Number of conditions: 1
[16:12:18.498]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:18.498] signalConditions() ... done
** Future evaluation with a poor-man's "progress bar"
[16:12:18.498] getGlobalsAndPackages() ...
[16:12:18.498] Searching for globals...
[16:12:18.500] - globals found: [4] ‘{’, ‘cat’, ‘for’, ‘:’
[16:12:18.500] Searching for globals ... DONE
[16:12:18.501] Resolving globals: FALSE
[16:12:18.501] 
[16:12:18.501] 
[16:12:18.501] getGlobalsAndPackages() ... DONE
[16:12:18.501] run() for ‘Future’ ...
[16:12:18.501] - state: ‘created’
[16:12:18.502] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.516] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.516] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.516]   - Field: ‘node’
[16:12:18.516]   - Field: ‘label’
[16:12:18.516]   - Field: ‘local’
[16:12:18.517]   - Field: ‘owner’
[16:12:18.517]   - Field: ‘envir’
[16:12:18.517]   - Field: ‘workers’
[16:12:18.517]   - Field: ‘packages’
[16:12:18.517]   - Field: ‘gc’
[16:12:18.517]   - Field: ‘conditions’
[16:12:18.517]   - Field: ‘persistent’
[16:12:18.517]   - Field: ‘expr’
[16:12:18.517]   - Field: ‘uuid’
[16:12:18.517]   - Field: ‘seed’
[16:12:18.517]   - Field: ‘version’
[16:12:18.518]   - Field: ‘result’
[16:12:18.518]   - Field: ‘asynchronous’
[16:12:18.518]   - Field: ‘calls’
[16:12:18.518]   - Field: ‘globals’
[16:12:18.518]   - Field: ‘stdout’
[16:12:18.518]   - Field: ‘earlySignal’
[16:12:18.518]   - Field: ‘lazy’
[16:12:18.518]   - Field: ‘state’
[16:12:18.518] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.518] - Launch lazy future ...
[16:12:18.519] Packages needed by the future expression (n = 0): <none>
[16:12:18.519] Packages needed by future strategies (n = 0): <none>
[16:12:18.519] {
[16:12:18.519]     {
[16:12:18.519]         {
[16:12:18.519]             ...future.startTime <- base::Sys.time()
[16:12:18.519]             {
[16:12:18.519]                 {
[16:12:18.519]                   {
[16:12:18.519]                     {
[16:12:18.519]                       base::local({
[16:12:18.519]                         has_future <- base::requireNamespace("future", 
[16:12:18.519]                           quietly = TRUE)
[16:12:18.519]                         if (has_future) {
[16:12:18.519]                           ns <- base::getNamespace("future")
[16:12:18.519]                           version <- ns[[".package"]][["version"]]
[16:12:18.519]                           if (is.null(version)) 
[16:12:18.519]                             version <- utils::packageVersion("future")
[16:12:18.519]                         }
[16:12:18.519]                         else {
[16:12:18.519]                           version <- NULL
[16:12:18.519]                         }
[16:12:18.519]                         if (!has_future || version < "1.8.0") {
[16:12:18.519]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.519]                             "", base::R.version$version.string), 
[16:12:18.519]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.519]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.519]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.519]                               "release", "version")], collapse = " "), 
[16:12:18.519]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.519]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.519]                             info)
[16:12:18.519]                           info <- base::paste(info, collapse = "; ")
[16:12:18.519]                           if (!has_future) {
[16:12:18.519]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.519]                               info)
[16:12:18.519]                           }
[16:12:18.519]                           else {
[16:12:18.519]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.519]                               info, version)
[16:12:18.519]                           }
[16:12:18.519]                           base::stop(msg)
[16:12:18.519]                         }
[16:12:18.519]                       })
[16:12:18.519]                     }
[16:12:18.519]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.519]                     base::options(mc.cores = 1L)
[16:12:18.519]                   }
[16:12:18.519]                   options(future.plan = NULL)
[16:12:18.519]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.519]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.519]                 }
[16:12:18.519]                 ...future.workdir <- getwd()
[16:12:18.519]             }
[16:12:18.519]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.519]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.519]         }
[16:12:18.519]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.519]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.519]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.519]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.519]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.519]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.519]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.519]             base::names(...future.oldOptions))
[16:12:18.519]     }
[16:12:18.519]     if (FALSE) {
[16:12:18.519]     }
[16:12:18.519]     else {
[16:12:18.519]         if (TRUE) {
[16:12:18.519]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.519]                 open = "w")
[16:12:18.519]         }
[16:12:18.519]         else {
[16:12:18.519]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.519]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.519]         }
[16:12:18.519]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.519]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.519]             base::sink(type = "output", split = FALSE)
[16:12:18.519]             base::close(...future.stdout)
[16:12:18.519]         }, add = TRUE)
[16:12:18.519]     }
[16:12:18.519]     ...future.frame <- base::sys.nframe()
[16:12:18.519]     ...future.conditions <- base::list()
[16:12:18.519]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.519]     if (FALSE) {
[16:12:18.519]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.519]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.519]     }
[16:12:18.519]     ...future.result <- base::tryCatch({
[16:12:18.519]         base::withCallingHandlers({
[16:12:18.519]             ...future.value <- base::withVisible(base::local({
[16:12:18.519]                 ...future.makeSendCondition <- local({
[16:12:18.519]                   sendCondition <- NULL
[16:12:18.519]                   function(frame = 1L) {
[16:12:18.519]                     if (is.function(sendCondition)) 
[16:12:18.519]                       return(sendCondition)
[16:12:18.519]                     ns <- getNamespace("parallel")
[16:12:18.519]                     if (exists("sendData", mode = "function", 
[16:12:18.519]                       envir = ns)) {
[16:12:18.519]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.519]                         envir = ns)
[16:12:18.519]                       envir <- sys.frame(frame)
[16:12:18.519]                       master <- NULL
[16:12:18.519]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.519]                         !identical(envir, emptyenv())) {
[16:12:18.519]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.519]                           inherits = FALSE)) {
[16:12:18.519]                           master <- get("master", mode = "list", 
[16:12:18.519]                             envir = envir, inherits = FALSE)
[16:12:18.519]                           if (inherits(master, c("SOCKnode", 
[16:12:18.519]                             "SOCK0node"))) {
[16:12:18.519]                             sendCondition <<- function(cond) {
[16:12:18.519]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.519]                                 success = TRUE)
[16:12:18.519]                               parallel_sendData(master, data)
[16:12:18.519]                             }
[16:12:18.519]                             return(sendCondition)
[16:12:18.519]                           }
[16:12:18.519]                         }
[16:12:18.519]                         frame <- frame + 1L
[16:12:18.519]                         envir <- sys.frame(frame)
[16:12:18.519]                       }
[16:12:18.519]                     }
[16:12:18.519]                     sendCondition <<- function(cond) NULL
[16:12:18.519]                   }
[16:12:18.519]                 })
[16:12:18.519]                 withCallingHandlers({
[16:12:18.519]                   {
[16:12:18.519]                     cat("Processing: ")
[16:12:18.519]                     for (ii in 1:10) {
[16:12:18.519]                       cat(".")
[16:12:18.519]                     }
[16:12:18.519]                     cat(" [100%]\n")
[16:12:18.519]                     4
[16:12:18.519]                   }
[16:12:18.519]                 }, immediateCondition = function(cond) {
[16:12:18.519]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.519]                   sendCondition(cond)
[16:12:18.519]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.519]                   {
[16:12:18.519]                     inherits <- base::inherits
[16:12:18.519]                     invokeRestart <- base::invokeRestart
[16:12:18.519]                     is.null <- base::is.null
[16:12:18.519]                     muffled <- FALSE
[16:12:18.519]                     if (inherits(cond, "message")) {
[16:12:18.519]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.519]                       if (muffled) 
[16:12:18.519]                         invokeRestart("muffleMessage")
[16:12:18.519]                     }
[16:12:18.519]                     else if (inherits(cond, "warning")) {
[16:12:18.519]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.519]                       if (muffled) 
[16:12:18.519]                         invokeRestart("muffleWarning")
[16:12:18.519]                     }
[16:12:18.519]                     else if (inherits(cond, "condition")) {
[16:12:18.519]                       if (!is.null(pattern)) {
[16:12:18.519]                         computeRestarts <- base::computeRestarts
[16:12:18.519]                         grepl <- base::grepl
[16:12:18.519]                         restarts <- computeRestarts(cond)
[16:12:18.519]                         for (restart in restarts) {
[16:12:18.519]                           name <- restart$name
[16:12:18.519]                           if (is.null(name)) 
[16:12:18.519]                             next
[16:12:18.519]                           if (!grepl(pattern, name)) 
[16:12:18.519]                             next
[16:12:18.519]                           invokeRestart(restart)
[16:12:18.519]                           muffled <- TRUE
[16:12:18.519]                           break
[16:12:18.519]                         }
[16:12:18.519]                       }
[16:12:18.519]                     }
[16:12:18.519]                     invisible(muffled)
[16:12:18.519]                   }
[16:12:18.519]                   muffleCondition(cond)
[16:12:18.519]                 })
[16:12:18.519]             }))
[16:12:18.519]             future::FutureResult(value = ...future.value$value, 
[16:12:18.519]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.519]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.519]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.519]                     ...future.globalenv.names))
[16:12:18.519]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.519]         }, condition = base::local({
[16:12:18.519]             c <- base::c
[16:12:18.519]             inherits <- base::inherits
[16:12:18.519]             invokeRestart <- base::invokeRestart
[16:12:18.519]             length <- base::length
[16:12:18.519]             list <- base::list
[16:12:18.519]             seq.int <- base::seq.int
[16:12:18.519]             signalCondition <- base::signalCondition
[16:12:18.519]             sys.calls <- base::sys.calls
[16:12:18.519]             `[[` <- base::`[[`
[16:12:18.519]             `+` <- base::`+`
[16:12:18.519]             `<<-` <- base::`<<-`
[16:12:18.519]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.519]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.519]                   3L)]
[16:12:18.519]             }
[16:12:18.519]             function(cond) {
[16:12:18.519]                 is_error <- inherits(cond, "error")
[16:12:18.519]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.519]                   NULL)
[16:12:18.519]                 if (is_error) {
[16:12:18.519]                   sessionInformation <- function() {
[16:12:18.519]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.519]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.519]                       search = base::search(), system = base::Sys.info())
[16:12:18.519]                   }
[16:12:18.519]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.519]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.519]                     cond$call), session = sessionInformation(), 
[16:12:18.519]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.519]                   signalCondition(cond)
[16:12:18.519]                 }
[16:12:18.519]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.519]                 "immediateCondition"))) {
[16:12:18.519]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.519]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.519]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.519]                   if (TRUE && !signal) {
[16:12:18.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.519]                     {
[16:12:18.519]                       inherits <- base::inherits
[16:12:18.519]                       invokeRestart <- base::invokeRestart
[16:12:18.519]                       is.null <- base::is.null
[16:12:18.519]                       muffled <- FALSE
[16:12:18.519]                       if (inherits(cond, "message")) {
[16:12:18.519]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.519]                         if (muffled) 
[16:12:18.519]                           invokeRestart("muffleMessage")
[16:12:18.519]                       }
[16:12:18.519]                       else if (inherits(cond, "warning")) {
[16:12:18.519]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.519]                         if (muffled) 
[16:12:18.519]                           invokeRestart("muffleWarning")
[16:12:18.519]                       }
[16:12:18.519]                       else if (inherits(cond, "condition")) {
[16:12:18.519]                         if (!is.null(pattern)) {
[16:12:18.519]                           computeRestarts <- base::computeRestarts
[16:12:18.519]                           grepl <- base::grepl
[16:12:18.519]                           restarts <- computeRestarts(cond)
[16:12:18.519]                           for (restart in restarts) {
[16:12:18.519]                             name <- restart$name
[16:12:18.519]                             if (is.null(name)) 
[16:12:18.519]                               next
[16:12:18.519]                             if (!grepl(pattern, name)) 
[16:12:18.519]                               next
[16:12:18.519]                             invokeRestart(restart)
[16:12:18.519]                             muffled <- TRUE
[16:12:18.519]                             break
[16:12:18.519]                           }
[16:12:18.519]                         }
[16:12:18.519]                       }
[16:12:18.519]                       invisible(muffled)
[16:12:18.519]                     }
[16:12:18.519]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.519]                   }
[16:12:18.519]                 }
[16:12:18.519]                 else {
[16:12:18.519]                   if (TRUE) {
[16:12:18.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.519]                     {
[16:12:18.519]                       inherits <- base::inherits
[16:12:18.519]                       invokeRestart <- base::invokeRestart
[16:12:18.519]                       is.null <- base::is.null
[16:12:18.519]                       muffled <- FALSE
[16:12:18.519]                       if (inherits(cond, "message")) {
[16:12:18.519]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.519]                         if (muffled) 
[16:12:18.519]                           invokeRestart("muffleMessage")
[16:12:18.519]                       }
[16:12:18.519]                       else if (inherits(cond, "warning")) {
[16:12:18.519]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.519]                         if (muffled) 
[16:12:18.519]                           invokeRestart("muffleWarning")
[16:12:18.519]                       }
[16:12:18.519]                       else if (inherits(cond, "condition")) {
[16:12:18.519]                         if (!is.null(pattern)) {
[16:12:18.519]                           computeRestarts <- base::computeRestarts
[16:12:18.519]                           grepl <- base::grepl
[16:12:18.519]                           restarts <- computeRestarts(cond)
[16:12:18.519]                           for (restart in restarts) {
[16:12:18.519]                             name <- restart$name
[16:12:18.519]                             if (is.null(name)) 
[16:12:18.519]                               next
[16:12:18.519]                             if (!grepl(pattern, name)) 
[16:12:18.519]                               next
[16:12:18.519]                             invokeRestart(restart)
[16:12:18.519]                             muffled <- TRUE
[16:12:18.519]                             break
[16:12:18.519]                           }
[16:12:18.519]                         }
[16:12:18.519]                       }
[16:12:18.519]                       invisible(muffled)
[16:12:18.519]                     }
[16:12:18.519]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.519]                   }
[16:12:18.519]                 }
[16:12:18.519]             }
[16:12:18.519]         }))
[16:12:18.519]     }, error = function(ex) {
[16:12:18.519]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.519]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.519]                 ...future.rng), started = ...future.startTime, 
[16:12:18.519]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.519]             version = "1.8"), class = "FutureResult")
[16:12:18.519]     }, finally = {
[16:12:18.519]         if (!identical(...future.workdir, getwd())) 
[16:12:18.519]             setwd(...future.workdir)
[16:12:18.519]         {
[16:12:18.519]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.519]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.519]             }
[16:12:18.519]             base::options(...future.oldOptions)
[16:12:18.519]             if (.Platform$OS.type == "windows") {
[16:12:18.519]                 old_names <- names(...future.oldEnvVars)
[16:12:18.519]                 envs <- base::Sys.getenv()
[16:12:18.519]                 names <- names(envs)
[16:12:18.519]                 common <- intersect(names, old_names)
[16:12:18.519]                 added <- setdiff(names, old_names)
[16:12:18.519]                 removed <- setdiff(old_names, names)
[16:12:18.519]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.519]                   envs[common]]
[16:12:18.519]                 NAMES <- toupper(changed)
[16:12:18.519]                 args <- list()
[16:12:18.519]                 for (kk in seq_along(NAMES)) {
[16:12:18.519]                   name <- changed[[kk]]
[16:12:18.519]                   NAME <- NAMES[[kk]]
[16:12:18.519]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.519]                     next
[16:12:18.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.519]                 }
[16:12:18.519]                 NAMES <- toupper(added)
[16:12:18.519]                 for (kk in seq_along(NAMES)) {
[16:12:18.519]                   name <- added[[kk]]
[16:12:18.519]                   NAME <- NAMES[[kk]]
[16:12:18.519]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.519]                     next
[16:12:18.519]                   args[[name]] <- ""
[16:12:18.519]                 }
[16:12:18.519]                 NAMES <- toupper(removed)
[16:12:18.519]                 for (kk in seq_along(NAMES)) {
[16:12:18.519]                   name <- removed[[kk]]
[16:12:18.519]                   NAME <- NAMES[[kk]]
[16:12:18.519]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.519]                     next
[16:12:18.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.519]                 }
[16:12:18.519]                 if (length(args) > 0) 
[16:12:18.519]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.519]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.519]             }
[16:12:18.519]             else {
[16:12:18.519]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.519]             }
[16:12:18.519]             {
[16:12:18.519]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.519]                   0L) {
[16:12:18.519]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.519]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.519]                   base::options(opts)
[16:12:18.519]                 }
[16:12:18.519]                 {
[16:12:18.519]                   {
[16:12:18.519]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.519]                     NULL
[16:12:18.519]                   }
[16:12:18.519]                   options(future.plan = NULL)
[16:12:18.519]                   if (is.na(NA_character_)) 
[16:12:18.519]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.519]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.519]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.519]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.519]                     envir = parent.frame()) 
[16:12:18.519]                   {
[16:12:18.519]                     if (is.function(workers)) 
[16:12:18.519]                       workers <- workers()
[16:12:18.519]                     workers <- structure(as.integer(workers), 
[16:12:18.519]                       class = class(workers))
[16:12:18.519]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.519]                       workers >= 1)
[16:12:18.519]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.519]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.519]                     }
[16:12:18.519]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.519]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.519]                       envir = envir)
[16:12:18.519]                     if (!future$lazy) 
[16:12:18.519]                       future <- run(future)
[16:12:18.519]                     invisible(future)
[16:12:18.519]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.519]                 }
[16:12:18.519]             }
[16:12:18.519]         }
[16:12:18.519]     })
[16:12:18.519]     if (TRUE) {
[16:12:18.519]         base::sink(type = "output", split = FALSE)
[16:12:18.519]         if (TRUE) {
[16:12:18.519]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.519]         }
[16:12:18.519]         else {
[16:12:18.519]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.519]         }
[16:12:18.519]         base::close(...future.stdout)
[16:12:18.519]         ...future.stdout <- NULL
[16:12:18.519]     }
[16:12:18.519]     ...future.result$conditions <- ...future.conditions
[16:12:18.519]     ...future.result$finished <- base::Sys.time()
[16:12:18.519]     ...future.result
[16:12:18.519] }
[16:12:18.522] MultisessionFuture started
[16:12:18.522] - Launch lazy future ... done
[16:12:18.522] run() for ‘MultisessionFuture’ ... done
** Collecting results
v1 = 1
v2 = 2
Warning in sprintf(...) : restarting interrupted promise evaluation
[16:12:18.523] result() for ClusterFuture ...
[16:12:18.523] - result already collected: FutureResult
[16:12:18.523] result() for ClusterFuture ... done
[16:12:18.523] result() for ClusterFuture ...
[16:12:18.523] - result already collected: FutureResult
[16:12:18.523] result() for ClusterFuture ... done
[16:12:18.523] signalConditions() ...
[16:12:18.523]  - include = ‘immediateCondition’
[16:12:18.524]  - exclude = 
[16:12:18.524]  - resignal = FALSE
[16:12:18.524]  - Number of conditions: 1
[16:12:18.524] signalConditions() ... done
[16:12:18.524] Future state: ‘finished’
[16:12:18.524] result() for ClusterFuture ...
[16:12:18.524] - result already collected: FutureResult
[16:12:18.524] result() for ClusterFuture ... done
[16:12:18.524] signalConditions() ...
[16:12:18.524]  - include = ‘condition’
[16:12:18.524]  - exclude = ‘immediateCondition’
[16:12:18.525]  - resignal = TRUE
[16:12:18.525]  - Number of conditions: 1
[16:12:18.525]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:12:18.525] signalConditions() ... done
v3: <simpleError> (as expect)
[16:12:18.525] result() for ClusterFuture ...
[16:12:18.525] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.525] - Validating connection of MultisessionFuture
[16:12:18.568] - received message: FutureResult
[16:12:18.568] - Received FutureResult
[16:12:18.568] - Erased future from FutureRegistry
[16:12:18.568] result() for ClusterFuture ...
[16:12:18.569] - result already collected: FutureResult
[16:12:18.569] result() for ClusterFuture ... done
[16:12:18.569] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.569] result() for ClusterFuture ... done
[16:12:18.569] result() for ClusterFuture ...
[16:12:18.569] - result already collected: FutureResult
[16:12:18.569] result() for ClusterFuture ... done
Processing: .......... [100%]
v4 = 4
** Left-to-right and right-to-left future assignments
[16:12:18.569] getGlobalsAndPackages() ...
[16:12:18.570] Searching for globals...
[16:12:18.570] 
[16:12:18.570] Searching for globals ... DONE
[16:12:18.570] - globals: [0] <none>
[16:12:18.570] getGlobalsAndPackages() ... DONE
[16:12:18.570] run() for ‘Future’ ...
[16:12:18.570] - state: ‘created’
[16:12:18.571] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.585] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.585] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.585]   - Field: ‘node’
[16:12:18.585]   - Field: ‘label’
[16:12:18.585]   - Field: ‘local’
[16:12:18.586]   - Field: ‘owner’
[16:12:18.586]   - Field: ‘envir’
[16:12:18.586]   - Field: ‘workers’
[16:12:18.586]   - Field: ‘packages’
[16:12:18.586]   - Field: ‘gc’
[16:12:18.586]   - Field: ‘conditions’
[16:12:18.586]   - Field: ‘persistent’
[16:12:18.586]   - Field: ‘expr’
[16:12:18.586]   - Field: ‘uuid’
[16:12:18.586]   - Field: ‘seed’
[16:12:18.586]   - Field: ‘version’
[16:12:18.587]   - Field: ‘result’
[16:12:18.587]   - Field: ‘asynchronous’
[16:12:18.587]   - Field: ‘calls’
[16:12:18.587]   - Field: ‘globals’
[16:12:18.587]   - Field: ‘stdout’
[16:12:18.587]   - Field: ‘earlySignal’
[16:12:18.587]   - Field: ‘lazy’
[16:12:18.587]   - Field: ‘state’
[16:12:18.587] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.587] - Launch lazy future ...
[16:12:18.588] Packages needed by the future expression (n = 0): <none>
[16:12:18.588] Packages needed by future strategies (n = 0): <none>
[16:12:18.593] {
[16:12:18.593]     {
[16:12:18.593]         {
[16:12:18.593]             ...future.startTime <- base::Sys.time()
[16:12:18.593]             {
[16:12:18.593]                 {
[16:12:18.593]                   {
[16:12:18.593]                     {
[16:12:18.593]                       base::local({
[16:12:18.593]                         has_future <- base::requireNamespace("future", 
[16:12:18.593]                           quietly = TRUE)
[16:12:18.593]                         if (has_future) {
[16:12:18.593]                           ns <- base::getNamespace("future")
[16:12:18.593]                           version <- ns[[".package"]][["version"]]
[16:12:18.593]                           if (is.null(version)) 
[16:12:18.593]                             version <- utils::packageVersion("future")
[16:12:18.593]                         }
[16:12:18.593]                         else {
[16:12:18.593]                           version <- NULL
[16:12:18.593]                         }
[16:12:18.593]                         if (!has_future || version < "1.8.0") {
[16:12:18.593]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.593]                             "", base::R.version$version.string), 
[16:12:18.593]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.593]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.593]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.593]                               "release", "version")], collapse = " "), 
[16:12:18.593]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.593]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.593]                             info)
[16:12:18.593]                           info <- base::paste(info, collapse = "; ")
[16:12:18.593]                           if (!has_future) {
[16:12:18.593]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.593]                               info)
[16:12:18.593]                           }
[16:12:18.593]                           else {
[16:12:18.593]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.593]                               info, version)
[16:12:18.593]                           }
[16:12:18.593]                           base::stop(msg)
[16:12:18.593]                         }
[16:12:18.593]                       })
[16:12:18.593]                     }
[16:12:18.593]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.593]                     base::options(mc.cores = 1L)
[16:12:18.593]                   }
[16:12:18.593]                   options(future.plan = NULL)
[16:12:18.593]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.593]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.593]                 }
[16:12:18.593]                 ...future.workdir <- getwd()
[16:12:18.593]             }
[16:12:18.593]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.593]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.593]         }
[16:12:18.593]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.593]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.593]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.593]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.593]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.593]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.593]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.593]             base::names(...future.oldOptions))
[16:12:18.593]     }
[16:12:18.593]     if (FALSE) {
[16:12:18.593]     }
[16:12:18.593]     else {
[16:12:18.593]         if (TRUE) {
[16:12:18.593]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.593]                 open = "w")
[16:12:18.593]         }
[16:12:18.593]         else {
[16:12:18.593]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.593]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.593]         }
[16:12:18.593]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.593]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.593]             base::sink(type = "output", split = FALSE)
[16:12:18.593]             base::close(...future.stdout)
[16:12:18.593]         }, add = TRUE)
[16:12:18.593]     }
[16:12:18.593]     ...future.frame <- base::sys.nframe()
[16:12:18.593]     ...future.conditions <- base::list()
[16:12:18.593]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.593]     if (FALSE) {
[16:12:18.593]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.593]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.593]     }
[16:12:18.593]     ...future.result <- base::tryCatch({
[16:12:18.593]         base::withCallingHandlers({
[16:12:18.593]             ...future.value <- base::withVisible(base::local({
[16:12:18.593]                 ...future.makeSendCondition <- local({
[16:12:18.593]                   sendCondition <- NULL
[16:12:18.593]                   function(frame = 1L) {
[16:12:18.593]                     if (is.function(sendCondition)) 
[16:12:18.593]                       return(sendCondition)
[16:12:18.593]                     ns <- getNamespace("parallel")
[16:12:18.593]                     if (exists("sendData", mode = "function", 
[16:12:18.593]                       envir = ns)) {
[16:12:18.593]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.593]                         envir = ns)
[16:12:18.593]                       envir <- sys.frame(frame)
[16:12:18.593]                       master <- NULL
[16:12:18.593]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.593]                         !identical(envir, emptyenv())) {
[16:12:18.593]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.593]                           inherits = FALSE)) {
[16:12:18.593]                           master <- get("master", mode = "list", 
[16:12:18.593]                             envir = envir, inherits = FALSE)
[16:12:18.593]                           if (inherits(master, c("SOCKnode", 
[16:12:18.593]                             "SOCK0node"))) {
[16:12:18.593]                             sendCondition <<- function(cond) {
[16:12:18.593]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.593]                                 success = TRUE)
[16:12:18.593]                               parallel_sendData(master, data)
[16:12:18.593]                             }
[16:12:18.593]                             return(sendCondition)
[16:12:18.593]                           }
[16:12:18.593]                         }
[16:12:18.593]                         frame <- frame + 1L
[16:12:18.593]                         envir <- sys.frame(frame)
[16:12:18.593]                       }
[16:12:18.593]                     }
[16:12:18.593]                     sendCondition <<- function(cond) NULL
[16:12:18.593]                   }
[16:12:18.593]                 })
[16:12:18.593]                 withCallingHandlers({
[16:12:18.593]                   1
[16:12:18.593]                 }, immediateCondition = function(cond) {
[16:12:18.593]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.593]                   sendCondition(cond)
[16:12:18.593]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.593]                   {
[16:12:18.593]                     inherits <- base::inherits
[16:12:18.593]                     invokeRestart <- base::invokeRestart
[16:12:18.593]                     is.null <- base::is.null
[16:12:18.593]                     muffled <- FALSE
[16:12:18.593]                     if (inherits(cond, "message")) {
[16:12:18.593]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.593]                       if (muffled) 
[16:12:18.593]                         invokeRestart("muffleMessage")
[16:12:18.593]                     }
[16:12:18.593]                     else if (inherits(cond, "warning")) {
[16:12:18.593]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.593]                       if (muffled) 
[16:12:18.593]                         invokeRestart("muffleWarning")
[16:12:18.593]                     }
[16:12:18.593]                     else if (inherits(cond, "condition")) {
[16:12:18.593]                       if (!is.null(pattern)) {
[16:12:18.593]                         computeRestarts <- base::computeRestarts
[16:12:18.593]                         grepl <- base::grepl
[16:12:18.593]                         restarts <- computeRestarts(cond)
[16:12:18.593]                         for (restart in restarts) {
[16:12:18.593]                           name <- restart$name
[16:12:18.593]                           if (is.null(name)) 
[16:12:18.593]                             next
[16:12:18.593]                           if (!grepl(pattern, name)) 
[16:12:18.593]                             next
[16:12:18.593]                           invokeRestart(restart)
[16:12:18.593]                           muffled <- TRUE
[16:12:18.593]                           break
[16:12:18.593]                         }
[16:12:18.593]                       }
[16:12:18.593]                     }
[16:12:18.593]                     invisible(muffled)
[16:12:18.593]                   }
[16:12:18.593]                   muffleCondition(cond)
[16:12:18.593]                 })
[16:12:18.593]             }))
[16:12:18.593]             future::FutureResult(value = ...future.value$value, 
[16:12:18.593]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.593]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.593]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.593]                     ...future.globalenv.names))
[16:12:18.593]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.593]         }, condition = base::local({
[16:12:18.593]             c <- base::c
[16:12:18.593]             inherits <- base::inherits
[16:12:18.593]             invokeRestart <- base::invokeRestart
[16:12:18.593]             length <- base::length
[16:12:18.593]             list <- base::list
[16:12:18.593]             seq.int <- base::seq.int
[16:12:18.593]             signalCondition <- base::signalCondition
[16:12:18.593]             sys.calls <- base::sys.calls
[16:12:18.593]             `[[` <- base::`[[`
[16:12:18.593]             `+` <- base::`+`
[16:12:18.593]             `<<-` <- base::`<<-`
[16:12:18.593]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.593]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.593]                   3L)]
[16:12:18.593]             }
[16:12:18.593]             function(cond) {
[16:12:18.593]                 is_error <- inherits(cond, "error")
[16:12:18.593]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.593]                   NULL)
[16:12:18.593]                 if (is_error) {
[16:12:18.593]                   sessionInformation <- function() {
[16:12:18.593]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.593]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.593]                       search = base::search(), system = base::Sys.info())
[16:12:18.593]                   }
[16:12:18.593]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.593]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.593]                     cond$call), session = sessionInformation(), 
[16:12:18.593]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.593]                   signalCondition(cond)
[16:12:18.593]                 }
[16:12:18.593]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.593]                 "immediateCondition"))) {
[16:12:18.593]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.593]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.593]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.593]                   if (TRUE && !signal) {
[16:12:18.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.593]                     {
[16:12:18.593]                       inherits <- base::inherits
[16:12:18.593]                       invokeRestart <- base::invokeRestart
[16:12:18.593]                       is.null <- base::is.null
[16:12:18.593]                       muffled <- FALSE
[16:12:18.593]                       if (inherits(cond, "message")) {
[16:12:18.593]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.593]                         if (muffled) 
[16:12:18.593]                           invokeRestart("muffleMessage")
[16:12:18.593]                       }
[16:12:18.593]                       else if (inherits(cond, "warning")) {
[16:12:18.593]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.593]                         if (muffled) 
[16:12:18.593]                           invokeRestart("muffleWarning")
[16:12:18.593]                       }
[16:12:18.593]                       else if (inherits(cond, "condition")) {
[16:12:18.593]                         if (!is.null(pattern)) {
[16:12:18.593]                           computeRestarts <- base::computeRestarts
[16:12:18.593]                           grepl <- base::grepl
[16:12:18.593]                           restarts <- computeRestarts(cond)
[16:12:18.593]                           for (restart in restarts) {
[16:12:18.593]                             name <- restart$name
[16:12:18.593]                             if (is.null(name)) 
[16:12:18.593]                               next
[16:12:18.593]                             if (!grepl(pattern, name)) 
[16:12:18.593]                               next
[16:12:18.593]                             invokeRestart(restart)
[16:12:18.593]                             muffled <- TRUE
[16:12:18.593]                             break
[16:12:18.593]                           }
[16:12:18.593]                         }
[16:12:18.593]                       }
[16:12:18.593]                       invisible(muffled)
[16:12:18.593]                     }
[16:12:18.593]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.593]                   }
[16:12:18.593]                 }
[16:12:18.593]                 else {
[16:12:18.593]                   if (TRUE) {
[16:12:18.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.593]                     {
[16:12:18.593]                       inherits <- base::inherits
[16:12:18.593]                       invokeRestart <- base::invokeRestart
[16:12:18.593]                       is.null <- base::is.null
[16:12:18.593]                       muffled <- FALSE
[16:12:18.593]                       if (inherits(cond, "message")) {
[16:12:18.593]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.593]                         if (muffled) 
[16:12:18.593]                           invokeRestart("muffleMessage")
[16:12:18.593]                       }
[16:12:18.593]                       else if (inherits(cond, "warning")) {
[16:12:18.593]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.593]                         if (muffled) 
[16:12:18.593]                           invokeRestart("muffleWarning")
[16:12:18.593]                       }
[16:12:18.593]                       else if (inherits(cond, "condition")) {
[16:12:18.593]                         if (!is.null(pattern)) {
[16:12:18.593]                           computeRestarts <- base::computeRestarts
[16:12:18.593]                           grepl <- base::grepl
[16:12:18.593]                           restarts <- computeRestarts(cond)
[16:12:18.593]                           for (restart in restarts) {
[16:12:18.593]                             name <- restart$name
[16:12:18.593]                             if (is.null(name)) 
[16:12:18.593]                               next
[16:12:18.593]                             if (!grepl(pattern, name)) 
[16:12:18.593]                               next
[16:12:18.593]                             invokeRestart(restart)
[16:12:18.593]                             muffled <- TRUE
[16:12:18.593]                             break
[16:12:18.593]                           }
[16:12:18.593]                         }
[16:12:18.593]                       }
[16:12:18.593]                       invisible(muffled)
[16:12:18.593]                     }
[16:12:18.593]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.593]                   }
[16:12:18.593]                 }
[16:12:18.593]             }
[16:12:18.593]         }))
[16:12:18.593]     }, error = function(ex) {
[16:12:18.593]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.593]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.593]                 ...future.rng), started = ...future.startTime, 
[16:12:18.593]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.593]             version = "1.8"), class = "FutureResult")
[16:12:18.593]     }, finally = {
[16:12:18.593]         if (!identical(...future.workdir, getwd())) 
[16:12:18.593]             setwd(...future.workdir)
[16:12:18.593]         {
[16:12:18.593]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.593]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.593]             }
[16:12:18.593]             base::options(...future.oldOptions)
[16:12:18.593]             if (.Platform$OS.type == "windows") {
[16:12:18.593]                 old_names <- names(...future.oldEnvVars)
[16:12:18.593]                 envs <- base::Sys.getenv()
[16:12:18.593]                 names <- names(envs)
[16:12:18.593]                 common <- intersect(names, old_names)
[16:12:18.593]                 added <- setdiff(names, old_names)
[16:12:18.593]                 removed <- setdiff(old_names, names)
[16:12:18.593]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.593]                   envs[common]]
[16:12:18.593]                 NAMES <- toupper(changed)
[16:12:18.593]                 args <- list()
[16:12:18.593]                 for (kk in seq_along(NAMES)) {
[16:12:18.593]                   name <- changed[[kk]]
[16:12:18.593]                   NAME <- NAMES[[kk]]
[16:12:18.593]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.593]                     next
[16:12:18.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.593]                 }
[16:12:18.593]                 NAMES <- toupper(added)
[16:12:18.593]                 for (kk in seq_along(NAMES)) {
[16:12:18.593]                   name <- added[[kk]]
[16:12:18.593]                   NAME <- NAMES[[kk]]
[16:12:18.593]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.593]                     next
[16:12:18.593]                   args[[name]] <- ""
[16:12:18.593]                 }
[16:12:18.593]                 NAMES <- toupper(removed)
[16:12:18.593]                 for (kk in seq_along(NAMES)) {
[16:12:18.593]                   name <- removed[[kk]]
[16:12:18.593]                   NAME <- NAMES[[kk]]
[16:12:18.593]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.593]                     next
[16:12:18.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.593]                 }
[16:12:18.593]                 if (length(args) > 0) 
[16:12:18.593]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.593]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.593]             }
[16:12:18.593]             else {
[16:12:18.593]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.593]             }
[16:12:18.593]             {
[16:12:18.593]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.593]                   0L) {
[16:12:18.593]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.593]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.593]                   base::options(opts)
[16:12:18.593]                 }
[16:12:18.593]                 {
[16:12:18.593]                   {
[16:12:18.593]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.593]                     NULL
[16:12:18.593]                   }
[16:12:18.593]                   options(future.plan = NULL)
[16:12:18.593]                   if (is.na(NA_character_)) 
[16:12:18.593]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.593]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.593]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.593]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.593]                     envir = parent.frame()) 
[16:12:18.593]                   {
[16:12:18.593]                     if (is.function(workers)) 
[16:12:18.593]                       workers <- workers()
[16:12:18.593]                     workers <- structure(as.integer(workers), 
[16:12:18.593]                       class = class(workers))
[16:12:18.593]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.593]                       workers >= 1)
[16:12:18.593]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.593]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.593]                     }
[16:12:18.593]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.593]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.593]                       envir = envir)
[16:12:18.593]                     if (!future$lazy) 
[16:12:18.593]                       future <- run(future)
[16:12:18.593]                     invisible(future)
[16:12:18.593]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.593]                 }
[16:12:18.593]             }
[16:12:18.593]         }
[16:12:18.593]     })
[16:12:18.593]     if (TRUE) {
[16:12:18.593]         base::sink(type = "output", split = FALSE)
[16:12:18.593]         if (TRUE) {
[16:12:18.593]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.593]         }
[16:12:18.593]         else {
[16:12:18.593]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.593]         }
[16:12:18.593]         base::close(...future.stdout)
[16:12:18.593]         ...future.stdout <- NULL
[16:12:18.593]     }
[16:12:18.593]     ...future.result$conditions <- ...future.conditions
[16:12:18.593]     ...future.result$finished <- base::Sys.time()
[16:12:18.593]     ...future.result
[16:12:18.593] }
[16:12:18.596] MultisessionFuture started
[16:12:18.596] - Launch lazy future ... done
[16:12:18.597] run() for ‘MultisessionFuture’ ... done
[16:12:18.597] result() for ClusterFuture ...
[16:12:18.597] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.597] - Validating connection of MultisessionFuture
[16:12:18.644] - received message: FutureResult
[16:12:18.644] - Received FutureResult
[16:12:18.644] - Erased future from FutureRegistry
[16:12:18.645] result() for ClusterFuture ...
[16:12:18.645] - result already collected: FutureResult
[16:12:18.645] result() for ClusterFuture ... done
[16:12:18.645] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.645] result() for ClusterFuture ... done
[16:12:18.645] result() for ClusterFuture ...
[16:12:18.645] - result already collected: FutureResult
[16:12:18.645] result() for ClusterFuture ... done
c = 1
[16:12:18.645] getGlobalsAndPackages() ...
[16:12:18.646] Searching for globals...
[16:12:18.646] 
[16:12:18.646] Searching for globals ... DONE
[16:12:18.646] - globals: [0] <none>
[16:12:18.646] getGlobalsAndPackages() ... DONE
[16:12:18.646] run() for ‘Future’ ...
[16:12:18.647] - state: ‘created’
[16:12:18.647] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.661] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.661] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.661]   - Field: ‘node’
[16:12:18.661]   - Field: ‘label’
[16:12:18.661]   - Field: ‘local’
[16:12:18.661]   - Field: ‘owner’
[16:12:18.661]   - Field: ‘envir’
[16:12:18.661]   - Field: ‘workers’
[16:12:18.662]   - Field: ‘packages’
[16:12:18.662]   - Field: ‘gc’
[16:12:18.662]   - Field: ‘conditions’
[16:12:18.662]   - Field: ‘persistent’
[16:12:18.662]   - Field: ‘expr’
[16:12:18.662]   - Field: ‘uuid’
[16:12:18.662]   - Field: ‘seed’
[16:12:18.662]   - Field: ‘version’
[16:12:18.662]   - Field: ‘result’
[16:12:18.662]   - Field: ‘asynchronous’
[16:12:18.662]   - Field: ‘calls’
[16:12:18.663]   - Field: ‘globals’
[16:12:18.663]   - Field: ‘stdout’
[16:12:18.663]   - Field: ‘earlySignal’
[16:12:18.663]   - Field: ‘lazy’
[16:12:18.663]   - Field: ‘state’
[16:12:18.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.663] - Launch lazy future ...
[16:12:18.663] Packages needed by the future expression (n = 0): <none>
[16:12:18.663] Packages needed by future strategies (n = 0): <none>
[16:12:18.664] {
[16:12:18.664]     {
[16:12:18.664]         {
[16:12:18.664]             ...future.startTime <- base::Sys.time()
[16:12:18.664]             {
[16:12:18.664]                 {
[16:12:18.664]                   {
[16:12:18.664]                     {
[16:12:18.664]                       base::local({
[16:12:18.664]                         has_future <- base::requireNamespace("future", 
[16:12:18.664]                           quietly = TRUE)
[16:12:18.664]                         if (has_future) {
[16:12:18.664]                           ns <- base::getNamespace("future")
[16:12:18.664]                           version <- ns[[".package"]][["version"]]
[16:12:18.664]                           if (is.null(version)) 
[16:12:18.664]                             version <- utils::packageVersion("future")
[16:12:18.664]                         }
[16:12:18.664]                         else {
[16:12:18.664]                           version <- NULL
[16:12:18.664]                         }
[16:12:18.664]                         if (!has_future || version < "1.8.0") {
[16:12:18.664]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.664]                             "", base::R.version$version.string), 
[16:12:18.664]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.664]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.664]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.664]                               "release", "version")], collapse = " "), 
[16:12:18.664]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.664]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.664]                             info)
[16:12:18.664]                           info <- base::paste(info, collapse = "; ")
[16:12:18.664]                           if (!has_future) {
[16:12:18.664]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.664]                               info)
[16:12:18.664]                           }
[16:12:18.664]                           else {
[16:12:18.664]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.664]                               info, version)
[16:12:18.664]                           }
[16:12:18.664]                           base::stop(msg)
[16:12:18.664]                         }
[16:12:18.664]                       })
[16:12:18.664]                     }
[16:12:18.664]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.664]                     base::options(mc.cores = 1L)
[16:12:18.664]                   }
[16:12:18.664]                   options(future.plan = NULL)
[16:12:18.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.664]                 }
[16:12:18.664]                 ...future.workdir <- getwd()
[16:12:18.664]             }
[16:12:18.664]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.664]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.664]         }
[16:12:18.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.664]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.664]             base::names(...future.oldOptions))
[16:12:18.664]     }
[16:12:18.664]     if (FALSE) {
[16:12:18.664]     }
[16:12:18.664]     else {
[16:12:18.664]         if (TRUE) {
[16:12:18.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.664]                 open = "w")
[16:12:18.664]         }
[16:12:18.664]         else {
[16:12:18.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.664]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.664]         }
[16:12:18.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.664]             base::sink(type = "output", split = FALSE)
[16:12:18.664]             base::close(...future.stdout)
[16:12:18.664]         }, add = TRUE)
[16:12:18.664]     }
[16:12:18.664]     ...future.frame <- base::sys.nframe()
[16:12:18.664]     ...future.conditions <- base::list()
[16:12:18.664]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.664]     if (FALSE) {
[16:12:18.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.664]     }
[16:12:18.664]     ...future.result <- base::tryCatch({
[16:12:18.664]         base::withCallingHandlers({
[16:12:18.664]             ...future.value <- base::withVisible(base::local({
[16:12:18.664]                 ...future.makeSendCondition <- local({
[16:12:18.664]                   sendCondition <- NULL
[16:12:18.664]                   function(frame = 1L) {
[16:12:18.664]                     if (is.function(sendCondition)) 
[16:12:18.664]                       return(sendCondition)
[16:12:18.664]                     ns <- getNamespace("parallel")
[16:12:18.664]                     if (exists("sendData", mode = "function", 
[16:12:18.664]                       envir = ns)) {
[16:12:18.664]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.664]                         envir = ns)
[16:12:18.664]                       envir <- sys.frame(frame)
[16:12:18.664]                       master <- NULL
[16:12:18.664]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.664]                         !identical(envir, emptyenv())) {
[16:12:18.664]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.664]                           inherits = FALSE)) {
[16:12:18.664]                           master <- get("master", mode = "list", 
[16:12:18.664]                             envir = envir, inherits = FALSE)
[16:12:18.664]                           if (inherits(master, c("SOCKnode", 
[16:12:18.664]                             "SOCK0node"))) {
[16:12:18.664]                             sendCondition <<- function(cond) {
[16:12:18.664]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.664]                                 success = TRUE)
[16:12:18.664]                               parallel_sendData(master, data)
[16:12:18.664]                             }
[16:12:18.664]                             return(sendCondition)
[16:12:18.664]                           }
[16:12:18.664]                         }
[16:12:18.664]                         frame <- frame + 1L
[16:12:18.664]                         envir <- sys.frame(frame)
[16:12:18.664]                       }
[16:12:18.664]                     }
[16:12:18.664]                     sendCondition <<- function(cond) NULL
[16:12:18.664]                   }
[16:12:18.664]                 })
[16:12:18.664]                 withCallingHandlers({
[16:12:18.664]                   1
[16:12:18.664]                 }, immediateCondition = function(cond) {
[16:12:18.664]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.664]                   sendCondition(cond)
[16:12:18.664]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.664]                   {
[16:12:18.664]                     inherits <- base::inherits
[16:12:18.664]                     invokeRestart <- base::invokeRestart
[16:12:18.664]                     is.null <- base::is.null
[16:12:18.664]                     muffled <- FALSE
[16:12:18.664]                     if (inherits(cond, "message")) {
[16:12:18.664]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.664]                       if (muffled) 
[16:12:18.664]                         invokeRestart("muffleMessage")
[16:12:18.664]                     }
[16:12:18.664]                     else if (inherits(cond, "warning")) {
[16:12:18.664]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.664]                       if (muffled) 
[16:12:18.664]                         invokeRestart("muffleWarning")
[16:12:18.664]                     }
[16:12:18.664]                     else if (inherits(cond, "condition")) {
[16:12:18.664]                       if (!is.null(pattern)) {
[16:12:18.664]                         computeRestarts <- base::computeRestarts
[16:12:18.664]                         grepl <- base::grepl
[16:12:18.664]                         restarts <- computeRestarts(cond)
[16:12:18.664]                         for (restart in restarts) {
[16:12:18.664]                           name <- restart$name
[16:12:18.664]                           if (is.null(name)) 
[16:12:18.664]                             next
[16:12:18.664]                           if (!grepl(pattern, name)) 
[16:12:18.664]                             next
[16:12:18.664]                           invokeRestart(restart)
[16:12:18.664]                           muffled <- TRUE
[16:12:18.664]                           break
[16:12:18.664]                         }
[16:12:18.664]                       }
[16:12:18.664]                     }
[16:12:18.664]                     invisible(muffled)
[16:12:18.664]                   }
[16:12:18.664]                   muffleCondition(cond)
[16:12:18.664]                 })
[16:12:18.664]             }))
[16:12:18.664]             future::FutureResult(value = ...future.value$value, 
[16:12:18.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.664]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.664]                     ...future.globalenv.names))
[16:12:18.664]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.664]         }, condition = base::local({
[16:12:18.664]             c <- base::c
[16:12:18.664]             inherits <- base::inherits
[16:12:18.664]             invokeRestart <- base::invokeRestart
[16:12:18.664]             length <- base::length
[16:12:18.664]             list <- base::list
[16:12:18.664]             seq.int <- base::seq.int
[16:12:18.664]             signalCondition <- base::signalCondition
[16:12:18.664]             sys.calls <- base::sys.calls
[16:12:18.664]             `[[` <- base::`[[`
[16:12:18.664]             `+` <- base::`+`
[16:12:18.664]             `<<-` <- base::`<<-`
[16:12:18.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.664]                   3L)]
[16:12:18.664]             }
[16:12:18.664]             function(cond) {
[16:12:18.664]                 is_error <- inherits(cond, "error")
[16:12:18.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.664]                   NULL)
[16:12:18.664]                 if (is_error) {
[16:12:18.664]                   sessionInformation <- function() {
[16:12:18.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.664]                       search = base::search(), system = base::Sys.info())
[16:12:18.664]                   }
[16:12:18.664]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.664]                     cond$call), session = sessionInformation(), 
[16:12:18.664]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.664]                   signalCondition(cond)
[16:12:18.664]                 }
[16:12:18.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.664]                 "immediateCondition"))) {
[16:12:18.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.664]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.664]                   if (TRUE && !signal) {
[16:12:18.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.664]                     {
[16:12:18.664]                       inherits <- base::inherits
[16:12:18.664]                       invokeRestart <- base::invokeRestart
[16:12:18.664]                       is.null <- base::is.null
[16:12:18.664]                       muffled <- FALSE
[16:12:18.664]                       if (inherits(cond, "message")) {
[16:12:18.664]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.664]                         if (muffled) 
[16:12:18.664]                           invokeRestart("muffleMessage")
[16:12:18.664]                       }
[16:12:18.664]                       else if (inherits(cond, "warning")) {
[16:12:18.664]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.664]                         if (muffled) 
[16:12:18.664]                           invokeRestart("muffleWarning")
[16:12:18.664]                       }
[16:12:18.664]                       else if (inherits(cond, "condition")) {
[16:12:18.664]                         if (!is.null(pattern)) {
[16:12:18.664]                           computeRestarts <- base::computeRestarts
[16:12:18.664]                           grepl <- base::grepl
[16:12:18.664]                           restarts <- computeRestarts(cond)
[16:12:18.664]                           for (restart in restarts) {
[16:12:18.664]                             name <- restart$name
[16:12:18.664]                             if (is.null(name)) 
[16:12:18.664]                               next
[16:12:18.664]                             if (!grepl(pattern, name)) 
[16:12:18.664]                               next
[16:12:18.664]                             invokeRestart(restart)
[16:12:18.664]                             muffled <- TRUE
[16:12:18.664]                             break
[16:12:18.664]                           }
[16:12:18.664]                         }
[16:12:18.664]                       }
[16:12:18.664]                       invisible(muffled)
[16:12:18.664]                     }
[16:12:18.664]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.664]                   }
[16:12:18.664]                 }
[16:12:18.664]                 else {
[16:12:18.664]                   if (TRUE) {
[16:12:18.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.664]                     {
[16:12:18.664]                       inherits <- base::inherits
[16:12:18.664]                       invokeRestart <- base::invokeRestart
[16:12:18.664]                       is.null <- base::is.null
[16:12:18.664]                       muffled <- FALSE
[16:12:18.664]                       if (inherits(cond, "message")) {
[16:12:18.664]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.664]                         if (muffled) 
[16:12:18.664]                           invokeRestart("muffleMessage")
[16:12:18.664]                       }
[16:12:18.664]                       else if (inherits(cond, "warning")) {
[16:12:18.664]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.664]                         if (muffled) 
[16:12:18.664]                           invokeRestart("muffleWarning")
[16:12:18.664]                       }
[16:12:18.664]                       else if (inherits(cond, "condition")) {
[16:12:18.664]                         if (!is.null(pattern)) {
[16:12:18.664]                           computeRestarts <- base::computeRestarts
[16:12:18.664]                           grepl <- base::grepl
[16:12:18.664]                           restarts <- computeRestarts(cond)
[16:12:18.664]                           for (restart in restarts) {
[16:12:18.664]                             name <- restart$name
[16:12:18.664]                             if (is.null(name)) 
[16:12:18.664]                               next
[16:12:18.664]                             if (!grepl(pattern, name)) 
[16:12:18.664]                               next
[16:12:18.664]                             invokeRestart(restart)
[16:12:18.664]                             muffled <- TRUE
[16:12:18.664]                             break
[16:12:18.664]                           }
[16:12:18.664]                         }
[16:12:18.664]                       }
[16:12:18.664]                       invisible(muffled)
[16:12:18.664]                     }
[16:12:18.664]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.664]                   }
[16:12:18.664]                 }
[16:12:18.664]             }
[16:12:18.664]         }))
[16:12:18.664]     }, error = function(ex) {
[16:12:18.664]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.664]                 ...future.rng), started = ...future.startTime, 
[16:12:18.664]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.664]             version = "1.8"), class = "FutureResult")
[16:12:18.664]     }, finally = {
[16:12:18.664]         if (!identical(...future.workdir, getwd())) 
[16:12:18.664]             setwd(...future.workdir)
[16:12:18.664]         {
[16:12:18.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.664]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.664]             }
[16:12:18.664]             base::options(...future.oldOptions)
[16:12:18.664]             if (.Platform$OS.type == "windows") {
[16:12:18.664]                 old_names <- names(...future.oldEnvVars)
[16:12:18.664]                 envs <- base::Sys.getenv()
[16:12:18.664]                 names <- names(envs)
[16:12:18.664]                 common <- intersect(names, old_names)
[16:12:18.664]                 added <- setdiff(names, old_names)
[16:12:18.664]                 removed <- setdiff(old_names, names)
[16:12:18.664]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.664]                   envs[common]]
[16:12:18.664]                 NAMES <- toupper(changed)
[16:12:18.664]                 args <- list()
[16:12:18.664]                 for (kk in seq_along(NAMES)) {
[16:12:18.664]                   name <- changed[[kk]]
[16:12:18.664]                   NAME <- NAMES[[kk]]
[16:12:18.664]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.664]                     next
[16:12:18.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.664]                 }
[16:12:18.664]                 NAMES <- toupper(added)
[16:12:18.664]                 for (kk in seq_along(NAMES)) {
[16:12:18.664]                   name <- added[[kk]]
[16:12:18.664]                   NAME <- NAMES[[kk]]
[16:12:18.664]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.664]                     next
[16:12:18.664]                   args[[name]] <- ""
[16:12:18.664]                 }
[16:12:18.664]                 NAMES <- toupper(removed)
[16:12:18.664]                 for (kk in seq_along(NAMES)) {
[16:12:18.664]                   name <- removed[[kk]]
[16:12:18.664]                   NAME <- NAMES[[kk]]
[16:12:18.664]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.664]                     next
[16:12:18.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.664]                 }
[16:12:18.664]                 if (length(args) > 0) 
[16:12:18.664]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.664]             }
[16:12:18.664]             else {
[16:12:18.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.664]             }
[16:12:18.664]             {
[16:12:18.664]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.664]                   0L) {
[16:12:18.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.664]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.664]                   base::options(opts)
[16:12:18.664]                 }
[16:12:18.664]                 {
[16:12:18.664]                   {
[16:12:18.664]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.664]                     NULL
[16:12:18.664]                   }
[16:12:18.664]                   options(future.plan = NULL)
[16:12:18.664]                   if (is.na(NA_character_)) 
[16:12:18.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.664]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.664]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.664]                     envir = parent.frame()) 
[16:12:18.664]                   {
[16:12:18.664]                     if (is.function(workers)) 
[16:12:18.664]                       workers <- workers()
[16:12:18.664]                     workers <- structure(as.integer(workers), 
[16:12:18.664]                       class = class(workers))
[16:12:18.664]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.664]                       workers >= 1)
[16:12:18.664]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.664]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.664]                     }
[16:12:18.664]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.664]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.664]                       envir = envir)
[16:12:18.664]                     if (!future$lazy) 
[16:12:18.664]                       future <- run(future)
[16:12:18.664]                     invisible(future)
[16:12:18.664]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.664]                 }
[16:12:18.664]             }
[16:12:18.664]         }
[16:12:18.664]     })
[16:12:18.664]     if (TRUE) {
[16:12:18.664]         base::sink(type = "output", split = FALSE)
[16:12:18.664]         if (TRUE) {
[16:12:18.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.664]         }
[16:12:18.664]         else {
[16:12:18.664]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.664]         }
[16:12:18.664]         base::close(...future.stdout)
[16:12:18.664]         ...future.stdout <- NULL
[16:12:18.664]     }
[16:12:18.664]     ...future.result$conditions <- ...future.conditions
[16:12:18.664]     ...future.result$finished <- base::Sys.time()
[16:12:18.664]     ...future.result
[16:12:18.664] }
[16:12:18.667] MultisessionFuture started
[16:12:18.667] - Launch lazy future ... done
[16:12:18.667] run() for ‘MultisessionFuture’ ... done
[16:12:18.667] result() for ClusterFuture ...
[16:12:18.667] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.668] - Validating connection of MultisessionFuture
[16:12:18.712] - received message: FutureResult
[16:12:18.712] - Received FutureResult
[16:12:18.712] - Erased future from FutureRegistry
[16:12:18.712] result() for ClusterFuture ...
[16:12:18.713] - result already collected: FutureResult
[16:12:18.713] result() for ClusterFuture ... done
[16:12:18.713] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.713] result() for ClusterFuture ... done
[16:12:18.713] result() for ClusterFuture ...
[16:12:18.713] - result already collected: FutureResult
[16:12:18.713] result() for ClusterFuture ... done
d = 1
** Nested future assignments
[16:12:18.713] getGlobalsAndPackages() ...
[16:12:18.714] Searching for globals...
[16:12:18.717] - globals found: [5] ‘{’, ‘<-’, ‘%<-%’, ‘%->%’, ‘+’
[16:12:18.717] Searching for globals ... DONE
[16:12:18.717] Resolving globals: FALSE
[16:12:18.718] 
[16:12:18.718] - packages: [1] ‘future’
[16:12:18.718] getGlobalsAndPackages() ... DONE
[16:12:18.718] run() for ‘Future’ ...
[16:12:18.718] - state: ‘created’
[16:12:18.718] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.733] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.733] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.733]   - Field: ‘node’
[16:12:18.733]   - Field: ‘label’
[16:12:18.733]   - Field: ‘local’
[16:12:18.733]   - Field: ‘owner’
[16:12:18.733]   - Field: ‘envir’
[16:12:18.733]   - Field: ‘workers’
[16:12:18.733]   - Field: ‘packages’
[16:12:18.733]   - Field: ‘gc’
[16:12:18.734]   - Field: ‘conditions’
[16:12:18.734]   - Field: ‘persistent’
[16:12:18.734]   - Field: ‘expr’
[16:12:18.734]   - Field: ‘uuid’
[16:12:18.734]   - Field: ‘seed’
[16:12:18.734]   - Field: ‘version’
[16:12:18.734]   - Field: ‘result’
[16:12:18.734]   - Field: ‘asynchronous’
[16:12:18.734]   - Field: ‘calls’
[16:12:18.734]   - Field: ‘globals’
[16:12:18.735]   - Field: ‘stdout’
[16:12:18.735]   - Field: ‘earlySignal’
[16:12:18.735]   - Field: ‘lazy’
[16:12:18.735]   - Field: ‘state’
[16:12:18.735] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.735] - Launch lazy future ...
[16:12:18.735] Packages needed by the future expression (n = 1): ‘future’
[16:12:18.735] Packages needed by future strategies (n = 0): <none>
[16:12:18.736] {
[16:12:18.736]     {
[16:12:18.736]         {
[16:12:18.736]             ...future.startTime <- base::Sys.time()
[16:12:18.736]             {
[16:12:18.736]                 {
[16:12:18.736]                   {
[16:12:18.736]                     {
[16:12:18.736]                       {
[16:12:18.736]                         base::local({
[16:12:18.736]                           has_future <- base::requireNamespace("future", 
[16:12:18.736]                             quietly = TRUE)
[16:12:18.736]                           if (has_future) {
[16:12:18.736]                             ns <- base::getNamespace("future")
[16:12:18.736]                             version <- ns[[".package"]][["version"]]
[16:12:18.736]                             if (is.null(version)) 
[16:12:18.736]                               version <- utils::packageVersion("future")
[16:12:18.736]                           }
[16:12:18.736]                           else {
[16:12:18.736]                             version <- NULL
[16:12:18.736]                           }
[16:12:18.736]                           if (!has_future || version < "1.8.0") {
[16:12:18.736]                             info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.736]                               "", base::R.version$version.string), 
[16:12:18.736]                               platform = base::sprintf("%s (%s-bit)", 
[16:12:18.736]                                 base::R.version$platform, 8 * 
[16:12:18.736]                                   base::.Machine$sizeof.pointer), 
[16:12:18.736]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.736]                                 "release", "version")], collapse = " "), 
[16:12:18.736]                               hostname = base::Sys.info()[["nodename"]])
[16:12:18.736]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.736]                               info)
[16:12:18.736]                             info <- base::paste(info, collapse = "; ")
[16:12:18.736]                             if (!has_future) {
[16:12:18.736]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.736]                                 info)
[16:12:18.736]                             }
[16:12:18.736]                             else {
[16:12:18.736]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.736]                                 info, version)
[16:12:18.736]                             }
[16:12:18.736]                             base::stop(msg)
[16:12:18.736]                           }
[16:12:18.736]                         })
[16:12:18.736]                       }
[16:12:18.736]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.736]                       base::options(mc.cores = 1L)
[16:12:18.736]                     }
[16:12:18.736]                     base::local({
[16:12:18.736]                       for (pkg in "future") {
[16:12:18.736]                         base::loadNamespace(pkg)
[16:12:18.736]                         base::library(pkg, character.only = TRUE)
[16:12:18.736]                       }
[16:12:18.736]                     })
[16:12:18.736]                   }
[16:12:18.736]                   options(future.plan = NULL)
[16:12:18.736]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.736]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.736]                 }
[16:12:18.736]                 ...future.workdir <- getwd()
[16:12:18.736]             }
[16:12:18.736]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.736]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.736]         }
[16:12:18.736]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.736]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.736]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.736]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.736]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.736]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.736]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.736]             base::names(...future.oldOptions))
[16:12:18.736]     }
[16:12:18.736]     if (FALSE) {
[16:12:18.736]     }
[16:12:18.736]     else {
[16:12:18.736]         if (TRUE) {
[16:12:18.736]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.736]                 open = "w")
[16:12:18.736]         }
[16:12:18.736]         else {
[16:12:18.736]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.736]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.736]         }
[16:12:18.736]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.736]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.736]             base::sink(type = "output", split = FALSE)
[16:12:18.736]             base::close(...future.stdout)
[16:12:18.736]         }, add = TRUE)
[16:12:18.736]     }
[16:12:18.736]     ...future.frame <- base::sys.nframe()
[16:12:18.736]     ...future.conditions <- base::list()
[16:12:18.736]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.736]     if (FALSE) {
[16:12:18.736]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.736]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.736]     }
[16:12:18.736]     ...future.result <- base::tryCatch({
[16:12:18.736]         base::withCallingHandlers({
[16:12:18.736]             ...future.value <- base::withVisible(base::local({
[16:12:18.736]                 ...future.makeSendCondition <- local({
[16:12:18.736]                   sendCondition <- NULL
[16:12:18.736]                   function(frame = 1L) {
[16:12:18.736]                     if (is.function(sendCondition)) 
[16:12:18.736]                       return(sendCondition)
[16:12:18.736]                     ns <- getNamespace("parallel")
[16:12:18.736]                     if (exists("sendData", mode = "function", 
[16:12:18.736]                       envir = ns)) {
[16:12:18.736]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.736]                         envir = ns)
[16:12:18.736]                       envir <- sys.frame(frame)
[16:12:18.736]                       master <- NULL
[16:12:18.736]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.736]                         !identical(envir, emptyenv())) {
[16:12:18.736]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.736]                           inherits = FALSE)) {
[16:12:18.736]                           master <- get("master", mode = "list", 
[16:12:18.736]                             envir = envir, inherits = FALSE)
[16:12:18.736]                           if (inherits(master, c("SOCKnode", 
[16:12:18.736]                             "SOCK0node"))) {
[16:12:18.736]                             sendCondition <<- function(cond) {
[16:12:18.736]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.736]                                 success = TRUE)
[16:12:18.736]                               parallel_sendData(master, data)
[16:12:18.736]                             }
[16:12:18.736]                             return(sendCondition)
[16:12:18.736]                           }
[16:12:18.736]                         }
[16:12:18.736]                         frame <- frame + 1L
[16:12:18.736]                         envir <- sys.frame(frame)
[16:12:18.736]                       }
[16:12:18.736]                     }
[16:12:18.736]                     sendCondition <<- function(cond) NULL
[16:12:18.736]                   }
[16:12:18.736]                 })
[16:12:18.736]                 withCallingHandlers({
[16:12:18.736]                   {
[16:12:18.736]                     b <- 1
[16:12:18.736]                     c %<-% 2
[16:12:18.736]                     d <- 3
[16:12:18.736]                     4 %->% e
[16:12:18.736]                     b + c + d + e
[16:12:18.736]                   }
[16:12:18.736]                 }, immediateCondition = function(cond) {
[16:12:18.736]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.736]                   sendCondition(cond)
[16:12:18.736]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.736]                   {
[16:12:18.736]                     inherits <- base::inherits
[16:12:18.736]                     invokeRestart <- base::invokeRestart
[16:12:18.736]                     is.null <- base::is.null
[16:12:18.736]                     muffled <- FALSE
[16:12:18.736]                     if (inherits(cond, "message")) {
[16:12:18.736]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.736]                       if (muffled) 
[16:12:18.736]                         invokeRestart("muffleMessage")
[16:12:18.736]                     }
[16:12:18.736]                     else if (inherits(cond, "warning")) {
[16:12:18.736]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.736]                       if (muffled) 
[16:12:18.736]                         invokeRestart("muffleWarning")
[16:12:18.736]                     }
[16:12:18.736]                     else if (inherits(cond, "condition")) {
[16:12:18.736]                       if (!is.null(pattern)) {
[16:12:18.736]                         computeRestarts <- base::computeRestarts
[16:12:18.736]                         grepl <- base::grepl
[16:12:18.736]                         restarts <- computeRestarts(cond)
[16:12:18.736]                         for (restart in restarts) {
[16:12:18.736]                           name <- restart$name
[16:12:18.736]                           if (is.null(name)) 
[16:12:18.736]                             next
[16:12:18.736]                           if (!grepl(pattern, name)) 
[16:12:18.736]                             next
[16:12:18.736]                           invokeRestart(restart)
[16:12:18.736]                           muffled <- TRUE
[16:12:18.736]                           break
[16:12:18.736]                         }
[16:12:18.736]                       }
[16:12:18.736]                     }
[16:12:18.736]                     invisible(muffled)
[16:12:18.736]                   }
[16:12:18.736]                   muffleCondition(cond)
[16:12:18.736]                 })
[16:12:18.736]             }))
[16:12:18.736]             future::FutureResult(value = ...future.value$value, 
[16:12:18.736]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.736]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.736]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.736]                     ...future.globalenv.names))
[16:12:18.736]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.736]         }, condition = base::local({
[16:12:18.736]             c <- base::c
[16:12:18.736]             inherits <- base::inherits
[16:12:18.736]             invokeRestart <- base::invokeRestart
[16:12:18.736]             length <- base::length
[16:12:18.736]             list <- base::list
[16:12:18.736]             seq.int <- base::seq.int
[16:12:18.736]             signalCondition <- base::signalCondition
[16:12:18.736]             sys.calls <- base::sys.calls
[16:12:18.736]             `[[` <- base::`[[`
[16:12:18.736]             `+` <- base::`+`
[16:12:18.736]             `<<-` <- base::`<<-`
[16:12:18.736]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.736]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.736]                   3L)]
[16:12:18.736]             }
[16:12:18.736]             function(cond) {
[16:12:18.736]                 is_error <- inherits(cond, "error")
[16:12:18.736]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.736]                   NULL)
[16:12:18.736]                 if (is_error) {
[16:12:18.736]                   sessionInformation <- function() {
[16:12:18.736]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.736]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.736]                       search = base::search(), system = base::Sys.info())
[16:12:18.736]                   }
[16:12:18.736]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.736]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.736]                     cond$call), session = sessionInformation(), 
[16:12:18.736]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.736]                   signalCondition(cond)
[16:12:18.736]                 }
[16:12:18.736]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.736]                 "immediateCondition"))) {
[16:12:18.736]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.736]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.736]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.736]                   if (TRUE && !signal) {
[16:12:18.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.736]                     {
[16:12:18.736]                       inherits <- base::inherits
[16:12:18.736]                       invokeRestart <- base::invokeRestart
[16:12:18.736]                       is.null <- base::is.null
[16:12:18.736]                       muffled <- FALSE
[16:12:18.736]                       if (inherits(cond, "message")) {
[16:12:18.736]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.736]                         if (muffled) 
[16:12:18.736]                           invokeRestart("muffleMessage")
[16:12:18.736]                       }
[16:12:18.736]                       else if (inherits(cond, "warning")) {
[16:12:18.736]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.736]                         if (muffled) 
[16:12:18.736]                           invokeRestart("muffleWarning")
[16:12:18.736]                       }
[16:12:18.736]                       else if (inherits(cond, "condition")) {
[16:12:18.736]                         if (!is.null(pattern)) {
[16:12:18.736]                           computeRestarts <- base::computeRestarts
[16:12:18.736]                           grepl <- base::grepl
[16:12:18.736]                           restarts <- computeRestarts(cond)
[16:12:18.736]                           for (restart in restarts) {
[16:12:18.736]                             name <- restart$name
[16:12:18.736]                             if (is.null(name)) 
[16:12:18.736]                               next
[16:12:18.736]                             if (!grepl(pattern, name)) 
[16:12:18.736]                               next
[16:12:18.736]                             invokeRestart(restart)
[16:12:18.736]                             muffled <- TRUE
[16:12:18.736]                             break
[16:12:18.736]                           }
[16:12:18.736]                         }
[16:12:18.736]                       }
[16:12:18.736]                       invisible(muffled)
[16:12:18.736]                     }
[16:12:18.736]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.736]                   }
[16:12:18.736]                 }
[16:12:18.736]                 else {
[16:12:18.736]                   if (TRUE) {
[16:12:18.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.736]                     {
[16:12:18.736]                       inherits <- base::inherits
[16:12:18.736]                       invokeRestart <- base::invokeRestart
[16:12:18.736]                       is.null <- base::is.null
[16:12:18.736]                       muffled <- FALSE
[16:12:18.736]                       if (inherits(cond, "message")) {
[16:12:18.736]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.736]                         if (muffled) 
[16:12:18.736]                           invokeRestart("muffleMessage")
[16:12:18.736]                       }
[16:12:18.736]                       else if (inherits(cond, "warning")) {
[16:12:18.736]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.736]                         if (muffled) 
[16:12:18.736]                           invokeRestart("muffleWarning")
[16:12:18.736]                       }
[16:12:18.736]                       else if (inherits(cond, "condition")) {
[16:12:18.736]                         if (!is.null(pattern)) {
[16:12:18.736]                           computeRestarts <- base::computeRestarts
[16:12:18.736]                           grepl <- base::grepl
[16:12:18.736]                           restarts <- computeRestarts(cond)
[16:12:18.736]                           for (restart in restarts) {
[16:12:18.736]                             name <- restart$name
[16:12:18.736]                             if (is.null(name)) 
[16:12:18.736]                               next
[16:12:18.736]                             if (!grepl(pattern, name)) 
[16:12:18.736]                               next
[16:12:18.736]                             invokeRestart(restart)
[16:12:18.736]                             muffled <- TRUE
[16:12:18.736]                             break
[16:12:18.736]                           }
[16:12:18.736]                         }
[16:12:18.736]                       }
[16:12:18.736]                       invisible(muffled)
[16:12:18.736]                     }
[16:12:18.736]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.736]                   }
[16:12:18.736]                 }
[16:12:18.736]             }
[16:12:18.736]         }))
[16:12:18.736]     }, error = function(ex) {
[16:12:18.736]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.736]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.736]                 ...future.rng), started = ...future.startTime, 
[16:12:18.736]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.736]             version = "1.8"), class = "FutureResult")
[16:12:18.736]     }, finally = {
[16:12:18.736]         if (!identical(...future.workdir, getwd())) 
[16:12:18.736]             setwd(...future.workdir)
[16:12:18.736]         {
[16:12:18.736]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.736]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.736]             }
[16:12:18.736]             base::options(...future.oldOptions)
[16:12:18.736]             if (.Platform$OS.type == "windows") {
[16:12:18.736]                 old_names <- names(...future.oldEnvVars)
[16:12:18.736]                 envs <- base::Sys.getenv()
[16:12:18.736]                 names <- names(envs)
[16:12:18.736]                 common <- intersect(names, old_names)
[16:12:18.736]                 added <- setdiff(names, old_names)
[16:12:18.736]                 removed <- setdiff(old_names, names)
[16:12:18.736]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.736]                   envs[common]]
[16:12:18.736]                 NAMES <- toupper(changed)
[16:12:18.736]                 args <- list()
[16:12:18.736]                 for (kk in seq_along(NAMES)) {
[16:12:18.736]                   name <- changed[[kk]]
[16:12:18.736]                   NAME <- NAMES[[kk]]
[16:12:18.736]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.736]                     next
[16:12:18.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.736]                 }
[16:12:18.736]                 NAMES <- toupper(added)
[16:12:18.736]                 for (kk in seq_along(NAMES)) {
[16:12:18.736]                   name <- added[[kk]]
[16:12:18.736]                   NAME <- NAMES[[kk]]
[16:12:18.736]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.736]                     next
[16:12:18.736]                   args[[name]] <- ""
[16:12:18.736]                 }
[16:12:18.736]                 NAMES <- toupper(removed)
[16:12:18.736]                 for (kk in seq_along(NAMES)) {
[16:12:18.736]                   name <- removed[[kk]]
[16:12:18.736]                   NAME <- NAMES[[kk]]
[16:12:18.736]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.736]                     next
[16:12:18.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.736]                 }
[16:12:18.736]                 if (length(args) > 0) 
[16:12:18.736]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.736]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.736]             }
[16:12:18.736]             else {
[16:12:18.736]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.736]             }
[16:12:18.736]             {
[16:12:18.736]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.736]                   0L) {
[16:12:18.736]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.736]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.736]                   base::options(opts)
[16:12:18.736]                 }
[16:12:18.736]                 {
[16:12:18.736]                   {
[16:12:18.736]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.736]                     NULL
[16:12:18.736]                   }
[16:12:18.736]                   options(future.plan = NULL)
[16:12:18.736]                   if (is.na(NA_character_)) 
[16:12:18.736]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.736]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.736]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.736]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.736]                     envir = parent.frame()) 
[16:12:18.736]                   {
[16:12:18.736]                     if (is.function(workers)) 
[16:12:18.736]                       workers <- workers()
[16:12:18.736]                     workers <- structure(as.integer(workers), 
[16:12:18.736]                       class = class(workers))
[16:12:18.736]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.736]                       workers >= 1)
[16:12:18.736]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.736]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.736]                     }
[16:12:18.736]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.736]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.736]                       envir = envir)
[16:12:18.736]                     if (!future$lazy) 
[16:12:18.736]                       future <- run(future)
[16:12:18.736]                     invisible(future)
[16:12:18.736]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.736]                 }
[16:12:18.736]             }
[16:12:18.736]         }
[16:12:18.736]     })
[16:12:18.736]     if (TRUE) {
[16:12:18.736]         base::sink(type = "output", split = FALSE)
[16:12:18.736]         if (TRUE) {
[16:12:18.736]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.736]         }
[16:12:18.736]         else {
[16:12:18.736]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.736]         }
[16:12:18.736]         base::close(...future.stdout)
[16:12:18.736]         ...future.stdout <- NULL
[16:12:18.736]     }
[16:12:18.736]     ...future.result$conditions <- ...future.conditions
[16:12:18.736]     ...future.result$finished <- base::Sys.time()
[16:12:18.736]     ...future.result
[16:12:18.736] }
[16:12:18.739] MultisessionFuture started
[16:12:18.739] - Launch lazy future ... done
[16:12:18.739] run() for ‘MultisessionFuture’ ... done
[16:12:18.739] result() for ClusterFuture ...
[16:12:18.740] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.740] - Validating connection of MultisessionFuture
[16:12:18.800] - received message: FutureResult
[16:12:18.801] - Received FutureResult
[16:12:18.801] - Erased future from FutureRegistry
[16:12:18.801] result() for ClusterFuture ...
[16:12:18.801] - result already collected: FutureResult
[16:12:18.801] result() for ClusterFuture ... done
[16:12:18.801] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.801] result() for ClusterFuture ... done
[16:12:18.801] result() for ClusterFuture ...
[16:12:18.801] - result already collected: FutureResult
[16:12:18.801] result() for ClusterFuture ... done
a = 10
[16:12:18.802] getGlobalsAndPackages() ...
[16:12:18.802] Searching for globals...
[16:12:18.803] - globals found: [3] ‘{’, ‘+’, ‘a’
[16:12:18.803] Searching for globals ... DONE
[16:12:18.803] Resolving globals: FALSE
[16:12:18.803] The total size of the 1 globals is 56 bytes (56 bytes)
[16:12:18.804] The total size of the 1 globals exported for future expression (‘{; a + 1; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[16:12:18.804] - globals: [1] ‘a’
[16:12:18.804] 
[16:12:18.804] getGlobalsAndPackages() ... DONE
[16:12:18.804] run() for ‘Future’ ...
[16:12:18.804] - state: ‘created’
[16:12:18.805] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:18.818] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:18.819] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:18.819]   - Field: ‘node’
[16:12:18.819]   - Field: ‘label’
[16:12:18.819]   - Field: ‘local’
[16:12:18.819]   - Field: ‘owner’
[16:12:18.819]   - Field: ‘envir’
[16:12:18.819]   - Field: ‘workers’
[16:12:18.819]   - Field: ‘packages’
[16:12:18.819]   - Field: ‘gc’
[16:12:18.820]   - Field: ‘conditions’
[16:12:18.820]   - Field: ‘persistent’
[16:12:18.820]   - Field: ‘expr’
[16:12:18.820]   - Field: ‘uuid’
[16:12:18.820]   - Field: ‘seed’
[16:12:18.820]   - Field: ‘version’
[16:12:18.820]   - Field: ‘result’
[16:12:18.820]   - Field: ‘asynchronous’
[16:12:18.820]   - Field: ‘calls’
[16:12:18.820]   - Field: ‘globals’
[16:12:18.820]   - Field: ‘stdout’
[16:12:18.821]   - Field: ‘earlySignal’
[16:12:18.821]   - Field: ‘lazy’
[16:12:18.821]   - Field: ‘state’
[16:12:18.821] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:18.821] - Launch lazy future ...
[16:12:18.821] Packages needed by the future expression (n = 0): <none>
[16:12:18.821] Packages needed by future strategies (n = 0): <none>
[16:12:18.822] {
[16:12:18.822]     {
[16:12:18.822]         {
[16:12:18.822]             ...future.startTime <- base::Sys.time()
[16:12:18.822]             {
[16:12:18.822]                 {
[16:12:18.822]                   {
[16:12:18.822]                     {
[16:12:18.822]                       base::local({
[16:12:18.822]                         has_future <- base::requireNamespace("future", 
[16:12:18.822]                           quietly = TRUE)
[16:12:18.822]                         if (has_future) {
[16:12:18.822]                           ns <- base::getNamespace("future")
[16:12:18.822]                           version <- ns[[".package"]][["version"]]
[16:12:18.822]                           if (is.null(version)) 
[16:12:18.822]                             version <- utils::packageVersion("future")
[16:12:18.822]                         }
[16:12:18.822]                         else {
[16:12:18.822]                           version <- NULL
[16:12:18.822]                         }
[16:12:18.822]                         if (!has_future || version < "1.8.0") {
[16:12:18.822]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:18.822]                             "", base::R.version$version.string), 
[16:12:18.822]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:18.822]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:18.822]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:18.822]                               "release", "version")], collapse = " "), 
[16:12:18.822]                             hostname = base::Sys.info()[["nodename"]])
[16:12:18.822]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:18.822]                             info)
[16:12:18.822]                           info <- base::paste(info, collapse = "; ")
[16:12:18.822]                           if (!has_future) {
[16:12:18.822]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:18.822]                               info)
[16:12:18.822]                           }
[16:12:18.822]                           else {
[16:12:18.822]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:18.822]                               info, version)
[16:12:18.822]                           }
[16:12:18.822]                           base::stop(msg)
[16:12:18.822]                         }
[16:12:18.822]                       })
[16:12:18.822]                     }
[16:12:18.822]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:18.822]                     base::options(mc.cores = 1L)
[16:12:18.822]                   }
[16:12:18.822]                   options(future.plan = NULL)
[16:12:18.822]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.822]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:18.822]                 }
[16:12:18.822]                 ...future.workdir <- getwd()
[16:12:18.822]             }
[16:12:18.822]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:18.822]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:18.822]         }
[16:12:18.822]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:18.822]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:18.822]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:18.822]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:18.822]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:18.822]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:18.822]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:18.822]             base::names(...future.oldOptions))
[16:12:18.822]     }
[16:12:18.822]     if (FALSE) {
[16:12:18.822]     }
[16:12:18.822]     else {
[16:12:18.822]         if (TRUE) {
[16:12:18.822]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:18.822]                 open = "w")
[16:12:18.822]         }
[16:12:18.822]         else {
[16:12:18.822]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:18.822]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:18.822]         }
[16:12:18.822]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:18.822]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:18.822]             base::sink(type = "output", split = FALSE)
[16:12:18.822]             base::close(...future.stdout)
[16:12:18.822]         }, add = TRUE)
[16:12:18.822]     }
[16:12:18.822]     ...future.frame <- base::sys.nframe()
[16:12:18.822]     ...future.conditions <- base::list()
[16:12:18.822]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:18.822]     if (FALSE) {
[16:12:18.822]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:18.822]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:18.822]     }
[16:12:18.822]     ...future.result <- base::tryCatch({
[16:12:18.822]         base::withCallingHandlers({
[16:12:18.822]             ...future.value <- base::withVisible(base::local({
[16:12:18.822]                 ...future.makeSendCondition <- local({
[16:12:18.822]                   sendCondition <- NULL
[16:12:18.822]                   function(frame = 1L) {
[16:12:18.822]                     if (is.function(sendCondition)) 
[16:12:18.822]                       return(sendCondition)
[16:12:18.822]                     ns <- getNamespace("parallel")
[16:12:18.822]                     if (exists("sendData", mode = "function", 
[16:12:18.822]                       envir = ns)) {
[16:12:18.822]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:18.822]                         envir = ns)
[16:12:18.822]                       envir <- sys.frame(frame)
[16:12:18.822]                       master <- NULL
[16:12:18.822]                       while (!identical(envir, .GlobalEnv) && 
[16:12:18.822]                         !identical(envir, emptyenv())) {
[16:12:18.822]                         if (exists("master", mode = "list", envir = envir, 
[16:12:18.822]                           inherits = FALSE)) {
[16:12:18.822]                           master <- get("master", mode = "list", 
[16:12:18.822]                             envir = envir, inherits = FALSE)
[16:12:18.822]                           if (inherits(master, c("SOCKnode", 
[16:12:18.822]                             "SOCK0node"))) {
[16:12:18.822]                             sendCondition <<- function(cond) {
[16:12:18.822]                               data <- list(type = "VALUE", value = cond, 
[16:12:18.822]                                 success = TRUE)
[16:12:18.822]                               parallel_sendData(master, data)
[16:12:18.822]                             }
[16:12:18.822]                             return(sendCondition)
[16:12:18.822]                           }
[16:12:18.822]                         }
[16:12:18.822]                         frame <- frame + 1L
[16:12:18.822]                         envir <- sys.frame(frame)
[16:12:18.822]                       }
[16:12:18.822]                     }
[16:12:18.822]                     sendCondition <<- function(cond) NULL
[16:12:18.822]                   }
[16:12:18.822]                 })
[16:12:18.822]                 withCallingHandlers({
[16:12:18.822]                   {
[16:12:18.822]                     a + 1
[16:12:18.822]                   }
[16:12:18.822]                 }, immediateCondition = function(cond) {
[16:12:18.822]                   sendCondition <- ...future.makeSendCondition()
[16:12:18.822]                   sendCondition(cond)
[16:12:18.822]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.822]                   {
[16:12:18.822]                     inherits <- base::inherits
[16:12:18.822]                     invokeRestart <- base::invokeRestart
[16:12:18.822]                     is.null <- base::is.null
[16:12:18.822]                     muffled <- FALSE
[16:12:18.822]                     if (inherits(cond, "message")) {
[16:12:18.822]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:18.822]                       if (muffled) 
[16:12:18.822]                         invokeRestart("muffleMessage")
[16:12:18.822]                     }
[16:12:18.822]                     else if (inherits(cond, "warning")) {
[16:12:18.822]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:18.822]                       if (muffled) 
[16:12:18.822]                         invokeRestart("muffleWarning")
[16:12:18.822]                     }
[16:12:18.822]                     else if (inherits(cond, "condition")) {
[16:12:18.822]                       if (!is.null(pattern)) {
[16:12:18.822]                         computeRestarts <- base::computeRestarts
[16:12:18.822]                         grepl <- base::grepl
[16:12:18.822]                         restarts <- computeRestarts(cond)
[16:12:18.822]                         for (restart in restarts) {
[16:12:18.822]                           name <- restart$name
[16:12:18.822]                           if (is.null(name)) 
[16:12:18.822]                             next
[16:12:18.822]                           if (!grepl(pattern, name)) 
[16:12:18.822]                             next
[16:12:18.822]                           invokeRestart(restart)
[16:12:18.822]                           muffled <- TRUE
[16:12:18.822]                           break
[16:12:18.822]                         }
[16:12:18.822]                       }
[16:12:18.822]                     }
[16:12:18.822]                     invisible(muffled)
[16:12:18.822]                   }
[16:12:18.822]                   muffleCondition(cond)
[16:12:18.822]                 })
[16:12:18.822]             }))
[16:12:18.822]             future::FutureResult(value = ...future.value$value, 
[16:12:18.822]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.822]                   ...future.rng), globalenv = if (FALSE) 
[16:12:18.822]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:18.822]                     ...future.globalenv.names))
[16:12:18.822]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:18.822]         }, condition = base::local({
[16:12:18.822]             c <- base::c
[16:12:18.822]             inherits <- base::inherits
[16:12:18.822]             invokeRestart <- base::invokeRestart
[16:12:18.822]             length <- base::length
[16:12:18.822]             list <- base::list
[16:12:18.822]             seq.int <- base::seq.int
[16:12:18.822]             signalCondition <- base::signalCondition
[16:12:18.822]             sys.calls <- base::sys.calls
[16:12:18.822]             `[[` <- base::`[[`
[16:12:18.822]             `+` <- base::`+`
[16:12:18.822]             `<<-` <- base::`<<-`
[16:12:18.822]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:18.822]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:18.822]                   3L)]
[16:12:18.822]             }
[16:12:18.822]             function(cond) {
[16:12:18.822]                 is_error <- inherits(cond, "error")
[16:12:18.822]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:18.822]                   NULL)
[16:12:18.822]                 if (is_error) {
[16:12:18.822]                   sessionInformation <- function() {
[16:12:18.822]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:18.822]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:18.822]                       search = base::search(), system = base::Sys.info())
[16:12:18.822]                   }
[16:12:18.822]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.822]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:18.822]                     cond$call), session = sessionInformation(), 
[16:12:18.822]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:18.822]                   signalCondition(cond)
[16:12:18.822]                 }
[16:12:18.822]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:18.822]                 "immediateCondition"))) {
[16:12:18.822]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:18.822]                   ...future.conditions[[length(...future.conditions) + 
[16:12:18.822]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:18.822]                   if (TRUE && !signal) {
[16:12:18.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.822]                     {
[16:12:18.822]                       inherits <- base::inherits
[16:12:18.822]                       invokeRestart <- base::invokeRestart
[16:12:18.822]                       is.null <- base::is.null
[16:12:18.822]                       muffled <- FALSE
[16:12:18.822]                       if (inherits(cond, "message")) {
[16:12:18.822]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.822]                         if (muffled) 
[16:12:18.822]                           invokeRestart("muffleMessage")
[16:12:18.822]                       }
[16:12:18.822]                       else if (inherits(cond, "warning")) {
[16:12:18.822]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.822]                         if (muffled) 
[16:12:18.822]                           invokeRestart("muffleWarning")
[16:12:18.822]                       }
[16:12:18.822]                       else if (inherits(cond, "condition")) {
[16:12:18.822]                         if (!is.null(pattern)) {
[16:12:18.822]                           computeRestarts <- base::computeRestarts
[16:12:18.822]                           grepl <- base::grepl
[16:12:18.822]                           restarts <- computeRestarts(cond)
[16:12:18.822]                           for (restart in restarts) {
[16:12:18.822]                             name <- restart$name
[16:12:18.822]                             if (is.null(name)) 
[16:12:18.822]                               next
[16:12:18.822]                             if (!grepl(pattern, name)) 
[16:12:18.822]                               next
[16:12:18.822]                             invokeRestart(restart)
[16:12:18.822]                             muffled <- TRUE
[16:12:18.822]                             break
[16:12:18.822]                           }
[16:12:18.822]                         }
[16:12:18.822]                       }
[16:12:18.822]                       invisible(muffled)
[16:12:18.822]                     }
[16:12:18.822]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.822]                   }
[16:12:18.822]                 }
[16:12:18.822]                 else {
[16:12:18.822]                   if (TRUE) {
[16:12:18.822]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:18.822]                     {
[16:12:18.822]                       inherits <- base::inherits
[16:12:18.822]                       invokeRestart <- base::invokeRestart
[16:12:18.822]                       is.null <- base::is.null
[16:12:18.822]                       muffled <- FALSE
[16:12:18.822]                       if (inherits(cond, "message")) {
[16:12:18.822]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:18.822]                         if (muffled) 
[16:12:18.822]                           invokeRestart("muffleMessage")
[16:12:18.822]                       }
[16:12:18.822]                       else if (inherits(cond, "warning")) {
[16:12:18.822]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:18.822]                         if (muffled) 
[16:12:18.822]                           invokeRestart("muffleWarning")
[16:12:18.822]                       }
[16:12:18.822]                       else if (inherits(cond, "condition")) {
[16:12:18.822]                         if (!is.null(pattern)) {
[16:12:18.822]                           computeRestarts <- base::computeRestarts
[16:12:18.822]                           grepl <- base::grepl
[16:12:18.822]                           restarts <- computeRestarts(cond)
[16:12:18.822]                           for (restart in restarts) {
[16:12:18.822]                             name <- restart$name
[16:12:18.822]                             if (is.null(name)) 
[16:12:18.822]                               next
[16:12:18.822]                             if (!grepl(pattern, name)) 
[16:12:18.822]                               next
[16:12:18.822]                             invokeRestart(restart)
[16:12:18.822]                             muffled <- TRUE
[16:12:18.822]                             break
[16:12:18.822]                           }
[16:12:18.822]                         }
[16:12:18.822]                       }
[16:12:18.822]                       invisible(muffled)
[16:12:18.822]                     }
[16:12:18.822]                     muffleCondition(cond, pattern = "^muffle")
[16:12:18.822]                   }
[16:12:18.822]                 }
[16:12:18.822]             }
[16:12:18.822]         }))
[16:12:18.822]     }, error = function(ex) {
[16:12:18.822]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:18.822]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:18.822]                 ...future.rng), started = ...future.startTime, 
[16:12:18.822]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:18.822]             version = "1.8"), class = "FutureResult")
[16:12:18.822]     }, finally = {
[16:12:18.822]         if (!identical(...future.workdir, getwd())) 
[16:12:18.822]             setwd(...future.workdir)
[16:12:18.822]         {
[16:12:18.822]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:18.822]                 ...future.oldOptions$nwarnings <- NULL
[16:12:18.822]             }
[16:12:18.822]             base::options(...future.oldOptions)
[16:12:18.822]             if (.Platform$OS.type == "windows") {
[16:12:18.822]                 old_names <- names(...future.oldEnvVars)
[16:12:18.822]                 envs <- base::Sys.getenv()
[16:12:18.822]                 names <- names(envs)
[16:12:18.822]                 common <- intersect(names, old_names)
[16:12:18.822]                 added <- setdiff(names, old_names)
[16:12:18.822]                 removed <- setdiff(old_names, names)
[16:12:18.822]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:18.822]                   envs[common]]
[16:12:18.822]                 NAMES <- toupper(changed)
[16:12:18.822]                 args <- list()
[16:12:18.822]                 for (kk in seq_along(NAMES)) {
[16:12:18.822]                   name <- changed[[kk]]
[16:12:18.822]                   NAME <- NAMES[[kk]]
[16:12:18.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.822]                     next
[16:12:18.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.822]                 }
[16:12:18.822]                 NAMES <- toupper(added)
[16:12:18.822]                 for (kk in seq_along(NAMES)) {
[16:12:18.822]                   name <- added[[kk]]
[16:12:18.822]                   NAME <- NAMES[[kk]]
[16:12:18.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.822]                     next
[16:12:18.822]                   args[[name]] <- ""
[16:12:18.822]                 }
[16:12:18.822]                 NAMES <- toupper(removed)
[16:12:18.822]                 for (kk in seq_along(NAMES)) {
[16:12:18.822]                   name <- removed[[kk]]
[16:12:18.822]                   NAME <- NAMES[[kk]]
[16:12:18.822]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:18.822]                     next
[16:12:18.822]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:18.822]                 }
[16:12:18.822]                 if (length(args) > 0) 
[16:12:18.822]                   base::do.call(base::Sys.setenv, args = args)
[16:12:18.822]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:18.822]             }
[16:12:18.822]             else {
[16:12:18.822]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:18.822]             }
[16:12:18.822]             {
[16:12:18.822]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:18.822]                   0L) {
[16:12:18.822]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:18.822]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:18.822]                   base::options(opts)
[16:12:18.822]                 }
[16:12:18.822]                 {
[16:12:18.822]                   {
[16:12:18.822]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:18.822]                     NULL
[16:12:18.822]                   }
[16:12:18.822]                   options(future.plan = NULL)
[16:12:18.822]                   if (is.na(NA_character_)) 
[16:12:18.822]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:18.822]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:18.822]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:18.822]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:18.822]                     envir = parent.frame()) 
[16:12:18.822]                   {
[16:12:18.822]                     if (is.function(workers)) 
[16:12:18.822]                       workers <- workers()
[16:12:18.822]                     workers <- structure(as.integer(workers), 
[16:12:18.822]                       class = class(workers))
[16:12:18.822]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:18.822]                       workers >= 1)
[16:12:18.822]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:18.822]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:18.822]                     }
[16:12:18.822]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:18.822]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:18.822]                       envir = envir)
[16:12:18.822]                     if (!future$lazy) 
[16:12:18.822]                       future <- run(future)
[16:12:18.822]                     invisible(future)
[16:12:18.822]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:18.822]                 }
[16:12:18.822]             }
[16:12:18.822]         }
[16:12:18.822]     })
[16:12:18.822]     if (TRUE) {
[16:12:18.822]         base::sink(type = "output", split = FALSE)
[16:12:18.822]         if (TRUE) {
[16:12:18.822]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:18.822]         }
[16:12:18.822]         else {
[16:12:18.822]             ...future.result["stdout"] <- base::list(NULL)
[16:12:18.822]         }
[16:12:18.822]         base::close(...future.stdout)
[16:12:18.822]         ...future.stdout <- NULL
[16:12:18.822]     }
[16:12:18.822]     ...future.result$conditions <- ...future.conditions
[16:12:18.822]     ...future.result$finished <- base::Sys.time()
[16:12:18.822]     ...future.result
[16:12:18.822] }
[16:12:18.824] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[16:12:18.825] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[16:12:18.825] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[16:12:18.825] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[16:12:18.826] MultisessionFuture started
[16:12:18.826] - Launch lazy future ... done
[16:12:18.826] run() for ‘MultisessionFuture’ ... done
[16:12:18.826] result() for ClusterFuture ...
[16:12:18.826] receiveMessageFromWorker() for ClusterFuture ...
[16:12:18.826] - Validating connection of MultisessionFuture
[16:12:18.872] - received message: FutureResult
[16:12:18.873] - Received FutureResult
[16:12:18.873] - Erased future from FutureRegistry
[16:12:18.873] result() for ClusterFuture ...
[16:12:18.873] - result already collected: FutureResult
[16:12:18.873] result() for ClusterFuture ... done
[16:12:18.873] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:18.873] result() for ClusterFuture ... done
[16:12:18.874] result() for ClusterFuture ...
[16:12:18.874] - result already collected: FutureResult
[16:12:18.874] result() for ClusterFuture ... done
b = 11
*** %<-% with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** %<-% ... DONE")
*** %<-% ... DONE
> 
> source("incl/end.R")
[16:12:18.875] plan(): Setting new future strategy stack:
[16:12:18.875] List of future strategies:
[16:12:18.875] 1. FutureStrategy:
[16:12:18.875]    - args: function (..., envir = parent.frame())
[16:12:18.875]    - tweaked: FALSE
[16:12:18.875]    - call: future::plan(oplan)
[16:12:18.876] plan(): nbrOfWorkers() = 1
> 
