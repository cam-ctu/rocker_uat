
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:55.910] plan(): Setting new future strategy stack:
[13:20:55.911] List of future strategies:
[13:20:55.911] 1. sequential:
[13:20:55.911]    - args: function (..., envir = parent.frame())
[13:20:55.911]    - tweaked: FALSE
[13:20:55.911]    - call: future::plan("sequential")
[13:20:55.923] plan(): nbrOfWorkers() = 1
> library("globals")
> 
> 
> message("*** tweakExpression() ...")
*** tweakExpression() ...
> 
> expr <- substitute({ a <<- 1; b <- 2; 3 ->> c }, env = list())
> print(expr)
{
    a <<- 1
    b <- 2
    c <<- 3
}
> exprT <- tweakExpression(expr)
> print(exprT)
{
    {
        a <- 1
        a <<- 1
    }
    b <- 2
    {
        c <- 3
        c <<- 3
    }
}
> 
> 
> b <- 2
> exprs <- list(
+   A = substitute({ a <- b; }, env = list()),
+   B = substitute({ a <- b; b <- 1 }, env = list()),
+   C = substitute({ a <- 1; a <- 2 }, env = list()),
+   D = substitute({ a <<- 1; a <- 2 }, env = list()),
+   E = substitute({ a <<- 1 }, env = list())
+ )
> 
> truth <- list(
+   A = "b",
+   B = "b",
+   C = character(0L),
+   D = character(0L),
+   E = character(0L)
+ )
> 
> 
> for (kk in seq_along(exprs)) {
+   name <- names(exprs)[kk]
+   expr <- exprs[[kk]]
+   cat(sprintf("Expression #%d ('%s'):", kk, name))
+   print(expr)
+   globals <- globalsOf(expr, tweak = tweakExpression, recursive = TRUE)
+   globals <- cleanup(globals)
+   str(globals)
+   stopifnot(identical(names(globals), truth[[name]]))
+ }
Expression #1 ('A'):{
    a <- b
}
List of 1
 $ b: num 2
 - attr(*, "where")=List of 1
  ..$ b:<environment: R_GlobalEnv> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
Expression #2 ('B'):{
    a <- b
    b <- 1
}
List of 1
 $ b: num 2
 - attr(*, "where")=List of 1
  ..$ b:<environment: R_GlobalEnv> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
Expression #3 ('C'):{
    a <- 1
    a <- 2
}
 Named list()
 - attr(*, "where")= Named list()
 - attr(*, "class")= chr [1:2] "Globals" "list"
Expression #4 ('D'):{
    a <<- 1
    a <- 2
}
 Named list()
 - attr(*, "where")= Named list()
 - attr(*, "class")= chr [1:2] "Globals" "list"
Expression #5 ('E'):{
    a <<- 1
}
 Named list()
 - attr(*, "where")= Named list()
 - attr(*, "class")= chr [1:2] "Globals" "list"
> 
> message("*** tweakExpression() ... DONE")
*** tweakExpression() ... DONE
> 
> source("incl/end.R")
[13:20:55.963] plan(): Setting new future strategy stack:
[13:20:55.963] List of future strategies:
[13:20:55.963] 1. FutureStrategy:
[13:20:55.963]    - args: function (..., envir = parent.frame())
[13:20:55.963]    - tweaked: FALSE
[13:20:55.963]    - call: future::plan(oplan)
[13:20:55.973] plan(): nbrOfWorkers() = 1
> 
