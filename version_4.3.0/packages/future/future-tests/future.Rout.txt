
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:13.893] plan(): Setting new future strategy stack:
[13:20:13.894] List of future strategies:
[13:20:13.894] 1. sequential:
[13:20:13.894]    - args: function (..., envir = parent.frame())
[13:20:13.894]    - tweaked: FALSE
[13:20:13.894]    - call: future::plan("sequential")
[13:20:13.908] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[13:20:13.918] getGlobalsAndPackages() ...
[13:20:13.918] Searching for globals...
[13:20:13.921] - globals found: [1] ‘{’
[13:20:13.922] Searching for globals ... DONE
[13:20:13.922] Resolving globals: FALSE
[13:20:13.922] 
[13:20:13.922] 
[13:20:13.922] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[13:20:13.923] resolved() for ‘Future’ ...
[13:20:13.923] - state: ‘created’
[13:20:13.923] - run: TRUE
[13:20:13.923] - run() ...
[13:20:13.924] run() for ‘Future’ ...
[13:20:13.924] - state: ‘created’
[13:20:13.924] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:13.924] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:13.924] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:13.924]   - Field: ‘label’
[13:20:13.925]   - Field: ‘local’
[13:20:13.925]   - Field: ‘owner’
[13:20:13.925]   - Field: ‘envir’
[13:20:13.925]   - Field: ‘packages’
[13:20:13.925]   - Field: ‘gc’
[13:20:13.925]   - Field: ‘conditions’
[13:20:13.925]   - Field: ‘expr’
[13:20:13.925]   - Field: ‘uuid’
[13:20:13.925]   - Field: ‘seed’
[13:20:13.925]   - Field: ‘version’
[13:20:13.926]   - Field: ‘result’
[13:20:13.926]   - Field: ‘asynchronous’
[13:20:13.926]   - Field: ‘calls’
[13:20:13.926]   - Field: ‘globals’
[13:20:13.926]   - Field: ‘stdout’
[13:20:13.926]   - Field: ‘earlySignal’
[13:20:13.926]   - Field: ‘lazy’
[13:20:13.926]   - Field: ‘state’
[13:20:13.926] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:13.926] - Launch lazy future ...
[13:20:13.927] Packages needed by the future expression (n = 0): <none>
[13:20:13.927] Packages needed by future strategies (n = 0): <none>
[13:20:13.928] {
[13:20:13.928]     {
[13:20:13.928]         {
[13:20:13.928]             ...future.startTime <- base::Sys.time()
[13:20:13.928]             {
[13:20:13.928]                 {
[13:20:13.928]                   {
[13:20:13.928]                     base::local({
[13:20:13.928]                       has_future <- base::requireNamespace("future", 
[13:20:13.928]                         quietly = TRUE)
[13:20:13.928]                       if (has_future) {
[13:20:13.928]                         ns <- base::getNamespace("future")
[13:20:13.928]                         version <- ns[[".package"]][["version"]]
[13:20:13.928]                         if (is.null(version)) 
[13:20:13.928]                           version <- utils::packageVersion("future")
[13:20:13.928]                       }
[13:20:13.928]                       else {
[13:20:13.928]                         version <- NULL
[13:20:13.928]                       }
[13:20:13.928]                       if (!has_future || version < "1.8.0") {
[13:20:13.928]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:13.928]                           "", base::R.version$version.string), 
[13:20:13.928]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:13.928]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:13.928]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:13.928]                             "release", "version")], collapse = " "), 
[13:20:13.928]                           hostname = base::Sys.info()[["nodename"]])
[13:20:13.928]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:13.928]                           info)
[13:20:13.928]                         info <- base::paste(info, collapse = "; ")
[13:20:13.928]                         if (!has_future) {
[13:20:13.928]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:13.928]                             info)
[13:20:13.928]                         }
[13:20:13.928]                         else {
[13:20:13.928]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:13.928]                             info, version)
[13:20:13.928]                         }
[13:20:13.928]                         base::stop(msg)
[13:20:13.928]                       }
[13:20:13.928]                     })
[13:20:13.928]                   }
[13:20:13.928]                   options(future.plan = NULL)
[13:20:13.928]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.928]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:13.928]                 }
[13:20:13.928]                 ...future.workdir <- getwd()
[13:20:13.928]             }
[13:20:13.928]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:13.928]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:13.928]         }
[13:20:13.928]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:13.928]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:13.928]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:13.928]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:13.928]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:13.928]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:13.928]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:13.928]             base::names(...future.oldOptions))
[13:20:13.928]     }
[13:20:13.928]     if (FALSE) {
[13:20:13.928]     }
[13:20:13.928]     else {
[13:20:13.928]         if (TRUE) {
[13:20:13.928]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:13.928]                 open = "w")
[13:20:13.928]         }
[13:20:13.928]         else {
[13:20:13.928]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:13.928]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:13.928]         }
[13:20:13.928]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:13.928]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:13.928]             base::sink(type = "output", split = FALSE)
[13:20:13.928]             base::close(...future.stdout)
[13:20:13.928]         }, add = TRUE)
[13:20:13.928]     }
[13:20:13.928]     ...future.frame <- base::sys.nframe()
[13:20:13.928]     ...future.conditions <- base::list()
[13:20:13.928]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:13.928]     if (FALSE) {
[13:20:13.928]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:13.928]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:13.928]     }
[13:20:13.928]     ...future.result <- base::tryCatch({
[13:20:13.928]         base::withCallingHandlers({
[13:20:13.928]             ...future.value <- base::withVisible(base::local({
[13:20:13.928]                 42L
[13:20:13.928]             }))
[13:20:13.928]             future::FutureResult(value = ...future.value$value, 
[13:20:13.928]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.928]                   ...future.rng), globalenv = if (FALSE) 
[13:20:13.928]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:13.928]                     ...future.globalenv.names))
[13:20:13.928]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:13.928]         }, condition = base::local({
[13:20:13.928]             c <- base::c
[13:20:13.928]             inherits <- base::inherits
[13:20:13.928]             invokeRestart <- base::invokeRestart
[13:20:13.928]             length <- base::length
[13:20:13.928]             list <- base::list
[13:20:13.928]             seq.int <- base::seq.int
[13:20:13.928]             signalCondition <- base::signalCondition
[13:20:13.928]             sys.calls <- base::sys.calls
[13:20:13.928]             `[[` <- base::`[[`
[13:20:13.928]             `+` <- base::`+`
[13:20:13.928]             `<<-` <- base::`<<-`
[13:20:13.928]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:13.928]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:13.928]                   3L)]
[13:20:13.928]             }
[13:20:13.928]             function(cond) {
[13:20:13.928]                 is_error <- inherits(cond, "error")
[13:20:13.928]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:13.928]                   NULL)
[13:20:13.928]                 if (is_error) {
[13:20:13.928]                   sessionInformation <- function() {
[13:20:13.928]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:13.928]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:13.928]                       search = base::search(), system = base::Sys.info())
[13:20:13.928]                   }
[13:20:13.928]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.928]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:13.928]                     cond$call), session = sessionInformation(), 
[13:20:13.928]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:13.928]                   signalCondition(cond)
[13:20:13.928]                 }
[13:20:13.928]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:13.928]                 "immediateCondition"))) {
[13:20:13.928]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:13.928]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.928]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:13.928]                   if (TRUE && !signal) {
[13:20:13.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.928]                     {
[13:20:13.928]                       inherits <- base::inherits
[13:20:13.928]                       invokeRestart <- base::invokeRestart
[13:20:13.928]                       is.null <- base::is.null
[13:20:13.928]                       muffled <- FALSE
[13:20:13.928]                       if (inherits(cond, "message")) {
[13:20:13.928]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.928]                         if (muffled) 
[13:20:13.928]                           invokeRestart("muffleMessage")
[13:20:13.928]                       }
[13:20:13.928]                       else if (inherits(cond, "warning")) {
[13:20:13.928]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.928]                         if (muffled) 
[13:20:13.928]                           invokeRestart("muffleWarning")
[13:20:13.928]                       }
[13:20:13.928]                       else if (inherits(cond, "condition")) {
[13:20:13.928]                         if (!is.null(pattern)) {
[13:20:13.928]                           computeRestarts <- base::computeRestarts
[13:20:13.928]                           grepl <- base::grepl
[13:20:13.928]                           restarts <- computeRestarts(cond)
[13:20:13.928]                           for (restart in restarts) {
[13:20:13.928]                             name <- restart$name
[13:20:13.928]                             if (is.null(name)) 
[13:20:13.928]                               next
[13:20:13.928]                             if (!grepl(pattern, name)) 
[13:20:13.928]                               next
[13:20:13.928]                             invokeRestart(restart)
[13:20:13.928]                             muffled <- TRUE
[13:20:13.928]                             break
[13:20:13.928]                           }
[13:20:13.928]                         }
[13:20:13.928]                       }
[13:20:13.928]                       invisible(muffled)
[13:20:13.928]                     }
[13:20:13.928]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.928]                   }
[13:20:13.928]                 }
[13:20:13.928]                 else {
[13:20:13.928]                   if (TRUE) {
[13:20:13.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.928]                     {
[13:20:13.928]                       inherits <- base::inherits
[13:20:13.928]                       invokeRestart <- base::invokeRestart
[13:20:13.928]                       is.null <- base::is.null
[13:20:13.928]                       muffled <- FALSE
[13:20:13.928]                       if (inherits(cond, "message")) {
[13:20:13.928]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.928]                         if (muffled) 
[13:20:13.928]                           invokeRestart("muffleMessage")
[13:20:13.928]                       }
[13:20:13.928]                       else if (inherits(cond, "warning")) {
[13:20:13.928]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.928]                         if (muffled) 
[13:20:13.928]                           invokeRestart("muffleWarning")
[13:20:13.928]                       }
[13:20:13.928]                       else if (inherits(cond, "condition")) {
[13:20:13.928]                         if (!is.null(pattern)) {
[13:20:13.928]                           computeRestarts <- base::computeRestarts
[13:20:13.928]                           grepl <- base::grepl
[13:20:13.928]                           restarts <- computeRestarts(cond)
[13:20:13.928]                           for (restart in restarts) {
[13:20:13.928]                             name <- restart$name
[13:20:13.928]                             if (is.null(name)) 
[13:20:13.928]                               next
[13:20:13.928]                             if (!grepl(pattern, name)) 
[13:20:13.928]                               next
[13:20:13.928]                             invokeRestart(restart)
[13:20:13.928]                             muffled <- TRUE
[13:20:13.928]                             break
[13:20:13.928]                           }
[13:20:13.928]                         }
[13:20:13.928]                       }
[13:20:13.928]                       invisible(muffled)
[13:20:13.928]                     }
[13:20:13.928]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.928]                   }
[13:20:13.928]                 }
[13:20:13.928]             }
[13:20:13.928]         }))
[13:20:13.928]     }, error = function(ex) {
[13:20:13.928]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:13.928]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.928]                 ...future.rng), started = ...future.startTime, 
[13:20:13.928]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:13.928]             version = "1.8"), class = "FutureResult")
[13:20:13.928]     }, finally = {
[13:20:13.928]         if (!identical(...future.workdir, getwd())) 
[13:20:13.928]             setwd(...future.workdir)
[13:20:13.928]         {
[13:20:13.928]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:13.928]                 ...future.oldOptions$nwarnings <- NULL
[13:20:13.928]             }
[13:20:13.928]             base::options(...future.oldOptions)
[13:20:13.928]             if (.Platform$OS.type == "windows") {
[13:20:13.928]                 old_names <- names(...future.oldEnvVars)
[13:20:13.928]                 envs <- base::Sys.getenv()
[13:20:13.928]                 names <- names(envs)
[13:20:13.928]                 common <- intersect(names, old_names)
[13:20:13.928]                 added <- setdiff(names, old_names)
[13:20:13.928]                 removed <- setdiff(old_names, names)
[13:20:13.928]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:13.928]                   envs[common]]
[13:20:13.928]                 NAMES <- toupper(changed)
[13:20:13.928]                 args <- list()
[13:20:13.928]                 for (kk in seq_along(NAMES)) {
[13:20:13.928]                   name <- changed[[kk]]
[13:20:13.928]                   NAME <- NAMES[[kk]]
[13:20:13.928]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.928]                     next
[13:20:13.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.928]                 }
[13:20:13.928]                 NAMES <- toupper(added)
[13:20:13.928]                 for (kk in seq_along(NAMES)) {
[13:20:13.928]                   name <- added[[kk]]
[13:20:13.928]                   NAME <- NAMES[[kk]]
[13:20:13.928]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.928]                     next
[13:20:13.928]                   args[[name]] <- ""
[13:20:13.928]                 }
[13:20:13.928]                 NAMES <- toupper(removed)
[13:20:13.928]                 for (kk in seq_along(NAMES)) {
[13:20:13.928]                   name <- removed[[kk]]
[13:20:13.928]                   NAME <- NAMES[[kk]]
[13:20:13.928]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.928]                     next
[13:20:13.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.928]                 }
[13:20:13.928]                 if (length(args) > 0) 
[13:20:13.928]                   base::do.call(base::Sys.setenv, args = args)
[13:20:13.928]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:13.928]             }
[13:20:13.928]             else {
[13:20:13.928]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:13.928]             }
[13:20:13.928]             {
[13:20:13.928]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:13.928]                   0L) {
[13:20:13.928]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:13.928]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:13.928]                   base::options(opts)
[13:20:13.928]                 }
[13:20:13.928]                 {
[13:20:13.928]                   {
[13:20:13.928]                     NULL
[13:20:13.928]                     RNGkind("Mersenne-Twister")
[13:20:13.928]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:13.928]                       inherits = FALSE)
[13:20:13.928]                   }
[13:20:13.928]                   options(future.plan = NULL)
[13:20:13.928]                   if (is.na(NA_character_)) 
[13:20:13.928]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.928]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:13.928]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:13.928]                   {
[13:20:13.928]                     future <- SequentialFuture(..., envir = envir)
[13:20:13.928]                     if (!future$lazy) 
[13:20:13.928]                       future <- run(future)
[13:20:13.928]                     invisible(future)
[13:20:13.928]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:13.928]                 }
[13:20:13.928]             }
[13:20:13.928]         }
[13:20:13.928]     })
[13:20:13.928]     if (TRUE) {
[13:20:13.928]         base::sink(type = "output", split = FALSE)
[13:20:13.928]         if (TRUE) {
[13:20:13.928]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:13.928]         }
[13:20:13.928]         else {
[13:20:13.928]             ...future.result["stdout"] <- base::list(NULL)
[13:20:13.928]         }
[13:20:13.928]         base::close(...future.stdout)
[13:20:13.928]         ...future.stdout <- NULL
[13:20:13.928]     }
[13:20:13.928]     ...future.result$conditions <- ...future.conditions
[13:20:13.928]     ...future.result$finished <- base::Sys.time()
[13:20:13.928]     ...future.result
[13:20:13.928] }
[13:20:13.930] plan(): Setting new future strategy stack:
[13:20:13.930] List of future strategies:
[13:20:13.930] 1. sequential:
[13:20:13.930]    - args: function (..., envir = parent.frame())
[13:20:13.930]    - tweaked: FALSE
[13:20:13.930]    - call: NULL
[13:20:13.931] plan(): nbrOfWorkers() = 1
[13:20:13.932] plan(): Setting new future strategy stack:
[13:20:13.932] List of future strategies:
[13:20:13.932] 1. sequential:
[13:20:13.932]    - args: function (..., envir = parent.frame())
[13:20:13.932]    - tweaked: FALSE
[13:20:13.932]    - call: future::plan("sequential")
[13:20:13.932] plan(): nbrOfWorkers() = 1
[13:20:13.932] SequentialFuture started (and completed)
[13:20:13.933] - Launch lazy future ... done
[13:20:13.933] run() for ‘SequentialFuture’ ... done
[13:20:13.933] - run() ... done
[13:20:13.933] - resolved() ...
[13:20:13.933] resolved() for ‘SequentialFuture’ ...
[13:20:13.934] - state: ‘finished’
[13:20:13.934] - run: TRUE
[13:20:13.934] - result: ‘FutureResult’
[13:20:13.934] resolved() for ‘SequentialFuture’ ... done
[13:20:13.934] - resolved: TRUE
[13:20:13.934] - resolved() ... done
[13:20:13.934] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[13:20:13.935] getGlobalsAndPackages() ...
[13:20:13.935] Searching for globals...
[13:20:13.935] 
[13:20:13.935] Searching for globals ... DONE
[13:20:13.935] - globals: [0] <none>
[13:20:13.935] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4ed71e5c-d941-4ad2-a5fc-cd26ff694492
Class: ‘Future’, ‘environment’
> y <- value(f)
[13:20:13.936] run() for ‘Future’ ...
[13:20:13.936] - state: ‘created’
[13:20:13.937] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:13.937] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:13.937] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:13.937]   - Field: ‘label’
[13:20:13.937]   - Field: ‘local’
[13:20:13.937]   - Field: ‘owner’
[13:20:13.937]   - Field: ‘envir’
[13:20:13.937]   - Field: ‘packages’
[13:20:13.938]   - Field: ‘gc’
[13:20:13.938]   - Field: ‘conditions’
[13:20:13.938]   - Field: ‘expr’
[13:20:13.938]   - Field: ‘uuid’
[13:20:13.938]   - Field: ‘seed’
[13:20:13.938]   - Field: ‘version’
[13:20:13.938]   - Field: ‘result’
[13:20:13.938]   - Field: ‘asynchronous’
[13:20:13.938]   - Field: ‘calls’
[13:20:13.938]   - Field: ‘globals’
[13:20:13.938]   - Field: ‘stdout’
[13:20:13.939]   - Field: ‘earlySignal’
[13:20:13.939]   - Field: ‘lazy’
[13:20:13.939]   - Field: ‘state’
[13:20:13.939] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:13.939] - Launch lazy future ...
[13:20:13.939] Packages needed by the future expression (n = 0): <none>
[13:20:13.939] Packages needed by future strategies (n = 0): <none>
[13:20:13.940] {
[13:20:13.940]     {
[13:20:13.940]         {
[13:20:13.940]             ...future.startTime <- base::Sys.time()
[13:20:13.940]             {
[13:20:13.940]                 {
[13:20:13.940]                   {
[13:20:13.940]                     base::local({
[13:20:13.940]                       has_future <- base::requireNamespace("future", 
[13:20:13.940]                         quietly = TRUE)
[13:20:13.940]                       if (has_future) {
[13:20:13.940]                         ns <- base::getNamespace("future")
[13:20:13.940]                         version <- ns[[".package"]][["version"]]
[13:20:13.940]                         if (is.null(version)) 
[13:20:13.940]                           version <- utils::packageVersion("future")
[13:20:13.940]                       }
[13:20:13.940]                       else {
[13:20:13.940]                         version <- NULL
[13:20:13.940]                       }
[13:20:13.940]                       if (!has_future || version < "1.8.0") {
[13:20:13.940]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:13.940]                           "", base::R.version$version.string), 
[13:20:13.940]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:13.940]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:13.940]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:13.940]                             "release", "version")], collapse = " "), 
[13:20:13.940]                           hostname = base::Sys.info()[["nodename"]])
[13:20:13.940]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:13.940]                           info)
[13:20:13.940]                         info <- base::paste(info, collapse = "; ")
[13:20:13.940]                         if (!has_future) {
[13:20:13.940]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:13.940]                             info)
[13:20:13.940]                         }
[13:20:13.940]                         else {
[13:20:13.940]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:13.940]                             info, version)
[13:20:13.940]                         }
[13:20:13.940]                         base::stop(msg)
[13:20:13.940]                       }
[13:20:13.940]                     })
[13:20:13.940]                   }
[13:20:13.940]                   options(future.plan = NULL)
[13:20:13.940]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.940]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:13.940]                 }
[13:20:13.940]                 ...future.workdir <- getwd()
[13:20:13.940]             }
[13:20:13.940]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:13.940]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:13.940]         }
[13:20:13.940]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:13.940]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:13.940]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:13.940]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:13.940]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:13.940]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:13.940]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:13.940]             base::names(...future.oldOptions))
[13:20:13.940]     }
[13:20:13.940]     if (FALSE) {
[13:20:13.940]     }
[13:20:13.940]     else {
[13:20:13.940]         if (TRUE) {
[13:20:13.940]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:13.940]                 open = "w")
[13:20:13.940]         }
[13:20:13.940]         else {
[13:20:13.940]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:13.940]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:13.940]         }
[13:20:13.940]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:13.940]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:13.940]             base::sink(type = "output", split = FALSE)
[13:20:13.940]             base::close(...future.stdout)
[13:20:13.940]         }, add = TRUE)
[13:20:13.940]     }
[13:20:13.940]     ...future.frame <- base::sys.nframe()
[13:20:13.940]     ...future.conditions <- base::list()
[13:20:13.940]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:13.940]     if (FALSE) {
[13:20:13.940]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:13.940]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:13.940]     }
[13:20:13.940]     ...future.result <- base::tryCatch({
[13:20:13.940]         base::withCallingHandlers({
[13:20:13.940]             ...future.value <- base::withVisible(base::local(42L))
[13:20:13.940]             future::FutureResult(value = ...future.value$value, 
[13:20:13.940]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.940]                   ...future.rng), globalenv = if (FALSE) 
[13:20:13.940]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:13.940]                     ...future.globalenv.names))
[13:20:13.940]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:13.940]         }, condition = base::local({
[13:20:13.940]             c <- base::c
[13:20:13.940]             inherits <- base::inherits
[13:20:13.940]             invokeRestart <- base::invokeRestart
[13:20:13.940]             length <- base::length
[13:20:13.940]             list <- base::list
[13:20:13.940]             seq.int <- base::seq.int
[13:20:13.940]             signalCondition <- base::signalCondition
[13:20:13.940]             sys.calls <- base::sys.calls
[13:20:13.940]             `[[` <- base::`[[`
[13:20:13.940]             `+` <- base::`+`
[13:20:13.940]             `<<-` <- base::`<<-`
[13:20:13.940]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:13.940]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:13.940]                   3L)]
[13:20:13.940]             }
[13:20:13.940]             function(cond) {
[13:20:13.940]                 is_error <- inherits(cond, "error")
[13:20:13.940]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:13.940]                   NULL)
[13:20:13.940]                 if (is_error) {
[13:20:13.940]                   sessionInformation <- function() {
[13:20:13.940]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:13.940]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:13.940]                       search = base::search(), system = base::Sys.info())
[13:20:13.940]                   }
[13:20:13.940]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.940]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:13.940]                     cond$call), session = sessionInformation(), 
[13:20:13.940]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:13.940]                   signalCondition(cond)
[13:20:13.940]                 }
[13:20:13.940]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:13.940]                 "immediateCondition"))) {
[13:20:13.940]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:13.940]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.940]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:13.940]                   if (TRUE && !signal) {
[13:20:13.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.940]                     {
[13:20:13.940]                       inherits <- base::inherits
[13:20:13.940]                       invokeRestart <- base::invokeRestart
[13:20:13.940]                       is.null <- base::is.null
[13:20:13.940]                       muffled <- FALSE
[13:20:13.940]                       if (inherits(cond, "message")) {
[13:20:13.940]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.940]                         if (muffled) 
[13:20:13.940]                           invokeRestart("muffleMessage")
[13:20:13.940]                       }
[13:20:13.940]                       else if (inherits(cond, "warning")) {
[13:20:13.940]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.940]                         if (muffled) 
[13:20:13.940]                           invokeRestart("muffleWarning")
[13:20:13.940]                       }
[13:20:13.940]                       else if (inherits(cond, "condition")) {
[13:20:13.940]                         if (!is.null(pattern)) {
[13:20:13.940]                           computeRestarts <- base::computeRestarts
[13:20:13.940]                           grepl <- base::grepl
[13:20:13.940]                           restarts <- computeRestarts(cond)
[13:20:13.940]                           for (restart in restarts) {
[13:20:13.940]                             name <- restart$name
[13:20:13.940]                             if (is.null(name)) 
[13:20:13.940]                               next
[13:20:13.940]                             if (!grepl(pattern, name)) 
[13:20:13.940]                               next
[13:20:13.940]                             invokeRestart(restart)
[13:20:13.940]                             muffled <- TRUE
[13:20:13.940]                             break
[13:20:13.940]                           }
[13:20:13.940]                         }
[13:20:13.940]                       }
[13:20:13.940]                       invisible(muffled)
[13:20:13.940]                     }
[13:20:13.940]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.940]                   }
[13:20:13.940]                 }
[13:20:13.940]                 else {
[13:20:13.940]                   if (TRUE) {
[13:20:13.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.940]                     {
[13:20:13.940]                       inherits <- base::inherits
[13:20:13.940]                       invokeRestart <- base::invokeRestart
[13:20:13.940]                       is.null <- base::is.null
[13:20:13.940]                       muffled <- FALSE
[13:20:13.940]                       if (inherits(cond, "message")) {
[13:20:13.940]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.940]                         if (muffled) 
[13:20:13.940]                           invokeRestart("muffleMessage")
[13:20:13.940]                       }
[13:20:13.940]                       else if (inherits(cond, "warning")) {
[13:20:13.940]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.940]                         if (muffled) 
[13:20:13.940]                           invokeRestart("muffleWarning")
[13:20:13.940]                       }
[13:20:13.940]                       else if (inherits(cond, "condition")) {
[13:20:13.940]                         if (!is.null(pattern)) {
[13:20:13.940]                           computeRestarts <- base::computeRestarts
[13:20:13.940]                           grepl <- base::grepl
[13:20:13.940]                           restarts <- computeRestarts(cond)
[13:20:13.940]                           for (restart in restarts) {
[13:20:13.940]                             name <- restart$name
[13:20:13.940]                             if (is.null(name)) 
[13:20:13.940]                               next
[13:20:13.940]                             if (!grepl(pattern, name)) 
[13:20:13.940]                               next
[13:20:13.940]                             invokeRestart(restart)
[13:20:13.940]                             muffled <- TRUE
[13:20:13.940]                             break
[13:20:13.940]                           }
[13:20:13.940]                         }
[13:20:13.940]                       }
[13:20:13.940]                       invisible(muffled)
[13:20:13.940]                     }
[13:20:13.940]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.940]                   }
[13:20:13.940]                 }
[13:20:13.940]             }
[13:20:13.940]         }))
[13:20:13.940]     }, error = function(ex) {
[13:20:13.940]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:13.940]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.940]                 ...future.rng), started = ...future.startTime, 
[13:20:13.940]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:13.940]             version = "1.8"), class = "FutureResult")
[13:20:13.940]     }, finally = {
[13:20:13.940]         if (!identical(...future.workdir, getwd())) 
[13:20:13.940]             setwd(...future.workdir)
[13:20:13.940]         {
[13:20:13.940]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:13.940]                 ...future.oldOptions$nwarnings <- NULL
[13:20:13.940]             }
[13:20:13.940]             base::options(...future.oldOptions)
[13:20:13.940]             if (.Platform$OS.type == "windows") {
[13:20:13.940]                 old_names <- names(...future.oldEnvVars)
[13:20:13.940]                 envs <- base::Sys.getenv()
[13:20:13.940]                 names <- names(envs)
[13:20:13.940]                 common <- intersect(names, old_names)
[13:20:13.940]                 added <- setdiff(names, old_names)
[13:20:13.940]                 removed <- setdiff(old_names, names)
[13:20:13.940]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:13.940]                   envs[common]]
[13:20:13.940]                 NAMES <- toupper(changed)
[13:20:13.940]                 args <- list()
[13:20:13.940]                 for (kk in seq_along(NAMES)) {
[13:20:13.940]                   name <- changed[[kk]]
[13:20:13.940]                   NAME <- NAMES[[kk]]
[13:20:13.940]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.940]                     next
[13:20:13.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.940]                 }
[13:20:13.940]                 NAMES <- toupper(added)
[13:20:13.940]                 for (kk in seq_along(NAMES)) {
[13:20:13.940]                   name <- added[[kk]]
[13:20:13.940]                   NAME <- NAMES[[kk]]
[13:20:13.940]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.940]                     next
[13:20:13.940]                   args[[name]] <- ""
[13:20:13.940]                 }
[13:20:13.940]                 NAMES <- toupper(removed)
[13:20:13.940]                 for (kk in seq_along(NAMES)) {
[13:20:13.940]                   name <- removed[[kk]]
[13:20:13.940]                   NAME <- NAMES[[kk]]
[13:20:13.940]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.940]                     next
[13:20:13.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.940]                 }
[13:20:13.940]                 if (length(args) > 0) 
[13:20:13.940]                   base::do.call(base::Sys.setenv, args = args)
[13:20:13.940]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:13.940]             }
[13:20:13.940]             else {
[13:20:13.940]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:13.940]             }
[13:20:13.940]             {
[13:20:13.940]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:13.940]                   0L) {
[13:20:13.940]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:13.940]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:13.940]                   base::options(opts)
[13:20:13.940]                 }
[13:20:13.940]                 {
[13:20:13.940]                   {
[13:20:13.940]                     NULL
[13:20:13.940]                     RNGkind("Mersenne-Twister")
[13:20:13.940]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:13.940]                       inherits = FALSE)
[13:20:13.940]                   }
[13:20:13.940]                   options(future.plan = NULL)
[13:20:13.940]                   if (is.na(NA_character_)) 
[13:20:13.940]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.940]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:13.940]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:13.940]                   {
[13:20:13.940]                     future <- SequentialFuture(..., envir = envir)
[13:20:13.940]                     if (!future$lazy) 
[13:20:13.940]                       future <- run(future)
[13:20:13.940]                     invisible(future)
[13:20:13.940]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:13.940]                 }
[13:20:13.940]             }
[13:20:13.940]         }
[13:20:13.940]     })
[13:20:13.940]     if (TRUE) {
[13:20:13.940]         base::sink(type = "output", split = FALSE)
[13:20:13.940]         if (TRUE) {
[13:20:13.940]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:13.940]         }
[13:20:13.940]         else {
[13:20:13.940]             ...future.result["stdout"] <- base::list(NULL)
[13:20:13.940]         }
[13:20:13.940]         base::close(...future.stdout)
[13:20:13.940]         ...future.stdout <- NULL
[13:20:13.940]     }
[13:20:13.940]     ...future.result$conditions <- ...future.conditions
[13:20:13.940]     ...future.result$finished <- base::Sys.time()
[13:20:13.940]     ...future.result
[13:20:13.940] }
[13:20:13.941] plan(): Setting new future strategy stack:
[13:20:13.941] List of future strategies:
[13:20:13.941] 1. sequential:
[13:20:13.941]    - args: function (..., envir = parent.frame())
[13:20:13.941]    - tweaked: FALSE
[13:20:13.941]    - call: NULL
[13:20:13.942] plan(): nbrOfWorkers() = 1
[13:20:13.942] plan(): Setting new future strategy stack:
[13:20:13.943] List of future strategies:
[13:20:13.943] 1. sequential:
[13:20:13.943]    - args: function (..., envir = parent.frame())
[13:20:13.943]    - tweaked: FALSE
[13:20:13.943]    - call: future::plan("sequential")
[13:20:13.943] plan(): nbrOfWorkers() = 1
[13:20:13.943] SequentialFuture started (and completed)
[13:20:13.943] - Launch lazy future ... done
[13:20:13.943] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[13:20:13.944] getGlobalsAndPackages() ...
[13:20:13.944] Searching for globals...
[13:20:13.947] - globals found: [1] ‘{’
[13:20:13.947] Searching for globals ... DONE
[13:20:13.947] Resolving globals: FALSE
[13:20:13.947] 
[13:20:13.948] 
[13:20:13.948] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[13:20:13.948] resolved() for ‘Future’ ...
[13:20:13.948] - state: ‘created’
[13:20:13.948] - run: TRUE
[13:20:13.948] - run() ...
[13:20:13.948] run() for ‘Future’ ...
[13:20:13.948] - state: ‘created’
[13:20:13.949] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:13.949] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:13.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:13.949]   - Field: ‘label’
[13:20:13.949]   - Field: ‘local’
[13:20:13.949]   - Field: ‘owner’
[13:20:13.949]   - Field: ‘envir’
[13:20:13.950]   - Field: ‘packages’
[13:20:13.950]   - Field: ‘gc’
[13:20:13.950]   - Field: ‘conditions’
[13:20:13.950]   - Field: ‘expr’
[13:20:13.950]   - Field: ‘uuid’
[13:20:13.950]   - Field: ‘seed’
[13:20:13.950]   - Field: ‘version’
[13:20:13.950]   - Field: ‘result’
[13:20:13.951]   - Field: ‘asynchronous’
[13:20:13.951]   - Field: ‘calls’
[13:20:13.951]   - Field: ‘globals’
[13:20:13.951]   - Field: ‘stdout’
[13:20:13.951]   - Field: ‘earlySignal’
[13:20:13.951]   - Field: ‘lazy’
[13:20:13.951]   - Field: ‘state’
[13:20:13.951] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:13.952] - Launch lazy future ...
[13:20:13.952] Packages needed by the future expression (n = 0): <none>
[13:20:13.952] Packages needed by future strategies (n = 0): <none>
[13:20:13.952] {
[13:20:13.952]     {
[13:20:13.952]         {
[13:20:13.952]             ...future.startTime <- base::Sys.time()
[13:20:13.952]             {
[13:20:13.952]                 {
[13:20:13.952]                   {
[13:20:13.952]                     base::local({
[13:20:13.952]                       has_future <- base::requireNamespace("future", 
[13:20:13.952]                         quietly = TRUE)
[13:20:13.952]                       if (has_future) {
[13:20:13.952]                         ns <- base::getNamespace("future")
[13:20:13.952]                         version <- ns[[".package"]][["version"]]
[13:20:13.952]                         if (is.null(version)) 
[13:20:13.952]                           version <- utils::packageVersion("future")
[13:20:13.952]                       }
[13:20:13.952]                       else {
[13:20:13.952]                         version <- NULL
[13:20:13.952]                       }
[13:20:13.952]                       if (!has_future || version < "1.8.0") {
[13:20:13.952]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:13.952]                           "", base::R.version$version.string), 
[13:20:13.952]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:13.952]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:13.952]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:13.952]                             "release", "version")], collapse = " "), 
[13:20:13.952]                           hostname = base::Sys.info()[["nodename"]])
[13:20:13.952]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:13.952]                           info)
[13:20:13.952]                         info <- base::paste(info, collapse = "; ")
[13:20:13.952]                         if (!has_future) {
[13:20:13.952]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:13.952]                             info)
[13:20:13.952]                         }
[13:20:13.952]                         else {
[13:20:13.952]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:13.952]                             info, version)
[13:20:13.952]                         }
[13:20:13.952]                         base::stop(msg)
[13:20:13.952]                       }
[13:20:13.952]                     })
[13:20:13.952]                   }
[13:20:13.952]                   options(future.plan = NULL)
[13:20:13.952]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.952]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:13.952]                 }
[13:20:13.952]                 ...future.workdir <- getwd()
[13:20:13.952]             }
[13:20:13.952]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:13.952]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:13.952]         }
[13:20:13.952]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:13.952]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:13.952]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:13.952]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:13.952]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:13.952]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:13.952]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:13.952]             base::names(...future.oldOptions))
[13:20:13.952]     }
[13:20:13.952]     if (FALSE) {
[13:20:13.952]     }
[13:20:13.952]     else {
[13:20:13.952]         if (TRUE) {
[13:20:13.952]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:13.952]                 open = "w")
[13:20:13.952]         }
[13:20:13.952]         else {
[13:20:13.952]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:13.952]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:13.952]         }
[13:20:13.952]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:13.952]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:13.952]             base::sink(type = "output", split = FALSE)
[13:20:13.952]             base::close(...future.stdout)
[13:20:13.952]         }, add = TRUE)
[13:20:13.952]     }
[13:20:13.952]     ...future.frame <- base::sys.nframe()
[13:20:13.952]     ...future.conditions <- base::list()
[13:20:13.952]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:13.952]     if (FALSE) {
[13:20:13.952]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:13.952]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:13.952]     }
[13:20:13.952]     ...future.result <- base::tryCatch({
[13:20:13.952]         base::withCallingHandlers({
[13:20:13.952]             ...future.value <- base::withVisible(base::local({
[13:20:13.952]                 42L
[13:20:13.952]             }))
[13:20:13.952]             future::FutureResult(value = ...future.value$value, 
[13:20:13.952]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.952]                   ...future.rng), globalenv = if (FALSE) 
[13:20:13.952]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:13.952]                     ...future.globalenv.names))
[13:20:13.952]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:13.952]         }, condition = base::local({
[13:20:13.952]             c <- base::c
[13:20:13.952]             inherits <- base::inherits
[13:20:13.952]             invokeRestart <- base::invokeRestart
[13:20:13.952]             length <- base::length
[13:20:13.952]             list <- base::list
[13:20:13.952]             seq.int <- base::seq.int
[13:20:13.952]             signalCondition <- base::signalCondition
[13:20:13.952]             sys.calls <- base::sys.calls
[13:20:13.952]             `[[` <- base::`[[`
[13:20:13.952]             `+` <- base::`+`
[13:20:13.952]             `<<-` <- base::`<<-`
[13:20:13.952]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:13.952]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:13.952]                   3L)]
[13:20:13.952]             }
[13:20:13.952]             function(cond) {
[13:20:13.952]                 is_error <- inherits(cond, "error")
[13:20:13.952]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:13.952]                   NULL)
[13:20:13.952]                 if (is_error) {
[13:20:13.952]                   sessionInformation <- function() {
[13:20:13.952]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:13.952]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:13.952]                       search = base::search(), system = base::Sys.info())
[13:20:13.952]                   }
[13:20:13.952]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.952]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:13.952]                     cond$call), session = sessionInformation(), 
[13:20:13.952]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:13.952]                   signalCondition(cond)
[13:20:13.952]                 }
[13:20:13.952]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:13.952]                 "immediateCondition"))) {
[13:20:13.952]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:13.952]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.952]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:13.952]                   if (TRUE && !signal) {
[13:20:13.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.952]                     {
[13:20:13.952]                       inherits <- base::inherits
[13:20:13.952]                       invokeRestart <- base::invokeRestart
[13:20:13.952]                       is.null <- base::is.null
[13:20:13.952]                       muffled <- FALSE
[13:20:13.952]                       if (inherits(cond, "message")) {
[13:20:13.952]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.952]                         if (muffled) 
[13:20:13.952]                           invokeRestart("muffleMessage")
[13:20:13.952]                       }
[13:20:13.952]                       else if (inherits(cond, "warning")) {
[13:20:13.952]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.952]                         if (muffled) 
[13:20:13.952]                           invokeRestart("muffleWarning")
[13:20:13.952]                       }
[13:20:13.952]                       else if (inherits(cond, "condition")) {
[13:20:13.952]                         if (!is.null(pattern)) {
[13:20:13.952]                           computeRestarts <- base::computeRestarts
[13:20:13.952]                           grepl <- base::grepl
[13:20:13.952]                           restarts <- computeRestarts(cond)
[13:20:13.952]                           for (restart in restarts) {
[13:20:13.952]                             name <- restart$name
[13:20:13.952]                             if (is.null(name)) 
[13:20:13.952]                               next
[13:20:13.952]                             if (!grepl(pattern, name)) 
[13:20:13.952]                               next
[13:20:13.952]                             invokeRestart(restart)
[13:20:13.952]                             muffled <- TRUE
[13:20:13.952]                             break
[13:20:13.952]                           }
[13:20:13.952]                         }
[13:20:13.952]                       }
[13:20:13.952]                       invisible(muffled)
[13:20:13.952]                     }
[13:20:13.952]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.952]                   }
[13:20:13.952]                 }
[13:20:13.952]                 else {
[13:20:13.952]                   if (TRUE) {
[13:20:13.952]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.952]                     {
[13:20:13.952]                       inherits <- base::inherits
[13:20:13.952]                       invokeRestart <- base::invokeRestart
[13:20:13.952]                       is.null <- base::is.null
[13:20:13.952]                       muffled <- FALSE
[13:20:13.952]                       if (inherits(cond, "message")) {
[13:20:13.952]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.952]                         if (muffled) 
[13:20:13.952]                           invokeRestart("muffleMessage")
[13:20:13.952]                       }
[13:20:13.952]                       else if (inherits(cond, "warning")) {
[13:20:13.952]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.952]                         if (muffled) 
[13:20:13.952]                           invokeRestart("muffleWarning")
[13:20:13.952]                       }
[13:20:13.952]                       else if (inherits(cond, "condition")) {
[13:20:13.952]                         if (!is.null(pattern)) {
[13:20:13.952]                           computeRestarts <- base::computeRestarts
[13:20:13.952]                           grepl <- base::grepl
[13:20:13.952]                           restarts <- computeRestarts(cond)
[13:20:13.952]                           for (restart in restarts) {
[13:20:13.952]                             name <- restart$name
[13:20:13.952]                             if (is.null(name)) 
[13:20:13.952]                               next
[13:20:13.952]                             if (!grepl(pattern, name)) 
[13:20:13.952]                               next
[13:20:13.952]                             invokeRestart(restart)
[13:20:13.952]                             muffled <- TRUE
[13:20:13.952]                             break
[13:20:13.952]                           }
[13:20:13.952]                         }
[13:20:13.952]                       }
[13:20:13.952]                       invisible(muffled)
[13:20:13.952]                     }
[13:20:13.952]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.952]                   }
[13:20:13.952]                 }
[13:20:13.952]             }
[13:20:13.952]         }))
[13:20:13.952]     }, error = function(ex) {
[13:20:13.952]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:13.952]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.952]                 ...future.rng), started = ...future.startTime, 
[13:20:13.952]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:13.952]             version = "1.8"), class = "FutureResult")
[13:20:13.952]     }, finally = {
[13:20:13.952]         if (!identical(...future.workdir, getwd())) 
[13:20:13.952]             setwd(...future.workdir)
[13:20:13.952]         {
[13:20:13.952]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:13.952]                 ...future.oldOptions$nwarnings <- NULL
[13:20:13.952]             }
[13:20:13.952]             base::options(...future.oldOptions)
[13:20:13.952]             if (.Platform$OS.type == "windows") {
[13:20:13.952]                 old_names <- names(...future.oldEnvVars)
[13:20:13.952]                 envs <- base::Sys.getenv()
[13:20:13.952]                 names <- names(envs)
[13:20:13.952]                 common <- intersect(names, old_names)
[13:20:13.952]                 added <- setdiff(names, old_names)
[13:20:13.952]                 removed <- setdiff(old_names, names)
[13:20:13.952]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:13.952]                   envs[common]]
[13:20:13.952]                 NAMES <- toupper(changed)
[13:20:13.952]                 args <- list()
[13:20:13.952]                 for (kk in seq_along(NAMES)) {
[13:20:13.952]                   name <- changed[[kk]]
[13:20:13.952]                   NAME <- NAMES[[kk]]
[13:20:13.952]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.952]                     next
[13:20:13.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.952]                 }
[13:20:13.952]                 NAMES <- toupper(added)
[13:20:13.952]                 for (kk in seq_along(NAMES)) {
[13:20:13.952]                   name <- added[[kk]]
[13:20:13.952]                   NAME <- NAMES[[kk]]
[13:20:13.952]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.952]                     next
[13:20:13.952]                   args[[name]] <- ""
[13:20:13.952]                 }
[13:20:13.952]                 NAMES <- toupper(removed)
[13:20:13.952]                 for (kk in seq_along(NAMES)) {
[13:20:13.952]                   name <- removed[[kk]]
[13:20:13.952]                   NAME <- NAMES[[kk]]
[13:20:13.952]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.952]                     next
[13:20:13.952]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.952]                 }
[13:20:13.952]                 if (length(args) > 0) 
[13:20:13.952]                   base::do.call(base::Sys.setenv, args = args)
[13:20:13.952]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:13.952]             }
[13:20:13.952]             else {
[13:20:13.952]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:13.952]             }
[13:20:13.952]             {
[13:20:13.952]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:13.952]                   0L) {
[13:20:13.952]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:13.952]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:13.952]                   base::options(opts)
[13:20:13.952]                 }
[13:20:13.952]                 {
[13:20:13.952]                   {
[13:20:13.952]                     NULL
[13:20:13.952]                     RNGkind("Mersenne-Twister")
[13:20:13.952]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:13.952]                       inherits = FALSE)
[13:20:13.952]                   }
[13:20:13.952]                   options(future.plan = NULL)
[13:20:13.952]                   if (is.na(NA_character_)) 
[13:20:13.952]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.952]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:13.952]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:13.952]                   {
[13:20:13.952]                     future <- SequentialFuture(..., envir = envir)
[13:20:13.952]                     if (!future$lazy) 
[13:20:13.952]                       future <- run(future)
[13:20:13.952]                     invisible(future)
[13:20:13.952]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:13.952]                 }
[13:20:13.952]             }
[13:20:13.952]         }
[13:20:13.952]     })
[13:20:13.952]     if (TRUE) {
[13:20:13.952]         base::sink(type = "output", split = FALSE)
[13:20:13.952]         if (TRUE) {
[13:20:13.952]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:13.952]         }
[13:20:13.952]         else {
[13:20:13.952]             ...future.result["stdout"] <- base::list(NULL)
[13:20:13.952]         }
[13:20:13.952]         base::close(...future.stdout)
[13:20:13.952]         ...future.stdout <- NULL
[13:20:13.952]     }
[13:20:13.952]     ...future.result$conditions <- ...future.conditions
[13:20:13.952]     ...future.result$finished <- base::Sys.time()
[13:20:13.952]     ...future.result
[13:20:13.952] }
[13:20:13.954] plan(): Setting new future strategy stack:
[13:20:13.954] List of future strategies:
[13:20:13.954] 1. sequential:
[13:20:13.954]    - args: function (..., envir = parent.frame())
[13:20:13.954]    - tweaked: FALSE
[13:20:13.954]    - call: NULL
[13:20:13.955] plan(): nbrOfWorkers() = 1
[13:20:13.955] plan(): Setting new future strategy stack:
[13:20:13.955] List of future strategies:
[13:20:13.955] 1. sequential:
[13:20:13.955]    - args: function (..., envir = parent.frame())
[13:20:13.955]    - tweaked: FALSE
[13:20:13.955]    - call: future::plan("sequential")
[13:20:13.956] plan(): nbrOfWorkers() = 1
[13:20:13.956] SequentialFuture started (and completed)
[13:20:13.956] - Launch lazy future ... done
[13:20:13.956] run() for ‘SequentialFuture’ ... done
[13:20:13.956] - run() ... done
[13:20:13.956] - resolved() ...
[13:20:13.956] resolved() for ‘SequentialFuture’ ...
[13:20:13.956] - state: ‘finished’
[13:20:13.957] - run: TRUE
[13:20:13.957] - result: ‘FutureResult’
[13:20:13.957] resolved() for ‘SequentialFuture’ ... done
[13:20:13.957] - resolved: TRUE
[13:20:13.957] - resolved() ... done
[13:20:13.957] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[13:20:13.957] getGlobalsAndPackages() ...
[13:20:13.958] Searching for globals...
[13:20:13.958] 
[13:20:13.958] Searching for globals ... DONE
[13:20:13.958] - globals: [0] <none>
[13:20:13.958] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 4ed71e5c-d941-4ad2-a5fc-cd26ff694492
Class: ‘Future’, ‘environment’
> y <- value(f)
[13:20:13.959] run() for ‘Future’ ...
[13:20:13.959] - state: ‘created’
[13:20:13.959] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:13.959] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:13.959] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:13.959]   - Field: ‘label’
[13:20:13.959]   - Field: ‘local’
[13:20:13.960]   - Field: ‘owner’
[13:20:13.960]   - Field: ‘envir’
[13:20:13.960]   - Field: ‘packages’
[13:20:13.960]   - Field: ‘gc’
[13:20:13.960]   - Field: ‘conditions’
[13:20:13.960]   - Field: ‘expr’
[13:20:13.960]   - Field: ‘uuid’
[13:20:13.960]   - Field: ‘seed’
[13:20:13.960]   - Field: ‘version’
[13:20:13.960]   - Field: ‘result’
[13:20:13.960]   - Field: ‘asynchronous’
[13:20:13.961]   - Field: ‘calls’
[13:20:13.961]   - Field: ‘globals’
[13:20:13.961]   - Field: ‘stdout’
[13:20:13.961]   - Field: ‘earlySignal’
[13:20:13.961]   - Field: ‘lazy’
[13:20:13.961]   - Field: ‘state’
[13:20:13.961] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:13.961] - Launch lazy future ...
[13:20:13.961] Packages needed by the future expression (n = 0): <none>
[13:20:13.962] Packages needed by future strategies (n = 0): <none>
[13:20:13.962] {
[13:20:13.962]     {
[13:20:13.962]         {
[13:20:13.962]             ...future.startTime <- base::Sys.time()
[13:20:13.962]             {
[13:20:13.962]                 {
[13:20:13.962]                   {
[13:20:13.962]                     base::local({
[13:20:13.962]                       has_future <- base::requireNamespace("future", 
[13:20:13.962]                         quietly = TRUE)
[13:20:13.962]                       if (has_future) {
[13:20:13.962]                         ns <- base::getNamespace("future")
[13:20:13.962]                         version <- ns[[".package"]][["version"]]
[13:20:13.962]                         if (is.null(version)) 
[13:20:13.962]                           version <- utils::packageVersion("future")
[13:20:13.962]                       }
[13:20:13.962]                       else {
[13:20:13.962]                         version <- NULL
[13:20:13.962]                       }
[13:20:13.962]                       if (!has_future || version < "1.8.0") {
[13:20:13.962]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:13.962]                           "", base::R.version$version.string), 
[13:20:13.962]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:13.962]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:13.962]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:13.962]                             "release", "version")], collapse = " "), 
[13:20:13.962]                           hostname = base::Sys.info()[["nodename"]])
[13:20:13.962]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:13.962]                           info)
[13:20:13.962]                         info <- base::paste(info, collapse = "; ")
[13:20:13.962]                         if (!has_future) {
[13:20:13.962]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:13.962]                             info)
[13:20:13.962]                         }
[13:20:13.962]                         else {
[13:20:13.962]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:13.962]                             info, version)
[13:20:13.962]                         }
[13:20:13.962]                         base::stop(msg)
[13:20:13.962]                       }
[13:20:13.962]                     })
[13:20:13.962]                   }
[13:20:13.962]                   options(future.plan = NULL)
[13:20:13.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:13.962]                 }
[13:20:13.962]                 ...future.workdir <- getwd()
[13:20:13.962]             }
[13:20:13.962]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:13.962]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:13.962]         }
[13:20:13.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:13.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:13.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:13.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:13.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:13.962]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:13.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:13.962]             base::names(...future.oldOptions))
[13:20:13.962]     }
[13:20:13.962]     if (FALSE) {
[13:20:13.962]     }
[13:20:13.962]     else {
[13:20:13.962]         if (TRUE) {
[13:20:13.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:13.962]                 open = "w")
[13:20:13.962]         }
[13:20:13.962]         else {
[13:20:13.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:13.962]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:13.962]         }
[13:20:13.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:13.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:13.962]             base::sink(type = "output", split = FALSE)
[13:20:13.962]             base::close(...future.stdout)
[13:20:13.962]         }, add = TRUE)
[13:20:13.962]     }
[13:20:13.962]     ...future.frame <- base::sys.nframe()
[13:20:13.962]     ...future.conditions <- base::list()
[13:20:13.962]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:13.962]     if (FALSE) {
[13:20:13.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:13.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:13.962]     }
[13:20:13.962]     ...future.result <- base::tryCatch({
[13:20:13.962]         base::withCallingHandlers({
[13:20:13.962]             ...future.value <- base::withVisible(base::local(42L))
[13:20:13.962]             future::FutureResult(value = ...future.value$value, 
[13:20:13.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.962]                   ...future.rng), globalenv = if (FALSE) 
[13:20:13.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:13.962]                     ...future.globalenv.names))
[13:20:13.962]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:13.962]         }, condition = base::local({
[13:20:13.962]             c <- base::c
[13:20:13.962]             inherits <- base::inherits
[13:20:13.962]             invokeRestart <- base::invokeRestart
[13:20:13.962]             length <- base::length
[13:20:13.962]             list <- base::list
[13:20:13.962]             seq.int <- base::seq.int
[13:20:13.962]             signalCondition <- base::signalCondition
[13:20:13.962]             sys.calls <- base::sys.calls
[13:20:13.962]             `[[` <- base::`[[`
[13:20:13.962]             `+` <- base::`+`
[13:20:13.962]             `<<-` <- base::`<<-`
[13:20:13.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:13.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:13.962]                   3L)]
[13:20:13.962]             }
[13:20:13.962]             function(cond) {
[13:20:13.962]                 is_error <- inherits(cond, "error")
[13:20:13.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:13.962]                   NULL)
[13:20:13.962]                 if (is_error) {
[13:20:13.962]                   sessionInformation <- function() {
[13:20:13.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:13.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:13.962]                       search = base::search(), system = base::Sys.info())
[13:20:13.962]                   }
[13:20:13.962]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:13.962]                     cond$call), session = sessionInformation(), 
[13:20:13.962]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:13.962]                   signalCondition(cond)
[13:20:13.962]                 }
[13:20:13.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:13.962]                 "immediateCondition"))) {
[13:20:13.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:13.962]                   ...future.conditions[[length(...future.conditions) + 
[13:20:13.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:13.962]                   if (TRUE && !signal) {
[13:20:13.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.962]                     {
[13:20:13.962]                       inherits <- base::inherits
[13:20:13.962]                       invokeRestart <- base::invokeRestart
[13:20:13.962]                       is.null <- base::is.null
[13:20:13.962]                       muffled <- FALSE
[13:20:13.962]                       if (inherits(cond, "message")) {
[13:20:13.962]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.962]                         if (muffled) 
[13:20:13.962]                           invokeRestart("muffleMessage")
[13:20:13.962]                       }
[13:20:13.962]                       else if (inherits(cond, "warning")) {
[13:20:13.962]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.962]                         if (muffled) 
[13:20:13.962]                           invokeRestart("muffleWarning")
[13:20:13.962]                       }
[13:20:13.962]                       else if (inherits(cond, "condition")) {
[13:20:13.962]                         if (!is.null(pattern)) {
[13:20:13.962]                           computeRestarts <- base::computeRestarts
[13:20:13.962]                           grepl <- base::grepl
[13:20:13.962]                           restarts <- computeRestarts(cond)
[13:20:13.962]                           for (restart in restarts) {
[13:20:13.962]                             name <- restart$name
[13:20:13.962]                             if (is.null(name)) 
[13:20:13.962]                               next
[13:20:13.962]                             if (!grepl(pattern, name)) 
[13:20:13.962]                               next
[13:20:13.962]                             invokeRestart(restart)
[13:20:13.962]                             muffled <- TRUE
[13:20:13.962]                             break
[13:20:13.962]                           }
[13:20:13.962]                         }
[13:20:13.962]                       }
[13:20:13.962]                       invisible(muffled)
[13:20:13.962]                     }
[13:20:13.962]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.962]                   }
[13:20:13.962]                 }
[13:20:13.962]                 else {
[13:20:13.962]                   if (TRUE) {
[13:20:13.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:13.962]                     {
[13:20:13.962]                       inherits <- base::inherits
[13:20:13.962]                       invokeRestart <- base::invokeRestart
[13:20:13.962]                       is.null <- base::is.null
[13:20:13.962]                       muffled <- FALSE
[13:20:13.962]                       if (inherits(cond, "message")) {
[13:20:13.962]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:13.962]                         if (muffled) 
[13:20:13.962]                           invokeRestart("muffleMessage")
[13:20:13.962]                       }
[13:20:13.962]                       else if (inherits(cond, "warning")) {
[13:20:13.962]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:13.962]                         if (muffled) 
[13:20:13.962]                           invokeRestart("muffleWarning")
[13:20:13.962]                       }
[13:20:13.962]                       else if (inherits(cond, "condition")) {
[13:20:13.962]                         if (!is.null(pattern)) {
[13:20:13.962]                           computeRestarts <- base::computeRestarts
[13:20:13.962]                           grepl <- base::grepl
[13:20:13.962]                           restarts <- computeRestarts(cond)
[13:20:13.962]                           for (restart in restarts) {
[13:20:13.962]                             name <- restart$name
[13:20:13.962]                             if (is.null(name)) 
[13:20:13.962]                               next
[13:20:13.962]                             if (!grepl(pattern, name)) 
[13:20:13.962]                               next
[13:20:13.962]                             invokeRestart(restart)
[13:20:13.962]                             muffled <- TRUE
[13:20:13.962]                             break
[13:20:13.962]                           }
[13:20:13.962]                         }
[13:20:13.962]                       }
[13:20:13.962]                       invisible(muffled)
[13:20:13.962]                     }
[13:20:13.962]                     muffleCondition(cond, pattern = "^muffle")
[13:20:13.962]                   }
[13:20:13.962]                 }
[13:20:13.962]             }
[13:20:13.962]         }))
[13:20:13.962]     }, error = function(ex) {
[13:20:13.962]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:13.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:13.962]                 ...future.rng), started = ...future.startTime, 
[13:20:13.962]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:13.962]             version = "1.8"), class = "FutureResult")
[13:20:13.962]     }, finally = {
[13:20:13.962]         if (!identical(...future.workdir, getwd())) 
[13:20:13.962]             setwd(...future.workdir)
[13:20:13.962]         {
[13:20:13.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:13.962]                 ...future.oldOptions$nwarnings <- NULL
[13:20:13.962]             }
[13:20:13.962]             base::options(...future.oldOptions)
[13:20:13.962]             if (.Platform$OS.type == "windows") {
[13:20:13.962]                 old_names <- names(...future.oldEnvVars)
[13:20:13.962]                 envs <- base::Sys.getenv()
[13:20:13.962]                 names <- names(envs)
[13:20:13.962]                 common <- intersect(names, old_names)
[13:20:13.962]                 added <- setdiff(names, old_names)
[13:20:13.962]                 removed <- setdiff(old_names, names)
[13:20:13.962]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:13.962]                   envs[common]]
[13:20:13.962]                 NAMES <- toupper(changed)
[13:20:13.962]                 args <- list()
[13:20:13.962]                 for (kk in seq_along(NAMES)) {
[13:20:13.962]                   name <- changed[[kk]]
[13:20:13.962]                   NAME <- NAMES[[kk]]
[13:20:13.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.962]                     next
[13:20:13.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.962]                 }
[13:20:13.962]                 NAMES <- toupper(added)
[13:20:13.962]                 for (kk in seq_along(NAMES)) {
[13:20:13.962]                   name <- added[[kk]]
[13:20:13.962]                   NAME <- NAMES[[kk]]
[13:20:13.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.962]                     next
[13:20:13.962]                   args[[name]] <- ""
[13:20:13.962]                 }
[13:20:13.962]                 NAMES <- toupper(removed)
[13:20:13.962]                 for (kk in seq_along(NAMES)) {
[13:20:13.962]                   name <- removed[[kk]]
[13:20:13.962]                   NAME <- NAMES[[kk]]
[13:20:13.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:13.962]                     next
[13:20:13.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:13.962]                 }
[13:20:13.962]                 if (length(args) > 0) 
[13:20:13.962]                   base::do.call(base::Sys.setenv, args = args)
[13:20:13.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:13.962]             }
[13:20:13.962]             else {
[13:20:13.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:13.962]             }
[13:20:13.962]             {
[13:20:13.962]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:13.962]                   0L) {
[13:20:13.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:13.962]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:13.962]                   base::options(opts)
[13:20:13.962]                 }
[13:20:13.962]                 {
[13:20:13.962]                   {
[13:20:13.962]                     NULL
[13:20:13.962]                     RNGkind("Mersenne-Twister")
[13:20:13.962]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:13.962]                       inherits = FALSE)
[13:20:13.962]                   }
[13:20:13.962]                   options(future.plan = NULL)
[13:20:13.962]                   if (is.na(NA_character_)) 
[13:20:13.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:13.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:13.962]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:13.962]                   {
[13:20:13.962]                     future <- SequentialFuture(..., envir = envir)
[13:20:13.962]                     if (!future$lazy) 
[13:20:13.962]                       future <- run(future)
[13:20:13.962]                     invisible(future)
[13:20:13.962]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:13.962]                 }
[13:20:13.962]             }
[13:20:13.962]         }
[13:20:13.962]     })
[13:20:13.962]     if (TRUE) {
[13:20:13.962]         base::sink(type = "output", split = FALSE)
[13:20:13.962]         if (TRUE) {
[13:20:13.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:13.962]         }
[13:20:13.962]         else {
[13:20:13.962]             ...future.result["stdout"] <- base::list(NULL)
[13:20:13.962]         }
[13:20:13.962]         base::close(...future.stdout)
[13:20:13.962]         ...future.stdout <- NULL
[13:20:13.962]     }
[13:20:13.962]     ...future.result$conditions <- ...future.conditions
[13:20:13.962]     ...future.result$finished <- base::Sys.time()
[13:20:13.962]     ...future.result
[13:20:13.962] }
[13:20:13.964] plan(): Setting new future strategy stack:
[13:20:13.964] List of future strategies:
[13:20:13.964] 1. sequential:
[13:20:13.964]    - args: function (..., envir = parent.frame())
[13:20:13.964]    - tweaked: FALSE
[13:20:13.964]    - call: NULL
[13:20:13.964] plan(): nbrOfWorkers() = 1
[13:20:13.965] plan(): Setting new future strategy stack:
[13:20:13.965] List of future strategies:
[13:20:13.965] 1. sequential:
[13:20:13.965]    - args: function (..., envir = parent.frame())
[13:20:13.965]    - tweaked: FALSE
[13:20:13.965]    - call: future::plan("sequential")
[13:20:13.965] plan(): nbrOfWorkers() = 1
[13:20:13.965] SequentialFuture started (and completed)
[13:20:13.966] - Launch lazy future ... done
[13:20:13.966] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[13:20:13.966] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[13:20:13.967] plan(): Setting new future strategy stack:
[13:20:13.967] List of future strategies:
[13:20:13.967] 1. FutureStrategy:
[13:20:13.967]    - args: function (..., envir = parent.frame())
[13:20:13.967]    - tweaked: FALSE
[13:20:13.967]    - call: future::plan(oplan)
[13:20:13.980] plan(): nbrOfWorkers() = 1
> 
