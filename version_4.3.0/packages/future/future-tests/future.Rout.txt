
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:08.089] plan(): Setting new future strategy stack:
[17:42:08.090] List of future strategies:
[17:42:08.090] 1. sequential:
[17:42:08.090]    - args: function (..., envir = parent.frame())
[17:42:08.090]    - tweaked: FALSE
[17:42:08.090]    - call: future::plan("sequential")
[17:42:08.103] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:42:08.114] getGlobalsAndPackages() ...
[17:42:08.114] Searching for globals...
[17:42:08.117] - globals found: [1] ‘{’
[17:42:08.118] Searching for globals ... DONE
[17:42:08.118] Resolving globals: FALSE
[17:42:08.118] 
[17:42:08.118] 
[17:42:08.118] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:42:08.119] resolved() for ‘Future’ ...
[17:42:08.119] - state: ‘created’
[17:42:08.119] - run: TRUE
[17:42:08.119] - run() ...
[17:42:08.120] run() for ‘Future’ ...
[17:42:08.120] - state: ‘created’
[17:42:08.120] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.120] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.120] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.121]   - Field: ‘label’
[17:42:08.121]   - Field: ‘local’
[17:42:08.121]   - Field: ‘owner’
[17:42:08.121]   - Field: ‘envir’
[17:42:08.121]   - Field: ‘packages’
[17:42:08.121]   - Field: ‘gc’
[17:42:08.121]   - Field: ‘conditions’
[17:42:08.121]   - Field: ‘expr’
[17:42:08.121]   - Field: ‘uuid’
[17:42:08.121]   - Field: ‘seed’
[17:42:08.122]   - Field: ‘version’
[17:42:08.122]   - Field: ‘result’
[17:42:08.122]   - Field: ‘asynchronous’
[17:42:08.122]   - Field: ‘calls’
[17:42:08.122]   - Field: ‘globals’
[17:42:08.122]   - Field: ‘stdout’
[17:42:08.122]   - Field: ‘earlySignal’
[17:42:08.122]   - Field: ‘lazy’
[17:42:08.122]   - Field: ‘state’
[17:42:08.122] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.122] - Launch lazy future ...
[17:42:08.123] Packages needed by the future expression (n = 0): <none>
[17:42:08.123] Packages needed by future strategies (n = 0): <none>
[17:42:08.124] {
[17:42:08.124]     {
[17:42:08.124]         {
[17:42:08.124]             ...future.startTime <- base::Sys.time()
[17:42:08.124]             {
[17:42:08.124]                 {
[17:42:08.124]                   {
[17:42:08.124]                     base::local({
[17:42:08.124]                       has_future <- base::requireNamespace("future", 
[17:42:08.124]                         quietly = TRUE)
[17:42:08.124]                       if (has_future) {
[17:42:08.124]                         ns <- base::getNamespace("future")
[17:42:08.124]                         version <- ns[[".package"]][["version"]]
[17:42:08.124]                         if (is.null(version)) 
[17:42:08.124]                           version <- utils::packageVersion("future")
[17:42:08.124]                       }
[17:42:08.124]                       else {
[17:42:08.124]                         version <- NULL
[17:42:08.124]                       }
[17:42:08.124]                       if (!has_future || version < "1.8.0") {
[17:42:08.124]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.124]                           "", base::R.version$version.string), 
[17:42:08.124]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.124]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.124]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.124]                             "release", "version")], collapse = " "), 
[17:42:08.124]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.124]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.124]                           info)
[17:42:08.124]                         info <- base::paste(info, collapse = "; ")
[17:42:08.124]                         if (!has_future) {
[17:42:08.124]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.124]                             info)
[17:42:08.124]                         }
[17:42:08.124]                         else {
[17:42:08.124]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.124]                             info, version)
[17:42:08.124]                         }
[17:42:08.124]                         base::stop(msg)
[17:42:08.124]                       }
[17:42:08.124]                     })
[17:42:08.124]                   }
[17:42:08.124]                   options(future.plan = NULL)
[17:42:08.124]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.124]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.124]                 }
[17:42:08.124]                 ...future.workdir <- getwd()
[17:42:08.124]             }
[17:42:08.124]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.124]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.124]         }
[17:42:08.124]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.124]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.124]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.124]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.124]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.124]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.124]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.124]             base::names(...future.oldOptions))
[17:42:08.124]     }
[17:42:08.124]     if (FALSE) {
[17:42:08.124]     }
[17:42:08.124]     else {
[17:42:08.124]         if (TRUE) {
[17:42:08.124]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.124]                 open = "w")
[17:42:08.124]         }
[17:42:08.124]         else {
[17:42:08.124]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.124]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.124]         }
[17:42:08.124]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.124]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.124]             base::sink(type = "output", split = FALSE)
[17:42:08.124]             base::close(...future.stdout)
[17:42:08.124]         }, add = TRUE)
[17:42:08.124]     }
[17:42:08.124]     ...future.frame <- base::sys.nframe()
[17:42:08.124]     ...future.conditions <- base::list()
[17:42:08.124]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.124]     if (FALSE) {
[17:42:08.124]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.124]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.124]     }
[17:42:08.124]     ...future.result <- base::tryCatch({
[17:42:08.124]         base::withCallingHandlers({
[17:42:08.124]             ...future.value <- base::withVisible(base::local({
[17:42:08.124]                 42L
[17:42:08.124]             }))
[17:42:08.124]             future::FutureResult(value = ...future.value$value, 
[17:42:08.124]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.124]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.124]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.124]                     ...future.globalenv.names))
[17:42:08.124]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.124]         }, condition = base::local({
[17:42:08.124]             c <- base::c
[17:42:08.124]             inherits <- base::inherits
[17:42:08.124]             invokeRestart <- base::invokeRestart
[17:42:08.124]             length <- base::length
[17:42:08.124]             list <- base::list
[17:42:08.124]             seq.int <- base::seq.int
[17:42:08.124]             signalCondition <- base::signalCondition
[17:42:08.124]             sys.calls <- base::sys.calls
[17:42:08.124]             `[[` <- base::`[[`
[17:42:08.124]             `+` <- base::`+`
[17:42:08.124]             `<<-` <- base::`<<-`
[17:42:08.124]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.124]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.124]                   3L)]
[17:42:08.124]             }
[17:42:08.124]             function(cond) {
[17:42:08.124]                 is_error <- inherits(cond, "error")
[17:42:08.124]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.124]                   NULL)
[17:42:08.124]                 if (is_error) {
[17:42:08.124]                   sessionInformation <- function() {
[17:42:08.124]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.124]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.124]                       search = base::search(), system = base::Sys.info())
[17:42:08.124]                   }
[17:42:08.124]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.124]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.124]                     cond$call), session = sessionInformation(), 
[17:42:08.124]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.124]                   signalCondition(cond)
[17:42:08.124]                 }
[17:42:08.124]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.124]                 "immediateCondition"))) {
[17:42:08.124]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.124]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.124]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.124]                   if (TRUE && !signal) {
[17:42:08.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.124]                     {
[17:42:08.124]                       inherits <- base::inherits
[17:42:08.124]                       invokeRestart <- base::invokeRestart
[17:42:08.124]                       is.null <- base::is.null
[17:42:08.124]                       muffled <- FALSE
[17:42:08.124]                       if (inherits(cond, "message")) {
[17:42:08.124]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.124]                         if (muffled) 
[17:42:08.124]                           invokeRestart("muffleMessage")
[17:42:08.124]                       }
[17:42:08.124]                       else if (inherits(cond, "warning")) {
[17:42:08.124]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.124]                         if (muffled) 
[17:42:08.124]                           invokeRestart("muffleWarning")
[17:42:08.124]                       }
[17:42:08.124]                       else if (inherits(cond, "condition")) {
[17:42:08.124]                         if (!is.null(pattern)) {
[17:42:08.124]                           computeRestarts <- base::computeRestarts
[17:42:08.124]                           grepl <- base::grepl
[17:42:08.124]                           restarts <- computeRestarts(cond)
[17:42:08.124]                           for (restart in restarts) {
[17:42:08.124]                             name <- restart$name
[17:42:08.124]                             if (is.null(name)) 
[17:42:08.124]                               next
[17:42:08.124]                             if (!grepl(pattern, name)) 
[17:42:08.124]                               next
[17:42:08.124]                             invokeRestart(restart)
[17:42:08.124]                             muffled <- TRUE
[17:42:08.124]                             break
[17:42:08.124]                           }
[17:42:08.124]                         }
[17:42:08.124]                       }
[17:42:08.124]                       invisible(muffled)
[17:42:08.124]                     }
[17:42:08.124]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.124]                   }
[17:42:08.124]                 }
[17:42:08.124]                 else {
[17:42:08.124]                   if (TRUE) {
[17:42:08.124]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.124]                     {
[17:42:08.124]                       inherits <- base::inherits
[17:42:08.124]                       invokeRestart <- base::invokeRestart
[17:42:08.124]                       is.null <- base::is.null
[17:42:08.124]                       muffled <- FALSE
[17:42:08.124]                       if (inherits(cond, "message")) {
[17:42:08.124]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.124]                         if (muffled) 
[17:42:08.124]                           invokeRestart("muffleMessage")
[17:42:08.124]                       }
[17:42:08.124]                       else if (inherits(cond, "warning")) {
[17:42:08.124]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.124]                         if (muffled) 
[17:42:08.124]                           invokeRestart("muffleWarning")
[17:42:08.124]                       }
[17:42:08.124]                       else if (inherits(cond, "condition")) {
[17:42:08.124]                         if (!is.null(pattern)) {
[17:42:08.124]                           computeRestarts <- base::computeRestarts
[17:42:08.124]                           grepl <- base::grepl
[17:42:08.124]                           restarts <- computeRestarts(cond)
[17:42:08.124]                           for (restart in restarts) {
[17:42:08.124]                             name <- restart$name
[17:42:08.124]                             if (is.null(name)) 
[17:42:08.124]                               next
[17:42:08.124]                             if (!grepl(pattern, name)) 
[17:42:08.124]                               next
[17:42:08.124]                             invokeRestart(restart)
[17:42:08.124]                             muffled <- TRUE
[17:42:08.124]                             break
[17:42:08.124]                           }
[17:42:08.124]                         }
[17:42:08.124]                       }
[17:42:08.124]                       invisible(muffled)
[17:42:08.124]                     }
[17:42:08.124]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.124]                   }
[17:42:08.124]                 }
[17:42:08.124]             }
[17:42:08.124]         }))
[17:42:08.124]     }, error = function(ex) {
[17:42:08.124]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.124]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.124]                 ...future.rng), started = ...future.startTime, 
[17:42:08.124]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.124]             version = "1.8"), class = "FutureResult")
[17:42:08.124]     }, finally = {
[17:42:08.124]         if (!identical(...future.workdir, getwd())) 
[17:42:08.124]             setwd(...future.workdir)
[17:42:08.124]         {
[17:42:08.124]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.124]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.124]             }
[17:42:08.124]             base::options(...future.oldOptions)
[17:42:08.124]             if (.Platform$OS.type == "windows") {
[17:42:08.124]                 old_names <- names(...future.oldEnvVars)
[17:42:08.124]                 envs <- base::Sys.getenv()
[17:42:08.124]                 names <- names(envs)
[17:42:08.124]                 common <- intersect(names, old_names)
[17:42:08.124]                 added <- setdiff(names, old_names)
[17:42:08.124]                 removed <- setdiff(old_names, names)
[17:42:08.124]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.124]                   envs[common]]
[17:42:08.124]                 NAMES <- toupper(changed)
[17:42:08.124]                 args <- list()
[17:42:08.124]                 for (kk in seq_along(NAMES)) {
[17:42:08.124]                   name <- changed[[kk]]
[17:42:08.124]                   NAME <- NAMES[[kk]]
[17:42:08.124]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.124]                     next
[17:42:08.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.124]                 }
[17:42:08.124]                 NAMES <- toupper(added)
[17:42:08.124]                 for (kk in seq_along(NAMES)) {
[17:42:08.124]                   name <- added[[kk]]
[17:42:08.124]                   NAME <- NAMES[[kk]]
[17:42:08.124]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.124]                     next
[17:42:08.124]                   args[[name]] <- ""
[17:42:08.124]                 }
[17:42:08.124]                 NAMES <- toupper(removed)
[17:42:08.124]                 for (kk in seq_along(NAMES)) {
[17:42:08.124]                   name <- removed[[kk]]
[17:42:08.124]                   NAME <- NAMES[[kk]]
[17:42:08.124]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.124]                     next
[17:42:08.124]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.124]                 }
[17:42:08.124]                 if (length(args) > 0) 
[17:42:08.124]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.124]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.124]             }
[17:42:08.124]             else {
[17:42:08.124]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.124]             }
[17:42:08.124]             {
[17:42:08.124]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.124]                   0L) {
[17:42:08.124]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.124]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.124]                   base::options(opts)
[17:42:08.124]                 }
[17:42:08.124]                 {
[17:42:08.124]                   {
[17:42:08.124]                     NULL
[17:42:08.124]                     RNGkind("Mersenne-Twister")
[17:42:08.124]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.124]                       inherits = FALSE)
[17:42:08.124]                   }
[17:42:08.124]                   options(future.plan = NULL)
[17:42:08.124]                   if (is.na(NA_character_)) 
[17:42:08.124]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.124]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.124]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.124]                   {
[17:42:08.124]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.124]                     if (!future$lazy) 
[17:42:08.124]                       future <- run(future)
[17:42:08.124]                     invisible(future)
[17:42:08.124]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.124]                 }
[17:42:08.124]             }
[17:42:08.124]         }
[17:42:08.124]     })
[17:42:08.124]     if (TRUE) {
[17:42:08.124]         base::sink(type = "output", split = FALSE)
[17:42:08.124]         if (TRUE) {
[17:42:08.124]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.124]         }
[17:42:08.124]         else {
[17:42:08.124]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.124]         }
[17:42:08.124]         base::close(...future.stdout)
[17:42:08.124]         ...future.stdout <- NULL
[17:42:08.124]     }
[17:42:08.124]     ...future.result$conditions <- ...future.conditions
[17:42:08.124]     ...future.result$finished <- base::Sys.time()
[17:42:08.124]     ...future.result
[17:42:08.124] }
[17:42:08.126] plan(): Setting new future strategy stack:
[17:42:08.126] List of future strategies:
[17:42:08.126] 1. sequential:
[17:42:08.126]    - args: function (..., envir = parent.frame())
[17:42:08.126]    - tweaked: FALSE
[17:42:08.126]    - call: NULL
[17:42:08.127] plan(): nbrOfWorkers() = 1
[17:42:08.128] plan(): Setting new future strategy stack:
[17:42:08.128] List of future strategies:
[17:42:08.128] 1. sequential:
[17:42:08.128]    - args: function (..., envir = parent.frame())
[17:42:08.128]    - tweaked: FALSE
[17:42:08.128]    - call: future::plan("sequential")
[17:42:08.128] plan(): nbrOfWorkers() = 1
[17:42:08.129] SequentialFuture started (and completed)
[17:42:08.129] - Launch lazy future ... done
[17:42:08.129] run() for ‘SequentialFuture’ ... done
[17:42:08.129] - run() ... done
[17:42:08.129] - resolved() ...
[17:42:08.129] resolved() for ‘SequentialFuture’ ...
[17:42:08.129] - state: ‘finished’
[17:42:08.130] - run: TRUE
[17:42:08.130] - result: ‘FutureResult’
[17:42:08.130] resolved() for ‘SequentialFuture’ ... done
[17:42:08.130] - resolved: TRUE
[17:42:08.130] - resolved() ... done
[17:42:08.130] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:42:08.131] getGlobalsAndPackages() ...
[17:42:08.131] Searching for globals...
[17:42:08.131] 
[17:42:08.131] Searching for globals ... DONE
[17:42:08.131] - globals: [0] <none>
[17:42:08.131] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: adfc2640-2155-9b6b-e044-cf81ebd4f3ae
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:42:08.132] run() for ‘Future’ ...
[17:42:08.132] - state: ‘created’
[17:42:08.132] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.133] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.133] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.133]   - Field: ‘label’
[17:42:08.133]   - Field: ‘local’
[17:42:08.133]   - Field: ‘owner’
[17:42:08.133]   - Field: ‘envir’
[17:42:08.133]   - Field: ‘packages’
[17:42:08.133]   - Field: ‘gc’
[17:42:08.134]   - Field: ‘conditions’
[17:42:08.134]   - Field: ‘expr’
[17:42:08.134]   - Field: ‘uuid’
[17:42:08.134]   - Field: ‘seed’
[17:42:08.134]   - Field: ‘version’
[17:42:08.134]   - Field: ‘result’
[17:42:08.134]   - Field: ‘asynchronous’
[17:42:08.134]   - Field: ‘calls’
[17:42:08.134]   - Field: ‘globals’
[17:42:08.134]   - Field: ‘stdout’
[17:42:08.135]   - Field: ‘earlySignal’
[17:42:08.135]   - Field: ‘lazy’
[17:42:08.135]   - Field: ‘state’
[17:42:08.135] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.135] - Launch lazy future ...
[17:42:08.135] Packages needed by the future expression (n = 0): <none>
[17:42:08.135] Packages needed by future strategies (n = 0): <none>
[17:42:08.136] {
[17:42:08.136]     {
[17:42:08.136]         {
[17:42:08.136]             ...future.startTime <- base::Sys.time()
[17:42:08.136]             {
[17:42:08.136]                 {
[17:42:08.136]                   {
[17:42:08.136]                     base::local({
[17:42:08.136]                       has_future <- base::requireNamespace("future", 
[17:42:08.136]                         quietly = TRUE)
[17:42:08.136]                       if (has_future) {
[17:42:08.136]                         ns <- base::getNamespace("future")
[17:42:08.136]                         version <- ns[[".package"]][["version"]]
[17:42:08.136]                         if (is.null(version)) 
[17:42:08.136]                           version <- utils::packageVersion("future")
[17:42:08.136]                       }
[17:42:08.136]                       else {
[17:42:08.136]                         version <- NULL
[17:42:08.136]                       }
[17:42:08.136]                       if (!has_future || version < "1.8.0") {
[17:42:08.136]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.136]                           "", base::R.version$version.string), 
[17:42:08.136]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.136]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.136]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.136]                             "release", "version")], collapse = " "), 
[17:42:08.136]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.136]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.136]                           info)
[17:42:08.136]                         info <- base::paste(info, collapse = "; ")
[17:42:08.136]                         if (!has_future) {
[17:42:08.136]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.136]                             info)
[17:42:08.136]                         }
[17:42:08.136]                         else {
[17:42:08.136]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.136]                             info, version)
[17:42:08.136]                         }
[17:42:08.136]                         base::stop(msg)
[17:42:08.136]                       }
[17:42:08.136]                     })
[17:42:08.136]                   }
[17:42:08.136]                   options(future.plan = NULL)
[17:42:08.136]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.136]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.136]                 }
[17:42:08.136]                 ...future.workdir <- getwd()
[17:42:08.136]             }
[17:42:08.136]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.136]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.136]         }
[17:42:08.136]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.136]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.136]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.136]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.136]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.136]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.136]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.136]             base::names(...future.oldOptions))
[17:42:08.136]     }
[17:42:08.136]     if (FALSE) {
[17:42:08.136]     }
[17:42:08.136]     else {
[17:42:08.136]         if (TRUE) {
[17:42:08.136]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.136]                 open = "w")
[17:42:08.136]         }
[17:42:08.136]         else {
[17:42:08.136]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.136]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.136]         }
[17:42:08.136]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.136]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.136]             base::sink(type = "output", split = FALSE)
[17:42:08.136]             base::close(...future.stdout)
[17:42:08.136]         }, add = TRUE)
[17:42:08.136]     }
[17:42:08.136]     ...future.frame <- base::sys.nframe()
[17:42:08.136]     ...future.conditions <- base::list()
[17:42:08.136]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.136]     if (FALSE) {
[17:42:08.136]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.136]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.136]     }
[17:42:08.136]     ...future.result <- base::tryCatch({
[17:42:08.136]         base::withCallingHandlers({
[17:42:08.136]             ...future.value <- base::withVisible(base::local(42L))
[17:42:08.136]             future::FutureResult(value = ...future.value$value, 
[17:42:08.136]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.136]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.136]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.136]                     ...future.globalenv.names))
[17:42:08.136]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.136]         }, condition = base::local({
[17:42:08.136]             c <- base::c
[17:42:08.136]             inherits <- base::inherits
[17:42:08.136]             invokeRestart <- base::invokeRestart
[17:42:08.136]             length <- base::length
[17:42:08.136]             list <- base::list
[17:42:08.136]             seq.int <- base::seq.int
[17:42:08.136]             signalCondition <- base::signalCondition
[17:42:08.136]             sys.calls <- base::sys.calls
[17:42:08.136]             `[[` <- base::`[[`
[17:42:08.136]             `+` <- base::`+`
[17:42:08.136]             `<<-` <- base::`<<-`
[17:42:08.136]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.136]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.136]                   3L)]
[17:42:08.136]             }
[17:42:08.136]             function(cond) {
[17:42:08.136]                 is_error <- inherits(cond, "error")
[17:42:08.136]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.136]                   NULL)
[17:42:08.136]                 if (is_error) {
[17:42:08.136]                   sessionInformation <- function() {
[17:42:08.136]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.136]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.136]                       search = base::search(), system = base::Sys.info())
[17:42:08.136]                   }
[17:42:08.136]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.136]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.136]                     cond$call), session = sessionInformation(), 
[17:42:08.136]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.136]                   signalCondition(cond)
[17:42:08.136]                 }
[17:42:08.136]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.136]                 "immediateCondition"))) {
[17:42:08.136]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.136]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.136]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.136]                   if (TRUE && !signal) {
[17:42:08.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.136]                     {
[17:42:08.136]                       inherits <- base::inherits
[17:42:08.136]                       invokeRestart <- base::invokeRestart
[17:42:08.136]                       is.null <- base::is.null
[17:42:08.136]                       muffled <- FALSE
[17:42:08.136]                       if (inherits(cond, "message")) {
[17:42:08.136]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.136]                         if (muffled) 
[17:42:08.136]                           invokeRestart("muffleMessage")
[17:42:08.136]                       }
[17:42:08.136]                       else if (inherits(cond, "warning")) {
[17:42:08.136]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.136]                         if (muffled) 
[17:42:08.136]                           invokeRestart("muffleWarning")
[17:42:08.136]                       }
[17:42:08.136]                       else if (inherits(cond, "condition")) {
[17:42:08.136]                         if (!is.null(pattern)) {
[17:42:08.136]                           computeRestarts <- base::computeRestarts
[17:42:08.136]                           grepl <- base::grepl
[17:42:08.136]                           restarts <- computeRestarts(cond)
[17:42:08.136]                           for (restart in restarts) {
[17:42:08.136]                             name <- restart$name
[17:42:08.136]                             if (is.null(name)) 
[17:42:08.136]                               next
[17:42:08.136]                             if (!grepl(pattern, name)) 
[17:42:08.136]                               next
[17:42:08.136]                             invokeRestart(restart)
[17:42:08.136]                             muffled <- TRUE
[17:42:08.136]                             break
[17:42:08.136]                           }
[17:42:08.136]                         }
[17:42:08.136]                       }
[17:42:08.136]                       invisible(muffled)
[17:42:08.136]                     }
[17:42:08.136]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.136]                   }
[17:42:08.136]                 }
[17:42:08.136]                 else {
[17:42:08.136]                   if (TRUE) {
[17:42:08.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.136]                     {
[17:42:08.136]                       inherits <- base::inherits
[17:42:08.136]                       invokeRestart <- base::invokeRestart
[17:42:08.136]                       is.null <- base::is.null
[17:42:08.136]                       muffled <- FALSE
[17:42:08.136]                       if (inherits(cond, "message")) {
[17:42:08.136]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.136]                         if (muffled) 
[17:42:08.136]                           invokeRestart("muffleMessage")
[17:42:08.136]                       }
[17:42:08.136]                       else if (inherits(cond, "warning")) {
[17:42:08.136]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.136]                         if (muffled) 
[17:42:08.136]                           invokeRestart("muffleWarning")
[17:42:08.136]                       }
[17:42:08.136]                       else if (inherits(cond, "condition")) {
[17:42:08.136]                         if (!is.null(pattern)) {
[17:42:08.136]                           computeRestarts <- base::computeRestarts
[17:42:08.136]                           grepl <- base::grepl
[17:42:08.136]                           restarts <- computeRestarts(cond)
[17:42:08.136]                           for (restart in restarts) {
[17:42:08.136]                             name <- restart$name
[17:42:08.136]                             if (is.null(name)) 
[17:42:08.136]                               next
[17:42:08.136]                             if (!grepl(pattern, name)) 
[17:42:08.136]                               next
[17:42:08.136]                             invokeRestart(restart)
[17:42:08.136]                             muffled <- TRUE
[17:42:08.136]                             break
[17:42:08.136]                           }
[17:42:08.136]                         }
[17:42:08.136]                       }
[17:42:08.136]                       invisible(muffled)
[17:42:08.136]                     }
[17:42:08.136]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.136]                   }
[17:42:08.136]                 }
[17:42:08.136]             }
[17:42:08.136]         }))
[17:42:08.136]     }, error = function(ex) {
[17:42:08.136]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.136]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.136]                 ...future.rng), started = ...future.startTime, 
[17:42:08.136]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.136]             version = "1.8"), class = "FutureResult")
[17:42:08.136]     }, finally = {
[17:42:08.136]         if (!identical(...future.workdir, getwd())) 
[17:42:08.136]             setwd(...future.workdir)
[17:42:08.136]         {
[17:42:08.136]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.136]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.136]             }
[17:42:08.136]             base::options(...future.oldOptions)
[17:42:08.136]             if (.Platform$OS.type == "windows") {
[17:42:08.136]                 old_names <- names(...future.oldEnvVars)
[17:42:08.136]                 envs <- base::Sys.getenv()
[17:42:08.136]                 names <- names(envs)
[17:42:08.136]                 common <- intersect(names, old_names)
[17:42:08.136]                 added <- setdiff(names, old_names)
[17:42:08.136]                 removed <- setdiff(old_names, names)
[17:42:08.136]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.136]                   envs[common]]
[17:42:08.136]                 NAMES <- toupper(changed)
[17:42:08.136]                 args <- list()
[17:42:08.136]                 for (kk in seq_along(NAMES)) {
[17:42:08.136]                   name <- changed[[kk]]
[17:42:08.136]                   NAME <- NAMES[[kk]]
[17:42:08.136]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.136]                     next
[17:42:08.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.136]                 }
[17:42:08.136]                 NAMES <- toupper(added)
[17:42:08.136]                 for (kk in seq_along(NAMES)) {
[17:42:08.136]                   name <- added[[kk]]
[17:42:08.136]                   NAME <- NAMES[[kk]]
[17:42:08.136]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.136]                     next
[17:42:08.136]                   args[[name]] <- ""
[17:42:08.136]                 }
[17:42:08.136]                 NAMES <- toupper(removed)
[17:42:08.136]                 for (kk in seq_along(NAMES)) {
[17:42:08.136]                   name <- removed[[kk]]
[17:42:08.136]                   NAME <- NAMES[[kk]]
[17:42:08.136]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.136]                     next
[17:42:08.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.136]                 }
[17:42:08.136]                 if (length(args) > 0) 
[17:42:08.136]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.136]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.136]             }
[17:42:08.136]             else {
[17:42:08.136]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.136]             }
[17:42:08.136]             {
[17:42:08.136]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.136]                   0L) {
[17:42:08.136]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.136]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.136]                   base::options(opts)
[17:42:08.136]                 }
[17:42:08.136]                 {
[17:42:08.136]                   {
[17:42:08.136]                     NULL
[17:42:08.136]                     RNGkind("Mersenne-Twister")
[17:42:08.136]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.136]                       inherits = FALSE)
[17:42:08.136]                   }
[17:42:08.136]                   options(future.plan = NULL)
[17:42:08.136]                   if (is.na(NA_character_)) 
[17:42:08.136]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.136]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.136]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.136]                   {
[17:42:08.136]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.136]                     if (!future$lazy) 
[17:42:08.136]                       future <- run(future)
[17:42:08.136]                     invisible(future)
[17:42:08.136]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.136]                 }
[17:42:08.136]             }
[17:42:08.136]         }
[17:42:08.136]     })
[17:42:08.136]     if (TRUE) {
[17:42:08.136]         base::sink(type = "output", split = FALSE)
[17:42:08.136]         if (TRUE) {
[17:42:08.136]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.136]         }
[17:42:08.136]         else {
[17:42:08.136]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.136]         }
[17:42:08.136]         base::close(...future.stdout)
[17:42:08.136]         ...future.stdout <- NULL
[17:42:08.136]     }
[17:42:08.136]     ...future.result$conditions <- ...future.conditions
[17:42:08.136]     ...future.result$finished <- base::Sys.time()
[17:42:08.136]     ...future.result
[17:42:08.136] }
[17:42:08.137] plan(): Setting new future strategy stack:
[17:42:08.138] List of future strategies:
[17:42:08.138] 1. sequential:
[17:42:08.138]    - args: function (..., envir = parent.frame())
[17:42:08.138]    - tweaked: FALSE
[17:42:08.138]    - call: NULL
[17:42:08.138] plan(): nbrOfWorkers() = 1
[17:42:08.139] plan(): Setting new future strategy stack:
[17:42:08.139] List of future strategies:
[17:42:08.139] 1. sequential:
[17:42:08.139]    - args: function (..., envir = parent.frame())
[17:42:08.139]    - tweaked: FALSE
[17:42:08.139]    - call: future::plan("sequential")
[17:42:08.139] plan(): nbrOfWorkers() = 1
[17:42:08.139] SequentialFuture started (and completed)
[17:42:08.140] - Launch lazy future ... done
[17:42:08.140] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:42:08.140] getGlobalsAndPackages() ...
[17:42:08.140] Searching for globals...
[17:42:08.144] - globals found: [1] ‘{’
[17:42:08.144] Searching for globals ... DONE
[17:42:08.144] Resolving globals: FALSE
[17:42:08.145] 
[17:42:08.145] 
[17:42:08.145] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:42:08.145] resolved() for ‘Future’ ...
[17:42:08.145] - state: ‘created’
[17:42:08.145] - run: TRUE
[17:42:08.146] - run() ...
[17:42:08.146] run() for ‘Future’ ...
[17:42:08.146] - state: ‘created’
[17:42:08.146] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.146] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.146] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.146]   - Field: ‘label’
[17:42:08.146]   - Field: ‘local’
[17:42:08.147]   - Field: ‘owner’
[17:42:08.147]   - Field: ‘envir’
[17:42:08.147]   - Field: ‘packages’
[17:42:08.147]   - Field: ‘gc’
[17:42:08.147]   - Field: ‘conditions’
[17:42:08.147]   - Field: ‘expr’
[17:42:08.147]   - Field: ‘uuid’
[17:42:08.147]   - Field: ‘seed’
[17:42:08.147]   - Field: ‘version’
[17:42:08.147]   - Field: ‘result’
[17:42:08.148]   - Field: ‘asynchronous’
[17:42:08.148]   - Field: ‘calls’
[17:42:08.148]   - Field: ‘globals’
[17:42:08.148]   - Field: ‘stdout’
[17:42:08.148]   - Field: ‘earlySignal’
[17:42:08.148]   - Field: ‘lazy’
[17:42:08.148]   - Field: ‘state’
[17:42:08.148] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.148] - Launch lazy future ...
[17:42:08.148] Packages needed by the future expression (n = 0): <none>
[17:42:08.149] Packages needed by future strategies (n = 0): <none>
[17:42:08.149] {
[17:42:08.149]     {
[17:42:08.149]         {
[17:42:08.149]             ...future.startTime <- base::Sys.time()
[17:42:08.149]             {
[17:42:08.149]                 {
[17:42:08.149]                   {
[17:42:08.149]                     base::local({
[17:42:08.149]                       has_future <- base::requireNamespace("future", 
[17:42:08.149]                         quietly = TRUE)
[17:42:08.149]                       if (has_future) {
[17:42:08.149]                         ns <- base::getNamespace("future")
[17:42:08.149]                         version <- ns[[".package"]][["version"]]
[17:42:08.149]                         if (is.null(version)) 
[17:42:08.149]                           version <- utils::packageVersion("future")
[17:42:08.149]                       }
[17:42:08.149]                       else {
[17:42:08.149]                         version <- NULL
[17:42:08.149]                       }
[17:42:08.149]                       if (!has_future || version < "1.8.0") {
[17:42:08.149]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.149]                           "", base::R.version$version.string), 
[17:42:08.149]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.149]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.149]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.149]                             "release", "version")], collapse = " "), 
[17:42:08.149]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.149]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.149]                           info)
[17:42:08.149]                         info <- base::paste(info, collapse = "; ")
[17:42:08.149]                         if (!has_future) {
[17:42:08.149]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.149]                             info)
[17:42:08.149]                         }
[17:42:08.149]                         else {
[17:42:08.149]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.149]                             info, version)
[17:42:08.149]                         }
[17:42:08.149]                         base::stop(msg)
[17:42:08.149]                       }
[17:42:08.149]                     })
[17:42:08.149]                   }
[17:42:08.149]                   options(future.plan = NULL)
[17:42:08.149]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.149]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.149]                 }
[17:42:08.149]                 ...future.workdir <- getwd()
[17:42:08.149]             }
[17:42:08.149]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.149]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.149]         }
[17:42:08.149]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.149]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.149]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.149]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.149]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.149]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.149]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.149]             base::names(...future.oldOptions))
[17:42:08.149]     }
[17:42:08.149]     if (FALSE) {
[17:42:08.149]     }
[17:42:08.149]     else {
[17:42:08.149]         if (TRUE) {
[17:42:08.149]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.149]                 open = "w")
[17:42:08.149]         }
[17:42:08.149]         else {
[17:42:08.149]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.149]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.149]         }
[17:42:08.149]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.149]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.149]             base::sink(type = "output", split = FALSE)
[17:42:08.149]             base::close(...future.stdout)
[17:42:08.149]         }, add = TRUE)
[17:42:08.149]     }
[17:42:08.149]     ...future.frame <- base::sys.nframe()
[17:42:08.149]     ...future.conditions <- base::list()
[17:42:08.149]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.149]     if (FALSE) {
[17:42:08.149]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.149]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.149]     }
[17:42:08.149]     ...future.result <- base::tryCatch({
[17:42:08.149]         base::withCallingHandlers({
[17:42:08.149]             ...future.value <- base::withVisible(base::local({
[17:42:08.149]                 42L
[17:42:08.149]             }))
[17:42:08.149]             future::FutureResult(value = ...future.value$value, 
[17:42:08.149]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.149]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.149]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.149]                     ...future.globalenv.names))
[17:42:08.149]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.149]         }, condition = base::local({
[17:42:08.149]             c <- base::c
[17:42:08.149]             inherits <- base::inherits
[17:42:08.149]             invokeRestart <- base::invokeRestart
[17:42:08.149]             length <- base::length
[17:42:08.149]             list <- base::list
[17:42:08.149]             seq.int <- base::seq.int
[17:42:08.149]             signalCondition <- base::signalCondition
[17:42:08.149]             sys.calls <- base::sys.calls
[17:42:08.149]             `[[` <- base::`[[`
[17:42:08.149]             `+` <- base::`+`
[17:42:08.149]             `<<-` <- base::`<<-`
[17:42:08.149]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.149]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.149]                   3L)]
[17:42:08.149]             }
[17:42:08.149]             function(cond) {
[17:42:08.149]                 is_error <- inherits(cond, "error")
[17:42:08.149]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.149]                   NULL)
[17:42:08.149]                 if (is_error) {
[17:42:08.149]                   sessionInformation <- function() {
[17:42:08.149]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.149]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.149]                       search = base::search(), system = base::Sys.info())
[17:42:08.149]                   }
[17:42:08.149]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.149]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.149]                     cond$call), session = sessionInformation(), 
[17:42:08.149]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.149]                   signalCondition(cond)
[17:42:08.149]                 }
[17:42:08.149]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.149]                 "immediateCondition"))) {
[17:42:08.149]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.149]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.149]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.149]                   if (TRUE && !signal) {
[17:42:08.149]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.149]                     {
[17:42:08.149]                       inherits <- base::inherits
[17:42:08.149]                       invokeRestart <- base::invokeRestart
[17:42:08.149]                       is.null <- base::is.null
[17:42:08.149]                       muffled <- FALSE
[17:42:08.149]                       if (inherits(cond, "message")) {
[17:42:08.149]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.149]                         if (muffled) 
[17:42:08.149]                           invokeRestart("muffleMessage")
[17:42:08.149]                       }
[17:42:08.149]                       else if (inherits(cond, "warning")) {
[17:42:08.149]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.149]                         if (muffled) 
[17:42:08.149]                           invokeRestart("muffleWarning")
[17:42:08.149]                       }
[17:42:08.149]                       else if (inherits(cond, "condition")) {
[17:42:08.149]                         if (!is.null(pattern)) {
[17:42:08.149]                           computeRestarts <- base::computeRestarts
[17:42:08.149]                           grepl <- base::grepl
[17:42:08.149]                           restarts <- computeRestarts(cond)
[17:42:08.149]                           for (restart in restarts) {
[17:42:08.149]                             name <- restart$name
[17:42:08.149]                             if (is.null(name)) 
[17:42:08.149]                               next
[17:42:08.149]                             if (!grepl(pattern, name)) 
[17:42:08.149]                               next
[17:42:08.149]                             invokeRestart(restart)
[17:42:08.149]                             muffled <- TRUE
[17:42:08.149]                             break
[17:42:08.149]                           }
[17:42:08.149]                         }
[17:42:08.149]                       }
[17:42:08.149]                       invisible(muffled)
[17:42:08.149]                     }
[17:42:08.149]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.149]                   }
[17:42:08.149]                 }
[17:42:08.149]                 else {
[17:42:08.149]                   if (TRUE) {
[17:42:08.149]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.149]                     {
[17:42:08.149]                       inherits <- base::inherits
[17:42:08.149]                       invokeRestart <- base::invokeRestart
[17:42:08.149]                       is.null <- base::is.null
[17:42:08.149]                       muffled <- FALSE
[17:42:08.149]                       if (inherits(cond, "message")) {
[17:42:08.149]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.149]                         if (muffled) 
[17:42:08.149]                           invokeRestart("muffleMessage")
[17:42:08.149]                       }
[17:42:08.149]                       else if (inherits(cond, "warning")) {
[17:42:08.149]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.149]                         if (muffled) 
[17:42:08.149]                           invokeRestart("muffleWarning")
[17:42:08.149]                       }
[17:42:08.149]                       else if (inherits(cond, "condition")) {
[17:42:08.149]                         if (!is.null(pattern)) {
[17:42:08.149]                           computeRestarts <- base::computeRestarts
[17:42:08.149]                           grepl <- base::grepl
[17:42:08.149]                           restarts <- computeRestarts(cond)
[17:42:08.149]                           for (restart in restarts) {
[17:42:08.149]                             name <- restart$name
[17:42:08.149]                             if (is.null(name)) 
[17:42:08.149]                               next
[17:42:08.149]                             if (!grepl(pattern, name)) 
[17:42:08.149]                               next
[17:42:08.149]                             invokeRestart(restart)
[17:42:08.149]                             muffled <- TRUE
[17:42:08.149]                             break
[17:42:08.149]                           }
[17:42:08.149]                         }
[17:42:08.149]                       }
[17:42:08.149]                       invisible(muffled)
[17:42:08.149]                     }
[17:42:08.149]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.149]                   }
[17:42:08.149]                 }
[17:42:08.149]             }
[17:42:08.149]         }))
[17:42:08.149]     }, error = function(ex) {
[17:42:08.149]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.149]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.149]                 ...future.rng), started = ...future.startTime, 
[17:42:08.149]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.149]             version = "1.8"), class = "FutureResult")
[17:42:08.149]     }, finally = {
[17:42:08.149]         if (!identical(...future.workdir, getwd())) 
[17:42:08.149]             setwd(...future.workdir)
[17:42:08.149]         {
[17:42:08.149]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.149]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.149]             }
[17:42:08.149]             base::options(...future.oldOptions)
[17:42:08.149]             if (.Platform$OS.type == "windows") {
[17:42:08.149]                 old_names <- names(...future.oldEnvVars)
[17:42:08.149]                 envs <- base::Sys.getenv()
[17:42:08.149]                 names <- names(envs)
[17:42:08.149]                 common <- intersect(names, old_names)
[17:42:08.149]                 added <- setdiff(names, old_names)
[17:42:08.149]                 removed <- setdiff(old_names, names)
[17:42:08.149]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.149]                   envs[common]]
[17:42:08.149]                 NAMES <- toupper(changed)
[17:42:08.149]                 args <- list()
[17:42:08.149]                 for (kk in seq_along(NAMES)) {
[17:42:08.149]                   name <- changed[[kk]]
[17:42:08.149]                   NAME <- NAMES[[kk]]
[17:42:08.149]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.149]                     next
[17:42:08.149]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.149]                 }
[17:42:08.149]                 NAMES <- toupper(added)
[17:42:08.149]                 for (kk in seq_along(NAMES)) {
[17:42:08.149]                   name <- added[[kk]]
[17:42:08.149]                   NAME <- NAMES[[kk]]
[17:42:08.149]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.149]                     next
[17:42:08.149]                   args[[name]] <- ""
[17:42:08.149]                 }
[17:42:08.149]                 NAMES <- toupper(removed)
[17:42:08.149]                 for (kk in seq_along(NAMES)) {
[17:42:08.149]                   name <- removed[[kk]]
[17:42:08.149]                   NAME <- NAMES[[kk]]
[17:42:08.149]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.149]                     next
[17:42:08.149]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.149]                 }
[17:42:08.149]                 if (length(args) > 0) 
[17:42:08.149]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.149]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.149]             }
[17:42:08.149]             else {
[17:42:08.149]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.149]             }
[17:42:08.149]             {
[17:42:08.149]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.149]                   0L) {
[17:42:08.149]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.149]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.149]                   base::options(opts)
[17:42:08.149]                 }
[17:42:08.149]                 {
[17:42:08.149]                   {
[17:42:08.149]                     NULL
[17:42:08.149]                     RNGkind("Mersenne-Twister")
[17:42:08.149]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.149]                       inherits = FALSE)
[17:42:08.149]                   }
[17:42:08.149]                   options(future.plan = NULL)
[17:42:08.149]                   if (is.na(NA_character_)) 
[17:42:08.149]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.149]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.149]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.149]                   {
[17:42:08.149]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.149]                     if (!future$lazy) 
[17:42:08.149]                       future <- run(future)
[17:42:08.149]                     invisible(future)
[17:42:08.149]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.149]                 }
[17:42:08.149]             }
[17:42:08.149]         }
[17:42:08.149]     })
[17:42:08.149]     if (TRUE) {
[17:42:08.149]         base::sink(type = "output", split = FALSE)
[17:42:08.149]         if (TRUE) {
[17:42:08.149]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.149]         }
[17:42:08.149]         else {
[17:42:08.149]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.149]         }
[17:42:08.149]         base::close(...future.stdout)
[17:42:08.149]         ...future.stdout <- NULL
[17:42:08.149]     }
[17:42:08.149]     ...future.result$conditions <- ...future.conditions
[17:42:08.149]     ...future.result$finished <- base::Sys.time()
[17:42:08.149]     ...future.result
[17:42:08.149] }
[17:42:08.151] plan(): Setting new future strategy stack:
[17:42:08.151] List of future strategies:
[17:42:08.151] 1. sequential:
[17:42:08.151]    - args: function (..., envir = parent.frame())
[17:42:08.151]    - tweaked: FALSE
[17:42:08.151]    - call: NULL
[17:42:08.151] plan(): nbrOfWorkers() = 1
[17:42:08.152] plan(): Setting new future strategy stack:
[17:42:08.152] List of future strategies:
[17:42:08.152] 1. sequential:
[17:42:08.152]    - args: function (..., envir = parent.frame())
[17:42:08.152]    - tweaked: FALSE
[17:42:08.152]    - call: future::plan("sequential")
[17:42:08.153] plan(): nbrOfWorkers() = 1
[17:42:08.153] SequentialFuture started (and completed)
[17:42:08.153] - Launch lazy future ... done
[17:42:08.153] run() for ‘SequentialFuture’ ... done
[17:42:08.153] - run() ... done
[17:42:08.153] - resolved() ...
[17:42:08.153] resolved() for ‘SequentialFuture’ ...
[17:42:08.153] - state: ‘finished’
[17:42:08.153] - run: TRUE
[17:42:08.153] - result: ‘FutureResult’
[17:42:08.154] resolved() for ‘SequentialFuture’ ... done
[17:42:08.154] - resolved: TRUE
[17:42:08.154] - resolved() ... done
[17:42:08.154] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:42:08.154] getGlobalsAndPackages() ...
[17:42:08.154] Searching for globals...
[17:42:08.155] 
[17:42:08.155] Searching for globals ... DONE
[17:42:08.155] - globals: [0] <none>
[17:42:08.155] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: adfc2640-2155-9b6b-e044-cf81ebd4f3ae
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:42:08.155] run() for ‘Future’ ...
[17:42:08.156] - state: ‘created’
[17:42:08.156] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:08.156] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:08.156] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:08.156]   - Field: ‘label’
[17:42:08.156]   - Field: ‘local’
[17:42:08.156]   - Field: ‘owner’
[17:42:08.156]   - Field: ‘envir’
[17:42:08.157]   - Field: ‘packages’
[17:42:08.157]   - Field: ‘gc’
[17:42:08.157]   - Field: ‘conditions’
[17:42:08.157]   - Field: ‘expr’
[17:42:08.157]   - Field: ‘uuid’
[17:42:08.157]   - Field: ‘seed’
[17:42:08.157]   - Field: ‘version’
[17:42:08.157]   - Field: ‘result’
[17:42:08.157]   - Field: ‘asynchronous’
[17:42:08.157]   - Field: ‘calls’
[17:42:08.157]   - Field: ‘globals’
[17:42:08.158]   - Field: ‘stdout’
[17:42:08.158]   - Field: ‘earlySignal’
[17:42:08.158]   - Field: ‘lazy’
[17:42:08.158]   - Field: ‘state’
[17:42:08.158] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:08.158] - Launch lazy future ...
[17:42:08.158] Packages needed by the future expression (n = 0): <none>
[17:42:08.158] Packages needed by future strategies (n = 0): <none>
[17:42:08.159] {
[17:42:08.159]     {
[17:42:08.159]         {
[17:42:08.159]             ...future.startTime <- base::Sys.time()
[17:42:08.159]             {
[17:42:08.159]                 {
[17:42:08.159]                   {
[17:42:08.159]                     base::local({
[17:42:08.159]                       has_future <- base::requireNamespace("future", 
[17:42:08.159]                         quietly = TRUE)
[17:42:08.159]                       if (has_future) {
[17:42:08.159]                         ns <- base::getNamespace("future")
[17:42:08.159]                         version <- ns[[".package"]][["version"]]
[17:42:08.159]                         if (is.null(version)) 
[17:42:08.159]                           version <- utils::packageVersion("future")
[17:42:08.159]                       }
[17:42:08.159]                       else {
[17:42:08.159]                         version <- NULL
[17:42:08.159]                       }
[17:42:08.159]                       if (!has_future || version < "1.8.0") {
[17:42:08.159]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:08.159]                           "", base::R.version$version.string), 
[17:42:08.159]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:08.159]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:08.159]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:08.159]                             "release", "version")], collapse = " "), 
[17:42:08.159]                           hostname = base::Sys.info()[["nodename"]])
[17:42:08.159]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:08.159]                           info)
[17:42:08.159]                         info <- base::paste(info, collapse = "; ")
[17:42:08.159]                         if (!has_future) {
[17:42:08.159]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:08.159]                             info)
[17:42:08.159]                         }
[17:42:08.159]                         else {
[17:42:08.159]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:08.159]                             info, version)
[17:42:08.159]                         }
[17:42:08.159]                         base::stop(msg)
[17:42:08.159]                       }
[17:42:08.159]                     })
[17:42:08.159]                   }
[17:42:08.159]                   options(future.plan = NULL)
[17:42:08.159]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.159]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:08.159]                 }
[17:42:08.159]                 ...future.workdir <- getwd()
[17:42:08.159]             }
[17:42:08.159]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:08.159]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:08.159]         }
[17:42:08.159]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:08.159]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:08.159]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:08.159]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:08.159]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:08.159]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:08.159]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:08.159]             base::names(...future.oldOptions))
[17:42:08.159]     }
[17:42:08.159]     if (FALSE) {
[17:42:08.159]     }
[17:42:08.159]     else {
[17:42:08.159]         if (TRUE) {
[17:42:08.159]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:08.159]                 open = "w")
[17:42:08.159]         }
[17:42:08.159]         else {
[17:42:08.159]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:08.159]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:08.159]         }
[17:42:08.159]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:08.159]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:08.159]             base::sink(type = "output", split = FALSE)
[17:42:08.159]             base::close(...future.stdout)
[17:42:08.159]         }, add = TRUE)
[17:42:08.159]     }
[17:42:08.159]     ...future.frame <- base::sys.nframe()
[17:42:08.159]     ...future.conditions <- base::list()
[17:42:08.159]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:08.159]     if (FALSE) {
[17:42:08.159]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:08.159]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:08.159]     }
[17:42:08.159]     ...future.result <- base::tryCatch({
[17:42:08.159]         base::withCallingHandlers({
[17:42:08.159]             ...future.value <- base::withVisible(base::local(42L))
[17:42:08.159]             future::FutureResult(value = ...future.value$value, 
[17:42:08.159]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.159]                   ...future.rng), globalenv = if (FALSE) 
[17:42:08.159]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:08.159]                     ...future.globalenv.names))
[17:42:08.159]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:08.159]         }, condition = base::local({
[17:42:08.159]             c <- base::c
[17:42:08.159]             inherits <- base::inherits
[17:42:08.159]             invokeRestart <- base::invokeRestart
[17:42:08.159]             length <- base::length
[17:42:08.159]             list <- base::list
[17:42:08.159]             seq.int <- base::seq.int
[17:42:08.159]             signalCondition <- base::signalCondition
[17:42:08.159]             sys.calls <- base::sys.calls
[17:42:08.159]             `[[` <- base::`[[`
[17:42:08.159]             `+` <- base::`+`
[17:42:08.159]             `<<-` <- base::`<<-`
[17:42:08.159]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:08.159]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:08.159]                   3L)]
[17:42:08.159]             }
[17:42:08.159]             function(cond) {
[17:42:08.159]                 is_error <- inherits(cond, "error")
[17:42:08.159]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:08.159]                   NULL)
[17:42:08.159]                 if (is_error) {
[17:42:08.159]                   sessionInformation <- function() {
[17:42:08.159]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:08.159]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:08.159]                       search = base::search(), system = base::Sys.info())
[17:42:08.159]                   }
[17:42:08.159]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.159]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:08.159]                     cond$call), session = sessionInformation(), 
[17:42:08.159]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:08.159]                   signalCondition(cond)
[17:42:08.159]                 }
[17:42:08.159]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:08.159]                 "immediateCondition"))) {
[17:42:08.159]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:08.159]                   ...future.conditions[[length(...future.conditions) + 
[17:42:08.159]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:08.159]                   if (TRUE && !signal) {
[17:42:08.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.159]                     {
[17:42:08.159]                       inherits <- base::inherits
[17:42:08.159]                       invokeRestart <- base::invokeRestart
[17:42:08.159]                       is.null <- base::is.null
[17:42:08.159]                       muffled <- FALSE
[17:42:08.159]                       if (inherits(cond, "message")) {
[17:42:08.159]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.159]                         if (muffled) 
[17:42:08.159]                           invokeRestart("muffleMessage")
[17:42:08.159]                       }
[17:42:08.159]                       else if (inherits(cond, "warning")) {
[17:42:08.159]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.159]                         if (muffled) 
[17:42:08.159]                           invokeRestart("muffleWarning")
[17:42:08.159]                       }
[17:42:08.159]                       else if (inherits(cond, "condition")) {
[17:42:08.159]                         if (!is.null(pattern)) {
[17:42:08.159]                           computeRestarts <- base::computeRestarts
[17:42:08.159]                           grepl <- base::grepl
[17:42:08.159]                           restarts <- computeRestarts(cond)
[17:42:08.159]                           for (restart in restarts) {
[17:42:08.159]                             name <- restart$name
[17:42:08.159]                             if (is.null(name)) 
[17:42:08.159]                               next
[17:42:08.159]                             if (!grepl(pattern, name)) 
[17:42:08.159]                               next
[17:42:08.159]                             invokeRestart(restart)
[17:42:08.159]                             muffled <- TRUE
[17:42:08.159]                             break
[17:42:08.159]                           }
[17:42:08.159]                         }
[17:42:08.159]                       }
[17:42:08.159]                       invisible(muffled)
[17:42:08.159]                     }
[17:42:08.159]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.159]                   }
[17:42:08.159]                 }
[17:42:08.159]                 else {
[17:42:08.159]                   if (TRUE) {
[17:42:08.159]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:08.159]                     {
[17:42:08.159]                       inherits <- base::inherits
[17:42:08.159]                       invokeRestart <- base::invokeRestart
[17:42:08.159]                       is.null <- base::is.null
[17:42:08.159]                       muffled <- FALSE
[17:42:08.159]                       if (inherits(cond, "message")) {
[17:42:08.159]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:08.159]                         if (muffled) 
[17:42:08.159]                           invokeRestart("muffleMessage")
[17:42:08.159]                       }
[17:42:08.159]                       else if (inherits(cond, "warning")) {
[17:42:08.159]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:08.159]                         if (muffled) 
[17:42:08.159]                           invokeRestart("muffleWarning")
[17:42:08.159]                       }
[17:42:08.159]                       else if (inherits(cond, "condition")) {
[17:42:08.159]                         if (!is.null(pattern)) {
[17:42:08.159]                           computeRestarts <- base::computeRestarts
[17:42:08.159]                           grepl <- base::grepl
[17:42:08.159]                           restarts <- computeRestarts(cond)
[17:42:08.159]                           for (restart in restarts) {
[17:42:08.159]                             name <- restart$name
[17:42:08.159]                             if (is.null(name)) 
[17:42:08.159]                               next
[17:42:08.159]                             if (!grepl(pattern, name)) 
[17:42:08.159]                               next
[17:42:08.159]                             invokeRestart(restart)
[17:42:08.159]                             muffled <- TRUE
[17:42:08.159]                             break
[17:42:08.159]                           }
[17:42:08.159]                         }
[17:42:08.159]                       }
[17:42:08.159]                       invisible(muffled)
[17:42:08.159]                     }
[17:42:08.159]                     muffleCondition(cond, pattern = "^muffle")
[17:42:08.159]                   }
[17:42:08.159]                 }
[17:42:08.159]             }
[17:42:08.159]         }))
[17:42:08.159]     }, error = function(ex) {
[17:42:08.159]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:08.159]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:08.159]                 ...future.rng), started = ...future.startTime, 
[17:42:08.159]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:08.159]             version = "1.8"), class = "FutureResult")
[17:42:08.159]     }, finally = {
[17:42:08.159]         if (!identical(...future.workdir, getwd())) 
[17:42:08.159]             setwd(...future.workdir)
[17:42:08.159]         {
[17:42:08.159]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:08.159]                 ...future.oldOptions$nwarnings <- NULL
[17:42:08.159]             }
[17:42:08.159]             base::options(...future.oldOptions)
[17:42:08.159]             if (.Platform$OS.type == "windows") {
[17:42:08.159]                 old_names <- names(...future.oldEnvVars)
[17:42:08.159]                 envs <- base::Sys.getenv()
[17:42:08.159]                 names <- names(envs)
[17:42:08.159]                 common <- intersect(names, old_names)
[17:42:08.159]                 added <- setdiff(names, old_names)
[17:42:08.159]                 removed <- setdiff(old_names, names)
[17:42:08.159]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:08.159]                   envs[common]]
[17:42:08.159]                 NAMES <- toupper(changed)
[17:42:08.159]                 args <- list()
[17:42:08.159]                 for (kk in seq_along(NAMES)) {
[17:42:08.159]                   name <- changed[[kk]]
[17:42:08.159]                   NAME <- NAMES[[kk]]
[17:42:08.159]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.159]                     next
[17:42:08.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.159]                 }
[17:42:08.159]                 NAMES <- toupper(added)
[17:42:08.159]                 for (kk in seq_along(NAMES)) {
[17:42:08.159]                   name <- added[[kk]]
[17:42:08.159]                   NAME <- NAMES[[kk]]
[17:42:08.159]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.159]                     next
[17:42:08.159]                   args[[name]] <- ""
[17:42:08.159]                 }
[17:42:08.159]                 NAMES <- toupper(removed)
[17:42:08.159]                 for (kk in seq_along(NAMES)) {
[17:42:08.159]                   name <- removed[[kk]]
[17:42:08.159]                   NAME <- NAMES[[kk]]
[17:42:08.159]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:08.159]                     next
[17:42:08.159]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:08.159]                 }
[17:42:08.159]                 if (length(args) > 0) 
[17:42:08.159]                   base::do.call(base::Sys.setenv, args = args)
[17:42:08.159]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:08.159]             }
[17:42:08.159]             else {
[17:42:08.159]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:08.159]             }
[17:42:08.159]             {
[17:42:08.159]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:08.159]                   0L) {
[17:42:08.159]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:08.159]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:08.159]                   base::options(opts)
[17:42:08.159]                 }
[17:42:08.159]                 {
[17:42:08.159]                   {
[17:42:08.159]                     NULL
[17:42:08.159]                     RNGkind("Mersenne-Twister")
[17:42:08.159]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:08.159]                       inherits = FALSE)
[17:42:08.159]                   }
[17:42:08.159]                   options(future.plan = NULL)
[17:42:08.159]                   if (is.na(NA_character_)) 
[17:42:08.159]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:08.159]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:08.159]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:08.159]                   {
[17:42:08.159]                     future <- SequentialFuture(..., envir = envir)
[17:42:08.159]                     if (!future$lazy) 
[17:42:08.159]                       future <- run(future)
[17:42:08.159]                     invisible(future)
[17:42:08.159]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:08.159]                 }
[17:42:08.159]             }
[17:42:08.159]         }
[17:42:08.159]     })
[17:42:08.159]     if (TRUE) {
[17:42:08.159]         base::sink(type = "output", split = FALSE)
[17:42:08.159]         if (TRUE) {
[17:42:08.159]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:08.159]         }
[17:42:08.159]         else {
[17:42:08.159]             ...future.result["stdout"] <- base::list(NULL)
[17:42:08.159]         }
[17:42:08.159]         base::close(...future.stdout)
[17:42:08.159]         ...future.stdout <- NULL
[17:42:08.159]     }
[17:42:08.159]     ...future.result$conditions <- ...future.conditions
[17:42:08.159]     ...future.result$finished <- base::Sys.time()
[17:42:08.159]     ...future.result
[17:42:08.159] }
[17:42:08.160] plan(): Setting new future strategy stack:
[17:42:08.161] List of future strategies:
[17:42:08.161] 1. sequential:
[17:42:08.161]    - args: function (..., envir = parent.frame())
[17:42:08.161]    - tweaked: FALSE
[17:42:08.161]    - call: NULL
[17:42:08.161] plan(): nbrOfWorkers() = 1
[17:42:08.162] plan(): Setting new future strategy stack:
[17:42:08.162] List of future strategies:
[17:42:08.162] 1. sequential:
[17:42:08.162]    - args: function (..., envir = parent.frame())
[17:42:08.162]    - tweaked: FALSE
[17:42:08.162]    - call: future::plan("sequential")
[17:42:08.162] plan(): nbrOfWorkers() = 1
[17:42:08.162] SequentialFuture started (and completed)
[17:42:08.162] - Launch lazy future ... done
[17:42:08.162] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[17:42:08.163] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[17:42:08.164] plan(): Setting new future strategy stack:
[17:42:08.164] List of future strategies:
[17:42:08.164] 1. FutureStrategy:
[17:42:08.164]    - args: function (..., envir = parent.frame())
[17:42:08.164]    - tweaked: FALSE
[17:42:08.164]    - call: future::plan(oplan)
[17:42:08.178] plan(): nbrOfWorkers() = 1
> 
