
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:13:00.763] plan(): Setting new future strategy stack:
[16:13:00.764] List of future strategies:
[16:13:00.764] 1. sequential:
[16:13:00.764]    - args: function (..., envir = parent.frame())
[16:13:00.764]    - tweaked: FALSE
[16:13:00.764]    - call: future::plan("sequential")
[16:13:00.776] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[16:13:00.788] plan(): Setting new future strategy stack:
[16:13:00.789] List of future strategies:
[16:13:00.789] 1. multisession:
[16:13:00.789]    - args: function (..., workers = 2L, envir = parent.frame())
[16:13:00.789]    - tweaked: TRUE
[16:13:00.789]    - call: plan(multisession, workers = 2L)
[16:13:00.799] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:13:00.799] multisession:
[16:13:00.799] - args: function (..., workers = 2L, envir = parent.frame())
[16:13:00.799] - tweaked: TRUE
[16:13:00.799] - call: plan(multisession, workers = 2L)
[16:13:00.801] getGlobalsAndPackages() ...
[16:13:00.801] Not searching for globals
[16:13:00.801] - globals: [0] <none>
[16:13:00.801] getGlobalsAndPackages() ... DONE
[16:13:00.802] [local output] makeClusterPSOCK() ...
[16:13:00.828] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:13:00.833] [local output] Base port: 11713
[16:13:00.833] [local output] Getting setup options for 2 cluster nodes ...
[16:13:00.833] [local output]  - Node 1 of 2 ...
[16:13:00.834] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:00.835] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmONUSL/worker.rank=1.parallelly.parent=86708.152b45dfe2e5c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpmONUSL/worker.rank=1.parallelly.parent=86708.152b45dfe2e5c.pid")'’
[16:13:01.022] - Possible to infer worker's PID: TRUE
[16:13:01.023] [local output] Rscript port: 11713

[16:13:01.023] [local output]  - Node 2 of 2 ...
[16:13:01.023] [local output] localMachine=TRUE => revtunnel=FALSE

[16:13:01.024] [local output] Rscript port: 11713

[16:13:01.024] [local output] Getting setup options for 2 cluster nodes ... done
[16:13:01.025] [local output]  - Parallel setup requested for some PSOCK nodes
[16:13:01.025] [local output] Setting up PSOCK nodes in parallel
[16:13:01.025] List of 36
[16:13:01.025]  $ worker          : chr "localhost"
[16:13:01.025]   ..- attr(*, "localhost")= logi TRUE
[16:13:01.025]  $ master          : chr "localhost"
[16:13:01.025]  $ port            : int 11713
[16:13:01.025]  $ connectTimeout  : num 120
[16:13:01.025]  $ timeout         : num 2592000
[16:13:01.025]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:13:01.025]  $ homogeneous     : logi TRUE
[16:13:01.025]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:13:01.025]  $ rscript_envs    : NULL
[16:13:01.025]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:13:01.025]  $ rscript_startup : NULL
[16:13:01.025]  $ rscript_sh      : chr "sh"
[16:13:01.025]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:01.025]  $ methods         : logi TRUE
[16:13:01.025]  $ socketOptions   : chr "no-delay"
[16:13:01.025]  $ useXDR          : logi FALSE
[16:13:01.025]  $ outfile         : chr "/dev/null"
[16:13:01.025]  $ renice          : int NA
[16:13:01.025]  $ rshcmd          : NULL
[16:13:01.025]  $ user            : chr(0) 
[16:13:01.025]  $ revtunnel       : logi FALSE
[16:13:01.025]  $ rshlogfile      : NULL
[16:13:01.025]  $ rshopts         : chr(0) 
[16:13:01.025]  $ rank            : int 1
[16:13:01.025]  $ manual          : logi FALSE
[16:13:01.025]  $ dryrun          : logi FALSE
[16:13:01.025]  $ quiet           : logi FALSE
[16:13:01.025]  $ setup_strategy  : chr "parallel"
[16:13:01.025]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:01.025]  $ pidfile         : chr "/tmp/RtmpmONUSL/worker.rank=1.parallelly.parent=86708.152b45dfe2e5c.pid"
[16:13:01.025]  $ rshcmd_label    : NULL
[16:13:01.025]  $ rsh_call        : NULL
[16:13:01.025]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:13:01.025]  $ localMachine    : logi TRUE
[16:13:01.025]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:13:01.025]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:13:01.025]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:13:01.025]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:13:01.025]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:13:01.025]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:13:01.025]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:13:01.025]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:13:01.025]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:13:01.025]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:13:01.025]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:13:01.025]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:13:01.025]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:13:01.025]  $ arguments       :List of 28
[16:13:01.025]   ..$ worker          : chr "localhost"
[16:13:01.025]   ..$ master          : NULL
[16:13:01.025]   ..$ port            : int 11713
[16:13:01.025]   ..$ connectTimeout  : num 120
[16:13:01.025]   ..$ timeout         : num 2592000
[16:13:01.025]   ..$ rscript         : NULL
[16:13:01.025]   ..$ homogeneous     : NULL
[16:13:01.025]   ..$ rscript_args    : NULL
[16:13:01.025]   ..$ rscript_envs    : NULL
[16:13:01.025]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:13:01.025]   ..$ rscript_startup : NULL
[16:13:01.025]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:13:01.025]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:13:01.025]   ..$ methods         : logi TRUE
[16:13:01.025]   ..$ socketOptions   : chr "no-delay"
[16:13:01.025]   ..$ useXDR          : logi FALSE
[16:13:01.025]   ..$ outfile         : chr "/dev/null"
[16:13:01.025]   ..$ renice          : int NA
[16:13:01.025]   ..$ rshcmd          : NULL
[16:13:01.025]   ..$ user            : NULL
[16:13:01.025]   ..$ revtunnel       : logi NA
[16:13:01.025]   ..$ rshlogfile      : NULL
[16:13:01.025]   ..$ rshopts         : NULL
[16:13:01.025]   ..$ rank            : int 1
[16:13:01.025]   ..$ manual          : logi FALSE
[16:13:01.025]   ..$ dryrun          : logi FALSE
[16:13:01.025]   ..$ quiet           : logi FALSE
[16:13:01.025]   ..$ setup_strategy  : chr "parallel"
[16:13:01.025]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:13:01.044] [local output] System call to launch all workers:
[16:13:01.044] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpmONUSL/worker.rank=1.parallelly.parent=86708.152b45dfe2e5c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11713 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:13:01.044] [local output] Starting PSOCK main server
[16:13:01.046] [local output] Workers launched
[16:13:01.046] [local output] Waiting for workers to connect back
[16:13:01.046]  - [local output] 0 workers out of 2 ready
[16:13:01.293]  - [local output] 0 workers out of 2 ready
[16:13:01.294]  - [local output] 1 workers out of 2 ready
[16:13:01.295]  - [local output] 1 workers out of 2 ready
[16:13:01.296]  - [local output] 2 workers out of 2 ready
[16:13:01.296] [local output] Launching of workers completed
[16:13:01.296] [local output] Collecting session information from workers
[16:13:01.297] [local output]  - Worker #1 of 2
[16:13:01.297] [local output]  - Worker #2 of 2
[16:13:01.297] [local output] makeClusterPSOCK() ... done
[16:13:01.311] Packages needed by the future expression (n = 0): <none>
[16:13:01.311] Packages needed by future strategies (n = 0): <none>
[16:13:01.312] {
[16:13:01.312]     {
[16:13:01.312]         {
[16:13:01.312]             ...future.startTime <- base::Sys.time()
[16:13:01.312]             {
[16:13:01.312]                 {
[16:13:01.312]                   {
[16:13:01.312]                     {
[16:13:01.312]                       base::local({
[16:13:01.312]                         has_future <- base::requireNamespace("future", 
[16:13:01.312]                           quietly = TRUE)
[16:13:01.312]                         if (has_future) {
[16:13:01.312]                           ns <- base::getNamespace("future")
[16:13:01.312]                           version <- ns[[".package"]][["version"]]
[16:13:01.312]                           if (is.null(version)) 
[16:13:01.312]                             version <- utils::packageVersion("future")
[16:13:01.312]                         }
[16:13:01.312]                         else {
[16:13:01.312]                           version <- NULL
[16:13:01.312]                         }
[16:13:01.312]                         if (!has_future || version < "1.8.0") {
[16:13:01.312]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.312]                             "", base::R.version$version.string), 
[16:13:01.312]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.312]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.312]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.312]                               "release", "version")], collapse = " "), 
[16:13:01.312]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.312]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.312]                             info)
[16:13:01.312]                           info <- base::paste(info, collapse = "; ")
[16:13:01.312]                           if (!has_future) {
[16:13:01.312]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.312]                               info)
[16:13:01.312]                           }
[16:13:01.312]                           else {
[16:13:01.312]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.312]                               info, version)
[16:13:01.312]                           }
[16:13:01.312]                           base::stop(msg)
[16:13:01.312]                         }
[16:13:01.312]                       })
[16:13:01.312]                     }
[16:13:01.312]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.312]                     base::options(mc.cores = 1L)
[16:13:01.312]                   }
[16:13:01.312]                   options(future.plan = NULL)
[16:13:01.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.312]                 }
[16:13:01.312]                 ...future.workdir <- getwd()
[16:13:01.312]             }
[16:13:01.312]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.312]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.312]         }
[16:13:01.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.312]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.312]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.312]             base::names(...future.oldOptions))
[16:13:01.312]     }
[16:13:01.312]     if (FALSE) {
[16:13:01.312]     }
[16:13:01.312]     else {
[16:13:01.312]         if (TRUE) {
[16:13:01.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.312]                 open = "w")
[16:13:01.312]         }
[16:13:01.312]         else {
[16:13:01.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.312]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.312]         }
[16:13:01.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.312]             base::sink(type = "output", split = FALSE)
[16:13:01.312]             base::close(...future.stdout)
[16:13:01.312]         }, add = TRUE)
[16:13:01.312]     }
[16:13:01.312]     ...future.frame <- base::sys.nframe()
[16:13:01.312]     ...future.conditions <- base::list()
[16:13:01.312]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.312]     if (FALSE) {
[16:13:01.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.312]     }
[16:13:01.312]     ...future.result <- base::tryCatch({
[16:13:01.312]         base::withCallingHandlers({
[16:13:01.312]             ...future.value <- base::withVisible(base::local({
[16:13:01.312]                 ...future.makeSendCondition <- local({
[16:13:01.312]                   sendCondition <- NULL
[16:13:01.312]                   function(frame = 1L) {
[16:13:01.312]                     if (is.function(sendCondition)) 
[16:13:01.312]                       return(sendCondition)
[16:13:01.312]                     ns <- getNamespace("parallel")
[16:13:01.312]                     if (exists("sendData", mode = "function", 
[16:13:01.312]                       envir = ns)) {
[16:13:01.312]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.312]                         envir = ns)
[16:13:01.312]                       envir <- sys.frame(frame)
[16:13:01.312]                       master <- NULL
[16:13:01.312]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.312]                         !identical(envir, emptyenv())) {
[16:13:01.312]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.312]                           inherits = FALSE)) {
[16:13:01.312]                           master <- get("master", mode = "list", 
[16:13:01.312]                             envir = envir, inherits = FALSE)
[16:13:01.312]                           if (inherits(master, c("SOCKnode", 
[16:13:01.312]                             "SOCK0node"))) {
[16:13:01.312]                             sendCondition <<- function(cond) {
[16:13:01.312]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.312]                                 success = TRUE)
[16:13:01.312]                               parallel_sendData(master, data)
[16:13:01.312]                             }
[16:13:01.312]                             return(sendCondition)
[16:13:01.312]                           }
[16:13:01.312]                         }
[16:13:01.312]                         frame <- frame + 1L
[16:13:01.312]                         envir <- sys.frame(frame)
[16:13:01.312]                       }
[16:13:01.312]                     }
[16:13:01.312]                     sendCondition <<- function(cond) NULL
[16:13:01.312]                   }
[16:13:01.312]                 })
[16:13:01.312]                 withCallingHandlers({
[16:13:01.312]                   NA
[16:13:01.312]                 }, immediateCondition = function(cond) {
[16:13:01.312]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.312]                   sendCondition(cond)
[16:13:01.312]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.312]                   {
[16:13:01.312]                     inherits <- base::inherits
[16:13:01.312]                     invokeRestart <- base::invokeRestart
[16:13:01.312]                     is.null <- base::is.null
[16:13:01.312]                     muffled <- FALSE
[16:13:01.312]                     if (inherits(cond, "message")) {
[16:13:01.312]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.312]                       if (muffled) 
[16:13:01.312]                         invokeRestart("muffleMessage")
[16:13:01.312]                     }
[16:13:01.312]                     else if (inherits(cond, "warning")) {
[16:13:01.312]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.312]                       if (muffled) 
[16:13:01.312]                         invokeRestart("muffleWarning")
[16:13:01.312]                     }
[16:13:01.312]                     else if (inherits(cond, "condition")) {
[16:13:01.312]                       if (!is.null(pattern)) {
[16:13:01.312]                         computeRestarts <- base::computeRestarts
[16:13:01.312]                         grepl <- base::grepl
[16:13:01.312]                         restarts <- computeRestarts(cond)
[16:13:01.312]                         for (restart in restarts) {
[16:13:01.312]                           name <- restart$name
[16:13:01.312]                           if (is.null(name)) 
[16:13:01.312]                             next
[16:13:01.312]                           if (!grepl(pattern, name)) 
[16:13:01.312]                             next
[16:13:01.312]                           invokeRestart(restart)
[16:13:01.312]                           muffled <- TRUE
[16:13:01.312]                           break
[16:13:01.312]                         }
[16:13:01.312]                       }
[16:13:01.312]                     }
[16:13:01.312]                     invisible(muffled)
[16:13:01.312]                   }
[16:13:01.312]                   muffleCondition(cond)
[16:13:01.312]                 })
[16:13:01.312]             }))
[16:13:01.312]             future::FutureResult(value = ...future.value$value, 
[16:13:01.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.312]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.312]                     ...future.globalenv.names))
[16:13:01.312]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.312]         }, condition = base::local({
[16:13:01.312]             c <- base::c
[16:13:01.312]             inherits <- base::inherits
[16:13:01.312]             invokeRestart <- base::invokeRestart
[16:13:01.312]             length <- base::length
[16:13:01.312]             list <- base::list
[16:13:01.312]             seq.int <- base::seq.int
[16:13:01.312]             signalCondition <- base::signalCondition
[16:13:01.312]             sys.calls <- base::sys.calls
[16:13:01.312]             `[[` <- base::`[[`
[16:13:01.312]             `+` <- base::`+`
[16:13:01.312]             `<<-` <- base::`<<-`
[16:13:01.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.312]                   3L)]
[16:13:01.312]             }
[16:13:01.312]             function(cond) {
[16:13:01.312]                 is_error <- inherits(cond, "error")
[16:13:01.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.312]                   NULL)
[16:13:01.312]                 if (is_error) {
[16:13:01.312]                   sessionInformation <- function() {
[16:13:01.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.312]                       search = base::search(), system = base::Sys.info())
[16:13:01.312]                   }
[16:13:01.312]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.312]                     cond$call), session = sessionInformation(), 
[16:13:01.312]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.312]                   signalCondition(cond)
[16:13:01.312]                 }
[16:13:01.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.312]                 "immediateCondition"))) {
[16:13:01.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.312]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.312]                   if (TRUE && !signal) {
[16:13:01.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.312]                     {
[16:13:01.312]                       inherits <- base::inherits
[16:13:01.312]                       invokeRestart <- base::invokeRestart
[16:13:01.312]                       is.null <- base::is.null
[16:13:01.312]                       muffled <- FALSE
[16:13:01.312]                       if (inherits(cond, "message")) {
[16:13:01.312]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.312]                         if (muffled) 
[16:13:01.312]                           invokeRestart("muffleMessage")
[16:13:01.312]                       }
[16:13:01.312]                       else if (inherits(cond, "warning")) {
[16:13:01.312]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.312]                         if (muffled) 
[16:13:01.312]                           invokeRestart("muffleWarning")
[16:13:01.312]                       }
[16:13:01.312]                       else if (inherits(cond, "condition")) {
[16:13:01.312]                         if (!is.null(pattern)) {
[16:13:01.312]                           computeRestarts <- base::computeRestarts
[16:13:01.312]                           grepl <- base::grepl
[16:13:01.312]                           restarts <- computeRestarts(cond)
[16:13:01.312]                           for (restart in restarts) {
[16:13:01.312]                             name <- restart$name
[16:13:01.312]                             if (is.null(name)) 
[16:13:01.312]                               next
[16:13:01.312]                             if (!grepl(pattern, name)) 
[16:13:01.312]                               next
[16:13:01.312]                             invokeRestart(restart)
[16:13:01.312]                             muffled <- TRUE
[16:13:01.312]                             break
[16:13:01.312]                           }
[16:13:01.312]                         }
[16:13:01.312]                       }
[16:13:01.312]                       invisible(muffled)
[16:13:01.312]                     }
[16:13:01.312]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.312]                   }
[16:13:01.312]                 }
[16:13:01.312]                 else {
[16:13:01.312]                   if (TRUE) {
[16:13:01.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.312]                     {
[16:13:01.312]                       inherits <- base::inherits
[16:13:01.312]                       invokeRestart <- base::invokeRestart
[16:13:01.312]                       is.null <- base::is.null
[16:13:01.312]                       muffled <- FALSE
[16:13:01.312]                       if (inherits(cond, "message")) {
[16:13:01.312]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.312]                         if (muffled) 
[16:13:01.312]                           invokeRestart("muffleMessage")
[16:13:01.312]                       }
[16:13:01.312]                       else if (inherits(cond, "warning")) {
[16:13:01.312]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.312]                         if (muffled) 
[16:13:01.312]                           invokeRestart("muffleWarning")
[16:13:01.312]                       }
[16:13:01.312]                       else if (inherits(cond, "condition")) {
[16:13:01.312]                         if (!is.null(pattern)) {
[16:13:01.312]                           computeRestarts <- base::computeRestarts
[16:13:01.312]                           grepl <- base::grepl
[16:13:01.312]                           restarts <- computeRestarts(cond)
[16:13:01.312]                           for (restart in restarts) {
[16:13:01.312]                             name <- restart$name
[16:13:01.312]                             if (is.null(name)) 
[16:13:01.312]                               next
[16:13:01.312]                             if (!grepl(pattern, name)) 
[16:13:01.312]                               next
[16:13:01.312]                             invokeRestart(restart)
[16:13:01.312]                             muffled <- TRUE
[16:13:01.312]                             break
[16:13:01.312]                           }
[16:13:01.312]                         }
[16:13:01.312]                       }
[16:13:01.312]                       invisible(muffled)
[16:13:01.312]                     }
[16:13:01.312]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.312]                   }
[16:13:01.312]                 }
[16:13:01.312]             }
[16:13:01.312]         }))
[16:13:01.312]     }, error = function(ex) {
[16:13:01.312]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.312]                 ...future.rng), started = ...future.startTime, 
[16:13:01.312]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.312]             version = "1.8"), class = "FutureResult")
[16:13:01.312]     }, finally = {
[16:13:01.312]         if (!identical(...future.workdir, getwd())) 
[16:13:01.312]             setwd(...future.workdir)
[16:13:01.312]         {
[16:13:01.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.312]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.312]             }
[16:13:01.312]             base::options(...future.oldOptions)
[16:13:01.312]             if (.Platform$OS.type == "windows") {
[16:13:01.312]                 old_names <- names(...future.oldEnvVars)
[16:13:01.312]                 envs <- base::Sys.getenv()
[16:13:01.312]                 names <- names(envs)
[16:13:01.312]                 common <- intersect(names, old_names)
[16:13:01.312]                 added <- setdiff(names, old_names)
[16:13:01.312]                 removed <- setdiff(old_names, names)
[16:13:01.312]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.312]                   envs[common]]
[16:13:01.312]                 NAMES <- toupper(changed)
[16:13:01.312]                 args <- list()
[16:13:01.312]                 for (kk in seq_along(NAMES)) {
[16:13:01.312]                   name <- changed[[kk]]
[16:13:01.312]                   NAME <- NAMES[[kk]]
[16:13:01.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.312]                     next
[16:13:01.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.312]                 }
[16:13:01.312]                 NAMES <- toupper(added)
[16:13:01.312]                 for (kk in seq_along(NAMES)) {
[16:13:01.312]                   name <- added[[kk]]
[16:13:01.312]                   NAME <- NAMES[[kk]]
[16:13:01.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.312]                     next
[16:13:01.312]                   args[[name]] <- ""
[16:13:01.312]                 }
[16:13:01.312]                 NAMES <- toupper(removed)
[16:13:01.312]                 for (kk in seq_along(NAMES)) {
[16:13:01.312]                   name <- removed[[kk]]
[16:13:01.312]                   NAME <- NAMES[[kk]]
[16:13:01.312]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.312]                     next
[16:13:01.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.312]                 }
[16:13:01.312]                 if (length(args) > 0) 
[16:13:01.312]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.312]             }
[16:13:01.312]             else {
[16:13:01.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.312]             }
[16:13:01.312]             {
[16:13:01.312]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.312]                   0L) {
[16:13:01.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.312]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.312]                   base::options(opts)
[16:13:01.312]                 }
[16:13:01.312]                 {
[16:13:01.312]                   {
[16:13:01.312]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.312]                     NULL
[16:13:01.312]                   }
[16:13:01.312]                   options(future.plan = NULL)
[16:13:01.312]                   if (is.na(NA_character_)) 
[16:13:01.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.312]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.312]                     envir = parent.frame()) 
[16:13:01.312]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.312]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.312]                 }
[16:13:01.312]             }
[16:13:01.312]         }
[16:13:01.312]     })
[16:13:01.312]     if (TRUE) {
[16:13:01.312]         base::sink(type = "output", split = FALSE)
[16:13:01.312]         if (TRUE) {
[16:13:01.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.312]         }
[16:13:01.312]         else {
[16:13:01.312]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.312]         }
[16:13:01.312]         base::close(...future.stdout)
[16:13:01.312]         ...future.stdout <- NULL
[16:13:01.312]     }
[16:13:01.312]     ...future.result$conditions <- ...future.conditions
[16:13:01.312]     ...future.result$finished <- base::Sys.time()
[16:13:01.312]     ...future.result
[16:13:01.312] }
[16:13:01.382] MultisessionFuture started
[16:13:01.383] result() for ClusterFuture ...
[16:13:01.383] receiveMessageFromWorker() for ClusterFuture ...
[16:13:01.383] - Validating connection of MultisessionFuture
[16:13:01.407] - received message: FutureResult
[16:13:01.407] - Received FutureResult
[16:13:01.410] - Erased future from FutureRegistry
[16:13:01.411] result() for ClusterFuture ...
[16:13:01.411] - result already collected: FutureResult
[16:13:01.411] result() for ClusterFuture ... done
[16:13:01.411] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:01.411] result() for ClusterFuture ... done
[16:13:01.411] result() for ClusterFuture ...
[16:13:01.411] - result already collected: FutureResult
[16:13:01.411] result() for ClusterFuture ... done
[16:13:01.412] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:13:01.412] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: d0291e77-66bf-4023-74d2-91e696ca5c5c
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[16:13:01.412] getGlobalsAndPackages() ...
[16:13:01.413] Searching for globals...
[16:13:01.420] - globals found: [2] ‘{’, ‘:::’
[16:13:01.421] Searching for globals ... DONE
[16:13:01.421] Resolving globals: FALSE
[16:13:01.421] 
[16:13:01.422] 
[16:13:01.422] getGlobalsAndPackages() ... DONE
[16:13:01.422] run() for ‘Future’ ...
[16:13:01.422] - state: ‘created’
[16:13:01.423] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.434] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.434] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.434]   - Field: ‘node’
[16:13:01.434]   - Field: ‘label’
[16:13:01.435]   - Field: ‘local’
[16:13:01.435]   - Field: ‘owner’
[16:13:01.435]   - Field: ‘envir’
[16:13:01.435]   - Field: ‘workers’
[16:13:01.435]   - Field: ‘packages’
[16:13:01.435]   - Field: ‘gc’
[16:13:01.435]   - Field: ‘conditions’
[16:13:01.435]   - Field: ‘persistent’
[16:13:01.435]   - Field: ‘expr’
[16:13:01.435]   - Field: ‘uuid’
[16:13:01.436]   - Field: ‘seed’
[16:13:01.436]   - Field: ‘version’
[16:13:01.436]   - Field: ‘result’
[16:13:01.436]   - Field: ‘asynchronous’
[16:13:01.436]   - Field: ‘calls’
[16:13:01.436]   - Field: ‘globals’
[16:13:01.436]   - Field: ‘stdout’
[16:13:01.436]   - Field: ‘earlySignal’
[16:13:01.436]   - Field: ‘lazy’
[16:13:01.437]   - Field: ‘state’
[16:13:01.437] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.437] - Launch lazy future ...
[16:13:01.437] Packages needed by the future expression (n = 0): <none>
[16:13:01.437] Packages needed by future strategies (n = 0): <none>
[16:13:01.438] {
[16:13:01.438]     {
[16:13:01.438]         {
[16:13:01.438]             ...future.startTime <- base::Sys.time()
[16:13:01.438]             {
[16:13:01.438]                 {
[16:13:01.438]                   {
[16:13:01.438]                     {
[16:13:01.438]                       base::local({
[16:13:01.438]                         has_future <- base::requireNamespace("future", 
[16:13:01.438]                           quietly = TRUE)
[16:13:01.438]                         if (has_future) {
[16:13:01.438]                           ns <- base::getNamespace("future")
[16:13:01.438]                           version <- ns[[".package"]][["version"]]
[16:13:01.438]                           if (is.null(version)) 
[16:13:01.438]                             version <- utils::packageVersion("future")
[16:13:01.438]                         }
[16:13:01.438]                         else {
[16:13:01.438]                           version <- NULL
[16:13:01.438]                         }
[16:13:01.438]                         if (!has_future || version < "1.8.0") {
[16:13:01.438]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.438]                             "", base::R.version$version.string), 
[16:13:01.438]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.438]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.438]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.438]                               "release", "version")], collapse = " "), 
[16:13:01.438]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.438]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.438]                             info)
[16:13:01.438]                           info <- base::paste(info, collapse = "; ")
[16:13:01.438]                           if (!has_future) {
[16:13:01.438]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.438]                               info)
[16:13:01.438]                           }
[16:13:01.438]                           else {
[16:13:01.438]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.438]                               info, version)
[16:13:01.438]                           }
[16:13:01.438]                           base::stop(msg)
[16:13:01.438]                         }
[16:13:01.438]                       })
[16:13:01.438]                     }
[16:13:01.438]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.438]                     base::options(mc.cores = 1L)
[16:13:01.438]                   }
[16:13:01.438]                   options(future.plan = NULL)
[16:13:01.438]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.438]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.438]                 }
[16:13:01.438]                 ...future.workdir <- getwd()
[16:13:01.438]             }
[16:13:01.438]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.438]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.438]         }
[16:13:01.438]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.438]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.438]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.438]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.438]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.438]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.438]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.438]             base::names(...future.oldOptions))
[16:13:01.438]     }
[16:13:01.438]     if (FALSE) {
[16:13:01.438]     }
[16:13:01.438]     else {
[16:13:01.438]         if (TRUE) {
[16:13:01.438]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.438]                 open = "w")
[16:13:01.438]         }
[16:13:01.438]         else {
[16:13:01.438]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.438]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.438]         }
[16:13:01.438]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.438]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.438]             base::sink(type = "output", split = FALSE)
[16:13:01.438]             base::close(...future.stdout)
[16:13:01.438]         }, add = TRUE)
[16:13:01.438]     }
[16:13:01.438]     ...future.frame <- base::sys.nframe()
[16:13:01.438]     ...future.conditions <- base::list()
[16:13:01.438]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.438]     if (FALSE) {
[16:13:01.438]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.438]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.438]     }
[16:13:01.438]     ...future.result <- base::tryCatch({
[16:13:01.438]         base::withCallingHandlers({
[16:13:01.438]             ...future.value <- base::withVisible(base::local({
[16:13:01.438]                 ...future.makeSendCondition <- local({
[16:13:01.438]                   sendCondition <- NULL
[16:13:01.438]                   function(frame = 1L) {
[16:13:01.438]                     if (is.function(sendCondition)) 
[16:13:01.438]                       return(sendCondition)
[16:13:01.438]                     ns <- getNamespace("parallel")
[16:13:01.438]                     if (exists("sendData", mode = "function", 
[16:13:01.438]                       envir = ns)) {
[16:13:01.438]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.438]                         envir = ns)
[16:13:01.438]                       envir <- sys.frame(frame)
[16:13:01.438]                       master <- NULL
[16:13:01.438]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.438]                         !identical(envir, emptyenv())) {
[16:13:01.438]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.438]                           inherits = FALSE)) {
[16:13:01.438]                           master <- get("master", mode = "list", 
[16:13:01.438]                             envir = envir, inherits = FALSE)
[16:13:01.438]                           if (inherits(master, c("SOCKnode", 
[16:13:01.438]                             "SOCK0node"))) {
[16:13:01.438]                             sendCondition <<- function(cond) {
[16:13:01.438]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.438]                                 success = TRUE)
[16:13:01.438]                               parallel_sendData(master, data)
[16:13:01.438]                             }
[16:13:01.438]                             return(sendCondition)
[16:13:01.438]                           }
[16:13:01.438]                         }
[16:13:01.438]                         frame <- frame + 1L
[16:13:01.438]                         envir <- sys.frame(frame)
[16:13:01.438]                       }
[16:13:01.438]                     }
[16:13:01.438]                     sendCondition <<- function(cond) NULL
[16:13:01.438]                   }
[16:13:01.438]                 })
[16:13:01.438]                 withCallingHandlers({
[16:13:01.438]                   {
[16:13:01.438]                     future:::session_uuid(attributes = TRUE)
[16:13:01.438]                   }
[16:13:01.438]                 }, immediateCondition = function(cond) {
[16:13:01.438]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.438]                   sendCondition(cond)
[16:13:01.438]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.438]                   {
[16:13:01.438]                     inherits <- base::inherits
[16:13:01.438]                     invokeRestart <- base::invokeRestart
[16:13:01.438]                     is.null <- base::is.null
[16:13:01.438]                     muffled <- FALSE
[16:13:01.438]                     if (inherits(cond, "message")) {
[16:13:01.438]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.438]                       if (muffled) 
[16:13:01.438]                         invokeRestart("muffleMessage")
[16:13:01.438]                     }
[16:13:01.438]                     else if (inherits(cond, "warning")) {
[16:13:01.438]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.438]                       if (muffled) 
[16:13:01.438]                         invokeRestart("muffleWarning")
[16:13:01.438]                     }
[16:13:01.438]                     else if (inherits(cond, "condition")) {
[16:13:01.438]                       if (!is.null(pattern)) {
[16:13:01.438]                         computeRestarts <- base::computeRestarts
[16:13:01.438]                         grepl <- base::grepl
[16:13:01.438]                         restarts <- computeRestarts(cond)
[16:13:01.438]                         for (restart in restarts) {
[16:13:01.438]                           name <- restart$name
[16:13:01.438]                           if (is.null(name)) 
[16:13:01.438]                             next
[16:13:01.438]                           if (!grepl(pattern, name)) 
[16:13:01.438]                             next
[16:13:01.438]                           invokeRestart(restart)
[16:13:01.438]                           muffled <- TRUE
[16:13:01.438]                           break
[16:13:01.438]                         }
[16:13:01.438]                       }
[16:13:01.438]                     }
[16:13:01.438]                     invisible(muffled)
[16:13:01.438]                   }
[16:13:01.438]                   muffleCondition(cond)
[16:13:01.438]                 })
[16:13:01.438]             }))
[16:13:01.438]             future::FutureResult(value = ...future.value$value, 
[16:13:01.438]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.438]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.438]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.438]                     ...future.globalenv.names))
[16:13:01.438]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.438]         }, condition = base::local({
[16:13:01.438]             c <- base::c
[16:13:01.438]             inherits <- base::inherits
[16:13:01.438]             invokeRestart <- base::invokeRestart
[16:13:01.438]             length <- base::length
[16:13:01.438]             list <- base::list
[16:13:01.438]             seq.int <- base::seq.int
[16:13:01.438]             signalCondition <- base::signalCondition
[16:13:01.438]             sys.calls <- base::sys.calls
[16:13:01.438]             `[[` <- base::`[[`
[16:13:01.438]             `+` <- base::`+`
[16:13:01.438]             `<<-` <- base::`<<-`
[16:13:01.438]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.438]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.438]                   3L)]
[16:13:01.438]             }
[16:13:01.438]             function(cond) {
[16:13:01.438]                 is_error <- inherits(cond, "error")
[16:13:01.438]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.438]                   NULL)
[16:13:01.438]                 if (is_error) {
[16:13:01.438]                   sessionInformation <- function() {
[16:13:01.438]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.438]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.438]                       search = base::search(), system = base::Sys.info())
[16:13:01.438]                   }
[16:13:01.438]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.438]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.438]                     cond$call), session = sessionInformation(), 
[16:13:01.438]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.438]                   signalCondition(cond)
[16:13:01.438]                 }
[16:13:01.438]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.438]                 "immediateCondition"))) {
[16:13:01.438]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.438]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.438]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.438]                   if (TRUE && !signal) {
[16:13:01.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.438]                     {
[16:13:01.438]                       inherits <- base::inherits
[16:13:01.438]                       invokeRestart <- base::invokeRestart
[16:13:01.438]                       is.null <- base::is.null
[16:13:01.438]                       muffled <- FALSE
[16:13:01.438]                       if (inherits(cond, "message")) {
[16:13:01.438]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.438]                         if (muffled) 
[16:13:01.438]                           invokeRestart("muffleMessage")
[16:13:01.438]                       }
[16:13:01.438]                       else if (inherits(cond, "warning")) {
[16:13:01.438]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.438]                         if (muffled) 
[16:13:01.438]                           invokeRestart("muffleWarning")
[16:13:01.438]                       }
[16:13:01.438]                       else if (inherits(cond, "condition")) {
[16:13:01.438]                         if (!is.null(pattern)) {
[16:13:01.438]                           computeRestarts <- base::computeRestarts
[16:13:01.438]                           grepl <- base::grepl
[16:13:01.438]                           restarts <- computeRestarts(cond)
[16:13:01.438]                           for (restart in restarts) {
[16:13:01.438]                             name <- restart$name
[16:13:01.438]                             if (is.null(name)) 
[16:13:01.438]                               next
[16:13:01.438]                             if (!grepl(pattern, name)) 
[16:13:01.438]                               next
[16:13:01.438]                             invokeRestart(restart)
[16:13:01.438]                             muffled <- TRUE
[16:13:01.438]                             break
[16:13:01.438]                           }
[16:13:01.438]                         }
[16:13:01.438]                       }
[16:13:01.438]                       invisible(muffled)
[16:13:01.438]                     }
[16:13:01.438]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.438]                   }
[16:13:01.438]                 }
[16:13:01.438]                 else {
[16:13:01.438]                   if (TRUE) {
[16:13:01.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.438]                     {
[16:13:01.438]                       inherits <- base::inherits
[16:13:01.438]                       invokeRestart <- base::invokeRestart
[16:13:01.438]                       is.null <- base::is.null
[16:13:01.438]                       muffled <- FALSE
[16:13:01.438]                       if (inherits(cond, "message")) {
[16:13:01.438]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.438]                         if (muffled) 
[16:13:01.438]                           invokeRestart("muffleMessage")
[16:13:01.438]                       }
[16:13:01.438]                       else if (inherits(cond, "warning")) {
[16:13:01.438]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.438]                         if (muffled) 
[16:13:01.438]                           invokeRestart("muffleWarning")
[16:13:01.438]                       }
[16:13:01.438]                       else if (inherits(cond, "condition")) {
[16:13:01.438]                         if (!is.null(pattern)) {
[16:13:01.438]                           computeRestarts <- base::computeRestarts
[16:13:01.438]                           grepl <- base::grepl
[16:13:01.438]                           restarts <- computeRestarts(cond)
[16:13:01.438]                           for (restart in restarts) {
[16:13:01.438]                             name <- restart$name
[16:13:01.438]                             if (is.null(name)) 
[16:13:01.438]                               next
[16:13:01.438]                             if (!grepl(pattern, name)) 
[16:13:01.438]                               next
[16:13:01.438]                             invokeRestart(restart)
[16:13:01.438]                             muffled <- TRUE
[16:13:01.438]                             break
[16:13:01.438]                           }
[16:13:01.438]                         }
[16:13:01.438]                       }
[16:13:01.438]                       invisible(muffled)
[16:13:01.438]                     }
[16:13:01.438]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.438]                   }
[16:13:01.438]                 }
[16:13:01.438]             }
[16:13:01.438]         }))
[16:13:01.438]     }, error = function(ex) {
[16:13:01.438]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.438]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.438]                 ...future.rng), started = ...future.startTime, 
[16:13:01.438]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.438]             version = "1.8"), class = "FutureResult")
[16:13:01.438]     }, finally = {
[16:13:01.438]         if (!identical(...future.workdir, getwd())) 
[16:13:01.438]             setwd(...future.workdir)
[16:13:01.438]         {
[16:13:01.438]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.438]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.438]             }
[16:13:01.438]             base::options(...future.oldOptions)
[16:13:01.438]             if (.Platform$OS.type == "windows") {
[16:13:01.438]                 old_names <- names(...future.oldEnvVars)
[16:13:01.438]                 envs <- base::Sys.getenv()
[16:13:01.438]                 names <- names(envs)
[16:13:01.438]                 common <- intersect(names, old_names)
[16:13:01.438]                 added <- setdiff(names, old_names)
[16:13:01.438]                 removed <- setdiff(old_names, names)
[16:13:01.438]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.438]                   envs[common]]
[16:13:01.438]                 NAMES <- toupper(changed)
[16:13:01.438]                 args <- list()
[16:13:01.438]                 for (kk in seq_along(NAMES)) {
[16:13:01.438]                   name <- changed[[kk]]
[16:13:01.438]                   NAME <- NAMES[[kk]]
[16:13:01.438]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.438]                     next
[16:13:01.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.438]                 }
[16:13:01.438]                 NAMES <- toupper(added)
[16:13:01.438]                 for (kk in seq_along(NAMES)) {
[16:13:01.438]                   name <- added[[kk]]
[16:13:01.438]                   NAME <- NAMES[[kk]]
[16:13:01.438]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.438]                     next
[16:13:01.438]                   args[[name]] <- ""
[16:13:01.438]                 }
[16:13:01.438]                 NAMES <- toupper(removed)
[16:13:01.438]                 for (kk in seq_along(NAMES)) {
[16:13:01.438]                   name <- removed[[kk]]
[16:13:01.438]                   NAME <- NAMES[[kk]]
[16:13:01.438]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.438]                     next
[16:13:01.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.438]                 }
[16:13:01.438]                 if (length(args) > 0) 
[16:13:01.438]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.438]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.438]             }
[16:13:01.438]             else {
[16:13:01.438]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.438]             }
[16:13:01.438]             {
[16:13:01.438]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.438]                   0L) {
[16:13:01.438]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.438]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.438]                   base::options(opts)
[16:13:01.438]                 }
[16:13:01.438]                 {
[16:13:01.438]                   {
[16:13:01.438]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.438]                     NULL
[16:13:01.438]                   }
[16:13:01.438]                   options(future.plan = NULL)
[16:13:01.438]                   if (is.na(NA_character_)) 
[16:13:01.438]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.438]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.438]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.438]                     envir = parent.frame()) 
[16:13:01.438]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.438]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.438]                 }
[16:13:01.438]             }
[16:13:01.438]         }
[16:13:01.438]     })
[16:13:01.438]     if (TRUE) {
[16:13:01.438]         base::sink(type = "output", split = FALSE)
[16:13:01.438]         if (TRUE) {
[16:13:01.438]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.438]         }
[16:13:01.438]         else {
[16:13:01.438]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.438]         }
[16:13:01.438]         base::close(...future.stdout)
[16:13:01.438]         ...future.stdout <- NULL
[16:13:01.438]     }
[16:13:01.438]     ...future.result$conditions <- ...future.conditions
[16:13:01.438]     ...future.result$finished <- base::Sys.time()
[16:13:01.438]     ...future.result
[16:13:01.438] }
[16:13:01.441] MultisessionFuture started
[16:13:01.441] - Launch lazy future ... done
[16:13:01.441] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[16:13:01.442] result() for ClusterFuture ...
[16:13:01.442] receiveMessageFromWorker() for ClusterFuture ...
[16:13:01.442] - Validating connection of MultisessionFuture
[16:13:01.485] - received message: FutureResult
[16:13:01.485] - Received FutureResult
[16:13:01.485] - Erased future from FutureRegistry
[16:13:01.485] result() for ClusterFuture ...
[16:13:01.486] - result already collected: FutureResult
[16:13:01.486] result() for ClusterFuture ... done
[16:13:01.486] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:01.486] result() for ClusterFuture ... done
[16:13:01.486] result() for ClusterFuture ...
[16:13:01.486] - result already collected: FutureResult
[16:13:01.486] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 503c87bc-7924-8d50-6764-1a961f40988f
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[16:13:01.486] getGlobalsAndPackages() ...
[16:13:01.487] Searching for globals...
[16:13:01.488] - globals found: [2] ‘{’, ‘:::’
[16:13:01.488] Searching for globals ... DONE
[16:13:01.488] Resolving globals: FALSE
[16:13:01.488] 
[16:13:01.488] 
[16:13:01.488] getGlobalsAndPackages() ... DONE
[16:13:01.489] run() for ‘Future’ ...
[16:13:01.489] - state: ‘created’
[16:13:01.489] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.500] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.501] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.501]   - Field: ‘node’
[16:13:01.501]   - Field: ‘label’
[16:13:01.501]   - Field: ‘local’
[16:13:01.501]   - Field: ‘owner’
[16:13:01.504]   - Field: ‘envir’
[16:13:01.504]   - Field: ‘workers’
[16:13:01.504]   - Field: ‘packages’
[16:13:01.504]   - Field: ‘gc’
[16:13:01.504]   - Field: ‘conditions’
[16:13:01.504]   - Field: ‘persistent’
[16:13:01.504]   - Field: ‘expr’
[16:13:01.504]   - Field: ‘uuid’
[16:13:01.504]   - Field: ‘seed’
[16:13:01.504]   - Field: ‘version’
[16:13:01.505]   - Field: ‘result’
[16:13:01.505]   - Field: ‘asynchronous’
[16:13:01.505]   - Field: ‘calls’
[16:13:01.505]   - Field: ‘globals’
[16:13:01.505]   - Field: ‘stdout’
[16:13:01.505]   - Field: ‘earlySignal’
[16:13:01.505]   - Field: ‘lazy’
[16:13:01.505]   - Field: ‘state’
[16:13:01.505] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.505] - Launch lazy future ...
[16:13:01.506] Packages needed by the future expression (n = 0): <none>
[16:13:01.506] Packages needed by future strategies (n = 0): <none>
[16:13:01.506] {
[16:13:01.506]     {
[16:13:01.506]         {
[16:13:01.506]             ...future.startTime <- base::Sys.time()
[16:13:01.506]             {
[16:13:01.506]                 {
[16:13:01.506]                   {
[16:13:01.506]                     {
[16:13:01.506]                       base::local({
[16:13:01.506]                         has_future <- base::requireNamespace("future", 
[16:13:01.506]                           quietly = TRUE)
[16:13:01.506]                         if (has_future) {
[16:13:01.506]                           ns <- base::getNamespace("future")
[16:13:01.506]                           version <- ns[[".package"]][["version"]]
[16:13:01.506]                           if (is.null(version)) 
[16:13:01.506]                             version <- utils::packageVersion("future")
[16:13:01.506]                         }
[16:13:01.506]                         else {
[16:13:01.506]                           version <- NULL
[16:13:01.506]                         }
[16:13:01.506]                         if (!has_future || version < "1.8.0") {
[16:13:01.506]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.506]                             "", base::R.version$version.string), 
[16:13:01.506]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.506]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.506]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.506]                               "release", "version")], collapse = " "), 
[16:13:01.506]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.506]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.506]                             info)
[16:13:01.506]                           info <- base::paste(info, collapse = "; ")
[16:13:01.506]                           if (!has_future) {
[16:13:01.506]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.506]                               info)
[16:13:01.506]                           }
[16:13:01.506]                           else {
[16:13:01.506]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.506]                               info, version)
[16:13:01.506]                           }
[16:13:01.506]                           base::stop(msg)
[16:13:01.506]                         }
[16:13:01.506]                       })
[16:13:01.506]                     }
[16:13:01.506]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.506]                     base::options(mc.cores = 1L)
[16:13:01.506]                   }
[16:13:01.506]                   options(future.plan = NULL)
[16:13:01.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.506]                 }
[16:13:01.506]                 ...future.workdir <- getwd()
[16:13:01.506]             }
[16:13:01.506]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.506]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.506]         }
[16:13:01.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.506]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.506]             base::names(...future.oldOptions))
[16:13:01.506]     }
[16:13:01.506]     if (FALSE) {
[16:13:01.506]     }
[16:13:01.506]     else {
[16:13:01.506]         if (TRUE) {
[16:13:01.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.506]                 open = "w")
[16:13:01.506]         }
[16:13:01.506]         else {
[16:13:01.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.506]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.506]         }
[16:13:01.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.506]             base::sink(type = "output", split = FALSE)
[16:13:01.506]             base::close(...future.stdout)
[16:13:01.506]         }, add = TRUE)
[16:13:01.506]     }
[16:13:01.506]     ...future.frame <- base::sys.nframe()
[16:13:01.506]     ...future.conditions <- base::list()
[16:13:01.506]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.506]     if (FALSE) {
[16:13:01.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.506]     }
[16:13:01.506]     ...future.result <- base::tryCatch({
[16:13:01.506]         base::withCallingHandlers({
[16:13:01.506]             ...future.value <- base::withVisible(base::local({
[16:13:01.506]                 ...future.makeSendCondition <- local({
[16:13:01.506]                   sendCondition <- NULL
[16:13:01.506]                   function(frame = 1L) {
[16:13:01.506]                     if (is.function(sendCondition)) 
[16:13:01.506]                       return(sendCondition)
[16:13:01.506]                     ns <- getNamespace("parallel")
[16:13:01.506]                     if (exists("sendData", mode = "function", 
[16:13:01.506]                       envir = ns)) {
[16:13:01.506]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.506]                         envir = ns)
[16:13:01.506]                       envir <- sys.frame(frame)
[16:13:01.506]                       master <- NULL
[16:13:01.506]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.506]                         !identical(envir, emptyenv())) {
[16:13:01.506]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.506]                           inherits = FALSE)) {
[16:13:01.506]                           master <- get("master", mode = "list", 
[16:13:01.506]                             envir = envir, inherits = FALSE)
[16:13:01.506]                           if (inherits(master, c("SOCKnode", 
[16:13:01.506]                             "SOCK0node"))) {
[16:13:01.506]                             sendCondition <<- function(cond) {
[16:13:01.506]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.506]                                 success = TRUE)
[16:13:01.506]                               parallel_sendData(master, data)
[16:13:01.506]                             }
[16:13:01.506]                             return(sendCondition)
[16:13:01.506]                           }
[16:13:01.506]                         }
[16:13:01.506]                         frame <- frame + 1L
[16:13:01.506]                         envir <- sys.frame(frame)
[16:13:01.506]                       }
[16:13:01.506]                     }
[16:13:01.506]                     sendCondition <<- function(cond) NULL
[16:13:01.506]                   }
[16:13:01.506]                 })
[16:13:01.506]                 withCallingHandlers({
[16:13:01.506]                   {
[16:13:01.506]                     future:::session_uuid(attributes = TRUE)
[16:13:01.506]                   }
[16:13:01.506]                 }, immediateCondition = function(cond) {
[16:13:01.506]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.506]                   sendCondition(cond)
[16:13:01.506]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.506]                   {
[16:13:01.506]                     inherits <- base::inherits
[16:13:01.506]                     invokeRestart <- base::invokeRestart
[16:13:01.506]                     is.null <- base::is.null
[16:13:01.506]                     muffled <- FALSE
[16:13:01.506]                     if (inherits(cond, "message")) {
[16:13:01.506]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.506]                       if (muffled) 
[16:13:01.506]                         invokeRestart("muffleMessage")
[16:13:01.506]                     }
[16:13:01.506]                     else if (inherits(cond, "warning")) {
[16:13:01.506]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.506]                       if (muffled) 
[16:13:01.506]                         invokeRestart("muffleWarning")
[16:13:01.506]                     }
[16:13:01.506]                     else if (inherits(cond, "condition")) {
[16:13:01.506]                       if (!is.null(pattern)) {
[16:13:01.506]                         computeRestarts <- base::computeRestarts
[16:13:01.506]                         grepl <- base::grepl
[16:13:01.506]                         restarts <- computeRestarts(cond)
[16:13:01.506]                         for (restart in restarts) {
[16:13:01.506]                           name <- restart$name
[16:13:01.506]                           if (is.null(name)) 
[16:13:01.506]                             next
[16:13:01.506]                           if (!grepl(pattern, name)) 
[16:13:01.506]                             next
[16:13:01.506]                           invokeRestart(restart)
[16:13:01.506]                           muffled <- TRUE
[16:13:01.506]                           break
[16:13:01.506]                         }
[16:13:01.506]                       }
[16:13:01.506]                     }
[16:13:01.506]                     invisible(muffled)
[16:13:01.506]                   }
[16:13:01.506]                   muffleCondition(cond)
[16:13:01.506]                 })
[16:13:01.506]             }))
[16:13:01.506]             future::FutureResult(value = ...future.value$value, 
[16:13:01.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.506]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.506]                     ...future.globalenv.names))
[16:13:01.506]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.506]         }, condition = base::local({
[16:13:01.506]             c <- base::c
[16:13:01.506]             inherits <- base::inherits
[16:13:01.506]             invokeRestart <- base::invokeRestart
[16:13:01.506]             length <- base::length
[16:13:01.506]             list <- base::list
[16:13:01.506]             seq.int <- base::seq.int
[16:13:01.506]             signalCondition <- base::signalCondition
[16:13:01.506]             sys.calls <- base::sys.calls
[16:13:01.506]             `[[` <- base::`[[`
[16:13:01.506]             `+` <- base::`+`
[16:13:01.506]             `<<-` <- base::`<<-`
[16:13:01.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.506]                   3L)]
[16:13:01.506]             }
[16:13:01.506]             function(cond) {
[16:13:01.506]                 is_error <- inherits(cond, "error")
[16:13:01.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.506]                   NULL)
[16:13:01.506]                 if (is_error) {
[16:13:01.506]                   sessionInformation <- function() {
[16:13:01.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.506]                       search = base::search(), system = base::Sys.info())
[16:13:01.506]                   }
[16:13:01.506]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.506]                     cond$call), session = sessionInformation(), 
[16:13:01.506]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.506]                   signalCondition(cond)
[16:13:01.506]                 }
[16:13:01.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.506]                 "immediateCondition"))) {
[16:13:01.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.506]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.506]                   if (TRUE && !signal) {
[16:13:01.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.506]                     {
[16:13:01.506]                       inherits <- base::inherits
[16:13:01.506]                       invokeRestart <- base::invokeRestart
[16:13:01.506]                       is.null <- base::is.null
[16:13:01.506]                       muffled <- FALSE
[16:13:01.506]                       if (inherits(cond, "message")) {
[16:13:01.506]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.506]                         if (muffled) 
[16:13:01.506]                           invokeRestart("muffleMessage")
[16:13:01.506]                       }
[16:13:01.506]                       else if (inherits(cond, "warning")) {
[16:13:01.506]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.506]                         if (muffled) 
[16:13:01.506]                           invokeRestart("muffleWarning")
[16:13:01.506]                       }
[16:13:01.506]                       else if (inherits(cond, "condition")) {
[16:13:01.506]                         if (!is.null(pattern)) {
[16:13:01.506]                           computeRestarts <- base::computeRestarts
[16:13:01.506]                           grepl <- base::grepl
[16:13:01.506]                           restarts <- computeRestarts(cond)
[16:13:01.506]                           for (restart in restarts) {
[16:13:01.506]                             name <- restart$name
[16:13:01.506]                             if (is.null(name)) 
[16:13:01.506]                               next
[16:13:01.506]                             if (!grepl(pattern, name)) 
[16:13:01.506]                               next
[16:13:01.506]                             invokeRestart(restart)
[16:13:01.506]                             muffled <- TRUE
[16:13:01.506]                             break
[16:13:01.506]                           }
[16:13:01.506]                         }
[16:13:01.506]                       }
[16:13:01.506]                       invisible(muffled)
[16:13:01.506]                     }
[16:13:01.506]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.506]                   }
[16:13:01.506]                 }
[16:13:01.506]                 else {
[16:13:01.506]                   if (TRUE) {
[16:13:01.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.506]                     {
[16:13:01.506]                       inherits <- base::inherits
[16:13:01.506]                       invokeRestart <- base::invokeRestart
[16:13:01.506]                       is.null <- base::is.null
[16:13:01.506]                       muffled <- FALSE
[16:13:01.506]                       if (inherits(cond, "message")) {
[16:13:01.506]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.506]                         if (muffled) 
[16:13:01.506]                           invokeRestart("muffleMessage")
[16:13:01.506]                       }
[16:13:01.506]                       else if (inherits(cond, "warning")) {
[16:13:01.506]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.506]                         if (muffled) 
[16:13:01.506]                           invokeRestart("muffleWarning")
[16:13:01.506]                       }
[16:13:01.506]                       else if (inherits(cond, "condition")) {
[16:13:01.506]                         if (!is.null(pattern)) {
[16:13:01.506]                           computeRestarts <- base::computeRestarts
[16:13:01.506]                           grepl <- base::grepl
[16:13:01.506]                           restarts <- computeRestarts(cond)
[16:13:01.506]                           for (restart in restarts) {
[16:13:01.506]                             name <- restart$name
[16:13:01.506]                             if (is.null(name)) 
[16:13:01.506]                               next
[16:13:01.506]                             if (!grepl(pattern, name)) 
[16:13:01.506]                               next
[16:13:01.506]                             invokeRestart(restart)
[16:13:01.506]                             muffled <- TRUE
[16:13:01.506]                             break
[16:13:01.506]                           }
[16:13:01.506]                         }
[16:13:01.506]                       }
[16:13:01.506]                       invisible(muffled)
[16:13:01.506]                     }
[16:13:01.506]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.506]                   }
[16:13:01.506]                 }
[16:13:01.506]             }
[16:13:01.506]         }))
[16:13:01.506]     }, error = function(ex) {
[16:13:01.506]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.506]                 ...future.rng), started = ...future.startTime, 
[16:13:01.506]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.506]             version = "1.8"), class = "FutureResult")
[16:13:01.506]     }, finally = {
[16:13:01.506]         if (!identical(...future.workdir, getwd())) 
[16:13:01.506]             setwd(...future.workdir)
[16:13:01.506]         {
[16:13:01.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.506]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.506]             }
[16:13:01.506]             base::options(...future.oldOptions)
[16:13:01.506]             if (.Platform$OS.type == "windows") {
[16:13:01.506]                 old_names <- names(...future.oldEnvVars)
[16:13:01.506]                 envs <- base::Sys.getenv()
[16:13:01.506]                 names <- names(envs)
[16:13:01.506]                 common <- intersect(names, old_names)
[16:13:01.506]                 added <- setdiff(names, old_names)
[16:13:01.506]                 removed <- setdiff(old_names, names)
[16:13:01.506]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.506]                   envs[common]]
[16:13:01.506]                 NAMES <- toupper(changed)
[16:13:01.506]                 args <- list()
[16:13:01.506]                 for (kk in seq_along(NAMES)) {
[16:13:01.506]                   name <- changed[[kk]]
[16:13:01.506]                   NAME <- NAMES[[kk]]
[16:13:01.506]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.506]                     next
[16:13:01.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.506]                 }
[16:13:01.506]                 NAMES <- toupper(added)
[16:13:01.506]                 for (kk in seq_along(NAMES)) {
[16:13:01.506]                   name <- added[[kk]]
[16:13:01.506]                   NAME <- NAMES[[kk]]
[16:13:01.506]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.506]                     next
[16:13:01.506]                   args[[name]] <- ""
[16:13:01.506]                 }
[16:13:01.506]                 NAMES <- toupper(removed)
[16:13:01.506]                 for (kk in seq_along(NAMES)) {
[16:13:01.506]                   name <- removed[[kk]]
[16:13:01.506]                   NAME <- NAMES[[kk]]
[16:13:01.506]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.506]                     next
[16:13:01.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.506]                 }
[16:13:01.506]                 if (length(args) > 0) 
[16:13:01.506]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.506]             }
[16:13:01.506]             else {
[16:13:01.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.506]             }
[16:13:01.506]             {
[16:13:01.506]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.506]                   0L) {
[16:13:01.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.506]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.506]                   base::options(opts)
[16:13:01.506]                 }
[16:13:01.506]                 {
[16:13:01.506]                   {
[16:13:01.506]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.506]                     NULL
[16:13:01.506]                   }
[16:13:01.506]                   options(future.plan = NULL)
[16:13:01.506]                   if (is.na(NA_character_)) 
[16:13:01.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.506]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.506]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.506]                     envir = parent.frame()) 
[16:13:01.506]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.506]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.506]                 }
[16:13:01.506]             }
[16:13:01.506]         }
[16:13:01.506]     })
[16:13:01.506]     if (TRUE) {
[16:13:01.506]         base::sink(type = "output", split = FALSE)
[16:13:01.506]         if (TRUE) {
[16:13:01.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.506]         }
[16:13:01.506]         else {
[16:13:01.506]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.506]         }
[16:13:01.506]         base::close(...future.stdout)
[16:13:01.506]         ...future.stdout <- NULL
[16:13:01.506]     }
[16:13:01.506]     ...future.result$conditions <- ...future.conditions
[16:13:01.506]     ...future.result$finished <- base::Sys.time()
[16:13:01.506]     ...future.result
[16:13:01.506] }
[16:13:01.509] MultisessionFuture started
[16:13:01.509] - Launch lazy future ... done
[16:13:01.509] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[16:13:01.509] result() for ClusterFuture ...
[16:13:01.509] receiveMessageFromWorker() for ClusterFuture ...
[16:13:01.509] - Validating connection of MultisessionFuture
[16:13:01.553] - received message: FutureResult
[16:13:01.553] - Received FutureResult
[16:13:01.553] - Erased future from FutureRegistry
[16:13:01.554] result() for ClusterFuture ...
[16:13:01.554] - result already collected: FutureResult
[16:13:01.554] result() for ClusterFuture ... done
[16:13:01.554] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:01.554] result() for ClusterFuture ... done
[16:13:01.554] result() for ClusterFuture ...
[16:13:01.554] - result already collected: FutureResult
[16:13:01.554] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 503c87bc-7924-8d50-6764-1a961f40988f
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[16:13:01.554] getGlobalsAndPackages() ...
[16:13:01.555] Searching for globals...
[16:13:01.555] - globals found: [3] ‘{’, ‘$’, ‘f1’
[16:13:01.556] Searching for globals ... DONE
[16:13:01.556] Resolving globals: FALSE
[16:13:01.558] The total size of the 1 globals is 1.54 MiB (1611824 bytes)
[16:13:01.559] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[16:13:01.559] - globals: [1] ‘f1’
[16:13:01.559] 
[16:13:01.559] getGlobalsAndPackages() ... DONE
[16:13:01.559] run() for ‘Future’ ...
[16:13:01.559] - state: ‘created’
[16:13:01.560] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.571] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.571] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.571]   - Field: ‘node’
[16:13:01.571]   - Field: ‘label’
[16:13:01.571]   - Field: ‘local’
[16:13:01.571]   - Field: ‘owner’
[16:13:01.571]   - Field: ‘envir’
[16:13:01.571]   - Field: ‘workers’
[16:13:01.571]   - Field: ‘packages’
[16:13:01.571]   - Field: ‘gc’
[16:13:01.571]   - Field: ‘conditions’
[16:13:01.572]   - Field: ‘persistent’
[16:13:01.572]   - Field: ‘expr’
[16:13:01.572]   - Field: ‘uuid’
[16:13:01.572]   - Field: ‘seed’
[16:13:01.572]   - Field: ‘version’
[16:13:01.572]   - Field: ‘result’
[16:13:01.572]   - Field: ‘asynchronous’
[16:13:01.572]   - Field: ‘calls’
[16:13:01.572]   - Field: ‘globals’
[16:13:01.572]   - Field: ‘stdout’
[16:13:01.572]   - Field: ‘earlySignal’
[16:13:01.573]   - Field: ‘lazy’
[16:13:01.573]   - Field: ‘state’
[16:13:01.573] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.573] - Launch lazy future ...
[16:13:01.573] Packages needed by the future expression (n = 0): <none>
[16:13:01.573] Packages needed by future strategies (n = 0): <none>
[16:13:01.574] {
[16:13:01.574]     {
[16:13:01.574]         {
[16:13:01.574]             ...future.startTime <- base::Sys.time()
[16:13:01.574]             {
[16:13:01.574]                 {
[16:13:01.574]                   {
[16:13:01.574]                     {
[16:13:01.574]                       base::local({
[16:13:01.574]                         has_future <- base::requireNamespace("future", 
[16:13:01.574]                           quietly = TRUE)
[16:13:01.574]                         if (has_future) {
[16:13:01.574]                           ns <- base::getNamespace("future")
[16:13:01.574]                           version <- ns[[".package"]][["version"]]
[16:13:01.574]                           if (is.null(version)) 
[16:13:01.574]                             version <- utils::packageVersion("future")
[16:13:01.574]                         }
[16:13:01.574]                         else {
[16:13:01.574]                           version <- NULL
[16:13:01.574]                         }
[16:13:01.574]                         if (!has_future || version < "1.8.0") {
[16:13:01.574]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.574]                             "", base::R.version$version.string), 
[16:13:01.574]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.574]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.574]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.574]                               "release", "version")], collapse = " "), 
[16:13:01.574]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.574]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.574]                             info)
[16:13:01.574]                           info <- base::paste(info, collapse = "; ")
[16:13:01.574]                           if (!has_future) {
[16:13:01.574]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.574]                               info)
[16:13:01.574]                           }
[16:13:01.574]                           else {
[16:13:01.574]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.574]                               info, version)
[16:13:01.574]                           }
[16:13:01.574]                           base::stop(msg)
[16:13:01.574]                         }
[16:13:01.574]                       })
[16:13:01.574]                     }
[16:13:01.574]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.574]                     base::options(mc.cores = 1L)
[16:13:01.574]                   }
[16:13:01.574]                   options(future.plan = NULL)
[16:13:01.574]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.574]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.574]                 }
[16:13:01.574]                 ...future.workdir <- getwd()
[16:13:01.574]             }
[16:13:01.574]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.574]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.574]         }
[16:13:01.574]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.574]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.574]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.574]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.574]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.574]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.574]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.574]             base::names(...future.oldOptions))
[16:13:01.574]     }
[16:13:01.574]     if (FALSE) {
[16:13:01.574]     }
[16:13:01.574]     else {
[16:13:01.574]         if (TRUE) {
[16:13:01.574]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.574]                 open = "w")
[16:13:01.574]         }
[16:13:01.574]         else {
[16:13:01.574]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.574]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.574]         }
[16:13:01.574]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.574]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.574]             base::sink(type = "output", split = FALSE)
[16:13:01.574]             base::close(...future.stdout)
[16:13:01.574]         }, add = TRUE)
[16:13:01.574]     }
[16:13:01.574]     ...future.frame <- base::sys.nframe()
[16:13:01.574]     ...future.conditions <- base::list()
[16:13:01.574]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.574]     if (FALSE) {
[16:13:01.574]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.574]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.574]     }
[16:13:01.574]     ...future.result <- base::tryCatch({
[16:13:01.574]         base::withCallingHandlers({
[16:13:01.574]             ...future.value <- base::withVisible(base::local({
[16:13:01.574]                 ...future.makeSendCondition <- local({
[16:13:01.574]                   sendCondition <- NULL
[16:13:01.574]                   function(frame = 1L) {
[16:13:01.574]                     if (is.function(sendCondition)) 
[16:13:01.574]                       return(sendCondition)
[16:13:01.574]                     ns <- getNamespace("parallel")
[16:13:01.574]                     if (exists("sendData", mode = "function", 
[16:13:01.574]                       envir = ns)) {
[16:13:01.574]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.574]                         envir = ns)
[16:13:01.574]                       envir <- sys.frame(frame)
[16:13:01.574]                       master <- NULL
[16:13:01.574]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.574]                         !identical(envir, emptyenv())) {
[16:13:01.574]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.574]                           inherits = FALSE)) {
[16:13:01.574]                           master <- get("master", mode = "list", 
[16:13:01.574]                             envir = envir, inherits = FALSE)
[16:13:01.574]                           if (inherits(master, c("SOCKnode", 
[16:13:01.574]                             "SOCK0node"))) {
[16:13:01.574]                             sendCondition <<- function(cond) {
[16:13:01.574]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.574]                                 success = TRUE)
[16:13:01.574]                               parallel_sendData(master, data)
[16:13:01.574]                             }
[16:13:01.574]                             return(sendCondition)
[16:13:01.574]                           }
[16:13:01.574]                         }
[16:13:01.574]                         frame <- frame + 1L
[16:13:01.574]                         envir <- sys.frame(frame)
[16:13:01.574]                       }
[16:13:01.574]                     }
[16:13:01.574]                     sendCondition <<- function(cond) NULL
[16:13:01.574]                   }
[16:13:01.574]                 })
[16:13:01.574]                 withCallingHandlers({
[16:13:01.574]                   {
[16:13:01.574]                     f1$owner
[16:13:01.574]                   }
[16:13:01.574]                 }, immediateCondition = function(cond) {
[16:13:01.574]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.574]                   sendCondition(cond)
[16:13:01.574]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.574]                   {
[16:13:01.574]                     inherits <- base::inherits
[16:13:01.574]                     invokeRestart <- base::invokeRestart
[16:13:01.574]                     is.null <- base::is.null
[16:13:01.574]                     muffled <- FALSE
[16:13:01.574]                     if (inherits(cond, "message")) {
[16:13:01.574]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.574]                       if (muffled) 
[16:13:01.574]                         invokeRestart("muffleMessage")
[16:13:01.574]                     }
[16:13:01.574]                     else if (inherits(cond, "warning")) {
[16:13:01.574]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.574]                       if (muffled) 
[16:13:01.574]                         invokeRestart("muffleWarning")
[16:13:01.574]                     }
[16:13:01.574]                     else if (inherits(cond, "condition")) {
[16:13:01.574]                       if (!is.null(pattern)) {
[16:13:01.574]                         computeRestarts <- base::computeRestarts
[16:13:01.574]                         grepl <- base::grepl
[16:13:01.574]                         restarts <- computeRestarts(cond)
[16:13:01.574]                         for (restart in restarts) {
[16:13:01.574]                           name <- restart$name
[16:13:01.574]                           if (is.null(name)) 
[16:13:01.574]                             next
[16:13:01.574]                           if (!grepl(pattern, name)) 
[16:13:01.574]                             next
[16:13:01.574]                           invokeRestart(restart)
[16:13:01.574]                           muffled <- TRUE
[16:13:01.574]                           break
[16:13:01.574]                         }
[16:13:01.574]                       }
[16:13:01.574]                     }
[16:13:01.574]                     invisible(muffled)
[16:13:01.574]                   }
[16:13:01.574]                   muffleCondition(cond)
[16:13:01.574]                 })
[16:13:01.574]             }))
[16:13:01.574]             future::FutureResult(value = ...future.value$value, 
[16:13:01.574]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.574]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.574]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.574]                     ...future.globalenv.names))
[16:13:01.574]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.574]         }, condition = base::local({
[16:13:01.574]             c <- base::c
[16:13:01.574]             inherits <- base::inherits
[16:13:01.574]             invokeRestart <- base::invokeRestart
[16:13:01.574]             length <- base::length
[16:13:01.574]             list <- base::list
[16:13:01.574]             seq.int <- base::seq.int
[16:13:01.574]             signalCondition <- base::signalCondition
[16:13:01.574]             sys.calls <- base::sys.calls
[16:13:01.574]             `[[` <- base::`[[`
[16:13:01.574]             `+` <- base::`+`
[16:13:01.574]             `<<-` <- base::`<<-`
[16:13:01.574]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.574]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.574]                   3L)]
[16:13:01.574]             }
[16:13:01.574]             function(cond) {
[16:13:01.574]                 is_error <- inherits(cond, "error")
[16:13:01.574]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.574]                   NULL)
[16:13:01.574]                 if (is_error) {
[16:13:01.574]                   sessionInformation <- function() {
[16:13:01.574]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.574]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.574]                       search = base::search(), system = base::Sys.info())
[16:13:01.574]                   }
[16:13:01.574]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.574]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.574]                     cond$call), session = sessionInformation(), 
[16:13:01.574]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.574]                   signalCondition(cond)
[16:13:01.574]                 }
[16:13:01.574]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.574]                 "immediateCondition"))) {
[16:13:01.574]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.574]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.574]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.574]                   if (TRUE && !signal) {
[16:13:01.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.574]                     {
[16:13:01.574]                       inherits <- base::inherits
[16:13:01.574]                       invokeRestart <- base::invokeRestart
[16:13:01.574]                       is.null <- base::is.null
[16:13:01.574]                       muffled <- FALSE
[16:13:01.574]                       if (inherits(cond, "message")) {
[16:13:01.574]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.574]                         if (muffled) 
[16:13:01.574]                           invokeRestart("muffleMessage")
[16:13:01.574]                       }
[16:13:01.574]                       else if (inherits(cond, "warning")) {
[16:13:01.574]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.574]                         if (muffled) 
[16:13:01.574]                           invokeRestart("muffleWarning")
[16:13:01.574]                       }
[16:13:01.574]                       else if (inherits(cond, "condition")) {
[16:13:01.574]                         if (!is.null(pattern)) {
[16:13:01.574]                           computeRestarts <- base::computeRestarts
[16:13:01.574]                           grepl <- base::grepl
[16:13:01.574]                           restarts <- computeRestarts(cond)
[16:13:01.574]                           for (restart in restarts) {
[16:13:01.574]                             name <- restart$name
[16:13:01.574]                             if (is.null(name)) 
[16:13:01.574]                               next
[16:13:01.574]                             if (!grepl(pattern, name)) 
[16:13:01.574]                               next
[16:13:01.574]                             invokeRestart(restart)
[16:13:01.574]                             muffled <- TRUE
[16:13:01.574]                             break
[16:13:01.574]                           }
[16:13:01.574]                         }
[16:13:01.574]                       }
[16:13:01.574]                       invisible(muffled)
[16:13:01.574]                     }
[16:13:01.574]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.574]                   }
[16:13:01.574]                 }
[16:13:01.574]                 else {
[16:13:01.574]                   if (TRUE) {
[16:13:01.574]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.574]                     {
[16:13:01.574]                       inherits <- base::inherits
[16:13:01.574]                       invokeRestart <- base::invokeRestart
[16:13:01.574]                       is.null <- base::is.null
[16:13:01.574]                       muffled <- FALSE
[16:13:01.574]                       if (inherits(cond, "message")) {
[16:13:01.574]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.574]                         if (muffled) 
[16:13:01.574]                           invokeRestart("muffleMessage")
[16:13:01.574]                       }
[16:13:01.574]                       else if (inherits(cond, "warning")) {
[16:13:01.574]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.574]                         if (muffled) 
[16:13:01.574]                           invokeRestart("muffleWarning")
[16:13:01.574]                       }
[16:13:01.574]                       else if (inherits(cond, "condition")) {
[16:13:01.574]                         if (!is.null(pattern)) {
[16:13:01.574]                           computeRestarts <- base::computeRestarts
[16:13:01.574]                           grepl <- base::grepl
[16:13:01.574]                           restarts <- computeRestarts(cond)
[16:13:01.574]                           for (restart in restarts) {
[16:13:01.574]                             name <- restart$name
[16:13:01.574]                             if (is.null(name)) 
[16:13:01.574]                               next
[16:13:01.574]                             if (!grepl(pattern, name)) 
[16:13:01.574]                               next
[16:13:01.574]                             invokeRestart(restart)
[16:13:01.574]                             muffled <- TRUE
[16:13:01.574]                             break
[16:13:01.574]                           }
[16:13:01.574]                         }
[16:13:01.574]                       }
[16:13:01.574]                       invisible(muffled)
[16:13:01.574]                     }
[16:13:01.574]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.574]                   }
[16:13:01.574]                 }
[16:13:01.574]             }
[16:13:01.574]         }))
[16:13:01.574]     }, error = function(ex) {
[16:13:01.574]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.574]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.574]                 ...future.rng), started = ...future.startTime, 
[16:13:01.574]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.574]             version = "1.8"), class = "FutureResult")
[16:13:01.574]     }, finally = {
[16:13:01.574]         if (!identical(...future.workdir, getwd())) 
[16:13:01.574]             setwd(...future.workdir)
[16:13:01.574]         {
[16:13:01.574]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.574]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.574]             }
[16:13:01.574]             base::options(...future.oldOptions)
[16:13:01.574]             if (.Platform$OS.type == "windows") {
[16:13:01.574]                 old_names <- names(...future.oldEnvVars)
[16:13:01.574]                 envs <- base::Sys.getenv()
[16:13:01.574]                 names <- names(envs)
[16:13:01.574]                 common <- intersect(names, old_names)
[16:13:01.574]                 added <- setdiff(names, old_names)
[16:13:01.574]                 removed <- setdiff(old_names, names)
[16:13:01.574]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.574]                   envs[common]]
[16:13:01.574]                 NAMES <- toupper(changed)
[16:13:01.574]                 args <- list()
[16:13:01.574]                 for (kk in seq_along(NAMES)) {
[16:13:01.574]                   name <- changed[[kk]]
[16:13:01.574]                   NAME <- NAMES[[kk]]
[16:13:01.574]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.574]                     next
[16:13:01.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.574]                 }
[16:13:01.574]                 NAMES <- toupper(added)
[16:13:01.574]                 for (kk in seq_along(NAMES)) {
[16:13:01.574]                   name <- added[[kk]]
[16:13:01.574]                   NAME <- NAMES[[kk]]
[16:13:01.574]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.574]                     next
[16:13:01.574]                   args[[name]] <- ""
[16:13:01.574]                 }
[16:13:01.574]                 NAMES <- toupper(removed)
[16:13:01.574]                 for (kk in seq_along(NAMES)) {
[16:13:01.574]                   name <- removed[[kk]]
[16:13:01.574]                   NAME <- NAMES[[kk]]
[16:13:01.574]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.574]                     next
[16:13:01.574]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.574]                 }
[16:13:01.574]                 if (length(args) > 0) 
[16:13:01.574]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.574]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.574]             }
[16:13:01.574]             else {
[16:13:01.574]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.574]             }
[16:13:01.574]             {
[16:13:01.574]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.574]                   0L) {
[16:13:01.574]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.574]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.574]                   base::options(opts)
[16:13:01.574]                 }
[16:13:01.574]                 {
[16:13:01.574]                   {
[16:13:01.574]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.574]                     NULL
[16:13:01.574]                   }
[16:13:01.574]                   options(future.plan = NULL)
[16:13:01.574]                   if (is.na(NA_character_)) 
[16:13:01.574]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.574]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.574]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.574]                     envir = parent.frame()) 
[16:13:01.574]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.574]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.574]                 }
[16:13:01.574]             }
[16:13:01.574]         }
[16:13:01.574]     })
[16:13:01.574]     if (TRUE) {
[16:13:01.574]         base::sink(type = "output", split = FALSE)
[16:13:01.574]         if (TRUE) {
[16:13:01.574]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.574]         }
[16:13:01.574]         else {
[16:13:01.574]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.574]         }
[16:13:01.574]         base::close(...future.stdout)
[16:13:01.574]         ...future.stdout <- NULL
[16:13:01.574]     }
[16:13:01.574]     ...future.result$conditions <- ...future.conditions
[16:13:01.574]     ...future.result$finished <- base::Sys.time()
[16:13:01.574]     ...future.result
[16:13:01.574] }
[16:13:01.576] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[16:13:01.578] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[16:13:01.632] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[16:13:01.632] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[16:13:01.633] MultisessionFuture started
[16:13:01.633] - Launch lazy future ... done
[16:13:01.633] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[16:13:01.633] result() for ClusterFuture ...
[16:13:01.633] receiveMessageFromWorker() for ClusterFuture ...
[16:13:01.633] - Validating connection of MultisessionFuture
[16:13:01.677] - received message: FutureResult
[16:13:01.678] - Received FutureResult
[16:13:01.678] - Erased future from FutureRegistry
[16:13:01.678] result() for ClusterFuture ...
[16:13:01.678] - result already collected: FutureResult
[16:13:01.678] result() for ClusterFuture ... done
[16:13:01.678] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:01.678] result() for ClusterFuture ... done
[16:13:01.678] result() for ClusterFuture ...
[16:13:01.678] - result already collected: FutureResult
[16:13:01.678] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: d0291e77-66bf-4023-74d2-91e696ca5c5c
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[16:13:01.679] getGlobalsAndPackages() ...
[16:13:01.679] Searching for globals...
[16:13:01.680] - globals found: [3] ‘{’, ‘$’, ‘f1’
[16:13:01.680] Searching for globals ... DONE
[16:13:01.680] Resolving globals: FALSE
[16:13:01.682] The total size of the 1 globals is 1.54 MiB (1614760 bytes)
[16:13:01.682] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[16:13:01.683] - globals: [1] ‘f1’
[16:13:01.683] 
[16:13:01.683] getGlobalsAndPackages() ... DONE
[16:13:01.683] run() for ‘Future’ ...
[16:13:01.683] - state: ‘created’
[16:13:01.683] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.695] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.695] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.695]   - Field: ‘node’
[16:13:01.695]   - Field: ‘label’
[16:13:01.695]   - Field: ‘local’
[16:13:01.695]   - Field: ‘owner’
[16:13:01.696]   - Field: ‘envir’
[16:13:01.696]   - Field: ‘workers’
[16:13:01.696]   - Field: ‘packages’
[16:13:01.696]   - Field: ‘gc’
[16:13:01.696]   - Field: ‘conditions’
[16:13:01.696]   - Field: ‘persistent’
[16:13:01.696]   - Field: ‘expr’
[16:13:01.696]   - Field: ‘uuid’
[16:13:01.696]   - Field: ‘seed’
[16:13:01.696]   - Field: ‘version’
[16:13:01.697]   - Field: ‘result’
[16:13:01.697]   - Field: ‘asynchronous’
[16:13:01.697]   - Field: ‘calls’
[16:13:01.697]   - Field: ‘globals’
[16:13:01.697]   - Field: ‘stdout’
[16:13:01.697]   - Field: ‘earlySignal’
[16:13:01.697]   - Field: ‘lazy’
[16:13:01.697]   - Field: ‘state’
[16:13:01.697] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.697] - Launch lazy future ...
[16:13:01.698] Packages needed by the future expression (n = 0): <none>
[16:13:01.698] Packages needed by future strategies (n = 0): <none>
[16:13:01.698] {
[16:13:01.698]     {
[16:13:01.698]         {
[16:13:01.698]             ...future.startTime <- base::Sys.time()
[16:13:01.698]             {
[16:13:01.698]                 {
[16:13:01.698]                   {
[16:13:01.698]                     {
[16:13:01.698]                       base::local({
[16:13:01.698]                         has_future <- base::requireNamespace("future", 
[16:13:01.698]                           quietly = TRUE)
[16:13:01.698]                         if (has_future) {
[16:13:01.698]                           ns <- base::getNamespace("future")
[16:13:01.698]                           version <- ns[[".package"]][["version"]]
[16:13:01.698]                           if (is.null(version)) 
[16:13:01.698]                             version <- utils::packageVersion("future")
[16:13:01.698]                         }
[16:13:01.698]                         else {
[16:13:01.698]                           version <- NULL
[16:13:01.698]                         }
[16:13:01.698]                         if (!has_future || version < "1.8.0") {
[16:13:01.698]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.698]                             "", base::R.version$version.string), 
[16:13:01.698]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.698]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.698]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.698]                               "release", "version")], collapse = " "), 
[16:13:01.698]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.698]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.698]                             info)
[16:13:01.698]                           info <- base::paste(info, collapse = "; ")
[16:13:01.698]                           if (!has_future) {
[16:13:01.698]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.698]                               info)
[16:13:01.698]                           }
[16:13:01.698]                           else {
[16:13:01.698]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.698]                               info, version)
[16:13:01.698]                           }
[16:13:01.698]                           base::stop(msg)
[16:13:01.698]                         }
[16:13:01.698]                       })
[16:13:01.698]                     }
[16:13:01.698]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.698]                     base::options(mc.cores = 1L)
[16:13:01.698]                   }
[16:13:01.698]                   options(future.plan = NULL)
[16:13:01.698]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.698]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.698]                 }
[16:13:01.698]                 ...future.workdir <- getwd()
[16:13:01.698]             }
[16:13:01.698]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.698]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.698]         }
[16:13:01.698]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.698]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.698]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.698]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.698]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.698]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.698]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.698]             base::names(...future.oldOptions))
[16:13:01.698]     }
[16:13:01.698]     if (FALSE) {
[16:13:01.698]     }
[16:13:01.698]     else {
[16:13:01.698]         if (TRUE) {
[16:13:01.698]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.698]                 open = "w")
[16:13:01.698]         }
[16:13:01.698]         else {
[16:13:01.698]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.698]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.698]         }
[16:13:01.698]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.698]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.698]             base::sink(type = "output", split = FALSE)
[16:13:01.698]             base::close(...future.stdout)
[16:13:01.698]         }, add = TRUE)
[16:13:01.698]     }
[16:13:01.698]     ...future.frame <- base::sys.nframe()
[16:13:01.698]     ...future.conditions <- base::list()
[16:13:01.698]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.698]     if (FALSE) {
[16:13:01.698]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.698]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.698]     }
[16:13:01.698]     ...future.result <- base::tryCatch({
[16:13:01.698]         base::withCallingHandlers({
[16:13:01.698]             ...future.value <- base::withVisible(base::local({
[16:13:01.698]                 ...future.makeSendCondition <- local({
[16:13:01.698]                   sendCondition <- NULL
[16:13:01.698]                   function(frame = 1L) {
[16:13:01.698]                     if (is.function(sendCondition)) 
[16:13:01.698]                       return(sendCondition)
[16:13:01.698]                     ns <- getNamespace("parallel")
[16:13:01.698]                     if (exists("sendData", mode = "function", 
[16:13:01.698]                       envir = ns)) {
[16:13:01.698]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.698]                         envir = ns)
[16:13:01.698]                       envir <- sys.frame(frame)
[16:13:01.698]                       master <- NULL
[16:13:01.698]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.698]                         !identical(envir, emptyenv())) {
[16:13:01.698]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.698]                           inherits = FALSE)) {
[16:13:01.698]                           master <- get("master", mode = "list", 
[16:13:01.698]                             envir = envir, inherits = FALSE)
[16:13:01.698]                           if (inherits(master, c("SOCKnode", 
[16:13:01.698]                             "SOCK0node"))) {
[16:13:01.698]                             sendCondition <<- function(cond) {
[16:13:01.698]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.698]                                 success = TRUE)
[16:13:01.698]                               parallel_sendData(master, data)
[16:13:01.698]                             }
[16:13:01.698]                             return(sendCondition)
[16:13:01.698]                           }
[16:13:01.698]                         }
[16:13:01.698]                         frame <- frame + 1L
[16:13:01.698]                         envir <- sys.frame(frame)
[16:13:01.698]                       }
[16:13:01.698]                     }
[16:13:01.698]                     sendCondition <<- function(cond) NULL
[16:13:01.698]                   }
[16:13:01.698]                 })
[16:13:01.698]                 withCallingHandlers({
[16:13:01.698]                   {
[16:13:01.698]                     f1$owner
[16:13:01.698]                   }
[16:13:01.698]                 }, immediateCondition = function(cond) {
[16:13:01.698]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.698]                   sendCondition(cond)
[16:13:01.698]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.698]                   {
[16:13:01.698]                     inherits <- base::inherits
[16:13:01.698]                     invokeRestart <- base::invokeRestart
[16:13:01.698]                     is.null <- base::is.null
[16:13:01.698]                     muffled <- FALSE
[16:13:01.698]                     if (inherits(cond, "message")) {
[16:13:01.698]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.698]                       if (muffled) 
[16:13:01.698]                         invokeRestart("muffleMessage")
[16:13:01.698]                     }
[16:13:01.698]                     else if (inherits(cond, "warning")) {
[16:13:01.698]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.698]                       if (muffled) 
[16:13:01.698]                         invokeRestart("muffleWarning")
[16:13:01.698]                     }
[16:13:01.698]                     else if (inherits(cond, "condition")) {
[16:13:01.698]                       if (!is.null(pattern)) {
[16:13:01.698]                         computeRestarts <- base::computeRestarts
[16:13:01.698]                         grepl <- base::grepl
[16:13:01.698]                         restarts <- computeRestarts(cond)
[16:13:01.698]                         for (restart in restarts) {
[16:13:01.698]                           name <- restart$name
[16:13:01.698]                           if (is.null(name)) 
[16:13:01.698]                             next
[16:13:01.698]                           if (!grepl(pattern, name)) 
[16:13:01.698]                             next
[16:13:01.698]                           invokeRestart(restart)
[16:13:01.698]                           muffled <- TRUE
[16:13:01.698]                           break
[16:13:01.698]                         }
[16:13:01.698]                       }
[16:13:01.698]                     }
[16:13:01.698]                     invisible(muffled)
[16:13:01.698]                   }
[16:13:01.698]                   muffleCondition(cond)
[16:13:01.698]                 })
[16:13:01.698]             }))
[16:13:01.698]             future::FutureResult(value = ...future.value$value, 
[16:13:01.698]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.698]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.698]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.698]                     ...future.globalenv.names))
[16:13:01.698]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.698]         }, condition = base::local({
[16:13:01.698]             c <- base::c
[16:13:01.698]             inherits <- base::inherits
[16:13:01.698]             invokeRestart <- base::invokeRestart
[16:13:01.698]             length <- base::length
[16:13:01.698]             list <- base::list
[16:13:01.698]             seq.int <- base::seq.int
[16:13:01.698]             signalCondition <- base::signalCondition
[16:13:01.698]             sys.calls <- base::sys.calls
[16:13:01.698]             `[[` <- base::`[[`
[16:13:01.698]             `+` <- base::`+`
[16:13:01.698]             `<<-` <- base::`<<-`
[16:13:01.698]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.698]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.698]                   3L)]
[16:13:01.698]             }
[16:13:01.698]             function(cond) {
[16:13:01.698]                 is_error <- inherits(cond, "error")
[16:13:01.698]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.698]                   NULL)
[16:13:01.698]                 if (is_error) {
[16:13:01.698]                   sessionInformation <- function() {
[16:13:01.698]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.698]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.698]                       search = base::search(), system = base::Sys.info())
[16:13:01.698]                   }
[16:13:01.698]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.698]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.698]                     cond$call), session = sessionInformation(), 
[16:13:01.698]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.698]                   signalCondition(cond)
[16:13:01.698]                 }
[16:13:01.698]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.698]                 "immediateCondition"))) {
[16:13:01.698]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.698]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.698]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.698]                   if (TRUE && !signal) {
[16:13:01.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.698]                     {
[16:13:01.698]                       inherits <- base::inherits
[16:13:01.698]                       invokeRestart <- base::invokeRestart
[16:13:01.698]                       is.null <- base::is.null
[16:13:01.698]                       muffled <- FALSE
[16:13:01.698]                       if (inherits(cond, "message")) {
[16:13:01.698]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.698]                         if (muffled) 
[16:13:01.698]                           invokeRestart("muffleMessage")
[16:13:01.698]                       }
[16:13:01.698]                       else if (inherits(cond, "warning")) {
[16:13:01.698]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.698]                         if (muffled) 
[16:13:01.698]                           invokeRestart("muffleWarning")
[16:13:01.698]                       }
[16:13:01.698]                       else if (inherits(cond, "condition")) {
[16:13:01.698]                         if (!is.null(pattern)) {
[16:13:01.698]                           computeRestarts <- base::computeRestarts
[16:13:01.698]                           grepl <- base::grepl
[16:13:01.698]                           restarts <- computeRestarts(cond)
[16:13:01.698]                           for (restart in restarts) {
[16:13:01.698]                             name <- restart$name
[16:13:01.698]                             if (is.null(name)) 
[16:13:01.698]                               next
[16:13:01.698]                             if (!grepl(pattern, name)) 
[16:13:01.698]                               next
[16:13:01.698]                             invokeRestart(restart)
[16:13:01.698]                             muffled <- TRUE
[16:13:01.698]                             break
[16:13:01.698]                           }
[16:13:01.698]                         }
[16:13:01.698]                       }
[16:13:01.698]                       invisible(muffled)
[16:13:01.698]                     }
[16:13:01.698]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.698]                   }
[16:13:01.698]                 }
[16:13:01.698]                 else {
[16:13:01.698]                   if (TRUE) {
[16:13:01.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.698]                     {
[16:13:01.698]                       inherits <- base::inherits
[16:13:01.698]                       invokeRestart <- base::invokeRestart
[16:13:01.698]                       is.null <- base::is.null
[16:13:01.698]                       muffled <- FALSE
[16:13:01.698]                       if (inherits(cond, "message")) {
[16:13:01.698]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.698]                         if (muffled) 
[16:13:01.698]                           invokeRestart("muffleMessage")
[16:13:01.698]                       }
[16:13:01.698]                       else if (inherits(cond, "warning")) {
[16:13:01.698]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.698]                         if (muffled) 
[16:13:01.698]                           invokeRestart("muffleWarning")
[16:13:01.698]                       }
[16:13:01.698]                       else if (inherits(cond, "condition")) {
[16:13:01.698]                         if (!is.null(pattern)) {
[16:13:01.698]                           computeRestarts <- base::computeRestarts
[16:13:01.698]                           grepl <- base::grepl
[16:13:01.698]                           restarts <- computeRestarts(cond)
[16:13:01.698]                           for (restart in restarts) {
[16:13:01.698]                             name <- restart$name
[16:13:01.698]                             if (is.null(name)) 
[16:13:01.698]                               next
[16:13:01.698]                             if (!grepl(pattern, name)) 
[16:13:01.698]                               next
[16:13:01.698]                             invokeRestart(restart)
[16:13:01.698]                             muffled <- TRUE
[16:13:01.698]                             break
[16:13:01.698]                           }
[16:13:01.698]                         }
[16:13:01.698]                       }
[16:13:01.698]                       invisible(muffled)
[16:13:01.698]                     }
[16:13:01.698]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.698]                   }
[16:13:01.698]                 }
[16:13:01.698]             }
[16:13:01.698]         }))
[16:13:01.698]     }, error = function(ex) {
[16:13:01.698]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.698]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.698]                 ...future.rng), started = ...future.startTime, 
[16:13:01.698]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.698]             version = "1.8"), class = "FutureResult")
[16:13:01.698]     }, finally = {
[16:13:01.698]         if (!identical(...future.workdir, getwd())) 
[16:13:01.698]             setwd(...future.workdir)
[16:13:01.698]         {
[16:13:01.698]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.698]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.698]             }
[16:13:01.698]             base::options(...future.oldOptions)
[16:13:01.698]             if (.Platform$OS.type == "windows") {
[16:13:01.698]                 old_names <- names(...future.oldEnvVars)
[16:13:01.698]                 envs <- base::Sys.getenv()
[16:13:01.698]                 names <- names(envs)
[16:13:01.698]                 common <- intersect(names, old_names)
[16:13:01.698]                 added <- setdiff(names, old_names)
[16:13:01.698]                 removed <- setdiff(old_names, names)
[16:13:01.698]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.698]                   envs[common]]
[16:13:01.698]                 NAMES <- toupper(changed)
[16:13:01.698]                 args <- list()
[16:13:01.698]                 for (kk in seq_along(NAMES)) {
[16:13:01.698]                   name <- changed[[kk]]
[16:13:01.698]                   NAME <- NAMES[[kk]]
[16:13:01.698]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.698]                     next
[16:13:01.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.698]                 }
[16:13:01.698]                 NAMES <- toupper(added)
[16:13:01.698]                 for (kk in seq_along(NAMES)) {
[16:13:01.698]                   name <- added[[kk]]
[16:13:01.698]                   NAME <- NAMES[[kk]]
[16:13:01.698]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.698]                     next
[16:13:01.698]                   args[[name]] <- ""
[16:13:01.698]                 }
[16:13:01.698]                 NAMES <- toupper(removed)
[16:13:01.698]                 for (kk in seq_along(NAMES)) {
[16:13:01.698]                   name <- removed[[kk]]
[16:13:01.698]                   NAME <- NAMES[[kk]]
[16:13:01.698]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.698]                     next
[16:13:01.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.698]                 }
[16:13:01.698]                 if (length(args) > 0) 
[16:13:01.698]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.698]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.698]             }
[16:13:01.698]             else {
[16:13:01.698]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.698]             }
[16:13:01.698]             {
[16:13:01.698]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.698]                   0L) {
[16:13:01.698]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.698]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.698]                   base::options(opts)
[16:13:01.698]                 }
[16:13:01.698]                 {
[16:13:01.698]                   {
[16:13:01.698]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.698]                     NULL
[16:13:01.698]                   }
[16:13:01.698]                   options(future.plan = NULL)
[16:13:01.698]                   if (is.na(NA_character_)) 
[16:13:01.698]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.698]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.698]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.698]                     envir = parent.frame()) 
[16:13:01.698]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.698]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.698]                 }
[16:13:01.698]             }
[16:13:01.698]         }
[16:13:01.698]     })
[16:13:01.698]     if (TRUE) {
[16:13:01.698]         base::sink(type = "output", split = FALSE)
[16:13:01.698]         if (TRUE) {
[16:13:01.698]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.698]         }
[16:13:01.698]         else {
[16:13:01.698]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.698]         }
[16:13:01.698]         base::close(...future.stdout)
[16:13:01.698]         ...future.stdout <- NULL
[16:13:01.698]     }
[16:13:01.698]     ...future.result$conditions <- ...future.conditions
[16:13:01.698]     ...future.result$finished <- base::Sys.time()
[16:13:01.698]     ...future.result
[16:13:01.698] }
[16:13:01.701] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[16:13:01.703] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[16:13:01.756] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[16:13:01.756] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[16:13:01.757] MultisessionFuture started
[16:13:01.757] - Launch lazy future ... done
[16:13:01.757] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[16:13:01.757] result() for ClusterFuture ...
[16:13:01.757] receiveMessageFromWorker() for ClusterFuture ...
[16:13:01.757] - Validating connection of MultisessionFuture
[16:13:01.802] - received message: FutureResult
[16:13:01.802] - Received FutureResult
[16:13:01.802] - Erased future from FutureRegistry
[16:13:01.802] result() for ClusterFuture ...
[16:13:01.802] - result already collected: FutureResult
[16:13:01.802] result() for ClusterFuture ... done
[16:13:01.802] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:01.802] result() for ClusterFuture ... done
[16:13:01.802] result() for ClusterFuture ...
[16:13:01.803] - result already collected: FutureResult
[16:13:01.803] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: d0291e77-66bf-4023-74d2-91e696ca5c5c
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[16:13:01.803] getGlobalsAndPackages() ...
[16:13:01.803] Searching for globals...
[16:13:01.805] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[16:13:01.805] Searching for globals ... DONE
[16:13:01.805] Resolving globals: FALSE
[16:13:01.807] The total size of the 1 globals is 1.54 MiB (1617696 bytes)
[16:13:01.807] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[16:13:01.808] - globals: [1] ‘f1’
[16:13:01.808] 
[16:13:01.808] getGlobalsAndPackages() ... DONE
[16:13:01.808] run() for ‘Future’ ...
[16:13:01.808] - state: ‘created’
[16:13:01.808] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.819] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.820] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.820]   - Field: ‘node’
[16:13:01.820]   - Field: ‘label’
[16:13:01.820]   - Field: ‘local’
[16:13:01.820]   - Field: ‘owner’
[16:13:01.820]   - Field: ‘envir’
[16:13:01.820]   - Field: ‘workers’
[16:13:01.820]   - Field: ‘packages’
[16:13:01.820]   - Field: ‘gc’
[16:13:01.820]   - Field: ‘conditions’
[16:13:01.821]   - Field: ‘persistent’
[16:13:01.821]   - Field: ‘expr’
[16:13:01.821]   - Field: ‘uuid’
[16:13:01.821]   - Field: ‘seed’
[16:13:01.821]   - Field: ‘version’
[16:13:01.821]   - Field: ‘result’
[16:13:01.821]   - Field: ‘asynchronous’
[16:13:01.821]   - Field: ‘calls’
[16:13:01.821]   - Field: ‘globals’
[16:13:01.821]   - Field: ‘stdout’
[16:13:01.821]   - Field: ‘earlySignal’
[16:13:01.822]   - Field: ‘lazy’
[16:13:01.822]   - Field: ‘state’
[16:13:01.822] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.822] - Launch lazy future ...
[16:13:01.822] Packages needed by the future expression (n = 0): <none>
[16:13:01.822] Packages needed by future strategies (n = 0): <none>
[16:13:01.823] {
[16:13:01.823]     {
[16:13:01.823]         {
[16:13:01.823]             ...future.startTime <- base::Sys.time()
[16:13:01.823]             {
[16:13:01.823]                 {
[16:13:01.823]                   {
[16:13:01.823]                     {
[16:13:01.823]                       base::local({
[16:13:01.823]                         has_future <- base::requireNamespace("future", 
[16:13:01.823]                           quietly = TRUE)
[16:13:01.823]                         if (has_future) {
[16:13:01.823]                           ns <- base::getNamespace("future")
[16:13:01.823]                           version <- ns[[".package"]][["version"]]
[16:13:01.823]                           if (is.null(version)) 
[16:13:01.823]                             version <- utils::packageVersion("future")
[16:13:01.823]                         }
[16:13:01.823]                         else {
[16:13:01.823]                           version <- NULL
[16:13:01.823]                         }
[16:13:01.823]                         if (!has_future || version < "1.8.0") {
[16:13:01.823]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.823]                             "", base::R.version$version.string), 
[16:13:01.823]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.823]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.823]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.823]                               "release", "version")], collapse = " "), 
[16:13:01.823]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.823]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.823]                             info)
[16:13:01.823]                           info <- base::paste(info, collapse = "; ")
[16:13:01.823]                           if (!has_future) {
[16:13:01.823]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.823]                               info)
[16:13:01.823]                           }
[16:13:01.823]                           else {
[16:13:01.823]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.823]                               info, version)
[16:13:01.823]                           }
[16:13:01.823]                           base::stop(msg)
[16:13:01.823]                         }
[16:13:01.823]                       })
[16:13:01.823]                     }
[16:13:01.823]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.823]                     base::options(mc.cores = 1L)
[16:13:01.823]                   }
[16:13:01.823]                   options(future.plan = NULL)
[16:13:01.823]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.823]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.823]                 }
[16:13:01.823]                 ...future.workdir <- getwd()
[16:13:01.823]             }
[16:13:01.823]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.823]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.823]         }
[16:13:01.823]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.823]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.823]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.823]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.823]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.823]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.823]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.823]             base::names(...future.oldOptions))
[16:13:01.823]     }
[16:13:01.823]     if (FALSE) {
[16:13:01.823]     }
[16:13:01.823]     else {
[16:13:01.823]         if (TRUE) {
[16:13:01.823]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.823]                 open = "w")
[16:13:01.823]         }
[16:13:01.823]         else {
[16:13:01.823]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.823]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.823]         }
[16:13:01.823]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.823]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.823]             base::sink(type = "output", split = FALSE)
[16:13:01.823]             base::close(...future.stdout)
[16:13:01.823]         }, add = TRUE)
[16:13:01.823]     }
[16:13:01.823]     ...future.frame <- base::sys.nframe()
[16:13:01.823]     ...future.conditions <- base::list()
[16:13:01.823]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.823]     if (FALSE) {
[16:13:01.823]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.823]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.823]     }
[16:13:01.823]     ...future.result <- base::tryCatch({
[16:13:01.823]         base::withCallingHandlers({
[16:13:01.823]             ...future.value <- base::withVisible(base::local({
[16:13:01.823]                 ...future.makeSendCondition <- local({
[16:13:01.823]                   sendCondition <- NULL
[16:13:01.823]                   function(frame = 1L) {
[16:13:01.823]                     if (is.function(sendCondition)) 
[16:13:01.823]                       return(sendCondition)
[16:13:01.823]                     ns <- getNamespace("parallel")
[16:13:01.823]                     if (exists("sendData", mode = "function", 
[16:13:01.823]                       envir = ns)) {
[16:13:01.823]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.823]                         envir = ns)
[16:13:01.823]                       envir <- sys.frame(frame)
[16:13:01.823]                       master <- NULL
[16:13:01.823]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.823]                         !identical(envir, emptyenv())) {
[16:13:01.823]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.823]                           inherits = FALSE)) {
[16:13:01.823]                           master <- get("master", mode = "list", 
[16:13:01.823]                             envir = envir, inherits = FALSE)
[16:13:01.823]                           if (inherits(master, c("SOCKnode", 
[16:13:01.823]                             "SOCK0node"))) {
[16:13:01.823]                             sendCondition <<- function(cond) {
[16:13:01.823]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.823]                                 success = TRUE)
[16:13:01.823]                               parallel_sendData(master, data)
[16:13:01.823]                             }
[16:13:01.823]                             return(sendCondition)
[16:13:01.823]                           }
[16:13:01.823]                         }
[16:13:01.823]                         frame <- frame + 1L
[16:13:01.823]                         envir <- sys.frame(frame)
[16:13:01.823]                       }
[16:13:01.823]                     }
[16:13:01.823]                     sendCondition <<- function(cond) NULL
[16:13:01.823]                   }
[16:13:01.823]                 })
[16:13:01.823]                 withCallingHandlers({
[16:13:01.823]                   {
[16:13:01.823]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[16:13:01.823]                     "not-owner"
[16:13:01.823]                   }
[16:13:01.823]                 }, immediateCondition = function(cond) {
[16:13:01.823]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.823]                   sendCondition(cond)
[16:13:01.823]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.823]                   {
[16:13:01.823]                     inherits <- base::inherits
[16:13:01.823]                     invokeRestart <- base::invokeRestart
[16:13:01.823]                     is.null <- base::is.null
[16:13:01.823]                     muffled <- FALSE
[16:13:01.823]                     if (inherits(cond, "message")) {
[16:13:01.823]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.823]                       if (muffled) 
[16:13:01.823]                         invokeRestart("muffleMessage")
[16:13:01.823]                     }
[16:13:01.823]                     else if (inherits(cond, "warning")) {
[16:13:01.823]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.823]                       if (muffled) 
[16:13:01.823]                         invokeRestart("muffleWarning")
[16:13:01.823]                     }
[16:13:01.823]                     else if (inherits(cond, "condition")) {
[16:13:01.823]                       if (!is.null(pattern)) {
[16:13:01.823]                         computeRestarts <- base::computeRestarts
[16:13:01.823]                         grepl <- base::grepl
[16:13:01.823]                         restarts <- computeRestarts(cond)
[16:13:01.823]                         for (restart in restarts) {
[16:13:01.823]                           name <- restart$name
[16:13:01.823]                           if (is.null(name)) 
[16:13:01.823]                             next
[16:13:01.823]                           if (!grepl(pattern, name)) 
[16:13:01.823]                             next
[16:13:01.823]                           invokeRestart(restart)
[16:13:01.823]                           muffled <- TRUE
[16:13:01.823]                           break
[16:13:01.823]                         }
[16:13:01.823]                       }
[16:13:01.823]                     }
[16:13:01.823]                     invisible(muffled)
[16:13:01.823]                   }
[16:13:01.823]                   muffleCondition(cond)
[16:13:01.823]                 })
[16:13:01.823]             }))
[16:13:01.823]             future::FutureResult(value = ...future.value$value, 
[16:13:01.823]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.823]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.823]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.823]                     ...future.globalenv.names))
[16:13:01.823]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.823]         }, condition = base::local({
[16:13:01.823]             c <- base::c
[16:13:01.823]             inherits <- base::inherits
[16:13:01.823]             invokeRestart <- base::invokeRestart
[16:13:01.823]             length <- base::length
[16:13:01.823]             list <- base::list
[16:13:01.823]             seq.int <- base::seq.int
[16:13:01.823]             signalCondition <- base::signalCondition
[16:13:01.823]             sys.calls <- base::sys.calls
[16:13:01.823]             `[[` <- base::`[[`
[16:13:01.823]             `+` <- base::`+`
[16:13:01.823]             `<<-` <- base::`<<-`
[16:13:01.823]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.823]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.823]                   3L)]
[16:13:01.823]             }
[16:13:01.823]             function(cond) {
[16:13:01.823]                 is_error <- inherits(cond, "error")
[16:13:01.823]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.823]                   NULL)
[16:13:01.823]                 if (is_error) {
[16:13:01.823]                   sessionInformation <- function() {
[16:13:01.823]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.823]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.823]                       search = base::search(), system = base::Sys.info())
[16:13:01.823]                   }
[16:13:01.823]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.823]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.823]                     cond$call), session = sessionInformation(), 
[16:13:01.823]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.823]                   signalCondition(cond)
[16:13:01.823]                 }
[16:13:01.823]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.823]                 "immediateCondition"))) {
[16:13:01.823]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.823]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.823]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.823]                   if (TRUE && !signal) {
[16:13:01.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.823]                     {
[16:13:01.823]                       inherits <- base::inherits
[16:13:01.823]                       invokeRestart <- base::invokeRestart
[16:13:01.823]                       is.null <- base::is.null
[16:13:01.823]                       muffled <- FALSE
[16:13:01.823]                       if (inherits(cond, "message")) {
[16:13:01.823]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.823]                         if (muffled) 
[16:13:01.823]                           invokeRestart("muffleMessage")
[16:13:01.823]                       }
[16:13:01.823]                       else if (inherits(cond, "warning")) {
[16:13:01.823]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.823]                         if (muffled) 
[16:13:01.823]                           invokeRestart("muffleWarning")
[16:13:01.823]                       }
[16:13:01.823]                       else if (inherits(cond, "condition")) {
[16:13:01.823]                         if (!is.null(pattern)) {
[16:13:01.823]                           computeRestarts <- base::computeRestarts
[16:13:01.823]                           grepl <- base::grepl
[16:13:01.823]                           restarts <- computeRestarts(cond)
[16:13:01.823]                           for (restart in restarts) {
[16:13:01.823]                             name <- restart$name
[16:13:01.823]                             if (is.null(name)) 
[16:13:01.823]                               next
[16:13:01.823]                             if (!grepl(pattern, name)) 
[16:13:01.823]                               next
[16:13:01.823]                             invokeRestart(restart)
[16:13:01.823]                             muffled <- TRUE
[16:13:01.823]                             break
[16:13:01.823]                           }
[16:13:01.823]                         }
[16:13:01.823]                       }
[16:13:01.823]                       invisible(muffled)
[16:13:01.823]                     }
[16:13:01.823]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.823]                   }
[16:13:01.823]                 }
[16:13:01.823]                 else {
[16:13:01.823]                   if (TRUE) {
[16:13:01.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.823]                     {
[16:13:01.823]                       inherits <- base::inherits
[16:13:01.823]                       invokeRestart <- base::invokeRestart
[16:13:01.823]                       is.null <- base::is.null
[16:13:01.823]                       muffled <- FALSE
[16:13:01.823]                       if (inherits(cond, "message")) {
[16:13:01.823]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.823]                         if (muffled) 
[16:13:01.823]                           invokeRestart("muffleMessage")
[16:13:01.823]                       }
[16:13:01.823]                       else if (inherits(cond, "warning")) {
[16:13:01.823]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.823]                         if (muffled) 
[16:13:01.823]                           invokeRestart("muffleWarning")
[16:13:01.823]                       }
[16:13:01.823]                       else if (inherits(cond, "condition")) {
[16:13:01.823]                         if (!is.null(pattern)) {
[16:13:01.823]                           computeRestarts <- base::computeRestarts
[16:13:01.823]                           grepl <- base::grepl
[16:13:01.823]                           restarts <- computeRestarts(cond)
[16:13:01.823]                           for (restart in restarts) {
[16:13:01.823]                             name <- restart$name
[16:13:01.823]                             if (is.null(name)) 
[16:13:01.823]                               next
[16:13:01.823]                             if (!grepl(pattern, name)) 
[16:13:01.823]                               next
[16:13:01.823]                             invokeRestart(restart)
[16:13:01.823]                             muffled <- TRUE
[16:13:01.823]                             break
[16:13:01.823]                           }
[16:13:01.823]                         }
[16:13:01.823]                       }
[16:13:01.823]                       invisible(muffled)
[16:13:01.823]                     }
[16:13:01.823]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.823]                   }
[16:13:01.823]                 }
[16:13:01.823]             }
[16:13:01.823]         }))
[16:13:01.823]     }, error = function(ex) {
[16:13:01.823]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.823]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.823]                 ...future.rng), started = ...future.startTime, 
[16:13:01.823]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.823]             version = "1.8"), class = "FutureResult")
[16:13:01.823]     }, finally = {
[16:13:01.823]         if (!identical(...future.workdir, getwd())) 
[16:13:01.823]             setwd(...future.workdir)
[16:13:01.823]         {
[16:13:01.823]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.823]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.823]             }
[16:13:01.823]             base::options(...future.oldOptions)
[16:13:01.823]             if (.Platform$OS.type == "windows") {
[16:13:01.823]                 old_names <- names(...future.oldEnvVars)
[16:13:01.823]                 envs <- base::Sys.getenv()
[16:13:01.823]                 names <- names(envs)
[16:13:01.823]                 common <- intersect(names, old_names)
[16:13:01.823]                 added <- setdiff(names, old_names)
[16:13:01.823]                 removed <- setdiff(old_names, names)
[16:13:01.823]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.823]                   envs[common]]
[16:13:01.823]                 NAMES <- toupper(changed)
[16:13:01.823]                 args <- list()
[16:13:01.823]                 for (kk in seq_along(NAMES)) {
[16:13:01.823]                   name <- changed[[kk]]
[16:13:01.823]                   NAME <- NAMES[[kk]]
[16:13:01.823]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.823]                     next
[16:13:01.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.823]                 }
[16:13:01.823]                 NAMES <- toupper(added)
[16:13:01.823]                 for (kk in seq_along(NAMES)) {
[16:13:01.823]                   name <- added[[kk]]
[16:13:01.823]                   NAME <- NAMES[[kk]]
[16:13:01.823]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.823]                     next
[16:13:01.823]                   args[[name]] <- ""
[16:13:01.823]                 }
[16:13:01.823]                 NAMES <- toupper(removed)
[16:13:01.823]                 for (kk in seq_along(NAMES)) {
[16:13:01.823]                   name <- removed[[kk]]
[16:13:01.823]                   NAME <- NAMES[[kk]]
[16:13:01.823]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.823]                     next
[16:13:01.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.823]                 }
[16:13:01.823]                 if (length(args) > 0) 
[16:13:01.823]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.823]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.823]             }
[16:13:01.823]             else {
[16:13:01.823]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.823]             }
[16:13:01.823]             {
[16:13:01.823]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.823]                   0L) {
[16:13:01.823]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.823]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.823]                   base::options(opts)
[16:13:01.823]                 }
[16:13:01.823]                 {
[16:13:01.823]                   {
[16:13:01.823]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.823]                     NULL
[16:13:01.823]                   }
[16:13:01.823]                   options(future.plan = NULL)
[16:13:01.823]                   if (is.na(NA_character_)) 
[16:13:01.823]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.823]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.823]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.823]                     envir = parent.frame()) 
[16:13:01.823]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.823]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.823]                 }
[16:13:01.823]             }
[16:13:01.823]         }
[16:13:01.823]     })
[16:13:01.823]     if (TRUE) {
[16:13:01.823]         base::sink(type = "output", split = FALSE)
[16:13:01.823]         if (TRUE) {
[16:13:01.823]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.823]         }
[16:13:01.823]         else {
[16:13:01.823]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.823]         }
[16:13:01.823]         base::close(...future.stdout)
[16:13:01.823]         ...future.stdout <- NULL
[16:13:01.823]     }
[16:13:01.823]     ...future.result$conditions <- ...future.conditions
[16:13:01.823]     ...future.result$finished <- base::Sys.time()
[16:13:01.823]     ...future.result
[16:13:01.823] }
[16:13:01.825] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[16:13:01.829] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[16:13:01.880] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[16:13:01.880] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[16:13:01.881] MultisessionFuture started
[16:13:01.881] - Launch lazy future ... done
[16:13:01.881] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[16:13:01.881] result() for ClusterFuture ...
[16:13:01.882] receiveMessageFromWorker() for ClusterFuture ...
[16:13:01.882] - Validating connection of MultisessionFuture
[16:13:01.926] - received message: FutureResult
[16:13:01.926] - Received FutureResult
[16:13:01.926] - Erased future from FutureRegistry
[16:13:01.926] result() for ClusterFuture ...
[16:13:01.926] - result already collected: FutureResult
[16:13:01.926] result() for ClusterFuture ... done
[16:13:01.926] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:01.927] result() for ClusterFuture ... done
[16:13:01.927] result() for ClusterFuture ...
[16:13:01.927] - result already collected: FutureResult
[16:13:01.927] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[16:13:01.927] getGlobalsAndPackages() ...
[16:13:01.927] Searching for globals...
[16:13:01.928] - globals found: [1] ‘{’
[16:13:01.928] Searching for globals ... DONE
[16:13:01.928] Resolving globals: FALSE
[16:13:01.929] 
[16:13:01.929] 
[16:13:01.929] getGlobalsAndPackages() ... DONE
[16:13:01.929] run() for ‘Future’ ...
[16:13:01.929] - state: ‘created’
[16:13:01.929] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.940] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.940] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.940]   - Field: ‘node’
[16:13:01.940]   - Field: ‘label’
[16:13:01.941]   - Field: ‘local’
[16:13:01.941]   - Field: ‘owner’
[16:13:01.941]   - Field: ‘envir’
[16:13:01.941]   - Field: ‘workers’
[16:13:01.941]   - Field: ‘packages’
[16:13:01.941]   - Field: ‘gc’
[16:13:01.941]   - Field: ‘conditions’
[16:13:01.941]   - Field: ‘persistent’
[16:13:01.941]   - Field: ‘expr’
[16:13:01.941]   - Field: ‘uuid’
[16:13:01.941]   - Field: ‘seed’
[16:13:01.942]   - Field: ‘version’
[16:13:01.942]   - Field: ‘result’
[16:13:01.942]   - Field: ‘asynchronous’
[16:13:01.942]   - Field: ‘calls’
[16:13:01.942]   - Field: ‘globals’
[16:13:01.942]   - Field: ‘stdout’
[16:13:01.942]   - Field: ‘earlySignal’
[16:13:01.942]   - Field: ‘lazy’
[16:13:01.942]   - Field: ‘state’
[16:13:01.942] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.942] - Launch lazy future ...
[16:13:01.943] Packages needed by the future expression (n = 0): <none>
[16:13:01.943] Packages needed by future strategies (n = 0): <none>
[16:13:01.943] {
[16:13:01.943]     {
[16:13:01.943]         {
[16:13:01.943]             ...future.startTime <- base::Sys.time()
[16:13:01.943]             {
[16:13:01.943]                 {
[16:13:01.943]                   {
[16:13:01.943]                     {
[16:13:01.943]                       base::local({
[16:13:01.943]                         has_future <- base::requireNamespace("future", 
[16:13:01.943]                           quietly = TRUE)
[16:13:01.943]                         if (has_future) {
[16:13:01.943]                           ns <- base::getNamespace("future")
[16:13:01.943]                           version <- ns[[".package"]][["version"]]
[16:13:01.943]                           if (is.null(version)) 
[16:13:01.943]                             version <- utils::packageVersion("future")
[16:13:01.943]                         }
[16:13:01.943]                         else {
[16:13:01.943]                           version <- NULL
[16:13:01.943]                         }
[16:13:01.943]                         if (!has_future || version < "1.8.0") {
[16:13:01.943]                           info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.943]                             "", base::R.version$version.string), 
[16:13:01.943]                             platform = base::sprintf("%s (%s-bit)", 
[16:13:01.943]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:13:01.943]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.943]                               "release", "version")], collapse = " "), 
[16:13:01.943]                             hostname = base::Sys.info()[["nodename"]])
[16:13:01.943]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.943]                             info)
[16:13:01.943]                           info <- base::paste(info, collapse = "; ")
[16:13:01.943]                           if (!has_future) {
[16:13:01.943]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.943]                               info)
[16:13:01.943]                           }
[16:13:01.943]                           else {
[16:13:01.943]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.943]                               info, version)
[16:13:01.943]                           }
[16:13:01.943]                           base::stop(msg)
[16:13:01.943]                         }
[16:13:01.943]                       })
[16:13:01.943]                     }
[16:13:01.943]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.943]                     base::options(mc.cores = 1L)
[16:13:01.943]                   }
[16:13:01.943]                   options(future.plan = NULL)
[16:13:01.943]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.943]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.943]                 }
[16:13:01.943]                 ...future.workdir <- getwd()
[16:13:01.943]             }
[16:13:01.943]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.943]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.943]         }
[16:13:01.943]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.943]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.943]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.943]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.943]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.943]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.943]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.943]             base::names(...future.oldOptions))
[16:13:01.943]     }
[16:13:01.943]     if (FALSE) {
[16:13:01.943]     }
[16:13:01.943]     else {
[16:13:01.943]         if (TRUE) {
[16:13:01.943]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.943]                 open = "w")
[16:13:01.943]         }
[16:13:01.943]         else {
[16:13:01.943]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.943]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.943]         }
[16:13:01.943]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.943]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.943]             base::sink(type = "output", split = FALSE)
[16:13:01.943]             base::close(...future.stdout)
[16:13:01.943]         }, add = TRUE)
[16:13:01.943]     }
[16:13:01.943]     ...future.frame <- base::sys.nframe()
[16:13:01.943]     ...future.conditions <- base::list()
[16:13:01.943]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.943]     if (FALSE) {
[16:13:01.943]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.943]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.943]     }
[16:13:01.943]     ...future.result <- base::tryCatch({
[16:13:01.943]         base::withCallingHandlers({
[16:13:01.943]             ...future.value <- base::withVisible(base::local({
[16:13:01.943]                 ...future.makeSendCondition <- local({
[16:13:01.943]                   sendCondition <- NULL
[16:13:01.943]                   function(frame = 1L) {
[16:13:01.943]                     if (is.function(sendCondition)) 
[16:13:01.943]                       return(sendCondition)
[16:13:01.943]                     ns <- getNamespace("parallel")
[16:13:01.943]                     if (exists("sendData", mode = "function", 
[16:13:01.943]                       envir = ns)) {
[16:13:01.943]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.943]                         envir = ns)
[16:13:01.943]                       envir <- sys.frame(frame)
[16:13:01.943]                       master <- NULL
[16:13:01.943]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.943]                         !identical(envir, emptyenv())) {
[16:13:01.943]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.943]                           inherits = FALSE)) {
[16:13:01.943]                           master <- get("master", mode = "list", 
[16:13:01.943]                             envir = envir, inherits = FALSE)
[16:13:01.943]                           if (inherits(master, c("SOCKnode", 
[16:13:01.943]                             "SOCK0node"))) {
[16:13:01.943]                             sendCondition <<- function(cond) {
[16:13:01.943]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.943]                                 success = TRUE)
[16:13:01.943]                               parallel_sendData(master, data)
[16:13:01.943]                             }
[16:13:01.943]                             return(sendCondition)
[16:13:01.943]                           }
[16:13:01.943]                         }
[16:13:01.943]                         frame <- frame + 1L
[16:13:01.943]                         envir <- sys.frame(frame)
[16:13:01.943]                       }
[16:13:01.943]                     }
[16:13:01.943]                     sendCondition <<- function(cond) NULL
[16:13:01.943]                   }
[16:13:01.943]                 })
[16:13:01.943]                 withCallingHandlers({
[16:13:01.943]                   {
[16:13:01.943]                     42L
[16:13:01.943]                   }
[16:13:01.943]                 }, immediateCondition = function(cond) {
[16:13:01.943]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.943]                   sendCondition(cond)
[16:13:01.943]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.943]                   {
[16:13:01.943]                     inherits <- base::inherits
[16:13:01.943]                     invokeRestart <- base::invokeRestart
[16:13:01.943]                     is.null <- base::is.null
[16:13:01.943]                     muffled <- FALSE
[16:13:01.943]                     if (inherits(cond, "message")) {
[16:13:01.943]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.943]                       if (muffled) 
[16:13:01.943]                         invokeRestart("muffleMessage")
[16:13:01.943]                     }
[16:13:01.943]                     else if (inherits(cond, "warning")) {
[16:13:01.943]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.943]                       if (muffled) 
[16:13:01.943]                         invokeRestart("muffleWarning")
[16:13:01.943]                     }
[16:13:01.943]                     else if (inherits(cond, "condition")) {
[16:13:01.943]                       if (!is.null(pattern)) {
[16:13:01.943]                         computeRestarts <- base::computeRestarts
[16:13:01.943]                         grepl <- base::grepl
[16:13:01.943]                         restarts <- computeRestarts(cond)
[16:13:01.943]                         for (restart in restarts) {
[16:13:01.943]                           name <- restart$name
[16:13:01.943]                           if (is.null(name)) 
[16:13:01.943]                             next
[16:13:01.943]                           if (!grepl(pattern, name)) 
[16:13:01.943]                             next
[16:13:01.943]                           invokeRestart(restart)
[16:13:01.943]                           muffled <- TRUE
[16:13:01.943]                           break
[16:13:01.943]                         }
[16:13:01.943]                       }
[16:13:01.943]                     }
[16:13:01.943]                     invisible(muffled)
[16:13:01.943]                   }
[16:13:01.943]                   muffleCondition(cond)
[16:13:01.943]                 })
[16:13:01.943]             }))
[16:13:01.943]             future::FutureResult(value = ...future.value$value, 
[16:13:01.943]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.943]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.943]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.943]                     ...future.globalenv.names))
[16:13:01.943]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.943]         }, condition = base::local({
[16:13:01.943]             c <- base::c
[16:13:01.943]             inherits <- base::inherits
[16:13:01.943]             invokeRestart <- base::invokeRestart
[16:13:01.943]             length <- base::length
[16:13:01.943]             list <- base::list
[16:13:01.943]             seq.int <- base::seq.int
[16:13:01.943]             signalCondition <- base::signalCondition
[16:13:01.943]             sys.calls <- base::sys.calls
[16:13:01.943]             `[[` <- base::`[[`
[16:13:01.943]             `+` <- base::`+`
[16:13:01.943]             `<<-` <- base::`<<-`
[16:13:01.943]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.943]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.943]                   3L)]
[16:13:01.943]             }
[16:13:01.943]             function(cond) {
[16:13:01.943]                 is_error <- inherits(cond, "error")
[16:13:01.943]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.943]                   NULL)
[16:13:01.943]                 if (is_error) {
[16:13:01.943]                   sessionInformation <- function() {
[16:13:01.943]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.943]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.943]                       search = base::search(), system = base::Sys.info())
[16:13:01.943]                   }
[16:13:01.943]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.943]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.943]                     cond$call), session = sessionInformation(), 
[16:13:01.943]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.943]                   signalCondition(cond)
[16:13:01.943]                 }
[16:13:01.943]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.943]                 "immediateCondition"))) {
[16:13:01.943]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.943]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.943]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.943]                   if (TRUE && !signal) {
[16:13:01.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.943]                     {
[16:13:01.943]                       inherits <- base::inherits
[16:13:01.943]                       invokeRestart <- base::invokeRestart
[16:13:01.943]                       is.null <- base::is.null
[16:13:01.943]                       muffled <- FALSE
[16:13:01.943]                       if (inherits(cond, "message")) {
[16:13:01.943]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.943]                         if (muffled) 
[16:13:01.943]                           invokeRestart("muffleMessage")
[16:13:01.943]                       }
[16:13:01.943]                       else if (inherits(cond, "warning")) {
[16:13:01.943]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.943]                         if (muffled) 
[16:13:01.943]                           invokeRestart("muffleWarning")
[16:13:01.943]                       }
[16:13:01.943]                       else if (inherits(cond, "condition")) {
[16:13:01.943]                         if (!is.null(pattern)) {
[16:13:01.943]                           computeRestarts <- base::computeRestarts
[16:13:01.943]                           grepl <- base::grepl
[16:13:01.943]                           restarts <- computeRestarts(cond)
[16:13:01.943]                           for (restart in restarts) {
[16:13:01.943]                             name <- restart$name
[16:13:01.943]                             if (is.null(name)) 
[16:13:01.943]                               next
[16:13:01.943]                             if (!grepl(pattern, name)) 
[16:13:01.943]                               next
[16:13:01.943]                             invokeRestart(restart)
[16:13:01.943]                             muffled <- TRUE
[16:13:01.943]                             break
[16:13:01.943]                           }
[16:13:01.943]                         }
[16:13:01.943]                       }
[16:13:01.943]                       invisible(muffled)
[16:13:01.943]                     }
[16:13:01.943]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.943]                   }
[16:13:01.943]                 }
[16:13:01.943]                 else {
[16:13:01.943]                   if (TRUE) {
[16:13:01.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.943]                     {
[16:13:01.943]                       inherits <- base::inherits
[16:13:01.943]                       invokeRestart <- base::invokeRestart
[16:13:01.943]                       is.null <- base::is.null
[16:13:01.943]                       muffled <- FALSE
[16:13:01.943]                       if (inherits(cond, "message")) {
[16:13:01.943]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.943]                         if (muffled) 
[16:13:01.943]                           invokeRestart("muffleMessage")
[16:13:01.943]                       }
[16:13:01.943]                       else if (inherits(cond, "warning")) {
[16:13:01.943]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.943]                         if (muffled) 
[16:13:01.943]                           invokeRestart("muffleWarning")
[16:13:01.943]                       }
[16:13:01.943]                       else if (inherits(cond, "condition")) {
[16:13:01.943]                         if (!is.null(pattern)) {
[16:13:01.943]                           computeRestarts <- base::computeRestarts
[16:13:01.943]                           grepl <- base::grepl
[16:13:01.943]                           restarts <- computeRestarts(cond)
[16:13:01.943]                           for (restart in restarts) {
[16:13:01.943]                             name <- restart$name
[16:13:01.943]                             if (is.null(name)) 
[16:13:01.943]                               next
[16:13:01.943]                             if (!grepl(pattern, name)) 
[16:13:01.943]                               next
[16:13:01.943]                             invokeRestart(restart)
[16:13:01.943]                             muffled <- TRUE
[16:13:01.943]                             break
[16:13:01.943]                           }
[16:13:01.943]                         }
[16:13:01.943]                       }
[16:13:01.943]                       invisible(muffled)
[16:13:01.943]                     }
[16:13:01.943]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.943]                   }
[16:13:01.943]                 }
[16:13:01.943]             }
[16:13:01.943]         }))
[16:13:01.943]     }, error = function(ex) {
[16:13:01.943]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.943]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.943]                 ...future.rng), started = ...future.startTime, 
[16:13:01.943]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.943]             version = "1.8"), class = "FutureResult")
[16:13:01.943]     }, finally = {
[16:13:01.943]         if (!identical(...future.workdir, getwd())) 
[16:13:01.943]             setwd(...future.workdir)
[16:13:01.943]         {
[16:13:01.943]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.943]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.943]             }
[16:13:01.943]             base::options(...future.oldOptions)
[16:13:01.943]             if (.Platform$OS.type == "windows") {
[16:13:01.943]                 old_names <- names(...future.oldEnvVars)
[16:13:01.943]                 envs <- base::Sys.getenv()
[16:13:01.943]                 names <- names(envs)
[16:13:01.943]                 common <- intersect(names, old_names)
[16:13:01.943]                 added <- setdiff(names, old_names)
[16:13:01.943]                 removed <- setdiff(old_names, names)
[16:13:01.943]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.943]                   envs[common]]
[16:13:01.943]                 NAMES <- toupper(changed)
[16:13:01.943]                 args <- list()
[16:13:01.943]                 for (kk in seq_along(NAMES)) {
[16:13:01.943]                   name <- changed[[kk]]
[16:13:01.943]                   NAME <- NAMES[[kk]]
[16:13:01.943]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.943]                     next
[16:13:01.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.943]                 }
[16:13:01.943]                 NAMES <- toupper(added)
[16:13:01.943]                 for (kk in seq_along(NAMES)) {
[16:13:01.943]                   name <- added[[kk]]
[16:13:01.943]                   NAME <- NAMES[[kk]]
[16:13:01.943]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.943]                     next
[16:13:01.943]                   args[[name]] <- ""
[16:13:01.943]                 }
[16:13:01.943]                 NAMES <- toupper(removed)
[16:13:01.943]                 for (kk in seq_along(NAMES)) {
[16:13:01.943]                   name <- removed[[kk]]
[16:13:01.943]                   NAME <- NAMES[[kk]]
[16:13:01.943]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.943]                     next
[16:13:01.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.943]                 }
[16:13:01.943]                 if (length(args) > 0) 
[16:13:01.943]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.943]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.943]             }
[16:13:01.943]             else {
[16:13:01.943]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.943]             }
[16:13:01.943]             {
[16:13:01.943]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.943]                   0L) {
[16:13:01.943]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.943]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.943]                   base::options(opts)
[16:13:01.943]                 }
[16:13:01.943]                 {
[16:13:01.943]                   {
[16:13:01.943]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.943]                     NULL
[16:13:01.943]                   }
[16:13:01.943]                   options(future.plan = NULL)
[16:13:01.943]                   if (is.na(NA_character_)) 
[16:13:01.943]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.943]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.943]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.943]                     envir = parent.frame()) 
[16:13:01.943]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.943]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.943]                 }
[16:13:01.943]             }
[16:13:01.943]         }
[16:13:01.943]     })
[16:13:01.943]     if (TRUE) {
[16:13:01.943]         base::sink(type = "output", split = FALSE)
[16:13:01.943]         if (TRUE) {
[16:13:01.943]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.943]         }
[16:13:01.943]         else {
[16:13:01.943]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.943]         }
[16:13:01.943]         base::close(...future.stdout)
[16:13:01.943]         ...future.stdout <- NULL
[16:13:01.943]     }
[16:13:01.943]     ...future.result$conditions <- ...future.conditions
[16:13:01.943]     ...future.result$finished <- base::Sys.time()
[16:13:01.943]     ...future.result
[16:13:01.943] }
[16:13:01.946] MultisessionFuture started
[16:13:01.946] - Launch lazy future ... done
[16:13:01.946] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[16:13:01.947] getGlobalsAndPackages() ...
[16:13:01.947] Searching for globals...
[16:13:01.948] - globals found: [3] ‘{’, ‘value’, ‘f1’
[16:13:01.948] Searching for globals ... DONE
[16:13:01.948] Resolving globals: FALSE
[16:13:01.950] The total size of the 1 globals is 1.54 MiB (1609848 bytes)
[16:13:01.950] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[16:13:01.951] - globals: [1] ‘f1’
[16:13:01.951] - packages: [1] ‘future’
[16:13:01.951] getGlobalsAndPackages() ... DONE
[16:13:01.951] run() for ‘Future’ ...
[16:13:01.951] - state: ‘created’
[16:13:01.951] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:13:01.962] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:13:01.962] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:13:01.962]   - Field: ‘node’
[16:13:01.963]   - Field: ‘label’
[16:13:01.963]   - Field: ‘local’
[16:13:01.963]   - Field: ‘owner’
[16:13:01.963]   - Field: ‘envir’
[16:13:01.963]   - Field: ‘workers’
[16:13:01.963]   - Field: ‘packages’
[16:13:01.963]   - Field: ‘gc’
[16:13:01.963]   - Field: ‘conditions’
[16:13:01.963]   - Field: ‘persistent’
[16:13:01.963]   - Field: ‘expr’
[16:13:01.963]   - Field: ‘uuid’
[16:13:01.964]   - Field: ‘seed’
[16:13:01.964]   - Field: ‘version’
[16:13:01.964]   - Field: ‘result’
[16:13:01.964]   - Field: ‘asynchronous’
[16:13:01.964]   - Field: ‘calls’
[16:13:01.964]   - Field: ‘globals’
[16:13:01.964]   - Field: ‘stdout’
[16:13:01.964]   - Field: ‘earlySignal’
[16:13:01.964]   - Field: ‘lazy’
[16:13:01.964]   - Field: ‘state’
[16:13:01.964] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:13:01.965] - Launch lazy future ...
[16:13:01.965] Packages needed by the future expression (n = 1): ‘future’
[16:13:01.965] Packages needed by future strategies (n = 0): <none>
[16:13:01.965] {
[16:13:01.965]     {
[16:13:01.965]         {
[16:13:01.965]             ...future.startTime <- base::Sys.time()
[16:13:01.965]             {
[16:13:01.965]                 {
[16:13:01.965]                   {
[16:13:01.965]                     {
[16:13:01.965]                       {
[16:13:01.965]                         base::local({
[16:13:01.965]                           has_future <- base::requireNamespace("future", 
[16:13:01.965]                             quietly = TRUE)
[16:13:01.965]                           if (has_future) {
[16:13:01.965]                             ns <- base::getNamespace("future")
[16:13:01.965]                             version <- ns[[".package"]][["version"]]
[16:13:01.965]                             if (is.null(version)) 
[16:13:01.965]                               version <- utils::packageVersion("future")
[16:13:01.965]                           }
[16:13:01.965]                           else {
[16:13:01.965]                             version <- NULL
[16:13:01.965]                           }
[16:13:01.965]                           if (!has_future || version < "1.8.0") {
[16:13:01.965]                             info <- base::c(r_version = base::gsub("R version ", 
[16:13:01.965]                               "", base::R.version$version.string), 
[16:13:01.965]                               platform = base::sprintf("%s (%s-bit)", 
[16:13:01.965]                                 base::R.version$platform, 8 * 
[16:13:01.965]                                   base::.Machine$sizeof.pointer), 
[16:13:01.965]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:13:01.965]                                 "release", "version")], collapse = " "), 
[16:13:01.965]                               hostname = base::Sys.info()[["nodename"]])
[16:13:01.965]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:13:01.965]                               info)
[16:13:01.965]                             info <- base::paste(info, collapse = "; ")
[16:13:01.965]                             if (!has_future) {
[16:13:01.965]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:13:01.965]                                 info)
[16:13:01.965]                             }
[16:13:01.965]                             else {
[16:13:01.965]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:13:01.965]                                 info, version)
[16:13:01.965]                             }
[16:13:01.965]                             base::stop(msg)
[16:13:01.965]                           }
[16:13:01.965]                         })
[16:13:01.965]                       }
[16:13:01.965]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:13:01.965]                       base::options(mc.cores = 1L)
[16:13:01.965]                     }
[16:13:01.965]                     base::local({
[16:13:01.965]                       for (pkg in "future") {
[16:13:01.965]                         base::loadNamespace(pkg)
[16:13:01.965]                         base::library(pkg, character.only = TRUE)
[16:13:01.965]                       }
[16:13:01.965]                     })
[16:13:01.965]                   }
[16:13:01.965]                   options(future.plan = NULL)
[16:13:01.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:13:01.965]                 }
[16:13:01.965]                 ...future.workdir <- getwd()
[16:13:01.965]             }
[16:13:01.965]             ...future.oldOptions <- base::as.list(base::.Options)
[16:13:01.965]             ...future.oldEnvVars <- base::Sys.getenv()
[16:13:01.965]         }
[16:13:01.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:13:01.965]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:13:01.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:13:01.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:13:01.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:13:01.965]             future.stdout.windows.reencode = NULL, width = 80L)
[16:13:01.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:13:01.965]             base::names(...future.oldOptions))
[16:13:01.965]     }
[16:13:01.965]     if (FALSE) {
[16:13:01.965]     }
[16:13:01.965]     else {
[16:13:01.965]         if (TRUE) {
[16:13:01.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:13:01.965]                 open = "w")
[16:13:01.965]         }
[16:13:01.965]         else {
[16:13:01.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:13:01.965]                 windows = "NUL", "/dev/null"), open = "w")
[16:13:01.965]         }
[16:13:01.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:13:01.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:13:01.965]             base::sink(type = "output", split = FALSE)
[16:13:01.965]             base::close(...future.stdout)
[16:13:01.965]         }, add = TRUE)
[16:13:01.965]     }
[16:13:01.965]     ...future.frame <- base::sys.nframe()
[16:13:01.965]     ...future.conditions <- base::list()
[16:13:01.965]     ...future.rng <- base::globalenv()$.Random.seed
[16:13:01.965]     if (FALSE) {
[16:13:01.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:13:01.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:13:01.965]     }
[16:13:01.965]     ...future.result <- base::tryCatch({
[16:13:01.965]         base::withCallingHandlers({
[16:13:01.965]             ...future.value <- base::withVisible(base::local({
[16:13:01.965]                 ...future.makeSendCondition <- local({
[16:13:01.965]                   sendCondition <- NULL
[16:13:01.965]                   function(frame = 1L) {
[16:13:01.965]                     if (is.function(sendCondition)) 
[16:13:01.965]                       return(sendCondition)
[16:13:01.965]                     ns <- getNamespace("parallel")
[16:13:01.965]                     if (exists("sendData", mode = "function", 
[16:13:01.965]                       envir = ns)) {
[16:13:01.965]                       parallel_sendData <- get("sendData", mode = "function", 
[16:13:01.965]                         envir = ns)
[16:13:01.965]                       envir <- sys.frame(frame)
[16:13:01.965]                       master <- NULL
[16:13:01.965]                       while (!identical(envir, .GlobalEnv) && 
[16:13:01.965]                         !identical(envir, emptyenv())) {
[16:13:01.965]                         if (exists("master", mode = "list", envir = envir, 
[16:13:01.965]                           inherits = FALSE)) {
[16:13:01.965]                           master <- get("master", mode = "list", 
[16:13:01.965]                             envir = envir, inherits = FALSE)
[16:13:01.965]                           if (inherits(master, c("SOCKnode", 
[16:13:01.965]                             "SOCK0node"))) {
[16:13:01.965]                             sendCondition <<- function(cond) {
[16:13:01.965]                               data <- list(type = "VALUE", value = cond, 
[16:13:01.965]                                 success = TRUE)
[16:13:01.965]                               parallel_sendData(master, data)
[16:13:01.965]                             }
[16:13:01.965]                             return(sendCondition)
[16:13:01.965]                           }
[16:13:01.965]                         }
[16:13:01.965]                         frame <- frame + 1L
[16:13:01.965]                         envir <- sys.frame(frame)
[16:13:01.965]                       }
[16:13:01.965]                     }
[16:13:01.965]                     sendCondition <<- function(cond) NULL
[16:13:01.965]                   }
[16:13:01.965]                 })
[16:13:01.965]                 withCallingHandlers({
[16:13:01.965]                   {
[16:13:01.965]                     value(f1)
[16:13:01.965]                   }
[16:13:01.965]                 }, immediateCondition = function(cond) {
[16:13:01.965]                   sendCondition <- ...future.makeSendCondition()
[16:13:01.965]                   sendCondition(cond)
[16:13:01.965]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.965]                   {
[16:13:01.965]                     inherits <- base::inherits
[16:13:01.965]                     invokeRestart <- base::invokeRestart
[16:13:01.965]                     is.null <- base::is.null
[16:13:01.965]                     muffled <- FALSE
[16:13:01.965]                     if (inherits(cond, "message")) {
[16:13:01.965]                       muffled <- grepl(pattern, "muffleMessage")
[16:13:01.965]                       if (muffled) 
[16:13:01.965]                         invokeRestart("muffleMessage")
[16:13:01.965]                     }
[16:13:01.965]                     else if (inherits(cond, "warning")) {
[16:13:01.965]                       muffled <- grepl(pattern, "muffleWarning")
[16:13:01.965]                       if (muffled) 
[16:13:01.965]                         invokeRestart("muffleWarning")
[16:13:01.965]                     }
[16:13:01.965]                     else if (inherits(cond, "condition")) {
[16:13:01.965]                       if (!is.null(pattern)) {
[16:13:01.965]                         computeRestarts <- base::computeRestarts
[16:13:01.965]                         grepl <- base::grepl
[16:13:01.965]                         restarts <- computeRestarts(cond)
[16:13:01.965]                         for (restart in restarts) {
[16:13:01.965]                           name <- restart$name
[16:13:01.965]                           if (is.null(name)) 
[16:13:01.965]                             next
[16:13:01.965]                           if (!grepl(pattern, name)) 
[16:13:01.965]                             next
[16:13:01.965]                           invokeRestart(restart)
[16:13:01.965]                           muffled <- TRUE
[16:13:01.965]                           break
[16:13:01.965]                         }
[16:13:01.965]                       }
[16:13:01.965]                     }
[16:13:01.965]                     invisible(muffled)
[16:13:01.965]                   }
[16:13:01.965]                   muffleCondition(cond)
[16:13:01.965]                 })
[16:13:01.965]             }))
[16:13:01.965]             future::FutureResult(value = ...future.value$value, 
[16:13:01.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.965]                   ...future.rng), globalenv = if (FALSE) 
[16:13:01.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:13:01.965]                     ...future.globalenv.names))
[16:13:01.965]                 else NULL, started = ...future.startTime, version = "1.8")
[16:13:01.965]         }, condition = base::local({
[16:13:01.965]             c <- base::c
[16:13:01.965]             inherits <- base::inherits
[16:13:01.965]             invokeRestart <- base::invokeRestart
[16:13:01.965]             length <- base::length
[16:13:01.965]             list <- base::list
[16:13:01.965]             seq.int <- base::seq.int
[16:13:01.965]             signalCondition <- base::signalCondition
[16:13:01.965]             sys.calls <- base::sys.calls
[16:13:01.965]             `[[` <- base::`[[`
[16:13:01.965]             `+` <- base::`+`
[16:13:01.965]             `<<-` <- base::`<<-`
[16:13:01.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:13:01.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:13:01.965]                   3L)]
[16:13:01.965]             }
[16:13:01.965]             function(cond) {
[16:13:01.965]                 is_error <- inherits(cond, "error")
[16:13:01.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:13:01.965]                   NULL)
[16:13:01.965]                 if (is_error) {
[16:13:01.965]                   sessionInformation <- function() {
[16:13:01.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:13:01.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:13:01.965]                       search = base::search(), system = base::Sys.info())
[16:13:01.965]                   }
[16:13:01.965]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:13:01.965]                     cond$call), session = sessionInformation(), 
[16:13:01.965]                     timestamp = base::Sys.time(), signaled = 0L)
[16:13:01.965]                   signalCondition(cond)
[16:13:01.965]                 }
[16:13:01.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:13:01.965]                 "immediateCondition"))) {
[16:13:01.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:13:01.965]                   ...future.conditions[[length(...future.conditions) + 
[16:13:01.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:13:01.965]                   if (TRUE && !signal) {
[16:13:01.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.965]                     {
[16:13:01.965]                       inherits <- base::inherits
[16:13:01.965]                       invokeRestart <- base::invokeRestart
[16:13:01.965]                       is.null <- base::is.null
[16:13:01.965]                       muffled <- FALSE
[16:13:01.965]                       if (inherits(cond, "message")) {
[16:13:01.965]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.965]                         if (muffled) 
[16:13:01.965]                           invokeRestart("muffleMessage")
[16:13:01.965]                       }
[16:13:01.965]                       else if (inherits(cond, "warning")) {
[16:13:01.965]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.965]                         if (muffled) 
[16:13:01.965]                           invokeRestart("muffleWarning")
[16:13:01.965]                       }
[16:13:01.965]                       else if (inherits(cond, "condition")) {
[16:13:01.965]                         if (!is.null(pattern)) {
[16:13:01.965]                           computeRestarts <- base::computeRestarts
[16:13:01.965]                           grepl <- base::grepl
[16:13:01.965]                           restarts <- computeRestarts(cond)
[16:13:01.965]                           for (restart in restarts) {
[16:13:01.965]                             name <- restart$name
[16:13:01.965]                             if (is.null(name)) 
[16:13:01.965]                               next
[16:13:01.965]                             if (!grepl(pattern, name)) 
[16:13:01.965]                               next
[16:13:01.965]                             invokeRestart(restart)
[16:13:01.965]                             muffled <- TRUE
[16:13:01.965]                             break
[16:13:01.965]                           }
[16:13:01.965]                         }
[16:13:01.965]                       }
[16:13:01.965]                       invisible(muffled)
[16:13:01.965]                     }
[16:13:01.965]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.965]                   }
[16:13:01.965]                 }
[16:13:01.965]                 else {
[16:13:01.965]                   if (TRUE) {
[16:13:01.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:13:01.965]                     {
[16:13:01.965]                       inherits <- base::inherits
[16:13:01.965]                       invokeRestart <- base::invokeRestart
[16:13:01.965]                       is.null <- base::is.null
[16:13:01.965]                       muffled <- FALSE
[16:13:01.965]                       if (inherits(cond, "message")) {
[16:13:01.965]                         muffled <- grepl(pattern, "muffleMessage")
[16:13:01.965]                         if (muffled) 
[16:13:01.965]                           invokeRestart("muffleMessage")
[16:13:01.965]                       }
[16:13:01.965]                       else if (inherits(cond, "warning")) {
[16:13:01.965]                         muffled <- grepl(pattern, "muffleWarning")
[16:13:01.965]                         if (muffled) 
[16:13:01.965]                           invokeRestart("muffleWarning")
[16:13:01.965]                       }
[16:13:01.965]                       else if (inherits(cond, "condition")) {
[16:13:01.965]                         if (!is.null(pattern)) {
[16:13:01.965]                           computeRestarts <- base::computeRestarts
[16:13:01.965]                           grepl <- base::grepl
[16:13:01.965]                           restarts <- computeRestarts(cond)
[16:13:01.965]                           for (restart in restarts) {
[16:13:01.965]                             name <- restart$name
[16:13:01.965]                             if (is.null(name)) 
[16:13:01.965]                               next
[16:13:01.965]                             if (!grepl(pattern, name)) 
[16:13:01.965]                               next
[16:13:01.965]                             invokeRestart(restart)
[16:13:01.965]                             muffled <- TRUE
[16:13:01.965]                             break
[16:13:01.965]                           }
[16:13:01.965]                         }
[16:13:01.965]                       }
[16:13:01.965]                       invisible(muffled)
[16:13:01.965]                     }
[16:13:01.965]                     muffleCondition(cond, pattern = "^muffle")
[16:13:01.965]                   }
[16:13:01.965]                 }
[16:13:01.965]             }
[16:13:01.965]         }))
[16:13:01.965]     }, error = function(ex) {
[16:13:01.965]         base::structure(base::list(value = NULL, visible = NULL, 
[16:13:01.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:13:01.965]                 ...future.rng), started = ...future.startTime, 
[16:13:01.965]             finished = Sys.time(), session_uuid = NA_character_, 
[16:13:01.965]             version = "1.8"), class = "FutureResult")
[16:13:01.965]     }, finally = {
[16:13:01.965]         if (!identical(...future.workdir, getwd())) 
[16:13:01.965]             setwd(...future.workdir)
[16:13:01.965]         {
[16:13:01.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:13:01.965]                 ...future.oldOptions$nwarnings <- NULL
[16:13:01.965]             }
[16:13:01.965]             base::options(...future.oldOptions)
[16:13:01.965]             if (.Platform$OS.type == "windows") {
[16:13:01.965]                 old_names <- names(...future.oldEnvVars)
[16:13:01.965]                 envs <- base::Sys.getenv()
[16:13:01.965]                 names <- names(envs)
[16:13:01.965]                 common <- intersect(names, old_names)
[16:13:01.965]                 added <- setdiff(names, old_names)
[16:13:01.965]                 removed <- setdiff(old_names, names)
[16:13:01.965]                 changed <- common[...future.oldEnvVars[common] != 
[16:13:01.965]                   envs[common]]
[16:13:01.965]                 NAMES <- toupper(changed)
[16:13:01.965]                 args <- list()
[16:13:01.965]                 for (kk in seq_along(NAMES)) {
[16:13:01.965]                   name <- changed[[kk]]
[16:13:01.965]                   NAME <- NAMES[[kk]]
[16:13:01.965]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.965]                     next
[16:13:01.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.965]                 }
[16:13:01.965]                 NAMES <- toupper(added)
[16:13:01.965]                 for (kk in seq_along(NAMES)) {
[16:13:01.965]                   name <- added[[kk]]
[16:13:01.965]                   NAME <- NAMES[[kk]]
[16:13:01.965]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.965]                     next
[16:13:01.965]                   args[[name]] <- ""
[16:13:01.965]                 }
[16:13:01.965]                 NAMES <- toupper(removed)
[16:13:01.965]                 for (kk in seq_along(NAMES)) {
[16:13:01.965]                   name <- removed[[kk]]
[16:13:01.965]                   NAME <- NAMES[[kk]]
[16:13:01.965]                   if (name != NAME && is.element(NAME, old_names)) 
[16:13:01.965]                     next
[16:13:01.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:13:01.965]                 }
[16:13:01.965]                 if (length(args) > 0) 
[16:13:01.965]                   base::do.call(base::Sys.setenv, args = args)
[16:13:01.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:13:01.965]             }
[16:13:01.965]             else {
[16:13:01.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:13:01.965]             }
[16:13:01.965]             {
[16:13:01.965]                 if (base::length(...future.futureOptionsAdded) > 
[16:13:01.965]                   0L) {
[16:13:01.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:13:01.965]                   base::names(opts) <- ...future.futureOptionsAdded
[16:13:01.965]                   base::options(opts)
[16:13:01.965]                 }
[16:13:01.965]                 {
[16:13:01.965]                   {
[16:13:01.965]                     base::options(mc.cores = ...future.mc.cores.old)
[16:13:01.965]                     NULL
[16:13:01.965]                   }
[16:13:01.965]                   options(future.plan = NULL)
[16:13:01.965]                   if (is.na(NA_character_)) 
[16:13:01.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:13:01.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:13:01.965]                   future::plan(list(function (..., workers = 2L, 
[16:13:01.965]                     envir = parent.frame()) 
[16:13:01.965]                   strategy(..., workers = workers, envir = envir)), 
[16:13:01.965]                     .cleanup = FALSE, .init = FALSE)
[16:13:01.965]                 }
[16:13:01.965]             }
[16:13:01.965]         }
[16:13:01.965]     })
[16:13:01.965]     if (TRUE) {
[16:13:01.965]         base::sink(type = "output", split = FALSE)
[16:13:01.965]         if (TRUE) {
[16:13:01.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:13:01.965]         }
[16:13:01.965]         else {
[16:13:01.965]             ...future.result["stdout"] <- base::list(NULL)
[16:13:01.965]         }
[16:13:01.965]         base::close(...future.stdout)
[16:13:01.965]         ...future.stdout <- NULL
[16:13:01.965]     }
[16:13:01.965]     ...future.result$conditions <- ...future.conditions
[16:13:01.965]     ...future.result$finished <- base::Sys.time()
[16:13:01.965]     ...future.result
[16:13:01.965] }
[16:13:02.036] Exporting 1 global objects (1.54 MiB) to cluster node #2 ...
[16:13:02.038] Exporting ‘f1’ (1.54 MiB) to cluster node #2 ...
[16:13:02.092] Exporting ‘f1’ (1.54 MiB) to cluster node #2 ... DONE
[16:13:02.092] Exporting 1 global objects (1.54 MiB) to cluster node #2 ... DONE
[16:13:02.093] MultisessionFuture started
[16:13:02.093] - Launch lazy future ... done
[16:13:02.093] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.54 MiB (MultisessionFuture ‘f1’ of 1.54 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d0291e77-66bf-4023-74d2-91e696ca5c5c
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[16:13:02.110] result() for ClusterFuture ...
[16:13:02.110] receiveMessageFromWorker() for ClusterFuture ...
[16:13:02.110] - Validating connection of MultisessionFuture
[16:13:02.177] - received message: FutureResult
[16:13:02.177] - Received FutureResult
[16:13:02.177] - Erased future from FutureRegistry
[16:13:02.177] result() for ClusterFuture ...
[16:13:02.177] - result already collected: FutureResult
[16:13:02.177] result() for ClusterFuture ... done
[16:13:02.178] signalConditions() ...
[16:13:02.178]  - include = ‘immediateCondition’
[16:13:02.178]  - exclude = 
[16:13:02.178]  - resignal = FALSE
[16:13:02.178]  - Number of conditions: 1
[16:13:02.178] signalConditions() ... done
[16:13:02.178] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:02.178] result() for ClusterFuture ... done
[16:13:02.178] result() for ClusterFuture ...
[16:13:02.178] - result already collected: FutureResult
[16:13:02.178] result() for ClusterFuture ... done
[16:13:02.178] signalConditions() ...
[16:13:02.179]  - include = ‘immediateCondition’
[16:13:02.179]  - exclude = 
[16:13:02.179]  - resignal = FALSE
[16:13:02.179]  - Number of conditions: 1
[16:13:02.179] signalConditions() ... done
[16:13:02.179] Future state: ‘finished’
[16:13:02.179] result() for ClusterFuture ...
[16:13:02.179] - result already collected: FutureResult
[16:13:02.179] result() for ClusterFuture ... done
[16:13:02.179] signalConditions() ...
[16:13:02.179]  - include = ‘condition’
[16:13:02.180]  - exclude = ‘immediateCondition’
[16:13:02.180]  - resignal = TRUE
[16:13:02.180]  - Number of conditions: 1
[16:13:02.180]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[16:13:02.180] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (d0291e77-66bf-4023-74d2-91e696ca5c5c; pid 86708 on 2729ef2608da) that created it, not by any other R processes (020c7bbb-1c40-1166-e3f9-7321a5eda448; pid 86760 on 2729ef2608da): {; 42L; }>


Future UUID: 685a90b2-bef8-f0e8-9d63-41ba453a61be


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: d0291e77-66bf-4023-74d2-91e696ca5c5c
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[16:13:02.181] result() for ClusterFuture ...
[16:13:02.181] receiveMessageFromWorker() for ClusterFuture ...
[16:13:02.181] - Validating connection of MultisessionFuture
[16:13:02.181] - received message: FutureResult
[16:13:02.182] - Received FutureResult
[16:13:02.182] - Erased future from FutureRegistry
[16:13:02.182] result() for ClusterFuture ...
[16:13:02.182] - result already collected: FutureResult
[16:13:02.182] result() for ClusterFuture ... done
[16:13:02.182] receiveMessageFromWorker() for ClusterFuture ... done
[16:13:02.182] result() for ClusterFuture ... done
[16:13:02.182] result() for ClusterFuture ...
[16:13:02.182] - result already collected: FutureResult
[16:13:02.182] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[16:13:02.183] plan(): Setting new future strategy stack:
[16:13:02.183] List of future strategies:
[16:13:02.183] 1. FutureStrategy:
[16:13:02.183]    - args: function (..., envir = parent.frame())
[16:13:02.183]    - tweaked: FALSE
[16:13:02.183]    - call: future::plan(oplan)
[16:13:02.184] plan(): nbrOfWorkers() = 1
> 
