
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:59.976] plan(): Setting new future strategy stack:
[13:20:59.976] List of future strategies:
[13:20:59.976] 1. sequential:
[13:20:59.976]    - args: function (..., envir = parent.frame())
[13:20:59.976]    - tweaked: FALSE
[13:20:59.976]    - call: future::plan("sequential")
[13:20:59.989] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[13:21:00.001] plan(): Setting new future strategy stack:
[13:21:00.001] List of future strategies:
[13:21:00.001] 1. multisession:
[13:21:00.001]    - args: function (..., workers = 2L, envir = parent.frame())
[13:21:00.001]    - tweaked: TRUE
[13:21:00.001]    - call: plan(multisession, workers = 2L)
[13:21:00.012] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:00.012] multisession:
[13:21:00.012] - args: function (..., workers = 2L, envir = parent.frame())
[13:21:00.012] - tweaked: TRUE
[13:21:00.012] - call: plan(multisession, workers = 2L)
[13:21:00.014] getGlobalsAndPackages() ...
[13:21:00.014] Not searching for globals
[13:21:00.014] - globals: [0] <none>
[13:21:00.015] getGlobalsAndPackages() ... DONE
[13:21:00.015] [local output] makeClusterPSOCK() ...
[13:21:00.044] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:00.050] [local output] Base port: 11112
[13:21:00.050] [local output] Getting setup options for 2 cluster nodes ...
[13:21:00.050] [local output]  - Node 1 of 2 ...
[13:21:00.050] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:00.051] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp7HHB7R/worker.rank=1.parallelly.parent=87826.157128118992.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp7HHB7R/worker.rank=1.parallelly.parent=87826.157128118992.pid")'’
[13:21:00.237] - Possible to infer worker's PID: TRUE
[13:21:00.238] [local output] Rscript port: 11112

[13:21:00.238] [local output]  - Node 2 of 2 ...
[13:21:00.238] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:00.239] [local output] Rscript port: 11112

[13:21:00.239] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:00.240] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:00.240] [local output] Setting up PSOCK nodes in parallel
[13:21:00.240] List of 36
[13:21:00.240]  $ worker          : chr "localhost"
[13:21:00.240]   ..- attr(*, "localhost")= logi TRUE
[13:21:00.240]  $ master          : chr "localhost"
[13:21:00.240]  $ port            : int 11112
[13:21:00.240]  $ connectTimeout  : num 120
[13:21:00.240]  $ timeout         : num 2592000
[13:21:00.240]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:00.240]  $ homogeneous     : logi TRUE
[13:21:00.240]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:00.240]  $ rscript_envs    : NULL
[13:21:00.240]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:00.240]  $ rscript_startup : NULL
[13:21:00.240]  $ rscript_sh      : chr "sh"
[13:21:00.240]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:00.240]  $ methods         : logi TRUE
[13:21:00.240]  $ socketOptions   : chr "no-delay"
[13:21:00.240]  $ useXDR          : logi FALSE
[13:21:00.240]  $ outfile         : chr "/dev/null"
[13:21:00.240]  $ renice          : int NA
[13:21:00.240]  $ rshcmd          : NULL
[13:21:00.240]  $ user            : chr(0) 
[13:21:00.240]  $ revtunnel       : logi FALSE
[13:21:00.240]  $ rshlogfile      : NULL
[13:21:00.240]  $ rshopts         : chr(0) 
[13:21:00.240]  $ rank            : int 1
[13:21:00.240]  $ manual          : logi FALSE
[13:21:00.240]  $ dryrun          : logi FALSE
[13:21:00.240]  $ quiet           : logi FALSE
[13:21:00.240]  $ setup_strategy  : chr "parallel"
[13:21:00.240]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:00.240]  $ pidfile         : chr "/tmp/Rtmp7HHB7R/worker.rank=1.parallelly.parent=87826.157128118992.pid"
[13:21:00.240]  $ rshcmd_label    : NULL
[13:21:00.240]  $ rsh_call        : NULL
[13:21:00.240]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:00.240]  $ localMachine    : logi TRUE
[13:21:00.240]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:00.240]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:00.240]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:00.240]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:00.240]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:00.240]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:00.240]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:00.240]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:00.240]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:00.240]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:00.240]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:00.240]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:00.240]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:00.240]  $ arguments       :List of 28
[13:21:00.240]   ..$ worker          : chr "localhost"
[13:21:00.240]   ..$ master          : NULL
[13:21:00.240]   ..$ port            : int 11112
[13:21:00.240]   ..$ connectTimeout  : num 120
[13:21:00.240]   ..$ timeout         : num 2592000
[13:21:00.240]   ..$ rscript         : NULL
[13:21:00.240]   ..$ homogeneous     : NULL
[13:21:00.240]   ..$ rscript_args    : NULL
[13:21:00.240]   ..$ rscript_envs    : NULL
[13:21:00.240]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:00.240]   ..$ rscript_startup : NULL
[13:21:00.240]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:00.240]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:00.240]   ..$ methods         : logi TRUE
[13:21:00.240]   ..$ socketOptions   : chr "no-delay"
[13:21:00.240]   ..$ useXDR          : logi FALSE
[13:21:00.240]   ..$ outfile         : chr "/dev/null"
[13:21:00.240]   ..$ renice          : int NA
[13:21:00.240]   ..$ rshcmd          : NULL
[13:21:00.240]   ..$ user            : NULL
[13:21:00.240]   ..$ revtunnel       : logi NA
[13:21:00.240]   ..$ rshlogfile      : NULL
[13:21:00.240]   ..$ rshopts         : NULL
[13:21:00.240]   ..$ rank            : int 1
[13:21:00.240]   ..$ manual          : logi FALSE
[13:21:00.240]   ..$ dryrun          : logi FALSE
[13:21:00.240]   ..$ quiet           : logi FALSE
[13:21:00.240]   ..$ setup_strategy  : chr "parallel"
[13:21:00.240]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:00.259] [local output] System call to launch all workers:
[13:21:00.259] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp7HHB7R/worker.rank=1.parallelly.parent=87826.157128118992.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11112 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:00.260] [local output] Starting PSOCK main server
[13:21:00.261] [local output] Workers launched
[13:21:00.261] [local output] Waiting for workers to connect back
[13:21:00.261]  - [local output] 0 workers out of 2 ready
[13:21:00.521]  - [local output] 0 workers out of 2 ready
[13:21:00.522]  - [local output] 1 workers out of 2 ready
[13:21:00.522]  - [local output] 2 workers out of 2 ready
[13:21:00.522] [local output] Launching of workers completed
[13:21:00.522] [local output] Collecting session information from workers
[13:21:00.523] [local output]  - Worker #1 of 2
[13:21:00.523] [local output]  - Worker #2 of 2
[13:21:00.524] [local output] makeClusterPSOCK() ... done
[13:21:00.537] Packages needed by the future expression (n = 0): <none>
[13:21:00.537] Packages needed by future strategies (n = 0): <none>
[13:21:00.538] {
[13:21:00.538]     {
[13:21:00.538]         {
[13:21:00.538]             ...future.startTime <- base::Sys.time()
[13:21:00.538]             {
[13:21:00.538]                 {
[13:21:00.538]                   {
[13:21:00.538]                     {
[13:21:00.538]                       base::local({
[13:21:00.538]                         has_future <- base::requireNamespace("future", 
[13:21:00.538]                           quietly = TRUE)
[13:21:00.538]                         if (has_future) {
[13:21:00.538]                           ns <- base::getNamespace("future")
[13:21:00.538]                           version <- ns[[".package"]][["version"]]
[13:21:00.538]                           if (is.null(version)) 
[13:21:00.538]                             version <- utils::packageVersion("future")
[13:21:00.538]                         }
[13:21:00.538]                         else {
[13:21:00.538]                           version <- NULL
[13:21:00.538]                         }
[13:21:00.538]                         if (!has_future || version < "1.8.0") {
[13:21:00.538]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:00.538]                             "", base::R.version$version.string), 
[13:21:00.538]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:00.538]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:00.538]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:00.538]                               "release", "version")], collapse = " "), 
[13:21:00.538]                             hostname = base::Sys.info()[["nodename"]])
[13:21:00.538]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:00.538]                             info)
[13:21:00.538]                           info <- base::paste(info, collapse = "; ")
[13:21:00.538]                           if (!has_future) {
[13:21:00.538]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:00.538]                               info)
[13:21:00.538]                           }
[13:21:00.538]                           else {
[13:21:00.538]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:00.538]                               info, version)
[13:21:00.538]                           }
[13:21:00.538]                           base::stop(msg)
[13:21:00.538]                         }
[13:21:00.538]                       })
[13:21:00.538]                     }
[13:21:00.538]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:00.538]                     base::options(mc.cores = 1L)
[13:21:00.538]                   }
[13:21:00.538]                   options(future.plan = NULL)
[13:21:00.538]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.538]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:00.538]                 }
[13:21:00.538]                 ...future.workdir <- getwd()
[13:21:00.538]             }
[13:21:00.538]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:00.538]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:00.538]         }
[13:21:00.538]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:00.538]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:00.538]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:00.538]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:00.538]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:00.538]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:00.538]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:00.538]             base::names(...future.oldOptions))
[13:21:00.538]     }
[13:21:00.538]     if (FALSE) {
[13:21:00.538]     }
[13:21:00.538]     else {
[13:21:00.538]         if (TRUE) {
[13:21:00.538]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:00.538]                 open = "w")
[13:21:00.538]         }
[13:21:00.538]         else {
[13:21:00.538]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:00.538]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:00.538]         }
[13:21:00.538]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:00.538]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:00.538]             base::sink(type = "output", split = FALSE)
[13:21:00.538]             base::close(...future.stdout)
[13:21:00.538]         }, add = TRUE)
[13:21:00.538]     }
[13:21:00.538]     ...future.frame <- base::sys.nframe()
[13:21:00.538]     ...future.conditions <- base::list()
[13:21:00.538]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:00.538]     if (FALSE) {
[13:21:00.538]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:00.538]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:00.538]     }
[13:21:00.538]     ...future.result <- base::tryCatch({
[13:21:00.538]         base::withCallingHandlers({
[13:21:00.538]             ...future.value <- base::withVisible(base::local({
[13:21:00.538]                 ...future.makeSendCondition <- local({
[13:21:00.538]                   sendCondition <- NULL
[13:21:00.538]                   function(frame = 1L) {
[13:21:00.538]                     if (is.function(sendCondition)) 
[13:21:00.538]                       return(sendCondition)
[13:21:00.538]                     ns <- getNamespace("parallel")
[13:21:00.538]                     if (exists("sendData", mode = "function", 
[13:21:00.538]                       envir = ns)) {
[13:21:00.538]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:00.538]                         envir = ns)
[13:21:00.538]                       envir <- sys.frame(frame)
[13:21:00.538]                       master <- NULL
[13:21:00.538]                       while (!identical(envir, .GlobalEnv) && 
[13:21:00.538]                         !identical(envir, emptyenv())) {
[13:21:00.538]                         if (exists("master", mode = "list", envir = envir, 
[13:21:00.538]                           inherits = FALSE)) {
[13:21:00.538]                           master <- get("master", mode = "list", 
[13:21:00.538]                             envir = envir, inherits = FALSE)
[13:21:00.538]                           if (inherits(master, c("SOCKnode", 
[13:21:00.538]                             "SOCK0node"))) {
[13:21:00.538]                             sendCondition <<- function(cond) {
[13:21:00.538]                               data <- list(type = "VALUE", value = cond, 
[13:21:00.538]                                 success = TRUE)
[13:21:00.538]                               parallel_sendData(master, data)
[13:21:00.538]                             }
[13:21:00.538]                             return(sendCondition)
[13:21:00.538]                           }
[13:21:00.538]                         }
[13:21:00.538]                         frame <- frame + 1L
[13:21:00.538]                         envir <- sys.frame(frame)
[13:21:00.538]                       }
[13:21:00.538]                     }
[13:21:00.538]                     sendCondition <<- function(cond) NULL
[13:21:00.538]                   }
[13:21:00.538]                 })
[13:21:00.538]                 withCallingHandlers({
[13:21:00.538]                   NA
[13:21:00.538]                 }, immediateCondition = function(cond) {
[13:21:00.538]                   sendCondition <- ...future.makeSendCondition()
[13:21:00.538]                   sendCondition(cond)
[13:21:00.538]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.538]                   {
[13:21:00.538]                     inherits <- base::inherits
[13:21:00.538]                     invokeRestart <- base::invokeRestart
[13:21:00.538]                     is.null <- base::is.null
[13:21:00.538]                     muffled <- FALSE
[13:21:00.538]                     if (inherits(cond, "message")) {
[13:21:00.538]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:00.538]                       if (muffled) 
[13:21:00.538]                         invokeRestart("muffleMessage")
[13:21:00.538]                     }
[13:21:00.538]                     else if (inherits(cond, "warning")) {
[13:21:00.538]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:00.538]                       if (muffled) 
[13:21:00.538]                         invokeRestart("muffleWarning")
[13:21:00.538]                     }
[13:21:00.538]                     else if (inherits(cond, "condition")) {
[13:21:00.538]                       if (!is.null(pattern)) {
[13:21:00.538]                         computeRestarts <- base::computeRestarts
[13:21:00.538]                         grepl <- base::grepl
[13:21:00.538]                         restarts <- computeRestarts(cond)
[13:21:00.538]                         for (restart in restarts) {
[13:21:00.538]                           name <- restart$name
[13:21:00.538]                           if (is.null(name)) 
[13:21:00.538]                             next
[13:21:00.538]                           if (!grepl(pattern, name)) 
[13:21:00.538]                             next
[13:21:00.538]                           invokeRestart(restart)
[13:21:00.538]                           muffled <- TRUE
[13:21:00.538]                           break
[13:21:00.538]                         }
[13:21:00.538]                       }
[13:21:00.538]                     }
[13:21:00.538]                     invisible(muffled)
[13:21:00.538]                   }
[13:21:00.538]                   muffleCondition(cond)
[13:21:00.538]                 })
[13:21:00.538]             }))
[13:21:00.538]             future::FutureResult(value = ...future.value$value, 
[13:21:00.538]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.538]                   ...future.rng), globalenv = if (FALSE) 
[13:21:00.538]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:00.538]                     ...future.globalenv.names))
[13:21:00.538]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:00.538]         }, condition = base::local({
[13:21:00.538]             c <- base::c
[13:21:00.538]             inherits <- base::inherits
[13:21:00.538]             invokeRestart <- base::invokeRestart
[13:21:00.538]             length <- base::length
[13:21:00.538]             list <- base::list
[13:21:00.538]             seq.int <- base::seq.int
[13:21:00.538]             signalCondition <- base::signalCondition
[13:21:00.538]             sys.calls <- base::sys.calls
[13:21:00.538]             `[[` <- base::`[[`
[13:21:00.538]             `+` <- base::`+`
[13:21:00.538]             `<<-` <- base::`<<-`
[13:21:00.538]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:00.538]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:00.538]                   3L)]
[13:21:00.538]             }
[13:21:00.538]             function(cond) {
[13:21:00.538]                 is_error <- inherits(cond, "error")
[13:21:00.538]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:00.538]                   NULL)
[13:21:00.538]                 if (is_error) {
[13:21:00.538]                   sessionInformation <- function() {
[13:21:00.538]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:00.538]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:00.538]                       search = base::search(), system = base::Sys.info())
[13:21:00.538]                   }
[13:21:00.538]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.538]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:00.538]                     cond$call), session = sessionInformation(), 
[13:21:00.538]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:00.538]                   signalCondition(cond)
[13:21:00.538]                 }
[13:21:00.538]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:00.538]                 "immediateCondition"))) {
[13:21:00.538]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:00.538]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.538]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:00.538]                   if (TRUE && !signal) {
[13:21:00.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.538]                     {
[13:21:00.538]                       inherits <- base::inherits
[13:21:00.538]                       invokeRestart <- base::invokeRestart
[13:21:00.538]                       is.null <- base::is.null
[13:21:00.538]                       muffled <- FALSE
[13:21:00.538]                       if (inherits(cond, "message")) {
[13:21:00.538]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.538]                         if (muffled) 
[13:21:00.538]                           invokeRestart("muffleMessage")
[13:21:00.538]                       }
[13:21:00.538]                       else if (inherits(cond, "warning")) {
[13:21:00.538]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.538]                         if (muffled) 
[13:21:00.538]                           invokeRestart("muffleWarning")
[13:21:00.538]                       }
[13:21:00.538]                       else if (inherits(cond, "condition")) {
[13:21:00.538]                         if (!is.null(pattern)) {
[13:21:00.538]                           computeRestarts <- base::computeRestarts
[13:21:00.538]                           grepl <- base::grepl
[13:21:00.538]                           restarts <- computeRestarts(cond)
[13:21:00.538]                           for (restart in restarts) {
[13:21:00.538]                             name <- restart$name
[13:21:00.538]                             if (is.null(name)) 
[13:21:00.538]                               next
[13:21:00.538]                             if (!grepl(pattern, name)) 
[13:21:00.538]                               next
[13:21:00.538]                             invokeRestart(restart)
[13:21:00.538]                             muffled <- TRUE
[13:21:00.538]                             break
[13:21:00.538]                           }
[13:21:00.538]                         }
[13:21:00.538]                       }
[13:21:00.538]                       invisible(muffled)
[13:21:00.538]                     }
[13:21:00.538]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.538]                   }
[13:21:00.538]                 }
[13:21:00.538]                 else {
[13:21:00.538]                   if (TRUE) {
[13:21:00.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.538]                     {
[13:21:00.538]                       inherits <- base::inherits
[13:21:00.538]                       invokeRestart <- base::invokeRestart
[13:21:00.538]                       is.null <- base::is.null
[13:21:00.538]                       muffled <- FALSE
[13:21:00.538]                       if (inherits(cond, "message")) {
[13:21:00.538]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.538]                         if (muffled) 
[13:21:00.538]                           invokeRestart("muffleMessage")
[13:21:00.538]                       }
[13:21:00.538]                       else if (inherits(cond, "warning")) {
[13:21:00.538]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.538]                         if (muffled) 
[13:21:00.538]                           invokeRestart("muffleWarning")
[13:21:00.538]                       }
[13:21:00.538]                       else if (inherits(cond, "condition")) {
[13:21:00.538]                         if (!is.null(pattern)) {
[13:21:00.538]                           computeRestarts <- base::computeRestarts
[13:21:00.538]                           grepl <- base::grepl
[13:21:00.538]                           restarts <- computeRestarts(cond)
[13:21:00.538]                           for (restart in restarts) {
[13:21:00.538]                             name <- restart$name
[13:21:00.538]                             if (is.null(name)) 
[13:21:00.538]                               next
[13:21:00.538]                             if (!grepl(pattern, name)) 
[13:21:00.538]                               next
[13:21:00.538]                             invokeRestart(restart)
[13:21:00.538]                             muffled <- TRUE
[13:21:00.538]                             break
[13:21:00.538]                           }
[13:21:00.538]                         }
[13:21:00.538]                       }
[13:21:00.538]                       invisible(muffled)
[13:21:00.538]                     }
[13:21:00.538]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.538]                   }
[13:21:00.538]                 }
[13:21:00.538]             }
[13:21:00.538]         }))
[13:21:00.538]     }, error = function(ex) {
[13:21:00.538]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:00.538]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.538]                 ...future.rng), started = ...future.startTime, 
[13:21:00.538]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:00.538]             version = "1.8"), class = "FutureResult")
[13:21:00.538]     }, finally = {
[13:21:00.538]         if (!identical(...future.workdir, getwd())) 
[13:21:00.538]             setwd(...future.workdir)
[13:21:00.538]         {
[13:21:00.538]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:00.538]                 ...future.oldOptions$nwarnings <- NULL
[13:21:00.538]             }
[13:21:00.538]             base::options(...future.oldOptions)
[13:21:00.538]             if (.Platform$OS.type == "windows") {
[13:21:00.538]                 old_names <- names(...future.oldEnvVars)
[13:21:00.538]                 envs <- base::Sys.getenv()
[13:21:00.538]                 names <- names(envs)
[13:21:00.538]                 common <- intersect(names, old_names)
[13:21:00.538]                 added <- setdiff(names, old_names)
[13:21:00.538]                 removed <- setdiff(old_names, names)
[13:21:00.538]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:00.538]                   envs[common]]
[13:21:00.538]                 NAMES <- toupper(changed)
[13:21:00.538]                 args <- list()
[13:21:00.538]                 for (kk in seq_along(NAMES)) {
[13:21:00.538]                   name <- changed[[kk]]
[13:21:00.538]                   NAME <- NAMES[[kk]]
[13:21:00.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.538]                     next
[13:21:00.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.538]                 }
[13:21:00.538]                 NAMES <- toupper(added)
[13:21:00.538]                 for (kk in seq_along(NAMES)) {
[13:21:00.538]                   name <- added[[kk]]
[13:21:00.538]                   NAME <- NAMES[[kk]]
[13:21:00.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.538]                     next
[13:21:00.538]                   args[[name]] <- ""
[13:21:00.538]                 }
[13:21:00.538]                 NAMES <- toupper(removed)
[13:21:00.538]                 for (kk in seq_along(NAMES)) {
[13:21:00.538]                   name <- removed[[kk]]
[13:21:00.538]                   NAME <- NAMES[[kk]]
[13:21:00.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.538]                     next
[13:21:00.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.538]                 }
[13:21:00.538]                 if (length(args) > 0) 
[13:21:00.538]                   base::do.call(base::Sys.setenv, args = args)
[13:21:00.538]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:00.538]             }
[13:21:00.538]             else {
[13:21:00.538]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:00.538]             }
[13:21:00.538]             {
[13:21:00.538]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:00.538]                   0L) {
[13:21:00.538]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:00.538]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:00.538]                   base::options(opts)
[13:21:00.538]                 }
[13:21:00.538]                 {
[13:21:00.538]                   {
[13:21:00.538]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:00.538]                     NULL
[13:21:00.538]                   }
[13:21:00.538]                   options(future.plan = NULL)
[13:21:00.538]                   if (is.na(NA_character_)) 
[13:21:00.538]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.538]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:00.538]                   future::plan(list(function (..., workers = 2L, 
[13:21:00.538]                     envir = parent.frame()) 
[13:21:00.538]                   strategy(..., workers = workers, envir = envir)), 
[13:21:00.538]                     .cleanup = FALSE, .init = FALSE)
[13:21:00.538]                 }
[13:21:00.538]             }
[13:21:00.538]         }
[13:21:00.538]     })
[13:21:00.538]     if (TRUE) {
[13:21:00.538]         base::sink(type = "output", split = FALSE)
[13:21:00.538]         if (TRUE) {
[13:21:00.538]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:00.538]         }
[13:21:00.538]         else {
[13:21:00.538]             ...future.result["stdout"] <- base::list(NULL)
[13:21:00.538]         }
[13:21:00.538]         base::close(...future.stdout)
[13:21:00.538]         ...future.stdout <- NULL
[13:21:00.538]     }
[13:21:00.538]     ...future.result$conditions <- ...future.conditions
[13:21:00.538]     ...future.result$finished <- base::Sys.time()
[13:21:00.538]     ...future.result
[13:21:00.538] }
[13:21:00.610] MultisessionFuture started
[13:21:00.611] result() for ClusterFuture ...
[13:21:00.612] receiveMessageFromWorker() for ClusterFuture ...
[13:21:00.612] - Validating connection of MultisessionFuture
[13:21:00.636] - received message: FutureResult
[13:21:00.636] - Received FutureResult
[13:21:00.639] - Erased future from FutureRegistry
[13:21:00.639] result() for ClusterFuture ...
[13:21:00.639] - result already collected: FutureResult
[13:21:00.640] result() for ClusterFuture ... done
[13:21:00.640] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:00.640] result() for ClusterFuture ... done
[13:21:00.640] result() for ClusterFuture ...
[13:21:00.640] - result already collected: FutureResult
[13:21:00.640] result() for ClusterFuture ... done
[13:21:00.640] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:00.641] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 2345203b-0d27-338c-95eb-7654811919cc
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[13:21:00.641] getGlobalsAndPackages() ...
[13:21:00.641] Searching for globals...
[13:21:00.649] - globals found: [2] ‘{’, ‘:::’
[13:21:00.649] Searching for globals ... DONE
[13:21:00.650] Resolving globals: FALSE
[13:21:00.650] 
[13:21:00.650] 
[13:21:00.650] getGlobalsAndPackages() ... DONE
[13:21:00.651] run() for ‘Future’ ...
[13:21:00.651] - state: ‘created’
[13:21:00.651] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:00.663] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:00.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:00.663]   - Field: ‘node’
[13:21:00.663]   - Field: ‘label’
[13:21:00.663]   - Field: ‘local’
[13:21:00.663]   - Field: ‘owner’
[13:21:00.664]   - Field: ‘envir’
[13:21:00.664]   - Field: ‘workers’
[13:21:00.664]   - Field: ‘packages’
[13:21:00.664]   - Field: ‘gc’
[13:21:00.664]   - Field: ‘conditions’
[13:21:00.664]   - Field: ‘persistent’
[13:21:00.664]   - Field: ‘expr’
[13:21:00.664]   - Field: ‘uuid’
[13:21:00.664]   - Field: ‘seed’
[13:21:00.665]   - Field: ‘version’
[13:21:00.665]   - Field: ‘result’
[13:21:00.665]   - Field: ‘asynchronous’
[13:21:00.665]   - Field: ‘calls’
[13:21:00.665]   - Field: ‘globals’
[13:21:00.665]   - Field: ‘stdout’
[13:21:00.665]   - Field: ‘earlySignal’
[13:21:00.665]   - Field: ‘lazy’
[13:21:00.666]   - Field: ‘state’
[13:21:00.666] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:00.666] - Launch lazy future ...
[13:21:00.666] Packages needed by the future expression (n = 0): <none>
[13:21:00.666] Packages needed by future strategies (n = 0): <none>
[13:21:00.667] {
[13:21:00.667]     {
[13:21:00.667]         {
[13:21:00.667]             ...future.startTime <- base::Sys.time()
[13:21:00.667]             {
[13:21:00.667]                 {
[13:21:00.667]                   {
[13:21:00.667]                     {
[13:21:00.667]                       base::local({
[13:21:00.667]                         has_future <- base::requireNamespace("future", 
[13:21:00.667]                           quietly = TRUE)
[13:21:00.667]                         if (has_future) {
[13:21:00.667]                           ns <- base::getNamespace("future")
[13:21:00.667]                           version <- ns[[".package"]][["version"]]
[13:21:00.667]                           if (is.null(version)) 
[13:21:00.667]                             version <- utils::packageVersion("future")
[13:21:00.667]                         }
[13:21:00.667]                         else {
[13:21:00.667]                           version <- NULL
[13:21:00.667]                         }
[13:21:00.667]                         if (!has_future || version < "1.8.0") {
[13:21:00.667]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:00.667]                             "", base::R.version$version.string), 
[13:21:00.667]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:00.667]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:00.667]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:00.667]                               "release", "version")], collapse = " "), 
[13:21:00.667]                             hostname = base::Sys.info()[["nodename"]])
[13:21:00.667]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:00.667]                             info)
[13:21:00.667]                           info <- base::paste(info, collapse = "; ")
[13:21:00.667]                           if (!has_future) {
[13:21:00.667]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:00.667]                               info)
[13:21:00.667]                           }
[13:21:00.667]                           else {
[13:21:00.667]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:00.667]                               info, version)
[13:21:00.667]                           }
[13:21:00.667]                           base::stop(msg)
[13:21:00.667]                         }
[13:21:00.667]                       })
[13:21:00.667]                     }
[13:21:00.667]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:00.667]                     base::options(mc.cores = 1L)
[13:21:00.667]                   }
[13:21:00.667]                   options(future.plan = NULL)
[13:21:00.667]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.667]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:00.667]                 }
[13:21:00.667]                 ...future.workdir <- getwd()
[13:21:00.667]             }
[13:21:00.667]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:00.667]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:00.667]         }
[13:21:00.667]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:00.667]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:00.667]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:00.667]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:00.667]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:00.667]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:00.667]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:00.667]             base::names(...future.oldOptions))
[13:21:00.667]     }
[13:21:00.667]     if (FALSE) {
[13:21:00.667]     }
[13:21:00.667]     else {
[13:21:00.667]         if (TRUE) {
[13:21:00.667]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:00.667]                 open = "w")
[13:21:00.667]         }
[13:21:00.667]         else {
[13:21:00.667]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:00.667]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:00.667]         }
[13:21:00.667]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:00.667]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:00.667]             base::sink(type = "output", split = FALSE)
[13:21:00.667]             base::close(...future.stdout)
[13:21:00.667]         }, add = TRUE)
[13:21:00.667]     }
[13:21:00.667]     ...future.frame <- base::sys.nframe()
[13:21:00.667]     ...future.conditions <- base::list()
[13:21:00.667]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:00.667]     if (FALSE) {
[13:21:00.667]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:00.667]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:00.667]     }
[13:21:00.667]     ...future.result <- base::tryCatch({
[13:21:00.667]         base::withCallingHandlers({
[13:21:00.667]             ...future.value <- base::withVisible(base::local({
[13:21:00.667]                 ...future.makeSendCondition <- local({
[13:21:00.667]                   sendCondition <- NULL
[13:21:00.667]                   function(frame = 1L) {
[13:21:00.667]                     if (is.function(sendCondition)) 
[13:21:00.667]                       return(sendCondition)
[13:21:00.667]                     ns <- getNamespace("parallel")
[13:21:00.667]                     if (exists("sendData", mode = "function", 
[13:21:00.667]                       envir = ns)) {
[13:21:00.667]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:00.667]                         envir = ns)
[13:21:00.667]                       envir <- sys.frame(frame)
[13:21:00.667]                       master <- NULL
[13:21:00.667]                       while (!identical(envir, .GlobalEnv) && 
[13:21:00.667]                         !identical(envir, emptyenv())) {
[13:21:00.667]                         if (exists("master", mode = "list", envir = envir, 
[13:21:00.667]                           inherits = FALSE)) {
[13:21:00.667]                           master <- get("master", mode = "list", 
[13:21:00.667]                             envir = envir, inherits = FALSE)
[13:21:00.667]                           if (inherits(master, c("SOCKnode", 
[13:21:00.667]                             "SOCK0node"))) {
[13:21:00.667]                             sendCondition <<- function(cond) {
[13:21:00.667]                               data <- list(type = "VALUE", value = cond, 
[13:21:00.667]                                 success = TRUE)
[13:21:00.667]                               parallel_sendData(master, data)
[13:21:00.667]                             }
[13:21:00.667]                             return(sendCondition)
[13:21:00.667]                           }
[13:21:00.667]                         }
[13:21:00.667]                         frame <- frame + 1L
[13:21:00.667]                         envir <- sys.frame(frame)
[13:21:00.667]                       }
[13:21:00.667]                     }
[13:21:00.667]                     sendCondition <<- function(cond) NULL
[13:21:00.667]                   }
[13:21:00.667]                 })
[13:21:00.667]                 withCallingHandlers({
[13:21:00.667]                   {
[13:21:00.667]                     future:::session_uuid(attributes = TRUE)
[13:21:00.667]                   }
[13:21:00.667]                 }, immediateCondition = function(cond) {
[13:21:00.667]                   sendCondition <- ...future.makeSendCondition()
[13:21:00.667]                   sendCondition(cond)
[13:21:00.667]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.667]                   {
[13:21:00.667]                     inherits <- base::inherits
[13:21:00.667]                     invokeRestart <- base::invokeRestart
[13:21:00.667]                     is.null <- base::is.null
[13:21:00.667]                     muffled <- FALSE
[13:21:00.667]                     if (inherits(cond, "message")) {
[13:21:00.667]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:00.667]                       if (muffled) 
[13:21:00.667]                         invokeRestart("muffleMessage")
[13:21:00.667]                     }
[13:21:00.667]                     else if (inherits(cond, "warning")) {
[13:21:00.667]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:00.667]                       if (muffled) 
[13:21:00.667]                         invokeRestart("muffleWarning")
[13:21:00.667]                     }
[13:21:00.667]                     else if (inherits(cond, "condition")) {
[13:21:00.667]                       if (!is.null(pattern)) {
[13:21:00.667]                         computeRestarts <- base::computeRestarts
[13:21:00.667]                         grepl <- base::grepl
[13:21:00.667]                         restarts <- computeRestarts(cond)
[13:21:00.667]                         for (restart in restarts) {
[13:21:00.667]                           name <- restart$name
[13:21:00.667]                           if (is.null(name)) 
[13:21:00.667]                             next
[13:21:00.667]                           if (!grepl(pattern, name)) 
[13:21:00.667]                             next
[13:21:00.667]                           invokeRestart(restart)
[13:21:00.667]                           muffled <- TRUE
[13:21:00.667]                           break
[13:21:00.667]                         }
[13:21:00.667]                       }
[13:21:00.667]                     }
[13:21:00.667]                     invisible(muffled)
[13:21:00.667]                   }
[13:21:00.667]                   muffleCondition(cond)
[13:21:00.667]                 })
[13:21:00.667]             }))
[13:21:00.667]             future::FutureResult(value = ...future.value$value, 
[13:21:00.667]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.667]                   ...future.rng), globalenv = if (FALSE) 
[13:21:00.667]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:00.667]                     ...future.globalenv.names))
[13:21:00.667]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:00.667]         }, condition = base::local({
[13:21:00.667]             c <- base::c
[13:21:00.667]             inherits <- base::inherits
[13:21:00.667]             invokeRestart <- base::invokeRestart
[13:21:00.667]             length <- base::length
[13:21:00.667]             list <- base::list
[13:21:00.667]             seq.int <- base::seq.int
[13:21:00.667]             signalCondition <- base::signalCondition
[13:21:00.667]             sys.calls <- base::sys.calls
[13:21:00.667]             `[[` <- base::`[[`
[13:21:00.667]             `+` <- base::`+`
[13:21:00.667]             `<<-` <- base::`<<-`
[13:21:00.667]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:00.667]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:00.667]                   3L)]
[13:21:00.667]             }
[13:21:00.667]             function(cond) {
[13:21:00.667]                 is_error <- inherits(cond, "error")
[13:21:00.667]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:00.667]                   NULL)
[13:21:00.667]                 if (is_error) {
[13:21:00.667]                   sessionInformation <- function() {
[13:21:00.667]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:00.667]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:00.667]                       search = base::search(), system = base::Sys.info())
[13:21:00.667]                   }
[13:21:00.667]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.667]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:00.667]                     cond$call), session = sessionInformation(), 
[13:21:00.667]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:00.667]                   signalCondition(cond)
[13:21:00.667]                 }
[13:21:00.667]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:00.667]                 "immediateCondition"))) {
[13:21:00.667]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:00.667]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.667]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:00.667]                   if (TRUE && !signal) {
[13:21:00.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.667]                     {
[13:21:00.667]                       inherits <- base::inherits
[13:21:00.667]                       invokeRestart <- base::invokeRestart
[13:21:00.667]                       is.null <- base::is.null
[13:21:00.667]                       muffled <- FALSE
[13:21:00.667]                       if (inherits(cond, "message")) {
[13:21:00.667]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.667]                         if (muffled) 
[13:21:00.667]                           invokeRestart("muffleMessage")
[13:21:00.667]                       }
[13:21:00.667]                       else if (inherits(cond, "warning")) {
[13:21:00.667]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.667]                         if (muffled) 
[13:21:00.667]                           invokeRestart("muffleWarning")
[13:21:00.667]                       }
[13:21:00.667]                       else if (inherits(cond, "condition")) {
[13:21:00.667]                         if (!is.null(pattern)) {
[13:21:00.667]                           computeRestarts <- base::computeRestarts
[13:21:00.667]                           grepl <- base::grepl
[13:21:00.667]                           restarts <- computeRestarts(cond)
[13:21:00.667]                           for (restart in restarts) {
[13:21:00.667]                             name <- restart$name
[13:21:00.667]                             if (is.null(name)) 
[13:21:00.667]                               next
[13:21:00.667]                             if (!grepl(pattern, name)) 
[13:21:00.667]                               next
[13:21:00.667]                             invokeRestart(restart)
[13:21:00.667]                             muffled <- TRUE
[13:21:00.667]                             break
[13:21:00.667]                           }
[13:21:00.667]                         }
[13:21:00.667]                       }
[13:21:00.667]                       invisible(muffled)
[13:21:00.667]                     }
[13:21:00.667]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.667]                   }
[13:21:00.667]                 }
[13:21:00.667]                 else {
[13:21:00.667]                   if (TRUE) {
[13:21:00.667]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.667]                     {
[13:21:00.667]                       inherits <- base::inherits
[13:21:00.667]                       invokeRestart <- base::invokeRestart
[13:21:00.667]                       is.null <- base::is.null
[13:21:00.667]                       muffled <- FALSE
[13:21:00.667]                       if (inherits(cond, "message")) {
[13:21:00.667]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.667]                         if (muffled) 
[13:21:00.667]                           invokeRestart("muffleMessage")
[13:21:00.667]                       }
[13:21:00.667]                       else if (inherits(cond, "warning")) {
[13:21:00.667]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.667]                         if (muffled) 
[13:21:00.667]                           invokeRestart("muffleWarning")
[13:21:00.667]                       }
[13:21:00.667]                       else if (inherits(cond, "condition")) {
[13:21:00.667]                         if (!is.null(pattern)) {
[13:21:00.667]                           computeRestarts <- base::computeRestarts
[13:21:00.667]                           grepl <- base::grepl
[13:21:00.667]                           restarts <- computeRestarts(cond)
[13:21:00.667]                           for (restart in restarts) {
[13:21:00.667]                             name <- restart$name
[13:21:00.667]                             if (is.null(name)) 
[13:21:00.667]                               next
[13:21:00.667]                             if (!grepl(pattern, name)) 
[13:21:00.667]                               next
[13:21:00.667]                             invokeRestart(restart)
[13:21:00.667]                             muffled <- TRUE
[13:21:00.667]                             break
[13:21:00.667]                           }
[13:21:00.667]                         }
[13:21:00.667]                       }
[13:21:00.667]                       invisible(muffled)
[13:21:00.667]                     }
[13:21:00.667]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.667]                   }
[13:21:00.667]                 }
[13:21:00.667]             }
[13:21:00.667]         }))
[13:21:00.667]     }, error = function(ex) {
[13:21:00.667]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:00.667]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.667]                 ...future.rng), started = ...future.startTime, 
[13:21:00.667]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:00.667]             version = "1.8"), class = "FutureResult")
[13:21:00.667]     }, finally = {
[13:21:00.667]         if (!identical(...future.workdir, getwd())) 
[13:21:00.667]             setwd(...future.workdir)
[13:21:00.667]         {
[13:21:00.667]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:00.667]                 ...future.oldOptions$nwarnings <- NULL
[13:21:00.667]             }
[13:21:00.667]             base::options(...future.oldOptions)
[13:21:00.667]             if (.Platform$OS.type == "windows") {
[13:21:00.667]                 old_names <- names(...future.oldEnvVars)
[13:21:00.667]                 envs <- base::Sys.getenv()
[13:21:00.667]                 names <- names(envs)
[13:21:00.667]                 common <- intersect(names, old_names)
[13:21:00.667]                 added <- setdiff(names, old_names)
[13:21:00.667]                 removed <- setdiff(old_names, names)
[13:21:00.667]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:00.667]                   envs[common]]
[13:21:00.667]                 NAMES <- toupper(changed)
[13:21:00.667]                 args <- list()
[13:21:00.667]                 for (kk in seq_along(NAMES)) {
[13:21:00.667]                   name <- changed[[kk]]
[13:21:00.667]                   NAME <- NAMES[[kk]]
[13:21:00.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.667]                     next
[13:21:00.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.667]                 }
[13:21:00.667]                 NAMES <- toupper(added)
[13:21:00.667]                 for (kk in seq_along(NAMES)) {
[13:21:00.667]                   name <- added[[kk]]
[13:21:00.667]                   NAME <- NAMES[[kk]]
[13:21:00.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.667]                     next
[13:21:00.667]                   args[[name]] <- ""
[13:21:00.667]                 }
[13:21:00.667]                 NAMES <- toupper(removed)
[13:21:00.667]                 for (kk in seq_along(NAMES)) {
[13:21:00.667]                   name <- removed[[kk]]
[13:21:00.667]                   NAME <- NAMES[[kk]]
[13:21:00.667]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.667]                     next
[13:21:00.667]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.667]                 }
[13:21:00.667]                 if (length(args) > 0) 
[13:21:00.667]                   base::do.call(base::Sys.setenv, args = args)
[13:21:00.667]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:00.667]             }
[13:21:00.667]             else {
[13:21:00.667]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:00.667]             }
[13:21:00.667]             {
[13:21:00.667]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:00.667]                   0L) {
[13:21:00.667]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:00.667]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:00.667]                   base::options(opts)
[13:21:00.667]                 }
[13:21:00.667]                 {
[13:21:00.667]                   {
[13:21:00.667]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:00.667]                     NULL
[13:21:00.667]                   }
[13:21:00.667]                   options(future.plan = NULL)
[13:21:00.667]                   if (is.na(NA_character_)) 
[13:21:00.667]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.667]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:00.667]                   future::plan(list(function (..., workers = 2L, 
[13:21:00.667]                     envir = parent.frame()) 
[13:21:00.667]                   strategy(..., workers = workers, envir = envir)), 
[13:21:00.667]                     .cleanup = FALSE, .init = FALSE)
[13:21:00.667]                 }
[13:21:00.667]             }
[13:21:00.667]         }
[13:21:00.667]     })
[13:21:00.667]     if (TRUE) {
[13:21:00.667]         base::sink(type = "output", split = FALSE)
[13:21:00.667]         if (TRUE) {
[13:21:00.667]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:00.667]         }
[13:21:00.667]         else {
[13:21:00.667]             ...future.result["stdout"] <- base::list(NULL)
[13:21:00.667]         }
[13:21:00.667]         base::close(...future.stdout)
[13:21:00.667]         ...future.stdout <- NULL
[13:21:00.667]     }
[13:21:00.667]     ...future.result$conditions <- ...future.conditions
[13:21:00.667]     ...future.result$finished <- base::Sys.time()
[13:21:00.667]     ...future.result
[13:21:00.667] }
[13:21:00.670] MultisessionFuture started
[13:21:00.670] - Launch lazy future ... done
[13:21:00.671] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[13:21:00.671] result() for ClusterFuture ...
[13:21:00.671] receiveMessageFromWorker() for ClusterFuture ...
[13:21:00.671] - Validating connection of MultisessionFuture
[13:21:00.714] - received message: FutureResult
[13:21:00.714] - Received FutureResult
[13:21:00.714] - Erased future from FutureRegistry
[13:21:00.715] result() for ClusterFuture ...
[13:21:00.715] - result already collected: FutureResult
[13:21:00.715] result() for ClusterFuture ... done
[13:21:00.715] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:00.715] result() for ClusterFuture ... done
[13:21:00.715] result() for ClusterFuture ...
[13:21:00.715] - result already collected: FutureResult
[13:21:00.715] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: da8946d2-41df-af69-d446-d12a9a1655f7
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[13:21:00.716] getGlobalsAndPackages() ...
[13:21:00.716] Searching for globals...
[13:21:00.717] - globals found: [2] ‘{’, ‘:::’
[13:21:00.717] Searching for globals ... DONE
[13:21:00.717] Resolving globals: FALSE
[13:21:00.718] 
[13:21:00.718] 
[13:21:00.718] getGlobalsAndPackages() ... DONE
[13:21:00.718] run() for ‘Future’ ...
[13:21:00.718] - state: ‘created’
[13:21:00.718] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:00.730] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:00.730] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:00.730]   - Field: ‘node’
[13:21:00.730]   - Field: ‘label’
[13:21:00.731]   - Field: ‘local’
[13:21:00.731]   - Field: ‘owner’
[13:21:00.731]   - Field: ‘envir’
[13:21:00.731]   - Field: ‘workers’
[13:21:00.734]   - Field: ‘packages’
[13:21:00.734]   - Field: ‘gc’
[13:21:00.734]   - Field: ‘conditions’
[13:21:00.734]   - Field: ‘persistent’
[13:21:00.734]   - Field: ‘expr’
[13:21:00.734]   - Field: ‘uuid’
[13:21:00.734]   - Field: ‘seed’
[13:21:00.734]   - Field: ‘version’
[13:21:00.734]   - Field: ‘result’
[13:21:00.735]   - Field: ‘asynchronous’
[13:21:00.735]   - Field: ‘calls’
[13:21:00.735]   - Field: ‘globals’
[13:21:00.735]   - Field: ‘stdout’
[13:21:00.735]   - Field: ‘earlySignal’
[13:21:00.735]   - Field: ‘lazy’
[13:21:00.735]   - Field: ‘state’
[13:21:00.735] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:00.735] - Launch lazy future ...
[13:21:00.735] Packages needed by the future expression (n = 0): <none>
[13:21:00.736] Packages needed by future strategies (n = 0): <none>
[13:21:00.736] {
[13:21:00.736]     {
[13:21:00.736]         {
[13:21:00.736]             ...future.startTime <- base::Sys.time()
[13:21:00.736]             {
[13:21:00.736]                 {
[13:21:00.736]                   {
[13:21:00.736]                     {
[13:21:00.736]                       base::local({
[13:21:00.736]                         has_future <- base::requireNamespace("future", 
[13:21:00.736]                           quietly = TRUE)
[13:21:00.736]                         if (has_future) {
[13:21:00.736]                           ns <- base::getNamespace("future")
[13:21:00.736]                           version <- ns[[".package"]][["version"]]
[13:21:00.736]                           if (is.null(version)) 
[13:21:00.736]                             version <- utils::packageVersion("future")
[13:21:00.736]                         }
[13:21:00.736]                         else {
[13:21:00.736]                           version <- NULL
[13:21:00.736]                         }
[13:21:00.736]                         if (!has_future || version < "1.8.0") {
[13:21:00.736]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:00.736]                             "", base::R.version$version.string), 
[13:21:00.736]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:00.736]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:00.736]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:00.736]                               "release", "version")], collapse = " "), 
[13:21:00.736]                             hostname = base::Sys.info()[["nodename"]])
[13:21:00.736]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:00.736]                             info)
[13:21:00.736]                           info <- base::paste(info, collapse = "; ")
[13:21:00.736]                           if (!has_future) {
[13:21:00.736]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:00.736]                               info)
[13:21:00.736]                           }
[13:21:00.736]                           else {
[13:21:00.736]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:00.736]                               info, version)
[13:21:00.736]                           }
[13:21:00.736]                           base::stop(msg)
[13:21:00.736]                         }
[13:21:00.736]                       })
[13:21:00.736]                     }
[13:21:00.736]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:00.736]                     base::options(mc.cores = 1L)
[13:21:00.736]                   }
[13:21:00.736]                   options(future.plan = NULL)
[13:21:00.736]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.736]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:00.736]                 }
[13:21:00.736]                 ...future.workdir <- getwd()
[13:21:00.736]             }
[13:21:00.736]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:00.736]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:00.736]         }
[13:21:00.736]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:00.736]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:00.736]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:00.736]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:00.736]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:00.736]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:00.736]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:00.736]             base::names(...future.oldOptions))
[13:21:00.736]     }
[13:21:00.736]     if (FALSE) {
[13:21:00.736]     }
[13:21:00.736]     else {
[13:21:00.736]         if (TRUE) {
[13:21:00.736]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:00.736]                 open = "w")
[13:21:00.736]         }
[13:21:00.736]         else {
[13:21:00.736]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:00.736]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:00.736]         }
[13:21:00.736]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:00.736]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:00.736]             base::sink(type = "output", split = FALSE)
[13:21:00.736]             base::close(...future.stdout)
[13:21:00.736]         }, add = TRUE)
[13:21:00.736]     }
[13:21:00.736]     ...future.frame <- base::sys.nframe()
[13:21:00.736]     ...future.conditions <- base::list()
[13:21:00.736]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:00.736]     if (FALSE) {
[13:21:00.736]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:00.736]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:00.736]     }
[13:21:00.736]     ...future.result <- base::tryCatch({
[13:21:00.736]         base::withCallingHandlers({
[13:21:00.736]             ...future.value <- base::withVisible(base::local({
[13:21:00.736]                 ...future.makeSendCondition <- local({
[13:21:00.736]                   sendCondition <- NULL
[13:21:00.736]                   function(frame = 1L) {
[13:21:00.736]                     if (is.function(sendCondition)) 
[13:21:00.736]                       return(sendCondition)
[13:21:00.736]                     ns <- getNamespace("parallel")
[13:21:00.736]                     if (exists("sendData", mode = "function", 
[13:21:00.736]                       envir = ns)) {
[13:21:00.736]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:00.736]                         envir = ns)
[13:21:00.736]                       envir <- sys.frame(frame)
[13:21:00.736]                       master <- NULL
[13:21:00.736]                       while (!identical(envir, .GlobalEnv) && 
[13:21:00.736]                         !identical(envir, emptyenv())) {
[13:21:00.736]                         if (exists("master", mode = "list", envir = envir, 
[13:21:00.736]                           inherits = FALSE)) {
[13:21:00.736]                           master <- get("master", mode = "list", 
[13:21:00.736]                             envir = envir, inherits = FALSE)
[13:21:00.736]                           if (inherits(master, c("SOCKnode", 
[13:21:00.736]                             "SOCK0node"))) {
[13:21:00.736]                             sendCondition <<- function(cond) {
[13:21:00.736]                               data <- list(type = "VALUE", value = cond, 
[13:21:00.736]                                 success = TRUE)
[13:21:00.736]                               parallel_sendData(master, data)
[13:21:00.736]                             }
[13:21:00.736]                             return(sendCondition)
[13:21:00.736]                           }
[13:21:00.736]                         }
[13:21:00.736]                         frame <- frame + 1L
[13:21:00.736]                         envir <- sys.frame(frame)
[13:21:00.736]                       }
[13:21:00.736]                     }
[13:21:00.736]                     sendCondition <<- function(cond) NULL
[13:21:00.736]                   }
[13:21:00.736]                 })
[13:21:00.736]                 withCallingHandlers({
[13:21:00.736]                   {
[13:21:00.736]                     future:::session_uuid(attributes = TRUE)
[13:21:00.736]                   }
[13:21:00.736]                 }, immediateCondition = function(cond) {
[13:21:00.736]                   sendCondition <- ...future.makeSendCondition()
[13:21:00.736]                   sendCondition(cond)
[13:21:00.736]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.736]                   {
[13:21:00.736]                     inherits <- base::inherits
[13:21:00.736]                     invokeRestart <- base::invokeRestart
[13:21:00.736]                     is.null <- base::is.null
[13:21:00.736]                     muffled <- FALSE
[13:21:00.736]                     if (inherits(cond, "message")) {
[13:21:00.736]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:00.736]                       if (muffled) 
[13:21:00.736]                         invokeRestart("muffleMessage")
[13:21:00.736]                     }
[13:21:00.736]                     else if (inherits(cond, "warning")) {
[13:21:00.736]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:00.736]                       if (muffled) 
[13:21:00.736]                         invokeRestart("muffleWarning")
[13:21:00.736]                     }
[13:21:00.736]                     else if (inherits(cond, "condition")) {
[13:21:00.736]                       if (!is.null(pattern)) {
[13:21:00.736]                         computeRestarts <- base::computeRestarts
[13:21:00.736]                         grepl <- base::grepl
[13:21:00.736]                         restarts <- computeRestarts(cond)
[13:21:00.736]                         for (restart in restarts) {
[13:21:00.736]                           name <- restart$name
[13:21:00.736]                           if (is.null(name)) 
[13:21:00.736]                             next
[13:21:00.736]                           if (!grepl(pattern, name)) 
[13:21:00.736]                             next
[13:21:00.736]                           invokeRestart(restart)
[13:21:00.736]                           muffled <- TRUE
[13:21:00.736]                           break
[13:21:00.736]                         }
[13:21:00.736]                       }
[13:21:00.736]                     }
[13:21:00.736]                     invisible(muffled)
[13:21:00.736]                   }
[13:21:00.736]                   muffleCondition(cond)
[13:21:00.736]                 })
[13:21:00.736]             }))
[13:21:00.736]             future::FutureResult(value = ...future.value$value, 
[13:21:00.736]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.736]                   ...future.rng), globalenv = if (FALSE) 
[13:21:00.736]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:00.736]                     ...future.globalenv.names))
[13:21:00.736]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:00.736]         }, condition = base::local({
[13:21:00.736]             c <- base::c
[13:21:00.736]             inherits <- base::inherits
[13:21:00.736]             invokeRestart <- base::invokeRestart
[13:21:00.736]             length <- base::length
[13:21:00.736]             list <- base::list
[13:21:00.736]             seq.int <- base::seq.int
[13:21:00.736]             signalCondition <- base::signalCondition
[13:21:00.736]             sys.calls <- base::sys.calls
[13:21:00.736]             `[[` <- base::`[[`
[13:21:00.736]             `+` <- base::`+`
[13:21:00.736]             `<<-` <- base::`<<-`
[13:21:00.736]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:00.736]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:00.736]                   3L)]
[13:21:00.736]             }
[13:21:00.736]             function(cond) {
[13:21:00.736]                 is_error <- inherits(cond, "error")
[13:21:00.736]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:00.736]                   NULL)
[13:21:00.736]                 if (is_error) {
[13:21:00.736]                   sessionInformation <- function() {
[13:21:00.736]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:00.736]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:00.736]                       search = base::search(), system = base::Sys.info())
[13:21:00.736]                   }
[13:21:00.736]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.736]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:00.736]                     cond$call), session = sessionInformation(), 
[13:21:00.736]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:00.736]                   signalCondition(cond)
[13:21:00.736]                 }
[13:21:00.736]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:00.736]                 "immediateCondition"))) {
[13:21:00.736]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:00.736]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.736]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:00.736]                   if (TRUE && !signal) {
[13:21:00.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.736]                     {
[13:21:00.736]                       inherits <- base::inherits
[13:21:00.736]                       invokeRestart <- base::invokeRestart
[13:21:00.736]                       is.null <- base::is.null
[13:21:00.736]                       muffled <- FALSE
[13:21:00.736]                       if (inherits(cond, "message")) {
[13:21:00.736]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.736]                         if (muffled) 
[13:21:00.736]                           invokeRestart("muffleMessage")
[13:21:00.736]                       }
[13:21:00.736]                       else if (inherits(cond, "warning")) {
[13:21:00.736]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.736]                         if (muffled) 
[13:21:00.736]                           invokeRestart("muffleWarning")
[13:21:00.736]                       }
[13:21:00.736]                       else if (inherits(cond, "condition")) {
[13:21:00.736]                         if (!is.null(pattern)) {
[13:21:00.736]                           computeRestarts <- base::computeRestarts
[13:21:00.736]                           grepl <- base::grepl
[13:21:00.736]                           restarts <- computeRestarts(cond)
[13:21:00.736]                           for (restart in restarts) {
[13:21:00.736]                             name <- restart$name
[13:21:00.736]                             if (is.null(name)) 
[13:21:00.736]                               next
[13:21:00.736]                             if (!grepl(pattern, name)) 
[13:21:00.736]                               next
[13:21:00.736]                             invokeRestart(restart)
[13:21:00.736]                             muffled <- TRUE
[13:21:00.736]                             break
[13:21:00.736]                           }
[13:21:00.736]                         }
[13:21:00.736]                       }
[13:21:00.736]                       invisible(muffled)
[13:21:00.736]                     }
[13:21:00.736]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.736]                   }
[13:21:00.736]                 }
[13:21:00.736]                 else {
[13:21:00.736]                   if (TRUE) {
[13:21:00.736]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.736]                     {
[13:21:00.736]                       inherits <- base::inherits
[13:21:00.736]                       invokeRestart <- base::invokeRestart
[13:21:00.736]                       is.null <- base::is.null
[13:21:00.736]                       muffled <- FALSE
[13:21:00.736]                       if (inherits(cond, "message")) {
[13:21:00.736]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.736]                         if (muffled) 
[13:21:00.736]                           invokeRestart("muffleMessage")
[13:21:00.736]                       }
[13:21:00.736]                       else if (inherits(cond, "warning")) {
[13:21:00.736]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.736]                         if (muffled) 
[13:21:00.736]                           invokeRestart("muffleWarning")
[13:21:00.736]                       }
[13:21:00.736]                       else if (inherits(cond, "condition")) {
[13:21:00.736]                         if (!is.null(pattern)) {
[13:21:00.736]                           computeRestarts <- base::computeRestarts
[13:21:00.736]                           grepl <- base::grepl
[13:21:00.736]                           restarts <- computeRestarts(cond)
[13:21:00.736]                           for (restart in restarts) {
[13:21:00.736]                             name <- restart$name
[13:21:00.736]                             if (is.null(name)) 
[13:21:00.736]                               next
[13:21:00.736]                             if (!grepl(pattern, name)) 
[13:21:00.736]                               next
[13:21:00.736]                             invokeRestart(restart)
[13:21:00.736]                             muffled <- TRUE
[13:21:00.736]                             break
[13:21:00.736]                           }
[13:21:00.736]                         }
[13:21:00.736]                       }
[13:21:00.736]                       invisible(muffled)
[13:21:00.736]                     }
[13:21:00.736]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.736]                   }
[13:21:00.736]                 }
[13:21:00.736]             }
[13:21:00.736]         }))
[13:21:00.736]     }, error = function(ex) {
[13:21:00.736]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:00.736]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.736]                 ...future.rng), started = ...future.startTime, 
[13:21:00.736]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:00.736]             version = "1.8"), class = "FutureResult")
[13:21:00.736]     }, finally = {
[13:21:00.736]         if (!identical(...future.workdir, getwd())) 
[13:21:00.736]             setwd(...future.workdir)
[13:21:00.736]         {
[13:21:00.736]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:00.736]                 ...future.oldOptions$nwarnings <- NULL
[13:21:00.736]             }
[13:21:00.736]             base::options(...future.oldOptions)
[13:21:00.736]             if (.Platform$OS.type == "windows") {
[13:21:00.736]                 old_names <- names(...future.oldEnvVars)
[13:21:00.736]                 envs <- base::Sys.getenv()
[13:21:00.736]                 names <- names(envs)
[13:21:00.736]                 common <- intersect(names, old_names)
[13:21:00.736]                 added <- setdiff(names, old_names)
[13:21:00.736]                 removed <- setdiff(old_names, names)
[13:21:00.736]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:00.736]                   envs[common]]
[13:21:00.736]                 NAMES <- toupper(changed)
[13:21:00.736]                 args <- list()
[13:21:00.736]                 for (kk in seq_along(NAMES)) {
[13:21:00.736]                   name <- changed[[kk]]
[13:21:00.736]                   NAME <- NAMES[[kk]]
[13:21:00.736]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.736]                     next
[13:21:00.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.736]                 }
[13:21:00.736]                 NAMES <- toupper(added)
[13:21:00.736]                 for (kk in seq_along(NAMES)) {
[13:21:00.736]                   name <- added[[kk]]
[13:21:00.736]                   NAME <- NAMES[[kk]]
[13:21:00.736]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.736]                     next
[13:21:00.736]                   args[[name]] <- ""
[13:21:00.736]                 }
[13:21:00.736]                 NAMES <- toupper(removed)
[13:21:00.736]                 for (kk in seq_along(NAMES)) {
[13:21:00.736]                   name <- removed[[kk]]
[13:21:00.736]                   NAME <- NAMES[[kk]]
[13:21:00.736]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.736]                     next
[13:21:00.736]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.736]                 }
[13:21:00.736]                 if (length(args) > 0) 
[13:21:00.736]                   base::do.call(base::Sys.setenv, args = args)
[13:21:00.736]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:00.736]             }
[13:21:00.736]             else {
[13:21:00.736]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:00.736]             }
[13:21:00.736]             {
[13:21:00.736]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:00.736]                   0L) {
[13:21:00.736]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:00.736]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:00.736]                   base::options(opts)
[13:21:00.736]                 }
[13:21:00.736]                 {
[13:21:00.736]                   {
[13:21:00.736]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:00.736]                     NULL
[13:21:00.736]                   }
[13:21:00.736]                   options(future.plan = NULL)
[13:21:00.736]                   if (is.na(NA_character_)) 
[13:21:00.736]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.736]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:00.736]                   future::plan(list(function (..., workers = 2L, 
[13:21:00.736]                     envir = parent.frame()) 
[13:21:00.736]                   strategy(..., workers = workers, envir = envir)), 
[13:21:00.736]                     .cleanup = FALSE, .init = FALSE)
[13:21:00.736]                 }
[13:21:00.736]             }
[13:21:00.736]         }
[13:21:00.736]     })
[13:21:00.736]     if (TRUE) {
[13:21:00.736]         base::sink(type = "output", split = FALSE)
[13:21:00.736]         if (TRUE) {
[13:21:00.736]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:00.736]         }
[13:21:00.736]         else {
[13:21:00.736]             ...future.result["stdout"] <- base::list(NULL)
[13:21:00.736]         }
[13:21:00.736]         base::close(...future.stdout)
[13:21:00.736]         ...future.stdout <- NULL
[13:21:00.736]     }
[13:21:00.736]     ...future.result$conditions <- ...future.conditions
[13:21:00.736]     ...future.result$finished <- base::Sys.time()
[13:21:00.736]     ...future.result
[13:21:00.736] }
[13:21:00.739] MultisessionFuture started
[13:21:00.739] - Launch lazy future ... done
[13:21:00.739] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[13:21:00.740] result() for ClusterFuture ...
[13:21:00.740] receiveMessageFromWorker() for ClusterFuture ...
[13:21:00.740] - Validating connection of MultisessionFuture
[13:21:00.782] - received message: FutureResult
[13:21:00.782] - Received FutureResult
[13:21:00.782] - Erased future from FutureRegistry
[13:21:00.783] result() for ClusterFuture ...
[13:21:00.783] - result already collected: FutureResult
[13:21:00.783] result() for ClusterFuture ... done
[13:21:00.783] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:00.783] result() for ClusterFuture ... done
[13:21:00.783] result() for ClusterFuture ...
[13:21:00.783] - result already collected: FutureResult
[13:21:00.783] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: da8946d2-41df-af69-d446-d12a9a1655f7
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[13:21:00.784] getGlobalsAndPackages() ...
[13:21:00.784] Searching for globals...
[13:21:00.784] - globals found: [3] ‘{’, ‘$’, ‘f1’
[13:21:00.785] Searching for globals ... DONE
[13:21:00.785] Resolving globals: FALSE
[13:21:00.788] The total size of the 1 globals is 1.54 MiB (1611824 bytes)
[13:21:00.788] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[13:21:00.788] - globals: [1] ‘f1’
[13:21:00.788] 
[13:21:00.788] getGlobalsAndPackages() ... DONE
[13:21:00.789] run() for ‘Future’ ...
[13:21:00.789] - state: ‘created’
[13:21:00.789] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:00.800] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:00.800] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:00.800]   - Field: ‘node’
[13:21:00.800]   - Field: ‘label’
[13:21:00.800]   - Field: ‘local’
[13:21:00.800]   - Field: ‘owner’
[13:21:00.800]   - Field: ‘envir’
[13:21:00.801]   - Field: ‘workers’
[13:21:00.801]   - Field: ‘packages’
[13:21:00.801]   - Field: ‘gc’
[13:21:00.801]   - Field: ‘conditions’
[13:21:00.801]   - Field: ‘persistent’
[13:21:00.801]   - Field: ‘expr’
[13:21:00.801]   - Field: ‘uuid’
[13:21:00.801]   - Field: ‘seed’
[13:21:00.801]   - Field: ‘version’
[13:21:00.801]   - Field: ‘result’
[13:21:00.801]   - Field: ‘asynchronous’
[13:21:00.802]   - Field: ‘calls’
[13:21:00.802]   - Field: ‘globals’
[13:21:00.802]   - Field: ‘stdout’
[13:21:00.802]   - Field: ‘earlySignal’
[13:21:00.802]   - Field: ‘lazy’
[13:21:00.802]   - Field: ‘state’
[13:21:00.802] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:00.802] - Launch lazy future ...
[13:21:00.802] Packages needed by the future expression (n = 0): <none>
[13:21:00.803] Packages needed by future strategies (n = 0): <none>
[13:21:00.803] {
[13:21:00.803]     {
[13:21:00.803]         {
[13:21:00.803]             ...future.startTime <- base::Sys.time()
[13:21:00.803]             {
[13:21:00.803]                 {
[13:21:00.803]                   {
[13:21:00.803]                     {
[13:21:00.803]                       base::local({
[13:21:00.803]                         has_future <- base::requireNamespace("future", 
[13:21:00.803]                           quietly = TRUE)
[13:21:00.803]                         if (has_future) {
[13:21:00.803]                           ns <- base::getNamespace("future")
[13:21:00.803]                           version <- ns[[".package"]][["version"]]
[13:21:00.803]                           if (is.null(version)) 
[13:21:00.803]                             version <- utils::packageVersion("future")
[13:21:00.803]                         }
[13:21:00.803]                         else {
[13:21:00.803]                           version <- NULL
[13:21:00.803]                         }
[13:21:00.803]                         if (!has_future || version < "1.8.0") {
[13:21:00.803]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:00.803]                             "", base::R.version$version.string), 
[13:21:00.803]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:00.803]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:00.803]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:00.803]                               "release", "version")], collapse = " "), 
[13:21:00.803]                             hostname = base::Sys.info()[["nodename"]])
[13:21:00.803]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:00.803]                             info)
[13:21:00.803]                           info <- base::paste(info, collapse = "; ")
[13:21:00.803]                           if (!has_future) {
[13:21:00.803]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:00.803]                               info)
[13:21:00.803]                           }
[13:21:00.803]                           else {
[13:21:00.803]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:00.803]                               info, version)
[13:21:00.803]                           }
[13:21:00.803]                           base::stop(msg)
[13:21:00.803]                         }
[13:21:00.803]                       })
[13:21:00.803]                     }
[13:21:00.803]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:00.803]                     base::options(mc.cores = 1L)
[13:21:00.803]                   }
[13:21:00.803]                   options(future.plan = NULL)
[13:21:00.803]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.803]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:00.803]                 }
[13:21:00.803]                 ...future.workdir <- getwd()
[13:21:00.803]             }
[13:21:00.803]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:00.803]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:00.803]         }
[13:21:00.803]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:00.803]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:00.803]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:00.803]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:00.803]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:00.803]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:00.803]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:00.803]             base::names(...future.oldOptions))
[13:21:00.803]     }
[13:21:00.803]     if (FALSE) {
[13:21:00.803]     }
[13:21:00.803]     else {
[13:21:00.803]         if (TRUE) {
[13:21:00.803]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:00.803]                 open = "w")
[13:21:00.803]         }
[13:21:00.803]         else {
[13:21:00.803]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:00.803]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:00.803]         }
[13:21:00.803]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:00.803]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:00.803]             base::sink(type = "output", split = FALSE)
[13:21:00.803]             base::close(...future.stdout)
[13:21:00.803]         }, add = TRUE)
[13:21:00.803]     }
[13:21:00.803]     ...future.frame <- base::sys.nframe()
[13:21:00.803]     ...future.conditions <- base::list()
[13:21:00.803]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:00.803]     if (FALSE) {
[13:21:00.803]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:00.803]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:00.803]     }
[13:21:00.803]     ...future.result <- base::tryCatch({
[13:21:00.803]         base::withCallingHandlers({
[13:21:00.803]             ...future.value <- base::withVisible(base::local({
[13:21:00.803]                 ...future.makeSendCondition <- local({
[13:21:00.803]                   sendCondition <- NULL
[13:21:00.803]                   function(frame = 1L) {
[13:21:00.803]                     if (is.function(sendCondition)) 
[13:21:00.803]                       return(sendCondition)
[13:21:00.803]                     ns <- getNamespace("parallel")
[13:21:00.803]                     if (exists("sendData", mode = "function", 
[13:21:00.803]                       envir = ns)) {
[13:21:00.803]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:00.803]                         envir = ns)
[13:21:00.803]                       envir <- sys.frame(frame)
[13:21:00.803]                       master <- NULL
[13:21:00.803]                       while (!identical(envir, .GlobalEnv) && 
[13:21:00.803]                         !identical(envir, emptyenv())) {
[13:21:00.803]                         if (exists("master", mode = "list", envir = envir, 
[13:21:00.803]                           inherits = FALSE)) {
[13:21:00.803]                           master <- get("master", mode = "list", 
[13:21:00.803]                             envir = envir, inherits = FALSE)
[13:21:00.803]                           if (inherits(master, c("SOCKnode", 
[13:21:00.803]                             "SOCK0node"))) {
[13:21:00.803]                             sendCondition <<- function(cond) {
[13:21:00.803]                               data <- list(type = "VALUE", value = cond, 
[13:21:00.803]                                 success = TRUE)
[13:21:00.803]                               parallel_sendData(master, data)
[13:21:00.803]                             }
[13:21:00.803]                             return(sendCondition)
[13:21:00.803]                           }
[13:21:00.803]                         }
[13:21:00.803]                         frame <- frame + 1L
[13:21:00.803]                         envir <- sys.frame(frame)
[13:21:00.803]                       }
[13:21:00.803]                     }
[13:21:00.803]                     sendCondition <<- function(cond) NULL
[13:21:00.803]                   }
[13:21:00.803]                 })
[13:21:00.803]                 withCallingHandlers({
[13:21:00.803]                   {
[13:21:00.803]                     f1$owner
[13:21:00.803]                   }
[13:21:00.803]                 }, immediateCondition = function(cond) {
[13:21:00.803]                   sendCondition <- ...future.makeSendCondition()
[13:21:00.803]                   sendCondition(cond)
[13:21:00.803]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.803]                   {
[13:21:00.803]                     inherits <- base::inherits
[13:21:00.803]                     invokeRestart <- base::invokeRestart
[13:21:00.803]                     is.null <- base::is.null
[13:21:00.803]                     muffled <- FALSE
[13:21:00.803]                     if (inherits(cond, "message")) {
[13:21:00.803]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:00.803]                       if (muffled) 
[13:21:00.803]                         invokeRestart("muffleMessage")
[13:21:00.803]                     }
[13:21:00.803]                     else if (inherits(cond, "warning")) {
[13:21:00.803]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:00.803]                       if (muffled) 
[13:21:00.803]                         invokeRestart("muffleWarning")
[13:21:00.803]                     }
[13:21:00.803]                     else if (inherits(cond, "condition")) {
[13:21:00.803]                       if (!is.null(pattern)) {
[13:21:00.803]                         computeRestarts <- base::computeRestarts
[13:21:00.803]                         grepl <- base::grepl
[13:21:00.803]                         restarts <- computeRestarts(cond)
[13:21:00.803]                         for (restart in restarts) {
[13:21:00.803]                           name <- restart$name
[13:21:00.803]                           if (is.null(name)) 
[13:21:00.803]                             next
[13:21:00.803]                           if (!grepl(pattern, name)) 
[13:21:00.803]                             next
[13:21:00.803]                           invokeRestart(restart)
[13:21:00.803]                           muffled <- TRUE
[13:21:00.803]                           break
[13:21:00.803]                         }
[13:21:00.803]                       }
[13:21:00.803]                     }
[13:21:00.803]                     invisible(muffled)
[13:21:00.803]                   }
[13:21:00.803]                   muffleCondition(cond)
[13:21:00.803]                 })
[13:21:00.803]             }))
[13:21:00.803]             future::FutureResult(value = ...future.value$value, 
[13:21:00.803]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.803]                   ...future.rng), globalenv = if (FALSE) 
[13:21:00.803]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:00.803]                     ...future.globalenv.names))
[13:21:00.803]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:00.803]         }, condition = base::local({
[13:21:00.803]             c <- base::c
[13:21:00.803]             inherits <- base::inherits
[13:21:00.803]             invokeRestart <- base::invokeRestart
[13:21:00.803]             length <- base::length
[13:21:00.803]             list <- base::list
[13:21:00.803]             seq.int <- base::seq.int
[13:21:00.803]             signalCondition <- base::signalCondition
[13:21:00.803]             sys.calls <- base::sys.calls
[13:21:00.803]             `[[` <- base::`[[`
[13:21:00.803]             `+` <- base::`+`
[13:21:00.803]             `<<-` <- base::`<<-`
[13:21:00.803]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:00.803]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:00.803]                   3L)]
[13:21:00.803]             }
[13:21:00.803]             function(cond) {
[13:21:00.803]                 is_error <- inherits(cond, "error")
[13:21:00.803]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:00.803]                   NULL)
[13:21:00.803]                 if (is_error) {
[13:21:00.803]                   sessionInformation <- function() {
[13:21:00.803]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:00.803]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:00.803]                       search = base::search(), system = base::Sys.info())
[13:21:00.803]                   }
[13:21:00.803]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.803]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:00.803]                     cond$call), session = sessionInformation(), 
[13:21:00.803]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:00.803]                   signalCondition(cond)
[13:21:00.803]                 }
[13:21:00.803]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:00.803]                 "immediateCondition"))) {
[13:21:00.803]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:00.803]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.803]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:00.803]                   if (TRUE && !signal) {
[13:21:00.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.803]                     {
[13:21:00.803]                       inherits <- base::inherits
[13:21:00.803]                       invokeRestart <- base::invokeRestart
[13:21:00.803]                       is.null <- base::is.null
[13:21:00.803]                       muffled <- FALSE
[13:21:00.803]                       if (inherits(cond, "message")) {
[13:21:00.803]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.803]                         if (muffled) 
[13:21:00.803]                           invokeRestart("muffleMessage")
[13:21:00.803]                       }
[13:21:00.803]                       else if (inherits(cond, "warning")) {
[13:21:00.803]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.803]                         if (muffled) 
[13:21:00.803]                           invokeRestart("muffleWarning")
[13:21:00.803]                       }
[13:21:00.803]                       else if (inherits(cond, "condition")) {
[13:21:00.803]                         if (!is.null(pattern)) {
[13:21:00.803]                           computeRestarts <- base::computeRestarts
[13:21:00.803]                           grepl <- base::grepl
[13:21:00.803]                           restarts <- computeRestarts(cond)
[13:21:00.803]                           for (restart in restarts) {
[13:21:00.803]                             name <- restart$name
[13:21:00.803]                             if (is.null(name)) 
[13:21:00.803]                               next
[13:21:00.803]                             if (!grepl(pattern, name)) 
[13:21:00.803]                               next
[13:21:00.803]                             invokeRestart(restart)
[13:21:00.803]                             muffled <- TRUE
[13:21:00.803]                             break
[13:21:00.803]                           }
[13:21:00.803]                         }
[13:21:00.803]                       }
[13:21:00.803]                       invisible(muffled)
[13:21:00.803]                     }
[13:21:00.803]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.803]                   }
[13:21:00.803]                 }
[13:21:00.803]                 else {
[13:21:00.803]                   if (TRUE) {
[13:21:00.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.803]                     {
[13:21:00.803]                       inherits <- base::inherits
[13:21:00.803]                       invokeRestart <- base::invokeRestart
[13:21:00.803]                       is.null <- base::is.null
[13:21:00.803]                       muffled <- FALSE
[13:21:00.803]                       if (inherits(cond, "message")) {
[13:21:00.803]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.803]                         if (muffled) 
[13:21:00.803]                           invokeRestart("muffleMessage")
[13:21:00.803]                       }
[13:21:00.803]                       else if (inherits(cond, "warning")) {
[13:21:00.803]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.803]                         if (muffled) 
[13:21:00.803]                           invokeRestart("muffleWarning")
[13:21:00.803]                       }
[13:21:00.803]                       else if (inherits(cond, "condition")) {
[13:21:00.803]                         if (!is.null(pattern)) {
[13:21:00.803]                           computeRestarts <- base::computeRestarts
[13:21:00.803]                           grepl <- base::grepl
[13:21:00.803]                           restarts <- computeRestarts(cond)
[13:21:00.803]                           for (restart in restarts) {
[13:21:00.803]                             name <- restart$name
[13:21:00.803]                             if (is.null(name)) 
[13:21:00.803]                               next
[13:21:00.803]                             if (!grepl(pattern, name)) 
[13:21:00.803]                               next
[13:21:00.803]                             invokeRestart(restart)
[13:21:00.803]                             muffled <- TRUE
[13:21:00.803]                             break
[13:21:00.803]                           }
[13:21:00.803]                         }
[13:21:00.803]                       }
[13:21:00.803]                       invisible(muffled)
[13:21:00.803]                     }
[13:21:00.803]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.803]                   }
[13:21:00.803]                 }
[13:21:00.803]             }
[13:21:00.803]         }))
[13:21:00.803]     }, error = function(ex) {
[13:21:00.803]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:00.803]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.803]                 ...future.rng), started = ...future.startTime, 
[13:21:00.803]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:00.803]             version = "1.8"), class = "FutureResult")
[13:21:00.803]     }, finally = {
[13:21:00.803]         if (!identical(...future.workdir, getwd())) 
[13:21:00.803]             setwd(...future.workdir)
[13:21:00.803]         {
[13:21:00.803]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:00.803]                 ...future.oldOptions$nwarnings <- NULL
[13:21:00.803]             }
[13:21:00.803]             base::options(...future.oldOptions)
[13:21:00.803]             if (.Platform$OS.type == "windows") {
[13:21:00.803]                 old_names <- names(...future.oldEnvVars)
[13:21:00.803]                 envs <- base::Sys.getenv()
[13:21:00.803]                 names <- names(envs)
[13:21:00.803]                 common <- intersect(names, old_names)
[13:21:00.803]                 added <- setdiff(names, old_names)
[13:21:00.803]                 removed <- setdiff(old_names, names)
[13:21:00.803]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:00.803]                   envs[common]]
[13:21:00.803]                 NAMES <- toupper(changed)
[13:21:00.803]                 args <- list()
[13:21:00.803]                 for (kk in seq_along(NAMES)) {
[13:21:00.803]                   name <- changed[[kk]]
[13:21:00.803]                   NAME <- NAMES[[kk]]
[13:21:00.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.803]                     next
[13:21:00.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.803]                 }
[13:21:00.803]                 NAMES <- toupper(added)
[13:21:00.803]                 for (kk in seq_along(NAMES)) {
[13:21:00.803]                   name <- added[[kk]]
[13:21:00.803]                   NAME <- NAMES[[kk]]
[13:21:00.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.803]                     next
[13:21:00.803]                   args[[name]] <- ""
[13:21:00.803]                 }
[13:21:00.803]                 NAMES <- toupper(removed)
[13:21:00.803]                 for (kk in seq_along(NAMES)) {
[13:21:00.803]                   name <- removed[[kk]]
[13:21:00.803]                   NAME <- NAMES[[kk]]
[13:21:00.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.803]                     next
[13:21:00.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.803]                 }
[13:21:00.803]                 if (length(args) > 0) 
[13:21:00.803]                   base::do.call(base::Sys.setenv, args = args)
[13:21:00.803]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:00.803]             }
[13:21:00.803]             else {
[13:21:00.803]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:00.803]             }
[13:21:00.803]             {
[13:21:00.803]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:00.803]                   0L) {
[13:21:00.803]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:00.803]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:00.803]                   base::options(opts)
[13:21:00.803]                 }
[13:21:00.803]                 {
[13:21:00.803]                   {
[13:21:00.803]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:00.803]                     NULL
[13:21:00.803]                   }
[13:21:00.803]                   options(future.plan = NULL)
[13:21:00.803]                   if (is.na(NA_character_)) 
[13:21:00.803]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.803]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:00.803]                   future::plan(list(function (..., workers = 2L, 
[13:21:00.803]                     envir = parent.frame()) 
[13:21:00.803]                   strategy(..., workers = workers, envir = envir)), 
[13:21:00.803]                     .cleanup = FALSE, .init = FALSE)
[13:21:00.803]                 }
[13:21:00.803]             }
[13:21:00.803]         }
[13:21:00.803]     })
[13:21:00.803]     if (TRUE) {
[13:21:00.803]         base::sink(type = "output", split = FALSE)
[13:21:00.803]         if (TRUE) {
[13:21:00.803]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:00.803]         }
[13:21:00.803]         else {
[13:21:00.803]             ...future.result["stdout"] <- base::list(NULL)
[13:21:00.803]         }
[13:21:00.803]         base::close(...future.stdout)
[13:21:00.803]         ...future.stdout <- NULL
[13:21:00.803]     }
[13:21:00.803]     ...future.result$conditions <- ...future.conditions
[13:21:00.803]     ...future.result$finished <- base::Sys.time()
[13:21:00.803]     ...future.result
[13:21:00.803] }
[13:21:00.806] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[13:21:00.807] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[13:21:00.861] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[13:21:00.861] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[13:21:00.862] MultisessionFuture started
[13:21:00.862] - Launch lazy future ... done
[13:21:00.862] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[13:21:00.863] result() for ClusterFuture ...
[13:21:00.863] receiveMessageFromWorker() for ClusterFuture ...
[13:21:00.863] - Validating connection of MultisessionFuture
[13:21:00.907] - received message: FutureResult
[13:21:00.907] - Received FutureResult
[13:21:00.907] - Erased future from FutureRegistry
[13:21:00.907] result() for ClusterFuture ...
[13:21:00.907] - result already collected: FutureResult
[13:21:00.907] result() for ClusterFuture ... done
[13:21:00.907] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:00.907] result() for ClusterFuture ... done
[13:21:00.908] result() for ClusterFuture ...
[13:21:00.908] - result already collected: FutureResult
[13:21:00.908] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 2345203b-0d27-338c-95eb-7654811919cc
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[13:21:00.908] getGlobalsAndPackages() ...
[13:21:00.908] Searching for globals...
[13:21:00.909] - globals found: [3] ‘{’, ‘$’, ‘f1’
[13:21:00.909] Searching for globals ... DONE
[13:21:00.909] Resolving globals: FALSE
[13:21:00.911] The total size of the 1 globals is 1.54 MiB (1614760 bytes)
[13:21:00.912] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[13:21:00.912] - globals: [1] ‘f1’
[13:21:00.912] 
[13:21:00.912] getGlobalsAndPackages() ... DONE
[13:21:00.912] run() for ‘Future’ ...
[13:21:00.913] - state: ‘created’
[13:21:00.913] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:00.924] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:00.924] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:00.924]   - Field: ‘node’
[13:21:00.925]   - Field: ‘label’
[13:21:00.925]   - Field: ‘local’
[13:21:00.925]   - Field: ‘owner’
[13:21:00.925]   - Field: ‘envir’
[13:21:00.925]   - Field: ‘workers’
[13:21:00.925]   - Field: ‘packages’
[13:21:00.925]   - Field: ‘gc’
[13:21:00.925]   - Field: ‘conditions’
[13:21:00.925]   - Field: ‘persistent’
[13:21:00.925]   - Field: ‘expr’
[13:21:00.925]   - Field: ‘uuid’
[13:21:00.926]   - Field: ‘seed’
[13:21:00.926]   - Field: ‘version’
[13:21:00.926]   - Field: ‘result’
[13:21:00.926]   - Field: ‘asynchronous’
[13:21:00.926]   - Field: ‘calls’
[13:21:00.926]   - Field: ‘globals’
[13:21:00.926]   - Field: ‘stdout’
[13:21:00.926]   - Field: ‘earlySignal’
[13:21:00.926]   - Field: ‘lazy’
[13:21:00.926]   - Field: ‘state’
[13:21:00.926] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:00.927] - Launch lazy future ...
[13:21:00.927] Packages needed by the future expression (n = 0): <none>
[13:21:00.927] Packages needed by future strategies (n = 0): <none>
[13:21:00.927] {
[13:21:00.927]     {
[13:21:00.927]         {
[13:21:00.927]             ...future.startTime <- base::Sys.time()
[13:21:00.927]             {
[13:21:00.927]                 {
[13:21:00.927]                   {
[13:21:00.927]                     {
[13:21:00.927]                       base::local({
[13:21:00.927]                         has_future <- base::requireNamespace("future", 
[13:21:00.927]                           quietly = TRUE)
[13:21:00.927]                         if (has_future) {
[13:21:00.927]                           ns <- base::getNamespace("future")
[13:21:00.927]                           version <- ns[[".package"]][["version"]]
[13:21:00.927]                           if (is.null(version)) 
[13:21:00.927]                             version <- utils::packageVersion("future")
[13:21:00.927]                         }
[13:21:00.927]                         else {
[13:21:00.927]                           version <- NULL
[13:21:00.927]                         }
[13:21:00.927]                         if (!has_future || version < "1.8.0") {
[13:21:00.927]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:00.927]                             "", base::R.version$version.string), 
[13:21:00.927]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:00.927]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:00.927]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:00.927]                               "release", "version")], collapse = " "), 
[13:21:00.927]                             hostname = base::Sys.info()[["nodename"]])
[13:21:00.927]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:00.927]                             info)
[13:21:00.927]                           info <- base::paste(info, collapse = "; ")
[13:21:00.927]                           if (!has_future) {
[13:21:00.927]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:00.927]                               info)
[13:21:00.927]                           }
[13:21:00.927]                           else {
[13:21:00.927]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:00.927]                               info, version)
[13:21:00.927]                           }
[13:21:00.927]                           base::stop(msg)
[13:21:00.927]                         }
[13:21:00.927]                       })
[13:21:00.927]                     }
[13:21:00.927]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:00.927]                     base::options(mc.cores = 1L)
[13:21:00.927]                   }
[13:21:00.927]                   options(future.plan = NULL)
[13:21:00.927]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.927]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:00.927]                 }
[13:21:00.927]                 ...future.workdir <- getwd()
[13:21:00.927]             }
[13:21:00.927]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:00.927]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:00.927]         }
[13:21:00.927]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:00.927]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:00.927]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:00.927]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:00.927]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:00.927]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:00.927]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:00.927]             base::names(...future.oldOptions))
[13:21:00.927]     }
[13:21:00.927]     if (FALSE) {
[13:21:00.927]     }
[13:21:00.927]     else {
[13:21:00.927]         if (TRUE) {
[13:21:00.927]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:00.927]                 open = "w")
[13:21:00.927]         }
[13:21:00.927]         else {
[13:21:00.927]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:00.927]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:00.927]         }
[13:21:00.927]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:00.927]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:00.927]             base::sink(type = "output", split = FALSE)
[13:21:00.927]             base::close(...future.stdout)
[13:21:00.927]         }, add = TRUE)
[13:21:00.927]     }
[13:21:00.927]     ...future.frame <- base::sys.nframe()
[13:21:00.927]     ...future.conditions <- base::list()
[13:21:00.927]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:00.927]     if (FALSE) {
[13:21:00.927]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:00.927]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:00.927]     }
[13:21:00.927]     ...future.result <- base::tryCatch({
[13:21:00.927]         base::withCallingHandlers({
[13:21:00.927]             ...future.value <- base::withVisible(base::local({
[13:21:00.927]                 ...future.makeSendCondition <- local({
[13:21:00.927]                   sendCondition <- NULL
[13:21:00.927]                   function(frame = 1L) {
[13:21:00.927]                     if (is.function(sendCondition)) 
[13:21:00.927]                       return(sendCondition)
[13:21:00.927]                     ns <- getNamespace("parallel")
[13:21:00.927]                     if (exists("sendData", mode = "function", 
[13:21:00.927]                       envir = ns)) {
[13:21:00.927]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:00.927]                         envir = ns)
[13:21:00.927]                       envir <- sys.frame(frame)
[13:21:00.927]                       master <- NULL
[13:21:00.927]                       while (!identical(envir, .GlobalEnv) && 
[13:21:00.927]                         !identical(envir, emptyenv())) {
[13:21:00.927]                         if (exists("master", mode = "list", envir = envir, 
[13:21:00.927]                           inherits = FALSE)) {
[13:21:00.927]                           master <- get("master", mode = "list", 
[13:21:00.927]                             envir = envir, inherits = FALSE)
[13:21:00.927]                           if (inherits(master, c("SOCKnode", 
[13:21:00.927]                             "SOCK0node"))) {
[13:21:00.927]                             sendCondition <<- function(cond) {
[13:21:00.927]                               data <- list(type = "VALUE", value = cond, 
[13:21:00.927]                                 success = TRUE)
[13:21:00.927]                               parallel_sendData(master, data)
[13:21:00.927]                             }
[13:21:00.927]                             return(sendCondition)
[13:21:00.927]                           }
[13:21:00.927]                         }
[13:21:00.927]                         frame <- frame + 1L
[13:21:00.927]                         envir <- sys.frame(frame)
[13:21:00.927]                       }
[13:21:00.927]                     }
[13:21:00.927]                     sendCondition <<- function(cond) NULL
[13:21:00.927]                   }
[13:21:00.927]                 })
[13:21:00.927]                 withCallingHandlers({
[13:21:00.927]                   {
[13:21:00.927]                     f1$owner
[13:21:00.927]                   }
[13:21:00.927]                 }, immediateCondition = function(cond) {
[13:21:00.927]                   sendCondition <- ...future.makeSendCondition()
[13:21:00.927]                   sendCondition(cond)
[13:21:00.927]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.927]                   {
[13:21:00.927]                     inherits <- base::inherits
[13:21:00.927]                     invokeRestart <- base::invokeRestart
[13:21:00.927]                     is.null <- base::is.null
[13:21:00.927]                     muffled <- FALSE
[13:21:00.927]                     if (inherits(cond, "message")) {
[13:21:00.927]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:00.927]                       if (muffled) 
[13:21:00.927]                         invokeRestart("muffleMessage")
[13:21:00.927]                     }
[13:21:00.927]                     else if (inherits(cond, "warning")) {
[13:21:00.927]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:00.927]                       if (muffled) 
[13:21:00.927]                         invokeRestart("muffleWarning")
[13:21:00.927]                     }
[13:21:00.927]                     else if (inherits(cond, "condition")) {
[13:21:00.927]                       if (!is.null(pattern)) {
[13:21:00.927]                         computeRestarts <- base::computeRestarts
[13:21:00.927]                         grepl <- base::grepl
[13:21:00.927]                         restarts <- computeRestarts(cond)
[13:21:00.927]                         for (restart in restarts) {
[13:21:00.927]                           name <- restart$name
[13:21:00.927]                           if (is.null(name)) 
[13:21:00.927]                             next
[13:21:00.927]                           if (!grepl(pattern, name)) 
[13:21:00.927]                             next
[13:21:00.927]                           invokeRestart(restart)
[13:21:00.927]                           muffled <- TRUE
[13:21:00.927]                           break
[13:21:00.927]                         }
[13:21:00.927]                       }
[13:21:00.927]                     }
[13:21:00.927]                     invisible(muffled)
[13:21:00.927]                   }
[13:21:00.927]                   muffleCondition(cond)
[13:21:00.927]                 })
[13:21:00.927]             }))
[13:21:00.927]             future::FutureResult(value = ...future.value$value, 
[13:21:00.927]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.927]                   ...future.rng), globalenv = if (FALSE) 
[13:21:00.927]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:00.927]                     ...future.globalenv.names))
[13:21:00.927]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:00.927]         }, condition = base::local({
[13:21:00.927]             c <- base::c
[13:21:00.927]             inherits <- base::inherits
[13:21:00.927]             invokeRestart <- base::invokeRestart
[13:21:00.927]             length <- base::length
[13:21:00.927]             list <- base::list
[13:21:00.927]             seq.int <- base::seq.int
[13:21:00.927]             signalCondition <- base::signalCondition
[13:21:00.927]             sys.calls <- base::sys.calls
[13:21:00.927]             `[[` <- base::`[[`
[13:21:00.927]             `+` <- base::`+`
[13:21:00.927]             `<<-` <- base::`<<-`
[13:21:00.927]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:00.927]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:00.927]                   3L)]
[13:21:00.927]             }
[13:21:00.927]             function(cond) {
[13:21:00.927]                 is_error <- inherits(cond, "error")
[13:21:00.927]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:00.927]                   NULL)
[13:21:00.927]                 if (is_error) {
[13:21:00.927]                   sessionInformation <- function() {
[13:21:00.927]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:00.927]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:00.927]                       search = base::search(), system = base::Sys.info())
[13:21:00.927]                   }
[13:21:00.927]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.927]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:00.927]                     cond$call), session = sessionInformation(), 
[13:21:00.927]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:00.927]                   signalCondition(cond)
[13:21:00.927]                 }
[13:21:00.927]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:00.927]                 "immediateCondition"))) {
[13:21:00.927]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:00.927]                   ...future.conditions[[length(...future.conditions) + 
[13:21:00.927]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:00.927]                   if (TRUE && !signal) {
[13:21:00.927]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.927]                     {
[13:21:00.927]                       inherits <- base::inherits
[13:21:00.927]                       invokeRestart <- base::invokeRestart
[13:21:00.927]                       is.null <- base::is.null
[13:21:00.927]                       muffled <- FALSE
[13:21:00.927]                       if (inherits(cond, "message")) {
[13:21:00.927]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.927]                         if (muffled) 
[13:21:00.927]                           invokeRestart("muffleMessage")
[13:21:00.927]                       }
[13:21:00.927]                       else if (inherits(cond, "warning")) {
[13:21:00.927]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.927]                         if (muffled) 
[13:21:00.927]                           invokeRestart("muffleWarning")
[13:21:00.927]                       }
[13:21:00.927]                       else if (inherits(cond, "condition")) {
[13:21:00.927]                         if (!is.null(pattern)) {
[13:21:00.927]                           computeRestarts <- base::computeRestarts
[13:21:00.927]                           grepl <- base::grepl
[13:21:00.927]                           restarts <- computeRestarts(cond)
[13:21:00.927]                           for (restart in restarts) {
[13:21:00.927]                             name <- restart$name
[13:21:00.927]                             if (is.null(name)) 
[13:21:00.927]                               next
[13:21:00.927]                             if (!grepl(pattern, name)) 
[13:21:00.927]                               next
[13:21:00.927]                             invokeRestart(restart)
[13:21:00.927]                             muffled <- TRUE
[13:21:00.927]                             break
[13:21:00.927]                           }
[13:21:00.927]                         }
[13:21:00.927]                       }
[13:21:00.927]                       invisible(muffled)
[13:21:00.927]                     }
[13:21:00.927]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.927]                   }
[13:21:00.927]                 }
[13:21:00.927]                 else {
[13:21:00.927]                   if (TRUE) {
[13:21:00.927]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:00.927]                     {
[13:21:00.927]                       inherits <- base::inherits
[13:21:00.927]                       invokeRestart <- base::invokeRestart
[13:21:00.927]                       is.null <- base::is.null
[13:21:00.927]                       muffled <- FALSE
[13:21:00.927]                       if (inherits(cond, "message")) {
[13:21:00.927]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:00.927]                         if (muffled) 
[13:21:00.927]                           invokeRestart("muffleMessage")
[13:21:00.927]                       }
[13:21:00.927]                       else if (inherits(cond, "warning")) {
[13:21:00.927]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:00.927]                         if (muffled) 
[13:21:00.927]                           invokeRestart("muffleWarning")
[13:21:00.927]                       }
[13:21:00.927]                       else if (inherits(cond, "condition")) {
[13:21:00.927]                         if (!is.null(pattern)) {
[13:21:00.927]                           computeRestarts <- base::computeRestarts
[13:21:00.927]                           grepl <- base::grepl
[13:21:00.927]                           restarts <- computeRestarts(cond)
[13:21:00.927]                           for (restart in restarts) {
[13:21:00.927]                             name <- restart$name
[13:21:00.927]                             if (is.null(name)) 
[13:21:00.927]                               next
[13:21:00.927]                             if (!grepl(pattern, name)) 
[13:21:00.927]                               next
[13:21:00.927]                             invokeRestart(restart)
[13:21:00.927]                             muffled <- TRUE
[13:21:00.927]                             break
[13:21:00.927]                           }
[13:21:00.927]                         }
[13:21:00.927]                       }
[13:21:00.927]                       invisible(muffled)
[13:21:00.927]                     }
[13:21:00.927]                     muffleCondition(cond, pattern = "^muffle")
[13:21:00.927]                   }
[13:21:00.927]                 }
[13:21:00.927]             }
[13:21:00.927]         }))
[13:21:00.927]     }, error = function(ex) {
[13:21:00.927]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:00.927]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:00.927]                 ...future.rng), started = ...future.startTime, 
[13:21:00.927]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:00.927]             version = "1.8"), class = "FutureResult")
[13:21:00.927]     }, finally = {
[13:21:00.927]         if (!identical(...future.workdir, getwd())) 
[13:21:00.927]             setwd(...future.workdir)
[13:21:00.927]         {
[13:21:00.927]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:00.927]                 ...future.oldOptions$nwarnings <- NULL
[13:21:00.927]             }
[13:21:00.927]             base::options(...future.oldOptions)
[13:21:00.927]             if (.Platform$OS.type == "windows") {
[13:21:00.927]                 old_names <- names(...future.oldEnvVars)
[13:21:00.927]                 envs <- base::Sys.getenv()
[13:21:00.927]                 names <- names(envs)
[13:21:00.927]                 common <- intersect(names, old_names)
[13:21:00.927]                 added <- setdiff(names, old_names)
[13:21:00.927]                 removed <- setdiff(old_names, names)
[13:21:00.927]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:00.927]                   envs[common]]
[13:21:00.927]                 NAMES <- toupper(changed)
[13:21:00.927]                 args <- list()
[13:21:00.927]                 for (kk in seq_along(NAMES)) {
[13:21:00.927]                   name <- changed[[kk]]
[13:21:00.927]                   NAME <- NAMES[[kk]]
[13:21:00.927]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.927]                     next
[13:21:00.927]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.927]                 }
[13:21:00.927]                 NAMES <- toupper(added)
[13:21:00.927]                 for (kk in seq_along(NAMES)) {
[13:21:00.927]                   name <- added[[kk]]
[13:21:00.927]                   NAME <- NAMES[[kk]]
[13:21:00.927]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.927]                     next
[13:21:00.927]                   args[[name]] <- ""
[13:21:00.927]                 }
[13:21:00.927]                 NAMES <- toupper(removed)
[13:21:00.927]                 for (kk in seq_along(NAMES)) {
[13:21:00.927]                   name <- removed[[kk]]
[13:21:00.927]                   NAME <- NAMES[[kk]]
[13:21:00.927]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:00.927]                     next
[13:21:00.927]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:00.927]                 }
[13:21:00.927]                 if (length(args) > 0) 
[13:21:00.927]                   base::do.call(base::Sys.setenv, args = args)
[13:21:00.927]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:00.927]             }
[13:21:00.927]             else {
[13:21:00.927]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:00.927]             }
[13:21:00.927]             {
[13:21:00.927]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:00.927]                   0L) {
[13:21:00.927]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:00.927]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:00.927]                   base::options(opts)
[13:21:00.927]                 }
[13:21:00.927]                 {
[13:21:00.927]                   {
[13:21:00.927]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:00.927]                     NULL
[13:21:00.927]                   }
[13:21:00.927]                   options(future.plan = NULL)
[13:21:00.927]                   if (is.na(NA_character_)) 
[13:21:00.927]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:00.927]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:00.927]                   future::plan(list(function (..., workers = 2L, 
[13:21:00.927]                     envir = parent.frame()) 
[13:21:00.927]                   strategy(..., workers = workers, envir = envir)), 
[13:21:00.927]                     .cleanup = FALSE, .init = FALSE)
[13:21:00.927]                 }
[13:21:00.927]             }
[13:21:00.927]         }
[13:21:00.927]     })
[13:21:00.927]     if (TRUE) {
[13:21:00.927]         base::sink(type = "output", split = FALSE)
[13:21:00.927]         if (TRUE) {
[13:21:00.927]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:00.927]         }
[13:21:00.927]         else {
[13:21:00.927]             ...future.result["stdout"] <- base::list(NULL)
[13:21:00.927]         }
[13:21:00.927]         base::close(...future.stdout)
[13:21:00.927]         ...future.stdout <- NULL
[13:21:00.927]     }
[13:21:00.927]     ...future.result$conditions <- ...future.conditions
[13:21:00.927]     ...future.result$finished <- base::Sys.time()
[13:21:00.927]     ...future.result
[13:21:00.927] }
[13:21:00.930] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[13:21:00.932] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[13:21:00.985] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[13:21:00.985] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[13:21:00.986] MultisessionFuture started
[13:21:00.986] - Launch lazy future ... done
[13:21:00.986] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[13:21:00.986] result() for ClusterFuture ...
[13:21:00.986] receiveMessageFromWorker() for ClusterFuture ...
[13:21:00.986] - Validating connection of MultisessionFuture
[13:21:01.031] - received message: FutureResult
[13:21:01.031] - Received FutureResult
[13:21:01.031] - Erased future from FutureRegistry
[13:21:01.031] result() for ClusterFuture ...
[13:21:01.031] - result already collected: FutureResult
[13:21:01.031] result() for ClusterFuture ... done
[13:21:01.031] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:01.032] result() for ClusterFuture ... done
[13:21:01.032] result() for ClusterFuture ...
[13:21:01.032] - result already collected: FutureResult
[13:21:01.032] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 2345203b-0d27-338c-95eb-7654811919cc
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[13:21:01.032] getGlobalsAndPackages() ...
[13:21:01.032] Searching for globals...
[13:21:01.034] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[13:21:01.034] Searching for globals ... DONE
[13:21:01.034] Resolving globals: FALSE
[13:21:01.036] The total size of the 1 globals is 1.54 MiB (1617696 bytes)
[13:21:01.037] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[13:21:01.037] - globals: [1] ‘f1’
[13:21:01.037] 
[13:21:01.037] getGlobalsAndPackages() ... DONE
[13:21:01.037] run() for ‘Future’ ...
[13:21:01.037] - state: ‘created’
[13:21:01.037] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:01.048] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:01.049] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:01.049]   - Field: ‘node’
[13:21:01.049]   - Field: ‘label’
[13:21:01.049]   - Field: ‘local’
[13:21:01.049]   - Field: ‘owner’
[13:21:01.049]   - Field: ‘envir’
[13:21:01.049]   - Field: ‘workers’
[13:21:01.049]   - Field: ‘packages’
[13:21:01.049]   - Field: ‘gc’
[13:21:01.049]   - Field: ‘conditions’
[13:21:01.050]   - Field: ‘persistent’
[13:21:01.050]   - Field: ‘expr’
[13:21:01.050]   - Field: ‘uuid’
[13:21:01.050]   - Field: ‘seed’
[13:21:01.050]   - Field: ‘version’
[13:21:01.050]   - Field: ‘result’
[13:21:01.050]   - Field: ‘asynchronous’
[13:21:01.050]   - Field: ‘calls’
[13:21:01.050]   - Field: ‘globals’
[13:21:01.050]   - Field: ‘stdout’
[13:21:01.050]   - Field: ‘earlySignal’
[13:21:01.051]   - Field: ‘lazy’
[13:21:01.051]   - Field: ‘state’
[13:21:01.051] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:01.051] - Launch lazy future ...
[13:21:01.051] Packages needed by the future expression (n = 0): <none>
[13:21:01.051] Packages needed by future strategies (n = 0): <none>
[13:21:01.052] {
[13:21:01.052]     {
[13:21:01.052]         {
[13:21:01.052]             ...future.startTime <- base::Sys.time()
[13:21:01.052]             {
[13:21:01.052]                 {
[13:21:01.052]                   {
[13:21:01.052]                     {
[13:21:01.052]                       base::local({
[13:21:01.052]                         has_future <- base::requireNamespace("future", 
[13:21:01.052]                           quietly = TRUE)
[13:21:01.052]                         if (has_future) {
[13:21:01.052]                           ns <- base::getNamespace("future")
[13:21:01.052]                           version <- ns[[".package"]][["version"]]
[13:21:01.052]                           if (is.null(version)) 
[13:21:01.052]                             version <- utils::packageVersion("future")
[13:21:01.052]                         }
[13:21:01.052]                         else {
[13:21:01.052]                           version <- NULL
[13:21:01.052]                         }
[13:21:01.052]                         if (!has_future || version < "1.8.0") {
[13:21:01.052]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:01.052]                             "", base::R.version$version.string), 
[13:21:01.052]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:01.052]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:01.052]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:01.052]                               "release", "version")], collapse = " "), 
[13:21:01.052]                             hostname = base::Sys.info()[["nodename"]])
[13:21:01.052]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:01.052]                             info)
[13:21:01.052]                           info <- base::paste(info, collapse = "; ")
[13:21:01.052]                           if (!has_future) {
[13:21:01.052]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:01.052]                               info)
[13:21:01.052]                           }
[13:21:01.052]                           else {
[13:21:01.052]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:01.052]                               info, version)
[13:21:01.052]                           }
[13:21:01.052]                           base::stop(msg)
[13:21:01.052]                         }
[13:21:01.052]                       })
[13:21:01.052]                     }
[13:21:01.052]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:01.052]                     base::options(mc.cores = 1L)
[13:21:01.052]                   }
[13:21:01.052]                   options(future.plan = NULL)
[13:21:01.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:01.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:01.052]                 }
[13:21:01.052]                 ...future.workdir <- getwd()
[13:21:01.052]             }
[13:21:01.052]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:01.052]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:01.052]         }
[13:21:01.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:01.052]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:01.052]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:01.052]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:01.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:01.052]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:01.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:01.052]             base::names(...future.oldOptions))
[13:21:01.052]     }
[13:21:01.052]     if (FALSE) {
[13:21:01.052]     }
[13:21:01.052]     else {
[13:21:01.052]         if (TRUE) {
[13:21:01.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:01.052]                 open = "w")
[13:21:01.052]         }
[13:21:01.052]         else {
[13:21:01.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:01.052]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:01.052]         }
[13:21:01.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:01.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:01.052]             base::sink(type = "output", split = FALSE)
[13:21:01.052]             base::close(...future.stdout)
[13:21:01.052]         }, add = TRUE)
[13:21:01.052]     }
[13:21:01.052]     ...future.frame <- base::sys.nframe()
[13:21:01.052]     ...future.conditions <- base::list()
[13:21:01.052]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:01.052]     if (FALSE) {
[13:21:01.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:01.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:01.052]     }
[13:21:01.052]     ...future.result <- base::tryCatch({
[13:21:01.052]         base::withCallingHandlers({
[13:21:01.052]             ...future.value <- base::withVisible(base::local({
[13:21:01.052]                 ...future.makeSendCondition <- local({
[13:21:01.052]                   sendCondition <- NULL
[13:21:01.052]                   function(frame = 1L) {
[13:21:01.052]                     if (is.function(sendCondition)) 
[13:21:01.052]                       return(sendCondition)
[13:21:01.052]                     ns <- getNamespace("parallel")
[13:21:01.052]                     if (exists("sendData", mode = "function", 
[13:21:01.052]                       envir = ns)) {
[13:21:01.052]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:01.052]                         envir = ns)
[13:21:01.052]                       envir <- sys.frame(frame)
[13:21:01.052]                       master <- NULL
[13:21:01.052]                       while (!identical(envir, .GlobalEnv) && 
[13:21:01.052]                         !identical(envir, emptyenv())) {
[13:21:01.052]                         if (exists("master", mode = "list", envir = envir, 
[13:21:01.052]                           inherits = FALSE)) {
[13:21:01.052]                           master <- get("master", mode = "list", 
[13:21:01.052]                             envir = envir, inherits = FALSE)
[13:21:01.052]                           if (inherits(master, c("SOCKnode", 
[13:21:01.052]                             "SOCK0node"))) {
[13:21:01.052]                             sendCondition <<- function(cond) {
[13:21:01.052]                               data <- list(type = "VALUE", value = cond, 
[13:21:01.052]                                 success = TRUE)
[13:21:01.052]                               parallel_sendData(master, data)
[13:21:01.052]                             }
[13:21:01.052]                             return(sendCondition)
[13:21:01.052]                           }
[13:21:01.052]                         }
[13:21:01.052]                         frame <- frame + 1L
[13:21:01.052]                         envir <- sys.frame(frame)
[13:21:01.052]                       }
[13:21:01.052]                     }
[13:21:01.052]                     sendCondition <<- function(cond) NULL
[13:21:01.052]                   }
[13:21:01.052]                 })
[13:21:01.052]                 withCallingHandlers({
[13:21:01.052]                   {
[13:21:01.052]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[13:21:01.052]                     "not-owner"
[13:21:01.052]                   }
[13:21:01.052]                 }, immediateCondition = function(cond) {
[13:21:01.052]                   sendCondition <- ...future.makeSendCondition()
[13:21:01.052]                   sendCondition(cond)
[13:21:01.052]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.052]                   {
[13:21:01.052]                     inherits <- base::inherits
[13:21:01.052]                     invokeRestart <- base::invokeRestart
[13:21:01.052]                     is.null <- base::is.null
[13:21:01.052]                     muffled <- FALSE
[13:21:01.052]                     if (inherits(cond, "message")) {
[13:21:01.052]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:01.052]                       if (muffled) 
[13:21:01.052]                         invokeRestart("muffleMessage")
[13:21:01.052]                     }
[13:21:01.052]                     else if (inherits(cond, "warning")) {
[13:21:01.052]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:01.052]                       if (muffled) 
[13:21:01.052]                         invokeRestart("muffleWarning")
[13:21:01.052]                     }
[13:21:01.052]                     else if (inherits(cond, "condition")) {
[13:21:01.052]                       if (!is.null(pattern)) {
[13:21:01.052]                         computeRestarts <- base::computeRestarts
[13:21:01.052]                         grepl <- base::grepl
[13:21:01.052]                         restarts <- computeRestarts(cond)
[13:21:01.052]                         for (restart in restarts) {
[13:21:01.052]                           name <- restart$name
[13:21:01.052]                           if (is.null(name)) 
[13:21:01.052]                             next
[13:21:01.052]                           if (!grepl(pattern, name)) 
[13:21:01.052]                             next
[13:21:01.052]                           invokeRestart(restart)
[13:21:01.052]                           muffled <- TRUE
[13:21:01.052]                           break
[13:21:01.052]                         }
[13:21:01.052]                       }
[13:21:01.052]                     }
[13:21:01.052]                     invisible(muffled)
[13:21:01.052]                   }
[13:21:01.052]                   muffleCondition(cond)
[13:21:01.052]                 })
[13:21:01.052]             }))
[13:21:01.052]             future::FutureResult(value = ...future.value$value, 
[13:21:01.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:01.052]                   ...future.rng), globalenv = if (FALSE) 
[13:21:01.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:01.052]                     ...future.globalenv.names))
[13:21:01.052]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:01.052]         }, condition = base::local({
[13:21:01.052]             c <- base::c
[13:21:01.052]             inherits <- base::inherits
[13:21:01.052]             invokeRestart <- base::invokeRestart
[13:21:01.052]             length <- base::length
[13:21:01.052]             list <- base::list
[13:21:01.052]             seq.int <- base::seq.int
[13:21:01.052]             signalCondition <- base::signalCondition
[13:21:01.052]             sys.calls <- base::sys.calls
[13:21:01.052]             `[[` <- base::`[[`
[13:21:01.052]             `+` <- base::`+`
[13:21:01.052]             `<<-` <- base::`<<-`
[13:21:01.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:01.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:01.052]                   3L)]
[13:21:01.052]             }
[13:21:01.052]             function(cond) {
[13:21:01.052]                 is_error <- inherits(cond, "error")
[13:21:01.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:01.052]                   NULL)
[13:21:01.052]                 if (is_error) {
[13:21:01.052]                   sessionInformation <- function() {
[13:21:01.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:01.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:01.052]                       search = base::search(), system = base::Sys.info())
[13:21:01.052]                   }
[13:21:01.052]                   ...future.conditions[[length(...future.conditions) + 
[13:21:01.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:01.052]                     cond$call), session = sessionInformation(), 
[13:21:01.052]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:01.052]                   signalCondition(cond)
[13:21:01.052]                 }
[13:21:01.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:01.052]                 "immediateCondition"))) {
[13:21:01.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:01.052]                   ...future.conditions[[length(...future.conditions) + 
[13:21:01.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:01.052]                   if (TRUE && !signal) {
[13:21:01.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.052]                     {
[13:21:01.052]                       inherits <- base::inherits
[13:21:01.052]                       invokeRestart <- base::invokeRestart
[13:21:01.052]                       is.null <- base::is.null
[13:21:01.052]                       muffled <- FALSE
[13:21:01.052]                       if (inherits(cond, "message")) {
[13:21:01.052]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:01.052]                         if (muffled) 
[13:21:01.052]                           invokeRestart("muffleMessage")
[13:21:01.052]                       }
[13:21:01.052]                       else if (inherits(cond, "warning")) {
[13:21:01.052]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:01.052]                         if (muffled) 
[13:21:01.052]                           invokeRestart("muffleWarning")
[13:21:01.052]                       }
[13:21:01.052]                       else if (inherits(cond, "condition")) {
[13:21:01.052]                         if (!is.null(pattern)) {
[13:21:01.052]                           computeRestarts <- base::computeRestarts
[13:21:01.052]                           grepl <- base::grepl
[13:21:01.052]                           restarts <- computeRestarts(cond)
[13:21:01.052]                           for (restart in restarts) {
[13:21:01.052]                             name <- restart$name
[13:21:01.052]                             if (is.null(name)) 
[13:21:01.052]                               next
[13:21:01.052]                             if (!grepl(pattern, name)) 
[13:21:01.052]                               next
[13:21:01.052]                             invokeRestart(restart)
[13:21:01.052]                             muffled <- TRUE
[13:21:01.052]                             break
[13:21:01.052]                           }
[13:21:01.052]                         }
[13:21:01.052]                       }
[13:21:01.052]                       invisible(muffled)
[13:21:01.052]                     }
[13:21:01.052]                     muffleCondition(cond, pattern = "^muffle")
[13:21:01.052]                   }
[13:21:01.052]                 }
[13:21:01.052]                 else {
[13:21:01.052]                   if (TRUE) {
[13:21:01.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.052]                     {
[13:21:01.052]                       inherits <- base::inherits
[13:21:01.052]                       invokeRestart <- base::invokeRestart
[13:21:01.052]                       is.null <- base::is.null
[13:21:01.052]                       muffled <- FALSE
[13:21:01.052]                       if (inherits(cond, "message")) {
[13:21:01.052]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:01.052]                         if (muffled) 
[13:21:01.052]                           invokeRestart("muffleMessage")
[13:21:01.052]                       }
[13:21:01.052]                       else if (inherits(cond, "warning")) {
[13:21:01.052]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:01.052]                         if (muffled) 
[13:21:01.052]                           invokeRestart("muffleWarning")
[13:21:01.052]                       }
[13:21:01.052]                       else if (inherits(cond, "condition")) {
[13:21:01.052]                         if (!is.null(pattern)) {
[13:21:01.052]                           computeRestarts <- base::computeRestarts
[13:21:01.052]                           grepl <- base::grepl
[13:21:01.052]                           restarts <- computeRestarts(cond)
[13:21:01.052]                           for (restart in restarts) {
[13:21:01.052]                             name <- restart$name
[13:21:01.052]                             if (is.null(name)) 
[13:21:01.052]                               next
[13:21:01.052]                             if (!grepl(pattern, name)) 
[13:21:01.052]                               next
[13:21:01.052]                             invokeRestart(restart)
[13:21:01.052]                             muffled <- TRUE
[13:21:01.052]                             break
[13:21:01.052]                           }
[13:21:01.052]                         }
[13:21:01.052]                       }
[13:21:01.052]                       invisible(muffled)
[13:21:01.052]                     }
[13:21:01.052]                     muffleCondition(cond, pattern = "^muffle")
[13:21:01.052]                   }
[13:21:01.052]                 }
[13:21:01.052]             }
[13:21:01.052]         }))
[13:21:01.052]     }, error = function(ex) {
[13:21:01.052]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:01.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:01.052]                 ...future.rng), started = ...future.startTime, 
[13:21:01.052]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:01.052]             version = "1.8"), class = "FutureResult")
[13:21:01.052]     }, finally = {
[13:21:01.052]         if (!identical(...future.workdir, getwd())) 
[13:21:01.052]             setwd(...future.workdir)
[13:21:01.052]         {
[13:21:01.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:01.052]                 ...future.oldOptions$nwarnings <- NULL
[13:21:01.052]             }
[13:21:01.052]             base::options(...future.oldOptions)
[13:21:01.052]             if (.Platform$OS.type == "windows") {
[13:21:01.052]                 old_names <- names(...future.oldEnvVars)
[13:21:01.052]                 envs <- base::Sys.getenv()
[13:21:01.052]                 names <- names(envs)
[13:21:01.052]                 common <- intersect(names, old_names)
[13:21:01.052]                 added <- setdiff(names, old_names)
[13:21:01.052]                 removed <- setdiff(old_names, names)
[13:21:01.052]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:01.052]                   envs[common]]
[13:21:01.052]                 NAMES <- toupper(changed)
[13:21:01.052]                 args <- list()
[13:21:01.052]                 for (kk in seq_along(NAMES)) {
[13:21:01.052]                   name <- changed[[kk]]
[13:21:01.052]                   NAME <- NAMES[[kk]]
[13:21:01.052]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.052]                     next
[13:21:01.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:01.052]                 }
[13:21:01.052]                 NAMES <- toupper(added)
[13:21:01.052]                 for (kk in seq_along(NAMES)) {
[13:21:01.052]                   name <- added[[kk]]
[13:21:01.052]                   NAME <- NAMES[[kk]]
[13:21:01.052]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.052]                     next
[13:21:01.052]                   args[[name]] <- ""
[13:21:01.052]                 }
[13:21:01.052]                 NAMES <- toupper(removed)
[13:21:01.052]                 for (kk in seq_along(NAMES)) {
[13:21:01.052]                   name <- removed[[kk]]
[13:21:01.052]                   NAME <- NAMES[[kk]]
[13:21:01.052]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.052]                     next
[13:21:01.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:01.052]                 }
[13:21:01.052]                 if (length(args) > 0) 
[13:21:01.052]                   base::do.call(base::Sys.setenv, args = args)
[13:21:01.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:01.052]             }
[13:21:01.052]             else {
[13:21:01.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:01.052]             }
[13:21:01.052]             {
[13:21:01.052]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:01.052]                   0L) {
[13:21:01.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:01.052]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:01.052]                   base::options(opts)
[13:21:01.052]                 }
[13:21:01.052]                 {
[13:21:01.052]                   {
[13:21:01.052]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:01.052]                     NULL
[13:21:01.052]                   }
[13:21:01.052]                   options(future.plan = NULL)
[13:21:01.052]                   if (is.na(NA_character_)) 
[13:21:01.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:01.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:01.052]                   future::plan(list(function (..., workers = 2L, 
[13:21:01.052]                     envir = parent.frame()) 
[13:21:01.052]                   strategy(..., workers = workers, envir = envir)), 
[13:21:01.052]                     .cleanup = FALSE, .init = FALSE)
[13:21:01.052]                 }
[13:21:01.052]             }
[13:21:01.052]         }
[13:21:01.052]     })
[13:21:01.052]     if (TRUE) {
[13:21:01.052]         base::sink(type = "output", split = FALSE)
[13:21:01.052]         if (TRUE) {
[13:21:01.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:01.052]         }
[13:21:01.052]         else {
[13:21:01.052]             ...future.result["stdout"] <- base::list(NULL)
[13:21:01.052]         }
[13:21:01.052]         base::close(...future.stdout)
[13:21:01.052]         ...future.stdout <- NULL
[13:21:01.052]     }
[13:21:01.052]     ...future.result$conditions <- ...future.conditions
[13:21:01.052]     ...future.result$finished <- base::Sys.time()
[13:21:01.052]     ...future.result
[13:21:01.052] }
[13:21:01.054] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[13:21:01.058] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[13:21:01.109] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[13:21:01.109] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[13:21:01.110] MultisessionFuture started
[13:21:01.110] - Launch lazy future ... done
[13:21:01.110] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[13:21:01.110] result() for ClusterFuture ...
[13:21:01.110] receiveMessageFromWorker() for ClusterFuture ...
[13:21:01.111] - Validating connection of MultisessionFuture
[13:21:01.155] - received message: FutureResult
[13:21:01.155] - Received FutureResult
[13:21:01.155] - Erased future from FutureRegistry
[13:21:01.155] result() for ClusterFuture ...
[13:21:01.155] - result already collected: FutureResult
[13:21:01.155] result() for ClusterFuture ... done
[13:21:01.155] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:01.155] result() for ClusterFuture ... done
[13:21:01.155] result() for ClusterFuture ...
[13:21:01.156] - result already collected: FutureResult
[13:21:01.156] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[13:21:01.156] getGlobalsAndPackages() ...
[13:21:01.156] Searching for globals...
[13:21:01.157] - globals found: [1] ‘{’
[13:21:01.157] Searching for globals ... DONE
[13:21:01.157] Resolving globals: FALSE
[13:21:01.157] 
[13:21:01.157] 
[13:21:01.158] getGlobalsAndPackages() ... DONE
[13:21:01.158] run() for ‘Future’ ...
[13:21:01.158] - state: ‘created’
[13:21:01.158] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:01.169] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:01.169] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:01.169]   - Field: ‘node’
[13:21:01.170]   - Field: ‘label’
[13:21:01.170]   - Field: ‘local’
[13:21:01.170]   - Field: ‘owner’
[13:21:01.170]   - Field: ‘envir’
[13:21:01.170]   - Field: ‘workers’
[13:21:01.170]   - Field: ‘packages’
[13:21:01.170]   - Field: ‘gc’
[13:21:01.170]   - Field: ‘conditions’
[13:21:01.170]   - Field: ‘persistent’
[13:21:01.170]   - Field: ‘expr’
[13:21:01.170]   - Field: ‘uuid’
[13:21:01.171]   - Field: ‘seed’
[13:21:01.171]   - Field: ‘version’
[13:21:01.171]   - Field: ‘result’
[13:21:01.171]   - Field: ‘asynchronous’
[13:21:01.171]   - Field: ‘calls’
[13:21:01.171]   - Field: ‘globals’
[13:21:01.171]   - Field: ‘stdout’
[13:21:01.171]   - Field: ‘earlySignal’
[13:21:01.171]   - Field: ‘lazy’
[13:21:01.171]   - Field: ‘state’
[13:21:01.172] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:01.172] - Launch lazy future ...
[13:21:01.172] Packages needed by the future expression (n = 0): <none>
[13:21:01.172] Packages needed by future strategies (n = 0): <none>
[13:21:01.172] {
[13:21:01.172]     {
[13:21:01.172]         {
[13:21:01.172]             ...future.startTime <- base::Sys.time()
[13:21:01.172]             {
[13:21:01.172]                 {
[13:21:01.172]                   {
[13:21:01.172]                     {
[13:21:01.172]                       base::local({
[13:21:01.172]                         has_future <- base::requireNamespace("future", 
[13:21:01.172]                           quietly = TRUE)
[13:21:01.172]                         if (has_future) {
[13:21:01.172]                           ns <- base::getNamespace("future")
[13:21:01.172]                           version <- ns[[".package"]][["version"]]
[13:21:01.172]                           if (is.null(version)) 
[13:21:01.172]                             version <- utils::packageVersion("future")
[13:21:01.172]                         }
[13:21:01.172]                         else {
[13:21:01.172]                           version <- NULL
[13:21:01.172]                         }
[13:21:01.172]                         if (!has_future || version < "1.8.0") {
[13:21:01.172]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:01.172]                             "", base::R.version$version.string), 
[13:21:01.172]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:01.172]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:01.172]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:01.172]                               "release", "version")], collapse = " "), 
[13:21:01.172]                             hostname = base::Sys.info()[["nodename"]])
[13:21:01.172]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:01.172]                             info)
[13:21:01.172]                           info <- base::paste(info, collapse = "; ")
[13:21:01.172]                           if (!has_future) {
[13:21:01.172]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:01.172]                               info)
[13:21:01.172]                           }
[13:21:01.172]                           else {
[13:21:01.172]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:01.172]                               info, version)
[13:21:01.172]                           }
[13:21:01.172]                           base::stop(msg)
[13:21:01.172]                         }
[13:21:01.172]                       })
[13:21:01.172]                     }
[13:21:01.172]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:01.172]                     base::options(mc.cores = 1L)
[13:21:01.172]                   }
[13:21:01.172]                   options(future.plan = NULL)
[13:21:01.172]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:01.172]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:01.172]                 }
[13:21:01.172]                 ...future.workdir <- getwd()
[13:21:01.172]             }
[13:21:01.172]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:01.172]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:01.172]         }
[13:21:01.172]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:01.172]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:01.172]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:01.172]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:01.172]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:01.172]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:01.172]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:01.172]             base::names(...future.oldOptions))
[13:21:01.172]     }
[13:21:01.172]     if (FALSE) {
[13:21:01.172]     }
[13:21:01.172]     else {
[13:21:01.172]         if (TRUE) {
[13:21:01.172]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:01.172]                 open = "w")
[13:21:01.172]         }
[13:21:01.172]         else {
[13:21:01.172]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:01.172]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:01.172]         }
[13:21:01.172]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:01.172]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:01.172]             base::sink(type = "output", split = FALSE)
[13:21:01.172]             base::close(...future.stdout)
[13:21:01.172]         }, add = TRUE)
[13:21:01.172]     }
[13:21:01.172]     ...future.frame <- base::sys.nframe()
[13:21:01.172]     ...future.conditions <- base::list()
[13:21:01.172]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:01.172]     if (FALSE) {
[13:21:01.172]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:01.172]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:01.172]     }
[13:21:01.172]     ...future.result <- base::tryCatch({
[13:21:01.172]         base::withCallingHandlers({
[13:21:01.172]             ...future.value <- base::withVisible(base::local({
[13:21:01.172]                 ...future.makeSendCondition <- local({
[13:21:01.172]                   sendCondition <- NULL
[13:21:01.172]                   function(frame = 1L) {
[13:21:01.172]                     if (is.function(sendCondition)) 
[13:21:01.172]                       return(sendCondition)
[13:21:01.172]                     ns <- getNamespace("parallel")
[13:21:01.172]                     if (exists("sendData", mode = "function", 
[13:21:01.172]                       envir = ns)) {
[13:21:01.172]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:01.172]                         envir = ns)
[13:21:01.172]                       envir <- sys.frame(frame)
[13:21:01.172]                       master <- NULL
[13:21:01.172]                       while (!identical(envir, .GlobalEnv) && 
[13:21:01.172]                         !identical(envir, emptyenv())) {
[13:21:01.172]                         if (exists("master", mode = "list", envir = envir, 
[13:21:01.172]                           inherits = FALSE)) {
[13:21:01.172]                           master <- get("master", mode = "list", 
[13:21:01.172]                             envir = envir, inherits = FALSE)
[13:21:01.172]                           if (inherits(master, c("SOCKnode", 
[13:21:01.172]                             "SOCK0node"))) {
[13:21:01.172]                             sendCondition <<- function(cond) {
[13:21:01.172]                               data <- list(type = "VALUE", value = cond, 
[13:21:01.172]                                 success = TRUE)
[13:21:01.172]                               parallel_sendData(master, data)
[13:21:01.172]                             }
[13:21:01.172]                             return(sendCondition)
[13:21:01.172]                           }
[13:21:01.172]                         }
[13:21:01.172]                         frame <- frame + 1L
[13:21:01.172]                         envir <- sys.frame(frame)
[13:21:01.172]                       }
[13:21:01.172]                     }
[13:21:01.172]                     sendCondition <<- function(cond) NULL
[13:21:01.172]                   }
[13:21:01.172]                 })
[13:21:01.172]                 withCallingHandlers({
[13:21:01.172]                   {
[13:21:01.172]                     42L
[13:21:01.172]                   }
[13:21:01.172]                 }, immediateCondition = function(cond) {
[13:21:01.172]                   sendCondition <- ...future.makeSendCondition()
[13:21:01.172]                   sendCondition(cond)
[13:21:01.172]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.172]                   {
[13:21:01.172]                     inherits <- base::inherits
[13:21:01.172]                     invokeRestart <- base::invokeRestart
[13:21:01.172]                     is.null <- base::is.null
[13:21:01.172]                     muffled <- FALSE
[13:21:01.172]                     if (inherits(cond, "message")) {
[13:21:01.172]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:01.172]                       if (muffled) 
[13:21:01.172]                         invokeRestart("muffleMessage")
[13:21:01.172]                     }
[13:21:01.172]                     else if (inherits(cond, "warning")) {
[13:21:01.172]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:01.172]                       if (muffled) 
[13:21:01.172]                         invokeRestart("muffleWarning")
[13:21:01.172]                     }
[13:21:01.172]                     else if (inherits(cond, "condition")) {
[13:21:01.172]                       if (!is.null(pattern)) {
[13:21:01.172]                         computeRestarts <- base::computeRestarts
[13:21:01.172]                         grepl <- base::grepl
[13:21:01.172]                         restarts <- computeRestarts(cond)
[13:21:01.172]                         for (restart in restarts) {
[13:21:01.172]                           name <- restart$name
[13:21:01.172]                           if (is.null(name)) 
[13:21:01.172]                             next
[13:21:01.172]                           if (!grepl(pattern, name)) 
[13:21:01.172]                             next
[13:21:01.172]                           invokeRestart(restart)
[13:21:01.172]                           muffled <- TRUE
[13:21:01.172]                           break
[13:21:01.172]                         }
[13:21:01.172]                       }
[13:21:01.172]                     }
[13:21:01.172]                     invisible(muffled)
[13:21:01.172]                   }
[13:21:01.172]                   muffleCondition(cond)
[13:21:01.172]                 })
[13:21:01.172]             }))
[13:21:01.172]             future::FutureResult(value = ...future.value$value, 
[13:21:01.172]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:01.172]                   ...future.rng), globalenv = if (FALSE) 
[13:21:01.172]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:01.172]                     ...future.globalenv.names))
[13:21:01.172]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:01.172]         }, condition = base::local({
[13:21:01.172]             c <- base::c
[13:21:01.172]             inherits <- base::inherits
[13:21:01.172]             invokeRestart <- base::invokeRestart
[13:21:01.172]             length <- base::length
[13:21:01.172]             list <- base::list
[13:21:01.172]             seq.int <- base::seq.int
[13:21:01.172]             signalCondition <- base::signalCondition
[13:21:01.172]             sys.calls <- base::sys.calls
[13:21:01.172]             `[[` <- base::`[[`
[13:21:01.172]             `+` <- base::`+`
[13:21:01.172]             `<<-` <- base::`<<-`
[13:21:01.172]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:01.172]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:01.172]                   3L)]
[13:21:01.172]             }
[13:21:01.172]             function(cond) {
[13:21:01.172]                 is_error <- inherits(cond, "error")
[13:21:01.172]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:01.172]                   NULL)
[13:21:01.172]                 if (is_error) {
[13:21:01.172]                   sessionInformation <- function() {
[13:21:01.172]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:01.172]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:01.172]                       search = base::search(), system = base::Sys.info())
[13:21:01.172]                   }
[13:21:01.172]                   ...future.conditions[[length(...future.conditions) + 
[13:21:01.172]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:01.172]                     cond$call), session = sessionInformation(), 
[13:21:01.172]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:01.172]                   signalCondition(cond)
[13:21:01.172]                 }
[13:21:01.172]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:01.172]                 "immediateCondition"))) {
[13:21:01.172]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:01.172]                   ...future.conditions[[length(...future.conditions) + 
[13:21:01.172]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:01.172]                   if (TRUE && !signal) {
[13:21:01.172]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.172]                     {
[13:21:01.172]                       inherits <- base::inherits
[13:21:01.172]                       invokeRestart <- base::invokeRestart
[13:21:01.172]                       is.null <- base::is.null
[13:21:01.172]                       muffled <- FALSE
[13:21:01.172]                       if (inherits(cond, "message")) {
[13:21:01.172]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:01.172]                         if (muffled) 
[13:21:01.172]                           invokeRestart("muffleMessage")
[13:21:01.172]                       }
[13:21:01.172]                       else if (inherits(cond, "warning")) {
[13:21:01.172]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:01.172]                         if (muffled) 
[13:21:01.172]                           invokeRestart("muffleWarning")
[13:21:01.172]                       }
[13:21:01.172]                       else if (inherits(cond, "condition")) {
[13:21:01.172]                         if (!is.null(pattern)) {
[13:21:01.172]                           computeRestarts <- base::computeRestarts
[13:21:01.172]                           grepl <- base::grepl
[13:21:01.172]                           restarts <- computeRestarts(cond)
[13:21:01.172]                           for (restart in restarts) {
[13:21:01.172]                             name <- restart$name
[13:21:01.172]                             if (is.null(name)) 
[13:21:01.172]                               next
[13:21:01.172]                             if (!grepl(pattern, name)) 
[13:21:01.172]                               next
[13:21:01.172]                             invokeRestart(restart)
[13:21:01.172]                             muffled <- TRUE
[13:21:01.172]                             break
[13:21:01.172]                           }
[13:21:01.172]                         }
[13:21:01.172]                       }
[13:21:01.172]                       invisible(muffled)
[13:21:01.172]                     }
[13:21:01.172]                     muffleCondition(cond, pattern = "^muffle")
[13:21:01.172]                   }
[13:21:01.172]                 }
[13:21:01.172]                 else {
[13:21:01.172]                   if (TRUE) {
[13:21:01.172]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.172]                     {
[13:21:01.172]                       inherits <- base::inherits
[13:21:01.172]                       invokeRestart <- base::invokeRestart
[13:21:01.172]                       is.null <- base::is.null
[13:21:01.172]                       muffled <- FALSE
[13:21:01.172]                       if (inherits(cond, "message")) {
[13:21:01.172]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:01.172]                         if (muffled) 
[13:21:01.172]                           invokeRestart("muffleMessage")
[13:21:01.172]                       }
[13:21:01.172]                       else if (inherits(cond, "warning")) {
[13:21:01.172]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:01.172]                         if (muffled) 
[13:21:01.172]                           invokeRestart("muffleWarning")
[13:21:01.172]                       }
[13:21:01.172]                       else if (inherits(cond, "condition")) {
[13:21:01.172]                         if (!is.null(pattern)) {
[13:21:01.172]                           computeRestarts <- base::computeRestarts
[13:21:01.172]                           grepl <- base::grepl
[13:21:01.172]                           restarts <- computeRestarts(cond)
[13:21:01.172]                           for (restart in restarts) {
[13:21:01.172]                             name <- restart$name
[13:21:01.172]                             if (is.null(name)) 
[13:21:01.172]                               next
[13:21:01.172]                             if (!grepl(pattern, name)) 
[13:21:01.172]                               next
[13:21:01.172]                             invokeRestart(restart)
[13:21:01.172]                             muffled <- TRUE
[13:21:01.172]                             break
[13:21:01.172]                           }
[13:21:01.172]                         }
[13:21:01.172]                       }
[13:21:01.172]                       invisible(muffled)
[13:21:01.172]                     }
[13:21:01.172]                     muffleCondition(cond, pattern = "^muffle")
[13:21:01.172]                   }
[13:21:01.172]                 }
[13:21:01.172]             }
[13:21:01.172]         }))
[13:21:01.172]     }, error = function(ex) {
[13:21:01.172]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:01.172]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:01.172]                 ...future.rng), started = ...future.startTime, 
[13:21:01.172]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:01.172]             version = "1.8"), class = "FutureResult")
[13:21:01.172]     }, finally = {
[13:21:01.172]         if (!identical(...future.workdir, getwd())) 
[13:21:01.172]             setwd(...future.workdir)
[13:21:01.172]         {
[13:21:01.172]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:01.172]                 ...future.oldOptions$nwarnings <- NULL
[13:21:01.172]             }
[13:21:01.172]             base::options(...future.oldOptions)
[13:21:01.172]             if (.Platform$OS.type == "windows") {
[13:21:01.172]                 old_names <- names(...future.oldEnvVars)
[13:21:01.172]                 envs <- base::Sys.getenv()
[13:21:01.172]                 names <- names(envs)
[13:21:01.172]                 common <- intersect(names, old_names)
[13:21:01.172]                 added <- setdiff(names, old_names)
[13:21:01.172]                 removed <- setdiff(old_names, names)
[13:21:01.172]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:01.172]                   envs[common]]
[13:21:01.172]                 NAMES <- toupper(changed)
[13:21:01.172]                 args <- list()
[13:21:01.172]                 for (kk in seq_along(NAMES)) {
[13:21:01.172]                   name <- changed[[kk]]
[13:21:01.172]                   NAME <- NAMES[[kk]]
[13:21:01.172]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.172]                     next
[13:21:01.172]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:01.172]                 }
[13:21:01.172]                 NAMES <- toupper(added)
[13:21:01.172]                 for (kk in seq_along(NAMES)) {
[13:21:01.172]                   name <- added[[kk]]
[13:21:01.172]                   NAME <- NAMES[[kk]]
[13:21:01.172]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.172]                     next
[13:21:01.172]                   args[[name]] <- ""
[13:21:01.172]                 }
[13:21:01.172]                 NAMES <- toupper(removed)
[13:21:01.172]                 for (kk in seq_along(NAMES)) {
[13:21:01.172]                   name <- removed[[kk]]
[13:21:01.172]                   NAME <- NAMES[[kk]]
[13:21:01.172]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.172]                     next
[13:21:01.172]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:01.172]                 }
[13:21:01.172]                 if (length(args) > 0) 
[13:21:01.172]                   base::do.call(base::Sys.setenv, args = args)
[13:21:01.172]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:01.172]             }
[13:21:01.172]             else {
[13:21:01.172]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:01.172]             }
[13:21:01.172]             {
[13:21:01.172]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:01.172]                   0L) {
[13:21:01.172]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:01.172]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:01.172]                   base::options(opts)
[13:21:01.172]                 }
[13:21:01.172]                 {
[13:21:01.172]                   {
[13:21:01.172]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:01.172]                     NULL
[13:21:01.172]                   }
[13:21:01.172]                   options(future.plan = NULL)
[13:21:01.172]                   if (is.na(NA_character_)) 
[13:21:01.172]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:01.172]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:01.172]                   future::plan(list(function (..., workers = 2L, 
[13:21:01.172]                     envir = parent.frame()) 
[13:21:01.172]                   strategy(..., workers = workers, envir = envir)), 
[13:21:01.172]                     .cleanup = FALSE, .init = FALSE)
[13:21:01.172]                 }
[13:21:01.172]             }
[13:21:01.172]         }
[13:21:01.172]     })
[13:21:01.172]     if (TRUE) {
[13:21:01.172]         base::sink(type = "output", split = FALSE)
[13:21:01.172]         if (TRUE) {
[13:21:01.172]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:01.172]         }
[13:21:01.172]         else {
[13:21:01.172]             ...future.result["stdout"] <- base::list(NULL)
[13:21:01.172]         }
[13:21:01.172]         base::close(...future.stdout)
[13:21:01.172]         ...future.stdout <- NULL
[13:21:01.172]     }
[13:21:01.172]     ...future.result$conditions <- ...future.conditions
[13:21:01.172]     ...future.result$finished <- base::Sys.time()
[13:21:01.172]     ...future.result
[13:21:01.172] }
[13:21:01.176] MultisessionFuture started
[13:21:01.176] - Launch lazy future ... done
[13:21:01.176] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[13:21:01.176] getGlobalsAndPackages() ...
[13:21:01.176] Searching for globals...
[13:21:01.177] - globals found: [3] ‘{’, ‘value’, ‘f1’
[13:21:01.177] Searching for globals ... DONE
[13:21:01.177] Resolving globals: FALSE
[13:21:01.179] The total size of the 1 globals is 1.54 MiB (1609848 bytes)
[13:21:01.180] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[13:21:01.180] - globals: [1] ‘f1’
[13:21:01.180] - packages: [1] ‘future’
[13:21:01.180] getGlobalsAndPackages() ... DONE
[13:21:01.180] run() for ‘Future’ ...
[13:21:01.180] - state: ‘created’
[13:21:01.180] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:01.192] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:01.192] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:01.192]   - Field: ‘node’
[13:21:01.192]   - Field: ‘label’
[13:21:01.192]   - Field: ‘local’
[13:21:01.192]   - Field: ‘owner’
[13:21:01.192]   - Field: ‘envir’
[13:21:01.192]   - Field: ‘workers’
[13:21:01.193]   - Field: ‘packages’
[13:21:01.193]   - Field: ‘gc’
[13:21:01.193]   - Field: ‘conditions’
[13:21:01.193]   - Field: ‘persistent’
[13:21:01.193]   - Field: ‘expr’
[13:21:01.193]   - Field: ‘uuid’
[13:21:01.193]   - Field: ‘seed’
[13:21:01.193]   - Field: ‘version’
[13:21:01.193]   - Field: ‘result’
[13:21:01.193]   - Field: ‘asynchronous’
[13:21:01.193]   - Field: ‘calls’
[13:21:01.194]   - Field: ‘globals’
[13:21:01.194]   - Field: ‘stdout’
[13:21:01.194]   - Field: ‘earlySignal’
[13:21:01.194]   - Field: ‘lazy’
[13:21:01.194]   - Field: ‘state’
[13:21:01.194] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:01.194] - Launch lazy future ...
[13:21:01.194] Packages needed by the future expression (n = 1): ‘future’
[13:21:01.194] Packages needed by future strategies (n = 0): <none>
[13:21:01.195] {
[13:21:01.195]     {
[13:21:01.195]         {
[13:21:01.195]             ...future.startTime <- base::Sys.time()
[13:21:01.195]             {
[13:21:01.195]                 {
[13:21:01.195]                   {
[13:21:01.195]                     {
[13:21:01.195]                       {
[13:21:01.195]                         base::local({
[13:21:01.195]                           has_future <- base::requireNamespace("future", 
[13:21:01.195]                             quietly = TRUE)
[13:21:01.195]                           if (has_future) {
[13:21:01.195]                             ns <- base::getNamespace("future")
[13:21:01.195]                             version <- ns[[".package"]][["version"]]
[13:21:01.195]                             if (is.null(version)) 
[13:21:01.195]                               version <- utils::packageVersion("future")
[13:21:01.195]                           }
[13:21:01.195]                           else {
[13:21:01.195]                             version <- NULL
[13:21:01.195]                           }
[13:21:01.195]                           if (!has_future || version < "1.8.0") {
[13:21:01.195]                             info <- base::c(r_version = base::gsub("R version ", 
[13:21:01.195]                               "", base::R.version$version.string), 
[13:21:01.195]                               platform = base::sprintf("%s (%s-bit)", 
[13:21:01.195]                                 base::R.version$platform, 8 * 
[13:21:01.195]                                   base::.Machine$sizeof.pointer), 
[13:21:01.195]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:01.195]                                 "release", "version")], collapse = " "), 
[13:21:01.195]                               hostname = base::Sys.info()[["nodename"]])
[13:21:01.195]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:21:01.195]                               info)
[13:21:01.195]                             info <- base::paste(info, collapse = "; ")
[13:21:01.195]                             if (!has_future) {
[13:21:01.195]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:01.195]                                 info)
[13:21:01.195]                             }
[13:21:01.195]                             else {
[13:21:01.195]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:01.195]                                 info, version)
[13:21:01.195]                             }
[13:21:01.195]                             base::stop(msg)
[13:21:01.195]                           }
[13:21:01.195]                         })
[13:21:01.195]                       }
[13:21:01.195]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:01.195]                       base::options(mc.cores = 1L)
[13:21:01.195]                     }
[13:21:01.195]                     base::local({
[13:21:01.195]                       for (pkg in "future") {
[13:21:01.195]                         base::loadNamespace(pkg)
[13:21:01.195]                         base::library(pkg, character.only = TRUE)
[13:21:01.195]                       }
[13:21:01.195]                     })
[13:21:01.195]                   }
[13:21:01.195]                   options(future.plan = NULL)
[13:21:01.195]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:01.195]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:01.195]                 }
[13:21:01.195]                 ...future.workdir <- getwd()
[13:21:01.195]             }
[13:21:01.195]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:01.195]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:01.195]         }
[13:21:01.195]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:01.195]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:01.195]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:01.195]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:01.195]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:01.195]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:01.195]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:01.195]             base::names(...future.oldOptions))
[13:21:01.195]     }
[13:21:01.195]     if (FALSE) {
[13:21:01.195]     }
[13:21:01.195]     else {
[13:21:01.195]         if (TRUE) {
[13:21:01.195]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:01.195]                 open = "w")
[13:21:01.195]         }
[13:21:01.195]         else {
[13:21:01.195]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:01.195]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:01.195]         }
[13:21:01.195]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:01.195]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:01.195]             base::sink(type = "output", split = FALSE)
[13:21:01.195]             base::close(...future.stdout)
[13:21:01.195]         }, add = TRUE)
[13:21:01.195]     }
[13:21:01.195]     ...future.frame <- base::sys.nframe()
[13:21:01.195]     ...future.conditions <- base::list()
[13:21:01.195]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:01.195]     if (FALSE) {
[13:21:01.195]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:01.195]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:01.195]     }
[13:21:01.195]     ...future.result <- base::tryCatch({
[13:21:01.195]         base::withCallingHandlers({
[13:21:01.195]             ...future.value <- base::withVisible(base::local({
[13:21:01.195]                 ...future.makeSendCondition <- local({
[13:21:01.195]                   sendCondition <- NULL
[13:21:01.195]                   function(frame = 1L) {
[13:21:01.195]                     if (is.function(sendCondition)) 
[13:21:01.195]                       return(sendCondition)
[13:21:01.195]                     ns <- getNamespace("parallel")
[13:21:01.195]                     if (exists("sendData", mode = "function", 
[13:21:01.195]                       envir = ns)) {
[13:21:01.195]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:01.195]                         envir = ns)
[13:21:01.195]                       envir <- sys.frame(frame)
[13:21:01.195]                       master <- NULL
[13:21:01.195]                       while (!identical(envir, .GlobalEnv) && 
[13:21:01.195]                         !identical(envir, emptyenv())) {
[13:21:01.195]                         if (exists("master", mode = "list", envir = envir, 
[13:21:01.195]                           inherits = FALSE)) {
[13:21:01.195]                           master <- get("master", mode = "list", 
[13:21:01.195]                             envir = envir, inherits = FALSE)
[13:21:01.195]                           if (inherits(master, c("SOCKnode", 
[13:21:01.195]                             "SOCK0node"))) {
[13:21:01.195]                             sendCondition <<- function(cond) {
[13:21:01.195]                               data <- list(type = "VALUE", value = cond, 
[13:21:01.195]                                 success = TRUE)
[13:21:01.195]                               parallel_sendData(master, data)
[13:21:01.195]                             }
[13:21:01.195]                             return(sendCondition)
[13:21:01.195]                           }
[13:21:01.195]                         }
[13:21:01.195]                         frame <- frame + 1L
[13:21:01.195]                         envir <- sys.frame(frame)
[13:21:01.195]                       }
[13:21:01.195]                     }
[13:21:01.195]                     sendCondition <<- function(cond) NULL
[13:21:01.195]                   }
[13:21:01.195]                 })
[13:21:01.195]                 withCallingHandlers({
[13:21:01.195]                   {
[13:21:01.195]                     value(f1)
[13:21:01.195]                   }
[13:21:01.195]                 }, immediateCondition = function(cond) {
[13:21:01.195]                   sendCondition <- ...future.makeSendCondition()
[13:21:01.195]                   sendCondition(cond)
[13:21:01.195]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.195]                   {
[13:21:01.195]                     inherits <- base::inherits
[13:21:01.195]                     invokeRestart <- base::invokeRestart
[13:21:01.195]                     is.null <- base::is.null
[13:21:01.195]                     muffled <- FALSE
[13:21:01.195]                     if (inherits(cond, "message")) {
[13:21:01.195]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:01.195]                       if (muffled) 
[13:21:01.195]                         invokeRestart("muffleMessage")
[13:21:01.195]                     }
[13:21:01.195]                     else if (inherits(cond, "warning")) {
[13:21:01.195]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:01.195]                       if (muffled) 
[13:21:01.195]                         invokeRestart("muffleWarning")
[13:21:01.195]                     }
[13:21:01.195]                     else if (inherits(cond, "condition")) {
[13:21:01.195]                       if (!is.null(pattern)) {
[13:21:01.195]                         computeRestarts <- base::computeRestarts
[13:21:01.195]                         grepl <- base::grepl
[13:21:01.195]                         restarts <- computeRestarts(cond)
[13:21:01.195]                         for (restart in restarts) {
[13:21:01.195]                           name <- restart$name
[13:21:01.195]                           if (is.null(name)) 
[13:21:01.195]                             next
[13:21:01.195]                           if (!grepl(pattern, name)) 
[13:21:01.195]                             next
[13:21:01.195]                           invokeRestart(restart)
[13:21:01.195]                           muffled <- TRUE
[13:21:01.195]                           break
[13:21:01.195]                         }
[13:21:01.195]                       }
[13:21:01.195]                     }
[13:21:01.195]                     invisible(muffled)
[13:21:01.195]                   }
[13:21:01.195]                   muffleCondition(cond)
[13:21:01.195]                 })
[13:21:01.195]             }))
[13:21:01.195]             future::FutureResult(value = ...future.value$value, 
[13:21:01.195]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:01.195]                   ...future.rng), globalenv = if (FALSE) 
[13:21:01.195]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:01.195]                     ...future.globalenv.names))
[13:21:01.195]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:01.195]         }, condition = base::local({
[13:21:01.195]             c <- base::c
[13:21:01.195]             inherits <- base::inherits
[13:21:01.195]             invokeRestart <- base::invokeRestart
[13:21:01.195]             length <- base::length
[13:21:01.195]             list <- base::list
[13:21:01.195]             seq.int <- base::seq.int
[13:21:01.195]             signalCondition <- base::signalCondition
[13:21:01.195]             sys.calls <- base::sys.calls
[13:21:01.195]             `[[` <- base::`[[`
[13:21:01.195]             `+` <- base::`+`
[13:21:01.195]             `<<-` <- base::`<<-`
[13:21:01.195]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:01.195]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:01.195]                   3L)]
[13:21:01.195]             }
[13:21:01.195]             function(cond) {
[13:21:01.195]                 is_error <- inherits(cond, "error")
[13:21:01.195]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:01.195]                   NULL)
[13:21:01.195]                 if (is_error) {
[13:21:01.195]                   sessionInformation <- function() {
[13:21:01.195]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:01.195]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:01.195]                       search = base::search(), system = base::Sys.info())
[13:21:01.195]                   }
[13:21:01.195]                   ...future.conditions[[length(...future.conditions) + 
[13:21:01.195]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:01.195]                     cond$call), session = sessionInformation(), 
[13:21:01.195]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:01.195]                   signalCondition(cond)
[13:21:01.195]                 }
[13:21:01.195]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:01.195]                 "immediateCondition"))) {
[13:21:01.195]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:01.195]                   ...future.conditions[[length(...future.conditions) + 
[13:21:01.195]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:01.195]                   if (TRUE && !signal) {
[13:21:01.195]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.195]                     {
[13:21:01.195]                       inherits <- base::inherits
[13:21:01.195]                       invokeRestart <- base::invokeRestart
[13:21:01.195]                       is.null <- base::is.null
[13:21:01.195]                       muffled <- FALSE
[13:21:01.195]                       if (inherits(cond, "message")) {
[13:21:01.195]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:01.195]                         if (muffled) 
[13:21:01.195]                           invokeRestart("muffleMessage")
[13:21:01.195]                       }
[13:21:01.195]                       else if (inherits(cond, "warning")) {
[13:21:01.195]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:01.195]                         if (muffled) 
[13:21:01.195]                           invokeRestart("muffleWarning")
[13:21:01.195]                       }
[13:21:01.195]                       else if (inherits(cond, "condition")) {
[13:21:01.195]                         if (!is.null(pattern)) {
[13:21:01.195]                           computeRestarts <- base::computeRestarts
[13:21:01.195]                           grepl <- base::grepl
[13:21:01.195]                           restarts <- computeRestarts(cond)
[13:21:01.195]                           for (restart in restarts) {
[13:21:01.195]                             name <- restart$name
[13:21:01.195]                             if (is.null(name)) 
[13:21:01.195]                               next
[13:21:01.195]                             if (!grepl(pattern, name)) 
[13:21:01.195]                               next
[13:21:01.195]                             invokeRestart(restart)
[13:21:01.195]                             muffled <- TRUE
[13:21:01.195]                             break
[13:21:01.195]                           }
[13:21:01.195]                         }
[13:21:01.195]                       }
[13:21:01.195]                       invisible(muffled)
[13:21:01.195]                     }
[13:21:01.195]                     muffleCondition(cond, pattern = "^muffle")
[13:21:01.195]                   }
[13:21:01.195]                 }
[13:21:01.195]                 else {
[13:21:01.195]                   if (TRUE) {
[13:21:01.195]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:01.195]                     {
[13:21:01.195]                       inherits <- base::inherits
[13:21:01.195]                       invokeRestart <- base::invokeRestart
[13:21:01.195]                       is.null <- base::is.null
[13:21:01.195]                       muffled <- FALSE
[13:21:01.195]                       if (inherits(cond, "message")) {
[13:21:01.195]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:01.195]                         if (muffled) 
[13:21:01.195]                           invokeRestart("muffleMessage")
[13:21:01.195]                       }
[13:21:01.195]                       else if (inherits(cond, "warning")) {
[13:21:01.195]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:01.195]                         if (muffled) 
[13:21:01.195]                           invokeRestart("muffleWarning")
[13:21:01.195]                       }
[13:21:01.195]                       else if (inherits(cond, "condition")) {
[13:21:01.195]                         if (!is.null(pattern)) {
[13:21:01.195]                           computeRestarts <- base::computeRestarts
[13:21:01.195]                           grepl <- base::grepl
[13:21:01.195]                           restarts <- computeRestarts(cond)
[13:21:01.195]                           for (restart in restarts) {
[13:21:01.195]                             name <- restart$name
[13:21:01.195]                             if (is.null(name)) 
[13:21:01.195]                               next
[13:21:01.195]                             if (!grepl(pattern, name)) 
[13:21:01.195]                               next
[13:21:01.195]                             invokeRestart(restart)
[13:21:01.195]                             muffled <- TRUE
[13:21:01.195]                             break
[13:21:01.195]                           }
[13:21:01.195]                         }
[13:21:01.195]                       }
[13:21:01.195]                       invisible(muffled)
[13:21:01.195]                     }
[13:21:01.195]                     muffleCondition(cond, pattern = "^muffle")
[13:21:01.195]                   }
[13:21:01.195]                 }
[13:21:01.195]             }
[13:21:01.195]         }))
[13:21:01.195]     }, error = function(ex) {
[13:21:01.195]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:01.195]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:01.195]                 ...future.rng), started = ...future.startTime, 
[13:21:01.195]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:01.195]             version = "1.8"), class = "FutureResult")
[13:21:01.195]     }, finally = {
[13:21:01.195]         if (!identical(...future.workdir, getwd())) 
[13:21:01.195]             setwd(...future.workdir)
[13:21:01.195]         {
[13:21:01.195]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:01.195]                 ...future.oldOptions$nwarnings <- NULL
[13:21:01.195]             }
[13:21:01.195]             base::options(...future.oldOptions)
[13:21:01.195]             if (.Platform$OS.type == "windows") {
[13:21:01.195]                 old_names <- names(...future.oldEnvVars)
[13:21:01.195]                 envs <- base::Sys.getenv()
[13:21:01.195]                 names <- names(envs)
[13:21:01.195]                 common <- intersect(names, old_names)
[13:21:01.195]                 added <- setdiff(names, old_names)
[13:21:01.195]                 removed <- setdiff(old_names, names)
[13:21:01.195]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:01.195]                   envs[common]]
[13:21:01.195]                 NAMES <- toupper(changed)
[13:21:01.195]                 args <- list()
[13:21:01.195]                 for (kk in seq_along(NAMES)) {
[13:21:01.195]                   name <- changed[[kk]]
[13:21:01.195]                   NAME <- NAMES[[kk]]
[13:21:01.195]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.195]                     next
[13:21:01.195]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:01.195]                 }
[13:21:01.195]                 NAMES <- toupper(added)
[13:21:01.195]                 for (kk in seq_along(NAMES)) {
[13:21:01.195]                   name <- added[[kk]]
[13:21:01.195]                   NAME <- NAMES[[kk]]
[13:21:01.195]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.195]                     next
[13:21:01.195]                   args[[name]] <- ""
[13:21:01.195]                 }
[13:21:01.195]                 NAMES <- toupper(removed)
[13:21:01.195]                 for (kk in seq_along(NAMES)) {
[13:21:01.195]                   name <- removed[[kk]]
[13:21:01.195]                   NAME <- NAMES[[kk]]
[13:21:01.195]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:01.195]                     next
[13:21:01.195]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:01.195]                 }
[13:21:01.195]                 if (length(args) > 0) 
[13:21:01.195]                   base::do.call(base::Sys.setenv, args = args)
[13:21:01.195]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:01.195]             }
[13:21:01.195]             else {
[13:21:01.195]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:01.195]             }
[13:21:01.195]             {
[13:21:01.195]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:01.195]                   0L) {
[13:21:01.195]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:01.195]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:01.195]                   base::options(opts)
[13:21:01.195]                 }
[13:21:01.195]                 {
[13:21:01.195]                   {
[13:21:01.195]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:01.195]                     NULL
[13:21:01.195]                   }
[13:21:01.195]                   options(future.plan = NULL)
[13:21:01.195]                   if (is.na(NA_character_)) 
[13:21:01.195]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:01.195]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:01.195]                   future::plan(list(function (..., workers = 2L, 
[13:21:01.195]                     envir = parent.frame()) 
[13:21:01.195]                   strategy(..., workers = workers, envir = envir)), 
[13:21:01.195]                     .cleanup = FALSE, .init = FALSE)
[13:21:01.195]                 }
[13:21:01.195]             }
[13:21:01.195]         }
[13:21:01.195]     })
[13:21:01.195]     if (TRUE) {
[13:21:01.195]         base::sink(type = "output", split = FALSE)
[13:21:01.195]         if (TRUE) {
[13:21:01.195]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:01.195]         }
[13:21:01.195]         else {
[13:21:01.195]             ...future.result["stdout"] <- base::list(NULL)
[13:21:01.195]         }
[13:21:01.195]         base::close(...future.stdout)
[13:21:01.195]         ...future.stdout <- NULL
[13:21:01.195]     }
[13:21:01.195]     ...future.result$conditions <- ...future.conditions
[13:21:01.195]     ...future.result$finished <- base::Sys.time()
[13:21:01.195]     ...future.result
[13:21:01.195] }
[13:21:01.266] Exporting 1 global objects (1.54 MiB) to cluster node #2 ...
[13:21:01.268] Exporting ‘f1’ (1.54 MiB) to cluster node #2 ...
[13:21:01.279] Exporting ‘f1’ (1.54 MiB) to cluster node #2 ... DONE
[13:21:01.279] Exporting 1 global objects (1.54 MiB) to cluster node #2 ... DONE
[13:21:01.280] MultisessionFuture started
[13:21:01.280] - Launch lazy future ... done
[13:21:01.280] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.54 MiB (MultisessionFuture ‘f1’ of 1.54 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2345203b-0d27-338c-95eb-7654811919cc
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[13:21:01.296] result() for ClusterFuture ...
[13:21:01.297] receiveMessageFromWorker() for ClusterFuture ...
[13:21:01.297] - Validating connection of MultisessionFuture
[13:21:01.362] - received message: FutureResult
[13:21:01.362] - Received FutureResult
[13:21:01.362] - Erased future from FutureRegistry
[13:21:01.362] result() for ClusterFuture ...
[13:21:01.362] - result already collected: FutureResult
[13:21:01.363] result() for ClusterFuture ... done
[13:21:01.363] signalConditions() ...
[13:21:01.363]  - include = ‘immediateCondition’
[13:21:01.363]  - exclude = 
[13:21:01.363]  - resignal = FALSE
[13:21:01.363]  - Number of conditions: 1
[13:21:01.363] signalConditions() ... done
[13:21:01.363] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:01.363] result() for ClusterFuture ... done
[13:21:01.363] result() for ClusterFuture ...
[13:21:01.363] - result already collected: FutureResult
[13:21:01.363] result() for ClusterFuture ... done
[13:21:01.364] signalConditions() ...
[13:21:01.364]  - include = ‘immediateCondition’
[13:21:01.364]  - exclude = 
[13:21:01.364]  - resignal = FALSE
[13:21:01.364]  - Number of conditions: 1
[13:21:01.364] signalConditions() ... done
[13:21:01.364] Future state: ‘finished’
[13:21:01.364] result() for ClusterFuture ...
[13:21:01.364] - result already collected: FutureResult
[13:21:01.364] result() for ClusterFuture ... done
[13:21:01.364] signalConditions() ...
[13:21:01.365]  - include = ‘condition’
[13:21:01.365]  - exclude = ‘immediateCondition’
[13:21:01.365]  - resignal = TRUE
[13:21:01.365]  - Number of conditions: 1
[13:21:01.365]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[13:21:01.365] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (2345203b-0d27-338c-95eb-7654811919cc; pid 87826 on 5853cd8d1af0) that created it, not by any other R processes (f7b4671d-9d31-dbac-a63f-820fc74d4403; pid 87877 on 5853cd8d1af0): {; 42L; }>


Future UUID: 07e89248-265c-d19c-7218-7885f0d8a7a2


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 2345203b-0d27-338c-95eb-7654811919cc
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[13:21:01.366] result() for ClusterFuture ...
[13:21:01.366] receiveMessageFromWorker() for ClusterFuture ...
[13:21:01.366] - Validating connection of MultisessionFuture
[13:21:01.366] - received message: FutureResult
[13:21:01.367] - Received FutureResult
[13:21:01.367] - Erased future from FutureRegistry
[13:21:01.367] result() for ClusterFuture ...
[13:21:01.367] - result already collected: FutureResult
[13:21:01.367] result() for ClusterFuture ... done
[13:21:01.367] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:01.367] result() for ClusterFuture ... done
[13:21:01.367] result() for ClusterFuture ...
[13:21:01.367] - result already collected: FutureResult
[13:21:01.367] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[13:21:01.368] plan(): Setting new future strategy stack:
[13:21:01.368] List of future strategies:
[13:21:01.368] 1. FutureStrategy:
[13:21:01.368]    - args: function (..., envir = parent.frame())
[13:21:01.368]    - tweaked: FALSE
[13:21:01.368]    - call: future::plan(oplan)
[13:21:01.369] plan(): nbrOfWorkers() = 1
> 
