
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:54.142] plan(): Setting new future strategy stack:
[17:42:54.143] List of future strategies:
[17:42:54.143] 1. sequential:
[17:42:54.143]    - args: function (..., envir = parent.frame())
[17:42:54.143]    - tweaked: FALSE
[17:42:54.143]    - call: future::plan("sequential")
[17:42:54.156] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[17:42:54.169] plan(): Setting new future strategy stack:
[17:42:54.169] List of future strategies:
[17:42:54.169] 1. multisession:
[17:42:54.169]    - args: function (..., workers = 2L, envir = parent.frame())
[17:42:54.169]    - tweaked: TRUE
[17:42:54.169]    - call: plan(multisession, workers = 2L)
[17:42:54.180] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:42:54.180] multisession:
[17:42:54.180] - args: function (..., workers = 2L, envir = parent.frame())
[17:42:54.180] - tweaked: TRUE
[17:42:54.180] - call: plan(multisession, workers = 2L)
[17:42:54.182] getGlobalsAndPackages() ...
[17:42:54.182] Not searching for globals
[17:42:54.182] - globals: [0] <none>
[17:42:54.182] getGlobalsAndPackages() ... DONE
[17:42:54.183] [local output] makeClusterPSOCK() ...
[17:42:54.214] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:54.220] [local output] Base port: 11146
[17:42:54.220] [local output] Getting setup options for 2 cluster nodes ...
[17:42:54.220] [local output]  - Node 1 of 2 ...
[17:42:54.221] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:54.221] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpeBU9BF/worker.rank=1.parallelly.parent=48177.bc3199973bf.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpeBU9BF/worker.rank=1.parallelly.parent=48177.bc3199973bf.pid")'’
[17:42:54.414] - Possible to infer worker's PID: TRUE
[17:42:54.414] [local output] Rscript port: 11146

[17:42:54.414] [local output]  - Node 2 of 2 ...
[17:42:54.415] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:54.416] [local output] Rscript port: 11146

[17:42:54.416] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:54.416] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:54.417] [local output] Setting up PSOCK nodes in parallel
[17:42:54.417] List of 36
[17:42:54.417]  $ worker          : chr "localhost"
[17:42:54.417]   ..- attr(*, "localhost")= logi TRUE
[17:42:54.417]  $ master          : chr "localhost"
[17:42:54.417]  $ port            : int 11146
[17:42:54.417]  $ connectTimeout  : num 120
[17:42:54.417]  $ timeout         : num 2592000
[17:42:54.417]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:54.417]  $ homogeneous     : logi TRUE
[17:42:54.417]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:54.417]  $ rscript_envs    : NULL
[17:42:54.417]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:54.417]  $ rscript_startup : NULL
[17:42:54.417]  $ rscript_sh      : chr "sh"
[17:42:54.417]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:54.417]  $ methods         : logi TRUE
[17:42:54.417]  $ socketOptions   : chr "no-delay"
[17:42:54.417]  $ useXDR          : logi FALSE
[17:42:54.417]  $ outfile         : chr "/dev/null"
[17:42:54.417]  $ renice          : int NA
[17:42:54.417]  $ rshcmd          : NULL
[17:42:54.417]  $ user            : chr(0) 
[17:42:54.417]  $ revtunnel       : logi FALSE
[17:42:54.417]  $ rshlogfile      : NULL
[17:42:54.417]  $ rshopts         : chr(0) 
[17:42:54.417]  $ rank            : int 1
[17:42:54.417]  $ manual          : logi FALSE
[17:42:54.417]  $ dryrun          : logi FALSE
[17:42:54.417]  $ quiet           : logi FALSE
[17:42:54.417]  $ setup_strategy  : chr "parallel"
[17:42:54.417]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:54.417]  $ pidfile         : chr "/tmp/RtmpeBU9BF/worker.rank=1.parallelly.parent=48177.bc3199973bf.pid"
[17:42:54.417]  $ rshcmd_label    : NULL
[17:42:54.417]  $ rsh_call        : NULL
[17:42:54.417]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:54.417]  $ localMachine    : logi TRUE
[17:42:54.417]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:54.417]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:54.417]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:54.417]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:54.417]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:54.417]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:54.417]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:54.417]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:54.417]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:54.417]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:54.417]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:54.417]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:54.417]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:54.417]  $ arguments       :List of 28
[17:42:54.417]   ..$ worker          : chr "localhost"
[17:42:54.417]   ..$ master          : NULL
[17:42:54.417]   ..$ port            : int 11146
[17:42:54.417]   ..$ connectTimeout  : num 120
[17:42:54.417]   ..$ timeout         : num 2592000
[17:42:54.417]   ..$ rscript         : NULL
[17:42:54.417]   ..$ homogeneous     : NULL
[17:42:54.417]   ..$ rscript_args    : NULL
[17:42:54.417]   ..$ rscript_envs    : NULL
[17:42:54.417]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:54.417]   ..$ rscript_startup : NULL
[17:42:54.417]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:54.417]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:54.417]   ..$ methods         : logi TRUE
[17:42:54.417]   ..$ socketOptions   : chr "no-delay"
[17:42:54.417]   ..$ useXDR          : logi FALSE
[17:42:54.417]   ..$ outfile         : chr "/dev/null"
[17:42:54.417]   ..$ renice          : int NA
[17:42:54.417]   ..$ rshcmd          : NULL
[17:42:54.417]   ..$ user            : NULL
[17:42:54.417]   ..$ revtunnel       : logi NA
[17:42:54.417]   ..$ rshlogfile      : NULL
[17:42:54.417]   ..$ rshopts         : NULL
[17:42:54.417]   ..$ rank            : int 1
[17:42:54.417]   ..$ manual          : logi FALSE
[17:42:54.417]   ..$ dryrun          : logi FALSE
[17:42:54.417]   ..$ quiet           : logi FALSE
[17:42:54.417]   ..$ setup_strategy  : chr "parallel"
[17:42:54.417]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:54.436] [local output] System call to launch all workers:
[17:42:54.436] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpeBU9BF/worker.rank=1.parallelly.parent=48177.bc3199973bf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11146 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:54.436] [local output] Starting PSOCK main server
[17:42:54.437] [local output] Workers launched
[17:42:54.438] [local output] Waiting for workers to connect back
[17:42:54.438]  - [local output] 0 workers out of 2 ready
[17:42:54.691]  - [local output] 0 workers out of 2 ready
[17:42:54.691]  - [local output] 1 workers out of 2 ready
[17:42:54.692]  - [local output] 2 workers out of 2 ready
[17:42:54.692] [local output] Launching of workers completed
[17:42:54.692] [local output] Collecting session information from workers
[17:42:54.693] [local output]  - Worker #1 of 2
[17:42:54.693] [local output]  - Worker #2 of 2
[17:42:54.693] [local output] makeClusterPSOCK() ... done
[17:42:54.707] Packages needed by the future expression (n = 0): <none>
[17:42:54.708] Packages needed by future strategies (n = 0): <none>
[17:42:54.708] {
[17:42:54.708]     {
[17:42:54.708]         {
[17:42:54.708]             ...future.startTime <- base::Sys.time()
[17:42:54.708]             {
[17:42:54.708]                 {
[17:42:54.708]                   {
[17:42:54.708]                     {
[17:42:54.708]                       base::local({
[17:42:54.708]                         has_future <- base::requireNamespace("future", 
[17:42:54.708]                           quietly = TRUE)
[17:42:54.708]                         if (has_future) {
[17:42:54.708]                           ns <- base::getNamespace("future")
[17:42:54.708]                           version <- ns[[".package"]][["version"]]
[17:42:54.708]                           if (is.null(version)) 
[17:42:54.708]                             version <- utils::packageVersion("future")
[17:42:54.708]                         }
[17:42:54.708]                         else {
[17:42:54.708]                           version <- NULL
[17:42:54.708]                         }
[17:42:54.708]                         if (!has_future || version < "1.8.0") {
[17:42:54.708]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:54.708]                             "", base::R.version$version.string), 
[17:42:54.708]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:54.708]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:54.708]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:54.708]                               "release", "version")], collapse = " "), 
[17:42:54.708]                             hostname = base::Sys.info()[["nodename"]])
[17:42:54.708]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:54.708]                             info)
[17:42:54.708]                           info <- base::paste(info, collapse = "; ")
[17:42:54.708]                           if (!has_future) {
[17:42:54.708]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:54.708]                               info)
[17:42:54.708]                           }
[17:42:54.708]                           else {
[17:42:54.708]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:54.708]                               info, version)
[17:42:54.708]                           }
[17:42:54.708]                           base::stop(msg)
[17:42:54.708]                         }
[17:42:54.708]                       })
[17:42:54.708]                     }
[17:42:54.708]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:54.708]                     base::options(mc.cores = 1L)
[17:42:54.708]                   }
[17:42:54.708]                   options(future.plan = NULL)
[17:42:54.708]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.708]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:54.708]                 }
[17:42:54.708]                 ...future.workdir <- getwd()
[17:42:54.708]             }
[17:42:54.708]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:54.708]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:54.708]         }
[17:42:54.708]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:54.708]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:54.708]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:54.708]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:54.708]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:54.708]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:54.708]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:54.708]             base::names(...future.oldOptions))
[17:42:54.708]     }
[17:42:54.708]     if (FALSE) {
[17:42:54.708]     }
[17:42:54.708]     else {
[17:42:54.708]         if (TRUE) {
[17:42:54.708]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:54.708]                 open = "w")
[17:42:54.708]         }
[17:42:54.708]         else {
[17:42:54.708]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:54.708]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:54.708]         }
[17:42:54.708]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:54.708]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:54.708]             base::sink(type = "output", split = FALSE)
[17:42:54.708]             base::close(...future.stdout)
[17:42:54.708]         }, add = TRUE)
[17:42:54.708]     }
[17:42:54.708]     ...future.frame <- base::sys.nframe()
[17:42:54.708]     ...future.conditions <- base::list()
[17:42:54.708]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:54.708]     if (FALSE) {
[17:42:54.708]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:54.708]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:54.708]     }
[17:42:54.708]     ...future.result <- base::tryCatch({
[17:42:54.708]         base::withCallingHandlers({
[17:42:54.708]             ...future.value <- base::withVisible(base::local({
[17:42:54.708]                 ...future.makeSendCondition <- local({
[17:42:54.708]                   sendCondition <- NULL
[17:42:54.708]                   function(frame = 1L) {
[17:42:54.708]                     if (is.function(sendCondition)) 
[17:42:54.708]                       return(sendCondition)
[17:42:54.708]                     ns <- getNamespace("parallel")
[17:42:54.708]                     if (exists("sendData", mode = "function", 
[17:42:54.708]                       envir = ns)) {
[17:42:54.708]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:54.708]                         envir = ns)
[17:42:54.708]                       envir <- sys.frame(frame)
[17:42:54.708]                       master <- NULL
[17:42:54.708]                       while (!identical(envir, .GlobalEnv) && 
[17:42:54.708]                         !identical(envir, emptyenv())) {
[17:42:54.708]                         if (exists("master", mode = "list", envir = envir, 
[17:42:54.708]                           inherits = FALSE)) {
[17:42:54.708]                           master <- get("master", mode = "list", 
[17:42:54.708]                             envir = envir, inherits = FALSE)
[17:42:54.708]                           if (inherits(master, c("SOCKnode", 
[17:42:54.708]                             "SOCK0node"))) {
[17:42:54.708]                             sendCondition <<- function(cond) {
[17:42:54.708]                               data <- list(type = "VALUE", value = cond, 
[17:42:54.708]                                 success = TRUE)
[17:42:54.708]                               parallel_sendData(master, data)
[17:42:54.708]                             }
[17:42:54.708]                             return(sendCondition)
[17:42:54.708]                           }
[17:42:54.708]                         }
[17:42:54.708]                         frame <- frame + 1L
[17:42:54.708]                         envir <- sys.frame(frame)
[17:42:54.708]                       }
[17:42:54.708]                     }
[17:42:54.708]                     sendCondition <<- function(cond) NULL
[17:42:54.708]                   }
[17:42:54.708]                 })
[17:42:54.708]                 withCallingHandlers({
[17:42:54.708]                   NA
[17:42:54.708]                 }, immediateCondition = function(cond) {
[17:42:54.708]                   sendCondition <- ...future.makeSendCondition()
[17:42:54.708]                   sendCondition(cond)
[17:42:54.708]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.708]                   {
[17:42:54.708]                     inherits <- base::inherits
[17:42:54.708]                     invokeRestart <- base::invokeRestart
[17:42:54.708]                     is.null <- base::is.null
[17:42:54.708]                     muffled <- FALSE
[17:42:54.708]                     if (inherits(cond, "message")) {
[17:42:54.708]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:54.708]                       if (muffled) 
[17:42:54.708]                         invokeRestart("muffleMessage")
[17:42:54.708]                     }
[17:42:54.708]                     else if (inherits(cond, "warning")) {
[17:42:54.708]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:54.708]                       if (muffled) 
[17:42:54.708]                         invokeRestart("muffleWarning")
[17:42:54.708]                     }
[17:42:54.708]                     else if (inherits(cond, "condition")) {
[17:42:54.708]                       if (!is.null(pattern)) {
[17:42:54.708]                         computeRestarts <- base::computeRestarts
[17:42:54.708]                         grepl <- base::grepl
[17:42:54.708]                         restarts <- computeRestarts(cond)
[17:42:54.708]                         for (restart in restarts) {
[17:42:54.708]                           name <- restart$name
[17:42:54.708]                           if (is.null(name)) 
[17:42:54.708]                             next
[17:42:54.708]                           if (!grepl(pattern, name)) 
[17:42:54.708]                             next
[17:42:54.708]                           invokeRestart(restart)
[17:42:54.708]                           muffled <- TRUE
[17:42:54.708]                           break
[17:42:54.708]                         }
[17:42:54.708]                       }
[17:42:54.708]                     }
[17:42:54.708]                     invisible(muffled)
[17:42:54.708]                   }
[17:42:54.708]                   muffleCondition(cond)
[17:42:54.708]                 })
[17:42:54.708]             }))
[17:42:54.708]             future::FutureResult(value = ...future.value$value, 
[17:42:54.708]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.708]                   ...future.rng), globalenv = if (FALSE) 
[17:42:54.708]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:54.708]                     ...future.globalenv.names))
[17:42:54.708]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:54.708]         }, condition = base::local({
[17:42:54.708]             c <- base::c
[17:42:54.708]             inherits <- base::inherits
[17:42:54.708]             invokeRestart <- base::invokeRestart
[17:42:54.708]             length <- base::length
[17:42:54.708]             list <- base::list
[17:42:54.708]             seq.int <- base::seq.int
[17:42:54.708]             signalCondition <- base::signalCondition
[17:42:54.708]             sys.calls <- base::sys.calls
[17:42:54.708]             `[[` <- base::`[[`
[17:42:54.708]             `+` <- base::`+`
[17:42:54.708]             `<<-` <- base::`<<-`
[17:42:54.708]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:54.708]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:54.708]                   3L)]
[17:42:54.708]             }
[17:42:54.708]             function(cond) {
[17:42:54.708]                 is_error <- inherits(cond, "error")
[17:42:54.708]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:54.708]                   NULL)
[17:42:54.708]                 if (is_error) {
[17:42:54.708]                   sessionInformation <- function() {
[17:42:54.708]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:54.708]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:54.708]                       search = base::search(), system = base::Sys.info())
[17:42:54.708]                   }
[17:42:54.708]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.708]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:54.708]                     cond$call), session = sessionInformation(), 
[17:42:54.708]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:54.708]                   signalCondition(cond)
[17:42:54.708]                 }
[17:42:54.708]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:54.708]                 "immediateCondition"))) {
[17:42:54.708]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:54.708]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.708]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:54.708]                   if (TRUE && !signal) {
[17:42:54.708]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.708]                     {
[17:42:54.708]                       inherits <- base::inherits
[17:42:54.708]                       invokeRestart <- base::invokeRestart
[17:42:54.708]                       is.null <- base::is.null
[17:42:54.708]                       muffled <- FALSE
[17:42:54.708]                       if (inherits(cond, "message")) {
[17:42:54.708]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.708]                         if (muffled) 
[17:42:54.708]                           invokeRestart("muffleMessage")
[17:42:54.708]                       }
[17:42:54.708]                       else if (inherits(cond, "warning")) {
[17:42:54.708]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.708]                         if (muffled) 
[17:42:54.708]                           invokeRestart("muffleWarning")
[17:42:54.708]                       }
[17:42:54.708]                       else if (inherits(cond, "condition")) {
[17:42:54.708]                         if (!is.null(pattern)) {
[17:42:54.708]                           computeRestarts <- base::computeRestarts
[17:42:54.708]                           grepl <- base::grepl
[17:42:54.708]                           restarts <- computeRestarts(cond)
[17:42:54.708]                           for (restart in restarts) {
[17:42:54.708]                             name <- restart$name
[17:42:54.708]                             if (is.null(name)) 
[17:42:54.708]                               next
[17:42:54.708]                             if (!grepl(pattern, name)) 
[17:42:54.708]                               next
[17:42:54.708]                             invokeRestart(restart)
[17:42:54.708]                             muffled <- TRUE
[17:42:54.708]                             break
[17:42:54.708]                           }
[17:42:54.708]                         }
[17:42:54.708]                       }
[17:42:54.708]                       invisible(muffled)
[17:42:54.708]                     }
[17:42:54.708]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.708]                   }
[17:42:54.708]                 }
[17:42:54.708]                 else {
[17:42:54.708]                   if (TRUE) {
[17:42:54.708]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.708]                     {
[17:42:54.708]                       inherits <- base::inherits
[17:42:54.708]                       invokeRestart <- base::invokeRestart
[17:42:54.708]                       is.null <- base::is.null
[17:42:54.708]                       muffled <- FALSE
[17:42:54.708]                       if (inherits(cond, "message")) {
[17:42:54.708]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.708]                         if (muffled) 
[17:42:54.708]                           invokeRestart("muffleMessage")
[17:42:54.708]                       }
[17:42:54.708]                       else if (inherits(cond, "warning")) {
[17:42:54.708]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.708]                         if (muffled) 
[17:42:54.708]                           invokeRestart("muffleWarning")
[17:42:54.708]                       }
[17:42:54.708]                       else if (inherits(cond, "condition")) {
[17:42:54.708]                         if (!is.null(pattern)) {
[17:42:54.708]                           computeRestarts <- base::computeRestarts
[17:42:54.708]                           grepl <- base::grepl
[17:42:54.708]                           restarts <- computeRestarts(cond)
[17:42:54.708]                           for (restart in restarts) {
[17:42:54.708]                             name <- restart$name
[17:42:54.708]                             if (is.null(name)) 
[17:42:54.708]                               next
[17:42:54.708]                             if (!grepl(pattern, name)) 
[17:42:54.708]                               next
[17:42:54.708]                             invokeRestart(restart)
[17:42:54.708]                             muffled <- TRUE
[17:42:54.708]                             break
[17:42:54.708]                           }
[17:42:54.708]                         }
[17:42:54.708]                       }
[17:42:54.708]                       invisible(muffled)
[17:42:54.708]                     }
[17:42:54.708]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.708]                   }
[17:42:54.708]                 }
[17:42:54.708]             }
[17:42:54.708]         }))
[17:42:54.708]     }, error = function(ex) {
[17:42:54.708]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:54.708]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.708]                 ...future.rng), started = ...future.startTime, 
[17:42:54.708]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:54.708]             version = "1.8"), class = "FutureResult")
[17:42:54.708]     }, finally = {
[17:42:54.708]         if (!identical(...future.workdir, getwd())) 
[17:42:54.708]             setwd(...future.workdir)
[17:42:54.708]         {
[17:42:54.708]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:54.708]                 ...future.oldOptions$nwarnings <- NULL
[17:42:54.708]             }
[17:42:54.708]             base::options(...future.oldOptions)
[17:42:54.708]             if (.Platform$OS.type == "windows") {
[17:42:54.708]                 old_names <- names(...future.oldEnvVars)
[17:42:54.708]                 envs <- base::Sys.getenv()
[17:42:54.708]                 names <- names(envs)
[17:42:54.708]                 common <- intersect(names, old_names)
[17:42:54.708]                 added <- setdiff(names, old_names)
[17:42:54.708]                 removed <- setdiff(old_names, names)
[17:42:54.708]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:54.708]                   envs[common]]
[17:42:54.708]                 NAMES <- toupper(changed)
[17:42:54.708]                 args <- list()
[17:42:54.708]                 for (kk in seq_along(NAMES)) {
[17:42:54.708]                   name <- changed[[kk]]
[17:42:54.708]                   NAME <- NAMES[[kk]]
[17:42:54.708]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.708]                     next
[17:42:54.708]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.708]                 }
[17:42:54.708]                 NAMES <- toupper(added)
[17:42:54.708]                 for (kk in seq_along(NAMES)) {
[17:42:54.708]                   name <- added[[kk]]
[17:42:54.708]                   NAME <- NAMES[[kk]]
[17:42:54.708]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.708]                     next
[17:42:54.708]                   args[[name]] <- ""
[17:42:54.708]                 }
[17:42:54.708]                 NAMES <- toupper(removed)
[17:42:54.708]                 for (kk in seq_along(NAMES)) {
[17:42:54.708]                   name <- removed[[kk]]
[17:42:54.708]                   NAME <- NAMES[[kk]]
[17:42:54.708]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.708]                     next
[17:42:54.708]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.708]                 }
[17:42:54.708]                 if (length(args) > 0) 
[17:42:54.708]                   base::do.call(base::Sys.setenv, args = args)
[17:42:54.708]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:54.708]             }
[17:42:54.708]             else {
[17:42:54.708]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:54.708]             }
[17:42:54.708]             {
[17:42:54.708]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:54.708]                   0L) {
[17:42:54.708]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:54.708]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:54.708]                   base::options(opts)
[17:42:54.708]                 }
[17:42:54.708]                 {
[17:42:54.708]                   {
[17:42:54.708]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:54.708]                     NULL
[17:42:54.708]                   }
[17:42:54.708]                   options(future.plan = NULL)
[17:42:54.708]                   if (is.na(NA_character_)) 
[17:42:54.708]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.708]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:54.708]                   future::plan(list(function (..., workers = 2L, 
[17:42:54.708]                     envir = parent.frame()) 
[17:42:54.708]                   strategy(..., workers = workers, envir = envir)), 
[17:42:54.708]                     .cleanup = FALSE, .init = FALSE)
[17:42:54.708]                 }
[17:42:54.708]             }
[17:42:54.708]         }
[17:42:54.708]     })
[17:42:54.708]     if (TRUE) {
[17:42:54.708]         base::sink(type = "output", split = FALSE)
[17:42:54.708]         if (TRUE) {
[17:42:54.708]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:54.708]         }
[17:42:54.708]         else {
[17:42:54.708]             ...future.result["stdout"] <- base::list(NULL)
[17:42:54.708]         }
[17:42:54.708]         base::close(...future.stdout)
[17:42:54.708]         ...future.stdout <- NULL
[17:42:54.708]     }
[17:42:54.708]     ...future.result$conditions <- ...future.conditions
[17:42:54.708]     ...future.result$finished <- base::Sys.time()
[17:42:54.708]     ...future.result
[17:42:54.708] }
[17:42:54.780] MultisessionFuture started
[17:42:54.781] result() for ClusterFuture ...
[17:42:54.782] receiveMessageFromWorker() for ClusterFuture ...
[17:42:54.782] - Validating connection of MultisessionFuture
[17:42:54.807] - received message: FutureResult
[17:42:54.807] - Received FutureResult
[17:42:54.810] - Erased future from FutureRegistry
[17:42:54.810] result() for ClusterFuture ...
[17:42:54.810] - result already collected: FutureResult
[17:42:54.810] result() for ClusterFuture ... done
[17:42:54.811] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:54.811] result() for ClusterFuture ... done
[17:42:54.811] result() for ClusterFuture ...
[17:42:54.811] - result already collected: FutureResult
[17:42:54.811] result() for ClusterFuture ... done
[17:42:54.811] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:42:54.812] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 7219efae-a013-4b01-5d9b-b6bdda65803e
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[17:42:54.812] getGlobalsAndPackages() ...
[17:42:54.812] Searching for globals...
[17:42:54.820] - globals found: [2] ‘{’, ‘:::’
[17:42:54.820] Searching for globals ... DONE
[17:42:54.821] Resolving globals: FALSE
[17:42:54.821] 
[17:42:54.821] 
[17:42:54.822] getGlobalsAndPackages() ... DONE
[17:42:54.822] run() for ‘Future’ ...
[17:42:54.822] - state: ‘created’
[17:42:54.822] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:54.834] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:54.834] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:54.834]   - Field: ‘node’
[17:42:54.834]   - Field: ‘label’
[17:42:54.835]   - Field: ‘local’
[17:42:54.835]   - Field: ‘owner’
[17:42:54.835]   - Field: ‘envir’
[17:42:54.835]   - Field: ‘workers’
[17:42:54.835]   - Field: ‘packages’
[17:42:54.835]   - Field: ‘gc’
[17:42:54.835]   - Field: ‘conditions’
[17:42:54.835]   - Field: ‘persistent’
[17:42:54.835]   - Field: ‘expr’
[17:42:54.835]   - Field: ‘uuid’
[17:42:54.836]   - Field: ‘seed’
[17:42:54.836]   - Field: ‘version’
[17:42:54.836]   - Field: ‘result’
[17:42:54.836]   - Field: ‘asynchronous’
[17:42:54.836]   - Field: ‘calls’
[17:42:54.836]   - Field: ‘globals’
[17:42:54.836]   - Field: ‘stdout’
[17:42:54.836]   - Field: ‘earlySignal’
[17:42:54.837]   - Field: ‘lazy’
[17:42:54.837]   - Field: ‘state’
[17:42:54.837] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:54.837] - Launch lazy future ...
[17:42:54.837] Packages needed by the future expression (n = 0): <none>
[17:42:54.837] Packages needed by future strategies (n = 0): <none>
[17:42:54.838] {
[17:42:54.838]     {
[17:42:54.838]         {
[17:42:54.838]             ...future.startTime <- base::Sys.time()
[17:42:54.838]             {
[17:42:54.838]                 {
[17:42:54.838]                   {
[17:42:54.838]                     {
[17:42:54.838]                       base::local({
[17:42:54.838]                         has_future <- base::requireNamespace("future", 
[17:42:54.838]                           quietly = TRUE)
[17:42:54.838]                         if (has_future) {
[17:42:54.838]                           ns <- base::getNamespace("future")
[17:42:54.838]                           version <- ns[[".package"]][["version"]]
[17:42:54.838]                           if (is.null(version)) 
[17:42:54.838]                             version <- utils::packageVersion("future")
[17:42:54.838]                         }
[17:42:54.838]                         else {
[17:42:54.838]                           version <- NULL
[17:42:54.838]                         }
[17:42:54.838]                         if (!has_future || version < "1.8.0") {
[17:42:54.838]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:54.838]                             "", base::R.version$version.string), 
[17:42:54.838]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:54.838]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:54.838]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:54.838]                               "release", "version")], collapse = " "), 
[17:42:54.838]                             hostname = base::Sys.info()[["nodename"]])
[17:42:54.838]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:54.838]                             info)
[17:42:54.838]                           info <- base::paste(info, collapse = "; ")
[17:42:54.838]                           if (!has_future) {
[17:42:54.838]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:54.838]                               info)
[17:42:54.838]                           }
[17:42:54.838]                           else {
[17:42:54.838]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:54.838]                               info, version)
[17:42:54.838]                           }
[17:42:54.838]                           base::stop(msg)
[17:42:54.838]                         }
[17:42:54.838]                       })
[17:42:54.838]                     }
[17:42:54.838]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:54.838]                     base::options(mc.cores = 1L)
[17:42:54.838]                   }
[17:42:54.838]                   options(future.plan = NULL)
[17:42:54.838]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.838]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:54.838]                 }
[17:42:54.838]                 ...future.workdir <- getwd()
[17:42:54.838]             }
[17:42:54.838]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:54.838]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:54.838]         }
[17:42:54.838]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:54.838]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:54.838]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:54.838]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:54.838]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:54.838]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:54.838]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:54.838]             base::names(...future.oldOptions))
[17:42:54.838]     }
[17:42:54.838]     if (FALSE) {
[17:42:54.838]     }
[17:42:54.838]     else {
[17:42:54.838]         if (TRUE) {
[17:42:54.838]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:54.838]                 open = "w")
[17:42:54.838]         }
[17:42:54.838]         else {
[17:42:54.838]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:54.838]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:54.838]         }
[17:42:54.838]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:54.838]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:54.838]             base::sink(type = "output", split = FALSE)
[17:42:54.838]             base::close(...future.stdout)
[17:42:54.838]         }, add = TRUE)
[17:42:54.838]     }
[17:42:54.838]     ...future.frame <- base::sys.nframe()
[17:42:54.838]     ...future.conditions <- base::list()
[17:42:54.838]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:54.838]     if (FALSE) {
[17:42:54.838]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:54.838]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:54.838]     }
[17:42:54.838]     ...future.result <- base::tryCatch({
[17:42:54.838]         base::withCallingHandlers({
[17:42:54.838]             ...future.value <- base::withVisible(base::local({
[17:42:54.838]                 ...future.makeSendCondition <- local({
[17:42:54.838]                   sendCondition <- NULL
[17:42:54.838]                   function(frame = 1L) {
[17:42:54.838]                     if (is.function(sendCondition)) 
[17:42:54.838]                       return(sendCondition)
[17:42:54.838]                     ns <- getNamespace("parallel")
[17:42:54.838]                     if (exists("sendData", mode = "function", 
[17:42:54.838]                       envir = ns)) {
[17:42:54.838]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:54.838]                         envir = ns)
[17:42:54.838]                       envir <- sys.frame(frame)
[17:42:54.838]                       master <- NULL
[17:42:54.838]                       while (!identical(envir, .GlobalEnv) && 
[17:42:54.838]                         !identical(envir, emptyenv())) {
[17:42:54.838]                         if (exists("master", mode = "list", envir = envir, 
[17:42:54.838]                           inherits = FALSE)) {
[17:42:54.838]                           master <- get("master", mode = "list", 
[17:42:54.838]                             envir = envir, inherits = FALSE)
[17:42:54.838]                           if (inherits(master, c("SOCKnode", 
[17:42:54.838]                             "SOCK0node"))) {
[17:42:54.838]                             sendCondition <<- function(cond) {
[17:42:54.838]                               data <- list(type = "VALUE", value = cond, 
[17:42:54.838]                                 success = TRUE)
[17:42:54.838]                               parallel_sendData(master, data)
[17:42:54.838]                             }
[17:42:54.838]                             return(sendCondition)
[17:42:54.838]                           }
[17:42:54.838]                         }
[17:42:54.838]                         frame <- frame + 1L
[17:42:54.838]                         envir <- sys.frame(frame)
[17:42:54.838]                       }
[17:42:54.838]                     }
[17:42:54.838]                     sendCondition <<- function(cond) NULL
[17:42:54.838]                   }
[17:42:54.838]                 })
[17:42:54.838]                 withCallingHandlers({
[17:42:54.838]                   {
[17:42:54.838]                     future:::session_uuid(attributes = TRUE)
[17:42:54.838]                   }
[17:42:54.838]                 }, immediateCondition = function(cond) {
[17:42:54.838]                   sendCondition <- ...future.makeSendCondition()
[17:42:54.838]                   sendCondition(cond)
[17:42:54.838]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.838]                   {
[17:42:54.838]                     inherits <- base::inherits
[17:42:54.838]                     invokeRestart <- base::invokeRestart
[17:42:54.838]                     is.null <- base::is.null
[17:42:54.838]                     muffled <- FALSE
[17:42:54.838]                     if (inherits(cond, "message")) {
[17:42:54.838]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:54.838]                       if (muffled) 
[17:42:54.838]                         invokeRestart("muffleMessage")
[17:42:54.838]                     }
[17:42:54.838]                     else if (inherits(cond, "warning")) {
[17:42:54.838]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:54.838]                       if (muffled) 
[17:42:54.838]                         invokeRestart("muffleWarning")
[17:42:54.838]                     }
[17:42:54.838]                     else if (inherits(cond, "condition")) {
[17:42:54.838]                       if (!is.null(pattern)) {
[17:42:54.838]                         computeRestarts <- base::computeRestarts
[17:42:54.838]                         grepl <- base::grepl
[17:42:54.838]                         restarts <- computeRestarts(cond)
[17:42:54.838]                         for (restart in restarts) {
[17:42:54.838]                           name <- restart$name
[17:42:54.838]                           if (is.null(name)) 
[17:42:54.838]                             next
[17:42:54.838]                           if (!grepl(pattern, name)) 
[17:42:54.838]                             next
[17:42:54.838]                           invokeRestart(restart)
[17:42:54.838]                           muffled <- TRUE
[17:42:54.838]                           break
[17:42:54.838]                         }
[17:42:54.838]                       }
[17:42:54.838]                     }
[17:42:54.838]                     invisible(muffled)
[17:42:54.838]                   }
[17:42:54.838]                   muffleCondition(cond)
[17:42:54.838]                 })
[17:42:54.838]             }))
[17:42:54.838]             future::FutureResult(value = ...future.value$value, 
[17:42:54.838]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.838]                   ...future.rng), globalenv = if (FALSE) 
[17:42:54.838]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:54.838]                     ...future.globalenv.names))
[17:42:54.838]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:54.838]         }, condition = base::local({
[17:42:54.838]             c <- base::c
[17:42:54.838]             inherits <- base::inherits
[17:42:54.838]             invokeRestart <- base::invokeRestart
[17:42:54.838]             length <- base::length
[17:42:54.838]             list <- base::list
[17:42:54.838]             seq.int <- base::seq.int
[17:42:54.838]             signalCondition <- base::signalCondition
[17:42:54.838]             sys.calls <- base::sys.calls
[17:42:54.838]             `[[` <- base::`[[`
[17:42:54.838]             `+` <- base::`+`
[17:42:54.838]             `<<-` <- base::`<<-`
[17:42:54.838]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:54.838]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:54.838]                   3L)]
[17:42:54.838]             }
[17:42:54.838]             function(cond) {
[17:42:54.838]                 is_error <- inherits(cond, "error")
[17:42:54.838]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:54.838]                   NULL)
[17:42:54.838]                 if (is_error) {
[17:42:54.838]                   sessionInformation <- function() {
[17:42:54.838]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:54.838]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:54.838]                       search = base::search(), system = base::Sys.info())
[17:42:54.838]                   }
[17:42:54.838]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.838]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:54.838]                     cond$call), session = sessionInformation(), 
[17:42:54.838]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:54.838]                   signalCondition(cond)
[17:42:54.838]                 }
[17:42:54.838]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:54.838]                 "immediateCondition"))) {
[17:42:54.838]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:54.838]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.838]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:54.838]                   if (TRUE && !signal) {
[17:42:54.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.838]                     {
[17:42:54.838]                       inherits <- base::inherits
[17:42:54.838]                       invokeRestart <- base::invokeRestart
[17:42:54.838]                       is.null <- base::is.null
[17:42:54.838]                       muffled <- FALSE
[17:42:54.838]                       if (inherits(cond, "message")) {
[17:42:54.838]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.838]                         if (muffled) 
[17:42:54.838]                           invokeRestart("muffleMessage")
[17:42:54.838]                       }
[17:42:54.838]                       else if (inherits(cond, "warning")) {
[17:42:54.838]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.838]                         if (muffled) 
[17:42:54.838]                           invokeRestart("muffleWarning")
[17:42:54.838]                       }
[17:42:54.838]                       else if (inherits(cond, "condition")) {
[17:42:54.838]                         if (!is.null(pattern)) {
[17:42:54.838]                           computeRestarts <- base::computeRestarts
[17:42:54.838]                           grepl <- base::grepl
[17:42:54.838]                           restarts <- computeRestarts(cond)
[17:42:54.838]                           for (restart in restarts) {
[17:42:54.838]                             name <- restart$name
[17:42:54.838]                             if (is.null(name)) 
[17:42:54.838]                               next
[17:42:54.838]                             if (!grepl(pattern, name)) 
[17:42:54.838]                               next
[17:42:54.838]                             invokeRestart(restart)
[17:42:54.838]                             muffled <- TRUE
[17:42:54.838]                             break
[17:42:54.838]                           }
[17:42:54.838]                         }
[17:42:54.838]                       }
[17:42:54.838]                       invisible(muffled)
[17:42:54.838]                     }
[17:42:54.838]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.838]                   }
[17:42:54.838]                 }
[17:42:54.838]                 else {
[17:42:54.838]                   if (TRUE) {
[17:42:54.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.838]                     {
[17:42:54.838]                       inherits <- base::inherits
[17:42:54.838]                       invokeRestart <- base::invokeRestart
[17:42:54.838]                       is.null <- base::is.null
[17:42:54.838]                       muffled <- FALSE
[17:42:54.838]                       if (inherits(cond, "message")) {
[17:42:54.838]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.838]                         if (muffled) 
[17:42:54.838]                           invokeRestart("muffleMessage")
[17:42:54.838]                       }
[17:42:54.838]                       else if (inherits(cond, "warning")) {
[17:42:54.838]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.838]                         if (muffled) 
[17:42:54.838]                           invokeRestart("muffleWarning")
[17:42:54.838]                       }
[17:42:54.838]                       else if (inherits(cond, "condition")) {
[17:42:54.838]                         if (!is.null(pattern)) {
[17:42:54.838]                           computeRestarts <- base::computeRestarts
[17:42:54.838]                           grepl <- base::grepl
[17:42:54.838]                           restarts <- computeRestarts(cond)
[17:42:54.838]                           for (restart in restarts) {
[17:42:54.838]                             name <- restart$name
[17:42:54.838]                             if (is.null(name)) 
[17:42:54.838]                               next
[17:42:54.838]                             if (!grepl(pattern, name)) 
[17:42:54.838]                               next
[17:42:54.838]                             invokeRestart(restart)
[17:42:54.838]                             muffled <- TRUE
[17:42:54.838]                             break
[17:42:54.838]                           }
[17:42:54.838]                         }
[17:42:54.838]                       }
[17:42:54.838]                       invisible(muffled)
[17:42:54.838]                     }
[17:42:54.838]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.838]                   }
[17:42:54.838]                 }
[17:42:54.838]             }
[17:42:54.838]         }))
[17:42:54.838]     }, error = function(ex) {
[17:42:54.838]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:54.838]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.838]                 ...future.rng), started = ...future.startTime, 
[17:42:54.838]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:54.838]             version = "1.8"), class = "FutureResult")
[17:42:54.838]     }, finally = {
[17:42:54.838]         if (!identical(...future.workdir, getwd())) 
[17:42:54.838]             setwd(...future.workdir)
[17:42:54.838]         {
[17:42:54.838]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:54.838]                 ...future.oldOptions$nwarnings <- NULL
[17:42:54.838]             }
[17:42:54.838]             base::options(...future.oldOptions)
[17:42:54.838]             if (.Platform$OS.type == "windows") {
[17:42:54.838]                 old_names <- names(...future.oldEnvVars)
[17:42:54.838]                 envs <- base::Sys.getenv()
[17:42:54.838]                 names <- names(envs)
[17:42:54.838]                 common <- intersect(names, old_names)
[17:42:54.838]                 added <- setdiff(names, old_names)
[17:42:54.838]                 removed <- setdiff(old_names, names)
[17:42:54.838]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:54.838]                   envs[common]]
[17:42:54.838]                 NAMES <- toupper(changed)
[17:42:54.838]                 args <- list()
[17:42:54.838]                 for (kk in seq_along(NAMES)) {
[17:42:54.838]                   name <- changed[[kk]]
[17:42:54.838]                   NAME <- NAMES[[kk]]
[17:42:54.838]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.838]                     next
[17:42:54.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.838]                 }
[17:42:54.838]                 NAMES <- toupper(added)
[17:42:54.838]                 for (kk in seq_along(NAMES)) {
[17:42:54.838]                   name <- added[[kk]]
[17:42:54.838]                   NAME <- NAMES[[kk]]
[17:42:54.838]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.838]                     next
[17:42:54.838]                   args[[name]] <- ""
[17:42:54.838]                 }
[17:42:54.838]                 NAMES <- toupper(removed)
[17:42:54.838]                 for (kk in seq_along(NAMES)) {
[17:42:54.838]                   name <- removed[[kk]]
[17:42:54.838]                   NAME <- NAMES[[kk]]
[17:42:54.838]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.838]                     next
[17:42:54.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.838]                 }
[17:42:54.838]                 if (length(args) > 0) 
[17:42:54.838]                   base::do.call(base::Sys.setenv, args = args)
[17:42:54.838]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:54.838]             }
[17:42:54.838]             else {
[17:42:54.838]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:54.838]             }
[17:42:54.838]             {
[17:42:54.838]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:54.838]                   0L) {
[17:42:54.838]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:54.838]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:54.838]                   base::options(opts)
[17:42:54.838]                 }
[17:42:54.838]                 {
[17:42:54.838]                   {
[17:42:54.838]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:54.838]                     NULL
[17:42:54.838]                   }
[17:42:54.838]                   options(future.plan = NULL)
[17:42:54.838]                   if (is.na(NA_character_)) 
[17:42:54.838]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.838]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:54.838]                   future::plan(list(function (..., workers = 2L, 
[17:42:54.838]                     envir = parent.frame()) 
[17:42:54.838]                   strategy(..., workers = workers, envir = envir)), 
[17:42:54.838]                     .cleanup = FALSE, .init = FALSE)
[17:42:54.838]                 }
[17:42:54.838]             }
[17:42:54.838]         }
[17:42:54.838]     })
[17:42:54.838]     if (TRUE) {
[17:42:54.838]         base::sink(type = "output", split = FALSE)
[17:42:54.838]         if (TRUE) {
[17:42:54.838]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:54.838]         }
[17:42:54.838]         else {
[17:42:54.838]             ...future.result["stdout"] <- base::list(NULL)
[17:42:54.838]         }
[17:42:54.838]         base::close(...future.stdout)
[17:42:54.838]         ...future.stdout <- NULL
[17:42:54.838]     }
[17:42:54.838]     ...future.result$conditions <- ...future.conditions
[17:42:54.838]     ...future.result$finished <- base::Sys.time()
[17:42:54.838]     ...future.result
[17:42:54.838] }
[17:42:54.841] MultisessionFuture started
[17:42:54.842] - Launch lazy future ... done
[17:42:54.842] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[17:42:54.842] result() for ClusterFuture ...
[17:42:54.842] receiveMessageFromWorker() for ClusterFuture ...
[17:42:54.842] - Validating connection of MultisessionFuture
[17:42:54.885] - received message: FutureResult
[17:42:54.885] - Received FutureResult
[17:42:54.885] - Erased future from FutureRegistry
[17:42:54.885] result() for ClusterFuture ...
[17:42:54.885] - result already collected: FutureResult
[17:42:54.885] result() for ClusterFuture ... done
[17:42:54.885] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:54.886] result() for ClusterFuture ... done
[17:42:54.886] result() for ClusterFuture ...
[17:42:54.886] - result already collected: FutureResult
[17:42:54.886] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 15b73d45-cbf0-e673-f43c-98e4c0c46535
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[17:42:54.886] getGlobalsAndPackages() ...
[17:42:54.886] Searching for globals...
[17:42:54.888] - globals found: [2] ‘{’, ‘:::’
[17:42:54.888] Searching for globals ... DONE
[17:42:54.888] Resolving globals: FALSE
[17:42:54.888] 
[17:42:54.888] 
[17:42:54.889] getGlobalsAndPackages() ... DONE
[17:42:54.889] run() for ‘Future’ ...
[17:42:54.889] - state: ‘created’
[17:42:54.889] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:54.901] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:54.901] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:54.901]   - Field: ‘node’
[17:42:54.901]   - Field: ‘label’
[17:42:54.901]   - Field: ‘local’
[17:42:54.901]   - Field: ‘owner’
[17:42:54.902]   - Field: ‘envir’
[17:42:54.902]   - Field: ‘workers’
[17:42:54.905]   - Field: ‘packages’
[17:42:54.905]   - Field: ‘gc’
[17:42:54.905]   - Field: ‘conditions’
[17:42:54.905]   - Field: ‘persistent’
[17:42:54.905]   - Field: ‘expr’
[17:42:54.905]   - Field: ‘uuid’
[17:42:54.905]   - Field: ‘seed’
[17:42:54.905]   - Field: ‘version’
[17:42:54.906]   - Field: ‘result’
[17:42:54.906]   - Field: ‘asynchronous’
[17:42:54.906]   - Field: ‘calls’
[17:42:54.906]   - Field: ‘globals’
[17:42:54.906]   - Field: ‘stdout’
[17:42:54.906]   - Field: ‘earlySignal’
[17:42:54.906]   - Field: ‘lazy’
[17:42:54.906]   - Field: ‘state’
[17:42:54.906] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:54.906] - Launch lazy future ...
[17:42:54.907] Packages needed by the future expression (n = 0): <none>
[17:42:54.907] Packages needed by future strategies (n = 0): <none>
[17:42:54.907] {
[17:42:54.907]     {
[17:42:54.907]         {
[17:42:54.907]             ...future.startTime <- base::Sys.time()
[17:42:54.907]             {
[17:42:54.907]                 {
[17:42:54.907]                   {
[17:42:54.907]                     {
[17:42:54.907]                       base::local({
[17:42:54.907]                         has_future <- base::requireNamespace("future", 
[17:42:54.907]                           quietly = TRUE)
[17:42:54.907]                         if (has_future) {
[17:42:54.907]                           ns <- base::getNamespace("future")
[17:42:54.907]                           version <- ns[[".package"]][["version"]]
[17:42:54.907]                           if (is.null(version)) 
[17:42:54.907]                             version <- utils::packageVersion("future")
[17:42:54.907]                         }
[17:42:54.907]                         else {
[17:42:54.907]                           version <- NULL
[17:42:54.907]                         }
[17:42:54.907]                         if (!has_future || version < "1.8.0") {
[17:42:54.907]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:54.907]                             "", base::R.version$version.string), 
[17:42:54.907]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:54.907]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:54.907]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:54.907]                               "release", "version")], collapse = " "), 
[17:42:54.907]                             hostname = base::Sys.info()[["nodename"]])
[17:42:54.907]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:54.907]                             info)
[17:42:54.907]                           info <- base::paste(info, collapse = "; ")
[17:42:54.907]                           if (!has_future) {
[17:42:54.907]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:54.907]                               info)
[17:42:54.907]                           }
[17:42:54.907]                           else {
[17:42:54.907]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:54.907]                               info, version)
[17:42:54.907]                           }
[17:42:54.907]                           base::stop(msg)
[17:42:54.907]                         }
[17:42:54.907]                       })
[17:42:54.907]                     }
[17:42:54.907]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:54.907]                     base::options(mc.cores = 1L)
[17:42:54.907]                   }
[17:42:54.907]                   options(future.plan = NULL)
[17:42:54.907]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.907]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:54.907]                 }
[17:42:54.907]                 ...future.workdir <- getwd()
[17:42:54.907]             }
[17:42:54.907]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:54.907]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:54.907]         }
[17:42:54.907]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:54.907]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:54.907]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:54.907]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:54.907]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:54.907]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:54.907]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:54.907]             base::names(...future.oldOptions))
[17:42:54.907]     }
[17:42:54.907]     if (FALSE) {
[17:42:54.907]     }
[17:42:54.907]     else {
[17:42:54.907]         if (TRUE) {
[17:42:54.907]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:54.907]                 open = "w")
[17:42:54.907]         }
[17:42:54.907]         else {
[17:42:54.907]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:54.907]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:54.907]         }
[17:42:54.907]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:54.907]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:54.907]             base::sink(type = "output", split = FALSE)
[17:42:54.907]             base::close(...future.stdout)
[17:42:54.907]         }, add = TRUE)
[17:42:54.907]     }
[17:42:54.907]     ...future.frame <- base::sys.nframe()
[17:42:54.907]     ...future.conditions <- base::list()
[17:42:54.907]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:54.907]     if (FALSE) {
[17:42:54.907]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:54.907]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:54.907]     }
[17:42:54.907]     ...future.result <- base::tryCatch({
[17:42:54.907]         base::withCallingHandlers({
[17:42:54.907]             ...future.value <- base::withVisible(base::local({
[17:42:54.907]                 ...future.makeSendCondition <- local({
[17:42:54.907]                   sendCondition <- NULL
[17:42:54.907]                   function(frame = 1L) {
[17:42:54.907]                     if (is.function(sendCondition)) 
[17:42:54.907]                       return(sendCondition)
[17:42:54.907]                     ns <- getNamespace("parallel")
[17:42:54.907]                     if (exists("sendData", mode = "function", 
[17:42:54.907]                       envir = ns)) {
[17:42:54.907]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:54.907]                         envir = ns)
[17:42:54.907]                       envir <- sys.frame(frame)
[17:42:54.907]                       master <- NULL
[17:42:54.907]                       while (!identical(envir, .GlobalEnv) && 
[17:42:54.907]                         !identical(envir, emptyenv())) {
[17:42:54.907]                         if (exists("master", mode = "list", envir = envir, 
[17:42:54.907]                           inherits = FALSE)) {
[17:42:54.907]                           master <- get("master", mode = "list", 
[17:42:54.907]                             envir = envir, inherits = FALSE)
[17:42:54.907]                           if (inherits(master, c("SOCKnode", 
[17:42:54.907]                             "SOCK0node"))) {
[17:42:54.907]                             sendCondition <<- function(cond) {
[17:42:54.907]                               data <- list(type = "VALUE", value = cond, 
[17:42:54.907]                                 success = TRUE)
[17:42:54.907]                               parallel_sendData(master, data)
[17:42:54.907]                             }
[17:42:54.907]                             return(sendCondition)
[17:42:54.907]                           }
[17:42:54.907]                         }
[17:42:54.907]                         frame <- frame + 1L
[17:42:54.907]                         envir <- sys.frame(frame)
[17:42:54.907]                       }
[17:42:54.907]                     }
[17:42:54.907]                     sendCondition <<- function(cond) NULL
[17:42:54.907]                   }
[17:42:54.907]                 })
[17:42:54.907]                 withCallingHandlers({
[17:42:54.907]                   {
[17:42:54.907]                     future:::session_uuid(attributes = TRUE)
[17:42:54.907]                   }
[17:42:54.907]                 }, immediateCondition = function(cond) {
[17:42:54.907]                   sendCondition <- ...future.makeSendCondition()
[17:42:54.907]                   sendCondition(cond)
[17:42:54.907]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.907]                   {
[17:42:54.907]                     inherits <- base::inherits
[17:42:54.907]                     invokeRestart <- base::invokeRestart
[17:42:54.907]                     is.null <- base::is.null
[17:42:54.907]                     muffled <- FALSE
[17:42:54.907]                     if (inherits(cond, "message")) {
[17:42:54.907]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:54.907]                       if (muffled) 
[17:42:54.907]                         invokeRestart("muffleMessage")
[17:42:54.907]                     }
[17:42:54.907]                     else if (inherits(cond, "warning")) {
[17:42:54.907]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:54.907]                       if (muffled) 
[17:42:54.907]                         invokeRestart("muffleWarning")
[17:42:54.907]                     }
[17:42:54.907]                     else if (inherits(cond, "condition")) {
[17:42:54.907]                       if (!is.null(pattern)) {
[17:42:54.907]                         computeRestarts <- base::computeRestarts
[17:42:54.907]                         grepl <- base::grepl
[17:42:54.907]                         restarts <- computeRestarts(cond)
[17:42:54.907]                         for (restart in restarts) {
[17:42:54.907]                           name <- restart$name
[17:42:54.907]                           if (is.null(name)) 
[17:42:54.907]                             next
[17:42:54.907]                           if (!grepl(pattern, name)) 
[17:42:54.907]                             next
[17:42:54.907]                           invokeRestart(restart)
[17:42:54.907]                           muffled <- TRUE
[17:42:54.907]                           break
[17:42:54.907]                         }
[17:42:54.907]                       }
[17:42:54.907]                     }
[17:42:54.907]                     invisible(muffled)
[17:42:54.907]                   }
[17:42:54.907]                   muffleCondition(cond)
[17:42:54.907]                 })
[17:42:54.907]             }))
[17:42:54.907]             future::FutureResult(value = ...future.value$value, 
[17:42:54.907]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.907]                   ...future.rng), globalenv = if (FALSE) 
[17:42:54.907]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:54.907]                     ...future.globalenv.names))
[17:42:54.907]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:54.907]         }, condition = base::local({
[17:42:54.907]             c <- base::c
[17:42:54.907]             inherits <- base::inherits
[17:42:54.907]             invokeRestart <- base::invokeRestart
[17:42:54.907]             length <- base::length
[17:42:54.907]             list <- base::list
[17:42:54.907]             seq.int <- base::seq.int
[17:42:54.907]             signalCondition <- base::signalCondition
[17:42:54.907]             sys.calls <- base::sys.calls
[17:42:54.907]             `[[` <- base::`[[`
[17:42:54.907]             `+` <- base::`+`
[17:42:54.907]             `<<-` <- base::`<<-`
[17:42:54.907]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:54.907]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:54.907]                   3L)]
[17:42:54.907]             }
[17:42:54.907]             function(cond) {
[17:42:54.907]                 is_error <- inherits(cond, "error")
[17:42:54.907]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:54.907]                   NULL)
[17:42:54.907]                 if (is_error) {
[17:42:54.907]                   sessionInformation <- function() {
[17:42:54.907]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:54.907]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:54.907]                       search = base::search(), system = base::Sys.info())
[17:42:54.907]                   }
[17:42:54.907]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.907]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:54.907]                     cond$call), session = sessionInformation(), 
[17:42:54.907]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:54.907]                   signalCondition(cond)
[17:42:54.907]                 }
[17:42:54.907]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:54.907]                 "immediateCondition"))) {
[17:42:54.907]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:54.907]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.907]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:54.907]                   if (TRUE && !signal) {
[17:42:54.907]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.907]                     {
[17:42:54.907]                       inherits <- base::inherits
[17:42:54.907]                       invokeRestart <- base::invokeRestart
[17:42:54.907]                       is.null <- base::is.null
[17:42:54.907]                       muffled <- FALSE
[17:42:54.907]                       if (inherits(cond, "message")) {
[17:42:54.907]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.907]                         if (muffled) 
[17:42:54.907]                           invokeRestart("muffleMessage")
[17:42:54.907]                       }
[17:42:54.907]                       else if (inherits(cond, "warning")) {
[17:42:54.907]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.907]                         if (muffled) 
[17:42:54.907]                           invokeRestart("muffleWarning")
[17:42:54.907]                       }
[17:42:54.907]                       else if (inherits(cond, "condition")) {
[17:42:54.907]                         if (!is.null(pattern)) {
[17:42:54.907]                           computeRestarts <- base::computeRestarts
[17:42:54.907]                           grepl <- base::grepl
[17:42:54.907]                           restarts <- computeRestarts(cond)
[17:42:54.907]                           for (restart in restarts) {
[17:42:54.907]                             name <- restart$name
[17:42:54.907]                             if (is.null(name)) 
[17:42:54.907]                               next
[17:42:54.907]                             if (!grepl(pattern, name)) 
[17:42:54.907]                               next
[17:42:54.907]                             invokeRestart(restart)
[17:42:54.907]                             muffled <- TRUE
[17:42:54.907]                             break
[17:42:54.907]                           }
[17:42:54.907]                         }
[17:42:54.907]                       }
[17:42:54.907]                       invisible(muffled)
[17:42:54.907]                     }
[17:42:54.907]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.907]                   }
[17:42:54.907]                 }
[17:42:54.907]                 else {
[17:42:54.907]                   if (TRUE) {
[17:42:54.907]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.907]                     {
[17:42:54.907]                       inherits <- base::inherits
[17:42:54.907]                       invokeRestart <- base::invokeRestart
[17:42:54.907]                       is.null <- base::is.null
[17:42:54.907]                       muffled <- FALSE
[17:42:54.907]                       if (inherits(cond, "message")) {
[17:42:54.907]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.907]                         if (muffled) 
[17:42:54.907]                           invokeRestart("muffleMessage")
[17:42:54.907]                       }
[17:42:54.907]                       else if (inherits(cond, "warning")) {
[17:42:54.907]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.907]                         if (muffled) 
[17:42:54.907]                           invokeRestart("muffleWarning")
[17:42:54.907]                       }
[17:42:54.907]                       else if (inherits(cond, "condition")) {
[17:42:54.907]                         if (!is.null(pattern)) {
[17:42:54.907]                           computeRestarts <- base::computeRestarts
[17:42:54.907]                           grepl <- base::grepl
[17:42:54.907]                           restarts <- computeRestarts(cond)
[17:42:54.907]                           for (restart in restarts) {
[17:42:54.907]                             name <- restart$name
[17:42:54.907]                             if (is.null(name)) 
[17:42:54.907]                               next
[17:42:54.907]                             if (!grepl(pattern, name)) 
[17:42:54.907]                               next
[17:42:54.907]                             invokeRestart(restart)
[17:42:54.907]                             muffled <- TRUE
[17:42:54.907]                             break
[17:42:54.907]                           }
[17:42:54.907]                         }
[17:42:54.907]                       }
[17:42:54.907]                       invisible(muffled)
[17:42:54.907]                     }
[17:42:54.907]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.907]                   }
[17:42:54.907]                 }
[17:42:54.907]             }
[17:42:54.907]         }))
[17:42:54.907]     }, error = function(ex) {
[17:42:54.907]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:54.907]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.907]                 ...future.rng), started = ...future.startTime, 
[17:42:54.907]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:54.907]             version = "1.8"), class = "FutureResult")
[17:42:54.907]     }, finally = {
[17:42:54.907]         if (!identical(...future.workdir, getwd())) 
[17:42:54.907]             setwd(...future.workdir)
[17:42:54.907]         {
[17:42:54.907]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:54.907]                 ...future.oldOptions$nwarnings <- NULL
[17:42:54.907]             }
[17:42:54.907]             base::options(...future.oldOptions)
[17:42:54.907]             if (.Platform$OS.type == "windows") {
[17:42:54.907]                 old_names <- names(...future.oldEnvVars)
[17:42:54.907]                 envs <- base::Sys.getenv()
[17:42:54.907]                 names <- names(envs)
[17:42:54.907]                 common <- intersect(names, old_names)
[17:42:54.907]                 added <- setdiff(names, old_names)
[17:42:54.907]                 removed <- setdiff(old_names, names)
[17:42:54.907]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:54.907]                   envs[common]]
[17:42:54.907]                 NAMES <- toupper(changed)
[17:42:54.907]                 args <- list()
[17:42:54.907]                 for (kk in seq_along(NAMES)) {
[17:42:54.907]                   name <- changed[[kk]]
[17:42:54.907]                   NAME <- NAMES[[kk]]
[17:42:54.907]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.907]                     next
[17:42:54.907]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.907]                 }
[17:42:54.907]                 NAMES <- toupper(added)
[17:42:54.907]                 for (kk in seq_along(NAMES)) {
[17:42:54.907]                   name <- added[[kk]]
[17:42:54.907]                   NAME <- NAMES[[kk]]
[17:42:54.907]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.907]                     next
[17:42:54.907]                   args[[name]] <- ""
[17:42:54.907]                 }
[17:42:54.907]                 NAMES <- toupper(removed)
[17:42:54.907]                 for (kk in seq_along(NAMES)) {
[17:42:54.907]                   name <- removed[[kk]]
[17:42:54.907]                   NAME <- NAMES[[kk]]
[17:42:54.907]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.907]                     next
[17:42:54.907]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.907]                 }
[17:42:54.907]                 if (length(args) > 0) 
[17:42:54.907]                   base::do.call(base::Sys.setenv, args = args)
[17:42:54.907]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:54.907]             }
[17:42:54.907]             else {
[17:42:54.907]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:54.907]             }
[17:42:54.907]             {
[17:42:54.907]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:54.907]                   0L) {
[17:42:54.907]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:54.907]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:54.907]                   base::options(opts)
[17:42:54.907]                 }
[17:42:54.907]                 {
[17:42:54.907]                   {
[17:42:54.907]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:54.907]                     NULL
[17:42:54.907]                   }
[17:42:54.907]                   options(future.plan = NULL)
[17:42:54.907]                   if (is.na(NA_character_)) 
[17:42:54.907]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.907]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:54.907]                   future::plan(list(function (..., workers = 2L, 
[17:42:54.907]                     envir = parent.frame()) 
[17:42:54.907]                   strategy(..., workers = workers, envir = envir)), 
[17:42:54.907]                     .cleanup = FALSE, .init = FALSE)
[17:42:54.907]                 }
[17:42:54.907]             }
[17:42:54.907]         }
[17:42:54.907]     })
[17:42:54.907]     if (TRUE) {
[17:42:54.907]         base::sink(type = "output", split = FALSE)
[17:42:54.907]         if (TRUE) {
[17:42:54.907]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:54.907]         }
[17:42:54.907]         else {
[17:42:54.907]             ...future.result["stdout"] <- base::list(NULL)
[17:42:54.907]         }
[17:42:54.907]         base::close(...future.stdout)
[17:42:54.907]         ...future.stdout <- NULL
[17:42:54.907]     }
[17:42:54.907]     ...future.result$conditions <- ...future.conditions
[17:42:54.907]     ...future.result$finished <- base::Sys.time()
[17:42:54.907]     ...future.result
[17:42:54.907] }
[17:42:54.910] MultisessionFuture started
[17:42:54.910] - Launch lazy future ... done
[17:42:54.911] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[17:42:54.911] result() for ClusterFuture ...
[17:42:54.911] receiveMessageFromWorker() for ClusterFuture ...
[17:42:54.911] - Validating connection of MultisessionFuture
[17:42:54.952] - received message: FutureResult
[17:42:54.953] - Received FutureResult
[17:42:54.953] - Erased future from FutureRegistry
[17:42:54.953] result() for ClusterFuture ...
[17:42:54.953] - result already collected: FutureResult
[17:42:54.953] result() for ClusterFuture ... done
[17:42:54.953] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:54.953] result() for ClusterFuture ... done
[17:42:54.953] result() for ClusterFuture ...
[17:42:54.953] - result already collected: FutureResult
[17:42:54.953] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 15b73d45-cbf0-e673-f43c-98e4c0c46535
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[17:42:54.954] getGlobalsAndPackages() ...
[17:42:54.954] Searching for globals...
[17:42:54.955] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:42:54.955] Searching for globals ... DONE
[17:42:54.955] Resolving globals: FALSE
[17:42:54.958] The total size of the 1 globals is 1.54 MiB (1611504 bytes)
[17:42:54.958] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[17:42:54.958] - globals: [1] ‘f1’
[17:42:54.959] 
[17:42:54.959] getGlobalsAndPackages() ... DONE
[17:42:54.959] run() for ‘Future’ ...
[17:42:54.959] - state: ‘created’
[17:42:54.959] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:54.970] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:54.970] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:54.970]   - Field: ‘node’
[17:42:54.971]   - Field: ‘label’
[17:42:54.971]   - Field: ‘local’
[17:42:54.971]   - Field: ‘owner’
[17:42:54.971]   - Field: ‘envir’
[17:42:54.971]   - Field: ‘workers’
[17:42:54.971]   - Field: ‘packages’
[17:42:54.971]   - Field: ‘gc’
[17:42:54.971]   - Field: ‘conditions’
[17:42:54.971]   - Field: ‘persistent’
[17:42:54.971]   - Field: ‘expr’
[17:42:54.971]   - Field: ‘uuid’
[17:42:54.972]   - Field: ‘seed’
[17:42:54.972]   - Field: ‘version’
[17:42:54.972]   - Field: ‘result’
[17:42:54.972]   - Field: ‘asynchronous’
[17:42:54.972]   - Field: ‘calls’
[17:42:54.972]   - Field: ‘globals’
[17:42:54.972]   - Field: ‘stdout’
[17:42:54.972]   - Field: ‘earlySignal’
[17:42:54.973]   - Field: ‘lazy’
[17:42:54.973]   - Field: ‘state’
[17:42:54.973] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:54.973] - Launch lazy future ...
[17:42:54.973] Packages needed by the future expression (n = 0): <none>
[17:42:54.973] Packages needed by future strategies (n = 0): <none>
[17:42:54.974] {
[17:42:54.974]     {
[17:42:54.974]         {
[17:42:54.974]             ...future.startTime <- base::Sys.time()
[17:42:54.974]             {
[17:42:54.974]                 {
[17:42:54.974]                   {
[17:42:54.974]                     {
[17:42:54.974]                       base::local({
[17:42:54.974]                         has_future <- base::requireNamespace("future", 
[17:42:54.974]                           quietly = TRUE)
[17:42:54.974]                         if (has_future) {
[17:42:54.974]                           ns <- base::getNamespace("future")
[17:42:54.974]                           version <- ns[[".package"]][["version"]]
[17:42:54.974]                           if (is.null(version)) 
[17:42:54.974]                             version <- utils::packageVersion("future")
[17:42:54.974]                         }
[17:42:54.974]                         else {
[17:42:54.974]                           version <- NULL
[17:42:54.974]                         }
[17:42:54.974]                         if (!has_future || version < "1.8.0") {
[17:42:54.974]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:54.974]                             "", base::R.version$version.string), 
[17:42:54.974]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:54.974]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:54.974]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:54.974]                               "release", "version")], collapse = " "), 
[17:42:54.974]                             hostname = base::Sys.info()[["nodename"]])
[17:42:54.974]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:54.974]                             info)
[17:42:54.974]                           info <- base::paste(info, collapse = "; ")
[17:42:54.974]                           if (!has_future) {
[17:42:54.974]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:54.974]                               info)
[17:42:54.974]                           }
[17:42:54.974]                           else {
[17:42:54.974]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:54.974]                               info, version)
[17:42:54.974]                           }
[17:42:54.974]                           base::stop(msg)
[17:42:54.974]                         }
[17:42:54.974]                       })
[17:42:54.974]                     }
[17:42:54.974]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:54.974]                     base::options(mc.cores = 1L)
[17:42:54.974]                   }
[17:42:54.974]                   options(future.plan = NULL)
[17:42:54.974]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.974]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:54.974]                 }
[17:42:54.974]                 ...future.workdir <- getwd()
[17:42:54.974]             }
[17:42:54.974]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:54.974]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:54.974]         }
[17:42:54.974]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:54.974]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:54.974]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:54.974]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:54.974]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:54.974]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:54.974]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:54.974]             base::names(...future.oldOptions))
[17:42:54.974]     }
[17:42:54.974]     if (FALSE) {
[17:42:54.974]     }
[17:42:54.974]     else {
[17:42:54.974]         if (TRUE) {
[17:42:54.974]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:54.974]                 open = "w")
[17:42:54.974]         }
[17:42:54.974]         else {
[17:42:54.974]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:54.974]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:54.974]         }
[17:42:54.974]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:54.974]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:54.974]             base::sink(type = "output", split = FALSE)
[17:42:54.974]             base::close(...future.stdout)
[17:42:54.974]         }, add = TRUE)
[17:42:54.974]     }
[17:42:54.974]     ...future.frame <- base::sys.nframe()
[17:42:54.974]     ...future.conditions <- base::list()
[17:42:54.974]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:54.974]     if (FALSE) {
[17:42:54.974]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:54.974]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:54.974]     }
[17:42:54.974]     ...future.result <- base::tryCatch({
[17:42:54.974]         base::withCallingHandlers({
[17:42:54.974]             ...future.value <- base::withVisible(base::local({
[17:42:54.974]                 ...future.makeSendCondition <- local({
[17:42:54.974]                   sendCondition <- NULL
[17:42:54.974]                   function(frame = 1L) {
[17:42:54.974]                     if (is.function(sendCondition)) 
[17:42:54.974]                       return(sendCondition)
[17:42:54.974]                     ns <- getNamespace("parallel")
[17:42:54.974]                     if (exists("sendData", mode = "function", 
[17:42:54.974]                       envir = ns)) {
[17:42:54.974]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:54.974]                         envir = ns)
[17:42:54.974]                       envir <- sys.frame(frame)
[17:42:54.974]                       master <- NULL
[17:42:54.974]                       while (!identical(envir, .GlobalEnv) && 
[17:42:54.974]                         !identical(envir, emptyenv())) {
[17:42:54.974]                         if (exists("master", mode = "list", envir = envir, 
[17:42:54.974]                           inherits = FALSE)) {
[17:42:54.974]                           master <- get("master", mode = "list", 
[17:42:54.974]                             envir = envir, inherits = FALSE)
[17:42:54.974]                           if (inherits(master, c("SOCKnode", 
[17:42:54.974]                             "SOCK0node"))) {
[17:42:54.974]                             sendCondition <<- function(cond) {
[17:42:54.974]                               data <- list(type = "VALUE", value = cond, 
[17:42:54.974]                                 success = TRUE)
[17:42:54.974]                               parallel_sendData(master, data)
[17:42:54.974]                             }
[17:42:54.974]                             return(sendCondition)
[17:42:54.974]                           }
[17:42:54.974]                         }
[17:42:54.974]                         frame <- frame + 1L
[17:42:54.974]                         envir <- sys.frame(frame)
[17:42:54.974]                       }
[17:42:54.974]                     }
[17:42:54.974]                     sendCondition <<- function(cond) NULL
[17:42:54.974]                   }
[17:42:54.974]                 })
[17:42:54.974]                 withCallingHandlers({
[17:42:54.974]                   {
[17:42:54.974]                     f1$owner
[17:42:54.974]                   }
[17:42:54.974]                 }, immediateCondition = function(cond) {
[17:42:54.974]                   sendCondition <- ...future.makeSendCondition()
[17:42:54.974]                   sendCondition(cond)
[17:42:54.974]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.974]                   {
[17:42:54.974]                     inherits <- base::inherits
[17:42:54.974]                     invokeRestart <- base::invokeRestart
[17:42:54.974]                     is.null <- base::is.null
[17:42:54.974]                     muffled <- FALSE
[17:42:54.974]                     if (inherits(cond, "message")) {
[17:42:54.974]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:54.974]                       if (muffled) 
[17:42:54.974]                         invokeRestart("muffleMessage")
[17:42:54.974]                     }
[17:42:54.974]                     else if (inherits(cond, "warning")) {
[17:42:54.974]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:54.974]                       if (muffled) 
[17:42:54.974]                         invokeRestart("muffleWarning")
[17:42:54.974]                     }
[17:42:54.974]                     else if (inherits(cond, "condition")) {
[17:42:54.974]                       if (!is.null(pattern)) {
[17:42:54.974]                         computeRestarts <- base::computeRestarts
[17:42:54.974]                         grepl <- base::grepl
[17:42:54.974]                         restarts <- computeRestarts(cond)
[17:42:54.974]                         for (restart in restarts) {
[17:42:54.974]                           name <- restart$name
[17:42:54.974]                           if (is.null(name)) 
[17:42:54.974]                             next
[17:42:54.974]                           if (!grepl(pattern, name)) 
[17:42:54.974]                             next
[17:42:54.974]                           invokeRestart(restart)
[17:42:54.974]                           muffled <- TRUE
[17:42:54.974]                           break
[17:42:54.974]                         }
[17:42:54.974]                       }
[17:42:54.974]                     }
[17:42:54.974]                     invisible(muffled)
[17:42:54.974]                   }
[17:42:54.974]                   muffleCondition(cond)
[17:42:54.974]                 })
[17:42:54.974]             }))
[17:42:54.974]             future::FutureResult(value = ...future.value$value, 
[17:42:54.974]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.974]                   ...future.rng), globalenv = if (FALSE) 
[17:42:54.974]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:54.974]                     ...future.globalenv.names))
[17:42:54.974]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:54.974]         }, condition = base::local({
[17:42:54.974]             c <- base::c
[17:42:54.974]             inherits <- base::inherits
[17:42:54.974]             invokeRestart <- base::invokeRestart
[17:42:54.974]             length <- base::length
[17:42:54.974]             list <- base::list
[17:42:54.974]             seq.int <- base::seq.int
[17:42:54.974]             signalCondition <- base::signalCondition
[17:42:54.974]             sys.calls <- base::sys.calls
[17:42:54.974]             `[[` <- base::`[[`
[17:42:54.974]             `+` <- base::`+`
[17:42:54.974]             `<<-` <- base::`<<-`
[17:42:54.974]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:54.974]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:54.974]                   3L)]
[17:42:54.974]             }
[17:42:54.974]             function(cond) {
[17:42:54.974]                 is_error <- inherits(cond, "error")
[17:42:54.974]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:54.974]                   NULL)
[17:42:54.974]                 if (is_error) {
[17:42:54.974]                   sessionInformation <- function() {
[17:42:54.974]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:54.974]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:54.974]                       search = base::search(), system = base::Sys.info())
[17:42:54.974]                   }
[17:42:54.974]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.974]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:54.974]                     cond$call), session = sessionInformation(), 
[17:42:54.974]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:54.974]                   signalCondition(cond)
[17:42:54.974]                 }
[17:42:54.974]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:54.974]                 "immediateCondition"))) {
[17:42:54.974]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:54.974]                   ...future.conditions[[length(...future.conditions) + 
[17:42:54.974]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:54.974]                   if (TRUE && !signal) {
[17:42:54.974]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.974]                     {
[17:42:54.974]                       inherits <- base::inherits
[17:42:54.974]                       invokeRestart <- base::invokeRestart
[17:42:54.974]                       is.null <- base::is.null
[17:42:54.974]                       muffled <- FALSE
[17:42:54.974]                       if (inherits(cond, "message")) {
[17:42:54.974]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.974]                         if (muffled) 
[17:42:54.974]                           invokeRestart("muffleMessage")
[17:42:54.974]                       }
[17:42:54.974]                       else if (inherits(cond, "warning")) {
[17:42:54.974]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.974]                         if (muffled) 
[17:42:54.974]                           invokeRestart("muffleWarning")
[17:42:54.974]                       }
[17:42:54.974]                       else if (inherits(cond, "condition")) {
[17:42:54.974]                         if (!is.null(pattern)) {
[17:42:54.974]                           computeRestarts <- base::computeRestarts
[17:42:54.974]                           grepl <- base::grepl
[17:42:54.974]                           restarts <- computeRestarts(cond)
[17:42:54.974]                           for (restart in restarts) {
[17:42:54.974]                             name <- restart$name
[17:42:54.974]                             if (is.null(name)) 
[17:42:54.974]                               next
[17:42:54.974]                             if (!grepl(pattern, name)) 
[17:42:54.974]                               next
[17:42:54.974]                             invokeRestart(restart)
[17:42:54.974]                             muffled <- TRUE
[17:42:54.974]                             break
[17:42:54.974]                           }
[17:42:54.974]                         }
[17:42:54.974]                       }
[17:42:54.974]                       invisible(muffled)
[17:42:54.974]                     }
[17:42:54.974]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.974]                   }
[17:42:54.974]                 }
[17:42:54.974]                 else {
[17:42:54.974]                   if (TRUE) {
[17:42:54.974]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:54.974]                     {
[17:42:54.974]                       inherits <- base::inherits
[17:42:54.974]                       invokeRestart <- base::invokeRestart
[17:42:54.974]                       is.null <- base::is.null
[17:42:54.974]                       muffled <- FALSE
[17:42:54.974]                       if (inherits(cond, "message")) {
[17:42:54.974]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:54.974]                         if (muffled) 
[17:42:54.974]                           invokeRestart("muffleMessage")
[17:42:54.974]                       }
[17:42:54.974]                       else if (inherits(cond, "warning")) {
[17:42:54.974]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:54.974]                         if (muffled) 
[17:42:54.974]                           invokeRestart("muffleWarning")
[17:42:54.974]                       }
[17:42:54.974]                       else if (inherits(cond, "condition")) {
[17:42:54.974]                         if (!is.null(pattern)) {
[17:42:54.974]                           computeRestarts <- base::computeRestarts
[17:42:54.974]                           grepl <- base::grepl
[17:42:54.974]                           restarts <- computeRestarts(cond)
[17:42:54.974]                           for (restart in restarts) {
[17:42:54.974]                             name <- restart$name
[17:42:54.974]                             if (is.null(name)) 
[17:42:54.974]                               next
[17:42:54.974]                             if (!grepl(pattern, name)) 
[17:42:54.974]                               next
[17:42:54.974]                             invokeRestart(restart)
[17:42:54.974]                             muffled <- TRUE
[17:42:54.974]                             break
[17:42:54.974]                           }
[17:42:54.974]                         }
[17:42:54.974]                       }
[17:42:54.974]                       invisible(muffled)
[17:42:54.974]                     }
[17:42:54.974]                     muffleCondition(cond, pattern = "^muffle")
[17:42:54.974]                   }
[17:42:54.974]                 }
[17:42:54.974]             }
[17:42:54.974]         }))
[17:42:54.974]     }, error = function(ex) {
[17:42:54.974]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:54.974]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:54.974]                 ...future.rng), started = ...future.startTime, 
[17:42:54.974]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:54.974]             version = "1.8"), class = "FutureResult")
[17:42:54.974]     }, finally = {
[17:42:54.974]         if (!identical(...future.workdir, getwd())) 
[17:42:54.974]             setwd(...future.workdir)
[17:42:54.974]         {
[17:42:54.974]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:54.974]                 ...future.oldOptions$nwarnings <- NULL
[17:42:54.974]             }
[17:42:54.974]             base::options(...future.oldOptions)
[17:42:54.974]             if (.Platform$OS.type == "windows") {
[17:42:54.974]                 old_names <- names(...future.oldEnvVars)
[17:42:54.974]                 envs <- base::Sys.getenv()
[17:42:54.974]                 names <- names(envs)
[17:42:54.974]                 common <- intersect(names, old_names)
[17:42:54.974]                 added <- setdiff(names, old_names)
[17:42:54.974]                 removed <- setdiff(old_names, names)
[17:42:54.974]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:54.974]                   envs[common]]
[17:42:54.974]                 NAMES <- toupper(changed)
[17:42:54.974]                 args <- list()
[17:42:54.974]                 for (kk in seq_along(NAMES)) {
[17:42:54.974]                   name <- changed[[kk]]
[17:42:54.974]                   NAME <- NAMES[[kk]]
[17:42:54.974]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.974]                     next
[17:42:54.974]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.974]                 }
[17:42:54.974]                 NAMES <- toupper(added)
[17:42:54.974]                 for (kk in seq_along(NAMES)) {
[17:42:54.974]                   name <- added[[kk]]
[17:42:54.974]                   NAME <- NAMES[[kk]]
[17:42:54.974]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.974]                     next
[17:42:54.974]                   args[[name]] <- ""
[17:42:54.974]                 }
[17:42:54.974]                 NAMES <- toupper(removed)
[17:42:54.974]                 for (kk in seq_along(NAMES)) {
[17:42:54.974]                   name <- removed[[kk]]
[17:42:54.974]                   NAME <- NAMES[[kk]]
[17:42:54.974]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:54.974]                     next
[17:42:54.974]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:54.974]                 }
[17:42:54.974]                 if (length(args) > 0) 
[17:42:54.974]                   base::do.call(base::Sys.setenv, args = args)
[17:42:54.974]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:54.974]             }
[17:42:54.974]             else {
[17:42:54.974]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:54.974]             }
[17:42:54.974]             {
[17:42:54.974]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:54.974]                   0L) {
[17:42:54.974]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:54.974]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:54.974]                   base::options(opts)
[17:42:54.974]                 }
[17:42:54.974]                 {
[17:42:54.974]                   {
[17:42:54.974]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:54.974]                     NULL
[17:42:54.974]                   }
[17:42:54.974]                   options(future.plan = NULL)
[17:42:54.974]                   if (is.na(NA_character_)) 
[17:42:54.974]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:54.974]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:54.974]                   future::plan(list(function (..., workers = 2L, 
[17:42:54.974]                     envir = parent.frame()) 
[17:42:54.974]                   strategy(..., workers = workers, envir = envir)), 
[17:42:54.974]                     .cleanup = FALSE, .init = FALSE)
[17:42:54.974]                 }
[17:42:54.974]             }
[17:42:54.974]         }
[17:42:54.974]     })
[17:42:54.974]     if (TRUE) {
[17:42:54.974]         base::sink(type = "output", split = FALSE)
[17:42:54.974]         if (TRUE) {
[17:42:54.974]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:54.974]         }
[17:42:54.974]         else {
[17:42:54.974]             ...future.result["stdout"] <- base::list(NULL)
[17:42:54.974]         }
[17:42:54.974]         base::close(...future.stdout)
[17:42:54.974]         ...future.stdout <- NULL
[17:42:54.974]     }
[17:42:54.974]     ...future.result$conditions <- ...future.conditions
[17:42:54.974]     ...future.result$finished <- base::Sys.time()
[17:42:54.974]     ...future.result
[17:42:54.974] }
[17:42:54.977] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[17:42:54.979] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[17:42:55.031] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[17:42:55.032] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[17:42:55.033] MultisessionFuture started
[17:42:55.033] - Launch lazy future ... done
[17:42:55.033] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[17:42:55.033] result() for ClusterFuture ...
[17:42:55.033] receiveMessageFromWorker() for ClusterFuture ...
[17:42:55.033] - Validating connection of MultisessionFuture
[17:42:55.077] - received message: FutureResult
[17:42:55.077] - Received FutureResult
[17:42:55.077] - Erased future from FutureRegistry
[17:42:55.077] result() for ClusterFuture ...
[17:42:55.077] - result already collected: FutureResult
[17:42:55.078] result() for ClusterFuture ... done
[17:42:55.078] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:55.078] result() for ClusterFuture ... done
[17:42:55.078] result() for ClusterFuture ...
[17:42:55.078] - result already collected: FutureResult
[17:42:55.078] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 7219efae-a013-4b01-5d9b-b6bdda65803e
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[17:42:55.078] getGlobalsAndPackages() ...
[17:42:55.078] Searching for globals...
[17:42:55.079] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:42:55.079] Searching for globals ... DONE
[17:42:55.080] Resolving globals: FALSE
[17:42:55.082] The total size of the 1 globals is 1.54 MiB (1614440 bytes)
[17:42:55.082] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[17:42:55.082] - globals: [1] ‘f1’
[17:42:55.082] 
[17:42:55.082] getGlobalsAndPackages() ... DONE
[17:42:55.083] run() for ‘Future’ ...
[17:42:55.083] - state: ‘created’
[17:42:55.083] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:55.095] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:55.095] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:55.095]   - Field: ‘node’
[17:42:55.095]   - Field: ‘label’
[17:42:55.095]   - Field: ‘local’
[17:42:55.095]   - Field: ‘owner’
[17:42:55.095]   - Field: ‘envir’
[17:42:55.095]   - Field: ‘workers’
[17:42:55.095]   - Field: ‘packages’
[17:42:55.095]   - Field: ‘gc’
[17:42:55.096]   - Field: ‘conditions’
[17:42:55.096]   - Field: ‘persistent’
[17:42:55.096]   - Field: ‘expr’
[17:42:55.096]   - Field: ‘uuid’
[17:42:55.096]   - Field: ‘seed’
[17:42:55.096]   - Field: ‘version’
[17:42:55.096]   - Field: ‘result’
[17:42:55.096]   - Field: ‘asynchronous’
[17:42:55.096]   - Field: ‘calls’
[17:42:55.096]   - Field: ‘globals’
[17:42:55.097]   - Field: ‘stdout’
[17:42:55.097]   - Field: ‘earlySignal’
[17:42:55.097]   - Field: ‘lazy’
[17:42:55.097]   - Field: ‘state’
[17:42:55.097] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:55.097] - Launch lazy future ...
[17:42:55.097] Packages needed by the future expression (n = 0): <none>
[17:42:55.097] Packages needed by future strategies (n = 0): <none>
[17:42:55.098] {
[17:42:55.098]     {
[17:42:55.098]         {
[17:42:55.098]             ...future.startTime <- base::Sys.time()
[17:42:55.098]             {
[17:42:55.098]                 {
[17:42:55.098]                   {
[17:42:55.098]                     {
[17:42:55.098]                       base::local({
[17:42:55.098]                         has_future <- base::requireNamespace("future", 
[17:42:55.098]                           quietly = TRUE)
[17:42:55.098]                         if (has_future) {
[17:42:55.098]                           ns <- base::getNamespace("future")
[17:42:55.098]                           version <- ns[[".package"]][["version"]]
[17:42:55.098]                           if (is.null(version)) 
[17:42:55.098]                             version <- utils::packageVersion("future")
[17:42:55.098]                         }
[17:42:55.098]                         else {
[17:42:55.098]                           version <- NULL
[17:42:55.098]                         }
[17:42:55.098]                         if (!has_future || version < "1.8.0") {
[17:42:55.098]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:55.098]                             "", base::R.version$version.string), 
[17:42:55.098]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:55.098]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:55.098]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:55.098]                               "release", "version")], collapse = " "), 
[17:42:55.098]                             hostname = base::Sys.info()[["nodename"]])
[17:42:55.098]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:55.098]                             info)
[17:42:55.098]                           info <- base::paste(info, collapse = "; ")
[17:42:55.098]                           if (!has_future) {
[17:42:55.098]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:55.098]                               info)
[17:42:55.098]                           }
[17:42:55.098]                           else {
[17:42:55.098]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:55.098]                               info, version)
[17:42:55.098]                           }
[17:42:55.098]                           base::stop(msg)
[17:42:55.098]                         }
[17:42:55.098]                       })
[17:42:55.098]                     }
[17:42:55.098]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:55.098]                     base::options(mc.cores = 1L)
[17:42:55.098]                   }
[17:42:55.098]                   options(future.plan = NULL)
[17:42:55.098]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.098]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:55.098]                 }
[17:42:55.098]                 ...future.workdir <- getwd()
[17:42:55.098]             }
[17:42:55.098]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:55.098]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:55.098]         }
[17:42:55.098]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:55.098]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:55.098]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:55.098]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:55.098]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:55.098]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:55.098]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:55.098]             base::names(...future.oldOptions))
[17:42:55.098]     }
[17:42:55.098]     if (FALSE) {
[17:42:55.098]     }
[17:42:55.098]     else {
[17:42:55.098]         if (TRUE) {
[17:42:55.098]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:55.098]                 open = "w")
[17:42:55.098]         }
[17:42:55.098]         else {
[17:42:55.098]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:55.098]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:55.098]         }
[17:42:55.098]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:55.098]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:55.098]             base::sink(type = "output", split = FALSE)
[17:42:55.098]             base::close(...future.stdout)
[17:42:55.098]         }, add = TRUE)
[17:42:55.098]     }
[17:42:55.098]     ...future.frame <- base::sys.nframe()
[17:42:55.098]     ...future.conditions <- base::list()
[17:42:55.098]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:55.098]     if (FALSE) {
[17:42:55.098]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:55.098]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:55.098]     }
[17:42:55.098]     ...future.result <- base::tryCatch({
[17:42:55.098]         base::withCallingHandlers({
[17:42:55.098]             ...future.value <- base::withVisible(base::local({
[17:42:55.098]                 ...future.makeSendCondition <- local({
[17:42:55.098]                   sendCondition <- NULL
[17:42:55.098]                   function(frame = 1L) {
[17:42:55.098]                     if (is.function(sendCondition)) 
[17:42:55.098]                       return(sendCondition)
[17:42:55.098]                     ns <- getNamespace("parallel")
[17:42:55.098]                     if (exists("sendData", mode = "function", 
[17:42:55.098]                       envir = ns)) {
[17:42:55.098]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:55.098]                         envir = ns)
[17:42:55.098]                       envir <- sys.frame(frame)
[17:42:55.098]                       master <- NULL
[17:42:55.098]                       while (!identical(envir, .GlobalEnv) && 
[17:42:55.098]                         !identical(envir, emptyenv())) {
[17:42:55.098]                         if (exists("master", mode = "list", envir = envir, 
[17:42:55.098]                           inherits = FALSE)) {
[17:42:55.098]                           master <- get("master", mode = "list", 
[17:42:55.098]                             envir = envir, inherits = FALSE)
[17:42:55.098]                           if (inherits(master, c("SOCKnode", 
[17:42:55.098]                             "SOCK0node"))) {
[17:42:55.098]                             sendCondition <<- function(cond) {
[17:42:55.098]                               data <- list(type = "VALUE", value = cond, 
[17:42:55.098]                                 success = TRUE)
[17:42:55.098]                               parallel_sendData(master, data)
[17:42:55.098]                             }
[17:42:55.098]                             return(sendCondition)
[17:42:55.098]                           }
[17:42:55.098]                         }
[17:42:55.098]                         frame <- frame + 1L
[17:42:55.098]                         envir <- sys.frame(frame)
[17:42:55.098]                       }
[17:42:55.098]                     }
[17:42:55.098]                     sendCondition <<- function(cond) NULL
[17:42:55.098]                   }
[17:42:55.098]                 })
[17:42:55.098]                 withCallingHandlers({
[17:42:55.098]                   {
[17:42:55.098]                     f1$owner
[17:42:55.098]                   }
[17:42:55.098]                 }, immediateCondition = function(cond) {
[17:42:55.098]                   sendCondition <- ...future.makeSendCondition()
[17:42:55.098]                   sendCondition(cond)
[17:42:55.098]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.098]                   {
[17:42:55.098]                     inherits <- base::inherits
[17:42:55.098]                     invokeRestart <- base::invokeRestart
[17:42:55.098]                     is.null <- base::is.null
[17:42:55.098]                     muffled <- FALSE
[17:42:55.098]                     if (inherits(cond, "message")) {
[17:42:55.098]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:55.098]                       if (muffled) 
[17:42:55.098]                         invokeRestart("muffleMessage")
[17:42:55.098]                     }
[17:42:55.098]                     else if (inherits(cond, "warning")) {
[17:42:55.098]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:55.098]                       if (muffled) 
[17:42:55.098]                         invokeRestart("muffleWarning")
[17:42:55.098]                     }
[17:42:55.098]                     else if (inherits(cond, "condition")) {
[17:42:55.098]                       if (!is.null(pattern)) {
[17:42:55.098]                         computeRestarts <- base::computeRestarts
[17:42:55.098]                         grepl <- base::grepl
[17:42:55.098]                         restarts <- computeRestarts(cond)
[17:42:55.098]                         for (restart in restarts) {
[17:42:55.098]                           name <- restart$name
[17:42:55.098]                           if (is.null(name)) 
[17:42:55.098]                             next
[17:42:55.098]                           if (!grepl(pattern, name)) 
[17:42:55.098]                             next
[17:42:55.098]                           invokeRestart(restart)
[17:42:55.098]                           muffled <- TRUE
[17:42:55.098]                           break
[17:42:55.098]                         }
[17:42:55.098]                       }
[17:42:55.098]                     }
[17:42:55.098]                     invisible(muffled)
[17:42:55.098]                   }
[17:42:55.098]                   muffleCondition(cond)
[17:42:55.098]                 })
[17:42:55.098]             }))
[17:42:55.098]             future::FutureResult(value = ...future.value$value, 
[17:42:55.098]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.098]                   ...future.rng), globalenv = if (FALSE) 
[17:42:55.098]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:55.098]                     ...future.globalenv.names))
[17:42:55.098]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:55.098]         }, condition = base::local({
[17:42:55.098]             c <- base::c
[17:42:55.098]             inherits <- base::inherits
[17:42:55.098]             invokeRestart <- base::invokeRestart
[17:42:55.098]             length <- base::length
[17:42:55.098]             list <- base::list
[17:42:55.098]             seq.int <- base::seq.int
[17:42:55.098]             signalCondition <- base::signalCondition
[17:42:55.098]             sys.calls <- base::sys.calls
[17:42:55.098]             `[[` <- base::`[[`
[17:42:55.098]             `+` <- base::`+`
[17:42:55.098]             `<<-` <- base::`<<-`
[17:42:55.098]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:55.098]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:55.098]                   3L)]
[17:42:55.098]             }
[17:42:55.098]             function(cond) {
[17:42:55.098]                 is_error <- inherits(cond, "error")
[17:42:55.098]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:55.098]                   NULL)
[17:42:55.098]                 if (is_error) {
[17:42:55.098]                   sessionInformation <- function() {
[17:42:55.098]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:55.098]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:55.098]                       search = base::search(), system = base::Sys.info())
[17:42:55.098]                   }
[17:42:55.098]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.098]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:55.098]                     cond$call), session = sessionInformation(), 
[17:42:55.098]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:55.098]                   signalCondition(cond)
[17:42:55.098]                 }
[17:42:55.098]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:55.098]                 "immediateCondition"))) {
[17:42:55.098]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:55.098]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.098]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:55.098]                   if (TRUE && !signal) {
[17:42:55.098]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.098]                     {
[17:42:55.098]                       inherits <- base::inherits
[17:42:55.098]                       invokeRestart <- base::invokeRestart
[17:42:55.098]                       is.null <- base::is.null
[17:42:55.098]                       muffled <- FALSE
[17:42:55.098]                       if (inherits(cond, "message")) {
[17:42:55.098]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.098]                         if (muffled) 
[17:42:55.098]                           invokeRestart("muffleMessage")
[17:42:55.098]                       }
[17:42:55.098]                       else if (inherits(cond, "warning")) {
[17:42:55.098]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.098]                         if (muffled) 
[17:42:55.098]                           invokeRestart("muffleWarning")
[17:42:55.098]                       }
[17:42:55.098]                       else if (inherits(cond, "condition")) {
[17:42:55.098]                         if (!is.null(pattern)) {
[17:42:55.098]                           computeRestarts <- base::computeRestarts
[17:42:55.098]                           grepl <- base::grepl
[17:42:55.098]                           restarts <- computeRestarts(cond)
[17:42:55.098]                           for (restart in restarts) {
[17:42:55.098]                             name <- restart$name
[17:42:55.098]                             if (is.null(name)) 
[17:42:55.098]                               next
[17:42:55.098]                             if (!grepl(pattern, name)) 
[17:42:55.098]                               next
[17:42:55.098]                             invokeRestart(restart)
[17:42:55.098]                             muffled <- TRUE
[17:42:55.098]                             break
[17:42:55.098]                           }
[17:42:55.098]                         }
[17:42:55.098]                       }
[17:42:55.098]                       invisible(muffled)
[17:42:55.098]                     }
[17:42:55.098]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.098]                   }
[17:42:55.098]                 }
[17:42:55.098]                 else {
[17:42:55.098]                   if (TRUE) {
[17:42:55.098]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.098]                     {
[17:42:55.098]                       inherits <- base::inherits
[17:42:55.098]                       invokeRestart <- base::invokeRestart
[17:42:55.098]                       is.null <- base::is.null
[17:42:55.098]                       muffled <- FALSE
[17:42:55.098]                       if (inherits(cond, "message")) {
[17:42:55.098]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.098]                         if (muffled) 
[17:42:55.098]                           invokeRestart("muffleMessage")
[17:42:55.098]                       }
[17:42:55.098]                       else if (inherits(cond, "warning")) {
[17:42:55.098]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.098]                         if (muffled) 
[17:42:55.098]                           invokeRestart("muffleWarning")
[17:42:55.098]                       }
[17:42:55.098]                       else if (inherits(cond, "condition")) {
[17:42:55.098]                         if (!is.null(pattern)) {
[17:42:55.098]                           computeRestarts <- base::computeRestarts
[17:42:55.098]                           grepl <- base::grepl
[17:42:55.098]                           restarts <- computeRestarts(cond)
[17:42:55.098]                           for (restart in restarts) {
[17:42:55.098]                             name <- restart$name
[17:42:55.098]                             if (is.null(name)) 
[17:42:55.098]                               next
[17:42:55.098]                             if (!grepl(pattern, name)) 
[17:42:55.098]                               next
[17:42:55.098]                             invokeRestart(restart)
[17:42:55.098]                             muffled <- TRUE
[17:42:55.098]                             break
[17:42:55.098]                           }
[17:42:55.098]                         }
[17:42:55.098]                       }
[17:42:55.098]                       invisible(muffled)
[17:42:55.098]                     }
[17:42:55.098]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.098]                   }
[17:42:55.098]                 }
[17:42:55.098]             }
[17:42:55.098]         }))
[17:42:55.098]     }, error = function(ex) {
[17:42:55.098]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:55.098]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.098]                 ...future.rng), started = ...future.startTime, 
[17:42:55.098]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:55.098]             version = "1.8"), class = "FutureResult")
[17:42:55.098]     }, finally = {
[17:42:55.098]         if (!identical(...future.workdir, getwd())) 
[17:42:55.098]             setwd(...future.workdir)
[17:42:55.098]         {
[17:42:55.098]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:55.098]                 ...future.oldOptions$nwarnings <- NULL
[17:42:55.098]             }
[17:42:55.098]             base::options(...future.oldOptions)
[17:42:55.098]             if (.Platform$OS.type == "windows") {
[17:42:55.098]                 old_names <- names(...future.oldEnvVars)
[17:42:55.098]                 envs <- base::Sys.getenv()
[17:42:55.098]                 names <- names(envs)
[17:42:55.098]                 common <- intersect(names, old_names)
[17:42:55.098]                 added <- setdiff(names, old_names)
[17:42:55.098]                 removed <- setdiff(old_names, names)
[17:42:55.098]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:55.098]                   envs[common]]
[17:42:55.098]                 NAMES <- toupper(changed)
[17:42:55.098]                 args <- list()
[17:42:55.098]                 for (kk in seq_along(NAMES)) {
[17:42:55.098]                   name <- changed[[kk]]
[17:42:55.098]                   NAME <- NAMES[[kk]]
[17:42:55.098]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.098]                     next
[17:42:55.098]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.098]                 }
[17:42:55.098]                 NAMES <- toupper(added)
[17:42:55.098]                 for (kk in seq_along(NAMES)) {
[17:42:55.098]                   name <- added[[kk]]
[17:42:55.098]                   NAME <- NAMES[[kk]]
[17:42:55.098]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.098]                     next
[17:42:55.098]                   args[[name]] <- ""
[17:42:55.098]                 }
[17:42:55.098]                 NAMES <- toupper(removed)
[17:42:55.098]                 for (kk in seq_along(NAMES)) {
[17:42:55.098]                   name <- removed[[kk]]
[17:42:55.098]                   NAME <- NAMES[[kk]]
[17:42:55.098]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.098]                     next
[17:42:55.098]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.098]                 }
[17:42:55.098]                 if (length(args) > 0) 
[17:42:55.098]                   base::do.call(base::Sys.setenv, args = args)
[17:42:55.098]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:55.098]             }
[17:42:55.098]             else {
[17:42:55.098]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:55.098]             }
[17:42:55.098]             {
[17:42:55.098]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:55.098]                   0L) {
[17:42:55.098]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:55.098]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:55.098]                   base::options(opts)
[17:42:55.098]                 }
[17:42:55.098]                 {
[17:42:55.098]                   {
[17:42:55.098]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:55.098]                     NULL
[17:42:55.098]                   }
[17:42:55.098]                   options(future.plan = NULL)
[17:42:55.098]                   if (is.na(NA_character_)) 
[17:42:55.098]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.098]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:55.098]                   future::plan(list(function (..., workers = 2L, 
[17:42:55.098]                     envir = parent.frame()) 
[17:42:55.098]                   strategy(..., workers = workers, envir = envir)), 
[17:42:55.098]                     .cleanup = FALSE, .init = FALSE)
[17:42:55.098]                 }
[17:42:55.098]             }
[17:42:55.098]         }
[17:42:55.098]     })
[17:42:55.098]     if (TRUE) {
[17:42:55.098]         base::sink(type = "output", split = FALSE)
[17:42:55.098]         if (TRUE) {
[17:42:55.098]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:55.098]         }
[17:42:55.098]         else {
[17:42:55.098]             ...future.result["stdout"] <- base::list(NULL)
[17:42:55.098]         }
[17:42:55.098]         base::close(...future.stdout)
[17:42:55.098]         ...future.stdout <- NULL
[17:42:55.098]     }
[17:42:55.098]     ...future.result$conditions <- ...future.conditions
[17:42:55.098]     ...future.result$finished <- base::Sys.time()
[17:42:55.098]     ...future.result
[17:42:55.098] }
[17:42:55.101] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[17:42:55.103] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[17:42:55.155] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[17:42:55.155] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[17:42:55.156] MultisessionFuture started
[17:42:55.156] - Launch lazy future ... done
[17:42:55.156] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[17:42:55.156] result() for ClusterFuture ...
[17:42:55.157] receiveMessageFromWorker() for ClusterFuture ...
[17:42:55.157] - Validating connection of MultisessionFuture
[17:42:55.201] - received message: FutureResult
[17:42:55.201] - Received FutureResult
[17:42:55.201] - Erased future from FutureRegistry
[17:42:55.202] result() for ClusterFuture ...
[17:42:55.202] - result already collected: FutureResult
[17:42:55.202] result() for ClusterFuture ... done
[17:42:55.202] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:55.202] result() for ClusterFuture ... done
[17:42:55.202] result() for ClusterFuture ...
[17:42:55.202] - result already collected: FutureResult
[17:42:55.202] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 7219efae-a013-4b01-5d9b-b6bdda65803e
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[17:42:55.203] getGlobalsAndPackages() ...
[17:42:55.203] Searching for globals...
[17:42:55.204] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[17:42:55.204] Searching for globals ... DONE
[17:42:55.204] Resolving globals: FALSE
[17:42:55.207] The total size of the 1 globals is 1.54 MiB (1617376 bytes)
[17:42:55.207] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.54 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.54 MiB of class ‘environment’)
[17:42:55.207] - globals: [1] ‘f1’
[17:42:55.207] 
[17:42:55.208] getGlobalsAndPackages() ... DONE
[17:42:55.208] run() for ‘Future’ ...
[17:42:55.208] - state: ‘created’
[17:42:55.208] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:55.219] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:55.219] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:55.219]   - Field: ‘node’
[17:42:55.219]   - Field: ‘label’
[17:42:55.220]   - Field: ‘local’
[17:42:55.220]   - Field: ‘owner’
[17:42:55.220]   - Field: ‘envir’
[17:42:55.220]   - Field: ‘workers’
[17:42:55.220]   - Field: ‘packages’
[17:42:55.220]   - Field: ‘gc’
[17:42:55.220]   - Field: ‘conditions’
[17:42:55.220]   - Field: ‘persistent’
[17:42:55.220]   - Field: ‘expr’
[17:42:55.220]   - Field: ‘uuid’
[17:42:55.220]   - Field: ‘seed’
[17:42:55.221]   - Field: ‘version’
[17:42:55.221]   - Field: ‘result’
[17:42:55.221]   - Field: ‘asynchronous’
[17:42:55.221]   - Field: ‘calls’
[17:42:55.221]   - Field: ‘globals’
[17:42:55.221]   - Field: ‘stdout’
[17:42:55.221]   - Field: ‘earlySignal’
[17:42:55.221]   - Field: ‘lazy’
[17:42:55.221]   - Field: ‘state’
[17:42:55.221] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:55.221] - Launch lazy future ...
[17:42:55.222] Packages needed by the future expression (n = 0): <none>
[17:42:55.222] Packages needed by future strategies (n = 0): <none>
[17:42:55.222] {
[17:42:55.222]     {
[17:42:55.222]         {
[17:42:55.222]             ...future.startTime <- base::Sys.time()
[17:42:55.222]             {
[17:42:55.222]                 {
[17:42:55.222]                   {
[17:42:55.222]                     {
[17:42:55.222]                       base::local({
[17:42:55.222]                         has_future <- base::requireNamespace("future", 
[17:42:55.222]                           quietly = TRUE)
[17:42:55.222]                         if (has_future) {
[17:42:55.222]                           ns <- base::getNamespace("future")
[17:42:55.222]                           version <- ns[[".package"]][["version"]]
[17:42:55.222]                           if (is.null(version)) 
[17:42:55.222]                             version <- utils::packageVersion("future")
[17:42:55.222]                         }
[17:42:55.222]                         else {
[17:42:55.222]                           version <- NULL
[17:42:55.222]                         }
[17:42:55.222]                         if (!has_future || version < "1.8.0") {
[17:42:55.222]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:55.222]                             "", base::R.version$version.string), 
[17:42:55.222]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:55.222]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:55.222]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:55.222]                               "release", "version")], collapse = " "), 
[17:42:55.222]                             hostname = base::Sys.info()[["nodename"]])
[17:42:55.222]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:55.222]                             info)
[17:42:55.222]                           info <- base::paste(info, collapse = "; ")
[17:42:55.222]                           if (!has_future) {
[17:42:55.222]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:55.222]                               info)
[17:42:55.222]                           }
[17:42:55.222]                           else {
[17:42:55.222]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:55.222]                               info, version)
[17:42:55.222]                           }
[17:42:55.222]                           base::stop(msg)
[17:42:55.222]                         }
[17:42:55.222]                       })
[17:42:55.222]                     }
[17:42:55.222]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:55.222]                     base::options(mc.cores = 1L)
[17:42:55.222]                   }
[17:42:55.222]                   options(future.plan = NULL)
[17:42:55.222]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.222]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:55.222]                 }
[17:42:55.222]                 ...future.workdir <- getwd()
[17:42:55.222]             }
[17:42:55.222]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:55.222]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:55.222]         }
[17:42:55.222]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:55.222]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:55.222]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:55.222]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:55.222]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:55.222]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:55.222]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:55.222]             base::names(...future.oldOptions))
[17:42:55.222]     }
[17:42:55.222]     if (FALSE) {
[17:42:55.222]     }
[17:42:55.222]     else {
[17:42:55.222]         if (TRUE) {
[17:42:55.222]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:55.222]                 open = "w")
[17:42:55.222]         }
[17:42:55.222]         else {
[17:42:55.222]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:55.222]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:55.222]         }
[17:42:55.222]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:55.222]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:55.222]             base::sink(type = "output", split = FALSE)
[17:42:55.222]             base::close(...future.stdout)
[17:42:55.222]         }, add = TRUE)
[17:42:55.222]     }
[17:42:55.222]     ...future.frame <- base::sys.nframe()
[17:42:55.222]     ...future.conditions <- base::list()
[17:42:55.222]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:55.222]     if (FALSE) {
[17:42:55.222]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:55.222]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:55.222]     }
[17:42:55.222]     ...future.result <- base::tryCatch({
[17:42:55.222]         base::withCallingHandlers({
[17:42:55.222]             ...future.value <- base::withVisible(base::local({
[17:42:55.222]                 ...future.makeSendCondition <- local({
[17:42:55.222]                   sendCondition <- NULL
[17:42:55.222]                   function(frame = 1L) {
[17:42:55.222]                     if (is.function(sendCondition)) 
[17:42:55.222]                       return(sendCondition)
[17:42:55.222]                     ns <- getNamespace("parallel")
[17:42:55.222]                     if (exists("sendData", mode = "function", 
[17:42:55.222]                       envir = ns)) {
[17:42:55.222]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:55.222]                         envir = ns)
[17:42:55.222]                       envir <- sys.frame(frame)
[17:42:55.222]                       master <- NULL
[17:42:55.222]                       while (!identical(envir, .GlobalEnv) && 
[17:42:55.222]                         !identical(envir, emptyenv())) {
[17:42:55.222]                         if (exists("master", mode = "list", envir = envir, 
[17:42:55.222]                           inherits = FALSE)) {
[17:42:55.222]                           master <- get("master", mode = "list", 
[17:42:55.222]                             envir = envir, inherits = FALSE)
[17:42:55.222]                           if (inherits(master, c("SOCKnode", 
[17:42:55.222]                             "SOCK0node"))) {
[17:42:55.222]                             sendCondition <<- function(cond) {
[17:42:55.222]                               data <- list(type = "VALUE", value = cond, 
[17:42:55.222]                                 success = TRUE)
[17:42:55.222]                               parallel_sendData(master, data)
[17:42:55.222]                             }
[17:42:55.222]                             return(sendCondition)
[17:42:55.222]                           }
[17:42:55.222]                         }
[17:42:55.222]                         frame <- frame + 1L
[17:42:55.222]                         envir <- sys.frame(frame)
[17:42:55.222]                       }
[17:42:55.222]                     }
[17:42:55.222]                     sendCondition <<- function(cond) NULL
[17:42:55.222]                   }
[17:42:55.222]                 })
[17:42:55.222]                 withCallingHandlers({
[17:42:55.222]                   {
[17:42:55.222]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[17:42:55.222]                     "not-owner"
[17:42:55.222]                   }
[17:42:55.222]                 }, immediateCondition = function(cond) {
[17:42:55.222]                   sendCondition <- ...future.makeSendCondition()
[17:42:55.222]                   sendCondition(cond)
[17:42:55.222]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.222]                   {
[17:42:55.222]                     inherits <- base::inherits
[17:42:55.222]                     invokeRestart <- base::invokeRestart
[17:42:55.222]                     is.null <- base::is.null
[17:42:55.222]                     muffled <- FALSE
[17:42:55.222]                     if (inherits(cond, "message")) {
[17:42:55.222]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:55.222]                       if (muffled) 
[17:42:55.222]                         invokeRestart("muffleMessage")
[17:42:55.222]                     }
[17:42:55.222]                     else if (inherits(cond, "warning")) {
[17:42:55.222]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:55.222]                       if (muffled) 
[17:42:55.222]                         invokeRestart("muffleWarning")
[17:42:55.222]                     }
[17:42:55.222]                     else if (inherits(cond, "condition")) {
[17:42:55.222]                       if (!is.null(pattern)) {
[17:42:55.222]                         computeRestarts <- base::computeRestarts
[17:42:55.222]                         grepl <- base::grepl
[17:42:55.222]                         restarts <- computeRestarts(cond)
[17:42:55.222]                         for (restart in restarts) {
[17:42:55.222]                           name <- restart$name
[17:42:55.222]                           if (is.null(name)) 
[17:42:55.222]                             next
[17:42:55.222]                           if (!grepl(pattern, name)) 
[17:42:55.222]                             next
[17:42:55.222]                           invokeRestart(restart)
[17:42:55.222]                           muffled <- TRUE
[17:42:55.222]                           break
[17:42:55.222]                         }
[17:42:55.222]                       }
[17:42:55.222]                     }
[17:42:55.222]                     invisible(muffled)
[17:42:55.222]                   }
[17:42:55.222]                   muffleCondition(cond)
[17:42:55.222]                 })
[17:42:55.222]             }))
[17:42:55.222]             future::FutureResult(value = ...future.value$value, 
[17:42:55.222]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.222]                   ...future.rng), globalenv = if (FALSE) 
[17:42:55.222]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:55.222]                     ...future.globalenv.names))
[17:42:55.222]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:55.222]         }, condition = base::local({
[17:42:55.222]             c <- base::c
[17:42:55.222]             inherits <- base::inherits
[17:42:55.222]             invokeRestart <- base::invokeRestart
[17:42:55.222]             length <- base::length
[17:42:55.222]             list <- base::list
[17:42:55.222]             seq.int <- base::seq.int
[17:42:55.222]             signalCondition <- base::signalCondition
[17:42:55.222]             sys.calls <- base::sys.calls
[17:42:55.222]             `[[` <- base::`[[`
[17:42:55.222]             `+` <- base::`+`
[17:42:55.222]             `<<-` <- base::`<<-`
[17:42:55.222]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:55.222]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:55.222]                   3L)]
[17:42:55.222]             }
[17:42:55.222]             function(cond) {
[17:42:55.222]                 is_error <- inherits(cond, "error")
[17:42:55.222]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:55.222]                   NULL)
[17:42:55.222]                 if (is_error) {
[17:42:55.222]                   sessionInformation <- function() {
[17:42:55.222]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:55.222]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:55.222]                       search = base::search(), system = base::Sys.info())
[17:42:55.222]                   }
[17:42:55.222]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.222]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:55.222]                     cond$call), session = sessionInformation(), 
[17:42:55.222]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:55.222]                   signalCondition(cond)
[17:42:55.222]                 }
[17:42:55.222]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:55.222]                 "immediateCondition"))) {
[17:42:55.222]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:55.222]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.222]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:55.222]                   if (TRUE && !signal) {
[17:42:55.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.222]                     {
[17:42:55.222]                       inherits <- base::inherits
[17:42:55.222]                       invokeRestart <- base::invokeRestart
[17:42:55.222]                       is.null <- base::is.null
[17:42:55.222]                       muffled <- FALSE
[17:42:55.222]                       if (inherits(cond, "message")) {
[17:42:55.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.222]                         if (muffled) 
[17:42:55.222]                           invokeRestart("muffleMessage")
[17:42:55.222]                       }
[17:42:55.222]                       else if (inherits(cond, "warning")) {
[17:42:55.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.222]                         if (muffled) 
[17:42:55.222]                           invokeRestart("muffleWarning")
[17:42:55.222]                       }
[17:42:55.222]                       else if (inherits(cond, "condition")) {
[17:42:55.222]                         if (!is.null(pattern)) {
[17:42:55.222]                           computeRestarts <- base::computeRestarts
[17:42:55.222]                           grepl <- base::grepl
[17:42:55.222]                           restarts <- computeRestarts(cond)
[17:42:55.222]                           for (restart in restarts) {
[17:42:55.222]                             name <- restart$name
[17:42:55.222]                             if (is.null(name)) 
[17:42:55.222]                               next
[17:42:55.222]                             if (!grepl(pattern, name)) 
[17:42:55.222]                               next
[17:42:55.222]                             invokeRestart(restart)
[17:42:55.222]                             muffled <- TRUE
[17:42:55.222]                             break
[17:42:55.222]                           }
[17:42:55.222]                         }
[17:42:55.222]                       }
[17:42:55.222]                       invisible(muffled)
[17:42:55.222]                     }
[17:42:55.222]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.222]                   }
[17:42:55.222]                 }
[17:42:55.222]                 else {
[17:42:55.222]                   if (TRUE) {
[17:42:55.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.222]                     {
[17:42:55.222]                       inherits <- base::inherits
[17:42:55.222]                       invokeRestart <- base::invokeRestart
[17:42:55.222]                       is.null <- base::is.null
[17:42:55.222]                       muffled <- FALSE
[17:42:55.222]                       if (inherits(cond, "message")) {
[17:42:55.222]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.222]                         if (muffled) 
[17:42:55.222]                           invokeRestart("muffleMessage")
[17:42:55.222]                       }
[17:42:55.222]                       else if (inherits(cond, "warning")) {
[17:42:55.222]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.222]                         if (muffled) 
[17:42:55.222]                           invokeRestart("muffleWarning")
[17:42:55.222]                       }
[17:42:55.222]                       else if (inherits(cond, "condition")) {
[17:42:55.222]                         if (!is.null(pattern)) {
[17:42:55.222]                           computeRestarts <- base::computeRestarts
[17:42:55.222]                           grepl <- base::grepl
[17:42:55.222]                           restarts <- computeRestarts(cond)
[17:42:55.222]                           for (restart in restarts) {
[17:42:55.222]                             name <- restart$name
[17:42:55.222]                             if (is.null(name)) 
[17:42:55.222]                               next
[17:42:55.222]                             if (!grepl(pattern, name)) 
[17:42:55.222]                               next
[17:42:55.222]                             invokeRestart(restart)
[17:42:55.222]                             muffled <- TRUE
[17:42:55.222]                             break
[17:42:55.222]                           }
[17:42:55.222]                         }
[17:42:55.222]                       }
[17:42:55.222]                       invisible(muffled)
[17:42:55.222]                     }
[17:42:55.222]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.222]                   }
[17:42:55.222]                 }
[17:42:55.222]             }
[17:42:55.222]         }))
[17:42:55.222]     }, error = function(ex) {
[17:42:55.222]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:55.222]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.222]                 ...future.rng), started = ...future.startTime, 
[17:42:55.222]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:55.222]             version = "1.8"), class = "FutureResult")
[17:42:55.222]     }, finally = {
[17:42:55.222]         if (!identical(...future.workdir, getwd())) 
[17:42:55.222]             setwd(...future.workdir)
[17:42:55.222]         {
[17:42:55.222]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:55.222]                 ...future.oldOptions$nwarnings <- NULL
[17:42:55.222]             }
[17:42:55.222]             base::options(...future.oldOptions)
[17:42:55.222]             if (.Platform$OS.type == "windows") {
[17:42:55.222]                 old_names <- names(...future.oldEnvVars)
[17:42:55.222]                 envs <- base::Sys.getenv()
[17:42:55.222]                 names <- names(envs)
[17:42:55.222]                 common <- intersect(names, old_names)
[17:42:55.222]                 added <- setdiff(names, old_names)
[17:42:55.222]                 removed <- setdiff(old_names, names)
[17:42:55.222]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:55.222]                   envs[common]]
[17:42:55.222]                 NAMES <- toupper(changed)
[17:42:55.222]                 args <- list()
[17:42:55.222]                 for (kk in seq_along(NAMES)) {
[17:42:55.222]                   name <- changed[[kk]]
[17:42:55.222]                   NAME <- NAMES[[kk]]
[17:42:55.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.222]                     next
[17:42:55.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.222]                 }
[17:42:55.222]                 NAMES <- toupper(added)
[17:42:55.222]                 for (kk in seq_along(NAMES)) {
[17:42:55.222]                   name <- added[[kk]]
[17:42:55.222]                   NAME <- NAMES[[kk]]
[17:42:55.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.222]                     next
[17:42:55.222]                   args[[name]] <- ""
[17:42:55.222]                 }
[17:42:55.222]                 NAMES <- toupper(removed)
[17:42:55.222]                 for (kk in seq_along(NAMES)) {
[17:42:55.222]                   name <- removed[[kk]]
[17:42:55.222]                   NAME <- NAMES[[kk]]
[17:42:55.222]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.222]                     next
[17:42:55.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.222]                 }
[17:42:55.222]                 if (length(args) > 0) 
[17:42:55.222]                   base::do.call(base::Sys.setenv, args = args)
[17:42:55.222]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:55.222]             }
[17:42:55.222]             else {
[17:42:55.222]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:55.222]             }
[17:42:55.222]             {
[17:42:55.222]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:55.222]                   0L) {
[17:42:55.222]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:55.222]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:55.222]                   base::options(opts)
[17:42:55.222]                 }
[17:42:55.222]                 {
[17:42:55.222]                   {
[17:42:55.222]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:55.222]                     NULL
[17:42:55.222]                   }
[17:42:55.222]                   options(future.plan = NULL)
[17:42:55.222]                   if (is.na(NA_character_)) 
[17:42:55.222]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.222]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:55.222]                   future::plan(list(function (..., workers = 2L, 
[17:42:55.222]                     envir = parent.frame()) 
[17:42:55.222]                   strategy(..., workers = workers, envir = envir)), 
[17:42:55.222]                     .cleanup = FALSE, .init = FALSE)
[17:42:55.222]                 }
[17:42:55.222]             }
[17:42:55.222]         }
[17:42:55.222]     })
[17:42:55.222]     if (TRUE) {
[17:42:55.222]         base::sink(type = "output", split = FALSE)
[17:42:55.222]         if (TRUE) {
[17:42:55.222]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:55.222]         }
[17:42:55.222]         else {
[17:42:55.222]             ...future.result["stdout"] <- base::list(NULL)
[17:42:55.222]         }
[17:42:55.222]         base::close(...future.stdout)
[17:42:55.222]         ...future.stdout <- NULL
[17:42:55.222]     }
[17:42:55.222]     ...future.result$conditions <- ...future.conditions
[17:42:55.222]     ...future.result$finished <- base::Sys.time()
[17:42:55.222]     ...future.result
[17:42:55.222] }
[17:42:55.225] Exporting 1 global objects (1.54 MiB) to cluster node #1 ...
[17:42:55.229] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ...
[17:42:55.283] Exporting ‘f1’ (1.54 MiB) to cluster node #1 ... DONE
[17:42:55.283] Exporting 1 global objects (1.54 MiB) to cluster node #1 ... DONE
[17:42:55.284] MultisessionFuture started
[17:42:55.284] - Launch lazy future ... done
[17:42:55.284] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[17:42:55.285] result() for ClusterFuture ...
[17:42:55.285] receiveMessageFromWorker() for ClusterFuture ...
[17:42:55.285] - Validating connection of MultisessionFuture
[17:42:55.329] - received message: FutureResult
[17:42:55.329] - Received FutureResult
[17:42:55.329] - Erased future from FutureRegistry
[17:42:55.329] result() for ClusterFuture ...
[17:42:55.330] - result already collected: FutureResult
[17:42:55.330] result() for ClusterFuture ... done
[17:42:55.330] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:55.330] result() for ClusterFuture ... done
[17:42:55.330] result() for ClusterFuture ...
[17:42:55.330] - result already collected: FutureResult
[17:42:55.330] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[17:42:55.331] getGlobalsAndPackages() ...
[17:42:55.331] Searching for globals...
[17:42:55.331] - globals found: [1] ‘{’
[17:42:55.331] Searching for globals ... DONE
[17:42:55.332] Resolving globals: FALSE
[17:42:55.332] 
[17:42:55.332] 
[17:42:55.332] getGlobalsAndPackages() ... DONE
[17:42:55.332] run() for ‘Future’ ...
[17:42:55.332] - state: ‘created’
[17:42:55.333] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:55.344] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:55.344] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:55.344]   - Field: ‘node’
[17:42:55.344]   - Field: ‘label’
[17:42:55.344]   - Field: ‘local’
[17:42:55.344]   - Field: ‘owner’
[17:42:55.344]   - Field: ‘envir’
[17:42:55.345]   - Field: ‘workers’
[17:42:55.345]   - Field: ‘packages’
[17:42:55.345]   - Field: ‘gc’
[17:42:55.345]   - Field: ‘conditions’
[17:42:55.345]   - Field: ‘persistent’
[17:42:55.345]   - Field: ‘expr’
[17:42:55.345]   - Field: ‘uuid’
[17:42:55.345]   - Field: ‘seed’
[17:42:55.345]   - Field: ‘version’
[17:42:55.345]   - Field: ‘result’
[17:42:55.345]   - Field: ‘asynchronous’
[17:42:55.346]   - Field: ‘calls’
[17:42:55.346]   - Field: ‘globals’
[17:42:55.346]   - Field: ‘stdout’
[17:42:55.346]   - Field: ‘earlySignal’
[17:42:55.346]   - Field: ‘lazy’
[17:42:55.346]   - Field: ‘state’
[17:42:55.346] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:55.346] - Launch lazy future ...
[17:42:55.346] Packages needed by the future expression (n = 0): <none>
[17:42:55.347] Packages needed by future strategies (n = 0): <none>
[17:42:55.347] {
[17:42:55.347]     {
[17:42:55.347]         {
[17:42:55.347]             ...future.startTime <- base::Sys.time()
[17:42:55.347]             {
[17:42:55.347]                 {
[17:42:55.347]                   {
[17:42:55.347]                     {
[17:42:55.347]                       base::local({
[17:42:55.347]                         has_future <- base::requireNamespace("future", 
[17:42:55.347]                           quietly = TRUE)
[17:42:55.347]                         if (has_future) {
[17:42:55.347]                           ns <- base::getNamespace("future")
[17:42:55.347]                           version <- ns[[".package"]][["version"]]
[17:42:55.347]                           if (is.null(version)) 
[17:42:55.347]                             version <- utils::packageVersion("future")
[17:42:55.347]                         }
[17:42:55.347]                         else {
[17:42:55.347]                           version <- NULL
[17:42:55.347]                         }
[17:42:55.347]                         if (!has_future || version < "1.8.0") {
[17:42:55.347]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:55.347]                             "", base::R.version$version.string), 
[17:42:55.347]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:55.347]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:55.347]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:55.347]                               "release", "version")], collapse = " "), 
[17:42:55.347]                             hostname = base::Sys.info()[["nodename"]])
[17:42:55.347]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:55.347]                             info)
[17:42:55.347]                           info <- base::paste(info, collapse = "; ")
[17:42:55.347]                           if (!has_future) {
[17:42:55.347]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:55.347]                               info)
[17:42:55.347]                           }
[17:42:55.347]                           else {
[17:42:55.347]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:55.347]                               info, version)
[17:42:55.347]                           }
[17:42:55.347]                           base::stop(msg)
[17:42:55.347]                         }
[17:42:55.347]                       })
[17:42:55.347]                     }
[17:42:55.347]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:55.347]                     base::options(mc.cores = 1L)
[17:42:55.347]                   }
[17:42:55.347]                   options(future.plan = NULL)
[17:42:55.347]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.347]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:55.347]                 }
[17:42:55.347]                 ...future.workdir <- getwd()
[17:42:55.347]             }
[17:42:55.347]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:55.347]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:55.347]         }
[17:42:55.347]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:55.347]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:55.347]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:55.347]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:55.347]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:55.347]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:55.347]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:55.347]             base::names(...future.oldOptions))
[17:42:55.347]     }
[17:42:55.347]     if (FALSE) {
[17:42:55.347]     }
[17:42:55.347]     else {
[17:42:55.347]         if (TRUE) {
[17:42:55.347]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:55.347]                 open = "w")
[17:42:55.347]         }
[17:42:55.347]         else {
[17:42:55.347]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:55.347]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:55.347]         }
[17:42:55.347]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:55.347]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:55.347]             base::sink(type = "output", split = FALSE)
[17:42:55.347]             base::close(...future.stdout)
[17:42:55.347]         }, add = TRUE)
[17:42:55.347]     }
[17:42:55.347]     ...future.frame <- base::sys.nframe()
[17:42:55.347]     ...future.conditions <- base::list()
[17:42:55.347]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:55.347]     if (FALSE) {
[17:42:55.347]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:55.347]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:55.347]     }
[17:42:55.347]     ...future.result <- base::tryCatch({
[17:42:55.347]         base::withCallingHandlers({
[17:42:55.347]             ...future.value <- base::withVisible(base::local({
[17:42:55.347]                 ...future.makeSendCondition <- local({
[17:42:55.347]                   sendCondition <- NULL
[17:42:55.347]                   function(frame = 1L) {
[17:42:55.347]                     if (is.function(sendCondition)) 
[17:42:55.347]                       return(sendCondition)
[17:42:55.347]                     ns <- getNamespace("parallel")
[17:42:55.347]                     if (exists("sendData", mode = "function", 
[17:42:55.347]                       envir = ns)) {
[17:42:55.347]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:55.347]                         envir = ns)
[17:42:55.347]                       envir <- sys.frame(frame)
[17:42:55.347]                       master <- NULL
[17:42:55.347]                       while (!identical(envir, .GlobalEnv) && 
[17:42:55.347]                         !identical(envir, emptyenv())) {
[17:42:55.347]                         if (exists("master", mode = "list", envir = envir, 
[17:42:55.347]                           inherits = FALSE)) {
[17:42:55.347]                           master <- get("master", mode = "list", 
[17:42:55.347]                             envir = envir, inherits = FALSE)
[17:42:55.347]                           if (inherits(master, c("SOCKnode", 
[17:42:55.347]                             "SOCK0node"))) {
[17:42:55.347]                             sendCondition <<- function(cond) {
[17:42:55.347]                               data <- list(type = "VALUE", value = cond, 
[17:42:55.347]                                 success = TRUE)
[17:42:55.347]                               parallel_sendData(master, data)
[17:42:55.347]                             }
[17:42:55.347]                             return(sendCondition)
[17:42:55.347]                           }
[17:42:55.347]                         }
[17:42:55.347]                         frame <- frame + 1L
[17:42:55.347]                         envir <- sys.frame(frame)
[17:42:55.347]                       }
[17:42:55.347]                     }
[17:42:55.347]                     sendCondition <<- function(cond) NULL
[17:42:55.347]                   }
[17:42:55.347]                 })
[17:42:55.347]                 withCallingHandlers({
[17:42:55.347]                   {
[17:42:55.347]                     42L
[17:42:55.347]                   }
[17:42:55.347]                 }, immediateCondition = function(cond) {
[17:42:55.347]                   sendCondition <- ...future.makeSendCondition()
[17:42:55.347]                   sendCondition(cond)
[17:42:55.347]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.347]                   {
[17:42:55.347]                     inherits <- base::inherits
[17:42:55.347]                     invokeRestart <- base::invokeRestart
[17:42:55.347]                     is.null <- base::is.null
[17:42:55.347]                     muffled <- FALSE
[17:42:55.347]                     if (inherits(cond, "message")) {
[17:42:55.347]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:55.347]                       if (muffled) 
[17:42:55.347]                         invokeRestart("muffleMessage")
[17:42:55.347]                     }
[17:42:55.347]                     else if (inherits(cond, "warning")) {
[17:42:55.347]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:55.347]                       if (muffled) 
[17:42:55.347]                         invokeRestart("muffleWarning")
[17:42:55.347]                     }
[17:42:55.347]                     else if (inherits(cond, "condition")) {
[17:42:55.347]                       if (!is.null(pattern)) {
[17:42:55.347]                         computeRestarts <- base::computeRestarts
[17:42:55.347]                         grepl <- base::grepl
[17:42:55.347]                         restarts <- computeRestarts(cond)
[17:42:55.347]                         for (restart in restarts) {
[17:42:55.347]                           name <- restart$name
[17:42:55.347]                           if (is.null(name)) 
[17:42:55.347]                             next
[17:42:55.347]                           if (!grepl(pattern, name)) 
[17:42:55.347]                             next
[17:42:55.347]                           invokeRestart(restart)
[17:42:55.347]                           muffled <- TRUE
[17:42:55.347]                           break
[17:42:55.347]                         }
[17:42:55.347]                       }
[17:42:55.347]                     }
[17:42:55.347]                     invisible(muffled)
[17:42:55.347]                   }
[17:42:55.347]                   muffleCondition(cond)
[17:42:55.347]                 })
[17:42:55.347]             }))
[17:42:55.347]             future::FutureResult(value = ...future.value$value, 
[17:42:55.347]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.347]                   ...future.rng), globalenv = if (FALSE) 
[17:42:55.347]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:55.347]                     ...future.globalenv.names))
[17:42:55.347]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:55.347]         }, condition = base::local({
[17:42:55.347]             c <- base::c
[17:42:55.347]             inherits <- base::inherits
[17:42:55.347]             invokeRestart <- base::invokeRestart
[17:42:55.347]             length <- base::length
[17:42:55.347]             list <- base::list
[17:42:55.347]             seq.int <- base::seq.int
[17:42:55.347]             signalCondition <- base::signalCondition
[17:42:55.347]             sys.calls <- base::sys.calls
[17:42:55.347]             `[[` <- base::`[[`
[17:42:55.347]             `+` <- base::`+`
[17:42:55.347]             `<<-` <- base::`<<-`
[17:42:55.347]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:55.347]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:55.347]                   3L)]
[17:42:55.347]             }
[17:42:55.347]             function(cond) {
[17:42:55.347]                 is_error <- inherits(cond, "error")
[17:42:55.347]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:55.347]                   NULL)
[17:42:55.347]                 if (is_error) {
[17:42:55.347]                   sessionInformation <- function() {
[17:42:55.347]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:55.347]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:55.347]                       search = base::search(), system = base::Sys.info())
[17:42:55.347]                   }
[17:42:55.347]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.347]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:55.347]                     cond$call), session = sessionInformation(), 
[17:42:55.347]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:55.347]                   signalCondition(cond)
[17:42:55.347]                 }
[17:42:55.347]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:55.347]                 "immediateCondition"))) {
[17:42:55.347]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:55.347]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.347]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:55.347]                   if (TRUE && !signal) {
[17:42:55.347]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.347]                     {
[17:42:55.347]                       inherits <- base::inherits
[17:42:55.347]                       invokeRestart <- base::invokeRestart
[17:42:55.347]                       is.null <- base::is.null
[17:42:55.347]                       muffled <- FALSE
[17:42:55.347]                       if (inherits(cond, "message")) {
[17:42:55.347]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.347]                         if (muffled) 
[17:42:55.347]                           invokeRestart("muffleMessage")
[17:42:55.347]                       }
[17:42:55.347]                       else if (inherits(cond, "warning")) {
[17:42:55.347]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.347]                         if (muffled) 
[17:42:55.347]                           invokeRestart("muffleWarning")
[17:42:55.347]                       }
[17:42:55.347]                       else if (inherits(cond, "condition")) {
[17:42:55.347]                         if (!is.null(pattern)) {
[17:42:55.347]                           computeRestarts <- base::computeRestarts
[17:42:55.347]                           grepl <- base::grepl
[17:42:55.347]                           restarts <- computeRestarts(cond)
[17:42:55.347]                           for (restart in restarts) {
[17:42:55.347]                             name <- restart$name
[17:42:55.347]                             if (is.null(name)) 
[17:42:55.347]                               next
[17:42:55.347]                             if (!grepl(pattern, name)) 
[17:42:55.347]                               next
[17:42:55.347]                             invokeRestart(restart)
[17:42:55.347]                             muffled <- TRUE
[17:42:55.347]                             break
[17:42:55.347]                           }
[17:42:55.347]                         }
[17:42:55.347]                       }
[17:42:55.347]                       invisible(muffled)
[17:42:55.347]                     }
[17:42:55.347]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.347]                   }
[17:42:55.347]                 }
[17:42:55.347]                 else {
[17:42:55.347]                   if (TRUE) {
[17:42:55.347]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.347]                     {
[17:42:55.347]                       inherits <- base::inherits
[17:42:55.347]                       invokeRestart <- base::invokeRestart
[17:42:55.347]                       is.null <- base::is.null
[17:42:55.347]                       muffled <- FALSE
[17:42:55.347]                       if (inherits(cond, "message")) {
[17:42:55.347]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.347]                         if (muffled) 
[17:42:55.347]                           invokeRestart("muffleMessage")
[17:42:55.347]                       }
[17:42:55.347]                       else if (inherits(cond, "warning")) {
[17:42:55.347]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.347]                         if (muffled) 
[17:42:55.347]                           invokeRestart("muffleWarning")
[17:42:55.347]                       }
[17:42:55.347]                       else if (inherits(cond, "condition")) {
[17:42:55.347]                         if (!is.null(pattern)) {
[17:42:55.347]                           computeRestarts <- base::computeRestarts
[17:42:55.347]                           grepl <- base::grepl
[17:42:55.347]                           restarts <- computeRestarts(cond)
[17:42:55.347]                           for (restart in restarts) {
[17:42:55.347]                             name <- restart$name
[17:42:55.347]                             if (is.null(name)) 
[17:42:55.347]                               next
[17:42:55.347]                             if (!grepl(pattern, name)) 
[17:42:55.347]                               next
[17:42:55.347]                             invokeRestart(restart)
[17:42:55.347]                             muffled <- TRUE
[17:42:55.347]                             break
[17:42:55.347]                           }
[17:42:55.347]                         }
[17:42:55.347]                       }
[17:42:55.347]                       invisible(muffled)
[17:42:55.347]                     }
[17:42:55.347]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.347]                   }
[17:42:55.347]                 }
[17:42:55.347]             }
[17:42:55.347]         }))
[17:42:55.347]     }, error = function(ex) {
[17:42:55.347]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:55.347]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.347]                 ...future.rng), started = ...future.startTime, 
[17:42:55.347]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:55.347]             version = "1.8"), class = "FutureResult")
[17:42:55.347]     }, finally = {
[17:42:55.347]         if (!identical(...future.workdir, getwd())) 
[17:42:55.347]             setwd(...future.workdir)
[17:42:55.347]         {
[17:42:55.347]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:55.347]                 ...future.oldOptions$nwarnings <- NULL
[17:42:55.347]             }
[17:42:55.347]             base::options(...future.oldOptions)
[17:42:55.347]             if (.Platform$OS.type == "windows") {
[17:42:55.347]                 old_names <- names(...future.oldEnvVars)
[17:42:55.347]                 envs <- base::Sys.getenv()
[17:42:55.347]                 names <- names(envs)
[17:42:55.347]                 common <- intersect(names, old_names)
[17:42:55.347]                 added <- setdiff(names, old_names)
[17:42:55.347]                 removed <- setdiff(old_names, names)
[17:42:55.347]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:55.347]                   envs[common]]
[17:42:55.347]                 NAMES <- toupper(changed)
[17:42:55.347]                 args <- list()
[17:42:55.347]                 for (kk in seq_along(NAMES)) {
[17:42:55.347]                   name <- changed[[kk]]
[17:42:55.347]                   NAME <- NAMES[[kk]]
[17:42:55.347]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.347]                     next
[17:42:55.347]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.347]                 }
[17:42:55.347]                 NAMES <- toupper(added)
[17:42:55.347]                 for (kk in seq_along(NAMES)) {
[17:42:55.347]                   name <- added[[kk]]
[17:42:55.347]                   NAME <- NAMES[[kk]]
[17:42:55.347]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.347]                     next
[17:42:55.347]                   args[[name]] <- ""
[17:42:55.347]                 }
[17:42:55.347]                 NAMES <- toupper(removed)
[17:42:55.347]                 for (kk in seq_along(NAMES)) {
[17:42:55.347]                   name <- removed[[kk]]
[17:42:55.347]                   NAME <- NAMES[[kk]]
[17:42:55.347]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.347]                     next
[17:42:55.347]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.347]                 }
[17:42:55.347]                 if (length(args) > 0) 
[17:42:55.347]                   base::do.call(base::Sys.setenv, args = args)
[17:42:55.347]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:55.347]             }
[17:42:55.347]             else {
[17:42:55.347]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:55.347]             }
[17:42:55.347]             {
[17:42:55.347]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:55.347]                   0L) {
[17:42:55.347]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:55.347]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:55.347]                   base::options(opts)
[17:42:55.347]                 }
[17:42:55.347]                 {
[17:42:55.347]                   {
[17:42:55.347]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:55.347]                     NULL
[17:42:55.347]                   }
[17:42:55.347]                   options(future.plan = NULL)
[17:42:55.347]                   if (is.na(NA_character_)) 
[17:42:55.347]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.347]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:55.347]                   future::plan(list(function (..., workers = 2L, 
[17:42:55.347]                     envir = parent.frame()) 
[17:42:55.347]                   strategy(..., workers = workers, envir = envir)), 
[17:42:55.347]                     .cleanup = FALSE, .init = FALSE)
[17:42:55.347]                 }
[17:42:55.347]             }
[17:42:55.347]         }
[17:42:55.347]     })
[17:42:55.347]     if (TRUE) {
[17:42:55.347]         base::sink(type = "output", split = FALSE)
[17:42:55.347]         if (TRUE) {
[17:42:55.347]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:55.347]         }
[17:42:55.347]         else {
[17:42:55.347]             ...future.result["stdout"] <- base::list(NULL)
[17:42:55.347]         }
[17:42:55.347]         base::close(...future.stdout)
[17:42:55.347]         ...future.stdout <- NULL
[17:42:55.347]     }
[17:42:55.347]     ...future.result$conditions <- ...future.conditions
[17:42:55.347]     ...future.result$finished <- base::Sys.time()
[17:42:55.347]     ...future.result
[17:42:55.347] }
[17:42:55.350] MultisessionFuture started
[17:42:55.350] - Launch lazy future ... done
[17:42:55.350] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[17:42:55.351] getGlobalsAndPackages() ...
[17:42:55.351] Searching for globals...
[17:42:55.352] - globals found: [3] ‘{’, ‘value’, ‘f1’
[17:42:55.352] Searching for globals ... DONE
[17:42:55.352] Resolving globals: FALSE
[17:42:55.354] The total size of the 1 globals is 1.53 MiB (1609528 bytes)
[17:42:55.355] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.53 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.53 MiB of class ‘environment’)
[17:42:55.355] - globals: [1] ‘f1’
[17:42:55.355] - packages: [1] ‘future’
[17:42:55.355] getGlobalsAndPackages() ... DONE
[17:42:55.355] run() for ‘Future’ ...
[17:42:55.355] - state: ‘created’
[17:42:55.355] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:55.367] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:55.367] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:55.367]   - Field: ‘node’
[17:42:55.367]   - Field: ‘label’
[17:42:55.367]   - Field: ‘local’
[17:42:55.367]   - Field: ‘owner’
[17:42:55.367]   - Field: ‘envir’
[17:42:55.368]   - Field: ‘workers’
[17:42:55.368]   - Field: ‘packages’
[17:42:55.368]   - Field: ‘gc’
[17:42:55.368]   - Field: ‘conditions’
[17:42:55.368]   - Field: ‘persistent’
[17:42:55.368]   - Field: ‘expr’
[17:42:55.368]   - Field: ‘uuid’
[17:42:55.369]   - Field: ‘seed’
[17:42:55.369]   - Field: ‘version’
[17:42:55.369]   - Field: ‘result’
[17:42:55.369]   - Field: ‘asynchronous’
[17:42:55.369]   - Field: ‘calls’
[17:42:55.369]   - Field: ‘globals’
[17:42:55.369]   - Field: ‘stdout’
[17:42:55.369]   - Field: ‘earlySignal’
[17:42:55.369]   - Field: ‘lazy’
[17:42:55.369]   - Field: ‘state’
[17:42:55.369] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:55.370] - Launch lazy future ...
[17:42:55.370] Packages needed by the future expression (n = 1): ‘future’
[17:42:55.370] Packages needed by future strategies (n = 0): <none>
[17:42:55.370] {
[17:42:55.370]     {
[17:42:55.370]         {
[17:42:55.370]             ...future.startTime <- base::Sys.time()
[17:42:55.370]             {
[17:42:55.370]                 {
[17:42:55.370]                   {
[17:42:55.370]                     {
[17:42:55.370]                       {
[17:42:55.370]                         base::local({
[17:42:55.370]                           has_future <- base::requireNamespace("future", 
[17:42:55.370]                             quietly = TRUE)
[17:42:55.370]                           if (has_future) {
[17:42:55.370]                             ns <- base::getNamespace("future")
[17:42:55.370]                             version <- ns[[".package"]][["version"]]
[17:42:55.370]                             if (is.null(version)) 
[17:42:55.370]                               version <- utils::packageVersion("future")
[17:42:55.370]                           }
[17:42:55.370]                           else {
[17:42:55.370]                             version <- NULL
[17:42:55.370]                           }
[17:42:55.370]                           if (!has_future || version < "1.8.0") {
[17:42:55.370]                             info <- base::c(r_version = base::gsub("R version ", 
[17:42:55.370]                               "", base::R.version$version.string), 
[17:42:55.370]                               platform = base::sprintf("%s (%s-bit)", 
[17:42:55.370]                                 base::R.version$platform, 8 * 
[17:42:55.370]                                   base::.Machine$sizeof.pointer), 
[17:42:55.370]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:55.370]                                 "release", "version")], collapse = " "), 
[17:42:55.370]                               hostname = base::Sys.info()[["nodename"]])
[17:42:55.370]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:42:55.370]                               info)
[17:42:55.370]                             info <- base::paste(info, collapse = "; ")
[17:42:55.370]                             if (!has_future) {
[17:42:55.370]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:55.370]                                 info)
[17:42:55.370]                             }
[17:42:55.370]                             else {
[17:42:55.370]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:55.370]                                 info, version)
[17:42:55.370]                             }
[17:42:55.370]                             base::stop(msg)
[17:42:55.370]                           }
[17:42:55.370]                         })
[17:42:55.370]                       }
[17:42:55.370]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:55.370]                       base::options(mc.cores = 1L)
[17:42:55.370]                     }
[17:42:55.370]                     base::local({
[17:42:55.370]                       for (pkg in "future") {
[17:42:55.370]                         base::loadNamespace(pkg)
[17:42:55.370]                         base::library(pkg, character.only = TRUE)
[17:42:55.370]                       }
[17:42:55.370]                     })
[17:42:55.370]                   }
[17:42:55.370]                   options(future.plan = NULL)
[17:42:55.370]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.370]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:55.370]                 }
[17:42:55.370]                 ...future.workdir <- getwd()
[17:42:55.370]             }
[17:42:55.370]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:55.370]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:55.370]         }
[17:42:55.370]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:55.370]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:55.370]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:55.370]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:55.370]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:55.370]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:55.370]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:55.370]             base::names(...future.oldOptions))
[17:42:55.370]     }
[17:42:55.370]     if (FALSE) {
[17:42:55.370]     }
[17:42:55.370]     else {
[17:42:55.370]         if (TRUE) {
[17:42:55.370]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:55.370]                 open = "w")
[17:42:55.370]         }
[17:42:55.370]         else {
[17:42:55.370]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:55.370]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:55.370]         }
[17:42:55.370]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:55.370]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:55.370]             base::sink(type = "output", split = FALSE)
[17:42:55.370]             base::close(...future.stdout)
[17:42:55.370]         }, add = TRUE)
[17:42:55.370]     }
[17:42:55.370]     ...future.frame <- base::sys.nframe()
[17:42:55.370]     ...future.conditions <- base::list()
[17:42:55.370]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:55.370]     if (FALSE) {
[17:42:55.370]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:55.370]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:55.370]     }
[17:42:55.370]     ...future.result <- base::tryCatch({
[17:42:55.370]         base::withCallingHandlers({
[17:42:55.370]             ...future.value <- base::withVisible(base::local({
[17:42:55.370]                 ...future.makeSendCondition <- local({
[17:42:55.370]                   sendCondition <- NULL
[17:42:55.370]                   function(frame = 1L) {
[17:42:55.370]                     if (is.function(sendCondition)) 
[17:42:55.370]                       return(sendCondition)
[17:42:55.370]                     ns <- getNamespace("parallel")
[17:42:55.370]                     if (exists("sendData", mode = "function", 
[17:42:55.370]                       envir = ns)) {
[17:42:55.370]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:55.370]                         envir = ns)
[17:42:55.370]                       envir <- sys.frame(frame)
[17:42:55.370]                       master <- NULL
[17:42:55.370]                       while (!identical(envir, .GlobalEnv) && 
[17:42:55.370]                         !identical(envir, emptyenv())) {
[17:42:55.370]                         if (exists("master", mode = "list", envir = envir, 
[17:42:55.370]                           inherits = FALSE)) {
[17:42:55.370]                           master <- get("master", mode = "list", 
[17:42:55.370]                             envir = envir, inherits = FALSE)
[17:42:55.370]                           if (inherits(master, c("SOCKnode", 
[17:42:55.370]                             "SOCK0node"))) {
[17:42:55.370]                             sendCondition <<- function(cond) {
[17:42:55.370]                               data <- list(type = "VALUE", value = cond, 
[17:42:55.370]                                 success = TRUE)
[17:42:55.370]                               parallel_sendData(master, data)
[17:42:55.370]                             }
[17:42:55.370]                             return(sendCondition)
[17:42:55.370]                           }
[17:42:55.370]                         }
[17:42:55.370]                         frame <- frame + 1L
[17:42:55.370]                         envir <- sys.frame(frame)
[17:42:55.370]                       }
[17:42:55.370]                     }
[17:42:55.370]                     sendCondition <<- function(cond) NULL
[17:42:55.370]                   }
[17:42:55.370]                 })
[17:42:55.370]                 withCallingHandlers({
[17:42:55.370]                   {
[17:42:55.370]                     value(f1)
[17:42:55.370]                   }
[17:42:55.370]                 }, immediateCondition = function(cond) {
[17:42:55.370]                   sendCondition <- ...future.makeSendCondition()
[17:42:55.370]                   sendCondition(cond)
[17:42:55.370]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.370]                   {
[17:42:55.370]                     inherits <- base::inherits
[17:42:55.370]                     invokeRestart <- base::invokeRestart
[17:42:55.370]                     is.null <- base::is.null
[17:42:55.370]                     muffled <- FALSE
[17:42:55.370]                     if (inherits(cond, "message")) {
[17:42:55.370]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:55.370]                       if (muffled) 
[17:42:55.370]                         invokeRestart("muffleMessage")
[17:42:55.370]                     }
[17:42:55.370]                     else if (inherits(cond, "warning")) {
[17:42:55.370]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:55.370]                       if (muffled) 
[17:42:55.370]                         invokeRestart("muffleWarning")
[17:42:55.370]                     }
[17:42:55.370]                     else if (inherits(cond, "condition")) {
[17:42:55.370]                       if (!is.null(pattern)) {
[17:42:55.370]                         computeRestarts <- base::computeRestarts
[17:42:55.370]                         grepl <- base::grepl
[17:42:55.370]                         restarts <- computeRestarts(cond)
[17:42:55.370]                         for (restart in restarts) {
[17:42:55.370]                           name <- restart$name
[17:42:55.370]                           if (is.null(name)) 
[17:42:55.370]                             next
[17:42:55.370]                           if (!grepl(pattern, name)) 
[17:42:55.370]                             next
[17:42:55.370]                           invokeRestart(restart)
[17:42:55.370]                           muffled <- TRUE
[17:42:55.370]                           break
[17:42:55.370]                         }
[17:42:55.370]                       }
[17:42:55.370]                     }
[17:42:55.370]                     invisible(muffled)
[17:42:55.370]                   }
[17:42:55.370]                   muffleCondition(cond)
[17:42:55.370]                 })
[17:42:55.370]             }))
[17:42:55.370]             future::FutureResult(value = ...future.value$value, 
[17:42:55.370]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.370]                   ...future.rng), globalenv = if (FALSE) 
[17:42:55.370]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:55.370]                     ...future.globalenv.names))
[17:42:55.370]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:55.370]         }, condition = base::local({
[17:42:55.370]             c <- base::c
[17:42:55.370]             inherits <- base::inherits
[17:42:55.370]             invokeRestart <- base::invokeRestart
[17:42:55.370]             length <- base::length
[17:42:55.370]             list <- base::list
[17:42:55.370]             seq.int <- base::seq.int
[17:42:55.370]             signalCondition <- base::signalCondition
[17:42:55.370]             sys.calls <- base::sys.calls
[17:42:55.370]             `[[` <- base::`[[`
[17:42:55.370]             `+` <- base::`+`
[17:42:55.370]             `<<-` <- base::`<<-`
[17:42:55.370]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:55.370]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:55.370]                   3L)]
[17:42:55.370]             }
[17:42:55.370]             function(cond) {
[17:42:55.370]                 is_error <- inherits(cond, "error")
[17:42:55.370]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:55.370]                   NULL)
[17:42:55.370]                 if (is_error) {
[17:42:55.370]                   sessionInformation <- function() {
[17:42:55.370]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:55.370]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:55.370]                       search = base::search(), system = base::Sys.info())
[17:42:55.370]                   }
[17:42:55.370]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.370]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:55.370]                     cond$call), session = sessionInformation(), 
[17:42:55.370]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:55.370]                   signalCondition(cond)
[17:42:55.370]                 }
[17:42:55.370]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:55.370]                 "immediateCondition"))) {
[17:42:55.370]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:55.370]                   ...future.conditions[[length(...future.conditions) + 
[17:42:55.370]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:55.370]                   if (TRUE && !signal) {
[17:42:55.370]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.370]                     {
[17:42:55.370]                       inherits <- base::inherits
[17:42:55.370]                       invokeRestart <- base::invokeRestart
[17:42:55.370]                       is.null <- base::is.null
[17:42:55.370]                       muffled <- FALSE
[17:42:55.370]                       if (inherits(cond, "message")) {
[17:42:55.370]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.370]                         if (muffled) 
[17:42:55.370]                           invokeRestart("muffleMessage")
[17:42:55.370]                       }
[17:42:55.370]                       else if (inherits(cond, "warning")) {
[17:42:55.370]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.370]                         if (muffled) 
[17:42:55.370]                           invokeRestart("muffleWarning")
[17:42:55.370]                       }
[17:42:55.370]                       else if (inherits(cond, "condition")) {
[17:42:55.370]                         if (!is.null(pattern)) {
[17:42:55.370]                           computeRestarts <- base::computeRestarts
[17:42:55.370]                           grepl <- base::grepl
[17:42:55.370]                           restarts <- computeRestarts(cond)
[17:42:55.370]                           for (restart in restarts) {
[17:42:55.370]                             name <- restart$name
[17:42:55.370]                             if (is.null(name)) 
[17:42:55.370]                               next
[17:42:55.370]                             if (!grepl(pattern, name)) 
[17:42:55.370]                               next
[17:42:55.370]                             invokeRestart(restart)
[17:42:55.370]                             muffled <- TRUE
[17:42:55.370]                             break
[17:42:55.370]                           }
[17:42:55.370]                         }
[17:42:55.370]                       }
[17:42:55.370]                       invisible(muffled)
[17:42:55.370]                     }
[17:42:55.370]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.370]                   }
[17:42:55.370]                 }
[17:42:55.370]                 else {
[17:42:55.370]                   if (TRUE) {
[17:42:55.370]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:55.370]                     {
[17:42:55.370]                       inherits <- base::inherits
[17:42:55.370]                       invokeRestart <- base::invokeRestart
[17:42:55.370]                       is.null <- base::is.null
[17:42:55.370]                       muffled <- FALSE
[17:42:55.370]                       if (inherits(cond, "message")) {
[17:42:55.370]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:55.370]                         if (muffled) 
[17:42:55.370]                           invokeRestart("muffleMessage")
[17:42:55.370]                       }
[17:42:55.370]                       else if (inherits(cond, "warning")) {
[17:42:55.370]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:55.370]                         if (muffled) 
[17:42:55.370]                           invokeRestart("muffleWarning")
[17:42:55.370]                       }
[17:42:55.370]                       else if (inherits(cond, "condition")) {
[17:42:55.370]                         if (!is.null(pattern)) {
[17:42:55.370]                           computeRestarts <- base::computeRestarts
[17:42:55.370]                           grepl <- base::grepl
[17:42:55.370]                           restarts <- computeRestarts(cond)
[17:42:55.370]                           for (restart in restarts) {
[17:42:55.370]                             name <- restart$name
[17:42:55.370]                             if (is.null(name)) 
[17:42:55.370]                               next
[17:42:55.370]                             if (!grepl(pattern, name)) 
[17:42:55.370]                               next
[17:42:55.370]                             invokeRestart(restart)
[17:42:55.370]                             muffled <- TRUE
[17:42:55.370]                             break
[17:42:55.370]                           }
[17:42:55.370]                         }
[17:42:55.370]                       }
[17:42:55.370]                       invisible(muffled)
[17:42:55.370]                     }
[17:42:55.370]                     muffleCondition(cond, pattern = "^muffle")
[17:42:55.370]                   }
[17:42:55.370]                 }
[17:42:55.370]             }
[17:42:55.370]         }))
[17:42:55.370]     }, error = function(ex) {
[17:42:55.370]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:55.370]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:55.370]                 ...future.rng), started = ...future.startTime, 
[17:42:55.370]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:55.370]             version = "1.8"), class = "FutureResult")
[17:42:55.370]     }, finally = {
[17:42:55.370]         if (!identical(...future.workdir, getwd())) 
[17:42:55.370]             setwd(...future.workdir)
[17:42:55.370]         {
[17:42:55.370]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:55.370]                 ...future.oldOptions$nwarnings <- NULL
[17:42:55.370]             }
[17:42:55.370]             base::options(...future.oldOptions)
[17:42:55.370]             if (.Platform$OS.type == "windows") {
[17:42:55.370]                 old_names <- names(...future.oldEnvVars)
[17:42:55.370]                 envs <- base::Sys.getenv()
[17:42:55.370]                 names <- names(envs)
[17:42:55.370]                 common <- intersect(names, old_names)
[17:42:55.370]                 added <- setdiff(names, old_names)
[17:42:55.370]                 removed <- setdiff(old_names, names)
[17:42:55.370]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:55.370]                   envs[common]]
[17:42:55.370]                 NAMES <- toupper(changed)
[17:42:55.370]                 args <- list()
[17:42:55.370]                 for (kk in seq_along(NAMES)) {
[17:42:55.370]                   name <- changed[[kk]]
[17:42:55.370]                   NAME <- NAMES[[kk]]
[17:42:55.370]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.370]                     next
[17:42:55.370]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.370]                 }
[17:42:55.370]                 NAMES <- toupper(added)
[17:42:55.370]                 for (kk in seq_along(NAMES)) {
[17:42:55.370]                   name <- added[[kk]]
[17:42:55.370]                   NAME <- NAMES[[kk]]
[17:42:55.370]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.370]                     next
[17:42:55.370]                   args[[name]] <- ""
[17:42:55.370]                 }
[17:42:55.370]                 NAMES <- toupper(removed)
[17:42:55.370]                 for (kk in seq_along(NAMES)) {
[17:42:55.370]                   name <- removed[[kk]]
[17:42:55.370]                   NAME <- NAMES[[kk]]
[17:42:55.370]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:55.370]                     next
[17:42:55.370]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:55.370]                 }
[17:42:55.370]                 if (length(args) > 0) 
[17:42:55.370]                   base::do.call(base::Sys.setenv, args = args)
[17:42:55.370]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:55.370]             }
[17:42:55.370]             else {
[17:42:55.370]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:55.370]             }
[17:42:55.370]             {
[17:42:55.370]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:55.370]                   0L) {
[17:42:55.370]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:55.370]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:55.370]                   base::options(opts)
[17:42:55.370]                 }
[17:42:55.370]                 {
[17:42:55.370]                   {
[17:42:55.370]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:55.370]                     NULL
[17:42:55.370]                   }
[17:42:55.370]                   options(future.plan = NULL)
[17:42:55.370]                   if (is.na(NA_character_)) 
[17:42:55.370]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:55.370]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:55.370]                   future::plan(list(function (..., workers = 2L, 
[17:42:55.370]                     envir = parent.frame()) 
[17:42:55.370]                   strategy(..., workers = workers, envir = envir)), 
[17:42:55.370]                     .cleanup = FALSE, .init = FALSE)
[17:42:55.370]                 }
[17:42:55.370]             }
[17:42:55.370]         }
[17:42:55.370]     })
[17:42:55.370]     if (TRUE) {
[17:42:55.370]         base::sink(type = "output", split = FALSE)
[17:42:55.370]         if (TRUE) {
[17:42:55.370]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:55.370]         }
[17:42:55.370]         else {
[17:42:55.370]             ...future.result["stdout"] <- base::list(NULL)
[17:42:55.370]         }
[17:42:55.370]         base::close(...future.stdout)
[17:42:55.370]         ...future.stdout <- NULL
[17:42:55.370]     }
[17:42:55.370]     ...future.result$conditions <- ...future.conditions
[17:42:55.370]     ...future.result$finished <- base::Sys.time()
[17:42:55.370]     ...future.result
[17:42:55.370] }
[17:42:55.443] Exporting 1 global objects (1.53 MiB) to cluster node #2 ...
[17:42:55.445] Exporting ‘f1’ (1.53 MiB) to cluster node #2 ...
[17:42:55.499] Exporting ‘f1’ (1.53 MiB) to cluster node #2 ... DONE
[17:42:55.500] Exporting 1 global objects (1.53 MiB) to cluster node #2 ... DONE
[17:42:55.501] MultisessionFuture started
[17:42:55.501] - Launch lazy future ... done
[17:42:55.501] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.53 MiB (MultisessionFuture ‘f1’ of 1.53 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7219efae-a013-4b01-5d9b-b6bdda65803e
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[17:42:55.518] result() for ClusterFuture ...
[17:42:55.519] receiveMessageFromWorker() for ClusterFuture ...
[17:42:55.519] - Validating connection of MultisessionFuture
[17:42:55.585] - received message: FutureResult
[17:42:55.586] - Received FutureResult
[17:42:55.586] - Erased future from FutureRegistry
[17:42:55.586] result() for ClusterFuture ...
[17:42:55.586] - result already collected: FutureResult
[17:42:55.586] result() for ClusterFuture ... done
[17:42:55.586] signalConditions() ...
[17:42:55.586]  - include = ‘immediateCondition’
[17:42:55.586]  - exclude = 
[17:42:55.586]  - resignal = FALSE
[17:42:55.587]  - Number of conditions: 1
[17:42:55.587] signalConditions() ... done
[17:42:55.587] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:55.587] result() for ClusterFuture ... done
[17:42:55.587] result() for ClusterFuture ...
[17:42:55.587] - result already collected: FutureResult
[17:42:55.587] result() for ClusterFuture ... done
[17:42:55.587] signalConditions() ...
[17:42:55.587]  - include = ‘immediateCondition’
[17:42:55.587]  - exclude = 
[17:42:55.587]  - resignal = FALSE
[17:42:55.588]  - Number of conditions: 1
[17:42:55.588] signalConditions() ... done
[17:42:55.588] Future state: ‘finished’
[17:42:55.588] result() for ClusterFuture ...
[17:42:55.588] - result already collected: FutureResult
[17:42:55.588] result() for ClusterFuture ... done
[17:42:55.588] signalConditions() ...
[17:42:55.588]  - include = ‘condition’
[17:42:55.588]  - exclude = ‘immediateCondition’
[17:42:55.588]  - resignal = TRUE
[17:42:55.588]  - Number of conditions: 1
[17:42:55.589]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[17:42:55.589] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (7219efae-a013-4b01-5d9b-b6bdda65803e; pid 48177 on e448fae16456) that created it, not by any other R processes (213183a1-a9b1-1624-7b0b-cf99012435f1; pid 48228 on e448fae16456): {; 42L; }>


Future UUID: 6f30b9e7-25bd-e3fc-e501-e58dbb22f3e3


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7219efae-a013-4b01-5d9b-b6bdda65803e
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[17:42:55.590] result() for ClusterFuture ...
[17:42:55.590] receiveMessageFromWorker() for ClusterFuture ...
[17:42:55.590] - Validating connection of MultisessionFuture
[17:42:55.590] - received message: FutureResult
[17:42:55.590] - Received FutureResult
[17:42:55.590] - Erased future from FutureRegistry
[17:42:55.590] result() for ClusterFuture ...
[17:42:55.591] - result already collected: FutureResult
[17:42:55.591] result() for ClusterFuture ... done
[17:42:55.591] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:55.591] result() for ClusterFuture ... done
[17:42:55.591] result() for ClusterFuture ...
[17:42:55.591] - result already collected: FutureResult
[17:42:55.591] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[17:42:55.592] plan(): Setting new future strategy stack:
[17:42:55.592] List of future strategies:
[17:42:55.592] 1. FutureStrategy:
[17:42:55.592]    - args: function (..., envir = parent.frame())
[17:42:55.592]    - tweaked: FALSE
[17:42:55.592]    - call: future::plan(oplan)
[17:42:55.593] plan(): nbrOfWorkers() = 1
> 
