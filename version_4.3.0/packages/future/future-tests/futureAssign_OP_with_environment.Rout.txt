
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:15.899] plan(): Setting new future strategy stack:
[16:12:15.900] List of future strategies:
[16:12:15.900] 1. sequential:
[16:12:15.900]    - args: function (..., envir = parent.frame())
[16:12:15.900]    - tweaked: FALSE
[16:12:15.900]    - call: future::plan("sequential")
[16:12:15.913] plan(): nbrOfWorkers() = 1
> 
> ## BACKWARD COMPATIBILITY
> if (getRversion() < "3.2.0") {
+   names <- function(x) if (is.environment(x)) ls(envir = x) else base::names(x)
+ }
> 
> message("*** %<-% to environment ...")
*** %<-% to environment ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Async delayed assignment (infix operator)
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- new.env()
> stopifnot(length(names(z)) == 0L)
> 
> message("*** %<-% to environment: Assign by index (not allowed)")
*** %<-% to environment: Assign by index (not allowed)
> res <- try(z[[1]] %<-% { 2 } %lazy% TRUE, silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** %<-% to environment: Assign by name (new)")
*** %<-% to environment: Assign by name (new)
> z$B %<-% { TRUE }  %lazy% TRUE
[16:12:15.926] getGlobalsAndPackages() ...
[16:12:15.926] Searching for globals...
[16:12:15.929] - globals found: [1] ‘{’
[16:12:15.929] Searching for globals ... DONE
[16:12:15.929] Resolving globals: FALSE
[16:12:15.930] 
[16:12:15.930] 
[16:12:15.930] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 2) # sic!
> stopifnot("B" %in% ls(z))
> 
> y <- as.list(z)
[16:12:15.931] run() for ‘Future’ ...
[16:12:15.931] - state: ‘created’
[16:12:15.931] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:15.931] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:15.932] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:15.932]   - Field: ‘label’
[16:12:15.932]   - Field: ‘local’
[16:12:15.932]   - Field: ‘owner’
[16:12:15.932]   - Field: ‘envir’
[16:12:15.932]   - Field: ‘packages’
[16:12:15.932]   - Field: ‘gc’
[16:12:15.932]   - Field: ‘conditions’
[16:12:15.932]   - Field: ‘expr’
[16:12:15.932]   - Field: ‘uuid’
[16:12:15.933]   - Field: ‘seed’
[16:12:15.933]   - Field: ‘version’
[16:12:15.933]   - Field: ‘result’
[16:12:15.933]   - Field: ‘asynchronous’
[16:12:15.933]   - Field: ‘calls’
[16:12:15.933]   - Field: ‘globals’
[16:12:15.933]   - Field: ‘stdout’
[16:12:15.933]   - Field: ‘earlySignal’
[16:12:15.933]   - Field: ‘lazy’
[16:12:15.933]   - Field: ‘state’
[16:12:15.933] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:15.934] - Launch lazy future ...
[16:12:15.934] Packages needed by the future expression (n = 0): <none>
[16:12:15.934] Packages needed by future strategies (n = 0): <none>
[16:12:15.935] {
[16:12:15.935]     {
[16:12:15.935]         {
[16:12:15.935]             ...future.startTime <- base::Sys.time()
[16:12:15.935]             {
[16:12:15.935]                 {
[16:12:15.935]                   {
[16:12:15.935]                     base::local({
[16:12:15.935]                       has_future <- base::requireNamespace("future", 
[16:12:15.935]                         quietly = TRUE)
[16:12:15.935]                       if (has_future) {
[16:12:15.935]                         ns <- base::getNamespace("future")
[16:12:15.935]                         version <- ns[[".package"]][["version"]]
[16:12:15.935]                         if (is.null(version)) 
[16:12:15.935]                           version <- utils::packageVersion("future")
[16:12:15.935]                       }
[16:12:15.935]                       else {
[16:12:15.935]                         version <- NULL
[16:12:15.935]                       }
[16:12:15.935]                       if (!has_future || version < "1.8.0") {
[16:12:15.935]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:15.935]                           "", base::R.version$version.string), 
[16:12:15.935]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:15.935]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:15.935]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:15.935]                             "release", "version")], collapse = " "), 
[16:12:15.935]                           hostname = base::Sys.info()[["nodename"]])
[16:12:15.935]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:15.935]                           info)
[16:12:15.935]                         info <- base::paste(info, collapse = "; ")
[16:12:15.935]                         if (!has_future) {
[16:12:15.935]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:15.935]                             info)
[16:12:15.935]                         }
[16:12:15.935]                         else {
[16:12:15.935]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:15.935]                             info, version)
[16:12:15.935]                         }
[16:12:15.935]                         base::stop(msg)
[16:12:15.935]                       }
[16:12:15.935]                     })
[16:12:15.935]                   }
[16:12:15.935]                   options(future.plan = NULL)
[16:12:15.935]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:15.935]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:15.935]                 }
[16:12:15.935]                 ...future.workdir <- getwd()
[16:12:15.935]             }
[16:12:15.935]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:15.935]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:15.935]         }
[16:12:15.935]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:15.935]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:15.935]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:15.935]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:15.935]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:15.935]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:15.935]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:15.935]             base::names(...future.oldOptions))
[16:12:15.935]     }
[16:12:15.935]     if (FALSE) {
[16:12:15.935]     }
[16:12:15.935]     else {
[16:12:15.935]         if (TRUE) {
[16:12:15.935]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:15.935]                 open = "w")
[16:12:15.935]         }
[16:12:15.935]         else {
[16:12:15.935]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:15.935]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:15.935]         }
[16:12:15.935]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:15.935]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:15.935]             base::sink(type = "output", split = FALSE)
[16:12:15.935]             base::close(...future.stdout)
[16:12:15.935]         }, add = TRUE)
[16:12:15.935]     }
[16:12:15.935]     ...future.frame <- base::sys.nframe()
[16:12:15.935]     ...future.conditions <- base::list()
[16:12:15.935]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:15.935]     if (FALSE) {
[16:12:15.935]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:15.935]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:15.935]     }
[16:12:15.935]     ...future.result <- base::tryCatch({
[16:12:15.935]         base::withCallingHandlers({
[16:12:15.935]             ...future.value <- base::withVisible(base::local({
[16:12:15.935]                 TRUE
[16:12:15.935]             }))
[16:12:15.935]             future::FutureResult(value = ...future.value$value, 
[16:12:15.935]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:15.935]                   ...future.rng), globalenv = if (FALSE) 
[16:12:15.935]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:15.935]                     ...future.globalenv.names))
[16:12:15.935]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:15.935]         }, condition = base::local({
[16:12:15.935]             c <- base::c
[16:12:15.935]             inherits <- base::inherits
[16:12:15.935]             invokeRestart <- base::invokeRestart
[16:12:15.935]             length <- base::length
[16:12:15.935]             list <- base::list
[16:12:15.935]             seq.int <- base::seq.int
[16:12:15.935]             signalCondition <- base::signalCondition
[16:12:15.935]             sys.calls <- base::sys.calls
[16:12:15.935]             `[[` <- base::`[[`
[16:12:15.935]             `+` <- base::`+`
[16:12:15.935]             `<<-` <- base::`<<-`
[16:12:15.935]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:15.935]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:15.935]                   3L)]
[16:12:15.935]             }
[16:12:15.935]             function(cond) {
[16:12:15.935]                 is_error <- inherits(cond, "error")
[16:12:15.935]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:15.935]                   NULL)
[16:12:15.935]                 if (is_error) {
[16:12:15.935]                   sessionInformation <- function() {
[16:12:15.935]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:15.935]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:15.935]                       search = base::search(), system = base::Sys.info())
[16:12:15.935]                   }
[16:12:15.935]                   ...future.conditions[[length(...future.conditions) + 
[16:12:15.935]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:15.935]                     cond$call), session = sessionInformation(), 
[16:12:15.935]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:15.935]                   signalCondition(cond)
[16:12:15.935]                 }
[16:12:15.935]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:15.935]                 "immediateCondition"))) {
[16:12:15.935]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:15.935]                   ...future.conditions[[length(...future.conditions) + 
[16:12:15.935]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:15.935]                   if (TRUE && !signal) {
[16:12:15.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:15.935]                     {
[16:12:15.935]                       inherits <- base::inherits
[16:12:15.935]                       invokeRestart <- base::invokeRestart
[16:12:15.935]                       is.null <- base::is.null
[16:12:15.935]                       muffled <- FALSE
[16:12:15.935]                       if (inherits(cond, "message")) {
[16:12:15.935]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:15.935]                         if (muffled) 
[16:12:15.935]                           invokeRestart("muffleMessage")
[16:12:15.935]                       }
[16:12:15.935]                       else if (inherits(cond, "warning")) {
[16:12:15.935]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:15.935]                         if (muffled) 
[16:12:15.935]                           invokeRestart("muffleWarning")
[16:12:15.935]                       }
[16:12:15.935]                       else if (inherits(cond, "condition")) {
[16:12:15.935]                         if (!is.null(pattern)) {
[16:12:15.935]                           computeRestarts <- base::computeRestarts
[16:12:15.935]                           grepl <- base::grepl
[16:12:15.935]                           restarts <- computeRestarts(cond)
[16:12:15.935]                           for (restart in restarts) {
[16:12:15.935]                             name <- restart$name
[16:12:15.935]                             if (is.null(name)) 
[16:12:15.935]                               next
[16:12:15.935]                             if (!grepl(pattern, name)) 
[16:12:15.935]                               next
[16:12:15.935]                             invokeRestart(restart)
[16:12:15.935]                             muffled <- TRUE
[16:12:15.935]                             break
[16:12:15.935]                           }
[16:12:15.935]                         }
[16:12:15.935]                       }
[16:12:15.935]                       invisible(muffled)
[16:12:15.935]                     }
[16:12:15.935]                     muffleCondition(cond, pattern = "^muffle")
[16:12:15.935]                   }
[16:12:15.935]                 }
[16:12:15.935]                 else {
[16:12:15.935]                   if (TRUE) {
[16:12:15.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:15.935]                     {
[16:12:15.935]                       inherits <- base::inherits
[16:12:15.935]                       invokeRestart <- base::invokeRestart
[16:12:15.935]                       is.null <- base::is.null
[16:12:15.935]                       muffled <- FALSE
[16:12:15.935]                       if (inherits(cond, "message")) {
[16:12:15.935]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:15.935]                         if (muffled) 
[16:12:15.935]                           invokeRestart("muffleMessage")
[16:12:15.935]                       }
[16:12:15.935]                       else if (inherits(cond, "warning")) {
[16:12:15.935]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:15.935]                         if (muffled) 
[16:12:15.935]                           invokeRestart("muffleWarning")
[16:12:15.935]                       }
[16:12:15.935]                       else if (inherits(cond, "condition")) {
[16:12:15.935]                         if (!is.null(pattern)) {
[16:12:15.935]                           computeRestarts <- base::computeRestarts
[16:12:15.935]                           grepl <- base::grepl
[16:12:15.935]                           restarts <- computeRestarts(cond)
[16:12:15.935]                           for (restart in restarts) {
[16:12:15.935]                             name <- restart$name
[16:12:15.935]                             if (is.null(name)) 
[16:12:15.935]                               next
[16:12:15.935]                             if (!grepl(pattern, name)) 
[16:12:15.935]                               next
[16:12:15.935]                             invokeRestart(restart)
[16:12:15.935]                             muffled <- TRUE
[16:12:15.935]                             break
[16:12:15.935]                           }
[16:12:15.935]                         }
[16:12:15.935]                       }
[16:12:15.935]                       invisible(muffled)
[16:12:15.935]                     }
[16:12:15.935]                     muffleCondition(cond, pattern = "^muffle")
[16:12:15.935]                   }
[16:12:15.935]                 }
[16:12:15.935]             }
[16:12:15.935]         }))
[16:12:15.935]     }, error = function(ex) {
[16:12:15.935]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:15.935]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:15.935]                 ...future.rng), started = ...future.startTime, 
[16:12:15.935]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:15.935]             version = "1.8"), class = "FutureResult")
[16:12:15.935]     }, finally = {
[16:12:15.935]         if (!identical(...future.workdir, getwd())) 
[16:12:15.935]             setwd(...future.workdir)
[16:12:15.935]         {
[16:12:15.935]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:15.935]                 ...future.oldOptions$nwarnings <- NULL
[16:12:15.935]             }
[16:12:15.935]             base::options(...future.oldOptions)
[16:12:15.935]             if (.Platform$OS.type == "windows") {
[16:12:15.935]                 old_names <- names(...future.oldEnvVars)
[16:12:15.935]                 envs <- base::Sys.getenv()
[16:12:15.935]                 names <- names(envs)
[16:12:15.935]                 common <- intersect(names, old_names)
[16:12:15.935]                 added <- setdiff(names, old_names)
[16:12:15.935]                 removed <- setdiff(old_names, names)
[16:12:15.935]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:15.935]                   envs[common]]
[16:12:15.935]                 NAMES <- toupper(changed)
[16:12:15.935]                 args <- list()
[16:12:15.935]                 for (kk in seq_along(NAMES)) {
[16:12:15.935]                   name <- changed[[kk]]
[16:12:15.935]                   NAME <- NAMES[[kk]]
[16:12:15.935]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.935]                     next
[16:12:15.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:15.935]                 }
[16:12:15.935]                 NAMES <- toupper(added)
[16:12:15.935]                 for (kk in seq_along(NAMES)) {
[16:12:15.935]                   name <- added[[kk]]
[16:12:15.935]                   NAME <- NAMES[[kk]]
[16:12:15.935]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.935]                     next
[16:12:15.935]                   args[[name]] <- ""
[16:12:15.935]                 }
[16:12:15.935]                 NAMES <- toupper(removed)
[16:12:15.935]                 for (kk in seq_along(NAMES)) {
[16:12:15.935]                   name <- removed[[kk]]
[16:12:15.935]                   NAME <- NAMES[[kk]]
[16:12:15.935]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.935]                     next
[16:12:15.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:15.935]                 }
[16:12:15.935]                 if (length(args) > 0) 
[16:12:15.935]                   base::do.call(base::Sys.setenv, args = args)
[16:12:15.935]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:15.935]             }
[16:12:15.935]             else {
[16:12:15.935]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:15.935]             }
[16:12:15.935]             {
[16:12:15.935]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:15.935]                   0L) {
[16:12:15.935]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:15.935]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:15.935]                   base::options(opts)
[16:12:15.935]                 }
[16:12:15.935]                 {
[16:12:15.935]                   {
[16:12:15.935]                     NULL
[16:12:15.935]                     RNGkind("Mersenne-Twister")
[16:12:15.935]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:15.935]                       inherits = FALSE)
[16:12:15.935]                   }
[16:12:15.935]                   options(future.plan = NULL)
[16:12:15.935]                   if (is.na(NA_character_)) 
[16:12:15.935]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:15.935]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:15.935]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:15.935]                   {
[16:12:15.935]                     future <- SequentialFuture(..., envir = envir)
[16:12:15.935]                     if (!future$lazy) 
[16:12:15.935]                       future <- run(future)
[16:12:15.935]                     invisible(future)
[16:12:15.935]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:15.935]                 }
[16:12:15.935]             }
[16:12:15.935]         }
[16:12:15.935]     })
[16:12:15.935]     if (TRUE) {
[16:12:15.935]         base::sink(type = "output", split = FALSE)
[16:12:15.935]         if (TRUE) {
[16:12:15.935]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:15.935]         }
[16:12:15.935]         else {
[16:12:15.935]             ...future.result["stdout"] <- base::list(NULL)
[16:12:15.935]         }
[16:12:15.935]         base::close(...future.stdout)
[16:12:15.935]         ...future.stdout <- NULL
[16:12:15.935]     }
[16:12:15.935]     ...future.result$conditions <- ...future.conditions
[16:12:15.935]     ...future.result$finished <- base::Sys.time()
[16:12:15.935]     ...future.result
[16:12:15.935] }
[16:12:15.937] plan(): Setting new future strategy stack:
[16:12:15.937] List of future strategies:
[16:12:15.937] 1. sequential:
[16:12:15.937]    - args: function (..., envir = parent.frame())
[16:12:15.937]    - tweaked: FALSE
[16:12:15.937]    - call: NULL
[16:12:15.938] plan(): nbrOfWorkers() = 1
[16:12:15.939] plan(): Setting new future strategy stack:
[16:12:15.939] List of future strategies:
[16:12:15.939] 1. sequential:
[16:12:15.939]    - args: function (..., envir = parent.frame())
[16:12:15.939]    - tweaked: FALSE
[16:12:15.939]    - call: future::plan("sequential")
[16:12:15.939] plan(): nbrOfWorkers() = 1
[16:12:15.939] SequentialFuture started (and completed)
[16:12:15.940] - Launch lazy future ... done
[16:12:15.940] run() for ‘SequentialFuture’ ... done
> str(y)
List of 1
 $ B: logi TRUE
> stopifnot(length(y) == 1)
> stopifnot(identical(names(y), "B"))
> 
> 
> message("*** %<-% to environment: Potential task name clashes")
*** %<-% to environment: Potential task name clashes
> u <- new.env()
> u$a %<-% { 1 } %lazy% TRUE
[16:12:15.943] getGlobalsAndPackages() ...
[16:12:15.943] Searching for globals...
[16:12:15.944] - globals found: [1] ‘{’
[16:12:15.944] Searching for globals ... DONE
[16:12:15.944] Resolving globals: FALSE
[16:12:15.944] 
[16:12:15.944] 
[16:12:15.944] getGlobalsAndPackages() ... DONE
> stopifnot(length(u) == 2)
> stopifnot("a" %in% names(u))
> fu <- futureOf(u$a)
> 
> v <- new.env()
> v$a %<-% { 2 } %lazy% TRUE
[16:12:15.945] getGlobalsAndPackages() ...
[16:12:15.945] Searching for globals...
[16:12:15.946] - globals found: [1] ‘{’
[16:12:15.946] Searching for globals ... DONE
[16:12:15.946] Resolving globals: FALSE
[16:12:15.946] 
[16:12:15.946] 
[16:12:15.947] getGlobalsAndPackages() ... DONE
> stopifnot(length(v) == 2)
> stopifnot("a" %in% names(v))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[16:12:15.947] run() for ‘Future’ ...
[16:12:15.947] - state: ‘created’
[16:12:15.948] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:15.948] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:15.948] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:15.948]   - Field: ‘label’
[16:12:15.948]   - Field: ‘local’
[16:12:15.948]   - Field: ‘owner’
[16:12:15.948]   - Field: ‘envir’
[16:12:15.948]   - Field: ‘packages’
[16:12:15.949]   - Field: ‘gc’
[16:12:15.949]   - Field: ‘conditions’
[16:12:15.949]   - Field: ‘expr’
[16:12:15.949]   - Field: ‘uuid’
[16:12:15.951]   - Field: ‘seed’
[16:12:15.951]   - Field: ‘version’
[16:12:15.951]   - Field: ‘result’
[16:12:15.951]   - Field: ‘asynchronous’
[16:12:15.952]   - Field: ‘calls’
[16:12:15.952]   - Field: ‘globals’
[16:12:15.952]   - Field: ‘stdout’
[16:12:15.952]   - Field: ‘earlySignal’
[16:12:15.952]   - Field: ‘lazy’
[16:12:15.952]   - Field: ‘state’
[16:12:15.952] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:15.952] - Launch lazy future ...
[16:12:15.952] Packages needed by the future expression (n = 0): <none>
[16:12:15.952] Packages needed by future strategies (n = 0): <none>
[16:12:15.953] {
[16:12:15.953]     {
[16:12:15.953]         {
[16:12:15.953]             ...future.startTime <- base::Sys.time()
[16:12:15.953]             {
[16:12:15.953]                 {
[16:12:15.953]                   {
[16:12:15.953]                     base::local({
[16:12:15.953]                       has_future <- base::requireNamespace("future", 
[16:12:15.953]                         quietly = TRUE)
[16:12:15.953]                       if (has_future) {
[16:12:15.953]                         ns <- base::getNamespace("future")
[16:12:15.953]                         version <- ns[[".package"]][["version"]]
[16:12:15.953]                         if (is.null(version)) 
[16:12:15.953]                           version <- utils::packageVersion("future")
[16:12:15.953]                       }
[16:12:15.953]                       else {
[16:12:15.953]                         version <- NULL
[16:12:15.953]                       }
[16:12:15.953]                       if (!has_future || version < "1.8.0") {
[16:12:15.953]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:15.953]                           "", base::R.version$version.string), 
[16:12:15.953]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:15.953]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:15.953]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:15.953]                             "release", "version")], collapse = " "), 
[16:12:15.953]                           hostname = base::Sys.info()[["nodename"]])
[16:12:15.953]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:15.953]                           info)
[16:12:15.953]                         info <- base::paste(info, collapse = "; ")
[16:12:15.953]                         if (!has_future) {
[16:12:15.953]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:15.953]                             info)
[16:12:15.953]                         }
[16:12:15.953]                         else {
[16:12:15.953]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:15.953]                             info, version)
[16:12:15.953]                         }
[16:12:15.953]                         base::stop(msg)
[16:12:15.953]                       }
[16:12:15.953]                     })
[16:12:15.953]                   }
[16:12:15.953]                   options(future.plan = NULL)
[16:12:15.953]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:15.953]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:15.953]                 }
[16:12:15.953]                 ...future.workdir <- getwd()
[16:12:15.953]             }
[16:12:15.953]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:15.953]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:15.953]         }
[16:12:15.953]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:15.953]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:15.953]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:15.953]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:15.953]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:15.953]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:15.953]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:15.953]             base::names(...future.oldOptions))
[16:12:15.953]     }
[16:12:15.953]     if (FALSE) {
[16:12:15.953]     }
[16:12:15.953]     else {
[16:12:15.953]         if (TRUE) {
[16:12:15.953]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:15.953]                 open = "w")
[16:12:15.953]         }
[16:12:15.953]         else {
[16:12:15.953]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:15.953]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:15.953]         }
[16:12:15.953]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:15.953]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:15.953]             base::sink(type = "output", split = FALSE)
[16:12:15.953]             base::close(...future.stdout)
[16:12:15.953]         }, add = TRUE)
[16:12:15.953]     }
[16:12:15.953]     ...future.frame <- base::sys.nframe()
[16:12:15.953]     ...future.conditions <- base::list()
[16:12:15.953]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:15.953]     if (FALSE) {
[16:12:15.953]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:15.953]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:15.953]     }
[16:12:15.953]     ...future.result <- base::tryCatch({
[16:12:15.953]         base::withCallingHandlers({
[16:12:15.953]             ...future.value <- base::withVisible(base::local({
[16:12:15.953]                 1
[16:12:15.953]             }))
[16:12:15.953]             future::FutureResult(value = ...future.value$value, 
[16:12:15.953]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:15.953]                   ...future.rng), globalenv = if (FALSE) 
[16:12:15.953]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:15.953]                     ...future.globalenv.names))
[16:12:15.953]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:15.953]         }, condition = base::local({
[16:12:15.953]             c <- base::c
[16:12:15.953]             inherits <- base::inherits
[16:12:15.953]             invokeRestart <- base::invokeRestart
[16:12:15.953]             length <- base::length
[16:12:15.953]             list <- base::list
[16:12:15.953]             seq.int <- base::seq.int
[16:12:15.953]             signalCondition <- base::signalCondition
[16:12:15.953]             sys.calls <- base::sys.calls
[16:12:15.953]             `[[` <- base::`[[`
[16:12:15.953]             `+` <- base::`+`
[16:12:15.953]             `<<-` <- base::`<<-`
[16:12:15.953]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:15.953]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:15.953]                   3L)]
[16:12:15.953]             }
[16:12:15.953]             function(cond) {
[16:12:15.953]                 is_error <- inherits(cond, "error")
[16:12:15.953]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:15.953]                   NULL)
[16:12:15.953]                 if (is_error) {
[16:12:15.953]                   sessionInformation <- function() {
[16:12:15.953]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:15.953]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:15.953]                       search = base::search(), system = base::Sys.info())
[16:12:15.953]                   }
[16:12:15.953]                   ...future.conditions[[length(...future.conditions) + 
[16:12:15.953]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:15.953]                     cond$call), session = sessionInformation(), 
[16:12:15.953]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:15.953]                   signalCondition(cond)
[16:12:15.953]                 }
[16:12:15.953]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:15.953]                 "immediateCondition"))) {
[16:12:15.953]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:15.953]                   ...future.conditions[[length(...future.conditions) + 
[16:12:15.953]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:15.953]                   if (TRUE && !signal) {
[16:12:15.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:15.953]                     {
[16:12:15.953]                       inherits <- base::inherits
[16:12:15.953]                       invokeRestart <- base::invokeRestart
[16:12:15.953]                       is.null <- base::is.null
[16:12:15.953]                       muffled <- FALSE
[16:12:15.953]                       if (inherits(cond, "message")) {
[16:12:15.953]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:15.953]                         if (muffled) 
[16:12:15.953]                           invokeRestart("muffleMessage")
[16:12:15.953]                       }
[16:12:15.953]                       else if (inherits(cond, "warning")) {
[16:12:15.953]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:15.953]                         if (muffled) 
[16:12:15.953]                           invokeRestart("muffleWarning")
[16:12:15.953]                       }
[16:12:15.953]                       else if (inherits(cond, "condition")) {
[16:12:15.953]                         if (!is.null(pattern)) {
[16:12:15.953]                           computeRestarts <- base::computeRestarts
[16:12:15.953]                           grepl <- base::grepl
[16:12:15.953]                           restarts <- computeRestarts(cond)
[16:12:15.953]                           for (restart in restarts) {
[16:12:15.953]                             name <- restart$name
[16:12:15.953]                             if (is.null(name)) 
[16:12:15.953]                               next
[16:12:15.953]                             if (!grepl(pattern, name)) 
[16:12:15.953]                               next
[16:12:15.953]                             invokeRestart(restart)
[16:12:15.953]                             muffled <- TRUE
[16:12:15.953]                             break
[16:12:15.953]                           }
[16:12:15.953]                         }
[16:12:15.953]                       }
[16:12:15.953]                       invisible(muffled)
[16:12:15.953]                     }
[16:12:15.953]                     muffleCondition(cond, pattern = "^muffle")
[16:12:15.953]                   }
[16:12:15.953]                 }
[16:12:15.953]                 else {
[16:12:15.953]                   if (TRUE) {
[16:12:15.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:15.953]                     {
[16:12:15.953]                       inherits <- base::inherits
[16:12:15.953]                       invokeRestart <- base::invokeRestart
[16:12:15.953]                       is.null <- base::is.null
[16:12:15.953]                       muffled <- FALSE
[16:12:15.953]                       if (inherits(cond, "message")) {
[16:12:15.953]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:15.953]                         if (muffled) 
[16:12:15.953]                           invokeRestart("muffleMessage")
[16:12:15.953]                       }
[16:12:15.953]                       else if (inherits(cond, "warning")) {
[16:12:15.953]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:15.953]                         if (muffled) 
[16:12:15.953]                           invokeRestart("muffleWarning")
[16:12:15.953]                       }
[16:12:15.953]                       else if (inherits(cond, "condition")) {
[16:12:15.953]                         if (!is.null(pattern)) {
[16:12:15.953]                           computeRestarts <- base::computeRestarts
[16:12:15.953]                           grepl <- base::grepl
[16:12:15.953]                           restarts <- computeRestarts(cond)
[16:12:15.953]                           for (restart in restarts) {
[16:12:15.953]                             name <- restart$name
[16:12:15.953]                             if (is.null(name)) 
[16:12:15.953]                               next
[16:12:15.953]                             if (!grepl(pattern, name)) 
[16:12:15.953]                               next
[16:12:15.953]                             invokeRestart(restart)
[16:12:15.953]                             muffled <- TRUE
[16:12:15.953]                             break
[16:12:15.953]                           }
[16:12:15.953]                         }
[16:12:15.953]                       }
[16:12:15.953]                       invisible(muffled)
[16:12:15.953]                     }
[16:12:15.953]                     muffleCondition(cond, pattern = "^muffle")
[16:12:15.953]                   }
[16:12:15.953]                 }
[16:12:15.953]             }
[16:12:15.953]         }))
[16:12:15.953]     }, error = function(ex) {
[16:12:15.953]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:15.953]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:15.953]                 ...future.rng), started = ...future.startTime, 
[16:12:15.953]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:15.953]             version = "1.8"), class = "FutureResult")
[16:12:15.953]     }, finally = {
[16:12:15.953]         if (!identical(...future.workdir, getwd())) 
[16:12:15.953]             setwd(...future.workdir)
[16:12:15.953]         {
[16:12:15.953]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:15.953]                 ...future.oldOptions$nwarnings <- NULL
[16:12:15.953]             }
[16:12:15.953]             base::options(...future.oldOptions)
[16:12:15.953]             if (.Platform$OS.type == "windows") {
[16:12:15.953]                 old_names <- names(...future.oldEnvVars)
[16:12:15.953]                 envs <- base::Sys.getenv()
[16:12:15.953]                 names <- names(envs)
[16:12:15.953]                 common <- intersect(names, old_names)
[16:12:15.953]                 added <- setdiff(names, old_names)
[16:12:15.953]                 removed <- setdiff(old_names, names)
[16:12:15.953]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:15.953]                   envs[common]]
[16:12:15.953]                 NAMES <- toupper(changed)
[16:12:15.953]                 args <- list()
[16:12:15.953]                 for (kk in seq_along(NAMES)) {
[16:12:15.953]                   name <- changed[[kk]]
[16:12:15.953]                   NAME <- NAMES[[kk]]
[16:12:15.953]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.953]                     next
[16:12:15.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:15.953]                 }
[16:12:15.953]                 NAMES <- toupper(added)
[16:12:15.953]                 for (kk in seq_along(NAMES)) {
[16:12:15.953]                   name <- added[[kk]]
[16:12:15.953]                   NAME <- NAMES[[kk]]
[16:12:15.953]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.953]                     next
[16:12:15.953]                   args[[name]] <- ""
[16:12:15.953]                 }
[16:12:15.953]                 NAMES <- toupper(removed)
[16:12:15.953]                 for (kk in seq_along(NAMES)) {
[16:12:15.953]                   name <- removed[[kk]]
[16:12:15.953]                   NAME <- NAMES[[kk]]
[16:12:15.953]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.953]                     next
[16:12:15.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:15.953]                 }
[16:12:15.953]                 if (length(args) > 0) 
[16:12:15.953]                   base::do.call(base::Sys.setenv, args = args)
[16:12:15.953]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:15.953]             }
[16:12:15.953]             else {
[16:12:15.953]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:15.953]             }
[16:12:15.953]             {
[16:12:15.953]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:15.953]                   0L) {
[16:12:15.953]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:15.953]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:15.953]                   base::options(opts)
[16:12:15.953]                 }
[16:12:15.953]                 {
[16:12:15.953]                   {
[16:12:15.953]                     NULL
[16:12:15.953]                     RNGkind("Mersenne-Twister")
[16:12:15.953]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:15.953]                       inherits = FALSE)
[16:12:15.953]                   }
[16:12:15.953]                   options(future.plan = NULL)
[16:12:15.953]                   if (is.na(NA_character_)) 
[16:12:15.953]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:15.953]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:15.953]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:15.953]                   {
[16:12:15.953]                     future <- SequentialFuture(..., envir = envir)
[16:12:15.953]                     if (!future$lazy) 
[16:12:15.953]                       future <- run(future)
[16:12:15.953]                     invisible(future)
[16:12:15.953]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:15.953]                 }
[16:12:15.953]             }
[16:12:15.953]         }
[16:12:15.953]     })
[16:12:15.953]     if (TRUE) {
[16:12:15.953]         base::sink(type = "output", split = FALSE)
[16:12:15.953]         if (TRUE) {
[16:12:15.953]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:15.953]         }
[16:12:15.953]         else {
[16:12:15.953]             ...future.result["stdout"] <- base::list(NULL)
[16:12:15.953]         }
[16:12:15.953]         base::close(...future.stdout)
[16:12:15.953]         ...future.stdout <- NULL
[16:12:15.953]     }
[16:12:15.953]     ...future.result$conditions <- ...future.conditions
[16:12:15.953]     ...future.result$finished <- base::Sys.time()
[16:12:15.953]     ...future.result
[16:12:15.953] }
[16:12:15.955] plan(): Setting new future strategy stack:
[16:12:15.955] List of future strategies:
[16:12:15.955] 1. sequential:
[16:12:15.955]    - args: function (..., envir = parent.frame())
[16:12:15.955]    - tweaked: FALSE
[16:12:15.955]    - call: NULL
[16:12:15.955] plan(): nbrOfWorkers() = 1
[16:12:15.956] plan(): Setting new future strategy stack:
[16:12:15.956] List of future strategies:
[16:12:15.956] 1. sequential:
[16:12:15.956]    - args: function (..., envir = parent.frame())
[16:12:15.956]    - tweaked: FALSE
[16:12:15.956]    - call: future::plan("sequential")
[16:12:15.956] plan(): nbrOfWorkers() = 1
[16:12:15.956] SequentialFuture started (and completed)
[16:12:15.957] - Launch lazy future ... done
[16:12:15.957] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[16:12:15.957] run() for ‘Future’ ...
[16:12:15.957] - state: ‘created’
[16:12:15.957] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:15.957] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:15.957] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:15.958]   - Field: ‘label’
[16:12:15.958]   - Field: ‘local’
[16:12:15.958]   - Field: ‘owner’
[16:12:15.958]   - Field: ‘envir’
[16:12:15.958]   - Field: ‘packages’
[16:12:15.958]   - Field: ‘gc’
[16:12:15.958]   - Field: ‘conditions’
[16:12:15.958]   - Field: ‘expr’
[16:12:15.958]   - Field: ‘uuid’
[16:12:15.958]   - Field: ‘seed’
[16:12:15.958]   - Field: ‘version’
[16:12:15.959]   - Field: ‘result’
[16:12:15.959]   - Field: ‘asynchronous’
[16:12:15.959]   - Field: ‘calls’
[16:12:15.959]   - Field: ‘globals’
[16:12:15.959]   - Field: ‘stdout’
[16:12:15.959]   - Field: ‘earlySignal’
[16:12:15.959]   - Field: ‘lazy’
[16:12:15.959]   - Field: ‘state’
[16:12:15.959] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:15.959] - Launch lazy future ...
[16:12:15.959] Packages needed by the future expression (n = 0): <none>
[16:12:15.960] Packages needed by future strategies (n = 0): <none>
[16:12:15.960] {
[16:12:15.960]     {
[16:12:15.960]         {
[16:12:15.960]             ...future.startTime <- base::Sys.time()
[16:12:15.960]             {
[16:12:15.960]                 {
[16:12:15.960]                   {
[16:12:15.960]                     base::local({
[16:12:15.960]                       has_future <- base::requireNamespace("future", 
[16:12:15.960]                         quietly = TRUE)
[16:12:15.960]                       if (has_future) {
[16:12:15.960]                         ns <- base::getNamespace("future")
[16:12:15.960]                         version <- ns[[".package"]][["version"]]
[16:12:15.960]                         if (is.null(version)) 
[16:12:15.960]                           version <- utils::packageVersion("future")
[16:12:15.960]                       }
[16:12:15.960]                       else {
[16:12:15.960]                         version <- NULL
[16:12:15.960]                       }
[16:12:15.960]                       if (!has_future || version < "1.8.0") {
[16:12:15.960]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:15.960]                           "", base::R.version$version.string), 
[16:12:15.960]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:15.960]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:15.960]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:15.960]                             "release", "version")], collapse = " "), 
[16:12:15.960]                           hostname = base::Sys.info()[["nodename"]])
[16:12:15.960]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:15.960]                           info)
[16:12:15.960]                         info <- base::paste(info, collapse = "; ")
[16:12:15.960]                         if (!has_future) {
[16:12:15.960]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:15.960]                             info)
[16:12:15.960]                         }
[16:12:15.960]                         else {
[16:12:15.960]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:15.960]                             info, version)
[16:12:15.960]                         }
[16:12:15.960]                         base::stop(msg)
[16:12:15.960]                       }
[16:12:15.960]                     })
[16:12:15.960]                   }
[16:12:15.960]                   options(future.plan = NULL)
[16:12:15.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:15.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:15.960]                 }
[16:12:15.960]                 ...future.workdir <- getwd()
[16:12:15.960]             }
[16:12:15.960]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:15.960]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:15.960]         }
[16:12:15.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:15.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:15.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:15.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:15.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:15.960]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:15.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:15.960]             base::names(...future.oldOptions))
[16:12:15.960]     }
[16:12:15.960]     if (FALSE) {
[16:12:15.960]     }
[16:12:15.960]     else {
[16:12:15.960]         if (TRUE) {
[16:12:15.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:15.960]                 open = "w")
[16:12:15.960]         }
[16:12:15.960]         else {
[16:12:15.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:15.960]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:15.960]         }
[16:12:15.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:15.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:15.960]             base::sink(type = "output", split = FALSE)
[16:12:15.960]             base::close(...future.stdout)
[16:12:15.960]         }, add = TRUE)
[16:12:15.960]     }
[16:12:15.960]     ...future.frame <- base::sys.nframe()
[16:12:15.960]     ...future.conditions <- base::list()
[16:12:15.960]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:15.960]     if (FALSE) {
[16:12:15.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:15.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:15.960]     }
[16:12:15.960]     ...future.result <- base::tryCatch({
[16:12:15.960]         base::withCallingHandlers({
[16:12:15.960]             ...future.value <- base::withVisible(base::local({
[16:12:15.960]                 2
[16:12:15.960]             }))
[16:12:15.960]             future::FutureResult(value = ...future.value$value, 
[16:12:15.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:15.960]                   ...future.rng), globalenv = if (FALSE) 
[16:12:15.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:15.960]                     ...future.globalenv.names))
[16:12:15.960]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:15.960]         }, condition = base::local({
[16:12:15.960]             c <- base::c
[16:12:15.960]             inherits <- base::inherits
[16:12:15.960]             invokeRestart <- base::invokeRestart
[16:12:15.960]             length <- base::length
[16:12:15.960]             list <- base::list
[16:12:15.960]             seq.int <- base::seq.int
[16:12:15.960]             signalCondition <- base::signalCondition
[16:12:15.960]             sys.calls <- base::sys.calls
[16:12:15.960]             `[[` <- base::`[[`
[16:12:15.960]             `+` <- base::`+`
[16:12:15.960]             `<<-` <- base::`<<-`
[16:12:15.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:15.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:15.960]                   3L)]
[16:12:15.960]             }
[16:12:15.960]             function(cond) {
[16:12:15.960]                 is_error <- inherits(cond, "error")
[16:12:15.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:15.960]                   NULL)
[16:12:15.960]                 if (is_error) {
[16:12:15.960]                   sessionInformation <- function() {
[16:12:15.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:15.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:15.960]                       search = base::search(), system = base::Sys.info())
[16:12:15.960]                   }
[16:12:15.960]                   ...future.conditions[[length(...future.conditions) + 
[16:12:15.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:15.960]                     cond$call), session = sessionInformation(), 
[16:12:15.960]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:15.960]                   signalCondition(cond)
[16:12:15.960]                 }
[16:12:15.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:15.960]                 "immediateCondition"))) {
[16:12:15.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:15.960]                   ...future.conditions[[length(...future.conditions) + 
[16:12:15.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:15.960]                   if (TRUE && !signal) {
[16:12:15.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:15.960]                     {
[16:12:15.960]                       inherits <- base::inherits
[16:12:15.960]                       invokeRestart <- base::invokeRestart
[16:12:15.960]                       is.null <- base::is.null
[16:12:15.960]                       muffled <- FALSE
[16:12:15.960]                       if (inherits(cond, "message")) {
[16:12:15.960]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:15.960]                         if (muffled) 
[16:12:15.960]                           invokeRestart("muffleMessage")
[16:12:15.960]                       }
[16:12:15.960]                       else if (inherits(cond, "warning")) {
[16:12:15.960]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:15.960]                         if (muffled) 
[16:12:15.960]                           invokeRestart("muffleWarning")
[16:12:15.960]                       }
[16:12:15.960]                       else if (inherits(cond, "condition")) {
[16:12:15.960]                         if (!is.null(pattern)) {
[16:12:15.960]                           computeRestarts <- base::computeRestarts
[16:12:15.960]                           grepl <- base::grepl
[16:12:15.960]                           restarts <- computeRestarts(cond)
[16:12:15.960]                           for (restart in restarts) {
[16:12:15.960]                             name <- restart$name
[16:12:15.960]                             if (is.null(name)) 
[16:12:15.960]                               next
[16:12:15.960]                             if (!grepl(pattern, name)) 
[16:12:15.960]                               next
[16:12:15.960]                             invokeRestart(restart)
[16:12:15.960]                             muffled <- TRUE
[16:12:15.960]                             break
[16:12:15.960]                           }
[16:12:15.960]                         }
[16:12:15.960]                       }
[16:12:15.960]                       invisible(muffled)
[16:12:15.960]                     }
[16:12:15.960]                     muffleCondition(cond, pattern = "^muffle")
[16:12:15.960]                   }
[16:12:15.960]                 }
[16:12:15.960]                 else {
[16:12:15.960]                   if (TRUE) {
[16:12:15.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:15.960]                     {
[16:12:15.960]                       inherits <- base::inherits
[16:12:15.960]                       invokeRestart <- base::invokeRestart
[16:12:15.960]                       is.null <- base::is.null
[16:12:15.960]                       muffled <- FALSE
[16:12:15.960]                       if (inherits(cond, "message")) {
[16:12:15.960]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:15.960]                         if (muffled) 
[16:12:15.960]                           invokeRestart("muffleMessage")
[16:12:15.960]                       }
[16:12:15.960]                       else if (inherits(cond, "warning")) {
[16:12:15.960]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:15.960]                         if (muffled) 
[16:12:15.960]                           invokeRestart("muffleWarning")
[16:12:15.960]                       }
[16:12:15.960]                       else if (inherits(cond, "condition")) {
[16:12:15.960]                         if (!is.null(pattern)) {
[16:12:15.960]                           computeRestarts <- base::computeRestarts
[16:12:15.960]                           grepl <- base::grepl
[16:12:15.960]                           restarts <- computeRestarts(cond)
[16:12:15.960]                           for (restart in restarts) {
[16:12:15.960]                             name <- restart$name
[16:12:15.960]                             if (is.null(name)) 
[16:12:15.960]                               next
[16:12:15.960]                             if (!grepl(pattern, name)) 
[16:12:15.960]                               next
[16:12:15.960]                             invokeRestart(restart)
[16:12:15.960]                             muffled <- TRUE
[16:12:15.960]                             break
[16:12:15.960]                           }
[16:12:15.960]                         }
[16:12:15.960]                       }
[16:12:15.960]                       invisible(muffled)
[16:12:15.960]                     }
[16:12:15.960]                     muffleCondition(cond, pattern = "^muffle")
[16:12:15.960]                   }
[16:12:15.960]                 }
[16:12:15.960]             }
[16:12:15.960]         }))
[16:12:15.960]     }, error = function(ex) {
[16:12:15.960]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:15.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:15.960]                 ...future.rng), started = ...future.startTime, 
[16:12:15.960]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:15.960]             version = "1.8"), class = "FutureResult")
[16:12:15.960]     }, finally = {
[16:12:15.960]         if (!identical(...future.workdir, getwd())) 
[16:12:15.960]             setwd(...future.workdir)
[16:12:15.960]         {
[16:12:15.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:15.960]                 ...future.oldOptions$nwarnings <- NULL
[16:12:15.960]             }
[16:12:15.960]             base::options(...future.oldOptions)
[16:12:15.960]             if (.Platform$OS.type == "windows") {
[16:12:15.960]                 old_names <- names(...future.oldEnvVars)
[16:12:15.960]                 envs <- base::Sys.getenv()
[16:12:15.960]                 names <- names(envs)
[16:12:15.960]                 common <- intersect(names, old_names)
[16:12:15.960]                 added <- setdiff(names, old_names)
[16:12:15.960]                 removed <- setdiff(old_names, names)
[16:12:15.960]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:15.960]                   envs[common]]
[16:12:15.960]                 NAMES <- toupper(changed)
[16:12:15.960]                 args <- list()
[16:12:15.960]                 for (kk in seq_along(NAMES)) {
[16:12:15.960]                   name <- changed[[kk]]
[16:12:15.960]                   NAME <- NAMES[[kk]]
[16:12:15.960]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.960]                     next
[16:12:15.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:15.960]                 }
[16:12:15.960]                 NAMES <- toupper(added)
[16:12:15.960]                 for (kk in seq_along(NAMES)) {
[16:12:15.960]                   name <- added[[kk]]
[16:12:15.960]                   NAME <- NAMES[[kk]]
[16:12:15.960]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.960]                     next
[16:12:15.960]                   args[[name]] <- ""
[16:12:15.960]                 }
[16:12:15.960]                 NAMES <- toupper(removed)
[16:12:15.960]                 for (kk in seq_along(NAMES)) {
[16:12:15.960]                   name <- removed[[kk]]
[16:12:15.960]                   NAME <- NAMES[[kk]]
[16:12:15.960]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:15.960]                     next
[16:12:15.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:15.960]                 }
[16:12:15.960]                 if (length(args) > 0) 
[16:12:15.960]                   base::do.call(base::Sys.setenv, args = args)
[16:12:15.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:15.960]             }
[16:12:15.960]             else {
[16:12:15.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:15.960]             }
[16:12:15.960]             {
[16:12:15.960]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:15.960]                   0L) {
[16:12:15.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:15.960]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:15.960]                   base::options(opts)
[16:12:15.960]                 }
[16:12:15.960]                 {
[16:12:15.960]                   {
[16:12:15.960]                     NULL
[16:12:15.960]                     RNGkind("Mersenne-Twister")
[16:12:15.960]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:15.960]                       inherits = FALSE)
[16:12:15.960]                   }
[16:12:15.960]                   options(future.plan = NULL)
[16:12:15.960]                   if (is.na(NA_character_)) 
[16:12:15.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:15.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:15.960]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:15.960]                   {
[16:12:15.960]                     future <- SequentialFuture(..., envir = envir)
[16:12:15.960]                     if (!future$lazy) 
[16:12:15.960]                       future <- run(future)
[16:12:15.960]                     invisible(future)
[16:12:15.960]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:15.960]                 }
[16:12:15.960]             }
[16:12:15.960]         }
[16:12:15.960]     })
[16:12:15.960]     if (TRUE) {
[16:12:15.960]         base::sink(type = "output", split = FALSE)
[16:12:15.960]         if (TRUE) {
[16:12:15.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:15.960]         }
[16:12:15.960]         else {
[16:12:15.960]             ...future.result["stdout"] <- base::list(NULL)
[16:12:15.960]         }
[16:12:15.960]         base::close(...future.stdout)
[16:12:15.960]         ...future.stdout <- NULL
[16:12:15.960]     }
[16:12:15.960]     ...future.result$conditions <- ...future.conditions
[16:12:15.960]     ...future.result$finished <- base::Sys.time()
[16:12:15.960]     ...future.result
[16:12:15.960] }
[16:12:15.962] plan(): Setting new future strategy stack:
[16:12:15.962] List of future strategies:
[16:12:15.962] 1. sequential:
[16:12:15.962]    - args: function (..., envir = parent.frame())
[16:12:15.962]    - tweaked: FALSE
[16:12:15.962]    - call: NULL
[16:12:15.962] plan(): nbrOfWorkers() = 1
[16:12:15.963] plan(): Setting new future strategy stack:
[16:12:15.963] List of future strategies:
[16:12:15.963] 1. sequential:
[16:12:15.963]    - args: function (..., envir = parent.frame())
[16:12:15.963]    - tweaked: FALSE
[16:12:15.963]    - call: future::plan("sequential")
[16:12:15.963] plan(): nbrOfWorkers() = 1
[16:12:15.963] SequentialFuture started (and completed)
[16:12:15.964] - Launch lazy future ... done
[16:12:15.964] run() for ‘SequentialFuture’ ... done
> 
> message("*** %<-% to environment ... DONE")
*** %<-% to environment ... DONE
> 
> source("incl/end.R")
[16:12:15.964] plan(): Setting new future strategy stack:
[16:12:15.964] List of future strategies:
[16:12:15.964] 1. FutureStrategy:
[16:12:15.964]    - args: function (..., envir = parent.frame())
[16:12:15.964]    - tweaked: FALSE
[16:12:15.964]    - call: future::plan(oplan)
[16:12:15.975] plan(): nbrOfWorkers() = 1
> 
