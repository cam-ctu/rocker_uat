
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:44:21.507] plan(): Setting new future strategy stack:
[17:44:21.508] List of future strategies:
[17:44:21.508] 1. sequential:
[17:44:21.508]    - args: function (..., envir = parent.frame())
[17:44:21.508]    - tweaked: FALSE
[17:44:21.508]    - call: future::plan("sequential")
[17:44:21.522] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[17:44:21.532] plan(): Setting new future strategy stack:
[17:44:21.532] List of future strategies:
[17:44:21.532] 1. sequential:
[17:44:21.532]    - args: function (..., envir = parent.frame())
[17:44:21.532]    - tweaked: FALSE
[17:44:21.532]    - call: NULL
[17:44:21.544] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[17:44:21.550] plan(): Setting new future strategy stack:
[17:44:21.551] List of future strategies:
[17:44:21.551] 1. sequential:
[17:44:21.551]    - args: function (..., envir = parent.frame())
[17:44:21.551]    - tweaked: FALSE
[17:44:21.551]    - call: NULL
[17:44:21.551] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:44:21.554] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:21.554] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:21.554] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:21.554] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:21.554] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:21.554] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:21.555] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:21.556] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:21.556] R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:21.557] Coercing from character to numeric: ‘0.01’
[17:44:21.557] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[17:44:21.557] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:21.557] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:21.557] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:21.557] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:21.557] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:21.558] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:21.558] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:21.558] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:21.558] Setting plan('default')
[17:44:21.558] plan(): Setting new future strategy stack:
[17:44:21.558] List of future strategies:
[17:44:21.558] 1. sequential:
[17:44:21.558]    - args: function (..., envir = parent.frame())
[17:44:21.558]    - tweaked: FALSE
[17:44:21.558]    - call: NULL
[17:44:21.558] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:44:21.559] plan(): Setting new future strategy stack:
[17:44:21.559] List of future strategies:
[17:44:21.559] 1. sequential:
[17:44:21.559]    - args: function (..., envir = parent.frame())
[17:44:21.559]    - tweaked: FALSE
[17:44:21.559]    - call: NULL
[17:44:21.559] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:44:21.560] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:21.560] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:21.560] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:21.561] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:21.562] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:21.563] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:21.564] R command-line argument: -p 1
[17:44:21.564]  => options(future.plan = sequential)
[17:44:21.564] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:21.564] Setting plan('default')
[17:44:21.564] plan(): Setting new future strategy stack:
[17:44:21.564] List of future strategies:
[17:44:21.564] 1. sequential:
[17:44:21.564]    - args: function (..., envir = parent.frame())
[17:44:21.564]    - tweaked: FALSE
[17:44:21.564]    - call: NULL
[17:44:21.565] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:44:21.565] plan(): Setting new future strategy stack:
[17:44:21.565] List of future strategies:
[17:44:21.565] 1. sequential:
[17:44:21.565]    - args: function (..., envir = parent.frame())
[17:44:21.565]    - tweaked: FALSE
[17:44:21.565]    - call: NULL
[17:44:21.565] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[17:44:21.566] plan(): Setting new future strategy stack:
[17:44:21.566] List of future strategies:
[17:44:21.566] 1. sequential:
[17:44:21.566]    - args: function (..., envir = parent.frame())
[17:44:21.566]    - tweaked: FALSE
[17:44:21.566]    - call: NULL
[17:44:21.566] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[17:44:21.567] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:21.567] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:21.567] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:21.567] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:21.567] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:21.567] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:21.568] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:21.569] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:21.570] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:21.570] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:21.570] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:21.570] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:21.570] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:21.570] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:21.570] Setting plan('default')
[17:44:21.570] plan(): Setting new future strategy stack:
[17:44:21.570] List of future strategies:
[17:44:21.570] 1. sequential:
[17:44:21.570]    - args: function (..., envir = parent.frame())
[17:44:21.570]    - tweaked: FALSE
[17:44:21.570]    - call: NULL
[17:44:21.571] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[17:44:21.571] plan(): Setting new future strategy stack:
[17:44:21.571] List of future strategies:
[17:44:21.571] 1. sequential:
[17:44:21.571]    - args: function (..., envir = parent.frame())
[17:44:21.571]    - tweaked: FALSE
[17:44:21.571]    - call: NULL
[17:44:21.572] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[17:44:21.573] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:21.573] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:21.573] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:21.573] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:21.573] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:21.573] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:21.573] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:21.573] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:21.574] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:21.575] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:21.576] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:21.576] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:21.576] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:21.576] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:21.576] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:21.576] R command-line argument: -p 2
[17:44:21.576]  => options(future.plan = tweak(multisession, workers = 2))
[17:44:21.579] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:21.579] Setting plan('default')
[17:44:21.579] plan(): Setting new future strategy stack:
[17:44:21.579] List of future strategies:
[17:44:21.579] 1. multisession:
[17:44:21.579]    - args: function (..., workers = 2L, envir = parent.frame())
[17:44:21.579]    - tweaked: TRUE
[17:44:21.579]    - call: NULL
[17:44:21.580] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[17:44:21.580] plan(): Setting new future strategy stack:
[17:44:21.580] List of future strategies:
[17:44:21.580] 1. multisession:
[17:44:21.580]    - args: function (..., workers = 2L, envir = parent.frame())
[17:44:21.580]    - tweaked: TRUE
[17:44:21.580]    - call: NULL
[17:44:21.581] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:21.581] multisession:
[17:44:21.581] - args: function (..., workers = 2L, envir = parent.frame())
[17:44:21.581] - tweaked: TRUE
[17:44:21.581] - call: NULL
[17:44:21.582] getGlobalsAndPackages() ...
[17:44:21.582] Not searching for globals
[17:44:21.583] - globals: [0] <none>
[17:44:21.583] getGlobalsAndPackages() ... DONE
[17:44:21.583] [local output] makeClusterPSOCK() ...
[17:44:21.614] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:44:21.620] [local output] Base port: 11549
[17:44:21.620] [local output] Getting setup options for 2 cluster nodes ...
[17:44:21.620] [local output]  - Node 1 of 2 ...
[17:44:21.620] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:21.621] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d0927d9f37df.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d0927d9f37df.pid")'’
[17:44:21.813] - Possible to infer worker's PID: TRUE
[17:44:21.813] [local output] Rscript port: 11549

[17:44:21.813] [local output]  - Node 2 of 2 ...
[17:44:21.814] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:21.814] [local output] Rscript port: 11549

[17:44:21.815] [local output] Getting setup options for 2 cluster nodes ... done
[17:44:21.815] [local output]  - Parallel setup requested for some PSOCK nodes
[17:44:21.815] [local output] Setting up PSOCK nodes in parallel
[17:44:21.816] List of 36
[17:44:21.816]  $ worker          : chr "localhost"
[17:44:21.816]   ..- attr(*, "localhost")= logi TRUE
[17:44:21.816]  $ master          : chr "localhost"
[17:44:21.816]  $ port            : int 11549
[17:44:21.816]  $ connectTimeout  : num 120
[17:44:21.816]  $ timeout         : num 2592000
[17:44:21.816]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:44:21.816]  $ homogeneous     : logi TRUE
[17:44:21.816]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:44:21.816]  $ rscript_envs    : NULL
[17:44:21.816]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:21.816]  $ rscript_startup : NULL
[17:44:21.816]  $ rscript_sh      : chr "sh"
[17:44:21.816]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:21.816]  $ methods         : logi TRUE
[17:44:21.816]  $ socketOptions   : chr "no-delay"
[17:44:21.816]  $ useXDR          : logi FALSE
[17:44:21.816]  $ outfile         : chr "/dev/null"
[17:44:21.816]  $ renice          : int NA
[17:44:21.816]  $ rshcmd          : NULL
[17:44:21.816]  $ user            : chr(0) 
[17:44:21.816]  $ revtunnel       : logi FALSE
[17:44:21.816]  $ rshlogfile      : NULL
[17:44:21.816]  $ rshopts         : chr(0) 
[17:44:21.816]  $ rank            : int 1
[17:44:21.816]  $ manual          : logi FALSE
[17:44:21.816]  $ dryrun          : logi FALSE
[17:44:21.816]  $ quiet           : logi FALSE
[17:44:21.816]  $ setup_strategy  : chr "parallel"
[17:44:21.816]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:21.816]  $ pidfile         : chr "/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d0927d9f37df.pid"
[17:44:21.816]  $ rshcmd_label    : NULL
[17:44:21.816]  $ rsh_call        : NULL
[17:44:21.816]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:21.816]  $ localMachine    : logi TRUE
[17:44:21.816]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:44:21.816]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:44:21.816]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:44:21.816]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:44:21.816]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:44:21.816]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:44:21.816]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:44:21.816]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:44:21.816]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:44:21.816]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:44:21.816]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:44:21.816]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:44:21.816]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:44:21.816]  $ arguments       :List of 28
[17:44:21.816]   ..$ worker          : chr "localhost"
[17:44:21.816]   ..$ master          : NULL
[17:44:21.816]   ..$ port            : int 11549
[17:44:21.816]   ..$ connectTimeout  : num 120
[17:44:21.816]   ..$ timeout         : num 2592000
[17:44:21.816]   ..$ rscript         : NULL
[17:44:21.816]   ..$ homogeneous     : NULL
[17:44:21.816]   ..$ rscript_args    : NULL
[17:44:21.816]   ..$ rscript_envs    : NULL
[17:44:21.816]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:21.816]   ..$ rscript_startup : NULL
[17:44:21.816]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:44:21.816]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:21.816]   ..$ methods         : logi TRUE
[17:44:21.816]   ..$ socketOptions   : chr "no-delay"
[17:44:21.816]   ..$ useXDR          : logi FALSE
[17:44:21.816]   ..$ outfile         : chr "/dev/null"
[17:44:21.816]   ..$ renice          : int NA
[17:44:21.816]   ..$ rshcmd          : NULL
[17:44:21.816]   ..$ user            : NULL
[17:44:21.816]   ..$ revtunnel       : logi NA
[17:44:21.816]   ..$ rshlogfile      : NULL
[17:44:21.816]   ..$ rshopts         : NULL
[17:44:21.816]   ..$ rank            : int 1
[17:44:21.816]   ..$ manual          : logi FALSE
[17:44:21.816]   ..$ dryrun          : logi FALSE
[17:44:21.816]   ..$ quiet           : logi FALSE
[17:44:21.816]   ..$ setup_strategy  : chr "parallel"
[17:44:21.816]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:44:21.832] [local output] System call to launch all workers:
[17:44:21.832] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d0927d9f37df.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11549 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:44:21.832] [local output] Starting PSOCK main server
[17:44:21.834] [local output] Workers launched
[17:44:21.834] [local output] Waiting for workers to connect back
[17:44:21.834]  - [local output] 0 workers out of 2 ready
[17:44:22.092]  - [local output] 0 workers out of 2 ready
[17:44:22.092]  - [local output] 1 workers out of 2 ready
[17:44:22.105]  - [local output] 1 workers out of 2 ready
[17:44:22.105]  - [local output] 2 workers out of 2 ready
[17:44:22.105] [local output] Launching of workers completed
[17:44:22.106] [local output] Collecting session information from workers
[17:44:22.107] [local output]  - Worker #1 of 2
[17:44:22.107] [local output]  - Worker #2 of 2
[17:44:22.107] [local output] makeClusterPSOCK() ... done
[17:44:22.120] Packages needed by the future expression (n = 0): <none>
[17:44:22.120] Packages needed by future strategies (n = 0): <none>
[17:44:22.121] {
[17:44:22.121]     {
[17:44:22.121]         {
[17:44:22.121]             ...future.startTime <- base::Sys.time()
[17:44:22.121]             {
[17:44:22.121]                 {
[17:44:22.121]                   {
[17:44:22.121]                     {
[17:44:22.121]                       base::local({
[17:44:22.121]                         has_future <- base::requireNamespace("future", 
[17:44:22.121]                           quietly = TRUE)
[17:44:22.121]                         if (has_future) {
[17:44:22.121]                           ns <- base::getNamespace("future")
[17:44:22.121]                           version <- ns[[".package"]][["version"]]
[17:44:22.121]                           if (is.null(version)) 
[17:44:22.121]                             version <- utils::packageVersion("future")
[17:44:22.121]                         }
[17:44:22.121]                         else {
[17:44:22.121]                           version <- NULL
[17:44:22.121]                         }
[17:44:22.121]                         if (!has_future || version < "1.8.0") {
[17:44:22.121]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:22.121]                             "", base::R.version$version.string), 
[17:44:22.121]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:22.121]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:22.121]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:22.121]                               "release", "version")], collapse = " "), 
[17:44:22.121]                             hostname = base::Sys.info()[["nodename"]])
[17:44:22.121]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:22.121]                             info)
[17:44:22.121]                           info <- base::paste(info, collapse = "; ")
[17:44:22.121]                           if (!has_future) {
[17:44:22.121]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:22.121]                               info)
[17:44:22.121]                           }
[17:44:22.121]                           else {
[17:44:22.121]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:22.121]                               info, version)
[17:44:22.121]                           }
[17:44:22.121]                           base::stop(msg)
[17:44:22.121]                         }
[17:44:22.121]                       })
[17:44:22.121]                     }
[17:44:22.121]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:22.121]                     base::options(mc.cores = 1L)
[17:44:22.121]                   }
[17:44:22.121]                   options(future.plan = NULL)
[17:44:22.121]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:22.121]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:22.121]                 }
[17:44:22.121]                 ...future.workdir <- getwd()
[17:44:22.121]             }
[17:44:22.121]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:22.121]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:22.121]         }
[17:44:22.121]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:22.121]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:22.121]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:22.121]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:22.121]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:22.121]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:22.121]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:22.121]             base::names(...future.oldOptions))
[17:44:22.121]     }
[17:44:22.121]     if (FALSE) {
[17:44:22.121]     }
[17:44:22.121]     else {
[17:44:22.121]         if (TRUE) {
[17:44:22.121]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:22.121]                 open = "w")
[17:44:22.121]         }
[17:44:22.121]         else {
[17:44:22.121]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:22.121]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:22.121]         }
[17:44:22.121]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:22.121]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:22.121]             base::sink(type = "output", split = FALSE)
[17:44:22.121]             base::close(...future.stdout)
[17:44:22.121]         }, add = TRUE)
[17:44:22.121]     }
[17:44:22.121]     ...future.frame <- base::sys.nframe()
[17:44:22.121]     ...future.conditions <- base::list()
[17:44:22.121]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:22.121]     if (FALSE) {
[17:44:22.121]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:22.121]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:22.121]     }
[17:44:22.121]     ...future.result <- base::tryCatch({
[17:44:22.121]         base::withCallingHandlers({
[17:44:22.121]             ...future.value <- base::withVisible(base::local({
[17:44:22.121]                 ...future.makeSendCondition <- local({
[17:44:22.121]                   sendCondition <- NULL
[17:44:22.121]                   function(frame = 1L) {
[17:44:22.121]                     if (is.function(sendCondition)) 
[17:44:22.121]                       return(sendCondition)
[17:44:22.121]                     ns <- getNamespace("parallel")
[17:44:22.121]                     if (exists("sendData", mode = "function", 
[17:44:22.121]                       envir = ns)) {
[17:44:22.121]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:22.121]                         envir = ns)
[17:44:22.121]                       envir <- sys.frame(frame)
[17:44:22.121]                       master <- NULL
[17:44:22.121]                       while (!identical(envir, .GlobalEnv) && 
[17:44:22.121]                         !identical(envir, emptyenv())) {
[17:44:22.121]                         if (exists("master", mode = "list", envir = envir, 
[17:44:22.121]                           inherits = FALSE)) {
[17:44:22.121]                           master <- get("master", mode = "list", 
[17:44:22.121]                             envir = envir, inherits = FALSE)
[17:44:22.121]                           if (inherits(master, c("SOCKnode", 
[17:44:22.121]                             "SOCK0node"))) {
[17:44:22.121]                             sendCondition <<- function(cond) {
[17:44:22.121]                               data <- list(type = "VALUE", value = cond, 
[17:44:22.121]                                 success = TRUE)
[17:44:22.121]                               parallel_sendData(master, data)
[17:44:22.121]                             }
[17:44:22.121]                             return(sendCondition)
[17:44:22.121]                           }
[17:44:22.121]                         }
[17:44:22.121]                         frame <- frame + 1L
[17:44:22.121]                         envir <- sys.frame(frame)
[17:44:22.121]                       }
[17:44:22.121]                     }
[17:44:22.121]                     sendCondition <<- function(cond) NULL
[17:44:22.121]                   }
[17:44:22.121]                 })
[17:44:22.121]                 withCallingHandlers({
[17:44:22.121]                   NA
[17:44:22.121]                 }, immediateCondition = function(cond) {
[17:44:22.121]                   sendCondition <- ...future.makeSendCondition()
[17:44:22.121]                   sendCondition(cond)
[17:44:22.121]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.121]                   {
[17:44:22.121]                     inherits <- base::inherits
[17:44:22.121]                     invokeRestart <- base::invokeRestart
[17:44:22.121]                     is.null <- base::is.null
[17:44:22.121]                     muffled <- FALSE
[17:44:22.121]                     if (inherits(cond, "message")) {
[17:44:22.121]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:22.121]                       if (muffled) 
[17:44:22.121]                         invokeRestart("muffleMessage")
[17:44:22.121]                     }
[17:44:22.121]                     else if (inherits(cond, "warning")) {
[17:44:22.121]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:22.121]                       if (muffled) 
[17:44:22.121]                         invokeRestart("muffleWarning")
[17:44:22.121]                     }
[17:44:22.121]                     else if (inherits(cond, "condition")) {
[17:44:22.121]                       if (!is.null(pattern)) {
[17:44:22.121]                         computeRestarts <- base::computeRestarts
[17:44:22.121]                         grepl <- base::grepl
[17:44:22.121]                         restarts <- computeRestarts(cond)
[17:44:22.121]                         for (restart in restarts) {
[17:44:22.121]                           name <- restart$name
[17:44:22.121]                           if (is.null(name)) 
[17:44:22.121]                             next
[17:44:22.121]                           if (!grepl(pattern, name)) 
[17:44:22.121]                             next
[17:44:22.121]                           invokeRestart(restart)
[17:44:22.121]                           muffled <- TRUE
[17:44:22.121]                           break
[17:44:22.121]                         }
[17:44:22.121]                       }
[17:44:22.121]                     }
[17:44:22.121]                     invisible(muffled)
[17:44:22.121]                   }
[17:44:22.121]                   muffleCondition(cond)
[17:44:22.121]                 })
[17:44:22.121]             }))
[17:44:22.121]             future::FutureResult(value = ...future.value$value, 
[17:44:22.121]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:22.121]                   ...future.rng), globalenv = if (FALSE) 
[17:44:22.121]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:22.121]                     ...future.globalenv.names))
[17:44:22.121]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:22.121]         }, condition = base::local({
[17:44:22.121]             c <- base::c
[17:44:22.121]             inherits <- base::inherits
[17:44:22.121]             invokeRestart <- base::invokeRestart
[17:44:22.121]             length <- base::length
[17:44:22.121]             list <- base::list
[17:44:22.121]             seq.int <- base::seq.int
[17:44:22.121]             signalCondition <- base::signalCondition
[17:44:22.121]             sys.calls <- base::sys.calls
[17:44:22.121]             `[[` <- base::`[[`
[17:44:22.121]             `+` <- base::`+`
[17:44:22.121]             `<<-` <- base::`<<-`
[17:44:22.121]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:22.121]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:22.121]                   3L)]
[17:44:22.121]             }
[17:44:22.121]             function(cond) {
[17:44:22.121]                 is_error <- inherits(cond, "error")
[17:44:22.121]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:22.121]                   NULL)
[17:44:22.121]                 if (is_error) {
[17:44:22.121]                   sessionInformation <- function() {
[17:44:22.121]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:22.121]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:22.121]                       search = base::search(), system = base::Sys.info())
[17:44:22.121]                   }
[17:44:22.121]                   ...future.conditions[[length(...future.conditions) + 
[17:44:22.121]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:22.121]                     cond$call), session = sessionInformation(), 
[17:44:22.121]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:22.121]                   signalCondition(cond)
[17:44:22.121]                 }
[17:44:22.121]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:22.121]                 "immediateCondition"))) {
[17:44:22.121]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:22.121]                   ...future.conditions[[length(...future.conditions) + 
[17:44:22.121]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:22.121]                   if (TRUE && !signal) {
[17:44:22.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.121]                     {
[17:44:22.121]                       inherits <- base::inherits
[17:44:22.121]                       invokeRestart <- base::invokeRestart
[17:44:22.121]                       is.null <- base::is.null
[17:44:22.121]                       muffled <- FALSE
[17:44:22.121]                       if (inherits(cond, "message")) {
[17:44:22.121]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:22.121]                         if (muffled) 
[17:44:22.121]                           invokeRestart("muffleMessage")
[17:44:22.121]                       }
[17:44:22.121]                       else if (inherits(cond, "warning")) {
[17:44:22.121]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:22.121]                         if (muffled) 
[17:44:22.121]                           invokeRestart("muffleWarning")
[17:44:22.121]                       }
[17:44:22.121]                       else if (inherits(cond, "condition")) {
[17:44:22.121]                         if (!is.null(pattern)) {
[17:44:22.121]                           computeRestarts <- base::computeRestarts
[17:44:22.121]                           grepl <- base::grepl
[17:44:22.121]                           restarts <- computeRestarts(cond)
[17:44:22.121]                           for (restart in restarts) {
[17:44:22.121]                             name <- restart$name
[17:44:22.121]                             if (is.null(name)) 
[17:44:22.121]                               next
[17:44:22.121]                             if (!grepl(pattern, name)) 
[17:44:22.121]                               next
[17:44:22.121]                             invokeRestart(restart)
[17:44:22.121]                             muffled <- TRUE
[17:44:22.121]                             break
[17:44:22.121]                           }
[17:44:22.121]                         }
[17:44:22.121]                       }
[17:44:22.121]                       invisible(muffled)
[17:44:22.121]                     }
[17:44:22.121]                     muffleCondition(cond, pattern = "^muffle")
[17:44:22.121]                   }
[17:44:22.121]                 }
[17:44:22.121]                 else {
[17:44:22.121]                   if (TRUE) {
[17:44:22.121]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.121]                     {
[17:44:22.121]                       inherits <- base::inherits
[17:44:22.121]                       invokeRestart <- base::invokeRestart
[17:44:22.121]                       is.null <- base::is.null
[17:44:22.121]                       muffled <- FALSE
[17:44:22.121]                       if (inherits(cond, "message")) {
[17:44:22.121]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:22.121]                         if (muffled) 
[17:44:22.121]                           invokeRestart("muffleMessage")
[17:44:22.121]                       }
[17:44:22.121]                       else if (inherits(cond, "warning")) {
[17:44:22.121]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:22.121]                         if (muffled) 
[17:44:22.121]                           invokeRestart("muffleWarning")
[17:44:22.121]                       }
[17:44:22.121]                       else if (inherits(cond, "condition")) {
[17:44:22.121]                         if (!is.null(pattern)) {
[17:44:22.121]                           computeRestarts <- base::computeRestarts
[17:44:22.121]                           grepl <- base::grepl
[17:44:22.121]                           restarts <- computeRestarts(cond)
[17:44:22.121]                           for (restart in restarts) {
[17:44:22.121]                             name <- restart$name
[17:44:22.121]                             if (is.null(name)) 
[17:44:22.121]                               next
[17:44:22.121]                             if (!grepl(pattern, name)) 
[17:44:22.121]                               next
[17:44:22.121]                             invokeRestart(restart)
[17:44:22.121]                             muffled <- TRUE
[17:44:22.121]                             break
[17:44:22.121]                           }
[17:44:22.121]                         }
[17:44:22.121]                       }
[17:44:22.121]                       invisible(muffled)
[17:44:22.121]                     }
[17:44:22.121]                     muffleCondition(cond, pattern = "^muffle")
[17:44:22.121]                   }
[17:44:22.121]                 }
[17:44:22.121]             }
[17:44:22.121]         }))
[17:44:22.121]     }, error = function(ex) {
[17:44:22.121]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:22.121]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:22.121]                 ...future.rng), started = ...future.startTime, 
[17:44:22.121]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:22.121]             version = "1.8"), class = "FutureResult")
[17:44:22.121]     }, finally = {
[17:44:22.121]         if (!identical(...future.workdir, getwd())) 
[17:44:22.121]             setwd(...future.workdir)
[17:44:22.121]         {
[17:44:22.121]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:22.121]                 ...future.oldOptions$nwarnings <- NULL
[17:44:22.121]             }
[17:44:22.121]             base::options(...future.oldOptions)
[17:44:22.121]             if (.Platform$OS.type == "windows") {
[17:44:22.121]                 old_names <- names(...future.oldEnvVars)
[17:44:22.121]                 envs <- base::Sys.getenv()
[17:44:22.121]                 names <- names(envs)
[17:44:22.121]                 common <- intersect(names, old_names)
[17:44:22.121]                 added <- setdiff(names, old_names)
[17:44:22.121]                 removed <- setdiff(old_names, names)
[17:44:22.121]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:22.121]                   envs[common]]
[17:44:22.121]                 NAMES <- toupper(changed)
[17:44:22.121]                 args <- list()
[17:44:22.121]                 for (kk in seq_along(NAMES)) {
[17:44:22.121]                   name <- changed[[kk]]
[17:44:22.121]                   NAME <- NAMES[[kk]]
[17:44:22.121]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.121]                     next
[17:44:22.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:22.121]                 }
[17:44:22.121]                 NAMES <- toupper(added)
[17:44:22.121]                 for (kk in seq_along(NAMES)) {
[17:44:22.121]                   name <- added[[kk]]
[17:44:22.121]                   NAME <- NAMES[[kk]]
[17:44:22.121]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.121]                     next
[17:44:22.121]                   args[[name]] <- ""
[17:44:22.121]                 }
[17:44:22.121]                 NAMES <- toupper(removed)
[17:44:22.121]                 for (kk in seq_along(NAMES)) {
[17:44:22.121]                   name <- removed[[kk]]
[17:44:22.121]                   NAME <- NAMES[[kk]]
[17:44:22.121]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.121]                     next
[17:44:22.121]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:22.121]                 }
[17:44:22.121]                 if (length(args) > 0) 
[17:44:22.121]                   base::do.call(base::Sys.setenv, args = args)
[17:44:22.121]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:22.121]             }
[17:44:22.121]             else {
[17:44:22.121]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:22.121]             }
[17:44:22.121]             {
[17:44:22.121]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:22.121]                   0L) {
[17:44:22.121]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:22.121]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:22.121]                   base::options(opts)
[17:44:22.121]                 }
[17:44:22.121]                 {
[17:44:22.121]                   {
[17:44:22.121]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:22.121]                     NULL
[17:44:22.121]                   }
[17:44:22.121]                   options(future.plan = function (..., workers = 2L, 
[17:44:22.121]                     envir = parent.frame()) 
[17:44:22.121]                   strategy(..., workers = workers, envir = envir))
[17:44:22.121]                   if (is.na(NA_character_)) 
[17:44:22.121]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:22.121]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:22.121]                   future::plan(list(function (..., workers = 2L, 
[17:44:22.121]                     envir = parent.frame()) 
[17:44:22.121]                   strategy(..., workers = workers, envir = envir)), 
[17:44:22.121]                     .cleanup = FALSE, .init = FALSE)
[17:44:22.121]                 }
[17:44:22.121]             }
[17:44:22.121]         }
[17:44:22.121]     })
[17:44:22.121]     if (TRUE) {
[17:44:22.121]         base::sink(type = "output", split = FALSE)
[17:44:22.121]         if (TRUE) {
[17:44:22.121]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:22.121]         }
[17:44:22.121]         else {
[17:44:22.121]             ...future.result["stdout"] <- base::list(NULL)
[17:44:22.121]         }
[17:44:22.121]         base::close(...future.stdout)
[17:44:22.121]         ...future.stdout <- NULL
[17:44:22.121]     }
[17:44:22.121]     ...future.result$conditions <- ...future.conditions
[17:44:22.121]     ...future.result$finished <- base::Sys.time()
[17:44:22.121]     ...future.result
[17:44:22.121] }
[17:44:22.195] MultisessionFuture started
[17:44:22.195] result() for ClusterFuture ...
[17:44:22.196] receiveMessageFromWorker() for ClusterFuture ...
[17:44:22.196] - Validating connection of MultisessionFuture
[17:44:22.222] - received message: FutureResult
[17:44:22.222] - Received FutureResult
[17:44:22.225] - Erased future from FutureRegistry
[17:44:22.225] result() for ClusterFuture ...
[17:44:22.225] - result already collected: FutureResult
[17:44:22.225] result() for ClusterFuture ... done
[17:44:22.225] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:22.225] result() for ClusterFuture ... done
[17:44:22.226] result() for ClusterFuture ...
[17:44:22.226] - result already collected: FutureResult
[17:44:22.226] result() for ClusterFuture ... done
[17:44:22.226] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:22.226] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[17:44:22.227] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:22.228] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:22.228] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:22.228] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:22.228] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:22.228] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:22.228] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:22.228] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:22.229] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:22.230] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:22.231] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[17:44:22.232] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:22.232] Setting plan('default')
[17:44:22.232] plan(): Setting new future strategy stack:
[17:44:22.232] List of future strategies:
[17:44:22.232] 1. sequential:
[17:44:22.232]    - args: function (..., envir = parent.frame())
[17:44:22.232]    - tweaked: FALSE
[17:44:22.232]    - call: NULL
[17:44:22.233] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:44:22.234] plan(): Setting new future strategy stack:
[17:44:22.234] List of future strategies:
[17:44:22.234] 1. sequential:
[17:44:22.234]    - args: function (..., envir = parent.frame())
[17:44:22.234]    - tweaked: FALSE
[17:44:22.234]    - call: NULL
[17:44:22.235] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[17:44:22.236] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:22.236] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:22.236] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:22.237] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:22.237] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:22.237] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:22.237] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:22.237] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:22.238] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:22.238] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:22.238] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:22.238] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:22.238] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:22.238] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:22.239] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:22.239] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:22.239] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:22.239] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:22.239] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:22.240] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:22.240] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:22.240] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:22.240] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:22.240] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:22.241] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:22.241] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:22.241] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:22.241] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:22.241] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:22.241] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[17:44:22.242] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:22.242] Setting plan('default')
[17:44:22.243] plan(): Setting new future strategy stack:
[17:44:22.243] List of future strategies:
[17:44:22.243] 1. sequential:
[17:44:22.243]    - args: function (..., envir = parent.frame())
[17:44:22.243]    - tweaked: FALSE
[17:44:22.243]    - call: NULL
[17:44:22.243] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:44:22.244] plan(): Setting new future strategy stack:
[17:44:22.244] List of future strategies:
[17:44:22.244] 1. sequential:
[17:44:22.244]    - args: function (..., envir = parent.frame())
[17:44:22.244]    - tweaked: FALSE
[17:44:22.244]    - call: NULL
[17:44:22.244] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[17:44:22.245] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:22.245] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:22.246] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:22.247] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:22.247] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:22.247] Environment variable ‘R_FUTURE_PLAN’ not set
[17:44:22.247] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:22.247] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:22.247] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:22.248] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:22.249] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[17:44:22.250] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:22.250] Setting plan('default')
[17:44:22.250] plan(): Setting new future strategy stack:
[17:44:22.250] List of future strategies:
[17:44:22.250] 1. sequential:
[17:44:22.250]    - args: function (..., envir = parent.frame())
[17:44:22.250]    - tweaked: FALSE
[17:44:22.250]    - call: NULL
[17:44:22.251] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[17:44:22.252] plan(): Setting new future strategy stack:
[17:44:22.252] List of future strategies:
[17:44:22.252] 1. sequential:
[17:44:22.252]    - args: function (..., envir = parent.frame())
[17:44:22.252]    - tweaked: FALSE
[17:44:22.252]    - call: NULL
[17:44:22.252] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:44:22.253] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:22.253] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:22.254] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:22.255] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:22.255] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:22.255] R_FUTURE_PLAN=‘multisession’
[17:44:22.255] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:44:22.255] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:22.255] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:22.255] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:22.256] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:22.257] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:22.258] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:22.258] Option 'future.plan' = ‘multisession’
[17:44:22.258] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:22.258] Setting plan('default')
[17:44:22.258] plan(): Setting new future strategy stack:
[17:44:22.258] List of future strategies:
[17:44:22.258] 1. multisession:
[17:44:22.258]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:22.258]    - tweaked: FALSE
[17:44:22.258]    - call: plan("default", .init = FALSE)
[17:44:22.262] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:44:22.263] plan(): Setting new future strategy stack:
[17:44:22.263] List of future strategies:
[17:44:22.263] 1. multisession:
[17:44:22.263]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:22.263]    - tweaked: FALSE
[17:44:22.263]    - call: plan("default")
[17:44:22.263] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:22.263] multisession:
[17:44:22.263] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:22.263] - tweaked: FALSE
[17:44:22.263] - call: plan("default")
[17:44:22.269] getGlobalsAndPackages() ...
[17:44:22.269] Not searching for globals
[17:44:22.269] - globals: [0] <none>
[17:44:22.270] getGlobalsAndPackages() ... DONE
[17:44:22.270] [local output] makeClusterPSOCK() ...
[17:44:22.270] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:44:22.271] [local output] Base port: 11680
[17:44:22.271] [local output] Getting setup options for 2 cluster nodes ...
[17:44:22.271] [local output]  - Node 1 of 2 ...
[17:44:22.271] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:22.272] [local output] Rscript port: 11680

[17:44:22.272] [local output]  - Node 2 of 2 ...
[17:44:22.273] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:22.273] [local output] Rscript port: 11680

[17:44:22.273] [local output] Getting setup options for 2 cluster nodes ... done
[17:44:22.273] [local output]  - Parallel setup requested for some PSOCK nodes
[17:44:22.274] [local output] Setting up PSOCK nodes in parallel
[17:44:22.274] List of 36
[17:44:22.274]  $ worker          : chr "localhost"
[17:44:22.274]   ..- attr(*, "localhost")= logi TRUE
[17:44:22.274]  $ master          : chr "localhost"
[17:44:22.274]  $ port            : int 11680
[17:44:22.274]  $ connectTimeout  : num 120
[17:44:22.274]  $ timeout         : num 2592000
[17:44:22.274]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:44:22.274]  $ homogeneous     : logi TRUE
[17:44:22.274]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:44:22.274]  $ rscript_envs    : NULL
[17:44:22.274]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:22.274]  $ rscript_startup : NULL
[17:44:22.274]  $ rscript_sh      : chr "sh"
[17:44:22.274]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:22.274]  $ methods         : logi TRUE
[17:44:22.274]  $ socketOptions   : chr "no-delay"
[17:44:22.274]  $ useXDR          : logi FALSE
[17:44:22.274]  $ outfile         : chr "/dev/null"
[17:44:22.274]  $ renice          : int NA
[17:44:22.274]  $ rshcmd          : NULL
[17:44:22.274]  $ user            : chr(0) 
[17:44:22.274]  $ revtunnel       : logi FALSE
[17:44:22.274]  $ rshlogfile      : NULL
[17:44:22.274]  $ rshopts         : chr(0) 
[17:44:22.274]  $ rank            : int 1
[17:44:22.274]  $ manual          : logi FALSE
[17:44:22.274]  $ dryrun          : logi FALSE
[17:44:22.274]  $ quiet           : logi FALSE
[17:44:22.274]  $ setup_strategy  : chr "parallel"
[17:44:22.274]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:22.274]  $ pidfile         : chr "/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d0925ed0aea2.pid"
[17:44:22.274]  $ rshcmd_label    : NULL
[17:44:22.274]  $ rsh_call        : NULL
[17:44:22.274]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:22.274]  $ localMachine    : logi TRUE
[17:44:22.274]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:44:22.274]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:44:22.274]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:44:22.274]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:44:22.274]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:44:22.274]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:44:22.274]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:44:22.274]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:44:22.274]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:44:22.274]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:44:22.274]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:44:22.274]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:44:22.274]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:44:22.274]  $ arguments       :List of 28
[17:44:22.274]   ..$ worker          : chr "localhost"
[17:44:22.274]   ..$ master          : NULL
[17:44:22.274]   ..$ port            : int 11680
[17:44:22.274]   ..$ connectTimeout  : num 120
[17:44:22.274]   ..$ timeout         : num 2592000
[17:44:22.274]   ..$ rscript         : NULL
[17:44:22.274]   ..$ homogeneous     : NULL
[17:44:22.274]   ..$ rscript_args    : NULL
[17:44:22.274]   ..$ rscript_envs    : NULL
[17:44:22.274]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:22.274]   ..$ rscript_startup : NULL
[17:44:22.274]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:44:22.274]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:22.274]   ..$ methods         : logi TRUE
[17:44:22.274]   ..$ socketOptions   : chr "no-delay"
[17:44:22.274]   ..$ useXDR          : logi FALSE
[17:44:22.274]   ..$ outfile         : chr "/dev/null"
[17:44:22.274]   ..$ renice          : int NA
[17:44:22.274]   ..$ rshcmd          : NULL
[17:44:22.274]   ..$ user            : NULL
[17:44:22.274]   ..$ revtunnel       : logi NA
[17:44:22.274]   ..$ rshlogfile      : NULL
[17:44:22.274]   ..$ rshopts         : NULL
[17:44:22.274]   ..$ rank            : int 1
[17:44:22.274]   ..$ manual          : logi FALSE
[17:44:22.274]   ..$ dryrun          : logi FALSE
[17:44:22.274]   ..$ quiet           : logi FALSE
[17:44:22.274]   ..$ setup_strategy  : chr "parallel"
[17:44:22.274]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:44:22.291] [local output] System call to launch all workers:
[17:44:22.291] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d0925ed0aea2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11680 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:44:22.291] [local output] Starting PSOCK main server
[17:44:22.292] [local output] Workers launched
[17:44:22.292] [local output] Waiting for workers to connect back
[17:44:22.293]  - [local output] 0 workers out of 2 ready
[17:44:22.532]  - [local output] 0 workers out of 2 ready
[17:44:22.532]  - [local output] 1 workers out of 2 ready
[17:44:22.544]  - [local output] 1 workers out of 2 ready
[17:44:22.544]  - [local output] 2 workers out of 2 ready
[17:44:22.544] [local output] Launching of workers completed
[17:44:22.545] [local output] Collecting session information from workers
[17:44:22.545] [local output]  - Worker #1 of 2
[17:44:22.546] [local output]  - Worker #2 of 2
[17:44:22.546] [local output] makeClusterPSOCK() ... done
[17:44:22.559] Packages needed by the future expression (n = 0): <none>
[17:44:22.559] Packages needed by future strategies (n = 0): <none>
[17:44:22.559] {
[17:44:22.559]     {
[17:44:22.559]         {
[17:44:22.559]             ...future.startTime <- base::Sys.time()
[17:44:22.559]             {
[17:44:22.559]                 {
[17:44:22.559]                   {
[17:44:22.559]                     {
[17:44:22.559]                       base::local({
[17:44:22.559]                         has_future <- base::requireNamespace("future", 
[17:44:22.559]                           quietly = TRUE)
[17:44:22.559]                         if (has_future) {
[17:44:22.559]                           ns <- base::getNamespace("future")
[17:44:22.559]                           version <- ns[[".package"]][["version"]]
[17:44:22.559]                           if (is.null(version)) 
[17:44:22.559]                             version <- utils::packageVersion("future")
[17:44:22.559]                         }
[17:44:22.559]                         else {
[17:44:22.559]                           version <- NULL
[17:44:22.559]                         }
[17:44:22.559]                         if (!has_future || version < "1.8.0") {
[17:44:22.559]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:22.559]                             "", base::R.version$version.string), 
[17:44:22.559]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:22.559]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:22.559]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:22.559]                               "release", "version")], collapse = " "), 
[17:44:22.559]                             hostname = base::Sys.info()[["nodename"]])
[17:44:22.559]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:22.559]                             info)
[17:44:22.559]                           info <- base::paste(info, collapse = "; ")
[17:44:22.559]                           if (!has_future) {
[17:44:22.559]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:22.559]                               info)
[17:44:22.559]                           }
[17:44:22.559]                           else {
[17:44:22.559]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:22.559]                               info, version)
[17:44:22.559]                           }
[17:44:22.559]                           base::stop(msg)
[17:44:22.559]                         }
[17:44:22.559]                       })
[17:44:22.559]                     }
[17:44:22.559]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:22.559]                     base::options(mc.cores = 1L)
[17:44:22.559]                   }
[17:44:22.559]                   options(future.plan = NULL)
[17:44:22.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:22.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:22.559]                 }
[17:44:22.559]                 ...future.workdir <- getwd()
[17:44:22.559]             }
[17:44:22.559]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:22.559]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:22.559]         }
[17:44:22.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:22.559]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:22.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:22.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:22.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:22.559]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:22.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:22.559]             base::names(...future.oldOptions))
[17:44:22.559]     }
[17:44:22.559]     if (FALSE) {
[17:44:22.559]     }
[17:44:22.559]     else {
[17:44:22.559]         if (TRUE) {
[17:44:22.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:22.559]                 open = "w")
[17:44:22.559]         }
[17:44:22.559]         else {
[17:44:22.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:22.559]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:22.559]         }
[17:44:22.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:22.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:22.559]             base::sink(type = "output", split = FALSE)
[17:44:22.559]             base::close(...future.stdout)
[17:44:22.559]         }, add = TRUE)
[17:44:22.559]     }
[17:44:22.559]     ...future.frame <- base::sys.nframe()
[17:44:22.559]     ...future.conditions <- base::list()
[17:44:22.559]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:22.559]     if (FALSE) {
[17:44:22.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:22.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:22.559]     }
[17:44:22.559]     ...future.result <- base::tryCatch({
[17:44:22.559]         base::withCallingHandlers({
[17:44:22.559]             ...future.value <- base::withVisible(base::local({
[17:44:22.559]                 ...future.makeSendCondition <- local({
[17:44:22.559]                   sendCondition <- NULL
[17:44:22.559]                   function(frame = 1L) {
[17:44:22.559]                     if (is.function(sendCondition)) 
[17:44:22.559]                       return(sendCondition)
[17:44:22.559]                     ns <- getNamespace("parallel")
[17:44:22.559]                     if (exists("sendData", mode = "function", 
[17:44:22.559]                       envir = ns)) {
[17:44:22.559]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:22.559]                         envir = ns)
[17:44:22.559]                       envir <- sys.frame(frame)
[17:44:22.559]                       master <- NULL
[17:44:22.559]                       while (!identical(envir, .GlobalEnv) && 
[17:44:22.559]                         !identical(envir, emptyenv())) {
[17:44:22.559]                         if (exists("master", mode = "list", envir = envir, 
[17:44:22.559]                           inherits = FALSE)) {
[17:44:22.559]                           master <- get("master", mode = "list", 
[17:44:22.559]                             envir = envir, inherits = FALSE)
[17:44:22.559]                           if (inherits(master, c("SOCKnode", 
[17:44:22.559]                             "SOCK0node"))) {
[17:44:22.559]                             sendCondition <<- function(cond) {
[17:44:22.559]                               data <- list(type = "VALUE", value = cond, 
[17:44:22.559]                                 success = TRUE)
[17:44:22.559]                               parallel_sendData(master, data)
[17:44:22.559]                             }
[17:44:22.559]                             return(sendCondition)
[17:44:22.559]                           }
[17:44:22.559]                         }
[17:44:22.559]                         frame <- frame + 1L
[17:44:22.559]                         envir <- sys.frame(frame)
[17:44:22.559]                       }
[17:44:22.559]                     }
[17:44:22.559]                     sendCondition <<- function(cond) NULL
[17:44:22.559]                   }
[17:44:22.559]                 })
[17:44:22.559]                 withCallingHandlers({
[17:44:22.559]                   NA
[17:44:22.559]                 }, immediateCondition = function(cond) {
[17:44:22.559]                   sendCondition <- ...future.makeSendCondition()
[17:44:22.559]                   sendCondition(cond)
[17:44:22.559]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.559]                   {
[17:44:22.559]                     inherits <- base::inherits
[17:44:22.559]                     invokeRestart <- base::invokeRestart
[17:44:22.559]                     is.null <- base::is.null
[17:44:22.559]                     muffled <- FALSE
[17:44:22.559]                     if (inherits(cond, "message")) {
[17:44:22.559]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:22.559]                       if (muffled) 
[17:44:22.559]                         invokeRestart("muffleMessage")
[17:44:22.559]                     }
[17:44:22.559]                     else if (inherits(cond, "warning")) {
[17:44:22.559]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:22.559]                       if (muffled) 
[17:44:22.559]                         invokeRestart("muffleWarning")
[17:44:22.559]                     }
[17:44:22.559]                     else if (inherits(cond, "condition")) {
[17:44:22.559]                       if (!is.null(pattern)) {
[17:44:22.559]                         computeRestarts <- base::computeRestarts
[17:44:22.559]                         grepl <- base::grepl
[17:44:22.559]                         restarts <- computeRestarts(cond)
[17:44:22.559]                         for (restart in restarts) {
[17:44:22.559]                           name <- restart$name
[17:44:22.559]                           if (is.null(name)) 
[17:44:22.559]                             next
[17:44:22.559]                           if (!grepl(pattern, name)) 
[17:44:22.559]                             next
[17:44:22.559]                           invokeRestart(restart)
[17:44:22.559]                           muffled <- TRUE
[17:44:22.559]                           break
[17:44:22.559]                         }
[17:44:22.559]                       }
[17:44:22.559]                     }
[17:44:22.559]                     invisible(muffled)
[17:44:22.559]                   }
[17:44:22.559]                   muffleCondition(cond)
[17:44:22.559]                 })
[17:44:22.559]             }))
[17:44:22.559]             future::FutureResult(value = ...future.value$value, 
[17:44:22.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:22.559]                   ...future.rng), globalenv = if (FALSE) 
[17:44:22.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:22.559]                     ...future.globalenv.names))
[17:44:22.559]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:22.559]         }, condition = base::local({
[17:44:22.559]             c <- base::c
[17:44:22.559]             inherits <- base::inherits
[17:44:22.559]             invokeRestart <- base::invokeRestart
[17:44:22.559]             length <- base::length
[17:44:22.559]             list <- base::list
[17:44:22.559]             seq.int <- base::seq.int
[17:44:22.559]             signalCondition <- base::signalCondition
[17:44:22.559]             sys.calls <- base::sys.calls
[17:44:22.559]             `[[` <- base::`[[`
[17:44:22.559]             `+` <- base::`+`
[17:44:22.559]             `<<-` <- base::`<<-`
[17:44:22.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:22.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:22.559]                   3L)]
[17:44:22.559]             }
[17:44:22.559]             function(cond) {
[17:44:22.559]                 is_error <- inherits(cond, "error")
[17:44:22.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:22.559]                   NULL)
[17:44:22.559]                 if (is_error) {
[17:44:22.559]                   sessionInformation <- function() {
[17:44:22.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:22.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:22.559]                       search = base::search(), system = base::Sys.info())
[17:44:22.559]                   }
[17:44:22.559]                   ...future.conditions[[length(...future.conditions) + 
[17:44:22.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:22.559]                     cond$call), session = sessionInformation(), 
[17:44:22.559]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:22.559]                   signalCondition(cond)
[17:44:22.559]                 }
[17:44:22.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:22.559]                 "immediateCondition"))) {
[17:44:22.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:22.559]                   ...future.conditions[[length(...future.conditions) + 
[17:44:22.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:22.559]                   if (TRUE && !signal) {
[17:44:22.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.559]                     {
[17:44:22.559]                       inherits <- base::inherits
[17:44:22.559]                       invokeRestart <- base::invokeRestart
[17:44:22.559]                       is.null <- base::is.null
[17:44:22.559]                       muffled <- FALSE
[17:44:22.559]                       if (inherits(cond, "message")) {
[17:44:22.559]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:22.559]                         if (muffled) 
[17:44:22.559]                           invokeRestart("muffleMessage")
[17:44:22.559]                       }
[17:44:22.559]                       else if (inherits(cond, "warning")) {
[17:44:22.559]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:22.559]                         if (muffled) 
[17:44:22.559]                           invokeRestart("muffleWarning")
[17:44:22.559]                       }
[17:44:22.559]                       else if (inherits(cond, "condition")) {
[17:44:22.559]                         if (!is.null(pattern)) {
[17:44:22.559]                           computeRestarts <- base::computeRestarts
[17:44:22.559]                           grepl <- base::grepl
[17:44:22.559]                           restarts <- computeRestarts(cond)
[17:44:22.559]                           for (restart in restarts) {
[17:44:22.559]                             name <- restart$name
[17:44:22.559]                             if (is.null(name)) 
[17:44:22.559]                               next
[17:44:22.559]                             if (!grepl(pattern, name)) 
[17:44:22.559]                               next
[17:44:22.559]                             invokeRestart(restart)
[17:44:22.559]                             muffled <- TRUE
[17:44:22.559]                             break
[17:44:22.559]                           }
[17:44:22.559]                         }
[17:44:22.559]                       }
[17:44:22.559]                       invisible(muffled)
[17:44:22.559]                     }
[17:44:22.559]                     muffleCondition(cond, pattern = "^muffle")
[17:44:22.559]                   }
[17:44:22.559]                 }
[17:44:22.559]                 else {
[17:44:22.559]                   if (TRUE) {
[17:44:22.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.559]                     {
[17:44:22.559]                       inherits <- base::inherits
[17:44:22.559]                       invokeRestart <- base::invokeRestart
[17:44:22.559]                       is.null <- base::is.null
[17:44:22.559]                       muffled <- FALSE
[17:44:22.559]                       if (inherits(cond, "message")) {
[17:44:22.559]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:22.559]                         if (muffled) 
[17:44:22.559]                           invokeRestart("muffleMessage")
[17:44:22.559]                       }
[17:44:22.559]                       else if (inherits(cond, "warning")) {
[17:44:22.559]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:22.559]                         if (muffled) 
[17:44:22.559]                           invokeRestart("muffleWarning")
[17:44:22.559]                       }
[17:44:22.559]                       else if (inherits(cond, "condition")) {
[17:44:22.559]                         if (!is.null(pattern)) {
[17:44:22.559]                           computeRestarts <- base::computeRestarts
[17:44:22.559]                           grepl <- base::grepl
[17:44:22.559]                           restarts <- computeRestarts(cond)
[17:44:22.559]                           for (restart in restarts) {
[17:44:22.559]                             name <- restart$name
[17:44:22.559]                             if (is.null(name)) 
[17:44:22.559]                               next
[17:44:22.559]                             if (!grepl(pattern, name)) 
[17:44:22.559]                               next
[17:44:22.559]                             invokeRestart(restart)
[17:44:22.559]                             muffled <- TRUE
[17:44:22.559]                             break
[17:44:22.559]                           }
[17:44:22.559]                         }
[17:44:22.559]                       }
[17:44:22.559]                       invisible(muffled)
[17:44:22.559]                     }
[17:44:22.559]                     muffleCondition(cond, pattern = "^muffle")
[17:44:22.559]                   }
[17:44:22.559]                 }
[17:44:22.559]             }
[17:44:22.559]         }))
[17:44:22.559]     }, error = function(ex) {
[17:44:22.559]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:22.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:22.559]                 ...future.rng), started = ...future.startTime, 
[17:44:22.559]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:22.559]             version = "1.8"), class = "FutureResult")
[17:44:22.559]     }, finally = {
[17:44:22.559]         if (!identical(...future.workdir, getwd())) 
[17:44:22.559]             setwd(...future.workdir)
[17:44:22.559]         {
[17:44:22.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:22.559]                 ...future.oldOptions$nwarnings <- NULL
[17:44:22.559]             }
[17:44:22.559]             base::options(...future.oldOptions)
[17:44:22.559]             if (.Platform$OS.type == "windows") {
[17:44:22.559]                 old_names <- names(...future.oldEnvVars)
[17:44:22.559]                 envs <- base::Sys.getenv()
[17:44:22.559]                 names <- names(envs)
[17:44:22.559]                 common <- intersect(names, old_names)
[17:44:22.559]                 added <- setdiff(names, old_names)
[17:44:22.559]                 removed <- setdiff(old_names, names)
[17:44:22.559]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:22.559]                   envs[common]]
[17:44:22.559]                 NAMES <- toupper(changed)
[17:44:22.559]                 args <- list()
[17:44:22.559]                 for (kk in seq_along(NAMES)) {
[17:44:22.559]                   name <- changed[[kk]]
[17:44:22.559]                   NAME <- NAMES[[kk]]
[17:44:22.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.559]                     next
[17:44:22.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:22.559]                 }
[17:44:22.559]                 NAMES <- toupper(added)
[17:44:22.559]                 for (kk in seq_along(NAMES)) {
[17:44:22.559]                   name <- added[[kk]]
[17:44:22.559]                   NAME <- NAMES[[kk]]
[17:44:22.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.559]                     next
[17:44:22.559]                   args[[name]] <- ""
[17:44:22.559]                 }
[17:44:22.559]                 NAMES <- toupper(removed)
[17:44:22.559]                 for (kk in seq_along(NAMES)) {
[17:44:22.559]                   name <- removed[[kk]]
[17:44:22.559]                   NAME <- NAMES[[kk]]
[17:44:22.559]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.559]                     next
[17:44:22.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:22.559]                 }
[17:44:22.559]                 if (length(args) > 0) 
[17:44:22.559]                   base::do.call(base::Sys.setenv, args = args)
[17:44:22.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:22.559]             }
[17:44:22.559]             else {
[17:44:22.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:22.559]             }
[17:44:22.559]             {
[17:44:22.559]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:22.559]                   0L) {
[17:44:22.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:22.559]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:22.559]                   base::options(opts)
[17:44:22.559]                 }
[17:44:22.559]                 {
[17:44:22.559]                   {
[17:44:22.559]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:22.559]                     NULL
[17:44:22.559]                   }
[17:44:22.559]                   options(future.plan = "multisession")
[17:44:22.559]                   if (is.na("multisession")) 
[17:44:22.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:22.559]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:44:22.559]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:22.559]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:22.559]                     envir = parent.frame()) 
[17:44:22.559]                   {
[17:44:22.559]                     if (is.function(workers)) 
[17:44:22.559]                       workers <- workers()
[17:44:22.559]                     workers <- structure(as.integer(workers), 
[17:44:22.559]                       class = class(workers))
[17:44:22.559]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:22.559]                       workers >= 1)
[17:44:22.559]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:22.559]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:22.559]                     }
[17:44:22.559]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:22.559]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:22.559]                       envir = envir)
[17:44:22.559]                     if (!future$lazy) 
[17:44:22.559]                       future <- run(future)
[17:44:22.559]                     invisible(future)
[17:44:22.559]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:22.559]                 }
[17:44:22.559]             }
[17:44:22.559]         }
[17:44:22.559]     })
[17:44:22.559]     if (TRUE) {
[17:44:22.559]         base::sink(type = "output", split = FALSE)
[17:44:22.559]         if (TRUE) {
[17:44:22.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:22.559]         }
[17:44:22.559]         else {
[17:44:22.559]             ...future.result["stdout"] <- base::list(NULL)
[17:44:22.559]         }
[17:44:22.559]         base::close(...future.stdout)
[17:44:22.559]         ...future.stdout <- NULL
[17:44:22.559]     }
[17:44:22.559]     ...future.result$conditions <- ...future.conditions
[17:44:22.559]     ...future.result$finished <- base::Sys.time()
[17:44:22.559]     ...future.result
[17:44:22.559] }
[17:44:22.640] MultisessionFuture started
[17:44:22.640] result() for ClusterFuture ...
[17:44:22.640] receiveMessageFromWorker() for ClusterFuture ...
[17:44:22.640] - Validating connection of MultisessionFuture
[17:44:22.669] - received message: FutureResult
[17:44:22.669] - Received FutureResult
[17:44:22.669] - Erased future from FutureRegistry
[17:44:22.670] result() for ClusterFuture ...
[17:44:22.670] - result already collected: FutureResult
[17:44:22.670] result() for ClusterFuture ... done
[17:44:22.670] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:22.670] result() for ClusterFuture ... done
[17:44:22.670] result() for ClusterFuture ...
[17:44:22.670] - result already collected: FutureResult
[17:44:22.670] result() for ClusterFuture ... done
[17:44:22.670] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:22.674] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[17:44:22.675] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:22.675] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:22.675] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:22.675] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:22.675] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:22.676] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:22.677] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:22.678] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:22.678] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:22.678] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:22.678] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:22.678] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:22.678] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:22.678] Option 'future.plan' = ‘multisession’
[17:44:22.678] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:22.678] Setting plan('default')
[17:44:22.679] plan(): Setting new future strategy stack:
[17:44:22.679] List of future strategies:
[17:44:22.679] 1. multisession:
[17:44:22.679]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:22.679]    - tweaked: FALSE
[17:44:22.679]    - call: plan("default", .init = FALSE)
[17:44:22.683] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:44:22.684] plan(): Setting new future strategy stack:
[17:44:22.684] List of future strategies:
[17:44:22.684] 1. multisession:
[17:44:22.684]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:22.684]    - tweaked: FALSE
[17:44:22.684]    - call: plan("default")
[17:44:22.685] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:22.685] multisession:
[17:44:22.685] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:22.685] - tweaked: FALSE
[17:44:22.685] - call: plan("default")
[17:44:22.689] getGlobalsAndPackages() ...
[17:44:22.689] Not searching for globals
[17:44:22.689] - globals: [0] <none>
[17:44:22.689] getGlobalsAndPackages() ... DONE
[17:44:22.690] [local output] makeClusterPSOCK() ...
[17:44:22.690] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:44:22.691] [local output] Base port: 11433
[17:44:22.691] [local output] Getting setup options for 2 cluster nodes ...
[17:44:22.691] [local output]  - Node 1 of 2 ...
[17:44:22.691] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:22.692] [local output] Rscript port: 11433

[17:44:22.692] [local output]  - Node 2 of 2 ...
[17:44:22.692] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:22.693] [local output] Rscript port: 11433

[17:44:22.693] [local output] Getting setup options for 2 cluster nodes ... done
[17:44:22.693] [local output]  - Parallel setup requested for some PSOCK nodes
[17:44:22.694] [local output] Setting up PSOCK nodes in parallel
[17:44:22.694] List of 36
[17:44:22.694]  $ worker          : chr "localhost"
[17:44:22.694]   ..- attr(*, "localhost")= logi TRUE
[17:44:22.694]  $ master          : chr "localhost"
[17:44:22.694]  $ port            : int 11433
[17:44:22.694]  $ connectTimeout  : num 120
[17:44:22.694]  $ timeout         : num 2592000
[17:44:22.694]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:44:22.694]  $ homogeneous     : logi TRUE
[17:44:22.694]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:44:22.694]  $ rscript_envs    : NULL
[17:44:22.694]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:22.694]  $ rscript_startup : NULL
[17:44:22.694]  $ rscript_sh      : chr "sh"
[17:44:22.694]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:22.694]  $ methods         : logi TRUE
[17:44:22.694]  $ socketOptions   : chr "no-delay"
[17:44:22.694]  $ useXDR          : logi FALSE
[17:44:22.694]  $ outfile         : chr "/dev/null"
[17:44:22.694]  $ renice          : int NA
[17:44:22.694]  $ rshcmd          : NULL
[17:44:22.694]  $ user            : chr(0) 
[17:44:22.694]  $ revtunnel       : logi FALSE
[17:44:22.694]  $ rshlogfile      : NULL
[17:44:22.694]  $ rshopts         : chr(0) 
[17:44:22.694]  $ rank            : int 1
[17:44:22.694]  $ manual          : logi FALSE
[17:44:22.694]  $ dryrun          : logi FALSE
[17:44:22.694]  $ quiet           : logi FALSE
[17:44:22.694]  $ setup_strategy  : chr "parallel"
[17:44:22.694]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:22.694]  $ pidfile         : chr "/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d092659634a3.pid"
[17:44:22.694]  $ rshcmd_label    : NULL
[17:44:22.694]  $ rsh_call        : NULL
[17:44:22.694]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:22.694]  $ localMachine    : logi TRUE
[17:44:22.694]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:44:22.694]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:44:22.694]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:44:22.694]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:44:22.694]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:44:22.694]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:44:22.694]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:44:22.694]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:44:22.694]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:44:22.694]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:44:22.694]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:44:22.694]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:44:22.694]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:44:22.694]  $ arguments       :List of 28
[17:44:22.694]   ..$ worker          : chr "localhost"
[17:44:22.694]   ..$ master          : NULL
[17:44:22.694]   ..$ port            : int 11433
[17:44:22.694]   ..$ connectTimeout  : num 120
[17:44:22.694]   ..$ timeout         : num 2592000
[17:44:22.694]   ..$ rscript         : NULL
[17:44:22.694]   ..$ homogeneous     : NULL
[17:44:22.694]   ..$ rscript_args    : NULL
[17:44:22.694]   ..$ rscript_envs    : NULL
[17:44:22.694]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:22.694]   ..$ rscript_startup : NULL
[17:44:22.694]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:44:22.694]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:22.694]   ..$ methods         : logi TRUE
[17:44:22.694]   ..$ socketOptions   : chr "no-delay"
[17:44:22.694]   ..$ useXDR          : logi FALSE
[17:44:22.694]   ..$ outfile         : chr "/dev/null"
[17:44:22.694]   ..$ renice          : int NA
[17:44:22.694]   ..$ rshcmd          : NULL
[17:44:22.694]   ..$ user            : NULL
[17:44:22.694]   ..$ revtunnel       : logi NA
[17:44:22.694]   ..$ rshlogfile      : NULL
[17:44:22.694]   ..$ rshopts         : NULL
[17:44:22.694]   ..$ rank            : int 1
[17:44:22.694]   ..$ manual          : logi FALSE
[17:44:22.694]   ..$ dryrun          : logi FALSE
[17:44:22.694]   ..$ quiet           : logi FALSE
[17:44:22.694]   ..$ setup_strategy  : chr "parallel"
[17:44:22.694]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:44:22.714] [local output] System call to launch all workers:
[17:44:22.714] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmplyx1rv/worker.rank=1.parallelly.parent=53394.d092659634a3.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11433 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:44:22.714] [local output] Starting PSOCK main server
[17:44:22.716] [local output] Workers launched
[17:44:22.716] [local output] Waiting for workers to connect back
[17:44:22.716]  - [local output] 0 workers out of 2 ready
[17:44:22.957]  - [local output] 0 workers out of 2 ready
[17:44:22.958]  - [local output] 1 workers out of 2 ready
[17:44:22.971]  - [local output] 1 workers out of 2 ready
[17:44:22.971]  - [local output] 2 workers out of 2 ready
[17:44:22.971] [local output] Launching of workers completed
[17:44:22.971] [local output] Collecting session information from workers
[17:44:22.972] [local output]  - Worker #1 of 2
[17:44:22.973] [local output]  - Worker #2 of 2
[17:44:22.973] [local output] makeClusterPSOCK() ... done
[17:44:22.984] Packages needed by the future expression (n = 0): <none>
[17:44:22.984] Packages needed by future strategies (n = 0): <none>
[17:44:22.985] {
[17:44:22.985]     {
[17:44:22.985]         {
[17:44:22.985]             ...future.startTime <- base::Sys.time()
[17:44:22.985]             {
[17:44:22.985]                 {
[17:44:22.985]                   {
[17:44:22.985]                     {
[17:44:22.985]                       base::local({
[17:44:22.985]                         has_future <- base::requireNamespace("future", 
[17:44:22.985]                           quietly = TRUE)
[17:44:22.985]                         if (has_future) {
[17:44:22.985]                           ns <- base::getNamespace("future")
[17:44:22.985]                           version <- ns[[".package"]][["version"]]
[17:44:22.985]                           if (is.null(version)) 
[17:44:22.985]                             version <- utils::packageVersion("future")
[17:44:22.985]                         }
[17:44:22.985]                         else {
[17:44:22.985]                           version <- NULL
[17:44:22.985]                         }
[17:44:22.985]                         if (!has_future || version < "1.8.0") {
[17:44:22.985]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:22.985]                             "", base::R.version$version.string), 
[17:44:22.985]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:22.985]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:22.985]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:22.985]                               "release", "version")], collapse = " "), 
[17:44:22.985]                             hostname = base::Sys.info()[["nodename"]])
[17:44:22.985]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:22.985]                             info)
[17:44:22.985]                           info <- base::paste(info, collapse = "; ")
[17:44:22.985]                           if (!has_future) {
[17:44:22.985]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:22.985]                               info)
[17:44:22.985]                           }
[17:44:22.985]                           else {
[17:44:22.985]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:22.985]                               info, version)
[17:44:22.985]                           }
[17:44:22.985]                           base::stop(msg)
[17:44:22.985]                         }
[17:44:22.985]                       })
[17:44:22.985]                     }
[17:44:22.985]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:22.985]                     base::options(mc.cores = 1L)
[17:44:22.985]                   }
[17:44:22.985]                   options(future.plan = NULL)
[17:44:22.985]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:22.985]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:22.985]                 }
[17:44:22.985]                 ...future.workdir <- getwd()
[17:44:22.985]             }
[17:44:22.985]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:22.985]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:22.985]         }
[17:44:22.985]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:22.985]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:22.985]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:22.985]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:22.985]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:22.985]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:22.985]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:22.985]             base::names(...future.oldOptions))
[17:44:22.985]     }
[17:44:22.985]     if (FALSE) {
[17:44:22.985]     }
[17:44:22.985]     else {
[17:44:22.985]         if (TRUE) {
[17:44:22.985]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:22.985]                 open = "w")
[17:44:22.985]         }
[17:44:22.985]         else {
[17:44:22.985]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:22.985]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:22.985]         }
[17:44:22.985]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:22.985]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:22.985]             base::sink(type = "output", split = FALSE)
[17:44:22.985]             base::close(...future.stdout)
[17:44:22.985]         }, add = TRUE)
[17:44:22.985]     }
[17:44:22.985]     ...future.frame <- base::sys.nframe()
[17:44:22.985]     ...future.conditions <- base::list()
[17:44:22.985]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:22.985]     if (FALSE) {
[17:44:22.985]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:22.985]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:22.985]     }
[17:44:22.985]     ...future.result <- base::tryCatch({
[17:44:22.985]         base::withCallingHandlers({
[17:44:22.985]             ...future.value <- base::withVisible(base::local({
[17:44:22.985]                 ...future.makeSendCondition <- local({
[17:44:22.985]                   sendCondition <- NULL
[17:44:22.985]                   function(frame = 1L) {
[17:44:22.985]                     if (is.function(sendCondition)) 
[17:44:22.985]                       return(sendCondition)
[17:44:22.985]                     ns <- getNamespace("parallel")
[17:44:22.985]                     if (exists("sendData", mode = "function", 
[17:44:22.985]                       envir = ns)) {
[17:44:22.985]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:22.985]                         envir = ns)
[17:44:22.985]                       envir <- sys.frame(frame)
[17:44:22.985]                       master <- NULL
[17:44:22.985]                       while (!identical(envir, .GlobalEnv) && 
[17:44:22.985]                         !identical(envir, emptyenv())) {
[17:44:22.985]                         if (exists("master", mode = "list", envir = envir, 
[17:44:22.985]                           inherits = FALSE)) {
[17:44:22.985]                           master <- get("master", mode = "list", 
[17:44:22.985]                             envir = envir, inherits = FALSE)
[17:44:22.985]                           if (inherits(master, c("SOCKnode", 
[17:44:22.985]                             "SOCK0node"))) {
[17:44:22.985]                             sendCondition <<- function(cond) {
[17:44:22.985]                               data <- list(type = "VALUE", value = cond, 
[17:44:22.985]                                 success = TRUE)
[17:44:22.985]                               parallel_sendData(master, data)
[17:44:22.985]                             }
[17:44:22.985]                             return(sendCondition)
[17:44:22.985]                           }
[17:44:22.985]                         }
[17:44:22.985]                         frame <- frame + 1L
[17:44:22.985]                         envir <- sys.frame(frame)
[17:44:22.985]                       }
[17:44:22.985]                     }
[17:44:22.985]                     sendCondition <<- function(cond) NULL
[17:44:22.985]                   }
[17:44:22.985]                 })
[17:44:22.985]                 withCallingHandlers({
[17:44:22.985]                   NA
[17:44:22.985]                 }, immediateCondition = function(cond) {
[17:44:22.985]                   sendCondition <- ...future.makeSendCondition()
[17:44:22.985]                   sendCondition(cond)
[17:44:22.985]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.985]                   {
[17:44:22.985]                     inherits <- base::inherits
[17:44:22.985]                     invokeRestart <- base::invokeRestart
[17:44:22.985]                     is.null <- base::is.null
[17:44:22.985]                     muffled <- FALSE
[17:44:22.985]                     if (inherits(cond, "message")) {
[17:44:22.985]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:22.985]                       if (muffled) 
[17:44:22.985]                         invokeRestart("muffleMessage")
[17:44:22.985]                     }
[17:44:22.985]                     else if (inherits(cond, "warning")) {
[17:44:22.985]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:22.985]                       if (muffled) 
[17:44:22.985]                         invokeRestart("muffleWarning")
[17:44:22.985]                     }
[17:44:22.985]                     else if (inherits(cond, "condition")) {
[17:44:22.985]                       if (!is.null(pattern)) {
[17:44:22.985]                         computeRestarts <- base::computeRestarts
[17:44:22.985]                         grepl <- base::grepl
[17:44:22.985]                         restarts <- computeRestarts(cond)
[17:44:22.985]                         for (restart in restarts) {
[17:44:22.985]                           name <- restart$name
[17:44:22.985]                           if (is.null(name)) 
[17:44:22.985]                             next
[17:44:22.985]                           if (!grepl(pattern, name)) 
[17:44:22.985]                             next
[17:44:22.985]                           invokeRestart(restart)
[17:44:22.985]                           muffled <- TRUE
[17:44:22.985]                           break
[17:44:22.985]                         }
[17:44:22.985]                       }
[17:44:22.985]                     }
[17:44:22.985]                     invisible(muffled)
[17:44:22.985]                   }
[17:44:22.985]                   muffleCondition(cond)
[17:44:22.985]                 })
[17:44:22.985]             }))
[17:44:22.985]             future::FutureResult(value = ...future.value$value, 
[17:44:22.985]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:22.985]                   ...future.rng), globalenv = if (FALSE) 
[17:44:22.985]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:22.985]                     ...future.globalenv.names))
[17:44:22.985]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:22.985]         }, condition = base::local({
[17:44:22.985]             c <- base::c
[17:44:22.985]             inherits <- base::inherits
[17:44:22.985]             invokeRestart <- base::invokeRestart
[17:44:22.985]             length <- base::length
[17:44:22.985]             list <- base::list
[17:44:22.985]             seq.int <- base::seq.int
[17:44:22.985]             signalCondition <- base::signalCondition
[17:44:22.985]             sys.calls <- base::sys.calls
[17:44:22.985]             `[[` <- base::`[[`
[17:44:22.985]             `+` <- base::`+`
[17:44:22.985]             `<<-` <- base::`<<-`
[17:44:22.985]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:22.985]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:22.985]                   3L)]
[17:44:22.985]             }
[17:44:22.985]             function(cond) {
[17:44:22.985]                 is_error <- inherits(cond, "error")
[17:44:22.985]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:22.985]                   NULL)
[17:44:22.985]                 if (is_error) {
[17:44:22.985]                   sessionInformation <- function() {
[17:44:22.985]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:22.985]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:22.985]                       search = base::search(), system = base::Sys.info())
[17:44:22.985]                   }
[17:44:22.985]                   ...future.conditions[[length(...future.conditions) + 
[17:44:22.985]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:22.985]                     cond$call), session = sessionInformation(), 
[17:44:22.985]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:22.985]                   signalCondition(cond)
[17:44:22.985]                 }
[17:44:22.985]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:22.985]                 "immediateCondition"))) {
[17:44:22.985]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:22.985]                   ...future.conditions[[length(...future.conditions) + 
[17:44:22.985]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:22.985]                   if (TRUE && !signal) {
[17:44:22.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.985]                     {
[17:44:22.985]                       inherits <- base::inherits
[17:44:22.985]                       invokeRestart <- base::invokeRestart
[17:44:22.985]                       is.null <- base::is.null
[17:44:22.985]                       muffled <- FALSE
[17:44:22.985]                       if (inherits(cond, "message")) {
[17:44:22.985]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:22.985]                         if (muffled) 
[17:44:22.985]                           invokeRestart("muffleMessage")
[17:44:22.985]                       }
[17:44:22.985]                       else if (inherits(cond, "warning")) {
[17:44:22.985]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:22.985]                         if (muffled) 
[17:44:22.985]                           invokeRestart("muffleWarning")
[17:44:22.985]                       }
[17:44:22.985]                       else if (inherits(cond, "condition")) {
[17:44:22.985]                         if (!is.null(pattern)) {
[17:44:22.985]                           computeRestarts <- base::computeRestarts
[17:44:22.985]                           grepl <- base::grepl
[17:44:22.985]                           restarts <- computeRestarts(cond)
[17:44:22.985]                           for (restart in restarts) {
[17:44:22.985]                             name <- restart$name
[17:44:22.985]                             if (is.null(name)) 
[17:44:22.985]                               next
[17:44:22.985]                             if (!grepl(pattern, name)) 
[17:44:22.985]                               next
[17:44:22.985]                             invokeRestart(restart)
[17:44:22.985]                             muffled <- TRUE
[17:44:22.985]                             break
[17:44:22.985]                           }
[17:44:22.985]                         }
[17:44:22.985]                       }
[17:44:22.985]                       invisible(muffled)
[17:44:22.985]                     }
[17:44:22.985]                     muffleCondition(cond, pattern = "^muffle")
[17:44:22.985]                   }
[17:44:22.985]                 }
[17:44:22.985]                 else {
[17:44:22.985]                   if (TRUE) {
[17:44:22.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:22.985]                     {
[17:44:22.985]                       inherits <- base::inherits
[17:44:22.985]                       invokeRestart <- base::invokeRestart
[17:44:22.985]                       is.null <- base::is.null
[17:44:22.985]                       muffled <- FALSE
[17:44:22.985]                       if (inherits(cond, "message")) {
[17:44:22.985]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:22.985]                         if (muffled) 
[17:44:22.985]                           invokeRestart("muffleMessage")
[17:44:22.985]                       }
[17:44:22.985]                       else if (inherits(cond, "warning")) {
[17:44:22.985]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:22.985]                         if (muffled) 
[17:44:22.985]                           invokeRestart("muffleWarning")
[17:44:22.985]                       }
[17:44:22.985]                       else if (inherits(cond, "condition")) {
[17:44:22.985]                         if (!is.null(pattern)) {
[17:44:22.985]                           computeRestarts <- base::computeRestarts
[17:44:22.985]                           grepl <- base::grepl
[17:44:22.985]                           restarts <- computeRestarts(cond)
[17:44:22.985]                           for (restart in restarts) {
[17:44:22.985]                             name <- restart$name
[17:44:22.985]                             if (is.null(name)) 
[17:44:22.985]                               next
[17:44:22.985]                             if (!grepl(pattern, name)) 
[17:44:22.985]                               next
[17:44:22.985]                             invokeRestart(restart)
[17:44:22.985]                             muffled <- TRUE
[17:44:22.985]                             break
[17:44:22.985]                           }
[17:44:22.985]                         }
[17:44:22.985]                       }
[17:44:22.985]                       invisible(muffled)
[17:44:22.985]                     }
[17:44:22.985]                     muffleCondition(cond, pattern = "^muffle")
[17:44:22.985]                   }
[17:44:22.985]                 }
[17:44:22.985]             }
[17:44:22.985]         }))
[17:44:22.985]     }, error = function(ex) {
[17:44:22.985]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:22.985]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:22.985]                 ...future.rng), started = ...future.startTime, 
[17:44:22.985]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:22.985]             version = "1.8"), class = "FutureResult")
[17:44:22.985]     }, finally = {
[17:44:22.985]         if (!identical(...future.workdir, getwd())) 
[17:44:22.985]             setwd(...future.workdir)
[17:44:22.985]         {
[17:44:22.985]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:22.985]                 ...future.oldOptions$nwarnings <- NULL
[17:44:22.985]             }
[17:44:22.985]             base::options(...future.oldOptions)
[17:44:22.985]             if (.Platform$OS.type == "windows") {
[17:44:22.985]                 old_names <- names(...future.oldEnvVars)
[17:44:22.985]                 envs <- base::Sys.getenv()
[17:44:22.985]                 names <- names(envs)
[17:44:22.985]                 common <- intersect(names, old_names)
[17:44:22.985]                 added <- setdiff(names, old_names)
[17:44:22.985]                 removed <- setdiff(old_names, names)
[17:44:22.985]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:22.985]                   envs[common]]
[17:44:22.985]                 NAMES <- toupper(changed)
[17:44:22.985]                 args <- list()
[17:44:22.985]                 for (kk in seq_along(NAMES)) {
[17:44:22.985]                   name <- changed[[kk]]
[17:44:22.985]                   NAME <- NAMES[[kk]]
[17:44:22.985]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.985]                     next
[17:44:22.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:22.985]                 }
[17:44:22.985]                 NAMES <- toupper(added)
[17:44:22.985]                 for (kk in seq_along(NAMES)) {
[17:44:22.985]                   name <- added[[kk]]
[17:44:22.985]                   NAME <- NAMES[[kk]]
[17:44:22.985]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.985]                     next
[17:44:22.985]                   args[[name]] <- ""
[17:44:22.985]                 }
[17:44:22.985]                 NAMES <- toupper(removed)
[17:44:22.985]                 for (kk in seq_along(NAMES)) {
[17:44:22.985]                   name <- removed[[kk]]
[17:44:22.985]                   NAME <- NAMES[[kk]]
[17:44:22.985]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:22.985]                     next
[17:44:22.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:22.985]                 }
[17:44:22.985]                 if (length(args) > 0) 
[17:44:22.985]                   base::do.call(base::Sys.setenv, args = args)
[17:44:22.985]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:22.985]             }
[17:44:22.985]             else {
[17:44:22.985]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:22.985]             }
[17:44:22.985]             {
[17:44:22.985]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:22.985]                   0L) {
[17:44:22.985]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:22.985]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:22.985]                   base::options(opts)
[17:44:22.985]                 }
[17:44:22.985]                 {
[17:44:22.985]                   {
[17:44:22.985]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:22.985]                     NULL
[17:44:22.985]                   }
[17:44:22.985]                   options(future.plan = "multisession")
[17:44:22.985]                   if (is.na("")) 
[17:44:22.985]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:22.985]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:44:22.985]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:22.985]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:22.985]                     envir = parent.frame()) 
[17:44:22.985]                   {
[17:44:22.985]                     if (is.function(workers)) 
[17:44:22.985]                       workers <- workers()
[17:44:22.985]                     workers <- structure(as.integer(workers), 
[17:44:22.985]                       class = class(workers))
[17:44:22.985]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:22.985]                       workers >= 1)
[17:44:22.985]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:22.985]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:22.985]                     }
[17:44:22.985]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:22.985]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:22.985]                       envir = envir)
[17:44:22.985]                     if (!future$lazy) 
[17:44:22.985]                       future <- run(future)
[17:44:22.985]                     invisible(future)
[17:44:22.985]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:22.985]                 }
[17:44:22.985]             }
[17:44:22.985]         }
[17:44:22.985]     })
[17:44:22.985]     if (TRUE) {
[17:44:22.985]         base::sink(type = "output", split = FALSE)
[17:44:22.985]         if (TRUE) {
[17:44:22.985]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:22.985]         }
[17:44:22.985]         else {
[17:44:22.985]             ...future.result["stdout"] <- base::list(NULL)
[17:44:22.985]         }
[17:44:22.985]         base::close(...future.stdout)
[17:44:22.985]         ...future.stdout <- NULL
[17:44:22.985]     }
[17:44:22.985]     ...future.result$conditions <- ...future.conditions
[17:44:22.985]     ...future.result$finished <- base::Sys.time()
[17:44:22.985]     ...future.result
[17:44:22.985] }
[17:44:23.058] MultisessionFuture started
[17:44:23.058] result() for ClusterFuture ...
[17:44:23.058] receiveMessageFromWorker() for ClusterFuture ...
[17:44:23.058] - Validating connection of MultisessionFuture
[17:44:23.092] - received message: FutureResult
[17:44:23.092] - Received FutureResult
[17:44:23.092] - Erased future from FutureRegistry
[17:44:23.092] result() for ClusterFuture ...
[17:44:23.092] - result already collected: FutureResult
[17:44:23.092] result() for ClusterFuture ... done
[17:44:23.093] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:23.093] result() for ClusterFuture ... done
[17:44:23.093] result() for ClusterFuture ...
[17:44:23.093] - result already collected: FutureResult
[17:44:23.093] result() for ClusterFuture ... done
[17:44:23.093] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:23.096] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[17:44:23.098] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:23.098] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:23.098] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:23.099] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:23.099] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:23.099] R_FUTURE_PLAN=‘multisession’
[17:44:23.099] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[17:44:23.099] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:23.099] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:23.099] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:23.099] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:23.100] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:23.101] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:23.101] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:23.101] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:23.101] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:23.101] Option 'future.plan' = ‘multisession’
[17:44:23.101] R command-line argument: -p 1
[17:44:23.101]  => 'future.plan' already set.
[17:44:23.102] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:23.102] Setting plan('default')
[17:44:23.102] plan(): Setting new future strategy stack:
[17:44:23.102] List of future strategies:
[17:44:23.102] 1. multisession:
[17:44:23.102]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.102]    - tweaked: FALSE
[17:44:23.102]    - call: plan("default", .init = FALSE)
[17:44:23.107] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:44:23.107] plan(): Setting new future strategy stack:
[17:44:23.108] List of future strategies:
[17:44:23.108] 1. multisession:
[17:44:23.108]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.108]    - tweaked: FALSE
[17:44:23.108]    - call: plan("default")
[17:44:23.108] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:23.108] multisession:
[17:44:23.108] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.108] - tweaked: FALSE
[17:44:23.108] - call: plan("default")
[17:44:23.113] getGlobalsAndPackages() ...
[17:44:23.113] Not searching for globals
[17:44:23.113] - globals: [0] <none>
[17:44:23.113] getGlobalsAndPackages() ... DONE
[17:44:23.114] Packages needed by the future expression (n = 0): <none>
[17:44:23.114] Packages needed by future strategies (n = 0): <none>
[17:44:23.114] {
[17:44:23.114]     {
[17:44:23.114]         {
[17:44:23.114]             ...future.startTime <- base::Sys.time()
[17:44:23.114]             {
[17:44:23.114]                 {
[17:44:23.114]                   {
[17:44:23.114]                     base::local({
[17:44:23.114]                       has_future <- base::requireNamespace("future", 
[17:44:23.114]                         quietly = TRUE)
[17:44:23.114]                       if (has_future) {
[17:44:23.114]                         ns <- base::getNamespace("future")
[17:44:23.114]                         version <- ns[[".package"]][["version"]]
[17:44:23.114]                         if (is.null(version)) 
[17:44:23.114]                           version <- utils::packageVersion("future")
[17:44:23.114]                       }
[17:44:23.114]                       else {
[17:44:23.114]                         version <- NULL
[17:44:23.114]                       }
[17:44:23.114]                       if (!has_future || version < "1.8.0") {
[17:44:23.114]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.114]                           "", base::R.version$version.string), 
[17:44:23.114]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:23.114]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.114]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.114]                             "release", "version")], collapse = " "), 
[17:44:23.114]                           hostname = base::Sys.info()[["nodename"]])
[17:44:23.114]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.114]                           info)
[17:44:23.114]                         info <- base::paste(info, collapse = "; ")
[17:44:23.114]                         if (!has_future) {
[17:44:23.114]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.114]                             info)
[17:44:23.114]                         }
[17:44:23.114]                         else {
[17:44:23.114]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.114]                             info, version)
[17:44:23.114]                         }
[17:44:23.114]                         base::stop(msg)
[17:44:23.114]                       }
[17:44:23.114]                     })
[17:44:23.114]                   }
[17:44:23.114]                   options(future.plan = NULL)
[17:44:23.114]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.114]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.114]                 }
[17:44:23.114]                 ...future.workdir <- getwd()
[17:44:23.114]             }
[17:44:23.114]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.114]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.114]         }
[17:44:23.114]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.114]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.114]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.114]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.114]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.114]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.114]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.114]             base::names(...future.oldOptions))
[17:44:23.114]     }
[17:44:23.114]     if (FALSE) {
[17:44:23.114]     }
[17:44:23.114]     else {
[17:44:23.114]         if (TRUE) {
[17:44:23.114]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.114]                 open = "w")
[17:44:23.114]         }
[17:44:23.114]         else {
[17:44:23.114]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.114]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.114]         }
[17:44:23.114]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.114]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.114]             base::sink(type = "output", split = FALSE)
[17:44:23.114]             base::close(...future.stdout)
[17:44:23.114]         }, add = TRUE)
[17:44:23.114]     }
[17:44:23.114]     ...future.frame <- base::sys.nframe()
[17:44:23.114]     ...future.conditions <- base::list()
[17:44:23.114]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.114]     if (FALSE) {
[17:44:23.114]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.114]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.114]     }
[17:44:23.114]     ...future.result <- base::tryCatch({
[17:44:23.114]         base::withCallingHandlers({
[17:44:23.114]             ...future.value <- base::withVisible(base::local(NA))
[17:44:23.114]             future::FutureResult(value = ...future.value$value, 
[17:44:23.114]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.114]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.114]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.114]                     ...future.globalenv.names))
[17:44:23.114]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.114]         }, condition = base::local({
[17:44:23.114]             c <- base::c
[17:44:23.114]             inherits <- base::inherits
[17:44:23.114]             invokeRestart <- base::invokeRestart
[17:44:23.114]             length <- base::length
[17:44:23.114]             list <- base::list
[17:44:23.114]             seq.int <- base::seq.int
[17:44:23.114]             signalCondition <- base::signalCondition
[17:44:23.114]             sys.calls <- base::sys.calls
[17:44:23.114]             `[[` <- base::`[[`
[17:44:23.114]             `+` <- base::`+`
[17:44:23.114]             `<<-` <- base::`<<-`
[17:44:23.114]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.114]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.114]                   3L)]
[17:44:23.114]             }
[17:44:23.114]             function(cond) {
[17:44:23.114]                 is_error <- inherits(cond, "error")
[17:44:23.114]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.114]                   NULL)
[17:44:23.114]                 if (is_error) {
[17:44:23.114]                   sessionInformation <- function() {
[17:44:23.114]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.114]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.114]                       search = base::search(), system = base::Sys.info())
[17:44:23.114]                   }
[17:44:23.114]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.114]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.114]                     cond$call), session = sessionInformation(), 
[17:44:23.114]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.114]                   signalCondition(cond)
[17:44:23.114]                 }
[17:44:23.114]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.114]                 "immediateCondition"))) {
[17:44:23.114]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.114]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.114]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.114]                   if (TRUE && !signal) {
[17:44:23.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.114]                     {
[17:44:23.114]                       inherits <- base::inherits
[17:44:23.114]                       invokeRestart <- base::invokeRestart
[17:44:23.114]                       is.null <- base::is.null
[17:44:23.114]                       muffled <- FALSE
[17:44:23.114]                       if (inherits(cond, "message")) {
[17:44:23.114]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.114]                         if (muffled) 
[17:44:23.114]                           invokeRestart("muffleMessage")
[17:44:23.114]                       }
[17:44:23.114]                       else if (inherits(cond, "warning")) {
[17:44:23.114]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.114]                         if (muffled) 
[17:44:23.114]                           invokeRestart("muffleWarning")
[17:44:23.114]                       }
[17:44:23.114]                       else if (inherits(cond, "condition")) {
[17:44:23.114]                         if (!is.null(pattern)) {
[17:44:23.114]                           computeRestarts <- base::computeRestarts
[17:44:23.114]                           grepl <- base::grepl
[17:44:23.114]                           restarts <- computeRestarts(cond)
[17:44:23.114]                           for (restart in restarts) {
[17:44:23.114]                             name <- restart$name
[17:44:23.114]                             if (is.null(name)) 
[17:44:23.114]                               next
[17:44:23.114]                             if (!grepl(pattern, name)) 
[17:44:23.114]                               next
[17:44:23.114]                             invokeRestart(restart)
[17:44:23.114]                             muffled <- TRUE
[17:44:23.114]                             break
[17:44:23.114]                           }
[17:44:23.114]                         }
[17:44:23.114]                       }
[17:44:23.114]                       invisible(muffled)
[17:44:23.114]                     }
[17:44:23.114]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.114]                   }
[17:44:23.114]                 }
[17:44:23.114]                 else {
[17:44:23.114]                   if (TRUE) {
[17:44:23.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.114]                     {
[17:44:23.114]                       inherits <- base::inherits
[17:44:23.114]                       invokeRestart <- base::invokeRestart
[17:44:23.114]                       is.null <- base::is.null
[17:44:23.114]                       muffled <- FALSE
[17:44:23.114]                       if (inherits(cond, "message")) {
[17:44:23.114]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.114]                         if (muffled) 
[17:44:23.114]                           invokeRestart("muffleMessage")
[17:44:23.114]                       }
[17:44:23.114]                       else if (inherits(cond, "warning")) {
[17:44:23.114]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.114]                         if (muffled) 
[17:44:23.114]                           invokeRestart("muffleWarning")
[17:44:23.114]                       }
[17:44:23.114]                       else if (inherits(cond, "condition")) {
[17:44:23.114]                         if (!is.null(pattern)) {
[17:44:23.114]                           computeRestarts <- base::computeRestarts
[17:44:23.114]                           grepl <- base::grepl
[17:44:23.114]                           restarts <- computeRestarts(cond)
[17:44:23.114]                           for (restart in restarts) {
[17:44:23.114]                             name <- restart$name
[17:44:23.114]                             if (is.null(name)) 
[17:44:23.114]                               next
[17:44:23.114]                             if (!grepl(pattern, name)) 
[17:44:23.114]                               next
[17:44:23.114]                             invokeRestart(restart)
[17:44:23.114]                             muffled <- TRUE
[17:44:23.114]                             break
[17:44:23.114]                           }
[17:44:23.114]                         }
[17:44:23.114]                       }
[17:44:23.114]                       invisible(muffled)
[17:44:23.114]                     }
[17:44:23.114]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.114]                   }
[17:44:23.114]                 }
[17:44:23.114]             }
[17:44:23.114]         }))
[17:44:23.114]     }, error = function(ex) {
[17:44:23.114]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.114]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.114]                 ...future.rng), started = ...future.startTime, 
[17:44:23.114]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.114]             version = "1.8"), class = "FutureResult")
[17:44:23.114]     }, finally = {
[17:44:23.114]         if (!identical(...future.workdir, getwd())) 
[17:44:23.114]             setwd(...future.workdir)
[17:44:23.114]         {
[17:44:23.114]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.114]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.114]             }
[17:44:23.114]             base::options(...future.oldOptions)
[17:44:23.114]             if (.Platform$OS.type == "windows") {
[17:44:23.114]                 old_names <- names(...future.oldEnvVars)
[17:44:23.114]                 envs <- base::Sys.getenv()
[17:44:23.114]                 names <- names(envs)
[17:44:23.114]                 common <- intersect(names, old_names)
[17:44:23.114]                 added <- setdiff(names, old_names)
[17:44:23.114]                 removed <- setdiff(old_names, names)
[17:44:23.114]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.114]                   envs[common]]
[17:44:23.114]                 NAMES <- toupper(changed)
[17:44:23.114]                 args <- list()
[17:44:23.114]                 for (kk in seq_along(NAMES)) {
[17:44:23.114]                   name <- changed[[kk]]
[17:44:23.114]                   NAME <- NAMES[[kk]]
[17:44:23.114]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.114]                     next
[17:44:23.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.114]                 }
[17:44:23.114]                 NAMES <- toupper(added)
[17:44:23.114]                 for (kk in seq_along(NAMES)) {
[17:44:23.114]                   name <- added[[kk]]
[17:44:23.114]                   NAME <- NAMES[[kk]]
[17:44:23.114]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.114]                     next
[17:44:23.114]                   args[[name]] <- ""
[17:44:23.114]                 }
[17:44:23.114]                 NAMES <- toupper(removed)
[17:44:23.114]                 for (kk in seq_along(NAMES)) {
[17:44:23.114]                   name <- removed[[kk]]
[17:44:23.114]                   NAME <- NAMES[[kk]]
[17:44:23.114]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.114]                     next
[17:44:23.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.114]                 }
[17:44:23.114]                 if (length(args) > 0) 
[17:44:23.114]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.114]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.114]             }
[17:44:23.114]             else {
[17:44:23.114]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.114]             }
[17:44:23.114]             {
[17:44:23.114]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.114]                   0L) {
[17:44:23.114]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.114]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.114]                   base::options(opts)
[17:44:23.114]                 }
[17:44:23.114]                 {
[17:44:23.114]                   {
[17:44:23.114]                     NULL
[17:44:23.114]                     RNGkind("Mersenne-Twister")
[17:44:23.114]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.114]                       inherits = FALSE)
[17:44:23.114]                   }
[17:44:23.114]                   options(future.plan = "multisession")
[17:44:23.114]                   if (is.na("multisession")) 
[17:44:23.114]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.114]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[17:44:23.114]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:23.114]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:23.114]                     envir = parent.frame()) 
[17:44:23.114]                   {
[17:44:23.114]                     if (is.function(workers)) 
[17:44:23.114]                       workers <- workers()
[17:44:23.114]                     workers <- structure(as.integer(workers), 
[17:44:23.114]                       class = class(workers))
[17:44:23.114]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:23.114]                       workers >= 1)
[17:44:23.114]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:23.114]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:23.114]                     }
[17:44:23.114]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:23.114]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:23.114]                       envir = envir)
[17:44:23.114]                     if (!future$lazy) 
[17:44:23.114]                       future <- run(future)
[17:44:23.114]                     invisible(future)
[17:44:23.114]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.114]                 }
[17:44:23.114]             }
[17:44:23.114]         }
[17:44:23.114]     })
[17:44:23.114]     if (TRUE) {
[17:44:23.114]         base::sink(type = "output", split = FALSE)
[17:44:23.114]         if (TRUE) {
[17:44:23.114]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.114]         }
[17:44:23.114]         else {
[17:44:23.114]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.114]         }
[17:44:23.114]         base::close(...future.stdout)
[17:44:23.114]         ...future.stdout <- NULL
[17:44:23.114]     }
[17:44:23.114]     ...future.result$conditions <- ...future.conditions
[17:44:23.114]     ...future.result$finished <- base::Sys.time()
[17:44:23.114]     ...future.result
[17:44:23.114] }
[17:44:23.116] plan(): Setting new future strategy stack:
[17:44:23.117] List of future strategies:
[17:44:23.117] 1. sequential:
[17:44:23.117]    - args: function (..., envir = parent.frame())
[17:44:23.117]    - tweaked: FALSE
[17:44:23.117]    - call: NULL
[17:44:23.117] plan(): nbrOfWorkers() = 1
[17:44:23.118] plan(): Setting new future strategy stack:
[17:44:23.119] List of future strategies:
[17:44:23.119] 1. multisession:
[17:44:23.119]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.119]    - tweaked: FALSE
[17:44:23.119]    - call: plan("default")
[17:44:23.123] plan(): nbrOfWorkers() = 1
[17:44:23.123] SequentialFuture started (and completed)
[17:44:23.123] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:23.126] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:44:23.127] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:23.128] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:23.128] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:23.129] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:23.130] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:23.131] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:23.131] Option 'future.plan' = ‘multisession’
[17:44:23.131] R command-line argument: -p 1
[17:44:23.131]  => 'future.plan' already set.
[17:44:23.131] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:23.131] Setting plan('default')
[17:44:23.132] plan(): Setting new future strategy stack:
[17:44:23.132] List of future strategies:
[17:44:23.132] 1. multisession:
[17:44:23.132]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.132]    - tweaked: FALSE
[17:44:23.132]    - call: plan("default", .init = FALSE)
[17:44:23.135] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:44:23.136] plan(): Setting new future strategy stack:
[17:44:23.136] List of future strategies:
[17:44:23.136] 1. multisession:
[17:44:23.136]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.136]    - tweaked: FALSE
[17:44:23.136]    - call: plan("default")
[17:44:23.136] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:23.136] multisession:
[17:44:23.136] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.136] - tweaked: FALSE
[17:44:23.136] - call: plan("default")
[17:44:23.140] getGlobalsAndPackages() ...
[17:44:23.140] Not searching for globals
[17:44:23.140] - globals: [0] <none>
[17:44:23.140] getGlobalsAndPackages() ... DONE
[17:44:23.140] Packages needed by the future expression (n = 0): <none>
[17:44:23.141] Packages needed by future strategies (n = 0): <none>
[17:44:23.141] {
[17:44:23.141]     {
[17:44:23.141]         {
[17:44:23.141]             ...future.startTime <- base::Sys.time()
[17:44:23.141]             {
[17:44:23.141]                 {
[17:44:23.141]                   {
[17:44:23.141]                     base::local({
[17:44:23.141]                       has_future <- base::requireNamespace("future", 
[17:44:23.141]                         quietly = TRUE)
[17:44:23.141]                       if (has_future) {
[17:44:23.141]                         ns <- base::getNamespace("future")
[17:44:23.141]                         version <- ns[[".package"]][["version"]]
[17:44:23.141]                         if (is.null(version)) 
[17:44:23.141]                           version <- utils::packageVersion("future")
[17:44:23.141]                       }
[17:44:23.141]                       else {
[17:44:23.141]                         version <- NULL
[17:44:23.141]                       }
[17:44:23.141]                       if (!has_future || version < "1.8.0") {
[17:44:23.141]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.141]                           "", base::R.version$version.string), 
[17:44:23.141]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:23.141]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.141]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.141]                             "release", "version")], collapse = " "), 
[17:44:23.141]                           hostname = base::Sys.info()[["nodename"]])
[17:44:23.141]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.141]                           info)
[17:44:23.141]                         info <- base::paste(info, collapse = "; ")
[17:44:23.141]                         if (!has_future) {
[17:44:23.141]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.141]                             info)
[17:44:23.141]                         }
[17:44:23.141]                         else {
[17:44:23.141]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.141]                             info, version)
[17:44:23.141]                         }
[17:44:23.141]                         base::stop(msg)
[17:44:23.141]                       }
[17:44:23.141]                     })
[17:44:23.141]                   }
[17:44:23.141]                   options(future.plan = NULL)
[17:44:23.141]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.141]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.141]                 }
[17:44:23.141]                 ...future.workdir <- getwd()
[17:44:23.141]             }
[17:44:23.141]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.141]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.141]         }
[17:44:23.141]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.141]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.141]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.141]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.141]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.141]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.141]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.141]             base::names(...future.oldOptions))
[17:44:23.141]     }
[17:44:23.141]     if (FALSE) {
[17:44:23.141]     }
[17:44:23.141]     else {
[17:44:23.141]         if (TRUE) {
[17:44:23.141]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.141]                 open = "w")
[17:44:23.141]         }
[17:44:23.141]         else {
[17:44:23.141]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.141]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.141]         }
[17:44:23.141]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.141]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.141]             base::sink(type = "output", split = FALSE)
[17:44:23.141]             base::close(...future.stdout)
[17:44:23.141]         }, add = TRUE)
[17:44:23.141]     }
[17:44:23.141]     ...future.frame <- base::sys.nframe()
[17:44:23.141]     ...future.conditions <- base::list()
[17:44:23.141]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.141]     if (FALSE) {
[17:44:23.141]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.141]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.141]     }
[17:44:23.141]     ...future.result <- base::tryCatch({
[17:44:23.141]         base::withCallingHandlers({
[17:44:23.141]             ...future.value <- base::withVisible(base::local(NA))
[17:44:23.141]             future::FutureResult(value = ...future.value$value, 
[17:44:23.141]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.141]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.141]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.141]                     ...future.globalenv.names))
[17:44:23.141]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.141]         }, condition = base::local({
[17:44:23.141]             c <- base::c
[17:44:23.141]             inherits <- base::inherits
[17:44:23.141]             invokeRestart <- base::invokeRestart
[17:44:23.141]             length <- base::length
[17:44:23.141]             list <- base::list
[17:44:23.141]             seq.int <- base::seq.int
[17:44:23.141]             signalCondition <- base::signalCondition
[17:44:23.141]             sys.calls <- base::sys.calls
[17:44:23.141]             `[[` <- base::`[[`
[17:44:23.141]             `+` <- base::`+`
[17:44:23.141]             `<<-` <- base::`<<-`
[17:44:23.141]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.141]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.141]                   3L)]
[17:44:23.141]             }
[17:44:23.141]             function(cond) {
[17:44:23.141]                 is_error <- inherits(cond, "error")
[17:44:23.141]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.141]                   NULL)
[17:44:23.141]                 if (is_error) {
[17:44:23.141]                   sessionInformation <- function() {
[17:44:23.141]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.141]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.141]                       search = base::search(), system = base::Sys.info())
[17:44:23.141]                   }
[17:44:23.141]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.141]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.141]                     cond$call), session = sessionInformation(), 
[17:44:23.141]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.141]                   signalCondition(cond)
[17:44:23.141]                 }
[17:44:23.141]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.141]                 "immediateCondition"))) {
[17:44:23.141]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.141]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.141]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.141]                   if (TRUE && !signal) {
[17:44:23.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.141]                     {
[17:44:23.141]                       inherits <- base::inherits
[17:44:23.141]                       invokeRestart <- base::invokeRestart
[17:44:23.141]                       is.null <- base::is.null
[17:44:23.141]                       muffled <- FALSE
[17:44:23.141]                       if (inherits(cond, "message")) {
[17:44:23.141]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.141]                         if (muffled) 
[17:44:23.141]                           invokeRestart("muffleMessage")
[17:44:23.141]                       }
[17:44:23.141]                       else if (inherits(cond, "warning")) {
[17:44:23.141]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.141]                         if (muffled) 
[17:44:23.141]                           invokeRestart("muffleWarning")
[17:44:23.141]                       }
[17:44:23.141]                       else if (inherits(cond, "condition")) {
[17:44:23.141]                         if (!is.null(pattern)) {
[17:44:23.141]                           computeRestarts <- base::computeRestarts
[17:44:23.141]                           grepl <- base::grepl
[17:44:23.141]                           restarts <- computeRestarts(cond)
[17:44:23.141]                           for (restart in restarts) {
[17:44:23.141]                             name <- restart$name
[17:44:23.141]                             if (is.null(name)) 
[17:44:23.141]                               next
[17:44:23.141]                             if (!grepl(pattern, name)) 
[17:44:23.141]                               next
[17:44:23.141]                             invokeRestart(restart)
[17:44:23.141]                             muffled <- TRUE
[17:44:23.141]                             break
[17:44:23.141]                           }
[17:44:23.141]                         }
[17:44:23.141]                       }
[17:44:23.141]                       invisible(muffled)
[17:44:23.141]                     }
[17:44:23.141]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.141]                   }
[17:44:23.141]                 }
[17:44:23.141]                 else {
[17:44:23.141]                   if (TRUE) {
[17:44:23.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.141]                     {
[17:44:23.141]                       inherits <- base::inherits
[17:44:23.141]                       invokeRestart <- base::invokeRestart
[17:44:23.141]                       is.null <- base::is.null
[17:44:23.141]                       muffled <- FALSE
[17:44:23.141]                       if (inherits(cond, "message")) {
[17:44:23.141]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.141]                         if (muffled) 
[17:44:23.141]                           invokeRestart("muffleMessage")
[17:44:23.141]                       }
[17:44:23.141]                       else if (inherits(cond, "warning")) {
[17:44:23.141]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.141]                         if (muffled) 
[17:44:23.141]                           invokeRestart("muffleWarning")
[17:44:23.141]                       }
[17:44:23.141]                       else if (inherits(cond, "condition")) {
[17:44:23.141]                         if (!is.null(pattern)) {
[17:44:23.141]                           computeRestarts <- base::computeRestarts
[17:44:23.141]                           grepl <- base::grepl
[17:44:23.141]                           restarts <- computeRestarts(cond)
[17:44:23.141]                           for (restart in restarts) {
[17:44:23.141]                             name <- restart$name
[17:44:23.141]                             if (is.null(name)) 
[17:44:23.141]                               next
[17:44:23.141]                             if (!grepl(pattern, name)) 
[17:44:23.141]                               next
[17:44:23.141]                             invokeRestart(restart)
[17:44:23.141]                             muffled <- TRUE
[17:44:23.141]                             break
[17:44:23.141]                           }
[17:44:23.141]                         }
[17:44:23.141]                       }
[17:44:23.141]                       invisible(muffled)
[17:44:23.141]                     }
[17:44:23.141]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.141]                   }
[17:44:23.141]                 }
[17:44:23.141]             }
[17:44:23.141]         }))
[17:44:23.141]     }, error = function(ex) {
[17:44:23.141]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.141]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.141]                 ...future.rng), started = ...future.startTime, 
[17:44:23.141]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.141]             version = "1.8"), class = "FutureResult")
[17:44:23.141]     }, finally = {
[17:44:23.141]         if (!identical(...future.workdir, getwd())) 
[17:44:23.141]             setwd(...future.workdir)
[17:44:23.141]         {
[17:44:23.141]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.141]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.141]             }
[17:44:23.141]             base::options(...future.oldOptions)
[17:44:23.141]             if (.Platform$OS.type == "windows") {
[17:44:23.141]                 old_names <- names(...future.oldEnvVars)
[17:44:23.141]                 envs <- base::Sys.getenv()
[17:44:23.141]                 names <- names(envs)
[17:44:23.141]                 common <- intersect(names, old_names)
[17:44:23.141]                 added <- setdiff(names, old_names)
[17:44:23.141]                 removed <- setdiff(old_names, names)
[17:44:23.141]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.141]                   envs[common]]
[17:44:23.141]                 NAMES <- toupper(changed)
[17:44:23.141]                 args <- list()
[17:44:23.141]                 for (kk in seq_along(NAMES)) {
[17:44:23.141]                   name <- changed[[kk]]
[17:44:23.141]                   NAME <- NAMES[[kk]]
[17:44:23.141]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.141]                     next
[17:44:23.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.141]                 }
[17:44:23.141]                 NAMES <- toupper(added)
[17:44:23.141]                 for (kk in seq_along(NAMES)) {
[17:44:23.141]                   name <- added[[kk]]
[17:44:23.141]                   NAME <- NAMES[[kk]]
[17:44:23.141]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.141]                     next
[17:44:23.141]                   args[[name]] <- ""
[17:44:23.141]                 }
[17:44:23.141]                 NAMES <- toupper(removed)
[17:44:23.141]                 for (kk in seq_along(NAMES)) {
[17:44:23.141]                   name <- removed[[kk]]
[17:44:23.141]                   NAME <- NAMES[[kk]]
[17:44:23.141]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.141]                     next
[17:44:23.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.141]                 }
[17:44:23.141]                 if (length(args) > 0) 
[17:44:23.141]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.141]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.141]             }
[17:44:23.141]             else {
[17:44:23.141]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.141]             }
[17:44:23.141]             {
[17:44:23.141]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.141]                   0L) {
[17:44:23.141]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.141]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.141]                   base::options(opts)
[17:44:23.141]                 }
[17:44:23.141]                 {
[17:44:23.141]                   {
[17:44:23.141]                     NULL
[17:44:23.141]                     RNGkind("Mersenne-Twister")
[17:44:23.141]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.141]                       inherits = FALSE)
[17:44:23.141]                   }
[17:44:23.141]                   options(future.plan = "multisession")
[17:44:23.141]                   if (is.na("")) 
[17:44:23.141]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.141]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:44:23.141]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:23.141]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:23.141]                     envir = parent.frame()) 
[17:44:23.141]                   {
[17:44:23.141]                     if (is.function(workers)) 
[17:44:23.141]                       workers <- workers()
[17:44:23.141]                     workers <- structure(as.integer(workers), 
[17:44:23.141]                       class = class(workers))
[17:44:23.141]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:23.141]                       workers >= 1)
[17:44:23.141]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:23.141]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:23.141]                     }
[17:44:23.141]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:23.141]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:23.141]                       envir = envir)
[17:44:23.141]                     if (!future$lazy) 
[17:44:23.141]                       future <- run(future)
[17:44:23.141]                     invisible(future)
[17:44:23.141]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.141]                 }
[17:44:23.141]             }
[17:44:23.141]         }
[17:44:23.141]     })
[17:44:23.141]     if (TRUE) {
[17:44:23.141]         base::sink(type = "output", split = FALSE)
[17:44:23.141]         if (TRUE) {
[17:44:23.141]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.141]         }
[17:44:23.141]         else {
[17:44:23.141]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.141]         }
[17:44:23.141]         base::close(...future.stdout)
[17:44:23.141]         ...future.stdout <- NULL
[17:44:23.141]     }
[17:44:23.141]     ...future.result$conditions <- ...future.conditions
[17:44:23.141]     ...future.result$finished <- base::Sys.time()
[17:44:23.141]     ...future.result
[17:44:23.141] }
[17:44:23.143] plan(): Setting new future strategy stack:
[17:44:23.143] List of future strategies:
[17:44:23.143] 1. sequential:
[17:44:23.143]    - args: function (..., envir = parent.frame())
[17:44:23.143]    - tweaked: FALSE
[17:44:23.143]    - call: NULL
[17:44:23.144] plan(): nbrOfWorkers() = 1
[17:44:23.144] plan(): Setting new future strategy stack:
[17:44:23.145] List of future strategies:
[17:44:23.145] 1. multisession:
[17:44:23.145]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.145]    - tweaked: FALSE
[17:44:23.145]    - call: plan("default")
[17:44:23.148] plan(): nbrOfWorkers() = 1
[17:44:23.148] SequentialFuture started (and completed)
[17:44:23.148] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:23.152] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[17:44:23.153] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[17:44:23.153] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[17:44:23.153] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[17:44:23.153] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[17:44:23.153] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[17:44:23.153] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[17:44:23.153] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[17:44:23.153] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[17:44:23.154] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[17:44:23.155] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[17:44:23.156] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[17:44:23.156] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[17:44:23.156] Environment variable ‘R_FUTURE_JOURNAL’ not set
[17:44:23.156] Option 'future.plan' of type ‘function’
[17:44:23.156] R command-line argument: -p 1
[17:44:23.156]  => 'future.plan' already set.
[17:44:23.156] R process uuid: f44d5fa6-b652-cde0-8889-0f0633f18d22
[17:44:23.156] Setting plan('default')
[17:44:23.157] plan(): Setting new future strategy stack:
[17:44:23.157] List of future strategies:
[17:44:23.157] 1. multisession:
[17:44:23.157]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.157]    - tweaked: FALSE
[17:44:23.157]    - call: NULL
[17:44:23.160] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[17:44:23.160] plan(): Setting new future strategy stack:
[17:44:23.161] List of future strategies:
[17:44:23.161] 1. multisession:
[17:44:23.161]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.161]    - tweaked: FALSE
[17:44:23.161]    - call: NULL
[17:44:23.161] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:23.161] multisession:
[17:44:23.161] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.161] - tweaked: FALSE
[17:44:23.161] - call: NULL
[17:44:23.164] getGlobalsAndPackages() ...
[17:44:23.165] Not searching for globals
[17:44:23.165] - globals: [0] <none>
[17:44:23.165] getGlobalsAndPackages() ... DONE
[17:44:23.165] Packages needed by the future expression (n = 0): <none>
[17:44:23.165] Packages needed by future strategies (n = 0): <none>
[17:44:23.166] {
[17:44:23.166]     {
[17:44:23.166]         {
[17:44:23.166]             ...future.startTime <- base::Sys.time()
[17:44:23.166]             {
[17:44:23.166]                 {
[17:44:23.166]                   {
[17:44:23.166]                     base::local({
[17:44:23.166]                       has_future <- base::requireNamespace("future", 
[17:44:23.166]                         quietly = TRUE)
[17:44:23.166]                       if (has_future) {
[17:44:23.166]                         ns <- base::getNamespace("future")
[17:44:23.166]                         version <- ns[[".package"]][["version"]]
[17:44:23.166]                         if (is.null(version)) 
[17:44:23.166]                           version <- utils::packageVersion("future")
[17:44:23.166]                       }
[17:44:23.166]                       else {
[17:44:23.166]                         version <- NULL
[17:44:23.166]                       }
[17:44:23.166]                       if (!has_future || version < "1.8.0") {
[17:44:23.166]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.166]                           "", base::R.version$version.string), 
[17:44:23.166]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:23.166]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.166]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.166]                             "release", "version")], collapse = " "), 
[17:44:23.166]                           hostname = base::Sys.info()[["nodename"]])
[17:44:23.166]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.166]                           info)
[17:44:23.166]                         info <- base::paste(info, collapse = "; ")
[17:44:23.166]                         if (!has_future) {
[17:44:23.166]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.166]                             info)
[17:44:23.166]                         }
[17:44:23.166]                         else {
[17:44:23.166]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.166]                             info, version)
[17:44:23.166]                         }
[17:44:23.166]                         base::stop(msg)
[17:44:23.166]                       }
[17:44:23.166]                     })
[17:44:23.166]                   }
[17:44:23.166]                   options(future.plan = NULL)
[17:44:23.166]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.166]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.166]                 }
[17:44:23.166]                 ...future.workdir <- getwd()
[17:44:23.166]             }
[17:44:23.166]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.166]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.166]         }
[17:44:23.166]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.166]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.166]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.166]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.166]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.166]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.166]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.166]             base::names(...future.oldOptions))
[17:44:23.166]     }
[17:44:23.166]     if (FALSE) {
[17:44:23.166]     }
[17:44:23.166]     else {
[17:44:23.166]         if (TRUE) {
[17:44:23.166]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.166]                 open = "w")
[17:44:23.166]         }
[17:44:23.166]         else {
[17:44:23.166]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.166]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.166]         }
[17:44:23.166]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.166]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.166]             base::sink(type = "output", split = FALSE)
[17:44:23.166]             base::close(...future.stdout)
[17:44:23.166]         }, add = TRUE)
[17:44:23.166]     }
[17:44:23.166]     ...future.frame <- base::sys.nframe()
[17:44:23.166]     ...future.conditions <- base::list()
[17:44:23.166]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.166]     if (FALSE) {
[17:44:23.166]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.166]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.166]     }
[17:44:23.166]     ...future.result <- base::tryCatch({
[17:44:23.166]         base::withCallingHandlers({
[17:44:23.166]             ...future.value <- base::withVisible(base::local(NA))
[17:44:23.166]             future::FutureResult(value = ...future.value$value, 
[17:44:23.166]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.166]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.166]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.166]                     ...future.globalenv.names))
[17:44:23.166]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.166]         }, condition = base::local({
[17:44:23.166]             c <- base::c
[17:44:23.166]             inherits <- base::inherits
[17:44:23.166]             invokeRestart <- base::invokeRestart
[17:44:23.166]             length <- base::length
[17:44:23.166]             list <- base::list
[17:44:23.166]             seq.int <- base::seq.int
[17:44:23.166]             signalCondition <- base::signalCondition
[17:44:23.166]             sys.calls <- base::sys.calls
[17:44:23.166]             `[[` <- base::`[[`
[17:44:23.166]             `+` <- base::`+`
[17:44:23.166]             `<<-` <- base::`<<-`
[17:44:23.166]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.166]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.166]                   3L)]
[17:44:23.166]             }
[17:44:23.166]             function(cond) {
[17:44:23.166]                 is_error <- inherits(cond, "error")
[17:44:23.166]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.166]                   NULL)
[17:44:23.166]                 if (is_error) {
[17:44:23.166]                   sessionInformation <- function() {
[17:44:23.166]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.166]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.166]                       search = base::search(), system = base::Sys.info())
[17:44:23.166]                   }
[17:44:23.166]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.166]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.166]                     cond$call), session = sessionInformation(), 
[17:44:23.166]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.166]                   signalCondition(cond)
[17:44:23.166]                 }
[17:44:23.166]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.166]                 "immediateCondition"))) {
[17:44:23.166]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.166]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.166]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.166]                   if (TRUE && !signal) {
[17:44:23.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.166]                     {
[17:44:23.166]                       inherits <- base::inherits
[17:44:23.166]                       invokeRestart <- base::invokeRestart
[17:44:23.166]                       is.null <- base::is.null
[17:44:23.166]                       muffled <- FALSE
[17:44:23.166]                       if (inherits(cond, "message")) {
[17:44:23.166]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.166]                         if (muffled) 
[17:44:23.166]                           invokeRestart("muffleMessage")
[17:44:23.166]                       }
[17:44:23.166]                       else if (inherits(cond, "warning")) {
[17:44:23.166]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.166]                         if (muffled) 
[17:44:23.166]                           invokeRestart("muffleWarning")
[17:44:23.166]                       }
[17:44:23.166]                       else if (inherits(cond, "condition")) {
[17:44:23.166]                         if (!is.null(pattern)) {
[17:44:23.166]                           computeRestarts <- base::computeRestarts
[17:44:23.166]                           grepl <- base::grepl
[17:44:23.166]                           restarts <- computeRestarts(cond)
[17:44:23.166]                           for (restart in restarts) {
[17:44:23.166]                             name <- restart$name
[17:44:23.166]                             if (is.null(name)) 
[17:44:23.166]                               next
[17:44:23.166]                             if (!grepl(pattern, name)) 
[17:44:23.166]                               next
[17:44:23.166]                             invokeRestart(restart)
[17:44:23.166]                             muffled <- TRUE
[17:44:23.166]                             break
[17:44:23.166]                           }
[17:44:23.166]                         }
[17:44:23.166]                       }
[17:44:23.166]                       invisible(muffled)
[17:44:23.166]                     }
[17:44:23.166]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.166]                   }
[17:44:23.166]                 }
[17:44:23.166]                 else {
[17:44:23.166]                   if (TRUE) {
[17:44:23.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.166]                     {
[17:44:23.166]                       inherits <- base::inherits
[17:44:23.166]                       invokeRestart <- base::invokeRestart
[17:44:23.166]                       is.null <- base::is.null
[17:44:23.166]                       muffled <- FALSE
[17:44:23.166]                       if (inherits(cond, "message")) {
[17:44:23.166]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.166]                         if (muffled) 
[17:44:23.166]                           invokeRestart("muffleMessage")
[17:44:23.166]                       }
[17:44:23.166]                       else if (inherits(cond, "warning")) {
[17:44:23.166]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.166]                         if (muffled) 
[17:44:23.166]                           invokeRestart("muffleWarning")
[17:44:23.166]                       }
[17:44:23.166]                       else if (inherits(cond, "condition")) {
[17:44:23.166]                         if (!is.null(pattern)) {
[17:44:23.166]                           computeRestarts <- base::computeRestarts
[17:44:23.166]                           grepl <- base::grepl
[17:44:23.166]                           restarts <- computeRestarts(cond)
[17:44:23.166]                           for (restart in restarts) {
[17:44:23.166]                             name <- restart$name
[17:44:23.166]                             if (is.null(name)) 
[17:44:23.166]                               next
[17:44:23.166]                             if (!grepl(pattern, name)) 
[17:44:23.166]                               next
[17:44:23.166]                             invokeRestart(restart)
[17:44:23.166]                             muffled <- TRUE
[17:44:23.166]                             break
[17:44:23.166]                           }
[17:44:23.166]                         }
[17:44:23.166]                       }
[17:44:23.166]                       invisible(muffled)
[17:44:23.166]                     }
[17:44:23.166]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.166]                   }
[17:44:23.166]                 }
[17:44:23.166]             }
[17:44:23.166]         }))
[17:44:23.166]     }, error = function(ex) {
[17:44:23.166]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.166]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.166]                 ...future.rng), started = ...future.startTime, 
[17:44:23.166]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.166]             version = "1.8"), class = "FutureResult")
[17:44:23.166]     }, finally = {
[17:44:23.166]         if (!identical(...future.workdir, getwd())) 
[17:44:23.166]             setwd(...future.workdir)
[17:44:23.166]         {
[17:44:23.166]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.166]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.166]             }
[17:44:23.166]             base::options(...future.oldOptions)
[17:44:23.166]             if (.Platform$OS.type == "windows") {
[17:44:23.166]                 old_names <- names(...future.oldEnvVars)
[17:44:23.166]                 envs <- base::Sys.getenv()
[17:44:23.166]                 names <- names(envs)
[17:44:23.166]                 common <- intersect(names, old_names)
[17:44:23.166]                 added <- setdiff(names, old_names)
[17:44:23.166]                 removed <- setdiff(old_names, names)
[17:44:23.166]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.166]                   envs[common]]
[17:44:23.166]                 NAMES <- toupper(changed)
[17:44:23.166]                 args <- list()
[17:44:23.166]                 for (kk in seq_along(NAMES)) {
[17:44:23.166]                   name <- changed[[kk]]
[17:44:23.166]                   NAME <- NAMES[[kk]]
[17:44:23.166]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.166]                     next
[17:44:23.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.166]                 }
[17:44:23.166]                 NAMES <- toupper(added)
[17:44:23.166]                 for (kk in seq_along(NAMES)) {
[17:44:23.166]                   name <- added[[kk]]
[17:44:23.166]                   NAME <- NAMES[[kk]]
[17:44:23.166]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.166]                     next
[17:44:23.166]                   args[[name]] <- ""
[17:44:23.166]                 }
[17:44:23.166]                 NAMES <- toupper(removed)
[17:44:23.166]                 for (kk in seq_along(NAMES)) {
[17:44:23.166]                   name <- removed[[kk]]
[17:44:23.166]                   NAME <- NAMES[[kk]]
[17:44:23.166]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.166]                     next
[17:44:23.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.166]                 }
[17:44:23.166]                 if (length(args) > 0) 
[17:44:23.166]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.166]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.166]             }
[17:44:23.166]             else {
[17:44:23.166]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.166]             }
[17:44:23.166]             {
[17:44:23.166]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.166]                   0L) {
[17:44:23.166]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.166]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.166]                   base::options(opts)
[17:44:23.166]                 }
[17:44:23.166]                 {
[17:44:23.166]                   {
[17:44:23.166]                     NULL
[17:44:23.166]                     RNGkind("Mersenne-Twister")
[17:44:23.166]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.166]                       inherits = FALSE)
[17:44:23.166]                   }
[17:44:23.166]                   options(future.plan = function (..., workers = availableCores(), 
[17:44:23.166]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:23.166]                     envir = parent.frame()) 
[17:44:23.166]                   {
[17:44:23.166]                     if (is.function(workers)) 
[17:44:23.166]                       workers <- workers()
[17:44:23.166]                     workers <- structure(as.integer(workers), 
[17:44:23.166]                       class = class(workers))
[17:44:23.166]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:23.166]                       workers >= 1)
[17:44:23.166]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:23.166]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:23.166]                     }
[17:44:23.166]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:23.166]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:23.166]                       envir = envir)
[17:44:23.166]                     if (!future$lazy) 
[17:44:23.166]                       future <- run(future)
[17:44:23.166]                     invisible(future)
[17:44:23.166]                   })
[17:44:23.166]                   if (is.na("")) 
[17:44:23.166]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.166]                   else Sys.setenv(R_FUTURE_PLAN = "")
[17:44:23.166]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:23.166]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:23.166]                     envir = parent.frame()) 
[17:44:23.166]                   {
[17:44:23.166]                     if (is.function(workers)) 
[17:44:23.166]                       workers <- workers()
[17:44:23.166]                     workers <- structure(as.integer(workers), 
[17:44:23.166]                       class = class(workers))
[17:44:23.166]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:23.166]                       workers >= 1)
[17:44:23.166]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:23.166]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:23.166]                     }
[17:44:23.166]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:23.166]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:23.166]                       envir = envir)
[17:44:23.166]                     if (!future$lazy) 
[17:44:23.166]                       future <- run(future)
[17:44:23.166]                     invisible(future)
[17:44:23.166]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.166]                 }
[17:44:23.166]             }
[17:44:23.166]         }
[17:44:23.166]     })
[17:44:23.166]     if (TRUE) {
[17:44:23.166]         base::sink(type = "output", split = FALSE)
[17:44:23.166]         if (TRUE) {
[17:44:23.166]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.166]         }
[17:44:23.166]         else {
[17:44:23.166]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.166]         }
[17:44:23.166]         base::close(...future.stdout)
[17:44:23.166]         ...future.stdout <- NULL
[17:44:23.166]     }
[17:44:23.166]     ...future.result$conditions <- ...future.conditions
[17:44:23.166]     ...future.result$finished <- base::Sys.time()
[17:44:23.166]     ...future.result
[17:44:23.166] }
[17:44:23.168] plan(): Setting new future strategy stack:
[17:44:23.168] List of future strategies:
[17:44:23.168] 1. sequential:
[17:44:23.168]    - args: function (..., envir = parent.frame())
[17:44:23.168]    - tweaked: FALSE
[17:44:23.168]    - call: NULL
[17:44:23.168] plan(): nbrOfWorkers() = 1
[17:44:23.169] plan(): Setting new future strategy stack:
[17:44:23.169] List of future strategies:
[17:44:23.169] 1. multisession:
[17:44:23.169]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:23.169]    - tweaked: FALSE
[17:44:23.169]    - call: NULL
[17:44:23.173] plan(): nbrOfWorkers() = 1
[17:44:23.173] SequentialFuture started (and completed)
[17:44:23.174] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:23.177] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[17:44:23.180] Option 'future.startup.script': TRUE
[17:44:23.180] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:44:23.180] Future startup scripts found: <none>
[17:44:23.180] Option 'future.startup.script': TRUE
[17:44:23.180] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:44:23.180] Future startup scripts found: <none>
[17:44:23.180] Option 'future.startup.script': TRUE
[17:44:23.181] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:44:23.181] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[17:44:23.181] Option 'future.startup.script': TRUE
[17:44:23.181] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:44:23.181] Future startup scripts found: ‘.future.R’
[17:44:23.182] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[17:44:23.183] plan(): Setting new future strategy stack:
[17:44:23.183] List of future strategies:
[17:44:23.183] 1. FutureStrategy:
[17:44:23.183]    - args: function (..., envir = parent.frame())
[17:44:23.183]    - tweaked: FALSE
[17:44:23.183]    - call: future::plan(oplan)
[17:44:23.183] plan(): nbrOfWorkers() = 1
> 
