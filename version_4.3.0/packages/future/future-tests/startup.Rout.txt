
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:27.086] plan(): Setting new future strategy stack:
[13:22:27.086] List of future strategies:
[13:22:27.086] 1. sequential:
[13:22:27.086]    - args: function (..., envir = parent.frame())
[13:22:27.086]    - tweaked: FALSE
[13:22:27.086]    - call: future::plan("sequential")
[13:22:27.100] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[13:22:27.110] plan(): Setting new future strategy stack:
[13:22:27.110] List of future strategies:
[13:22:27.110] 1. sequential:
[13:22:27.110]    - args: function (..., envir = parent.frame())
[13:22:27.110]    - tweaked: FALSE
[13:22:27.110]    - call: NULL
[13:22:27.121] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[13:22:27.127] plan(): Setting new future strategy stack:
[13:22:27.128] List of future strategies:
[13:22:27.128] 1. sequential:
[13:22:27.128]    - args: function (..., envir = parent.frame())
[13:22:27.128]    - tweaked: FALSE
[13:22:27.128]    - call: NULL
[13:22:27.128] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:22:27.131] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.131] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.131] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.131] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.131] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.131] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.131] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.131] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.132] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.133] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.133] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.133] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.133] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.133] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.133] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.133] R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.133] Coercing from character to numeric: ‘0.01’
[13:22:27.134] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[13:22:27.134] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.134] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.134] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.134] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.134] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.134] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.135] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:27.135] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.135] Setting plan('default')
[13:22:27.135] plan(): Setting new future strategy stack:
[13:22:27.135] List of future strategies:
[13:22:27.135] 1. sequential:
[13:22:27.135]    - args: function (..., envir = parent.frame())
[13:22:27.135]    - tweaked: FALSE
[13:22:27.135]    - call: NULL
[13:22:27.135] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:22:27.136] plan(): Setting new future strategy stack:
[13:22:27.136] List of future strategies:
[13:22:27.136] 1. sequential:
[13:22:27.136]    - args: function (..., envir = parent.frame())
[13:22:27.136]    - tweaked: FALSE
[13:22:27.136]    - call: NULL
[13:22:27.136] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[13:22:27.137] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.137] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.137] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.138] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.139] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.140] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:27.141] R command-line argument: -p 1
[13:22:27.141]  => options(future.plan = sequential)
[13:22:27.141] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.141] Setting plan('default')
[13:22:27.141] plan(): Setting new future strategy stack:
[13:22:27.141] List of future strategies:
[13:22:27.141] 1. sequential:
[13:22:27.141]    - args: function (..., envir = parent.frame())
[13:22:27.141]    - tweaked: FALSE
[13:22:27.141]    - call: NULL
[13:22:27.142] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[13:22:27.142] plan(): Setting new future strategy stack:
[13:22:27.142] List of future strategies:
[13:22:27.142] 1. sequential:
[13:22:27.142]    - args: function (..., envir = parent.frame())
[13:22:27.142]    - tweaked: FALSE
[13:22:27.142]    - call: NULL
[13:22:27.142] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[13:22:27.143] plan(): Setting new future strategy stack:
[13:22:27.143] List of future strategies:
[13:22:27.143] 1. sequential:
[13:22:27.143]    - args: function (..., envir = parent.frame())
[13:22:27.143]    - tweaked: FALSE
[13:22:27.143]    - call: NULL
[13:22:27.143] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[13:22:27.144] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.144] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.144] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.144] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.144] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.144] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.144] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.145] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.146] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.147] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.147] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.147] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.147] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.147] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:27.147] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.147] Setting plan('default')
[13:22:27.147] plan(): Setting new future strategy stack:
[13:22:27.147] List of future strategies:
[13:22:27.147] 1. sequential:
[13:22:27.147]    - args: function (..., envir = parent.frame())
[13:22:27.147]    - tweaked: FALSE
[13:22:27.147]    - call: NULL
[13:22:27.148] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[13:22:27.148] plan(): Setting new future strategy stack:
[13:22:27.148] List of future strategies:
[13:22:27.148] 1. sequential:
[13:22:27.148]    - args: function (..., envir = parent.frame())
[13:22:27.148]    - tweaked: FALSE
[13:22:27.148]    - call: NULL
[13:22:27.149] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[13:22:27.150] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.150] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.150] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.151] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.152] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.153] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.153] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:27.153] R command-line argument: -p 2
[13:22:27.153]  => options(future.plan = tweak(multisession, workers = 2))
[13:22:27.156] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.156] Setting plan('default')
[13:22:27.156] plan(): Setting new future strategy stack:
[13:22:27.156] List of future strategies:
[13:22:27.156] 1. multisession:
[13:22:27.156]    - args: function (..., workers = 2L, envir = parent.frame())
[13:22:27.156]    - tweaked: TRUE
[13:22:27.156]    - call: NULL
[13:22:27.156] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[13:22:27.157] plan(): Setting new future strategy stack:
[13:22:27.157] List of future strategies:
[13:22:27.157] 1. multisession:
[13:22:27.157]    - args: function (..., workers = 2L, envir = parent.frame())
[13:22:27.157]    - tweaked: TRUE
[13:22:27.157]    - call: NULL
[13:22:27.157] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:27.157] multisession:
[13:22:27.157] - args: function (..., workers = 2L, envir = parent.frame())
[13:22:27.157] - tweaked: TRUE
[13:22:27.157] - call: NULL
[13:22:27.159] getGlobalsAndPackages() ...
[13:22:27.159] Not searching for globals
[13:22:27.159] - globals: [0] <none>
[13:22:27.159] getGlobalsAndPackages() ... DONE
[13:22:27.160] [local output] makeClusterPSOCK() ...
[13:22:27.188] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:27.194] [local output] Base port: 11119
[13:22:27.194] [local output] Getting setup options for 2 cluster nodes ...
[13:22:27.194] [local output]  - Node 1 of 2 ...
[13:22:27.194] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:27.195] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b8470c36485.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b8470c36485.pid")'’
[13:22:27.384] - Possible to infer worker's PID: TRUE
[13:22:27.385] [local output] Rscript port: 11119

[13:22:27.385] [local output]  - Node 2 of 2 ...
[13:22:27.386] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:27.386] [local output] Rscript port: 11119

[13:22:27.386] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:27.387] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:27.387] [local output] Setting up PSOCK nodes in parallel
[13:22:27.387] List of 36
[13:22:27.387]  $ worker          : chr "localhost"
[13:22:27.387]   ..- attr(*, "localhost")= logi TRUE
[13:22:27.387]  $ master          : chr "localhost"
[13:22:27.387]  $ port            : int 11119
[13:22:27.387]  $ connectTimeout  : num 120
[13:22:27.387]  $ timeout         : num 2592000
[13:22:27.387]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:27.387]  $ homogeneous     : logi TRUE
[13:22:27.387]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:27.387]  $ rscript_envs    : NULL
[13:22:27.387]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:27.387]  $ rscript_startup : NULL
[13:22:27.387]  $ rscript_sh      : chr "sh"
[13:22:27.387]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:27.387]  $ methods         : logi TRUE
[13:22:27.387]  $ socketOptions   : chr "no-delay"
[13:22:27.387]  $ useXDR          : logi FALSE
[13:22:27.387]  $ outfile         : chr "/dev/null"
[13:22:27.387]  $ renice          : int NA
[13:22:27.387]  $ rshcmd          : NULL
[13:22:27.387]  $ user            : chr(0) 
[13:22:27.387]  $ revtunnel       : logi FALSE
[13:22:27.387]  $ rshlogfile      : NULL
[13:22:27.387]  $ rshopts         : chr(0) 
[13:22:27.387]  $ rank            : int 1
[13:22:27.387]  $ manual          : logi FALSE
[13:22:27.387]  $ dryrun          : logi FALSE
[13:22:27.387]  $ quiet           : logi FALSE
[13:22:27.387]  $ setup_strategy  : chr "parallel"
[13:22:27.387]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:27.387]  $ pidfile         : chr "/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b8470c36485.pid"
[13:22:27.387]  $ rshcmd_label    : NULL
[13:22:27.387]  $ rsh_call        : NULL
[13:22:27.387]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:27.387]  $ localMachine    : logi TRUE
[13:22:27.387]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:27.387]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:27.387]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:27.387]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:27.387]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:27.387]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:27.387]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:27.387]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:27.387]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:27.387]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:27.387]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:27.387]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:27.387]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:27.387]  $ arguments       :List of 28
[13:22:27.387]   ..$ worker          : chr "localhost"
[13:22:27.387]   ..$ master          : NULL
[13:22:27.387]   ..$ port            : int 11119
[13:22:27.387]   ..$ connectTimeout  : num 120
[13:22:27.387]   ..$ timeout         : num 2592000
[13:22:27.387]   ..$ rscript         : NULL
[13:22:27.387]   ..$ homogeneous     : NULL
[13:22:27.387]   ..$ rscript_args    : NULL
[13:22:27.387]   ..$ rscript_envs    : NULL
[13:22:27.387]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:27.387]   ..$ rscript_startup : NULL
[13:22:27.387]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:27.387]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:27.387]   ..$ methods         : logi TRUE
[13:22:27.387]   ..$ socketOptions   : chr "no-delay"
[13:22:27.387]   ..$ useXDR          : logi FALSE
[13:22:27.387]   ..$ outfile         : chr "/dev/null"
[13:22:27.387]   ..$ renice          : int NA
[13:22:27.387]   ..$ rshcmd          : NULL
[13:22:27.387]   ..$ user            : NULL
[13:22:27.387]   ..$ revtunnel       : logi NA
[13:22:27.387]   ..$ rshlogfile      : NULL
[13:22:27.387]   ..$ rshopts         : NULL
[13:22:27.387]   ..$ rank            : int 1
[13:22:27.387]   ..$ manual          : logi FALSE
[13:22:27.387]   ..$ dryrun          : logi FALSE
[13:22:27.387]   ..$ quiet           : logi FALSE
[13:22:27.387]   ..$ setup_strategy  : chr "parallel"
[13:22:27.387]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:27.404] [local output] System call to launch all workers:
[13:22:27.404] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b8470c36485.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11119 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:27.404] [local output] Starting PSOCK main server
[13:22:27.405] [local output] Workers launched
[13:22:27.405] [local output] Waiting for workers to connect back
[13:22:27.405]  - [local output] 0 workers out of 2 ready
[13:22:27.654]  - [local output] 0 workers out of 2 ready
[13:22:27.655]  - [local output] 1 workers out of 2 ready
[13:22:27.660]  - [local output] 1 workers out of 2 ready
[13:22:27.660]  - [local output] 2 workers out of 2 ready
[13:22:27.660] [local output] Launching of workers completed
[13:22:27.661] [local output] Collecting session information from workers
[13:22:27.661] [local output]  - Worker #1 of 2
[13:22:27.662] [local output]  - Worker #2 of 2
[13:22:27.662] [local output] makeClusterPSOCK() ... done
[13:22:27.675] Packages needed by the future expression (n = 0): <none>
[13:22:27.675] Packages needed by future strategies (n = 0): <none>
[13:22:27.676] {
[13:22:27.676]     {
[13:22:27.676]         {
[13:22:27.676]             ...future.startTime <- base::Sys.time()
[13:22:27.676]             {
[13:22:27.676]                 {
[13:22:27.676]                   {
[13:22:27.676]                     {
[13:22:27.676]                       base::local({
[13:22:27.676]                         has_future <- base::requireNamespace("future", 
[13:22:27.676]                           quietly = TRUE)
[13:22:27.676]                         if (has_future) {
[13:22:27.676]                           ns <- base::getNamespace("future")
[13:22:27.676]                           version <- ns[[".package"]][["version"]]
[13:22:27.676]                           if (is.null(version)) 
[13:22:27.676]                             version <- utils::packageVersion("future")
[13:22:27.676]                         }
[13:22:27.676]                         else {
[13:22:27.676]                           version <- NULL
[13:22:27.676]                         }
[13:22:27.676]                         if (!has_future || version < "1.8.0") {
[13:22:27.676]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:27.676]                             "", base::R.version$version.string), 
[13:22:27.676]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:27.676]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:27.676]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:27.676]                               "release", "version")], collapse = " "), 
[13:22:27.676]                             hostname = base::Sys.info()[["nodename"]])
[13:22:27.676]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:27.676]                             info)
[13:22:27.676]                           info <- base::paste(info, collapse = "; ")
[13:22:27.676]                           if (!has_future) {
[13:22:27.676]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:27.676]                               info)
[13:22:27.676]                           }
[13:22:27.676]                           else {
[13:22:27.676]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:27.676]                               info, version)
[13:22:27.676]                           }
[13:22:27.676]                           base::stop(msg)
[13:22:27.676]                         }
[13:22:27.676]                       })
[13:22:27.676]                     }
[13:22:27.676]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:27.676]                     base::options(mc.cores = 1L)
[13:22:27.676]                   }
[13:22:27.676]                   options(future.plan = NULL)
[13:22:27.676]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:27.676]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:27.676]                 }
[13:22:27.676]                 ...future.workdir <- getwd()
[13:22:27.676]             }
[13:22:27.676]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:27.676]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:27.676]         }
[13:22:27.676]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:27.676]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:27.676]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:27.676]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:27.676]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:27.676]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:27.676]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:27.676]             base::names(...future.oldOptions))
[13:22:27.676]     }
[13:22:27.676]     if (FALSE) {
[13:22:27.676]     }
[13:22:27.676]     else {
[13:22:27.676]         if (TRUE) {
[13:22:27.676]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:27.676]                 open = "w")
[13:22:27.676]         }
[13:22:27.676]         else {
[13:22:27.676]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:27.676]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:27.676]         }
[13:22:27.676]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:27.676]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:27.676]             base::sink(type = "output", split = FALSE)
[13:22:27.676]             base::close(...future.stdout)
[13:22:27.676]         }, add = TRUE)
[13:22:27.676]     }
[13:22:27.676]     ...future.frame <- base::sys.nframe()
[13:22:27.676]     ...future.conditions <- base::list()
[13:22:27.676]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:27.676]     if (FALSE) {
[13:22:27.676]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:27.676]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:27.676]     }
[13:22:27.676]     ...future.result <- base::tryCatch({
[13:22:27.676]         base::withCallingHandlers({
[13:22:27.676]             ...future.value <- base::withVisible(base::local({
[13:22:27.676]                 ...future.makeSendCondition <- local({
[13:22:27.676]                   sendCondition <- NULL
[13:22:27.676]                   function(frame = 1L) {
[13:22:27.676]                     if (is.function(sendCondition)) 
[13:22:27.676]                       return(sendCondition)
[13:22:27.676]                     ns <- getNamespace("parallel")
[13:22:27.676]                     if (exists("sendData", mode = "function", 
[13:22:27.676]                       envir = ns)) {
[13:22:27.676]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:27.676]                         envir = ns)
[13:22:27.676]                       envir <- sys.frame(frame)
[13:22:27.676]                       master <- NULL
[13:22:27.676]                       while (!identical(envir, .GlobalEnv) && 
[13:22:27.676]                         !identical(envir, emptyenv())) {
[13:22:27.676]                         if (exists("master", mode = "list", envir = envir, 
[13:22:27.676]                           inherits = FALSE)) {
[13:22:27.676]                           master <- get("master", mode = "list", 
[13:22:27.676]                             envir = envir, inherits = FALSE)
[13:22:27.676]                           if (inherits(master, c("SOCKnode", 
[13:22:27.676]                             "SOCK0node"))) {
[13:22:27.676]                             sendCondition <<- function(cond) {
[13:22:27.676]                               data <- list(type = "VALUE", value = cond, 
[13:22:27.676]                                 success = TRUE)
[13:22:27.676]                               parallel_sendData(master, data)
[13:22:27.676]                             }
[13:22:27.676]                             return(sendCondition)
[13:22:27.676]                           }
[13:22:27.676]                         }
[13:22:27.676]                         frame <- frame + 1L
[13:22:27.676]                         envir <- sys.frame(frame)
[13:22:27.676]                       }
[13:22:27.676]                     }
[13:22:27.676]                     sendCondition <<- function(cond) NULL
[13:22:27.676]                   }
[13:22:27.676]                 })
[13:22:27.676]                 withCallingHandlers({
[13:22:27.676]                   NA
[13:22:27.676]                 }, immediateCondition = function(cond) {
[13:22:27.676]                   sendCondition <- ...future.makeSendCondition()
[13:22:27.676]                   sendCondition(cond)
[13:22:27.676]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:27.676]                   {
[13:22:27.676]                     inherits <- base::inherits
[13:22:27.676]                     invokeRestart <- base::invokeRestart
[13:22:27.676]                     is.null <- base::is.null
[13:22:27.676]                     muffled <- FALSE
[13:22:27.676]                     if (inherits(cond, "message")) {
[13:22:27.676]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:27.676]                       if (muffled) 
[13:22:27.676]                         invokeRestart("muffleMessage")
[13:22:27.676]                     }
[13:22:27.676]                     else if (inherits(cond, "warning")) {
[13:22:27.676]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:27.676]                       if (muffled) 
[13:22:27.676]                         invokeRestart("muffleWarning")
[13:22:27.676]                     }
[13:22:27.676]                     else if (inherits(cond, "condition")) {
[13:22:27.676]                       if (!is.null(pattern)) {
[13:22:27.676]                         computeRestarts <- base::computeRestarts
[13:22:27.676]                         grepl <- base::grepl
[13:22:27.676]                         restarts <- computeRestarts(cond)
[13:22:27.676]                         for (restart in restarts) {
[13:22:27.676]                           name <- restart$name
[13:22:27.676]                           if (is.null(name)) 
[13:22:27.676]                             next
[13:22:27.676]                           if (!grepl(pattern, name)) 
[13:22:27.676]                             next
[13:22:27.676]                           invokeRestart(restart)
[13:22:27.676]                           muffled <- TRUE
[13:22:27.676]                           break
[13:22:27.676]                         }
[13:22:27.676]                       }
[13:22:27.676]                     }
[13:22:27.676]                     invisible(muffled)
[13:22:27.676]                   }
[13:22:27.676]                   muffleCondition(cond)
[13:22:27.676]                 })
[13:22:27.676]             }))
[13:22:27.676]             future::FutureResult(value = ...future.value$value, 
[13:22:27.676]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:27.676]                   ...future.rng), globalenv = if (FALSE) 
[13:22:27.676]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:27.676]                     ...future.globalenv.names))
[13:22:27.676]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:27.676]         }, condition = base::local({
[13:22:27.676]             c <- base::c
[13:22:27.676]             inherits <- base::inherits
[13:22:27.676]             invokeRestart <- base::invokeRestart
[13:22:27.676]             length <- base::length
[13:22:27.676]             list <- base::list
[13:22:27.676]             seq.int <- base::seq.int
[13:22:27.676]             signalCondition <- base::signalCondition
[13:22:27.676]             sys.calls <- base::sys.calls
[13:22:27.676]             `[[` <- base::`[[`
[13:22:27.676]             `+` <- base::`+`
[13:22:27.676]             `<<-` <- base::`<<-`
[13:22:27.676]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:27.676]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:27.676]                   3L)]
[13:22:27.676]             }
[13:22:27.676]             function(cond) {
[13:22:27.676]                 is_error <- inherits(cond, "error")
[13:22:27.676]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:27.676]                   NULL)
[13:22:27.676]                 if (is_error) {
[13:22:27.676]                   sessionInformation <- function() {
[13:22:27.676]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:27.676]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:27.676]                       search = base::search(), system = base::Sys.info())
[13:22:27.676]                   }
[13:22:27.676]                   ...future.conditions[[length(...future.conditions) + 
[13:22:27.676]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:27.676]                     cond$call), session = sessionInformation(), 
[13:22:27.676]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:27.676]                   signalCondition(cond)
[13:22:27.676]                 }
[13:22:27.676]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:27.676]                 "immediateCondition"))) {
[13:22:27.676]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:27.676]                   ...future.conditions[[length(...future.conditions) + 
[13:22:27.676]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:27.676]                   if (TRUE && !signal) {
[13:22:27.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:27.676]                     {
[13:22:27.676]                       inherits <- base::inherits
[13:22:27.676]                       invokeRestart <- base::invokeRestart
[13:22:27.676]                       is.null <- base::is.null
[13:22:27.676]                       muffled <- FALSE
[13:22:27.676]                       if (inherits(cond, "message")) {
[13:22:27.676]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:27.676]                         if (muffled) 
[13:22:27.676]                           invokeRestart("muffleMessage")
[13:22:27.676]                       }
[13:22:27.676]                       else if (inherits(cond, "warning")) {
[13:22:27.676]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:27.676]                         if (muffled) 
[13:22:27.676]                           invokeRestart("muffleWarning")
[13:22:27.676]                       }
[13:22:27.676]                       else if (inherits(cond, "condition")) {
[13:22:27.676]                         if (!is.null(pattern)) {
[13:22:27.676]                           computeRestarts <- base::computeRestarts
[13:22:27.676]                           grepl <- base::grepl
[13:22:27.676]                           restarts <- computeRestarts(cond)
[13:22:27.676]                           for (restart in restarts) {
[13:22:27.676]                             name <- restart$name
[13:22:27.676]                             if (is.null(name)) 
[13:22:27.676]                               next
[13:22:27.676]                             if (!grepl(pattern, name)) 
[13:22:27.676]                               next
[13:22:27.676]                             invokeRestart(restart)
[13:22:27.676]                             muffled <- TRUE
[13:22:27.676]                             break
[13:22:27.676]                           }
[13:22:27.676]                         }
[13:22:27.676]                       }
[13:22:27.676]                       invisible(muffled)
[13:22:27.676]                     }
[13:22:27.676]                     muffleCondition(cond, pattern = "^muffle")
[13:22:27.676]                   }
[13:22:27.676]                 }
[13:22:27.676]                 else {
[13:22:27.676]                   if (TRUE) {
[13:22:27.676]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:27.676]                     {
[13:22:27.676]                       inherits <- base::inherits
[13:22:27.676]                       invokeRestart <- base::invokeRestart
[13:22:27.676]                       is.null <- base::is.null
[13:22:27.676]                       muffled <- FALSE
[13:22:27.676]                       if (inherits(cond, "message")) {
[13:22:27.676]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:27.676]                         if (muffled) 
[13:22:27.676]                           invokeRestart("muffleMessage")
[13:22:27.676]                       }
[13:22:27.676]                       else if (inherits(cond, "warning")) {
[13:22:27.676]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:27.676]                         if (muffled) 
[13:22:27.676]                           invokeRestart("muffleWarning")
[13:22:27.676]                       }
[13:22:27.676]                       else if (inherits(cond, "condition")) {
[13:22:27.676]                         if (!is.null(pattern)) {
[13:22:27.676]                           computeRestarts <- base::computeRestarts
[13:22:27.676]                           grepl <- base::grepl
[13:22:27.676]                           restarts <- computeRestarts(cond)
[13:22:27.676]                           for (restart in restarts) {
[13:22:27.676]                             name <- restart$name
[13:22:27.676]                             if (is.null(name)) 
[13:22:27.676]                               next
[13:22:27.676]                             if (!grepl(pattern, name)) 
[13:22:27.676]                               next
[13:22:27.676]                             invokeRestart(restart)
[13:22:27.676]                             muffled <- TRUE
[13:22:27.676]                             break
[13:22:27.676]                           }
[13:22:27.676]                         }
[13:22:27.676]                       }
[13:22:27.676]                       invisible(muffled)
[13:22:27.676]                     }
[13:22:27.676]                     muffleCondition(cond, pattern = "^muffle")
[13:22:27.676]                   }
[13:22:27.676]                 }
[13:22:27.676]             }
[13:22:27.676]         }))
[13:22:27.676]     }, error = function(ex) {
[13:22:27.676]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:27.676]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:27.676]                 ...future.rng), started = ...future.startTime, 
[13:22:27.676]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:27.676]             version = "1.8"), class = "FutureResult")
[13:22:27.676]     }, finally = {
[13:22:27.676]         if (!identical(...future.workdir, getwd())) 
[13:22:27.676]             setwd(...future.workdir)
[13:22:27.676]         {
[13:22:27.676]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:27.676]                 ...future.oldOptions$nwarnings <- NULL
[13:22:27.676]             }
[13:22:27.676]             base::options(...future.oldOptions)
[13:22:27.676]             if (.Platform$OS.type == "windows") {
[13:22:27.676]                 old_names <- names(...future.oldEnvVars)
[13:22:27.676]                 envs <- base::Sys.getenv()
[13:22:27.676]                 names <- names(envs)
[13:22:27.676]                 common <- intersect(names, old_names)
[13:22:27.676]                 added <- setdiff(names, old_names)
[13:22:27.676]                 removed <- setdiff(old_names, names)
[13:22:27.676]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:27.676]                   envs[common]]
[13:22:27.676]                 NAMES <- toupper(changed)
[13:22:27.676]                 args <- list()
[13:22:27.676]                 for (kk in seq_along(NAMES)) {
[13:22:27.676]                   name <- changed[[kk]]
[13:22:27.676]                   NAME <- NAMES[[kk]]
[13:22:27.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:27.676]                     next
[13:22:27.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:27.676]                 }
[13:22:27.676]                 NAMES <- toupper(added)
[13:22:27.676]                 for (kk in seq_along(NAMES)) {
[13:22:27.676]                   name <- added[[kk]]
[13:22:27.676]                   NAME <- NAMES[[kk]]
[13:22:27.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:27.676]                     next
[13:22:27.676]                   args[[name]] <- ""
[13:22:27.676]                 }
[13:22:27.676]                 NAMES <- toupper(removed)
[13:22:27.676]                 for (kk in seq_along(NAMES)) {
[13:22:27.676]                   name <- removed[[kk]]
[13:22:27.676]                   NAME <- NAMES[[kk]]
[13:22:27.676]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:27.676]                     next
[13:22:27.676]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:27.676]                 }
[13:22:27.676]                 if (length(args) > 0) 
[13:22:27.676]                   base::do.call(base::Sys.setenv, args = args)
[13:22:27.676]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:27.676]             }
[13:22:27.676]             else {
[13:22:27.676]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:27.676]             }
[13:22:27.676]             {
[13:22:27.676]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:27.676]                   0L) {
[13:22:27.676]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:27.676]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:27.676]                   base::options(opts)
[13:22:27.676]                 }
[13:22:27.676]                 {
[13:22:27.676]                   {
[13:22:27.676]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:27.676]                     NULL
[13:22:27.676]                   }
[13:22:27.676]                   options(future.plan = function (..., workers = 2L, 
[13:22:27.676]                     envir = parent.frame()) 
[13:22:27.676]                   strategy(..., workers = workers, envir = envir))
[13:22:27.676]                   if (is.na(NA_character_)) 
[13:22:27.676]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:27.676]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:27.676]                   future::plan(list(function (..., workers = 2L, 
[13:22:27.676]                     envir = parent.frame()) 
[13:22:27.676]                   strategy(..., workers = workers, envir = envir)), 
[13:22:27.676]                     .cleanup = FALSE, .init = FALSE)
[13:22:27.676]                 }
[13:22:27.676]             }
[13:22:27.676]         }
[13:22:27.676]     })
[13:22:27.676]     if (TRUE) {
[13:22:27.676]         base::sink(type = "output", split = FALSE)
[13:22:27.676]         if (TRUE) {
[13:22:27.676]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:27.676]         }
[13:22:27.676]         else {
[13:22:27.676]             ...future.result["stdout"] <- base::list(NULL)
[13:22:27.676]         }
[13:22:27.676]         base::close(...future.stdout)
[13:22:27.676]         ...future.stdout <- NULL
[13:22:27.676]     }
[13:22:27.676]     ...future.result$conditions <- ...future.conditions
[13:22:27.676]     ...future.result$finished <- base::Sys.time()
[13:22:27.676]     ...future.result
[13:22:27.676] }
[13:22:27.748] MultisessionFuture started
[13:22:27.749] result() for ClusterFuture ...
[13:22:27.750] receiveMessageFromWorker() for ClusterFuture ...
[13:22:27.750] - Validating connection of MultisessionFuture
[13:22:27.775] - received message: FutureResult
[13:22:27.775] - Received FutureResult
[13:22:27.778] - Erased future from FutureRegistry
[13:22:27.778] result() for ClusterFuture ...
[13:22:27.778] - result already collected: FutureResult
[13:22:27.778] result() for ClusterFuture ... done
[13:22:27.779] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:27.779] result() for ClusterFuture ... done
[13:22:27.779] result() for ClusterFuture ...
[13:22:27.779] - result already collected: FutureResult
[13:22:27.779] result() for ClusterFuture ... done
[13:22:27.779] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:27.779] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[13:22:27.781] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.781] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.781] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.781] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.781] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.781] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.781] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.782] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.783] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.784] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.785] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[13:22:27.785] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.785] Setting plan('default')
[13:22:27.785] plan(): Setting new future strategy stack:
[13:22:27.786] List of future strategies:
[13:22:27.786] 1. sequential:
[13:22:27.786]    - args: function (..., envir = parent.frame())
[13:22:27.786]    - tweaked: FALSE
[13:22:27.786]    - call: NULL
[13:22:27.786] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:22:27.787] plan(): Setting new future strategy stack:
[13:22:27.787] List of future strategies:
[13:22:27.787] 1. sequential:
[13:22:27.787]    - args: function (..., envir = parent.frame())
[13:22:27.787]    - tweaked: FALSE
[13:22:27.787]    - call: NULL
[13:22:27.788] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[13:22:27.789] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.789] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.790] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.790] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.790] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.790] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.790] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.791] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.791] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.791] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.791] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.791] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.791] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.792] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.792] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.792] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.792] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.792] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.793] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.793] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.793] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.793] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.793] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.794] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.794] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.794] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.794] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.794] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.794] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.795] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[13:22:27.795] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.796] Setting plan('default')
[13:22:27.796] plan(): Setting new future strategy stack:
[13:22:27.796] List of future strategies:
[13:22:27.796] 1. sequential:
[13:22:27.796]    - args: function (..., envir = parent.frame())
[13:22:27.796]    - tweaked: FALSE
[13:22:27.796]    - call: NULL
[13:22:27.797] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:22:27.797] plan(): Setting new future strategy stack:
[13:22:27.797] List of future strategies:
[13:22:27.797] 1. sequential:
[13:22:27.797]    - args: function (..., envir = parent.frame())
[13:22:27.797]    - tweaked: FALSE
[13:22:27.797]    - call: NULL
[13:22:27.798] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[13:22:27.799] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.799] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.799] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.799] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.799] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.799] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.800] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.800] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.800] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.800] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.800] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.800] Environment variable ‘R_FUTURE_PLAN’ not set
[13:22:27.801] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.801] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.801] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.801] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.801] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.802] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.802] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.802] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.802] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.802] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.802] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.803] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.803] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.803] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.803] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.803] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.804] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.804] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[13:22:27.805] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.805] Setting plan('default')
[13:22:27.805] plan(): Setting new future strategy stack:
[13:22:27.805] List of future strategies:
[13:22:27.805] 1. sequential:
[13:22:27.805]    - args: function (..., envir = parent.frame())
[13:22:27.805]    - tweaked: FALSE
[13:22:27.805]    - call: NULL
[13:22:27.806] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:22:27.806] plan(): Setting new future strategy stack:
[13:22:27.806] List of future strategies:
[13:22:27.806] 1. sequential:
[13:22:27.806]    - args: function (..., envir = parent.frame())
[13:22:27.806]    - tweaked: FALSE
[13:22:27.806]    - call: NULL
[13:22:27.807] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:22:27.808] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:27.808] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:27.808] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:27.808] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:27.808] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:27.809] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:27.809] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:27.809] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:27.809] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:27.809] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:27.809] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:27.809] R_FUTURE_PLAN=‘multisession’
[13:22:27.810] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[13:22:27.810] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:27.810] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:27.810] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:27.810] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:27.810] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:27.810] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:27.811] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:27.812] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:27.812] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:27.812] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:27.812] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:27.812] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:27.812] Option 'future.plan' = ‘multisession’
[13:22:27.812] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:27.812] Setting plan('default')
[13:22:27.813] plan(): Setting new future strategy stack:
[13:22:27.813] List of future strategies:
[13:22:27.813] 1. multisession:
[13:22:27.813]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:27.813]    - tweaked: FALSE
[13:22:27.813]    - call: plan("default", .init = FALSE)
[13:22:27.817] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:22:27.817] plan(): Setting new future strategy stack:
[13:22:27.817] List of future strategies:
[13:22:27.817] 1. multisession:
[13:22:27.817]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:27.817]    - tweaked: FALSE
[13:22:27.817]    - call: plan("default")
[13:22:27.818] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:27.818] multisession:
[13:22:27.818] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:27.818] - tweaked: FALSE
[13:22:27.818] - call: plan("default")
[13:22:27.823] getGlobalsAndPackages() ...
[13:22:27.823] Not searching for globals
[13:22:27.824] - globals: [0] <none>
[13:22:27.824] getGlobalsAndPackages() ... DONE
[13:22:27.824] [local output] makeClusterPSOCK() ...
[13:22:27.824] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:27.825] [local output] Base port: 11984
[13:22:27.825] [local output] Getting setup options for 2 cluster nodes ...
[13:22:27.825] [local output]  - Node 1 of 2 ...
[13:22:27.825] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:27.826] [local output] Rscript port: 11984

[13:22:27.826] [local output]  - Node 2 of 2 ...
[13:22:27.826] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:27.827] [local output] Rscript port: 11984

[13:22:27.827] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:27.827] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:27.828] [local output] Setting up PSOCK nodes in parallel
[13:22:27.828] List of 36
[13:22:27.828]  $ worker          : chr "localhost"
[13:22:27.828]   ..- attr(*, "localhost")= logi TRUE
[13:22:27.828]  $ master          : chr "localhost"
[13:22:27.828]  $ port            : int 11984
[13:22:27.828]  $ connectTimeout  : num 120
[13:22:27.828]  $ timeout         : num 2592000
[13:22:27.828]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:27.828]  $ homogeneous     : logi TRUE
[13:22:27.828]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:27.828]  $ rscript_envs    : NULL
[13:22:27.828]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:27.828]  $ rscript_startup : NULL
[13:22:27.828]  $ rscript_sh      : chr "sh"
[13:22:27.828]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:27.828]  $ methods         : logi TRUE
[13:22:27.828]  $ socketOptions   : chr "no-delay"
[13:22:27.828]  $ useXDR          : logi FALSE
[13:22:27.828]  $ outfile         : chr "/dev/null"
[13:22:27.828]  $ renice          : int NA
[13:22:27.828]  $ rshcmd          : NULL
[13:22:27.828]  $ user            : chr(0) 
[13:22:27.828]  $ revtunnel       : logi FALSE
[13:22:27.828]  $ rshlogfile      : NULL
[13:22:27.828]  $ rshopts         : chr(0) 
[13:22:27.828]  $ rank            : int 1
[13:22:27.828]  $ manual          : logi FALSE
[13:22:27.828]  $ dryrun          : logi FALSE
[13:22:27.828]  $ quiet           : logi FALSE
[13:22:27.828]  $ setup_strategy  : chr "parallel"
[13:22:27.828]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:27.828]  $ pidfile         : chr "/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b842a965a2a.pid"
[13:22:27.828]  $ rshcmd_label    : NULL
[13:22:27.828]  $ rsh_call        : NULL
[13:22:27.828]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:27.828]  $ localMachine    : logi TRUE
[13:22:27.828]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:27.828]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:27.828]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:27.828]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:27.828]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:27.828]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:27.828]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:27.828]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:27.828]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:27.828]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:27.828]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:27.828]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:27.828]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:27.828]  $ arguments       :List of 28
[13:22:27.828]   ..$ worker          : chr "localhost"
[13:22:27.828]   ..$ master          : NULL
[13:22:27.828]   ..$ port            : int 11984
[13:22:27.828]   ..$ connectTimeout  : num 120
[13:22:27.828]   ..$ timeout         : num 2592000
[13:22:27.828]   ..$ rscript         : NULL
[13:22:27.828]   ..$ homogeneous     : NULL
[13:22:27.828]   ..$ rscript_args    : NULL
[13:22:27.828]   ..$ rscript_envs    : NULL
[13:22:27.828]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:27.828]   ..$ rscript_startup : NULL
[13:22:27.828]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:27.828]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:27.828]   ..$ methods         : logi TRUE
[13:22:27.828]   ..$ socketOptions   : chr "no-delay"
[13:22:27.828]   ..$ useXDR          : logi FALSE
[13:22:27.828]   ..$ outfile         : chr "/dev/null"
[13:22:27.828]   ..$ renice          : int NA
[13:22:27.828]   ..$ rshcmd          : NULL
[13:22:27.828]   ..$ user            : NULL
[13:22:27.828]   ..$ revtunnel       : logi NA
[13:22:27.828]   ..$ rshlogfile      : NULL
[13:22:27.828]   ..$ rshopts         : NULL
[13:22:27.828]   ..$ rank            : int 1
[13:22:27.828]   ..$ manual          : logi FALSE
[13:22:27.828]   ..$ dryrun          : logi FALSE
[13:22:27.828]   ..$ quiet           : logi FALSE
[13:22:27.828]   ..$ setup_strategy  : chr "parallel"
[13:22:27.828]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:27.844] [local output] System call to launch all workers:
[13:22:27.844] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b842a965a2a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11984 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:27.844] [local output] Starting PSOCK main server
[13:22:27.845] [local output] Workers launched
[13:22:27.846] [local output] Waiting for workers to connect back
[13:22:27.846]  - [local output] 0 workers out of 2 ready
[13:22:28.116]  - [local output] 0 workers out of 2 ready
[13:22:28.116]  - [local output] 1 workers out of 2 ready
[13:22:28.119]  - [local output] 1 workers out of 2 ready
[13:22:28.120]  - [local output] 2 workers out of 2 ready
[13:22:28.120] [local output] Launching of workers completed
[13:22:28.120] [local output] Collecting session information from workers
[13:22:28.121] [local output]  - Worker #1 of 2
[13:22:28.121] [local output]  - Worker #2 of 2
[13:22:28.122] [local output] makeClusterPSOCK() ... done
[13:22:28.134] Packages needed by the future expression (n = 0): <none>
[13:22:28.135] Packages needed by future strategies (n = 0): <none>
[13:22:28.135] {
[13:22:28.135]     {
[13:22:28.135]         {
[13:22:28.135]             ...future.startTime <- base::Sys.time()
[13:22:28.135]             {
[13:22:28.135]                 {
[13:22:28.135]                   {
[13:22:28.135]                     {
[13:22:28.135]                       base::local({
[13:22:28.135]                         has_future <- base::requireNamespace("future", 
[13:22:28.135]                           quietly = TRUE)
[13:22:28.135]                         if (has_future) {
[13:22:28.135]                           ns <- base::getNamespace("future")
[13:22:28.135]                           version <- ns[[".package"]][["version"]]
[13:22:28.135]                           if (is.null(version)) 
[13:22:28.135]                             version <- utils::packageVersion("future")
[13:22:28.135]                         }
[13:22:28.135]                         else {
[13:22:28.135]                           version <- NULL
[13:22:28.135]                         }
[13:22:28.135]                         if (!has_future || version < "1.8.0") {
[13:22:28.135]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:28.135]                             "", base::R.version$version.string), 
[13:22:28.135]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:28.135]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:28.135]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:28.135]                               "release", "version")], collapse = " "), 
[13:22:28.135]                             hostname = base::Sys.info()[["nodename"]])
[13:22:28.135]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:28.135]                             info)
[13:22:28.135]                           info <- base::paste(info, collapse = "; ")
[13:22:28.135]                           if (!has_future) {
[13:22:28.135]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:28.135]                               info)
[13:22:28.135]                           }
[13:22:28.135]                           else {
[13:22:28.135]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:28.135]                               info, version)
[13:22:28.135]                           }
[13:22:28.135]                           base::stop(msg)
[13:22:28.135]                         }
[13:22:28.135]                       })
[13:22:28.135]                     }
[13:22:28.135]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:28.135]                     base::options(mc.cores = 1L)
[13:22:28.135]                   }
[13:22:28.135]                   options(future.plan = NULL)
[13:22:28.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:28.135]                 }
[13:22:28.135]                 ...future.workdir <- getwd()
[13:22:28.135]             }
[13:22:28.135]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:28.135]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:28.135]         }
[13:22:28.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:28.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:28.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:28.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:28.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:28.135]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:28.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:28.135]             base::names(...future.oldOptions))
[13:22:28.135]     }
[13:22:28.135]     if (FALSE) {
[13:22:28.135]     }
[13:22:28.135]     else {
[13:22:28.135]         if (TRUE) {
[13:22:28.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:28.135]                 open = "w")
[13:22:28.135]         }
[13:22:28.135]         else {
[13:22:28.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:28.135]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:28.135]         }
[13:22:28.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:28.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:28.135]             base::sink(type = "output", split = FALSE)
[13:22:28.135]             base::close(...future.stdout)
[13:22:28.135]         }, add = TRUE)
[13:22:28.135]     }
[13:22:28.135]     ...future.frame <- base::sys.nframe()
[13:22:28.135]     ...future.conditions <- base::list()
[13:22:28.135]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:28.135]     if (FALSE) {
[13:22:28.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:28.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:28.135]     }
[13:22:28.135]     ...future.result <- base::tryCatch({
[13:22:28.135]         base::withCallingHandlers({
[13:22:28.135]             ...future.value <- base::withVisible(base::local({
[13:22:28.135]                 ...future.makeSendCondition <- local({
[13:22:28.135]                   sendCondition <- NULL
[13:22:28.135]                   function(frame = 1L) {
[13:22:28.135]                     if (is.function(sendCondition)) 
[13:22:28.135]                       return(sendCondition)
[13:22:28.135]                     ns <- getNamespace("parallel")
[13:22:28.135]                     if (exists("sendData", mode = "function", 
[13:22:28.135]                       envir = ns)) {
[13:22:28.135]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:28.135]                         envir = ns)
[13:22:28.135]                       envir <- sys.frame(frame)
[13:22:28.135]                       master <- NULL
[13:22:28.135]                       while (!identical(envir, .GlobalEnv) && 
[13:22:28.135]                         !identical(envir, emptyenv())) {
[13:22:28.135]                         if (exists("master", mode = "list", envir = envir, 
[13:22:28.135]                           inherits = FALSE)) {
[13:22:28.135]                           master <- get("master", mode = "list", 
[13:22:28.135]                             envir = envir, inherits = FALSE)
[13:22:28.135]                           if (inherits(master, c("SOCKnode", 
[13:22:28.135]                             "SOCK0node"))) {
[13:22:28.135]                             sendCondition <<- function(cond) {
[13:22:28.135]                               data <- list(type = "VALUE", value = cond, 
[13:22:28.135]                                 success = TRUE)
[13:22:28.135]                               parallel_sendData(master, data)
[13:22:28.135]                             }
[13:22:28.135]                             return(sendCondition)
[13:22:28.135]                           }
[13:22:28.135]                         }
[13:22:28.135]                         frame <- frame + 1L
[13:22:28.135]                         envir <- sys.frame(frame)
[13:22:28.135]                       }
[13:22:28.135]                     }
[13:22:28.135]                     sendCondition <<- function(cond) NULL
[13:22:28.135]                   }
[13:22:28.135]                 })
[13:22:28.135]                 withCallingHandlers({
[13:22:28.135]                   NA
[13:22:28.135]                 }, immediateCondition = function(cond) {
[13:22:28.135]                   sendCondition <- ...future.makeSendCondition()
[13:22:28.135]                   sendCondition(cond)
[13:22:28.135]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.135]                   {
[13:22:28.135]                     inherits <- base::inherits
[13:22:28.135]                     invokeRestart <- base::invokeRestart
[13:22:28.135]                     is.null <- base::is.null
[13:22:28.135]                     muffled <- FALSE
[13:22:28.135]                     if (inherits(cond, "message")) {
[13:22:28.135]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:28.135]                       if (muffled) 
[13:22:28.135]                         invokeRestart("muffleMessage")
[13:22:28.135]                     }
[13:22:28.135]                     else if (inherits(cond, "warning")) {
[13:22:28.135]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:28.135]                       if (muffled) 
[13:22:28.135]                         invokeRestart("muffleWarning")
[13:22:28.135]                     }
[13:22:28.135]                     else if (inherits(cond, "condition")) {
[13:22:28.135]                       if (!is.null(pattern)) {
[13:22:28.135]                         computeRestarts <- base::computeRestarts
[13:22:28.135]                         grepl <- base::grepl
[13:22:28.135]                         restarts <- computeRestarts(cond)
[13:22:28.135]                         for (restart in restarts) {
[13:22:28.135]                           name <- restart$name
[13:22:28.135]                           if (is.null(name)) 
[13:22:28.135]                             next
[13:22:28.135]                           if (!grepl(pattern, name)) 
[13:22:28.135]                             next
[13:22:28.135]                           invokeRestart(restart)
[13:22:28.135]                           muffled <- TRUE
[13:22:28.135]                           break
[13:22:28.135]                         }
[13:22:28.135]                       }
[13:22:28.135]                     }
[13:22:28.135]                     invisible(muffled)
[13:22:28.135]                   }
[13:22:28.135]                   muffleCondition(cond)
[13:22:28.135]                 })
[13:22:28.135]             }))
[13:22:28.135]             future::FutureResult(value = ...future.value$value, 
[13:22:28.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.135]                   ...future.rng), globalenv = if (FALSE) 
[13:22:28.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:28.135]                     ...future.globalenv.names))
[13:22:28.135]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:28.135]         }, condition = base::local({
[13:22:28.135]             c <- base::c
[13:22:28.135]             inherits <- base::inherits
[13:22:28.135]             invokeRestart <- base::invokeRestart
[13:22:28.135]             length <- base::length
[13:22:28.135]             list <- base::list
[13:22:28.135]             seq.int <- base::seq.int
[13:22:28.135]             signalCondition <- base::signalCondition
[13:22:28.135]             sys.calls <- base::sys.calls
[13:22:28.135]             `[[` <- base::`[[`
[13:22:28.135]             `+` <- base::`+`
[13:22:28.135]             `<<-` <- base::`<<-`
[13:22:28.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:28.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:28.135]                   3L)]
[13:22:28.135]             }
[13:22:28.135]             function(cond) {
[13:22:28.135]                 is_error <- inherits(cond, "error")
[13:22:28.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:28.135]                   NULL)
[13:22:28.135]                 if (is_error) {
[13:22:28.135]                   sessionInformation <- function() {
[13:22:28.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:28.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:28.135]                       search = base::search(), system = base::Sys.info())
[13:22:28.135]                   }
[13:22:28.135]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:28.135]                     cond$call), session = sessionInformation(), 
[13:22:28.135]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:28.135]                   signalCondition(cond)
[13:22:28.135]                 }
[13:22:28.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:28.135]                 "immediateCondition"))) {
[13:22:28.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:28.135]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:28.135]                   if (TRUE && !signal) {
[13:22:28.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.135]                     {
[13:22:28.135]                       inherits <- base::inherits
[13:22:28.135]                       invokeRestart <- base::invokeRestart
[13:22:28.135]                       is.null <- base::is.null
[13:22:28.135]                       muffled <- FALSE
[13:22:28.135]                       if (inherits(cond, "message")) {
[13:22:28.135]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.135]                         if (muffled) 
[13:22:28.135]                           invokeRestart("muffleMessage")
[13:22:28.135]                       }
[13:22:28.135]                       else if (inherits(cond, "warning")) {
[13:22:28.135]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.135]                         if (muffled) 
[13:22:28.135]                           invokeRestart("muffleWarning")
[13:22:28.135]                       }
[13:22:28.135]                       else if (inherits(cond, "condition")) {
[13:22:28.135]                         if (!is.null(pattern)) {
[13:22:28.135]                           computeRestarts <- base::computeRestarts
[13:22:28.135]                           grepl <- base::grepl
[13:22:28.135]                           restarts <- computeRestarts(cond)
[13:22:28.135]                           for (restart in restarts) {
[13:22:28.135]                             name <- restart$name
[13:22:28.135]                             if (is.null(name)) 
[13:22:28.135]                               next
[13:22:28.135]                             if (!grepl(pattern, name)) 
[13:22:28.135]                               next
[13:22:28.135]                             invokeRestart(restart)
[13:22:28.135]                             muffled <- TRUE
[13:22:28.135]                             break
[13:22:28.135]                           }
[13:22:28.135]                         }
[13:22:28.135]                       }
[13:22:28.135]                       invisible(muffled)
[13:22:28.135]                     }
[13:22:28.135]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.135]                   }
[13:22:28.135]                 }
[13:22:28.135]                 else {
[13:22:28.135]                   if (TRUE) {
[13:22:28.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.135]                     {
[13:22:28.135]                       inherits <- base::inherits
[13:22:28.135]                       invokeRestart <- base::invokeRestart
[13:22:28.135]                       is.null <- base::is.null
[13:22:28.135]                       muffled <- FALSE
[13:22:28.135]                       if (inherits(cond, "message")) {
[13:22:28.135]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.135]                         if (muffled) 
[13:22:28.135]                           invokeRestart("muffleMessage")
[13:22:28.135]                       }
[13:22:28.135]                       else if (inherits(cond, "warning")) {
[13:22:28.135]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.135]                         if (muffled) 
[13:22:28.135]                           invokeRestart("muffleWarning")
[13:22:28.135]                       }
[13:22:28.135]                       else if (inherits(cond, "condition")) {
[13:22:28.135]                         if (!is.null(pattern)) {
[13:22:28.135]                           computeRestarts <- base::computeRestarts
[13:22:28.135]                           grepl <- base::grepl
[13:22:28.135]                           restarts <- computeRestarts(cond)
[13:22:28.135]                           for (restart in restarts) {
[13:22:28.135]                             name <- restart$name
[13:22:28.135]                             if (is.null(name)) 
[13:22:28.135]                               next
[13:22:28.135]                             if (!grepl(pattern, name)) 
[13:22:28.135]                               next
[13:22:28.135]                             invokeRestart(restart)
[13:22:28.135]                             muffled <- TRUE
[13:22:28.135]                             break
[13:22:28.135]                           }
[13:22:28.135]                         }
[13:22:28.135]                       }
[13:22:28.135]                       invisible(muffled)
[13:22:28.135]                     }
[13:22:28.135]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.135]                   }
[13:22:28.135]                 }
[13:22:28.135]             }
[13:22:28.135]         }))
[13:22:28.135]     }, error = function(ex) {
[13:22:28.135]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:28.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.135]                 ...future.rng), started = ...future.startTime, 
[13:22:28.135]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:28.135]             version = "1.8"), class = "FutureResult")
[13:22:28.135]     }, finally = {
[13:22:28.135]         if (!identical(...future.workdir, getwd())) 
[13:22:28.135]             setwd(...future.workdir)
[13:22:28.135]         {
[13:22:28.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:28.135]                 ...future.oldOptions$nwarnings <- NULL
[13:22:28.135]             }
[13:22:28.135]             base::options(...future.oldOptions)
[13:22:28.135]             if (.Platform$OS.type == "windows") {
[13:22:28.135]                 old_names <- names(...future.oldEnvVars)
[13:22:28.135]                 envs <- base::Sys.getenv()
[13:22:28.135]                 names <- names(envs)
[13:22:28.135]                 common <- intersect(names, old_names)
[13:22:28.135]                 added <- setdiff(names, old_names)
[13:22:28.135]                 removed <- setdiff(old_names, names)
[13:22:28.135]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:28.135]                   envs[common]]
[13:22:28.135]                 NAMES <- toupper(changed)
[13:22:28.135]                 args <- list()
[13:22:28.135]                 for (kk in seq_along(NAMES)) {
[13:22:28.135]                   name <- changed[[kk]]
[13:22:28.135]                   NAME <- NAMES[[kk]]
[13:22:28.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.135]                     next
[13:22:28.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.135]                 }
[13:22:28.135]                 NAMES <- toupper(added)
[13:22:28.135]                 for (kk in seq_along(NAMES)) {
[13:22:28.135]                   name <- added[[kk]]
[13:22:28.135]                   NAME <- NAMES[[kk]]
[13:22:28.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.135]                     next
[13:22:28.135]                   args[[name]] <- ""
[13:22:28.135]                 }
[13:22:28.135]                 NAMES <- toupper(removed)
[13:22:28.135]                 for (kk in seq_along(NAMES)) {
[13:22:28.135]                   name <- removed[[kk]]
[13:22:28.135]                   NAME <- NAMES[[kk]]
[13:22:28.135]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.135]                     next
[13:22:28.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.135]                 }
[13:22:28.135]                 if (length(args) > 0) 
[13:22:28.135]                   base::do.call(base::Sys.setenv, args = args)
[13:22:28.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:28.135]             }
[13:22:28.135]             else {
[13:22:28.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:28.135]             }
[13:22:28.135]             {
[13:22:28.135]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:28.135]                   0L) {
[13:22:28.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:28.135]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:28.135]                   base::options(opts)
[13:22:28.135]                 }
[13:22:28.135]                 {
[13:22:28.135]                   {
[13:22:28.135]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:28.135]                     NULL
[13:22:28.135]                   }
[13:22:28.135]                   options(future.plan = "multisession")
[13:22:28.135]                   if (is.na("multisession")) 
[13:22:28.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.135]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[13:22:28.135]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:28.135]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:28.135]                     envir = parent.frame()) 
[13:22:28.135]                   {
[13:22:28.135]                     if (is.function(workers)) 
[13:22:28.135]                       workers <- workers()
[13:22:28.135]                     workers <- structure(as.integer(workers), 
[13:22:28.135]                       class = class(workers))
[13:22:28.135]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:28.135]                       workers >= 1)
[13:22:28.135]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:28.135]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:28.135]                     }
[13:22:28.135]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:28.135]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:28.135]                       envir = envir)
[13:22:28.135]                     if (!future$lazy) 
[13:22:28.135]                       future <- run(future)
[13:22:28.135]                     invisible(future)
[13:22:28.135]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:28.135]                 }
[13:22:28.135]             }
[13:22:28.135]         }
[13:22:28.135]     })
[13:22:28.135]     if (TRUE) {
[13:22:28.135]         base::sink(type = "output", split = FALSE)
[13:22:28.135]         if (TRUE) {
[13:22:28.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:28.135]         }
[13:22:28.135]         else {
[13:22:28.135]             ...future.result["stdout"] <- base::list(NULL)
[13:22:28.135]         }
[13:22:28.135]         base::close(...future.stdout)
[13:22:28.135]         ...future.stdout <- NULL
[13:22:28.135]     }
[13:22:28.135]     ...future.result$conditions <- ...future.conditions
[13:22:28.135]     ...future.result$finished <- base::Sys.time()
[13:22:28.135]     ...future.result
[13:22:28.135] }
[13:22:28.215] MultisessionFuture started
[13:22:28.215] result() for ClusterFuture ...
[13:22:28.215] receiveMessageFromWorker() for ClusterFuture ...
[13:22:28.216] - Validating connection of MultisessionFuture
[13:22:28.244] - received message: FutureResult
[13:22:28.244] - Received FutureResult
[13:22:28.244] - Erased future from FutureRegistry
[13:22:28.244] result() for ClusterFuture ...
[13:22:28.245] - result already collected: FutureResult
[13:22:28.245] result() for ClusterFuture ... done
[13:22:28.245] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:28.245] result() for ClusterFuture ... done
[13:22:28.245] result() for ClusterFuture ...
[13:22:28.245] - result already collected: FutureResult
[13:22:28.245] result() for ClusterFuture ... done
[13:22:28.245] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:28.249] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:22:28.250] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:28.250] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:28.250] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:28.250] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:28.251] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:28.252] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:28.253] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:28.253] Option 'future.plan' = ‘multisession’
[13:22:28.253] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:28.254] Setting plan('default')
[13:22:28.254] plan(): Setting new future strategy stack:
[13:22:28.254] List of future strategies:
[13:22:28.254] 1. multisession:
[13:22:28.254]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.254]    - tweaked: FALSE
[13:22:28.254]    - call: plan("default", .init = FALSE)
[13:22:28.258] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:22:28.259] plan(): Setting new future strategy stack:
[13:22:28.259] List of future strategies:
[13:22:28.259] 1. multisession:
[13:22:28.259]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.259]    - tweaked: FALSE
[13:22:28.259]    - call: plan("default")
[13:22:28.260] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:28.260] multisession:
[13:22:28.260] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.260] - tweaked: FALSE
[13:22:28.260] - call: plan("default")
[13:22:28.265] getGlobalsAndPackages() ...
[13:22:28.265] Not searching for globals
[13:22:28.265] - globals: [0] <none>
[13:22:28.266] getGlobalsAndPackages() ... DONE
[13:22:28.266] [local output] makeClusterPSOCK() ...
[13:22:28.266] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:28.267] [local output] Base port: 11696
[13:22:28.268] [local output] Getting setup options for 2 cluster nodes ...
[13:22:28.268] [local output]  - Node 1 of 2 ...
[13:22:28.268] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:28.269] [local output] Rscript port: 11696

[13:22:28.270] [local output]  - Node 2 of 2 ...
[13:22:28.270] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:28.271] [local output] Rscript port: 11696

[13:22:28.271] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:28.271] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:28.272] [local output] Setting up PSOCK nodes in parallel
[13:22:28.272] List of 36
[13:22:28.272]  $ worker          : chr "localhost"
[13:22:28.272]   ..- attr(*, "localhost")= logi TRUE
[13:22:28.272]  $ master          : chr "localhost"
[13:22:28.272]  $ port            : int 11696
[13:22:28.272]  $ connectTimeout  : num 120
[13:22:28.272]  $ timeout         : num 2592000
[13:22:28.272]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:28.272]  $ homogeneous     : logi TRUE
[13:22:28.272]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:28.272]  $ rscript_envs    : NULL
[13:22:28.272]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:28.272]  $ rscript_startup : NULL
[13:22:28.272]  $ rscript_sh      : chr "sh"
[13:22:28.272]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:28.272]  $ methods         : logi TRUE
[13:22:28.272]  $ socketOptions   : chr "no-delay"
[13:22:28.272]  $ useXDR          : logi FALSE
[13:22:28.272]  $ outfile         : chr "/dev/null"
[13:22:28.272]  $ renice          : int NA
[13:22:28.272]  $ rshcmd          : NULL
[13:22:28.272]  $ user            : chr(0) 
[13:22:28.272]  $ revtunnel       : logi FALSE
[13:22:28.272]  $ rshlogfile      : NULL
[13:22:28.272]  $ rshopts         : chr(0) 
[13:22:28.272]  $ rank            : int 1
[13:22:28.272]  $ manual          : logi FALSE
[13:22:28.272]  $ dryrun          : logi FALSE
[13:22:28.272]  $ quiet           : logi FALSE
[13:22:28.272]  $ setup_strategy  : chr "parallel"
[13:22:28.272]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:28.272]  $ pidfile         : chr "/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b84b3ecc38.pid"
[13:22:28.272]  $ rshcmd_label    : NULL
[13:22:28.272]  $ rsh_call        : NULL
[13:22:28.272]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:28.272]  $ localMachine    : logi TRUE
[13:22:28.272]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:28.272]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:28.272]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:28.272]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:28.272]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:28.272]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:28.272]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:28.272]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:28.272]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:28.272]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:28.272]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:28.272]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:28.272]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:28.272]  $ arguments       :List of 28
[13:22:28.272]   ..$ worker          : chr "localhost"
[13:22:28.272]   ..$ master          : NULL
[13:22:28.272]   ..$ port            : int 11696
[13:22:28.272]   ..$ connectTimeout  : num 120
[13:22:28.272]   ..$ timeout         : num 2592000
[13:22:28.272]   ..$ rscript         : NULL
[13:22:28.272]   ..$ homogeneous     : NULL
[13:22:28.272]   ..$ rscript_args    : NULL
[13:22:28.272]   ..$ rscript_envs    : NULL
[13:22:28.272]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:28.272]   ..$ rscript_startup : NULL
[13:22:28.272]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:28.272]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:28.272]   ..$ methods         : logi TRUE
[13:22:28.272]   ..$ socketOptions   : chr "no-delay"
[13:22:28.272]   ..$ useXDR          : logi FALSE
[13:22:28.272]   ..$ outfile         : chr "/dev/null"
[13:22:28.272]   ..$ renice          : int NA
[13:22:28.272]   ..$ rshcmd          : NULL
[13:22:28.272]   ..$ user            : NULL
[13:22:28.272]   ..$ revtunnel       : logi NA
[13:22:28.272]   ..$ rshlogfile      : NULL
[13:22:28.272]   ..$ rshopts         : NULL
[13:22:28.272]   ..$ rank            : int 1
[13:22:28.272]   ..$ manual          : logi FALSE
[13:22:28.272]   ..$ dryrun          : logi FALSE
[13:22:28.272]   ..$ quiet           : logi FALSE
[13:22:28.272]   ..$ setup_strategy  : chr "parallel"
[13:22:28.272]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:28.291] [local output] System call to launch all workers:
[13:22:28.291] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmppW0eEI/worker.rank=1.parallelly.parent=93060.16b84b3ecc38.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11696 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:28.291] [local output] Starting PSOCK main server
[13:22:28.292] [local output] Workers launched
[13:22:28.293] [local output] Waiting for workers to connect back
[13:22:28.293]  - [local output] 0 workers out of 2 ready
[13:22:28.547]  - [local output] 0 workers out of 2 ready
[13:22:28.547]  - [local output] 1 workers out of 2 ready
[13:22:28.554]  - [local output] 1 workers out of 2 ready
[13:22:28.555]  - [local output] 2 workers out of 2 ready
[13:22:28.555] [local output] Launching of workers completed
[13:22:28.555] [local output] Collecting session information from workers
[13:22:28.556] [local output]  - Worker #1 of 2
[13:22:28.556] [local output]  - Worker #2 of 2
[13:22:28.557] [local output] makeClusterPSOCK() ... done
[13:22:28.568] Packages needed by the future expression (n = 0): <none>
[13:22:28.568] Packages needed by future strategies (n = 0): <none>
[13:22:28.568] {
[13:22:28.568]     {
[13:22:28.568]         {
[13:22:28.568]             ...future.startTime <- base::Sys.time()
[13:22:28.568]             {
[13:22:28.568]                 {
[13:22:28.568]                   {
[13:22:28.568]                     {
[13:22:28.568]                       base::local({
[13:22:28.568]                         has_future <- base::requireNamespace("future", 
[13:22:28.568]                           quietly = TRUE)
[13:22:28.568]                         if (has_future) {
[13:22:28.568]                           ns <- base::getNamespace("future")
[13:22:28.568]                           version <- ns[[".package"]][["version"]]
[13:22:28.568]                           if (is.null(version)) 
[13:22:28.568]                             version <- utils::packageVersion("future")
[13:22:28.568]                         }
[13:22:28.568]                         else {
[13:22:28.568]                           version <- NULL
[13:22:28.568]                         }
[13:22:28.568]                         if (!has_future || version < "1.8.0") {
[13:22:28.568]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:28.568]                             "", base::R.version$version.string), 
[13:22:28.568]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:28.568]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:28.568]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:28.568]                               "release", "version")], collapse = " "), 
[13:22:28.568]                             hostname = base::Sys.info()[["nodename"]])
[13:22:28.568]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:28.568]                             info)
[13:22:28.568]                           info <- base::paste(info, collapse = "; ")
[13:22:28.568]                           if (!has_future) {
[13:22:28.568]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:28.568]                               info)
[13:22:28.568]                           }
[13:22:28.568]                           else {
[13:22:28.568]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:28.568]                               info, version)
[13:22:28.568]                           }
[13:22:28.568]                           base::stop(msg)
[13:22:28.568]                         }
[13:22:28.568]                       })
[13:22:28.568]                     }
[13:22:28.568]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:28.568]                     base::options(mc.cores = 1L)
[13:22:28.568]                   }
[13:22:28.568]                   options(future.plan = NULL)
[13:22:28.568]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.568]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:28.568]                 }
[13:22:28.568]                 ...future.workdir <- getwd()
[13:22:28.568]             }
[13:22:28.568]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:28.568]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:28.568]         }
[13:22:28.568]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:28.568]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:28.568]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:28.568]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:28.568]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:28.568]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:28.568]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:28.568]             base::names(...future.oldOptions))
[13:22:28.568]     }
[13:22:28.568]     if (FALSE) {
[13:22:28.568]     }
[13:22:28.568]     else {
[13:22:28.568]         if (TRUE) {
[13:22:28.568]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:28.568]                 open = "w")
[13:22:28.568]         }
[13:22:28.568]         else {
[13:22:28.568]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:28.568]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:28.568]         }
[13:22:28.568]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:28.568]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:28.568]             base::sink(type = "output", split = FALSE)
[13:22:28.568]             base::close(...future.stdout)
[13:22:28.568]         }, add = TRUE)
[13:22:28.568]     }
[13:22:28.568]     ...future.frame <- base::sys.nframe()
[13:22:28.568]     ...future.conditions <- base::list()
[13:22:28.568]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:28.568]     if (FALSE) {
[13:22:28.568]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:28.568]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:28.568]     }
[13:22:28.568]     ...future.result <- base::tryCatch({
[13:22:28.568]         base::withCallingHandlers({
[13:22:28.568]             ...future.value <- base::withVisible(base::local({
[13:22:28.568]                 ...future.makeSendCondition <- local({
[13:22:28.568]                   sendCondition <- NULL
[13:22:28.568]                   function(frame = 1L) {
[13:22:28.568]                     if (is.function(sendCondition)) 
[13:22:28.568]                       return(sendCondition)
[13:22:28.568]                     ns <- getNamespace("parallel")
[13:22:28.568]                     if (exists("sendData", mode = "function", 
[13:22:28.568]                       envir = ns)) {
[13:22:28.568]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:28.568]                         envir = ns)
[13:22:28.568]                       envir <- sys.frame(frame)
[13:22:28.568]                       master <- NULL
[13:22:28.568]                       while (!identical(envir, .GlobalEnv) && 
[13:22:28.568]                         !identical(envir, emptyenv())) {
[13:22:28.568]                         if (exists("master", mode = "list", envir = envir, 
[13:22:28.568]                           inherits = FALSE)) {
[13:22:28.568]                           master <- get("master", mode = "list", 
[13:22:28.568]                             envir = envir, inherits = FALSE)
[13:22:28.568]                           if (inherits(master, c("SOCKnode", 
[13:22:28.568]                             "SOCK0node"))) {
[13:22:28.568]                             sendCondition <<- function(cond) {
[13:22:28.568]                               data <- list(type = "VALUE", value = cond, 
[13:22:28.568]                                 success = TRUE)
[13:22:28.568]                               parallel_sendData(master, data)
[13:22:28.568]                             }
[13:22:28.568]                             return(sendCondition)
[13:22:28.568]                           }
[13:22:28.568]                         }
[13:22:28.568]                         frame <- frame + 1L
[13:22:28.568]                         envir <- sys.frame(frame)
[13:22:28.568]                       }
[13:22:28.568]                     }
[13:22:28.568]                     sendCondition <<- function(cond) NULL
[13:22:28.568]                   }
[13:22:28.568]                 })
[13:22:28.568]                 withCallingHandlers({
[13:22:28.568]                   NA
[13:22:28.568]                 }, immediateCondition = function(cond) {
[13:22:28.568]                   sendCondition <- ...future.makeSendCondition()
[13:22:28.568]                   sendCondition(cond)
[13:22:28.568]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.568]                   {
[13:22:28.568]                     inherits <- base::inherits
[13:22:28.568]                     invokeRestart <- base::invokeRestart
[13:22:28.568]                     is.null <- base::is.null
[13:22:28.568]                     muffled <- FALSE
[13:22:28.568]                     if (inherits(cond, "message")) {
[13:22:28.568]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:28.568]                       if (muffled) 
[13:22:28.568]                         invokeRestart("muffleMessage")
[13:22:28.568]                     }
[13:22:28.568]                     else if (inherits(cond, "warning")) {
[13:22:28.568]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:28.568]                       if (muffled) 
[13:22:28.568]                         invokeRestart("muffleWarning")
[13:22:28.568]                     }
[13:22:28.568]                     else if (inherits(cond, "condition")) {
[13:22:28.568]                       if (!is.null(pattern)) {
[13:22:28.568]                         computeRestarts <- base::computeRestarts
[13:22:28.568]                         grepl <- base::grepl
[13:22:28.568]                         restarts <- computeRestarts(cond)
[13:22:28.568]                         for (restart in restarts) {
[13:22:28.568]                           name <- restart$name
[13:22:28.568]                           if (is.null(name)) 
[13:22:28.568]                             next
[13:22:28.568]                           if (!grepl(pattern, name)) 
[13:22:28.568]                             next
[13:22:28.568]                           invokeRestart(restart)
[13:22:28.568]                           muffled <- TRUE
[13:22:28.568]                           break
[13:22:28.568]                         }
[13:22:28.568]                       }
[13:22:28.568]                     }
[13:22:28.568]                     invisible(muffled)
[13:22:28.568]                   }
[13:22:28.568]                   muffleCondition(cond)
[13:22:28.568]                 })
[13:22:28.568]             }))
[13:22:28.568]             future::FutureResult(value = ...future.value$value, 
[13:22:28.568]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.568]                   ...future.rng), globalenv = if (FALSE) 
[13:22:28.568]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:28.568]                     ...future.globalenv.names))
[13:22:28.568]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:28.568]         }, condition = base::local({
[13:22:28.568]             c <- base::c
[13:22:28.568]             inherits <- base::inherits
[13:22:28.568]             invokeRestart <- base::invokeRestart
[13:22:28.568]             length <- base::length
[13:22:28.568]             list <- base::list
[13:22:28.568]             seq.int <- base::seq.int
[13:22:28.568]             signalCondition <- base::signalCondition
[13:22:28.568]             sys.calls <- base::sys.calls
[13:22:28.568]             `[[` <- base::`[[`
[13:22:28.568]             `+` <- base::`+`
[13:22:28.568]             `<<-` <- base::`<<-`
[13:22:28.568]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:28.568]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:28.568]                   3L)]
[13:22:28.568]             }
[13:22:28.568]             function(cond) {
[13:22:28.568]                 is_error <- inherits(cond, "error")
[13:22:28.568]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:28.568]                   NULL)
[13:22:28.568]                 if (is_error) {
[13:22:28.568]                   sessionInformation <- function() {
[13:22:28.568]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:28.568]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:28.568]                       search = base::search(), system = base::Sys.info())
[13:22:28.568]                   }
[13:22:28.568]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.568]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:28.568]                     cond$call), session = sessionInformation(), 
[13:22:28.568]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:28.568]                   signalCondition(cond)
[13:22:28.568]                 }
[13:22:28.568]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:28.568]                 "immediateCondition"))) {
[13:22:28.568]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:28.568]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.568]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:28.568]                   if (TRUE && !signal) {
[13:22:28.568]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.568]                     {
[13:22:28.568]                       inherits <- base::inherits
[13:22:28.568]                       invokeRestart <- base::invokeRestart
[13:22:28.568]                       is.null <- base::is.null
[13:22:28.568]                       muffled <- FALSE
[13:22:28.568]                       if (inherits(cond, "message")) {
[13:22:28.568]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.568]                         if (muffled) 
[13:22:28.568]                           invokeRestart("muffleMessage")
[13:22:28.568]                       }
[13:22:28.568]                       else if (inherits(cond, "warning")) {
[13:22:28.568]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.568]                         if (muffled) 
[13:22:28.568]                           invokeRestart("muffleWarning")
[13:22:28.568]                       }
[13:22:28.568]                       else if (inherits(cond, "condition")) {
[13:22:28.568]                         if (!is.null(pattern)) {
[13:22:28.568]                           computeRestarts <- base::computeRestarts
[13:22:28.568]                           grepl <- base::grepl
[13:22:28.568]                           restarts <- computeRestarts(cond)
[13:22:28.568]                           for (restart in restarts) {
[13:22:28.568]                             name <- restart$name
[13:22:28.568]                             if (is.null(name)) 
[13:22:28.568]                               next
[13:22:28.568]                             if (!grepl(pattern, name)) 
[13:22:28.568]                               next
[13:22:28.568]                             invokeRestart(restart)
[13:22:28.568]                             muffled <- TRUE
[13:22:28.568]                             break
[13:22:28.568]                           }
[13:22:28.568]                         }
[13:22:28.568]                       }
[13:22:28.568]                       invisible(muffled)
[13:22:28.568]                     }
[13:22:28.568]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.568]                   }
[13:22:28.568]                 }
[13:22:28.568]                 else {
[13:22:28.568]                   if (TRUE) {
[13:22:28.568]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.568]                     {
[13:22:28.568]                       inherits <- base::inherits
[13:22:28.568]                       invokeRestart <- base::invokeRestart
[13:22:28.568]                       is.null <- base::is.null
[13:22:28.568]                       muffled <- FALSE
[13:22:28.568]                       if (inherits(cond, "message")) {
[13:22:28.568]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.568]                         if (muffled) 
[13:22:28.568]                           invokeRestart("muffleMessage")
[13:22:28.568]                       }
[13:22:28.568]                       else if (inherits(cond, "warning")) {
[13:22:28.568]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.568]                         if (muffled) 
[13:22:28.568]                           invokeRestart("muffleWarning")
[13:22:28.568]                       }
[13:22:28.568]                       else if (inherits(cond, "condition")) {
[13:22:28.568]                         if (!is.null(pattern)) {
[13:22:28.568]                           computeRestarts <- base::computeRestarts
[13:22:28.568]                           grepl <- base::grepl
[13:22:28.568]                           restarts <- computeRestarts(cond)
[13:22:28.568]                           for (restart in restarts) {
[13:22:28.568]                             name <- restart$name
[13:22:28.568]                             if (is.null(name)) 
[13:22:28.568]                               next
[13:22:28.568]                             if (!grepl(pattern, name)) 
[13:22:28.568]                               next
[13:22:28.568]                             invokeRestart(restart)
[13:22:28.568]                             muffled <- TRUE
[13:22:28.568]                             break
[13:22:28.568]                           }
[13:22:28.568]                         }
[13:22:28.568]                       }
[13:22:28.568]                       invisible(muffled)
[13:22:28.568]                     }
[13:22:28.568]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.568]                   }
[13:22:28.568]                 }
[13:22:28.568]             }
[13:22:28.568]         }))
[13:22:28.568]     }, error = function(ex) {
[13:22:28.568]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:28.568]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.568]                 ...future.rng), started = ...future.startTime, 
[13:22:28.568]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:28.568]             version = "1.8"), class = "FutureResult")
[13:22:28.568]     }, finally = {
[13:22:28.568]         if (!identical(...future.workdir, getwd())) 
[13:22:28.568]             setwd(...future.workdir)
[13:22:28.568]         {
[13:22:28.568]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:28.568]                 ...future.oldOptions$nwarnings <- NULL
[13:22:28.568]             }
[13:22:28.568]             base::options(...future.oldOptions)
[13:22:28.568]             if (.Platform$OS.type == "windows") {
[13:22:28.568]                 old_names <- names(...future.oldEnvVars)
[13:22:28.568]                 envs <- base::Sys.getenv()
[13:22:28.568]                 names <- names(envs)
[13:22:28.568]                 common <- intersect(names, old_names)
[13:22:28.568]                 added <- setdiff(names, old_names)
[13:22:28.568]                 removed <- setdiff(old_names, names)
[13:22:28.568]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:28.568]                   envs[common]]
[13:22:28.568]                 NAMES <- toupper(changed)
[13:22:28.568]                 args <- list()
[13:22:28.568]                 for (kk in seq_along(NAMES)) {
[13:22:28.568]                   name <- changed[[kk]]
[13:22:28.568]                   NAME <- NAMES[[kk]]
[13:22:28.568]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.568]                     next
[13:22:28.568]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.568]                 }
[13:22:28.568]                 NAMES <- toupper(added)
[13:22:28.568]                 for (kk in seq_along(NAMES)) {
[13:22:28.568]                   name <- added[[kk]]
[13:22:28.568]                   NAME <- NAMES[[kk]]
[13:22:28.568]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.568]                     next
[13:22:28.568]                   args[[name]] <- ""
[13:22:28.568]                 }
[13:22:28.568]                 NAMES <- toupper(removed)
[13:22:28.568]                 for (kk in seq_along(NAMES)) {
[13:22:28.568]                   name <- removed[[kk]]
[13:22:28.568]                   NAME <- NAMES[[kk]]
[13:22:28.568]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.568]                     next
[13:22:28.568]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.568]                 }
[13:22:28.568]                 if (length(args) > 0) 
[13:22:28.568]                   base::do.call(base::Sys.setenv, args = args)
[13:22:28.568]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:28.568]             }
[13:22:28.568]             else {
[13:22:28.568]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:28.568]             }
[13:22:28.568]             {
[13:22:28.568]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:28.568]                   0L) {
[13:22:28.568]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:28.568]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:28.568]                   base::options(opts)
[13:22:28.568]                 }
[13:22:28.568]                 {
[13:22:28.568]                   {
[13:22:28.568]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:28.568]                     NULL
[13:22:28.568]                   }
[13:22:28.568]                   options(future.plan = "multisession")
[13:22:28.568]                   if (is.na("")) 
[13:22:28.568]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.568]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:22:28.568]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:28.568]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:28.568]                     envir = parent.frame()) 
[13:22:28.568]                   {
[13:22:28.568]                     if (is.function(workers)) 
[13:22:28.568]                       workers <- workers()
[13:22:28.568]                     workers <- structure(as.integer(workers), 
[13:22:28.568]                       class = class(workers))
[13:22:28.568]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:28.568]                       workers >= 1)
[13:22:28.568]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:28.568]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:28.568]                     }
[13:22:28.568]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:28.568]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:28.568]                       envir = envir)
[13:22:28.568]                     if (!future$lazy) 
[13:22:28.568]                       future <- run(future)
[13:22:28.568]                     invisible(future)
[13:22:28.568]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:28.568]                 }
[13:22:28.568]             }
[13:22:28.568]         }
[13:22:28.568]     })
[13:22:28.568]     if (TRUE) {
[13:22:28.568]         base::sink(type = "output", split = FALSE)
[13:22:28.568]         if (TRUE) {
[13:22:28.568]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:28.568]         }
[13:22:28.568]         else {
[13:22:28.568]             ...future.result["stdout"] <- base::list(NULL)
[13:22:28.568]         }
[13:22:28.568]         base::close(...future.stdout)
[13:22:28.568]         ...future.stdout <- NULL
[13:22:28.568]     }
[13:22:28.568]     ...future.result$conditions <- ...future.conditions
[13:22:28.568]     ...future.result$finished <- base::Sys.time()
[13:22:28.568]     ...future.result
[13:22:28.568] }
[13:22:28.640] MultisessionFuture started
[13:22:28.640] result() for ClusterFuture ...
[13:22:28.640] receiveMessageFromWorker() for ClusterFuture ...
[13:22:28.640] - Validating connection of MultisessionFuture
[13:22:28.675] - received message: FutureResult
[13:22:28.675] - Received FutureResult
[13:22:28.675] - Erased future from FutureRegistry
[13:22:28.675] result() for ClusterFuture ...
[13:22:28.675] - result already collected: FutureResult
[13:22:28.675] result() for ClusterFuture ... done
[13:22:28.675] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:28.676] result() for ClusterFuture ... done
[13:22:28.676] result() for ClusterFuture ...
[13:22:28.676] - result already collected: FutureResult
[13:22:28.676] result() for ClusterFuture ... done
[13:22:28.676] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:28.679] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[13:22:28.680] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:28.680] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:28.680] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:28.681] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:28.681] R_FUTURE_PLAN=‘multisession’
[13:22:28.682] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[13:22:28.682] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:28.682] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:28.683] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:28.684] Option 'future.plan' = ‘multisession’
[13:22:28.684] R command-line argument: -p 1
[13:22:28.684]  => 'future.plan' already set.
[13:22:28.684] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:28.684] Setting plan('default')
[13:22:28.684] plan(): Setting new future strategy stack:
[13:22:28.684] List of future strategies:
[13:22:28.684] 1. multisession:
[13:22:28.684]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.684]    - tweaked: FALSE
[13:22:28.684]    - call: plan("default", .init = FALSE)
[13:22:28.689] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:22:28.690] plan(): Setting new future strategy stack:
[13:22:28.690] List of future strategies:
[13:22:28.690] 1. multisession:
[13:22:28.690]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.690]    - tweaked: FALSE
[13:22:28.690]    - call: plan("default")
[13:22:28.691] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:28.691] multisession:
[13:22:28.691] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.691] - tweaked: FALSE
[13:22:28.691] - call: plan("default")
[13:22:28.696] getGlobalsAndPackages() ...
[13:22:28.696] Not searching for globals
[13:22:28.696] - globals: [0] <none>
[13:22:28.696] getGlobalsAndPackages() ... DONE
[13:22:28.697] Packages needed by the future expression (n = 0): <none>
[13:22:28.698] Packages needed by future strategies (n = 0): <none>
[13:22:28.698] {
[13:22:28.698]     {
[13:22:28.698]         {
[13:22:28.698]             ...future.startTime <- base::Sys.time()
[13:22:28.698]             {
[13:22:28.698]                 {
[13:22:28.698]                   {
[13:22:28.698]                     base::local({
[13:22:28.698]                       has_future <- base::requireNamespace("future", 
[13:22:28.698]                         quietly = TRUE)
[13:22:28.698]                       if (has_future) {
[13:22:28.698]                         ns <- base::getNamespace("future")
[13:22:28.698]                         version <- ns[[".package"]][["version"]]
[13:22:28.698]                         if (is.null(version)) 
[13:22:28.698]                           version <- utils::packageVersion("future")
[13:22:28.698]                       }
[13:22:28.698]                       else {
[13:22:28.698]                         version <- NULL
[13:22:28.698]                       }
[13:22:28.698]                       if (!has_future || version < "1.8.0") {
[13:22:28.698]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:28.698]                           "", base::R.version$version.string), 
[13:22:28.698]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:28.698]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:28.698]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:28.698]                             "release", "version")], collapse = " "), 
[13:22:28.698]                           hostname = base::Sys.info()[["nodename"]])
[13:22:28.698]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:28.698]                           info)
[13:22:28.698]                         info <- base::paste(info, collapse = "; ")
[13:22:28.698]                         if (!has_future) {
[13:22:28.698]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:28.698]                             info)
[13:22:28.698]                         }
[13:22:28.698]                         else {
[13:22:28.698]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:28.698]                             info, version)
[13:22:28.698]                         }
[13:22:28.698]                         base::stop(msg)
[13:22:28.698]                       }
[13:22:28.698]                     })
[13:22:28.698]                   }
[13:22:28.698]                   options(future.plan = NULL)
[13:22:28.698]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.698]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:28.698]                 }
[13:22:28.698]                 ...future.workdir <- getwd()
[13:22:28.698]             }
[13:22:28.698]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:28.698]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:28.698]         }
[13:22:28.698]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:28.698]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:28.698]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:28.698]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:28.698]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:28.698]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:28.698]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:28.698]             base::names(...future.oldOptions))
[13:22:28.698]     }
[13:22:28.698]     if (FALSE) {
[13:22:28.698]     }
[13:22:28.698]     else {
[13:22:28.698]         if (TRUE) {
[13:22:28.698]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:28.698]                 open = "w")
[13:22:28.698]         }
[13:22:28.698]         else {
[13:22:28.698]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:28.698]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:28.698]         }
[13:22:28.698]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:28.698]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:28.698]             base::sink(type = "output", split = FALSE)
[13:22:28.698]             base::close(...future.stdout)
[13:22:28.698]         }, add = TRUE)
[13:22:28.698]     }
[13:22:28.698]     ...future.frame <- base::sys.nframe()
[13:22:28.698]     ...future.conditions <- base::list()
[13:22:28.698]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:28.698]     if (FALSE) {
[13:22:28.698]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:28.698]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:28.698]     }
[13:22:28.698]     ...future.result <- base::tryCatch({
[13:22:28.698]         base::withCallingHandlers({
[13:22:28.698]             ...future.value <- base::withVisible(base::local(NA))
[13:22:28.698]             future::FutureResult(value = ...future.value$value, 
[13:22:28.698]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.698]                   ...future.rng), globalenv = if (FALSE) 
[13:22:28.698]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:28.698]                     ...future.globalenv.names))
[13:22:28.698]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:28.698]         }, condition = base::local({
[13:22:28.698]             c <- base::c
[13:22:28.698]             inherits <- base::inherits
[13:22:28.698]             invokeRestart <- base::invokeRestart
[13:22:28.698]             length <- base::length
[13:22:28.698]             list <- base::list
[13:22:28.698]             seq.int <- base::seq.int
[13:22:28.698]             signalCondition <- base::signalCondition
[13:22:28.698]             sys.calls <- base::sys.calls
[13:22:28.698]             `[[` <- base::`[[`
[13:22:28.698]             `+` <- base::`+`
[13:22:28.698]             `<<-` <- base::`<<-`
[13:22:28.698]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:28.698]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:28.698]                   3L)]
[13:22:28.698]             }
[13:22:28.698]             function(cond) {
[13:22:28.698]                 is_error <- inherits(cond, "error")
[13:22:28.698]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:28.698]                   NULL)
[13:22:28.698]                 if (is_error) {
[13:22:28.698]                   sessionInformation <- function() {
[13:22:28.698]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:28.698]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:28.698]                       search = base::search(), system = base::Sys.info())
[13:22:28.698]                   }
[13:22:28.698]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.698]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:28.698]                     cond$call), session = sessionInformation(), 
[13:22:28.698]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:28.698]                   signalCondition(cond)
[13:22:28.698]                 }
[13:22:28.698]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:28.698]                 "immediateCondition"))) {
[13:22:28.698]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:28.698]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.698]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:28.698]                   if (TRUE && !signal) {
[13:22:28.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.698]                     {
[13:22:28.698]                       inherits <- base::inherits
[13:22:28.698]                       invokeRestart <- base::invokeRestart
[13:22:28.698]                       is.null <- base::is.null
[13:22:28.698]                       muffled <- FALSE
[13:22:28.698]                       if (inherits(cond, "message")) {
[13:22:28.698]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.698]                         if (muffled) 
[13:22:28.698]                           invokeRestart("muffleMessage")
[13:22:28.698]                       }
[13:22:28.698]                       else if (inherits(cond, "warning")) {
[13:22:28.698]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.698]                         if (muffled) 
[13:22:28.698]                           invokeRestart("muffleWarning")
[13:22:28.698]                       }
[13:22:28.698]                       else if (inherits(cond, "condition")) {
[13:22:28.698]                         if (!is.null(pattern)) {
[13:22:28.698]                           computeRestarts <- base::computeRestarts
[13:22:28.698]                           grepl <- base::grepl
[13:22:28.698]                           restarts <- computeRestarts(cond)
[13:22:28.698]                           for (restart in restarts) {
[13:22:28.698]                             name <- restart$name
[13:22:28.698]                             if (is.null(name)) 
[13:22:28.698]                               next
[13:22:28.698]                             if (!grepl(pattern, name)) 
[13:22:28.698]                               next
[13:22:28.698]                             invokeRestart(restart)
[13:22:28.698]                             muffled <- TRUE
[13:22:28.698]                             break
[13:22:28.698]                           }
[13:22:28.698]                         }
[13:22:28.698]                       }
[13:22:28.698]                       invisible(muffled)
[13:22:28.698]                     }
[13:22:28.698]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.698]                   }
[13:22:28.698]                 }
[13:22:28.698]                 else {
[13:22:28.698]                   if (TRUE) {
[13:22:28.698]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.698]                     {
[13:22:28.698]                       inherits <- base::inherits
[13:22:28.698]                       invokeRestart <- base::invokeRestart
[13:22:28.698]                       is.null <- base::is.null
[13:22:28.698]                       muffled <- FALSE
[13:22:28.698]                       if (inherits(cond, "message")) {
[13:22:28.698]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.698]                         if (muffled) 
[13:22:28.698]                           invokeRestart("muffleMessage")
[13:22:28.698]                       }
[13:22:28.698]                       else if (inherits(cond, "warning")) {
[13:22:28.698]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.698]                         if (muffled) 
[13:22:28.698]                           invokeRestart("muffleWarning")
[13:22:28.698]                       }
[13:22:28.698]                       else if (inherits(cond, "condition")) {
[13:22:28.698]                         if (!is.null(pattern)) {
[13:22:28.698]                           computeRestarts <- base::computeRestarts
[13:22:28.698]                           grepl <- base::grepl
[13:22:28.698]                           restarts <- computeRestarts(cond)
[13:22:28.698]                           for (restart in restarts) {
[13:22:28.698]                             name <- restart$name
[13:22:28.698]                             if (is.null(name)) 
[13:22:28.698]                               next
[13:22:28.698]                             if (!grepl(pattern, name)) 
[13:22:28.698]                               next
[13:22:28.698]                             invokeRestart(restart)
[13:22:28.698]                             muffled <- TRUE
[13:22:28.698]                             break
[13:22:28.698]                           }
[13:22:28.698]                         }
[13:22:28.698]                       }
[13:22:28.698]                       invisible(muffled)
[13:22:28.698]                     }
[13:22:28.698]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.698]                   }
[13:22:28.698]                 }
[13:22:28.698]             }
[13:22:28.698]         }))
[13:22:28.698]     }, error = function(ex) {
[13:22:28.698]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:28.698]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.698]                 ...future.rng), started = ...future.startTime, 
[13:22:28.698]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:28.698]             version = "1.8"), class = "FutureResult")
[13:22:28.698]     }, finally = {
[13:22:28.698]         if (!identical(...future.workdir, getwd())) 
[13:22:28.698]             setwd(...future.workdir)
[13:22:28.698]         {
[13:22:28.698]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:28.698]                 ...future.oldOptions$nwarnings <- NULL
[13:22:28.698]             }
[13:22:28.698]             base::options(...future.oldOptions)
[13:22:28.698]             if (.Platform$OS.type == "windows") {
[13:22:28.698]                 old_names <- names(...future.oldEnvVars)
[13:22:28.698]                 envs <- base::Sys.getenv()
[13:22:28.698]                 names <- names(envs)
[13:22:28.698]                 common <- intersect(names, old_names)
[13:22:28.698]                 added <- setdiff(names, old_names)
[13:22:28.698]                 removed <- setdiff(old_names, names)
[13:22:28.698]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:28.698]                   envs[common]]
[13:22:28.698]                 NAMES <- toupper(changed)
[13:22:28.698]                 args <- list()
[13:22:28.698]                 for (kk in seq_along(NAMES)) {
[13:22:28.698]                   name <- changed[[kk]]
[13:22:28.698]                   NAME <- NAMES[[kk]]
[13:22:28.698]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.698]                     next
[13:22:28.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.698]                 }
[13:22:28.698]                 NAMES <- toupper(added)
[13:22:28.698]                 for (kk in seq_along(NAMES)) {
[13:22:28.698]                   name <- added[[kk]]
[13:22:28.698]                   NAME <- NAMES[[kk]]
[13:22:28.698]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.698]                     next
[13:22:28.698]                   args[[name]] <- ""
[13:22:28.698]                 }
[13:22:28.698]                 NAMES <- toupper(removed)
[13:22:28.698]                 for (kk in seq_along(NAMES)) {
[13:22:28.698]                   name <- removed[[kk]]
[13:22:28.698]                   NAME <- NAMES[[kk]]
[13:22:28.698]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.698]                     next
[13:22:28.698]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.698]                 }
[13:22:28.698]                 if (length(args) > 0) 
[13:22:28.698]                   base::do.call(base::Sys.setenv, args = args)
[13:22:28.698]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:28.698]             }
[13:22:28.698]             else {
[13:22:28.698]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:28.698]             }
[13:22:28.698]             {
[13:22:28.698]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:28.698]                   0L) {
[13:22:28.698]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:28.698]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:28.698]                   base::options(opts)
[13:22:28.698]                 }
[13:22:28.698]                 {
[13:22:28.698]                   {
[13:22:28.698]                     NULL
[13:22:28.698]                     RNGkind("Mersenne-Twister")
[13:22:28.698]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:28.698]                       inherits = FALSE)
[13:22:28.698]                   }
[13:22:28.698]                   options(future.plan = "multisession")
[13:22:28.698]                   if (is.na("multisession")) 
[13:22:28.698]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.698]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[13:22:28.698]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:28.698]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:28.698]                     envir = parent.frame()) 
[13:22:28.698]                   {
[13:22:28.698]                     if (is.function(workers)) 
[13:22:28.698]                       workers <- workers()
[13:22:28.698]                     workers <- structure(as.integer(workers), 
[13:22:28.698]                       class = class(workers))
[13:22:28.698]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:28.698]                       workers >= 1)
[13:22:28.698]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:28.698]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:28.698]                     }
[13:22:28.698]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:28.698]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:28.698]                       envir = envir)
[13:22:28.698]                     if (!future$lazy) 
[13:22:28.698]                       future <- run(future)
[13:22:28.698]                     invisible(future)
[13:22:28.698]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:28.698]                 }
[13:22:28.698]             }
[13:22:28.698]         }
[13:22:28.698]     })
[13:22:28.698]     if (TRUE) {
[13:22:28.698]         base::sink(type = "output", split = FALSE)
[13:22:28.698]         if (TRUE) {
[13:22:28.698]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:28.698]         }
[13:22:28.698]         else {
[13:22:28.698]             ...future.result["stdout"] <- base::list(NULL)
[13:22:28.698]         }
[13:22:28.698]         base::close(...future.stdout)
[13:22:28.698]         ...future.stdout <- NULL
[13:22:28.698]     }
[13:22:28.698]     ...future.result$conditions <- ...future.conditions
[13:22:28.698]     ...future.result$finished <- base::Sys.time()
[13:22:28.698]     ...future.result
[13:22:28.698] }
[13:22:28.702] plan(): Setting new future strategy stack:
[13:22:28.702] List of future strategies:
[13:22:28.702] 1. sequential:
[13:22:28.702]    - args: function (..., envir = parent.frame())
[13:22:28.702]    - tweaked: FALSE
[13:22:28.702]    - call: NULL
[13:22:28.702] plan(): nbrOfWorkers() = 1
[13:22:28.704] plan(): Setting new future strategy stack:
[13:22:28.704] List of future strategies:
[13:22:28.704] 1. multisession:
[13:22:28.704]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.704]    - tweaked: FALSE
[13:22:28.704]    - call: plan("default")
[13:22:28.708] plan(): nbrOfWorkers() = 1
[13:22:28.708] SequentialFuture started (and completed)
[13:22:28.708] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:28.712] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[13:22:28.713] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:28.713] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:28.713] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:28.713] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:28.713] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:28.713] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:28.714] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:28.715] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:28.716] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:28.716] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:28.716] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:28.716] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:28.716] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:28.716] Option 'future.plan' = ‘multisession’
[13:22:28.716] R command-line argument: -p 1
[13:22:28.717]  => 'future.plan' already set.
[13:22:28.717] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:28.717] Setting plan('default')
[13:22:28.717] plan(): Setting new future strategy stack:
[13:22:28.717] List of future strategies:
[13:22:28.717] 1. multisession:
[13:22:28.717]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.717]    - tweaked: FALSE
[13:22:28.717]    - call: plan("default", .init = FALSE)
[13:22:28.720] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:22:28.721] plan(): Setting new future strategy stack:
[13:22:28.721] List of future strategies:
[13:22:28.721] 1. multisession:
[13:22:28.721]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.721]    - tweaked: FALSE
[13:22:28.721]    - call: plan("default")
[13:22:28.721] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:28.721] multisession:
[13:22:28.721] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.721] - tweaked: FALSE
[13:22:28.721] - call: plan("default")
[13:22:28.725] getGlobalsAndPackages() ...
[13:22:28.725] Not searching for globals
[13:22:28.725] - globals: [0] <none>
[13:22:28.725] getGlobalsAndPackages() ... DONE
[13:22:28.726] Packages needed by the future expression (n = 0): <none>
[13:22:28.726] Packages needed by future strategies (n = 0): <none>
[13:22:28.726] {
[13:22:28.726]     {
[13:22:28.726]         {
[13:22:28.726]             ...future.startTime <- base::Sys.time()
[13:22:28.726]             {
[13:22:28.726]                 {
[13:22:28.726]                   {
[13:22:28.726]                     base::local({
[13:22:28.726]                       has_future <- base::requireNamespace("future", 
[13:22:28.726]                         quietly = TRUE)
[13:22:28.726]                       if (has_future) {
[13:22:28.726]                         ns <- base::getNamespace("future")
[13:22:28.726]                         version <- ns[[".package"]][["version"]]
[13:22:28.726]                         if (is.null(version)) 
[13:22:28.726]                           version <- utils::packageVersion("future")
[13:22:28.726]                       }
[13:22:28.726]                       else {
[13:22:28.726]                         version <- NULL
[13:22:28.726]                       }
[13:22:28.726]                       if (!has_future || version < "1.8.0") {
[13:22:28.726]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:28.726]                           "", base::R.version$version.string), 
[13:22:28.726]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:28.726]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:28.726]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:28.726]                             "release", "version")], collapse = " "), 
[13:22:28.726]                           hostname = base::Sys.info()[["nodename"]])
[13:22:28.726]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:28.726]                           info)
[13:22:28.726]                         info <- base::paste(info, collapse = "; ")
[13:22:28.726]                         if (!has_future) {
[13:22:28.726]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:28.726]                             info)
[13:22:28.726]                         }
[13:22:28.726]                         else {
[13:22:28.726]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:28.726]                             info, version)
[13:22:28.726]                         }
[13:22:28.726]                         base::stop(msg)
[13:22:28.726]                       }
[13:22:28.726]                     })
[13:22:28.726]                   }
[13:22:28.726]                   options(future.plan = NULL)
[13:22:28.726]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.726]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:28.726]                 }
[13:22:28.726]                 ...future.workdir <- getwd()
[13:22:28.726]             }
[13:22:28.726]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:28.726]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:28.726]         }
[13:22:28.726]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:28.726]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:28.726]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:28.726]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:28.726]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:28.726]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:28.726]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:28.726]             base::names(...future.oldOptions))
[13:22:28.726]     }
[13:22:28.726]     if (FALSE) {
[13:22:28.726]     }
[13:22:28.726]     else {
[13:22:28.726]         if (TRUE) {
[13:22:28.726]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:28.726]                 open = "w")
[13:22:28.726]         }
[13:22:28.726]         else {
[13:22:28.726]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:28.726]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:28.726]         }
[13:22:28.726]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:28.726]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:28.726]             base::sink(type = "output", split = FALSE)
[13:22:28.726]             base::close(...future.stdout)
[13:22:28.726]         }, add = TRUE)
[13:22:28.726]     }
[13:22:28.726]     ...future.frame <- base::sys.nframe()
[13:22:28.726]     ...future.conditions <- base::list()
[13:22:28.726]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:28.726]     if (FALSE) {
[13:22:28.726]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:28.726]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:28.726]     }
[13:22:28.726]     ...future.result <- base::tryCatch({
[13:22:28.726]         base::withCallingHandlers({
[13:22:28.726]             ...future.value <- base::withVisible(base::local(NA))
[13:22:28.726]             future::FutureResult(value = ...future.value$value, 
[13:22:28.726]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.726]                   ...future.rng), globalenv = if (FALSE) 
[13:22:28.726]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:28.726]                     ...future.globalenv.names))
[13:22:28.726]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:28.726]         }, condition = base::local({
[13:22:28.726]             c <- base::c
[13:22:28.726]             inherits <- base::inherits
[13:22:28.726]             invokeRestart <- base::invokeRestart
[13:22:28.726]             length <- base::length
[13:22:28.726]             list <- base::list
[13:22:28.726]             seq.int <- base::seq.int
[13:22:28.726]             signalCondition <- base::signalCondition
[13:22:28.726]             sys.calls <- base::sys.calls
[13:22:28.726]             `[[` <- base::`[[`
[13:22:28.726]             `+` <- base::`+`
[13:22:28.726]             `<<-` <- base::`<<-`
[13:22:28.726]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:28.726]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:28.726]                   3L)]
[13:22:28.726]             }
[13:22:28.726]             function(cond) {
[13:22:28.726]                 is_error <- inherits(cond, "error")
[13:22:28.726]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:28.726]                   NULL)
[13:22:28.726]                 if (is_error) {
[13:22:28.726]                   sessionInformation <- function() {
[13:22:28.726]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:28.726]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:28.726]                       search = base::search(), system = base::Sys.info())
[13:22:28.726]                   }
[13:22:28.726]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.726]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:28.726]                     cond$call), session = sessionInformation(), 
[13:22:28.726]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:28.726]                   signalCondition(cond)
[13:22:28.726]                 }
[13:22:28.726]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:28.726]                 "immediateCondition"))) {
[13:22:28.726]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:28.726]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.726]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:28.726]                   if (TRUE && !signal) {
[13:22:28.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.726]                     {
[13:22:28.726]                       inherits <- base::inherits
[13:22:28.726]                       invokeRestart <- base::invokeRestart
[13:22:28.726]                       is.null <- base::is.null
[13:22:28.726]                       muffled <- FALSE
[13:22:28.726]                       if (inherits(cond, "message")) {
[13:22:28.726]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.726]                         if (muffled) 
[13:22:28.726]                           invokeRestart("muffleMessage")
[13:22:28.726]                       }
[13:22:28.726]                       else if (inherits(cond, "warning")) {
[13:22:28.726]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.726]                         if (muffled) 
[13:22:28.726]                           invokeRestart("muffleWarning")
[13:22:28.726]                       }
[13:22:28.726]                       else if (inherits(cond, "condition")) {
[13:22:28.726]                         if (!is.null(pattern)) {
[13:22:28.726]                           computeRestarts <- base::computeRestarts
[13:22:28.726]                           grepl <- base::grepl
[13:22:28.726]                           restarts <- computeRestarts(cond)
[13:22:28.726]                           for (restart in restarts) {
[13:22:28.726]                             name <- restart$name
[13:22:28.726]                             if (is.null(name)) 
[13:22:28.726]                               next
[13:22:28.726]                             if (!grepl(pattern, name)) 
[13:22:28.726]                               next
[13:22:28.726]                             invokeRestart(restart)
[13:22:28.726]                             muffled <- TRUE
[13:22:28.726]                             break
[13:22:28.726]                           }
[13:22:28.726]                         }
[13:22:28.726]                       }
[13:22:28.726]                       invisible(muffled)
[13:22:28.726]                     }
[13:22:28.726]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.726]                   }
[13:22:28.726]                 }
[13:22:28.726]                 else {
[13:22:28.726]                   if (TRUE) {
[13:22:28.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.726]                     {
[13:22:28.726]                       inherits <- base::inherits
[13:22:28.726]                       invokeRestart <- base::invokeRestart
[13:22:28.726]                       is.null <- base::is.null
[13:22:28.726]                       muffled <- FALSE
[13:22:28.726]                       if (inherits(cond, "message")) {
[13:22:28.726]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.726]                         if (muffled) 
[13:22:28.726]                           invokeRestart("muffleMessage")
[13:22:28.726]                       }
[13:22:28.726]                       else if (inherits(cond, "warning")) {
[13:22:28.726]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.726]                         if (muffled) 
[13:22:28.726]                           invokeRestart("muffleWarning")
[13:22:28.726]                       }
[13:22:28.726]                       else if (inherits(cond, "condition")) {
[13:22:28.726]                         if (!is.null(pattern)) {
[13:22:28.726]                           computeRestarts <- base::computeRestarts
[13:22:28.726]                           grepl <- base::grepl
[13:22:28.726]                           restarts <- computeRestarts(cond)
[13:22:28.726]                           for (restart in restarts) {
[13:22:28.726]                             name <- restart$name
[13:22:28.726]                             if (is.null(name)) 
[13:22:28.726]                               next
[13:22:28.726]                             if (!grepl(pattern, name)) 
[13:22:28.726]                               next
[13:22:28.726]                             invokeRestart(restart)
[13:22:28.726]                             muffled <- TRUE
[13:22:28.726]                             break
[13:22:28.726]                           }
[13:22:28.726]                         }
[13:22:28.726]                       }
[13:22:28.726]                       invisible(muffled)
[13:22:28.726]                     }
[13:22:28.726]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.726]                   }
[13:22:28.726]                 }
[13:22:28.726]             }
[13:22:28.726]         }))
[13:22:28.726]     }, error = function(ex) {
[13:22:28.726]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:28.726]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.726]                 ...future.rng), started = ...future.startTime, 
[13:22:28.726]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:28.726]             version = "1.8"), class = "FutureResult")
[13:22:28.726]     }, finally = {
[13:22:28.726]         if (!identical(...future.workdir, getwd())) 
[13:22:28.726]             setwd(...future.workdir)
[13:22:28.726]         {
[13:22:28.726]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:28.726]                 ...future.oldOptions$nwarnings <- NULL
[13:22:28.726]             }
[13:22:28.726]             base::options(...future.oldOptions)
[13:22:28.726]             if (.Platform$OS.type == "windows") {
[13:22:28.726]                 old_names <- names(...future.oldEnvVars)
[13:22:28.726]                 envs <- base::Sys.getenv()
[13:22:28.726]                 names <- names(envs)
[13:22:28.726]                 common <- intersect(names, old_names)
[13:22:28.726]                 added <- setdiff(names, old_names)
[13:22:28.726]                 removed <- setdiff(old_names, names)
[13:22:28.726]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:28.726]                   envs[common]]
[13:22:28.726]                 NAMES <- toupper(changed)
[13:22:28.726]                 args <- list()
[13:22:28.726]                 for (kk in seq_along(NAMES)) {
[13:22:28.726]                   name <- changed[[kk]]
[13:22:28.726]                   NAME <- NAMES[[kk]]
[13:22:28.726]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.726]                     next
[13:22:28.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.726]                 }
[13:22:28.726]                 NAMES <- toupper(added)
[13:22:28.726]                 for (kk in seq_along(NAMES)) {
[13:22:28.726]                   name <- added[[kk]]
[13:22:28.726]                   NAME <- NAMES[[kk]]
[13:22:28.726]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.726]                     next
[13:22:28.726]                   args[[name]] <- ""
[13:22:28.726]                 }
[13:22:28.726]                 NAMES <- toupper(removed)
[13:22:28.726]                 for (kk in seq_along(NAMES)) {
[13:22:28.726]                   name <- removed[[kk]]
[13:22:28.726]                   NAME <- NAMES[[kk]]
[13:22:28.726]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.726]                     next
[13:22:28.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.726]                 }
[13:22:28.726]                 if (length(args) > 0) 
[13:22:28.726]                   base::do.call(base::Sys.setenv, args = args)
[13:22:28.726]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:28.726]             }
[13:22:28.726]             else {
[13:22:28.726]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:28.726]             }
[13:22:28.726]             {
[13:22:28.726]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:28.726]                   0L) {
[13:22:28.726]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:28.726]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:28.726]                   base::options(opts)
[13:22:28.726]                 }
[13:22:28.726]                 {
[13:22:28.726]                   {
[13:22:28.726]                     NULL
[13:22:28.726]                     RNGkind("Mersenne-Twister")
[13:22:28.726]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:28.726]                       inherits = FALSE)
[13:22:28.726]                   }
[13:22:28.726]                   options(future.plan = "multisession")
[13:22:28.726]                   if (is.na("")) 
[13:22:28.726]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.726]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:22:28.726]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:28.726]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:28.726]                     envir = parent.frame()) 
[13:22:28.726]                   {
[13:22:28.726]                     if (is.function(workers)) 
[13:22:28.726]                       workers <- workers()
[13:22:28.726]                     workers <- structure(as.integer(workers), 
[13:22:28.726]                       class = class(workers))
[13:22:28.726]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:28.726]                       workers >= 1)
[13:22:28.726]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:28.726]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:28.726]                     }
[13:22:28.726]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:28.726]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:28.726]                       envir = envir)
[13:22:28.726]                     if (!future$lazy) 
[13:22:28.726]                       future <- run(future)
[13:22:28.726]                     invisible(future)
[13:22:28.726]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:28.726]                 }
[13:22:28.726]             }
[13:22:28.726]         }
[13:22:28.726]     })
[13:22:28.726]     if (TRUE) {
[13:22:28.726]         base::sink(type = "output", split = FALSE)
[13:22:28.726]         if (TRUE) {
[13:22:28.726]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:28.726]         }
[13:22:28.726]         else {
[13:22:28.726]             ...future.result["stdout"] <- base::list(NULL)
[13:22:28.726]         }
[13:22:28.726]         base::close(...future.stdout)
[13:22:28.726]         ...future.stdout <- NULL
[13:22:28.726]     }
[13:22:28.726]     ...future.result$conditions <- ...future.conditions
[13:22:28.726]     ...future.result$finished <- base::Sys.time()
[13:22:28.726]     ...future.result
[13:22:28.726] }
[13:22:28.728] plan(): Setting new future strategy stack:
[13:22:28.728] List of future strategies:
[13:22:28.728] 1. sequential:
[13:22:28.728]    - args: function (..., envir = parent.frame())
[13:22:28.728]    - tweaked: FALSE
[13:22:28.728]    - call: NULL
[13:22:28.729] plan(): nbrOfWorkers() = 1
[13:22:28.730] plan(): Setting new future strategy stack:
[13:22:28.730] List of future strategies:
[13:22:28.730] 1. multisession:
[13:22:28.730]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.730]    - tweaked: FALSE
[13:22:28.730]    - call: plan("default")
[13:22:28.733] plan(): nbrOfWorkers() = 1
[13:22:28.733] SequentialFuture started (and completed)
[13:22:28.734] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:28.737] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[13:22:28.738] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:22:28.738] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:22:28.738] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:22:28.738] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:22:28.738] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:22:28.738] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:22:28.739] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:22:28.740] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:22:28.741] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:22:28.741] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:22:28.741] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:22:28.741] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:22:28.741] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:22:28.741] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:22:28.741] Option 'future.plan' of type ‘function’
[13:22:28.742] R command-line argument: -p 1
[13:22:28.742]  => 'future.plan' already set.
[13:22:28.742] R process uuid: 8d90a5f7-38c3-7efa-7aba-4e66cd19b335
[13:22:28.742] Setting plan('default')
[13:22:28.742] plan(): Setting new future strategy stack:
[13:22:28.742] List of future strategies:
[13:22:28.742] 1. multisession:
[13:22:28.742]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.742]    - tweaked: FALSE
[13:22:28.742]    - call: NULL
[13:22:28.746] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:22:28.746] plan(): Setting new future strategy stack:
[13:22:28.746] List of future strategies:
[13:22:28.746] 1. multisession:
[13:22:28.746]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.746]    - tweaked: FALSE
[13:22:28.746]    - call: NULL
[13:22:28.747] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:28.747] multisession:
[13:22:28.747] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.747] - tweaked: FALSE
[13:22:28.747] - call: NULL
[13:22:28.751] getGlobalsAndPackages() ...
[13:22:28.751] Not searching for globals
[13:22:28.751] - globals: [0] <none>
[13:22:28.751] getGlobalsAndPackages() ... DONE
[13:22:28.751] Packages needed by the future expression (n = 0): <none>
[13:22:28.751] Packages needed by future strategies (n = 0): <none>
[13:22:28.752] {
[13:22:28.752]     {
[13:22:28.752]         {
[13:22:28.752]             ...future.startTime <- base::Sys.time()
[13:22:28.752]             {
[13:22:28.752]                 {
[13:22:28.752]                   {
[13:22:28.752]                     base::local({
[13:22:28.752]                       has_future <- base::requireNamespace("future", 
[13:22:28.752]                         quietly = TRUE)
[13:22:28.752]                       if (has_future) {
[13:22:28.752]                         ns <- base::getNamespace("future")
[13:22:28.752]                         version <- ns[[".package"]][["version"]]
[13:22:28.752]                         if (is.null(version)) 
[13:22:28.752]                           version <- utils::packageVersion("future")
[13:22:28.752]                       }
[13:22:28.752]                       else {
[13:22:28.752]                         version <- NULL
[13:22:28.752]                       }
[13:22:28.752]                       if (!has_future || version < "1.8.0") {
[13:22:28.752]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:28.752]                           "", base::R.version$version.string), 
[13:22:28.752]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:28.752]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:28.752]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:28.752]                             "release", "version")], collapse = " "), 
[13:22:28.752]                           hostname = base::Sys.info()[["nodename"]])
[13:22:28.752]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:28.752]                           info)
[13:22:28.752]                         info <- base::paste(info, collapse = "; ")
[13:22:28.752]                         if (!has_future) {
[13:22:28.752]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:28.752]                             info)
[13:22:28.752]                         }
[13:22:28.752]                         else {
[13:22:28.752]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:28.752]                             info, version)
[13:22:28.752]                         }
[13:22:28.752]                         base::stop(msg)
[13:22:28.752]                       }
[13:22:28.752]                     })
[13:22:28.752]                   }
[13:22:28.752]                   options(future.plan = NULL)
[13:22:28.752]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.752]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:28.752]                 }
[13:22:28.752]                 ...future.workdir <- getwd()
[13:22:28.752]             }
[13:22:28.752]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:28.752]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:28.752]         }
[13:22:28.752]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:28.752]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:28.752]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:28.752]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:28.752]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:28.752]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:28.752]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:28.752]             base::names(...future.oldOptions))
[13:22:28.752]     }
[13:22:28.752]     if (FALSE) {
[13:22:28.752]     }
[13:22:28.752]     else {
[13:22:28.752]         if (TRUE) {
[13:22:28.752]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:28.752]                 open = "w")
[13:22:28.752]         }
[13:22:28.752]         else {
[13:22:28.752]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:28.752]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:28.752]         }
[13:22:28.752]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:28.752]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:28.752]             base::sink(type = "output", split = FALSE)
[13:22:28.752]             base::close(...future.stdout)
[13:22:28.752]         }, add = TRUE)
[13:22:28.752]     }
[13:22:28.752]     ...future.frame <- base::sys.nframe()
[13:22:28.752]     ...future.conditions <- base::list()
[13:22:28.752]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:28.752]     if (FALSE) {
[13:22:28.752]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:28.752]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:28.752]     }
[13:22:28.752]     ...future.result <- base::tryCatch({
[13:22:28.752]         base::withCallingHandlers({
[13:22:28.752]             ...future.value <- base::withVisible(base::local(NA))
[13:22:28.752]             future::FutureResult(value = ...future.value$value, 
[13:22:28.752]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.752]                   ...future.rng), globalenv = if (FALSE) 
[13:22:28.752]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:28.752]                     ...future.globalenv.names))
[13:22:28.752]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:28.752]         }, condition = base::local({
[13:22:28.752]             c <- base::c
[13:22:28.752]             inherits <- base::inherits
[13:22:28.752]             invokeRestart <- base::invokeRestart
[13:22:28.752]             length <- base::length
[13:22:28.752]             list <- base::list
[13:22:28.752]             seq.int <- base::seq.int
[13:22:28.752]             signalCondition <- base::signalCondition
[13:22:28.752]             sys.calls <- base::sys.calls
[13:22:28.752]             `[[` <- base::`[[`
[13:22:28.752]             `+` <- base::`+`
[13:22:28.752]             `<<-` <- base::`<<-`
[13:22:28.752]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:28.752]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:28.752]                   3L)]
[13:22:28.752]             }
[13:22:28.752]             function(cond) {
[13:22:28.752]                 is_error <- inherits(cond, "error")
[13:22:28.752]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:28.752]                   NULL)
[13:22:28.752]                 if (is_error) {
[13:22:28.752]                   sessionInformation <- function() {
[13:22:28.752]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:28.752]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:28.752]                       search = base::search(), system = base::Sys.info())
[13:22:28.752]                   }
[13:22:28.752]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.752]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:28.752]                     cond$call), session = sessionInformation(), 
[13:22:28.752]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:28.752]                   signalCondition(cond)
[13:22:28.752]                 }
[13:22:28.752]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:28.752]                 "immediateCondition"))) {
[13:22:28.752]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:28.752]                   ...future.conditions[[length(...future.conditions) + 
[13:22:28.752]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:28.752]                   if (TRUE && !signal) {
[13:22:28.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.752]                     {
[13:22:28.752]                       inherits <- base::inherits
[13:22:28.752]                       invokeRestart <- base::invokeRestart
[13:22:28.752]                       is.null <- base::is.null
[13:22:28.752]                       muffled <- FALSE
[13:22:28.752]                       if (inherits(cond, "message")) {
[13:22:28.752]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.752]                         if (muffled) 
[13:22:28.752]                           invokeRestart("muffleMessage")
[13:22:28.752]                       }
[13:22:28.752]                       else if (inherits(cond, "warning")) {
[13:22:28.752]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.752]                         if (muffled) 
[13:22:28.752]                           invokeRestart("muffleWarning")
[13:22:28.752]                       }
[13:22:28.752]                       else if (inherits(cond, "condition")) {
[13:22:28.752]                         if (!is.null(pattern)) {
[13:22:28.752]                           computeRestarts <- base::computeRestarts
[13:22:28.752]                           grepl <- base::grepl
[13:22:28.752]                           restarts <- computeRestarts(cond)
[13:22:28.752]                           for (restart in restarts) {
[13:22:28.752]                             name <- restart$name
[13:22:28.752]                             if (is.null(name)) 
[13:22:28.752]                               next
[13:22:28.752]                             if (!grepl(pattern, name)) 
[13:22:28.752]                               next
[13:22:28.752]                             invokeRestart(restart)
[13:22:28.752]                             muffled <- TRUE
[13:22:28.752]                             break
[13:22:28.752]                           }
[13:22:28.752]                         }
[13:22:28.752]                       }
[13:22:28.752]                       invisible(muffled)
[13:22:28.752]                     }
[13:22:28.752]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.752]                   }
[13:22:28.752]                 }
[13:22:28.752]                 else {
[13:22:28.752]                   if (TRUE) {
[13:22:28.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:28.752]                     {
[13:22:28.752]                       inherits <- base::inherits
[13:22:28.752]                       invokeRestart <- base::invokeRestart
[13:22:28.752]                       is.null <- base::is.null
[13:22:28.752]                       muffled <- FALSE
[13:22:28.752]                       if (inherits(cond, "message")) {
[13:22:28.752]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:28.752]                         if (muffled) 
[13:22:28.752]                           invokeRestart("muffleMessage")
[13:22:28.752]                       }
[13:22:28.752]                       else if (inherits(cond, "warning")) {
[13:22:28.752]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:28.752]                         if (muffled) 
[13:22:28.752]                           invokeRestart("muffleWarning")
[13:22:28.752]                       }
[13:22:28.752]                       else if (inherits(cond, "condition")) {
[13:22:28.752]                         if (!is.null(pattern)) {
[13:22:28.752]                           computeRestarts <- base::computeRestarts
[13:22:28.752]                           grepl <- base::grepl
[13:22:28.752]                           restarts <- computeRestarts(cond)
[13:22:28.752]                           for (restart in restarts) {
[13:22:28.752]                             name <- restart$name
[13:22:28.752]                             if (is.null(name)) 
[13:22:28.752]                               next
[13:22:28.752]                             if (!grepl(pattern, name)) 
[13:22:28.752]                               next
[13:22:28.752]                             invokeRestart(restart)
[13:22:28.752]                             muffled <- TRUE
[13:22:28.752]                             break
[13:22:28.752]                           }
[13:22:28.752]                         }
[13:22:28.752]                       }
[13:22:28.752]                       invisible(muffled)
[13:22:28.752]                     }
[13:22:28.752]                     muffleCondition(cond, pattern = "^muffle")
[13:22:28.752]                   }
[13:22:28.752]                 }
[13:22:28.752]             }
[13:22:28.752]         }))
[13:22:28.752]     }, error = function(ex) {
[13:22:28.752]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:28.752]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:28.752]                 ...future.rng), started = ...future.startTime, 
[13:22:28.752]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:28.752]             version = "1.8"), class = "FutureResult")
[13:22:28.752]     }, finally = {
[13:22:28.752]         if (!identical(...future.workdir, getwd())) 
[13:22:28.752]             setwd(...future.workdir)
[13:22:28.752]         {
[13:22:28.752]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:28.752]                 ...future.oldOptions$nwarnings <- NULL
[13:22:28.752]             }
[13:22:28.752]             base::options(...future.oldOptions)
[13:22:28.752]             if (.Platform$OS.type == "windows") {
[13:22:28.752]                 old_names <- names(...future.oldEnvVars)
[13:22:28.752]                 envs <- base::Sys.getenv()
[13:22:28.752]                 names <- names(envs)
[13:22:28.752]                 common <- intersect(names, old_names)
[13:22:28.752]                 added <- setdiff(names, old_names)
[13:22:28.752]                 removed <- setdiff(old_names, names)
[13:22:28.752]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:28.752]                   envs[common]]
[13:22:28.752]                 NAMES <- toupper(changed)
[13:22:28.752]                 args <- list()
[13:22:28.752]                 for (kk in seq_along(NAMES)) {
[13:22:28.752]                   name <- changed[[kk]]
[13:22:28.752]                   NAME <- NAMES[[kk]]
[13:22:28.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.752]                     next
[13:22:28.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.752]                 }
[13:22:28.752]                 NAMES <- toupper(added)
[13:22:28.752]                 for (kk in seq_along(NAMES)) {
[13:22:28.752]                   name <- added[[kk]]
[13:22:28.752]                   NAME <- NAMES[[kk]]
[13:22:28.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.752]                     next
[13:22:28.752]                   args[[name]] <- ""
[13:22:28.752]                 }
[13:22:28.752]                 NAMES <- toupper(removed)
[13:22:28.752]                 for (kk in seq_along(NAMES)) {
[13:22:28.752]                   name <- removed[[kk]]
[13:22:28.752]                   NAME <- NAMES[[kk]]
[13:22:28.752]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:28.752]                     next
[13:22:28.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:28.752]                 }
[13:22:28.752]                 if (length(args) > 0) 
[13:22:28.752]                   base::do.call(base::Sys.setenv, args = args)
[13:22:28.752]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:28.752]             }
[13:22:28.752]             else {
[13:22:28.752]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:28.752]             }
[13:22:28.752]             {
[13:22:28.752]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:28.752]                   0L) {
[13:22:28.752]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:28.752]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:28.752]                   base::options(opts)
[13:22:28.752]                 }
[13:22:28.752]                 {
[13:22:28.752]                   {
[13:22:28.752]                     NULL
[13:22:28.752]                     RNGkind("Mersenne-Twister")
[13:22:28.752]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:28.752]                       inherits = FALSE)
[13:22:28.752]                   }
[13:22:28.752]                   options(future.plan = function (..., workers = availableCores(), 
[13:22:28.752]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:28.752]                     envir = parent.frame()) 
[13:22:28.752]                   {
[13:22:28.752]                     if (is.function(workers)) 
[13:22:28.752]                       workers <- workers()
[13:22:28.752]                     workers <- structure(as.integer(workers), 
[13:22:28.752]                       class = class(workers))
[13:22:28.752]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:28.752]                       workers >= 1)
[13:22:28.752]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:28.752]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:28.752]                     }
[13:22:28.752]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:28.752]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:28.752]                       envir = envir)
[13:22:28.752]                     if (!future$lazy) 
[13:22:28.752]                       future <- run(future)
[13:22:28.752]                     invisible(future)
[13:22:28.752]                   })
[13:22:28.752]                   if (is.na("")) 
[13:22:28.752]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:28.752]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:22:28.752]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:28.752]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:28.752]                     envir = parent.frame()) 
[13:22:28.752]                   {
[13:22:28.752]                     if (is.function(workers)) 
[13:22:28.752]                       workers <- workers()
[13:22:28.752]                     workers <- structure(as.integer(workers), 
[13:22:28.752]                       class = class(workers))
[13:22:28.752]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:28.752]                       workers >= 1)
[13:22:28.752]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:28.752]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:28.752]                     }
[13:22:28.752]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:28.752]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:28.752]                       envir = envir)
[13:22:28.752]                     if (!future$lazy) 
[13:22:28.752]                       future <- run(future)
[13:22:28.752]                     invisible(future)
[13:22:28.752]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:28.752]                 }
[13:22:28.752]             }
[13:22:28.752]         }
[13:22:28.752]     })
[13:22:28.752]     if (TRUE) {
[13:22:28.752]         base::sink(type = "output", split = FALSE)
[13:22:28.752]         if (TRUE) {
[13:22:28.752]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:28.752]         }
[13:22:28.752]         else {
[13:22:28.752]             ...future.result["stdout"] <- base::list(NULL)
[13:22:28.752]         }
[13:22:28.752]         base::close(...future.stdout)
[13:22:28.752]         ...future.stdout <- NULL
[13:22:28.752]     }
[13:22:28.752]     ...future.result$conditions <- ...future.conditions
[13:22:28.752]     ...future.result$finished <- base::Sys.time()
[13:22:28.752]     ...future.result
[13:22:28.752] }
[13:22:28.754] plan(): Setting new future strategy stack:
[13:22:28.754] List of future strategies:
[13:22:28.754] 1. sequential:
[13:22:28.754]    - args: function (..., envir = parent.frame())
[13:22:28.754]    - tweaked: FALSE
[13:22:28.754]    - call: NULL
[13:22:28.755] plan(): nbrOfWorkers() = 1
[13:22:28.755] plan(): Setting new future strategy stack:
[13:22:28.756] List of future strategies:
[13:22:28.756] 1. multisession:
[13:22:28.756]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:28.756]    - tweaked: FALSE
[13:22:28.756]    - call: NULL
[13:22:28.759] plan(): nbrOfWorkers() = 1
[13:22:28.759] SequentialFuture started (and completed)
[13:22:28.759] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:28.763] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[13:22:28.765] Option 'future.startup.script': TRUE
[13:22:28.766] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:22:28.766] Future startup scripts found: <none>
[13:22:28.766] Option 'future.startup.script': TRUE
[13:22:28.766] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:22:28.766] Future startup scripts found: <none>
[13:22:28.766] Option 'future.startup.script': TRUE
[13:22:28.766] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:22:28.766] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[13:22:28.767] Option 'future.startup.script': TRUE
[13:22:28.767] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:22:28.767] Future startup scripts found: ‘.future.R’
[13:22:28.767] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[13:22:28.768] plan(): Setting new future strategy stack:
[13:22:28.768] List of future strategies:
[13:22:28.768] 1. FutureStrategy:
[13:22:28.768]    - args: function (..., envir = parent.frame())
[13:22:28.768]    - tweaked: FALSE
[13:22:28.768]    - call: future::plan(oplan)
[13:22:28.769] plan(): nbrOfWorkers() = 1
> 
