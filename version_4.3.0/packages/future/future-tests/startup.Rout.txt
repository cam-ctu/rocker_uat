
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:14:27.016] plan(): Setting new future strategy stack:
[16:14:27.017] List of future strategies:
[16:14:27.017] 1. sequential:
[16:14:27.017]    - args: function (..., envir = parent.frame())
[16:14:27.017]    - tweaked: FALSE
[16:14:27.017]    - call: future::plan("sequential")
[16:14:27.029] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[16:14:27.039] plan(): Setting new future strategy stack:
[16:14:27.039] List of future strategies:
[16:14:27.039] 1. sequential:
[16:14:27.039]    - args: function (..., envir = parent.frame())
[16:14:27.039]    - tweaked: FALSE
[16:14:27.039]    - call: NULL
[16:14:27.049] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[16:14:27.056] plan(): Setting new future strategy stack:
[16:14:27.056] List of future strategies:
[16:14:27.056] 1. sequential:
[16:14:27.056]    - args: function (..., envir = parent.frame())
[16:14:27.056]    - tweaked: FALSE
[16:14:27.056]    - call: NULL
[16:14:27.056] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:14:27.059] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.059] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.059] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.060] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.061] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.061] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.061] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.061] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.061] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.061] R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.061] Coercing from character to numeric: ‘0.01’
[16:14:27.061] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[16:14:27.062] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.062] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.062] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.062] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.062] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.062] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.062] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:27.062] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.062] Setting plan('default')
[16:14:27.063] plan(): Setting new future strategy stack:
[16:14:27.063] List of future strategies:
[16:14:27.063] 1. sequential:
[16:14:27.063]    - args: function (..., envir = parent.frame())
[16:14:27.063]    - tweaked: FALSE
[16:14:27.063]    - call: NULL
[16:14:27.063] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:14:27.063] plan(): Setting new future strategy stack:
[16:14:27.064] List of future strategies:
[16:14:27.064] 1. sequential:
[16:14:27.064]    - args: function (..., envir = parent.frame())
[16:14:27.064]    - tweaked: FALSE
[16:14:27.064]    - call: NULL
[16:14:27.064] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[16:14:27.065] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.065] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.065] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.065] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.065] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.065] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.065] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.066] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.067] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.068] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.068] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.068] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.068] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:27.068] R command-line argument: -p 1
[16:14:27.068]  => options(future.plan = sequential)
[16:14:27.068] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.068] Setting plan('default')
[16:14:27.069] plan(): Setting new future strategy stack:
[16:14:27.069] List of future strategies:
[16:14:27.069] 1. sequential:
[16:14:27.069]    - args: function (..., envir = parent.frame())
[16:14:27.069]    - tweaked: FALSE
[16:14:27.069]    - call: NULL
[16:14:27.069] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[16:14:27.069] plan(): Setting new future strategy stack:
[16:14:27.069] List of future strategies:
[16:14:27.069] 1. sequential:
[16:14:27.069]    - args: function (..., envir = parent.frame())
[16:14:27.069]    - tweaked: FALSE
[16:14:27.069]    - call: NULL
[16:14:27.070] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[16:14:27.070] plan(): Setting new future strategy stack:
[16:14:27.070] List of future strategies:
[16:14:27.070] 1. sequential:
[16:14:27.070]    - args: function (..., envir = parent.frame())
[16:14:27.070]    - tweaked: FALSE
[16:14:27.070]    - call: NULL
[16:14:27.070] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[16:14:27.071] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.071] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.071] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.071] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.072] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.073] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.074] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:27.074] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.074] Setting plan('default')
[16:14:27.074] plan(): Setting new future strategy stack:
[16:14:27.075] List of future strategies:
[16:14:27.075] 1. sequential:
[16:14:27.075]    - args: function (..., envir = parent.frame())
[16:14:27.075]    - tweaked: FALSE
[16:14:27.075]    - call: NULL
[16:14:27.075] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[16:14:27.075] plan(): Setting new future strategy stack:
[16:14:27.075] List of future strategies:
[16:14:27.075] 1. sequential:
[16:14:27.075]    - args: function (..., envir = parent.frame())
[16:14:27.075]    - tweaked: FALSE
[16:14:27.075]    - call: NULL
[16:14:27.076] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[16:14:27.077] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.077] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.077] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.078] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.079] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:27.080] R command-line argument: -p 2
[16:14:27.080]  => options(future.plan = tweak(multisession, workers = 2))
[16:14:27.082] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.082] Setting plan('default')
[16:14:27.083] plan(): Setting new future strategy stack:
[16:14:27.083] List of future strategies:
[16:14:27.083] 1. multisession:
[16:14:27.083]    - args: function (..., workers = 2L, envir = parent.frame())
[16:14:27.083]    - tweaked: TRUE
[16:14:27.083]    - call: NULL
[16:14:27.083] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[16:14:27.084] plan(): Setting new future strategy stack:
[16:14:27.084] List of future strategies:
[16:14:27.084] 1. multisession:
[16:14:27.084]    - args: function (..., workers = 2L, envir = parent.frame())
[16:14:27.084]    - tweaked: TRUE
[16:14:27.084]    - call: NULL
[16:14:27.084] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:27.084] multisession:
[16:14:27.084] - args: function (..., workers = 2L, envir = parent.frame())
[16:14:27.084] - tweaked: TRUE
[16:14:27.084] - call: NULL
[16:14:27.085] getGlobalsAndPackages() ...
[16:14:27.086] Not searching for globals
[16:14:27.086] - globals: [0] <none>
[16:14:27.086] getGlobalsAndPackages() ... DONE
[16:14:27.086] [local output] makeClusterPSOCK() ...
[16:14:27.112] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:14:27.118] [local output] Base port: 11087
[16:14:27.118] [local output] Getting setup options for 2 cluster nodes ...
[16:14:27.118] [local output]  - Node 1 of 2 ...
[16:14:27.119] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:27.119] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.167264f888dea.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.167264f888dea.pid")'’
[16:14:27.305] - Possible to infer worker's PID: TRUE
[16:14:27.305] [local output] Rscript port: 11087

[16:14:27.305] [local output]  - Node 2 of 2 ...
[16:14:27.306] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:27.306] [local output] Rscript port: 11087

[16:14:27.307] [local output] Getting setup options for 2 cluster nodes ... done
[16:14:27.307] [local output]  - Parallel setup requested for some PSOCK nodes
[16:14:27.307] [local output] Setting up PSOCK nodes in parallel
[16:14:27.308] List of 36
[16:14:27.308]  $ worker          : chr "localhost"
[16:14:27.308]   ..- attr(*, "localhost")= logi TRUE
[16:14:27.308]  $ master          : chr "localhost"
[16:14:27.308]  $ port            : int 11087
[16:14:27.308]  $ connectTimeout  : num 120
[16:14:27.308]  $ timeout         : num 2592000
[16:14:27.308]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:14:27.308]  $ homogeneous     : logi TRUE
[16:14:27.308]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:14:27.308]  $ rscript_envs    : NULL
[16:14:27.308]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:14:27.308]  $ rscript_startup : NULL
[16:14:27.308]  $ rscript_sh      : chr "sh"
[16:14:27.308]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:27.308]  $ methods         : logi TRUE
[16:14:27.308]  $ socketOptions   : chr "no-delay"
[16:14:27.308]  $ useXDR          : logi FALSE
[16:14:27.308]  $ outfile         : chr "/dev/null"
[16:14:27.308]  $ renice          : int NA
[16:14:27.308]  $ rshcmd          : NULL
[16:14:27.308]  $ user            : chr(0) 
[16:14:27.308]  $ revtunnel       : logi FALSE
[16:14:27.308]  $ rshlogfile      : NULL
[16:14:27.308]  $ rshopts         : chr(0) 
[16:14:27.308]  $ rank            : int 1
[16:14:27.308]  $ manual          : logi FALSE
[16:14:27.308]  $ dryrun          : logi FALSE
[16:14:27.308]  $ quiet           : logi FALSE
[16:14:27.308]  $ setup_strategy  : chr "parallel"
[16:14:27.308]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:27.308]  $ pidfile         : chr "/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.167264f888dea.pid"
[16:14:27.308]  $ rshcmd_label    : NULL
[16:14:27.308]  $ rsh_call        : NULL
[16:14:27.308]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:27.308]  $ localMachine    : logi TRUE
[16:14:27.308]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:14:27.308]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:14:27.308]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:14:27.308]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:14:27.308]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:14:27.308]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:14:27.308]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:14:27.308]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:14:27.308]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:14:27.308]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:14:27.308]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:14:27.308]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:14:27.308]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:14:27.308]  $ arguments       :List of 28
[16:14:27.308]   ..$ worker          : chr "localhost"
[16:14:27.308]   ..$ master          : NULL
[16:14:27.308]   ..$ port            : int 11087
[16:14:27.308]   ..$ connectTimeout  : num 120
[16:14:27.308]   ..$ timeout         : num 2592000
[16:14:27.308]   ..$ rscript         : NULL
[16:14:27.308]   ..$ homogeneous     : NULL
[16:14:27.308]   ..$ rscript_args    : NULL
[16:14:27.308]   ..$ rscript_envs    : NULL
[16:14:27.308]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:14:27.308]   ..$ rscript_startup : NULL
[16:14:27.308]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:14:27.308]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:27.308]   ..$ methods         : logi TRUE
[16:14:27.308]   ..$ socketOptions   : chr "no-delay"
[16:14:27.308]   ..$ useXDR          : logi FALSE
[16:14:27.308]   ..$ outfile         : chr "/dev/null"
[16:14:27.308]   ..$ renice          : int NA
[16:14:27.308]   ..$ rshcmd          : NULL
[16:14:27.308]   ..$ user            : NULL
[16:14:27.308]   ..$ revtunnel       : logi NA
[16:14:27.308]   ..$ rshlogfile      : NULL
[16:14:27.308]   ..$ rshopts         : NULL
[16:14:27.308]   ..$ rank            : int 1
[16:14:27.308]   ..$ manual          : logi FALSE
[16:14:27.308]   ..$ dryrun          : logi FALSE
[16:14:27.308]   ..$ quiet           : logi FALSE
[16:14:27.308]   ..$ setup_strategy  : chr "parallel"
[16:14:27.308]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:14:27.324] [local output] System call to launch all workers:
[16:14:27.324] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.167264f888dea.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11087 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:14:27.324] [local output] Starting PSOCK main server
[16:14:27.325] [local output] Workers launched
[16:14:27.326] [local output] Waiting for workers to connect back
[16:14:27.326]  - [local output] 0 workers out of 2 ready
[16:14:27.569]  - [local output] 0 workers out of 2 ready
[16:14:27.570]  - [local output] 1 workers out of 2 ready
[16:14:27.570]  - [local output] 2 workers out of 2 ready
[16:14:27.570] [local output] Launching of workers completed
[16:14:27.571] [local output] Collecting session information from workers
[16:14:27.571] [local output]  - Worker #1 of 2
[16:14:27.572] [local output]  - Worker #2 of 2
[16:14:27.572] [local output] makeClusterPSOCK() ... done
[16:14:27.585] Packages needed by the future expression (n = 0): <none>
[16:14:27.585] Packages needed by future strategies (n = 0): <none>
[16:14:27.586] {
[16:14:27.586]     {
[16:14:27.586]         {
[16:14:27.586]             ...future.startTime <- base::Sys.time()
[16:14:27.586]             {
[16:14:27.586]                 {
[16:14:27.586]                   {
[16:14:27.586]                     {
[16:14:27.586]                       base::local({
[16:14:27.586]                         has_future <- base::requireNamespace("future", 
[16:14:27.586]                           quietly = TRUE)
[16:14:27.586]                         if (has_future) {
[16:14:27.586]                           ns <- base::getNamespace("future")
[16:14:27.586]                           version <- ns[[".package"]][["version"]]
[16:14:27.586]                           if (is.null(version)) 
[16:14:27.586]                             version <- utils::packageVersion("future")
[16:14:27.586]                         }
[16:14:27.586]                         else {
[16:14:27.586]                           version <- NULL
[16:14:27.586]                         }
[16:14:27.586]                         if (!has_future || version < "1.8.0") {
[16:14:27.586]                           info <- base::c(r_version = base::gsub("R version ", 
[16:14:27.586]                             "", base::R.version$version.string), 
[16:14:27.586]                             platform = base::sprintf("%s (%s-bit)", 
[16:14:27.586]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:27.586]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:27.586]                               "release", "version")], collapse = " "), 
[16:14:27.586]                             hostname = base::Sys.info()[["nodename"]])
[16:14:27.586]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:14:27.586]                             info)
[16:14:27.586]                           info <- base::paste(info, collapse = "; ")
[16:14:27.586]                           if (!has_future) {
[16:14:27.586]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:27.586]                               info)
[16:14:27.586]                           }
[16:14:27.586]                           else {
[16:14:27.586]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:27.586]                               info, version)
[16:14:27.586]                           }
[16:14:27.586]                           base::stop(msg)
[16:14:27.586]                         }
[16:14:27.586]                       })
[16:14:27.586]                     }
[16:14:27.586]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:14:27.586]                     base::options(mc.cores = 1L)
[16:14:27.586]                   }
[16:14:27.586]                   options(future.plan = NULL)
[16:14:27.586]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:27.586]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:27.586]                 }
[16:14:27.586]                 ...future.workdir <- getwd()
[16:14:27.586]             }
[16:14:27.586]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:27.586]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:27.586]         }
[16:14:27.586]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:27.586]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:27.586]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:27.586]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:27.586]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:27.586]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:27.586]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:27.586]             base::names(...future.oldOptions))
[16:14:27.586]     }
[16:14:27.586]     if (FALSE) {
[16:14:27.586]     }
[16:14:27.586]     else {
[16:14:27.586]         if (TRUE) {
[16:14:27.586]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:27.586]                 open = "w")
[16:14:27.586]         }
[16:14:27.586]         else {
[16:14:27.586]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:27.586]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:27.586]         }
[16:14:27.586]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:27.586]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:27.586]             base::sink(type = "output", split = FALSE)
[16:14:27.586]             base::close(...future.stdout)
[16:14:27.586]         }, add = TRUE)
[16:14:27.586]     }
[16:14:27.586]     ...future.frame <- base::sys.nframe()
[16:14:27.586]     ...future.conditions <- base::list()
[16:14:27.586]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:27.586]     if (FALSE) {
[16:14:27.586]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:27.586]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:27.586]     }
[16:14:27.586]     ...future.result <- base::tryCatch({
[16:14:27.586]         base::withCallingHandlers({
[16:14:27.586]             ...future.value <- base::withVisible(base::local({
[16:14:27.586]                 ...future.makeSendCondition <- local({
[16:14:27.586]                   sendCondition <- NULL
[16:14:27.586]                   function(frame = 1L) {
[16:14:27.586]                     if (is.function(sendCondition)) 
[16:14:27.586]                       return(sendCondition)
[16:14:27.586]                     ns <- getNamespace("parallel")
[16:14:27.586]                     if (exists("sendData", mode = "function", 
[16:14:27.586]                       envir = ns)) {
[16:14:27.586]                       parallel_sendData <- get("sendData", mode = "function", 
[16:14:27.586]                         envir = ns)
[16:14:27.586]                       envir <- sys.frame(frame)
[16:14:27.586]                       master <- NULL
[16:14:27.586]                       while (!identical(envir, .GlobalEnv) && 
[16:14:27.586]                         !identical(envir, emptyenv())) {
[16:14:27.586]                         if (exists("master", mode = "list", envir = envir, 
[16:14:27.586]                           inherits = FALSE)) {
[16:14:27.586]                           master <- get("master", mode = "list", 
[16:14:27.586]                             envir = envir, inherits = FALSE)
[16:14:27.586]                           if (inherits(master, c("SOCKnode", 
[16:14:27.586]                             "SOCK0node"))) {
[16:14:27.586]                             sendCondition <<- function(cond) {
[16:14:27.586]                               data <- list(type = "VALUE", value = cond, 
[16:14:27.586]                                 success = TRUE)
[16:14:27.586]                               parallel_sendData(master, data)
[16:14:27.586]                             }
[16:14:27.586]                             return(sendCondition)
[16:14:27.586]                           }
[16:14:27.586]                         }
[16:14:27.586]                         frame <- frame + 1L
[16:14:27.586]                         envir <- sys.frame(frame)
[16:14:27.586]                       }
[16:14:27.586]                     }
[16:14:27.586]                     sendCondition <<- function(cond) NULL
[16:14:27.586]                   }
[16:14:27.586]                 })
[16:14:27.586]                 withCallingHandlers({
[16:14:27.586]                   NA
[16:14:27.586]                 }, immediateCondition = function(cond) {
[16:14:27.586]                   sendCondition <- ...future.makeSendCondition()
[16:14:27.586]                   sendCondition(cond)
[16:14:27.586]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:27.586]                   {
[16:14:27.586]                     inherits <- base::inherits
[16:14:27.586]                     invokeRestart <- base::invokeRestart
[16:14:27.586]                     is.null <- base::is.null
[16:14:27.586]                     muffled <- FALSE
[16:14:27.586]                     if (inherits(cond, "message")) {
[16:14:27.586]                       muffled <- grepl(pattern, "muffleMessage")
[16:14:27.586]                       if (muffled) 
[16:14:27.586]                         invokeRestart("muffleMessage")
[16:14:27.586]                     }
[16:14:27.586]                     else if (inherits(cond, "warning")) {
[16:14:27.586]                       muffled <- grepl(pattern, "muffleWarning")
[16:14:27.586]                       if (muffled) 
[16:14:27.586]                         invokeRestart("muffleWarning")
[16:14:27.586]                     }
[16:14:27.586]                     else if (inherits(cond, "condition")) {
[16:14:27.586]                       if (!is.null(pattern)) {
[16:14:27.586]                         computeRestarts <- base::computeRestarts
[16:14:27.586]                         grepl <- base::grepl
[16:14:27.586]                         restarts <- computeRestarts(cond)
[16:14:27.586]                         for (restart in restarts) {
[16:14:27.586]                           name <- restart$name
[16:14:27.586]                           if (is.null(name)) 
[16:14:27.586]                             next
[16:14:27.586]                           if (!grepl(pattern, name)) 
[16:14:27.586]                             next
[16:14:27.586]                           invokeRestart(restart)
[16:14:27.586]                           muffled <- TRUE
[16:14:27.586]                           break
[16:14:27.586]                         }
[16:14:27.586]                       }
[16:14:27.586]                     }
[16:14:27.586]                     invisible(muffled)
[16:14:27.586]                   }
[16:14:27.586]                   muffleCondition(cond)
[16:14:27.586]                 })
[16:14:27.586]             }))
[16:14:27.586]             future::FutureResult(value = ...future.value$value, 
[16:14:27.586]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:27.586]                   ...future.rng), globalenv = if (FALSE) 
[16:14:27.586]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:27.586]                     ...future.globalenv.names))
[16:14:27.586]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:27.586]         }, condition = base::local({
[16:14:27.586]             c <- base::c
[16:14:27.586]             inherits <- base::inherits
[16:14:27.586]             invokeRestart <- base::invokeRestart
[16:14:27.586]             length <- base::length
[16:14:27.586]             list <- base::list
[16:14:27.586]             seq.int <- base::seq.int
[16:14:27.586]             signalCondition <- base::signalCondition
[16:14:27.586]             sys.calls <- base::sys.calls
[16:14:27.586]             `[[` <- base::`[[`
[16:14:27.586]             `+` <- base::`+`
[16:14:27.586]             `<<-` <- base::`<<-`
[16:14:27.586]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:27.586]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:27.586]                   3L)]
[16:14:27.586]             }
[16:14:27.586]             function(cond) {
[16:14:27.586]                 is_error <- inherits(cond, "error")
[16:14:27.586]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:27.586]                   NULL)
[16:14:27.586]                 if (is_error) {
[16:14:27.586]                   sessionInformation <- function() {
[16:14:27.586]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:27.586]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:27.586]                       search = base::search(), system = base::Sys.info())
[16:14:27.586]                   }
[16:14:27.586]                   ...future.conditions[[length(...future.conditions) + 
[16:14:27.586]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:27.586]                     cond$call), session = sessionInformation(), 
[16:14:27.586]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:27.586]                   signalCondition(cond)
[16:14:27.586]                 }
[16:14:27.586]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:27.586]                 "immediateCondition"))) {
[16:14:27.586]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:27.586]                   ...future.conditions[[length(...future.conditions) + 
[16:14:27.586]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:27.586]                   if (TRUE && !signal) {
[16:14:27.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:27.586]                     {
[16:14:27.586]                       inherits <- base::inherits
[16:14:27.586]                       invokeRestart <- base::invokeRestart
[16:14:27.586]                       is.null <- base::is.null
[16:14:27.586]                       muffled <- FALSE
[16:14:27.586]                       if (inherits(cond, "message")) {
[16:14:27.586]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:27.586]                         if (muffled) 
[16:14:27.586]                           invokeRestart("muffleMessage")
[16:14:27.586]                       }
[16:14:27.586]                       else if (inherits(cond, "warning")) {
[16:14:27.586]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:27.586]                         if (muffled) 
[16:14:27.586]                           invokeRestart("muffleWarning")
[16:14:27.586]                       }
[16:14:27.586]                       else if (inherits(cond, "condition")) {
[16:14:27.586]                         if (!is.null(pattern)) {
[16:14:27.586]                           computeRestarts <- base::computeRestarts
[16:14:27.586]                           grepl <- base::grepl
[16:14:27.586]                           restarts <- computeRestarts(cond)
[16:14:27.586]                           for (restart in restarts) {
[16:14:27.586]                             name <- restart$name
[16:14:27.586]                             if (is.null(name)) 
[16:14:27.586]                               next
[16:14:27.586]                             if (!grepl(pattern, name)) 
[16:14:27.586]                               next
[16:14:27.586]                             invokeRestart(restart)
[16:14:27.586]                             muffled <- TRUE
[16:14:27.586]                             break
[16:14:27.586]                           }
[16:14:27.586]                         }
[16:14:27.586]                       }
[16:14:27.586]                       invisible(muffled)
[16:14:27.586]                     }
[16:14:27.586]                     muffleCondition(cond, pattern = "^muffle")
[16:14:27.586]                   }
[16:14:27.586]                 }
[16:14:27.586]                 else {
[16:14:27.586]                   if (TRUE) {
[16:14:27.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:27.586]                     {
[16:14:27.586]                       inherits <- base::inherits
[16:14:27.586]                       invokeRestart <- base::invokeRestart
[16:14:27.586]                       is.null <- base::is.null
[16:14:27.586]                       muffled <- FALSE
[16:14:27.586]                       if (inherits(cond, "message")) {
[16:14:27.586]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:27.586]                         if (muffled) 
[16:14:27.586]                           invokeRestart("muffleMessage")
[16:14:27.586]                       }
[16:14:27.586]                       else if (inherits(cond, "warning")) {
[16:14:27.586]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:27.586]                         if (muffled) 
[16:14:27.586]                           invokeRestart("muffleWarning")
[16:14:27.586]                       }
[16:14:27.586]                       else if (inherits(cond, "condition")) {
[16:14:27.586]                         if (!is.null(pattern)) {
[16:14:27.586]                           computeRestarts <- base::computeRestarts
[16:14:27.586]                           grepl <- base::grepl
[16:14:27.586]                           restarts <- computeRestarts(cond)
[16:14:27.586]                           for (restart in restarts) {
[16:14:27.586]                             name <- restart$name
[16:14:27.586]                             if (is.null(name)) 
[16:14:27.586]                               next
[16:14:27.586]                             if (!grepl(pattern, name)) 
[16:14:27.586]                               next
[16:14:27.586]                             invokeRestart(restart)
[16:14:27.586]                             muffled <- TRUE
[16:14:27.586]                             break
[16:14:27.586]                           }
[16:14:27.586]                         }
[16:14:27.586]                       }
[16:14:27.586]                       invisible(muffled)
[16:14:27.586]                     }
[16:14:27.586]                     muffleCondition(cond, pattern = "^muffle")
[16:14:27.586]                   }
[16:14:27.586]                 }
[16:14:27.586]             }
[16:14:27.586]         }))
[16:14:27.586]     }, error = function(ex) {
[16:14:27.586]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:27.586]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:27.586]                 ...future.rng), started = ...future.startTime, 
[16:14:27.586]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:27.586]             version = "1.8"), class = "FutureResult")
[16:14:27.586]     }, finally = {
[16:14:27.586]         if (!identical(...future.workdir, getwd())) 
[16:14:27.586]             setwd(...future.workdir)
[16:14:27.586]         {
[16:14:27.586]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:27.586]                 ...future.oldOptions$nwarnings <- NULL
[16:14:27.586]             }
[16:14:27.586]             base::options(...future.oldOptions)
[16:14:27.586]             if (.Platform$OS.type == "windows") {
[16:14:27.586]                 old_names <- names(...future.oldEnvVars)
[16:14:27.586]                 envs <- base::Sys.getenv()
[16:14:27.586]                 names <- names(envs)
[16:14:27.586]                 common <- intersect(names, old_names)
[16:14:27.586]                 added <- setdiff(names, old_names)
[16:14:27.586]                 removed <- setdiff(old_names, names)
[16:14:27.586]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:27.586]                   envs[common]]
[16:14:27.586]                 NAMES <- toupper(changed)
[16:14:27.586]                 args <- list()
[16:14:27.586]                 for (kk in seq_along(NAMES)) {
[16:14:27.586]                   name <- changed[[kk]]
[16:14:27.586]                   NAME <- NAMES[[kk]]
[16:14:27.586]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:27.586]                     next
[16:14:27.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:27.586]                 }
[16:14:27.586]                 NAMES <- toupper(added)
[16:14:27.586]                 for (kk in seq_along(NAMES)) {
[16:14:27.586]                   name <- added[[kk]]
[16:14:27.586]                   NAME <- NAMES[[kk]]
[16:14:27.586]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:27.586]                     next
[16:14:27.586]                   args[[name]] <- ""
[16:14:27.586]                 }
[16:14:27.586]                 NAMES <- toupper(removed)
[16:14:27.586]                 for (kk in seq_along(NAMES)) {
[16:14:27.586]                   name <- removed[[kk]]
[16:14:27.586]                   NAME <- NAMES[[kk]]
[16:14:27.586]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:27.586]                     next
[16:14:27.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:27.586]                 }
[16:14:27.586]                 if (length(args) > 0) 
[16:14:27.586]                   base::do.call(base::Sys.setenv, args = args)
[16:14:27.586]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:27.586]             }
[16:14:27.586]             else {
[16:14:27.586]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:27.586]             }
[16:14:27.586]             {
[16:14:27.586]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:27.586]                   0L) {
[16:14:27.586]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:27.586]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:27.586]                   base::options(opts)
[16:14:27.586]                 }
[16:14:27.586]                 {
[16:14:27.586]                   {
[16:14:27.586]                     base::options(mc.cores = ...future.mc.cores.old)
[16:14:27.586]                     NULL
[16:14:27.586]                   }
[16:14:27.586]                   options(future.plan = function (..., workers = 2L, 
[16:14:27.586]                     envir = parent.frame()) 
[16:14:27.586]                   strategy(..., workers = workers, envir = envir))
[16:14:27.586]                   if (is.na(NA_character_)) 
[16:14:27.586]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:27.586]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:14:27.586]                   future::plan(list(function (..., workers = 2L, 
[16:14:27.586]                     envir = parent.frame()) 
[16:14:27.586]                   strategy(..., workers = workers, envir = envir)), 
[16:14:27.586]                     .cleanup = FALSE, .init = FALSE)
[16:14:27.586]                 }
[16:14:27.586]             }
[16:14:27.586]         }
[16:14:27.586]     })
[16:14:27.586]     if (TRUE) {
[16:14:27.586]         base::sink(type = "output", split = FALSE)
[16:14:27.586]         if (TRUE) {
[16:14:27.586]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:27.586]         }
[16:14:27.586]         else {
[16:14:27.586]             ...future.result["stdout"] <- base::list(NULL)
[16:14:27.586]         }
[16:14:27.586]         base::close(...future.stdout)
[16:14:27.586]         ...future.stdout <- NULL
[16:14:27.586]     }
[16:14:27.586]     ...future.result$conditions <- ...future.conditions
[16:14:27.586]     ...future.result$finished <- base::Sys.time()
[16:14:27.586]     ...future.result
[16:14:27.586] }
[16:14:27.656] MultisessionFuture started
[16:14:27.657] result() for ClusterFuture ...
[16:14:27.657] receiveMessageFromWorker() for ClusterFuture ...
[16:14:27.657] - Validating connection of MultisessionFuture
[16:14:27.680] - received message: FutureResult
[16:14:27.681] - Received FutureResult
[16:14:27.683] - Erased future from FutureRegistry
[16:14:27.684] result() for ClusterFuture ...
[16:14:27.684] - result already collected: FutureResult
[16:14:27.684] result() for ClusterFuture ... done
[16:14:27.684] receiveMessageFromWorker() for ClusterFuture ... done
[16:14:27.684] result() for ClusterFuture ... done
[16:14:27.684] result() for ClusterFuture ...
[16:14:27.684] - result already collected: FutureResult
[16:14:27.685] result() for ClusterFuture ... done
[16:14:27.685] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:27.685] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[16:14:27.686] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.686] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.686] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.687] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.688] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.689] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.690] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.690] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.690] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.690] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.690] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[16:14:27.691] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.691] Setting plan('default')
[16:14:27.691] plan(): Setting new future strategy stack:
[16:14:27.691] List of future strategies:
[16:14:27.691] 1. sequential:
[16:14:27.691]    - args: function (..., envir = parent.frame())
[16:14:27.691]    - tweaked: FALSE
[16:14:27.691]    - call: NULL
[16:14:27.692] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:14:27.692] plan(): Setting new future strategy stack:
[16:14:27.693] List of future strategies:
[16:14:27.693] 1. sequential:
[16:14:27.693]    - args: function (..., envir = parent.frame())
[16:14:27.693]    - tweaked: FALSE
[16:14:27.693]    - call: NULL
[16:14:27.693] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[16:14:27.695] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.695] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.695] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.695] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.696] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.696] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.696] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.696] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.696] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.697] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.697] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.697] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.697] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.697] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.698] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.698] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.698] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.698] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.698] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.699] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.699] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.699] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.699] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.699] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.700] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.700] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.700] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.700] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.701] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.701] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[16:14:27.702] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.702] Setting plan('default')
[16:14:27.702] plan(): Setting new future strategy stack:
[16:14:27.702] List of future strategies:
[16:14:27.702] 1. sequential:
[16:14:27.702]    - args: function (..., envir = parent.frame())
[16:14:27.702]    - tweaked: FALSE
[16:14:27.702]    - call: NULL
[16:14:27.703] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:14:27.704] plan(): Setting new future strategy stack:
[16:14:27.704] List of future strategies:
[16:14:27.704] 1. sequential:
[16:14:27.704]    - args: function (..., envir = parent.frame())
[16:14:27.704]    - tweaked: FALSE
[16:14:27.704]    - call: NULL
[16:14:27.704] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[16:14:27.706] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.706] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.706] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.707] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.707] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.707] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.707] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.708] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.708] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.708] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.708] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.708] Environment variable ‘R_FUTURE_PLAN’ not set
[16:14:27.709] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.709] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.709] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.709] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.709] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.709] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.710] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.710] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.710] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.710] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.710] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.711] Environment variable ‘R_FUTURE_JOURNAL’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[16:14:27.712] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.712] Setting plan('default')
[16:14:27.712] plan(): Setting new future strategy stack:
[16:14:27.713] List of future strategies:
[16:14:27.713] 1. sequential:
[16:14:27.713]    - args: function (..., envir = parent.frame())
[16:14:27.713]    - tweaked: FALSE
[16:14:27.713]    - call: NULL
[16:14:27.713] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:14:27.713] plan(): Setting new future strategy stack:
[16:14:27.713] List of future strategies:
[16:14:27.713] 1. sequential:
[16:14:27.713]    - args: function (..., envir = parent.frame())
[16:14:27.713]    - tweaked: FALSE
[16:14:27.713]    - call: NULL
[16:14:27.714] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:14:27.715] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:27.715] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:27.715] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:27.715] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:27.715] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:27.716] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:27.716] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:27.716] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:27.716] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:27.716] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:27.716] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:27.716] R_FUTURE_PLAN=‘multisession’
[16:14:27.717] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[16:14:27.717] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:27.717] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:27.717] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:27.717] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:27.717] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:27.717] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:27.718] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:27.719] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:27.719] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:27.719] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:27.719] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:27.719] Option 'future.plan' = ‘multisession’
[16:14:27.719] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:27.719] Setting plan('default')
[16:14:27.720] plan(): Setting new future strategy stack:
[16:14:27.720] List of future strategies:
[16:14:27.720] 1. multisession:
[16:14:27.720]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:27.720]    - tweaked: FALSE
[16:14:27.720]    - call: plan("default", .init = FALSE)
[16:14:27.723] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:14:27.724] plan(): Setting new future strategy stack:
[16:14:27.724] List of future strategies:
[16:14:27.724] 1. multisession:
[16:14:27.724]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:27.724]    - tweaked: FALSE
[16:14:27.724]    - call: plan("default")
[16:14:27.724] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:27.725] multisession:
[16:14:27.725] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:27.725] - tweaked: FALSE
[16:14:27.725] - call: plan("default")
[16:14:27.730] getGlobalsAndPackages() ...
[16:14:27.730] Not searching for globals
[16:14:27.730] - globals: [0] <none>
[16:14:27.730] getGlobalsAndPackages() ... DONE
[16:14:27.731] [local output] makeClusterPSOCK() ...
[16:14:27.731] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:14:27.732] [local output] Base port: 11887
[16:14:27.732] [local output] Getting setup options for 2 cluster nodes ...
[16:14:27.732] [local output]  - Node 1 of 2 ...
[16:14:27.732] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:27.733] [local output] Rscript port: 11887

[16:14:27.733] [local output]  - Node 2 of 2 ...
[16:14:27.733] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:27.734] [local output] Rscript port: 11887

[16:14:27.734] [local output] Getting setup options for 2 cluster nodes ... done
[16:14:27.734] [local output]  - Parallel setup requested for some PSOCK nodes
[16:14:27.734] [local output] Setting up PSOCK nodes in parallel
[16:14:27.734] List of 36
[16:14:27.734]  $ worker          : chr "localhost"
[16:14:27.734]   ..- attr(*, "localhost")= logi TRUE
[16:14:27.734]  $ master          : chr "localhost"
[16:14:27.734]  $ port            : int 11887
[16:14:27.734]  $ connectTimeout  : num 120
[16:14:27.734]  $ timeout         : num 2592000
[16:14:27.734]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:14:27.734]  $ homogeneous     : logi TRUE
[16:14:27.734]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:14:27.734]  $ rscript_envs    : NULL
[16:14:27.734]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:14:27.734]  $ rscript_startup : NULL
[16:14:27.734]  $ rscript_sh      : chr "sh"
[16:14:27.734]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:27.734]  $ methods         : logi TRUE
[16:14:27.734]  $ socketOptions   : chr "no-delay"
[16:14:27.734]  $ useXDR          : logi FALSE
[16:14:27.734]  $ outfile         : chr "/dev/null"
[16:14:27.734]  $ renice          : int NA
[16:14:27.734]  $ rshcmd          : NULL
[16:14:27.734]  $ user            : chr(0) 
[16:14:27.734]  $ revtunnel       : logi FALSE
[16:14:27.734]  $ rshlogfile      : NULL
[16:14:27.734]  $ rshopts         : chr(0) 
[16:14:27.734]  $ rank            : int 1
[16:14:27.734]  $ manual          : logi FALSE
[16:14:27.734]  $ dryrun          : logi FALSE
[16:14:27.734]  $ quiet           : logi FALSE
[16:14:27.734]  $ setup_strategy  : chr "parallel"
[16:14:27.734]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:27.734]  $ pidfile         : chr "/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.1672612accda2.pid"
[16:14:27.734]  $ rshcmd_label    : NULL
[16:14:27.734]  $ rsh_call        : NULL
[16:14:27.734]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:27.734]  $ localMachine    : logi TRUE
[16:14:27.734]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:14:27.734]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:14:27.734]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:14:27.734]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:14:27.734]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:14:27.734]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:14:27.734]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:14:27.734]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:14:27.734]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:14:27.734]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:14:27.734]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:14:27.734]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:14:27.734]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:14:27.734]  $ arguments       :List of 28
[16:14:27.734]   ..$ worker          : chr "localhost"
[16:14:27.734]   ..$ master          : NULL
[16:14:27.734]   ..$ port            : int 11887
[16:14:27.734]   ..$ connectTimeout  : num 120
[16:14:27.734]   ..$ timeout         : num 2592000
[16:14:27.734]   ..$ rscript         : NULL
[16:14:27.734]   ..$ homogeneous     : NULL
[16:14:27.734]   ..$ rscript_args    : NULL
[16:14:27.734]   ..$ rscript_envs    : NULL
[16:14:27.734]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:14:27.734]   ..$ rscript_startup : NULL
[16:14:27.734]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:14:27.734]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:27.734]   ..$ methods         : logi TRUE
[16:14:27.734]   ..$ socketOptions   : chr "no-delay"
[16:14:27.734]   ..$ useXDR          : logi FALSE
[16:14:27.734]   ..$ outfile         : chr "/dev/null"
[16:14:27.734]   ..$ renice          : int NA
[16:14:27.734]   ..$ rshcmd          : NULL
[16:14:27.734]   ..$ user            : NULL
[16:14:27.734]   ..$ revtunnel       : logi NA
[16:14:27.734]   ..$ rshlogfile      : NULL
[16:14:27.734]   ..$ rshopts         : NULL
[16:14:27.734]   ..$ rank            : int 1
[16:14:27.734]   ..$ manual          : logi FALSE
[16:14:27.734]   ..$ dryrun          : logi FALSE
[16:14:27.734]   ..$ quiet           : logi FALSE
[16:14:27.734]   ..$ setup_strategy  : chr "parallel"
[16:14:27.734]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:14:27.751] [local output] System call to launch all workers:
[16:14:27.751] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.1672612accda2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11887 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:14:27.751] [local output] Starting PSOCK main server
[16:14:27.752] [local output] Workers launched
[16:14:27.752] [local output] Waiting for workers to connect back
[16:14:27.753]  - [local output] 0 workers out of 2 ready
[16:14:27.991]  - [local output] 0 workers out of 2 ready
[16:14:27.992]  - [local output] 1 workers out of 2 ready
[16:14:28.003]  - [local output] 1 workers out of 2 ready
[16:14:28.003]  - [local output] 2 workers out of 2 ready
[16:14:28.004] [local output] Launching of workers completed
[16:14:28.004] [local output] Collecting session information from workers
[16:14:28.005] [local output]  - Worker #1 of 2
[16:14:28.005] [local output]  - Worker #2 of 2
[16:14:28.005] [local output] makeClusterPSOCK() ... done
[16:14:28.017] Packages needed by the future expression (n = 0): <none>
[16:14:28.017] Packages needed by future strategies (n = 0): <none>
[16:14:28.018] {
[16:14:28.018]     {
[16:14:28.018]         {
[16:14:28.018]             ...future.startTime <- base::Sys.time()
[16:14:28.018]             {
[16:14:28.018]                 {
[16:14:28.018]                   {
[16:14:28.018]                     {
[16:14:28.018]                       base::local({
[16:14:28.018]                         has_future <- base::requireNamespace("future", 
[16:14:28.018]                           quietly = TRUE)
[16:14:28.018]                         if (has_future) {
[16:14:28.018]                           ns <- base::getNamespace("future")
[16:14:28.018]                           version <- ns[[".package"]][["version"]]
[16:14:28.018]                           if (is.null(version)) 
[16:14:28.018]                             version <- utils::packageVersion("future")
[16:14:28.018]                         }
[16:14:28.018]                         else {
[16:14:28.018]                           version <- NULL
[16:14:28.018]                         }
[16:14:28.018]                         if (!has_future || version < "1.8.0") {
[16:14:28.018]                           info <- base::c(r_version = base::gsub("R version ", 
[16:14:28.018]                             "", base::R.version$version.string), 
[16:14:28.018]                             platform = base::sprintf("%s (%s-bit)", 
[16:14:28.018]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:28.018]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:28.018]                               "release", "version")], collapse = " "), 
[16:14:28.018]                             hostname = base::Sys.info()[["nodename"]])
[16:14:28.018]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:14:28.018]                             info)
[16:14:28.018]                           info <- base::paste(info, collapse = "; ")
[16:14:28.018]                           if (!has_future) {
[16:14:28.018]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:28.018]                               info)
[16:14:28.018]                           }
[16:14:28.018]                           else {
[16:14:28.018]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:28.018]                               info, version)
[16:14:28.018]                           }
[16:14:28.018]                           base::stop(msg)
[16:14:28.018]                         }
[16:14:28.018]                       })
[16:14:28.018]                     }
[16:14:28.018]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:14:28.018]                     base::options(mc.cores = 1L)
[16:14:28.018]                   }
[16:14:28.018]                   options(future.plan = NULL)
[16:14:28.018]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.018]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:28.018]                 }
[16:14:28.018]                 ...future.workdir <- getwd()
[16:14:28.018]             }
[16:14:28.018]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:28.018]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:28.018]         }
[16:14:28.018]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:28.018]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:28.018]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:28.018]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:28.018]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:28.018]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:28.018]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:28.018]             base::names(...future.oldOptions))
[16:14:28.018]     }
[16:14:28.018]     if (FALSE) {
[16:14:28.018]     }
[16:14:28.018]     else {
[16:14:28.018]         if (TRUE) {
[16:14:28.018]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:28.018]                 open = "w")
[16:14:28.018]         }
[16:14:28.018]         else {
[16:14:28.018]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:28.018]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:28.018]         }
[16:14:28.018]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:28.018]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:28.018]             base::sink(type = "output", split = FALSE)
[16:14:28.018]             base::close(...future.stdout)
[16:14:28.018]         }, add = TRUE)
[16:14:28.018]     }
[16:14:28.018]     ...future.frame <- base::sys.nframe()
[16:14:28.018]     ...future.conditions <- base::list()
[16:14:28.018]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:28.018]     if (FALSE) {
[16:14:28.018]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:28.018]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:28.018]     }
[16:14:28.018]     ...future.result <- base::tryCatch({
[16:14:28.018]         base::withCallingHandlers({
[16:14:28.018]             ...future.value <- base::withVisible(base::local({
[16:14:28.018]                 ...future.makeSendCondition <- local({
[16:14:28.018]                   sendCondition <- NULL
[16:14:28.018]                   function(frame = 1L) {
[16:14:28.018]                     if (is.function(sendCondition)) 
[16:14:28.018]                       return(sendCondition)
[16:14:28.018]                     ns <- getNamespace("parallel")
[16:14:28.018]                     if (exists("sendData", mode = "function", 
[16:14:28.018]                       envir = ns)) {
[16:14:28.018]                       parallel_sendData <- get("sendData", mode = "function", 
[16:14:28.018]                         envir = ns)
[16:14:28.018]                       envir <- sys.frame(frame)
[16:14:28.018]                       master <- NULL
[16:14:28.018]                       while (!identical(envir, .GlobalEnv) && 
[16:14:28.018]                         !identical(envir, emptyenv())) {
[16:14:28.018]                         if (exists("master", mode = "list", envir = envir, 
[16:14:28.018]                           inherits = FALSE)) {
[16:14:28.018]                           master <- get("master", mode = "list", 
[16:14:28.018]                             envir = envir, inherits = FALSE)
[16:14:28.018]                           if (inherits(master, c("SOCKnode", 
[16:14:28.018]                             "SOCK0node"))) {
[16:14:28.018]                             sendCondition <<- function(cond) {
[16:14:28.018]                               data <- list(type = "VALUE", value = cond, 
[16:14:28.018]                                 success = TRUE)
[16:14:28.018]                               parallel_sendData(master, data)
[16:14:28.018]                             }
[16:14:28.018]                             return(sendCondition)
[16:14:28.018]                           }
[16:14:28.018]                         }
[16:14:28.018]                         frame <- frame + 1L
[16:14:28.018]                         envir <- sys.frame(frame)
[16:14:28.018]                       }
[16:14:28.018]                     }
[16:14:28.018]                     sendCondition <<- function(cond) NULL
[16:14:28.018]                   }
[16:14:28.018]                 })
[16:14:28.018]                 withCallingHandlers({
[16:14:28.018]                   NA
[16:14:28.018]                 }, immediateCondition = function(cond) {
[16:14:28.018]                   sendCondition <- ...future.makeSendCondition()
[16:14:28.018]                   sendCondition(cond)
[16:14:28.018]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.018]                   {
[16:14:28.018]                     inherits <- base::inherits
[16:14:28.018]                     invokeRestart <- base::invokeRestart
[16:14:28.018]                     is.null <- base::is.null
[16:14:28.018]                     muffled <- FALSE
[16:14:28.018]                     if (inherits(cond, "message")) {
[16:14:28.018]                       muffled <- grepl(pattern, "muffleMessage")
[16:14:28.018]                       if (muffled) 
[16:14:28.018]                         invokeRestart("muffleMessage")
[16:14:28.018]                     }
[16:14:28.018]                     else if (inherits(cond, "warning")) {
[16:14:28.018]                       muffled <- grepl(pattern, "muffleWarning")
[16:14:28.018]                       if (muffled) 
[16:14:28.018]                         invokeRestart("muffleWarning")
[16:14:28.018]                     }
[16:14:28.018]                     else if (inherits(cond, "condition")) {
[16:14:28.018]                       if (!is.null(pattern)) {
[16:14:28.018]                         computeRestarts <- base::computeRestarts
[16:14:28.018]                         grepl <- base::grepl
[16:14:28.018]                         restarts <- computeRestarts(cond)
[16:14:28.018]                         for (restart in restarts) {
[16:14:28.018]                           name <- restart$name
[16:14:28.018]                           if (is.null(name)) 
[16:14:28.018]                             next
[16:14:28.018]                           if (!grepl(pattern, name)) 
[16:14:28.018]                             next
[16:14:28.018]                           invokeRestart(restart)
[16:14:28.018]                           muffled <- TRUE
[16:14:28.018]                           break
[16:14:28.018]                         }
[16:14:28.018]                       }
[16:14:28.018]                     }
[16:14:28.018]                     invisible(muffled)
[16:14:28.018]                   }
[16:14:28.018]                   muffleCondition(cond)
[16:14:28.018]                 })
[16:14:28.018]             }))
[16:14:28.018]             future::FutureResult(value = ...future.value$value, 
[16:14:28.018]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.018]                   ...future.rng), globalenv = if (FALSE) 
[16:14:28.018]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:28.018]                     ...future.globalenv.names))
[16:14:28.018]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:28.018]         }, condition = base::local({
[16:14:28.018]             c <- base::c
[16:14:28.018]             inherits <- base::inherits
[16:14:28.018]             invokeRestart <- base::invokeRestart
[16:14:28.018]             length <- base::length
[16:14:28.018]             list <- base::list
[16:14:28.018]             seq.int <- base::seq.int
[16:14:28.018]             signalCondition <- base::signalCondition
[16:14:28.018]             sys.calls <- base::sys.calls
[16:14:28.018]             `[[` <- base::`[[`
[16:14:28.018]             `+` <- base::`+`
[16:14:28.018]             `<<-` <- base::`<<-`
[16:14:28.018]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:28.018]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:28.018]                   3L)]
[16:14:28.018]             }
[16:14:28.018]             function(cond) {
[16:14:28.018]                 is_error <- inherits(cond, "error")
[16:14:28.018]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:28.018]                   NULL)
[16:14:28.018]                 if (is_error) {
[16:14:28.018]                   sessionInformation <- function() {
[16:14:28.018]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:28.018]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:28.018]                       search = base::search(), system = base::Sys.info())
[16:14:28.018]                   }
[16:14:28.018]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.018]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:28.018]                     cond$call), session = sessionInformation(), 
[16:14:28.018]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:28.018]                   signalCondition(cond)
[16:14:28.018]                 }
[16:14:28.018]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:28.018]                 "immediateCondition"))) {
[16:14:28.018]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:28.018]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.018]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:28.018]                   if (TRUE && !signal) {
[16:14:28.018]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.018]                     {
[16:14:28.018]                       inherits <- base::inherits
[16:14:28.018]                       invokeRestart <- base::invokeRestart
[16:14:28.018]                       is.null <- base::is.null
[16:14:28.018]                       muffled <- FALSE
[16:14:28.018]                       if (inherits(cond, "message")) {
[16:14:28.018]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.018]                         if (muffled) 
[16:14:28.018]                           invokeRestart("muffleMessage")
[16:14:28.018]                       }
[16:14:28.018]                       else if (inherits(cond, "warning")) {
[16:14:28.018]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.018]                         if (muffled) 
[16:14:28.018]                           invokeRestart("muffleWarning")
[16:14:28.018]                       }
[16:14:28.018]                       else if (inherits(cond, "condition")) {
[16:14:28.018]                         if (!is.null(pattern)) {
[16:14:28.018]                           computeRestarts <- base::computeRestarts
[16:14:28.018]                           grepl <- base::grepl
[16:14:28.018]                           restarts <- computeRestarts(cond)
[16:14:28.018]                           for (restart in restarts) {
[16:14:28.018]                             name <- restart$name
[16:14:28.018]                             if (is.null(name)) 
[16:14:28.018]                               next
[16:14:28.018]                             if (!grepl(pattern, name)) 
[16:14:28.018]                               next
[16:14:28.018]                             invokeRestart(restart)
[16:14:28.018]                             muffled <- TRUE
[16:14:28.018]                             break
[16:14:28.018]                           }
[16:14:28.018]                         }
[16:14:28.018]                       }
[16:14:28.018]                       invisible(muffled)
[16:14:28.018]                     }
[16:14:28.018]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.018]                   }
[16:14:28.018]                 }
[16:14:28.018]                 else {
[16:14:28.018]                   if (TRUE) {
[16:14:28.018]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.018]                     {
[16:14:28.018]                       inherits <- base::inherits
[16:14:28.018]                       invokeRestart <- base::invokeRestart
[16:14:28.018]                       is.null <- base::is.null
[16:14:28.018]                       muffled <- FALSE
[16:14:28.018]                       if (inherits(cond, "message")) {
[16:14:28.018]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.018]                         if (muffled) 
[16:14:28.018]                           invokeRestart("muffleMessage")
[16:14:28.018]                       }
[16:14:28.018]                       else if (inherits(cond, "warning")) {
[16:14:28.018]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.018]                         if (muffled) 
[16:14:28.018]                           invokeRestart("muffleWarning")
[16:14:28.018]                       }
[16:14:28.018]                       else if (inherits(cond, "condition")) {
[16:14:28.018]                         if (!is.null(pattern)) {
[16:14:28.018]                           computeRestarts <- base::computeRestarts
[16:14:28.018]                           grepl <- base::grepl
[16:14:28.018]                           restarts <- computeRestarts(cond)
[16:14:28.018]                           for (restart in restarts) {
[16:14:28.018]                             name <- restart$name
[16:14:28.018]                             if (is.null(name)) 
[16:14:28.018]                               next
[16:14:28.018]                             if (!grepl(pattern, name)) 
[16:14:28.018]                               next
[16:14:28.018]                             invokeRestart(restart)
[16:14:28.018]                             muffled <- TRUE
[16:14:28.018]                             break
[16:14:28.018]                           }
[16:14:28.018]                         }
[16:14:28.018]                       }
[16:14:28.018]                       invisible(muffled)
[16:14:28.018]                     }
[16:14:28.018]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.018]                   }
[16:14:28.018]                 }
[16:14:28.018]             }
[16:14:28.018]         }))
[16:14:28.018]     }, error = function(ex) {
[16:14:28.018]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:28.018]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.018]                 ...future.rng), started = ...future.startTime, 
[16:14:28.018]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:28.018]             version = "1.8"), class = "FutureResult")
[16:14:28.018]     }, finally = {
[16:14:28.018]         if (!identical(...future.workdir, getwd())) 
[16:14:28.018]             setwd(...future.workdir)
[16:14:28.018]         {
[16:14:28.018]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:28.018]                 ...future.oldOptions$nwarnings <- NULL
[16:14:28.018]             }
[16:14:28.018]             base::options(...future.oldOptions)
[16:14:28.018]             if (.Platform$OS.type == "windows") {
[16:14:28.018]                 old_names <- names(...future.oldEnvVars)
[16:14:28.018]                 envs <- base::Sys.getenv()
[16:14:28.018]                 names <- names(envs)
[16:14:28.018]                 common <- intersect(names, old_names)
[16:14:28.018]                 added <- setdiff(names, old_names)
[16:14:28.018]                 removed <- setdiff(old_names, names)
[16:14:28.018]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:28.018]                   envs[common]]
[16:14:28.018]                 NAMES <- toupper(changed)
[16:14:28.018]                 args <- list()
[16:14:28.018]                 for (kk in seq_along(NAMES)) {
[16:14:28.018]                   name <- changed[[kk]]
[16:14:28.018]                   NAME <- NAMES[[kk]]
[16:14:28.018]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.018]                     next
[16:14:28.018]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.018]                 }
[16:14:28.018]                 NAMES <- toupper(added)
[16:14:28.018]                 for (kk in seq_along(NAMES)) {
[16:14:28.018]                   name <- added[[kk]]
[16:14:28.018]                   NAME <- NAMES[[kk]]
[16:14:28.018]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.018]                     next
[16:14:28.018]                   args[[name]] <- ""
[16:14:28.018]                 }
[16:14:28.018]                 NAMES <- toupper(removed)
[16:14:28.018]                 for (kk in seq_along(NAMES)) {
[16:14:28.018]                   name <- removed[[kk]]
[16:14:28.018]                   NAME <- NAMES[[kk]]
[16:14:28.018]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.018]                     next
[16:14:28.018]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.018]                 }
[16:14:28.018]                 if (length(args) > 0) 
[16:14:28.018]                   base::do.call(base::Sys.setenv, args = args)
[16:14:28.018]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:28.018]             }
[16:14:28.018]             else {
[16:14:28.018]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:28.018]             }
[16:14:28.018]             {
[16:14:28.018]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:28.018]                   0L) {
[16:14:28.018]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:28.018]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:28.018]                   base::options(opts)
[16:14:28.018]                 }
[16:14:28.018]                 {
[16:14:28.018]                   {
[16:14:28.018]                     base::options(mc.cores = ...future.mc.cores.old)
[16:14:28.018]                     NULL
[16:14:28.018]                   }
[16:14:28.018]                   options(future.plan = "multisession")
[16:14:28.018]                   if (is.na("multisession")) 
[16:14:28.018]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.018]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[16:14:28.018]                   future::plan(list(function (..., workers = availableCores(), 
[16:14:28.018]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:14:28.018]                     envir = parent.frame()) 
[16:14:28.018]                   {
[16:14:28.018]                     if (is.function(workers)) 
[16:14:28.018]                       workers <- workers()
[16:14:28.018]                     workers <- structure(as.integer(workers), 
[16:14:28.018]                       class = class(workers))
[16:14:28.018]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:14:28.018]                       workers >= 1)
[16:14:28.018]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:14:28.018]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:14:28.018]                     }
[16:14:28.018]                     future <- MultisessionFuture(..., workers = workers, 
[16:14:28.018]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:14:28.018]                       envir = envir)
[16:14:28.018]                     if (!future$lazy) 
[16:14:28.018]                       future <- run(future)
[16:14:28.018]                     invisible(future)
[16:14:28.018]                   }), .cleanup = FALSE, .init = FALSE)
[16:14:28.018]                 }
[16:14:28.018]             }
[16:14:28.018]         }
[16:14:28.018]     })
[16:14:28.018]     if (TRUE) {
[16:14:28.018]         base::sink(type = "output", split = FALSE)
[16:14:28.018]         if (TRUE) {
[16:14:28.018]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:28.018]         }
[16:14:28.018]         else {
[16:14:28.018]             ...future.result["stdout"] <- base::list(NULL)
[16:14:28.018]         }
[16:14:28.018]         base::close(...future.stdout)
[16:14:28.018]         ...future.stdout <- NULL
[16:14:28.018]     }
[16:14:28.018]     ...future.result$conditions <- ...future.conditions
[16:14:28.018]     ...future.result$finished <- base::Sys.time()
[16:14:28.018]     ...future.result
[16:14:28.018] }
[16:14:28.096] MultisessionFuture started
[16:14:28.096] result() for ClusterFuture ...
[16:14:28.097] receiveMessageFromWorker() for ClusterFuture ...
[16:14:28.097] - Validating connection of MultisessionFuture
[16:14:28.125] - received message: FutureResult
[16:14:28.125] - Received FutureResult
[16:14:28.125] - Erased future from FutureRegistry
[16:14:28.125] result() for ClusterFuture ...
[16:14:28.125] - result already collected: FutureResult
[16:14:28.125] result() for ClusterFuture ... done
[16:14:28.125] receiveMessageFromWorker() for ClusterFuture ... done
[16:14:28.125] result() for ClusterFuture ... done
[16:14:28.126] result() for ClusterFuture ...
[16:14:28.126] - result already collected: FutureResult
[16:14:28.126] result() for ClusterFuture ... done
[16:14:28.126] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:28.129] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:14:28.130] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:28.130] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:28.130] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:28.130] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:28.131] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:28.132] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:28.133] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:28.133] Option 'future.plan' = ‘multisession’
[16:14:28.133] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:28.134] Setting plan('default')
[16:14:28.134] plan(): Setting new future strategy stack:
[16:14:28.134] List of future strategies:
[16:14:28.134] 1. multisession:
[16:14:28.134]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.134]    - tweaked: FALSE
[16:14:28.134]    - call: plan("default", .init = FALSE)
[16:14:28.138] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:14:28.138] plan(): Setting new future strategy stack:
[16:14:28.138] List of future strategies:
[16:14:28.138] 1. multisession:
[16:14:28.138]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.138]    - tweaked: FALSE
[16:14:28.138]    - call: plan("default")
[16:14:28.139] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:28.139] multisession:
[16:14:28.139] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.139] - tweaked: FALSE
[16:14:28.139] - call: plan("default")
[16:14:28.142] getGlobalsAndPackages() ...
[16:14:28.142] Not searching for globals
[16:14:28.142] - globals: [0] <none>
[16:14:28.142] getGlobalsAndPackages() ... DONE
[16:14:28.143] [local output] makeClusterPSOCK() ...
[16:14:28.143] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:14:28.144] [local output] Base port: 11067
[16:14:28.144] [local output] Getting setup options for 2 cluster nodes ...
[16:14:28.144] [local output]  - Node 1 of 2 ...
[16:14:28.144] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:28.145] [local output] Rscript port: 11067

[16:14:28.145] [local output]  - Node 2 of 2 ...
[16:14:28.145] [local output] localMachine=TRUE => revtunnel=FALSE

[16:14:28.146] [local output] Rscript port: 11067

[16:14:28.146] [local output] Getting setup options for 2 cluster nodes ... done
[16:14:28.146] [local output]  - Parallel setup requested for some PSOCK nodes
[16:14:28.147] [local output] Setting up PSOCK nodes in parallel
[16:14:28.147] List of 36
[16:14:28.147]  $ worker          : chr "localhost"
[16:14:28.147]   ..- attr(*, "localhost")= logi TRUE
[16:14:28.147]  $ master          : chr "localhost"
[16:14:28.147]  $ port            : int 11067
[16:14:28.147]  $ connectTimeout  : num 120
[16:14:28.147]  $ timeout         : num 2592000
[16:14:28.147]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:14:28.147]  $ homogeneous     : logi TRUE
[16:14:28.147]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:14:28.147]  $ rscript_envs    : NULL
[16:14:28.147]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:14:28.147]  $ rscript_startup : NULL
[16:14:28.147]  $ rscript_sh      : chr "sh"
[16:14:28.147]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:28.147]  $ methods         : logi TRUE
[16:14:28.147]  $ socketOptions   : chr "no-delay"
[16:14:28.147]  $ useXDR          : logi FALSE
[16:14:28.147]  $ outfile         : chr "/dev/null"
[16:14:28.147]  $ renice          : int NA
[16:14:28.147]  $ rshcmd          : NULL
[16:14:28.147]  $ user            : chr(0) 
[16:14:28.147]  $ revtunnel       : logi FALSE
[16:14:28.147]  $ rshlogfile      : NULL
[16:14:28.147]  $ rshopts         : chr(0) 
[16:14:28.147]  $ rank            : int 1
[16:14:28.147]  $ manual          : logi FALSE
[16:14:28.147]  $ dryrun          : logi FALSE
[16:14:28.147]  $ quiet           : logi FALSE
[16:14:28.147]  $ setup_strategy  : chr "parallel"
[16:14:28.147]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:28.147]  $ pidfile         : chr "/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.1672619255e6a.pid"
[16:14:28.147]  $ rshcmd_label    : NULL
[16:14:28.147]  $ rsh_call        : NULL
[16:14:28.147]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:14:28.147]  $ localMachine    : logi TRUE
[16:14:28.147]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:14:28.147]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:14:28.147]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:14:28.147]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:14:28.147]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:14:28.147]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:14:28.147]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:14:28.147]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:14:28.147]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:14:28.147]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:14:28.147]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:14:28.147]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:14:28.147]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:14:28.147]  $ arguments       :List of 28
[16:14:28.147]   ..$ worker          : chr "localhost"
[16:14:28.147]   ..$ master          : NULL
[16:14:28.147]   ..$ port            : int 11067
[16:14:28.147]   ..$ connectTimeout  : num 120
[16:14:28.147]   ..$ timeout         : num 2592000
[16:14:28.147]   ..$ rscript         : NULL
[16:14:28.147]   ..$ homogeneous     : NULL
[16:14:28.147]   ..$ rscript_args    : NULL
[16:14:28.147]   ..$ rscript_envs    : NULL
[16:14:28.147]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:14:28.147]   ..$ rscript_startup : NULL
[16:14:28.147]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:14:28.147]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:14:28.147]   ..$ methods         : logi TRUE
[16:14:28.147]   ..$ socketOptions   : chr "no-delay"
[16:14:28.147]   ..$ useXDR          : logi FALSE
[16:14:28.147]   ..$ outfile         : chr "/dev/null"
[16:14:28.147]   ..$ renice          : int NA
[16:14:28.147]   ..$ rshcmd          : NULL
[16:14:28.147]   ..$ user            : NULL
[16:14:28.147]   ..$ revtunnel       : logi NA
[16:14:28.147]   ..$ rshlogfile      : NULL
[16:14:28.147]   ..$ rshopts         : NULL
[16:14:28.147]   ..$ rank            : int 1
[16:14:28.147]   ..$ manual          : logi FALSE
[16:14:28.147]   ..$ dryrun          : logi FALSE
[16:14:28.147]   ..$ quiet           : logi FALSE
[16:14:28.147]   ..$ setup_strategy  : chr "parallel"
[16:14:28.147]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:14:28.167] [local output] System call to launch all workers:
[16:14:28.167] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwvGCab/worker.rank=1.parallelly.parent=91942.1672619255e6a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11067 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:14:28.167] [local output] Starting PSOCK main server
[16:14:28.169] [local output] Workers launched
[16:14:28.169] [local output] Waiting for workers to connect back
[16:14:28.169]  - [local output] 0 workers out of 2 ready
[16:14:28.406]  - [local output] 0 workers out of 2 ready
[16:14:28.406]  - [local output] 1 workers out of 2 ready
[16:14:28.413]  - [local output] 1 workers out of 2 ready
[16:14:28.414]  - [local output] 2 workers out of 2 ready
[16:14:28.414] [local output] Launching of workers completed
[16:14:28.414] [local output] Collecting session information from workers
[16:14:28.415] [local output]  - Worker #1 of 2
[16:14:28.415] [local output]  - Worker #2 of 2
[16:14:28.415] [local output] makeClusterPSOCK() ... done
[16:14:28.427] Packages needed by the future expression (n = 0): <none>
[16:14:28.427] Packages needed by future strategies (n = 0): <none>
[16:14:28.428] {
[16:14:28.428]     {
[16:14:28.428]         {
[16:14:28.428]             ...future.startTime <- base::Sys.time()
[16:14:28.428]             {
[16:14:28.428]                 {
[16:14:28.428]                   {
[16:14:28.428]                     {
[16:14:28.428]                       base::local({
[16:14:28.428]                         has_future <- base::requireNamespace("future", 
[16:14:28.428]                           quietly = TRUE)
[16:14:28.428]                         if (has_future) {
[16:14:28.428]                           ns <- base::getNamespace("future")
[16:14:28.428]                           version <- ns[[".package"]][["version"]]
[16:14:28.428]                           if (is.null(version)) 
[16:14:28.428]                             version <- utils::packageVersion("future")
[16:14:28.428]                         }
[16:14:28.428]                         else {
[16:14:28.428]                           version <- NULL
[16:14:28.428]                         }
[16:14:28.428]                         if (!has_future || version < "1.8.0") {
[16:14:28.428]                           info <- base::c(r_version = base::gsub("R version ", 
[16:14:28.428]                             "", base::R.version$version.string), 
[16:14:28.428]                             platform = base::sprintf("%s (%s-bit)", 
[16:14:28.428]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:28.428]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:28.428]                               "release", "version")], collapse = " "), 
[16:14:28.428]                             hostname = base::Sys.info()[["nodename"]])
[16:14:28.428]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:14:28.428]                             info)
[16:14:28.428]                           info <- base::paste(info, collapse = "; ")
[16:14:28.428]                           if (!has_future) {
[16:14:28.428]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:28.428]                               info)
[16:14:28.428]                           }
[16:14:28.428]                           else {
[16:14:28.428]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:28.428]                               info, version)
[16:14:28.428]                           }
[16:14:28.428]                           base::stop(msg)
[16:14:28.428]                         }
[16:14:28.428]                       })
[16:14:28.428]                     }
[16:14:28.428]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:14:28.428]                     base::options(mc.cores = 1L)
[16:14:28.428]                   }
[16:14:28.428]                   options(future.plan = NULL)
[16:14:28.428]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.428]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:28.428]                 }
[16:14:28.428]                 ...future.workdir <- getwd()
[16:14:28.428]             }
[16:14:28.428]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:28.428]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:28.428]         }
[16:14:28.428]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:28.428]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:28.428]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:28.428]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:28.428]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:28.428]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:28.428]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:28.428]             base::names(...future.oldOptions))
[16:14:28.428]     }
[16:14:28.428]     if (FALSE) {
[16:14:28.428]     }
[16:14:28.428]     else {
[16:14:28.428]         if (TRUE) {
[16:14:28.428]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:28.428]                 open = "w")
[16:14:28.428]         }
[16:14:28.428]         else {
[16:14:28.428]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:28.428]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:28.428]         }
[16:14:28.428]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:28.428]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:28.428]             base::sink(type = "output", split = FALSE)
[16:14:28.428]             base::close(...future.stdout)
[16:14:28.428]         }, add = TRUE)
[16:14:28.428]     }
[16:14:28.428]     ...future.frame <- base::sys.nframe()
[16:14:28.428]     ...future.conditions <- base::list()
[16:14:28.428]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:28.428]     if (FALSE) {
[16:14:28.428]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:28.428]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:28.428]     }
[16:14:28.428]     ...future.result <- base::tryCatch({
[16:14:28.428]         base::withCallingHandlers({
[16:14:28.428]             ...future.value <- base::withVisible(base::local({
[16:14:28.428]                 ...future.makeSendCondition <- local({
[16:14:28.428]                   sendCondition <- NULL
[16:14:28.428]                   function(frame = 1L) {
[16:14:28.428]                     if (is.function(sendCondition)) 
[16:14:28.428]                       return(sendCondition)
[16:14:28.428]                     ns <- getNamespace("parallel")
[16:14:28.428]                     if (exists("sendData", mode = "function", 
[16:14:28.428]                       envir = ns)) {
[16:14:28.428]                       parallel_sendData <- get("sendData", mode = "function", 
[16:14:28.428]                         envir = ns)
[16:14:28.428]                       envir <- sys.frame(frame)
[16:14:28.428]                       master <- NULL
[16:14:28.428]                       while (!identical(envir, .GlobalEnv) && 
[16:14:28.428]                         !identical(envir, emptyenv())) {
[16:14:28.428]                         if (exists("master", mode = "list", envir = envir, 
[16:14:28.428]                           inherits = FALSE)) {
[16:14:28.428]                           master <- get("master", mode = "list", 
[16:14:28.428]                             envir = envir, inherits = FALSE)
[16:14:28.428]                           if (inherits(master, c("SOCKnode", 
[16:14:28.428]                             "SOCK0node"))) {
[16:14:28.428]                             sendCondition <<- function(cond) {
[16:14:28.428]                               data <- list(type = "VALUE", value = cond, 
[16:14:28.428]                                 success = TRUE)
[16:14:28.428]                               parallel_sendData(master, data)
[16:14:28.428]                             }
[16:14:28.428]                             return(sendCondition)
[16:14:28.428]                           }
[16:14:28.428]                         }
[16:14:28.428]                         frame <- frame + 1L
[16:14:28.428]                         envir <- sys.frame(frame)
[16:14:28.428]                       }
[16:14:28.428]                     }
[16:14:28.428]                     sendCondition <<- function(cond) NULL
[16:14:28.428]                   }
[16:14:28.428]                 })
[16:14:28.428]                 withCallingHandlers({
[16:14:28.428]                   NA
[16:14:28.428]                 }, immediateCondition = function(cond) {
[16:14:28.428]                   sendCondition <- ...future.makeSendCondition()
[16:14:28.428]                   sendCondition(cond)
[16:14:28.428]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.428]                   {
[16:14:28.428]                     inherits <- base::inherits
[16:14:28.428]                     invokeRestart <- base::invokeRestart
[16:14:28.428]                     is.null <- base::is.null
[16:14:28.428]                     muffled <- FALSE
[16:14:28.428]                     if (inherits(cond, "message")) {
[16:14:28.428]                       muffled <- grepl(pattern, "muffleMessage")
[16:14:28.428]                       if (muffled) 
[16:14:28.428]                         invokeRestart("muffleMessage")
[16:14:28.428]                     }
[16:14:28.428]                     else if (inherits(cond, "warning")) {
[16:14:28.428]                       muffled <- grepl(pattern, "muffleWarning")
[16:14:28.428]                       if (muffled) 
[16:14:28.428]                         invokeRestart("muffleWarning")
[16:14:28.428]                     }
[16:14:28.428]                     else if (inherits(cond, "condition")) {
[16:14:28.428]                       if (!is.null(pattern)) {
[16:14:28.428]                         computeRestarts <- base::computeRestarts
[16:14:28.428]                         grepl <- base::grepl
[16:14:28.428]                         restarts <- computeRestarts(cond)
[16:14:28.428]                         for (restart in restarts) {
[16:14:28.428]                           name <- restart$name
[16:14:28.428]                           if (is.null(name)) 
[16:14:28.428]                             next
[16:14:28.428]                           if (!grepl(pattern, name)) 
[16:14:28.428]                             next
[16:14:28.428]                           invokeRestart(restart)
[16:14:28.428]                           muffled <- TRUE
[16:14:28.428]                           break
[16:14:28.428]                         }
[16:14:28.428]                       }
[16:14:28.428]                     }
[16:14:28.428]                     invisible(muffled)
[16:14:28.428]                   }
[16:14:28.428]                   muffleCondition(cond)
[16:14:28.428]                 })
[16:14:28.428]             }))
[16:14:28.428]             future::FutureResult(value = ...future.value$value, 
[16:14:28.428]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.428]                   ...future.rng), globalenv = if (FALSE) 
[16:14:28.428]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:28.428]                     ...future.globalenv.names))
[16:14:28.428]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:28.428]         }, condition = base::local({
[16:14:28.428]             c <- base::c
[16:14:28.428]             inherits <- base::inherits
[16:14:28.428]             invokeRestart <- base::invokeRestart
[16:14:28.428]             length <- base::length
[16:14:28.428]             list <- base::list
[16:14:28.428]             seq.int <- base::seq.int
[16:14:28.428]             signalCondition <- base::signalCondition
[16:14:28.428]             sys.calls <- base::sys.calls
[16:14:28.428]             `[[` <- base::`[[`
[16:14:28.428]             `+` <- base::`+`
[16:14:28.428]             `<<-` <- base::`<<-`
[16:14:28.428]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:28.428]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:28.428]                   3L)]
[16:14:28.428]             }
[16:14:28.428]             function(cond) {
[16:14:28.428]                 is_error <- inherits(cond, "error")
[16:14:28.428]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:28.428]                   NULL)
[16:14:28.428]                 if (is_error) {
[16:14:28.428]                   sessionInformation <- function() {
[16:14:28.428]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:28.428]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:28.428]                       search = base::search(), system = base::Sys.info())
[16:14:28.428]                   }
[16:14:28.428]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.428]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:28.428]                     cond$call), session = sessionInformation(), 
[16:14:28.428]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:28.428]                   signalCondition(cond)
[16:14:28.428]                 }
[16:14:28.428]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:28.428]                 "immediateCondition"))) {
[16:14:28.428]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:28.428]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.428]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:28.428]                   if (TRUE && !signal) {
[16:14:28.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.428]                     {
[16:14:28.428]                       inherits <- base::inherits
[16:14:28.428]                       invokeRestart <- base::invokeRestart
[16:14:28.428]                       is.null <- base::is.null
[16:14:28.428]                       muffled <- FALSE
[16:14:28.428]                       if (inherits(cond, "message")) {
[16:14:28.428]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.428]                         if (muffled) 
[16:14:28.428]                           invokeRestart("muffleMessage")
[16:14:28.428]                       }
[16:14:28.428]                       else if (inherits(cond, "warning")) {
[16:14:28.428]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.428]                         if (muffled) 
[16:14:28.428]                           invokeRestart("muffleWarning")
[16:14:28.428]                       }
[16:14:28.428]                       else if (inherits(cond, "condition")) {
[16:14:28.428]                         if (!is.null(pattern)) {
[16:14:28.428]                           computeRestarts <- base::computeRestarts
[16:14:28.428]                           grepl <- base::grepl
[16:14:28.428]                           restarts <- computeRestarts(cond)
[16:14:28.428]                           for (restart in restarts) {
[16:14:28.428]                             name <- restart$name
[16:14:28.428]                             if (is.null(name)) 
[16:14:28.428]                               next
[16:14:28.428]                             if (!grepl(pattern, name)) 
[16:14:28.428]                               next
[16:14:28.428]                             invokeRestart(restart)
[16:14:28.428]                             muffled <- TRUE
[16:14:28.428]                             break
[16:14:28.428]                           }
[16:14:28.428]                         }
[16:14:28.428]                       }
[16:14:28.428]                       invisible(muffled)
[16:14:28.428]                     }
[16:14:28.428]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.428]                   }
[16:14:28.428]                 }
[16:14:28.428]                 else {
[16:14:28.428]                   if (TRUE) {
[16:14:28.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.428]                     {
[16:14:28.428]                       inherits <- base::inherits
[16:14:28.428]                       invokeRestart <- base::invokeRestart
[16:14:28.428]                       is.null <- base::is.null
[16:14:28.428]                       muffled <- FALSE
[16:14:28.428]                       if (inherits(cond, "message")) {
[16:14:28.428]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.428]                         if (muffled) 
[16:14:28.428]                           invokeRestart("muffleMessage")
[16:14:28.428]                       }
[16:14:28.428]                       else if (inherits(cond, "warning")) {
[16:14:28.428]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.428]                         if (muffled) 
[16:14:28.428]                           invokeRestart("muffleWarning")
[16:14:28.428]                       }
[16:14:28.428]                       else if (inherits(cond, "condition")) {
[16:14:28.428]                         if (!is.null(pattern)) {
[16:14:28.428]                           computeRestarts <- base::computeRestarts
[16:14:28.428]                           grepl <- base::grepl
[16:14:28.428]                           restarts <- computeRestarts(cond)
[16:14:28.428]                           for (restart in restarts) {
[16:14:28.428]                             name <- restart$name
[16:14:28.428]                             if (is.null(name)) 
[16:14:28.428]                               next
[16:14:28.428]                             if (!grepl(pattern, name)) 
[16:14:28.428]                               next
[16:14:28.428]                             invokeRestart(restart)
[16:14:28.428]                             muffled <- TRUE
[16:14:28.428]                             break
[16:14:28.428]                           }
[16:14:28.428]                         }
[16:14:28.428]                       }
[16:14:28.428]                       invisible(muffled)
[16:14:28.428]                     }
[16:14:28.428]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.428]                   }
[16:14:28.428]                 }
[16:14:28.428]             }
[16:14:28.428]         }))
[16:14:28.428]     }, error = function(ex) {
[16:14:28.428]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:28.428]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.428]                 ...future.rng), started = ...future.startTime, 
[16:14:28.428]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:28.428]             version = "1.8"), class = "FutureResult")
[16:14:28.428]     }, finally = {
[16:14:28.428]         if (!identical(...future.workdir, getwd())) 
[16:14:28.428]             setwd(...future.workdir)
[16:14:28.428]         {
[16:14:28.428]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:28.428]                 ...future.oldOptions$nwarnings <- NULL
[16:14:28.428]             }
[16:14:28.428]             base::options(...future.oldOptions)
[16:14:28.428]             if (.Platform$OS.type == "windows") {
[16:14:28.428]                 old_names <- names(...future.oldEnvVars)
[16:14:28.428]                 envs <- base::Sys.getenv()
[16:14:28.428]                 names <- names(envs)
[16:14:28.428]                 common <- intersect(names, old_names)
[16:14:28.428]                 added <- setdiff(names, old_names)
[16:14:28.428]                 removed <- setdiff(old_names, names)
[16:14:28.428]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:28.428]                   envs[common]]
[16:14:28.428]                 NAMES <- toupper(changed)
[16:14:28.428]                 args <- list()
[16:14:28.428]                 for (kk in seq_along(NAMES)) {
[16:14:28.428]                   name <- changed[[kk]]
[16:14:28.428]                   NAME <- NAMES[[kk]]
[16:14:28.428]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.428]                     next
[16:14:28.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.428]                 }
[16:14:28.428]                 NAMES <- toupper(added)
[16:14:28.428]                 for (kk in seq_along(NAMES)) {
[16:14:28.428]                   name <- added[[kk]]
[16:14:28.428]                   NAME <- NAMES[[kk]]
[16:14:28.428]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.428]                     next
[16:14:28.428]                   args[[name]] <- ""
[16:14:28.428]                 }
[16:14:28.428]                 NAMES <- toupper(removed)
[16:14:28.428]                 for (kk in seq_along(NAMES)) {
[16:14:28.428]                   name <- removed[[kk]]
[16:14:28.428]                   NAME <- NAMES[[kk]]
[16:14:28.428]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.428]                     next
[16:14:28.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.428]                 }
[16:14:28.428]                 if (length(args) > 0) 
[16:14:28.428]                   base::do.call(base::Sys.setenv, args = args)
[16:14:28.428]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:28.428]             }
[16:14:28.428]             else {
[16:14:28.428]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:28.428]             }
[16:14:28.428]             {
[16:14:28.428]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:28.428]                   0L) {
[16:14:28.428]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:28.428]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:28.428]                   base::options(opts)
[16:14:28.428]                 }
[16:14:28.428]                 {
[16:14:28.428]                   {
[16:14:28.428]                     base::options(mc.cores = ...future.mc.cores.old)
[16:14:28.428]                     NULL
[16:14:28.428]                   }
[16:14:28.428]                   options(future.plan = "multisession")
[16:14:28.428]                   if (is.na("")) 
[16:14:28.428]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.428]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:14:28.428]                   future::plan(list(function (..., workers = availableCores(), 
[16:14:28.428]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:14:28.428]                     envir = parent.frame()) 
[16:14:28.428]                   {
[16:14:28.428]                     if (is.function(workers)) 
[16:14:28.428]                       workers <- workers()
[16:14:28.428]                     workers <- structure(as.integer(workers), 
[16:14:28.428]                       class = class(workers))
[16:14:28.428]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:14:28.428]                       workers >= 1)
[16:14:28.428]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:14:28.428]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:14:28.428]                     }
[16:14:28.428]                     future <- MultisessionFuture(..., workers = workers, 
[16:14:28.428]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:14:28.428]                       envir = envir)
[16:14:28.428]                     if (!future$lazy) 
[16:14:28.428]                       future <- run(future)
[16:14:28.428]                     invisible(future)
[16:14:28.428]                   }), .cleanup = FALSE, .init = FALSE)
[16:14:28.428]                 }
[16:14:28.428]             }
[16:14:28.428]         }
[16:14:28.428]     })
[16:14:28.428]     if (TRUE) {
[16:14:28.428]         base::sink(type = "output", split = FALSE)
[16:14:28.428]         if (TRUE) {
[16:14:28.428]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:28.428]         }
[16:14:28.428]         else {
[16:14:28.428]             ...future.result["stdout"] <- base::list(NULL)
[16:14:28.428]         }
[16:14:28.428]         base::close(...future.stdout)
[16:14:28.428]         ...future.stdout <- NULL
[16:14:28.428]     }
[16:14:28.428]     ...future.result$conditions <- ...future.conditions
[16:14:28.428]     ...future.result$finished <- base::Sys.time()
[16:14:28.428]     ...future.result
[16:14:28.428] }
[16:14:28.498] MultisessionFuture started
[16:14:28.498] result() for ClusterFuture ...
[16:14:28.499] receiveMessageFromWorker() for ClusterFuture ...
[16:14:28.499] - Validating connection of MultisessionFuture
[16:14:28.530] - received message: FutureResult
[16:14:28.530] - Received FutureResult
[16:14:28.530] - Erased future from FutureRegistry
[16:14:28.530] result() for ClusterFuture ...
[16:14:28.530] - result already collected: FutureResult
[16:14:28.531] result() for ClusterFuture ... done
[16:14:28.531] receiveMessageFromWorker() for ClusterFuture ... done
[16:14:28.531] result() for ClusterFuture ... done
[16:14:28.531] result() for ClusterFuture ...
[16:14:28.531] - result already collected: FutureResult
[16:14:28.531] result() for ClusterFuture ... done
[16:14:28.531] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:28.534] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[16:14:28.535] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:28.536] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:28.536] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:28.537] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:28.537] R_FUTURE_PLAN=‘multisession’
[16:14:28.537] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[16:14:28.537] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:28.537] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:28.537] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:28.537] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:28.537] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:28.537] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:28.538] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:28.539] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:28.539] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:28.539] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:28.539] Option 'future.plan' = ‘multisession’
[16:14:28.539] R command-line argument: -p 1
[16:14:28.539]  => 'future.plan' already set.
[16:14:28.539] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:28.539] Setting plan('default')
[16:14:28.540] plan(): Setting new future strategy stack:
[16:14:28.540] List of future strategies:
[16:14:28.540] 1. multisession:
[16:14:28.540]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.540]    - tweaked: FALSE
[16:14:28.540]    - call: plan("default", .init = FALSE)
[16:14:28.544] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:14:28.545] plan(): Setting new future strategy stack:
[16:14:28.545] List of future strategies:
[16:14:28.545] 1. multisession:
[16:14:28.545]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.545]    - tweaked: FALSE
[16:14:28.545]    - call: plan("default")
[16:14:28.546] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:28.546] multisession:
[16:14:28.546] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.546] - tweaked: FALSE
[16:14:28.546] - call: plan("default")
[16:14:28.550] getGlobalsAndPackages() ...
[16:14:28.550] Not searching for globals
[16:14:28.550] - globals: [0] <none>
[16:14:28.550] getGlobalsAndPackages() ... DONE
[16:14:28.551] Packages needed by the future expression (n = 0): <none>
[16:14:28.551] Packages needed by future strategies (n = 0): <none>
[16:14:28.551] {
[16:14:28.551]     {
[16:14:28.551]         {
[16:14:28.551]             ...future.startTime <- base::Sys.time()
[16:14:28.551]             {
[16:14:28.551]                 {
[16:14:28.551]                   {
[16:14:28.551]                     base::local({
[16:14:28.551]                       has_future <- base::requireNamespace("future", 
[16:14:28.551]                         quietly = TRUE)
[16:14:28.551]                       if (has_future) {
[16:14:28.551]                         ns <- base::getNamespace("future")
[16:14:28.551]                         version <- ns[[".package"]][["version"]]
[16:14:28.551]                         if (is.null(version)) 
[16:14:28.551]                           version <- utils::packageVersion("future")
[16:14:28.551]                       }
[16:14:28.551]                       else {
[16:14:28.551]                         version <- NULL
[16:14:28.551]                       }
[16:14:28.551]                       if (!has_future || version < "1.8.0") {
[16:14:28.551]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:28.551]                           "", base::R.version$version.string), 
[16:14:28.551]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:28.551]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:28.551]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:28.551]                             "release", "version")], collapse = " "), 
[16:14:28.551]                           hostname = base::Sys.info()[["nodename"]])
[16:14:28.551]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:28.551]                           info)
[16:14:28.551]                         info <- base::paste(info, collapse = "; ")
[16:14:28.551]                         if (!has_future) {
[16:14:28.551]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:28.551]                             info)
[16:14:28.551]                         }
[16:14:28.551]                         else {
[16:14:28.551]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:28.551]                             info, version)
[16:14:28.551]                         }
[16:14:28.551]                         base::stop(msg)
[16:14:28.551]                       }
[16:14:28.551]                     })
[16:14:28.551]                   }
[16:14:28.551]                   options(future.plan = NULL)
[16:14:28.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:28.551]                 }
[16:14:28.551]                 ...future.workdir <- getwd()
[16:14:28.551]             }
[16:14:28.551]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:28.551]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:28.551]         }
[16:14:28.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:28.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:28.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:28.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:28.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:28.551]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:28.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:28.551]             base::names(...future.oldOptions))
[16:14:28.551]     }
[16:14:28.551]     if (FALSE) {
[16:14:28.551]     }
[16:14:28.551]     else {
[16:14:28.551]         if (TRUE) {
[16:14:28.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:28.551]                 open = "w")
[16:14:28.551]         }
[16:14:28.551]         else {
[16:14:28.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:28.551]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:28.551]         }
[16:14:28.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:28.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:28.551]             base::sink(type = "output", split = FALSE)
[16:14:28.551]             base::close(...future.stdout)
[16:14:28.551]         }, add = TRUE)
[16:14:28.551]     }
[16:14:28.551]     ...future.frame <- base::sys.nframe()
[16:14:28.551]     ...future.conditions <- base::list()
[16:14:28.551]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:28.551]     if (FALSE) {
[16:14:28.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:28.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:28.551]     }
[16:14:28.551]     ...future.result <- base::tryCatch({
[16:14:28.551]         base::withCallingHandlers({
[16:14:28.551]             ...future.value <- base::withVisible(base::local(NA))
[16:14:28.551]             future::FutureResult(value = ...future.value$value, 
[16:14:28.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.551]                   ...future.rng), globalenv = if (FALSE) 
[16:14:28.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:28.551]                     ...future.globalenv.names))
[16:14:28.551]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:28.551]         }, condition = base::local({
[16:14:28.551]             c <- base::c
[16:14:28.551]             inherits <- base::inherits
[16:14:28.551]             invokeRestart <- base::invokeRestart
[16:14:28.551]             length <- base::length
[16:14:28.551]             list <- base::list
[16:14:28.551]             seq.int <- base::seq.int
[16:14:28.551]             signalCondition <- base::signalCondition
[16:14:28.551]             sys.calls <- base::sys.calls
[16:14:28.551]             `[[` <- base::`[[`
[16:14:28.551]             `+` <- base::`+`
[16:14:28.551]             `<<-` <- base::`<<-`
[16:14:28.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:28.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:28.551]                   3L)]
[16:14:28.551]             }
[16:14:28.551]             function(cond) {
[16:14:28.551]                 is_error <- inherits(cond, "error")
[16:14:28.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:28.551]                   NULL)
[16:14:28.551]                 if (is_error) {
[16:14:28.551]                   sessionInformation <- function() {
[16:14:28.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:28.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:28.551]                       search = base::search(), system = base::Sys.info())
[16:14:28.551]                   }
[16:14:28.551]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:28.551]                     cond$call), session = sessionInformation(), 
[16:14:28.551]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:28.551]                   signalCondition(cond)
[16:14:28.551]                 }
[16:14:28.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:28.551]                 "immediateCondition"))) {
[16:14:28.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:28.551]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:28.551]                   if (TRUE && !signal) {
[16:14:28.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.551]                     {
[16:14:28.551]                       inherits <- base::inherits
[16:14:28.551]                       invokeRestart <- base::invokeRestart
[16:14:28.551]                       is.null <- base::is.null
[16:14:28.551]                       muffled <- FALSE
[16:14:28.551]                       if (inherits(cond, "message")) {
[16:14:28.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.551]                         if (muffled) 
[16:14:28.551]                           invokeRestart("muffleMessage")
[16:14:28.551]                       }
[16:14:28.551]                       else if (inherits(cond, "warning")) {
[16:14:28.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.551]                         if (muffled) 
[16:14:28.551]                           invokeRestart("muffleWarning")
[16:14:28.551]                       }
[16:14:28.551]                       else if (inherits(cond, "condition")) {
[16:14:28.551]                         if (!is.null(pattern)) {
[16:14:28.551]                           computeRestarts <- base::computeRestarts
[16:14:28.551]                           grepl <- base::grepl
[16:14:28.551]                           restarts <- computeRestarts(cond)
[16:14:28.551]                           for (restart in restarts) {
[16:14:28.551]                             name <- restart$name
[16:14:28.551]                             if (is.null(name)) 
[16:14:28.551]                               next
[16:14:28.551]                             if (!grepl(pattern, name)) 
[16:14:28.551]                               next
[16:14:28.551]                             invokeRestart(restart)
[16:14:28.551]                             muffled <- TRUE
[16:14:28.551]                             break
[16:14:28.551]                           }
[16:14:28.551]                         }
[16:14:28.551]                       }
[16:14:28.551]                       invisible(muffled)
[16:14:28.551]                     }
[16:14:28.551]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.551]                   }
[16:14:28.551]                 }
[16:14:28.551]                 else {
[16:14:28.551]                   if (TRUE) {
[16:14:28.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.551]                     {
[16:14:28.551]                       inherits <- base::inherits
[16:14:28.551]                       invokeRestart <- base::invokeRestart
[16:14:28.551]                       is.null <- base::is.null
[16:14:28.551]                       muffled <- FALSE
[16:14:28.551]                       if (inherits(cond, "message")) {
[16:14:28.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.551]                         if (muffled) 
[16:14:28.551]                           invokeRestart("muffleMessage")
[16:14:28.551]                       }
[16:14:28.551]                       else if (inherits(cond, "warning")) {
[16:14:28.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.551]                         if (muffled) 
[16:14:28.551]                           invokeRestart("muffleWarning")
[16:14:28.551]                       }
[16:14:28.551]                       else if (inherits(cond, "condition")) {
[16:14:28.551]                         if (!is.null(pattern)) {
[16:14:28.551]                           computeRestarts <- base::computeRestarts
[16:14:28.551]                           grepl <- base::grepl
[16:14:28.551]                           restarts <- computeRestarts(cond)
[16:14:28.551]                           for (restart in restarts) {
[16:14:28.551]                             name <- restart$name
[16:14:28.551]                             if (is.null(name)) 
[16:14:28.551]                               next
[16:14:28.551]                             if (!grepl(pattern, name)) 
[16:14:28.551]                               next
[16:14:28.551]                             invokeRestart(restart)
[16:14:28.551]                             muffled <- TRUE
[16:14:28.551]                             break
[16:14:28.551]                           }
[16:14:28.551]                         }
[16:14:28.551]                       }
[16:14:28.551]                       invisible(muffled)
[16:14:28.551]                     }
[16:14:28.551]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.551]                   }
[16:14:28.551]                 }
[16:14:28.551]             }
[16:14:28.551]         }))
[16:14:28.551]     }, error = function(ex) {
[16:14:28.551]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:28.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.551]                 ...future.rng), started = ...future.startTime, 
[16:14:28.551]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:28.551]             version = "1.8"), class = "FutureResult")
[16:14:28.551]     }, finally = {
[16:14:28.551]         if (!identical(...future.workdir, getwd())) 
[16:14:28.551]             setwd(...future.workdir)
[16:14:28.551]         {
[16:14:28.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:28.551]                 ...future.oldOptions$nwarnings <- NULL
[16:14:28.551]             }
[16:14:28.551]             base::options(...future.oldOptions)
[16:14:28.551]             if (.Platform$OS.type == "windows") {
[16:14:28.551]                 old_names <- names(...future.oldEnvVars)
[16:14:28.551]                 envs <- base::Sys.getenv()
[16:14:28.551]                 names <- names(envs)
[16:14:28.551]                 common <- intersect(names, old_names)
[16:14:28.551]                 added <- setdiff(names, old_names)
[16:14:28.551]                 removed <- setdiff(old_names, names)
[16:14:28.551]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:28.551]                   envs[common]]
[16:14:28.551]                 NAMES <- toupper(changed)
[16:14:28.551]                 args <- list()
[16:14:28.551]                 for (kk in seq_along(NAMES)) {
[16:14:28.551]                   name <- changed[[kk]]
[16:14:28.551]                   NAME <- NAMES[[kk]]
[16:14:28.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.551]                     next
[16:14:28.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.551]                 }
[16:14:28.551]                 NAMES <- toupper(added)
[16:14:28.551]                 for (kk in seq_along(NAMES)) {
[16:14:28.551]                   name <- added[[kk]]
[16:14:28.551]                   NAME <- NAMES[[kk]]
[16:14:28.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.551]                     next
[16:14:28.551]                   args[[name]] <- ""
[16:14:28.551]                 }
[16:14:28.551]                 NAMES <- toupper(removed)
[16:14:28.551]                 for (kk in seq_along(NAMES)) {
[16:14:28.551]                   name <- removed[[kk]]
[16:14:28.551]                   NAME <- NAMES[[kk]]
[16:14:28.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.551]                     next
[16:14:28.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.551]                 }
[16:14:28.551]                 if (length(args) > 0) 
[16:14:28.551]                   base::do.call(base::Sys.setenv, args = args)
[16:14:28.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:28.551]             }
[16:14:28.551]             else {
[16:14:28.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:28.551]             }
[16:14:28.551]             {
[16:14:28.551]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:28.551]                   0L) {
[16:14:28.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:28.551]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:28.551]                   base::options(opts)
[16:14:28.551]                 }
[16:14:28.551]                 {
[16:14:28.551]                   {
[16:14:28.551]                     NULL
[16:14:28.551]                     RNGkind("Mersenne-Twister")
[16:14:28.551]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:28.551]                       inherits = FALSE)
[16:14:28.551]                   }
[16:14:28.551]                   options(future.plan = "multisession")
[16:14:28.551]                   if (is.na("multisession")) 
[16:14:28.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.551]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[16:14:28.551]                   future::plan(list(function (..., workers = availableCores(), 
[16:14:28.551]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:14:28.551]                     envir = parent.frame()) 
[16:14:28.551]                   {
[16:14:28.551]                     if (is.function(workers)) 
[16:14:28.551]                       workers <- workers()
[16:14:28.551]                     workers <- structure(as.integer(workers), 
[16:14:28.551]                       class = class(workers))
[16:14:28.551]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:14:28.551]                       workers >= 1)
[16:14:28.551]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:14:28.551]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:14:28.551]                     }
[16:14:28.551]                     future <- MultisessionFuture(..., workers = workers, 
[16:14:28.551]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:14:28.551]                       envir = envir)
[16:14:28.551]                     if (!future$lazy) 
[16:14:28.551]                       future <- run(future)
[16:14:28.551]                     invisible(future)
[16:14:28.551]                   }), .cleanup = FALSE, .init = FALSE)
[16:14:28.551]                 }
[16:14:28.551]             }
[16:14:28.551]         }
[16:14:28.551]     })
[16:14:28.551]     if (TRUE) {
[16:14:28.551]         base::sink(type = "output", split = FALSE)
[16:14:28.551]         if (TRUE) {
[16:14:28.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:28.551]         }
[16:14:28.551]         else {
[16:14:28.551]             ...future.result["stdout"] <- base::list(NULL)
[16:14:28.551]         }
[16:14:28.551]         base::close(...future.stdout)
[16:14:28.551]         ...future.stdout <- NULL
[16:14:28.551]     }
[16:14:28.551]     ...future.result$conditions <- ...future.conditions
[16:14:28.551]     ...future.result$finished <- base::Sys.time()
[16:14:28.551]     ...future.result
[16:14:28.551] }
[16:14:28.553] plan(): Setting new future strategy stack:
[16:14:28.554] List of future strategies:
[16:14:28.554] 1. sequential:
[16:14:28.554]    - args: function (..., envir = parent.frame())
[16:14:28.554]    - tweaked: FALSE
[16:14:28.554]    - call: NULL
[16:14:28.554] plan(): nbrOfWorkers() = 1
[16:14:28.555] plan(): Setting new future strategy stack:
[16:14:28.555] List of future strategies:
[16:14:28.555] 1. multisession:
[16:14:28.555]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.555]    - tweaked: FALSE
[16:14:28.555]    - call: plan("default")
[16:14:28.559] plan(): nbrOfWorkers() = 1
[16:14:28.559] SequentialFuture started (and completed)
[16:14:28.560] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:28.563] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[16:14:28.564] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:28.564] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:28.564] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:28.565] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:28.566] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:28.567] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:28.567] Option 'future.plan' = ‘multisession’
[16:14:28.568] R command-line argument: -p 1
[16:14:28.568]  => 'future.plan' already set.
[16:14:28.568] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:28.568] Setting plan('default')
[16:14:28.568] plan(): Setting new future strategy stack:
[16:14:28.568] List of future strategies:
[16:14:28.568] 1. multisession:
[16:14:28.568]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.568]    - tweaked: FALSE
[16:14:28.568]    - call: plan("default", .init = FALSE)
[16:14:28.571] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:14:28.572] plan(): Setting new future strategy stack:
[16:14:28.572] List of future strategies:
[16:14:28.572] 1. multisession:
[16:14:28.572]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.572]    - tweaked: FALSE
[16:14:28.572]    - call: plan("default")
[16:14:28.572] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:28.573] multisession:
[16:14:28.573] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.573] - tweaked: FALSE
[16:14:28.573] - call: plan("default")
[16:14:28.576] getGlobalsAndPackages() ...
[16:14:28.576] Not searching for globals
[16:14:28.576] - globals: [0] <none>
[16:14:28.576] getGlobalsAndPackages() ... DONE
[16:14:28.576] Packages needed by the future expression (n = 0): <none>
[16:14:28.576] Packages needed by future strategies (n = 0): <none>
[16:14:28.577] {
[16:14:28.577]     {
[16:14:28.577]         {
[16:14:28.577]             ...future.startTime <- base::Sys.time()
[16:14:28.577]             {
[16:14:28.577]                 {
[16:14:28.577]                   {
[16:14:28.577]                     base::local({
[16:14:28.577]                       has_future <- base::requireNamespace("future", 
[16:14:28.577]                         quietly = TRUE)
[16:14:28.577]                       if (has_future) {
[16:14:28.577]                         ns <- base::getNamespace("future")
[16:14:28.577]                         version <- ns[[".package"]][["version"]]
[16:14:28.577]                         if (is.null(version)) 
[16:14:28.577]                           version <- utils::packageVersion("future")
[16:14:28.577]                       }
[16:14:28.577]                       else {
[16:14:28.577]                         version <- NULL
[16:14:28.577]                       }
[16:14:28.577]                       if (!has_future || version < "1.8.0") {
[16:14:28.577]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:28.577]                           "", base::R.version$version.string), 
[16:14:28.577]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:28.577]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:28.577]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:28.577]                             "release", "version")], collapse = " "), 
[16:14:28.577]                           hostname = base::Sys.info()[["nodename"]])
[16:14:28.577]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:28.577]                           info)
[16:14:28.577]                         info <- base::paste(info, collapse = "; ")
[16:14:28.577]                         if (!has_future) {
[16:14:28.577]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:28.577]                             info)
[16:14:28.577]                         }
[16:14:28.577]                         else {
[16:14:28.577]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:28.577]                             info, version)
[16:14:28.577]                         }
[16:14:28.577]                         base::stop(msg)
[16:14:28.577]                       }
[16:14:28.577]                     })
[16:14:28.577]                   }
[16:14:28.577]                   options(future.plan = NULL)
[16:14:28.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:28.577]                 }
[16:14:28.577]                 ...future.workdir <- getwd()
[16:14:28.577]             }
[16:14:28.577]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:28.577]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:28.577]         }
[16:14:28.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:28.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:28.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:28.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:28.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:28.577]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:28.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:28.577]             base::names(...future.oldOptions))
[16:14:28.577]     }
[16:14:28.577]     if (FALSE) {
[16:14:28.577]     }
[16:14:28.577]     else {
[16:14:28.577]         if (TRUE) {
[16:14:28.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:28.577]                 open = "w")
[16:14:28.577]         }
[16:14:28.577]         else {
[16:14:28.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:28.577]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:28.577]         }
[16:14:28.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:28.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:28.577]             base::sink(type = "output", split = FALSE)
[16:14:28.577]             base::close(...future.stdout)
[16:14:28.577]         }, add = TRUE)
[16:14:28.577]     }
[16:14:28.577]     ...future.frame <- base::sys.nframe()
[16:14:28.577]     ...future.conditions <- base::list()
[16:14:28.577]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:28.577]     if (FALSE) {
[16:14:28.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:28.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:28.577]     }
[16:14:28.577]     ...future.result <- base::tryCatch({
[16:14:28.577]         base::withCallingHandlers({
[16:14:28.577]             ...future.value <- base::withVisible(base::local(NA))
[16:14:28.577]             future::FutureResult(value = ...future.value$value, 
[16:14:28.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.577]                   ...future.rng), globalenv = if (FALSE) 
[16:14:28.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:28.577]                     ...future.globalenv.names))
[16:14:28.577]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:28.577]         }, condition = base::local({
[16:14:28.577]             c <- base::c
[16:14:28.577]             inherits <- base::inherits
[16:14:28.577]             invokeRestart <- base::invokeRestart
[16:14:28.577]             length <- base::length
[16:14:28.577]             list <- base::list
[16:14:28.577]             seq.int <- base::seq.int
[16:14:28.577]             signalCondition <- base::signalCondition
[16:14:28.577]             sys.calls <- base::sys.calls
[16:14:28.577]             `[[` <- base::`[[`
[16:14:28.577]             `+` <- base::`+`
[16:14:28.577]             `<<-` <- base::`<<-`
[16:14:28.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:28.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:28.577]                   3L)]
[16:14:28.577]             }
[16:14:28.577]             function(cond) {
[16:14:28.577]                 is_error <- inherits(cond, "error")
[16:14:28.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:28.577]                   NULL)
[16:14:28.577]                 if (is_error) {
[16:14:28.577]                   sessionInformation <- function() {
[16:14:28.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:28.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:28.577]                       search = base::search(), system = base::Sys.info())
[16:14:28.577]                   }
[16:14:28.577]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:28.577]                     cond$call), session = sessionInformation(), 
[16:14:28.577]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:28.577]                   signalCondition(cond)
[16:14:28.577]                 }
[16:14:28.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:28.577]                 "immediateCondition"))) {
[16:14:28.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:28.577]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:28.577]                   if (TRUE && !signal) {
[16:14:28.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.577]                     {
[16:14:28.577]                       inherits <- base::inherits
[16:14:28.577]                       invokeRestart <- base::invokeRestart
[16:14:28.577]                       is.null <- base::is.null
[16:14:28.577]                       muffled <- FALSE
[16:14:28.577]                       if (inherits(cond, "message")) {
[16:14:28.577]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.577]                         if (muffled) 
[16:14:28.577]                           invokeRestart("muffleMessage")
[16:14:28.577]                       }
[16:14:28.577]                       else if (inherits(cond, "warning")) {
[16:14:28.577]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.577]                         if (muffled) 
[16:14:28.577]                           invokeRestart("muffleWarning")
[16:14:28.577]                       }
[16:14:28.577]                       else if (inherits(cond, "condition")) {
[16:14:28.577]                         if (!is.null(pattern)) {
[16:14:28.577]                           computeRestarts <- base::computeRestarts
[16:14:28.577]                           grepl <- base::grepl
[16:14:28.577]                           restarts <- computeRestarts(cond)
[16:14:28.577]                           for (restart in restarts) {
[16:14:28.577]                             name <- restart$name
[16:14:28.577]                             if (is.null(name)) 
[16:14:28.577]                               next
[16:14:28.577]                             if (!grepl(pattern, name)) 
[16:14:28.577]                               next
[16:14:28.577]                             invokeRestart(restart)
[16:14:28.577]                             muffled <- TRUE
[16:14:28.577]                             break
[16:14:28.577]                           }
[16:14:28.577]                         }
[16:14:28.577]                       }
[16:14:28.577]                       invisible(muffled)
[16:14:28.577]                     }
[16:14:28.577]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.577]                   }
[16:14:28.577]                 }
[16:14:28.577]                 else {
[16:14:28.577]                   if (TRUE) {
[16:14:28.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.577]                     {
[16:14:28.577]                       inherits <- base::inherits
[16:14:28.577]                       invokeRestart <- base::invokeRestart
[16:14:28.577]                       is.null <- base::is.null
[16:14:28.577]                       muffled <- FALSE
[16:14:28.577]                       if (inherits(cond, "message")) {
[16:14:28.577]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.577]                         if (muffled) 
[16:14:28.577]                           invokeRestart("muffleMessage")
[16:14:28.577]                       }
[16:14:28.577]                       else if (inherits(cond, "warning")) {
[16:14:28.577]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.577]                         if (muffled) 
[16:14:28.577]                           invokeRestart("muffleWarning")
[16:14:28.577]                       }
[16:14:28.577]                       else if (inherits(cond, "condition")) {
[16:14:28.577]                         if (!is.null(pattern)) {
[16:14:28.577]                           computeRestarts <- base::computeRestarts
[16:14:28.577]                           grepl <- base::grepl
[16:14:28.577]                           restarts <- computeRestarts(cond)
[16:14:28.577]                           for (restart in restarts) {
[16:14:28.577]                             name <- restart$name
[16:14:28.577]                             if (is.null(name)) 
[16:14:28.577]                               next
[16:14:28.577]                             if (!grepl(pattern, name)) 
[16:14:28.577]                               next
[16:14:28.577]                             invokeRestart(restart)
[16:14:28.577]                             muffled <- TRUE
[16:14:28.577]                             break
[16:14:28.577]                           }
[16:14:28.577]                         }
[16:14:28.577]                       }
[16:14:28.577]                       invisible(muffled)
[16:14:28.577]                     }
[16:14:28.577]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.577]                   }
[16:14:28.577]                 }
[16:14:28.577]             }
[16:14:28.577]         }))
[16:14:28.577]     }, error = function(ex) {
[16:14:28.577]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:28.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.577]                 ...future.rng), started = ...future.startTime, 
[16:14:28.577]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:28.577]             version = "1.8"), class = "FutureResult")
[16:14:28.577]     }, finally = {
[16:14:28.577]         if (!identical(...future.workdir, getwd())) 
[16:14:28.577]             setwd(...future.workdir)
[16:14:28.577]         {
[16:14:28.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:28.577]                 ...future.oldOptions$nwarnings <- NULL
[16:14:28.577]             }
[16:14:28.577]             base::options(...future.oldOptions)
[16:14:28.577]             if (.Platform$OS.type == "windows") {
[16:14:28.577]                 old_names <- names(...future.oldEnvVars)
[16:14:28.577]                 envs <- base::Sys.getenv()
[16:14:28.577]                 names <- names(envs)
[16:14:28.577]                 common <- intersect(names, old_names)
[16:14:28.577]                 added <- setdiff(names, old_names)
[16:14:28.577]                 removed <- setdiff(old_names, names)
[16:14:28.577]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:28.577]                   envs[common]]
[16:14:28.577]                 NAMES <- toupper(changed)
[16:14:28.577]                 args <- list()
[16:14:28.577]                 for (kk in seq_along(NAMES)) {
[16:14:28.577]                   name <- changed[[kk]]
[16:14:28.577]                   NAME <- NAMES[[kk]]
[16:14:28.577]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.577]                     next
[16:14:28.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.577]                 }
[16:14:28.577]                 NAMES <- toupper(added)
[16:14:28.577]                 for (kk in seq_along(NAMES)) {
[16:14:28.577]                   name <- added[[kk]]
[16:14:28.577]                   NAME <- NAMES[[kk]]
[16:14:28.577]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.577]                     next
[16:14:28.577]                   args[[name]] <- ""
[16:14:28.577]                 }
[16:14:28.577]                 NAMES <- toupper(removed)
[16:14:28.577]                 for (kk in seq_along(NAMES)) {
[16:14:28.577]                   name <- removed[[kk]]
[16:14:28.577]                   NAME <- NAMES[[kk]]
[16:14:28.577]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.577]                     next
[16:14:28.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.577]                 }
[16:14:28.577]                 if (length(args) > 0) 
[16:14:28.577]                   base::do.call(base::Sys.setenv, args = args)
[16:14:28.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:28.577]             }
[16:14:28.577]             else {
[16:14:28.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:28.577]             }
[16:14:28.577]             {
[16:14:28.577]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:28.577]                   0L) {
[16:14:28.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:28.577]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:28.577]                   base::options(opts)
[16:14:28.577]                 }
[16:14:28.577]                 {
[16:14:28.577]                   {
[16:14:28.577]                     NULL
[16:14:28.577]                     RNGkind("Mersenne-Twister")
[16:14:28.577]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:28.577]                       inherits = FALSE)
[16:14:28.577]                   }
[16:14:28.577]                   options(future.plan = "multisession")
[16:14:28.577]                   if (is.na("")) 
[16:14:28.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.577]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:14:28.577]                   future::plan(list(function (..., workers = availableCores(), 
[16:14:28.577]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:14:28.577]                     envir = parent.frame()) 
[16:14:28.577]                   {
[16:14:28.577]                     if (is.function(workers)) 
[16:14:28.577]                       workers <- workers()
[16:14:28.577]                     workers <- structure(as.integer(workers), 
[16:14:28.577]                       class = class(workers))
[16:14:28.577]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:14:28.577]                       workers >= 1)
[16:14:28.577]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:14:28.577]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:14:28.577]                     }
[16:14:28.577]                     future <- MultisessionFuture(..., workers = workers, 
[16:14:28.577]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:14:28.577]                       envir = envir)
[16:14:28.577]                     if (!future$lazy) 
[16:14:28.577]                       future <- run(future)
[16:14:28.577]                     invisible(future)
[16:14:28.577]                   }), .cleanup = FALSE, .init = FALSE)
[16:14:28.577]                 }
[16:14:28.577]             }
[16:14:28.577]         }
[16:14:28.577]     })
[16:14:28.577]     if (TRUE) {
[16:14:28.577]         base::sink(type = "output", split = FALSE)
[16:14:28.577]         if (TRUE) {
[16:14:28.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:28.577]         }
[16:14:28.577]         else {
[16:14:28.577]             ...future.result["stdout"] <- base::list(NULL)
[16:14:28.577]         }
[16:14:28.577]         base::close(...future.stdout)
[16:14:28.577]         ...future.stdout <- NULL
[16:14:28.577]     }
[16:14:28.577]     ...future.result$conditions <- ...future.conditions
[16:14:28.577]     ...future.result$finished <- base::Sys.time()
[16:14:28.577]     ...future.result
[16:14:28.577] }
[16:14:28.579] plan(): Setting new future strategy stack:
[16:14:28.579] List of future strategies:
[16:14:28.579] 1. sequential:
[16:14:28.579]    - args: function (..., envir = parent.frame())
[16:14:28.579]    - tweaked: FALSE
[16:14:28.579]    - call: NULL
[16:14:28.579] plan(): nbrOfWorkers() = 1
[16:14:28.580] plan(): Setting new future strategy stack:
[16:14:28.580] List of future strategies:
[16:14:28.580] 1. multisession:
[16:14:28.580]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.580]    - tweaked: FALSE
[16:14:28.580]    - call: plan("default")
[16:14:28.583] plan(): nbrOfWorkers() = 1
[16:14:28.583] SequentialFuture started (and completed)
[16:14:28.584] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:28.587] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[16:14:28.587] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:14:28.588] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:14:28.588] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:14:28.589] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:14:28.590] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:14:28.591] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:14:28.591] Option 'future.plan' of type ‘function’
[16:14:28.591] R command-line argument: -p 1
[16:14:28.591]  => 'future.plan' already set.
[16:14:28.591] R process uuid: e8125273-596f-9e77-9e00-067f0ae12838
[16:14:28.591] Setting plan('default')
[16:14:28.591] plan(): Setting new future strategy stack:
[16:14:28.591] List of future strategies:
[16:14:28.591] 1. multisession:
[16:14:28.591]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.591]    - tweaked: FALSE
[16:14:28.591]    - call: NULL
[16:14:28.595] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:14:28.595] plan(): Setting new future strategy stack:
[16:14:28.595] List of future strategies:
[16:14:28.595] 1. multisession:
[16:14:28.595]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.595]    - tweaked: FALSE
[16:14:28.595]    - call: NULL
[16:14:28.595] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:14:28.595] multisession:
[16:14:28.595] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.595] - tweaked: FALSE
[16:14:28.595] - call: NULL
[16:14:28.599] getGlobalsAndPackages() ...
[16:14:28.599] Not searching for globals
[16:14:28.599] - globals: [0] <none>
[16:14:28.599] getGlobalsAndPackages() ... DONE
[16:14:28.599] Packages needed by the future expression (n = 0): <none>
[16:14:28.599] Packages needed by future strategies (n = 0): <none>
[16:14:28.600] {
[16:14:28.600]     {
[16:14:28.600]         {
[16:14:28.600]             ...future.startTime <- base::Sys.time()
[16:14:28.600]             {
[16:14:28.600]                 {
[16:14:28.600]                   {
[16:14:28.600]                     base::local({
[16:14:28.600]                       has_future <- base::requireNamespace("future", 
[16:14:28.600]                         quietly = TRUE)
[16:14:28.600]                       if (has_future) {
[16:14:28.600]                         ns <- base::getNamespace("future")
[16:14:28.600]                         version <- ns[[".package"]][["version"]]
[16:14:28.600]                         if (is.null(version)) 
[16:14:28.600]                           version <- utils::packageVersion("future")
[16:14:28.600]                       }
[16:14:28.600]                       else {
[16:14:28.600]                         version <- NULL
[16:14:28.600]                       }
[16:14:28.600]                       if (!has_future || version < "1.8.0") {
[16:14:28.600]                         info <- base::c(r_version = base::gsub("R version ", 
[16:14:28.600]                           "", base::R.version$version.string), 
[16:14:28.600]                           platform = base::sprintf("%s (%s-bit)", 
[16:14:28.600]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:14:28.600]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:14:28.600]                             "release", "version")], collapse = " "), 
[16:14:28.600]                           hostname = base::Sys.info()[["nodename"]])
[16:14:28.600]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:14:28.600]                           info)
[16:14:28.600]                         info <- base::paste(info, collapse = "; ")
[16:14:28.600]                         if (!has_future) {
[16:14:28.600]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:14:28.600]                             info)
[16:14:28.600]                         }
[16:14:28.600]                         else {
[16:14:28.600]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:14:28.600]                             info, version)
[16:14:28.600]                         }
[16:14:28.600]                         base::stop(msg)
[16:14:28.600]                       }
[16:14:28.600]                     })
[16:14:28.600]                   }
[16:14:28.600]                   options(future.plan = NULL)
[16:14:28.600]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.600]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:14:28.600]                 }
[16:14:28.600]                 ...future.workdir <- getwd()
[16:14:28.600]             }
[16:14:28.600]             ...future.oldOptions <- base::as.list(base::.Options)
[16:14:28.600]             ...future.oldEnvVars <- base::Sys.getenv()
[16:14:28.600]         }
[16:14:28.600]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:14:28.600]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:14:28.600]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:14:28.600]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:14:28.600]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:14:28.600]             future.stdout.windows.reencode = NULL, width = 80L)
[16:14:28.600]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:14:28.600]             base::names(...future.oldOptions))
[16:14:28.600]     }
[16:14:28.600]     if (FALSE) {
[16:14:28.600]     }
[16:14:28.600]     else {
[16:14:28.600]         if (TRUE) {
[16:14:28.600]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:14:28.600]                 open = "w")
[16:14:28.600]         }
[16:14:28.600]         else {
[16:14:28.600]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:14:28.600]                 windows = "NUL", "/dev/null"), open = "w")
[16:14:28.600]         }
[16:14:28.600]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:14:28.600]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:14:28.600]             base::sink(type = "output", split = FALSE)
[16:14:28.600]             base::close(...future.stdout)
[16:14:28.600]         }, add = TRUE)
[16:14:28.600]     }
[16:14:28.600]     ...future.frame <- base::sys.nframe()
[16:14:28.600]     ...future.conditions <- base::list()
[16:14:28.600]     ...future.rng <- base::globalenv()$.Random.seed
[16:14:28.600]     if (FALSE) {
[16:14:28.600]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:14:28.600]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:14:28.600]     }
[16:14:28.600]     ...future.result <- base::tryCatch({
[16:14:28.600]         base::withCallingHandlers({
[16:14:28.600]             ...future.value <- base::withVisible(base::local(NA))
[16:14:28.600]             future::FutureResult(value = ...future.value$value, 
[16:14:28.600]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.600]                   ...future.rng), globalenv = if (FALSE) 
[16:14:28.600]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:14:28.600]                     ...future.globalenv.names))
[16:14:28.600]                 else NULL, started = ...future.startTime, version = "1.8")
[16:14:28.600]         }, condition = base::local({
[16:14:28.600]             c <- base::c
[16:14:28.600]             inherits <- base::inherits
[16:14:28.600]             invokeRestart <- base::invokeRestart
[16:14:28.600]             length <- base::length
[16:14:28.600]             list <- base::list
[16:14:28.600]             seq.int <- base::seq.int
[16:14:28.600]             signalCondition <- base::signalCondition
[16:14:28.600]             sys.calls <- base::sys.calls
[16:14:28.600]             `[[` <- base::`[[`
[16:14:28.600]             `+` <- base::`+`
[16:14:28.600]             `<<-` <- base::`<<-`
[16:14:28.600]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:14:28.600]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:14:28.600]                   3L)]
[16:14:28.600]             }
[16:14:28.600]             function(cond) {
[16:14:28.600]                 is_error <- inherits(cond, "error")
[16:14:28.600]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:14:28.600]                   NULL)
[16:14:28.600]                 if (is_error) {
[16:14:28.600]                   sessionInformation <- function() {
[16:14:28.600]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:14:28.600]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:14:28.600]                       search = base::search(), system = base::Sys.info())
[16:14:28.600]                   }
[16:14:28.600]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.600]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:14:28.600]                     cond$call), session = sessionInformation(), 
[16:14:28.600]                     timestamp = base::Sys.time(), signaled = 0L)
[16:14:28.600]                   signalCondition(cond)
[16:14:28.600]                 }
[16:14:28.600]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:14:28.600]                 "immediateCondition"))) {
[16:14:28.600]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:14:28.600]                   ...future.conditions[[length(...future.conditions) + 
[16:14:28.600]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:14:28.600]                   if (TRUE && !signal) {
[16:14:28.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.600]                     {
[16:14:28.600]                       inherits <- base::inherits
[16:14:28.600]                       invokeRestart <- base::invokeRestart
[16:14:28.600]                       is.null <- base::is.null
[16:14:28.600]                       muffled <- FALSE
[16:14:28.600]                       if (inherits(cond, "message")) {
[16:14:28.600]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.600]                         if (muffled) 
[16:14:28.600]                           invokeRestart("muffleMessage")
[16:14:28.600]                       }
[16:14:28.600]                       else if (inherits(cond, "warning")) {
[16:14:28.600]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.600]                         if (muffled) 
[16:14:28.600]                           invokeRestart("muffleWarning")
[16:14:28.600]                       }
[16:14:28.600]                       else if (inherits(cond, "condition")) {
[16:14:28.600]                         if (!is.null(pattern)) {
[16:14:28.600]                           computeRestarts <- base::computeRestarts
[16:14:28.600]                           grepl <- base::grepl
[16:14:28.600]                           restarts <- computeRestarts(cond)
[16:14:28.600]                           for (restart in restarts) {
[16:14:28.600]                             name <- restart$name
[16:14:28.600]                             if (is.null(name)) 
[16:14:28.600]                               next
[16:14:28.600]                             if (!grepl(pattern, name)) 
[16:14:28.600]                               next
[16:14:28.600]                             invokeRestart(restart)
[16:14:28.600]                             muffled <- TRUE
[16:14:28.600]                             break
[16:14:28.600]                           }
[16:14:28.600]                         }
[16:14:28.600]                       }
[16:14:28.600]                       invisible(muffled)
[16:14:28.600]                     }
[16:14:28.600]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.600]                   }
[16:14:28.600]                 }
[16:14:28.600]                 else {
[16:14:28.600]                   if (TRUE) {
[16:14:28.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:14:28.600]                     {
[16:14:28.600]                       inherits <- base::inherits
[16:14:28.600]                       invokeRestart <- base::invokeRestart
[16:14:28.600]                       is.null <- base::is.null
[16:14:28.600]                       muffled <- FALSE
[16:14:28.600]                       if (inherits(cond, "message")) {
[16:14:28.600]                         muffled <- grepl(pattern, "muffleMessage")
[16:14:28.600]                         if (muffled) 
[16:14:28.600]                           invokeRestart("muffleMessage")
[16:14:28.600]                       }
[16:14:28.600]                       else if (inherits(cond, "warning")) {
[16:14:28.600]                         muffled <- grepl(pattern, "muffleWarning")
[16:14:28.600]                         if (muffled) 
[16:14:28.600]                           invokeRestart("muffleWarning")
[16:14:28.600]                       }
[16:14:28.600]                       else if (inherits(cond, "condition")) {
[16:14:28.600]                         if (!is.null(pattern)) {
[16:14:28.600]                           computeRestarts <- base::computeRestarts
[16:14:28.600]                           grepl <- base::grepl
[16:14:28.600]                           restarts <- computeRestarts(cond)
[16:14:28.600]                           for (restart in restarts) {
[16:14:28.600]                             name <- restart$name
[16:14:28.600]                             if (is.null(name)) 
[16:14:28.600]                               next
[16:14:28.600]                             if (!grepl(pattern, name)) 
[16:14:28.600]                               next
[16:14:28.600]                             invokeRestart(restart)
[16:14:28.600]                             muffled <- TRUE
[16:14:28.600]                             break
[16:14:28.600]                           }
[16:14:28.600]                         }
[16:14:28.600]                       }
[16:14:28.600]                       invisible(muffled)
[16:14:28.600]                     }
[16:14:28.600]                     muffleCondition(cond, pattern = "^muffle")
[16:14:28.600]                   }
[16:14:28.600]                 }
[16:14:28.600]             }
[16:14:28.600]         }))
[16:14:28.600]     }, error = function(ex) {
[16:14:28.600]         base::structure(base::list(value = NULL, visible = NULL, 
[16:14:28.600]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:14:28.600]                 ...future.rng), started = ...future.startTime, 
[16:14:28.600]             finished = Sys.time(), session_uuid = NA_character_, 
[16:14:28.600]             version = "1.8"), class = "FutureResult")
[16:14:28.600]     }, finally = {
[16:14:28.600]         if (!identical(...future.workdir, getwd())) 
[16:14:28.600]             setwd(...future.workdir)
[16:14:28.600]         {
[16:14:28.600]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:14:28.600]                 ...future.oldOptions$nwarnings <- NULL
[16:14:28.600]             }
[16:14:28.600]             base::options(...future.oldOptions)
[16:14:28.600]             if (.Platform$OS.type == "windows") {
[16:14:28.600]                 old_names <- names(...future.oldEnvVars)
[16:14:28.600]                 envs <- base::Sys.getenv()
[16:14:28.600]                 names <- names(envs)
[16:14:28.600]                 common <- intersect(names, old_names)
[16:14:28.600]                 added <- setdiff(names, old_names)
[16:14:28.600]                 removed <- setdiff(old_names, names)
[16:14:28.600]                 changed <- common[...future.oldEnvVars[common] != 
[16:14:28.600]                   envs[common]]
[16:14:28.600]                 NAMES <- toupper(changed)
[16:14:28.600]                 args <- list()
[16:14:28.600]                 for (kk in seq_along(NAMES)) {
[16:14:28.600]                   name <- changed[[kk]]
[16:14:28.600]                   NAME <- NAMES[[kk]]
[16:14:28.600]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.600]                     next
[16:14:28.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.600]                 }
[16:14:28.600]                 NAMES <- toupper(added)
[16:14:28.600]                 for (kk in seq_along(NAMES)) {
[16:14:28.600]                   name <- added[[kk]]
[16:14:28.600]                   NAME <- NAMES[[kk]]
[16:14:28.600]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.600]                     next
[16:14:28.600]                   args[[name]] <- ""
[16:14:28.600]                 }
[16:14:28.600]                 NAMES <- toupper(removed)
[16:14:28.600]                 for (kk in seq_along(NAMES)) {
[16:14:28.600]                   name <- removed[[kk]]
[16:14:28.600]                   NAME <- NAMES[[kk]]
[16:14:28.600]                   if (name != NAME && is.element(NAME, old_names)) 
[16:14:28.600]                     next
[16:14:28.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:14:28.600]                 }
[16:14:28.600]                 if (length(args) > 0) 
[16:14:28.600]                   base::do.call(base::Sys.setenv, args = args)
[16:14:28.600]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:14:28.600]             }
[16:14:28.600]             else {
[16:14:28.600]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:14:28.600]             }
[16:14:28.600]             {
[16:14:28.600]                 if (base::length(...future.futureOptionsAdded) > 
[16:14:28.600]                   0L) {
[16:14:28.600]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:14:28.600]                   base::names(opts) <- ...future.futureOptionsAdded
[16:14:28.600]                   base::options(opts)
[16:14:28.600]                 }
[16:14:28.600]                 {
[16:14:28.600]                   {
[16:14:28.600]                     NULL
[16:14:28.600]                     RNGkind("Mersenne-Twister")
[16:14:28.600]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:14:28.600]                       inherits = FALSE)
[16:14:28.600]                   }
[16:14:28.600]                   options(future.plan = function (..., workers = availableCores(), 
[16:14:28.600]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:14:28.600]                     envir = parent.frame()) 
[16:14:28.600]                   {
[16:14:28.600]                     if (is.function(workers)) 
[16:14:28.600]                       workers <- workers()
[16:14:28.600]                     workers <- structure(as.integer(workers), 
[16:14:28.600]                       class = class(workers))
[16:14:28.600]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:14:28.600]                       workers >= 1)
[16:14:28.600]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:14:28.600]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:14:28.600]                     }
[16:14:28.600]                     future <- MultisessionFuture(..., workers = workers, 
[16:14:28.600]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:14:28.600]                       envir = envir)
[16:14:28.600]                     if (!future$lazy) 
[16:14:28.600]                       future <- run(future)
[16:14:28.600]                     invisible(future)
[16:14:28.600]                   })
[16:14:28.600]                   if (is.na("")) 
[16:14:28.600]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:14:28.600]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:14:28.600]                   future::plan(list(function (..., workers = availableCores(), 
[16:14:28.600]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:14:28.600]                     envir = parent.frame()) 
[16:14:28.600]                   {
[16:14:28.600]                     if (is.function(workers)) 
[16:14:28.600]                       workers <- workers()
[16:14:28.600]                     workers <- structure(as.integer(workers), 
[16:14:28.600]                       class = class(workers))
[16:14:28.600]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:14:28.600]                       workers >= 1)
[16:14:28.600]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:14:28.600]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:14:28.600]                     }
[16:14:28.600]                     future <- MultisessionFuture(..., workers = workers, 
[16:14:28.600]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:14:28.600]                       envir = envir)
[16:14:28.600]                     if (!future$lazy) 
[16:14:28.600]                       future <- run(future)
[16:14:28.600]                     invisible(future)
[16:14:28.600]                   }), .cleanup = FALSE, .init = FALSE)
[16:14:28.600]                 }
[16:14:28.600]             }
[16:14:28.600]         }
[16:14:28.600]     })
[16:14:28.600]     if (TRUE) {
[16:14:28.600]         base::sink(type = "output", split = FALSE)
[16:14:28.600]         if (TRUE) {
[16:14:28.600]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:14:28.600]         }
[16:14:28.600]         else {
[16:14:28.600]             ...future.result["stdout"] <- base::list(NULL)
[16:14:28.600]         }
[16:14:28.600]         base::close(...future.stdout)
[16:14:28.600]         ...future.stdout <- NULL
[16:14:28.600]     }
[16:14:28.600]     ...future.result$conditions <- ...future.conditions
[16:14:28.600]     ...future.result$finished <- base::Sys.time()
[16:14:28.600]     ...future.result
[16:14:28.600] }
[16:14:28.602] plan(): Setting new future strategy stack:
[16:14:28.602] List of future strategies:
[16:14:28.602] 1. sequential:
[16:14:28.602]    - args: function (..., envir = parent.frame())
[16:14:28.602]    - tweaked: FALSE
[16:14:28.602]    - call: NULL
[16:14:28.602] plan(): nbrOfWorkers() = 1
[16:14:28.603] plan(): Setting new future strategy stack:
[16:14:28.603] List of future strategies:
[16:14:28.603] 1. multisession:
[16:14:28.603]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:14:28.603]    - tweaked: FALSE
[16:14:28.603]    - call: NULL
[16:14:28.606] plan(): nbrOfWorkers() = 1
[16:14:28.607] SequentialFuture started (and completed)
[16:14:28.607] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:14:28.610] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[16:14:28.612] Option 'future.startup.script': TRUE
[16:14:28.612] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:14:28.613] Future startup scripts found: <none>
[16:14:28.613] Option 'future.startup.script': TRUE
[16:14:28.613] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:14:28.613] Future startup scripts found: <none>
[16:14:28.613] Option 'future.startup.script': TRUE
[16:14:28.613] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:14:28.613] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[16:14:28.614] Option 'future.startup.script': TRUE
[16:14:28.614] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:14:28.614] Future startup scripts found: ‘.future.R’
[16:14:28.614] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[16:14:28.615] plan(): Setting new future strategy stack:
[16:14:28.615] List of future strategies:
[16:14:28.615] 1. FutureStrategy:
[16:14:28.615]    - args: function (..., envir = parent.frame())
[16:14:28.615]    - tweaked: FALSE
[16:14:28.615]    - call: future::plan(oplan)
[16:14:28.616] plan(): nbrOfWorkers() = 1
> 
