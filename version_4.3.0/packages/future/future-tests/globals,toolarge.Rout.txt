
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:48.316] plan(): Setting new future strategy stack:
[16:12:48.317] List of future strategies:
[16:12:48.317] 1. sequential:
[16:12:48.317]    - args: function (..., envir = parent.frame())
[16:12:48.317]    - tweaked: FALSE
[16:12:48.317]    - call: future::plan("sequential")
[16:12:48.331] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals - too large ...")
*** Globals - too large ...
> 
> ooptsT <- options(future.globals.maxSize = object.size(1:1000) - 1L)
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4047 bytes
> 
> plan(multisession)
[16:12:48.343] plan(): Setting new future strategy stack:
[16:12:48.343] List of future strategies:
[16:12:48.343] 1. multisession:
[16:12:48.343]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:48.343]    - tweaked: FALSE
[16:12:48.343]    - call: plan(multisession)
[16:12:48.354] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:48.354] multisession:
[16:12:48.354] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:48.354] - tweaked: FALSE
[16:12:48.354] - call: plan(multisession)
[16:12:48.361] getGlobalsAndPackages() ...
[16:12:48.361] Not searching for globals
[16:12:48.361] - globals: [0] <none>
[16:12:48.361] getGlobalsAndPackages() ... DONE
[16:12:48.361] [local output] makeClusterPSOCK() ...
[16:12:48.397] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:48.403] [local output] Base port: 11519
[16:12:48.403] [local output] Getting setup options for 2 cluster nodes ...
[16:12:48.403] [local output]  - Node 1 of 2 ...
[16:12:48.403] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:48.404] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpcImzBY/worker.rank=1.parallelly.parent=85843.14f5378ed859.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpcImzBY/worker.rank=1.parallelly.parent=85843.14f5378ed859.pid")'’
[16:12:48.593] - Possible to infer worker's PID: TRUE
[16:12:48.593] [local output] Rscript port: 11519

[16:12:48.594] [local output]  - Node 2 of 2 ...
[16:12:48.594] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:48.595] [local output] Rscript port: 11519

[16:12:48.595] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:48.595] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:48.596] [local output] Setting up PSOCK nodes in parallel
[16:12:48.596] List of 36
[16:12:48.596]  $ worker          : chr "localhost"
[16:12:48.596]   ..- attr(*, "localhost")= logi TRUE
[16:12:48.596]  $ master          : chr "localhost"
[16:12:48.596]  $ port            : int 11519
[16:12:48.596]  $ connectTimeout  : num 120
[16:12:48.596]  $ timeout         : num 2592000
[16:12:48.596]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:48.596]  $ homogeneous     : logi TRUE
[16:12:48.596]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:48.596]  $ rscript_envs    : NULL
[16:12:48.596]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:48.596]  $ rscript_startup : NULL
[16:12:48.596]  $ rscript_sh      : chr "sh"
[16:12:48.596]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:48.596]  $ methods         : logi TRUE
[16:12:48.596]  $ socketOptions   : chr "no-delay"
[16:12:48.596]  $ useXDR          : logi FALSE
[16:12:48.596]  $ outfile         : chr "/dev/null"
[16:12:48.596]  $ renice          : int NA
[16:12:48.596]  $ rshcmd          : NULL
[16:12:48.596]  $ user            : chr(0) 
[16:12:48.596]  $ revtunnel       : logi FALSE
[16:12:48.596]  $ rshlogfile      : NULL
[16:12:48.596]  $ rshopts         : chr(0) 
[16:12:48.596]  $ rank            : int 1
[16:12:48.596]  $ manual          : logi FALSE
[16:12:48.596]  $ dryrun          : logi FALSE
[16:12:48.596]  $ quiet           : logi FALSE
[16:12:48.596]  $ setup_strategy  : chr "parallel"
[16:12:48.596]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:48.596]  $ pidfile         : chr "/tmp/RtmpcImzBY/worker.rank=1.parallelly.parent=85843.14f5378ed859.pid"
[16:12:48.596]  $ rshcmd_label    : NULL
[16:12:48.596]  $ rsh_call        : NULL
[16:12:48.596]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:48.596]  $ localMachine    : logi TRUE
[16:12:48.596]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:48.596]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:48.596]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:48.596]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:48.596]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:48.596]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:48.596]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:48.596]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:48.596]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:48.596]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:48.596]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:48.596]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:48.596]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:48.596]  $ arguments       :List of 28
[16:12:48.596]   ..$ worker          : chr "localhost"
[16:12:48.596]   ..$ master          : NULL
[16:12:48.596]   ..$ port            : int 11519
[16:12:48.596]   ..$ connectTimeout  : num 120
[16:12:48.596]   ..$ timeout         : num 2592000
[16:12:48.596]   ..$ rscript         : NULL
[16:12:48.596]   ..$ homogeneous     : NULL
[16:12:48.596]   ..$ rscript_args    : NULL
[16:12:48.596]   ..$ rscript_envs    : NULL
[16:12:48.596]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:48.596]   ..$ rscript_startup : NULL
[16:12:48.596]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:48.596]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:48.596]   ..$ methods         : logi TRUE
[16:12:48.596]   ..$ socketOptions   : chr "no-delay"
[16:12:48.596]   ..$ useXDR          : logi FALSE
[16:12:48.596]   ..$ outfile         : chr "/dev/null"
[16:12:48.596]   ..$ renice          : int NA
[16:12:48.596]   ..$ rshcmd          : NULL
[16:12:48.596]   ..$ user            : NULL
[16:12:48.596]   ..$ revtunnel       : logi NA
[16:12:48.596]   ..$ rshlogfile      : NULL
[16:12:48.596]   ..$ rshopts         : NULL
[16:12:48.596]   ..$ rank            : int 1
[16:12:48.596]   ..$ manual          : logi FALSE
[16:12:48.596]   ..$ dryrun          : logi FALSE
[16:12:48.596]   ..$ quiet           : logi FALSE
[16:12:48.596]   ..$ setup_strategy  : chr "parallel"
[16:12:48.596]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:48.614] [local output] System call to launch all workers:
[16:12:48.615] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpcImzBY/worker.rank=1.parallelly.parent=85843.14f5378ed859.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11519 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:48.615] [local output] Starting PSOCK main server
[16:12:48.616] [local output] Workers launched
[16:12:48.616] [local output] Waiting for workers to connect back
[16:12:48.616]  - [local output] 0 workers out of 2 ready
[16:12:48.863]  - [local output] 0 workers out of 2 ready
[16:12:48.864]  - [local output] 1 workers out of 2 ready
[16:12:48.864]  - [local output] 2 workers out of 2 ready
[16:12:48.864] [local output] Launching of workers completed
[16:12:48.864] [local output] Collecting session information from workers
[16:12:48.865] [local output]  - Worker #1 of 2
[16:12:48.866] [local output]  - Worker #2 of 2
[16:12:48.866] [local output] makeClusterPSOCK() ... done
[16:12:48.879] Packages needed by the future expression (n = 0): <none>
[16:12:48.879] Packages needed by future strategies (n = 0): <none>
[16:12:48.880] {
[16:12:48.880]     {
[16:12:48.880]         {
[16:12:48.880]             ...future.startTime <- base::Sys.time()
[16:12:48.880]             {
[16:12:48.880]                 {
[16:12:48.880]                   {
[16:12:48.880]                     {
[16:12:48.880]                       base::local({
[16:12:48.880]                         has_future <- base::requireNamespace("future", 
[16:12:48.880]                           quietly = TRUE)
[16:12:48.880]                         if (has_future) {
[16:12:48.880]                           ns <- base::getNamespace("future")
[16:12:48.880]                           version <- ns[[".package"]][["version"]]
[16:12:48.880]                           if (is.null(version)) 
[16:12:48.880]                             version <- utils::packageVersion("future")
[16:12:48.880]                         }
[16:12:48.880]                         else {
[16:12:48.880]                           version <- NULL
[16:12:48.880]                         }
[16:12:48.880]                         if (!has_future || version < "1.8.0") {
[16:12:48.880]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:48.880]                             "", base::R.version$version.string), 
[16:12:48.880]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:48.880]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:48.880]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:48.880]                               "release", "version")], collapse = " "), 
[16:12:48.880]                             hostname = base::Sys.info()[["nodename"]])
[16:12:48.880]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:48.880]                             info)
[16:12:48.880]                           info <- base::paste(info, collapse = "; ")
[16:12:48.880]                           if (!has_future) {
[16:12:48.880]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:48.880]                               info)
[16:12:48.880]                           }
[16:12:48.880]                           else {
[16:12:48.880]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:48.880]                               info, version)
[16:12:48.880]                           }
[16:12:48.880]                           base::stop(msg)
[16:12:48.880]                         }
[16:12:48.880]                       })
[16:12:48.880]                     }
[16:12:48.880]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:48.880]                     base::options(mc.cores = 1L)
[16:12:48.880]                   }
[16:12:48.880]                   options(future.plan = NULL)
[16:12:48.880]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:48.880]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:48.880]                 }
[16:12:48.880]                 ...future.workdir <- getwd()
[16:12:48.880]             }
[16:12:48.880]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:48.880]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:48.880]         }
[16:12:48.880]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:48.880]             future.globals.maxSize = 4047, future.globals.method = NULL, 
[16:12:48.880]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:48.880]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:48.880]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:48.880]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:48.880]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:48.880]             base::names(...future.oldOptions))
[16:12:48.880]     }
[16:12:48.880]     if (FALSE) {
[16:12:48.880]     }
[16:12:48.880]     else {
[16:12:48.880]         if (TRUE) {
[16:12:48.880]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:48.880]                 open = "w")
[16:12:48.880]         }
[16:12:48.880]         else {
[16:12:48.880]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:48.880]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:48.880]         }
[16:12:48.880]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:48.880]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:48.880]             base::sink(type = "output", split = FALSE)
[16:12:48.880]             base::close(...future.stdout)
[16:12:48.880]         }, add = TRUE)
[16:12:48.880]     }
[16:12:48.880]     ...future.frame <- base::sys.nframe()
[16:12:48.880]     ...future.conditions <- base::list()
[16:12:48.880]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:48.880]     if (FALSE) {
[16:12:48.880]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:48.880]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:48.880]     }
[16:12:48.880]     ...future.result <- base::tryCatch({
[16:12:48.880]         base::withCallingHandlers({
[16:12:48.880]             ...future.value <- base::withVisible(base::local({
[16:12:48.880]                 ...future.makeSendCondition <- local({
[16:12:48.880]                   sendCondition <- NULL
[16:12:48.880]                   function(frame = 1L) {
[16:12:48.880]                     if (is.function(sendCondition)) 
[16:12:48.880]                       return(sendCondition)
[16:12:48.880]                     ns <- getNamespace("parallel")
[16:12:48.880]                     if (exists("sendData", mode = "function", 
[16:12:48.880]                       envir = ns)) {
[16:12:48.880]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:48.880]                         envir = ns)
[16:12:48.880]                       envir <- sys.frame(frame)
[16:12:48.880]                       master <- NULL
[16:12:48.880]                       while (!identical(envir, .GlobalEnv) && 
[16:12:48.880]                         !identical(envir, emptyenv())) {
[16:12:48.880]                         if (exists("master", mode = "list", envir = envir, 
[16:12:48.880]                           inherits = FALSE)) {
[16:12:48.880]                           master <- get("master", mode = "list", 
[16:12:48.880]                             envir = envir, inherits = FALSE)
[16:12:48.880]                           if (inherits(master, c("SOCKnode", 
[16:12:48.880]                             "SOCK0node"))) {
[16:12:48.880]                             sendCondition <<- function(cond) {
[16:12:48.880]                               data <- list(type = "VALUE", value = cond, 
[16:12:48.880]                                 success = TRUE)
[16:12:48.880]                               parallel_sendData(master, data)
[16:12:48.880]                             }
[16:12:48.880]                             return(sendCondition)
[16:12:48.880]                           }
[16:12:48.880]                         }
[16:12:48.880]                         frame <- frame + 1L
[16:12:48.880]                         envir <- sys.frame(frame)
[16:12:48.880]                       }
[16:12:48.880]                     }
[16:12:48.880]                     sendCondition <<- function(cond) NULL
[16:12:48.880]                   }
[16:12:48.880]                 })
[16:12:48.880]                 withCallingHandlers({
[16:12:48.880]                   NA
[16:12:48.880]                 }, immediateCondition = function(cond) {
[16:12:48.880]                   sendCondition <- ...future.makeSendCondition()
[16:12:48.880]                   sendCondition(cond)
[16:12:48.880]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:48.880]                   {
[16:12:48.880]                     inherits <- base::inherits
[16:12:48.880]                     invokeRestart <- base::invokeRestart
[16:12:48.880]                     is.null <- base::is.null
[16:12:48.880]                     muffled <- FALSE
[16:12:48.880]                     if (inherits(cond, "message")) {
[16:12:48.880]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:48.880]                       if (muffled) 
[16:12:48.880]                         invokeRestart("muffleMessage")
[16:12:48.880]                     }
[16:12:48.880]                     else if (inherits(cond, "warning")) {
[16:12:48.880]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:48.880]                       if (muffled) 
[16:12:48.880]                         invokeRestart("muffleWarning")
[16:12:48.880]                     }
[16:12:48.880]                     else if (inherits(cond, "condition")) {
[16:12:48.880]                       if (!is.null(pattern)) {
[16:12:48.880]                         computeRestarts <- base::computeRestarts
[16:12:48.880]                         grepl <- base::grepl
[16:12:48.880]                         restarts <- computeRestarts(cond)
[16:12:48.880]                         for (restart in restarts) {
[16:12:48.880]                           name <- restart$name
[16:12:48.880]                           if (is.null(name)) 
[16:12:48.880]                             next
[16:12:48.880]                           if (!grepl(pattern, name)) 
[16:12:48.880]                             next
[16:12:48.880]                           invokeRestart(restart)
[16:12:48.880]                           muffled <- TRUE
[16:12:48.880]                           break
[16:12:48.880]                         }
[16:12:48.880]                       }
[16:12:48.880]                     }
[16:12:48.880]                     invisible(muffled)
[16:12:48.880]                   }
[16:12:48.880]                   muffleCondition(cond)
[16:12:48.880]                 })
[16:12:48.880]             }))
[16:12:48.880]             future::FutureResult(value = ...future.value$value, 
[16:12:48.880]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:48.880]                   ...future.rng), globalenv = if (FALSE) 
[16:12:48.880]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:48.880]                     ...future.globalenv.names))
[16:12:48.880]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:48.880]         }, condition = base::local({
[16:12:48.880]             c <- base::c
[16:12:48.880]             inherits <- base::inherits
[16:12:48.880]             invokeRestart <- base::invokeRestart
[16:12:48.880]             length <- base::length
[16:12:48.880]             list <- base::list
[16:12:48.880]             seq.int <- base::seq.int
[16:12:48.880]             signalCondition <- base::signalCondition
[16:12:48.880]             sys.calls <- base::sys.calls
[16:12:48.880]             `[[` <- base::`[[`
[16:12:48.880]             `+` <- base::`+`
[16:12:48.880]             `<<-` <- base::`<<-`
[16:12:48.880]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:48.880]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:48.880]                   3L)]
[16:12:48.880]             }
[16:12:48.880]             function(cond) {
[16:12:48.880]                 is_error <- inherits(cond, "error")
[16:12:48.880]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:48.880]                   NULL)
[16:12:48.880]                 if (is_error) {
[16:12:48.880]                   sessionInformation <- function() {
[16:12:48.880]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:48.880]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:48.880]                       search = base::search(), system = base::Sys.info())
[16:12:48.880]                   }
[16:12:48.880]                   ...future.conditions[[length(...future.conditions) + 
[16:12:48.880]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:48.880]                     cond$call), session = sessionInformation(), 
[16:12:48.880]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:48.880]                   signalCondition(cond)
[16:12:48.880]                 }
[16:12:48.880]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:48.880]                 "immediateCondition"))) {
[16:12:48.880]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:48.880]                   ...future.conditions[[length(...future.conditions) + 
[16:12:48.880]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:48.880]                   if (TRUE && !signal) {
[16:12:48.880]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:48.880]                     {
[16:12:48.880]                       inherits <- base::inherits
[16:12:48.880]                       invokeRestart <- base::invokeRestart
[16:12:48.880]                       is.null <- base::is.null
[16:12:48.880]                       muffled <- FALSE
[16:12:48.880]                       if (inherits(cond, "message")) {
[16:12:48.880]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:48.880]                         if (muffled) 
[16:12:48.880]                           invokeRestart("muffleMessage")
[16:12:48.880]                       }
[16:12:48.880]                       else if (inherits(cond, "warning")) {
[16:12:48.880]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:48.880]                         if (muffled) 
[16:12:48.880]                           invokeRestart("muffleWarning")
[16:12:48.880]                       }
[16:12:48.880]                       else if (inherits(cond, "condition")) {
[16:12:48.880]                         if (!is.null(pattern)) {
[16:12:48.880]                           computeRestarts <- base::computeRestarts
[16:12:48.880]                           grepl <- base::grepl
[16:12:48.880]                           restarts <- computeRestarts(cond)
[16:12:48.880]                           for (restart in restarts) {
[16:12:48.880]                             name <- restart$name
[16:12:48.880]                             if (is.null(name)) 
[16:12:48.880]                               next
[16:12:48.880]                             if (!grepl(pattern, name)) 
[16:12:48.880]                               next
[16:12:48.880]                             invokeRestart(restart)
[16:12:48.880]                             muffled <- TRUE
[16:12:48.880]                             break
[16:12:48.880]                           }
[16:12:48.880]                         }
[16:12:48.880]                       }
[16:12:48.880]                       invisible(muffled)
[16:12:48.880]                     }
[16:12:48.880]                     muffleCondition(cond, pattern = "^muffle")
[16:12:48.880]                   }
[16:12:48.880]                 }
[16:12:48.880]                 else {
[16:12:48.880]                   if (TRUE) {
[16:12:48.880]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:48.880]                     {
[16:12:48.880]                       inherits <- base::inherits
[16:12:48.880]                       invokeRestart <- base::invokeRestart
[16:12:48.880]                       is.null <- base::is.null
[16:12:48.880]                       muffled <- FALSE
[16:12:48.880]                       if (inherits(cond, "message")) {
[16:12:48.880]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:48.880]                         if (muffled) 
[16:12:48.880]                           invokeRestart("muffleMessage")
[16:12:48.880]                       }
[16:12:48.880]                       else if (inherits(cond, "warning")) {
[16:12:48.880]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:48.880]                         if (muffled) 
[16:12:48.880]                           invokeRestart("muffleWarning")
[16:12:48.880]                       }
[16:12:48.880]                       else if (inherits(cond, "condition")) {
[16:12:48.880]                         if (!is.null(pattern)) {
[16:12:48.880]                           computeRestarts <- base::computeRestarts
[16:12:48.880]                           grepl <- base::grepl
[16:12:48.880]                           restarts <- computeRestarts(cond)
[16:12:48.880]                           for (restart in restarts) {
[16:12:48.880]                             name <- restart$name
[16:12:48.880]                             if (is.null(name)) 
[16:12:48.880]                               next
[16:12:48.880]                             if (!grepl(pattern, name)) 
[16:12:48.880]                               next
[16:12:48.880]                             invokeRestart(restart)
[16:12:48.880]                             muffled <- TRUE
[16:12:48.880]                             break
[16:12:48.880]                           }
[16:12:48.880]                         }
[16:12:48.880]                       }
[16:12:48.880]                       invisible(muffled)
[16:12:48.880]                     }
[16:12:48.880]                     muffleCondition(cond, pattern = "^muffle")
[16:12:48.880]                   }
[16:12:48.880]                 }
[16:12:48.880]             }
[16:12:48.880]         }))
[16:12:48.880]     }, error = function(ex) {
[16:12:48.880]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:48.880]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:48.880]                 ...future.rng), started = ...future.startTime, 
[16:12:48.880]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:48.880]             version = "1.8"), class = "FutureResult")
[16:12:48.880]     }, finally = {
[16:12:48.880]         if (!identical(...future.workdir, getwd())) 
[16:12:48.880]             setwd(...future.workdir)
[16:12:48.880]         {
[16:12:48.880]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:48.880]                 ...future.oldOptions$nwarnings <- NULL
[16:12:48.880]             }
[16:12:48.880]             base::options(...future.oldOptions)
[16:12:48.880]             if (.Platform$OS.type == "windows") {
[16:12:48.880]                 old_names <- names(...future.oldEnvVars)
[16:12:48.880]                 envs <- base::Sys.getenv()
[16:12:48.880]                 names <- names(envs)
[16:12:48.880]                 common <- intersect(names, old_names)
[16:12:48.880]                 added <- setdiff(names, old_names)
[16:12:48.880]                 removed <- setdiff(old_names, names)
[16:12:48.880]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:48.880]                   envs[common]]
[16:12:48.880]                 NAMES <- toupper(changed)
[16:12:48.880]                 args <- list()
[16:12:48.880]                 for (kk in seq_along(NAMES)) {
[16:12:48.880]                   name <- changed[[kk]]
[16:12:48.880]                   NAME <- NAMES[[kk]]
[16:12:48.880]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:48.880]                     next
[16:12:48.880]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:48.880]                 }
[16:12:48.880]                 NAMES <- toupper(added)
[16:12:48.880]                 for (kk in seq_along(NAMES)) {
[16:12:48.880]                   name <- added[[kk]]
[16:12:48.880]                   NAME <- NAMES[[kk]]
[16:12:48.880]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:48.880]                     next
[16:12:48.880]                   args[[name]] <- ""
[16:12:48.880]                 }
[16:12:48.880]                 NAMES <- toupper(removed)
[16:12:48.880]                 for (kk in seq_along(NAMES)) {
[16:12:48.880]                   name <- removed[[kk]]
[16:12:48.880]                   NAME <- NAMES[[kk]]
[16:12:48.880]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:48.880]                     next
[16:12:48.880]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:48.880]                 }
[16:12:48.880]                 if (length(args) > 0) 
[16:12:48.880]                   base::do.call(base::Sys.setenv, args = args)
[16:12:48.880]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:48.880]             }
[16:12:48.880]             else {
[16:12:48.880]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:48.880]             }
[16:12:48.880]             {
[16:12:48.880]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:48.880]                   0L) {
[16:12:48.880]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:48.880]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:48.880]                   base::options(opts)
[16:12:48.880]                 }
[16:12:48.880]                 {
[16:12:48.880]                   {
[16:12:48.880]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:48.880]                     NULL
[16:12:48.880]                   }
[16:12:48.880]                   options(future.plan = NULL)
[16:12:48.880]                   if (is.na(NA_character_)) 
[16:12:48.880]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:48.880]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:48.880]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:48.880]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:48.880]                     envir = parent.frame()) 
[16:12:48.880]                   {
[16:12:48.880]                     if (is.function(workers)) 
[16:12:48.880]                       workers <- workers()
[16:12:48.880]                     workers <- structure(as.integer(workers), 
[16:12:48.880]                       class = class(workers))
[16:12:48.880]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:48.880]                       workers >= 1)
[16:12:48.880]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:48.880]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:48.880]                     }
[16:12:48.880]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:48.880]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:48.880]                       envir = envir)
[16:12:48.880]                     if (!future$lazy) 
[16:12:48.880]                       future <- run(future)
[16:12:48.880]                     invisible(future)
[16:12:48.880]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:48.880]                 }
[16:12:48.880]             }
[16:12:48.880]         }
[16:12:48.880]     })
[16:12:48.880]     if (TRUE) {
[16:12:48.880]         base::sink(type = "output", split = FALSE)
[16:12:48.880]         if (TRUE) {
[16:12:48.880]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:48.880]         }
[16:12:48.880]         else {
[16:12:48.880]             ...future.result["stdout"] <- base::list(NULL)
[16:12:48.880]         }
[16:12:48.880]         base::close(...future.stdout)
[16:12:48.880]         ...future.stdout <- NULL
[16:12:48.880]     }
[16:12:48.880]     ...future.result$conditions <- ...future.conditions
[16:12:48.880]     ...future.result$finished <- base::Sys.time()
[16:12:48.880]     ...future.result
[16:12:48.880] }
[16:12:48.953] MultisessionFuture started
[16:12:48.954] result() for ClusterFuture ...
[16:12:48.954] receiveMessageFromWorker() for ClusterFuture ...
[16:12:48.955] - Validating connection of MultisessionFuture
[16:12:48.987] - received message: FutureResult
[16:12:48.987] - Received FutureResult
[16:12:48.990] - Erased future from FutureRegistry
[16:12:48.991] result() for ClusterFuture ...
[16:12:48.991] - result already collected: FutureResult
[16:12:48.991] result() for ClusterFuture ... done
[16:12:48.991] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:48.991] result() for ClusterFuture ... done
[16:12:48.991] result() for ClusterFuture ...
[16:12:48.991] - result already collected: FutureResult
[16:12:48.992] result() for ClusterFuture ... done
[16:12:48.992] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:48.995] plan(): nbrOfWorkers() = 2
> 
> exprs <- list(
+   A = substitute({ a }, env = list()),
+   B = substitute({ a * b }, env = list()),
+   C = substitute({ a * b * c }, env = list()),
+   D = substitute({ a * b * c * d }, env = list()),
+   E = substitute({ a * b * c * d * e }, env = list())
+ )
> 
> a <- 1:1000
> b <- 1:900
> c <- 1:800
> d <- 1:700
> e <- 1
> 
> for (name in names(exprs)) {
+   message(sprintf("Expression %s:", name))
+   expr <- exprs[[name]]
+   print(expr)
+   res <- tryCatch({
+     f <- future(expr, substitute = FALSE)
+   }, error = function(ex) ex)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   msg <- conditionMessage(res)
+   stopifnot(grepl("exceeds the maximum allowed size", msg))
+ }
Expression A:
{
    a
}
[16:12:49.004] getGlobalsAndPackages() ...
[16:12:49.004] Searching for globals...
[16:12:49.008] - globals found: [2] ‘{’, ‘a’
[16:12:49.008] Searching for globals ... DONE
[16:12:49.008] Resolving globals: FALSE
[16:12:49.010] The total size of the 1 globals is 3.95 KiB (4048 bytes)
[16:12:49.010] The total size of the 1 globals exported for future expression (‘{; a; }’) is 3.95 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (3.95 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 1 globals exported for future expression (‘{; a; }’) is 3.95 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (3.95 KiB of class ‘numeric’)>
Expression B:
{
    a * b
}
[16:12:49.011] getGlobalsAndPackages() ...
[16:12:49.011] Searching for globals...
[16:12:49.016] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[16:12:49.016] Searching for globals ... DONE
[16:12:49.017] Resolving globals: FALSE
[16:12:49.017] The total size of the 2 globals is 7.52 KiB (7696 bytes)
[16:12:49.018] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 7.52 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (3.95 KiB of class ‘numeric’) and ‘b’ (3.56 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 7.52 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (3.95 KiB of class ‘numeric’) and ‘b’ (3.56 KiB of class ‘numeric’)>
Expression C:
{
    a * b * c
}
[16:12:49.018] getGlobalsAndPackages() ...
[16:12:49.018] Searching for globals...
[16:12:49.022] - globals found: [5] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’
[16:12:49.022] Searching for globals ... DONE
[16:12:49.022] Resolving globals: FALSE
[16:12:49.022] The total size of the 3 globals is 10.69 KiB (10944 bytes)
[16:12:49.023] The total size of the 3 globals exported for future expression (‘{; a * b * c; }’) is 10.69 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). There are three globals: ‘a’ (3.95 KiB of class ‘numeric’), ‘b’ (3.56 KiB of class ‘numeric’) and ‘c’ (3.17 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 3 globals exported for future expression (‘{; a * b * c; }’) is 10.69 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). There are three globals: ‘a’ (3.95 KiB of class ‘numeric’), ‘b’ (3.56 KiB of class ‘numeric’) and ‘c’ (3.17 KiB of class ‘numeric’)>
Expression D:
{
    a * b * c * d
}
[16:12:49.023] getGlobalsAndPackages() ...
[16:12:49.023] Searching for globals...
[16:12:49.024] - globals found: [6] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’, ‘d’
[16:12:49.024] Searching for globals ... DONE
[16:12:49.024] Resolving globals: FALSE
[16:12:49.025] The total size of the 4 globals is 13.47 KiB (13792 bytes)
[16:12:49.025] The total size of the 4 globals exported for future expression (‘{; a * b * c * d; }’) is 13.47 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.95 KiB of class ‘numeric’), ‘b’ (3.56 KiB of class ‘numeric’) and ‘c’ (3.17 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 4 globals exported for future expression (‘{; a * b * c * d; }’) is 13.47 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.95 KiB of class ‘numeric’), ‘b’ (3.56 KiB of class ‘numeric’) and ‘c’ (3.17 KiB of class ‘numeric’)>
Expression E:
{
    a * b * c * d * e
}
[16:12:49.026] getGlobalsAndPackages() ...
[16:12:49.026] Searching for globals...
[16:12:49.027] - globals found: [7] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’, ‘d’, ‘e’
[16:12:49.027] Searching for globals ... DONE
[16:12:49.027] Resolving globals: FALSE
[16:12:49.027] The total size of the 5 globals is 13.52 KiB (13848 bytes)
[16:12:49.028] The total size of the 5 globals exported for future expression (‘{; a * b * c * d * e; }’) is 13.52 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.95 KiB of class ‘numeric’), ‘b’ (3.56 KiB of class ‘numeric’) and ‘c’ (3.17 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 5 globals exported for future expression (‘{; a * b * c * d * e; }’) is 13.52 KiB.. This exceeds the maximum allowed size of 3.95 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.95 KiB of class ‘numeric’), ‘b’ (3.56 KiB of class ‘numeric’) and ‘c’ (3.17 KiB of class ‘numeric’)>
> 
> message("*** Globals - too large ... DONE")
*** Globals - too large ... DONE
> 
> source("incl/end.R")
[16:12:49.029] plan(): Setting new future strategy stack:
[16:12:49.029] List of future strategies:
[16:12:49.029] 1. FutureStrategy:
[16:12:49.029]    - args: function (..., envir = parent.frame())
[16:12:49.029]    - tweaked: FALSE
[16:12:49.029]    - call: future::plan(oplan)
[16:12:49.029] plan(): nbrOfWorkers() = 1
> 
