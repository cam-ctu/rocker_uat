
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:12.889] plan(): Setting new future strategy stack:
[16:12:12.890] List of future strategies:
[16:12:12.890] 1. sequential:
[16:12:12.890]    - args: function (..., envir = parent.frame())
[16:12:12.890]    - tweaked: FALSE
[16:12:12.890]    - call: future::plan("sequential")
[16:12:12.903] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[16:12:12.927] plan(): Setting new future strategy stack:
[16:12:12.927] List of future strategies:
[16:12:12.927] 1. sequential:
[16:12:12.927]    - args: function (..., envir = parent.frame())
[16:12:12.927]    - tweaked: FALSE
[16:12:12.927]    - call: plan(strategy)
[16:12:12.939] plan(): nbrOfWorkers() = 1
[16:12:12.941] getGlobalsAndPackages() ...
[16:12:12.941] Searching for globals...
[16:12:12.943] 
[16:12:12.943] Searching for globals ... DONE
[16:12:12.943] - globals: [0] <none>
[16:12:12.943] getGlobalsAndPackages() ... DONE
[16:12:12.944] Packages needed by the future expression (n = 0): <none>
[16:12:12.944] Packages needed by future strategies (n = 0): <none>
[16:12:12.945] {
[16:12:12.945]     {
[16:12:12.945]         {
[16:12:12.945]             ...future.startTime <- base::Sys.time()
[16:12:12.945]             {
[16:12:12.945]                 {
[16:12:12.945]                   {
[16:12:12.945]                     base::local({
[16:12:12.945]                       has_future <- base::requireNamespace("future", 
[16:12:12.945]                         quietly = TRUE)
[16:12:12.945]                       if (has_future) {
[16:12:12.945]                         ns <- base::getNamespace("future")
[16:12:12.945]                         version <- ns[[".package"]][["version"]]
[16:12:12.945]                         if (is.null(version)) 
[16:12:12.945]                           version <- utils::packageVersion("future")
[16:12:12.945]                       }
[16:12:12.945]                       else {
[16:12:12.945]                         version <- NULL
[16:12:12.945]                       }
[16:12:12.945]                       if (!has_future || version < "1.8.0") {
[16:12:12.945]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.945]                           "", base::R.version$version.string), 
[16:12:12.945]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.945]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.945]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.945]                             "release", "version")], collapse = " "), 
[16:12:12.945]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.945]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.945]                           info)
[16:12:12.945]                         info <- base::paste(info, collapse = "; ")
[16:12:12.945]                         if (!has_future) {
[16:12:12.945]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.945]                             info)
[16:12:12.945]                         }
[16:12:12.945]                         else {
[16:12:12.945]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.945]                             info, version)
[16:12:12.945]                         }
[16:12:12.945]                         base::stop(msg)
[16:12:12.945]                       }
[16:12:12.945]                     })
[16:12:12.945]                   }
[16:12:12.945]                   options(future.plan = NULL)
[16:12:12.945]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.945]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.945]                 }
[16:12:12.945]                 ...future.workdir <- getwd()
[16:12:12.945]             }
[16:12:12.945]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.945]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.945]         }
[16:12:12.945]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.945]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.945]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.945]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.945]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.945]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.945]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.945]             base::names(...future.oldOptions))
[16:12:12.945]     }
[16:12:12.945]     if (FALSE) {
[16:12:12.945]     }
[16:12:12.945]     else {
[16:12:12.945]         if (TRUE) {
[16:12:12.945]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.945]                 open = "w")
[16:12:12.945]         }
[16:12:12.945]         else {
[16:12:12.945]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.945]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.945]         }
[16:12:12.945]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.945]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.945]             base::sink(type = "output", split = FALSE)
[16:12:12.945]             base::close(...future.stdout)
[16:12:12.945]         }, add = TRUE)
[16:12:12.945]     }
[16:12:12.945]     ...future.frame <- base::sys.nframe()
[16:12:12.945]     ...future.conditions <- base::list()
[16:12:12.945]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.945]     if (FALSE) {
[16:12:12.945]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.945]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.945]     }
[16:12:12.945]     ...future.result <- base::tryCatch({
[16:12:12.945]         base::withCallingHandlers({
[16:12:12.945]             ...future.value <- base::withVisible(base::local(42))
[16:12:12.945]             future::FutureResult(value = ...future.value$value, 
[16:12:12.945]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.945]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.945]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.945]                     ...future.globalenv.names))
[16:12:12.945]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.945]         }, condition = base::local({
[16:12:12.945]             c <- base::c
[16:12:12.945]             inherits <- base::inherits
[16:12:12.945]             invokeRestart <- base::invokeRestart
[16:12:12.945]             length <- base::length
[16:12:12.945]             list <- base::list
[16:12:12.945]             seq.int <- base::seq.int
[16:12:12.945]             signalCondition <- base::signalCondition
[16:12:12.945]             sys.calls <- base::sys.calls
[16:12:12.945]             `[[` <- base::`[[`
[16:12:12.945]             `+` <- base::`+`
[16:12:12.945]             `<<-` <- base::`<<-`
[16:12:12.945]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.945]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.945]                   3L)]
[16:12:12.945]             }
[16:12:12.945]             function(cond) {
[16:12:12.945]                 is_error <- inherits(cond, "error")
[16:12:12.945]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.945]                   NULL)
[16:12:12.945]                 if (is_error) {
[16:12:12.945]                   sessionInformation <- function() {
[16:12:12.945]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.945]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.945]                       search = base::search(), system = base::Sys.info())
[16:12:12.945]                   }
[16:12:12.945]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.945]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.945]                     cond$call), session = sessionInformation(), 
[16:12:12.945]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.945]                   signalCondition(cond)
[16:12:12.945]                 }
[16:12:12.945]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.945]                 "immediateCondition"))) {
[16:12:12.945]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.945]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.945]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.945]                   if (TRUE && !signal) {
[16:12:12.945]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.945]                     {
[16:12:12.945]                       inherits <- base::inherits
[16:12:12.945]                       invokeRestart <- base::invokeRestart
[16:12:12.945]                       is.null <- base::is.null
[16:12:12.945]                       muffled <- FALSE
[16:12:12.945]                       if (inherits(cond, "message")) {
[16:12:12.945]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.945]                         if (muffled) 
[16:12:12.945]                           invokeRestart("muffleMessage")
[16:12:12.945]                       }
[16:12:12.945]                       else if (inherits(cond, "warning")) {
[16:12:12.945]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.945]                         if (muffled) 
[16:12:12.945]                           invokeRestart("muffleWarning")
[16:12:12.945]                       }
[16:12:12.945]                       else if (inherits(cond, "condition")) {
[16:12:12.945]                         if (!is.null(pattern)) {
[16:12:12.945]                           computeRestarts <- base::computeRestarts
[16:12:12.945]                           grepl <- base::grepl
[16:12:12.945]                           restarts <- computeRestarts(cond)
[16:12:12.945]                           for (restart in restarts) {
[16:12:12.945]                             name <- restart$name
[16:12:12.945]                             if (is.null(name)) 
[16:12:12.945]                               next
[16:12:12.945]                             if (!grepl(pattern, name)) 
[16:12:12.945]                               next
[16:12:12.945]                             invokeRestart(restart)
[16:12:12.945]                             muffled <- TRUE
[16:12:12.945]                             break
[16:12:12.945]                           }
[16:12:12.945]                         }
[16:12:12.945]                       }
[16:12:12.945]                       invisible(muffled)
[16:12:12.945]                     }
[16:12:12.945]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.945]                   }
[16:12:12.945]                 }
[16:12:12.945]                 else {
[16:12:12.945]                   if (TRUE) {
[16:12:12.945]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.945]                     {
[16:12:12.945]                       inherits <- base::inherits
[16:12:12.945]                       invokeRestart <- base::invokeRestart
[16:12:12.945]                       is.null <- base::is.null
[16:12:12.945]                       muffled <- FALSE
[16:12:12.945]                       if (inherits(cond, "message")) {
[16:12:12.945]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.945]                         if (muffled) 
[16:12:12.945]                           invokeRestart("muffleMessage")
[16:12:12.945]                       }
[16:12:12.945]                       else if (inherits(cond, "warning")) {
[16:12:12.945]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.945]                         if (muffled) 
[16:12:12.945]                           invokeRestart("muffleWarning")
[16:12:12.945]                       }
[16:12:12.945]                       else if (inherits(cond, "condition")) {
[16:12:12.945]                         if (!is.null(pattern)) {
[16:12:12.945]                           computeRestarts <- base::computeRestarts
[16:12:12.945]                           grepl <- base::grepl
[16:12:12.945]                           restarts <- computeRestarts(cond)
[16:12:12.945]                           for (restart in restarts) {
[16:12:12.945]                             name <- restart$name
[16:12:12.945]                             if (is.null(name)) 
[16:12:12.945]                               next
[16:12:12.945]                             if (!grepl(pattern, name)) 
[16:12:12.945]                               next
[16:12:12.945]                             invokeRestart(restart)
[16:12:12.945]                             muffled <- TRUE
[16:12:12.945]                             break
[16:12:12.945]                           }
[16:12:12.945]                         }
[16:12:12.945]                       }
[16:12:12.945]                       invisible(muffled)
[16:12:12.945]                     }
[16:12:12.945]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.945]                   }
[16:12:12.945]                 }
[16:12:12.945]             }
[16:12:12.945]         }))
[16:12:12.945]     }, error = function(ex) {
[16:12:12.945]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.945]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.945]                 ...future.rng), started = ...future.startTime, 
[16:12:12.945]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.945]             version = "1.8"), class = "FutureResult")
[16:12:12.945]     }, finally = {
[16:12:12.945]         if (!identical(...future.workdir, getwd())) 
[16:12:12.945]             setwd(...future.workdir)
[16:12:12.945]         {
[16:12:12.945]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.945]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.945]             }
[16:12:12.945]             base::options(...future.oldOptions)
[16:12:12.945]             if (.Platform$OS.type == "windows") {
[16:12:12.945]                 old_names <- names(...future.oldEnvVars)
[16:12:12.945]                 envs <- base::Sys.getenv()
[16:12:12.945]                 names <- names(envs)
[16:12:12.945]                 common <- intersect(names, old_names)
[16:12:12.945]                 added <- setdiff(names, old_names)
[16:12:12.945]                 removed <- setdiff(old_names, names)
[16:12:12.945]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.945]                   envs[common]]
[16:12:12.945]                 NAMES <- toupper(changed)
[16:12:12.945]                 args <- list()
[16:12:12.945]                 for (kk in seq_along(NAMES)) {
[16:12:12.945]                   name <- changed[[kk]]
[16:12:12.945]                   NAME <- NAMES[[kk]]
[16:12:12.945]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.945]                     next
[16:12:12.945]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.945]                 }
[16:12:12.945]                 NAMES <- toupper(added)
[16:12:12.945]                 for (kk in seq_along(NAMES)) {
[16:12:12.945]                   name <- added[[kk]]
[16:12:12.945]                   NAME <- NAMES[[kk]]
[16:12:12.945]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.945]                     next
[16:12:12.945]                   args[[name]] <- ""
[16:12:12.945]                 }
[16:12:12.945]                 NAMES <- toupper(removed)
[16:12:12.945]                 for (kk in seq_along(NAMES)) {
[16:12:12.945]                   name <- removed[[kk]]
[16:12:12.945]                   NAME <- NAMES[[kk]]
[16:12:12.945]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.945]                     next
[16:12:12.945]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.945]                 }
[16:12:12.945]                 if (length(args) > 0) 
[16:12:12.945]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.945]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.945]             }
[16:12:12.945]             else {
[16:12:12.945]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.945]             }
[16:12:12.945]             {
[16:12:12.945]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.945]                   0L) {
[16:12:12.945]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.945]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.945]                   base::options(opts)
[16:12:12.945]                 }
[16:12:12.945]                 {
[16:12:12.945]                   {
[16:12:12.945]                     NULL
[16:12:12.945]                     RNGkind("Mersenne-Twister")
[16:12:12.945]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.945]                       inherits = FALSE)
[16:12:12.945]                   }
[16:12:12.945]                   options(future.plan = NULL)
[16:12:12.945]                   if (is.na(NA_character_)) 
[16:12:12.945]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.945]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.945]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:12.945]                   {
[16:12:12.945]                     future <- SequentialFuture(..., envir = envir)
[16:12:12.945]                     if (!future$lazy) 
[16:12:12.945]                       future <- run(future)
[16:12:12.945]                     invisible(future)
[16:12:12.945]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.945]                 }
[16:12:12.945]             }
[16:12:12.945]         }
[16:12:12.945]     })
[16:12:12.945]     if (TRUE) {
[16:12:12.945]         base::sink(type = "output", split = FALSE)
[16:12:12.945]         if (TRUE) {
[16:12:12.945]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.945]         }
[16:12:12.945]         else {
[16:12:12.945]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.945]         }
[16:12:12.945]         base::close(...future.stdout)
[16:12:12.945]         ...future.stdout <- NULL
[16:12:12.945]     }
[16:12:12.945]     ...future.result$conditions <- ...future.conditions
[16:12:12.945]     ...future.result$finished <- base::Sys.time()
[16:12:12.945]     ...future.result
[16:12:12.945] }
[16:12:12.947] plan(): Setting new future strategy stack:
[16:12:12.947] List of future strategies:
[16:12:12.947] 1. sequential:
[16:12:12.947]    - args: function (..., envir = parent.frame())
[16:12:12.947]    - tweaked: FALSE
[16:12:12.947]    - call: NULL
[16:12:12.947] plan(): nbrOfWorkers() = 1
[16:12:12.949] plan(): Setting new future strategy stack:
[16:12:12.949] List of future strategies:
[16:12:12.949] 1. sequential:
[16:12:12.949]    - args: function (..., envir = parent.frame())
[16:12:12.949]    - tweaked: FALSE
[16:12:12.949]    - call: plan(strategy)
[16:12:12.949] plan(): nbrOfWorkers() = 1
[16:12:12.949] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.951] getGlobalsAndPackages() ...
[16:12:12.951] Searching for globals...
[16:12:12.951] 
[16:12:12.951] Searching for globals ... DONE
[16:12:12.952] - globals: [0] <none>
[16:12:12.952] getGlobalsAndPackages() ... DONE
[16:12:12.952] run() for ‘Future’ ...
[16:12:12.952] - state: ‘created’
[16:12:12.952] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:12.953] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.953] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:12.953]   - Field: ‘label’
[16:12:12.953]   - Field: ‘local’
[16:12:12.953]   - Field: ‘owner’
[16:12:12.953]   - Field: ‘envir’
[16:12:12.953]   - Field: ‘packages’
[16:12:12.953]   - Field: ‘gc’
[16:12:12.953]   - Field: ‘conditions’
[16:12:12.953]   - Field: ‘expr’
[16:12:12.954]   - Field: ‘uuid’
[16:12:12.954]   - Field: ‘seed’
[16:12:12.954]   - Field: ‘version’
[16:12:12.954]   - Field: ‘result’
[16:12:12.954]   - Field: ‘asynchronous’
[16:12:12.954]   - Field: ‘calls’
[16:12:12.954]   - Field: ‘globals’
[16:12:12.954]   - Field: ‘stdout’
[16:12:12.954]   - Field: ‘earlySignal’
[16:12:12.954]   - Field: ‘lazy’
[16:12:12.954]   - Field: ‘state’
[16:12:12.955] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:12.955] - Launch lazy future ...
[16:12:12.955] Packages needed by the future expression (n = 0): <none>
[16:12:12.955] Packages needed by future strategies (n = 0): <none>
[16:12:12.955] {
[16:12:12.955]     {
[16:12:12.955]         {
[16:12:12.955]             ...future.startTime <- base::Sys.time()
[16:12:12.955]             {
[16:12:12.955]                 {
[16:12:12.955]                   {
[16:12:12.955]                     base::local({
[16:12:12.955]                       has_future <- base::requireNamespace("future", 
[16:12:12.955]                         quietly = TRUE)
[16:12:12.955]                       if (has_future) {
[16:12:12.955]                         ns <- base::getNamespace("future")
[16:12:12.955]                         version <- ns[[".package"]][["version"]]
[16:12:12.955]                         if (is.null(version)) 
[16:12:12.955]                           version <- utils::packageVersion("future")
[16:12:12.955]                       }
[16:12:12.955]                       else {
[16:12:12.955]                         version <- NULL
[16:12:12.955]                       }
[16:12:12.955]                       if (!has_future || version < "1.8.0") {
[16:12:12.955]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.955]                           "", base::R.version$version.string), 
[16:12:12.955]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.955]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.955]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.955]                             "release", "version")], collapse = " "), 
[16:12:12.955]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.955]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.955]                           info)
[16:12:12.955]                         info <- base::paste(info, collapse = "; ")
[16:12:12.955]                         if (!has_future) {
[16:12:12.955]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.955]                             info)
[16:12:12.955]                         }
[16:12:12.955]                         else {
[16:12:12.955]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.955]                             info, version)
[16:12:12.955]                         }
[16:12:12.955]                         base::stop(msg)
[16:12:12.955]                       }
[16:12:12.955]                     })
[16:12:12.955]                   }
[16:12:12.955]                   options(future.plan = NULL)
[16:12:12.955]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.955]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.955]                 }
[16:12:12.955]                 ...future.workdir <- getwd()
[16:12:12.955]             }
[16:12:12.955]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.955]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.955]         }
[16:12:12.955]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.955]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.955]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.955]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.955]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.955]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.955]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.955]             base::names(...future.oldOptions))
[16:12:12.955]     }
[16:12:12.955]     if (FALSE) {
[16:12:12.955]     }
[16:12:12.955]     else {
[16:12:12.955]         if (TRUE) {
[16:12:12.955]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.955]                 open = "w")
[16:12:12.955]         }
[16:12:12.955]         else {
[16:12:12.955]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.955]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.955]         }
[16:12:12.955]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.955]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.955]             base::sink(type = "output", split = FALSE)
[16:12:12.955]             base::close(...future.stdout)
[16:12:12.955]         }, add = TRUE)
[16:12:12.955]     }
[16:12:12.955]     ...future.frame <- base::sys.nframe()
[16:12:12.955]     ...future.conditions <- base::list()
[16:12:12.955]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.955]     if (FALSE) {
[16:12:12.955]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.955]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.955]     }
[16:12:12.955]     ...future.result <- base::tryCatch({
[16:12:12.955]         base::withCallingHandlers({
[16:12:12.955]             ...future.value <- base::withVisible(base::local(42))
[16:12:12.955]             future::FutureResult(value = ...future.value$value, 
[16:12:12.955]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.955]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.955]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.955]                     ...future.globalenv.names))
[16:12:12.955]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.955]         }, condition = base::local({
[16:12:12.955]             c <- base::c
[16:12:12.955]             inherits <- base::inherits
[16:12:12.955]             invokeRestart <- base::invokeRestart
[16:12:12.955]             length <- base::length
[16:12:12.955]             list <- base::list
[16:12:12.955]             seq.int <- base::seq.int
[16:12:12.955]             signalCondition <- base::signalCondition
[16:12:12.955]             sys.calls <- base::sys.calls
[16:12:12.955]             `[[` <- base::`[[`
[16:12:12.955]             `+` <- base::`+`
[16:12:12.955]             `<<-` <- base::`<<-`
[16:12:12.955]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.955]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.955]                   3L)]
[16:12:12.955]             }
[16:12:12.955]             function(cond) {
[16:12:12.955]                 is_error <- inherits(cond, "error")
[16:12:12.955]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.955]                   NULL)
[16:12:12.955]                 if (is_error) {
[16:12:12.955]                   sessionInformation <- function() {
[16:12:12.955]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.955]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.955]                       search = base::search(), system = base::Sys.info())
[16:12:12.955]                   }
[16:12:12.955]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.955]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.955]                     cond$call), session = sessionInformation(), 
[16:12:12.955]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.955]                   signalCondition(cond)
[16:12:12.955]                 }
[16:12:12.955]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.955]                 "immediateCondition"))) {
[16:12:12.955]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.955]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.955]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.955]                   if (TRUE && !signal) {
[16:12:12.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.955]                     {
[16:12:12.955]                       inherits <- base::inherits
[16:12:12.955]                       invokeRestart <- base::invokeRestart
[16:12:12.955]                       is.null <- base::is.null
[16:12:12.955]                       muffled <- FALSE
[16:12:12.955]                       if (inherits(cond, "message")) {
[16:12:12.955]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.955]                         if (muffled) 
[16:12:12.955]                           invokeRestart("muffleMessage")
[16:12:12.955]                       }
[16:12:12.955]                       else if (inherits(cond, "warning")) {
[16:12:12.955]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.955]                         if (muffled) 
[16:12:12.955]                           invokeRestart("muffleWarning")
[16:12:12.955]                       }
[16:12:12.955]                       else if (inherits(cond, "condition")) {
[16:12:12.955]                         if (!is.null(pattern)) {
[16:12:12.955]                           computeRestarts <- base::computeRestarts
[16:12:12.955]                           grepl <- base::grepl
[16:12:12.955]                           restarts <- computeRestarts(cond)
[16:12:12.955]                           for (restart in restarts) {
[16:12:12.955]                             name <- restart$name
[16:12:12.955]                             if (is.null(name)) 
[16:12:12.955]                               next
[16:12:12.955]                             if (!grepl(pattern, name)) 
[16:12:12.955]                               next
[16:12:12.955]                             invokeRestart(restart)
[16:12:12.955]                             muffled <- TRUE
[16:12:12.955]                             break
[16:12:12.955]                           }
[16:12:12.955]                         }
[16:12:12.955]                       }
[16:12:12.955]                       invisible(muffled)
[16:12:12.955]                     }
[16:12:12.955]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.955]                   }
[16:12:12.955]                 }
[16:12:12.955]                 else {
[16:12:12.955]                   if (TRUE) {
[16:12:12.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.955]                     {
[16:12:12.955]                       inherits <- base::inherits
[16:12:12.955]                       invokeRestart <- base::invokeRestart
[16:12:12.955]                       is.null <- base::is.null
[16:12:12.955]                       muffled <- FALSE
[16:12:12.955]                       if (inherits(cond, "message")) {
[16:12:12.955]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.955]                         if (muffled) 
[16:12:12.955]                           invokeRestart("muffleMessage")
[16:12:12.955]                       }
[16:12:12.955]                       else if (inherits(cond, "warning")) {
[16:12:12.955]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.955]                         if (muffled) 
[16:12:12.955]                           invokeRestart("muffleWarning")
[16:12:12.955]                       }
[16:12:12.955]                       else if (inherits(cond, "condition")) {
[16:12:12.955]                         if (!is.null(pattern)) {
[16:12:12.955]                           computeRestarts <- base::computeRestarts
[16:12:12.955]                           grepl <- base::grepl
[16:12:12.955]                           restarts <- computeRestarts(cond)
[16:12:12.955]                           for (restart in restarts) {
[16:12:12.955]                             name <- restart$name
[16:12:12.955]                             if (is.null(name)) 
[16:12:12.955]                               next
[16:12:12.955]                             if (!grepl(pattern, name)) 
[16:12:12.955]                               next
[16:12:12.955]                             invokeRestart(restart)
[16:12:12.955]                             muffled <- TRUE
[16:12:12.955]                             break
[16:12:12.955]                           }
[16:12:12.955]                         }
[16:12:12.955]                       }
[16:12:12.955]                       invisible(muffled)
[16:12:12.955]                     }
[16:12:12.955]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.955]                   }
[16:12:12.955]                 }
[16:12:12.955]             }
[16:12:12.955]         }))
[16:12:12.955]     }, error = function(ex) {
[16:12:12.955]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.955]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.955]                 ...future.rng), started = ...future.startTime, 
[16:12:12.955]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.955]             version = "1.8"), class = "FutureResult")
[16:12:12.955]     }, finally = {
[16:12:12.955]         if (!identical(...future.workdir, getwd())) 
[16:12:12.955]             setwd(...future.workdir)
[16:12:12.955]         {
[16:12:12.955]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.955]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.955]             }
[16:12:12.955]             base::options(...future.oldOptions)
[16:12:12.955]             if (.Platform$OS.type == "windows") {
[16:12:12.955]                 old_names <- names(...future.oldEnvVars)
[16:12:12.955]                 envs <- base::Sys.getenv()
[16:12:12.955]                 names <- names(envs)
[16:12:12.955]                 common <- intersect(names, old_names)
[16:12:12.955]                 added <- setdiff(names, old_names)
[16:12:12.955]                 removed <- setdiff(old_names, names)
[16:12:12.955]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.955]                   envs[common]]
[16:12:12.955]                 NAMES <- toupper(changed)
[16:12:12.955]                 args <- list()
[16:12:12.955]                 for (kk in seq_along(NAMES)) {
[16:12:12.955]                   name <- changed[[kk]]
[16:12:12.955]                   NAME <- NAMES[[kk]]
[16:12:12.955]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.955]                     next
[16:12:12.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.955]                 }
[16:12:12.955]                 NAMES <- toupper(added)
[16:12:12.955]                 for (kk in seq_along(NAMES)) {
[16:12:12.955]                   name <- added[[kk]]
[16:12:12.955]                   NAME <- NAMES[[kk]]
[16:12:12.955]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.955]                     next
[16:12:12.955]                   args[[name]] <- ""
[16:12:12.955]                 }
[16:12:12.955]                 NAMES <- toupper(removed)
[16:12:12.955]                 for (kk in seq_along(NAMES)) {
[16:12:12.955]                   name <- removed[[kk]]
[16:12:12.955]                   NAME <- NAMES[[kk]]
[16:12:12.955]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.955]                     next
[16:12:12.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.955]                 }
[16:12:12.955]                 if (length(args) > 0) 
[16:12:12.955]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.955]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.955]             }
[16:12:12.955]             else {
[16:12:12.955]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.955]             }
[16:12:12.955]             {
[16:12:12.955]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.955]                   0L) {
[16:12:12.955]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.955]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.955]                   base::options(opts)
[16:12:12.955]                 }
[16:12:12.955]                 {
[16:12:12.955]                   {
[16:12:12.955]                     NULL
[16:12:12.955]                     RNGkind("Mersenne-Twister")
[16:12:12.955]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.955]                       inherits = FALSE)
[16:12:12.955]                   }
[16:12:12.955]                   options(future.plan = NULL)
[16:12:12.955]                   if (is.na(NA_character_)) 
[16:12:12.955]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.955]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.955]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:12.955]                   {
[16:12:12.955]                     future <- SequentialFuture(..., envir = envir)
[16:12:12.955]                     if (!future$lazy) 
[16:12:12.955]                       future <- run(future)
[16:12:12.955]                     invisible(future)
[16:12:12.955]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.955]                 }
[16:12:12.955]             }
[16:12:12.955]         }
[16:12:12.955]     })
[16:12:12.955]     if (TRUE) {
[16:12:12.955]         base::sink(type = "output", split = FALSE)
[16:12:12.955]         if (TRUE) {
[16:12:12.955]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.955]         }
[16:12:12.955]         else {
[16:12:12.955]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.955]         }
[16:12:12.955]         base::close(...future.stdout)
[16:12:12.955]         ...future.stdout <- NULL
[16:12:12.955]     }
[16:12:12.955]     ...future.result$conditions <- ...future.conditions
[16:12:12.955]     ...future.result$finished <- base::Sys.time()
[16:12:12.955]     ...future.result
[16:12:12.955] }
[16:12:12.957] plan(): Setting new future strategy stack:
[16:12:12.957] List of future strategies:
[16:12:12.957] 1. sequential:
[16:12:12.957]    - args: function (..., envir = parent.frame())
[16:12:12.957]    - tweaked: FALSE
[16:12:12.957]    - call: NULL
[16:12:12.957] plan(): nbrOfWorkers() = 1
[16:12:12.958] plan(): Setting new future strategy stack:
[16:12:12.958] List of future strategies:
[16:12:12.958] 1. sequential:
[16:12:12.958]    - args: function (..., envir = parent.frame())
[16:12:12.958]    - tweaked: FALSE
[16:12:12.958]    - call: plan(strategy)
[16:12:12.959] plan(): nbrOfWorkers() = 1
[16:12:12.959] SequentialFuture started (and completed)
[16:12:12.959] - Launch lazy future ... done
[16:12:12.959] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.960] getGlobalsAndPackages() ...
[16:12:12.961] Searching for globals...
[16:12:12.962] - globals found: [1] ‘{’
[16:12:12.962] Searching for globals ... DONE
[16:12:12.962] Resolving globals: FALSE
[16:12:12.963] 
[16:12:12.963] 
[16:12:12.963] getGlobalsAndPackages() ... DONE
[16:12:12.963] run() for ‘Future’ ...
[16:12:12.963] - state: ‘created’
[16:12:12.963] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:12.963] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.964] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:12.964]   - Field: ‘label’
[16:12:12.964]   - Field: ‘local’
[16:12:12.964]   - Field: ‘owner’
[16:12:12.964]   - Field: ‘envir’
[16:12:12.964]   - Field: ‘packages’
[16:12:12.964]   - Field: ‘gc’
[16:12:12.964]   - Field: ‘conditions’
[16:12:12.964]   - Field: ‘expr’
[16:12:12.964]   - Field: ‘uuid’
[16:12:12.964]   - Field: ‘seed’
[16:12:12.965]   - Field: ‘version’
[16:12:12.965]   - Field: ‘result’
[16:12:12.965]   - Field: ‘asynchronous’
[16:12:12.965]   - Field: ‘calls’
[16:12:12.965]   - Field: ‘globals’
[16:12:12.965]   - Field: ‘stdout’
[16:12:12.965]   - Field: ‘earlySignal’
[16:12:12.965]   - Field: ‘lazy’
[16:12:12.965]   - Field: ‘state’
[16:12:12.965] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:12.965] - Launch lazy future ...
[16:12:12.967] Packages needed by the future expression (n = 0): <none>
[16:12:12.967] Packages needed by future strategies (n = 0): <none>
[16:12:12.968] {
[16:12:12.968]     {
[16:12:12.968]         {
[16:12:12.968]             ...future.startTime <- base::Sys.time()
[16:12:12.968]             {
[16:12:12.968]                 {
[16:12:12.968]                   {
[16:12:12.968]                     base::local({
[16:12:12.968]                       has_future <- base::requireNamespace("future", 
[16:12:12.968]                         quietly = TRUE)
[16:12:12.968]                       if (has_future) {
[16:12:12.968]                         ns <- base::getNamespace("future")
[16:12:12.968]                         version <- ns[[".package"]][["version"]]
[16:12:12.968]                         if (is.null(version)) 
[16:12:12.968]                           version <- utils::packageVersion("future")
[16:12:12.968]                       }
[16:12:12.968]                       else {
[16:12:12.968]                         version <- NULL
[16:12:12.968]                       }
[16:12:12.968]                       if (!has_future || version < "1.8.0") {
[16:12:12.968]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.968]                           "", base::R.version$version.string), 
[16:12:12.968]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.968]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.968]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.968]                             "release", "version")], collapse = " "), 
[16:12:12.968]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.968]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.968]                           info)
[16:12:12.968]                         info <- base::paste(info, collapse = "; ")
[16:12:12.968]                         if (!has_future) {
[16:12:12.968]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.968]                             info)
[16:12:12.968]                         }
[16:12:12.968]                         else {
[16:12:12.968]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.968]                             info, version)
[16:12:12.968]                         }
[16:12:12.968]                         base::stop(msg)
[16:12:12.968]                       }
[16:12:12.968]                     })
[16:12:12.968]                   }
[16:12:12.968]                   options(future.plan = NULL)
[16:12:12.968]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.968]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.968]                 }
[16:12:12.968]                 ...future.workdir <- getwd()
[16:12:12.968]             }
[16:12:12.968]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.968]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.968]         }
[16:12:12.968]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.968]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.968]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.968]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.968]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.968]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.968]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.968]             base::names(...future.oldOptions))
[16:12:12.968]     }
[16:12:12.968]     if (FALSE) {
[16:12:12.968]     }
[16:12:12.968]     else {
[16:12:12.968]         if (TRUE) {
[16:12:12.968]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.968]                 open = "w")
[16:12:12.968]         }
[16:12:12.968]         else {
[16:12:12.968]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.968]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.968]         }
[16:12:12.968]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.968]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.968]             base::sink(type = "output", split = FALSE)
[16:12:12.968]             base::close(...future.stdout)
[16:12:12.968]         }, add = TRUE)
[16:12:12.968]     }
[16:12:12.968]     ...future.frame <- base::sys.nframe()
[16:12:12.968]     ...future.conditions <- base::list()
[16:12:12.968]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.968]     if (FALSE) {
[16:12:12.968]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.968]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.968]     }
[16:12:12.968]     ...future.result <- base::tryCatch({
[16:12:12.968]         base::withCallingHandlers({
[16:12:12.968]             ...future.value <- base::withVisible(base::local({
[16:12:12.968]                 42
[16:12:12.968]             }))
[16:12:12.968]             future::FutureResult(value = ...future.value$value, 
[16:12:12.968]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.968]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.968]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.968]                     ...future.globalenv.names))
[16:12:12.968]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.968]         }, condition = base::local({
[16:12:12.968]             c <- base::c
[16:12:12.968]             inherits <- base::inherits
[16:12:12.968]             invokeRestart <- base::invokeRestart
[16:12:12.968]             length <- base::length
[16:12:12.968]             list <- base::list
[16:12:12.968]             seq.int <- base::seq.int
[16:12:12.968]             signalCondition <- base::signalCondition
[16:12:12.968]             sys.calls <- base::sys.calls
[16:12:12.968]             `[[` <- base::`[[`
[16:12:12.968]             `+` <- base::`+`
[16:12:12.968]             `<<-` <- base::`<<-`
[16:12:12.968]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.968]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.968]                   3L)]
[16:12:12.968]             }
[16:12:12.968]             function(cond) {
[16:12:12.968]                 is_error <- inherits(cond, "error")
[16:12:12.968]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.968]                   NULL)
[16:12:12.968]                 if (is_error) {
[16:12:12.968]                   sessionInformation <- function() {
[16:12:12.968]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.968]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.968]                       search = base::search(), system = base::Sys.info())
[16:12:12.968]                   }
[16:12:12.968]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.968]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.968]                     cond$call), session = sessionInformation(), 
[16:12:12.968]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.968]                   signalCondition(cond)
[16:12:12.968]                 }
[16:12:12.968]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.968]                 "immediateCondition"))) {
[16:12:12.968]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.968]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.968]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.968]                   if (TRUE && !signal) {
[16:12:12.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.968]                     {
[16:12:12.968]                       inherits <- base::inherits
[16:12:12.968]                       invokeRestart <- base::invokeRestart
[16:12:12.968]                       is.null <- base::is.null
[16:12:12.968]                       muffled <- FALSE
[16:12:12.968]                       if (inherits(cond, "message")) {
[16:12:12.968]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.968]                         if (muffled) 
[16:12:12.968]                           invokeRestart("muffleMessage")
[16:12:12.968]                       }
[16:12:12.968]                       else if (inherits(cond, "warning")) {
[16:12:12.968]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.968]                         if (muffled) 
[16:12:12.968]                           invokeRestart("muffleWarning")
[16:12:12.968]                       }
[16:12:12.968]                       else if (inherits(cond, "condition")) {
[16:12:12.968]                         if (!is.null(pattern)) {
[16:12:12.968]                           computeRestarts <- base::computeRestarts
[16:12:12.968]                           grepl <- base::grepl
[16:12:12.968]                           restarts <- computeRestarts(cond)
[16:12:12.968]                           for (restart in restarts) {
[16:12:12.968]                             name <- restart$name
[16:12:12.968]                             if (is.null(name)) 
[16:12:12.968]                               next
[16:12:12.968]                             if (!grepl(pattern, name)) 
[16:12:12.968]                               next
[16:12:12.968]                             invokeRestart(restart)
[16:12:12.968]                             muffled <- TRUE
[16:12:12.968]                             break
[16:12:12.968]                           }
[16:12:12.968]                         }
[16:12:12.968]                       }
[16:12:12.968]                       invisible(muffled)
[16:12:12.968]                     }
[16:12:12.968]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.968]                   }
[16:12:12.968]                 }
[16:12:12.968]                 else {
[16:12:12.968]                   if (TRUE) {
[16:12:12.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.968]                     {
[16:12:12.968]                       inherits <- base::inherits
[16:12:12.968]                       invokeRestart <- base::invokeRestart
[16:12:12.968]                       is.null <- base::is.null
[16:12:12.968]                       muffled <- FALSE
[16:12:12.968]                       if (inherits(cond, "message")) {
[16:12:12.968]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.968]                         if (muffled) 
[16:12:12.968]                           invokeRestart("muffleMessage")
[16:12:12.968]                       }
[16:12:12.968]                       else if (inherits(cond, "warning")) {
[16:12:12.968]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.968]                         if (muffled) 
[16:12:12.968]                           invokeRestart("muffleWarning")
[16:12:12.968]                       }
[16:12:12.968]                       else if (inherits(cond, "condition")) {
[16:12:12.968]                         if (!is.null(pattern)) {
[16:12:12.968]                           computeRestarts <- base::computeRestarts
[16:12:12.968]                           grepl <- base::grepl
[16:12:12.968]                           restarts <- computeRestarts(cond)
[16:12:12.968]                           for (restart in restarts) {
[16:12:12.968]                             name <- restart$name
[16:12:12.968]                             if (is.null(name)) 
[16:12:12.968]                               next
[16:12:12.968]                             if (!grepl(pattern, name)) 
[16:12:12.968]                               next
[16:12:12.968]                             invokeRestart(restart)
[16:12:12.968]                             muffled <- TRUE
[16:12:12.968]                             break
[16:12:12.968]                           }
[16:12:12.968]                         }
[16:12:12.968]                       }
[16:12:12.968]                       invisible(muffled)
[16:12:12.968]                     }
[16:12:12.968]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.968]                   }
[16:12:12.968]                 }
[16:12:12.968]             }
[16:12:12.968]         }))
[16:12:12.968]     }, error = function(ex) {
[16:12:12.968]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.968]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.968]                 ...future.rng), started = ...future.startTime, 
[16:12:12.968]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.968]             version = "1.8"), class = "FutureResult")
[16:12:12.968]     }, finally = {
[16:12:12.968]         if (!identical(...future.workdir, getwd())) 
[16:12:12.968]             setwd(...future.workdir)
[16:12:12.968]         {
[16:12:12.968]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.968]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.968]             }
[16:12:12.968]             base::options(...future.oldOptions)
[16:12:12.968]             if (.Platform$OS.type == "windows") {
[16:12:12.968]                 old_names <- names(...future.oldEnvVars)
[16:12:12.968]                 envs <- base::Sys.getenv()
[16:12:12.968]                 names <- names(envs)
[16:12:12.968]                 common <- intersect(names, old_names)
[16:12:12.968]                 added <- setdiff(names, old_names)
[16:12:12.968]                 removed <- setdiff(old_names, names)
[16:12:12.968]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.968]                   envs[common]]
[16:12:12.968]                 NAMES <- toupper(changed)
[16:12:12.968]                 args <- list()
[16:12:12.968]                 for (kk in seq_along(NAMES)) {
[16:12:12.968]                   name <- changed[[kk]]
[16:12:12.968]                   NAME <- NAMES[[kk]]
[16:12:12.968]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.968]                     next
[16:12:12.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.968]                 }
[16:12:12.968]                 NAMES <- toupper(added)
[16:12:12.968]                 for (kk in seq_along(NAMES)) {
[16:12:12.968]                   name <- added[[kk]]
[16:12:12.968]                   NAME <- NAMES[[kk]]
[16:12:12.968]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.968]                     next
[16:12:12.968]                   args[[name]] <- ""
[16:12:12.968]                 }
[16:12:12.968]                 NAMES <- toupper(removed)
[16:12:12.968]                 for (kk in seq_along(NAMES)) {
[16:12:12.968]                   name <- removed[[kk]]
[16:12:12.968]                   NAME <- NAMES[[kk]]
[16:12:12.968]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.968]                     next
[16:12:12.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.968]                 }
[16:12:12.968]                 if (length(args) > 0) 
[16:12:12.968]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.968]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.968]             }
[16:12:12.968]             else {
[16:12:12.968]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.968]             }
[16:12:12.968]             {
[16:12:12.968]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.968]                   0L) {
[16:12:12.968]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.968]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.968]                   base::options(opts)
[16:12:12.968]                 }
[16:12:12.968]                 {
[16:12:12.968]                   {
[16:12:12.968]                     NULL
[16:12:12.968]                     RNGkind("Mersenne-Twister")
[16:12:12.968]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.968]                       inherits = FALSE)
[16:12:12.968]                   }
[16:12:12.968]                   options(future.plan = NULL)
[16:12:12.968]                   if (is.na(NA_character_)) 
[16:12:12.968]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.968]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.968]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:12.968]                   {
[16:12:12.968]                     future <- SequentialFuture(..., envir = envir)
[16:12:12.968]                     if (!future$lazy) 
[16:12:12.968]                       future <- run(future)
[16:12:12.968]                     invisible(future)
[16:12:12.968]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.968]                 }
[16:12:12.968]             }
[16:12:12.968]         }
[16:12:12.968]     })
[16:12:12.968]     if (TRUE) {
[16:12:12.968]         base::sink(type = "output", split = FALSE)
[16:12:12.968]         if (TRUE) {
[16:12:12.968]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.968]         }
[16:12:12.968]         else {
[16:12:12.968]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.968]         }
[16:12:12.968]         base::close(...future.stdout)
[16:12:12.968]         ...future.stdout <- NULL
[16:12:12.968]     }
[16:12:12.968]     ...future.result$conditions <- ...future.conditions
[16:12:12.968]     ...future.result$finished <- base::Sys.time()
[16:12:12.968]     ...future.result
[16:12:12.968] }
[16:12:12.970] plan(): Setting new future strategy stack:
[16:12:12.970] List of future strategies:
[16:12:12.970] 1. sequential:
[16:12:12.970]    - args: function (..., envir = parent.frame())
[16:12:12.970]    - tweaked: FALSE
[16:12:12.970]    - call: NULL
[16:12:12.970] plan(): nbrOfWorkers() = 1
[16:12:12.971] plan(): Setting new future strategy stack:
[16:12:12.971] List of future strategies:
[16:12:12.971] 1. sequential:
[16:12:12.971]    - args: function (..., envir = parent.frame())
[16:12:12.971]    - tweaked: FALSE
[16:12:12.971]    - call: plan(strategy)
[16:12:12.971] plan(): nbrOfWorkers() = 1
[16:12:12.971] SequentialFuture started (and completed)
[16:12:12.972] - Launch lazy future ... done
[16:12:12.972] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.972] getGlobalsAndPackages() ...
[16:12:12.973] Searching for globals...
[16:12:12.973] 
[16:12:12.973] Searching for globals ... DONE
[16:12:12.973] - globals: [0] <none>
[16:12:12.973] getGlobalsAndPackages() ... DONE
[16:12:12.973] Packages needed by the future expression (n = 0): <none>
[16:12:12.973] Packages needed by future strategies (n = 0): <none>
[16:12:12.974] {
[16:12:12.974]     {
[16:12:12.974]         {
[16:12:12.974]             ...future.startTime <- base::Sys.time()
[16:12:12.974]             {
[16:12:12.974]                 {
[16:12:12.974]                   {
[16:12:12.974]                     base::local({
[16:12:12.974]                       has_future <- base::requireNamespace("future", 
[16:12:12.974]                         quietly = TRUE)
[16:12:12.974]                       if (has_future) {
[16:12:12.974]                         ns <- base::getNamespace("future")
[16:12:12.974]                         version <- ns[[".package"]][["version"]]
[16:12:12.974]                         if (is.null(version)) 
[16:12:12.974]                           version <- utils::packageVersion("future")
[16:12:12.974]                       }
[16:12:12.974]                       else {
[16:12:12.974]                         version <- NULL
[16:12:12.974]                       }
[16:12:12.974]                       if (!has_future || version < "1.8.0") {
[16:12:12.974]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.974]                           "", base::R.version$version.string), 
[16:12:12.974]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.974]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.974]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.974]                             "release", "version")], collapse = " "), 
[16:12:12.974]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.974]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.974]                           info)
[16:12:12.974]                         info <- base::paste(info, collapse = "; ")
[16:12:12.974]                         if (!has_future) {
[16:12:12.974]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.974]                             info)
[16:12:12.974]                         }
[16:12:12.974]                         else {
[16:12:12.974]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.974]                             info, version)
[16:12:12.974]                         }
[16:12:12.974]                         base::stop(msg)
[16:12:12.974]                       }
[16:12:12.974]                     })
[16:12:12.974]                   }
[16:12:12.974]                   options(future.plan = NULL)
[16:12:12.974]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.974]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.974]                 }
[16:12:12.974]                 ...future.workdir <- getwd()
[16:12:12.974]             }
[16:12:12.974]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.974]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.974]         }
[16:12:12.974]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.974]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.974]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.974]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.974]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.974]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.974]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.974]             base::names(...future.oldOptions))
[16:12:12.974]     }
[16:12:12.974]     if (FALSE) {
[16:12:12.974]     }
[16:12:12.974]     else {
[16:12:12.974]         if (TRUE) {
[16:12:12.974]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.974]                 open = "w")
[16:12:12.974]         }
[16:12:12.974]         else {
[16:12:12.974]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.974]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.974]         }
[16:12:12.974]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.974]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.974]             base::sink(type = "output", split = FALSE)
[16:12:12.974]             base::close(...future.stdout)
[16:12:12.974]         }, add = TRUE)
[16:12:12.974]     }
[16:12:12.974]     ...future.frame <- base::sys.nframe()
[16:12:12.974]     ...future.conditions <- base::list()
[16:12:12.974]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.974]     if (FALSE) {
[16:12:12.974]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.974]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.974]     }
[16:12:12.974]     ...future.result <- base::tryCatch({
[16:12:12.974]         base::withCallingHandlers({
[16:12:12.974]             ...future.value <- base::withVisible(base::local(42))
[16:12:12.974]             future::FutureResult(value = ...future.value$value, 
[16:12:12.974]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.974]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.974]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.974]                     ...future.globalenv.names))
[16:12:12.974]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.974]         }, condition = base::local({
[16:12:12.974]             c <- base::c
[16:12:12.974]             inherits <- base::inherits
[16:12:12.974]             invokeRestart <- base::invokeRestart
[16:12:12.974]             length <- base::length
[16:12:12.974]             list <- base::list
[16:12:12.974]             seq.int <- base::seq.int
[16:12:12.974]             signalCondition <- base::signalCondition
[16:12:12.974]             sys.calls <- base::sys.calls
[16:12:12.974]             `[[` <- base::`[[`
[16:12:12.974]             `+` <- base::`+`
[16:12:12.974]             `<<-` <- base::`<<-`
[16:12:12.974]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.974]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.974]                   3L)]
[16:12:12.974]             }
[16:12:12.974]             function(cond) {
[16:12:12.974]                 is_error <- inherits(cond, "error")
[16:12:12.974]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.974]                   NULL)
[16:12:12.974]                 if (is_error) {
[16:12:12.974]                   sessionInformation <- function() {
[16:12:12.974]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.974]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.974]                       search = base::search(), system = base::Sys.info())
[16:12:12.974]                   }
[16:12:12.974]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.974]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.974]                     cond$call), session = sessionInformation(), 
[16:12:12.974]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.974]                   signalCondition(cond)
[16:12:12.974]                 }
[16:12:12.974]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.974]                 "immediateCondition"))) {
[16:12:12.974]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.974]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.974]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.974]                   if (TRUE && !signal) {
[16:12:12.974]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.974]                     {
[16:12:12.974]                       inherits <- base::inherits
[16:12:12.974]                       invokeRestart <- base::invokeRestart
[16:12:12.974]                       is.null <- base::is.null
[16:12:12.974]                       muffled <- FALSE
[16:12:12.974]                       if (inherits(cond, "message")) {
[16:12:12.974]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.974]                         if (muffled) 
[16:12:12.974]                           invokeRestart("muffleMessage")
[16:12:12.974]                       }
[16:12:12.974]                       else if (inherits(cond, "warning")) {
[16:12:12.974]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.974]                         if (muffled) 
[16:12:12.974]                           invokeRestart("muffleWarning")
[16:12:12.974]                       }
[16:12:12.974]                       else if (inherits(cond, "condition")) {
[16:12:12.974]                         if (!is.null(pattern)) {
[16:12:12.974]                           computeRestarts <- base::computeRestarts
[16:12:12.974]                           grepl <- base::grepl
[16:12:12.974]                           restarts <- computeRestarts(cond)
[16:12:12.974]                           for (restart in restarts) {
[16:12:12.974]                             name <- restart$name
[16:12:12.974]                             if (is.null(name)) 
[16:12:12.974]                               next
[16:12:12.974]                             if (!grepl(pattern, name)) 
[16:12:12.974]                               next
[16:12:12.974]                             invokeRestart(restart)
[16:12:12.974]                             muffled <- TRUE
[16:12:12.974]                             break
[16:12:12.974]                           }
[16:12:12.974]                         }
[16:12:12.974]                       }
[16:12:12.974]                       invisible(muffled)
[16:12:12.974]                     }
[16:12:12.974]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.974]                   }
[16:12:12.974]                 }
[16:12:12.974]                 else {
[16:12:12.974]                   if (TRUE) {
[16:12:12.974]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.974]                     {
[16:12:12.974]                       inherits <- base::inherits
[16:12:12.974]                       invokeRestart <- base::invokeRestart
[16:12:12.974]                       is.null <- base::is.null
[16:12:12.974]                       muffled <- FALSE
[16:12:12.974]                       if (inherits(cond, "message")) {
[16:12:12.974]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.974]                         if (muffled) 
[16:12:12.974]                           invokeRestart("muffleMessage")
[16:12:12.974]                       }
[16:12:12.974]                       else if (inherits(cond, "warning")) {
[16:12:12.974]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.974]                         if (muffled) 
[16:12:12.974]                           invokeRestart("muffleWarning")
[16:12:12.974]                       }
[16:12:12.974]                       else if (inherits(cond, "condition")) {
[16:12:12.974]                         if (!is.null(pattern)) {
[16:12:12.974]                           computeRestarts <- base::computeRestarts
[16:12:12.974]                           grepl <- base::grepl
[16:12:12.974]                           restarts <- computeRestarts(cond)
[16:12:12.974]                           for (restart in restarts) {
[16:12:12.974]                             name <- restart$name
[16:12:12.974]                             if (is.null(name)) 
[16:12:12.974]                               next
[16:12:12.974]                             if (!grepl(pattern, name)) 
[16:12:12.974]                               next
[16:12:12.974]                             invokeRestart(restart)
[16:12:12.974]                             muffled <- TRUE
[16:12:12.974]                             break
[16:12:12.974]                           }
[16:12:12.974]                         }
[16:12:12.974]                       }
[16:12:12.974]                       invisible(muffled)
[16:12:12.974]                     }
[16:12:12.974]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.974]                   }
[16:12:12.974]                 }
[16:12:12.974]             }
[16:12:12.974]         }))
[16:12:12.974]     }, error = function(ex) {
[16:12:12.974]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.974]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.974]                 ...future.rng), started = ...future.startTime, 
[16:12:12.974]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.974]             version = "1.8"), class = "FutureResult")
[16:12:12.974]     }, finally = {
[16:12:12.974]         if (!identical(...future.workdir, getwd())) 
[16:12:12.974]             setwd(...future.workdir)
[16:12:12.974]         {
[16:12:12.974]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.974]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.974]             }
[16:12:12.974]             base::options(...future.oldOptions)
[16:12:12.974]             if (.Platform$OS.type == "windows") {
[16:12:12.974]                 old_names <- names(...future.oldEnvVars)
[16:12:12.974]                 envs <- base::Sys.getenv()
[16:12:12.974]                 names <- names(envs)
[16:12:12.974]                 common <- intersect(names, old_names)
[16:12:12.974]                 added <- setdiff(names, old_names)
[16:12:12.974]                 removed <- setdiff(old_names, names)
[16:12:12.974]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.974]                   envs[common]]
[16:12:12.974]                 NAMES <- toupper(changed)
[16:12:12.974]                 args <- list()
[16:12:12.974]                 for (kk in seq_along(NAMES)) {
[16:12:12.974]                   name <- changed[[kk]]
[16:12:12.974]                   NAME <- NAMES[[kk]]
[16:12:12.974]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.974]                     next
[16:12:12.974]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.974]                 }
[16:12:12.974]                 NAMES <- toupper(added)
[16:12:12.974]                 for (kk in seq_along(NAMES)) {
[16:12:12.974]                   name <- added[[kk]]
[16:12:12.974]                   NAME <- NAMES[[kk]]
[16:12:12.974]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.974]                     next
[16:12:12.974]                   args[[name]] <- ""
[16:12:12.974]                 }
[16:12:12.974]                 NAMES <- toupper(removed)
[16:12:12.974]                 for (kk in seq_along(NAMES)) {
[16:12:12.974]                   name <- removed[[kk]]
[16:12:12.974]                   NAME <- NAMES[[kk]]
[16:12:12.974]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.974]                     next
[16:12:12.974]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.974]                 }
[16:12:12.974]                 if (length(args) > 0) 
[16:12:12.974]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.974]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.974]             }
[16:12:12.974]             else {
[16:12:12.974]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.974]             }
[16:12:12.974]             {
[16:12:12.974]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.974]                   0L) {
[16:12:12.974]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.974]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.974]                   base::options(opts)
[16:12:12.974]                 }
[16:12:12.974]                 {
[16:12:12.974]                   {
[16:12:12.974]                     NULL
[16:12:12.974]                     RNGkind("Mersenne-Twister")
[16:12:12.974]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.974]                       inherits = FALSE)
[16:12:12.974]                   }
[16:12:12.974]                   options(future.plan = NULL)
[16:12:12.974]                   if (is.na(NA_character_)) 
[16:12:12.974]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.974]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.974]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:12.974]                   {
[16:12:12.974]                     future <- SequentialFuture(..., envir = envir)
[16:12:12.974]                     if (!future$lazy) 
[16:12:12.974]                       future <- run(future)
[16:12:12.974]                     invisible(future)
[16:12:12.974]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.974]                 }
[16:12:12.974]             }
[16:12:12.974]         }
[16:12:12.974]     })
[16:12:12.974]     if (TRUE) {
[16:12:12.974]         base::sink(type = "output", split = FALSE)
[16:12:12.974]         if (TRUE) {
[16:12:12.974]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.974]         }
[16:12:12.974]         else {
[16:12:12.974]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.974]         }
[16:12:12.974]         base::close(...future.stdout)
[16:12:12.974]         ...future.stdout <- NULL
[16:12:12.974]     }
[16:12:12.974]     ...future.result$conditions <- ...future.conditions
[16:12:12.974]     ...future.result$finished <- base::Sys.time()
[16:12:12.974]     ...future.result
[16:12:12.974] }
[16:12:12.975] plan(): Setting new future strategy stack:
[16:12:12.976] List of future strategies:
[16:12:12.976] 1. sequential:
[16:12:12.976]    - args: function (..., envir = parent.frame())
[16:12:12.976]    - tweaked: FALSE
[16:12:12.976]    - call: NULL
[16:12:12.976] plan(): nbrOfWorkers() = 1
[16:12:12.977] plan(): Setting new future strategy stack:
[16:12:12.977] List of future strategies:
[16:12:12.977] 1. sequential:
[16:12:12.977]    - args: function (..., envir = parent.frame())
[16:12:12.977]    - tweaked: FALSE
[16:12:12.977]    - call: plan(strategy)
[16:12:12.977] plan(): nbrOfWorkers() = 1
[16:12:12.977] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.978] getGlobalsAndPackages() ...
[16:12:12.978] Searching for globals...
[16:12:12.978] 
[16:12:12.978] Searching for globals ... DONE
[16:12:12.978] - globals: [0] <none>
[16:12:12.978] getGlobalsAndPackages() ... DONE
[16:12:12.979] run() for ‘Future’ ...
[16:12:12.979] - state: ‘created’
[16:12:12.979] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:12.979] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.979] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:12.979]   - Field: ‘label’
[16:12:12.979]   - Field: ‘local’
[16:12:12.980]   - Field: ‘owner’
[16:12:12.980]   - Field: ‘envir’
[16:12:12.980]   - Field: ‘packages’
[16:12:12.980]   - Field: ‘gc’
[16:12:12.980]   - Field: ‘conditions’
[16:12:12.980]   - Field: ‘expr’
[16:12:12.980]   - Field: ‘uuid’
[16:12:12.980]   - Field: ‘seed’
[16:12:12.980]   - Field: ‘version’
[16:12:12.980]   - Field: ‘result’
[16:12:12.980]   - Field: ‘asynchronous’
[16:12:12.981]   - Field: ‘calls’
[16:12:12.981]   - Field: ‘globals’
[16:12:12.981]   - Field: ‘stdout’
[16:12:12.981]   - Field: ‘earlySignal’
[16:12:12.981]   - Field: ‘lazy’
[16:12:12.981]   - Field: ‘state’
[16:12:12.981] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:12.981] - Launch lazy future ...
[16:12:12.981] Packages needed by the future expression (n = 0): <none>
[16:12:12.981] Packages needed by future strategies (n = 0): <none>
[16:12:12.982] {
[16:12:12.982]     {
[16:12:12.982]         {
[16:12:12.982]             ...future.startTime <- base::Sys.time()
[16:12:12.982]             {
[16:12:12.982]                 {
[16:12:12.982]                   {
[16:12:12.982]                     base::local({
[16:12:12.982]                       has_future <- base::requireNamespace("future", 
[16:12:12.982]                         quietly = TRUE)
[16:12:12.982]                       if (has_future) {
[16:12:12.982]                         ns <- base::getNamespace("future")
[16:12:12.982]                         version <- ns[[".package"]][["version"]]
[16:12:12.982]                         if (is.null(version)) 
[16:12:12.982]                           version <- utils::packageVersion("future")
[16:12:12.982]                       }
[16:12:12.982]                       else {
[16:12:12.982]                         version <- NULL
[16:12:12.982]                       }
[16:12:12.982]                       if (!has_future || version < "1.8.0") {
[16:12:12.982]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.982]                           "", base::R.version$version.string), 
[16:12:12.982]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.982]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.982]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.982]                             "release", "version")], collapse = " "), 
[16:12:12.982]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.982]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.982]                           info)
[16:12:12.982]                         info <- base::paste(info, collapse = "; ")
[16:12:12.982]                         if (!has_future) {
[16:12:12.982]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.982]                             info)
[16:12:12.982]                         }
[16:12:12.982]                         else {
[16:12:12.982]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.982]                             info, version)
[16:12:12.982]                         }
[16:12:12.982]                         base::stop(msg)
[16:12:12.982]                       }
[16:12:12.982]                     })
[16:12:12.982]                   }
[16:12:12.982]                   options(future.plan = NULL)
[16:12:12.982]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.982]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.982]                 }
[16:12:12.982]                 ...future.workdir <- getwd()
[16:12:12.982]             }
[16:12:12.982]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.982]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.982]         }
[16:12:12.982]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.982]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.982]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.982]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.982]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.982]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.982]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.982]             base::names(...future.oldOptions))
[16:12:12.982]     }
[16:12:12.982]     if (FALSE) {
[16:12:12.982]     }
[16:12:12.982]     else {
[16:12:12.982]         if (TRUE) {
[16:12:12.982]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.982]                 open = "w")
[16:12:12.982]         }
[16:12:12.982]         else {
[16:12:12.982]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.982]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.982]         }
[16:12:12.982]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.982]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.982]             base::sink(type = "output", split = FALSE)
[16:12:12.982]             base::close(...future.stdout)
[16:12:12.982]         }, add = TRUE)
[16:12:12.982]     }
[16:12:12.982]     ...future.frame <- base::sys.nframe()
[16:12:12.982]     ...future.conditions <- base::list()
[16:12:12.982]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.982]     if (FALSE) {
[16:12:12.982]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.982]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.982]     }
[16:12:12.982]     ...future.result <- base::tryCatch({
[16:12:12.982]         base::withCallingHandlers({
[16:12:12.982]             ...future.value <- base::withVisible(base::local(42))
[16:12:12.982]             future::FutureResult(value = ...future.value$value, 
[16:12:12.982]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.982]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.982]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.982]                     ...future.globalenv.names))
[16:12:12.982]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.982]         }, condition = base::local({
[16:12:12.982]             c <- base::c
[16:12:12.982]             inherits <- base::inherits
[16:12:12.982]             invokeRestart <- base::invokeRestart
[16:12:12.982]             length <- base::length
[16:12:12.982]             list <- base::list
[16:12:12.982]             seq.int <- base::seq.int
[16:12:12.982]             signalCondition <- base::signalCondition
[16:12:12.982]             sys.calls <- base::sys.calls
[16:12:12.982]             `[[` <- base::`[[`
[16:12:12.982]             `+` <- base::`+`
[16:12:12.982]             `<<-` <- base::`<<-`
[16:12:12.982]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.982]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.982]                   3L)]
[16:12:12.982]             }
[16:12:12.982]             function(cond) {
[16:12:12.982]                 is_error <- inherits(cond, "error")
[16:12:12.982]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.982]                   NULL)
[16:12:12.982]                 if (is_error) {
[16:12:12.982]                   sessionInformation <- function() {
[16:12:12.982]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.982]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.982]                       search = base::search(), system = base::Sys.info())
[16:12:12.982]                   }
[16:12:12.982]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.982]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.982]                     cond$call), session = sessionInformation(), 
[16:12:12.982]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.982]                   signalCondition(cond)
[16:12:12.982]                 }
[16:12:12.982]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.982]                 "immediateCondition"))) {
[16:12:12.982]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.982]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.982]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.982]                   if (TRUE && !signal) {
[16:12:12.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.982]                     {
[16:12:12.982]                       inherits <- base::inherits
[16:12:12.982]                       invokeRestart <- base::invokeRestart
[16:12:12.982]                       is.null <- base::is.null
[16:12:12.982]                       muffled <- FALSE
[16:12:12.982]                       if (inherits(cond, "message")) {
[16:12:12.982]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.982]                         if (muffled) 
[16:12:12.982]                           invokeRestart("muffleMessage")
[16:12:12.982]                       }
[16:12:12.982]                       else if (inherits(cond, "warning")) {
[16:12:12.982]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.982]                         if (muffled) 
[16:12:12.982]                           invokeRestart("muffleWarning")
[16:12:12.982]                       }
[16:12:12.982]                       else if (inherits(cond, "condition")) {
[16:12:12.982]                         if (!is.null(pattern)) {
[16:12:12.982]                           computeRestarts <- base::computeRestarts
[16:12:12.982]                           grepl <- base::grepl
[16:12:12.982]                           restarts <- computeRestarts(cond)
[16:12:12.982]                           for (restart in restarts) {
[16:12:12.982]                             name <- restart$name
[16:12:12.982]                             if (is.null(name)) 
[16:12:12.982]                               next
[16:12:12.982]                             if (!grepl(pattern, name)) 
[16:12:12.982]                               next
[16:12:12.982]                             invokeRestart(restart)
[16:12:12.982]                             muffled <- TRUE
[16:12:12.982]                             break
[16:12:12.982]                           }
[16:12:12.982]                         }
[16:12:12.982]                       }
[16:12:12.982]                       invisible(muffled)
[16:12:12.982]                     }
[16:12:12.982]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.982]                   }
[16:12:12.982]                 }
[16:12:12.982]                 else {
[16:12:12.982]                   if (TRUE) {
[16:12:12.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.982]                     {
[16:12:12.982]                       inherits <- base::inherits
[16:12:12.982]                       invokeRestart <- base::invokeRestart
[16:12:12.982]                       is.null <- base::is.null
[16:12:12.982]                       muffled <- FALSE
[16:12:12.982]                       if (inherits(cond, "message")) {
[16:12:12.982]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.982]                         if (muffled) 
[16:12:12.982]                           invokeRestart("muffleMessage")
[16:12:12.982]                       }
[16:12:12.982]                       else if (inherits(cond, "warning")) {
[16:12:12.982]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.982]                         if (muffled) 
[16:12:12.982]                           invokeRestart("muffleWarning")
[16:12:12.982]                       }
[16:12:12.982]                       else if (inherits(cond, "condition")) {
[16:12:12.982]                         if (!is.null(pattern)) {
[16:12:12.982]                           computeRestarts <- base::computeRestarts
[16:12:12.982]                           grepl <- base::grepl
[16:12:12.982]                           restarts <- computeRestarts(cond)
[16:12:12.982]                           for (restart in restarts) {
[16:12:12.982]                             name <- restart$name
[16:12:12.982]                             if (is.null(name)) 
[16:12:12.982]                               next
[16:12:12.982]                             if (!grepl(pattern, name)) 
[16:12:12.982]                               next
[16:12:12.982]                             invokeRestart(restart)
[16:12:12.982]                             muffled <- TRUE
[16:12:12.982]                             break
[16:12:12.982]                           }
[16:12:12.982]                         }
[16:12:12.982]                       }
[16:12:12.982]                       invisible(muffled)
[16:12:12.982]                     }
[16:12:12.982]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.982]                   }
[16:12:12.982]                 }
[16:12:12.982]             }
[16:12:12.982]         }))
[16:12:12.982]     }, error = function(ex) {
[16:12:12.982]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.982]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.982]                 ...future.rng), started = ...future.startTime, 
[16:12:12.982]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.982]             version = "1.8"), class = "FutureResult")
[16:12:12.982]     }, finally = {
[16:12:12.982]         if (!identical(...future.workdir, getwd())) 
[16:12:12.982]             setwd(...future.workdir)
[16:12:12.982]         {
[16:12:12.982]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.982]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.982]             }
[16:12:12.982]             base::options(...future.oldOptions)
[16:12:12.982]             if (.Platform$OS.type == "windows") {
[16:12:12.982]                 old_names <- names(...future.oldEnvVars)
[16:12:12.982]                 envs <- base::Sys.getenv()
[16:12:12.982]                 names <- names(envs)
[16:12:12.982]                 common <- intersect(names, old_names)
[16:12:12.982]                 added <- setdiff(names, old_names)
[16:12:12.982]                 removed <- setdiff(old_names, names)
[16:12:12.982]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.982]                   envs[common]]
[16:12:12.982]                 NAMES <- toupper(changed)
[16:12:12.982]                 args <- list()
[16:12:12.982]                 for (kk in seq_along(NAMES)) {
[16:12:12.982]                   name <- changed[[kk]]
[16:12:12.982]                   NAME <- NAMES[[kk]]
[16:12:12.982]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.982]                     next
[16:12:12.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.982]                 }
[16:12:12.982]                 NAMES <- toupper(added)
[16:12:12.982]                 for (kk in seq_along(NAMES)) {
[16:12:12.982]                   name <- added[[kk]]
[16:12:12.982]                   NAME <- NAMES[[kk]]
[16:12:12.982]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.982]                     next
[16:12:12.982]                   args[[name]] <- ""
[16:12:12.982]                 }
[16:12:12.982]                 NAMES <- toupper(removed)
[16:12:12.982]                 for (kk in seq_along(NAMES)) {
[16:12:12.982]                   name <- removed[[kk]]
[16:12:12.982]                   NAME <- NAMES[[kk]]
[16:12:12.982]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.982]                     next
[16:12:12.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.982]                 }
[16:12:12.982]                 if (length(args) > 0) 
[16:12:12.982]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.982]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.982]             }
[16:12:12.982]             else {
[16:12:12.982]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.982]             }
[16:12:12.982]             {
[16:12:12.982]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.982]                   0L) {
[16:12:12.982]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.982]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.982]                   base::options(opts)
[16:12:12.982]                 }
[16:12:12.982]                 {
[16:12:12.982]                   {
[16:12:12.982]                     NULL
[16:12:12.982]                     RNGkind("Mersenne-Twister")
[16:12:12.982]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.982]                       inherits = FALSE)
[16:12:12.982]                   }
[16:12:12.982]                   options(future.plan = NULL)
[16:12:12.982]                   if (is.na(NA_character_)) 
[16:12:12.982]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.982]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.982]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:12.982]                   {
[16:12:12.982]                     future <- SequentialFuture(..., envir = envir)
[16:12:12.982]                     if (!future$lazy) 
[16:12:12.982]                       future <- run(future)
[16:12:12.982]                     invisible(future)
[16:12:12.982]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.982]                 }
[16:12:12.982]             }
[16:12:12.982]         }
[16:12:12.982]     })
[16:12:12.982]     if (TRUE) {
[16:12:12.982]         base::sink(type = "output", split = FALSE)
[16:12:12.982]         if (TRUE) {
[16:12:12.982]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.982]         }
[16:12:12.982]         else {
[16:12:12.982]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.982]         }
[16:12:12.982]         base::close(...future.stdout)
[16:12:12.982]         ...future.stdout <- NULL
[16:12:12.982]     }
[16:12:12.982]     ...future.result$conditions <- ...future.conditions
[16:12:12.982]     ...future.result$finished <- base::Sys.time()
[16:12:12.982]     ...future.result
[16:12:12.982] }
[16:12:12.984] plan(): Setting new future strategy stack:
[16:12:12.984] List of future strategies:
[16:12:12.984] 1. sequential:
[16:12:12.984]    - args: function (..., envir = parent.frame())
[16:12:12.984]    - tweaked: FALSE
[16:12:12.984]    - call: NULL
[16:12:12.984] plan(): nbrOfWorkers() = 1
[16:12:12.985] plan(): Setting new future strategy stack:
[16:12:12.985] List of future strategies:
[16:12:12.985] 1. sequential:
[16:12:12.985]    - args: function (..., envir = parent.frame())
[16:12:12.985]    - tweaked: FALSE
[16:12:12.985]    - call: plan(strategy)
[16:12:12.985] plan(): nbrOfWorkers() = 1
[16:12:12.985] SequentialFuture started (and completed)
[16:12:12.985] - Launch lazy future ... done
[16:12:12.985] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.986] getGlobalsAndPackages() ...
[16:12:12.986] Searching for globals...
[16:12:12.987] - globals found: [1] ‘{’
[16:12:12.987] Searching for globals ... DONE
[16:12:12.987] Resolving globals: FALSE
[16:12:12.987] 
[16:12:12.987] 
[16:12:12.987] getGlobalsAndPackages() ... DONE
[16:12:12.988] run() for ‘Future’ ...
[16:12:12.988] - state: ‘created’
[16:12:12.988] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:12.988] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.988] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:12.988]   - Field: ‘label’
[16:12:12.988]   - Field: ‘local’
[16:12:12.988]   - Field: ‘owner’
[16:12:12.989]   - Field: ‘envir’
[16:12:12.989]   - Field: ‘packages’
[16:12:12.989]   - Field: ‘gc’
[16:12:12.989]   - Field: ‘conditions’
[16:12:12.989]   - Field: ‘expr’
[16:12:12.989]   - Field: ‘uuid’
[16:12:12.989]   - Field: ‘seed’
[16:12:12.989]   - Field: ‘version’
[16:12:12.989]   - Field: ‘result’
[16:12:12.989]   - Field: ‘asynchronous’
[16:12:12.989]   - Field: ‘calls’
[16:12:12.990]   - Field: ‘globals’
[16:12:12.990]   - Field: ‘stdout’
[16:12:12.990]   - Field: ‘earlySignal’
[16:12:12.990]   - Field: ‘lazy’
[16:12:12.990]   - Field: ‘state’
[16:12:12.990] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:12.990] - Launch lazy future ...
[16:12:12.990] Packages needed by the future expression (n = 0): <none>
[16:12:12.990] Packages needed by future strategies (n = 0): <none>
[16:12:12.991] {
[16:12:12.991]     {
[16:12:12.991]         {
[16:12:12.991]             ...future.startTime <- base::Sys.time()
[16:12:12.991]             {
[16:12:12.991]                 {
[16:12:12.991]                   {
[16:12:12.991]                     base::local({
[16:12:12.991]                       has_future <- base::requireNamespace("future", 
[16:12:12.991]                         quietly = TRUE)
[16:12:12.991]                       if (has_future) {
[16:12:12.991]                         ns <- base::getNamespace("future")
[16:12:12.991]                         version <- ns[[".package"]][["version"]]
[16:12:12.991]                         if (is.null(version)) 
[16:12:12.991]                           version <- utils::packageVersion("future")
[16:12:12.991]                       }
[16:12:12.991]                       else {
[16:12:12.991]                         version <- NULL
[16:12:12.991]                       }
[16:12:12.991]                       if (!has_future || version < "1.8.0") {
[16:12:12.991]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.991]                           "", base::R.version$version.string), 
[16:12:12.991]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.991]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.991]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.991]                             "release", "version")], collapse = " "), 
[16:12:12.991]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.991]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.991]                           info)
[16:12:12.991]                         info <- base::paste(info, collapse = "; ")
[16:12:12.991]                         if (!has_future) {
[16:12:12.991]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.991]                             info)
[16:12:12.991]                         }
[16:12:12.991]                         else {
[16:12:12.991]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.991]                             info, version)
[16:12:12.991]                         }
[16:12:12.991]                         base::stop(msg)
[16:12:12.991]                       }
[16:12:12.991]                     })
[16:12:12.991]                   }
[16:12:12.991]                   options(future.plan = NULL)
[16:12:12.991]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.991]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.991]                 }
[16:12:12.991]                 ...future.workdir <- getwd()
[16:12:12.991]             }
[16:12:12.991]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.991]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.991]         }
[16:12:12.991]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.991]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.991]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.991]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.991]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.991]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.991]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.991]             base::names(...future.oldOptions))
[16:12:12.991]     }
[16:12:12.991]     if (FALSE) {
[16:12:12.991]     }
[16:12:12.991]     else {
[16:12:12.991]         if (TRUE) {
[16:12:12.991]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.991]                 open = "w")
[16:12:12.991]         }
[16:12:12.991]         else {
[16:12:12.991]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.991]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.991]         }
[16:12:12.991]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.991]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.991]             base::sink(type = "output", split = FALSE)
[16:12:12.991]             base::close(...future.stdout)
[16:12:12.991]         }, add = TRUE)
[16:12:12.991]     }
[16:12:12.991]     ...future.frame <- base::sys.nframe()
[16:12:12.991]     ...future.conditions <- base::list()
[16:12:12.991]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.991]     if (FALSE) {
[16:12:12.991]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.991]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.991]     }
[16:12:12.991]     ...future.result <- base::tryCatch({
[16:12:12.991]         base::withCallingHandlers({
[16:12:12.991]             ...future.value <- base::withVisible(base::local({
[16:12:12.991]                 42
[16:12:12.991]             }))
[16:12:12.991]             future::FutureResult(value = ...future.value$value, 
[16:12:12.991]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.991]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.991]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.991]                     ...future.globalenv.names))
[16:12:12.991]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.991]         }, condition = base::local({
[16:12:12.991]             c <- base::c
[16:12:12.991]             inherits <- base::inherits
[16:12:12.991]             invokeRestart <- base::invokeRestart
[16:12:12.991]             length <- base::length
[16:12:12.991]             list <- base::list
[16:12:12.991]             seq.int <- base::seq.int
[16:12:12.991]             signalCondition <- base::signalCondition
[16:12:12.991]             sys.calls <- base::sys.calls
[16:12:12.991]             `[[` <- base::`[[`
[16:12:12.991]             `+` <- base::`+`
[16:12:12.991]             `<<-` <- base::`<<-`
[16:12:12.991]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.991]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.991]                   3L)]
[16:12:12.991]             }
[16:12:12.991]             function(cond) {
[16:12:12.991]                 is_error <- inherits(cond, "error")
[16:12:12.991]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.991]                   NULL)
[16:12:12.991]                 if (is_error) {
[16:12:12.991]                   sessionInformation <- function() {
[16:12:12.991]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.991]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.991]                       search = base::search(), system = base::Sys.info())
[16:12:12.991]                   }
[16:12:12.991]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.991]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.991]                     cond$call), session = sessionInformation(), 
[16:12:12.991]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.991]                   signalCondition(cond)
[16:12:12.991]                 }
[16:12:12.991]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.991]                 "immediateCondition"))) {
[16:12:12.991]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.991]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.991]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.991]                   if (TRUE && !signal) {
[16:12:12.991]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.991]                     {
[16:12:12.991]                       inherits <- base::inherits
[16:12:12.991]                       invokeRestart <- base::invokeRestart
[16:12:12.991]                       is.null <- base::is.null
[16:12:12.991]                       muffled <- FALSE
[16:12:12.991]                       if (inherits(cond, "message")) {
[16:12:12.991]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.991]                         if (muffled) 
[16:12:12.991]                           invokeRestart("muffleMessage")
[16:12:12.991]                       }
[16:12:12.991]                       else if (inherits(cond, "warning")) {
[16:12:12.991]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.991]                         if (muffled) 
[16:12:12.991]                           invokeRestart("muffleWarning")
[16:12:12.991]                       }
[16:12:12.991]                       else if (inherits(cond, "condition")) {
[16:12:12.991]                         if (!is.null(pattern)) {
[16:12:12.991]                           computeRestarts <- base::computeRestarts
[16:12:12.991]                           grepl <- base::grepl
[16:12:12.991]                           restarts <- computeRestarts(cond)
[16:12:12.991]                           for (restart in restarts) {
[16:12:12.991]                             name <- restart$name
[16:12:12.991]                             if (is.null(name)) 
[16:12:12.991]                               next
[16:12:12.991]                             if (!grepl(pattern, name)) 
[16:12:12.991]                               next
[16:12:12.991]                             invokeRestart(restart)
[16:12:12.991]                             muffled <- TRUE
[16:12:12.991]                             break
[16:12:12.991]                           }
[16:12:12.991]                         }
[16:12:12.991]                       }
[16:12:12.991]                       invisible(muffled)
[16:12:12.991]                     }
[16:12:12.991]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.991]                   }
[16:12:12.991]                 }
[16:12:12.991]                 else {
[16:12:12.991]                   if (TRUE) {
[16:12:12.991]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.991]                     {
[16:12:12.991]                       inherits <- base::inherits
[16:12:12.991]                       invokeRestart <- base::invokeRestart
[16:12:12.991]                       is.null <- base::is.null
[16:12:12.991]                       muffled <- FALSE
[16:12:12.991]                       if (inherits(cond, "message")) {
[16:12:12.991]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.991]                         if (muffled) 
[16:12:12.991]                           invokeRestart("muffleMessage")
[16:12:12.991]                       }
[16:12:12.991]                       else if (inherits(cond, "warning")) {
[16:12:12.991]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.991]                         if (muffled) 
[16:12:12.991]                           invokeRestart("muffleWarning")
[16:12:12.991]                       }
[16:12:12.991]                       else if (inherits(cond, "condition")) {
[16:12:12.991]                         if (!is.null(pattern)) {
[16:12:12.991]                           computeRestarts <- base::computeRestarts
[16:12:12.991]                           grepl <- base::grepl
[16:12:12.991]                           restarts <- computeRestarts(cond)
[16:12:12.991]                           for (restart in restarts) {
[16:12:12.991]                             name <- restart$name
[16:12:12.991]                             if (is.null(name)) 
[16:12:12.991]                               next
[16:12:12.991]                             if (!grepl(pattern, name)) 
[16:12:12.991]                               next
[16:12:12.991]                             invokeRestart(restart)
[16:12:12.991]                             muffled <- TRUE
[16:12:12.991]                             break
[16:12:12.991]                           }
[16:12:12.991]                         }
[16:12:12.991]                       }
[16:12:12.991]                       invisible(muffled)
[16:12:12.991]                     }
[16:12:12.991]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.991]                   }
[16:12:12.991]                 }
[16:12:12.991]             }
[16:12:12.991]         }))
[16:12:12.991]     }, error = function(ex) {
[16:12:12.991]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.991]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.991]                 ...future.rng), started = ...future.startTime, 
[16:12:12.991]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.991]             version = "1.8"), class = "FutureResult")
[16:12:12.991]     }, finally = {
[16:12:12.991]         if (!identical(...future.workdir, getwd())) 
[16:12:12.991]             setwd(...future.workdir)
[16:12:12.991]         {
[16:12:12.991]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.991]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.991]             }
[16:12:12.991]             base::options(...future.oldOptions)
[16:12:12.991]             if (.Platform$OS.type == "windows") {
[16:12:12.991]                 old_names <- names(...future.oldEnvVars)
[16:12:12.991]                 envs <- base::Sys.getenv()
[16:12:12.991]                 names <- names(envs)
[16:12:12.991]                 common <- intersect(names, old_names)
[16:12:12.991]                 added <- setdiff(names, old_names)
[16:12:12.991]                 removed <- setdiff(old_names, names)
[16:12:12.991]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.991]                   envs[common]]
[16:12:12.991]                 NAMES <- toupper(changed)
[16:12:12.991]                 args <- list()
[16:12:12.991]                 for (kk in seq_along(NAMES)) {
[16:12:12.991]                   name <- changed[[kk]]
[16:12:12.991]                   NAME <- NAMES[[kk]]
[16:12:12.991]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.991]                     next
[16:12:12.991]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.991]                 }
[16:12:12.991]                 NAMES <- toupper(added)
[16:12:12.991]                 for (kk in seq_along(NAMES)) {
[16:12:12.991]                   name <- added[[kk]]
[16:12:12.991]                   NAME <- NAMES[[kk]]
[16:12:12.991]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.991]                     next
[16:12:12.991]                   args[[name]] <- ""
[16:12:12.991]                 }
[16:12:12.991]                 NAMES <- toupper(removed)
[16:12:12.991]                 for (kk in seq_along(NAMES)) {
[16:12:12.991]                   name <- removed[[kk]]
[16:12:12.991]                   NAME <- NAMES[[kk]]
[16:12:12.991]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.991]                     next
[16:12:12.991]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.991]                 }
[16:12:12.991]                 if (length(args) > 0) 
[16:12:12.991]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.991]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.991]             }
[16:12:12.991]             else {
[16:12:12.991]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.991]             }
[16:12:12.991]             {
[16:12:12.991]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.991]                   0L) {
[16:12:12.991]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.991]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.991]                   base::options(opts)
[16:12:12.991]                 }
[16:12:12.991]                 {
[16:12:12.991]                   {
[16:12:12.991]                     NULL
[16:12:12.991]                     RNGkind("Mersenne-Twister")
[16:12:12.991]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.991]                       inherits = FALSE)
[16:12:12.991]                   }
[16:12:12.991]                   options(future.plan = NULL)
[16:12:12.991]                   if (is.na(NA_character_)) 
[16:12:12.991]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.991]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.991]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:12.991]                   {
[16:12:12.991]                     future <- SequentialFuture(..., envir = envir)
[16:12:12.991]                     if (!future$lazy) 
[16:12:12.991]                       future <- run(future)
[16:12:12.991]                     invisible(future)
[16:12:12.991]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.991]                 }
[16:12:12.991]             }
[16:12:12.991]         }
[16:12:12.991]     })
[16:12:12.991]     if (TRUE) {
[16:12:12.991]         base::sink(type = "output", split = FALSE)
[16:12:12.991]         if (TRUE) {
[16:12:12.991]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.991]         }
[16:12:12.991]         else {
[16:12:12.991]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.991]         }
[16:12:12.991]         base::close(...future.stdout)
[16:12:12.991]         ...future.stdout <- NULL
[16:12:12.991]     }
[16:12:12.991]     ...future.result$conditions <- ...future.conditions
[16:12:12.991]     ...future.result$finished <- base::Sys.time()
[16:12:12.991]     ...future.result
[16:12:12.991] }
[16:12:12.992] plan(): Setting new future strategy stack:
[16:12:12.993] List of future strategies:
[16:12:12.993] 1. sequential:
[16:12:12.993]    - args: function (..., envir = parent.frame())
[16:12:12.993]    - tweaked: FALSE
[16:12:12.993]    - call: NULL
[16:12:12.993] plan(): nbrOfWorkers() = 1
[16:12:12.994] plan(): Setting new future strategy stack:
[16:12:12.994] List of future strategies:
[16:12:12.994] 1. sequential:
[16:12:12.994]    - args: function (..., envir = parent.frame())
[16:12:12.994]    - tweaked: FALSE
[16:12:12.994]    - call: plan(strategy)
[16:12:12.994] plan(): nbrOfWorkers() = 1
[16:12:12.994] SequentialFuture started (and completed)
[16:12:12.994] - Launch lazy future ... done
[16:12:12.994] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[16:12:12.995] plan(): Setting new future strategy stack:
[16:12:12.995] List of future strategies:
[16:12:12.995] 1. multicore:
[16:12:12.995]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:12.995]    - tweaked: FALSE
[16:12:12.995]    - call: plan(strategy)
[16:12:12.999] plan(): nbrOfWorkers() = 2
[16:12:13.003] getGlobalsAndPackages() ...
[16:12:13.003] 
[16:12:13.003] - globals: [0] <none>
[16:12:13.003] getGlobalsAndPackages() ... DONE
[16:12:13.004] Packages needed by the future expression (n = 0): <none>
[16:12:13.005] Packages needed by future strategies (n = 0): <none>
[16:12:13.005] {
[16:12:13.005]     {
[16:12:13.005]         {
[16:12:13.005]             ...future.startTime <- base::Sys.time()
[16:12:13.005]             {
[16:12:13.005]                 {
[16:12:13.005]                   {
[16:12:13.005]                     {
[16:12:13.005]                       base::local({
[16:12:13.005]                         has_future <- base::requireNamespace("future", 
[16:12:13.005]                           quietly = TRUE)
[16:12:13.005]                         if (has_future) {
[16:12:13.005]                           ns <- base::getNamespace("future")
[16:12:13.005]                           version <- ns[[".package"]][["version"]]
[16:12:13.005]                           if (is.null(version)) 
[16:12:13.005]                             version <- utils::packageVersion("future")
[16:12:13.005]                         }
[16:12:13.005]                         else {
[16:12:13.005]                           version <- NULL
[16:12:13.005]                         }
[16:12:13.005]                         if (!has_future || version < "1.8.0") {
[16:12:13.005]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.005]                             "", base::R.version$version.string), 
[16:12:13.005]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.005]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.005]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.005]                               "release", "version")], collapse = " "), 
[16:12:13.005]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.005]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.005]                             info)
[16:12:13.005]                           info <- base::paste(info, collapse = "; ")
[16:12:13.005]                           if (!has_future) {
[16:12:13.005]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.005]                               info)
[16:12:13.005]                           }
[16:12:13.005]                           else {
[16:12:13.005]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.005]                               info, version)
[16:12:13.005]                           }
[16:12:13.005]                           base::stop(msg)
[16:12:13.005]                         }
[16:12:13.005]                       })
[16:12:13.005]                     }
[16:12:13.005]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.005]                     base::options(mc.cores = 1L)
[16:12:13.005]                   }
[16:12:13.005]                   options(future.plan = NULL)
[16:12:13.005]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.005]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.005]                 }
[16:12:13.005]                 ...future.workdir <- getwd()
[16:12:13.005]             }
[16:12:13.005]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.005]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.005]         }
[16:12:13.005]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.005]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.005]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.005]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.005]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.005]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.005]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.005]             base::names(...future.oldOptions))
[16:12:13.005]     }
[16:12:13.005]     if (FALSE) {
[16:12:13.005]     }
[16:12:13.005]     else {
[16:12:13.005]         if (TRUE) {
[16:12:13.005]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.005]                 open = "w")
[16:12:13.005]         }
[16:12:13.005]         else {
[16:12:13.005]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.005]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.005]         }
[16:12:13.005]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.005]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.005]             base::sink(type = "output", split = FALSE)
[16:12:13.005]             base::close(...future.stdout)
[16:12:13.005]         }, add = TRUE)
[16:12:13.005]     }
[16:12:13.005]     ...future.frame <- base::sys.nframe()
[16:12:13.005]     ...future.conditions <- base::list()
[16:12:13.005]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.005]     if (FALSE) {
[16:12:13.005]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.005]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.005]     }
[16:12:13.005]     ...future.result <- base::tryCatch({
[16:12:13.005]         base::withCallingHandlers({
[16:12:13.005]             ...future.value <- base::withVisible(base::local({
[16:12:13.005]                 withCallingHandlers({
[16:12:13.005]                   42
[16:12:13.005]                 }, immediateCondition = function(cond) {
[16:12:13.005]                   save_rds <- function (object, pathname, ...) 
[16:12:13.005]                   {
[16:12:13.005]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:13.005]                     if (file_test("-f", pathname_tmp)) {
[16:12:13.005]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.005]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:13.005]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.005]                         fi_tmp[["mtime"]])
[16:12:13.005]                     }
[16:12:13.005]                     tryCatch({
[16:12:13.005]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:13.005]                     }, error = function(ex) {
[16:12:13.005]                       msg <- conditionMessage(ex)
[16:12:13.005]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.005]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:13.005]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.005]                         fi_tmp[["mtime"]], msg)
[16:12:13.005]                       ex$message <- msg
[16:12:13.005]                       stop(ex)
[16:12:13.005]                     })
[16:12:13.005]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:13.005]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:13.005]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:13.005]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.005]                       fi <- file.info(pathname)
[16:12:13.005]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:13.005]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.005]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:13.005]                         fi[["size"]], fi[["mtime"]])
[16:12:13.005]                       stop(msg)
[16:12:13.005]                     }
[16:12:13.005]                     invisible(pathname)
[16:12:13.005]                   }
[16:12:13.005]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:13.005]                     rootPath = tempdir()) 
[16:12:13.005]                   {
[16:12:13.005]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:13.005]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:13.005]                       tmpdir = path, fileext = ".rds")
[16:12:13.005]                     save_rds(obj, file)
[16:12:13.005]                   }
[16:12:13.005]                   saveImmediateCondition(cond, path = "/tmp/Rtmpy0SiTl/.future/immediateConditions")
[16:12:13.005]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.005]                   {
[16:12:13.005]                     inherits <- base::inherits
[16:12:13.005]                     invokeRestart <- base::invokeRestart
[16:12:13.005]                     is.null <- base::is.null
[16:12:13.005]                     muffled <- FALSE
[16:12:13.005]                     if (inherits(cond, "message")) {
[16:12:13.005]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.005]                       if (muffled) 
[16:12:13.005]                         invokeRestart("muffleMessage")
[16:12:13.005]                     }
[16:12:13.005]                     else if (inherits(cond, "warning")) {
[16:12:13.005]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.005]                       if (muffled) 
[16:12:13.005]                         invokeRestart("muffleWarning")
[16:12:13.005]                     }
[16:12:13.005]                     else if (inherits(cond, "condition")) {
[16:12:13.005]                       if (!is.null(pattern)) {
[16:12:13.005]                         computeRestarts <- base::computeRestarts
[16:12:13.005]                         grepl <- base::grepl
[16:12:13.005]                         restarts <- computeRestarts(cond)
[16:12:13.005]                         for (restart in restarts) {
[16:12:13.005]                           name <- restart$name
[16:12:13.005]                           if (is.null(name)) 
[16:12:13.005]                             next
[16:12:13.005]                           if (!grepl(pattern, name)) 
[16:12:13.005]                             next
[16:12:13.005]                           invokeRestart(restart)
[16:12:13.005]                           muffled <- TRUE
[16:12:13.005]                           break
[16:12:13.005]                         }
[16:12:13.005]                       }
[16:12:13.005]                     }
[16:12:13.005]                     invisible(muffled)
[16:12:13.005]                   }
[16:12:13.005]                   muffleCondition(cond)
[16:12:13.005]                 })
[16:12:13.005]             }))
[16:12:13.005]             future::FutureResult(value = ...future.value$value, 
[16:12:13.005]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.005]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.005]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.005]                     ...future.globalenv.names))
[16:12:13.005]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.005]         }, condition = base::local({
[16:12:13.005]             c <- base::c
[16:12:13.005]             inherits <- base::inherits
[16:12:13.005]             invokeRestart <- base::invokeRestart
[16:12:13.005]             length <- base::length
[16:12:13.005]             list <- base::list
[16:12:13.005]             seq.int <- base::seq.int
[16:12:13.005]             signalCondition <- base::signalCondition
[16:12:13.005]             sys.calls <- base::sys.calls
[16:12:13.005]             `[[` <- base::`[[`
[16:12:13.005]             `+` <- base::`+`
[16:12:13.005]             `<<-` <- base::`<<-`
[16:12:13.005]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.005]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.005]                   3L)]
[16:12:13.005]             }
[16:12:13.005]             function(cond) {
[16:12:13.005]                 is_error <- inherits(cond, "error")
[16:12:13.005]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.005]                   NULL)
[16:12:13.005]                 if (is_error) {
[16:12:13.005]                   sessionInformation <- function() {
[16:12:13.005]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.005]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.005]                       search = base::search(), system = base::Sys.info())
[16:12:13.005]                   }
[16:12:13.005]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.005]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.005]                     cond$call), session = sessionInformation(), 
[16:12:13.005]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.005]                   signalCondition(cond)
[16:12:13.005]                 }
[16:12:13.005]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.005]                 "immediateCondition"))) {
[16:12:13.005]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.005]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.005]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.005]                   if (TRUE && !signal) {
[16:12:13.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.005]                     {
[16:12:13.005]                       inherits <- base::inherits
[16:12:13.005]                       invokeRestart <- base::invokeRestart
[16:12:13.005]                       is.null <- base::is.null
[16:12:13.005]                       muffled <- FALSE
[16:12:13.005]                       if (inherits(cond, "message")) {
[16:12:13.005]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.005]                         if (muffled) 
[16:12:13.005]                           invokeRestart("muffleMessage")
[16:12:13.005]                       }
[16:12:13.005]                       else if (inherits(cond, "warning")) {
[16:12:13.005]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.005]                         if (muffled) 
[16:12:13.005]                           invokeRestart("muffleWarning")
[16:12:13.005]                       }
[16:12:13.005]                       else if (inherits(cond, "condition")) {
[16:12:13.005]                         if (!is.null(pattern)) {
[16:12:13.005]                           computeRestarts <- base::computeRestarts
[16:12:13.005]                           grepl <- base::grepl
[16:12:13.005]                           restarts <- computeRestarts(cond)
[16:12:13.005]                           for (restart in restarts) {
[16:12:13.005]                             name <- restart$name
[16:12:13.005]                             if (is.null(name)) 
[16:12:13.005]                               next
[16:12:13.005]                             if (!grepl(pattern, name)) 
[16:12:13.005]                               next
[16:12:13.005]                             invokeRestart(restart)
[16:12:13.005]                             muffled <- TRUE
[16:12:13.005]                             break
[16:12:13.005]                           }
[16:12:13.005]                         }
[16:12:13.005]                       }
[16:12:13.005]                       invisible(muffled)
[16:12:13.005]                     }
[16:12:13.005]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.005]                   }
[16:12:13.005]                 }
[16:12:13.005]                 else {
[16:12:13.005]                   if (TRUE) {
[16:12:13.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.005]                     {
[16:12:13.005]                       inherits <- base::inherits
[16:12:13.005]                       invokeRestart <- base::invokeRestart
[16:12:13.005]                       is.null <- base::is.null
[16:12:13.005]                       muffled <- FALSE
[16:12:13.005]                       if (inherits(cond, "message")) {
[16:12:13.005]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.005]                         if (muffled) 
[16:12:13.005]                           invokeRestart("muffleMessage")
[16:12:13.005]                       }
[16:12:13.005]                       else if (inherits(cond, "warning")) {
[16:12:13.005]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.005]                         if (muffled) 
[16:12:13.005]                           invokeRestart("muffleWarning")
[16:12:13.005]                       }
[16:12:13.005]                       else if (inherits(cond, "condition")) {
[16:12:13.005]                         if (!is.null(pattern)) {
[16:12:13.005]                           computeRestarts <- base::computeRestarts
[16:12:13.005]                           grepl <- base::grepl
[16:12:13.005]                           restarts <- computeRestarts(cond)
[16:12:13.005]                           for (restart in restarts) {
[16:12:13.005]                             name <- restart$name
[16:12:13.005]                             if (is.null(name)) 
[16:12:13.005]                               next
[16:12:13.005]                             if (!grepl(pattern, name)) 
[16:12:13.005]                               next
[16:12:13.005]                             invokeRestart(restart)
[16:12:13.005]                             muffled <- TRUE
[16:12:13.005]                             break
[16:12:13.005]                           }
[16:12:13.005]                         }
[16:12:13.005]                       }
[16:12:13.005]                       invisible(muffled)
[16:12:13.005]                     }
[16:12:13.005]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.005]                   }
[16:12:13.005]                 }
[16:12:13.005]             }
[16:12:13.005]         }))
[16:12:13.005]     }, error = function(ex) {
[16:12:13.005]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.005]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.005]                 ...future.rng), started = ...future.startTime, 
[16:12:13.005]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.005]             version = "1.8"), class = "FutureResult")
[16:12:13.005]     }, finally = {
[16:12:13.005]         if (!identical(...future.workdir, getwd())) 
[16:12:13.005]             setwd(...future.workdir)
[16:12:13.005]         {
[16:12:13.005]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.005]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.005]             }
[16:12:13.005]             base::options(...future.oldOptions)
[16:12:13.005]             if (.Platform$OS.type == "windows") {
[16:12:13.005]                 old_names <- names(...future.oldEnvVars)
[16:12:13.005]                 envs <- base::Sys.getenv()
[16:12:13.005]                 names <- names(envs)
[16:12:13.005]                 common <- intersect(names, old_names)
[16:12:13.005]                 added <- setdiff(names, old_names)
[16:12:13.005]                 removed <- setdiff(old_names, names)
[16:12:13.005]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.005]                   envs[common]]
[16:12:13.005]                 NAMES <- toupper(changed)
[16:12:13.005]                 args <- list()
[16:12:13.005]                 for (kk in seq_along(NAMES)) {
[16:12:13.005]                   name <- changed[[kk]]
[16:12:13.005]                   NAME <- NAMES[[kk]]
[16:12:13.005]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.005]                     next
[16:12:13.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.005]                 }
[16:12:13.005]                 NAMES <- toupper(added)
[16:12:13.005]                 for (kk in seq_along(NAMES)) {
[16:12:13.005]                   name <- added[[kk]]
[16:12:13.005]                   NAME <- NAMES[[kk]]
[16:12:13.005]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.005]                     next
[16:12:13.005]                   args[[name]] <- ""
[16:12:13.005]                 }
[16:12:13.005]                 NAMES <- toupper(removed)
[16:12:13.005]                 for (kk in seq_along(NAMES)) {
[16:12:13.005]                   name <- removed[[kk]]
[16:12:13.005]                   NAME <- NAMES[[kk]]
[16:12:13.005]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.005]                     next
[16:12:13.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.005]                 }
[16:12:13.005]                 if (length(args) > 0) 
[16:12:13.005]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.005]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.005]             }
[16:12:13.005]             else {
[16:12:13.005]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.005]             }
[16:12:13.005]             {
[16:12:13.005]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.005]                   0L) {
[16:12:13.005]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.005]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.005]                   base::options(opts)
[16:12:13.005]                 }
[16:12:13.005]                 {
[16:12:13.005]                   {
[16:12:13.005]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.005]                     NULL
[16:12:13.005]                   }
[16:12:13.005]                   options(future.plan = NULL)
[16:12:13.005]                   if (is.na(NA_character_)) 
[16:12:13.005]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.005]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.005]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:13.005]                     envir = parent.frame()) 
[16:12:13.005]                   {
[16:12:13.005]                     default_workers <- missing(workers)
[16:12:13.005]                     if (is.function(workers)) 
[16:12:13.005]                       workers <- workers()
[16:12:13.005]                     workers <- structure(as.integer(workers), 
[16:12:13.005]                       class = class(workers))
[16:12:13.005]                     stop_if_not(is.finite(workers), workers >= 
[16:12:13.005]                       1L)
[16:12:13.005]                     if ((workers == 1L && !inherits(workers, 
[16:12:13.005]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:13.005]                       if (default_workers) 
[16:12:13.005]                         supportsMulticore(warn = TRUE)
[16:12:13.005]                       return(sequential(..., envir = envir))
[16:12:13.005]                     }
[16:12:13.005]                     oopts <- options(mc.cores = workers)
[16:12:13.005]                     on.exit(options(oopts))
[16:12:13.005]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:13.005]                       envir = envir)
[16:12:13.005]                     if (!future$lazy) 
[16:12:13.005]                       future <- run(future)
[16:12:13.005]                     invisible(future)
[16:12:13.005]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.005]                 }
[16:12:13.005]             }
[16:12:13.005]         }
[16:12:13.005]     })
[16:12:13.005]     if (TRUE) {
[16:12:13.005]         base::sink(type = "output", split = FALSE)
[16:12:13.005]         if (TRUE) {
[16:12:13.005]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.005]         }
[16:12:13.005]         else {
[16:12:13.005]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.005]         }
[16:12:13.005]         base::close(...future.stdout)
[16:12:13.005]         ...future.stdout <- NULL
[16:12:13.005]     }
[16:12:13.005]     ...future.result$conditions <- ...future.conditions
[16:12:13.005]     ...future.result$finished <- base::Sys.time()
[16:12:13.005]     ...future.result
[16:12:13.005] }
[16:12:13.007] requestCore(): workers = 2
[16:12:13.010] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
[16:12:13.011] plan(): Setting new future strategy stack:
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:12:13.011] List of future strategies:
[16:12:13.011] 1. sequential:
[16:12:13.011]    - args: function (..., envir = parent.frame())
[16:12:13.011]    - tweaked: FALSE
[16:12:13.011]    - call: NULL
[16:12:13.017] plan(): nbrOfWorkers() = 1
[16:12:13.019] plan(): Setting new future strategy stack:
[16:12:13.019] List of future strategies:
[16:12:13.019] 1. multicore:
[16:12:13.019]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:13.019]    - tweaked: FALSE
[16:12:13.019]    - call: plan(strategy)
[16:12:13.025] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.031] getGlobalsAndPackages() ...
[16:12:13.031] Searching for globals...
[16:12:13.032] 
[16:12:13.032] Searching for globals ... DONE
[16:12:13.032] - globals: [0] <none>
[16:12:13.032] getGlobalsAndPackages() ... DONE
[16:12:13.032] run() for ‘Future’ ...
[16:12:13.033] - state: ‘created’
[16:12:13.033] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:13.037] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.037] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:13.037]   - Field: ‘label’
[16:12:13.037]   - Field: ‘local’
[16:12:13.037]   - Field: ‘owner’
[16:12:13.037]   - Field: ‘envir’
[16:12:13.037]   - Field: ‘workers’
[16:12:13.038]   - Field: ‘packages’
[16:12:13.038]   - Field: ‘gc’
[16:12:13.038]   - Field: ‘job’
[16:12:13.038]   - Field: ‘conditions’
[16:12:13.038]   - Field: ‘expr’
[16:12:13.038]   - Field: ‘uuid’
[16:12:13.038]   - Field: ‘seed’
[16:12:13.038]   - Field: ‘version’
[16:12:13.038]   - Field: ‘result’
[16:12:13.038]   - Field: ‘asynchronous’
[16:12:13.039]   - Field: ‘calls’
[16:12:13.039]   - Field: ‘globals’
[16:12:13.039]   - Field: ‘stdout’
[16:12:13.039]   - Field: ‘earlySignal’
[16:12:13.039]   - Field: ‘lazy’
[16:12:13.039]   - Field: ‘state’
[16:12:13.039] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:13.039] - Launch lazy future ...
[16:12:13.040] Packages needed by the future expression (n = 0): <none>
[16:12:13.040] Packages needed by future strategies (n = 0): <none>
[16:12:13.040] {
[16:12:13.040]     {
[16:12:13.040]         {
[16:12:13.040]             ...future.startTime <- base::Sys.time()
[16:12:13.040]             {
[16:12:13.040]                 {
[16:12:13.040]                   {
[16:12:13.040]                     {
[16:12:13.040]                       base::local({
[16:12:13.040]                         has_future <- base::requireNamespace("future", 
[16:12:13.040]                           quietly = TRUE)
[16:12:13.040]                         if (has_future) {
[16:12:13.040]                           ns <- base::getNamespace("future")
[16:12:13.040]                           version <- ns[[".package"]][["version"]]
[16:12:13.040]                           if (is.null(version)) 
[16:12:13.040]                             version <- utils::packageVersion("future")
[16:12:13.040]                         }
[16:12:13.040]                         else {
[16:12:13.040]                           version <- NULL
[16:12:13.040]                         }
[16:12:13.040]                         if (!has_future || version < "1.8.0") {
[16:12:13.040]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.040]                             "", base::R.version$version.string), 
[16:12:13.040]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.040]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.040]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.040]                               "release", "version")], collapse = " "), 
[16:12:13.040]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.040]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.040]                             info)
[16:12:13.040]                           info <- base::paste(info, collapse = "; ")
[16:12:13.040]                           if (!has_future) {
[16:12:13.040]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.040]                               info)
[16:12:13.040]                           }
[16:12:13.040]                           else {
[16:12:13.040]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.040]                               info, version)
[16:12:13.040]                           }
[16:12:13.040]                           base::stop(msg)
[16:12:13.040]                         }
[16:12:13.040]                       })
[16:12:13.040]                     }
[16:12:13.040]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.040]                     base::options(mc.cores = 1L)
[16:12:13.040]                   }
[16:12:13.040]                   options(future.plan = NULL)
[16:12:13.040]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.040]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.040]                 }
[16:12:13.040]                 ...future.workdir <- getwd()
[16:12:13.040]             }
[16:12:13.040]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.040]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.040]         }
[16:12:13.040]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.040]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.040]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.040]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.040]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.040]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.040]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.040]             base::names(...future.oldOptions))
[16:12:13.040]     }
[16:12:13.040]     if (FALSE) {
[16:12:13.040]     }
[16:12:13.040]     else {
[16:12:13.040]         if (TRUE) {
[16:12:13.040]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.040]                 open = "w")
[16:12:13.040]         }
[16:12:13.040]         else {
[16:12:13.040]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.040]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.040]         }
[16:12:13.040]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.040]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.040]             base::sink(type = "output", split = FALSE)
[16:12:13.040]             base::close(...future.stdout)
[16:12:13.040]         }, add = TRUE)
[16:12:13.040]     }
[16:12:13.040]     ...future.frame <- base::sys.nframe()
[16:12:13.040]     ...future.conditions <- base::list()
[16:12:13.040]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.040]     if (FALSE) {
[16:12:13.040]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.040]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.040]     }
[16:12:13.040]     ...future.result <- base::tryCatch({
[16:12:13.040]         base::withCallingHandlers({
[16:12:13.040]             ...future.value <- base::withVisible(base::local({
[16:12:13.040]                 withCallingHandlers({
[16:12:13.040]                   42
[16:12:13.040]                 }, immediateCondition = function(cond) {
[16:12:13.040]                   save_rds <- function (object, pathname, ...) 
[16:12:13.040]                   {
[16:12:13.040]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:13.040]                     if (file_test("-f", pathname_tmp)) {
[16:12:13.040]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.040]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:13.040]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.040]                         fi_tmp[["mtime"]])
[16:12:13.040]                     }
[16:12:13.040]                     tryCatch({
[16:12:13.040]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:13.040]                     }, error = function(ex) {
[16:12:13.040]                       msg <- conditionMessage(ex)
[16:12:13.040]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.040]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:13.040]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.040]                         fi_tmp[["mtime"]], msg)
[16:12:13.040]                       ex$message <- msg
[16:12:13.040]                       stop(ex)
[16:12:13.040]                     })
[16:12:13.040]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:13.040]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:13.040]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:13.040]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.040]                       fi <- file.info(pathname)
[16:12:13.040]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:13.040]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.040]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:13.040]                         fi[["size"]], fi[["mtime"]])
[16:12:13.040]                       stop(msg)
[16:12:13.040]                     }
[16:12:13.040]                     invisible(pathname)
[16:12:13.040]                   }
[16:12:13.040]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:13.040]                     rootPath = tempdir()) 
[16:12:13.040]                   {
[16:12:13.040]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:13.040]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:13.040]                       tmpdir = path, fileext = ".rds")
[16:12:13.040]                     save_rds(obj, file)
[16:12:13.040]                   }
[16:12:13.040]                   saveImmediateCondition(cond, path = "/tmp/Rtmpy0SiTl/.future/immediateConditions")
[16:12:13.040]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.040]                   {
[16:12:13.040]                     inherits <- base::inherits
[16:12:13.040]                     invokeRestart <- base::invokeRestart
[16:12:13.040]                     is.null <- base::is.null
[16:12:13.040]                     muffled <- FALSE
[16:12:13.040]                     if (inherits(cond, "message")) {
[16:12:13.040]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.040]                       if (muffled) 
[16:12:13.040]                         invokeRestart("muffleMessage")
[16:12:13.040]                     }
[16:12:13.040]                     else if (inherits(cond, "warning")) {
[16:12:13.040]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.040]                       if (muffled) 
[16:12:13.040]                         invokeRestart("muffleWarning")
[16:12:13.040]                     }
[16:12:13.040]                     else if (inherits(cond, "condition")) {
[16:12:13.040]                       if (!is.null(pattern)) {
[16:12:13.040]                         computeRestarts <- base::computeRestarts
[16:12:13.040]                         grepl <- base::grepl
[16:12:13.040]                         restarts <- computeRestarts(cond)
[16:12:13.040]                         for (restart in restarts) {
[16:12:13.040]                           name <- restart$name
[16:12:13.040]                           if (is.null(name)) 
[16:12:13.040]                             next
[16:12:13.040]                           if (!grepl(pattern, name)) 
[16:12:13.040]                             next
[16:12:13.040]                           invokeRestart(restart)
[16:12:13.040]                           muffled <- TRUE
[16:12:13.040]                           break
[16:12:13.040]                         }
[16:12:13.040]                       }
[16:12:13.040]                     }
[16:12:13.040]                     invisible(muffled)
[16:12:13.040]                   }
[16:12:13.040]                   muffleCondition(cond)
[16:12:13.040]                 })
[16:12:13.040]             }))
[16:12:13.040]             future::FutureResult(value = ...future.value$value, 
[16:12:13.040]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.040]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.040]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.040]                     ...future.globalenv.names))
[16:12:13.040]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.040]         }, condition = base::local({
[16:12:13.040]             c <- base::c
[16:12:13.040]             inherits <- base::inherits
[16:12:13.040]             invokeRestart <- base::invokeRestart
[16:12:13.040]             length <- base::length
[16:12:13.040]             list <- base::list
[16:12:13.040]             seq.int <- base::seq.int
[16:12:13.040]             signalCondition <- base::signalCondition
[16:12:13.040]             sys.calls <- base::sys.calls
[16:12:13.040]             `[[` <- base::`[[`
[16:12:13.040]             `+` <- base::`+`
[16:12:13.040]             `<<-` <- base::`<<-`
[16:12:13.040]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.040]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.040]                   3L)]
[16:12:13.040]             }
[16:12:13.040]             function(cond) {
[16:12:13.040]                 is_error <- inherits(cond, "error")
[16:12:13.040]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.040]                   NULL)
[16:12:13.040]                 if (is_error) {
[16:12:13.040]                   sessionInformation <- function() {
[16:12:13.040]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.040]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.040]                       search = base::search(), system = base::Sys.info())
[16:12:13.040]                   }
[16:12:13.040]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.040]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.040]                     cond$call), session = sessionInformation(), 
[16:12:13.040]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.040]                   signalCondition(cond)
[16:12:13.040]                 }
[16:12:13.040]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.040]                 "immediateCondition"))) {
[16:12:13.040]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.040]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.040]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.040]                   if (TRUE && !signal) {
[16:12:13.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.040]                     {
[16:12:13.040]                       inherits <- base::inherits
[16:12:13.040]                       invokeRestart <- base::invokeRestart
[16:12:13.040]                       is.null <- base::is.null
[16:12:13.040]                       muffled <- FALSE
[16:12:13.040]                       if (inherits(cond, "message")) {
[16:12:13.040]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.040]                         if (muffled) 
[16:12:13.040]                           invokeRestart("muffleMessage")
[16:12:13.040]                       }
[16:12:13.040]                       else if (inherits(cond, "warning")) {
[16:12:13.040]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.040]                         if (muffled) 
[16:12:13.040]                           invokeRestart("muffleWarning")
[16:12:13.040]                       }
[16:12:13.040]                       else if (inherits(cond, "condition")) {
[16:12:13.040]                         if (!is.null(pattern)) {
[16:12:13.040]                           computeRestarts <- base::computeRestarts
[16:12:13.040]                           grepl <- base::grepl
[16:12:13.040]                           restarts <- computeRestarts(cond)
[16:12:13.040]                           for (restart in restarts) {
[16:12:13.040]                             name <- restart$name
[16:12:13.040]                             if (is.null(name)) 
[16:12:13.040]                               next
[16:12:13.040]                             if (!grepl(pattern, name)) 
[16:12:13.040]                               next
[16:12:13.040]                             invokeRestart(restart)
[16:12:13.040]                             muffled <- TRUE
[16:12:13.040]                             break
[16:12:13.040]                           }
[16:12:13.040]                         }
[16:12:13.040]                       }
[16:12:13.040]                       invisible(muffled)
[16:12:13.040]                     }
[16:12:13.040]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.040]                   }
[16:12:13.040]                 }
[16:12:13.040]                 else {
[16:12:13.040]                   if (TRUE) {
[16:12:13.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.040]                     {
[16:12:13.040]                       inherits <- base::inherits
[16:12:13.040]                       invokeRestart <- base::invokeRestart
[16:12:13.040]                       is.null <- base::is.null
[16:12:13.040]                       muffled <- FALSE
[16:12:13.040]                       if (inherits(cond, "message")) {
[16:12:13.040]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.040]                         if (muffled) 
[16:12:13.040]                           invokeRestart("muffleMessage")
[16:12:13.040]                       }
[16:12:13.040]                       else if (inherits(cond, "warning")) {
[16:12:13.040]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.040]                         if (muffled) 
[16:12:13.040]                           invokeRestart("muffleWarning")
[16:12:13.040]                       }
[16:12:13.040]                       else if (inherits(cond, "condition")) {
[16:12:13.040]                         if (!is.null(pattern)) {
[16:12:13.040]                           computeRestarts <- base::computeRestarts
[16:12:13.040]                           grepl <- base::grepl
[16:12:13.040]                           restarts <- computeRestarts(cond)
[16:12:13.040]                           for (restart in restarts) {
[16:12:13.040]                             name <- restart$name
[16:12:13.040]                             if (is.null(name)) 
[16:12:13.040]                               next
[16:12:13.040]                             if (!grepl(pattern, name)) 
[16:12:13.040]                               next
[16:12:13.040]                             invokeRestart(restart)
[16:12:13.040]                             muffled <- TRUE
[16:12:13.040]                             break
[16:12:13.040]                           }
[16:12:13.040]                         }
[16:12:13.040]                       }
[16:12:13.040]                       invisible(muffled)
[16:12:13.040]                     }
[16:12:13.040]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.040]                   }
[16:12:13.040]                 }
[16:12:13.040]             }
[16:12:13.040]         }))
[16:12:13.040]     }, error = function(ex) {
[16:12:13.040]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.040]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.040]                 ...future.rng), started = ...future.startTime, 
[16:12:13.040]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.040]             version = "1.8"), class = "FutureResult")
[16:12:13.040]     }, finally = {
[16:12:13.040]         if (!identical(...future.workdir, getwd())) 
[16:12:13.040]             setwd(...future.workdir)
[16:12:13.040]         {
[16:12:13.040]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.040]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.040]             }
[16:12:13.040]             base::options(...future.oldOptions)
[16:12:13.040]             if (.Platform$OS.type == "windows") {
[16:12:13.040]                 old_names <- names(...future.oldEnvVars)
[16:12:13.040]                 envs <- base::Sys.getenv()
[16:12:13.040]                 names <- names(envs)
[16:12:13.040]                 common <- intersect(names, old_names)
[16:12:13.040]                 added <- setdiff(names, old_names)
[16:12:13.040]                 removed <- setdiff(old_names, names)
[16:12:13.040]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.040]                   envs[common]]
[16:12:13.040]                 NAMES <- toupper(changed)
[16:12:13.040]                 args <- list()
[16:12:13.040]                 for (kk in seq_along(NAMES)) {
[16:12:13.040]                   name <- changed[[kk]]
[16:12:13.040]                   NAME <- NAMES[[kk]]
[16:12:13.040]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.040]                     next
[16:12:13.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.040]                 }
[16:12:13.040]                 NAMES <- toupper(added)
[16:12:13.040]                 for (kk in seq_along(NAMES)) {
[16:12:13.040]                   name <- added[[kk]]
[16:12:13.040]                   NAME <- NAMES[[kk]]
[16:12:13.040]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.040]                     next
[16:12:13.040]                   args[[name]] <- ""
[16:12:13.040]                 }
[16:12:13.040]                 NAMES <- toupper(removed)
[16:12:13.040]                 for (kk in seq_along(NAMES)) {
[16:12:13.040]                   name <- removed[[kk]]
[16:12:13.040]                   NAME <- NAMES[[kk]]
[16:12:13.040]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.040]                     next
[16:12:13.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.040]                 }
[16:12:13.040]                 if (length(args) > 0) 
[16:12:13.040]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.040]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.040]             }
[16:12:13.040]             else {
[16:12:13.040]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.040]             }
[16:12:13.040]             {
[16:12:13.040]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.040]                   0L) {
[16:12:13.040]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.040]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.040]                   base::options(opts)
[16:12:13.040]                 }
[16:12:13.040]                 {
[16:12:13.040]                   {
[16:12:13.040]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.040]                     NULL
[16:12:13.040]                   }
[16:12:13.040]                   options(future.plan = NULL)
[16:12:13.040]                   if (is.na(NA_character_)) 
[16:12:13.040]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.040]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.040]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:13.040]                     envir = parent.frame()) 
[16:12:13.040]                   {
[16:12:13.040]                     default_workers <- missing(workers)
[16:12:13.040]                     if (is.function(workers)) 
[16:12:13.040]                       workers <- workers()
[16:12:13.040]                     workers <- structure(as.integer(workers), 
[16:12:13.040]                       class = class(workers))
[16:12:13.040]                     stop_if_not(is.finite(workers), workers >= 
[16:12:13.040]                       1L)
[16:12:13.040]                     if ((workers == 1L && !inherits(workers, 
[16:12:13.040]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:13.040]                       if (default_workers) 
[16:12:13.040]                         supportsMulticore(warn = TRUE)
[16:12:13.040]                       return(sequential(..., envir = envir))
[16:12:13.040]                     }
[16:12:13.040]                     oopts <- options(mc.cores = workers)
[16:12:13.040]                     on.exit(options(oopts))
[16:12:13.040]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:13.040]                       envir = envir)
[16:12:13.040]                     if (!future$lazy) 
[16:12:13.040]                       future <- run(future)
[16:12:13.040]                     invisible(future)
[16:12:13.040]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.040]                 }
[16:12:13.040]             }
[16:12:13.040]         }
[16:12:13.040]     })
[16:12:13.040]     if (TRUE) {
[16:12:13.040]         base::sink(type = "output", split = FALSE)
[16:12:13.040]         if (TRUE) {
[16:12:13.040]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.040]         }
[16:12:13.040]         else {
[16:12:13.040]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.040]         }
[16:12:13.040]         base::close(...future.stdout)
[16:12:13.040]         ...future.stdout <- NULL
[16:12:13.040]     }
[16:12:13.040]     ...future.result$conditions <- ...future.conditions
[16:12:13.040]     ...future.result$finished <- base::Sys.time()
[16:12:13.040]     ...future.result
[16:12:13.040] }
[16:12:13.043] requestCore(): workers = 2
[16:12:13.045] MulticoreFuture started
[16:12:13.045] - Launch lazy future ... done
[16:12:13.045] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:12:13.046] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:12:13.046] List of future strategies:
[16:12:13.046] 1. sequential:
[16:12:13.046]    - args: function (..., envir = parent.frame())
[16:12:13.046]    - tweaked: FALSE
[16:12:13.046]    - call: NULL
[16:12:13.047] plan(): nbrOfWorkers() = 1
[16:12:13.049] plan(): Setting new future strategy stack:
[16:12:13.049] List of future strategies:
[16:12:13.049] 1. multicore:
[16:12:13.049]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:13.049]    - tweaked: FALSE
[16:12:13.049]    - call: plan(strategy)
[16:12:13.054] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.056] getGlobalsAndPackages() ...
[16:12:13.056] Searching for globals...
[16:12:13.057] - globals found: [1] ‘{’
[16:12:13.057] Searching for globals ... DONE
[16:12:13.058] Resolving globals: FALSE
[16:12:13.058] 
[16:12:13.058] 
[16:12:13.058] getGlobalsAndPackages() ... DONE
[16:12:13.058] run() for ‘Future’ ...
[16:12:13.059] - state: ‘created’
[16:12:13.059] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:13.063] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.063] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:13.063]   - Field: ‘label’
[16:12:13.063]   - Field: ‘local’
[16:12:13.063]   - Field: ‘owner’
[16:12:13.063]   - Field: ‘envir’
[16:12:13.064]   - Field: ‘workers’
[16:12:13.064]   - Field: ‘packages’
[16:12:13.064]   - Field: ‘gc’
[16:12:13.064]   - Field: ‘job’
[16:12:13.064]   - Field: ‘conditions’
[16:12:13.064]   - Field: ‘expr’
[16:12:13.064]   - Field: ‘uuid’
[16:12:13.064]   - Field: ‘seed’
[16:12:13.065]   - Field: ‘version’
[16:12:13.065]   - Field: ‘result’
[16:12:13.065]   - Field: ‘asynchronous’
[16:12:13.065]   - Field: ‘calls’
[16:12:13.065]   - Field: ‘globals’
[16:12:13.065]   - Field: ‘stdout’
[16:12:13.065]   - Field: ‘earlySignal’
[16:12:13.065]   - Field: ‘lazy’
[16:12:13.065]   - Field: ‘state’
[16:12:13.066] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:13.066] - Launch lazy future ...
[16:12:13.066] Packages needed by the future expression (n = 0): <none>
[16:12:13.066] Packages needed by future strategies (n = 0): <none>
[16:12:13.067] {
[16:12:13.067]     {
[16:12:13.067]         {
[16:12:13.067]             ...future.startTime <- base::Sys.time()
[16:12:13.067]             {
[16:12:13.067]                 {
[16:12:13.067]                   {
[16:12:13.067]                     {
[16:12:13.067]                       base::local({
[16:12:13.067]                         has_future <- base::requireNamespace("future", 
[16:12:13.067]                           quietly = TRUE)
[16:12:13.067]                         if (has_future) {
[16:12:13.067]                           ns <- base::getNamespace("future")
[16:12:13.067]                           version <- ns[[".package"]][["version"]]
[16:12:13.067]                           if (is.null(version)) 
[16:12:13.067]                             version <- utils::packageVersion("future")
[16:12:13.067]                         }
[16:12:13.067]                         else {
[16:12:13.067]                           version <- NULL
[16:12:13.067]                         }
[16:12:13.067]                         if (!has_future || version < "1.8.0") {
[16:12:13.067]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.067]                             "", base::R.version$version.string), 
[16:12:13.067]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.067]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.067]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.067]                               "release", "version")], collapse = " "), 
[16:12:13.067]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.067]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.067]                             info)
[16:12:13.067]                           info <- base::paste(info, collapse = "; ")
[16:12:13.067]                           if (!has_future) {
[16:12:13.067]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.067]                               info)
[16:12:13.067]                           }
[16:12:13.067]                           else {
[16:12:13.067]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.067]                               info, version)
[16:12:13.067]                           }
[16:12:13.067]                           base::stop(msg)
[16:12:13.067]                         }
[16:12:13.067]                       })
[16:12:13.067]                     }
[16:12:13.067]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.067]                     base::options(mc.cores = 1L)
[16:12:13.067]                   }
[16:12:13.067]                   options(future.plan = NULL)
[16:12:13.067]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.067]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.067]                 }
[16:12:13.067]                 ...future.workdir <- getwd()
[16:12:13.067]             }
[16:12:13.067]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.067]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.067]         }
[16:12:13.067]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.067]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.067]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.067]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.067]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.067]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.067]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.067]             base::names(...future.oldOptions))
[16:12:13.067]     }
[16:12:13.067]     if (FALSE) {
[16:12:13.067]     }
[16:12:13.067]     else {
[16:12:13.067]         if (TRUE) {
[16:12:13.067]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.067]                 open = "w")
[16:12:13.067]         }
[16:12:13.067]         else {
[16:12:13.067]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.067]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.067]         }
[16:12:13.067]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.067]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.067]             base::sink(type = "output", split = FALSE)
[16:12:13.067]             base::close(...future.stdout)
[16:12:13.067]         }, add = TRUE)
[16:12:13.067]     }
[16:12:13.067]     ...future.frame <- base::sys.nframe()
[16:12:13.067]     ...future.conditions <- base::list()
[16:12:13.067]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.067]     if (FALSE) {
[16:12:13.067]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.067]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.067]     }
[16:12:13.067]     ...future.result <- base::tryCatch({
[16:12:13.067]         base::withCallingHandlers({
[16:12:13.067]             ...future.value <- base::withVisible(base::local({
[16:12:13.067]                 withCallingHandlers({
[16:12:13.067]                   {
[16:12:13.067]                     42
[16:12:13.067]                   }
[16:12:13.067]                 }, immediateCondition = function(cond) {
[16:12:13.067]                   save_rds <- function (object, pathname, ...) 
[16:12:13.067]                   {
[16:12:13.067]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:13.067]                     if (file_test("-f", pathname_tmp)) {
[16:12:13.067]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.067]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:13.067]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.067]                         fi_tmp[["mtime"]])
[16:12:13.067]                     }
[16:12:13.067]                     tryCatch({
[16:12:13.067]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:13.067]                     }, error = function(ex) {
[16:12:13.067]                       msg <- conditionMessage(ex)
[16:12:13.067]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.067]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:13.067]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.067]                         fi_tmp[["mtime"]], msg)
[16:12:13.067]                       ex$message <- msg
[16:12:13.067]                       stop(ex)
[16:12:13.067]                     })
[16:12:13.067]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:13.067]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:13.067]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:13.067]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.067]                       fi <- file.info(pathname)
[16:12:13.067]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:13.067]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.067]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:13.067]                         fi[["size"]], fi[["mtime"]])
[16:12:13.067]                       stop(msg)
[16:12:13.067]                     }
[16:12:13.067]                     invisible(pathname)
[16:12:13.067]                   }
[16:12:13.067]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:13.067]                     rootPath = tempdir()) 
[16:12:13.067]                   {
[16:12:13.067]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:13.067]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:13.067]                       tmpdir = path, fileext = ".rds")
[16:12:13.067]                     save_rds(obj, file)
[16:12:13.067]                   }
[16:12:13.067]                   saveImmediateCondition(cond, path = "/tmp/Rtmpy0SiTl/.future/immediateConditions")
[16:12:13.067]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.067]                   {
[16:12:13.067]                     inherits <- base::inherits
[16:12:13.067]                     invokeRestart <- base::invokeRestart
[16:12:13.067]                     is.null <- base::is.null
[16:12:13.067]                     muffled <- FALSE
[16:12:13.067]                     if (inherits(cond, "message")) {
[16:12:13.067]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.067]                       if (muffled) 
[16:12:13.067]                         invokeRestart("muffleMessage")
[16:12:13.067]                     }
[16:12:13.067]                     else if (inherits(cond, "warning")) {
[16:12:13.067]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.067]                       if (muffled) 
[16:12:13.067]                         invokeRestart("muffleWarning")
[16:12:13.067]                     }
[16:12:13.067]                     else if (inherits(cond, "condition")) {
[16:12:13.067]                       if (!is.null(pattern)) {
[16:12:13.067]                         computeRestarts <- base::computeRestarts
[16:12:13.067]                         grepl <- base::grepl
[16:12:13.067]                         restarts <- computeRestarts(cond)
[16:12:13.067]                         for (restart in restarts) {
[16:12:13.067]                           name <- restart$name
[16:12:13.067]                           if (is.null(name)) 
[16:12:13.067]                             next
[16:12:13.067]                           if (!grepl(pattern, name)) 
[16:12:13.067]                             next
[16:12:13.067]                           invokeRestart(restart)
[16:12:13.067]                           muffled <- TRUE
[16:12:13.067]                           break
[16:12:13.067]                         }
[16:12:13.067]                       }
[16:12:13.067]                     }
[16:12:13.067]                     invisible(muffled)
[16:12:13.067]                   }
[16:12:13.067]                   muffleCondition(cond)
[16:12:13.067]                 })
[16:12:13.067]             }))
[16:12:13.067]             future::FutureResult(value = ...future.value$value, 
[16:12:13.067]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.067]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.067]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.067]                     ...future.globalenv.names))
[16:12:13.067]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.067]         }, condition = base::local({
[16:12:13.067]             c <- base::c
[16:12:13.067]             inherits <- base::inherits
[16:12:13.067]             invokeRestart <- base::invokeRestart
[16:12:13.067]             length <- base::length
[16:12:13.067]             list <- base::list
[16:12:13.067]             seq.int <- base::seq.int
[16:12:13.067]             signalCondition <- base::signalCondition
[16:12:13.067]             sys.calls <- base::sys.calls
[16:12:13.067]             `[[` <- base::`[[`
[16:12:13.067]             `+` <- base::`+`
[16:12:13.067]             `<<-` <- base::`<<-`
[16:12:13.067]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.067]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.067]                   3L)]
[16:12:13.067]             }
[16:12:13.067]             function(cond) {
[16:12:13.067]                 is_error <- inherits(cond, "error")
[16:12:13.067]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.067]                   NULL)
[16:12:13.067]                 if (is_error) {
[16:12:13.067]                   sessionInformation <- function() {
[16:12:13.067]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.067]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.067]                       search = base::search(), system = base::Sys.info())
[16:12:13.067]                   }
[16:12:13.067]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.067]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.067]                     cond$call), session = sessionInformation(), 
[16:12:13.067]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.067]                   signalCondition(cond)
[16:12:13.067]                 }
[16:12:13.067]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.067]                 "immediateCondition"))) {
[16:12:13.067]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.067]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.067]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.067]                   if (TRUE && !signal) {
[16:12:13.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.067]                     {
[16:12:13.067]                       inherits <- base::inherits
[16:12:13.067]                       invokeRestart <- base::invokeRestart
[16:12:13.067]                       is.null <- base::is.null
[16:12:13.067]                       muffled <- FALSE
[16:12:13.067]                       if (inherits(cond, "message")) {
[16:12:13.067]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.067]                         if (muffled) 
[16:12:13.067]                           invokeRestart("muffleMessage")
[16:12:13.067]                       }
[16:12:13.067]                       else if (inherits(cond, "warning")) {
[16:12:13.067]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.067]                         if (muffled) 
[16:12:13.067]                           invokeRestart("muffleWarning")
[16:12:13.067]                       }
[16:12:13.067]                       else if (inherits(cond, "condition")) {
[16:12:13.067]                         if (!is.null(pattern)) {
[16:12:13.067]                           computeRestarts <- base::computeRestarts
[16:12:13.067]                           grepl <- base::grepl
[16:12:13.067]                           restarts <- computeRestarts(cond)
[16:12:13.067]                           for (restart in restarts) {
[16:12:13.067]                             name <- restart$name
[16:12:13.067]                             if (is.null(name)) 
[16:12:13.067]                               next
[16:12:13.067]                             if (!grepl(pattern, name)) 
[16:12:13.067]                               next
[16:12:13.067]                             invokeRestart(restart)
[16:12:13.067]                             muffled <- TRUE
[16:12:13.067]                             break
[16:12:13.067]                           }
[16:12:13.067]                         }
[16:12:13.067]                       }
[16:12:13.067]                       invisible(muffled)
[16:12:13.067]                     }
[16:12:13.067]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.067]                   }
[16:12:13.067]                 }
[16:12:13.067]                 else {
[16:12:13.067]                   if (TRUE) {
[16:12:13.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.067]                     {
[16:12:13.067]                       inherits <- base::inherits
[16:12:13.067]                       invokeRestart <- base::invokeRestart
[16:12:13.067]                       is.null <- base::is.null
[16:12:13.067]                       muffled <- FALSE
[16:12:13.067]                       if (inherits(cond, "message")) {
[16:12:13.067]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.067]                         if (muffled) 
[16:12:13.067]                           invokeRestart("muffleMessage")
[16:12:13.067]                       }
[16:12:13.067]                       else if (inherits(cond, "warning")) {
[16:12:13.067]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.067]                         if (muffled) 
[16:12:13.067]                           invokeRestart("muffleWarning")
[16:12:13.067]                       }
[16:12:13.067]                       else if (inherits(cond, "condition")) {
[16:12:13.067]                         if (!is.null(pattern)) {
[16:12:13.067]                           computeRestarts <- base::computeRestarts
[16:12:13.067]                           grepl <- base::grepl
[16:12:13.067]                           restarts <- computeRestarts(cond)
[16:12:13.067]                           for (restart in restarts) {
[16:12:13.067]                             name <- restart$name
[16:12:13.067]                             if (is.null(name)) 
[16:12:13.067]                               next
[16:12:13.067]                             if (!grepl(pattern, name)) 
[16:12:13.067]                               next
[16:12:13.067]                             invokeRestart(restart)
[16:12:13.067]                             muffled <- TRUE
[16:12:13.067]                             break
[16:12:13.067]                           }
[16:12:13.067]                         }
[16:12:13.067]                       }
[16:12:13.067]                       invisible(muffled)
[16:12:13.067]                     }
[16:12:13.067]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.067]                   }
[16:12:13.067]                 }
[16:12:13.067]             }
[16:12:13.067]         }))
[16:12:13.067]     }, error = function(ex) {
[16:12:13.067]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.067]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.067]                 ...future.rng), started = ...future.startTime, 
[16:12:13.067]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.067]             version = "1.8"), class = "FutureResult")
[16:12:13.067]     }, finally = {
[16:12:13.067]         if (!identical(...future.workdir, getwd())) 
[16:12:13.067]             setwd(...future.workdir)
[16:12:13.067]         {
[16:12:13.067]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.067]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.067]             }
[16:12:13.067]             base::options(...future.oldOptions)
[16:12:13.067]             if (.Platform$OS.type == "windows") {
[16:12:13.067]                 old_names <- names(...future.oldEnvVars)
[16:12:13.067]                 envs <- base::Sys.getenv()
[16:12:13.067]                 names <- names(envs)
[16:12:13.067]                 common <- intersect(names, old_names)
[16:12:13.067]                 added <- setdiff(names, old_names)
[16:12:13.067]                 removed <- setdiff(old_names, names)
[16:12:13.067]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.067]                   envs[common]]
[16:12:13.067]                 NAMES <- toupper(changed)
[16:12:13.067]                 args <- list()
[16:12:13.067]                 for (kk in seq_along(NAMES)) {
[16:12:13.067]                   name <- changed[[kk]]
[16:12:13.067]                   NAME <- NAMES[[kk]]
[16:12:13.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.067]                     next
[16:12:13.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.067]                 }
[16:12:13.067]                 NAMES <- toupper(added)
[16:12:13.067]                 for (kk in seq_along(NAMES)) {
[16:12:13.067]                   name <- added[[kk]]
[16:12:13.067]                   NAME <- NAMES[[kk]]
[16:12:13.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.067]                     next
[16:12:13.067]                   args[[name]] <- ""
[16:12:13.067]                 }
[16:12:13.067]                 NAMES <- toupper(removed)
[16:12:13.067]                 for (kk in seq_along(NAMES)) {
[16:12:13.067]                   name <- removed[[kk]]
[16:12:13.067]                   NAME <- NAMES[[kk]]
[16:12:13.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.067]                     next
[16:12:13.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.067]                 }
[16:12:13.067]                 if (length(args) > 0) 
[16:12:13.067]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.067]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.067]             }
[16:12:13.067]             else {
[16:12:13.067]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.067]             }
[16:12:13.067]             {
[16:12:13.067]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.067]                   0L) {
[16:12:13.067]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.067]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.067]                   base::options(opts)
[16:12:13.067]                 }
[16:12:13.067]                 {
[16:12:13.067]                   {
[16:12:13.067]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.067]                     NULL
[16:12:13.067]                   }
[16:12:13.067]                   options(future.plan = NULL)
[16:12:13.067]                   if (is.na(NA_character_)) 
[16:12:13.067]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.067]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.067]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:13.067]                     envir = parent.frame()) 
[16:12:13.067]                   {
[16:12:13.067]                     default_workers <- missing(workers)
[16:12:13.067]                     if (is.function(workers)) 
[16:12:13.067]                       workers <- workers()
[16:12:13.067]                     workers <- structure(as.integer(workers), 
[16:12:13.067]                       class = class(workers))
[16:12:13.067]                     stop_if_not(is.finite(workers), workers >= 
[16:12:13.067]                       1L)
[16:12:13.067]                     if ((workers == 1L && !inherits(workers, 
[16:12:13.067]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:13.067]                       if (default_workers) 
[16:12:13.067]                         supportsMulticore(warn = TRUE)
[16:12:13.067]                       return(sequential(..., envir = envir))
[16:12:13.067]                     }
[16:12:13.067]                     oopts <- options(mc.cores = workers)
[16:12:13.067]                     on.exit(options(oopts))
[16:12:13.067]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:13.067]                       envir = envir)
[16:12:13.067]                     if (!future$lazy) 
[16:12:13.067]                       future <- run(future)
[16:12:13.067]                     invisible(future)
[16:12:13.067]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.067]                 }
[16:12:13.067]             }
[16:12:13.067]         }
[16:12:13.067]     })
[16:12:13.067]     if (TRUE) {
[16:12:13.067]         base::sink(type = "output", split = FALSE)
[16:12:13.067]         if (TRUE) {
[16:12:13.067]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.067]         }
[16:12:13.067]         else {
[16:12:13.067]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.067]         }
[16:12:13.067]         base::close(...future.stdout)
[16:12:13.067]         ...future.stdout <- NULL
[16:12:13.067]     }
[16:12:13.067]     ...future.result$conditions <- ...future.conditions
[16:12:13.067]     ...future.result$finished <- base::Sys.time()
[16:12:13.067]     ...future.result
[16:12:13.067] }
[16:12:13.069] requestCore(): workers = 2
[16:12:13.071] MulticoreFuture started
[16:12:13.071] - Launch lazy future ... done
[16:12:13.072] run() for ‘MulticoreFuture’ ... done
[16:12:13.072] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:12:13.073] List of future strategies:
[16:12:13.073] 1. sequential:
[16:12:13.073]    - args: function (..., envir = parent.frame())
[16:12:13.073]    - tweaked: FALSE
[16:12:13.073]    - call: NULL
[16:12:13.073] plan(): nbrOfWorkers() = 1
[16:12:13.075] plan(): Setting new future strategy stack:
[16:12:13.075] List of future strategies:
[16:12:13.075] 1. multicore:
[16:12:13.075]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:13.075]    - tweaked: FALSE
[16:12:13.075]    - call: plan(strategy)
[16:12:13.080] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.085] getGlobalsAndPackages() ...
[16:12:13.085] 
[16:12:13.085] - globals: [0] <none>
[16:12:13.086] getGlobalsAndPackages() ... DONE
[16:12:13.086] Packages needed by the future expression (n = 0): <none>
[16:12:13.086] Packages needed by future strategies (n = 0): <none>
[16:12:13.087] {
[16:12:13.087]     {
[16:12:13.087]         {
[16:12:13.087]             ...future.startTime <- base::Sys.time()
[16:12:13.087]             {
[16:12:13.087]                 {
[16:12:13.087]                   {
[16:12:13.087]                     {
[16:12:13.087]                       base::local({
[16:12:13.087]                         has_future <- base::requireNamespace("future", 
[16:12:13.087]                           quietly = TRUE)
[16:12:13.087]                         if (has_future) {
[16:12:13.087]                           ns <- base::getNamespace("future")
[16:12:13.087]                           version <- ns[[".package"]][["version"]]
[16:12:13.087]                           if (is.null(version)) 
[16:12:13.087]                             version <- utils::packageVersion("future")
[16:12:13.087]                         }
[16:12:13.087]                         else {
[16:12:13.087]                           version <- NULL
[16:12:13.087]                         }
[16:12:13.087]                         if (!has_future || version < "1.8.0") {
[16:12:13.087]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.087]                             "", base::R.version$version.string), 
[16:12:13.087]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.087]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.087]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.087]                               "release", "version")], collapse = " "), 
[16:12:13.087]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.087]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.087]                             info)
[16:12:13.087]                           info <- base::paste(info, collapse = "; ")
[16:12:13.087]                           if (!has_future) {
[16:12:13.087]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.087]                               info)
[16:12:13.087]                           }
[16:12:13.087]                           else {
[16:12:13.087]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.087]                               info, version)
[16:12:13.087]                           }
[16:12:13.087]                           base::stop(msg)
[16:12:13.087]                         }
[16:12:13.087]                       })
[16:12:13.087]                     }
[16:12:13.087]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.087]                     base::options(mc.cores = 1L)
[16:12:13.087]                   }
[16:12:13.087]                   options(future.plan = NULL)
[16:12:13.087]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.087]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.087]                 }
[16:12:13.087]                 ...future.workdir <- getwd()
[16:12:13.087]             }
[16:12:13.087]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.087]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.087]         }
[16:12:13.087]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.087]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.087]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.087]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.087]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.087]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.087]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.087]             base::names(...future.oldOptions))
[16:12:13.087]     }
[16:12:13.087]     if (FALSE) {
[16:12:13.087]     }
[16:12:13.087]     else {
[16:12:13.087]         if (TRUE) {
[16:12:13.087]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.087]                 open = "w")
[16:12:13.087]         }
[16:12:13.087]         else {
[16:12:13.087]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.087]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.087]         }
[16:12:13.087]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.087]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.087]             base::sink(type = "output", split = FALSE)
[16:12:13.087]             base::close(...future.stdout)
[16:12:13.087]         }, add = TRUE)
[16:12:13.087]     }
[16:12:13.087]     ...future.frame <- base::sys.nframe()
[16:12:13.087]     ...future.conditions <- base::list()
[16:12:13.087]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.087]     if (FALSE) {
[16:12:13.087]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.087]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.087]     }
[16:12:13.087]     ...future.result <- base::tryCatch({
[16:12:13.087]         base::withCallingHandlers({
[16:12:13.087]             ...future.value <- base::withVisible(base::local({
[16:12:13.087]                 withCallingHandlers({
[16:12:13.087]                   42
[16:12:13.087]                 }, immediateCondition = function(cond) {
[16:12:13.087]                   save_rds <- function (object, pathname, ...) 
[16:12:13.087]                   {
[16:12:13.087]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:13.087]                     if (file_test("-f", pathname_tmp)) {
[16:12:13.087]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.087]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:13.087]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.087]                         fi_tmp[["mtime"]])
[16:12:13.087]                     }
[16:12:13.087]                     tryCatch({
[16:12:13.087]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:13.087]                     }, error = function(ex) {
[16:12:13.087]                       msg <- conditionMessage(ex)
[16:12:13.087]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.087]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:13.087]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.087]                         fi_tmp[["mtime"]], msg)
[16:12:13.087]                       ex$message <- msg
[16:12:13.087]                       stop(ex)
[16:12:13.087]                     })
[16:12:13.087]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:13.087]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:13.087]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:13.087]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.087]                       fi <- file.info(pathname)
[16:12:13.087]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:13.087]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.087]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:13.087]                         fi[["size"]], fi[["mtime"]])
[16:12:13.087]                       stop(msg)
[16:12:13.087]                     }
[16:12:13.087]                     invisible(pathname)
[16:12:13.087]                   }
[16:12:13.087]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:13.087]                     rootPath = tempdir()) 
[16:12:13.087]                   {
[16:12:13.087]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:13.087]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:13.087]                       tmpdir = path, fileext = ".rds")
[16:12:13.087]                     save_rds(obj, file)
[16:12:13.087]                   }
[16:12:13.087]                   saveImmediateCondition(cond, path = "/tmp/Rtmpy0SiTl/.future/immediateConditions")
[16:12:13.087]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.087]                   {
[16:12:13.087]                     inherits <- base::inherits
[16:12:13.087]                     invokeRestart <- base::invokeRestart
[16:12:13.087]                     is.null <- base::is.null
[16:12:13.087]                     muffled <- FALSE
[16:12:13.087]                     if (inherits(cond, "message")) {
[16:12:13.087]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.087]                       if (muffled) 
[16:12:13.087]                         invokeRestart("muffleMessage")
[16:12:13.087]                     }
[16:12:13.087]                     else if (inherits(cond, "warning")) {
[16:12:13.087]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.087]                       if (muffled) 
[16:12:13.087]                         invokeRestart("muffleWarning")
[16:12:13.087]                     }
[16:12:13.087]                     else if (inherits(cond, "condition")) {
[16:12:13.087]                       if (!is.null(pattern)) {
[16:12:13.087]                         computeRestarts <- base::computeRestarts
[16:12:13.087]                         grepl <- base::grepl
[16:12:13.087]                         restarts <- computeRestarts(cond)
[16:12:13.087]                         for (restart in restarts) {
[16:12:13.087]                           name <- restart$name
[16:12:13.087]                           if (is.null(name)) 
[16:12:13.087]                             next
[16:12:13.087]                           if (!grepl(pattern, name)) 
[16:12:13.087]                             next
[16:12:13.087]                           invokeRestart(restart)
[16:12:13.087]                           muffled <- TRUE
[16:12:13.087]                           break
[16:12:13.087]                         }
[16:12:13.087]                       }
[16:12:13.087]                     }
[16:12:13.087]                     invisible(muffled)
[16:12:13.087]                   }
[16:12:13.087]                   muffleCondition(cond)
[16:12:13.087]                 })
[16:12:13.087]             }))
[16:12:13.087]             future::FutureResult(value = ...future.value$value, 
[16:12:13.087]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.087]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.087]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.087]                     ...future.globalenv.names))
[16:12:13.087]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.087]         }, condition = base::local({
[16:12:13.087]             c <- base::c
[16:12:13.087]             inherits <- base::inherits
[16:12:13.087]             invokeRestart <- base::invokeRestart
[16:12:13.087]             length <- base::length
[16:12:13.087]             list <- base::list
[16:12:13.087]             seq.int <- base::seq.int
[16:12:13.087]             signalCondition <- base::signalCondition
[16:12:13.087]             sys.calls <- base::sys.calls
[16:12:13.087]             `[[` <- base::`[[`
[16:12:13.087]             `+` <- base::`+`
[16:12:13.087]             `<<-` <- base::`<<-`
[16:12:13.087]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.087]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.087]                   3L)]
[16:12:13.087]             }
[16:12:13.087]             function(cond) {
[16:12:13.087]                 is_error <- inherits(cond, "error")
[16:12:13.087]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.087]                   NULL)
[16:12:13.087]                 if (is_error) {
[16:12:13.087]                   sessionInformation <- function() {
[16:12:13.087]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.087]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.087]                       search = base::search(), system = base::Sys.info())
[16:12:13.087]                   }
[16:12:13.087]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.087]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.087]                     cond$call), session = sessionInformation(), 
[16:12:13.087]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.087]                   signalCondition(cond)
[16:12:13.087]                 }
[16:12:13.087]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.087]                 "immediateCondition"))) {
[16:12:13.087]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.087]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.087]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.087]                   if (TRUE && !signal) {
[16:12:13.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.087]                     {
[16:12:13.087]                       inherits <- base::inherits
[16:12:13.087]                       invokeRestart <- base::invokeRestart
[16:12:13.087]                       is.null <- base::is.null
[16:12:13.087]                       muffled <- FALSE
[16:12:13.087]                       if (inherits(cond, "message")) {
[16:12:13.087]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.087]                         if (muffled) 
[16:12:13.087]                           invokeRestart("muffleMessage")
[16:12:13.087]                       }
[16:12:13.087]                       else if (inherits(cond, "warning")) {
[16:12:13.087]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.087]                         if (muffled) 
[16:12:13.087]                           invokeRestart("muffleWarning")
[16:12:13.087]                       }
[16:12:13.087]                       else if (inherits(cond, "condition")) {
[16:12:13.087]                         if (!is.null(pattern)) {
[16:12:13.087]                           computeRestarts <- base::computeRestarts
[16:12:13.087]                           grepl <- base::grepl
[16:12:13.087]                           restarts <- computeRestarts(cond)
[16:12:13.087]                           for (restart in restarts) {
[16:12:13.087]                             name <- restart$name
[16:12:13.087]                             if (is.null(name)) 
[16:12:13.087]                               next
[16:12:13.087]                             if (!grepl(pattern, name)) 
[16:12:13.087]                               next
[16:12:13.087]                             invokeRestart(restart)
[16:12:13.087]                             muffled <- TRUE
[16:12:13.087]                             break
[16:12:13.087]                           }
[16:12:13.087]                         }
[16:12:13.087]                       }
[16:12:13.087]                       invisible(muffled)
[16:12:13.087]                     }
[16:12:13.087]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.087]                   }
[16:12:13.087]                 }
[16:12:13.087]                 else {
[16:12:13.087]                   if (TRUE) {
[16:12:13.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.087]                     {
[16:12:13.087]                       inherits <- base::inherits
[16:12:13.087]                       invokeRestart <- base::invokeRestart
[16:12:13.087]                       is.null <- base::is.null
[16:12:13.087]                       muffled <- FALSE
[16:12:13.087]                       if (inherits(cond, "message")) {
[16:12:13.087]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.087]                         if (muffled) 
[16:12:13.087]                           invokeRestart("muffleMessage")
[16:12:13.087]                       }
[16:12:13.087]                       else if (inherits(cond, "warning")) {
[16:12:13.087]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.087]                         if (muffled) 
[16:12:13.087]                           invokeRestart("muffleWarning")
[16:12:13.087]                       }
[16:12:13.087]                       else if (inherits(cond, "condition")) {
[16:12:13.087]                         if (!is.null(pattern)) {
[16:12:13.087]                           computeRestarts <- base::computeRestarts
[16:12:13.087]                           grepl <- base::grepl
[16:12:13.087]                           restarts <- computeRestarts(cond)
[16:12:13.087]                           for (restart in restarts) {
[16:12:13.087]                             name <- restart$name
[16:12:13.087]                             if (is.null(name)) 
[16:12:13.087]                               next
[16:12:13.087]                             if (!grepl(pattern, name)) 
[16:12:13.087]                               next
[16:12:13.087]                             invokeRestart(restart)
[16:12:13.087]                             muffled <- TRUE
[16:12:13.087]                             break
[16:12:13.087]                           }
[16:12:13.087]                         }
[16:12:13.087]                       }
[16:12:13.087]                       invisible(muffled)
[16:12:13.087]                     }
[16:12:13.087]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.087]                   }
[16:12:13.087]                 }
[16:12:13.087]             }
[16:12:13.087]         }))
[16:12:13.087]     }, error = function(ex) {
[16:12:13.087]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.087]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.087]                 ...future.rng), started = ...future.startTime, 
[16:12:13.087]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.087]             version = "1.8"), class = "FutureResult")
[16:12:13.087]     }, finally = {
[16:12:13.087]         if (!identical(...future.workdir, getwd())) 
[16:12:13.087]             setwd(...future.workdir)
[16:12:13.087]         {
[16:12:13.087]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.087]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.087]             }
[16:12:13.087]             base::options(...future.oldOptions)
[16:12:13.087]             if (.Platform$OS.type == "windows") {
[16:12:13.087]                 old_names <- names(...future.oldEnvVars)
[16:12:13.087]                 envs <- base::Sys.getenv()
[16:12:13.087]                 names <- names(envs)
[16:12:13.087]                 common <- intersect(names, old_names)
[16:12:13.087]                 added <- setdiff(names, old_names)
[16:12:13.087]                 removed <- setdiff(old_names, names)
[16:12:13.087]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.087]                   envs[common]]
[16:12:13.087]                 NAMES <- toupper(changed)
[16:12:13.087]                 args <- list()
[16:12:13.087]                 for (kk in seq_along(NAMES)) {
[16:12:13.087]                   name <- changed[[kk]]
[16:12:13.087]                   NAME <- NAMES[[kk]]
[16:12:13.087]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.087]                     next
[16:12:13.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.087]                 }
[16:12:13.087]                 NAMES <- toupper(added)
[16:12:13.087]                 for (kk in seq_along(NAMES)) {
[16:12:13.087]                   name <- added[[kk]]
[16:12:13.087]                   NAME <- NAMES[[kk]]
[16:12:13.087]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.087]                     next
[16:12:13.087]                   args[[name]] <- ""
[16:12:13.087]                 }
[16:12:13.087]                 NAMES <- toupper(removed)
[16:12:13.087]                 for (kk in seq_along(NAMES)) {
[16:12:13.087]                   name <- removed[[kk]]
[16:12:13.087]                   NAME <- NAMES[[kk]]
[16:12:13.087]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.087]                     next
[16:12:13.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.087]                 }
[16:12:13.087]                 if (length(args) > 0) 
[16:12:13.087]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.087]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.087]             }
[16:12:13.087]             else {
[16:12:13.087]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.087]             }
[16:12:13.087]             {
[16:12:13.087]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.087]                   0L) {
[16:12:13.087]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.087]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.087]                   base::options(opts)
[16:12:13.087]                 }
[16:12:13.087]                 {
[16:12:13.087]                   {
[16:12:13.087]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.087]                     NULL
[16:12:13.087]                   }
[16:12:13.087]                   options(future.plan = NULL)
[16:12:13.087]                   if (is.na(NA_character_)) 
[16:12:13.087]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.087]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.087]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:13.087]                     envir = parent.frame()) 
[16:12:13.087]                   {
[16:12:13.087]                     default_workers <- missing(workers)
[16:12:13.087]                     if (is.function(workers)) 
[16:12:13.087]                       workers <- workers()
[16:12:13.087]                     workers <- structure(as.integer(workers), 
[16:12:13.087]                       class = class(workers))
[16:12:13.087]                     stop_if_not(is.finite(workers), workers >= 
[16:12:13.087]                       1L)
[16:12:13.087]                     if ((workers == 1L && !inherits(workers, 
[16:12:13.087]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:13.087]                       if (default_workers) 
[16:12:13.087]                         supportsMulticore(warn = TRUE)
[16:12:13.087]                       return(sequential(..., envir = envir))
[16:12:13.087]                     }
[16:12:13.087]                     oopts <- options(mc.cores = workers)
[16:12:13.087]                     on.exit(options(oopts))
[16:12:13.087]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:13.087]                       envir = envir)
[16:12:13.087]                     if (!future$lazy) 
[16:12:13.087]                       future <- run(future)
[16:12:13.087]                     invisible(future)
[16:12:13.087]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.087]                 }
[16:12:13.087]             }
[16:12:13.087]         }
[16:12:13.087]     })
[16:12:13.087]     if (TRUE) {
[16:12:13.087]         base::sink(type = "output", split = FALSE)
[16:12:13.087]         if (TRUE) {
[16:12:13.087]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.087]         }
[16:12:13.087]         else {
[16:12:13.087]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.087]         }
[16:12:13.087]         base::close(...future.stdout)
[16:12:13.087]         ...future.stdout <- NULL
[16:12:13.087]     }
[16:12:13.087]     ...future.result$conditions <- ...future.conditions
[16:12:13.087]     ...future.result$finished <- base::Sys.time()
[16:12:13.087]     ...future.result
[16:12:13.087] }
[16:12:13.090] requestCore(): workers = 2
[16:12:13.091] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:12:13.092] plan(): Setting new future strategy stack:
[16:12:13.093] List of future strategies:
[16:12:13.093] 1. sequential:
[16:12:13.093]    - args: function (..., envir = parent.frame())
[16:12:13.093]    - tweaked: FALSE
[16:12:13.093]    - call: NULL
[16:12:13.094] plan(): nbrOfWorkers() = 1
[16:12:13.095] plan(): Setting new future strategy stack:
[16:12:13.095] List of future strategies:
[16:12:13.095] 1. multicore:
[16:12:13.095]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:13.095]    - tweaked: FALSE
[16:12:13.095]    - call: plan(strategy)
[16:12:13.100] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.102] getGlobalsAndPackages() ...
[16:12:13.102] Searching for globals...
[16:12:13.103] 
[16:12:13.103] Searching for globals ... DONE
[16:12:13.103] - globals: [0] <none>
[16:12:13.104] getGlobalsAndPackages() ... DONE
[16:12:13.104] run() for ‘Future’ ...
[16:12:13.104] - state: ‘created’
[16:12:13.104] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:13.108] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.108] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:13.109]   - Field: ‘label’
[16:12:13.109]   - Field: ‘local’
[16:12:13.109]   - Field: ‘owner’
[16:12:13.109]   - Field: ‘envir’
[16:12:13.109]   - Field: ‘workers’
[16:12:13.109]   - Field: ‘packages’
[16:12:13.109]   - Field: ‘gc’
[16:12:13.109]   - Field: ‘job’
[16:12:13.110]   - Field: ‘conditions’
[16:12:13.110]   - Field: ‘expr’
[16:12:13.110]   - Field: ‘uuid’
[16:12:13.110]   - Field: ‘seed’
[16:12:13.110]   - Field: ‘version’
[16:12:13.110]   - Field: ‘result’
[16:12:13.110]   - Field: ‘asynchronous’
[16:12:13.110]   - Field: ‘calls’
[16:12:13.110]   - Field: ‘globals’
[16:12:13.113]   - Field: ‘stdout’
[16:12:13.114]   - Field: ‘earlySignal’
[16:12:13.114]   - Field: ‘lazy’
[16:12:13.114]   - Field: ‘state’
[16:12:13.114] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:13.114] - Launch lazy future ...
[16:12:13.114] Packages needed by the future expression (n = 0): <none>
[16:12:13.115] Packages needed by future strategies (n = 0): <none>
[16:12:13.115] {
[16:12:13.115]     {
[16:12:13.115]         {
[16:12:13.115]             ...future.startTime <- base::Sys.time()
[16:12:13.115]             {
[16:12:13.115]                 {
[16:12:13.115]                   {
[16:12:13.115]                     {
[16:12:13.115]                       base::local({
[16:12:13.115]                         has_future <- base::requireNamespace("future", 
[16:12:13.115]                           quietly = TRUE)
[16:12:13.115]                         if (has_future) {
[16:12:13.115]                           ns <- base::getNamespace("future")
[16:12:13.115]                           version <- ns[[".package"]][["version"]]
[16:12:13.115]                           if (is.null(version)) 
[16:12:13.115]                             version <- utils::packageVersion("future")
[16:12:13.115]                         }
[16:12:13.115]                         else {
[16:12:13.115]                           version <- NULL
[16:12:13.115]                         }
[16:12:13.115]                         if (!has_future || version < "1.8.0") {
[16:12:13.115]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.115]                             "", base::R.version$version.string), 
[16:12:13.115]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.115]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.115]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.115]                               "release", "version")], collapse = " "), 
[16:12:13.115]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.115]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.115]                             info)
[16:12:13.115]                           info <- base::paste(info, collapse = "; ")
[16:12:13.115]                           if (!has_future) {
[16:12:13.115]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.115]                               info)
[16:12:13.115]                           }
[16:12:13.115]                           else {
[16:12:13.115]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.115]                               info, version)
[16:12:13.115]                           }
[16:12:13.115]                           base::stop(msg)
[16:12:13.115]                         }
[16:12:13.115]                       })
[16:12:13.115]                     }
[16:12:13.115]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.115]                     base::options(mc.cores = 1L)
[16:12:13.115]                   }
[16:12:13.115]                   options(future.plan = NULL)
[16:12:13.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.115]                 }
[16:12:13.115]                 ...future.workdir <- getwd()
[16:12:13.115]             }
[16:12:13.115]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.115]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.115]         }
[16:12:13.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.115]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.115]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.115]             base::names(...future.oldOptions))
[16:12:13.115]     }
[16:12:13.115]     if (FALSE) {
[16:12:13.115]     }
[16:12:13.115]     else {
[16:12:13.115]         if (TRUE) {
[16:12:13.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.115]                 open = "w")
[16:12:13.115]         }
[16:12:13.115]         else {
[16:12:13.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.115]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.115]         }
[16:12:13.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.115]             base::sink(type = "output", split = FALSE)
[16:12:13.115]             base::close(...future.stdout)
[16:12:13.115]         }, add = TRUE)
[16:12:13.115]     }
[16:12:13.115]     ...future.frame <- base::sys.nframe()
[16:12:13.115]     ...future.conditions <- base::list()
[16:12:13.115]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.115]     if (FALSE) {
[16:12:13.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.115]     }
[16:12:13.115]     ...future.result <- base::tryCatch({
[16:12:13.115]         base::withCallingHandlers({
[16:12:13.115]             ...future.value <- base::withVisible(base::local({
[16:12:13.115]                 withCallingHandlers({
[16:12:13.115]                   42
[16:12:13.115]                 }, immediateCondition = function(cond) {
[16:12:13.115]                   save_rds <- function (object, pathname, ...) 
[16:12:13.115]                   {
[16:12:13.115]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:13.115]                     if (file_test("-f", pathname_tmp)) {
[16:12:13.115]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.115]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:13.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.115]                         fi_tmp[["mtime"]])
[16:12:13.115]                     }
[16:12:13.115]                     tryCatch({
[16:12:13.115]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:13.115]                     }, error = function(ex) {
[16:12:13.115]                       msg <- conditionMessage(ex)
[16:12:13.115]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.115]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:13.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.115]                         fi_tmp[["mtime"]], msg)
[16:12:13.115]                       ex$message <- msg
[16:12:13.115]                       stop(ex)
[16:12:13.115]                     })
[16:12:13.115]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:13.115]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:13.115]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:13.115]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.115]                       fi <- file.info(pathname)
[16:12:13.115]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:13.115]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.115]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:13.115]                         fi[["size"]], fi[["mtime"]])
[16:12:13.115]                       stop(msg)
[16:12:13.115]                     }
[16:12:13.115]                     invisible(pathname)
[16:12:13.115]                   }
[16:12:13.115]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:13.115]                     rootPath = tempdir()) 
[16:12:13.115]                   {
[16:12:13.115]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:13.115]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:13.115]                       tmpdir = path, fileext = ".rds")
[16:12:13.115]                     save_rds(obj, file)
[16:12:13.115]                   }
[16:12:13.115]                   saveImmediateCondition(cond, path = "/tmp/Rtmpy0SiTl/.future/immediateConditions")
[16:12:13.115]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.115]                   {
[16:12:13.115]                     inherits <- base::inherits
[16:12:13.115]                     invokeRestart <- base::invokeRestart
[16:12:13.115]                     is.null <- base::is.null
[16:12:13.115]                     muffled <- FALSE
[16:12:13.115]                     if (inherits(cond, "message")) {
[16:12:13.115]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.115]                       if (muffled) 
[16:12:13.115]                         invokeRestart("muffleMessage")
[16:12:13.115]                     }
[16:12:13.115]                     else if (inherits(cond, "warning")) {
[16:12:13.115]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.115]                       if (muffled) 
[16:12:13.115]                         invokeRestart("muffleWarning")
[16:12:13.115]                     }
[16:12:13.115]                     else if (inherits(cond, "condition")) {
[16:12:13.115]                       if (!is.null(pattern)) {
[16:12:13.115]                         computeRestarts <- base::computeRestarts
[16:12:13.115]                         grepl <- base::grepl
[16:12:13.115]                         restarts <- computeRestarts(cond)
[16:12:13.115]                         for (restart in restarts) {
[16:12:13.115]                           name <- restart$name
[16:12:13.115]                           if (is.null(name)) 
[16:12:13.115]                             next
[16:12:13.115]                           if (!grepl(pattern, name)) 
[16:12:13.115]                             next
[16:12:13.115]                           invokeRestart(restart)
[16:12:13.115]                           muffled <- TRUE
[16:12:13.115]                           break
[16:12:13.115]                         }
[16:12:13.115]                       }
[16:12:13.115]                     }
[16:12:13.115]                     invisible(muffled)
[16:12:13.115]                   }
[16:12:13.115]                   muffleCondition(cond)
[16:12:13.115]                 })
[16:12:13.115]             }))
[16:12:13.115]             future::FutureResult(value = ...future.value$value, 
[16:12:13.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.115]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.115]                     ...future.globalenv.names))
[16:12:13.115]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.115]         }, condition = base::local({
[16:12:13.115]             c <- base::c
[16:12:13.115]             inherits <- base::inherits
[16:12:13.115]             invokeRestart <- base::invokeRestart
[16:12:13.115]             length <- base::length
[16:12:13.115]             list <- base::list
[16:12:13.115]             seq.int <- base::seq.int
[16:12:13.115]             signalCondition <- base::signalCondition
[16:12:13.115]             sys.calls <- base::sys.calls
[16:12:13.115]             `[[` <- base::`[[`
[16:12:13.115]             `+` <- base::`+`
[16:12:13.115]             `<<-` <- base::`<<-`
[16:12:13.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.115]                   3L)]
[16:12:13.115]             }
[16:12:13.115]             function(cond) {
[16:12:13.115]                 is_error <- inherits(cond, "error")
[16:12:13.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.115]                   NULL)
[16:12:13.115]                 if (is_error) {
[16:12:13.115]                   sessionInformation <- function() {
[16:12:13.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.115]                       search = base::search(), system = base::Sys.info())
[16:12:13.115]                   }
[16:12:13.115]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.115]                     cond$call), session = sessionInformation(), 
[16:12:13.115]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.115]                   signalCondition(cond)
[16:12:13.115]                 }
[16:12:13.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.115]                 "immediateCondition"))) {
[16:12:13.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.115]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.115]                   if (TRUE && !signal) {
[16:12:13.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.115]                     {
[16:12:13.115]                       inherits <- base::inherits
[16:12:13.115]                       invokeRestart <- base::invokeRestart
[16:12:13.115]                       is.null <- base::is.null
[16:12:13.115]                       muffled <- FALSE
[16:12:13.115]                       if (inherits(cond, "message")) {
[16:12:13.115]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.115]                         if (muffled) 
[16:12:13.115]                           invokeRestart("muffleMessage")
[16:12:13.115]                       }
[16:12:13.115]                       else if (inherits(cond, "warning")) {
[16:12:13.115]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.115]                         if (muffled) 
[16:12:13.115]                           invokeRestart("muffleWarning")
[16:12:13.115]                       }
[16:12:13.115]                       else if (inherits(cond, "condition")) {
[16:12:13.115]                         if (!is.null(pattern)) {
[16:12:13.115]                           computeRestarts <- base::computeRestarts
[16:12:13.115]                           grepl <- base::grepl
[16:12:13.115]                           restarts <- computeRestarts(cond)
[16:12:13.115]                           for (restart in restarts) {
[16:12:13.115]                             name <- restart$name
[16:12:13.115]                             if (is.null(name)) 
[16:12:13.115]                               next
[16:12:13.115]                             if (!grepl(pattern, name)) 
[16:12:13.115]                               next
[16:12:13.115]                             invokeRestart(restart)
[16:12:13.115]                             muffled <- TRUE
[16:12:13.115]                             break
[16:12:13.115]                           }
[16:12:13.115]                         }
[16:12:13.115]                       }
[16:12:13.115]                       invisible(muffled)
[16:12:13.115]                     }
[16:12:13.115]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.115]                   }
[16:12:13.115]                 }
[16:12:13.115]                 else {
[16:12:13.115]                   if (TRUE) {
[16:12:13.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.115]                     {
[16:12:13.115]                       inherits <- base::inherits
[16:12:13.115]                       invokeRestart <- base::invokeRestart
[16:12:13.115]                       is.null <- base::is.null
[16:12:13.115]                       muffled <- FALSE
[16:12:13.115]                       if (inherits(cond, "message")) {
[16:12:13.115]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.115]                         if (muffled) 
[16:12:13.115]                           invokeRestart("muffleMessage")
[16:12:13.115]                       }
[16:12:13.115]                       else if (inherits(cond, "warning")) {
[16:12:13.115]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.115]                         if (muffled) 
[16:12:13.115]                           invokeRestart("muffleWarning")
[16:12:13.115]                       }
[16:12:13.115]                       else if (inherits(cond, "condition")) {
[16:12:13.115]                         if (!is.null(pattern)) {
[16:12:13.115]                           computeRestarts <- base::computeRestarts
[16:12:13.115]                           grepl <- base::grepl
[16:12:13.115]                           restarts <- computeRestarts(cond)
[16:12:13.115]                           for (restart in restarts) {
[16:12:13.115]                             name <- restart$name
[16:12:13.115]                             if (is.null(name)) 
[16:12:13.115]                               next
[16:12:13.115]                             if (!grepl(pattern, name)) 
[16:12:13.115]                               next
[16:12:13.115]                             invokeRestart(restart)
[16:12:13.115]                             muffled <- TRUE
[16:12:13.115]                             break
[16:12:13.115]                           }
[16:12:13.115]                         }
[16:12:13.115]                       }
[16:12:13.115]                       invisible(muffled)
[16:12:13.115]                     }
[16:12:13.115]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.115]                   }
[16:12:13.115]                 }
[16:12:13.115]             }
[16:12:13.115]         }))
[16:12:13.115]     }, error = function(ex) {
[16:12:13.115]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.115]                 ...future.rng), started = ...future.startTime, 
[16:12:13.115]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.115]             version = "1.8"), class = "FutureResult")
[16:12:13.115]     }, finally = {
[16:12:13.115]         if (!identical(...future.workdir, getwd())) 
[16:12:13.115]             setwd(...future.workdir)
[16:12:13.115]         {
[16:12:13.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.115]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.115]             }
[16:12:13.115]             base::options(...future.oldOptions)
[16:12:13.115]             if (.Platform$OS.type == "windows") {
[16:12:13.115]                 old_names <- names(...future.oldEnvVars)
[16:12:13.115]                 envs <- base::Sys.getenv()
[16:12:13.115]                 names <- names(envs)
[16:12:13.115]                 common <- intersect(names, old_names)
[16:12:13.115]                 added <- setdiff(names, old_names)
[16:12:13.115]                 removed <- setdiff(old_names, names)
[16:12:13.115]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.115]                   envs[common]]
[16:12:13.115]                 NAMES <- toupper(changed)
[16:12:13.115]                 args <- list()
[16:12:13.115]                 for (kk in seq_along(NAMES)) {
[16:12:13.115]                   name <- changed[[kk]]
[16:12:13.115]                   NAME <- NAMES[[kk]]
[16:12:13.115]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.115]                     next
[16:12:13.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.115]                 }
[16:12:13.115]                 NAMES <- toupper(added)
[16:12:13.115]                 for (kk in seq_along(NAMES)) {
[16:12:13.115]                   name <- added[[kk]]
[16:12:13.115]                   NAME <- NAMES[[kk]]
[16:12:13.115]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.115]                     next
[16:12:13.115]                   args[[name]] <- ""
[16:12:13.115]                 }
[16:12:13.115]                 NAMES <- toupper(removed)
[16:12:13.115]                 for (kk in seq_along(NAMES)) {
[16:12:13.115]                   name <- removed[[kk]]
[16:12:13.115]                   NAME <- NAMES[[kk]]
[16:12:13.115]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.115]                     next
[16:12:13.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.115]                 }
[16:12:13.115]                 if (length(args) > 0) 
[16:12:13.115]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.115]             }
[16:12:13.115]             else {
[16:12:13.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.115]             }
[16:12:13.115]             {
[16:12:13.115]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.115]                   0L) {
[16:12:13.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.115]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.115]                   base::options(opts)
[16:12:13.115]                 }
[16:12:13.115]                 {
[16:12:13.115]                   {
[16:12:13.115]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.115]                     NULL
[16:12:13.115]                   }
[16:12:13.115]                   options(future.plan = NULL)
[16:12:13.115]                   if (is.na(NA_character_)) 
[16:12:13.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.115]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:13.115]                     envir = parent.frame()) 
[16:12:13.115]                   {
[16:12:13.115]                     default_workers <- missing(workers)
[16:12:13.115]                     if (is.function(workers)) 
[16:12:13.115]                       workers <- workers()
[16:12:13.115]                     workers <- structure(as.integer(workers), 
[16:12:13.115]                       class = class(workers))
[16:12:13.115]                     stop_if_not(is.finite(workers), workers >= 
[16:12:13.115]                       1L)
[16:12:13.115]                     if ((workers == 1L && !inherits(workers, 
[16:12:13.115]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:13.115]                       if (default_workers) 
[16:12:13.115]                         supportsMulticore(warn = TRUE)
[16:12:13.115]                       return(sequential(..., envir = envir))
[16:12:13.115]                     }
[16:12:13.115]                     oopts <- options(mc.cores = workers)
[16:12:13.115]                     on.exit(options(oopts))
[16:12:13.115]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:13.115]                       envir = envir)
[16:12:13.115]                     if (!future$lazy) 
[16:12:13.115]                       future <- run(future)
[16:12:13.115]                     invisible(future)
[16:12:13.115]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.115]                 }
[16:12:13.115]             }
[16:12:13.115]         }
[16:12:13.115]     })
[16:12:13.115]     if (TRUE) {
[16:12:13.115]         base::sink(type = "output", split = FALSE)
[16:12:13.115]         if (TRUE) {
[16:12:13.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.115]         }
[16:12:13.115]         else {
[16:12:13.115]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.115]         }
[16:12:13.115]         base::close(...future.stdout)
[16:12:13.115]         ...future.stdout <- NULL
[16:12:13.115]     }
[16:12:13.115]     ...future.result$conditions <- ...future.conditions
[16:12:13.115]     ...future.result$finished <- base::Sys.time()
[16:12:13.115]     ...future.result
[16:12:13.115] }
[16:12:13.118] requestCore(): workers = 2
[16:12:13.120] MulticoreFuture started
[16:12:13.120] - Launch lazy future ... done
[16:12:13.120] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[16:12:13.121] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:12:13.121] List of future strategies:
[16:12:13.121] 1. sequential:
[16:12:13.121]    - args: function (..., envir = parent.frame())
[16:12:13.121]    - tweaked: FALSE
[16:12:13.121]    - call: NULL
[16:12:13.122] plan(): nbrOfWorkers() = 1
[16:12:13.124] plan(): Setting new future strategy stack:
[16:12:13.124] List of future strategies:
[16:12:13.124] 1. multicore:
[16:12:13.124]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:13.124]    - tweaked: FALSE
[16:12:13.124]    - call: plan(strategy)
[16:12:13.130] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.132] getGlobalsAndPackages() ...
[16:12:13.132] Searching for globals...
[16:12:13.133] - globals found: [1] ‘{’
[16:12:13.133] Searching for globals ... DONE
[16:12:13.134] Resolving globals: FALSE
[16:12:13.134] 
[16:12:13.134] 
[16:12:13.134] getGlobalsAndPackages() ... DONE
[16:12:13.135] run() for ‘Future’ ...
[16:12:13.135] - state: ‘created’
[16:12:13.135] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:13.139] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.139] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:13.139]   - Field: ‘label’
[16:12:13.139]   - Field: ‘local’
[16:12:13.139]   - Field: ‘owner’
[16:12:13.140]   - Field: ‘envir’
[16:12:13.140]   - Field: ‘workers’
[16:12:13.140]   - Field: ‘packages’
[16:12:13.140]   - Field: ‘gc’
[16:12:13.140]   - Field: ‘job’
[16:12:13.140]   - Field: ‘conditions’
[16:12:13.140]   - Field: ‘expr’
[16:12:13.140]   - Field: ‘uuid’
[16:12:13.140]   - Field: ‘seed’
[16:12:13.141]   - Field: ‘version’
[16:12:13.141]   - Field: ‘result’
[16:12:13.141]   - Field: ‘asynchronous’
[16:12:13.141]   - Field: ‘calls’
[16:12:13.141]   - Field: ‘globals’
[16:12:13.141]   - Field: ‘stdout’
[16:12:13.141]   - Field: ‘earlySignal’
[16:12:13.141]   - Field: ‘lazy’
[16:12:13.142]   - Field: ‘state’
[16:12:13.142] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:13.142] - Launch lazy future ...
[16:12:13.142] Packages needed by the future expression (n = 0): <none>
[16:12:13.142] Packages needed by future strategies (n = 0): <none>
[16:12:13.143] {
[16:12:13.143]     {
[16:12:13.143]         {
[16:12:13.143]             ...future.startTime <- base::Sys.time()
[16:12:13.143]             {
[16:12:13.143]                 {
[16:12:13.143]                   {
[16:12:13.143]                     {
[16:12:13.143]                       base::local({
[16:12:13.143]                         has_future <- base::requireNamespace("future", 
[16:12:13.143]                           quietly = TRUE)
[16:12:13.143]                         if (has_future) {
[16:12:13.143]                           ns <- base::getNamespace("future")
[16:12:13.143]                           version <- ns[[".package"]][["version"]]
[16:12:13.143]                           if (is.null(version)) 
[16:12:13.143]                             version <- utils::packageVersion("future")
[16:12:13.143]                         }
[16:12:13.143]                         else {
[16:12:13.143]                           version <- NULL
[16:12:13.143]                         }
[16:12:13.143]                         if (!has_future || version < "1.8.0") {
[16:12:13.143]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.143]                             "", base::R.version$version.string), 
[16:12:13.143]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.143]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.143]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.143]                               "release", "version")], collapse = " "), 
[16:12:13.143]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.143]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.143]                             info)
[16:12:13.143]                           info <- base::paste(info, collapse = "; ")
[16:12:13.143]                           if (!has_future) {
[16:12:13.143]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.143]                               info)
[16:12:13.143]                           }
[16:12:13.143]                           else {
[16:12:13.143]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.143]                               info, version)
[16:12:13.143]                           }
[16:12:13.143]                           base::stop(msg)
[16:12:13.143]                         }
[16:12:13.143]                       })
[16:12:13.143]                     }
[16:12:13.143]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.143]                     base::options(mc.cores = 1L)
[16:12:13.143]                   }
[16:12:13.143]                   options(future.plan = NULL)
[16:12:13.143]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.143]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.143]                 }
[16:12:13.143]                 ...future.workdir <- getwd()
[16:12:13.143]             }
[16:12:13.143]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.143]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.143]         }
[16:12:13.143]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.143]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.143]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.143]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.143]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.143]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.143]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.143]             base::names(...future.oldOptions))
[16:12:13.143]     }
[16:12:13.143]     if (FALSE) {
[16:12:13.143]     }
[16:12:13.143]     else {
[16:12:13.143]         if (TRUE) {
[16:12:13.143]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.143]                 open = "w")
[16:12:13.143]         }
[16:12:13.143]         else {
[16:12:13.143]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.143]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.143]         }
[16:12:13.143]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.143]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.143]             base::sink(type = "output", split = FALSE)
[16:12:13.143]             base::close(...future.stdout)
[16:12:13.143]         }, add = TRUE)
[16:12:13.143]     }
[16:12:13.143]     ...future.frame <- base::sys.nframe()
[16:12:13.143]     ...future.conditions <- base::list()
[16:12:13.143]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.143]     if (FALSE) {
[16:12:13.143]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.143]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.143]     }
[16:12:13.143]     ...future.result <- base::tryCatch({
[16:12:13.143]         base::withCallingHandlers({
[16:12:13.143]             ...future.value <- base::withVisible(base::local({
[16:12:13.143]                 withCallingHandlers({
[16:12:13.143]                   {
[16:12:13.143]                     42
[16:12:13.143]                   }
[16:12:13.143]                 }, immediateCondition = function(cond) {
[16:12:13.143]                   save_rds <- function (object, pathname, ...) 
[16:12:13.143]                   {
[16:12:13.143]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:13.143]                     if (file_test("-f", pathname_tmp)) {
[16:12:13.143]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.143]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:13.143]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.143]                         fi_tmp[["mtime"]])
[16:12:13.143]                     }
[16:12:13.143]                     tryCatch({
[16:12:13.143]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:13.143]                     }, error = function(ex) {
[16:12:13.143]                       msg <- conditionMessage(ex)
[16:12:13.143]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.143]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:13.143]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.143]                         fi_tmp[["mtime"]], msg)
[16:12:13.143]                       ex$message <- msg
[16:12:13.143]                       stop(ex)
[16:12:13.143]                     })
[16:12:13.143]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:13.143]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:13.143]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:13.143]                       fi_tmp <- file.info(pathname_tmp)
[16:12:13.143]                       fi <- file.info(pathname)
[16:12:13.143]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:13.143]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:13.143]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:13.143]                         fi[["size"]], fi[["mtime"]])
[16:12:13.143]                       stop(msg)
[16:12:13.143]                     }
[16:12:13.143]                     invisible(pathname)
[16:12:13.143]                   }
[16:12:13.143]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:13.143]                     rootPath = tempdir()) 
[16:12:13.143]                   {
[16:12:13.143]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:13.143]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:13.143]                       tmpdir = path, fileext = ".rds")
[16:12:13.143]                     save_rds(obj, file)
[16:12:13.143]                   }
[16:12:13.143]                   saveImmediateCondition(cond, path = "/tmp/Rtmpy0SiTl/.future/immediateConditions")
[16:12:13.143]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.143]                   {
[16:12:13.143]                     inherits <- base::inherits
[16:12:13.143]                     invokeRestart <- base::invokeRestart
[16:12:13.143]                     is.null <- base::is.null
[16:12:13.143]                     muffled <- FALSE
[16:12:13.143]                     if (inherits(cond, "message")) {
[16:12:13.143]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.143]                       if (muffled) 
[16:12:13.143]                         invokeRestart("muffleMessage")
[16:12:13.143]                     }
[16:12:13.143]                     else if (inherits(cond, "warning")) {
[16:12:13.143]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.143]                       if (muffled) 
[16:12:13.143]                         invokeRestart("muffleWarning")
[16:12:13.143]                     }
[16:12:13.143]                     else if (inherits(cond, "condition")) {
[16:12:13.143]                       if (!is.null(pattern)) {
[16:12:13.143]                         computeRestarts <- base::computeRestarts
[16:12:13.143]                         grepl <- base::grepl
[16:12:13.143]                         restarts <- computeRestarts(cond)
[16:12:13.143]                         for (restart in restarts) {
[16:12:13.143]                           name <- restart$name
[16:12:13.143]                           if (is.null(name)) 
[16:12:13.143]                             next
[16:12:13.143]                           if (!grepl(pattern, name)) 
[16:12:13.143]                             next
[16:12:13.143]                           invokeRestart(restart)
[16:12:13.143]                           muffled <- TRUE
[16:12:13.143]                           break
[16:12:13.143]                         }
[16:12:13.143]                       }
[16:12:13.143]                     }
[16:12:13.143]                     invisible(muffled)
[16:12:13.143]                   }
[16:12:13.143]                   muffleCondition(cond)
[16:12:13.143]                 })
[16:12:13.143]             }))
[16:12:13.143]             future::FutureResult(value = ...future.value$value, 
[16:12:13.143]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.143]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.143]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.143]                     ...future.globalenv.names))
[16:12:13.143]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.143]         }, condition = base::local({
[16:12:13.143]             c <- base::c
[16:12:13.143]             inherits <- base::inherits
[16:12:13.143]             invokeRestart <- base::invokeRestart
[16:12:13.143]             length <- base::length
[16:12:13.143]             list <- base::list
[16:12:13.143]             seq.int <- base::seq.int
[16:12:13.143]             signalCondition <- base::signalCondition
[16:12:13.143]             sys.calls <- base::sys.calls
[16:12:13.143]             `[[` <- base::`[[`
[16:12:13.143]             `+` <- base::`+`
[16:12:13.143]             `<<-` <- base::`<<-`
[16:12:13.143]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.143]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.143]                   3L)]
[16:12:13.143]             }
[16:12:13.143]             function(cond) {
[16:12:13.143]                 is_error <- inherits(cond, "error")
[16:12:13.143]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.143]                   NULL)
[16:12:13.143]                 if (is_error) {
[16:12:13.143]                   sessionInformation <- function() {
[16:12:13.143]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.143]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.143]                       search = base::search(), system = base::Sys.info())
[16:12:13.143]                   }
[16:12:13.143]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.143]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.143]                     cond$call), session = sessionInformation(), 
[16:12:13.143]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.143]                   signalCondition(cond)
[16:12:13.143]                 }
[16:12:13.143]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.143]                 "immediateCondition"))) {
[16:12:13.143]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.143]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.143]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.143]                   if (TRUE && !signal) {
[16:12:13.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.143]                     {
[16:12:13.143]                       inherits <- base::inherits
[16:12:13.143]                       invokeRestart <- base::invokeRestart
[16:12:13.143]                       is.null <- base::is.null
[16:12:13.143]                       muffled <- FALSE
[16:12:13.143]                       if (inherits(cond, "message")) {
[16:12:13.143]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.143]                         if (muffled) 
[16:12:13.143]                           invokeRestart("muffleMessage")
[16:12:13.143]                       }
[16:12:13.143]                       else if (inherits(cond, "warning")) {
[16:12:13.143]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.143]                         if (muffled) 
[16:12:13.143]                           invokeRestart("muffleWarning")
[16:12:13.143]                       }
[16:12:13.143]                       else if (inherits(cond, "condition")) {
[16:12:13.143]                         if (!is.null(pattern)) {
[16:12:13.143]                           computeRestarts <- base::computeRestarts
[16:12:13.143]                           grepl <- base::grepl
[16:12:13.143]                           restarts <- computeRestarts(cond)
[16:12:13.143]                           for (restart in restarts) {
[16:12:13.143]                             name <- restart$name
[16:12:13.143]                             if (is.null(name)) 
[16:12:13.143]                               next
[16:12:13.143]                             if (!grepl(pattern, name)) 
[16:12:13.143]                               next
[16:12:13.143]                             invokeRestart(restart)
[16:12:13.143]                             muffled <- TRUE
[16:12:13.143]                             break
[16:12:13.143]                           }
[16:12:13.143]                         }
[16:12:13.143]                       }
[16:12:13.143]                       invisible(muffled)
[16:12:13.143]                     }
[16:12:13.143]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.143]                   }
[16:12:13.143]                 }
[16:12:13.143]                 else {
[16:12:13.143]                   if (TRUE) {
[16:12:13.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.143]                     {
[16:12:13.143]                       inherits <- base::inherits
[16:12:13.143]                       invokeRestart <- base::invokeRestart
[16:12:13.143]                       is.null <- base::is.null
[16:12:13.143]                       muffled <- FALSE
[16:12:13.143]                       if (inherits(cond, "message")) {
[16:12:13.143]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.143]                         if (muffled) 
[16:12:13.143]                           invokeRestart("muffleMessage")
[16:12:13.143]                       }
[16:12:13.143]                       else if (inherits(cond, "warning")) {
[16:12:13.143]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.143]                         if (muffled) 
[16:12:13.143]                           invokeRestart("muffleWarning")
[16:12:13.143]                       }
[16:12:13.143]                       else if (inherits(cond, "condition")) {
[16:12:13.143]                         if (!is.null(pattern)) {
[16:12:13.143]                           computeRestarts <- base::computeRestarts
[16:12:13.143]                           grepl <- base::grepl
[16:12:13.143]                           restarts <- computeRestarts(cond)
[16:12:13.143]                           for (restart in restarts) {
[16:12:13.143]                             name <- restart$name
[16:12:13.143]                             if (is.null(name)) 
[16:12:13.143]                               next
[16:12:13.143]                             if (!grepl(pattern, name)) 
[16:12:13.143]                               next
[16:12:13.143]                             invokeRestart(restart)
[16:12:13.143]                             muffled <- TRUE
[16:12:13.143]                             break
[16:12:13.143]                           }
[16:12:13.143]                         }
[16:12:13.143]                       }
[16:12:13.143]                       invisible(muffled)
[16:12:13.143]                     }
[16:12:13.143]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.143]                   }
[16:12:13.143]                 }
[16:12:13.143]             }
[16:12:13.143]         }))
[16:12:13.143]     }, error = function(ex) {
[16:12:13.143]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.143]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.143]                 ...future.rng), started = ...future.startTime, 
[16:12:13.143]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.143]             version = "1.8"), class = "FutureResult")
[16:12:13.143]     }, finally = {
[16:12:13.143]         if (!identical(...future.workdir, getwd())) 
[16:12:13.143]             setwd(...future.workdir)
[16:12:13.143]         {
[16:12:13.143]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.143]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.143]             }
[16:12:13.143]             base::options(...future.oldOptions)
[16:12:13.143]             if (.Platform$OS.type == "windows") {
[16:12:13.143]                 old_names <- names(...future.oldEnvVars)
[16:12:13.143]                 envs <- base::Sys.getenv()
[16:12:13.143]                 names <- names(envs)
[16:12:13.143]                 common <- intersect(names, old_names)
[16:12:13.143]                 added <- setdiff(names, old_names)
[16:12:13.143]                 removed <- setdiff(old_names, names)
[16:12:13.143]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.143]                   envs[common]]
[16:12:13.143]                 NAMES <- toupper(changed)
[16:12:13.143]                 args <- list()
[16:12:13.143]                 for (kk in seq_along(NAMES)) {
[16:12:13.143]                   name <- changed[[kk]]
[16:12:13.143]                   NAME <- NAMES[[kk]]
[16:12:13.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.143]                     next
[16:12:13.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.143]                 }
[16:12:13.143]                 NAMES <- toupper(added)
[16:12:13.143]                 for (kk in seq_along(NAMES)) {
[16:12:13.143]                   name <- added[[kk]]
[16:12:13.143]                   NAME <- NAMES[[kk]]
[16:12:13.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.143]                     next
[16:12:13.143]                   args[[name]] <- ""
[16:12:13.143]                 }
[16:12:13.143]                 NAMES <- toupper(removed)
[16:12:13.143]                 for (kk in seq_along(NAMES)) {
[16:12:13.143]                   name <- removed[[kk]]
[16:12:13.143]                   NAME <- NAMES[[kk]]
[16:12:13.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.143]                     next
[16:12:13.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.143]                 }
[16:12:13.143]                 if (length(args) > 0) 
[16:12:13.143]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.143]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.143]             }
[16:12:13.143]             else {
[16:12:13.143]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.143]             }
[16:12:13.143]             {
[16:12:13.143]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.143]                   0L) {
[16:12:13.143]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.143]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.143]                   base::options(opts)
[16:12:13.143]                 }
[16:12:13.143]                 {
[16:12:13.143]                   {
[16:12:13.143]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.143]                     NULL
[16:12:13.143]                   }
[16:12:13.143]                   options(future.plan = NULL)
[16:12:13.143]                   if (is.na(NA_character_)) 
[16:12:13.143]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.143]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.143]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:13.143]                     envir = parent.frame()) 
[16:12:13.143]                   {
[16:12:13.143]                     default_workers <- missing(workers)
[16:12:13.143]                     if (is.function(workers)) 
[16:12:13.143]                       workers <- workers()
[16:12:13.143]                     workers <- structure(as.integer(workers), 
[16:12:13.143]                       class = class(workers))
[16:12:13.143]                     stop_if_not(is.finite(workers), workers >= 
[16:12:13.143]                       1L)
[16:12:13.143]                     if ((workers == 1L && !inherits(workers, 
[16:12:13.143]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:13.143]                       if (default_workers) 
[16:12:13.143]                         supportsMulticore(warn = TRUE)
[16:12:13.143]                       return(sequential(..., envir = envir))
[16:12:13.143]                     }
[16:12:13.143]                     oopts <- options(mc.cores = workers)
[16:12:13.143]                     on.exit(options(oopts))
[16:12:13.143]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:13.143]                       envir = envir)
[16:12:13.143]                     if (!future$lazy) 
[16:12:13.143]                       future <- run(future)
[16:12:13.143]                     invisible(future)
[16:12:13.143]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.143]                 }
[16:12:13.143]             }
[16:12:13.143]         }
[16:12:13.143]     })
[16:12:13.143]     if (TRUE) {
[16:12:13.143]         base::sink(type = "output", split = FALSE)
[16:12:13.143]         if (TRUE) {
[16:12:13.143]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.143]         }
[16:12:13.143]         else {
[16:12:13.143]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.143]         }
[16:12:13.143]         base::close(...future.stdout)
[16:12:13.143]         ...future.stdout <- NULL
[16:12:13.143]     }
[16:12:13.143]     ...future.result$conditions <- ...future.conditions
[16:12:13.143]     ...future.result$finished <- base::Sys.time()
[16:12:13.143]     ...future.result
[16:12:13.143] }
[16:12:13.146] requestCore(): workers = 2
[16:12:13.147] MulticoreFuture started
[16:12:13.148] - Launch lazy future ... done
[16:12:13.148] run() for ‘MulticoreFuture’ ... done
[16:12:13.149] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:12:13.149] List of future strategies:
[16:12:13.149] 1. sequential:
[16:12:13.149]    - args: function (..., envir = parent.frame())
[16:12:13.149]    - tweaked: FALSE
[16:12:13.149]    - call: NULL
[16:12:13.150] plan(): nbrOfWorkers() = 1
[16:12:13.152] plan(): Setting new future strategy stack:
[16:12:13.152] List of future strategies:
[16:12:13.152] 1. multicore:
[16:12:13.152]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:13.152]    - tweaked: FALSE
[16:12:13.152]    - call: plan(strategy)
[16:12:13.157] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
- plan('multicore') ... DONE
- plan('multisession') ...
[16:12:13.160] plan(): Setting new future strategy stack:
[16:12:13.160] List of future strategies:
[16:12:13.160] 1. multisession:
[16:12:13.160]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:13.160]    - tweaked: FALSE
[16:12:13.160]    - call: plan(strategy)
[16:12:13.160] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:13.161] multisession:
[16:12:13.161] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:13.161] - tweaked: FALSE
[16:12:13.161] - call: plan(strategy)
[16:12:13.167] getGlobalsAndPackages() ...
[16:12:13.168] Not searching for globals
[16:12:13.168] - globals: [0] <none>
[16:12:13.168] getGlobalsAndPackages() ... DONE
[16:12:13.169] [local output] makeClusterPSOCK() ...
[16:12:13.205] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:13.211] [local output] Base port: 11351
[16:12:13.211] [local output] Getting setup options for 2 cluster nodes ...
[16:12:13.211] [local output]  - Node 1 of 2 ...
[16:12:13.211] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:13.212] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpy0SiTl/worker.rank=1.parallelly.parent=81845.13fb528128a86.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpy0SiTl/worker.rank=1.parallelly.parent=81845.13fb528128a86.pid")'’
[16:12:13.399] - Possible to infer worker's PID: TRUE
[16:12:13.399] [local output] Rscript port: 11351

[16:12:13.400] [local output]  - Node 2 of 2 ...
[16:12:13.400] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:13.401] [local output] Rscript port: 11351

[16:12:13.401] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:13.401] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:13.402] [local output] Setting up PSOCK nodes in parallel
[16:12:13.402] List of 36
[16:12:13.402]  $ worker          : chr "localhost"
[16:12:13.402]   ..- attr(*, "localhost")= logi TRUE
[16:12:13.402]  $ master          : chr "localhost"
[16:12:13.402]  $ port            : int 11351
[16:12:13.402]  $ connectTimeout  : num 120
[16:12:13.402]  $ timeout         : num 2592000
[16:12:13.402]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:13.402]  $ homogeneous     : logi TRUE
[16:12:13.402]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:13.402]  $ rscript_envs    : NULL
[16:12:13.402]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:13.402]  $ rscript_startup : NULL
[16:12:13.402]  $ rscript_sh      : chr "sh"
[16:12:13.402]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:13.402]  $ methods         : logi TRUE
[16:12:13.402]  $ socketOptions   : chr "no-delay"
[16:12:13.402]  $ useXDR          : logi FALSE
[16:12:13.402]  $ outfile         : chr "/dev/null"
[16:12:13.402]  $ renice          : int NA
[16:12:13.402]  $ rshcmd          : NULL
[16:12:13.402]  $ user            : chr(0) 
[16:12:13.402]  $ revtunnel       : logi FALSE
[16:12:13.402]  $ rshlogfile      : NULL
[16:12:13.402]  $ rshopts         : chr(0) 
[16:12:13.402]  $ rank            : int 1
[16:12:13.402]  $ manual          : logi FALSE
[16:12:13.402]  $ dryrun          : logi FALSE
[16:12:13.402]  $ quiet           : logi FALSE
[16:12:13.402]  $ setup_strategy  : chr "parallel"
[16:12:13.402]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:13.402]  $ pidfile         : chr "/tmp/Rtmpy0SiTl/worker.rank=1.parallelly.parent=81845.13fb528128a86.pid"
[16:12:13.402]  $ rshcmd_label    : NULL
[16:12:13.402]  $ rsh_call        : NULL
[16:12:13.402]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:13.402]  $ localMachine    : logi TRUE
[16:12:13.402]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:13.402]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:13.402]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:13.402]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:13.402]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:13.402]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:13.402]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:13.402]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:13.402]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:13.402]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:13.402]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:13.402]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:13.402]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:13.402]  $ arguments       :List of 28
[16:12:13.402]   ..$ worker          : chr "localhost"
[16:12:13.402]   ..$ master          : NULL
[16:12:13.402]   ..$ port            : int 11351
[16:12:13.402]   ..$ connectTimeout  : num 120
[16:12:13.402]   ..$ timeout         : num 2592000
[16:12:13.402]   ..$ rscript         : NULL
[16:12:13.402]   ..$ homogeneous     : NULL
[16:12:13.402]   ..$ rscript_args    : NULL
[16:12:13.402]   ..$ rscript_envs    : NULL
[16:12:13.402]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:13.402]   ..$ rscript_startup : NULL
[16:12:13.402]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:13.402]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:13.402]   ..$ methods         : logi TRUE
[16:12:13.402]   ..$ socketOptions   : chr "no-delay"
[16:12:13.402]   ..$ useXDR          : logi FALSE
[16:12:13.402]   ..$ outfile         : chr "/dev/null"
[16:12:13.402]   ..$ renice          : int NA
[16:12:13.402]   ..$ rshcmd          : NULL
[16:12:13.402]   ..$ user            : NULL
[16:12:13.402]   ..$ revtunnel       : logi NA
[16:12:13.402]   ..$ rshlogfile      : NULL
[16:12:13.402]   ..$ rshopts         : NULL
[16:12:13.402]   ..$ rank            : int 1
[16:12:13.402]   ..$ manual          : logi FALSE
[16:12:13.402]   ..$ dryrun          : logi FALSE
[16:12:13.402]   ..$ quiet           : logi FALSE
[16:12:13.402]   ..$ setup_strategy  : chr "parallel"
[16:12:13.402]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:13.421] [local output] System call to launch all workers:
[16:12:13.421] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpy0SiTl/worker.rank=1.parallelly.parent=81845.13fb528128a86.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11351 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:13.421] [local output] Starting PSOCK main server
[16:12:13.423] [local output] Workers launched
[16:12:13.423] [local output] Waiting for workers to connect back
[16:12:13.423]  - [local output] 0 workers out of 2 ready
[16:12:13.670]  - [local output] 0 workers out of 2 ready
[16:12:13.670]  - [local output] 1 workers out of 2 ready
[16:12:13.671]  - [local output] 1 workers out of 2 ready
[16:12:13.671]  - [local output] 2 workers out of 2 ready
[16:12:13.671] [local output] Launching of workers completed
[16:12:13.671] [local output] Collecting session information from workers
[16:12:13.672] [local output]  - Worker #1 of 2
[16:12:13.673] [local output]  - Worker #2 of 2
[16:12:13.673] [local output] makeClusterPSOCK() ... done
[16:12:13.686] Packages needed by the future expression (n = 0): <none>
[16:12:13.686] Packages needed by future strategies (n = 0): <none>
[16:12:13.686] {
[16:12:13.686]     {
[16:12:13.686]         {
[16:12:13.686]             ...future.startTime <- base::Sys.time()
[16:12:13.686]             {
[16:12:13.686]                 {
[16:12:13.686]                   {
[16:12:13.686]                     {
[16:12:13.686]                       base::local({
[16:12:13.686]                         has_future <- base::requireNamespace("future", 
[16:12:13.686]                           quietly = TRUE)
[16:12:13.686]                         if (has_future) {
[16:12:13.686]                           ns <- base::getNamespace("future")
[16:12:13.686]                           version <- ns[[".package"]][["version"]]
[16:12:13.686]                           if (is.null(version)) 
[16:12:13.686]                             version <- utils::packageVersion("future")
[16:12:13.686]                         }
[16:12:13.686]                         else {
[16:12:13.686]                           version <- NULL
[16:12:13.686]                         }
[16:12:13.686]                         if (!has_future || version < "1.8.0") {
[16:12:13.686]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.686]                             "", base::R.version$version.string), 
[16:12:13.686]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.686]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.686]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.686]                               "release", "version")], collapse = " "), 
[16:12:13.686]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.686]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.686]                             info)
[16:12:13.686]                           info <- base::paste(info, collapse = "; ")
[16:12:13.686]                           if (!has_future) {
[16:12:13.686]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.686]                               info)
[16:12:13.686]                           }
[16:12:13.686]                           else {
[16:12:13.686]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.686]                               info, version)
[16:12:13.686]                           }
[16:12:13.686]                           base::stop(msg)
[16:12:13.686]                         }
[16:12:13.686]                       })
[16:12:13.686]                     }
[16:12:13.686]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.686]                     base::options(mc.cores = 1L)
[16:12:13.686]                   }
[16:12:13.686]                   options(future.plan = NULL)
[16:12:13.686]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.686]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.686]                 }
[16:12:13.686]                 ...future.workdir <- getwd()
[16:12:13.686]             }
[16:12:13.686]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.686]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.686]         }
[16:12:13.686]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.686]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.686]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.686]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.686]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.686]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.686]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.686]             base::names(...future.oldOptions))
[16:12:13.686]     }
[16:12:13.686]     if (FALSE) {
[16:12:13.686]     }
[16:12:13.686]     else {
[16:12:13.686]         if (TRUE) {
[16:12:13.686]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.686]                 open = "w")
[16:12:13.686]         }
[16:12:13.686]         else {
[16:12:13.686]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.686]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.686]         }
[16:12:13.686]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.686]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.686]             base::sink(type = "output", split = FALSE)
[16:12:13.686]             base::close(...future.stdout)
[16:12:13.686]         }, add = TRUE)
[16:12:13.686]     }
[16:12:13.686]     ...future.frame <- base::sys.nframe()
[16:12:13.686]     ...future.conditions <- base::list()
[16:12:13.686]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.686]     if (FALSE) {
[16:12:13.686]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.686]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.686]     }
[16:12:13.686]     ...future.result <- base::tryCatch({
[16:12:13.686]         base::withCallingHandlers({
[16:12:13.686]             ...future.value <- base::withVisible(base::local({
[16:12:13.686]                 ...future.makeSendCondition <- local({
[16:12:13.686]                   sendCondition <- NULL
[16:12:13.686]                   function(frame = 1L) {
[16:12:13.686]                     if (is.function(sendCondition)) 
[16:12:13.686]                       return(sendCondition)
[16:12:13.686]                     ns <- getNamespace("parallel")
[16:12:13.686]                     if (exists("sendData", mode = "function", 
[16:12:13.686]                       envir = ns)) {
[16:12:13.686]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:13.686]                         envir = ns)
[16:12:13.686]                       envir <- sys.frame(frame)
[16:12:13.686]                       master <- NULL
[16:12:13.686]                       while (!identical(envir, .GlobalEnv) && 
[16:12:13.686]                         !identical(envir, emptyenv())) {
[16:12:13.686]                         if (exists("master", mode = "list", envir = envir, 
[16:12:13.686]                           inherits = FALSE)) {
[16:12:13.686]                           master <- get("master", mode = "list", 
[16:12:13.686]                             envir = envir, inherits = FALSE)
[16:12:13.686]                           if (inherits(master, c("SOCKnode", 
[16:12:13.686]                             "SOCK0node"))) {
[16:12:13.686]                             sendCondition <<- function(cond) {
[16:12:13.686]                               data <- list(type = "VALUE", value = cond, 
[16:12:13.686]                                 success = TRUE)
[16:12:13.686]                               parallel_sendData(master, data)
[16:12:13.686]                             }
[16:12:13.686]                             return(sendCondition)
[16:12:13.686]                           }
[16:12:13.686]                         }
[16:12:13.686]                         frame <- frame + 1L
[16:12:13.686]                         envir <- sys.frame(frame)
[16:12:13.686]                       }
[16:12:13.686]                     }
[16:12:13.686]                     sendCondition <<- function(cond) NULL
[16:12:13.686]                   }
[16:12:13.686]                 })
[16:12:13.686]                 withCallingHandlers({
[16:12:13.686]                   NA
[16:12:13.686]                 }, immediateCondition = function(cond) {
[16:12:13.686]                   sendCondition <- ...future.makeSendCondition()
[16:12:13.686]                   sendCondition(cond)
[16:12:13.686]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.686]                   {
[16:12:13.686]                     inherits <- base::inherits
[16:12:13.686]                     invokeRestart <- base::invokeRestart
[16:12:13.686]                     is.null <- base::is.null
[16:12:13.686]                     muffled <- FALSE
[16:12:13.686]                     if (inherits(cond, "message")) {
[16:12:13.686]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.686]                       if (muffled) 
[16:12:13.686]                         invokeRestart("muffleMessage")
[16:12:13.686]                     }
[16:12:13.686]                     else if (inherits(cond, "warning")) {
[16:12:13.686]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.686]                       if (muffled) 
[16:12:13.686]                         invokeRestart("muffleWarning")
[16:12:13.686]                     }
[16:12:13.686]                     else if (inherits(cond, "condition")) {
[16:12:13.686]                       if (!is.null(pattern)) {
[16:12:13.686]                         computeRestarts <- base::computeRestarts
[16:12:13.686]                         grepl <- base::grepl
[16:12:13.686]                         restarts <- computeRestarts(cond)
[16:12:13.686]                         for (restart in restarts) {
[16:12:13.686]                           name <- restart$name
[16:12:13.686]                           if (is.null(name)) 
[16:12:13.686]                             next
[16:12:13.686]                           if (!grepl(pattern, name)) 
[16:12:13.686]                             next
[16:12:13.686]                           invokeRestart(restart)
[16:12:13.686]                           muffled <- TRUE
[16:12:13.686]                           break
[16:12:13.686]                         }
[16:12:13.686]                       }
[16:12:13.686]                     }
[16:12:13.686]                     invisible(muffled)
[16:12:13.686]                   }
[16:12:13.686]                   muffleCondition(cond)
[16:12:13.686]                 })
[16:12:13.686]             }))
[16:12:13.686]             future::FutureResult(value = ...future.value$value, 
[16:12:13.686]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.686]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.686]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.686]                     ...future.globalenv.names))
[16:12:13.686]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.686]         }, condition = base::local({
[16:12:13.686]             c <- base::c
[16:12:13.686]             inherits <- base::inherits
[16:12:13.686]             invokeRestart <- base::invokeRestart
[16:12:13.686]             length <- base::length
[16:12:13.686]             list <- base::list
[16:12:13.686]             seq.int <- base::seq.int
[16:12:13.686]             signalCondition <- base::signalCondition
[16:12:13.686]             sys.calls <- base::sys.calls
[16:12:13.686]             `[[` <- base::`[[`
[16:12:13.686]             `+` <- base::`+`
[16:12:13.686]             `<<-` <- base::`<<-`
[16:12:13.686]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.686]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.686]                   3L)]
[16:12:13.686]             }
[16:12:13.686]             function(cond) {
[16:12:13.686]                 is_error <- inherits(cond, "error")
[16:12:13.686]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.686]                   NULL)
[16:12:13.686]                 if (is_error) {
[16:12:13.686]                   sessionInformation <- function() {
[16:12:13.686]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.686]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.686]                       search = base::search(), system = base::Sys.info())
[16:12:13.686]                   }
[16:12:13.686]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.686]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.686]                     cond$call), session = sessionInformation(), 
[16:12:13.686]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.686]                   signalCondition(cond)
[16:12:13.686]                 }
[16:12:13.686]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.686]                 "immediateCondition"))) {
[16:12:13.686]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.686]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.686]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.686]                   if (TRUE && !signal) {
[16:12:13.686]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.686]                     {
[16:12:13.686]                       inherits <- base::inherits
[16:12:13.686]                       invokeRestart <- base::invokeRestart
[16:12:13.686]                       is.null <- base::is.null
[16:12:13.686]                       muffled <- FALSE
[16:12:13.686]                       if (inherits(cond, "message")) {
[16:12:13.686]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.686]                         if (muffled) 
[16:12:13.686]                           invokeRestart("muffleMessage")
[16:12:13.686]                       }
[16:12:13.686]                       else if (inherits(cond, "warning")) {
[16:12:13.686]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.686]                         if (muffled) 
[16:12:13.686]                           invokeRestart("muffleWarning")
[16:12:13.686]                       }
[16:12:13.686]                       else if (inherits(cond, "condition")) {
[16:12:13.686]                         if (!is.null(pattern)) {
[16:12:13.686]                           computeRestarts <- base::computeRestarts
[16:12:13.686]                           grepl <- base::grepl
[16:12:13.686]                           restarts <- computeRestarts(cond)
[16:12:13.686]                           for (restart in restarts) {
[16:12:13.686]                             name <- restart$name
[16:12:13.686]                             if (is.null(name)) 
[16:12:13.686]                               next
[16:12:13.686]                             if (!grepl(pattern, name)) 
[16:12:13.686]                               next
[16:12:13.686]                             invokeRestart(restart)
[16:12:13.686]                             muffled <- TRUE
[16:12:13.686]                             break
[16:12:13.686]                           }
[16:12:13.686]                         }
[16:12:13.686]                       }
[16:12:13.686]                       invisible(muffled)
[16:12:13.686]                     }
[16:12:13.686]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.686]                   }
[16:12:13.686]                 }
[16:12:13.686]                 else {
[16:12:13.686]                   if (TRUE) {
[16:12:13.686]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.686]                     {
[16:12:13.686]                       inherits <- base::inherits
[16:12:13.686]                       invokeRestart <- base::invokeRestart
[16:12:13.686]                       is.null <- base::is.null
[16:12:13.686]                       muffled <- FALSE
[16:12:13.686]                       if (inherits(cond, "message")) {
[16:12:13.686]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.686]                         if (muffled) 
[16:12:13.686]                           invokeRestart("muffleMessage")
[16:12:13.686]                       }
[16:12:13.686]                       else if (inherits(cond, "warning")) {
[16:12:13.686]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.686]                         if (muffled) 
[16:12:13.686]                           invokeRestart("muffleWarning")
[16:12:13.686]                       }
[16:12:13.686]                       else if (inherits(cond, "condition")) {
[16:12:13.686]                         if (!is.null(pattern)) {
[16:12:13.686]                           computeRestarts <- base::computeRestarts
[16:12:13.686]                           grepl <- base::grepl
[16:12:13.686]                           restarts <- computeRestarts(cond)
[16:12:13.686]                           for (restart in restarts) {
[16:12:13.686]                             name <- restart$name
[16:12:13.686]                             if (is.null(name)) 
[16:12:13.686]                               next
[16:12:13.686]                             if (!grepl(pattern, name)) 
[16:12:13.686]                               next
[16:12:13.686]                             invokeRestart(restart)
[16:12:13.686]                             muffled <- TRUE
[16:12:13.686]                             break
[16:12:13.686]                           }
[16:12:13.686]                         }
[16:12:13.686]                       }
[16:12:13.686]                       invisible(muffled)
[16:12:13.686]                     }
[16:12:13.686]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.686]                   }
[16:12:13.686]                 }
[16:12:13.686]             }
[16:12:13.686]         }))
[16:12:13.686]     }, error = function(ex) {
[16:12:13.686]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.686]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.686]                 ...future.rng), started = ...future.startTime, 
[16:12:13.686]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.686]             version = "1.8"), class = "FutureResult")
[16:12:13.686]     }, finally = {
[16:12:13.686]         if (!identical(...future.workdir, getwd())) 
[16:12:13.686]             setwd(...future.workdir)
[16:12:13.686]         {
[16:12:13.686]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.686]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.686]             }
[16:12:13.686]             base::options(...future.oldOptions)
[16:12:13.686]             if (.Platform$OS.type == "windows") {
[16:12:13.686]                 old_names <- names(...future.oldEnvVars)
[16:12:13.686]                 envs <- base::Sys.getenv()
[16:12:13.686]                 names <- names(envs)
[16:12:13.686]                 common <- intersect(names, old_names)
[16:12:13.686]                 added <- setdiff(names, old_names)
[16:12:13.686]                 removed <- setdiff(old_names, names)
[16:12:13.686]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.686]                   envs[common]]
[16:12:13.686]                 NAMES <- toupper(changed)
[16:12:13.686]                 args <- list()
[16:12:13.686]                 for (kk in seq_along(NAMES)) {
[16:12:13.686]                   name <- changed[[kk]]
[16:12:13.686]                   NAME <- NAMES[[kk]]
[16:12:13.686]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.686]                     next
[16:12:13.686]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.686]                 }
[16:12:13.686]                 NAMES <- toupper(added)
[16:12:13.686]                 for (kk in seq_along(NAMES)) {
[16:12:13.686]                   name <- added[[kk]]
[16:12:13.686]                   NAME <- NAMES[[kk]]
[16:12:13.686]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.686]                     next
[16:12:13.686]                   args[[name]] <- ""
[16:12:13.686]                 }
[16:12:13.686]                 NAMES <- toupper(removed)
[16:12:13.686]                 for (kk in seq_along(NAMES)) {
[16:12:13.686]                   name <- removed[[kk]]
[16:12:13.686]                   NAME <- NAMES[[kk]]
[16:12:13.686]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.686]                     next
[16:12:13.686]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.686]                 }
[16:12:13.686]                 if (length(args) > 0) 
[16:12:13.686]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.686]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.686]             }
[16:12:13.686]             else {
[16:12:13.686]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.686]             }
[16:12:13.686]             {
[16:12:13.686]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.686]                   0L) {
[16:12:13.686]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.686]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.686]                   base::options(opts)
[16:12:13.686]                 }
[16:12:13.686]                 {
[16:12:13.686]                   {
[16:12:13.686]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.686]                     NULL
[16:12:13.686]                   }
[16:12:13.686]                   options(future.plan = NULL)
[16:12:13.686]                   if (is.na(NA_character_)) 
[16:12:13.686]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.686]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.686]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:13.686]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:13.686]                     envir = parent.frame()) 
[16:12:13.686]                   {
[16:12:13.686]                     if (is.function(workers)) 
[16:12:13.686]                       workers <- workers()
[16:12:13.686]                     workers <- structure(as.integer(workers), 
[16:12:13.686]                       class = class(workers))
[16:12:13.686]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:13.686]                       workers >= 1)
[16:12:13.686]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:13.686]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:13.686]                     }
[16:12:13.686]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:13.686]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:13.686]                       envir = envir)
[16:12:13.686]                     if (!future$lazy) 
[16:12:13.686]                       future <- run(future)
[16:12:13.686]                     invisible(future)
[16:12:13.686]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.686]                 }
[16:12:13.686]             }
[16:12:13.686]         }
[16:12:13.686]     })
[16:12:13.686]     if (TRUE) {
[16:12:13.686]         base::sink(type = "output", split = FALSE)
[16:12:13.686]         if (TRUE) {
[16:12:13.686]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.686]         }
[16:12:13.686]         else {
[16:12:13.686]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.686]         }
[16:12:13.686]         base::close(...future.stdout)
[16:12:13.686]         ...future.stdout <- NULL
[16:12:13.686]     }
[16:12:13.686]     ...future.result$conditions <- ...future.conditions
[16:12:13.686]     ...future.result$finished <- base::Sys.time()
[16:12:13.686]     ...future.result
[16:12:13.686] }
[16:12:13.758] MultisessionFuture started
[16:12:13.759] result() for ClusterFuture ...
[16:12:13.760] receiveMessageFromWorker() for ClusterFuture ...
[16:12:13.760] - Validating connection of MultisessionFuture
[16:12:13.791] - received message: FutureResult
[16:12:13.791] - Received FutureResult
[16:12:13.791] - Erased future from FutureRegistry
[16:12:13.792] result() for ClusterFuture ...
[16:12:13.792] - result already collected: FutureResult
[16:12:13.792] result() for ClusterFuture ... done
[16:12:13.792] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:13.792] result() for ClusterFuture ... done
[16:12:13.792] result() for ClusterFuture ...
[16:12:13.792] - result already collected: FutureResult
[16:12:13.792] result() for ClusterFuture ... done
[16:12:13.793] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:13.796] plan(): nbrOfWorkers() = 2
[16:12:13.800] getGlobalsAndPackages() ...
[16:12:13.800] 
[16:12:13.800] - globals: [0] <none>
[16:12:13.800] getGlobalsAndPackages() ... DONE
[16:12:13.812] Packages needed by the future expression (n = 0): <none>
[16:12:13.812] Packages needed by future strategies (n = 0): <none>
[16:12:13.813] {
[16:12:13.813]     {
[16:12:13.813]         {
[16:12:13.813]             ...future.startTime <- base::Sys.time()
[16:12:13.813]             {
[16:12:13.813]                 {
[16:12:13.813]                   {
[16:12:13.813]                     {
[16:12:13.813]                       base::local({
[16:12:13.813]                         has_future <- base::requireNamespace("future", 
[16:12:13.813]                           quietly = TRUE)
[16:12:13.813]                         if (has_future) {
[16:12:13.813]                           ns <- base::getNamespace("future")
[16:12:13.813]                           version <- ns[[".package"]][["version"]]
[16:12:13.813]                           if (is.null(version)) 
[16:12:13.813]                             version <- utils::packageVersion("future")
[16:12:13.813]                         }
[16:12:13.813]                         else {
[16:12:13.813]                           version <- NULL
[16:12:13.813]                         }
[16:12:13.813]                         if (!has_future || version < "1.8.0") {
[16:12:13.813]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.813]                             "", base::R.version$version.string), 
[16:12:13.813]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.813]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.813]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.813]                               "release", "version")], collapse = " "), 
[16:12:13.813]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.813]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.813]                             info)
[16:12:13.813]                           info <- base::paste(info, collapse = "; ")
[16:12:13.813]                           if (!has_future) {
[16:12:13.813]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.813]                               info)
[16:12:13.813]                           }
[16:12:13.813]                           else {
[16:12:13.813]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.813]                               info, version)
[16:12:13.813]                           }
[16:12:13.813]                           base::stop(msg)
[16:12:13.813]                         }
[16:12:13.813]                       })
[16:12:13.813]                     }
[16:12:13.813]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.813]                     base::options(mc.cores = 1L)
[16:12:13.813]                   }
[16:12:13.813]                   options(future.plan = NULL)
[16:12:13.813]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.813]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.813]                 }
[16:12:13.813]                 ...future.workdir <- getwd()
[16:12:13.813]             }
[16:12:13.813]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.813]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.813]         }
[16:12:13.813]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.813]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.813]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.813]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.813]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.813]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.813]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.813]             base::names(...future.oldOptions))
[16:12:13.813]     }
[16:12:13.813]     if (FALSE) {
[16:12:13.813]     }
[16:12:13.813]     else {
[16:12:13.813]         if (TRUE) {
[16:12:13.813]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.813]                 open = "w")
[16:12:13.813]         }
[16:12:13.813]         else {
[16:12:13.813]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.813]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.813]         }
[16:12:13.813]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.813]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.813]             base::sink(type = "output", split = FALSE)
[16:12:13.813]             base::close(...future.stdout)
[16:12:13.813]         }, add = TRUE)
[16:12:13.813]     }
[16:12:13.813]     ...future.frame <- base::sys.nframe()
[16:12:13.813]     ...future.conditions <- base::list()
[16:12:13.813]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.813]     if (FALSE) {
[16:12:13.813]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.813]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.813]     }
[16:12:13.813]     ...future.result <- base::tryCatch({
[16:12:13.813]         base::withCallingHandlers({
[16:12:13.813]             ...future.value <- base::withVisible(base::local({
[16:12:13.813]                 ...future.makeSendCondition <- local({
[16:12:13.813]                   sendCondition <- NULL
[16:12:13.813]                   function(frame = 1L) {
[16:12:13.813]                     if (is.function(sendCondition)) 
[16:12:13.813]                       return(sendCondition)
[16:12:13.813]                     ns <- getNamespace("parallel")
[16:12:13.813]                     if (exists("sendData", mode = "function", 
[16:12:13.813]                       envir = ns)) {
[16:12:13.813]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:13.813]                         envir = ns)
[16:12:13.813]                       envir <- sys.frame(frame)
[16:12:13.813]                       master <- NULL
[16:12:13.813]                       while (!identical(envir, .GlobalEnv) && 
[16:12:13.813]                         !identical(envir, emptyenv())) {
[16:12:13.813]                         if (exists("master", mode = "list", envir = envir, 
[16:12:13.813]                           inherits = FALSE)) {
[16:12:13.813]                           master <- get("master", mode = "list", 
[16:12:13.813]                             envir = envir, inherits = FALSE)
[16:12:13.813]                           if (inherits(master, c("SOCKnode", 
[16:12:13.813]                             "SOCK0node"))) {
[16:12:13.813]                             sendCondition <<- function(cond) {
[16:12:13.813]                               data <- list(type = "VALUE", value = cond, 
[16:12:13.813]                                 success = TRUE)
[16:12:13.813]                               parallel_sendData(master, data)
[16:12:13.813]                             }
[16:12:13.813]                             return(sendCondition)
[16:12:13.813]                           }
[16:12:13.813]                         }
[16:12:13.813]                         frame <- frame + 1L
[16:12:13.813]                         envir <- sys.frame(frame)
[16:12:13.813]                       }
[16:12:13.813]                     }
[16:12:13.813]                     sendCondition <<- function(cond) NULL
[16:12:13.813]                   }
[16:12:13.813]                 })
[16:12:13.813]                 withCallingHandlers({
[16:12:13.813]                   42
[16:12:13.813]                 }, immediateCondition = function(cond) {
[16:12:13.813]                   sendCondition <- ...future.makeSendCondition()
[16:12:13.813]                   sendCondition(cond)
[16:12:13.813]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.813]                   {
[16:12:13.813]                     inherits <- base::inherits
[16:12:13.813]                     invokeRestart <- base::invokeRestart
[16:12:13.813]                     is.null <- base::is.null
[16:12:13.813]                     muffled <- FALSE
[16:12:13.813]                     if (inherits(cond, "message")) {
[16:12:13.813]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.813]                       if (muffled) 
[16:12:13.813]                         invokeRestart("muffleMessage")
[16:12:13.813]                     }
[16:12:13.813]                     else if (inherits(cond, "warning")) {
[16:12:13.813]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.813]                       if (muffled) 
[16:12:13.813]                         invokeRestart("muffleWarning")
[16:12:13.813]                     }
[16:12:13.813]                     else if (inherits(cond, "condition")) {
[16:12:13.813]                       if (!is.null(pattern)) {
[16:12:13.813]                         computeRestarts <- base::computeRestarts
[16:12:13.813]                         grepl <- base::grepl
[16:12:13.813]                         restarts <- computeRestarts(cond)
[16:12:13.813]                         for (restart in restarts) {
[16:12:13.813]                           name <- restart$name
[16:12:13.813]                           if (is.null(name)) 
[16:12:13.813]                             next
[16:12:13.813]                           if (!grepl(pattern, name)) 
[16:12:13.813]                             next
[16:12:13.813]                           invokeRestart(restart)
[16:12:13.813]                           muffled <- TRUE
[16:12:13.813]                           break
[16:12:13.813]                         }
[16:12:13.813]                       }
[16:12:13.813]                     }
[16:12:13.813]                     invisible(muffled)
[16:12:13.813]                   }
[16:12:13.813]                   muffleCondition(cond)
[16:12:13.813]                 })
[16:12:13.813]             }))
[16:12:13.813]             future::FutureResult(value = ...future.value$value, 
[16:12:13.813]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.813]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.813]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.813]                     ...future.globalenv.names))
[16:12:13.813]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.813]         }, condition = base::local({
[16:12:13.813]             c <- base::c
[16:12:13.813]             inherits <- base::inherits
[16:12:13.813]             invokeRestart <- base::invokeRestart
[16:12:13.813]             length <- base::length
[16:12:13.813]             list <- base::list
[16:12:13.813]             seq.int <- base::seq.int
[16:12:13.813]             signalCondition <- base::signalCondition
[16:12:13.813]             sys.calls <- base::sys.calls
[16:12:13.813]             `[[` <- base::`[[`
[16:12:13.813]             `+` <- base::`+`
[16:12:13.813]             `<<-` <- base::`<<-`
[16:12:13.813]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.813]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.813]                   3L)]
[16:12:13.813]             }
[16:12:13.813]             function(cond) {
[16:12:13.813]                 is_error <- inherits(cond, "error")
[16:12:13.813]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.813]                   NULL)
[16:12:13.813]                 if (is_error) {
[16:12:13.813]                   sessionInformation <- function() {
[16:12:13.813]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.813]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.813]                       search = base::search(), system = base::Sys.info())
[16:12:13.813]                   }
[16:12:13.813]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.813]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.813]                     cond$call), session = sessionInformation(), 
[16:12:13.813]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.813]                   signalCondition(cond)
[16:12:13.813]                 }
[16:12:13.813]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.813]                 "immediateCondition"))) {
[16:12:13.813]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.813]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.813]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.813]                   if (TRUE && !signal) {
[16:12:13.813]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.813]                     {
[16:12:13.813]                       inherits <- base::inherits
[16:12:13.813]                       invokeRestart <- base::invokeRestart
[16:12:13.813]                       is.null <- base::is.null
[16:12:13.813]                       muffled <- FALSE
[16:12:13.813]                       if (inherits(cond, "message")) {
[16:12:13.813]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.813]                         if (muffled) 
[16:12:13.813]                           invokeRestart("muffleMessage")
[16:12:13.813]                       }
[16:12:13.813]                       else if (inherits(cond, "warning")) {
[16:12:13.813]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.813]                         if (muffled) 
[16:12:13.813]                           invokeRestart("muffleWarning")
[16:12:13.813]                       }
[16:12:13.813]                       else if (inherits(cond, "condition")) {
[16:12:13.813]                         if (!is.null(pattern)) {
[16:12:13.813]                           computeRestarts <- base::computeRestarts
[16:12:13.813]                           grepl <- base::grepl
[16:12:13.813]                           restarts <- computeRestarts(cond)
[16:12:13.813]                           for (restart in restarts) {
[16:12:13.813]                             name <- restart$name
[16:12:13.813]                             if (is.null(name)) 
[16:12:13.813]                               next
[16:12:13.813]                             if (!grepl(pattern, name)) 
[16:12:13.813]                               next
[16:12:13.813]                             invokeRestart(restart)
[16:12:13.813]                             muffled <- TRUE
[16:12:13.813]                             break
[16:12:13.813]                           }
[16:12:13.813]                         }
[16:12:13.813]                       }
[16:12:13.813]                       invisible(muffled)
[16:12:13.813]                     }
[16:12:13.813]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.813]                   }
[16:12:13.813]                 }
[16:12:13.813]                 else {
[16:12:13.813]                   if (TRUE) {
[16:12:13.813]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.813]                     {
[16:12:13.813]                       inherits <- base::inherits
[16:12:13.813]                       invokeRestart <- base::invokeRestart
[16:12:13.813]                       is.null <- base::is.null
[16:12:13.813]                       muffled <- FALSE
[16:12:13.813]                       if (inherits(cond, "message")) {
[16:12:13.813]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.813]                         if (muffled) 
[16:12:13.813]                           invokeRestart("muffleMessage")
[16:12:13.813]                       }
[16:12:13.813]                       else if (inherits(cond, "warning")) {
[16:12:13.813]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.813]                         if (muffled) 
[16:12:13.813]                           invokeRestart("muffleWarning")
[16:12:13.813]                       }
[16:12:13.813]                       else if (inherits(cond, "condition")) {
[16:12:13.813]                         if (!is.null(pattern)) {
[16:12:13.813]                           computeRestarts <- base::computeRestarts
[16:12:13.813]                           grepl <- base::grepl
[16:12:13.813]                           restarts <- computeRestarts(cond)
[16:12:13.813]                           for (restart in restarts) {
[16:12:13.813]                             name <- restart$name
[16:12:13.813]                             if (is.null(name)) 
[16:12:13.813]                               next
[16:12:13.813]                             if (!grepl(pattern, name)) 
[16:12:13.813]                               next
[16:12:13.813]                             invokeRestart(restart)
[16:12:13.813]                             muffled <- TRUE
[16:12:13.813]                             break
[16:12:13.813]                           }
[16:12:13.813]                         }
[16:12:13.813]                       }
[16:12:13.813]                       invisible(muffled)
[16:12:13.813]                     }
[16:12:13.813]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.813]                   }
[16:12:13.813]                 }
[16:12:13.813]             }
[16:12:13.813]         }))
[16:12:13.813]     }, error = function(ex) {
[16:12:13.813]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.813]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.813]                 ...future.rng), started = ...future.startTime, 
[16:12:13.813]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.813]             version = "1.8"), class = "FutureResult")
[16:12:13.813]     }, finally = {
[16:12:13.813]         if (!identical(...future.workdir, getwd())) 
[16:12:13.813]             setwd(...future.workdir)
[16:12:13.813]         {
[16:12:13.813]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.813]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.813]             }
[16:12:13.813]             base::options(...future.oldOptions)
[16:12:13.813]             if (.Platform$OS.type == "windows") {
[16:12:13.813]                 old_names <- names(...future.oldEnvVars)
[16:12:13.813]                 envs <- base::Sys.getenv()
[16:12:13.813]                 names <- names(envs)
[16:12:13.813]                 common <- intersect(names, old_names)
[16:12:13.813]                 added <- setdiff(names, old_names)
[16:12:13.813]                 removed <- setdiff(old_names, names)
[16:12:13.813]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.813]                   envs[common]]
[16:12:13.813]                 NAMES <- toupper(changed)
[16:12:13.813]                 args <- list()
[16:12:13.813]                 for (kk in seq_along(NAMES)) {
[16:12:13.813]                   name <- changed[[kk]]
[16:12:13.813]                   NAME <- NAMES[[kk]]
[16:12:13.813]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.813]                     next
[16:12:13.813]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.813]                 }
[16:12:13.813]                 NAMES <- toupper(added)
[16:12:13.813]                 for (kk in seq_along(NAMES)) {
[16:12:13.813]                   name <- added[[kk]]
[16:12:13.813]                   NAME <- NAMES[[kk]]
[16:12:13.813]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.813]                     next
[16:12:13.813]                   args[[name]] <- ""
[16:12:13.813]                 }
[16:12:13.813]                 NAMES <- toupper(removed)
[16:12:13.813]                 for (kk in seq_along(NAMES)) {
[16:12:13.813]                   name <- removed[[kk]]
[16:12:13.813]                   NAME <- NAMES[[kk]]
[16:12:13.813]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.813]                     next
[16:12:13.813]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.813]                 }
[16:12:13.813]                 if (length(args) > 0) 
[16:12:13.813]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.813]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.813]             }
[16:12:13.813]             else {
[16:12:13.813]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.813]             }
[16:12:13.813]             {
[16:12:13.813]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.813]                   0L) {
[16:12:13.813]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.813]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.813]                   base::options(opts)
[16:12:13.813]                 }
[16:12:13.813]                 {
[16:12:13.813]                   {
[16:12:13.813]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.813]                     NULL
[16:12:13.813]                   }
[16:12:13.813]                   options(future.plan = NULL)
[16:12:13.813]                   if (is.na(NA_character_)) 
[16:12:13.813]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.813]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.813]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:13.813]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:13.813]                     envir = parent.frame()) 
[16:12:13.813]                   {
[16:12:13.813]                     if (is.function(workers)) 
[16:12:13.813]                       workers <- workers()
[16:12:13.813]                     workers <- structure(as.integer(workers), 
[16:12:13.813]                       class = class(workers))
[16:12:13.813]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:13.813]                       workers >= 1)
[16:12:13.813]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:13.813]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:13.813]                     }
[16:12:13.813]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:13.813]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:13.813]                       envir = envir)
[16:12:13.813]                     if (!future$lazy) 
[16:12:13.813]                       future <- run(future)
[16:12:13.813]                     invisible(future)
[16:12:13.813]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.813]                 }
[16:12:13.813]             }
[16:12:13.813]         }
[16:12:13.813]     })
[16:12:13.813]     if (TRUE) {
[16:12:13.813]         base::sink(type = "output", split = FALSE)
[16:12:13.813]         if (TRUE) {
[16:12:13.813]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.813]         }
[16:12:13.813]         else {
[16:12:13.813]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.813]         }
[16:12:13.813]         base::close(...future.stdout)
[16:12:13.813]         ...future.stdout <- NULL
[16:12:13.813]     }
[16:12:13.813]     ...future.result$conditions <- ...future.conditions
[16:12:13.813]     ...future.result$finished <- base::Sys.time()
[16:12:13.813]     ...future.result
[16:12:13.813] }
[16:12:13.816] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.828] result() for ClusterFuture ...
[16:12:13.828] receiveMessageFromWorker() for ClusterFuture ...
[16:12:13.828] - Validating connection of MultisessionFuture
[16:12:13.864] - received message: FutureResult
[16:12:13.865] - Received FutureResult
[16:12:13.865] - Erased future from FutureRegistry
[16:12:13.865] result() for ClusterFuture ...
[16:12:13.865] - result already collected: FutureResult
[16:12:13.865] result() for ClusterFuture ... done
[16:12:13.865] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:13.865] result() for ClusterFuture ... done
[16:12:13.865] result() for ClusterFuture ...
[16:12:13.865] - result already collected: FutureResult
[16:12:13.866] result() for ClusterFuture ... done
[16:12:13.866] getGlobalsAndPackages() ...
[16:12:13.866] Searching for globals...
[16:12:13.866] 
[16:12:13.866] Searching for globals ... DONE
[16:12:13.867] - globals: [0] <none>
[16:12:13.867] getGlobalsAndPackages() ... DONE
[16:12:13.867] run() for ‘Future’ ...
[16:12:13.867] - state: ‘created’
[16:12:13.867] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:13.882] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.882] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:13.883]   - Field: ‘node’
[16:12:13.883]   - Field: ‘label’
[16:12:13.883]   - Field: ‘local’
[16:12:13.883]   - Field: ‘owner’
[16:12:13.883]   - Field: ‘envir’
[16:12:13.883]   - Field: ‘workers’
[16:12:13.883]   - Field: ‘packages’
[16:12:13.883]   - Field: ‘gc’
[16:12:13.883]   - Field: ‘conditions’
[16:12:13.883]   - Field: ‘persistent’
[16:12:13.884]   - Field: ‘expr’
[16:12:13.884]   - Field: ‘uuid’
[16:12:13.884]   - Field: ‘seed’
[16:12:13.884]   - Field: ‘version’
[16:12:13.884]   - Field: ‘result’
[16:12:13.884]   - Field: ‘asynchronous’
[16:12:13.884]   - Field: ‘calls’
[16:12:13.884]   - Field: ‘globals’
[16:12:13.885]   - Field: ‘stdout’
[16:12:13.885]   - Field: ‘earlySignal’
[16:12:13.885]   - Field: ‘lazy’
[16:12:13.885]   - Field: ‘state’
[16:12:13.885] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:13.885] - Launch lazy future ...
[16:12:13.885] Packages needed by the future expression (n = 0): <none>
[16:12:13.886] Packages needed by future strategies (n = 0): <none>
[16:12:13.886] {
[16:12:13.886]     {
[16:12:13.886]         {
[16:12:13.886]             ...future.startTime <- base::Sys.time()
[16:12:13.886]             {
[16:12:13.886]                 {
[16:12:13.886]                   {
[16:12:13.886]                     {
[16:12:13.886]                       base::local({
[16:12:13.886]                         has_future <- base::requireNamespace("future", 
[16:12:13.886]                           quietly = TRUE)
[16:12:13.886]                         if (has_future) {
[16:12:13.886]                           ns <- base::getNamespace("future")
[16:12:13.886]                           version <- ns[[".package"]][["version"]]
[16:12:13.886]                           if (is.null(version)) 
[16:12:13.886]                             version <- utils::packageVersion("future")
[16:12:13.886]                         }
[16:12:13.886]                         else {
[16:12:13.886]                           version <- NULL
[16:12:13.886]                         }
[16:12:13.886]                         if (!has_future || version < "1.8.0") {
[16:12:13.886]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.886]                             "", base::R.version$version.string), 
[16:12:13.886]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.886]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.886]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.886]                               "release", "version")], collapse = " "), 
[16:12:13.886]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.886]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.886]                             info)
[16:12:13.886]                           info <- base::paste(info, collapse = "; ")
[16:12:13.886]                           if (!has_future) {
[16:12:13.886]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.886]                               info)
[16:12:13.886]                           }
[16:12:13.886]                           else {
[16:12:13.886]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.886]                               info, version)
[16:12:13.886]                           }
[16:12:13.886]                           base::stop(msg)
[16:12:13.886]                         }
[16:12:13.886]                       })
[16:12:13.886]                     }
[16:12:13.886]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.886]                     base::options(mc.cores = 1L)
[16:12:13.886]                   }
[16:12:13.886]                   options(future.plan = NULL)
[16:12:13.886]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.886]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.886]                 }
[16:12:13.886]                 ...future.workdir <- getwd()
[16:12:13.886]             }
[16:12:13.886]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.886]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.886]         }
[16:12:13.886]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.886]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.886]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.886]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.886]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.886]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.886]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.886]             base::names(...future.oldOptions))
[16:12:13.886]     }
[16:12:13.886]     if (FALSE) {
[16:12:13.886]     }
[16:12:13.886]     else {
[16:12:13.886]         if (TRUE) {
[16:12:13.886]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.886]                 open = "w")
[16:12:13.886]         }
[16:12:13.886]         else {
[16:12:13.886]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.886]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.886]         }
[16:12:13.886]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.886]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.886]             base::sink(type = "output", split = FALSE)
[16:12:13.886]             base::close(...future.stdout)
[16:12:13.886]         }, add = TRUE)
[16:12:13.886]     }
[16:12:13.886]     ...future.frame <- base::sys.nframe()
[16:12:13.886]     ...future.conditions <- base::list()
[16:12:13.886]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.886]     if (FALSE) {
[16:12:13.886]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.886]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.886]     }
[16:12:13.886]     ...future.result <- base::tryCatch({
[16:12:13.886]         base::withCallingHandlers({
[16:12:13.886]             ...future.value <- base::withVisible(base::local({
[16:12:13.886]                 ...future.makeSendCondition <- local({
[16:12:13.886]                   sendCondition <- NULL
[16:12:13.886]                   function(frame = 1L) {
[16:12:13.886]                     if (is.function(sendCondition)) 
[16:12:13.886]                       return(sendCondition)
[16:12:13.886]                     ns <- getNamespace("parallel")
[16:12:13.886]                     if (exists("sendData", mode = "function", 
[16:12:13.886]                       envir = ns)) {
[16:12:13.886]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:13.886]                         envir = ns)
[16:12:13.886]                       envir <- sys.frame(frame)
[16:12:13.886]                       master <- NULL
[16:12:13.886]                       while (!identical(envir, .GlobalEnv) && 
[16:12:13.886]                         !identical(envir, emptyenv())) {
[16:12:13.886]                         if (exists("master", mode = "list", envir = envir, 
[16:12:13.886]                           inherits = FALSE)) {
[16:12:13.886]                           master <- get("master", mode = "list", 
[16:12:13.886]                             envir = envir, inherits = FALSE)
[16:12:13.886]                           if (inherits(master, c("SOCKnode", 
[16:12:13.886]                             "SOCK0node"))) {
[16:12:13.886]                             sendCondition <<- function(cond) {
[16:12:13.886]                               data <- list(type = "VALUE", value = cond, 
[16:12:13.886]                                 success = TRUE)
[16:12:13.886]                               parallel_sendData(master, data)
[16:12:13.886]                             }
[16:12:13.886]                             return(sendCondition)
[16:12:13.886]                           }
[16:12:13.886]                         }
[16:12:13.886]                         frame <- frame + 1L
[16:12:13.886]                         envir <- sys.frame(frame)
[16:12:13.886]                       }
[16:12:13.886]                     }
[16:12:13.886]                     sendCondition <<- function(cond) NULL
[16:12:13.886]                   }
[16:12:13.886]                 })
[16:12:13.886]                 withCallingHandlers({
[16:12:13.886]                   42
[16:12:13.886]                 }, immediateCondition = function(cond) {
[16:12:13.886]                   sendCondition <- ...future.makeSendCondition()
[16:12:13.886]                   sendCondition(cond)
[16:12:13.886]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.886]                   {
[16:12:13.886]                     inherits <- base::inherits
[16:12:13.886]                     invokeRestart <- base::invokeRestart
[16:12:13.886]                     is.null <- base::is.null
[16:12:13.886]                     muffled <- FALSE
[16:12:13.886]                     if (inherits(cond, "message")) {
[16:12:13.886]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.886]                       if (muffled) 
[16:12:13.886]                         invokeRestart("muffleMessage")
[16:12:13.886]                     }
[16:12:13.886]                     else if (inherits(cond, "warning")) {
[16:12:13.886]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.886]                       if (muffled) 
[16:12:13.886]                         invokeRestart("muffleWarning")
[16:12:13.886]                     }
[16:12:13.886]                     else if (inherits(cond, "condition")) {
[16:12:13.886]                       if (!is.null(pattern)) {
[16:12:13.886]                         computeRestarts <- base::computeRestarts
[16:12:13.886]                         grepl <- base::grepl
[16:12:13.886]                         restarts <- computeRestarts(cond)
[16:12:13.886]                         for (restart in restarts) {
[16:12:13.886]                           name <- restart$name
[16:12:13.886]                           if (is.null(name)) 
[16:12:13.886]                             next
[16:12:13.886]                           if (!grepl(pattern, name)) 
[16:12:13.886]                             next
[16:12:13.886]                           invokeRestart(restart)
[16:12:13.886]                           muffled <- TRUE
[16:12:13.886]                           break
[16:12:13.886]                         }
[16:12:13.886]                       }
[16:12:13.886]                     }
[16:12:13.886]                     invisible(muffled)
[16:12:13.886]                   }
[16:12:13.886]                   muffleCondition(cond)
[16:12:13.886]                 })
[16:12:13.886]             }))
[16:12:13.886]             future::FutureResult(value = ...future.value$value, 
[16:12:13.886]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.886]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.886]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.886]                     ...future.globalenv.names))
[16:12:13.886]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.886]         }, condition = base::local({
[16:12:13.886]             c <- base::c
[16:12:13.886]             inherits <- base::inherits
[16:12:13.886]             invokeRestart <- base::invokeRestart
[16:12:13.886]             length <- base::length
[16:12:13.886]             list <- base::list
[16:12:13.886]             seq.int <- base::seq.int
[16:12:13.886]             signalCondition <- base::signalCondition
[16:12:13.886]             sys.calls <- base::sys.calls
[16:12:13.886]             `[[` <- base::`[[`
[16:12:13.886]             `+` <- base::`+`
[16:12:13.886]             `<<-` <- base::`<<-`
[16:12:13.886]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.886]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.886]                   3L)]
[16:12:13.886]             }
[16:12:13.886]             function(cond) {
[16:12:13.886]                 is_error <- inherits(cond, "error")
[16:12:13.886]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.886]                   NULL)
[16:12:13.886]                 if (is_error) {
[16:12:13.886]                   sessionInformation <- function() {
[16:12:13.886]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.886]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.886]                       search = base::search(), system = base::Sys.info())
[16:12:13.886]                   }
[16:12:13.886]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.886]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.886]                     cond$call), session = sessionInformation(), 
[16:12:13.886]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.886]                   signalCondition(cond)
[16:12:13.886]                 }
[16:12:13.886]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.886]                 "immediateCondition"))) {
[16:12:13.886]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.886]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.886]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.886]                   if (TRUE && !signal) {
[16:12:13.886]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.886]                     {
[16:12:13.886]                       inherits <- base::inherits
[16:12:13.886]                       invokeRestart <- base::invokeRestart
[16:12:13.886]                       is.null <- base::is.null
[16:12:13.886]                       muffled <- FALSE
[16:12:13.886]                       if (inherits(cond, "message")) {
[16:12:13.886]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.886]                         if (muffled) 
[16:12:13.886]                           invokeRestart("muffleMessage")
[16:12:13.886]                       }
[16:12:13.886]                       else if (inherits(cond, "warning")) {
[16:12:13.886]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.886]                         if (muffled) 
[16:12:13.886]                           invokeRestart("muffleWarning")
[16:12:13.886]                       }
[16:12:13.886]                       else if (inherits(cond, "condition")) {
[16:12:13.886]                         if (!is.null(pattern)) {
[16:12:13.886]                           computeRestarts <- base::computeRestarts
[16:12:13.886]                           grepl <- base::grepl
[16:12:13.886]                           restarts <- computeRestarts(cond)
[16:12:13.886]                           for (restart in restarts) {
[16:12:13.886]                             name <- restart$name
[16:12:13.886]                             if (is.null(name)) 
[16:12:13.886]                               next
[16:12:13.886]                             if (!grepl(pattern, name)) 
[16:12:13.886]                               next
[16:12:13.886]                             invokeRestart(restart)
[16:12:13.886]                             muffled <- TRUE
[16:12:13.886]                             break
[16:12:13.886]                           }
[16:12:13.886]                         }
[16:12:13.886]                       }
[16:12:13.886]                       invisible(muffled)
[16:12:13.886]                     }
[16:12:13.886]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.886]                   }
[16:12:13.886]                 }
[16:12:13.886]                 else {
[16:12:13.886]                   if (TRUE) {
[16:12:13.886]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.886]                     {
[16:12:13.886]                       inherits <- base::inherits
[16:12:13.886]                       invokeRestart <- base::invokeRestart
[16:12:13.886]                       is.null <- base::is.null
[16:12:13.886]                       muffled <- FALSE
[16:12:13.886]                       if (inherits(cond, "message")) {
[16:12:13.886]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.886]                         if (muffled) 
[16:12:13.886]                           invokeRestart("muffleMessage")
[16:12:13.886]                       }
[16:12:13.886]                       else if (inherits(cond, "warning")) {
[16:12:13.886]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.886]                         if (muffled) 
[16:12:13.886]                           invokeRestart("muffleWarning")
[16:12:13.886]                       }
[16:12:13.886]                       else if (inherits(cond, "condition")) {
[16:12:13.886]                         if (!is.null(pattern)) {
[16:12:13.886]                           computeRestarts <- base::computeRestarts
[16:12:13.886]                           grepl <- base::grepl
[16:12:13.886]                           restarts <- computeRestarts(cond)
[16:12:13.886]                           for (restart in restarts) {
[16:12:13.886]                             name <- restart$name
[16:12:13.886]                             if (is.null(name)) 
[16:12:13.886]                               next
[16:12:13.886]                             if (!grepl(pattern, name)) 
[16:12:13.886]                               next
[16:12:13.886]                             invokeRestart(restart)
[16:12:13.886]                             muffled <- TRUE
[16:12:13.886]                             break
[16:12:13.886]                           }
[16:12:13.886]                         }
[16:12:13.886]                       }
[16:12:13.886]                       invisible(muffled)
[16:12:13.886]                     }
[16:12:13.886]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.886]                   }
[16:12:13.886]                 }
[16:12:13.886]             }
[16:12:13.886]         }))
[16:12:13.886]     }, error = function(ex) {
[16:12:13.886]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.886]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.886]                 ...future.rng), started = ...future.startTime, 
[16:12:13.886]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.886]             version = "1.8"), class = "FutureResult")
[16:12:13.886]     }, finally = {
[16:12:13.886]         if (!identical(...future.workdir, getwd())) 
[16:12:13.886]             setwd(...future.workdir)
[16:12:13.886]         {
[16:12:13.886]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.886]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.886]             }
[16:12:13.886]             base::options(...future.oldOptions)
[16:12:13.886]             if (.Platform$OS.type == "windows") {
[16:12:13.886]                 old_names <- names(...future.oldEnvVars)
[16:12:13.886]                 envs <- base::Sys.getenv()
[16:12:13.886]                 names <- names(envs)
[16:12:13.886]                 common <- intersect(names, old_names)
[16:12:13.886]                 added <- setdiff(names, old_names)
[16:12:13.886]                 removed <- setdiff(old_names, names)
[16:12:13.886]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.886]                   envs[common]]
[16:12:13.886]                 NAMES <- toupper(changed)
[16:12:13.886]                 args <- list()
[16:12:13.886]                 for (kk in seq_along(NAMES)) {
[16:12:13.886]                   name <- changed[[kk]]
[16:12:13.886]                   NAME <- NAMES[[kk]]
[16:12:13.886]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.886]                     next
[16:12:13.886]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.886]                 }
[16:12:13.886]                 NAMES <- toupper(added)
[16:12:13.886]                 for (kk in seq_along(NAMES)) {
[16:12:13.886]                   name <- added[[kk]]
[16:12:13.886]                   NAME <- NAMES[[kk]]
[16:12:13.886]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.886]                     next
[16:12:13.886]                   args[[name]] <- ""
[16:12:13.886]                 }
[16:12:13.886]                 NAMES <- toupper(removed)
[16:12:13.886]                 for (kk in seq_along(NAMES)) {
[16:12:13.886]                   name <- removed[[kk]]
[16:12:13.886]                   NAME <- NAMES[[kk]]
[16:12:13.886]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.886]                     next
[16:12:13.886]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.886]                 }
[16:12:13.886]                 if (length(args) > 0) 
[16:12:13.886]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.886]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.886]             }
[16:12:13.886]             else {
[16:12:13.886]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.886]             }
[16:12:13.886]             {
[16:12:13.886]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.886]                   0L) {
[16:12:13.886]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.886]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.886]                   base::options(opts)
[16:12:13.886]                 }
[16:12:13.886]                 {
[16:12:13.886]                   {
[16:12:13.886]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.886]                     NULL
[16:12:13.886]                   }
[16:12:13.886]                   options(future.plan = NULL)
[16:12:13.886]                   if (is.na(NA_character_)) 
[16:12:13.886]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.886]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.886]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:13.886]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:13.886]                     envir = parent.frame()) 
[16:12:13.886]                   {
[16:12:13.886]                     if (is.function(workers)) 
[16:12:13.886]                       workers <- workers()
[16:12:13.886]                     workers <- structure(as.integer(workers), 
[16:12:13.886]                       class = class(workers))
[16:12:13.886]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:13.886]                       workers >= 1)
[16:12:13.886]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:13.886]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:13.886]                     }
[16:12:13.886]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:13.886]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:13.886]                       envir = envir)
[16:12:13.886]                     if (!future$lazy) 
[16:12:13.886]                       future <- run(future)
[16:12:13.886]                     invisible(future)
[16:12:13.886]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.886]                 }
[16:12:13.886]             }
[16:12:13.886]         }
[16:12:13.886]     })
[16:12:13.886]     if (TRUE) {
[16:12:13.886]         base::sink(type = "output", split = FALSE)
[16:12:13.886]         if (TRUE) {
[16:12:13.886]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.886]         }
[16:12:13.886]         else {
[16:12:13.886]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.886]         }
[16:12:13.886]         base::close(...future.stdout)
[16:12:13.886]         ...future.stdout <- NULL
[16:12:13.886]     }
[16:12:13.886]     ...future.result$conditions <- ...future.conditions
[16:12:13.886]     ...future.result$finished <- base::Sys.time()
[16:12:13.886]     ...future.result
[16:12:13.886] }
[16:12:13.890] MultisessionFuture started
[16:12:13.890] - Launch lazy future ... done
[16:12:13.890] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.901] result() for ClusterFuture ...
[16:12:13.901] receiveMessageFromWorker() for ClusterFuture ...
[16:12:13.902] - Validating connection of MultisessionFuture
[16:12:13.936] - received message: FutureResult
[16:12:13.936] - Received FutureResult
[16:12:13.937] - Erased future from FutureRegistry
[16:12:13.937] result() for ClusterFuture ...
[16:12:13.937] - result already collected: FutureResult
[16:12:13.937] result() for ClusterFuture ... done
[16:12:13.937] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:13.937] result() for ClusterFuture ... done
[16:12:13.937] result() for ClusterFuture ...
[16:12:13.937] - result already collected: FutureResult
[16:12:13.938] result() for ClusterFuture ... done
[16:12:13.938] getGlobalsAndPackages() ...
[16:12:13.938] Searching for globals...
[16:12:13.939] - globals found: [1] ‘{’
[16:12:13.939] Searching for globals ... DONE
[16:12:13.939] Resolving globals: FALSE
[16:12:13.939] 
[16:12:13.940] 
[16:12:13.940] getGlobalsAndPackages() ... DONE
[16:12:13.940] run() for ‘Future’ ...
[16:12:13.940] - state: ‘created’
[16:12:13.940] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:13.955] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.956] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:13.956]   - Field: ‘node’
[16:12:13.956]   - Field: ‘label’
[16:12:13.956]   - Field: ‘local’
[16:12:13.956]   - Field: ‘owner’
[16:12:13.956]   - Field: ‘envir’
[16:12:13.956]   - Field: ‘workers’
[16:12:13.956]   - Field: ‘packages’
[16:12:13.956]   - Field: ‘gc’
[16:12:13.957]   - Field: ‘conditions’
[16:12:13.957]   - Field: ‘persistent’
[16:12:13.957]   - Field: ‘expr’
[16:12:13.957]   - Field: ‘uuid’
[16:12:13.957]   - Field: ‘seed’
[16:12:13.957]   - Field: ‘version’
[16:12:13.957]   - Field: ‘result’
[16:12:13.957]   - Field: ‘asynchronous’
[16:12:13.957]   - Field: ‘calls’
[16:12:13.958]   - Field: ‘globals’
[16:12:13.958]   - Field: ‘stdout’
[16:12:13.958]   - Field: ‘earlySignal’
[16:12:13.958]   - Field: ‘lazy’
[16:12:13.958]   - Field: ‘state’
[16:12:13.958] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:13.958] - Launch lazy future ...
[16:12:13.959] Packages needed by the future expression (n = 0): <none>
[16:12:13.959] Packages needed by future strategies (n = 0): <none>
[16:12:13.959] {
[16:12:13.959]     {
[16:12:13.959]         {
[16:12:13.959]             ...future.startTime <- base::Sys.time()
[16:12:13.959]             {
[16:12:13.959]                 {
[16:12:13.959]                   {
[16:12:13.959]                     {
[16:12:13.959]                       base::local({
[16:12:13.959]                         has_future <- base::requireNamespace("future", 
[16:12:13.959]                           quietly = TRUE)
[16:12:13.959]                         if (has_future) {
[16:12:13.959]                           ns <- base::getNamespace("future")
[16:12:13.959]                           version <- ns[[".package"]][["version"]]
[16:12:13.959]                           if (is.null(version)) 
[16:12:13.959]                             version <- utils::packageVersion("future")
[16:12:13.959]                         }
[16:12:13.959]                         else {
[16:12:13.959]                           version <- NULL
[16:12:13.959]                         }
[16:12:13.959]                         if (!has_future || version < "1.8.0") {
[16:12:13.959]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:13.959]                             "", base::R.version$version.string), 
[16:12:13.959]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:13.959]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:13.959]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:13.959]                               "release", "version")], collapse = " "), 
[16:12:13.959]                             hostname = base::Sys.info()[["nodename"]])
[16:12:13.959]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:13.959]                             info)
[16:12:13.959]                           info <- base::paste(info, collapse = "; ")
[16:12:13.959]                           if (!has_future) {
[16:12:13.959]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:13.959]                               info)
[16:12:13.959]                           }
[16:12:13.959]                           else {
[16:12:13.959]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:13.959]                               info, version)
[16:12:13.959]                           }
[16:12:13.959]                           base::stop(msg)
[16:12:13.959]                         }
[16:12:13.959]                       })
[16:12:13.959]                     }
[16:12:13.959]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:13.959]                     base::options(mc.cores = 1L)
[16:12:13.959]                   }
[16:12:13.959]                   options(future.plan = NULL)
[16:12:13.959]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.959]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:13.959]                 }
[16:12:13.959]                 ...future.workdir <- getwd()
[16:12:13.959]             }
[16:12:13.959]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:13.959]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:13.959]         }
[16:12:13.959]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:13.959]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:13.959]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:13.959]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:13.959]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:13.959]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:13.959]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:13.959]             base::names(...future.oldOptions))
[16:12:13.959]     }
[16:12:13.959]     if (FALSE) {
[16:12:13.959]     }
[16:12:13.959]     else {
[16:12:13.959]         if (TRUE) {
[16:12:13.959]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:13.959]                 open = "w")
[16:12:13.959]         }
[16:12:13.959]         else {
[16:12:13.959]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:13.959]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:13.959]         }
[16:12:13.959]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:13.959]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:13.959]             base::sink(type = "output", split = FALSE)
[16:12:13.959]             base::close(...future.stdout)
[16:12:13.959]         }, add = TRUE)
[16:12:13.959]     }
[16:12:13.959]     ...future.frame <- base::sys.nframe()
[16:12:13.959]     ...future.conditions <- base::list()
[16:12:13.959]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:13.959]     if (FALSE) {
[16:12:13.959]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:13.959]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:13.959]     }
[16:12:13.959]     ...future.result <- base::tryCatch({
[16:12:13.959]         base::withCallingHandlers({
[16:12:13.959]             ...future.value <- base::withVisible(base::local({
[16:12:13.959]                 ...future.makeSendCondition <- local({
[16:12:13.959]                   sendCondition <- NULL
[16:12:13.959]                   function(frame = 1L) {
[16:12:13.959]                     if (is.function(sendCondition)) 
[16:12:13.959]                       return(sendCondition)
[16:12:13.959]                     ns <- getNamespace("parallel")
[16:12:13.959]                     if (exists("sendData", mode = "function", 
[16:12:13.959]                       envir = ns)) {
[16:12:13.959]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:13.959]                         envir = ns)
[16:12:13.959]                       envir <- sys.frame(frame)
[16:12:13.959]                       master <- NULL
[16:12:13.959]                       while (!identical(envir, .GlobalEnv) && 
[16:12:13.959]                         !identical(envir, emptyenv())) {
[16:12:13.959]                         if (exists("master", mode = "list", envir = envir, 
[16:12:13.959]                           inherits = FALSE)) {
[16:12:13.959]                           master <- get("master", mode = "list", 
[16:12:13.959]                             envir = envir, inherits = FALSE)
[16:12:13.959]                           if (inherits(master, c("SOCKnode", 
[16:12:13.959]                             "SOCK0node"))) {
[16:12:13.959]                             sendCondition <<- function(cond) {
[16:12:13.959]                               data <- list(type = "VALUE", value = cond, 
[16:12:13.959]                                 success = TRUE)
[16:12:13.959]                               parallel_sendData(master, data)
[16:12:13.959]                             }
[16:12:13.959]                             return(sendCondition)
[16:12:13.959]                           }
[16:12:13.959]                         }
[16:12:13.959]                         frame <- frame + 1L
[16:12:13.959]                         envir <- sys.frame(frame)
[16:12:13.959]                       }
[16:12:13.959]                     }
[16:12:13.959]                     sendCondition <<- function(cond) NULL
[16:12:13.959]                   }
[16:12:13.959]                 })
[16:12:13.959]                 withCallingHandlers({
[16:12:13.959]                   {
[16:12:13.959]                     42
[16:12:13.959]                   }
[16:12:13.959]                 }, immediateCondition = function(cond) {
[16:12:13.959]                   sendCondition <- ...future.makeSendCondition()
[16:12:13.959]                   sendCondition(cond)
[16:12:13.959]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.959]                   {
[16:12:13.959]                     inherits <- base::inherits
[16:12:13.959]                     invokeRestart <- base::invokeRestart
[16:12:13.959]                     is.null <- base::is.null
[16:12:13.959]                     muffled <- FALSE
[16:12:13.959]                     if (inherits(cond, "message")) {
[16:12:13.959]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:13.959]                       if (muffled) 
[16:12:13.959]                         invokeRestart("muffleMessage")
[16:12:13.959]                     }
[16:12:13.959]                     else if (inherits(cond, "warning")) {
[16:12:13.959]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:13.959]                       if (muffled) 
[16:12:13.959]                         invokeRestart("muffleWarning")
[16:12:13.959]                     }
[16:12:13.959]                     else if (inherits(cond, "condition")) {
[16:12:13.959]                       if (!is.null(pattern)) {
[16:12:13.959]                         computeRestarts <- base::computeRestarts
[16:12:13.959]                         grepl <- base::grepl
[16:12:13.959]                         restarts <- computeRestarts(cond)
[16:12:13.959]                         for (restart in restarts) {
[16:12:13.959]                           name <- restart$name
[16:12:13.959]                           if (is.null(name)) 
[16:12:13.959]                             next
[16:12:13.959]                           if (!grepl(pattern, name)) 
[16:12:13.959]                             next
[16:12:13.959]                           invokeRestart(restart)
[16:12:13.959]                           muffled <- TRUE
[16:12:13.959]                           break
[16:12:13.959]                         }
[16:12:13.959]                       }
[16:12:13.959]                     }
[16:12:13.959]                     invisible(muffled)
[16:12:13.959]                   }
[16:12:13.959]                   muffleCondition(cond)
[16:12:13.959]                 })
[16:12:13.959]             }))
[16:12:13.959]             future::FutureResult(value = ...future.value$value, 
[16:12:13.959]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.959]                   ...future.rng), globalenv = if (FALSE) 
[16:12:13.959]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:13.959]                     ...future.globalenv.names))
[16:12:13.959]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:13.959]         }, condition = base::local({
[16:12:13.959]             c <- base::c
[16:12:13.959]             inherits <- base::inherits
[16:12:13.959]             invokeRestart <- base::invokeRestart
[16:12:13.959]             length <- base::length
[16:12:13.959]             list <- base::list
[16:12:13.959]             seq.int <- base::seq.int
[16:12:13.959]             signalCondition <- base::signalCondition
[16:12:13.959]             sys.calls <- base::sys.calls
[16:12:13.959]             `[[` <- base::`[[`
[16:12:13.959]             `+` <- base::`+`
[16:12:13.959]             `<<-` <- base::`<<-`
[16:12:13.959]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:13.959]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:13.959]                   3L)]
[16:12:13.959]             }
[16:12:13.959]             function(cond) {
[16:12:13.959]                 is_error <- inherits(cond, "error")
[16:12:13.959]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:13.959]                   NULL)
[16:12:13.959]                 if (is_error) {
[16:12:13.959]                   sessionInformation <- function() {
[16:12:13.959]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:13.959]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:13.959]                       search = base::search(), system = base::Sys.info())
[16:12:13.959]                   }
[16:12:13.959]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.959]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:13.959]                     cond$call), session = sessionInformation(), 
[16:12:13.959]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:13.959]                   signalCondition(cond)
[16:12:13.959]                 }
[16:12:13.959]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:13.959]                 "immediateCondition"))) {
[16:12:13.959]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:13.959]                   ...future.conditions[[length(...future.conditions) + 
[16:12:13.959]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:13.959]                   if (TRUE && !signal) {
[16:12:13.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.959]                     {
[16:12:13.959]                       inherits <- base::inherits
[16:12:13.959]                       invokeRestart <- base::invokeRestart
[16:12:13.959]                       is.null <- base::is.null
[16:12:13.959]                       muffled <- FALSE
[16:12:13.959]                       if (inherits(cond, "message")) {
[16:12:13.959]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.959]                         if (muffled) 
[16:12:13.959]                           invokeRestart("muffleMessage")
[16:12:13.959]                       }
[16:12:13.959]                       else if (inherits(cond, "warning")) {
[16:12:13.959]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.959]                         if (muffled) 
[16:12:13.959]                           invokeRestart("muffleWarning")
[16:12:13.959]                       }
[16:12:13.959]                       else if (inherits(cond, "condition")) {
[16:12:13.959]                         if (!is.null(pattern)) {
[16:12:13.959]                           computeRestarts <- base::computeRestarts
[16:12:13.959]                           grepl <- base::grepl
[16:12:13.959]                           restarts <- computeRestarts(cond)
[16:12:13.959]                           for (restart in restarts) {
[16:12:13.959]                             name <- restart$name
[16:12:13.959]                             if (is.null(name)) 
[16:12:13.959]                               next
[16:12:13.959]                             if (!grepl(pattern, name)) 
[16:12:13.959]                               next
[16:12:13.959]                             invokeRestart(restart)
[16:12:13.959]                             muffled <- TRUE
[16:12:13.959]                             break
[16:12:13.959]                           }
[16:12:13.959]                         }
[16:12:13.959]                       }
[16:12:13.959]                       invisible(muffled)
[16:12:13.959]                     }
[16:12:13.959]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.959]                   }
[16:12:13.959]                 }
[16:12:13.959]                 else {
[16:12:13.959]                   if (TRUE) {
[16:12:13.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:13.959]                     {
[16:12:13.959]                       inherits <- base::inherits
[16:12:13.959]                       invokeRestart <- base::invokeRestart
[16:12:13.959]                       is.null <- base::is.null
[16:12:13.959]                       muffled <- FALSE
[16:12:13.959]                       if (inherits(cond, "message")) {
[16:12:13.959]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:13.959]                         if (muffled) 
[16:12:13.959]                           invokeRestart("muffleMessage")
[16:12:13.959]                       }
[16:12:13.959]                       else if (inherits(cond, "warning")) {
[16:12:13.959]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:13.959]                         if (muffled) 
[16:12:13.959]                           invokeRestart("muffleWarning")
[16:12:13.959]                       }
[16:12:13.959]                       else if (inherits(cond, "condition")) {
[16:12:13.959]                         if (!is.null(pattern)) {
[16:12:13.959]                           computeRestarts <- base::computeRestarts
[16:12:13.959]                           grepl <- base::grepl
[16:12:13.959]                           restarts <- computeRestarts(cond)
[16:12:13.959]                           for (restart in restarts) {
[16:12:13.959]                             name <- restart$name
[16:12:13.959]                             if (is.null(name)) 
[16:12:13.959]                               next
[16:12:13.959]                             if (!grepl(pattern, name)) 
[16:12:13.959]                               next
[16:12:13.959]                             invokeRestart(restart)
[16:12:13.959]                             muffled <- TRUE
[16:12:13.959]                             break
[16:12:13.959]                           }
[16:12:13.959]                         }
[16:12:13.959]                       }
[16:12:13.959]                       invisible(muffled)
[16:12:13.959]                     }
[16:12:13.959]                     muffleCondition(cond, pattern = "^muffle")
[16:12:13.959]                   }
[16:12:13.959]                 }
[16:12:13.959]             }
[16:12:13.959]         }))
[16:12:13.959]     }, error = function(ex) {
[16:12:13.959]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:13.959]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:13.959]                 ...future.rng), started = ...future.startTime, 
[16:12:13.959]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:13.959]             version = "1.8"), class = "FutureResult")
[16:12:13.959]     }, finally = {
[16:12:13.959]         if (!identical(...future.workdir, getwd())) 
[16:12:13.959]             setwd(...future.workdir)
[16:12:13.959]         {
[16:12:13.959]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:13.959]                 ...future.oldOptions$nwarnings <- NULL
[16:12:13.959]             }
[16:12:13.959]             base::options(...future.oldOptions)
[16:12:13.959]             if (.Platform$OS.type == "windows") {
[16:12:13.959]                 old_names <- names(...future.oldEnvVars)
[16:12:13.959]                 envs <- base::Sys.getenv()
[16:12:13.959]                 names <- names(envs)
[16:12:13.959]                 common <- intersect(names, old_names)
[16:12:13.959]                 added <- setdiff(names, old_names)
[16:12:13.959]                 removed <- setdiff(old_names, names)
[16:12:13.959]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:13.959]                   envs[common]]
[16:12:13.959]                 NAMES <- toupper(changed)
[16:12:13.959]                 args <- list()
[16:12:13.959]                 for (kk in seq_along(NAMES)) {
[16:12:13.959]                   name <- changed[[kk]]
[16:12:13.959]                   NAME <- NAMES[[kk]]
[16:12:13.959]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.959]                     next
[16:12:13.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.959]                 }
[16:12:13.959]                 NAMES <- toupper(added)
[16:12:13.959]                 for (kk in seq_along(NAMES)) {
[16:12:13.959]                   name <- added[[kk]]
[16:12:13.959]                   NAME <- NAMES[[kk]]
[16:12:13.959]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.959]                     next
[16:12:13.959]                   args[[name]] <- ""
[16:12:13.959]                 }
[16:12:13.959]                 NAMES <- toupper(removed)
[16:12:13.959]                 for (kk in seq_along(NAMES)) {
[16:12:13.959]                   name <- removed[[kk]]
[16:12:13.959]                   NAME <- NAMES[[kk]]
[16:12:13.959]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:13.959]                     next
[16:12:13.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:13.959]                 }
[16:12:13.959]                 if (length(args) > 0) 
[16:12:13.959]                   base::do.call(base::Sys.setenv, args = args)
[16:12:13.959]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:13.959]             }
[16:12:13.959]             else {
[16:12:13.959]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:13.959]             }
[16:12:13.959]             {
[16:12:13.959]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:13.959]                   0L) {
[16:12:13.959]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:13.959]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:13.959]                   base::options(opts)
[16:12:13.959]                 }
[16:12:13.959]                 {
[16:12:13.959]                   {
[16:12:13.959]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:13.959]                     NULL
[16:12:13.959]                   }
[16:12:13.959]                   options(future.plan = NULL)
[16:12:13.959]                   if (is.na(NA_character_)) 
[16:12:13.959]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:13.959]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:13.959]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:13.959]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:13.959]                     envir = parent.frame()) 
[16:12:13.959]                   {
[16:12:13.959]                     if (is.function(workers)) 
[16:12:13.959]                       workers <- workers()
[16:12:13.959]                     workers <- structure(as.integer(workers), 
[16:12:13.959]                       class = class(workers))
[16:12:13.959]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:13.959]                       workers >= 1)
[16:12:13.959]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:13.959]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:13.959]                     }
[16:12:13.959]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:13.959]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:13.959]                       envir = envir)
[16:12:13.959]                     if (!future$lazy) 
[16:12:13.959]                       future <- run(future)
[16:12:13.959]                     invisible(future)
[16:12:13.959]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:13.959]                 }
[16:12:13.959]             }
[16:12:13.959]         }
[16:12:13.959]     })
[16:12:13.959]     if (TRUE) {
[16:12:13.959]         base::sink(type = "output", split = FALSE)
[16:12:13.959]         if (TRUE) {
[16:12:13.959]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:13.959]         }
[16:12:13.959]         else {
[16:12:13.959]             ...future.result["stdout"] <- base::list(NULL)
[16:12:13.959]         }
[16:12:13.959]         base::close(...future.stdout)
[16:12:13.959]         ...future.stdout <- NULL
[16:12:13.959]     }
[16:12:13.959]     ...future.result$conditions <- ...future.conditions
[16:12:13.959]     ...future.result$finished <- base::Sys.time()
[16:12:13.959]     ...future.result
[16:12:13.959] }
[16:12:13.963] MultisessionFuture started
[16:12:13.963] - Launch lazy future ... done
[16:12:13.963] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:13.975] result() for ClusterFuture ...
[16:12:13.975] receiveMessageFromWorker() for ClusterFuture ...
[16:12:13.975] - Validating connection of MultisessionFuture
[16:12:14.009] - received message: FutureResult
[16:12:14.009] - Received FutureResult
[16:12:14.009] - Erased future from FutureRegistry
[16:12:14.010] result() for ClusterFuture ...
[16:12:14.010] - result already collected: FutureResult
[16:12:14.010] result() for ClusterFuture ... done
[16:12:14.010] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:14.010] result() for ClusterFuture ... done
[16:12:14.010] result() for ClusterFuture ...
[16:12:14.010] - result already collected: FutureResult
[16:12:14.010] result() for ClusterFuture ... done
[16:12:14.014] getGlobalsAndPackages() ...
[16:12:14.014] 
[16:12:14.014] - globals: [0] <none>
[16:12:14.014] getGlobalsAndPackages() ... DONE
[16:12:14.026] Packages needed by the future expression (n = 0): <none>
[16:12:14.026] Packages needed by future strategies (n = 0): <none>
[16:12:14.030] {
[16:12:14.030]     {
[16:12:14.030]         {
[16:12:14.030]             ...future.startTime <- base::Sys.time()
[16:12:14.030]             {
[16:12:14.030]                 {
[16:12:14.030]                   {
[16:12:14.030]                     {
[16:12:14.030]                       base::local({
[16:12:14.030]                         has_future <- base::requireNamespace("future", 
[16:12:14.030]                           quietly = TRUE)
[16:12:14.030]                         if (has_future) {
[16:12:14.030]                           ns <- base::getNamespace("future")
[16:12:14.030]                           version <- ns[[".package"]][["version"]]
[16:12:14.030]                           if (is.null(version)) 
[16:12:14.030]                             version <- utils::packageVersion("future")
[16:12:14.030]                         }
[16:12:14.030]                         else {
[16:12:14.030]                           version <- NULL
[16:12:14.030]                         }
[16:12:14.030]                         if (!has_future || version < "1.8.0") {
[16:12:14.030]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:14.030]                             "", base::R.version$version.string), 
[16:12:14.030]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:14.030]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:14.030]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:14.030]                               "release", "version")], collapse = " "), 
[16:12:14.030]                             hostname = base::Sys.info()[["nodename"]])
[16:12:14.030]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:14.030]                             info)
[16:12:14.030]                           info <- base::paste(info, collapse = "; ")
[16:12:14.030]                           if (!has_future) {
[16:12:14.030]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:14.030]                               info)
[16:12:14.030]                           }
[16:12:14.030]                           else {
[16:12:14.030]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:14.030]                               info, version)
[16:12:14.030]                           }
[16:12:14.030]                           base::stop(msg)
[16:12:14.030]                         }
[16:12:14.030]                       })
[16:12:14.030]                     }
[16:12:14.030]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:14.030]                     base::options(mc.cores = 1L)
[16:12:14.030]                   }
[16:12:14.030]                   options(future.plan = NULL)
[16:12:14.030]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:14.030]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:14.030]                 }
[16:12:14.030]                 ...future.workdir <- getwd()
[16:12:14.030]             }
[16:12:14.030]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:14.030]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:14.030]         }
[16:12:14.030]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:14.030]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:14.030]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:14.030]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:14.030]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:14.030]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:14.030]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:14.030]             base::names(...future.oldOptions))
[16:12:14.030]     }
[16:12:14.030]     if (FALSE) {
[16:12:14.030]     }
[16:12:14.030]     else {
[16:12:14.030]         if (TRUE) {
[16:12:14.030]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:14.030]                 open = "w")
[16:12:14.030]         }
[16:12:14.030]         else {
[16:12:14.030]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:14.030]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:14.030]         }
[16:12:14.030]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:14.030]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:14.030]             base::sink(type = "output", split = FALSE)
[16:12:14.030]             base::close(...future.stdout)
[16:12:14.030]         }, add = TRUE)
[16:12:14.030]     }
[16:12:14.030]     ...future.frame <- base::sys.nframe()
[16:12:14.030]     ...future.conditions <- base::list()
[16:12:14.030]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:14.030]     if (FALSE) {
[16:12:14.030]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:14.030]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:14.030]     }
[16:12:14.030]     ...future.result <- base::tryCatch({
[16:12:14.030]         base::withCallingHandlers({
[16:12:14.030]             ...future.value <- base::withVisible(base::local({
[16:12:14.030]                 ...future.makeSendCondition <- local({
[16:12:14.030]                   sendCondition <- NULL
[16:12:14.030]                   function(frame = 1L) {
[16:12:14.030]                     if (is.function(sendCondition)) 
[16:12:14.030]                       return(sendCondition)
[16:12:14.030]                     ns <- getNamespace("parallel")
[16:12:14.030]                     if (exists("sendData", mode = "function", 
[16:12:14.030]                       envir = ns)) {
[16:12:14.030]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:14.030]                         envir = ns)
[16:12:14.030]                       envir <- sys.frame(frame)
[16:12:14.030]                       master <- NULL
[16:12:14.030]                       while (!identical(envir, .GlobalEnv) && 
[16:12:14.030]                         !identical(envir, emptyenv())) {
[16:12:14.030]                         if (exists("master", mode = "list", envir = envir, 
[16:12:14.030]                           inherits = FALSE)) {
[16:12:14.030]                           master <- get("master", mode = "list", 
[16:12:14.030]                             envir = envir, inherits = FALSE)
[16:12:14.030]                           if (inherits(master, c("SOCKnode", 
[16:12:14.030]                             "SOCK0node"))) {
[16:12:14.030]                             sendCondition <<- function(cond) {
[16:12:14.030]                               data <- list(type = "VALUE", value = cond, 
[16:12:14.030]                                 success = TRUE)
[16:12:14.030]                               parallel_sendData(master, data)
[16:12:14.030]                             }
[16:12:14.030]                             return(sendCondition)
[16:12:14.030]                           }
[16:12:14.030]                         }
[16:12:14.030]                         frame <- frame + 1L
[16:12:14.030]                         envir <- sys.frame(frame)
[16:12:14.030]                       }
[16:12:14.030]                     }
[16:12:14.030]                     sendCondition <<- function(cond) NULL
[16:12:14.030]                   }
[16:12:14.030]                 })
[16:12:14.030]                 withCallingHandlers({
[16:12:14.030]                   42
[16:12:14.030]                 }, immediateCondition = function(cond) {
[16:12:14.030]                   sendCondition <- ...future.makeSendCondition()
[16:12:14.030]                   sendCondition(cond)
[16:12:14.030]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.030]                   {
[16:12:14.030]                     inherits <- base::inherits
[16:12:14.030]                     invokeRestart <- base::invokeRestart
[16:12:14.030]                     is.null <- base::is.null
[16:12:14.030]                     muffled <- FALSE
[16:12:14.030]                     if (inherits(cond, "message")) {
[16:12:14.030]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:14.030]                       if (muffled) 
[16:12:14.030]                         invokeRestart("muffleMessage")
[16:12:14.030]                     }
[16:12:14.030]                     else if (inherits(cond, "warning")) {
[16:12:14.030]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:14.030]                       if (muffled) 
[16:12:14.030]                         invokeRestart("muffleWarning")
[16:12:14.030]                     }
[16:12:14.030]                     else if (inherits(cond, "condition")) {
[16:12:14.030]                       if (!is.null(pattern)) {
[16:12:14.030]                         computeRestarts <- base::computeRestarts
[16:12:14.030]                         grepl <- base::grepl
[16:12:14.030]                         restarts <- computeRestarts(cond)
[16:12:14.030]                         for (restart in restarts) {
[16:12:14.030]                           name <- restart$name
[16:12:14.030]                           if (is.null(name)) 
[16:12:14.030]                             next
[16:12:14.030]                           if (!grepl(pattern, name)) 
[16:12:14.030]                             next
[16:12:14.030]                           invokeRestart(restart)
[16:12:14.030]                           muffled <- TRUE
[16:12:14.030]                           break
[16:12:14.030]                         }
[16:12:14.030]                       }
[16:12:14.030]                     }
[16:12:14.030]                     invisible(muffled)
[16:12:14.030]                   }
[16:12:14.030]                   muffleCondition(cond)
[16:12:14.030]                 })
[16:12:14.030]             }))
[16:12:14.030]             future::FutureResult(value = ...future.value$value, 
[16:12:14.030]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:14.030]                   ...future.rng), globalenv = if (FALSE) 
[16:12:14.030]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:14.030]                     ...future.globalenv.names))
[16:12:14.030]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:14.030]         }, condition = base::local({
[16:12:14.030]             c <- base::c
[16:12:14.030]             inherits <- base::inherits
[16:12:14.030]             invokeRestart <- base::invokeRestart
[16:12:14.030]             length <- base::length
[16:12:14.030]             list <- base::list
[16:12:14.030]             seq.int <- base::seq.int
[16:12:14.030]             signalCondition <- base::signalCondition
[16:12:14.030]             sys.calls <- base::sys.calls
[16:12:14.030]             `[[` <- base::`[[`
[16:12:14.030]             `+` <- base::`+`
[16:12:14.030]             `<<-` <- base::`<<-`
[16:12:14.030]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:14.030]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:14.030]                   3L)]
[16:12:14.030]             }
[16:12:14.030]             function(cond) {
[16:12:14.030]                 is_error <- inherits(cond, "error")
[16:12:14.030]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:14.030]                   NULL)
[16:12:14.030]                 if (is_error) {
[16:12:14.030]                   sessionInformation <- function() {
[16:12:14.030]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:14.030]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:14.030]                       search = base::search(), system = base::Sys.info())
[16:12:14.030]                   }
[16:12:14.030]                   ...future.conditions[[length(...future.conditions) + 
[16:12:14.030]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:14.030]                     cond$call), session = sessionInformation(), 
[16:12:14.030]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:14.030]                   signalCondition(cond)
[16:12:14.030]                 }
[16:12:14.030]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:14.030]                 "immediateCondition"))) {
[16:12:14.030]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:14.030]                   ...future.conditions[[length(...future.conditions) + 
[16:12:14.030]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:14.030]                   if (TRUE && !signal) {
[16:12:14.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.030]                     {
[16:12:14.030]                       inherits <- base::inherits
[16:12:14.030]                       invokeRestart <- base::invokeRestart
[16:12:14.030]                       is.null <- base::is.null
[16:12:14.030]                       muffled <- FALSE
[16:12:14.030]                       if (inherits(cond, "message")) {
[16:12:14.030]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:14.030]                         if (muffled) 
[16:12:14.030]                           invokeRestart("muffleMessage")
[16:12:14.030]                       }
[16:12:14.030]                       else if (inherits(cond, "warning")) {
[16:12:14.030]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:14.030]                         if (muffled) 
[16:12:14.030]                           invokeRestart("muffleWarning")
[16:12:14.030]                       }
[16:12:14.030]                       else if (inherits(cond, "condition")) {
[16:12:14.030]                         if (!is.null(pattern)) {
[16:12:14.030]                           computeRestarts <- base::computeRestarts
[16:12:14.030]                           grepl <- base::grepl
[16:12:14.030]                           restarts <- computeRestarts(cond)
[16:12:14.030]                           for (restart in restarts) {
[16:12:14.030]                             name <- restart$name
[16:12:14.030]                             if (is.null(name)) 
[16:12:14.030]                               next
[16:12:14.030]                             if (!grepl(pattern, name)) 
[16:12:14.030]                               next
[16:12:14.030]                             invokeRestart(restart)
[16:12:14.030]                             muffled <- TRUE
[16:12:14.030]                             break
[16:12:14.030]                           }
[16:12:14.030]                         }
[16:12:14.030]                       }
[16:12:14.030]                       invisible(muffled)
[16:12:14.030]                     }
[16:12:14.030]                     muffleCondition(cond, pattern = "^muffle")
[16:12:14.030]                   }
[16:12:14.030]                 }
[16:12:14.030]                 else {
[16:12:14.030]                   if (TRUE) {
[16:12:14.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.030]                     {
[16:12:14.030]                       inherits <- base::inherits
[16:12:14.030]                       invokeRestart <- base::invokeRestart
[16:12:14.030]                       is.null <- base::is.null
[16:12:14.030]                       muffled <- FALSE
[16:12:14.030]                       if (inherits(cond, "message")) {
[16:12:14.030]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:14.030]                         if (muffled) 
[16:12:14.030]                           invokeRestart("muffleMessage")
[16:12:14.030]                       }
[16:12:14.030]                       else if (inherits(cond, "warning")) {
[16:12:14.030]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:14.030]                         if (muffled) 
[16:12:14.030]                           invokeRestart("muffleWarning")
[16:12:14.030]                       }
[16:12:14.030]                       else if (inherits(cond, "condition")) {
[16:12:14.030]                         if (!is.null(pattern)) {
[16:12:14.030]                           computeRestarts <- base::computeRestarts
[16:12:14.030]                           grepl <- base::grepl
[16:12:14.030]                           restarts <- computeRestarts(cond)
[16:12:14.030]                           for (restart in restarts) {
[16:12:14.030]                             name <- restart$name
[16:12:14.030]                             if (is.null(name)) 
[16:12:14.030]                               next
[16:12:14.030]                             if (!grepl(pattern, name)) 
[16:12:14.030]                               next
[16:12:14.030]                             invokeRestart(restart)
[16:12:14.030]                             muffled <- TRUE
[16:12:14.030]                             break
[16:12:14.030]                           }
[16:12:14.030]                         }
[16:12:14.030]                       }
[16:12:14.030]                       invisible(muffled)
[16:12:14.030]                     }
[16:12:14.030]                     muffleCondition(cond, pattern = "^muffle")
[16:12:14.030]                   }
[16:12:14.030]                 }
[16:12:14.030]             }
[16:12:14.030]         }))
[16:12:14.030]     }, error = function(ex) {
[16:12:14.030]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:14.030]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:14.030]                 ...future.rng), started = ...future.startTime, 
[16:12:14.030]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:14.030]             version = "1.8"), class = "FutureResult")
[16:12:14.030]     }, finally = {
[16:12:14.030]         if (!identical(...future.workdir, getwd())) 
[16:12:14.030]             setwd(...future.workdir)
[16:12:14.030]         {
[16:12:14.030]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:14.030]                 ...future.oldOptions$nwarnings <- NULL
[16:12:14.030]             }
[16:12:14.030]             base::options(...future.oldOptions)
[16:12:14.030]             if (.Platform$OS.type == "windows") {
[16:12:14.030]                 old_names <- names(...future.oldEnvVars)
[16:12:14.030]                 envs <- base::Sys.getenv()
[16:12:14.030]                 names <- names(envs)
[16:12:14.030]                 common <- intersect(names, old_names)
[16:12:14.030]                 added <- setdiff(names, old_names)
[16:12:14.030]                 removed <- setdiff(old_names, names)
[16:12:14.030]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:14.030]                   envs[common]]
[16:12:14.030]                 NAMES <- toupper(changed)
[16:12:14.030]                 args <- list()
[16:12:14.030]                 for (kk in seq_along(NAMES)) {
[16:12:14.030]                   name <- changed[[kk]]
[16:12:14.030]                   NAME <- NAMES[[kk]]
[16:12:14.030]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.030]                     next
[16:12:14.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:14.030]                 }
[16:12:14.030]                 NAMES <- toupper(added)
[16:12:14.030]                 for (kk in seq_along(NAMES)) {
[16:12:14.030]                   name <- added[[kk]]
[16:12:14.030]                   NAME <- NAMES[[kk]]
[16:12:14.030]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.030]                     next
[16:12:14.030]                   args[[name]] <- ""
[16:12:14.030]                 }
[16:12:14.030]                 NAMES <- toupper(removed)
[16:12:14.030]                 for (kk in seq_along(NAMES)) {
[16:12:14.030]                   name <- removed[[kk]]
[16:12:14.030]                   NAME <- NAMES[[kk]]
[16:12:14.030]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.030]                     next
[16:12:14.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:14.030]                 }
[16:12:14.030]                 if (length(args) > 0) 
[16:12:14.030]                   base::do.call(base::Sys.setenv, args = args)
[16:12:14.030]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:14.030]             }
[16:12:14.030]             else {
[16:12:14.030]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:14.030]             }
[16:12:14.030]             {
[16:12:14.030]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:14.030]                   0L) {
[16:12:14.030]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:14.030]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:14.030]                   base::options(opts)
[16:12:14.030]                 }
[16:12:14.030]                 {
[16:12:14.030]                   {
[16:12:14.030]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:14.030]                     NULL
[16:12:14.030]                   }
[16:12:14.030]                   options(future.plan = NULL)
[16:12:14.030]                   if (is.na(NA_character_)) 
[16:12:14.030]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:14.030]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:14.030]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:14.030]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:14.030]                     envir = parent.frame()) 
[16:12:14.030]                   {
[16:12:14.030]                     if (is.function(workers)) 
[16:12:14.030]                       workers <- workers()
[16:12:14.030]                     workers <- structure(as.integer(workers), 
[16:12:14.030]                       class = class(workers))
[16:12:14.030]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:14.030]                       workers >= 1)
[16:12:14.030]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:14.030]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:14.030]                     }
[16:12:14.030]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:14.030]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:14.030]                       envir = envir)
[16:12:14.030]                     if (!future$lazy) 
[16:12:14.030]                       future <- run(future)
[16:12:14.030]                     invisible(future)
[16:12:14.030]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:14.030]                 }
[16:12:14.030]             }
[16:12:14.030]         }
[16:12:14.030]     })
[16:12:14.030]     if (TRUE) {
[16:12:14.030]         base::sink(type = "output", split = FALSE)
[16:12:14.030]         if (TRUE) {
[16:12:14.030]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:14.030]         }
[16:12:14.030]         else {
[16:12:14.030]             ...future.result["stdout"] <- base::list(NULL)
[16:12:14.030]         }
[16:12:14.030]         base::close(...future.stdout)
[16:12:14.030]         ...future.stdout <- NULL
[16:12:14.030]     }
[16:12:14.030]     ...future.result$conditions <- ...future.conditions
[16:12:14.030]     ...future.result$finished <- base::Sys.time()
[16:12:14.030]     ...future.result
[16:12:14.030] }
[16:12:14.033] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:14.044] result() for ClusterFuture ...
[16:12:14.044] receiveMessageFromWorker() for ClusterFuture ...
[16:12:14.044] - Validating connection of MultisessionFuture
[16:12:14.081] - received message: FutureResult
[16:12:14.081] - Received FutureResult
[16:12:14.081] - Erased future from FutureRegistry
[16:12:14.081] result() for ClusterFuture ...
[16:12:14.081] - result already collected: FutureResult
[16:12:14.081] result() for ClusterFuture ... done
[16:12:14.081] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:14.081] result() for ClusterFuture ... done
[16:12:14.082] result() for ClusterFuture ...
[16:12:14.082] - result already collected: FutureResult
[16:12:14.082] result() for ClusterFuture ... done
[16:12:14.082] getGlobalsAndPackages() ...
[16:12:14.082] Searching for globals...
[16:12:14.082] 
[16:12:14.082] Searching for globals ... DONE
[16:12:14.082] - globals: [0] <none>
[16:12:14.082] getGlobalsAndPackages() ... DONE
[16:12:14.083] run() for ‘Future’ ...
[16:12:14.083] - state: ‘created’
[16:12:14.083] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:14.097] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:14.097] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:14.097]   - Field: ‘node’
[16:12:14.098]   - Field: ‘label’
[16:12:14.098]   - Field: ‘local’
[16:12:14.098]   - Field: ‘owner’
[16:12:14.098]   - Field: ‘envir’
[16:12:14.098]   - Field: ‘workers’
[16:12:14.098]   - Field: ‘packages’
[16:12:14.098]   - Field: ‘gc’
[16:12:14.098]   - Field: ‘conditions’
[16:12:14.098]   - Field: ‘persistent’
[16:12:14.098]   - Field: ‘expr’
[16:12:14.098]   - Field: ‘uuid’
[16:12:14.099]   - Field: ‘seed’
[16:12:14.099]   - Field: ‘version’
[16:12:14.099]   - Field: ‘result’
[16:12:14.099]   - Field: ‘asynchronous’
[16:12:14.099]   - Field: ‘calls’
[16:12:14.099]   - Field: ‘globals’
[16:12:14.099]   - Field: ‘stdout’
[16:12:14.099]   - Field: ‘earlySignal’
[16:12:14.099]   - Field: ‘lazy’
[16:12:14.099]   - Field: ‘state’
[16:12:14.099] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:14.100] - Launch lazy future ...
[16:12:14.100] Packages needed by the future expression (n = 0): <none>
[16:12:14.100] Packages needed by future strategies (n = 0): <none>
[16:12:14.100] {
[16:12:14.100]     {
[16:12:14.100]         {
[16:12:14.100]             ...future.startTime <- base::Sys.time()
[16:12:14.100]             {
[16:12:14.100]                 {
[16:12:14.100]                   {
[16:12:14.100]                     {
[16:12:14.100]                       base::local({
[16:12:14.100]                         has_future <- base::requireNamespace("future", 
[16:12:14.100]                           quietly = TRUE)
[16:12:14.100]                         if (has_future) {
[16:12:14.100]                           ns <- base::getNamespace("future")
[16:12:14.100]                           version <- ns[[".package"]][["version"]]
[16:12:14.100]                           if (is.null(version)) 
[16:12:14.100]                             version <- utils::packageVersion("future")
[16:12:14.100]                         }
[16:12:14.100]                         else {
[16:12:14.100]                           version <- NULL
[16:12:14.100]                         }
[16:12:14.100]                         if (!has_future || version < "1.8.0") {
[16:12:14.100]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:14.100]                             "", base::R.version$version.string), 
[16:12:14.100]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:14.100]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:14.100]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:14.100]                               "release", "version")], collapse = " "), 
[16:12:14.100]                             hostname = base::Sys.info()[["nodename"]])
[16:12:14.100]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:14.100]                             info)
[16:12:14.100]                           info <- base::paste(info, collapse = "; ")
[16:12:14.100]                           if (!has_future) {
[16:12:14.100]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:14.100]                               info)
[16:12:14.100]                           }
[16:12:14.100]                           else {
[16:12:14.100]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:14.100]                               info, version)
[16:12:14.100]                           }
[16:12:14.100]                           base::stop(msg)
[16:12:14.100]                         }
[16:12:14.100]                       })
[16:12:14.100]                     }
[16:12:14.100]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:14.100]                     base::options(mc.cores = 1L)
[16:12:14.100]                   }
[16:12:14.100]                   options(future.plan = NULL)
[16:12:14.100]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:14.100]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:14.100]                 }
[16:12:14.100]                 ...future.workdir <- getwd()
[16:12:14.100]             }
[16:12:14.100]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:14.100]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:14.100]         }
[16:12:14.100]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:14.100]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:14.100]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:14.100]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:14.100]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:14.100]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:14.100]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:14.100]             base::names(...future.oldOptions))
[16:12:14.100]     }
[16:12:14.100]     if (FALSE) {
[16:12:14.100]     }
[16:12:14.100]     else {
[16:12:14.100]         if (TRUE) {
[16:12:14.100]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:14.100]                 open = "w")
[16:12:14.100]         }
[16:12:14.100]         else {
[16:12:14.100]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:14.100]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:14.100]         }
[16:12:14.100]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:14.100]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:14.100]             base::sink(type = "output", split = FALSE)
[16:12:14.100]             base::close(...future.stdout)
[16:12:14.100]         }, add = TRUE)
[16:12:14.100]     }
[16:12:14.100]     ...future.frame <- base::sys.nframe()
[16:12:14.100]     ...future.conditions <- base::list()
[16:12:14.100]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:14.100]     if (FALSE) {
[16:12:14.100]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:14.100]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:14.100]     }
[16:12:14.100]     ...future.result <- base::tryCatch({
[16:12:14.100]         base::withCallingHandlers({
[16:12:14.100]             ...future.value <- base::withVisible(base::local({
[16:12:14.100]                 ...future.makeSendCondition <- local({
[16:12:14.100]                   sendCondition <- NULL
[16:12:14.100]                   function(frame = 1L) {
[16:12:14.100]                     if (is.function(sendCondition)) 
[16:12:14.100]                       return(sendCondition)
[16:12:14.100]                     ns <- getNamespace("parallel")
[16:12:14.100]                     if (exists("sendData", mode = "function", 
[16:12:14.100]                       envir = ns)) {
[16:12:14.100]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:14.100]                         envir = ns)
[16:12:14.100]                       envir <- sys.frame(frame)
[16:12:14.100]                       master <- NULL
[16:12:14.100]                       while (!identical(envir, .GlobalEnv) && 
[16:12:14.100]                         !identical(envir, emptyenv())) {
[16:12:14.100]                         if (exists("master", mode = "list", envir = envir, 
[16:12:14.100]                           inherits = FALSE)) {
[16:12:14.100]                           master <- get("master", mode = "list", 
[16:12:14.100]                             envir = envir, inherits = FALSE)
[16:12:14.100]                           if (inherits(master, c("SOCKnode", 
[16:12:14.100]                             "SOCK0node"))) {
[16:12:14.100]                             sendCondition <<- function(cond) {
[16:12:14.100]                               data <- list(type = "VALUE", value = cond, 
[16:12:14.100]                                 success = TRUE)
[16:12:14.100]                               parallel_sendData(master, data)
[16:12:14.100]                             }
[16:12:14.100]                             return(sendCondition)
[16:12:14.100]                           }
[16:12:14.100]                         }
[16:12:14.100]                         frame <- frame + 1L
[16:12:14.100]                         envir <- sys.frame(frame)
[16:12:14.100]                       }
[16:12:14.100]                     }
[16:12:14.100]                     sendCondition <<- function(cond) NULL
[16:12:14.100]                   }
[16:12:14.100]                 })
[16:12:14.100]                 withCallingHandlers({
[16:12:14.100]                   42
[16:12:14.100]                 }, immediateCondition = function(cond) {
[16:12:14.100]                   sendCondition <- ...future.makeSendCondition()
[16:12:14.100]                   sendCondition(cond)
[16:12:14.100]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.100]                   {
[16:12:14.100]                     inherits <- base::inherits
[16:12:14.100]                     invokeRestart <- base::invokeRestart
[16:12:14.100]                     is.null <- base::is.null
[16:12:14.100]                     muffled <- FALSE
[16:12:14.100]                     if (inherits(cond, "message")) {
[16:12:14.100]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:14.100]                       if (muffled) 
[16:12:14.100]                         invokeRestart("muffleMessage")
[16:12:14.100]                     }
[16:12:14.100]                     else if (inherits(cond, "warning")) {
[16:12:14.100]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:14.100]                       if (muffled) 
[16:12:14.100]                         invokeRestart("muffleWarning")
[16:12:14.100]                     }
[16:12:14.100]                     else if (inherits(cond, "condition")) {
[16:12:14.100]                       if (!is.null(pattern)) {
[16:12:14.100]                         computeRestarts <- base::computeRestarts
[16:12:14.100]                         grepl <- base::grepl
[16:12:14.100]                         restarts <- computeRestarts(cond)
[16:12:14.100]                         for (restart in restarts) {
[16:12:14.100]                           name <- restart$name
[16:12:14.100]                           if (is.null(name)) 
[16:12:14.100]                             next
[16:12:14.100]                           if (!grepl(pattern, name)) 
[16:12:14.100]                             next
[16:12:14.100]                           invokeRestart(restart)
[16:12:14.100]                           muffled <- TRUE
[16:12:14.100]                           break
[16:12:14.100]                         }
[16:12:14.100]                       }
[16:12:14.100]                     }
[16:12:14.100]                     invisible(muffled)
[16:12:14.100]                   }
[16:12:14.100]                   muffleCondition(cond)
[16:12:14.100]                 })
[16:12:14.100]             }))
[16:12:14.100]             future::FutureResult(value = ...future.value$value, 
[16:12:14.100]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:14.100]                   ...future.rng), globalenv = if (FALSE) 
[16:12:14.100]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:14.100]                     ...future.globalenv.names))
[16:12:14.100]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:14.100]         }, condition = base::local({
[16:12:14.100]             c <- base::c
[16:12:14.100]             inherits <- base::inherits
[16:12:14.100]             invokeRestart <- base::invokeRestart
[16:12:14.100]             length <- base::length
[16:12:14.100]             list <- base::list
[16:12:14.100]             seq.int <- base::seq.int
[16:12:14.100]             signalCondition <- base::signalCondition
[16:12:14.100]             sys.calls <- base::sys.calls
[16:12:14.100]             `[[` <- base::`[[`
[16:12:14.100]             `+` <- base::`+`
[16:12:14.100]             `<<-` <- base::`<<-`
[16:12:14.100]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:14.100]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:14.100]                   3L)]
[16:12:14.100]             }
[16:12:14.100]             function(cond) {
[16:12:14.100]                 is_error <- inherits(cond, "error")
[16:12:14.100]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:14.100]                   NULL)
[16:12:14.100]                 if (is_error) {
[16:12:14.100]                   sessionInformation <- function() {
[16:12:14.100]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:14.100]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:14.100]                       search = base::search(), system = base::Sys.info())
[16:12:14.100]                   }
[16:12:14.100]                   ...future.conditions[[length(...future.conditions) + 
[16:12:14.100]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:14.100]                     cond$call), session = sessionInformation(), 
[16:12:14.100]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:14.100]                   signalCondition(cond)
[16:12:14.100]                 }
[16:12:14.100]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:14.100]                 "immediateCondition"))) {
[16:12:14.100]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:14.100]                   ...future.conditions[[length(...future.conditions) + 
[16:12:14.100]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:14.100]                   if (TRUE && !signal) {
[16:12:14.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.100]                     {
[16:12:14.100]                       inherits <- base::inherits
[16:12:14.100]                       invokeRestart <- base::invokeRestart
[16:12:14.100]                       is.null <- base::is.null
[16:12:14.100]                       muffled <- FALSE
[16:12:14.100]                       if (inherits(cond, "message")) {
[16:12:14.100]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:14.100]                         if (muffled) 
[16:12:14.100]                           invokeRestart("muffleMessage")
[16:12:14.100]                       }
[16:12:14.100]                       else if (inherits(cond, "warning")) {
[16:12:14.100]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:14.100]                         if (muffled) 
[16:12:14.100]                           invokeRestart("muffleWarning")
[16:12:14.100]                       }
[16:12:14.100]                       else if (inherits(cond, "condition")) {
[16:12:14.100]                         if (!is.null(pattern)) {
[16:12:14.100]                           computeRestarts <- base::computeRestarts
[16:12:14.100]                           grepl <- base::grepl
[16:12:14.100]                           restarts <- computeRestarts(cond)
[16:12:14.100]                           for (restart in restarts) {
[16:12:14.100]                             name <- restart$name
[16:12:14.100]                             if (is.null(name)) 
[16:12:14.100]                               next
[16:12:14.100]                             if (!grepl(pattern, name)) 
[16:12:14.100]                               next
[16:12:14.100]                             invokeRestart(restart)
[16:12:14.100]                             muffled <- TRUE
[16:12:14.100]                             break
[16:12:14.100]                           }
[16:12:14.100]                         }
[16:12:14.100]                       }
[16:12:14.100]                       invisible(muffled)
[16:12:14.100]                     }
[16:12:14.100]                     muffleCondition(cond, pattern = "^muffle")
[16:12:14.100]                   }
[16:12:14.100]                 }
[16:12:14.100]                 else {
[16:12:14.100]                   if (TRUE) {
[16:12:14.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.100]                     {
[16:12:14.100]                       inherits <- base::inherits
[16:12:14.100]                       invokeRestart <- base::invokeRestart
[16:12:14.100]                       is.null <- base::is.null
[16:12:14.100]                       muffled <- FALSE
[16:12:14.100]                       if (inherits(cond, "message")) {
[16:12:14.100]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:14.100]                         if (muffled) 
[16:12:14.100]                           invokeRestart("muffleMessage")
[16:12:14.100]                       }
[16:12:14.100]                       else if (inherits(cond, "warning")) {
[16:12:14.100]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:14.100]                         if (muffled) 
[16:12:14.100]                           invokeRestart("muffleWarning")
[16:12:14.100]                       }
[16:12:14.100]                       else if (inherits(cond, "condition")) {
[16:12:14.100]                         if (!is.null(pattern)) {
[16:12:14.100]                           computeRestarts <- base::computeRestarts
[16:12:14.100]                           grepl <- base::grepl
[16:12:14.100]                           restarts <- computeRestarts(cond)
[16:12:14.100]                           for (restart in restarts) {
[16:12:14.100]                             name <- restart$name
[16:12:14.100]                             if (is.null(name)) 
[16:12:14.100]                               next
[16:12:14.100]                             if (!grepl(pattern, name)) 
[16:12:14.100]                               next
[16:12:14.100]                             invokeRestart(restart)
[16:12:14.100]                             muffled <- TRUE
[16:12:14.100]                             break
[16:12:14.100]                           }
[16:12:14.100]                         }
[16:12:14.100]                       }
[16:12:14.100]                       invisible(muffled)
[16:12:14.100]                     }
[16:12:14.100]                     muffleCondition(cond, pattern = "^muffle")
[16:12:14.100]                   }
[16:12:14.100]                 }
[16:12:14.100]             }
[16:12:14.100]         }))
[16:12:14.100]     }, error = function(ex) {
[16:12:14.100]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:14.100]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:14.100]                 ...future.rng), started = ...future.startTime, 
[16:12:14.100]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:14.100]             version = "1.8"), class = "FutureResult")
[16:12:14.100]     }, finally = {
[16:12:14.100]         if (!identical(...future.workdir, getwd())) 
[16:12:14.100]             setwd(...future.workdir)
[16:12:14.100]         {
[16:12:14.100]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:14.100]                 ...future.oldOptions$nwarnings <- NULL
[16:12:14.100]             }
[16:12:14.100]             base::options(...future.oldOptions)
[16:12:14.100]             if (.Platform$OS.type == "windows") {
[16:12:14.100]                 old_names <- names(...future.oldEnvVars)
[16:12:14.100]                 envs <- base::Sys.getenv()
[16:12:14.100]                 names <- names(envs)
[16:12:14.100]                 common <- intersect(names, old_names)
[16:12:14.100]                 added <- setdiff(names, old_names)
[16:12:14.100]                 removed <- setdiff(old_names, names)
[16:12:14.100]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:14.100]                   envs[common]]
[16:12:14.100]                 NAMES <- toupper(changed)
[16:12:14.100]                 args <- list()
[16:12:14.100]                 for (kk in seq_along(NAMES)) {
[16:12:14.100]                   name <- changed[[kk]]
[16:12:14.100]                   NAME <- NAMES[[kk]]
[16:12:14.100]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.100]                     next
[16:12:14.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:14.100]                 }
[16:12:14.100]                 NAMES <- toupper(added)
[16:12:14.100]                 for (kk in seq_along(NAMES)) {
[16:12:14.100]                   name <- added[[kk]]
[16:12:14.100]                   NAME <- NAMES[[kk]]
[16:12:14.100]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.100]                     next
[16:12:14.100]                   args[[name]] <- ""
[16:12:14.100]                 }
[16:12:14.100]                 NAMES <- toupper(removed)
[16:12:14.100]                 for (kk in seq_along(NAMES)) {
[16:12:14.100]                   name <- removed[[kk]]
[16:12:14.100]                   NAME <- NAMES[[kk]]
[16:12:14.100]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.100]                     next
[16:12:14.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:14.100]                 }
[16:12:14.100]                 if (length(args) > 0) 
[16:12:14.100]                   base::do.call(base::Sys.setenv, args = args)
[16:12:14.100]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:14.100]             }
[16:12:14.100]             else {
[16:12:14.100]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:14.100]             }
[16:12:14.100]             {
[16:12:14.100]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:14.100]                   0L) {
[16:12:14.100]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:14.100]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:14.100]                   base::options(opts)
[16:12:14.100]                 }
[16:12:14.100]                 {
[16:12:14.100]                   {
[16:12:14.100]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:14.100]                     NULL
[16:12:14.100]                   }
[16:12:14.100]                   options(future.plan = NULL)
[16:12:14.100]                   if (is.na(NA_character_)) 
[16:12:14.100]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:14.100]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:14.100]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:14.100]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:14.100]                     envir = parent.frame()) 
[16:12:14.100]                   {
[16:12:14.100]                     if (is.function(workers)) 
[16:12:14.100]                       workers <- workers()
[16:12:14.100]                     workers <- structure(as.integer(workers), 
[16:12:14.100]                       class = class(workers))
[16:12:14.100]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:14.100]                       workers >= 1)
[16:12:14.100]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:14.100]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:14.100]                     }
[16:12:14.100]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:14.100]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:14.100]                       envir = envir)
[16:12:14.100]                     if (!future$lazy) 
[16:12:14.100]                       future <- run(future)
[16:12:14.100]                     invisible(future)
[16:12:14.100]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:14.100]                 }
[16:12:14.100]             }
[16:12:14.100]         }
[16:12:14.100]     })
[16:12:14.100]     if (TRUE) {
[16:12:14.100]         base::sink(type = "output", split = FALSE)
[16:12:14.100]         if (TRUE) {
[16:12:14.100]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:14.100]         }
[16:12:14.100]         else {
[16:12:14.100]             ...future.result["stdout"] <- base::list(NULL)
[16:12:14.100]         }
[16:12:14.100]         base::close(...future.stdout)
[16:12:14.100]         ...future.stdout <- NULL
[16:12:14.100]     }
[16:12:14.100]     ...future.result$conditions <- ...future.conditions
[16:12:14.100]     ...future.result$finished <- base::Sys.time()
[16:12:14.100]     ...future.result
[16:12:14.100] }
[16:12:14.103] MultisessionFuture started
[16:12:14.104] - Launch lazy future ... done
[16:12:14.104] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:14.115] result() for ClusterFuture ...
[16:12:14.115] receiveMessageFromWorker() for ClusterFuture ...
[16:12:14.115] - Validating connection of MultisessionFuture
[16:12:14.148] - received message: FutureResult
[16:12:14.148] - Received FutureResult
[16:12:14.148] - Erased future from FutureRegistry
[16:12:14.149] result() for ClusterFuture ...
[16:12:14.149] - result already collected: FutureResult
[16:12:14.149] result() for ClusterFuture ... done
[16:12:14.149] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:14.149] result() for ClusterFuture ... done
[16:12:14.149] result() for ClusterFuture ...
[16:12:14.149] - result already collected: FutureResult
[16:12:14.149] result() for ClusterFuture ... done
[16:12:14.149] getGlobalsAndPackages() ...
[16:12:14.150] Searching for globals...
[16:12:14.150] - globals found: [1] ‘{’
[16:12:14.150] Searching for globals ... DONE
[16:12:14.150] Resolving globals: FALSE
[16:12:14.151] 
[16:12:14.151] 
[16:12:14.151] getGlobalsAndPackages() ... DONE
[16:12:14.151] run() for ‘Future’ ...
[16:12:14.151] - state: ‘created’
[16:12:14.151] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:14.165] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:14.165] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:14.166]   - Field: ‘node’
[16:12:14.166]   - Field: ‘label’
[16:12:14.166]   - Field: ‘local’
[16:12:14.166]   - Field: ‘owner’
[16:12:14.166]   - Field: ‘envir’
[16:12:14.166]   - Field: ‘workers’
[16:12:14.166]   - Field: ‘packages’
[16:12:14.166]   - Field: ‘gc’
[16:12:14.166]   - Field: ‘conditions’
[16:12:14.166]   - Field: ‘persistent’
[16:12:14.166]   - Field: ‘expr’
[16:12:14.167]   - Field: ‘uuid’
[16:12:14.167]   - Field: ‘seed’
[16:12:14.167]   - Field: ‘version’
[16:12:14.167]   - Field: ‘result’
[16:12:14.167]   - Field: ‘asynchronous’
[16:12:14.167]   - Field: ‘calls’
[16:12:14.167]   - Field: ‘globals’
[16:12:14.167]   - Field: ‘stdout’
[16:12:14.167]   - Field: ‘earlySignal’
[16:12:14.167]   - Field: ‘lazy’
[16:12:14.167]   - Field: ‘state’
[16:12:14.168] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:14.168] - Launch lazy future ...
[16:12:14.168] Packages needed by the future expression (n = 0): <none>
[16:12:14.168] Packages needed by future strategies (n = 0): <none>
[16:12:14.169] {
[16:12:14.169]     {
[16:12:14.169]         {
[16:12:14.169]             ...future.startTime <- base::Sys.time()
[16:12:14.169]             {
[16:12:14.169]                 {
[16:12:14.169]                   {
[16:12:14.169]                     {
[16:12:14.169]                       base::local({
[16:12:14.169]                         has_future <- base::requireNamespace("future", 
[16:12:14.169]                           quietly = TRUE)
[16:12:14.169]                         if (has_future) {
[16:12:14.169]                           ns <- base::getNamespace("future")
[16:12:14.169]                           version <- ns[[".package"]][["version"]]
[16:12:14.169]                           if (is.null(version)) 
[16:12:14.169]                             version <- utils::packageVersion("future")
[16:12:14.169]                         }
[16:12:14.169]                         else {
[16:12:14.169]                           version <- NULL
[16:12:14.169]                         }
[16:12:14.169]                         if (!has_future || version < "1.8.0") {
[16:12:14.169]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:14.169]                             "", base::R.version$version.string), 
[16:12:14.169]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:14.169]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:14.169]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:14.169]                               "release", "version")], collapse = " "), 
[16:12:14.169]                             hostname = base::Sys.info()[["nodename"]])
[16:12:14.169]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:14.169]                             info)
[16:12:14.169]                           info <- base::paste(info, collapse = "; ")
[16:12:14.169]                           if (!has_future) {
[16:12:14.169]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:14.169]                               info)
[16:12:14.169]                           }
[16:12:14.169]                           else {
[16:12:14.169]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:14.169]                               info, version)
[16:12:14.169]                           }
[16:12:14.169]                           base::stop(msg)
[16:12:14.169]                         }
[16:12:14.169]                       })
[16:12:14.169]                     }
[16:12:14.169]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:14.169]                     base::options(mc.cores = 1L)
[16:12:14.169]                   }
[16:12:14.169]                   options(future.plan = NULL)
[16:12:14.169]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:14.169]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:14.169]                 }
[16:12:14.169]                 ...future.workdir <- getwd()
[16:12:14.169]             }
[16:12:14.169]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:14.169]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:14.169]         }
[16:12:14.169]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:14.169]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:14.169]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:14.169]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:14.169]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:14.169]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:14.169]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:14.169]             base::names(...future.oldOptions))
[16:12:14.169]     }
[16:12:14.169]     if (FALSE) {
[16:12:14.169]     }
[16:12:14.169]     else {
[16:12:14.169]         if (TRUE) {
[16:12:14.169]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:14.169]                 open = "w")
[16:12:14.169]         }
[16:12:14.169]         else {
[16:12:14.169]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:14.169]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:14.169]         }
[16:12:14.169]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:14.169]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:14.169]             base::sink(type = "output", split = FALSE)
[16:12:14.169]             base::close(...future.stdout)
[16:12:14.169]         }, add = TRUE)
[16:12:14.169]     }
[16:12:14.169]     ...future.frame <- base::sys.nframe()
[16:12:14.169]     ...future.conditions <- base::list()
[16:12:14.169]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:14.169]     if (FALSE) {
[16:12:14.169]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:14.169]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:14.169]     }
[16:12:14.169]     ...future.result <- base::tryCatch({
[16:12:14.169]         base::withCallingHandlers({
[16:12:14.169]             ...future.value <- base::withVisible(base::local({
[16:12:14.169]                 ...future.makeSendCondition <- local({
[16:12:14.169]                   sendCondition <- NULL
[16:12:14.169]                   function(frame = 1L) {
[16:12:14.169]                     if (is.function(sendCondition)) 
[16:12:14.169]                       return(sendCondition)
[16:12:14.169]                     ns <- getNamespace("parallel")
[16:12:14.169]                     if (exists("sendData", mode = "function", 
[16:12:14.169]                       envir = ns)) {
[16:12:14.169]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:14.169]                         envir = ns)
[16:12:14.169]                       envir <- sys.frame(frame)
[16:12:14.169]                       master <- NULL
[16:12:14.169]                       while (!identical(envir, .GlobalEnv) && 
[16:12:14.169]                         !identical(envir, emptyenv())) {
[16:12:14.169]                         if (exists("master", mode = "list", envir = envir, 
[16:12:14.169]                           inherits = FALSE)) {
[16:12:14.169]                           master <- get("master", mode = "list", 
[16:12:14.169]                             envir = envir, inherits = FALSE)
[16:12:14.169]                           if (inherits(master, c("SOCKnode", 
[16:12:14.169]                             "SOCK0node"))) {
[16:12:14.169]                             sendCondition <<- function(cond) {
[16:12:14.169]                               data <- list(type = "VALUE", value = cond, 
[16:12:14.169]                                 success = TRUE)
[16:12:14.169]                               parallel_sendData(master, data)
[16:12:14.169]                             }
[16:12:14.169]                             return(sendCondition)
[16:12:14.169]                           }
[16:12:14.169]                         }
[16:12:14.169]                         frame <- frame + 1L
[16:12:14.169]                         envir <- sys.frame(frame)
[16:12:14.169]                       }
[16:12:14.169]                     }
[16:12:14.169]                     sendCondition <<- function(cond) NULL
[16:12:14.169]                   }
[16:12:14.169]                 })
[16:12:14.169]                 withCallingHandlers({
[16:12:14.169]                   {
[16:12:14.169]                     42
[16:12:14.169]                   }
[16:12:14.169]                 }, immediateCondition = function(cond) {
[16:12:14.169]                   sendCondition <- ...future.makeSendCondition()
[16:12:14.169]                   sendCondition(cond)
[16:12:14.169]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.169]                   {
[16:12:14.169]                     inherits <- base::inherits
[16:12:14.169]                     invokeRestart <- base::invokeRestart
[16:12:14.169]                     is.null <- base::is.null
[16:12:14.169]                     muffled <- FALSE
[16:12:14.169]                     if (inherits(cond, "message")) {
[16:12:14.169]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:14.169]                       if (muffled) 
[16:12:14.169]                         invokeRestart("muffleMessage")
[16:12:14.169]                     }
[16:12:14.169]                     else if (inherits(cond, "warning")) {
[16:12:14.169]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:14.169]                       if (muffled) 
[16:12:14.169]                         invokeRestart("muffleWarning")
[16:12:14.169]                     }
[16:12:14.169]                     else if (inherits(cond, "condition")) {
[16:12:14.169]                       if (!is.null(pattern)) {
[16:12:14.169]                         computeRestarts <- base::computeRestarts
[16:12:14.169]                         grepl <- base::grepl
[16:12:14.169]                         restarts <- computeRestarts(cond)
[16:12:14.169]                         for (restart in restarts) {
[16:12:14.169]                           name <- restart$name
[16:12:14.169]                           if (is.null(name)) 
[16:12:14.169]                             next
[16:12:14.169]                           if (!grepl(pattern, name)) 
[16:12:14.169]                             next
[16:12:14.169]                           invokeRestart(restart)
[16:12:14.169]                           muffled <- TRUE
[16:12:14.169]                           break
[16:12:14.169]                         }
[16:12:14.169]                       }
[16:12:14.169]                     }
[16:12:14.169]                     invisible(muffled)
[16:12:14.169]                   }
[16:12:14.169]                   muffleCondition(cond)
[16:12:14.169]                 })
[16:12:14.169]             }))
[16:12:14.169]             future::FutureResult(value = ...future.value$value, 
[16:12:14.169]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:14.169]                   ...future.rng), globalenv = if (FALSE) 
[16:12:14.169]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:14.169]                     ...future.globalenv.names))
[16:12:14.169]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:14.169]         }, condition = base::local({
[16:12:14.169]             c <- base::c
[16:12:14.169]             inherits <- base::inherits
[16:12:14.169]             invokeRestart <- base::invokeRestart
[16:12:14.169]             length <- base::length
[16:12:14.169]             list <- base::list
[16:12:14.169]             seq.int <- base::seq.int
[16:12:14.169]             signalCondition <- base::signalCondition
[16:12:14.169]             sys.calls <- base::sys.calls
[16:12:14.169]             `[[` <- base::`[[`
[16:12:14.169]             `+` <- base::`+`
[16:12:14.169]             `<<-` <- base::`<<-`
[16:12:14.169]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:14.169]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:14.169]                   3L)]
[16:12:14.169]             }
[16:12:14.169]             function(cond) {
[16:12:14.169]                 is_error <- inherits(cond, "error")
[16:12:14.169]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:14.169]                   NULL)
[16:12:14.169]                 if (is_error) {
[16:12:14.169]                   sessionInformation <- function() {
[16:12:14.169]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:14.169]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:14.169]                       search = base::search(), system = base::Sys.info())
[16:12:14.169]                   }
[16:12:14.169]                   ...future.conditions[[length(...future.conditions) + 
[16:12:14.169]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:14.169]                     cond$call), session = sessionInformation(), 
[16:12:14.169]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:14.169]                   signalCondition(cond)
[16:12:14.169]                 }
[16:12:14.169]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:14.169]                 "immediateCondition"))) {
[16:12:14.169]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:14.169]                   ...future.conditions[[length(...future.conditions) + 
[16:12:14.169]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:14.169]                   if (TRUE && !signal) {
[16:12:14.169]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.169]                     {
[16:12:14.169]                       inherits <- base::inherits
[16:12:14.169]                       invokeRestart <- base::invokeRestart
[16:12:14.169]                       is.null <- base::is.null
[16:12:14.169]                       muffled <- FALSE
[16:12:14.169]                       if (inherits(cond, "message")) {
[16:12:14.169]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:14.169]                         if (muffled) 
[16:12:14.169]                           invokeRestart("muffleMessage")
[16:12:14.169]                       }
[16:12:14.169]                       else if (inherits(cond, "warning")) {
[16:12:14.169]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:14.169]                         if (muffled) 
[16:12:14.169]                           invokeRestart("muffleWarning")
[16:12:14.169]                       }
[16:12:14.169]                       else if (inherits(cond, "condition")) {
[16:12:14.169]                         if (!is.null(pattern)) {
[16:12:14.169]                           computeRestarts <- base::computeRestarts
[16:12:14.169]                           grepl <- base::grepl
[16:12:14.169]                           restarts <- computeRestarts(cond)
[16:12:14.169]                           for (restart in restarts) {
[16:12:14.169]                             name <- restart$name
[16:12:14.169]                             if (is.null(name)) 
[16:12:14.169]                               next
[16:12:14.169]                             if (!grepl(pattern, name)) 
[16:12:14.169]                               next
[16:12:14.169]                             invokeRestart(restart)
[16:12:14.169]                             muffled <- TRUE
[16:12:14.169]                             break
[16:12:14.169]                           }
[16:12:14.169]                         }
[16:12:14.169]                       }
[16:12:14.169]                       invisible(muffled)
[16:12:14.169]                     }
[16:12:14.169]                     muffleCondition(cond, pattern = "^muffle")
[16:12:14.169]                   }
[16:12:14.169]                 }
[16:12:14.169]                 else {
[16:12:14.169]                   if (TRUE) {
[16:12:14.169]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:14.169]                     {
[16:12:14.169]                       inherits <- base::inherits
[16:12:14.169]                       invokeRestart <- base::invokeRestart
[16:12:14.169]                       is.null <- base::is.null
[16:12:14.169]                       muffled <- FALSE
[16:12:14.169]                       if (inherits(cond, "message")) {
[16:12:14.169]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:14.169]                         if (muffled) 
[16:12:14.169]                           invokeRestart("muffleMessage")
[16:12:14.169]                       }
[16:12:14.169]                       else if (inherits(cond, "warning")) {
[16:12:14.169]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:14.169]                         if (muffled) 
[16:12:14.169]                           invokeRestart("muffleWarning")
[16:12:14.169]                       }
[16:12:14.169]                       else if (inherits(cond, "condition")) {
[16:12:14.169]                         if (!is.null(pattern)) {
[16:12:14.169]                           computeRestarts <- base::computeRestarts
[16:12:14.169]                           grepl <- base::grepl
[16:12:14.169]                           restarts <- computeRestarts(cond)
[16:12:14.169]                           for (restart in restarts) {
[16:12:14.169]                             name <- restart$name
[16:12:14.169]                             if (is.null(name)) 
[16:12:14.169]                               next
[16:12:14.169]                             if (!grepl(pattern, name)) 
[16:12:14.169]                               next
[16:12:14.169]                             invokeRestart(restart)
[16:12:14.169]                             muffled <- TRUE
[16:12:14.169]                             break
[16:12:14.169]                           }
[16:12:14.169]                         }
[16:12:14.169]                       }
[16:12:14.169]                       invisible(muffled)
[16:12:14.169]                     }
[16:12:14.169]                     muffleCondition(cond, pattern = "^muffle")
[16:12:14.169]                   }
[16:12:14.169]                 }
[16:12:14.169]             }
[16:12:14.169]         }))
[16:12:14.169]     }, error = function(ex) {
[16:12:14.169]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:14.169]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:14.169]                 ...future.rng), started = ...future.startTime, 
[16:12:14.169]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:14.169]             version = "1.8"), class = "FutureResult")
[16:12:14.169]     }, finally = {
[16:12:14.169]         if (!identical(...future.workdir, getwd())) 
[16:12:14.169]             setwd(...future.workdir)
[16:12:14.169]         {
[16:12:14.169]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:14.169]                 ...future.oldOptions$nwarnings <- NULL
[16:12:14.169]             }
[16:12:14.169]             base::options(...future.oldOptions)
[16:12:14.169]             if (.Platform$OS.type == "windows") {
[16:12:14.169]                 old_names <- names(...future.oldEnvVars)
[16:12:14.169]                 envs <- base::Sys.getenv()
[16:12:14.169]                 names <- names(envs)
[16:12:14.169]                 common <- intersect(names, old_names)
[16:12:14.169]                 added <- setdiff(names, old_names)
[16:12:14.169]                 removed <- setdiff(old_names, names)
[16:12:14.169]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:14.169]                   envs[common]]
[16:12:14.169]                 NAMES <- toupper(changed)
[16:12:14.169]                 args <- list()
[16:12:14.169]                 for (kk in seq_along(NAMES)) {
[16:12:14.169]                   name <- changed[[kk]]
[16:12:14.169]                   NAME <- NAMES[[kk]]
[16:12:14.169]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.169]                     next
[16:12:14.169]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:14.169]                 }
[16:12:14.169]                 NAMES <- toupper(added)
[16:12:14.169]                 for (kk in seq_along(NAMES)) {
[16:12:14.169]                   name <- added[[kk]]
[16:12:14.169]                   NAME <- NAMES[[kk]]
[16:12:14.169]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.169]                     next
[16:12:14.169]                   args[[name]] <- ""
[16:12:14.169]                 }
[16:12:14.169]                 NAMES <- toupper(removed)
[16:12:14.169]                 for (kk in seq_along(NAMES)) {
[16:12:14.169]                   name <- removed[[kk]]
[16:12:14.169]                   NAME <- NAMES[[kk]]
[16:12:14.169]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:14.169]                     next
[16:12:14.169]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:14.169]                 }
[16:12:14.169]                 if (length(args) > 0) 
[16:12:14.169]                   base::do.call(base::Sys.setenv, args = args)
[16:12:14.169]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:14.169]             }
[16:12:14.169]             else {
[16:12:14.169]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:14.169]             }
[16:12:14.169]             {
[16:12:14.169]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:14.169]                   0L) {
[16:12:14.169]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:14.169]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:14.169]                   base::options(opts)
[16:12:14.169]                 }
[16:12:14.169]                 {
[16:12:14.169]                   {
[16:12:14.169]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:14.169]                     NULL
[16:12:14.169]                   }
[16:12:14.169]                   options(future.plan = NULL)
[16:12:14.169]                   if (is.na(NA_character_)) 
[16:12:14.169]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:14.169]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:14.169]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:14.169]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:14.169]                     envir = parent.frame()) 
[16:12:14.169]                   {
[16:12:14.169]                     if (is.function(workers)) 
[16:12:14.169]                       workers <- workers()
[16:12:14.169]                     workers <- structure(as.integer(workers), 
[16:12:14.169]                       class = class(workers))
[16:12:14.169]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:14.169]                       workers >= 1)
[16:12:14.169]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:14.169]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:14.169]                     }
[16:12:14.169]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:14.169]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:14.169]                       envir = envir)
[16:12:14.169]                     if (!future$lazy) 
[16:12:14.169]                       future <- run(future)
[16:12:14.169]                     invisible(future)
[16:12:14.169]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:14.169]                 }
[16:12:14.169]             }
[16:12:14.169]         }
[16:12:14.169]     })
[16:12:14.169]     if (TRUE) {
[16:12:14.169]         base::sink(type = "output", split = FALSE)
[16:12:14.169]         if (TRUE) {
[16:12:14.169]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:14.169]         }
[16:12:14.169]         else {
[16:12:14.169]             ...future.result["stdout"] <- base::list(NULL)
[16:12:14.169]         }
[16:12:14.169]         base::close(...future.stdout)
[16:12:14.169]         ...future.stdout <- NULL
[16:12:14.169]     }
[16:12:14.169]     ...future.result$conditions <- ...future.conditions
[16:12:14.169]     ...future.result$finished <- base::Sys.time()
[16:12:14.169]     ...future.result
[16:12:14.169] }
[16:12:14.172] MultisessionFuture started
[16:12:14.172] - Launch lazy future ... done
[16:12:14.172] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 625f5348-e536-9493-92c2-4606c4d16e2a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:14.183] result() for ClusterFuture ...
[16:12:14.183] receiveMessageFromWorker() for ClusterFuture ...
[16:12:14.183] - Validating connection of MultisessionFuture
[16:12:14.220] - received message: FutureResult
[16:12:14.221] - Received FutureResult
[16:12:14.221] - Erased future from FutureRegistry
[16:12:14.221] result() for ClusterFuture ...
[16:12:14.221] - result already collected: FutureResult
[16:12:14.221] result() for ClusterFuture ... done
[16:12:14.221] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:14.221] result() for ClusterFuture ... done
[16:12:14.222] result() for ClusterFuture ...
[16:12:14.222] - result already collected: FutureResult
[16:12:14.222] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[16:12:14.223] plan(): Setting new future strategy stack:
[16:12:14.223] List of future strategies:
[16:12:14.223] 1. FutureStrategy:
[16:12:14.223]    - args: function (..., envir = parent.frame())
[16:12:14.223]    - tweaked: FALSE
[16:12:14.223]    - call: future::plan(oplan)
[16:12:14.224] plan(): nbrOfWorkers() = 1
> 
