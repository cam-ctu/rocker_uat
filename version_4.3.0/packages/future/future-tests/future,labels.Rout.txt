
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:05.339] plan(): Setting new future strategy stack:
[17:42:05.340] List of future strategies:
[17:42:05.340] 1. sequential:
[17:42:05.340]    - args: function (..., envir = parent.frame())
[17:42:05.340]    - tweaked: FALSE
[17:42:05.340]    - call: future::plan("sequential")
[17:42:05.354] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[17:42:05.377] plan(): Setting new future strategy stack:
[17:42:05.378] List of future strategies:
[17:42:05.378] 1. sequential:
[17:42:05.378]    - args: function (..., envir = parent.frame())
[17:42:05.378]    - tweaked: FALSE
[17:42:05.378]    - call: plan(strategy)
[17:42:05.392] plan(): nbrOfWorkers() = 1
[17:42:05.393] getGlobalsAndPackages() ...
[17:42:05.393] Searching for globals...
[17:42:05.395] 
[17:42:05.395] Searching for globals ... DONE
[17:42:05.396] - globals: [0] <none>
[17:42:05.396] getGlobalsAndPackages() ... DONE
[17:42:05.397] Packages needed by the future expression (n = 0): <none>
[17:42:05.397] Packages needed by future strategies (n = 0): <none>
[17:42:05.398] {
[17:42:05.398]     {
[17:42:05.398]         {
[17:42:05.398]             ...future.startTime <- base::Sys.time()
[17:42:05.398]             {
[17:42:05.398]                 {
[17:42:05.398]                   {
[17:42:05.398]                     base::local({
[17:42:05.398]                       has_future <- base::requireNamespace("future", 
[17:42:05.398]                         quietly = TRUE)
[17:42:05.398]                       if (has_future) {
[17:42:05.398]                         ns <- base::getNamespace("future")
[17:42:05.398]                         version <- ns[[".package"]][["version"]]
[17:42:05.398]                         if (is.null(version)) 
[17:42:05.398]                           version <- utils::packageVersion("future")
[17:42:05.398]                       }
[17:42:05.398]                       else {
[17:42:05.398]                         version <- NULL
[17:42:05.398]                       }
[17:42:05.398]                       if (!has_future || version < "1.8.0") {
[17:42:05.398]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.398]                           "", base::R.version$version.string), 
[17:42:05.398]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.398]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.398]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.398]                             "release", "version")], collapse = " "), 
[17:42:05.398]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.398]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.398]                           info)
[17:42:05.398]                         info <- base::paste(info, collapse = "; ")
[17:42:05.398]                         if (!has_future) {
[17:42:05.398]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.398]                             info)
[17:42:05.398]                         }
[17:42:05.398]                         else {
[17:42:05.398]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.398]                             info, version)
[17:42:05.398]                         }
[17:42:05.398]                         base::stop(msg)
[17:42:05.398]                       }
[17:42:05.398]                     })
[17:42:05.398]                   }
[17:42:05.398]                   options(future.plan = NULL)
[17:42:05.398]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.398]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.398]                 }
[17:42:05.398]                 ...future.workdir <- getwd()
[17:42:05.398]             }
[17:42:05.398]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.398]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.398]         }
[17:42:05.398]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.398]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.398]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.398]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.398]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.398]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.398]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.398]             base::names(...future.oldOptions))
[17:42:05.398]     }
[17:42:05.398]     if (FALSE) {
[17:42:05.398]     }
[17:42:05.398]     else {
[17:42:05.398]         if (TRUE) {
[17:42:05.398]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.398]                 open = "w")
[17:42:05.398]         }
[17:42:05.398]         else {
[17:42:05.398]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.398]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.398]         }
[17:42:05.398]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.398]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.398]             base::sink(type = "output", split = FALSE)
[17:42:05.398]             base::close(...future.stdout)
[17:42:05.398]         }, add = TRUE)
[17:42:05.398]     }
[17:42:05.398]     ...future.frame <- base::sys.nframe()
[17:42:05.398]     ...future.conditions <- base::list()
[17:42:05.398]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.398]     if (FALSE) {
[17:42:05.398]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.398]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.398]     }
[17:42:05.398]     ...future.result <- base::tryCatch({
[17:42:05.398]         base::withCallingHandlers({
[17:42:05.398]             ...future.value <- base::withVisible(base::local(42))
[17:42:05.398]             future::FutureResult(value = ...future.value$value, 
[17:42:05.398]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.398]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.398]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.398]                     ...future.globalenv.names))
[17:42:05.398]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.398]         }, condition = base::local({
[17:42:05.398]             c <- base::c
[17:42:05.398]             inherits <- base::inherits
[17:42:05.398]             invokeRestart <- base::invokeRestart
[17:42:05.398]             length <- base::length
[17:42:05.398]             list <- base::list
[17:42:05.398]             seq.int <- base::seq.int
[17:42:05.398]             signalCondition <- base::signalCondition
[17:42:05.398]             sys.calls <- base::sys.calls
[17:42:05.398]             `[[` <- base::`[[`
[17:42:05.398]             `+` <- base::`+`
[17:42:05.398]             `<<-` <- base::`<<-`
[17:42:05.398]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.398]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.398]                   3L)]
[17:42:05.398]             }
[17:42:05.398]             function(cond) {
[17:42:05.398]                 is_error <- inherits(cond, "error")
[17:42:05.398]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.398]                   NULL)
[17:42:05.398]                 if (is_error) {
[17:42:05.398]                   sessionInformation <- function() {
[17:42:05.398]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.398]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.398]                       search = base::search(), system = base::Sys.info())
[17:42:05.398]                   }
[17:42:05.398]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.398]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.398]                     cond$call), session = sessionInformation(), 
[17:42:05.398]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.398]                   signalCondition(cond)
[17:42:05.398]                 }
[17:42:05.398]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.398]                 "immediateCondition"))) {
[17:42:05.398]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.398]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.398]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.398]                   if (TRUE && !signal) {
[17:42:05.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.398]                     {
[17:42:05.398]                       inherits <- base::inherits
[17:42:05.398]                       invokeRestart <- base::invokeRestart
[17:42:05.398]                       is.null <- base::is.null
[17:42:05.398]                       muffled <- FALSE
[17:42:05.398]                       if (inherits(cond, "message")) {
[17:42:05.398]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.398]                         if (muffled) 
[17:42:05.398]                           invokeRestart("muffleMessage")
[17:42:05.398]                       }
[17:42:05.398]                       else if (inherits(cond, "warning")) {
[17:42:05.398]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.398]                         if (muffled) 
[17:42:05.398]                           invokeRestart("muffleWarning")
[17:42:05.398]                       }
[17:42:05.398]                       else if (inherits(cond, "condition")) {
[17:42:05.398]                         if (!is.null(pattern)) {
[17:42:05.398]                           computeRestarts <- base::computeRestarts
[17:42:05.398]                           grepl <- base::grepl
[17:42:05.398]                           restarts <- computeRestarts(cond)
[17:42:05.398]                           for (restart in restarts) {
[17:42:05.398]                             name <- restart$name
[17:42:05.398]                             if (is.null(name)) 
[17:42:05.398]                               next
[17:42:05.398]                             if (!grepl(pattern, name)) 
[17:42:05.398]                               next
[17:42:05.398]                             invokeRestart(restart)
[17:42:05.398]                             muffled <- TRUE
[17:42:05.398]                             break
[17:42:05.398]                           }
[17:42:05.398]                         }
[17:42:05.398]                       }
[17:42:05.398]                       invisible(muffled)
[17:42:05.398]                     }
[17:42:05.398]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.398]                   }
[17:42:05.398]                 }
[17:42:05.398]                 else {
[17:42:05.398]                   if (TRUE) {
[17:42:05.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.398]                     {
[17:42:05.398]                       inherits <- base::inherits
[17:42:05.398]                       invokeRestart <- base::invokeRestart
[17:42:05.398]                       is.null <- base::is.null
[17:42:05.398]                       muffled <- FALSE
[17:42:05.398]                       if (inherits(cond, "message")) {
[17:42:05.398]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.398]                         if (muffled) 
[17:42:05.398]                           invokeRestart("muffleMessage")
[17:42:05.398]                       }
[17:42:05.398]                       else if (inherits(cond, "warning")) {
[17:42:05.398]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.398]                         if (muffled) 
[17:42:05.398]                           invokeRestart("muffleWarning")
[17:42:05.398]                       }
[17:42:05.398]                       else if (inherits(cond, "condition")) {
[17:42:05.398]                         if (!is.null(pattern)) {
[17:42:05.398]                           computeRestarts <- base::computeRestarts
[17:42:05.398]                           grepl <- base::grepl
[17:42:05.398]                           restarts <- computeRestarts(cond)
[17:42:05.398]                           for (restart in restarts) {
[17:42:05.398]                             name <- restart$name
[17:42:05.398]                             if (is.null(name)) 
[17:42:05.398]                               next
[17:42:05.398]                             if (!grepl(pattern, name)) 
[17:42:05.398]                               next
[17:42:05.398]                             invokeRestart(restart)
[17:42:05.398]                             muffled <- TRUE
[17:42:05.398]                             break
[17:42:05.398]                           }
[17:42:05.398]                         }
[17:42:05.398]                       }
[17:42:05.398]                       invisible(muffled)
[17:42:05.398]                     }
[17:42:05.398]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.398]                   }
[17:42:05.398]                 }
[17:42:05.398]             }
[17:42:05.398]         }))
[17:42:05.398]     }, error = function(ex) {
[17:42:05.398]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.398]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.398]                 ...future.rng), started = ...future.startTime, 
[17:42:05.398]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.398]             version = "1.8"), class = "FutureResult")
[17:42:05.398]     }, finally = {
[17:42:05.398]         if (!identical(...future.workdir, getwd())) 
[17:42:05.398]             setwd(...future.workdir)
[17:42:05.398]         {
[17:42:05.398]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.398]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.398]             }
[17:42:05.398]             base::options(...future.oldOptions)
[17:42:05.398]             if (.Platform$OS.type == "windows") {
[17:42:05.398]                 old_names <- names(...future.oldEnvVars)
[17:42:05.398]                 envs <- base::Sys.getenv()
[17:42:05.398]                 names <- names(envs)
[17:42:05.398]                 common <- intersect(names, old_names)
[17:42:05.398]                 added <- setdiff(names, old_names)
[17:42:05.398]                 removed <- setdiff(old_names, names)
[17:42:05.398]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.398]                   envs[common]]
[17:42:05.398]                 NAMES <- toupper(changed)
[17:42:05.398]                 args <- list()
[17:42:05.398]                 for (kk in seq_along(NAMES)) {
[17:42:05.398]                   name <- changed[[kk]]
[17:42:05.398]                   NAME <- NAMES[[kk]]
[17:42:05.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.398]                     next
[17:42:05.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.398]                 }
[17:42:05.398]                 NAMES <- toupper(added)
[17:42:05.398]                 for (kk in seq_along(NAMES)) {
[17:42:05.398]                   name <- added[[kk]]
[17:42:05.398]                   NAME <- NAMES[[kk]]
[17:42:05.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.398]                     next
[17:42:05.398]                   args[[name]] <- ""
[17:42:05.398]                 }
[17:42:05.398]                 NAMES <- toupper(removed)
[17:42:05.398]                 for (kk in seq_along(NAMES)) {
[17:42:05.398]                   name <- removed[[kk]]
[17:42:05.398]                   NAME <- NAMES[[kk]]
[17:42:05.398]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.398]                     next
[17:42:05.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.398]                 }
[17:42:05.398]                 if (length(args) > 0) 
[17:42:05.398]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.398]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.398]             }
[17:42:05.398]             else {
[17:42:05.398]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.398]             }
[17:42:05.398]             {
[17:42:05.398]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.398]                   0L) {
[17:42:05.398]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.398]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.398]                   base::options(opts)
[17:42:05.398]                 }
[17:42:05.398]                 {
[17:42:05.398]                   {
[17:42:05.398]                     NULL
[17:42:05.398]                     RNGkind("Mersenne-Twister")
[17:42:05.398]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.398]                       inherits = FALSE)
[17:42:05.398]                   }
[17:42:05.398]                   options(future.plan = NULL)
[17:42:05.398]                   if (is.na(NA_character_)) 
[17:42:05.398]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.398]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.398]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:05.398]                   {
[17:42:05.398]                     future <- SequentialFuture(..., envir = envir)
[17:42:05.398]                     if (!future$lazy) 
[17:42:05.398]                       future <- run(future)
[17:42:05.398]                     invisible(future)
[17:42:05.398]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.398]                 }
[17:42:05.398]             }
[17:42:05.398]         }
[17:42:05.398]     })
[17:42:05.398]     if (TRUE) {
[17:42:05.398]         base::sink(type = "output", split = FALSE)
[17:42:05.398]         if (TRUE) {
[17:42:05.398]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.398]         }
[17:42:05.398]         else {
[17:42:05.398]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.398]         }
[17:42:05.398]         base::close(...future.stdout)
[17:42:05.398]         ...future.stdout <- NULL
[17:42:05.398]     }
[17:42:05.398]     ...future.result$conditions <- ...future.conditions
[17:42:05.398]     ...future.result$finished <- base::Sys.time()
[17:42:05.398]     ...future.result
[17:42:05.398] }
[17:42:05.400] plan(): Setting new future strategy stack:
[17:42:05.400] List of future strategies:
[17:42:05.400] 1. sequential:
[17:42:05.400]    - args: function (..., envir = parent.frame())
[17:42:05.400]    - tweaked: FALSE
[17:42:05.400]    - call: NULL
[17:42:05.400] plan(): nbrOfWorkers() = 1
[17:42:05.402] plan(): Setting new future strategy stack:
[17:42:05.402] List of future strategies:
[17:42:05.402] 1. sequential:
[17:42:05.402]    - args: function (..., envir = parent.frame())
[17:42:05.402]    - tweaked: FALSE
[17:42:05.402]    - call: plan(strategy)
[17:42:05.402] plan(): nbrOfWorkers() = 1
[17:42:05.402] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.404] getGlobalsAndPackages() ...
[17:42:05.405] Searching for globals...
[17:42:05.405] 
[17:42:05.405] Searching for globals ... DONE
[17:42:05.405] - globals: [0] <none>
[17:42:05.405] getGlobalsAndPackages() ... DONE
[17:42:05.406] run() for ‘Future’ ...
[17:42:05.406] - state: ‘created’
[17:42:05.406] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:05.406] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.406] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:05.406]   - Field: ‘label’
[17:42:05.406]   - Field: ‘local’
[17:42:05.407]   - Field: ‘owner’
[17:42:05.407]   - Field: ‘envir’
[17:42:05.407]   - Field: ‘packages’
[17:42:05.407]   - Field: ‘gc’
[17:42:05.407]   - Field: ‘conditions’
[17:42:05.407]   - Field: ‘expr’
[17:42:05.407]   - Field: ‘uuid’
[17:42:05.407]   - Field: ‘seed’
[17:42:05.407]   - Field: ‘version’
[17:42:05.407]   - Field: ‘result’
[17:42:05.407]   - Field: ‘asynchronous’
[17:42:05.408]   - Field: ‘calls’
[17:42:05.408]   - Field: ‘globals’
[17:42:05.408]   - Field: ‘stdout’
[17:42:05.408]   - Field: ‘earlySignal’
[17:42:05.408]   - Field: ‘lazy’
[17:42:05.408]   - Field: ‘state’
[17:42:05.408] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:05.408] - Launch lazy future ...
[17:42:05.408] Packages needed by the future expression (n = 0): <none>
[17:42:05.409] Packages needed by future strategies (n = 0): <none>
[17:42:05.409] {
[17:42:05.409]     {
[17:42:05.409]         {
[17:42:05.409]             ...future.startTime <- base::Sys.time()
[17:42:05.409]             {
[17:42:05.409]                 {
[17:42:05.409]                   {
[17:42:05.409]                     base::local({
[17:42:05.409]                       has_future <- base::requireNamespace("future", 
[17:42:05.409]                         quietly = TRUE)
[17:42:05.409]                       if (has_future) {
[17:42:05.409]                         ns <- base::getNamespace("future")
[17:42:05.409]                         version <- ns[[".package"]][["version"]]
[17:42:05.409]                         if (is.null(version)) 
[17:42:05.409]                           version <- utils::packageVersion("future")
[17:42:05.409]                       }
[17:42:05.409]                       else {
[17:42:05.409]                         version <- NULL
[17:42:05.409]                       }
[17:42:05.409]                       if (!has_future || version < "1.8.0") {
[17:42:05.409]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.409]                           "", base::R.version$version.string), 
[17:42:05.409]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.409]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.409]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.409]                             "release", "version")], collapse = " "), 
[17:42:05.409]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.409]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.409]                           info)
[17:42:05.409]                         info <- base::paste(info, collapse = "; ")
[17:42:05.409]                         if (!has_future) {
[17:42:05.409]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.409]                             info)
[17:42:05.409]                         }
[17:42:05.409]                         else {
[17:42:05.409]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.409]                             info, version)
[17:42:05.409]                         }
[17:42:05.409]                         base::stop(msg)
[17:42:05.409]                       }
[17:42:05.409]                     })
[17:42:05.409]                   }
[17:42:05.409]                   options(future.plan = NULL)
[17:42:05.409]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.409]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.409]                 }
[17:42:05.409]                 ...future.workdir <- getwd()
[17:42:05.409]             }
[17:42:05.409]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.409]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.409]         }
[17:42:05.409]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.409]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.409]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.409]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.409]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.409]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.409]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.409]             base::names(...future.oldOptions))
[17:42:05.409]     }
[17:42:05.409]     if (FALSE) {
[17:42:05.409]     }
[17:42:05.409]     else {
[17:42:05.409]         if (TRUE) {
[17:42:05.409]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.409]                 open = "w")
[17:42:05.409]         }
[17:42:05.409]         else {
[17:42:05.409]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.409]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.409]         }
[17:42:05.409]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.409]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.409]             base::sink(type = "output", split = FALSE)
[17:42:05.409]             base::close(...future.stdout)
[17:42:05.409]         }, add = TRUE)
[17:42:05.409]     }
[17:42:05.409]     ...future.frame <- base::sys.nframe()
[17:42:05.409]     ...future.conditions <- base::list()
[17:42:05.409]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.409]     if (FALSE) {
[17:42:05.409]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.409]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.409]     }
[17:42:05.409]     ...future.result <- base::tryCatch({
[17:42:05.409]         base::withCallingHandlers({
[17:42:05.409]             ...future.value <- base::withVisible(base::local(42))
[17:42:05.409]             future::FutureResult(value = ...future.value$value, 
[17:42:05.409]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.409]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.409]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.409]                     ...future.globalenv.names))
[17:42:05.409]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.409]         }, condition = base::local({
[17:42:05.409]             c <- base::c
[17:42:05.409]             inherits <- base::inherits
[17:42:05.409]             invokeRestart <- base::invokeRestart
[17:42:05.409]             length <- base::length
[17:42:05.409]             list <- base::list
[17:42:05.409]             seq.int <- base::seq.int
[17:42:05.409]             signalCondition <- base::signalCondition
[17:42:05.409]             sys.calls <- base::sys.calls
[17:42:05.409]             `[[` <- base::`[[`
[17:42:05.409]             `+` <- base::`+`
[17:42:05.409]             `<<-` <- base::`<<-`
[17:42:05.409]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.409]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.409]                   3L)]
[17:42:05.409]             }
[17:42:05.409]             function(cond) {
[17:42:05.409]                 is_error <- inherits(cond, "error")
[17:42:05.409]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.409]                   NULL)
[17:42:05.409]                 if (is_error) {
[17:42:05.409]                   sessionInformation <- function() {
[17:42:05.409]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.409]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.409]                       search = base::search(), system = base::Sys.info())
[17:42:05.409]                   }
[17:42:05.409]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.409]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.409]                     cond$call), session = sessionInformation(), 
[17:42:05.409]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.409]                   signalCondition(cond)
[17:42:05.409]                 }
[17:42:05.409]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.409]                 "immediateCondition"))) {
[17:42:05.409]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.409]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.409]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.409]                   if (TRUE && !signal) {
[17:42:05.409]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.409]                     {
[17:42:05.409]                       inherits <- base::inherits
[17:42:05.409]                       invokeRestart <- base::invokeRestart
[17:42:05.409]                       is.null <- base::is.null
[17:42:05.409]                       muffled <- FALSE
[17:42:05.409]                       if (inherits(cond, "message")) {
[17:42:05.409]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.409]                         if (muffled) 
[17:42:05.409]                           invokeRestart("muffleMessage")
[17:42:05.409]                       }
[17:42:05.409]                       else if (inherits(cond, "warning")) {
[17:42:05.409]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.409]                         if (muffled) 
[17:42:05.409]                           invokeRestart("muffleWarning")
[17:42:05.409]                       }
[17:42:05.409]                       else if (inherits(cond, "condition")) {
[17:42:05.409]                         if (!is.null(pattern)) {
[17:42:05.409]                           computeRestarts <- base::computeRestarts
[17:42:05.409]                           grepl <- base::grepl
[17:42:05.409]                           restarts <- computeRestarts(cond)
[17:42:05.409]                           for (restart in restarts) {
[17:42:05.409]                             name <- restart$name
[17:42:05.409]                             if (is.null(name)) 
[17:42:05.409]                               next
[17:42:05.409]                             if (!grepl(pattern, name)) 
[17:42:05.409]                               next
[17:42:05.409]                             invokeRestart(restart)
[17:42:05.409]                             muffled <- TRUE
[17:42:05.409]                             break
[17:42:05.409]                           }
[17:42:05.409]                         }
[17:42:05.409]                       }
[17:42:05.409]                       invisible(muffled)
[17:42:05.409]                     }
[17:42:05.409]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.409]                   }
[17:42:05.409]                 }
[17:42:05.409]                 else {
[17:42:05.409]                   if (TRUE) {
[17:42:05.409]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.409]                     {
[17:42:05.409]                       inherits <- base::inherits
[17:42:05.409]                       invokeRestart <- base::invokeRestart
[17:42:05.409]                       is.null <- base::is.null
[17:42:05.409]                       muffled <- FALSE
[17:42:05.409]                       if (inherits(cond, "message")) {
[17:42:05.409]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.409]                         if (muffled) 
[17:42:05.409]                           invokeRestart("muffleMessage")
[17:42:05.409]                       }
[17:42:05.409]                       else if (inherits(cond, "warning")) {
[17:42:05.409]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.409]                         if (muffled) 
[17:42:05.409]                           invokeRestart("muffleWarning")
[17:42:05.409]                       }
[17:42:05.409]                       else if (inherits(cond, "condition")) {
[17:42:05.409]                         if (!is.null(pattern)) {
[17:42:05.409]                           computeRestarts <- base::computeRestarts
[17:42:05.409]                           grepl <- base::grepl
[17:42:05.409]                           restarts <- computeRestarts(cond)
[17:42:05.409]                           for (restart in restarts) {
[17:42:05.409]                             name <- restart$name
[17:42:05.409]                             if (is.null(name)) 
[17:42:05.409]                               next
[17:42:05.409]                             if (!grepl(pattern, name)) 
[17:42:05.409]                               next
[17:42:05.409]                             invokeRestart(restart)
[17:42:05.409]                             muffled <- TRUE
[17:42:05.409]                             break
[17:42:05.409]                           }
[17:42:05.409]                         }
[17:42:05.409]                       }
[17:42:05.409]                       invisible(muffled)
[17:42:05.409]                     }
[17:42:05.409]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.409]                   }
[17:42:05.409]                 }
[17:42:05.409]             }
[17:42:05.409]         }))
[17:42:05.409]     }, error = function(ex) {
[17:42:05.409]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.409]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.409]                 ...future.rng), started = ...future.startTime, 
[17:42:05.409]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.409]             version = "1.8"), class = "FutureResult")
[17:42:05.409]     }, finally = {
[17:42:05.409]         if (!identical(...future.workdir, getwd())) 
[17:42:05.409]             setwd(...future.workdir)
[17:42:05.409]         {
[17:42:05.409]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.409]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.409]             }
[17:42:05.409]             base::options(...future.oldOptions)
[17:42:05.409]             if (.Platform$OS.type == "windows") {
[17:42:05.409]                 old_names <- names(...future.oldEnvVars)
[17:42:05.409]                 envs <- base::Sys.getenv()
[17:42:05.409]                 names <- names(envs)
[17:42:05.409]                 common <- intersect(names, old_names)
[17:42:05.409]                 added <- setdiff(names, old_names)
[17:42:05.409]                 removed <- setdiff(old_names, names)
[17:42:05.409]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.409]                   envs[common]]
[17:42:05.409]                 NAMES <- toupper(changed)
[17:42:05.409]                 args <- list()
[17:42:05.409]                 for (kk in seq_along(NAMES)) {
[17:42:05.409]                   name <- changed[[kk]]
[17:42:05.409]                   NAME <- NAMES[[kk]]
[17:42:05.409]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.409]                     next
[17:42:05.409]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.409]                 }
[17:42:05.409]                 NAMES <- toupper(added)
[17:42:05.409]                 for (kk in seq_along(NAMES)) {
[17:42:05.409]                   name <- added[[kk]]
[17:42:05.409]                   NAME <- NAMES[[kk]]
[17:42:05.409]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.409]                     next
[17:42:05.409]                   args[[name]] <- ""
[17:42:05.409]                 }
[17:42:05.409]                 NAMES <- toupper(removed)
[17:42:05.409]                 for (kk in seq_along(NAMES)) {
[17:42:05.409]                   name <- removed[[kk]]
[17:42:05.409]                   NAME <- NAMES[[kk]]
[17:42:05.409]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.409]                     next
[17:42:05.409]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.409]                 }
[17:42:05.409]                 if (length(args) > 0) 
[17:42:05.409]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.409]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.409]             }
[17:42:05.409]             else {
[17:42:05.409]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.409]             }
[17:42:05.409]             {
[17:42:05.409]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.409]                   0L) {
[17:42:05.409]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.409]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.409]                   base::options(opts)
[17:42:05.409]                 }
[17:42:05.409]                 {
[17:42:05.409]                   {
[17:42:05.409]                     NULL
[17:42:05.409]                     RNGkind("Mersenne-Twister")
[17:42:05.409]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.409]                       inherits = FALSE)
[17:42:05.409]                   }
[17:42:05.409]                   options(future.plan = NULL)
[17:42:05.409]                   if (is.na(NA_character_)) 
[17:42:05.409]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.409]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.409]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:05.409]                   {
[17:42:05.409]                     future <- SequentialFuture(..., envir = envir)
[17:42:05.409]                     if (!future$lazy) 
[17:42:05.409]                       future <- run(future)
[17:42:05.409]                     invisible(future)
[17:42:05.409]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.409]                 }
[17:42:05.409]             }
[17:42:05.409]         }
[17:42:05.409]     })
[17:42:05.409]     if (TRUE) {
[17:42:05.409]         base::sink(type = "output", split = FALSE)
[17:42:05.409]         if (TRUE) {
[17:42:05.409]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.409]         }
[17:42:05.409]         else {
[17:42:05.409]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.409]         }
[17:42:05.409]         base::close(...future.stdout)
[17:42:05.409]         ...future.stdout <- NULL
[17:42:05.409]     }
[17:42:05.409]     ...future.result$conditions <- ...future.conditions
[17:42:05.409]     ...future.result$finished <- base::Sys.time()
[17:42:05.409]     ...future.result
[17:42:05.409] }
[17:42:05.411] plan(): Setting new future strategy stack:
[17:42:05.411] List of future strategies:
[17:42:05.411] 1. sequential:
[17:42:05.411]    - args: function (..., envir = parent.frame())
[17:42:05.411]    - tweaked: FALSE
[17:42:05.411]    - call: NULL
[17:42:05.411] plan(): nbrOfWorkers() = 1
[17:42:05.412] plan(): Setting new future strategy stack:
[17:42:05.412] List of future strategies:
[17:42:05.412] 1. sequential:
[17:42:05.412]    - args: function (..., envir = parent.frame())
[17:42:05.412]    - tweaked: FALSE
[17:42:05.412]    - call: plan(strategy)
[17:42:05.413] plan(): nbrOfWorkers() = 1
[17:42:05.413] SequentialFuture started (and completed)
[17:42:05.413] - Launch lazy future ... done
[17:42:05.413] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.414] getGlobalsAndPackages() ...
[17:42:05.415] Searching for globals...
[17:42:05.416] - globals found: [1] ‘{’
[17:42:05.416] Searching for globals ... DONE
[17:42:05.416] Resolving globals: FALSE
[17:42:05.417] 
[17:42:05.417] 
[17:42:05.417] getGlobalsAndPackages() ... DONE
[17:42:05.417] run() for ‘Future’ ...
[17:42:05.417] - state: ‘created’
[17:42:05.417] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:05.418] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.418] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:05.418]   - Field: ‘label’
[17:42:05.418]   - Field: ‘local’
[17:42:05.418]   - Field: ‘owner’
[17:42:05.418]   - Field: ‘envir’
[17:42:05.418]   - Field: ‘packages’
[17:42:05.418]   - Field: ‘gc’
[17:42:05.418]   - Field: ‘conditions’
[17:42:05.418]   - Field: ‘expr’
[17:42:05.419]   - Field: ‘uuid’
[17:42:05.419]   - Field: ‘seed’
[17:42:05.419]   - Field: ‘version’
[17:42:05.419]   - Field: ‘result’
[17:42:05.419]   - Field: ‘asynchronous’
[17:42:05.419]   - Field: ‘calls’
[17:42:05.419]   - Field: ‘globals’
[17:42:05.419]   - Field: ‘stdout’
[17:42:05.419]   - Field: ‘earlySignal’
[17:42:05.419]   - Field: ‘lazy’
[17:42:05.419]   - Field: ‘state’
[17:42:05.420] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:05.420] - Launch lazy future ...
[17:42:05.422] Packages needed by the future expression (n = 0): <none>
[17:42:05.422] Packages needed by future strategies (n = 0): <none>
[17:42:05.423] {
[17:42:05.423]     {
[17:42:05.423]         {
[17:42:05.423]             ...future.startTime <- base::Sys.time()
[17:42:05.423]             {
[17:42:05.423]                 {
[17:42:05.423]                   {
[17:42:05.423]                     base::local({
[17:42:05.423]                       has_future <- base::requireNamespace("future", 
[17:42:05.423]                         quietly = TRUE)
[17:42:05.423]                       if (has_future) {
[17:42:05.423]                         ns <- base::getNamespace("future")
[17:42:05.423]                         version <- ns[[".package"]][["version"]]
[17:42:05.423]                         if (is.null(version)) 
[17:42:05.423]                           version <- utils::packageVersion("future")
[17:42:05.423]                       }
[17:42:05.423]                       else {
[17:42:05.423]                         version <- NULL
[17:42:05.423]                       }
[17:42:05.423]                       if (!has_future || version < "1.8.0") {
[17:42:05.423]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.423]                           "", base::R.version$version.string), 
[17:42:05.423]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.423]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.423]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.423]                             "release", "version")], collapse = " "), 
[17:42:05.423]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.423]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.423]                           info)
[17:42:05.423]                         info <- base::paste(info, collapse = "; ")
[17:42:05.423]                         if (!has_future) {
[17:42:05.423]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.423]                             info)
[17:42:05.423]                         }
[17:42:05.423]                         else {
[17:42:05.423]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.423]                             info, version)
[17:42:05.423]                         }
[17:42:05.423]                         base::stop(msg)
[17:42:05.423]                       }
[17:42:05.423]                     })
[17:42:05.423]                   }
[17:42:05.423]                   options(future.plan = NULL)
[17:42:05.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.423]                 }
[17:42:05.423]                 ...future.workdir <- getwd()
[17:42:05.423]             }
[17:42:05.423]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.423]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.423]         }
[17:42:05.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.423]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.423]             base::names(...future.oldOptions))
[17:42:05.423]     }
[17:42:05.423]     if (FALSE) {
[17:42:05.423]     }
[17:42:05.423]     else {
[17:42:05.423]         if (TRUE) {
[17:42:05.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.423]                 open = "w")
[17:42:05.423]         }
[17:42:05.423]         else {
[17:42:05.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.423]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.423]         }
[17:42:05.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.423]             base::sink(type = "output", split = FALSE)
[17:42:05.423]             base::close(...future.stdout)
[17:42:05.423]         }, add = TRUE)
[17:42:05.423]     }
[17:42:05.423]     ...future.frame <- base::sys.nframe()
[17:42:05.423]     ...future.conditions <- base::list()
[17:42:05.423]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.423]     if (FALSE) {
[17:42:05.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.423]     }
[17:42:05.423]     ...future.result <- base::tryCatch({
[17:42:05.423]         base::withCallingHandlers({
[17:42:05.423]             ...future.value <- base::withVisible(base::local({
[17:42:05.423]                 42
[17:42:05.423]             }))
[17:42:05.423]             future::FutureResult(value = ...future.value$value, 
[17:42:05.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.423]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.423]                     ...future.globalenv.names))
[17:42:05.423]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.423]         }, condition = base::local({
[17:42:05.423]             c <- base::c
[17:42:05.423]             inherits <- base::inherits
[17:42:05.423]             invokeRestart <- base::invokeRestart
[17:42:05.423]             length <- base::length
[17:42:05.423]             list <- base::list
[17:42:05.423]             seq.int <- base::seq.int
[17:42:05.423]             signalCondition <- base::signalCondition
[17:42:05.423]             sys.calls <- base::sys.calls
[17:42:05.423]             `[[` <- base::`[[`
[17:42:05.423]             `+` <- base::`+`
[17:42:05.423]             `<<-` <- base::`<<-`
[17:42:05.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.423]                   3L)]
[17:42:05.423]             }
[17:42:05.423]             function(cond) {
[17:42:05.423]                 is_error <- inherits(cond, "error")
[17:42:05.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.423]                   NULL)
[17:42:05.423]                 if (is_error) {
[17:42:05.423]                   sessionInformation <- function() {
[17:42:05.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.423]                       search = base::search(), system = base::Sys.info())
[17:42:05.423]                   }
[17:42:05.423]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.423]                     cond$call), session = sessionInformation(), 
[17:42:05.423]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.423]                   signalCondition(cond)
[17:42:05.423]                 }
[17:42:05.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.423]                 "immediateCondition"))) {
[17:42:05.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.423]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.423]                   if (TRUE && !signal) {
[17:42:05.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.423]                     {
[17:42:05.423]                       inherits <- base::inherits
[17:42:05.423]                       invokeRestart <- base::invokeRestart
[17:42:05.423]                       is.null <- base::is.null
[17:42:05.423]                       muffled <- FALSE
[17:42:05.423]                       if (inherits(cond, "message")) {
[17:42:05.423]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.423]                         if (muffled) 
[17:42:05.423]                           invokeRestart("muffleMessage")
[17:42:05.423]                       }
[17:42:05.423]                       else if (inherits(cond, "warning")) {
[17:42:05.423]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.423]                         if (muffled) 
[17:42:05.423]                           invokeRestart("muffleWarning")
[17:42:05.423]                       }
[17:42:05.423]                       else if (inherits(cond, "condition")) {
[17:42:05.423]                         if (!is.null(pattern)) {
[17:42:05.423]                           computeRestarts <- base::computeRestarts
[17:42:05.423]                           grepl <- base::grepl
[17:42:05.423]                           restarts <- computeRestarts(cond)
[17:42:05.423]                           for (restart in restarts) {
[17:42:05.423]                             name <- restart$name
[17:42:05.423]                             if (is.null(name)) 
[17:42:05.423]                               next
[17:42:05.423]                             if (!grepl(pattern, name)) 
[17:42:05.423]                               next
[17:42:05.423]                             invokeRestart(restart)
[17:42:05.423]                             muffled <- TRUE
[17:42:05.423]                             break
[17:42:05.423]                           }
[17:42:05.423]                         }
[17:42:05.423]                       }
[17:42:05.423]                       invisible(muffled)
[17:42:05.423]                     }
[17:42:05.423]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.423]                   }
[17:42:05.423]                 }
[17:42:05.423]                 else {
[17:42:05.423]                   if (TRUE) {
[17:42:05.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.423]                     {
[17:42:05.423]                       inherits <- base::inherits
[17:42:05.423]                       invokeRestart <- base::invokeRestart
[17:42:05.423]                       is.null <- base::is.null
[17:42:05.423]                       muffled <- FALSE
[17:42:05.423]                       if (inherits(cond, "message")) {
[17:42:05.423]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.423]                         if (muffled) 
[17:42:05.423]                           invokeRestart("muffleMessage")
[17:42:05.423]                       }
[17:42:05.423]                       else if (inherits(cond, "warning")) {
[17:42:05.423]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.423]                         if (muffled) 
[17:42:05.423]                           invokeRestart("muffleWarning")
[17:42:05.423]                       }
[17:42:05.423]                       else if (inherits(cond, "condition")) {
[17:42:05.423]                         if (!is.null(pattern)) {
[17:42:05.423]                           computeRestarts <- base::computeRestarts
[17:42:05.423]                           grepl <- base::grepl
[17:42:05.423]                           restarts <- computeRestarts(cond)
[17:42:05.423]                           for (restart in restarts) {
[17:42:05.423]                             name <- restart$name
[17:42:05.423]                             if (is.null(name)) 
[17:42:05.423]                               next
[17:42:05.423]                             if (!grepl(pattern, name)) 
[17:42:05.423]                               next
[17:42:05.423]                             invokeRestart(restart)
[17:42:05.423]                             muffled <- TRUE
[17:42:05.423]                             break
[17:42:05.423]                           }
[17:42:05.423]                         }
[17:42:05.423]                       }
[17:42:05.423]                       invisible(muffled)
[17:42:05.423]                     }
[17:42:05.423]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.423]                   }
[17:42:05.423]                 }
[17:42:05.423]             }
[17:42:05.423]         }))
[17:42:05.423]     }, error = function(ex) {
[17:42:05.423]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.423]                 ...future.rng), started = ...future.startTime, 
[17:42:05.423]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.423]             version = "1.8"), class = "FutureResult")
[17:42:05.423]     }, finally = {
[17:42:05.423]         if (!identical(...future.workdir, getwd())) 
[17:42:05.423]             setwd(...future.workdir)
[17:42:05.423]         {
[17:42:05.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.423]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.423]             }
[17:42:05.423]             base::options(...future.oldOptions)
[17:42:05.423]             if (.Platform$OS.type == "windows") {
[17:42:05.423]                 old_names <- names(...future.oldEnvVars)
[17:42:05.423]                 envs <- base::Sys.getenv()
[17:42:05.423]                 names <- names(envs)
[17:42:05.423]                 common <- intersect(names, old_names)
[17:42:05.423]                 added <- setdiff(names, old_names)
[17:42:05.423]                 removed <- setdiff(old_names, names)
[17:42:05.423]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.423]                   envs[common]]
[17:42:05.423]                 NAMES <- toupper(changed)
[17:42:05.423]                 args <- list()
[17:42:05.423]                 for (kk in seq_along(NAMES)) {
[17:42:05.423]                   name <- changed[[kk]]
[17:42:05.423]                   NAME <- NAMES[[kk]]
[17:42:05.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.423]                     next
[17:42:05.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.423]                 }
[17:42:05.423]                 NAMES <- toupper(added)
[17:42:05.423]                 for (kk in seq_along(NAMES)) {
[17:42:05.423]                   name <- added[[kk]]
[17:42:05.423]                   NAME <- NAMES[[kk]]
[17:42:05.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.423]                     next
[17:42:05.423]                   args[[name]] <- ""
[17:42:05.423]                 }
[17:42:05.423]                 NAMES <- toupper(removed)
[17:42:05.423]                 for (kk in seq_along(NAMES)) {
[17:42:05.423]                   name <- removed[[kk]]
[17:42:05.423]                   NAME <- NAMES[[kk]]
[17:42:05.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.423]                     next
[17:42:05.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.423]                 }
[17:42:05.423]                 if (length(args) > 0) 
[17:42:05.423]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.423]             }
[17:42:05.423]             else {
[17:42:05.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.423]             }
[17:42:05.423]             {
[17:42:05.423]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.423]                   0L) {
[17:42:05.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.423]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.423]                   base::options(opts)
[17:42:05.423]                 }
[17:42:05.423]                 {
[17:42:05.423]                   {
[17:42:05.423]                     NULL
[17:42:05.423]                     RNGkind("Mersenne-Twister")
[17:42:05.423]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.423]                       inherits = FALSE)
[17:42:05.423]                   }
[17:42:05.423]                   options(future.plan = NULL)
[17:42:05.423]                   if (is.na(NA_character_)) 
[17:42:05.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.423]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:05.423]                   {
[17:42:05.423]                     future <- SequentialFuture(..., envir = envir)
[17:42:05.423]                     if (!future$lazy) 
[17:42:05.423]                       future <- run(future)
[17:42:05.423]                     invisible(future)
[17:42:05.423]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.423]                 }
[17:42:05.423]             }
[17:42:05.423]         }
[17:42:05.423]     })
[17:42:05.423]     if (TRUE) {
[17:42:05.423]         base::sink(type = "output", split = FALSE)
[17:42:05.423]         if (TRUE) {
[17:42:05.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.423]         }
[17:42:05.423]         else {
[17:42:05.423]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.423]         }
[17:42:05.423]         base::close(...future.stdout)
[17:42:05.423]         ...future.stdout <- NULL
[17:42:05.423]     }
[17:42:05.423]     ...future.result$conditions <- ...future.conditions
[17:42:05.423]     ...future.result$finished <- base::Sys.time()
[17:42:05.423]     ...future.result
[17:42:05.423] }
[17:42:05.424] plan(): Setting new future strategy stack:
[17:42:05.424] List of future strategies:
[17:42:05.424] 1. sequential:
[17:42:05.424]    - args: function (..., envir = parent.frame())
[17:42:05.424]    - tweaked: FALSE
[17:42:05.424]    - call: NULL
[17:42:05.425] plan(): nbrOfWorkers() = 1
[17:42:05.426] plan(): Setting new future strategy stack:
[17:42:05.426] List of future strategies:
[17:42:05.426] 1. sequential:
[17:42:05.426]    - args: function (..., envir = parent.frame())
[17:42:05.426]    - tweaked: FALSE
[17:42:05.426]    - call: plan(strategy)
[17:42:05.426] plan(): nbrOfWorkers() = 1
[17:42:05.426] SequentialFuture started (and completed)
[17:42:05.426] - Launch lazy future ... done
[17:42:05.426] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.427] getGlobalsAndPackages() ...
[17:42:05.427] Searching for globals...
[17:42:05.428] 
[17:42:05.428] Searching for globals ... DONE
[17:42:05.428] - globals: [0] <none>
[17:42:05.428] getGlobalsAndPackages() ... DONE
[17:42:05.428] Packages needed by the future expression (n = 0): <none>
[17:42:05.428] Packages needed by future strategies (n = 0): <none>
[17:42:05.429] {
[17:42:05.429]     {
[17:42:05.429]         {
[17:42:05.429]             ...future.startTime <- base::Sys.time()
[17:42:05.429]             {
[17:42:05.429]                 {
[17:42:05.429]                   {
[17:42:05.429]                     base::local({
[17:42:05.429]                       has_future <- base::requireNamespace("future", 
[17:42:05.429]                         quietly = TRUE)
[17:42:05.429]                       if (has_future) {
[17:42:05.429]                         ns <- base::getNamespace("future")
[17:42:05.429]                         version <- ns[[".package"]][["version"]]
[17:42:05.429]                         if (is.null(version)) 
[17:42:05.429]                           version <- utils::packageVersion("future")
[17:42:05.429]                       }
[17:42:05.429]                       else {
[17:42:05.429]                         version <- NULL
[17:42:05.429]                       }
[17:42:05.429]                       if (!has_future || version < "1.8.0") {
[17:42:05.429]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.429]                           "", base::R.version$version.string), 
[17:42:05.429]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.429]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.429]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.429]                             "release", "version")], collapse = " "), 
[17:42:05.429]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.429]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.429]                           info)
[17:42:05.429]                         info <- base::paste(info, collapse = "; ")
[17:42:05.429]                         if (!has_future) {
[17:42:05.429]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.429]                             info)
[17:42:05.429]                         }
[17:42:05.429]                         else {
[17:42:05.429]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.429]                             info, version)
[17:42:05.429]                         }
[17:42:05.429]                         base::stop(msg)
[17:42:05.429]                       }
[17:42:05.429]                     })
[17:42:05.429]                   }
[17:42:05.429]                   options(future.plan = NULL)
[17:42:05.429]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.429]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.429]                 }
[17:42:05.429]                 ...future.workdir <- getwd()
[17:42:05.429]             }
[17:42:05.429]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.429]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.429]         }
[17:42:05.429]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.429]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.429]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.429]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.429]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.429]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.429]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.429]             base::names(...future.oldOptions))
[17:42:05.429]     }
[17:42:05.429]     if (FALSE) {
[17:42:05.429]     }
[17:42:05.429]     else {
[17:42:05.429]         if (TRUE) {
[17:42:05.429]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.429]                 open = "w")
[17:42:05.429]         }
[17:42:05.429]         else {
[17:42:05.429]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.429]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.429]         }
[17:42:05.429]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.429]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.429]             base::sink(type = "output", split = FALSE)
[17:42:05.429]             base::close(...future.stdout)
[17:42:05.429]         }, add = TRUE)
[17:42:05.429]     }
[17:42:05.429]     ...future.frame <- base::sys.nframe()
[17:42:05.429]     ...future.conditions <- base::list()
[17:42:05.429]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.429]     if (FALSE) {
[17:42:05.429]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.429]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.429]     }
[17:42:05.429]     ...future.result <- base::tryCatch({
[17:42:05.429]         base::withCallingHandlers({
[17:42:05.429]             ...future.value <- base::withVisible(base::local(42))
[17:42:05.429]             future::FutureResult(value = ...future.value$value, 
[17:42:05.429]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.429]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.429]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.429]                     ...future.globalenv.names))
[17:42:05.429]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.429]         }, condition = base::local({
[17:42:05.429]             c <- base::c
[17:42:05.429]             inherits <- base::inherits
[17:42:05.429]             invokeRestart <- base::invokeRestart
[17:42:05.429]             length <- base::length
[17:42:05.429]             list <- base::list
[17:42:05.429]             seq.int <- base::seq.int
[17:42:05.429]             signalCondition <- base::signalCondition
[17:42:05.429]             sys.calls <- base::sys.calls
[17:42:05.429]             `[[` <- base::`[[`
[17:42:05.429]             `+` <- base::`+`
[17:42:05.429]             `<<-` <- base::`<<-`
[17:42:05.429]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.429]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.429]                   3L)]
[17:42:05.429]             }
[17:42:05.429]             function(cond) {
[17:42:05.429]                 is_error <- inherits(cond, "error")
[17:42:05.429]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.429]                   NULL)
[17:42:05.429]                 if (is_error) {
[17:42:05.429]                   sessionInformation <- function() {
[17:42:05.429]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.429]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.429]                       search = base::search(), system = base::Sys.info())
[17:42:05.429]                   }
[17:42:05.429]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.429]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.429]                     cond$call), session = sessionInformation(), 
[17:42:05.429]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.429]                   signalCondition(cond)
[17:42:05.429]                 }
[17:42:05.429]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.429]                 "immediateCondition"))) {
[17:42:05.429]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.429]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.429]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.429]                   if (TRUE && !signal) {
[17:42:05.429]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.429]                     {
[17:42:05.429]                       inherits <- base::inherits
[17:42:05.429]                       invokeRestart <- base::invokeRestart
[17:42:05.429]                       is.null <- base::is.null
[17:42:05.429]                       muffled <- FALSE
[17:42:05.429]                       if (inherits(cond, "message")) {
[17:42:05.429]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.429]                         if (muffled) 
[17:42:05.429]                           invokeRestart("muffleMessage")
[17:42:05.429]                       }
[17:42:05.429]                       else if (inherits(cond, "warning")) {
[17:42:05.429]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.429]                         if (muffled) 
[17:42:05.429]                           invokeRestart("muffleWarning")
[17:42:05.429]                       }
[17:42:05.429]                       else if (inherits(cond, "condition")) {
[17:42:05.429]                         if (!is.null(pattern)) {
[17:42:05.429]                           computeRestarts <- base::computeRestarts
[17:42:05.429]                           grepl <- base::grepl
[17:42:05.429]                           restarts <- computeRestarts(cond)
[17:42:05.429]                           for (restart in restarts) {
[17:42:05.429]                             name <- restart$name
[17:42:05.429]                             if (is.null(name)) 
[17:42:05.429]                               next
[17:42:05.429]                             if (!grepl(pattern, name)) 
[17:42:05.429]                               next
[17:42:05.429]                             invokeRestart(restart)
[17:42:05.429]                             muffled <- TRUE
[17:42:05.429]                             break
[17:42:05.429]                           }
[17:42:05.429]                         }
[17:42:05.429]                       }
[17:42:05.429]                       invisible(muffled)
[17:42:05.429]                     }
[17:42:05.429]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.429]                   }
[17:42:05.429]                 }
[17:42:05.429]                 else {
[17:42:05.429]                   if (TRUE) {
[17:42:05.429]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.429]                     {
[17:42:05.429]                       inherits <- base::inherits
[17:42:05.429]                       invokeRestart <- base::invokeRestart
[17:42:05.429]                       is.null <- base::is.null
[17:42:05.429]                       muffled <- FALSE
[17:42:05.429]                       if (inherits(cond, "message")) {
[17:42:05.429]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.429]                         if (muffled) 
[17:42:05.429]                           invokeRestart("muffleMessage")
[17:42:05.429]                       }
[17:42:05.429]                       else if (inherits(cond, "warning")) {
[17:42:05.429]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.429]                         if (muffled) 
[17:42:05.429]                           invokeRestart("muffleWarning")
[17:42:05.429]                       }
[17:42:05.429]                       else if (inherits(cond, "condition")) {
[17:42:05.429]                         if (!is.null(pattern)) {
[17:42:05.429]                           computeRestarts <- base::computeRestarts
[17:42:05.429]                           grepl <- base::grepl
[17:42:05.429]                           restarts <- computeRestarts(cond)
[17:42:05.429]                           for (restart in restarts) {
[17:42:05.429]                             name <- restart$name
[17:42:05.429]                             if (is.null(name)) 
[17:42:05.429]                               next
[17:42:05.429]                             if (!grepl(pattern, name)) 
[17:42:05.429]                               next
[17:42:05.429]                             invokeRestart(restart)
[17:42:05.429]                             muffled <- TRUE
[17:42:05.429]                             break
[17:42:05.429]                           }
[17:42:05.429]                         }
[17:42:05.429]                       }
[17:42:05.429]                       invisible(muffled)
[17:42:05.429]                     }
[17:42:05.429]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.429]                   }
[17:42:05.429]                 }
[17:42:05.429]             }
[17:42:05.429]         }))
[17:42:05.429]     }, error = function(ex) {
[17:42:05.429]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.429]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.429]                 ...future.rng), started = ...future.startTime, 
[17:42:05.429]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.429]             version = "1.8"), class = "FutureResult")
[17:42:05.429]     }, finally = {
[17:42:05.429]         if (!identical(...future.workdir, getwd())) 
[17:42:05.429]             setwd(...future.workdir)
[17:42:05.429]         {
[17:42:05.429]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.429]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.429]             }
[17:42:05.429]             base::options(...future.oldOptions)
[17:42:05.429]             if (.Platform$OS.type == "windows") {
[17:42:05.429]                 old_names <- names(...future.oldEnvVars)
[17:42:05.429]                 envs <- base::Sys.getenv()
[17:42:05.429]                 names <- names(envs)
[17:42:05.429]                 common <- intersect(names, old_names)
[17:42:05.429]                 added <- setdiff(names, old_names)
[17:42:05.429]                 removed <- setdiff(old_names, names)
[17:42:05.429]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.429]                   envs[common]]
[17:42:05.429]                 NAMES <- toupper(changed)
[17:42:05.429]                 args <- list()
[17:42:05.429]                 for (kk in seq_along(NAMES)) {
[17:42:05.429]                   name <- changed[[kk]]
[17:42:05.429]                   NAME <- NAMES[[kk]]
[17:42:05.429]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.429]                     next
[17:42:05.429]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.429]                 }
[17:42:05.429]                 NAMES <- toupper(added)
[17:42:05.429]                 for (kk in seq_along(NAMES)) {
[17:42:05.429]                   name <- added[[kk]]
[17:42:05.429]                   NAME <- NAMES[[kk]]
[17:42:05.429]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.429]                     next
[17:42:05.429]                   args[[name]] <- ""
[17:42:05.429]                 }
[17:42:05.429]                 NAMES <- toupper(removed)
[17:42:05.429]                 for (kk in seq_along(NAMES)) {
[17:42:05.429]                   name <- removed[[kk]]
[17:42:05.429]                   NAME <- NAMES[[kk]]
[17:42:05.429]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.429]                     next
[17:42:05.429]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.429]                 }
[17:42:05.429]                 if (length(args) > 0) 
[17:42:05.429]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.429]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.429]             }
[17:42:05.429]             else {
[17:42:05.429]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.429]             }
[17:42:05.429]             {
[17:42:05.429]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.429]                   0L) {
[17:42:05.429]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.429]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.429]                   base::options(opts)
[17:42:05.429]                 }
[17:42:05.429]                 {
[17:42:05.429]                   {
[17:42:05.429]                     NULL
[17:42:05.429]                     RNGkind("Mersenne-Twister")
[17:42:05.429]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.429]                       inherits = FALSE)
[17:42:05.429]                   }
[17:42:05.429]                   options(future.plan = NULL)
[17:42:05.429]                   if (is.na(NA_character_)) 
[17:42:05.429]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.429]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.429]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:05.429]                   {
[17:42:05.429]                     future <- SequentialFuture(..., envir = envir)
[17:42:05.429]                     if (!future$lazy) 
[17:42:05.429]                       future <- run(future)
[17:42:05.429]                     invisible(future)
[17:42:05.429]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.429]                 }
[17:42:05.429]             }
[17:42:05.429]         }
[17:42:05.429]     })
[17:42:05.429]     if (TRUE) {
[17:42:05.429]         base::sink(type = "output", split = FALSE)
[17:42:05.429]         if (TRUE) {
[17:42:05.429]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.429]         }
[17:42:05.429]         else {
[17:42:05.429]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.429]         }
[17:42:05.429]         base::close(...future.stdout)
[17:42:05.429]         ...future.stdout <- NULL
[17:42:05.429]     }
[17:42:05.429]     ...future.result$conditions <- ...future.conditions
[17:42:05.429]     ...future.result$finished <- base::Sys.time()
[17:42:05.429]     ...future.result
[17:42:05.429] }
[17:42:05.430] plan(): Setting new future strategy stack:
[17:42:05.430] List of future strategies:
[17:42:05.430] 1. sequential:
[17:42:05.430]    - args: function (..., envir = parent.frame())
[17:42:05.430]    - tweaked: FALSE
[17:42:05.430]    - call: NULL
[17:42:05.431] plan(): nbrOfWorkers() = 1
[17:42:05.431] plan(): Setting new future strategy stack:
[17:42:05.432] List of future strategies:
[17:42:05.432] 1. sequential:
[17:42:05.432]    - args: function (..., envir = parent.frame())
[17:42:05.432]    - tweaked: FALSE
[17:42:05.432]    - call: plan(strategy)
[17:42:05.432] plan(): nbrOfWorkers() = 1
[17:42:05.432] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.433] getGlobalsAndPackages() ...
[17:42:05.433] Searching for globals...
[17:42:05.433] 
[17:42:05.433] Searching for globals ... DONE
[17:42:05.433] - globals: [0] <none>
[17:42:05.433] getGlobalsAndPackages() ... DONE
[17:42:05.433] run() for ‘Future’ ...
[17:42:05.434] - state: ‘created’
[17:42:05.434] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:05.434] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.434] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:05.434]   - Field: ‘label’
[17:42:05.434]   - Field: ‘local’
[17:42:05.434]   - Field: ‘owner’
[17:42:05.434]   - Field: ‘envir’
[17:42:05.435]   - Field: ‘packages’
[17:42:05.435]   - Field: ‘gc’
[17:42:05.435]   - Field: ‘conditions’
[17:42:05.435]   - Field: ‘expr’
[17:42:05.435]   - Field: ‘uuid’
[17:42:05.435]   - Field: ‘seed’
[17:42:05.435]   - Field: ‘version’
[17:42:05.435]   - Field: ‘result’
[17:42:05.435]   - Field: ‘asynchronous’
[17:42:05.435]   - Field: ‘calls’
[17:42:05.436]   - Field: ‘globals’
[17:42:05.436]   - Field: ‘stdout’
[17:42:05.436]   - Field: ‘earlySignal’
[17:42:05.436]   - Field: ‘lazy’
[17:42:05.436]   - Field: ‘state’
[17:42:05.436] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:05.436] - Launch lazy future ...
[17:42:05.436] Packages needed by the future expression (n = 0): <none>
[17:42:05.436] Packages needed by future strategies (n = 0): <none>
[17:42:05.437] {
[17:42:05.437]     {
[17:42:05.437]         {
[17:42:05.437]             ...future.startTime <- base::Sys.time()
[17:42:05.437]             {
[17:42:05.437]                 {
[17:42:05.437]                   {
[17:42:05.437]                     base::local({
[17:42:05.437]                       has_future <- base::requireNamespace("future", 
[17:42:05.437]                         quietly = TRUE)
[17:42:05.437]                       if (has_future) {
[17:42:05.437]                         ns <- base::getNamespace("future")
[17:42:05.437]                         version <- ns[[".package"]][["version"]]
[17:42:05.437]                         if (is.null(version)) 
[17:42:05.437]                           version <- utils::packageVersion("future")
[17:42:05.437]                       }
[17:42:05.437]                       else {
[17:42:05.437]                         version <- NULL
[17:42:05.437]                       }
[17:42:05.437]                       if (!has_future || version < "1.8.0") {
[17:42:05.437]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.437]                           "", base::R.version$version.string), 
[17:42:05.437]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.437]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.437]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.437]                             "release", "version")], collapse = " "), 
[17:42:05.437]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.437]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.437]                           info)
[17:42:05.437]                         info <- base::paste(info, collapse = "; ")
[17:42:05.437]                         if (!has_future) {
[17:42:05.437]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.437]                             info)
[17:42:05.437]                         }
[17:42:05.437]                         else {
[17:42:05.437]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.437]                             info, version)
[17:42:05.437]                         }
[17:42:05.437]                         base::stop(msg)
[17:42:05.437]                       }
[17:42:05.437]                     })
[17:42:05.437]                   }
[17:42:05.437]                   options(future.plan = NULL)
[17:42:05.437]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.437]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.437]                 }
[17:42:05.437]                 ...future.workdir <- getwd()
[17:42:05.437]             }
[17:42:05.437]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.437]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.437]         }
[17:42:05.437]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.437]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.437]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.437]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.437]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.437]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.437]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.437]             base::names(...future.oldOptions))
[17:42:05.437]     }
[17:42:05.437]     if (FALSE) {
[17:42:05.437]     }
[17:42:05.437]     else {
[17:42:05.437]         if (TRUE) {
[17:42:05.437]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.437]                 open = "w")
[17:42:05.437]         }
[17:42:05.437]         else {
[17:42:05.437]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.437]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.437]         }
[17:42:05.437]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.437]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.437]             base::sink(type = "output", split = FALSE)
[17:42:05.437]             base::close(...future.stdout)
[17:42:05.437]         }, add = TRUE)
[17:42:05.437]     }
[17:42:05.437]     ...future.frame <- base::sys.nframe()
[17:42:05.437]     ...future.conditions <- base::list()
[17:42:05.437]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.437]     if (FALSE) {
[17:42:05.437]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.437]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.437]     }
[17:42:05.437]     ...future.result <- base::tryCatch({
[17:42:05.437]         base::withCallingHandlers({
[17:42:05.437]             ...future.value <- base::withVisible(base::local(42))
[17:42:05.437]             future::FutureResult(value = ...future.value$value, 
[17:42:05.437]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.437]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.437]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.437]                     ...future.globalenv.names))
[17:42:05.437]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.437]         }, condition = base::local({
[17:42:05.437]             c <- base::c
[17:42:05.437]             inherits <- base::inherits
[17:42:05.437]             invokeRestart <- base::invokeRestart
[17:42:05.437]             length <- base::length
[17:42:05.437]             list <- base::list
[17:42:05.437]             seq.int <- base::seq.int
[17:42:05.437]             signalCondition <- base::signalCondition
[17:42:05.437]             sys.calls <- base::sys.calls
[17:42:05.437]             `[[` <- base::`[[`
[17:42:05.437]             `+` <- base::`+`
[17:42:05.437]             `<<-` <- base::`<<-`
[17:42:05.437]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.437]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.437]                   3L)]
[17:42:05.437]             }
[17:42:05.437]             function(cond) {
[17:42:05.437]                 is_error <- inherits(cond, "error")
[17:42:05.437]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.437]                   NULL)
[17:42:05.437]                 if (is_error) {
[17:42:05.437]                   sessionInformation <- function() {
[17:42:05.437]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.437]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.437]                       search = base::search(), system = base::Sys.info())
[17:42:05.437]                   }
[17:42:05.437]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.437]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.437]                     cond$call), session = sessionInformation(), 
[17:42:05.437]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.437]                   signalCondition(cond)
[17:42:05.437]                 }
[17:42:05.437]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.437]                 "immediateCondition"))) {
[17:42:05.437]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.437]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.437]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.437]                   if (TRUE && !signal) {
[17:42:05.437]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.437]                     {
[17:42:05.437]                       inherits <- base::inherits
[17:42:05.437]                       invokeRestart <- base::invokeRestart
[17:42:05.437]                       is.null <- base::is.null
[17:42:05.437]                       muffled <- FALSE
[17:42:05.437]                       if (inherits(cond, "message")) {
[17:42:05.437]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.437]                         if (muffled) 
[17:42:05.437]                           invokeRestart("muffleMessage")
[17:42:05.437]                       }
[17:42:05.437]                       else if (inherits(cond, "warning")) {
[17:42:05.437]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.437]                         if (muffled) 
[17:42:05.437]                           invokeRestart("muffleWarning")
[17:42:05.437]                       }
[17:42:05.437]                       else if (inherits(cond, "condition")) {
[17:42:05.437]                         if (!is.null(pattern)) {
[17:42:05.437]                           computeRestarts <- base::computeRestarts
[17:42:05.437]                           grepl <- base::grepl
[17:42:05.437]                           restarts <- computeRestarts(cond)
[17:42:05.437]                           for (restart in restarts) {
[17:42:05.437]                             name <- restart$name
[17:42:05.437]                             if (is.null(name)) 
[17:42:05.437]                               next
[17:42:05.437]                             if (!grepl(pattern, name)) 
[17:42:05.437]                               next
[17:42:05.437]                             invokeRestart(restart)
[17:42:05.437]                             muffled <- TRUE
[17:42:05.437]                             break
[17:42:05.437]                           }
[17:42:05.437]                         }
[17:42:05.437]                       }
[17:42:05.437]                       invisible(muffled)
[17:42:05.437]                     }
[17:42:05.437]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.437]                   }
[17:42:05.437]                 }
[17:42:05.437]                 else {
[17:42:05.437]                   if (TRUE) {
[17:42:05.437]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.437]                     {
[17:42:05.437]                       inherits <- base::inherits
[17:42:05.437]                       invokeRestart <- base::invokeRestart
[17:42:05.437]                       is.null <- base::is.null
[17:42:05.437]                       muffled <- FALSE
[17:42:05.437]                       if (inherits(cond, "message")) {
[17:42:05.437]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.437]                         if (muffled) 
[17:42:05.437]                           invokeRestart("muffleMessage")
[17:42:05.437]                       }
[17:42:05.437]                       else if (inherits(cond, "warning")) {
[17:42:05.437]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.437]                         if (muffled) 
[17:42:05.437]                           invokeRestart("muffleWarning")
[17:42:05.437]                       }
[17:42:05.437]                       else if (inherits(cond, "condition")) {
[17:42:05.437]                         if (!is.null(pattern)) {
[17:42:05.437]                           computeRestarts <- base::computeRestarts
[17:42:05.437]                           grepl <- base::grepl
[17:42:05.437]                           restarts <- computeRestarts(cond)
[17:42:05.437]                           for (restart in restarts) {
[17:42:05.437]                             name <- restart$name
[17:42:05.437]                             if (is.null(name)) 
[17:42:05.437]                               next
[17:42:05.437]                             if (!grepl(pattern, name)) 
[17:42:05.437]                               next
[17:42:05.437]                             invokeRestart(restart)
[17:42:05.437]                             muffled <- TRUE
[17:42:05.437]                             break
[17:42:05.437]                           }
[17:42:05.437]                         }
[17:42:05.437]                       }
[17:42:05.437]                       invisible(muffled)
[17:42:05.437]                     }
[17:42:05.437]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.437]                   }
[17:42:05.437]                 }
[17:42:05.437]             }
[17:42:05.437]         }))
[17:42:05.437]     }, error = function(ex) {
[17:42:05.437]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.437]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.437]                 ...future.rng), started = ...future.startTime, 
[17:42:05.437]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.437]             version = "1.8"), class = "FutureResult")
[17:42:05.437]     }, finally = {
[17:42:05.437]         if (!identical(...future.workdir, getwd())) 
[17:42:05.437]             setwd(...future.workdir)
[17:42:05.437]         {
[17:42:05.437]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.437]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.437]             }
[17:42:05.437]             base::options(...future.oldOptions)
[17:42:05.437]             if (.Platform$OS.type == "windows") {
[17:42:05.437]                 old_names <- names(...future.oldEnvVars)
[17:42:05.437]                 envs <- base::Sys.getenv()
[17:42:05.437]                 names <- names(envs)
[17:42:05.437]                 common <- intersect(names, old_names)
[17:42:05.437]                 added <- setdiff(names, old_names)
[17:42:05.437]                 removed <- setdiff(old_names, names)
[17:42:05.437]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.437]                   envs[common]]
[17:42:05.437]                 NAMES <- toupper(changed)
[17:42:05.437]                 args <- list()
[17:42:05.437]                 for (kk in seq_along(NAMES)) {
[17:42:05.437]                   name <- changed[[kk]]
[17:42:05.437]                   NAME <- NAMES[[kk]]
[17:42:05.437]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.437]                     next
[17:42:05.437]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.437]                 }
[17:42:05.437]                 NAMES <- toupper(added)
[17:42:05.437]                 for (kk in seq_along(NAMES)) {
[17:42:05.437]                   name <- added[[kk]]
[17:42:05.437]                   NAME <- NAMES[[kk]]
[17:42:05.437]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.437]                     next
[17:42:05.437]                   args[[name]] <- ""
[17:42:05.437]                 }
[17:42:05.437]                 NAMES <- toupper(removed)
[17:42:05.437]                 for (kk in seq_along(NAMES)) {
[17:42:05.437]                   name <- removed[[kk]]
[17:42:05.437]                   NAME <- NAMES[[kk]]
[17:42:05.437]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.437]                     next
[17:42:05.437]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.437]                 }
[17:42:05.437]                 if (length(args) > 0) 
[17:42:05.437]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.437]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.437]             }
[17:42:05.437]             else {
[17:42:05.437]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.437]             }
[17:42:05.437]             {
[17:42:05.437]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.437]                   0L) {
[17:42:05.437]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.437]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.437]                   base::options(opts)
[17:42:05.437]                 }
[17:42:05.437]                 {
[17:42:05.437]                   {
[17:42:05.437]                     NULL
[17:42:05.437]                     RNGkind("Mersenne-Twister")
[17:42:05.437]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.437]                       inherits = FALSE)
[17:42:05.437]                   }
[17:42:05.437]                   options(future.plan = NULL)
[17:42:05.437]                   if (is.na(NA_character_)) 
[17:42:05.437]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.437]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.437]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:05.437]                   {
[17:42:05.437]                     future <- SequentialFuture(..., envir = envir)
[17:42:05.437]                     if (!future$lazy) 
[17:42:05.437]                       future <- run(future)
[17:42:05.437]                     invisible(future)
[17:42:05.437]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.437]                 }
[17:42:05.437]             }
[17:42:05.437]         }
[17:42:05.437]     })
[17:42:05.437]     if (TRUE) {
[17:42:05.437]         base::sink(type = "output", split = FALSE)
[17:42:05.437]         if (TRUE) {
[17:42:05.437]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.437]         }
[17:42:05.437]         else {
[17:42:05.437]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.437]         }
[17:42:05.437]         base::close(...future.stdout)
[17:42:05.437]         ...future.stdout <- NULL
[17:42:05.437]     }
[17:42:05.437]     ...future.result$conditions <- ...future.conditions
[17:42:05.437]     ...future.result$finished <- base::Sys.time()
[17:42:05.437]     ...future.result
[17:42:05.437] }
[17:42:05.438] plan(): Setting new future strategy stack:
[17:42:05.439] List of future strategies:
[17:42:05.439] 1. sequential:
[17:42:05.439]    - args: function (..., envir = parent.frame())
[17:42:05.439]    - tweaked: FALSE
[17:42:05.439]    - call: NULL
[17:42:05.439] plan(): nbrOfWorkers() = 1
[17:42:05.440] plan(): Setting new future strategy stack:
[17:42:05.440] List of future strategies:
[17:42:05.440] 1. sequential:
[17:42:05.440]    - args: function (..., envir = parent.frame())
[17:42:05.440]    - tweaked: FALSE
[17:42:05.440]    - call: plan(strategy)
[17:42:05.440] plan(): nbrOfWorkers() = 1
[17:42:05.440] SequentialFuture started (and completed)
[17:42:05.440] - Launch lazy future ... done
[17:42:05.440] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.441] getGlobalsAndPackages() ...
[17:42:05.441] Searching for globals...
[17:42:05.442] - globals found: [1] ‘{’
[17:42:05.442] Searching for globals ... DONE
[17:42:05.442] Resolving globals: FALSE
[17:42:05.442] 
[17:42:05.442] 
[17:42:05.442] getGlobalsAndPackages() ... DONE
[17:42:05.443] run() for ‘Future’ ...
[17:42:05.443] - state: ‘created’
[17:42:05.443] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:05.443] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:05.443] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:05.443]   - Field: ‘label’
[17:42:05.443]   - Field: ‘local’
[17:42:05.443]   - Field: ‘owner’
[17:42:05.444]   - Field: ‘envir’
[17:42:05.444]   - Field: ‘packages’
[17:42:05.444]   - Field: ‘gc’
[17:42:05.444]   - Field: ‘conditions’
[17:42:05.444]   - Field: ‘expr’
[17:42:05.444]   - Field: ‘uuid’
[17:42:05.444]   - Field: ‘seed’
[17:42:05.444]   - Field: ‘version’
[17:42:05.444]   - Field: ‘result’
[17:42:05.444]   - Field: ‘asynchronous’
[17:42:05.444]   - Field: ‘calls’
[17:42:05.445]   - Field: ‘globals’
[17:42:05.445]   - Field: ‘stdout’
[17:42:05.445]   - Field: ‘earlySignal’
[17:42:05.445]   - Field: ‘lazy’
[17:42:05.445]   - Field: ‘state’
[17:42:05.445] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:05.445] - Launch lazy future ...
[17:42:05.445] Packages needed by the future expression (n = 0): <none>
[17:42:05.445] Packages needed by future strategies (n = 0): <none>
[17:42:05.446] {
[17:42:05.446]     {
[17:42:05.446]         {
[17:42:05.446]             ...future.startTime <- base::Sys.time()
[17:42:05.446]             {
[17:42:05.446]                 {
[17:42:05.446]                   {
[17:42:05.446]                     base::local({
[17:42:05.446]                       has_future <- base::requireNamespace("future", 
[17:42:05.446]                         quietly = TRUE)
[17:42:05.446]                       if (has_future) {
[17:42:05.446]                         ns <- base::getNamespace("future")
[17:42:05.446]                         version <- ns[[".package"]][["version"]]
[17:42:05.446]                         if (is.null(version)) 
[17:42:05.446]                           version <- utils::packageVersion("future")
[17:42:05.446]                       }
[17:42:05.446]                       else {
[17:42:05.446]                         version <- NULL
[17:42:05.446]                       }
[17:42:05.446]                       if (!has_future || version < "1.8.0") {
[17:42:05.446]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.446]                           "", base::R.version$version.string), 
[17:42:05.446]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.446]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.446]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.446]                             "release", "version")], collapse = " "), 
[17:42:05.446]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.446]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.446]                           info)
[17:42:05.446]                         info <- base::paste(info, collapse = "; ")
[17:42:05.446]                         if (!has_future) {
[17:42:05.446]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.446]                             info)
[17:42:05.446]                         }
[17:42:05.446]                         else {
[17:42:05.446]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.446]                             info, version)
[17:42:05.446]                         }
[17:42:05.446]                         base::stop(msg)
[17:42:05.446]                       }
[17:42:05.446]                     })
[17:42:05.446]                   }
[17:42:05.446]                   options(future.plan = NULL)
[17:42:05.446]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.446]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.446]                 }
[17:42:05.446]                 ...future.workdir <- getwd()
[17:42:05.446]             }
[17:42:05.446]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.446]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.446]         }
[17:42:05.446]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.446]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.446]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.446]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.446]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.446]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.446]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.446]             base::names(...future.oldOptions))
[17:42:05.446]     }
[17:42:05.446]     if (FALSE) {
[17:42:05.446]     }
[17:42:05.446]     else {
[17:42:05.446]         if (TRUE) {
[17:42:05.446]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.446]                 open = "w")
[17:42:05.446]         }
[17:42:05.446]         else {
[17:42:05.446]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.446]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.446]         }
[17:42:05.446]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.446]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.446]             base::sink(type = "output", split = FALSE)
[17:42:05.446]             base::close(...future.stdout)
[17:42:05.446]         }, add = TRUE)
[17:42:05.446]     }
[17:42:05.446]     ...future.frame <- base::sys.nframe()
[17:42:05.446]     ...future.conditions <- base::list()
[17:42:05.446]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.446]     if (FALSE) {
[17:42:05.446]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.446]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.446]     }
[17:42:05.446]     ...future.result <- base::tryCatch({
[17:42:05.446]         base::withCallingHandlers({
[17:42:05.446]             ...future.value <- base::withVisible(base::local({
[17:42:05.446]                 42
[17:42:05.446]             }))
[17:42:05.446]             future::FutureResult(value = ...future.value$value, 
[17:42:05.446]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.446]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.446]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.446]                     ...future.globalenv.names))
[17:42:05.446]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.446]         }, condition = base::local({
[17:42:05.446]             c <- base::c
[17:42:05.446]             inherits <- base::inherits
[17:42:05.446]             invokeRestart <- base::invokeRestart
[17:42:05.446]             length <- base::length
[17:42:05.446]             list <- base::list
[17:42:05.446]             seq.int <- base::seq.int
[17:42:05.446]             signalCondition <- base::signalCondition
[17:42:05.446]             sys.calls <- base::sys.calls
[17:42:05.446]             `[[` <- base::`[[`
[17:42:05.446]             `+` <- base::`+`
[17:42:05.446]             `<<-` <- base::`<<-`
[17:42:05.446]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.446]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.446]                   3L)]
[17:42:05.446]             }
[17:42:05.446]             function(cond) {
[17:42:05.446]                 is_error <- inherits(cond, "error")
[17:42:05.446]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.446]                   NULL)
[17:42:05.446]                 if (is_error) {
[17:42:05.446]                   sessionInformation <- function() {
[17:42:05.446]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.446]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.446]                       search = base::search(), system = base::Sys.info())
[17:42:05.446]                   }
[17:42:05.446]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.446]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.446]                     cond$call), session = sessionInformation(), 
[17:42:05.446]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.446]                   signalCondition(cond)
[17:42:05.446]                 }
[17:42:05.446]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.446]                 "immediateCondition"))) {
[17:42:05.446]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.446]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.446]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.446]                   if (TRUE && !signal) {
[17:42:05.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.446]                     {
[17:42:05.446]                       inherits <- base::inherits
[17:42:05.446]                       invokeRestart <- base::invokeRestart
[17:42:05.446]                       is.null <- base::is.null
[17:42:05.446]                       muffled <- FALSE
[17:42:05.446]                       if (inherits(cond, "message")) {
[17:42:05.446]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.446]                         if (muffled) 
[17:42:05.446]                           invokeRestart("muffleMessage")
[17:42:05.446]                       }
[17:42:05.446]                       else if (inherits(cond, "warning")) {
[17:42:05.446]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.446]                         if (muffled) 
[17:42:05.446]                           invokeRestart("muffleWarning")
[17:42:05.446]                       }
[17:42:05.446]                       else if (inherits(cond, "condition")) {
[17:42:05.446]                         if (!is.null(pattern)) {
[17:42:05.446]                           computeRestarts <- base::computeRestarts
[17:42:05.446]                           grepl <- base::grepl
[17:42:05.446]                           restarts <- computeRestarts(cond)
[17:42:05.446]                           for (restart in restarts) {
[17:42:05.446]                             name <- restart$name
[17:42:05.446]                             if (is.null(name)) 
[17:42:05.446]                               next
[17:42:05.446]                             if (!grepl(pattern, name)) 
[17:42:05.446]                               next
[17:42:05.446]                             invokeRestart(restart)
[17:42:05.446]                             muffled <- TRUE
[17:42:05.446]                             break
[17:42:05.446]                           }
[17:42:05.446]                         }
[17:42:05.446]                       }
[17:42:05.446]                       invisible(muffled)
[17:42:05.446]                     }
[17:42:05.446]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.446]                   }
[17:42:05.446]                 }
[17:42:05.446]                 else {
[17:42:05.446]                   if (TRUE) {
[17:42:05.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.446]                     {
[17:42:05.446]                       inherits <- base::inherits
[17:42:05.446]                       invokeRestart <- base::invokeRestart
[17:42:05.446]                       is.null <- base::is.null
[17:42:05.446]                       muffled <- FALSE
[17:42:05.446]                       if (inherits(cond, "message")) {
[17:42:05.446]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.446]                         if (muffled) 
[17:42:05.446]                           invokeRestart("muffleMessage")
[17:42:05.446]                       }
[17:42:05.446]                       else if (inherits(cond, "warning")) {
[17:42:05.446]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.446]                         if (muffled) 
[17:42:05.446]                           invokeRestart("muffleWarning")
[17:42:05.446]                       }
[17:42:05.446]                       else if (inherits(cond, "condition")) {
[17:42:05.446]                         if (!is.null(pattern)) {
[17:42:05.446]                           computeRestarts <- base::computeRestarts
[17:42:05.446]                           grepl <- base::grepl
[17:42:05.446]                           restarts <- computeRestarts(cond)
[17:42:05.446]                           for (restart in restarts) {
[17:42:05.446]                             name <- restart$name
[17:42:05.446]                             if (is.null(name)) 
[17:42:05.446]                               next
[17:42:05.446]                             if (!grepl(pattern, name)) 
[17:42:05.446]                               next
[17:42:05.446]                             invokeRestart(restart)
[17:42:05.446]                             muffled <- TRUE
[17:42:05.446]                             break
[17:42:05.446]                           }
[17:42:05.446]                         }
[17:42:05.446]                       }
[17:42:05.446]                       invisible(muffled)
[17:42:05.446]                     }
[17:42:05.446]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.446]                   }
[17:42:05.446]                 }
[17:42:05.446]             }
[17:42:05.446]         }))
[17:42:05.446]     }, error = function(ex) {
[17:42:05.446]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.446]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.446]                 ...future.rng), started = ...future.startTime, 
[17:42:05.446]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.446]             version = "1.8"), class = "FutureResult")
[17:42:05.446]     }, finally = {
[17:42:05.446]         if (!identical(...future.workdir, getwd())) 
[17:42:05.446]             setwd(...future.workdir)
[17:42:05.446]         {
[17:42:05.446]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.446]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.446]             }
[17:42:05.446]             base::options(...future.oldOptions)
[17:42:05.446]             if (.Platform$OS.type == "windows") {
[17:42:05.446]                 old_names <- names(...future.oldEnvVars)
[17:42:05.446]                 envs <- base::Sys.getenv()
[17:42:05.446]                 names <- names(envs)
[17:42:05.446]                 common <- intersect(names, old_names)
[17:42:05.446]                 added <- setdiff(names, old_names)
[17:42:05.446]                 removed <- setdiff(old_names, names)
[17:42:05.446]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.446]                   envs[common]]
[17:42:05.446]                 NAMES <- toupper(changed)
[17:42:05.446]                 args <- list()
[17:42:05.446]                 for (kk in seq_along(NAMES)) {
[17:42:05.446]                   name <- changed[[kk]]
[17:42:05.446]                   NAME <- NAMES[[kk]]
[17:42:05.446]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.446]                     next
[17:42:05.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.446]                 }
[17:42:05.446]                 NAMES <- toupper(added)
[17:42:05.446]                 for (kk in seq_along(NAMES)) {
[17:42:05.446]                   name <- added[[kk]]
[17:42:05.446]                   NAME <- NAMES[[kk]]
[17:42:05.446]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.446]                     next
[17:42:05.446]                   args[[name]] <- ""
[17:42:05.446]                 }
[17:42:05.446]                 NAMES <- toupper(removed)
[17:42:05.446]                 for (kk in seq_along(NAMES)) {
[17:42:05.446]                   name <- removed[[kk]]
[17:42:05.446]                   NAME <- NAMES[[kk]]
[17:42:05.446]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.446]                     next
[17:42:05.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.446]                 }
[17:42:05.446]                 if (length(args) > 0) 
[17:42:05.446]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.446]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.446]             }
[17:42:05.446]             else {
[17:42:05.446]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.446]             }
[17:42:05.446]             {
[17:42:05.446]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.446]                   0L) {
[17:42:05.446]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.446]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.446]                   base::options(opts)
[17:42:05.446]                 }
[17:42:05.446]                 {
[17:42:05.446]                   {
[17:42:05.446]                     NULL
[17:42:05.446]                     RNGkind("Mersenne-Twister")
[17:42:05.446]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.446]                       inherits = FALSE)
[17:42:05.446]                   }
[17:42:05.446]                   options(future.plan = NULL)
[17:42:05.446]                   if (is.na(NA_character_)) 
[17:42:05.446]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.446]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.446]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:05.446]                   {
[17:42:05.446]                     future <- SequentialFuture(..., envir = envir)
[17:42:05.446]                     if (!future$lazy) 
[17:42:05.446]                       future <- run(future)
[17:42:05.446]                     invisible(future)
[17:42:05.446]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.446]                 }
[17:42:05.446]             }
[17:42:05.446]         }
[17:42:05.446]     })
[17:42:05.446]     if (TRUE) {
[17:42:05.446]         base::sink(type = "output", split = FALSE)
[17:42:05.446]         if (TRUE) {
[17:42:05.446]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.446]         }
[17:42:05.446]         else {
[17:42:05.446]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.446]         }
[17:42:05.446]         base::close(...future.stdout)
[17:42:05.446]         ...future.stdout <- NULL
[17:42:05.446]     }
[17:42:05.446]     ...future.result$conditions <- ...future.conditions
[17:42:05.446]     ...future.result$finished <- base::Sys.time()
[17:42:05.446]     ...future.result
[17:42:05.446] }
[17:42:05.448] plan(): Setting new future strategy stack:
[17:42:05.448] List of future strategies:
[17:42:05.448] 1. sequential:
[17:42:05.448]    - args: function (..., envir = parent.frame())
[17:42:05.448]    - tweaked: FALSE
[17:42:05.448]    - call: NULL
[17:42:05.448] plan(): nbrOfWorkers() = 1
[17:42:05.449] plan(): Setting new future strategy stack:
[17:42:05.449] List of future strategies:
[17:42:05.449] 1. sequential:
[17:42:05.449]    - args: function (..., envir = parent.frame())
[17:42:05.449]    - tweaked: FALSE
[17:42:05.449]    - call: plan(strategy)
[17:42:05.449] plan(): nbrOfWorkers() = 1
[17:42:05.449] SequentialFuture started (and completed)
[17:42:05.450] - Launch lazy future ... done
[17:42:05.450] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[17:42:05.451] plan(): Setting new future strategy stack:
[17:42:05.451] List of future strategies:
[17:42:05.451] 1. multicore:
[17:42:05.451]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.451]    - tweaked: FALSE
[17:42:05.451]    - call: plan(strategy)
[17:42:05.455] plan(): nbrOfWorkers() = 2
[17:42:05.458] getGlobalsAndPackages() ...
[17:42:05.458] 
[17:42:05.458] - globals: [0] <none>
[17:42:05.458] getGlobalsAndPackages() ... DONE
[17:42:05.460] Packages needed by the future expression (n = 0): <none>
[17:42:05.460] Packages needed by future strategies (n = 0): <none>
[17:42:05.460] {
[17:42:05.460]     {
[17:42:05.460]         {
[17:42:05.460]             ...future.startTime <- base::Sys.time()
[17:42:05.460]             {
[17:42:05.460]                 {
[17:42:05.460]                   {
[17:42:05.460]                     {
[17:42:05.460]                       base::local({
[17:42:05.460]                         has_future <- base::requireNamespace("future", 
[17:42:05.460]                           quietly = TRUE)
[17:42:05.460]                         if (has_future) {
[17:42:05.460]                           ns <- base::getNamespace("future")
[17:42:05.460]                           version <- ns[[".package"]][["version"]]
[17:42:05.460]                           if (is.null(version)) 
[17:42:05.460]                             version <- utils::packageVersion("future")
[17:42:05.460]                         }
[17:42:05.460]                         else {
[17:42:05.460]                           version <- NULL
[17:42:05.460]                         }
[17:42:05.460]                         if (!has_future || version < "1.8.0") {
[17:42:05.460]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.460]                             "", base::R.version$version.string), 
[17:42:05.460]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.460]                               "release", "version")], collapse = " "), 
[17:42:05.460]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.460]                             info)
[17:42:05.460]                           info <- base::paste(info, collapse = "; ")
[17:42:05.460]                           if (!has_future) {
[17:42:05.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.460]                               info)
[17:42:05.460]                           }
[17:42:05.460]                           else {
[17:42:05.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.460]                               info, version)
[17:42:05.460]                           }
[17:42:05.460]                           base::stop(msg)
[17:42:05.460]                         }
[17:42:05.460]                       })
[17:42:05.460]                     }
[17:42:05.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.460]                     base::options(mc.cores = 1L)
[17:42:05.460]                   }
[17:42:05.460]                   options(future.plan = NULL)
[17:42:05.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.460]                 }
[17:42:05.460]                 ...future.workdir <- getwd()
[17:42:05.460]             }
[17:42:05.460]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.460]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.460]         }
[17:42:05.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.460]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.460]             base::names(...future.oldOptions))
[17:42:05.460]     }
[17:42:05.460]     if (FALSE) {
[17:42:05.460]     }
[17:42:05.460]     else {
[17:42:05.460]         if (TRUE) {
[17:42:05.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.460]                 open = "w")
[17:42:05.460]         }
[17:42:05.460]         else {
[17:42:05.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.460]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.460]         }
[17:42:05.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.460]             base::sink(type = "output", split = FALSE)
[17:42:05.460]             base::close(...future.stdout)
[17:42:05.460]         }, add = TRUE)
[17:42:05.460]     }
[17:42:05.460]     ...future.frame <- base::sys.nframe()
[17:42:05.460]     ...future.conditions <- base::list()
[17:42:05.460]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.460]     if (FALSE) {
[17:42:05.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.460]     }
[17:42:05.460]     ...future.result <- base::tryCatch({
[17:42:05.460]         base::withCallingHandlers({
[17:42:05.460]             ...future.value <- base::withVisible(base::local({
[17:42:05.460]                 withCallingHandlers({
[17:42:05.460]                   42
[17:42:05.460]                 }, immediateCondition = function(cond) {
[17:42:05.460]                   save_rds <- function (object, pathname, ...) 
[17:42:05.460]                   {
[17:42:05.460]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.460]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.460]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.460]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.460]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.460]                         fi_tmp[["mtime"]])
[17:42:05.460]                     }
[17:42:05.460]                     tryCatch({
[17:42:05.460]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.460]                     }, error = function(ex) {
[17:42:05.460]                       msg <- conditionMessage(ex)
[17:42:05.460]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.460]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.460]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.460]                         fi_tmp[["mtime"]], msg)
[17:42:05.460]                       ex$message <- msg
[17:42:05.460]                       stop(ex)
[17:42:05.460]                     })
[17:42:05.460]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.460]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.460]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.460]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.460]                       fi <- file.info(pathname)
[17:42:05.460]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.460]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.460]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.460]                         fi[["size"]], fi[["mtime"]])
[17:42:05.460]                       stop(msg)
[17:42:05.460]                     }
[17:42:05.460]                     invisible(pathname)
[17:42:05.460]                   }
[17:42:05.460]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.460]                     rootPath = tempdir()) 
[17:42:05.460]                   {
[17:42:05.460]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.460]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.460]                       tmpdir = path, fileext = ".rds")
[17:42:05.460]                     save_rds(obj, file)
[17:42:05.460]                   }
[17:42:05.460]                   saveImmediateCondition(cond, path = "/tmp/RtmpegRMx7/.future/immediateConditions")
[17:42:05.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.460]                   {
[17:42:05.460]                     inherits <- base::inherits
[17:42:05.460]                     invokeRestart <- base::invokeRestart
[17:42:05.460]                     is.null <- base::is.null
[17:42:05.460]                     muffled <- FALSE
[17:42:05.460]                     if (inherits(cond, "message")) {
[17:42:05.460]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.460]                       if (muffled) 
[17:42:05.460]                         invokeRestart("muffleMessage")
[17:42:05.460]                     }
[17:42:05.460]                     else if (inherits(cond, "warning")) {
[17:42:05.460]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.460]                       if (muffled) 
[17:42:05.460]                         invokeRestart("muffleWarning")
[17:42:05.460]                     }
[17:42:05.460]                     else if (inherits(cond, "condition")) {
[17:42:05.460]                       if (!is.null(pattern)) {
[17:42:05.460]                         computeRestarts <- base::computeRestarts
[17:42:05.460]                         grepl <- base::grepl
[17:42:05.460]                         restarts <- computeRestarts(cond)
[17:42:05.460]                         for (restart in restarts) {
[17:42:05.460]                           name <- restart$name
[17:42:05.460]                           if (is.null(name)) 
[17:42:05.460]                             next
[17:42:05.460]                           if (!grepl(pattern, name)) 
[17:42:05.460]                             next
[17:42:05.460]                           invokeRestart(restart)
[17:42:05.460]                           muffled <- TRUE
[17:42:05.460]                           break
[17:42:05.460]                         }
[17:42:05.460]                       }
[17:42:05.460]                     }
[17:42:05.460]                     invisible(muffled)
[17:42:05.460]                   }
[17:42:05.460]                   muffleCondition(cond)
[17:42:05.460]                 })
[17:42:05.460]             }))
[17:42:05.460]             future::FutureResult(value = ...future.value$value, 
[17:42:05.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.460]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.460]                     ...future.globalenv.names))
[17:42:05.460]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.460]         }, condition = base::local({
[17:42:05.460]             c <- base::c
[17:42:05.460]             inherits <- base::inherits
[17:42:05.460]             invokeRestart <- base::invokeRestart
[17:42:05.460]             length <- base::length
[17:42:05.460]             list <- base::list
[17:42:05.460]             seq.int <- base::seq.int
[17:42:05.460]             signalCondition <- base::signalCondition
[17:42:05.460]             sys.calls <- base::sys.calls
[17:42:05.460]             `[[` <- base::`[[`
[17:42:05.460]             `+` <- base::`+`
[17:42:05.460]             `<<-` <- base::`<<-`
[17:42:05.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.460]                   3L)]
[17:42:05.460]             }
[17:42:05.460]             function(cond) {
[17:42:05.460]                 is_error <- inherits(cond, "error")
[17:42:05.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.460]                   NULL)
[17:42:05.460]                 if (is_error) {
[17:42:05.460]                   sessionInformation <- function() {
[17:42:05.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.460]                       search = base::search(), system = base::Sys.info())
[17:42:05.460]                   }
[17:42:05.460]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.460]                     cond$call), session = sessionInformation(), 
[17:42:05.460]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.460]                   signalCondition(cond)
[17:42:05.460]                 }
[17:42:05.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.460]                 "immediateCondition"))) {
[17:42:05.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.460]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.460]                   if (TRUE && !signal) {
[17:42:05.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.460]                     {
[17:42:05.460]                       inherits <- base::inherits
[17:42:05.460]                       invokeRestart <- base::invokeRestart
[17:42:05.460]                       is.null <- base::is.null
[17:42:05.460]                       muffled <- FALSE
[17:42:05.460]                       if (inherits(cond, "message")) {
[17:42:05.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.460]                         if (muffled) 
[17:42:05.460]                           invokeRestart("muffleMessage")
[17:42:05.460]                       }
[17:42:05.460]                       else if (inherits(cond, "warning")) {
[17:42:05.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.460]                         if (muffled) 
[17:42:05.460]                           invokeRestart("muffleWarning")
[17:42:05.460]                       }
[17:42:05.460]                       else if (inherits(cond, "condition")) {
[17:42:05.460]                         if (!is.null(pattern)) {
[17:42:05.460]                           computeRestarts <- base::computeRestarts
[17:42:05.460]                           grepl <- base::grepl
[17:42:05.460]                           restarts <- computeRestarts(cond)
[17:42:05.460]                           for (restart in restarts) {
[17:42:05.460]                             name <- restart$name
[17:42:05.460]                             if (is.null(name)) 
[17:42:05.460]                               next
[17:42:05.460]                             if (!grepl(pattern, name)) 
[17:42:05.460]                               next
[17:42:05.460]                             invokeRestart(restart)
[17:42:05.460]                             muffled <- TRUE
[17:42:05.460]                             break
[17:42:05.460]                           }
[17:42:05.460]                         }
[17:42:05.460]                       }
[17:42:05.460]                       invisible(muffled)
[17:42:05.460]                     }
[17:42:05.460]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.460]                   }
[17:42:05.460]                 }
[17:42:05.460]                 else {
[17:42:05.460]                   if (TRUE) {
[17:42:05.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.460]                     {
[17:42:05.460]                       inherits <- base::inherits
[17:42:05.460]                       invokeRestart <- base::invokeRestart
[17:42:05.460]                       is.null <- base::is.null
[17:42:05.460]                       muffled <- FALSE
[17:42:05.460]                       if (inherits(cond, "message")) {
[17:42:05.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.460]                         if (muffled) 
[17:42:05.460]                           invokeRestart("muffleMessage")
[17:42:05.460]                       }
[17:42:05.460]                       else if (inherits(cond, "warning")) {
[17:42:05.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.460]                         if (muffled) 
[17:42:05.460]                           invokeRestart("muffleWarning")
[17:42:05.460]                       }
[17:42:05.460]                       else if (inherits(cond, "condition")) {
[17:42:05.460]                         if (!is.null(pattern)) {
[17:42:05.460]                           computeRestarts <- base::computeRestarts
[17:42:05.460]                           grepl <- base::grepl
[17:42:05.460]                           restarts <- computeRestarts(cond)
[17:42:05.460]                           for (restart in restarts) {
[17:42:05.460]                             name <- restart$name
[17:42:05.460]                             if (is.null(name)) 
[17:42:05.460]                               next
[17:42:05.460]                             if (!grepl(pattern, name)) 
[17:42:05.460]                               next
[17:42:05.460]                             invokeRestart(restart)
[17:42:05.460]                             muffled <- TRUE
[17:42:05.460]                             break
[17:42:05.460]                           }
[17:42:05.460]                         }
[17:42:05.460]                       }
[17:42:05.460]                       invisible(muffled)
[17:42:05.460]                     }
[17:42:05.460]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.460]                   }
[17:42:05.460]                 }
[17:42:05.460]             }
[17:42:05.460]         }))
[17:42:05.460]     }, error = function(ex) {
[17:42:05.460]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.460]                 ...future.rng), started = ...future.startTime, 
[17:42:05.460]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.460]             version = "1.8"), class = "FutureResult")
[17:42:05.460]     }, finally = {
[17:42:05.460]         if (!identical(...future.workdir, getwd())) 
[17:42:05.460]             setwd(...future.workdir)
[17:42:05.460]         {
[17:42:05.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.460]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.460]             }
[17:42:05.460]             base::options(...future.oldOptions)
[17:42:05.460]             if (.Platform$OS.type == "windows") {
[17:42:05.460]                 old_names <- names(...future.oldEnvVars)
[17:42:05.460]                 envs <- base::Sys.getenv()
[17:42:05.460]                 names <- names(envs)
[17:42:05.460]                 common <- intersect(names, old_names)
[17:42:05.460]                 added <- setdiff(names, old_names)
[17:42:05.460]                 removed <- setdiff(old_names, names)
[17:42:05.460]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.460]                   envs[common]]
[17:42:05.460]                 NAMES <- toupper(changed)
[17:42:05.460]                 args <- list()
[17:42:05.460]                 for (kk in seq_along(NAMES)) {
[17:42:05.460]                   name <- changed[[kk]]
[17:42:05.460]                   NAME <- NAMES[[kk]]
[17:42:05.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.460]                     next
[17:42:05.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.460]                 }
[17:42:05.460]                 NAMES <- toupper(added)
[17:42:05.460]                 for (kk in seq_along(NAMES)) {
[17:42:05.460]                   name <- added[[kk]]
[17:42:05.460]                   NAME <- NAMES[[kk]]
[17:42:05.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.460]                     next
[17:42:05.460]                   args[[name]] <- ""
[17:42:05.460]                 }
[17:42:05.460]                 NAMES <- toupper(removed)
[17:42:05.460]                 for (kk in seq_along(NAMES)) {
[17:42:05.460]                   name <- removed[[kk]]
[17:42:05.460]                   NAME <- NAMES[[kk]]
[17:42:05.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.460]                     next
[17:42:05.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.460]                 }
[17:42:05.460]                 if (length(args) > 0) 
[17:42:05.460]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.460]             }
[17:42:05.460]             else {
[17:42:05.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.460]             }
[17:42:05.460]             {
[17:42:05.460]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.460]                   0L) {
[17:42:05.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.460]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.460]                   base::options(opts)
[17:42:05.460]                 }
[17:42:05.460]                 {
[17:42:05.460]                   {
[17:42:05.460]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.460]                     NULL
[17:42:05.460]                   }
[17:42:05.460]                   options(future.plan = NULL)
[17:42:05.460]                   if (is.na(NA_character_)) 
[17:42:05.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.460]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:05.460]                     envir = parent.frame()) 
[17:42:05.460]                   {
[17:42:05.460]                     default_workers <- missing(workers)
[17:42:05.460]                     if (is.function(workers)) 
[17:42:05.460]                       workers <- workers()
[17:42:05.460]                     workers <- structure(as.integer(workers), 
[17:42:05.460]                       class = class(workers))
[17:42:05.460]                     stop_if_not(is.finite(workers), workers >= 
[17:42:05.460]                       1L)
[17:42:05.460]                     if ((workers == 1L && !inherits(workers, 
[17:42:05.460]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:05.460]                       if (default_workers) 
[17:42:05.460]                         supportsMulticore(warn = TRUE)
[17:42:05.460]                       return(sequential(..., envir = envir))
[17:42:05.460]                     }
[17:42:05.460]                     oopts <- options(mc.cores = workers)
[17:42:05.460]                     on.exit(options(oopts))
[17:42:05.460]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:05.460]                       envir = envir)
[17:42:05.460]                     if (!future$lazy) 
[17:42:05.460]                       future <- run(future)
[17:42:05.460]                     invisible(future)
[17:42:05.460]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.460]                 }
[17:42:05.460]             }
[17:42:05.460]         }
[17:42:05.460]     })
[17:42:05.460]     if (TRUE) {
[17:42:05.460]         base::sink(type = "output", split = FALSE)
[17:42:05.460]         if (TRUE) {
[17:42:05.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.460]         }
[17:42:05.460]         else {
[17:42:05.460]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.460]         }
[17:42:05.460]         base::close(...future.stdout)
[17:42:05.460]         ...future.stdout <- NULL
[17:42:05.460]     }
[17:42:05.460]     ...future.result$conditions <- ...future.conditions
[17:42:05.460]     ...future.result$finished <- base::Sys.time()
[17:42:05.460]     ...future.result
[17:42:05.460] }
[17:42:05.462] requestCore(): workers = 2
[17:42:05.465] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[17:42:05.466] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:05.466] List of future strategies:
[17:42:05.466] 1. sequential:
[17:42:05.466]    - args: function (..., envir = parent.frame())
[17:42:05.466]    - tweaked: FALSE
[17:42:05.466]    - call: NULL
[17:42:05.474] plan(): nbrOfWorkers() = 1
[17:42:05.475] plan(): Setting new future strategy stack:
[17:42:05.476] List of future strategies:
[17:42:05.476] 1. multicore:
[17:42:05.476]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.476]    - tweaked: FALSE
[17:42:05.476]    - call: plan(strategy)
[17:42:05.481] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.488] getGlobalsAndPackages() ...
[17:42:05.488] Searching for globals...
[17:42:05.489] 
[17:42:05.489] Searching for globals ... DONE
[17:42:05.489] - globals: [0] <none>
[17:42:05.489] getGlobalsAndPackages() ... DONE
[17:42:05.489] run() for ‘Future’ ...
[17:42:05.489] - state: ‘created’
[17:42:05.490] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:05.493] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.494] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:05.494]   - Field: ‘label’
[17:42:05.494]   - Field: ‘local’
[17:42:05.494]   - Field: ‘owner’
[17:42:05.494]   - Field: ‘envir’
[17:42:05.494]   - Field: ‘workers’
[17:42:05.494]   - Field: ‘packages’
[17:42:05.494]   - Field: ‘gc’
[17:42:05.495]   - Field: ‘job’
[17:42:05.495]   - Field: ‘conditions’
[17:42:05.495]   - Field: ‘expr’
[17:42:05.495]   - Field: ‘uuid’
[17:42:05.495]   - Field: ‘seed’
[17:42:05.495]   - Field: ‘version’
[17:42:05.495]   - Field: ‘result’
[17:42:05.495]   - Field: ‘asynchronous’
[17:42:05.496]   - Field: ‘calls’
[17:42:05.496]   - Field: ‘globals’
[17:42:05.496]   - Field: ‘stdout’
[17:42:05.496]   - Field: ‘earlySignal’
[17:42:05.496]   - Field: ‘lazy’
[17:42:05.496]   - Field: ‘state’
[17:42:05.496] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:05.496] - Launch lazy future ...
[17:42:05.497] Packages needed by the future expression (n = 0): <none>
[17:42:05.497] Packages needed by future strategies (n = 0): <none>
[17:42:05.497] {
[17:42:05.497]     {
[17:42:05.497]         {
[17:42:05.497]             ...future.startTime <- base::Sys.time()
[17:42:05.497]             {
[17:42:05.497]                 {
[17:42:05.497]                   {
[17:42:05.497]                     {
[17:42:05.497]                       base::local({
[17:42:05.497]                         has_future <- base::requireNamespace("future", 
[17:42:05.497]                           quietly = TRUE)
[17:42:05.497]                         if (has_future) {
[17:42:05.497]                           ns <- base::getNamespace("future")
[17:42:05.497]                           version <- ns[[".package"]][["version"]]
[17:42:05.497]                           if (is.null(version)) 
[17:42:05.497]                             version <- utils::packageVersion("future")
[17:42:05.497]                         }
[17:42:05.497]                         else {
[17:42:05.497]                           version <- NULL
[17:42:05.497]                         }
[17:42:05.497]                         if (!has_future || version < "1.8.0") {
[17:42:05.497]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.497]                             "", base::R.version$version.string), 
[17:42:05.497]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.497]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.497]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.497]                               "release", "version")], collapse = " "), 
[17:42:05.497]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.497]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.497]                             info)
[17:42:05.497]                           info <- base::paste(info, collapse = "; ")
[17:42:05.497]                           if (!has_future) {
[17:42:05.497]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.497]                               info)
[17:42:05.497]                           }
[17:42:05.497]                           else {
[17:42:05.497]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.497]                               info, version)
[17:42:05.497]                           }
[17:42:05.497]                           base::stop(msg)
[17:42:05.497]                         }
[17:42:05.497]                       })
[17:42:05.497]                     }
[17:42:05.497]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.497]                     base::options(mc.cores = 1L)
[17:42:05.497]                   }
[17:42:05.497]                   options(future.plan = NULL)
[17:42:05.497]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.497]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.497]                 }
[17:42:05.497]                 ...future.workdir <- getwd()
[17:42:05.497]             }
[17:42:05.497]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.497]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.497]         }
[17:42:05.497]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.497]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.497]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.497]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.497]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.497]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.497]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.497]             base::names(...future.oldOptions))
[17:42:05.497]     }
[17:42:05.497]     if (FALSE) {
[17:42:05.497]     }
[17:42:05.497]     else {
[17:42:05.497]         if (TRUE) {
[17:42:05.497]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.497]                 open = "w")
[17:42:05.497]         }
[17:42:05.497]         else {
[17:42:05.497]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.497]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.497]         }
[17:42:05.497]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.497]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.497]             base::sink(type = "output", split = FALSE)
[17:42:05.497]             base::close(...future.stdout)
[17:42:05.497]         }, add = TRUE)
[17:42:05.497]     }
[17:42:05.497]     ...future.frame <- base::sys.nframe()
[17:42:05.497]     ...future.conditions <- base::list()
[17:42:05.497]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.497]     if (FALSE) {
[17:42:05.497]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.497]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.497]     }
[17:42:05.497]     ...future.result <- base::tryCatch({
[17:42:05.497]         base::withCallingHandlers({
[17:42:05.497]             ...future.value <- base::withVisible(base::local({
[17:42:05.497]                 withCallingHandlers({
[17:42:05.497]                   42
[17:42:05.497]                 }, immediateCondition = function(cond) {
[17:42:05.497]                   save_rds <- function (object, pathname, ...) 
[17:42:05.497]                   {
[17:42:05.497]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.497]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.497]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.497]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.497]                         fi_tmp[["mtime"]])
[17:42:05.497]                     }
[17:42:05.497]                     tryCatch({
[17:42:05.497]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.497]                     }, error = function(ex) {
[17:42:05.497]                       msg <- conditionMessage(ex)
[17:42:05.497]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.497]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.497]                         fi_tmp[["mtime"]], msg)
[17:42:05.497]                       ex$message <- msg
[17:42:05.497]                       stop(ex)
[17:42:05.497]                     })
[17:42:05.497]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.497]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.497]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.497]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.497]                       fi <- file.info(pathname)
[17:42:05.497]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.497]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.497]                         fi[["size"]], fi[["mtime"]])
[17:42:05.497]                       stop(msg)
[17:42:05.497]                     }
[17:42:05.497]                     invisible(pathname)
[17:42:05.497]                   }
[17:42:05.497]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.497]                     rootPath = tempdir()) 
[17:42:05.497]                   {
[17:42:05.497]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.497]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.497]                       tmpdir = path, fileext = ".rds")
[17:42:05.497]                     save_rds(obj, file)
[17:42:05.497]                   }
[17:42:05.497]                   saveImmediateCondition(cond, path = "/tmp/RtmpegRMx7/.future/immediateConditions")
[17:42:05.497]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.497]                   {
[17:42:05.497]                     inherits <- base::inherits
[17:42:05.497]                     invokeRestart <- base::invokeRestart
[17:42:05.497]                     is.null <- base::is.null
[17:42:05.497]                     muffled <- FALSE
[17:42:05.497]                     if (inherits(cond, "message")) {
[17:42:05.497]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.497]                       if (muffled) 
[17:42:05.497]                         invokeRestart("muffleMessage")
[17:42:05.497]                     }
[17:42:05.497]                     else if (inherits(cond, "warning")) {
[17:42:05.497]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.497]                       if (muffled) 
[17:42:05.497]                         invokeRestart("muffleWarning")
[17:42:05.497]                     }
[17:42:05.497]                     else if (inherits(cond, "condition")) {
[17:42:05.497]                       if (!is.null(pattern)) {
[17:42:05.497]                         computeRestarts <- base::computeRestarts
[17:42:05.497]                         grepl <- base::grepl
[17:42:05.497]                         restarts <- computeRestarts(cond)
[17:42:05.497]                         for (restart in restarts) {
[17:42:05.497]                           name <- restart$name
[17:42:05.497]                           if (is.null(name)) 
[17:42:05.497]                             next
[17:42:05.497]                           if (!grepl(pattern, name)) 
[17:42:05.497]                             next
[17:42:05.497]                           invokeRestart(restart)
[17:42:05.497]                           muffled <- TRUE
[17:42:05.497]                           break
[17:42:05.497]                         }
[17:42:05.497]                       }
[17:42:05.497]                     }
[17:42:05.497]                     invisible(muffled)
[17:42:05.497]                   }
[17:42:05.497]                   muffleCondition(cond)
[17:42:05.497]                 })
[17:42:05.497]             }))
[17:42:05.497]             future::FutureResult(value = ...future.value$value, 
[17:42:05.497]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.497]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.497]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.497]                     ...future.globalenv.names))
[17:42:05.497]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.497]         }, condition = base::local({
[17:42:05.497]             c <- base::c
[17:42:05.497]             inherits <- base::inherits
[17:42:05.497]             invokeRestart <- base::invokeRestart
[17:42:05.497]             length <- base::length
[17:42:05.497]             list <- base::list
[17:42:05.497]             seq.int <- base::seq.int
[17:42:05.497]             signalCondition <- base::signalCondition
[17:42:05.497]             sys.calls <- base::sys.calls
[17:42:05.497]             `[[` <- base::`[[`
[17:42:05.497]             `+` <- base::`+`
[17:42:05.497]             `<<-` <- base::`<<-`
[17:42:05.497]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.497]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.497]                   3L)]
[17:42:05.497]             }
[17:42:05.497]             function(cond) {
[17:42:05.497]                 is_error <- inherits(cond, "error")
[17:42:05.497]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.497]                   NULL)
[17:42:05.497]                 if (is_error) {
[17:42:05.497]                   sessionInformation <- function() {
[17:42:05.497]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.497]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.497]                       search = base::search(), system = base::Sys.info())
[17:42:05.497]                   }
[17:42:05.497]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.497]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.497]                     cond$call), session = sessionInformation(), 
[17:42:05.497]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.497]                   signalCondition(cond)
[17:42:05.497]                 }
[17:42:05.497]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.497]                 "immediateCondition"))) {
[17:42:05.497]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.497]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.497]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.497]                   if (TRUE && !signal) {
[17:42:05.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.497]                     {
[17:42:05.497]                       inherits <- base::inherits
[17:42:05.497]                       invokeRestart <- base::invokeRestart
[17:42:05.497]                       is.null <- base::is.null
[17:42:05.497]                       muffled <- FALSE
[17:42:05.497]                       if (inherits(cond, "message")) {
[17:42:05.497]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.497]                         if (muffled) 
[17:42:05.497]                           invokeRestart("muffleMessage")
[17:42:05.497]                       }
[17:42:05.497]                       else if (inherits(cond, "warning")) {
[17:42:05.497]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.497]                         if (muffled) 
[17:42:05.497]                           invokeRestart("muffleWarning")
[17:42:05.497]                       }
[17:42:05.497]                       else if (inherits(cond, "condition")) {
[17:42:05.497]                         if (!is.null(pattern)) {
[17:42:05.497]                           computeRestarts <- base::computeRestarts
[17:42:05.497]                           grepl <- base::grepl
[17:42:05.497]                           restarts <- computeRestarts(cond)
[17:42:05.497]                           for (restart in restarts) {
[17:42:05.497]                             name <- restart$name
[17:42:05.497]                             if (is.null(name)) 
[17:42:05.497]                               next
[17:42:05.497]                             if (!grepl(pattern, name)) 
[17:42:05.497]                               next
[17:42:05.497]                             invokeRestart(restart)
[17:42:05.497]                             muffled <- TRUE
[17:42:05.497]                             break
[17:42:05.497]                           }
[17:42:05.497]                         }
[17:42:05.497]                       }
[17:42:05.497]                       invisible(muffled)
[17:42:05.497]                     }
[17:42:05.497]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.497]                   }
[17:42:05.497]                 }
[17:42:05.497]                 else {
[17:42:05.497]                   if (TRUE) {
[17:42:05.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.497]                     {
[17:42:05.497]                       inherits <- base::inherits
[17:42:05.497]                       invokeRestart <- base::invokeRestart
[17:42:05.497]                       is.null <- base::is.null
[17:42:05.497]                       muffled <- FALSE
[17:42:05.497]                       if (inherits(cond, "message")) {
[17:42:05.497]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.497]                         if (muffled) 
[17:42:05.497]                           invokeRestart("muffleMessage")
[17:42:05.497]                       }
[17:42:05.497]                       else if (inherits(cond, "warning")) {
[17:42:05.497]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.497]                         if (muffled) 
[17:42:05.497]                           invokeRestart("muffleWarning")
[17:42:05.497]                       }
[17:42:05.497]                       else if (inherits(cond, "condition")) {
[17:42:05.497]                         if (!is.null(pattern)) {
[17:42:05.497]                           computeRestarts <- base::computeRestarts
[17:42:05.497]                           grepl <- base::grepl
[17:42:05.497]                           restarts <- computeRestarts(cond)
[17:42:05.497]                           for (restart in restarts) {
[17:42:05.497]                             name <- restart$name
[17:42:05.497]                             if (is.null(name)) 
[17:42:05.497]                               next
[17:42:05.497]                             if (!grepl(pattern, name)) 
[17:42:05.497]                               next
[17:42:05.497]                             invokeRestart(restart)
[17:42:05.497]                             muffled <- TRUE
[17:42:05.497]                             break
[17:42:05.497]                           }
[17:42:05.497]                         }
[17:42:05.497]                       }
[17:42:05.497]                       invisible(muffled)
[17:42:05.497]                     }
[17:42:05.497]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.497]                   }
[17:42:05.497]                 }
[17:42:05.497]             }
[17:42:05.497]         }))
[17:42:05.497]     }, error = function(ex) {
[17:42:05.497]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.497]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.497]                 ...future.rng), started = ...future.startTime, 
[17:42:05.497]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.497]             version = "1.8"), class = "FutureResult")
[17:42:05.497]     }, finally = {
[17:42:05.497]         if (!identical(...future.workdir, getwd())) 
[17:42:05.497]             setwd(...future.workdir)
[17:42:05.497]         {
[17:42:05.497]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.497]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.497]             }
[17:42:05.497]             base::options(...future.oldOptions)
[17:42:05.497]             if (.Platform$OS.type == "windows") {
[17:42:05.497]                 old_names <- names(...future.oldEnvVars)
[17:42:05.497]                 envs <- base::Sys.getenv()
[17:42:05.497]                 names <- names(envs)
[17:42:05.497]                 common <- intersect(names, old_names)
[17:42:05.497]                 added <- setdiff(names, old_names)
[17:42:05.497]                 removed <- setdiff(old_names, names)
[17:42:05.497]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.497]                   envs[common]]
[17:42:05.497]                 NAMES <- toupper(changed)
[17:42:05.497]                 args <- list()
[17:42:05.497]                 for (kk in seq_along(NAMES)) {
[17:42:05.497]                   name <- changed[[kk]]
[17:42:05.497]                   NAME <- NAMES[[kk]]
[17:42:05.497]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.497]                     next
[17:42:05.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.497]                 }
[17:42:05.497]                 NAMES <- toupper(added)
[17:42:05.497]                 for (kk in seq_along(NAMES)) {
[17:42:05.497]                   name <- added[[kk]]
[17:42:05.497]                   NAME <- NAMES[[kk]]
[17:42:05.497]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.497]                     next
[17:42:05.497]                   args[[name]] <- ""
[17:42:05.497]                 }
[17:42:05.497]                 NAMES <- toupper(removed)
[17:42:05.497]                 for (kk in seq_along(NAMES)) {
[17:42:05.497]                   name <- removed[[kk]]
[17:42:05.497]                   NAME <- NAMES[[kk]]
[17:42:05.497]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.497]                     next
[17:42:05.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.497]                 }
[17:42:05.497]                 if (length(args) > 0) 
[17:42:05.497]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.497]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.497]             }
[17:42:05.497]             else {
[17:42:05.497]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.497]             }
[17:42:05.497]             {
[17:42:05.497]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.497]                   0L) {
[17:42:05.497]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.497]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.497]                   base::options(opts)
[17:42:05.497]                 }
[17:42:05.497]                 {
[17:42:05.497]                   {
[17:42:05.497]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.497]                     NULL
[17:42:05.497]                   }
[17:42:05.497]                   options(future.plan = NULL)
[17:42:05.497]                   if (is.na(NA_character_)) 
[17:42:05.497]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.497]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.497]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:05.497]                     envir = parent.frame()) 
[17:42:05.497]                   {
[17:42:05.497]                     default_workers <- missing(workers)
[17:42:05.497]                     if (is.function(workers)) 
[17:42:05.497]                       workers <- workers()
[17:42:05.497]                     workers <- structure(as.integer(workers), 
[17:42:05.497]                       class = class(workers))
[17:42:05.497]                     stop_if_not(is.finite(workers), workers >= 
[17:42:05.497]                       1L)
[17:42:05.497]                     if ((workers == 1L && !inherits(workers, 
[17:42:05.497]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:05.497]                       if (default_workers) 
[17:42:05.497]                         supportsMulticore(warn = TRUE)
[17:42:05.497]                       return(sequential(..., envir = envir))
[17:42:05.497]                     }
[17:42:05.497]                     oopts <- options(mc.cores = workers)
[17:42:05.497]                     on.exit(options(oopts))
[17:42:05.497]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:05.497]                       envir = envir)
[17:42:05.497]                     if (!future$lazy) 
[17:42:05.497]                       future <- run(future)
[17:42:05.497]                     invisible(future)
[17:42:05.497]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.497]                 }
[17:42:05.497]             }
[17:42:05.497]         }
[17:42:05.497]     })
[17:42:05.497]     if (TRUE) {
[17:42:05.497]         base::sink(type = "output", split = FALSE)
[17:42:05.497]         if (TRUE) {
[17:42:05.497]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.497]         }
[17:42:05.497]         else {
[17:42:05.497]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.497]         }
[17:42:05.497]         base::close(...future.stdout)
[17:42:05.497]         ...future.stdout <- NULL
[17:42:05.497]     }
[17:42:05.497]     ...future.result$conditions <- ...future.conditions
[17:42:05.497]     ...future.result$finished <- base::Sys.time()
[17:42:05.497]     ...future.result
[17:42:05.497] }
[17:42:05.500] requestCore(): workers = 2
[17:42:05.502] MulticoreFuture started
[17:42:05.502] - Launch lazy future ... done
[17:42:05.502] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:05.503] plan(): Setting new future strategy stack:
[17:42:05.503] List of future strategies:
[17:42:05.503] 1. sequential:
[17:42:05.503]    - args: function (..., envir = parent.frame())
[17:42:05.503]    - tweaked: FALSE
[17:42:05.503]    - call: NULL
[17:42:05.504] plan(): nbrOfWorkers() = 1
[17:42:05.506] plan(): Setting new future strategy stack:
[17:42:05.506] List of future strategies:
[17:42:05.506] 1. multicore:
[17:42:05.506]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.506]    - tweaked: FALSE
[17:42:05.506]    - call: plan(strategy)
[17:42:05.511] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.513] getGlobalsAndPackages() ...
[17:42:05.514] Searching for globals...
[17:42:05.515] - globals found: [1] ‘{’
[17:42:05.515] Searching for globals ... DONE
[17:42:05.515] Resolving globals: FALSE
[17:42:05.516] 
[17:42:05.516] 
[17:42:05.516] getGlobalsAndPackages() ... DONE
[17:42:05.516] run() for ‘Future’ ...
[17:42:05.516] - state: ‘created’
[17:42:05.517] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:05.521] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.521] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:05.521]   - Field: ‘label’
[17:42:05.521]   - Field: ‘local’
[17:42:05.521]   - Field: ‘owner’
[17:42:05.521]   - Field: ‘envir’
[17:42:05.522]   - Field: ‘workers’
[17:42:05.522]   - Field: ‘packages’
[17:42:05.522]   - Field: ‘gc’
[17:42:05.522]   - Field: ‘job’
[17:42:05.522]   - Field: ‘conditions’
[17:42:05.522]   - Field: ‘expr’
[17:42:05.522]   - Field: ‘uuid’
[17:42:05.522]   - Field: ‘seed’
[17:42:05.522]   - Field: ‘version’
[17:42:05.523]   - Field: ‘result’
[17:42:05.523]   - Field: ‘asynchronous’
[17:42:05.523]   - Field: ‘calls’
[17:42:05.523]   - Field: ‘globals’
[17:42:05.523]   - Field: ‘stdout’
[17:42:05.523]   - Field: ‘earlySignal’
[17:42:05.523]   - Field: ‘lazy’
[17:42:05.523]   - Field: ‘state’
[17:42:05.523] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:05.524] - Launch lazy future ...
[17:42:05.524] Packages needed by the future expression (n = 0): <none>
[17:42:05.524] Packages needed by future strategies (n = 0): <none>
[17:42:05.525] {
[17:42:05.525]     {
[17:42:05.525]         {
[17:42:05.525]             ...future.startTime <- base::Sys.time()
[17:42:05.525]             {
[17:42:05.525]                 {
[17:42:05.525]                   {
[17:42:05.525]                     {
[17:42:05.525]                       base::local({
[17:42:05.525]                         has_future <- base::requireNamespace("future", 
[17:42:05.525]                           quietly = TRUE)
[17:42:05.525]                         if (has_future) {
[17:42:05.525]                           ns <- base::getNamespace("future")
[17:42:05.525]                           version <- ns[[".package"]][["version"]]
[17:42:05.525]                           if (is.null(version)) 
[17:42:05.525]                             version <- utils::packageVersion("future")
[17:42:05.525]                         }
[17:42:05.525]                         else {
[17:42:05.525]                           version <- NULL
[17:42:05.525]                         }
[17:42:05.525]                         if (!has_future || version < "1.8.0") {
[17:42:05.525]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.525]                             "", base::R.version$version.string), 
[17:42:05.525]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.525]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.525]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.525]                               "release", "version")], collapse = " "), 
[17:42:05.525]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.525]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.525]                             info)
[17:42:05.525]                           info <- base::paste(info, collapse = "; ")
[17:42:05.525]                           if (!has_future) {
[17:42:05.525]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.525]                               info)
[17:42:05.525]                           }
[17:42:05.525]                           else {
[17:42:05.525]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.525]                               info, version)
[17:42:05.525]                           }
[17:42:05.525]                           base::stop(msg)
[17:42:05.525]                         }
[17:42:05.525]                       })
[17:42:05.525]                     }
[17:42:05.525]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.525]                     base::options(mc.cores = 1L)
[17:42:05.525]                   }
[17:42:05.525]                   options(future.plan = NULL)
[17:42:05.525]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.525]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.525]                 }
[17:42:05.525]                 ...future.workdir <- getwd()
[17:42:05.525]             }
[17:42:05.525]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.525]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.525]         }
[17:42:05.525]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.525]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.525]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.525]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.525]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.525]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.525]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.525]             base::names(...future.oldOptions))
[17:42:05.525]     }
[17:42:05.525]     if (FALSE) {
[17:42:05.525]     }
[17:42:05.525]     else {
[17:42:05.525]         if (TRUE) {
[17:42:05.525]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.525]                 open = "w")
[17:42:05.525]         }
[17:42:05.525]         else {
[17:42:05.525]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.525]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.525]         }
[17:42:05.525]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.525]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.525]             base::sink(type = "output", split = FALSE)
[17:42:05.525]             base::close(...future.stdout)
[17:42:05.525]         }, add = TRUE)
[17:42:05.525]     }
[17:42:05.525]     ...future.frame <- base::sys.nframe()
[17:42:05.525]     ...future.conditions <- base::list()
[17:42:05.525]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.525]     if (FALSE) {
[17:42:05.525]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.525]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.525]     }
[17:42:05.525]     ...future.result <- base::tryCatch({
[17:42:05.525]         base::withCallingHandlers({
[17:42:05.525]             ...future.value <- base::withVisible(base::local({
[17:42:05.525]                 withCallingHandlers({
[17:42:05.525]                   {
[17:42:05.525]                     42
[17:42:05.525]                   }
[17:42:05.525]                 }, immediateCondition = function(cond) {
[17:42:05.525]                   save_rds <- function (object, pathname, ...) 
[17:42:05.525]                   {
[17:42:05.525]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.525]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.525]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.525]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.525]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.525]                         fi_tmp[["mtime"]])
[17:42:05.525]                     }
[17:42:05.525]                     tryCatch({
[17:42:05.525]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.525]                     }, error = function(ex) {
[17:42:05.525]                       msg <- conditionMessage(ex)
[17:42:05.525]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.525]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.525]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.525]                         fi_tmp[["mtime"]], msg)
[17:42:05.525]                       ex$message <- msg
[17:42:05.525]                       stop(ex)
[17:42:05.525]                     })
[17:42:05.525]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.525]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.525]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.525]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.525]                       fi <- file.info(pathname)
[17:42:05.525]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.525]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.525]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.525]                         fi[["size"]], fi[["mtime"]])
[17:42:05.525]                       stop(msg)
[17:42:05.525]                     }
[17:42:05.525]                     invisible(pathname)
[17:42:05.525]                   }
[17:42:05.525]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.525]                     rootPath = tempdir()) 
[17:42:05.525]                   {
[17:42:05.525]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.525]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.525]                       tmpdir = path, fileext = ".rds")
[17:42:05.525]                     save_rds(obj, file)
[17:42:05.525]                   }
[17:42:05.525]                   saveImmediateCondition(cond, path = "/tmp/RtmpegRMx7/.future/immediateConditions")
[17:42:05.525]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.525]                   {
[17:42:05.525]                     inherits <- base::inherits
[17:42:05.525]                     invokeRestart <- base::invokeRestart
[17:42:05.525]                     is.null <- base::is.null
[17:42:05.525]                     muffled <- FALSE
[17:42:05.525]                     if (inherits(cond, "message")) {
[17:42:05.525]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.525]                       if (muffled) 
[17:42:05.525]                         invokeRestart("muffleMessage")
[17:42:05.525]                     }
[17:42:05.525]                     else if (inherits(cond, "warning")) {
[17:42:05.525]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.525]                       if (muffled) 
[17:42:05.525]                         invokeRestart("muffleWarning")
[17:42:05.525]                     }
[17:42:05.525]                     else if (inherits(cond, "condition")) {
[17:42:05.525]                       if (!is.null(pattern)) {
[17:42:05.525]                         computeRestarts <- base::computeRestarts
[17:42:05.525]                         grepl <- base::grepl
[17:42:05.525]                         restarts <- computeRestarts(cond)
[17:42:05.525]                         for (restart in restarts) {
[17:42:05.525]                           name <- restart$name
[17:42:05.525]                           if (is.null(name)) 
[17:42:05.525]                             next
[17:42:05.525]                           if (!grepl(pattern, name)) 
[17:42:05.525]                             next
[17:42:05.525]                           invokeRestart(restart)
[17:42:05.525]                           muffled <- TRUE
[17:42:05.525]                           break
[17:42:05.525]                         }
[17:42:05.525]                       }
[17:42:05.525]                     }
[17:42:05.525]                     invisible(muffled)
[17:42:05.525]                   }
[17:42:05.525]                   muffleCondition(cond)
[17:42:05.525]                 })
[17:42:05.525]             }))
[17:42:05.525]             future::FutureResult(value = ...future.value$value, 
[17:42:05.525]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.525]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.525]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.525]                     ...future.globalenv.names))
[17:42:05.525]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.525]         }, condition = base::local({
[17:42:05.525]             c <- base::c
[17:42:05.525]             inherits <- base::inherits
[17:42:05.525]             invokeRestart <- base::invokeRestart
[17:42:05.525]             length <- base::length
[17:42:05.525]             list <- base::list
[17:42:05.525]             seq.int <- base::seq.int
[17:42:05.525]             signalCondition <- base::signalCondition
[17:42:05.525]             sys.calls <- base::sys.calls
[17:42:05.525]             `[[` <- base::`[[`
[17:42:05.525]             `+` <- base::`+`
[17:42:05.525]             `<<-` <- base::`<<-`
[17:42:05.525]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.525]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.525]                   3L)]
[17:42:05.525]             }
[17:42:05.525]             function(cond) {
[17:42:05.525]                 is_error <- inherits(cond, "error")
[17:42:05.525]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.525]                   NULL)
[17:42:05.525]                 if (is_error) {
[17:42:05.525]                   sessionInformation <- function() {
[17:42:05.525]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.525]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.525]                       search = base::search(), system = base::Sys.info())
[17:42:05.525]                   }
[17:42:05.525]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.525]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.525]                     cond$call), session = sessionInformation(), 
[17:42:05.525]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.525]                   signalCondition(cond)
[17:42:05.525]                 }
[17:42:05.525]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.525]                 "immediateCondition"))) {
[17:42:05.525]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.525]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.525]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.525]                   if (TRUE && !signal) {
[17:42:05.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.525]                     {
[17:42:05.525]                       inherits <- base::inherits
[17:42:05.525]                       invokeRestart <- base::invokeRestart
[17:42:05.525]                       is.null <- base::is.null
[17:42:05.525]                       muffled <- FALSE
[17:42:05.525]                       if (inherits(cond, "message")) {
[17:42:05.525]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.525]                         if (muffled) 
[17:42:05.525]                           invokeRestart("muffleMessage")
[17:42:05.525]                       }
[17:42:05.525]                       else if (inherits(cond, "warning")) {
[17:42:05.525]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.525]                         if (muffled) 
[17:42:05.525]                           invokeRestart("muffleWarning")
[17:42:05.525]                       }
[17:42:05.525]                       else if (inherits(cond, "condition")) {
[17:42:05.525]                         if (!is.null(pattern)) {
[17:42:05.525]                           computeRestarts <- base::computeRestarts
[17:42:05.525]                           grepl <- base::grepl
[17:42:05.525]                           restarts <- computeRestarts(cond)
[17:42:05.525]                           for (restart in restarts) {
[17:42:05.525]                             name <- restart$name
[17:42:05.525]                             if (is.null(name)) 
[17:42:05.525]                               next
[17:42:05.525]                             if (!grepl(pattern, name)) 
[17:42:05.525]                               next
[17:42:05.525]                             invokeRestart(restart)
[17:42:05.525]                             muffled <- TRUE
[17:42:05.525]                             break
[17:42:05.525]                           }
[17:42:05.525]                         }
[17:42:05.525]                       }
[17:42:05.525]                       invisible(muffled)
[17:42:05.525]                     }
[17:42:05.525]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.525]                   }
[17:42:05.525]                 }
[17:42:05.525]                 else {
[17:42:05.525]                   if (TRUE) {
[17:42:05.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.525]                     {
[17:42:05.525]                       inherits <- base::inherits
[17:42:05.525]                       invokeRestart <- base::invokeRestart
[17:42:05.525]                       is.null <- base::is.null
[17:42:05.525]                       muffled <- FALSE
[17:42:05.525]                       if (inherits(cond, "message")) {
[17:42:05.525]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.525]                         if (muffled) 
[17:42:05.525]                           invokeRestart("muffleMessage")
[17:42:05.525]                       }
[17:42:05.525]                       else if (inherits(cond, "warning")) {
[17:42:05.525]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.525]                         if (muffled) 
[17:42:05.525]                           invokeRestart("muffleWarning")
[17:42:05.525]                       }
[17:42:05.525]                       else if (inherits(cond, "condition")) {
[17:42:05.525]                         if (!is.null(pattern)) {
[17:42:05.525]                           computeRestarts <- base::computeRestarts
[17:42:05.525]                           grepl <- base::grepl
[17:42:05.525]                           restarts <- computeRestarts(cond)
[17:42:05.525]                           for (restart in restarts) {
[17:42:05.525]                             name <- restart$name
[17:42:05.525]                             if (is.null(name)) 
[17:42:05.525]                               next
[17:42:05.525]                             if (!grepl(pattern, name)) 
[17:42:05.525]                               next
[17:42:05.525]                             invokeRestart(restart)
[17:42:05.525]                             muffled <- TRUE
[17:42:05.525]                             break
[17:42:05.525]                           }
[17:42:05.525]                         }
[17:42:05.525]                       }
[17:42:05.525]                       invisible(muffled)
[17:42:05.525]                     }
[17:42:05.525]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.525]                   }
[17:42:05.525]                 }
[17:42:05.525]             }
[17:42:05.525]         }))
[17:42:05.525]     }, error = function(ex) {
[17:42:05.525]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.525]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.525]                 ...future.rng), started = ...future.startTime, 
[17:42:05.525]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.525]             version = "1.8"), class = "FutureResult")
[17:42:05.525]     }, finally = {
[17:42:05.525]         if (!identical(...future.workdir, getwd())) 
[17:42:05.525]             setwd(...future.workdir)
[17:42:05.525]         {
[17:42:05.525]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.525]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.525]             }
[17:42:05.525]             base::options(...future.oldOptions)
[17:42:05.525]             if (.Platform$OS.type == "windows") {
[17:42:05.525]                 old_names <- names(...future.oldEnvVars)
[17:42:05.525]                 envs <- base::Sys.getenv()
[17:42:05.525]                 names <- names(envs)
[17:42:05.525]                 common <- intersect(names, old_names)
[17:42:05.525]                 added <- setdiff(names, old_names)
[17:42:05.525]                 removed <- setdiff(old_names, names)
[17:42:05.525]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.525]                   envs[common]]
[17:42:05.525]                 NAMES <- toupper(changed)
[17:42:05.525]                 args <- list()
[17:42:05.525]                 for (kk in seq_along(NAMES)) {
[17:42:05.525]                   name <- changed[[kk]]
[17:42:05.525]                   NAME <- NAMES[[kk]]
[17:42:05.525]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.525]                     next
[17:42:05.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.525]                 }
[17:42:05.525]                 NAMES <- toupper(added)
[17:42:05.525]                 for (kk in seq_along(NAMES)) {
[17:42:05.525]                   name <- added[[kk]]
[17:42:05.525]                   NAME <- NAMES[[kk]]
[17:42:05.525]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.525]                     next
[17:42:05.525]                   args[[name]] <- ""
[17:42:05.525]                 }
[17:42:05.525]                 NAMES <- toupper(removed)
[17:42:05.525]                 for (kk in seq_along(NAMES)) {
[17:42:05.525]                   name <- removed[[kk]]
[17:42:05.525]                   NAME <- NAMES[[kk]]
[17:42:05.525]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.525]                     next
[17:42:05.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.525]                 }
[17:42:05.525]                 if (length(args) > 0) 
[17:42:05.525]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.525]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.525]             }
[17:42:05.525]             else {
[17:42:05.525]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.525]             }
[17:42:05.525]             {
[17:42:05.525]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.525]                   0L) {
[17:42:05.525]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.525]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.525]                   base::options(opts)
[17:42:05.525]                 }
[17:42:05.525]                 {
[17:42:05.525]                   {
[17:42:05.525]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.525]                     NULL
[17:42:05.525]                   }
[17:42:05.525]                   options(future.plan = NULL)
[17:42:05.525]                   if (is.na(NA_character_)) 
[17:42:05.525]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.525]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.525]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:05.525]                     envir = parent.frame()) 
[17:42:05.525]                   {
[17:42:05.525]                     default_workers <- missing(workers)
[17:42:05.525]                     if (is.function(workers)) 
[17:42:05.525]                       workers <- workers()
[17:42:05.525]                     workers <- structure(as.integer(workers), 
[17:42:05.525]                       class = class(workers))
[17:42:05.525]                     stop_if_not(is.finite(workers), workers >= 
[17:42:05.525]                       1L)
[17:42:05.525]                     if ((workers == 1L && !inherits(workers, 
[17:42:05.525]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:05.525]                       if (default_workers) 
[17:42:05.525]                         supportsMulticore(warn = TRUE)
[17:42:05.525]                       return(sequential(..., envir = envir))
[17:42:05.525]                     }
[17:42:05.525]                     oopts <- options(mc.cores = workers)
[17:42:05.525]                     on.exit(options(oopts))
[17:42:05.525]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:05.525]                       envir = envir)
[17:42:05.525]                     if (!future$lazy) 
[17:42:05.525]                       future <- run(future)
[17:42:05.525]                     invisible(future)
[17:42:05.525]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.525]                 }
[17:42:05.525]             }
[17:42:05.525]         }
[17:42:05.525]     })
[17:42:05.525]     if (TRUE) {
[17:42:05.525]         base::sink(type = "output", split = FALSE)
[17:42:05.525]         if (TRUE) {
[17:42:05.525]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.525]         }
[17:42:05.525]         else {
[17:42:05.525]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.525]         }
[17:42:05.525]         base::close(...future.stdout)
[17:42:05.525]         ...future.stdout <- NULL
[17:42:05.525]     }
[17:42:05.525]     ...future.result$conditions <- ...future.conditions
[17:42:05.525]     ...future.result$finished <- base::Sys.time()
[17:42:05.525]     ...future.result
[17:42:05.525] }
[17:42:05.527] requestCore(): workers = 2
[17:42:05.529] MulticoreFuture started
[17:42:05.529] - Launch lazy future ... done
[17:42:05.530] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
[17:42:05.530] plan(): Setting new future strategy stack:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:05.530] List of future strategies:
[17:42:05.530] 1. sequential:
[17:42:05.530]    - args: function (..., envir = parent.frame())
[17:42:05.530]    - tweaked: FALSE
[17:42:05.530]    - call: NULL
[17:42:05.531] plan(): nbrOfWorkers() = 1
[17:42:05.533] plan(): Setting new future strategy stack:
[17:42:05.533] List of future strategies:
[17:42:05.533] 1. multicore:
[17:42:05.533]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.533]    - tweaked: FALSE
[17:42:05.533]    - call: plan(strategy)
[17:42:05.538] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.544] getGlobalsAndPackages() ...
[17:42:05.545] 
[17:42:05.545] - globals: [0] <none>
[17:42:05.545] getGlobalsAndPackages() ... DONE
[17:42:05.545] Packages needed by the future expression (n = 0): <none>
[17:42:05.546] Packages needed by future strategies (n = 0): <none>
[17:42:05.546] {
[17:42:05.546]     {
[17:42:05.546]         {
[17:42:05.546]             ...future.startTime <- base::Sys.time()
[17:42:05.546]             {
[17:42:05.546]                 {
[17:42:05.546]                   {
[17:42:05.546]                     {
[17:42:05.546]                       base::local({
[17:42:05.546]                         has_future <- base::requireNamespace("future", 
[17:42:05.546]                           quietly = TRUE)
[17:42:05.546]                         if (has_future) {
[17:42:05.546]                           ns <- base::getNamespace("future")
[17:42:05.546]                           version <- ns[[".package"]][["version"]]
[17:42:05.546]                           if (is.null(version)) 
[17:42:05.546]                             version <- utils::packageVersion("future")
[17:42:05.546]                         }
[17:42:05.546]                         else {
[17:42:05.546]                           version <- NULL
[17:42:05.546]                         }
[17:42:05.546]                         if (!has_future || version < "1.8.0") {
[17:42:05.546]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.546]                             "", base::R.version$version.string), 
[17:42:05.546]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.546]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.546]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.546]                               "release", "version")], collapse = " "), 
[17:42:05.546]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.546]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.546]                             info)
[17:42:05.546]                           info <- base::paste(info, collapse = "; ")
[17:42:05.546]                           if (!has_future) {
[17:42:05.546]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.546]                               info)
[17:42:05.546]                           }
[17:42:05.546]                           else {
[17:42:05.546]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.546]                               info, version)
[17:42:05.546]                           }
[17:42:05.546]                           base::stop(msg)
[17:42:05.546]                         }
[17:42:05.546]                       })
[17:42:05.546]                     }
[17:42:05.546]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.546]                     base::options(mc.cores = 1L)
[17:42:05.546]                   }
[17:42:05.546]                   options(future.plan = NULL)
[17:42:05.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.546]                 }
[17:42:05.546]                 ...future.workdir <- getwd()
[17:42:05.546]             }
[17:42:05.546]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.546]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.546]         }
[17:42:05.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.546]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.546]             base::names(...future.oldOptions))
[17:42:05.546]     }
[17:42:05.546]     if (FALSE) {
[17:42:05.546]     }
[17:42:05.546]     else {
[17:42:05.546]         if (TRUE) {
[17:42:05.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.546]                 open = "w")
[17:42:05.546]         }
[17:42:05.546]         else {
[17:42:05.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.546]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.546]         }
[17:42:05.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.546]             base::sink(type = "output", split = FALSE)
[17:42:05.546]             base::close(...future.stdout)
[17:42:05.546]         }, add = TRUE)
[17:42:05.546]     }
[17:42:05.546]     ...future.frame <- base::sys.nframe()
[17:42:05.546]     ...future.conditions <- base::list()
[17:42:05.546]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.546]     if (FALSE) {
[17:42:05.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.546]     }
[17:42:05.546]     ...future.result <- base::tryCatch({
[17:42:05.546]         base::withCallingHandlers({
[17:42:05.546]             ...future.value <- base::withVisible(base::local({
[17:42:05.546]                 withCallingHandlers({
[17:42:05.546]                   42
[17:42:05.546]                 }, immediateCondition = function(cond) {
[17:42:05.546]                   save_rds <- function (object, pathname, ...) 
[17:42:05.546]                   {
[17:42:05.546]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.546]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.546]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.546]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.546]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.546]                         fi_tmp[["mtime"]])
[17:42:05.546]                     }
[17:42:05.546]                     tryCatch({
[17:42:05.546]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.546]                     }, error = function(ex) {
[17:42:05.546]                       msg <- conditionMessage(ex)
[17:42:05.546]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.546]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.546]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.546]                         fi_tmp[["mtime"]], msg)
[17:42:05.546]                       ex$message <- msg
[17:42:05.546]                       stop(ex)
[17:42:05.546]                     })
[17:42:05.546]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.546]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.546]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.546]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.546]                       fi <- file.info(pathname)
[17:42:05.546]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.546]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.546]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.546]                         fi[["size"]], fi[["mtime"]])
[17:42:05.546]                       stop(msg)
[17:42:05.546]                     }
[17:42:05.546]                     invisible(pathname)
[17:42:05.546]                   }
[17:42:05.546]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.546]                     rootPath = tempdir()) 
[17:42:05.546]                   {
[17:42:05.546]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.546]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.546]                       tmpdir = path, fileext = ".rds")
[17:42:05.546]                     save_rds(obj, file)
[17:42:05.546]                   }
[17:42:05.546]                   saveImmediateCondition(cond, path = "/tmp/RtmpegRMx7/.future/immediateConditions")
[17:42:05.546]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.546]                   {
[17:42:05.546]                     inherits <- base::inherits
[17:42:05.546]                     invokeRestart <- base::invokeRestart
[17:42:05.546]                     is.null <- base::is.null
[17:42:05.546]                     muffled <- FALSE
[17:42:05.546]                     if (inherits(cond, "message")) {
[17:42:05.546]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.546]                       if (muffled) 
[17:42:05.546]                         invokeRestart("muffleMessage")
[17:42:05.546]                     }
[17:42:05.546]                     else if (inherits(cond, "warning")) {
[17:42:05.546]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.546]                       if (muffled) 
[17:42:05.546]                         invokeRestart("muffleWarning")
[17:42:05.546]                     }
[17:42:05.546]                     else if (inherits(cond, "condition")) {
[17:42:05.546]                       if (!is.null(pattern)) {
[17:42:05.546]                         computeRestarts <- base::computeRestarts
[17:42:05.546]                         grepl <- base::grepl
[17:42:05.546]                         restarts <- computeRestarts(cond)
[17:42:05.546]                         for (restart in restarts) {
[17:42:05.546]                           name <- restart$name
[17:42:05.546]                           if (is.null(name)) 
[17:42:05.546]                             next
[17:42:05.546]                           if (!grepl(pattern, name)) 
[17:42:05.546]                             next
[17:42:05.546]                           invokeRestart(restart)
[17:42:05.546]                           muffled <- TRUE
[17:42:05.546]                           break
[17:42:05.546]                         }
[17:42:05.546]                       }
[17:42:05.546]                     }
[17:42:05.546]                     invisible(muffled)
[17:42:05.546]                   }
[17:42:05.546]                   muffleCondition(cond)
[17:42:05.546]                 })
[17:42:05.546]             }))
[17:42:05.546]             future::FutureResult(value = ...future.value$value, 
[17:42:05.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.546]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.546]                     ...future.globalenv.names))
[17:42:05.546]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.546]         }, condition = base::local({
[17:42:05.546]             c <- base::c
[17:42:05.546]             inherits <- base::inherits
[17:42:05.546]             invokeRestart <- base::invokeRestart
[17:42:05.546]             length <- base::length
[17:42:05.546]             list <- base::list
[17:42:05.546]             seq.int <- base::seq.int
[17:42:05.546]             signalCondition <- base::signalCondition
[17:42:05.546]             sys.calls <- base::sys.calls
[17:42:05.546]             `[[` <- base::`[[`
[17:42:05.546]             `+` <- base::`+`
[17:42:05.546]             `<<-` <- base::`<<-`
[17:42:05.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.546]                   3L)]
[17:42:05.546]             }
[17:42:05.546]             function(cond) {
[17:42:05.546]                 is_error <- inherits(cond, "error")
[17:42:05.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.546]                   NULL)
[17:42:05.546]                 if (is_error) {
[17:42:05.546]                   sessionInformation <- function() {
[17:42:05.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.546]                       search = base::search(), system = base::Sys.info())
[17:42:05.546]                   }
[17:42:05.546]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.546]                     cond$call), session = sessionInformation(), 
[17:42:05.546]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.546]                   signalCondition(cond)
[17:42:05.546]                 }
[17:42:05.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.546]                 "immediateCondition"))) {
[17:42:05.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.546]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.546]                   if (TRUE && !signal) {
[17:42:05.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.546]                     {
[17:42:05.546]                       inherits <- base::inherits
[17:42:05.546]                       invokeRestart <- base::invokeRestart
[17:42:05.546]                       is.null <- base::is.null
[17:42:05.546]                       muffled <- FALSE
[17:42:05.546]                       if (inherits(cond, "message")) {
[17:42:05.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.546]                         if (muffled) 
[17:42:05.546]                           invokeRestart("muffleMessage")
[17:42:05.546]                       }
[17:42:05.546]                       else if (inherits(cond, "warning")) {
[17:42:05.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.546]                         if (muffled) 
[17:42:05.546]                           invokeRestart("muffleWarning")
[17:42:05.546]                       }
[17:42:05.546]                       else if (inherits(cond, "condition")) {
[17:42:05.546]                         if (!is.null(pattern)) {
[17:42:05.546]                           computeRestarts <- base::computeRestarts
[17:42:05.546]                           grepl <- base::grepl
[17:42:05.546]                           restarts <- computeRestarts(cond)
[17:42:05.546]                           for (restart in restarts) {
[17:42:05.546]                             name <- restart$name
[17:42:05.546]                             if (is.null(name)) 
[17:42:05.546]                               next
[17:42:05.546]                             if (!grepl(pattern, name)) 
[17:42:05.546]                               next
[17:42:05.546]                             invokeRestart(restart)
[17:42:05.546]                             muffled <- TRUE
[17:42:05.546]                             break
[17:42:05.546]                           }
[17:42:05.546]                         }
[17:42:05.546]                       }
[17:42:05.546]                       invisible(muffled)
[17:42:05.546]                     }
[17:42:05.546]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.546]                   }
[17:42:05.546]                 }
[17:42:05.546]                 else {
[17:42:05.546]                   if (TRUE) {
[17:42:05.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.546]                     {
[17:42:05.546]                       inherits <- base::inherits
[17:42:05.546]                       invokeRestart <- base::invokeRestart
[17:42:05.546]                       is.null <- base::is.null
[17:42:05.546]                       muffled <- FALSE
[17:42:05.546]                       if (inherits(cond, "message")) {
[17:42:05.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.546]                         if (muffled) 
[17:42:05.546]                           invokeRestart("muffleMessage")
[17:42:05.546]                       }
[17:42:05.546]                       else if (inherits(cond, "warning")) {
[17:42:05.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.546]                         if (muffled) 
[17:42:05.546]                           invokeRestart("muffleWarning")
[17:42:05.546]                       }
[17:42:05.546]                       else if (inherits(cond, "condition")) {
[17:42:05.546]                         if (!is.null(pattern)) {
[17:42:05.546]                           computeRestarts <- base::computeRestarts
[17:42:05.546]                           grepl <- base::grepl
[17:42:05.546]                           restarts <- computeRestarts(cond)
[17:42:05.546]                           for (restart in restarts) {
[17:42:05.546]                             name <- restart$name
[17:42:05.546]                             if (is.null(name)) 
[17:42:05.546]                               next
[17:42:05.546]                             if (!grepl(pattern, name)) 
[17:42:05.546]                               next
[17:42:05.546]                             invokeRestart(restart)
[17:42:05.546]                             muffled <- TRUE
[17:42:05.546]                             break
[17:42:05.546]                           }
[17:42:05.546]                         }
[17:42:05.546]                       }
[17:42:05.546]                       invisible(muffled)
[17:42:05.546]                     }
[17:42:05.546]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.546]                   }
[17:42:05.546]                 }
[17:42:05.546]             }
[17:42:05.546]         }))
[17:42:05.546]     }, error = function(ex) {
[17:42:05.546]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.546]                 ...future.rng), started = ...future.startTime, 
[17:42:05.546]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.546]             version = "1.8"), class = "FutureResult")
[17:42:05.546]     }, finally = {
[17:42:05.546]         if (!identical(...future.workdir, getwd())) 
[17:42:05.546]             setwd(...future.workdir)
[17:42:05.546]         {
[17:42:05.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.546]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.546]             }
[17:42:05.546]             base::options(...future.oldOptions)
[17:42:05.546]             if (.Platform$OS.type == "windows") {
[17:42:05.546]                 old_names <- names(...future.oldEnvVars)
[17:42:05.546]                 envs <- base::Sys.getenv()
[17:42:05.546]                 names <- names(envs)
[17:42:05.546]                 common <- intersect(names, old_names)
[17:42:05.546]                 added <- setdiff(names, old_names)
[17:42:05.546]                 removed <- setdiff(old_names, names)
[17:42:05.546]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.546]                   envs[common]]
[17:42:05.546]                 NAMES <- toupper(changed)
[17:42:05.546]                 args <- list()
[17:42:05.546]                 for (kk in seq_along(NAMES)) {
[17:42:05.546]                   name <- changed[[kk]]
[17:42:05.546]                   NAME <- NAMES[[kk]]
[17:42:05.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.546]                     next
[17:42:05.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.546]                 }
[17:42:05.546]                 NAMES <- toupper(added)
[17:42:05.546]                 for (kk in seq_along(NAMES)) {
[17:42:05.546]                   name <- added[[kk]]
[17:42:05.546]                   NAME <- NAMES[[kk]]
[17:42:05.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.546]                     next
[17:42:05.546]                   args[[name]] <- ""
[17:42:05.546]                 }
[17:42:05.546]                 NAMES <- toupper(removed)
[17:42:05.546]                 for (kk in seq_along(NAMES)) {
[17:42:05.546]                   name <- removed[[kk]]
[17:42:05.546]                   NAME <- NAMES[[kk]]
[17:42:05.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.546]                     next
[17:42:05.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.546]                 }
[17:42:05.546]                 if (length(args) > 0) 
[17:42:05.546]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.546]             }
[17:42:05.546]             else {
[17:42:05.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.546]             }
[17:42:05.546]             {
[17:42:05.546]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.546]                   0L) {
[17:42:05.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.546]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.546]                   base::options(opts)
[17:42:05.546]                 }
[17:42:05.546]                 {
[17:42:05.546]                   {
[17:42:05.546]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.546]                     NULL
[17:42:05.546]                   }
[17:42:05.546]                   options(future.plan = NULL)
[17:42:05.546]                   if (is.na(NA_character_)) 
[17:42:05.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.546]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:05.546]                     envir = parent.frame()) 
[17:42:05.546]                   {
[17:42:05.546]                     default_workers <- missing(workers)
[17:42:05.546]                     if (is.function(workers)) 
[17:42:05.546]                       workers <- workers()
[17:42:05.546]                     workers <- structure(as.integer(workers), 
[17:42:05.546]                       class = class(workers))
[17:42:05.546]                     stop_if_not(is.finite(workers), workers >= 
[17:42:05.546]                       1L)
[17:42:05.546]                     if ((workers == 1L && !inherits(workers, 
[17:42:05.546]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:05.546]                       if (default_workers) 
[17:42:05.546]                         supportsMulticore(warn = TRUE)
[17:42:05.546]                       return(sequential(..., envir = envir))
[17:42:05.546]                     }
[17:42:05.546]                     oopts <- options(mc.cores = workers)
[17:42:05.546]                     on.exit(options(oopts))
[17:42:05.546]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:05.546]                       envir = envir)
[17:42:05.546]                     if (!future$lazy) 
[17:42:05.546]                       future <- run(future)
[17:42:05.546]                     invisible(future)
[17:42:05.546]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.546]                 }
[17:42:05.546]             }
[17:42:05.546]         }
[17:42:05.546]     })
[17:42:05.546]     if (TRUE) {
[17:42:05.546]         base::sink(type = "output", split = FALSE)
[17:42:05.546]         if (TRUE) {
[17:42:05.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.546]         }
[17:42:05.546]         else {
[17:42:05.546]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.546]         }
[17:42:05.546]         base::close(...future.stdout)
[17:42:05.546]         ...future.stdout <- NULL
[17:42:05.546]     }
[17:42:05.546]     ...future.result$conditions <- ...future.conditions
[17:42:05.546]     ...future.result$finished <- base::Sys.time()
[17:42:05.546]     ...future.result
[17:42:05.546] }
[17:42:05.549] requestCore(): workers = 2
[17:42:05.551] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:05.552] plan(): Setting new future strategy stack:
[17:42:05.552] List of future strategies:
[17:42:05.552] 1. sequential:
[17:42:05.552]    - args: function (..., envir = parent.frame())
[17:42:05.552]    - tweaked: FALSE
[17:42:05.552]    - call: NULL
[17:42:05.553] plan(): nbrOfWorkers() = 1
[17:42:05.555] plan(): Setting new future strategy stack:
[17:42:05.555] List of future strategies:
[17:42:05.555] 1. multicore:
[17:42:05.555]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.555]    - tweaked: FALSE
[17:42:05.555]    - call: plan(strategy)
[17:42:05.560] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.562] getGlobalsAndPackages() ...
[17:42:05.562] Searching for globals...
[17:42:05.563] 
[17:42:05.563] Searching for globals ... DONE
[17:42:05.563] - globals: [0] <none>
[17:42:05.563] getGlobalsAndPackages() ... DONE
[17:42:05.564] run() for ‘Future’ ...
[17:42:05.564] - state: ‘created’
[17:42:05.564] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:05.568] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.568] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:05.569]   - Field: ‘label’
[17:42:05.569]   - Field: ‘local’
[17:42:05.569]   - Field: ‘owner’
[17:42:05.569]   - Field: ‘envir’
[17:42:05.569]   - Field: ‘workers’
[17:42:05.569]   - Field: ‘packages’
[17:42:05.569]   - Field: ‘gc’
[17:42:05.569]   - Field: ‘job’
[17:42:05.570]   - Field: ‘conditions’
[17:42:05.570]   - Field: ‘expr’
[17:42:05.570]   - Field: ‘uuid’
[17:42:05.570]   - Field: ‘seed’
[17:42:05.570]   - Field: ‘version’
[17:42:05.570]   - Field: ‘result’
[17:42:05.570]   - Field: ‘asynchronous’
[17:42:05.570]   - Field: ‘calls’
[17:42:05.570]   - Field: ‘globals’
[17:42:05.574]   - Field: ‘stdout’
[17:42:05.574]   - Field: ‘earlySignal’
[17:42:05.574]   - Field: ‘lazy’
[17:42:05.574]   - Field: ‘state’
[17:42:05.574] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:05.574] - Launch lazy future ...
[17:42:05.574] Packages needed by the future expression (n = 0): <none>
[17:42:05.575] Packages needed by future strategies (n = 0): <none>
[17:42:05.576] {
[17:42:05.576]     {
[17:42:05.576]         {
[17:42:05.576]             ...future.startTime <- base::Sys.time()
[17:42:05.576]             {
[17:42:05.576]                 {
[17:42:05.576]                   {
[17:42:05.576]                     {
[17:42:05.576]                       base::local({
[17:42:05.576]                         has_future <- base::requireNamespace("future", 
[17:42:05.576]                           quietly = TRUE)
[17:42:05.576]                         if (has_future) {
[17:42:05.576]                           ns <- base::getNamespace("future")
[17:42:05.576]                           version <- ns[[".package"]][["version"]]
[17:42:05.576]                           if (is.null(version)) 
[17:42:05.576]                             version <- utils::packageVersion("future")
[17:42:05.576]                         }
[17:42:05.576]                         else {
[17:42:05.576]                           version <- NULL
[17:42:05.576]                         }
[17:42:05.576]                         if (!has_future || version < "1.8.0") {
[17:42:05.576]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.576]                             "", base::R.version$version.string), 
[17:42:05.576]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.576]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.576]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.576]                               "release", "version")], collapse = " "), 
[17:42:05.576]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.576]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.576]                             info)
[17:42:05.576]                           info <- base::paste(info, collapse = "; ")
[17:42:05.576]                           if (!has_future) {
[17:42:05.576]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.576]                               info)
[17:42:05.576]                           }
[17:42:05.576]                           else {
[17:42:05.576]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.576]                               info, version)
[17:42:05.576]                           }
[17:42:05.576]                           base::stop(msg)
[17:42:05.576]                         }
[17:42:05.576]                       })
[17:42:05.576]                     }
[17:42:05.576]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.576]                     base::options(mc.cores = 1L)
[17:42:05.576]                   }
[17:42:05.576]                   options(future.plan = NULL)
[17:42:05.576]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.576]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.576]                 }
[17:42:05.576]                 ...future.workdir <- getwd()
[17:42:05.576]             }
[17:42:05.576]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.576]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.576]         }
[17:42:05.576]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.576]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.576]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.576]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.576]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.576]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.576]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.576]             base::names(...future.oldOptions))
[17:42:05.576]     }
[17:42:05.576]     if (FALSE) {
[17:42:05.576]     }
[17:42:05.576]     else {
[17:42:05.576]         if (TRUE) {
[17:42:05.576]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.576]                 open = "w")
[17:42:05.576]         }
[17:42:05.576]         else {
[17:42:05.576]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.576]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.576]         }
[17:42:05.576]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.576]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.576]             base::sink(type = "output", split = FALSE)
[17:42:05.576]             base::close(...future.stdout)
[17:42:05.576]         }, add = TRUE)
[17:42:05.576]     }
[17:42:05.576]     ...future.frame <- base::sys.nframe()
[17:42:05.576]     ...future.conditions <- base::list()
[17:42:05.576]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.576]     if (FALSE) {
[17:42:05.576]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.576]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.576]     }
[17:42:05.576]     ...future.result <- base::tryCatch({
[17:42:05.576]         base::withCallingHandlers({
[17:42:05.576]             ...future.value <- base::withVisible(base::local({
[17:42:05.576]                 withCallingHandlers({
[17:42:05.576]                   42
[17:42:05.576]                 }, immediateCondition = function(cond) {
[17:42:05.576]                   save_rds <- function (object, pathname, ...) 
[17:42:05.576]                   {
[17:42:05.576]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.576]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.576]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.576]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.576]                         fi_tmp[["mtime"]])
[17:42:05.576]                     }
[17:42:05.576]                     tryCatch({
[17:42:05.576]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.576]                     }, error = function(ex) {
[17:42:05.576]                       msg <- conditionMessage(ex)
[17:42:05.576]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.576]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.576]                         fi_tmp[["mtime"]], msg)
[17:42:05.576]                       ex$message <- msg
[17:42:05.576]                       stop(ex)
[17:42:05.576]                     })
[17:42:05.576]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.576]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.576]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.576]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.576]                       fi <- file.info(pathname)
[17:42:05.576]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.576]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.576]                         fi[["size"]], fi[["mtime"]])
[17:42:05.576]                       stop(msg)
[17:42:05.576]                     }
[17:42:05.576]                     invisible(pathname)
[17:42:05.576]                   }
[17:42:05.576]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.576]                     rootPath = tempdir()) 
[17:42:05.576]                   {
[17:42:05.576]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.576]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.576]                       tmpdir = path, fileext = ".rds")
[17:42:05.576]                     save_rds(obj, file)
[17:42:05.576]                   }
[17:42:05.576]                   saveImmediateCondition(cond, path = "/tmp/RtmpegRMx7/.future/immediateConditions")
[17:42:05.576]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.576]                   {
[17:42:05.576]                     inherits <- base::inherits
[17:42:05.576]                     invokeRestart <- base::invokeRestart
[17:42:05.576]                     is.null <- base::is.null
[17:42:05.576]                     muffled <- FALSE
[17:42:05.576]                     if (inherits(cond, "message")) {
[17:42:05.576]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.576]                       if (muffled) 
[17:42:05.576]                         invokeRestart("muffleMessage")
[17:42:05.576]                     }
[17:42:05.576]                     else if (inherits(cond, "warning")) {
[17:42:05.576]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.576]                       if (muffled) 
[17:42:05.576]                         invokeRestart("muffleWarning")
[17:42:05.576]                     }
[17:42:05.576]                     else if (inherits(cond, "condition")) {
[17:42:05.576]                       if (!is.null(pattern)) {
[17:42:05.576]                         computeRestarts <- base::computeRestarts
[17:42:05.576]                         grepl <- base::grepl
[17:42:05.576]                         restarts <- computeRestarts(cond)
[17:42:05.576]                         for (restart in restarts) {
[17:42:05.576]                           name <- restart$name
[17:42:05.576]                           if (is.null(name)) 
[17:42:05.576]                             next
[17:42:05.576]                           if (!grepl(pattern, name)) 
[17:42:05.576]                             next
[17:42:05.576]                           invokeRestart(restart)
[17:42:05.576]                           muffled <- TRUE
[17:42:05.576]                           break
[17:42:05.576]                         }
[17:42:05.576]                       }
[17:42:05.576]                     }
[17:42:05.576]                     invisible(muffled)
[17:42:05.576]                   }
[17:42:05.576]                   muffleCondition(cond)
[17:42:05.576]                 })
[17:42:05.576]             }))
[17:42:05.576]             future::FutureResult(value = ...future.value$value, 
[17:42:05.576]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.576]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.576]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.576]                     ...future.globalenv.names))
[17:42:05.576]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.576]         }, condition = base::local({
[17:42:05.576]             c <- base::c
[17:42:05.576]             inherits <- base::inherits
[17:42:05.576]             invokeRestart <- base::invokeRestart
[17:42:05.576]             length <- base::length
[17:42:05.576]             list <- base::list
[17:42:05.576]             seq.int <- base::seq.int
[17:42:05.576]             signalCondition <- base::signalCondition
[17:42:05.576]             sys.calls <- base::sys.calls
[17:42:05.576]             `[[` <- base::`[[`
[17:42:05.576]             `+` <- base::`+`
[17:42:05.576]             `<<-` <- base::`<<-`
[17:42:05.576]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.576]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.576]                   3L)]
[17:42:05.576]             }
[17:42:05.576]             function(cond) {
[17:42:05.576]                 is_error <- inherits(cond, "error")
[17:42:05.576]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.576]                   NULL)
[17:42:05.576]                 if (is_error) {
[17:42:05.576]                   sessionInformation <- function() {
[17:42:05.576]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.576]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.576]                       search = base::search(), system = base::Sys.info())
[17:42:05.576]                   }
[17:42:05.576]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.576]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.576]                     cond$call), session = sessionInformation(), 
[17:42:05.576]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.576]                   signalCondition(cond)
[17:42:05.576]                 }
[17:42:05.576]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.576]                 "immediateCondition"))) {
[17:42:05.576]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.576]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.576]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.576]                   if (TRUE && !signal) {
[17:42:05.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.576]                     {
[17:42:05.576]                       inherits <- base::inherits
[17:42:05.576]                       invokeRestart <- base::invokeRestart
[17:42:05.576]                       is.null <- base::is.null
[17:42:05.576]                       muffled <- FALSE
[17:42:05.576]                       if (inherits(cond, "message")) {
[17:42:05.576]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.576]                         if (muffled) 
[17:42:05.576]                           invokeRestart("muffleMessage")
[17:42:05.576]                       }
[17:42:05.576]                       else if (inherits(cond, "warning")) {
[17:42:05.576]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.576]                         if (muffled) 
[17:42:05.576]                           invokeRestart("muffleWarning")
[17:42:05.576]                       }
[17:42:05.576]                       else if (inherits(cond, "condition")) {
[17:42:05.576]                         if (!is.null(pattern)) {
[17:42:05.576]                           computeRestarts <- base::computeRestarts
[17:42:05.576]                           grepl <- base::grepl
[17:42:05.576]                           restarts <- computeRestarts(cond)
[17:42:05.576]                           for (restart in restarts) {
[17:42:05.576]                             name <- restart$name
[17:42:05.576]                             if (is.null(name)) 
[17:42:05.576]                               next
[17:42:05.576]                             if (!grepl(pattern, name)) 
[17:42:05.576]                               next
[17:42:05.576]                             invokeRestart(restart)
[17:42:05.576]                             muffled <- TRUE
[17:42:05.576]                             break
[17:42:05.576]                           }
[17:42:05.576]                         }
[17:42:05.576]                       }
[17:42:05.576]                       invisible(muffled)
[17:42:05.576]                     }
[17:42:05.576]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.576]                   }
[17:42:05.576]                 }
[17:42:05.576]                 else {
[17:42:05.576]                   if (TRUE) {
[17:42:05.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.576]                     {
[17:42:05.576]                       inherits <- base::inherits
[17:42:05.576]                       invokeRestart <- base::invokeRestart
[17:42:05.576]                       is.null <- base::is.null
[17:42:05.576]                       muffled <- FALSE
[17:42:05.576]                       if (inherits(cond, "message")) {
[17:42:05.576]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.576]                         if (muffled) 
[17:42:05.576]                           invokeRestart("muffleMessage")
[17:42:05.576]                       }
[17:42:05.576]                       else if (inherits(cond, "warning")) {
[17:42:05.576]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.576]                         if (muffled) 
[17:42:05.576]                           invokeRestart("muffleWarning")
[17:42:05.576]                       }
[17:42:05.576]                       else if (inherits(cond, "condition")) {
[17:42:05.576]                         if (!is.null(pattern)) {
[17:42:05.576]                           computeRestarts <- base::computeRestarts
[17:42:05.576]                           grepl <- base::grepl
[17:42:05.576]                           restarts <- computeRestarts(cond)
[17:42:05.576]                           for (restart in restarts) {
[17:42:05.576]                             name <- restart$name
[17:42:05.576]                             if (is.null(name)) 
[17:42:05.576]                               next
[17:42:05.576]                             if (!grepl(pattern, name)) 
[17:42:05.576]                               next
[17:42:05.576]                             invokeRestart(restart)
[17:42:05.576]                             muffled <- TRUE
[17:42:05.576]                             break
[17:42:05.576]                           }
[17:42:05.576]                         }
[17:42:05.576]                       }
[17:42:05.576]                       invisible(muffled)
[17:42:05.576]                     }
[17:42:05.576]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.576]                   }
[17:42:05.576]                 }
[17:42:05.576]             }
[17:42:05.576]         }))
[17:42:05.576]     }, error = function(ex) {
[17:42:05.576]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.576]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.576]                 ...future.rng), started = ...future.startTime, 
[17:42:05.576]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.576]             version = "1.8"), class = "FutureResult")
[17:42:05.576]     }, finally = {
[17:42:05.576]         if (!identical(...future.workdir, getwd())) 
[17:42:05.576]             setwd(...future.workdir)
[17:42:05.576]         {
[17:42:05.576]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.576]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.576]             }
[17:42:05.576]             base::options(...future.oldOptions)
[17:42:05.576]             if (.Platform$OS.type == "windows") {
[17:42:05.576]                 old_names <- names(...future.oldEnvVars)
[17:42:05.576]                 envs <- base::Sys.getenv()
[17:42:05.576]                 names <- names(envs)
[17:42:05.576]                 common <- intersect(names, old_names)
[17:42:05.576]                 added <- setdiff(names, old_names)
[17:42:05.576]                 removed <- setdiff(old_names, names)
[17:42:05.576]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.576]                   envs[common]]
[17:42:05.576]                 NAMES <- toupper(changed)
[17:42:05.576]                 args <- list()
[17:42:05.576]                 for (kk in seq_along(NAMES)) {
[17:42:05.576]                   name <- changed[[kk]]
[17:42:05.576]                   NAME <- NAMES[[kk]]
[17:42:05.576]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.576]                     next
[17:42:05.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.576]                 }
[17:42:05.576]                 NAMES <- toupper(added)
[17:42:05.576]                 for (kk in seq_along(NAMES)) {
[17:42:05.576]                   name <- added[[kk]]
[17:42:05.576]                   NAME <- NAMES[[kk]]
[17:42:05.576]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.576]                     next
[17:42:05.576]                   args[[name]] <- ""
[17:42:05.576]                 }
[17:42:05.576]                 NAMES <- toupper(removed)
[17:42:05.576]                 for (kk in seq_along(NAMES)) {
[17:42:05.576]                   name <- removed[[kk]]
[17:42:05.576]                   NAME <- NAMES[[kk]]
[17:42:05.576]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.576]                     next
[17:42:05.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.576]                 }
[17:42:05.576]                 if (length(args) > 0) 
[17:42:05.576]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.576]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.576]             }
[17:42:05.576]             else {
[17:42:05.576]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.576]             }
[17:42:05.576]             {
[17:42:05.576]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.576]                   0L) {
[17:42:05.576]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.576]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.576]                   base::options(opts)
[17:42:05.576]                 }
[17:42:05.576]                 {
[17:42:05.576]                   {
[17:42:05.576]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.576]                     NULL
[17:42:05.576]                   }
[17:42:05.576]                   options(future.plan = NULL)
[17:42:05.576]                   if (is.na(NA_character_)) 
[17:42:05.576]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.576]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.576]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:05.576]                     envir = parent.frame()) 
[17:42:05.576]                   {
[17:42:05.576]                     default_workers <- missing(workers)
[17:42:05.576]                     if (is.function(workers)) 
[17:42:05.576]                       workers <- workers()
[17:42:05.576]                     workers <- structure(as.integer(workers), 
[17:42:05.576]                       class = class(workers))
[17:42:05.576]                     stop_if_not(is.finite(workers), workers >= 
[17:42:05.576]                       1L)
[17:42:05.576]                     if ((workers == 1L && !inherits(workers, 
[17:42:05.576]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:05.576]                       if (default_workers) 
[17:42:05.576]                         supportsMulticore(warn = TRUE)
[17:42:05.576]                       return(sequential(..., envir = envir))
[17:42:05.576]                     }
[17:42:05.576]                     oopts <- options(mc.cores = workers)
[17:42:05.576]                     on.exit(options(oopts))
[17:42:05.576]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:05.576]                       envir = envir)
[17:42:05.576]                     if (!future$lazy) 
[17:42:05.576]                       future <- run(future)
[17:42:05.576]                     invisible(future)
[17:42:05.576]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.576]                 }
[17:42:05.576]             }
[17:42:05.576]         }
[17:42:05.576]     })
[17:42:05.576]     if (TRUE) {
[17:42:05.576]         base::sink(type = "output", split = FALSE)
[17:42:05.576]         if (TRUE) {
[17:42:05.576]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.576]         }
[17:42:05.576]         else {
[17:42:05.576]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.576]         }
[17:42:05.576]         base::close(...future.stdout)
[17:42:05.576]         ...future.stdout <- NULL
[17:42:05.576]     }
[17:42:05.576]     ...future.result$conditions <- ...future.conditions
[17:42:05.576]     ...future.result$finished <- base::Sys.time()
[17:42:05.576]     ...future.result
[17:42:05.576] }
[17:42:05.578] requestCore(): workers = 2
[17:42:05.580] MulticoreFuture started
[17:42:05.581] - Launch lazy future ... done
[17:42:05.581] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[17:42:05.581] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:05.582] List of future strategies:
[17:42:05.582] 1. sequential:
[17:42:05.582]    - args: function (..., envir = parent.frame())
[17:42:05.582]    - tweaked: FALSE
[17:42:05.582]    - call: NULL
[17:42:05.583] plan(): nbrOfWorkers() = 1
[17:42:05.585] plan(): Setting new future strategy stack:
[17:42:05.585] List of future strategies:
[17:42:05.585] 1. multicore:
[17:42:05.585]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.585]    - tweaked: FALSE
[17:42:05.585]    - call: plan(strategy)
[17:42:05.590] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.592] getGlobalsAndPackages() ...
[17:42:05.593] Searching for globals...
[17:42:05.594] - globals found: [1] ‘{’
[17:42:05.594] Searching for globals ... DONE
[17:42:05.594] Resolving globals: FALSE
[17:42:05.594] 
[17:42:05.595] 
[17:42:05.595] getGlobalsAndPackages() ... DONE
[17:42:05.595] run() for ‘Future’ ...
[17:42:05.595] - state: ‘created’
[17:42:05.595] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:42:05.599] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.600] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:42:05.600]   - Field: ‘label’
[17:42:05.600]   - Field: ‘local’
[17:42:05.600]   - Field: ‘owner’
[17:42:05.600]   - Field: ‘envir’
[17:42:05.600]   - Field: ‘workers’
[17:42:05.600]   - Field: ‘packages’
[17:42:05.601]   - Field: ‘gc’
[17:42:05.601]   - Field: ‘job’
[17:42:05.601]   - Field: ‘conditions’
[17:42:05.601]   - Field: ‘expr’
[17:42:05.601]   - Field: ‘uuid’
[17:42:05.601]   - Field: ‘seed’
[17:42:05.602]   - Field: ‘version’
[17:42:05.602]   - Field: ‘result’
[17:42:05.602]   - Field: ‘asynchronous’
[17:42:05.602]   - Field: ‘calls’
[17:42:05.602]   - Field: ‘globals’
[17:42:05.602]   - Field: ‘stdout’
[17:42:05.602]   - Field: ‘earlySignal’
[17:42:05.602]   - Field: ‘lazy’
[17:42:05.603]   - Field: ‘state’
[17:42:05.603] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:42:05.603] - Launch lazy future ...
[17:42:05.603] Packages needed by the future expression (n = 0): <none>
[17:42:05.603] Packages needed by future strategies (n = 0): <none>
[17:42:05.604] {
[17:42:05.604]     {
[17:42:05.604]         {
[17:42:05.604]             ...future.startTime <- base::Sys.time()
[17:42:05.604]             {
[17:42:05.604]                 {
[17:42:05.604]                   {
[17:42:05.604]                     {
[17:42:05.604]                       base::local({
[17:42:05.604]                         has_future <- base::requireNamespace("future", 
[17:42:05.604]                           quietly = TRUE)
[17:42:05.604]                         if (has_future) {
[17:42:05.604]                           ns <- base::getNamespace("future")
[17:42:05.604]                           version <- ns[[".package"]][["version"]]
[17:42:05.604]                           if (is.null(version)) 
[17:42:05.604]                             version <- utils::packageVersion("future")
[17:42:05.604]                         }
[17:42:05.604]                         else {
[17:42:05.604]                           version <- NULL
[17:42:05.604]                         }
[17:42:05.604]                         if (!has_future || version < "1.8.0") {
[17:42:05.604]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.604]                             "", base::R.version$version.string), 
[17:42:05.604]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.604]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.604]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.604]                               "release", "version")], collapse = " "), 
[17:42:05.604]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.604]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.604]                             info)
[17:42:05.604]                           info <- base::paste(info, collapse = "; ")
[17:42:05.604]                           if (!has_future) {
[17:42:05.604]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.604]                               info)
[17:42:05.604]                           }
[17:42:05.604]                           else {
[17:42:05.604]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.604]                               info, version)
[17:42:05.604]                           }
[17:42:05.604]                           base::stop(msg)
[17:42:05.604]                         }
[17:42:05.604]                       })
[17:42:05.604]                     }
[17:42:05.604]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.604]                     base::options(mc.cores = 1L)
[17:42:05.604]                   }
[17:42:05.604]                   options(future.plan = NULL)
[17:42:05.604]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.604]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.604]                 }
[17:42:05.604]                 ...future.workdir <- getwd()
[17:42:05.604]             }
[17:42:05.604]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.604]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.604]         }
[17:42:05.604]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.604]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.604]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.604]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.604]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.604]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.604]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.604]             base::names(...future.oldOptions))
[17:42:05.604]     }
[17:42:05.604]     if (FALSE) {
[17:42:05.604]     }
[17:42:05.604]     else {
[17:42:05.604]         if (TRUE) {
[17:42:05.604]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.604]                 open = "w")
[17:42:05.604]         }
[17:42:05.604]         else {
[17:42:05.604]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.604]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.604]         }
[17:42:05.604]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.604]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.604]             base::sink(type = "output", split = FALSE)
[17:42:05.604]             base::close(...future.stdout)
[17:42:05.604]         }, add = TRUE)
[17:42:05.604]     }
[17:42:05.604]     ...future.frame <- base::sys.nframe()
[17:42:05.604]     ...future.conditions <- base::list()
[17:42:05.604]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.604]     if (FALSE) {
[17:42:05.604]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.604]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.604]     }
[17:42:05.604]     ...future.result <- base::tryCatch({
[17:42:05.604]         base::withCallingHandlers({
[17:42:05.604]             ...future.value <- base::withVisible(base::local({
[17:42:05.604]                 withCallingHandlers({
[17:42:05.604]                   {
[17:42:05.604]                     42
[17:42:05.604]                   }
[17:42:05.604]                 }, immediateCondition = function(cond) {
[17:42:05.604]                   save_rds <- function (object, pathname, ...) 
[17:42:05.604]                   {
[17:42:05.604]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.604]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.604]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.604]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.604]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.604]                         fi_tmp[["mtime"]])
[17:42:05.604]                     }
[17:42:05.604]                     tryCatch({
[17:42:05.604]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.604]                     }, error = function(ex) {
[17:42:05.604]                       msg <- conditionMessage(ex)
[17:42:05.604]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.604]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.604]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.604]                         fi_tmp[["mtime"]], msg)
[17:42:05.604]                       ex$message <- msg
[17:42:05.604]                       stop(ex)
[17:42:05.604]                     })
[17:42:05.604]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.604]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.604]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.604]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.604]                       fi <- file.info(pathname)
[17:42:05.604]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.604]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.604]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.604]                         fi[["size"]], fi[["mtime"]])
[17:42:05.604]                       stop(msg)
[17:42:05.604]                     }
[17:42:05.604]                     invisible(pathname)
[17:42:05.604]                   }
[17:42:05.604]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.604]                     rootPath = tempdir()) 
[17:42:05.604]                   {
[17:42:05.604]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.604]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.604]                       tmpdir = path, fileext = ".rds")
[17:42:05.604]                     save_rds(obj, file)
[17:42:05.604]                   }
[17:42:05.604]                   saveImmediateCondition(cond, path = "/tmp/RtmpegRMx7/.future/immediateConditions")
[17:42:05.604]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.604]                   {
[17:42:05.604]                     inherits <- base::inherits
[17:42:05.604]                     invokeRestart <- base::invokeRestart
[17:42:05.604]                     is.null <- base::is.null
[17:42:05.604]                     muffled <- FALSE
[17:42:05.604]                     if (inherits(cond, "message")) {
[17:42:05.604]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.604]                       if (muffled) 
[17:42:05.604]                         invokeRestart("muffleMessage")
[17:42:05.604]                     }
[17:42:05.604]                     else if (inherits(cond, "warning")) {
[17:42:05.604]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.604]                       if (muffled) 
[17:42:05.604]                         invokeRestart("muffleWarning")
[17:42:05.604]                     }
[17:42:05.604]                     else if (inherits(cond, "condition")) {
[17:42:05.604]                       if (!is.null(pattern)) {
[17:42:05.604]                         computeRestarts <- base::computeRestarts
[17:42:05.604]                         grepl <- base::grepl
[17:42:05.604]                         restarts <- computeRestarts(cond)
[17:42:05.604]                         for (restart in restarts) {
[17:42:05.604]                           name <- restart$name
[17:42:05.604]                           if (is.null(name)) 
[17:42:05.604]                             next
[17:42:05.604]                           if (!grepl(pattern, name)) 
[17:42:05.604]                             next
[17:42:05.604]                           invokeRestart(restart)
[17:42:05.604]                           muffled <- TRUE
[17:42:05.604]                           break
[17:42:05.604]                         }
[17:42:05.604]                       }
[17:42:05.604]                     }
[17:42:05.604]                     invisible(muffled)
[17:42:05.604]                   }
[17:42:05.604]                   muffleCondition(cond)
[17:42:05.604]                 })
[17:42:05.604]             }))
[17:42:05.604]             future::FutureResult(value = ...future.value$value, 
[17:42:05.604]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.604]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.604]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.604]                     ...future.globalenv.names))
[17:42:05.604]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.604]         }, condition = base::local({
[17:42:05.604]             c <- base::c
[17:42:05.604]             inherits <- base::inherits
[17:42:05.604]             invokeRestart <- base::invokeRestart
[17:42:05.604]             length <- base::length
[17:42:05.604]             list <- base::list
[17:42:05.604]             seq.int <- base::seq.int
[17:42:05.604]             signalCondition <- base::signalCondition
[17:42:05.604]             sys.calls <- base::sys.calls
[17:42:05.604]             `[[` <- base::`[[`
[17:42:05.604]             `+` <- base::`+`
[17:42:05.604]             `<<-` <- base::`<<-`
[17:42:05.604]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.604]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.604]                   3L)]
[17:42:05.604]             }
[17:42:05.604]             function(cond) {
[17:42:05.604]                 is_error <- inherits(cond, "error")
[17:42:05.604]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.604]                   NULL)
[17:42:05.604]                 if (is_error) {
[17:42:05.604]                   sessionInformation <- function() {
[17:42:05.604]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.604]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.604]                       search = base::search(), system = base::Sys.info())
[17:42:05.604]                   }
[17:42:05.604]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.604]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.604]                     cond$call), session = sessionInformation(), 
[17:42:05.604]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.604]                   signalCondition(cond)
[17:42:05.604]                 }
[17:42:05.604]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.604]                 "immediateCondition"))) {
[17:42:05.604]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.604]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.604]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.604]                   if (TRUE && !signal) {
[17:42:05.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.604]                     {
[17:42:05.604]                       inherits <- base::inherits
[17:42:05.604]                       invokeRestart <- base::invokeRestart
[17:42:05.604]                       is.null <- base::is.null
[17:42:05.604]                       muffled <- FALSE
[17:42:05.604]                       if (inherits(cond, "message")) {
[17:42:05.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.604]                         if (muffled) 
[17:42:05.604]                           invokeRestart("muffleMessage")
[17:42:05.604]                       }
[17:42:05.604]                       else if (inherits(cond, "warning")) {
[17:42:05.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.604]                         if (muffled) 
[17:42:05.604]                           invokeRestart("muffleWarning")
[17:42:05.604]                       }
[17:42:05.604]                       else if (inherits(cond, "condition")) {
[17:42:05.604]                         if (!is.null(pattern)) {
[17:42:05.604]                           computeRestarts <- base::computeRestarts
[17:42:05.604]                           grepl <- base::grepl
[17:42:05.604]                           restarts <- computeRestarts(cond)
[17:42:05.604]                           for (restart in restarts) {
[17:42:05.604]                             name <- restart$name
[17:42:05.604]                             if (is.null(name)) 
[17:42:05.604]                               next
[17:42:05.604]                             if (!grepl(pattern, name)) 
[17:42:05.604]                               next
[17:42:05.604]                             invokeRestart(restart)
[17:42:05.604]                             muffled <- TRUE
[17:42:05.604]                             break
[17:42:05.604]                           }
[17:42:05.604]                         }
[17:42:05.604]                       }
[17:42:05.604]                       invisible(muffled)
[17:42:05.604]                     }
[17:42:05.604]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.604]                   }
[17:42:05.604]                 }
[17:42:05.604]                 else {
[17:42:05.604]                   if (TRUE) {
[17:42:05.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.604]                     {
[17:42:05.604]                       inherits <- base::inherits
[17:42:05.604]                       invokeRestart <- base::invokeRestart
[17:42:05.604]                       is.null <- base::is.null
[17:42:05.604]                       muffled <- FALSE
[17:42:05.604]                       if (inherits(cond, "message")) {
[17:42:05.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.604]                         if (muffled) 
[17:42:05.604]                           invokeRestart("muffleMessage")
[17:42:05.604]                       }
[17:42:05.604]                       else if (inherits(cond, "warning")) {
[17:42:05.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.604]                         if (muffled) 
[17:42:05.604]                           invokeRestart("muffleWarning")
[17:42:05.604]                       }
[17:42:05.604]                       else if (inherits(cond, "condition")) {
[17:42:05.604]                         if (!is.null(pattern)) {
[17:42:05.604]                           computeRestarts <- base::computeRestarts
[17:42:05.604]                           grepl <- base::grepl
[17:42:05.604]                           restarts <- computeRestarts(cond)
[17:42:05.604]                           for (restart in restarts) {
[17:42:05.604]                             name <- restart$name
[17:42:05.604]                             if (is.null(name)) 
[17:42:05.604]                               next
[17:42:05.604]                             if (!grepl(pattern, name)) 
[17:42:05.604]                               next
[17:42:05.604]                             invokeRestart(restart)
[17:42:05.604]                             muffled <- TRUE
[17:42:05.604]                             break
[17:42:05.604]                           }
[17:42:05.604]                         }
[17:42:05.604]                       }
[17:42:05.604]                       invisible(muffled)
[17:42:05.604]                     }
[17:42:05.604]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.604]                   }
[17:42:05.604]                 }
[17:42:05.604]             }
[17:42:05.604]         }))
[17:42:05.604]     }, error = function(ex) {
[17:42:05.604]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.604]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.604]                 ...future.rng), started = ...future.startTime, 
[17:42:05.604]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.604]             version = "1.8"), class = "FutureResult")
[17:42:05.604]     }, finally = {
[17:42:05.604]         if (!identical(...future.workdir, getwd())) 
[17:42:05.604]             setwd(...future.workdir)
[17:42:05.604]         {
[17:42:05.604]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.604]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.604]             }
[17:42:05.604]             base::options(...future.oldOptions)
[17:42:05.604]             if (.Platform$OS.type == "windows") {
[17:42:05.604]                 old_names <- names(...future.oldEnvVars)
[17:42:05.604]                 envs <- base::Sys.getenv()
[17:42:05.604]                 names <- names(envs)
[17:42:05.604]                 common <- intersect(names, old_names)
[17:42:05.604]                 added <- setdiff(names, old_names)
[17:42:05.604]                 removed <- setdiff(old_names, names)
[17:42:05.604]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.604]                   envs[common]]
[17:42:05.604]                 NAMES <- toupper(changed)
[17:42:05.604]                 args <- list()
[17:42:05.604]                 for (kk in seq_along(NAMES)) {
[17:42:05.604]                   name <- changed[[kk]]
[17:42:05.604]                   NAME <- NAMES[[kk]]
[17:42:05.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.604]                     next
[17:42:05.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.604]                 }
[17:42:05.604]                 NAMES <- toupper(added)
[17:42:05.604]                 for (kk in seq_along(NAMES)) {
[17:42:05.604]                   name <- added[[kk]]
[17:42:05.604]                   NAME <- NAMES[[kk]]
[17:42:05.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.604]                     next
[17:42:05.604]                   args[[name]] <- ""
[17:42:05.604]                 }
[17:42:05.604]                 NAMES <- toupper(removed)
[17:42:05.604]                 for (kk in seq_along(NAMES)) {
[17:42:05.604]                   name <- removed[[kk]]
[17:42:05.604]                   NAME <- NAMES[[kk]]
[17:42:05.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.604]                     next
[17:42:05.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.604]                 }
[17:42:05.604]                 if (length(args) > 0) 
[17:42:05.604]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.604]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.604]             }
[17:42:05.604]             else {
[17:42:05.604]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.604]             }
[17:42:05.604]             {
[17:42:05.604]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.604]                   0L) {
[17:42:05.604]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.604]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.604]                   base::options(opts)
[17:42:05.604]                 }
[17:42:05.604]                 {
[17:42:05.604]                   {
[17:42:05.604]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.604]                     NULL
[17:42:05.604]                   }
[17:42:05.604]                   options(future.plan = NULL)
[17:42:05.604]                   if (is.na(NA_character_)) 
[17:42:05.604]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.604]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.604]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:42:05.604]                     envir = parent.frame()) 
[17:42:05.604]                   {
[17:42:05.604]                     default_workers <- missing(workers)
[17:42:05.604]                     if (is.function(workers)) 
[17:42:05.604]                       workers <- workers()
[17:42:05.604]                     workers <- structure(as.integer(workers), 
[17:42:05.604]                       class = class(workers))
[17:42:05.604]                     stop_if_not(is.finite(workers), workers >= 
[17:42:05.604]                       1L)
[17:42:05.604]                     if ((workers == 1L && !inherits(workers, 
[17:42:05.604]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:42:05.604]                       if (default_workers) 
[17:42:05.604]                         supportsMulticore(warn = TRUE)
[17:42:05.604]                       return(sequential(..., envir = envir))
[17:42:05.604]                     }
[17:42:05.604]                     oopts <- options(mc.cores = workers)
[17:42:05.604]                     on.exit(options(oopts))
[17:42:05.604]                     future <- MulticoreFuture(..., workers = workers, 
[17:42:05.604]                       envir = envir)
[17:42:05.604]                     if (!future$lazy) 
[17:42:05.604]                       future <- run(future)
[17:42:05.604]                     invisible(future)
[17:42:05.604]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.604]                 }
[17:42:05.604]             }
[17:42:05.604]         }
[17:42:05.604]     })
[17:42:05.604]     if (TRUE) {
[17:42:05.604]         base::sink(type = "output", split = FALSE)
[17:42:05.604]         if (TRUE) {
[17:42:05.604]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.604]         }
[17:42:05.604]         else {
[17:42:05.604]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.604]         }
[17:42:05.604]         base::close(...future.stdout)
[17:42:05.604]         ...future.stdout <- NULL
[17:42:05.604]     }
[17:42:05.604]     ...future.result$conditions <- ...future.conditions
[17:42:05.604]     ...future.result$finished <- base::Sys.time()
[17:42:05.604]     ...future.result
[17:42:05.604] }
[17:42:05.607] requestCore(): workers = 2
[17:42:05.609] MulticoreFuture started
[17:42:05.609] - Launch lazy future ... done
[17:42:05.609] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
[17:42:05.610] plan(): Setting new future strategy stack:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:05.610] List of future strategies:
[17:42:05.610] 1. sequential:
[17:42:05.610]    - args: function (..., envir = parent.frame())
[17:42:05.610]    - tweaked: FALSE
[17:42:05.610]    - call: NULL
[17:42:05.611] plan(): nbrOfWorkers() = 1
[17:42:05.613] plan(): Setting new future strategy stack:
[17:42:05.613] List of future strategies:
[17:42:05.613] 1. multicore:
[17:42:05.613]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:42:05.613]    - tweaked: FALSE
[17:42:05.613]    - call: plan(strategy)
[17:42:05.618] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
- plan('multicore') ... DONE
- plan('multisession') ...
[17:42:05.621] plan(): Setting new future strategy stack:
[17:42:05.621] List of future strategies:
[17:42:05.621] 1. multisession:
[17:42:05.621]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:42:05.621]    - tweaked: FALSE
[17:42:05.621]    - call: plan(strategy)
[17:42:05.622] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:42:05.622] multisession:
[17:42:05.622] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:42:05.622] - tweaked: FALSE
[17:42:05.622] - call: plan(strategy)
[17:42:05.629] getGlobalsAndPackages() ...
[17:42:05.629] Not searching for globals
[17:42:05.629] - globals: [0] <none>
[17:42:05.629] getGlobalsAndPackages() ... DONE
[17:42:05.630] [local output] makeClusterPSOCK() ...
[17:42:05.672] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:05.678] [local output] Base port: 11636
[17:42:05.678] [local output] Getting setup options for 2 cluster nodes ...
[17:42:05.678] [local output]  - Node 1 of 2 ...
[17:42:05.679] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:05.679] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpegRMx7/worker.rank=1.parallelly.parent=43314.a93257b7d0b8.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpegRMx7/worker.rank=1.parallelly.parent=43314.a93257b7d0b8.pid")'’
[17:42:05.872] - Possible to infer worker's PID: TRUE
[17:42:05.872] [local output] Rscript port: 11636

[17:42:05.872] [local output]  - Node 2 of 2 ...
[17:42:05.873] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:05.873] [local output] Rscript port: 11636

[17:42:05.874] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:05.874] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:05.874] [local output] Setting up PSOCK nodes in parallel
[17:42:05.874] List of 36
[17:42:05.874]  $ worker          : chr "localhost"
[17:42:05.874]   ..- attr(*, "localhost")= logi TRUE
[17:42:05.874]  $ master          : chr "localhost"
[17:42:05.874]  $ port            : int 11636
[17:42:05.874]  $ connectTimeout  : num 120
[17:42:05.874]  $ timeout         : num 2592000
[17:42:05.874]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:05.874]  $ homogeneous     : logi TRUE
[17:42:05.874]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:05.874]  $ rscript_envs    : NULL
[17:42:05.874]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:05.874]  $ rscript_startup : NULL
[17:42:05.874]  $ rscript_sh      : chr "sh"
[17:42:05.874]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:05.874]  $ methods         : logi TRUE
[17:42:05.874]  $ socketOptions   : chr "no-delay"
[17:42:05.874]  $ useXDR          : logi FALSE
[17:42:05.874]  $ outfile         : chr "/dev/null"
[17:42:05.874]  $ renice          : int NA
[17:42:05.874]  $ rshcmd          : NULL
[17:42:05.874]  $ user            : chr(0) 
[17:42:05.874]  $ revtunnel       : logi FALSE
[17:42:05.874]  $ rshlogfile      : NULL
[17:42:05.874]  $ rshopts         : chr(0) 
[17:42:05.874]  $ rank            : int 1
[17:42:05.874]  $ manual          : logi FALSE
[17:42:05.874]  $ dryrun          : logi FALSE
[17:42:05.874]  $ quiet           : logi FALSE
[17:42:05.874]  $ setup_strategy  : chr "parallel"
[17:42:05.874]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:05.874]  $ pidfile         : chr "/tmp/RtmpegRMx7/worker.rank=1.parallelly.parent=43314.a93257b7d0b8.pid"
[17:42:05.874]  $ rshcmd_label    : NULL
[17:42:05.874]  $ rsh_call        : NULL
[17:42:05.874]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:05.874]  $ localMachine    : logi TRUE
[17:42:05.874]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:05.874]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:05.874]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:05.874]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:05.874]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:05.874]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:05.874]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:05.874]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:05.874]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:05.874]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:05.874]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:05.874]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:05.874]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:05.874]  $ arguments       :List of 28
[17:42:05.874]   ..$ worker          : chr "localhost"
[17:42:05.874]   ..$ master          : NULL
[17:42:05.874]   ..$ port            : int 11636
[17:42:05.874]   ..$ connectTimeout  : num 120
[17:42:05.874]   ..$ timeout         : num 2592000
[17:42:05.874]   ..$ rscript         : NULL
[17:42:05.874]   ..$ homogeneous     : NULL
[17:42:05.874]   ..$ rscript_args    : NULL
[17:42:05.874]   ..$ rscript_envs    : NULL
[17:42:05.874]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:05.874]   ..$ rscript_startup : NULL
[17:42:05.874]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:05.874]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:05.874]   ..$ methods         : logi TRUE
[17:42:05.874]   ..$ socketOptions   : chr "no-delay"
[17:42:05.874]   ..$ useXDR          : logi FALSE
[17:42:05.874]   ..$ outfile         : chr "/dev/null"
[17:42:05.874]   ..$ renice          : int NA
[17:42:05.874]   ..$ rshcmd          : NULL
[17:42:05.874]   ..$ user            : NULL
[17:42:05.874]   ..$ revtunnel       : logi NA
[17:42:05.874]   ..$ rshlogfile      : NULL
[17:42:05.874]   ..$ rshopts         : NULL
[17:42:05.874]   ..$ rank            : int 1
[17:42:05.874]   ..$ manual          : logi FALSE
[17:42:05.874]   ..$ dryrun          : logi FALSE
[17:42:05.874]   ..$ quiet           : logi FALSE
[17:42:05.874]   ..$ setup_strategy  : chr "parallel"
[17:42:05.874]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:05.894] [local output] System call to launch all workers:
[17:42:05.894] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpegRMx7/worker.rank=1.parallelly.parent=43314.a93257b7d0b8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11636 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:05.894] [local output] Starting PSOCK main server
[17:42:05.896] [local output] Workers launched
[17:42:05.896] [local output] Waiting for workers to connect back
[17:42:05.896]  - [local output] 0 workers out of 2 ready
[17:42:06.167]  - [local output] 0 workers out of 2 ready
[17:42:06.167]  - [local output] 1 workers out of 2 ready
[17:42:06.168]  - [local output] 2 workers out of 2 ready
[17:42:06.168] [local output] Launching of workers completed
[17:42:06.168] [local output] Collecting session information from workers
[17:42:06.169] [local output]  - Worker #1 of 2
[17:42:06.169] [local output]  - Worker #2 of 2
[17:42:06.170] [local output] makeClusterPSOCK() ... done
[17:42:06.184] Packages needed by the future expression (n = 0): <none>
[17:42:06.184] Packages needed by future strategies (n = 0): <none>
[17:42:06.184] {
[17:42:06.184]     {
[17:42:06.184]         {
[17:42:06.184]             ...future.startTime <- base::Sys.time()
[17:42:06.184]             {
[17:42:06.184]                 {
[17:42:06.184]                   {
[17:42:06.184]                     {
[17:42:06.184]                       base::local({
[17:42:06.184]                         has_future <- base::requireNamespace("future", 
[17:42:06.184]                           quietly = TRUE)
[17:42:06.184]                         if (has_future) {
[17:42:06.184]                           ns <- base::getNamespace("future")
[17:42:06.184]                           version <- ns[[".package"]][["version"]]
[17:42:06.184]                           if (is.null(version)) 
[17:42:06.184]                             version <- utils::packageVersion("future")
[17:42:06.184]                         }
[17:42:06.184]                         else {
[17:42:06.184]                           version <- NULL
[17:42:06.184]                         }
[17:42:06.184]                         if (!has_future || version < "1.8.0") {
[17:42:06.184]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.184]                             "", base::R.version$version.string), 
[17:42:06.184]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.184]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.184]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.184]                               "release", "version")], collapse = " "), 
[17:42:06.184]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.184]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.184]                             info)
[17:42:06.184]                           info <- base::paste(info, collapse = "; ")
[17:42:06.184]                           if (!has_future) {
[17:42:06.184]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.184]                               info)
[17:42:06.184]                           }
[17:42:06.184]                           else {
[17:42:06.184]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.184]                               info, version)
[17:42:06.184]                           }
[17:42:06.184]                           base::stop(msg)
[17:42:06.184]                         }
[17:42:06.184]                       })
[17:42:06.184]                     }
[17:42:06.184]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.184]                     base::options(mc.cores = 1L)
[17:42:06.184]                   }
[17:42:06.184]                   options(future.plan = NULL)
[17:42:06.184]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.184]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.184]                 }
[17:42:06.184]                 ...future.workdir <- getwd()
[17:42:06.184]             }
[17:42:06.184]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.184]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.184]         }
[17:42:06.184]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.184]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.184]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.184]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.184]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.184]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.184]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.184]             base::names(...future.oldOptions))
[17:42:06.184]     }
[17:42:06.184]     if (FALSE) {
[17:42:06.184]     }
[17:42:06.184]     else {
[17:42:06.184]         if (TRUE) {
[17:42:06.184]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.184]                 open = "w")
[17:42:06.184]         }
[17:42:06.184]         else {
[17:42:06.184]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.184]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.184]         }
[17:42:06.184]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.184]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.184]             base::sink(type = "output", split = FALSE)
[17:42:06.184]             base::close(...future.stdout)
[17:42:06.184]         }, add = TRUE)
[17:42:06.184]     }
[17:42:06.184]     ...future.frame <- base::sys.nframe()
[17:42:06.184]     ...future.conditions <- base::list()
[17:42:06.184]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.184]     if (FALSE) {
[17:42:06.184]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.184]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.184]     }
[17:42:06.184]     ...future.result <- base::tryCatch({
[17:42:06.184]         base::withCallingHandlers({
[17:42:06.184]             ...future.value <- base::withVisible(base::local({
[17:42:06.184]                 ...future.makeSendCondition <- local({
[17:42:06.184]                   sendCondition <- NULL
[17:42:06.184]                   function(frame = 1L) {
[17:42:06.184]                     if (is.function(sendCondition)) 
[17:42:06.184]                       return(sendCondition)
[17:42:06.184]                     ns <- getNamespace("parallel")
[17:42:06.184]                     if (exists("sendData", mode = "function", 
[17:42:06.184]                       envir = ns)) {
[17:42:06.184]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.184]                         envir = ns)
[17:42:06.184]                       envir <- sys.frame(frame)
[17:42:06.184]                       master <- NULL
[17:42:06.184]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.184]                         !identical(envir, emptyenv())) {
[17:42:06.184]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.184]                           inherits = FALSE)) {
[17:42:06.184]                           master <- get("master", mode = "list", 
[17:42:06.184]                             envir = envir, inherits = FALSE)
[17:42:06.184]                           if (inherits(master, c("SOCKnode", 
[17:42:06.184]                             "SOCK0node"))) {
[17:42:06.184]                             sendCondition <<- function(cond) {
[17:42:06.184]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.184]                                 success = TRUE)
[17:42:06.184]                               parallel_sendData(master, data)
[17:42:06.184]                             }
[17:42:06.184]                             return(sendCondition)
[17:42:06.184]                           }
[17:42:06.184]                         }
[17:42:06.184]                         frame <- frame + 1L
[17:42:06.184]                         envir <- sys.frame(frame)
[17:42:06.184]                       }
[17:42:06.184]                     }
[17:42:06.184]                     sendCondition <<- function(cond) NULL
[17:42:06.184]                   }
[17:42:06.184]                 })
[17:42:06.184]                 withCallingHandlers({
[17:42:06.184]                   NA
[17:42:06.184]                 }, immediateCondition = function(cond) {
[17:42:06.184]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.184]                   sendCondition(cond)
[17:42:06.184]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.184]                   {
[17:42:06.184]                     inherits <- base::inherits
[17:42:06.184]                     invokeRestart <- base::invokeRestart
[17:42:06.184]                     is.null <- base::is.null
[17:42:06.184]                     muffled <- FALSE
[17:42:06.184]                     if (inherits(cond, "message")) {
[17:42:06.184]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.184]                       if (muffled) 
[17:42:06.184]                         invokeRestart("muffleMessage")
[17:42:06.184]                     }
[17:42:06.184]                     else if (inherits(cond, "warning")) {
[17:42:06.184]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.184]                       if (muffled) 
[17:42:06.184]                         invokeRestart("muffleWarning")
[17:42:06.184]                     }
[17:42:06.184]                     else if (inherits(cond, "condition")) {
[17:42:06.184]                       if (!is.null(pattern)) {
[17:42:06.184]                         computeRestarts <- base::computeRestarts
[17:42:06.184]                         grepl <- base::grepl
[17:42:06.184]                         restarts <- computeRestarts(cond)
[17:42:06.184]                         for (restart in restarts) {
[17:42:06.184]                           name <- restart$name
[17:42:06.184]                           if (is.null(name)) 
[17:42:06.184]                             next
[17:42:06.184]                           if (!grepl(pattern, name)) 
[17:42:06.184]                             next
[17:42:06.184]                           invokeRestart(restart)
[17:42:06.184]                           muffled <- TRUE
[17:42:06.184]                           break
[17:42:06.184]                         }
[17:42:06.184]                       }
[17:42:06.184]                     }
[17:42:06.184]                     invisible(muffled)
[17:42:06.184]                   }
[17:42:06.184]                   muffleCondition(cond)
[17:42:06.184]                 })
[17:42:06.184]             }))
[17:42:06.184]             future::FutureResult(value = ...future.value$value, 
[17:42:06.184]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.184]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.184]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.184]                     ...future.globalenv.names))
[17:42:06.184]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.184]         }, condition = base::local({
[17:42:06.184]             c <- base::c
[17:42:06.184]             inherits <- base::inherits
[17:42:06.184]             invokeRestart <- base::invokeRestart
[17:42:06.184]             length <- base::length
[17:42:06.184]             list <- base::list
[17:42:06.184]             seq.int <- base::seq.int
[17:42:06.184]             signalCondition <- base::signalCondition
[17:42:06.184]             sys.calls <- base::sys.calls
[17:42:06.184]             `[[` <- base::`[[`
[17:42:06.184]             `+` <- base::`+`
[17:42:06.184]             `<<-` <- base::`<<-`
[17:42:06.184]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.184]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.184]                   3L)]
[17:42:06.184]             }
[17:42:06.184]             function(cond) {
[17:42:06.184]                 is_error <- inherits(cond, "error")
[17:42:06.184]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.184]                   NULL)
[17:42:06.184]                 if (is_error) {
[17:42:06.184]                   sessionInformation <- function() {
[17:42:06.184]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.184]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.184]                       search = base::search(), system = base::Sys.info())
[17:42:06.184]                   }
[17:42:06.184]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.184]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.184]                     cond$call), session = sessionInformation(), 
[17:42:06.184]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.184]                   signalCondition(cond)
[17:42:06.184]                 }
[17:42:06.184]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.184]                 "immediateCondition"))) {
[17:42:06.184]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.184]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.184]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.184]                   if (TRUE && !signal) {
[17:42:06.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.184]                     {
[17:42:06.184]                       inherits <- base::inherits
[17:42:06.184]                       invokeRestart <- base::invokeRestart
[17:42:06.184]                       is.null <- base::is.null
[17:42:06.184]                       muffled <- FALSE
[17:42:06.184]                       if (inherits(cond, "message")) {
[17:42:06.184]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.184]                         if (muffled) 
[17:42:06.184]                           invokeRestart("muffleMessage")
[17:42:06.184]                       }
[17:42:06.184]                       else if (inherits(cond, "warning")) {
[17:42:06.184]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.184]                         if (muffled) 
[17:42:06.184]                           invokeRestart("muffleWarning")
[17:42:06.184]                       }
[17:42:06.184]                       else if (inherits(cond, "condition")) {
[17:42:06.184]                         if (!is.null(pattern)) {
[17:42:06.184]                           computeRestarts <- base::computeRestarts
[17:42:06.184]                           grepl <- base::grepl
[17:42:06.184]                           restarts <- computeRestarts(cond)
[17:42:06.184]                           for (restart in restarts) {
[17:42:06.184]                             name <- restart$name
[17:42:06.184]                             if (is.null(name)) 
[17:42:06.184]                               next
[17:42:06.184]                             if (!grepl(pattern, name)) 
[17:42:06.184]                               next
[17:42:06.184]                             invokeRestart(restart)
[17:42:06.184]                             muffled <- TRUE
[17:42:06.184]                             break
[17:42:06.184]                           }
[17:42:06.184]                         }
[17:42:06.184]                       }
[17:42:06.184]                       invisible(muffled)
[17:42:06.184]                     }
[17:42:06.184]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.184]                   }
[17:42:06.184]                 }
[17:42:06.184]                 else {
[17:42:06.184]                   if (TRUE) {
[17:42:06.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.184]                     {
[17:42:06.184]                       inherits <- base::inherits
[17:42:06.184]                       invokeRestart <- base::invokeRestart
[17:42:06.184]                       is.null <- base::is.null
[17:42:06.184]                       muffled <- FALSE
[17:42:06.184]                       if (inherits(cond, "message")) {
[17:42:06.184]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.184]                         if (muffled) 
[17:42:06.184]                           invokeRestart("muffleMessage")
[17:42:06.184]                       }
[17:42:06.184]                       else if (inherits(cond, "warning")) {
[17:42:06.184]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.184]                         if (muffled) 
[17:42:06.184]                           invokeRestart("muffleWarning")
[17:42:06.184]                       }
[17:42:06.184]                       else if (inherits(cond, "condition")) {
[17:42:06.184]                         if (!is.null(pattern)) {
[17:42:06.184]                           computeRestarts <- base::computeRestarts
[17:42:06.184]                           grepl <- base::grepl
[17:42:06.184]                           restarts <- computeRestarts(cond)
[17:42:06.184]                           for (restart in restarts) {
[17:42:06.184]                             name <- restart$name
[17:42:06.184]                             if (is.null(name)) 
[17:42:06.184]                               next
[17:42:06.184]                             if (!grepl(pattern, name)) 
[17:42:06.184]                               next
[17:42:06.184]                             invokeRestart(restart)
[17:42:06.184]                             muffled <- TRUE
[17:42:06.184]                             break
[17:42:06.184]                           }
[17:42:06.184]                         }
[17:42:06.184]                       }
[17:42:06.184]                       invisible(muffled)
[17:42:06.184]                     }
[17:42:06.184]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.184]                   }
[17:42:06.184]                 }
[17:42:06.184]             }
[17:42:06.184]         }))
[17:42:06.184]     }, error = function(ex) {
[17:42:06.184]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.184]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.184]                 ...future.rng), started = ...future.startTime, 
[17:42:06.184]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.184]             version = "1.8"), class = "FutureResult")
[17:42:06.184]     }, finally = {
[17:42:06.184]         if (!identical(...future.workdir, getwd())) 
[17:42:06.184]             setwd(...future.workdir)
[17:42:06.184]         {
[17:42:06.184]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.184]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.184]             }
[17:42:06.184]             base::options(...future.oldOptions)
[17:42:06.184]             if (.Platform$OS.type == "windows") {
[17:42:06.184]                 old_names <- names(...future.oldEnvVars)
[17:42:06.184]                 envs <- base::Sys.getenv()
[17:42:06.184]                 names <- names(envs)
[17:42:06.184]                 common <- intersect(names, old_names)
[17:42:06.184]                 added <- setdiff(names, old_names)
[17:42:06.184]                 removed <- setdiff(old_names, names)
[17:42:06.184]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.184]                   envs[common]]
[17:42:06.184]                 NAMES <- toupper(changed)
[17:42:06.184]                 args <- list()
[17:42:06.184]                 for (kk in seq_along(NAMES)) {
[17:42:06.184]                   name <- changed[[kk]]
[17:42:06.184]                   NAME <- NAMES[[kk]]
[17:42:06.184]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.184]                     next
[17:42:06.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.184]                 }
[17:42:06.184]                 NAMES <- toupper(added)
[17:42:06.184]                 for (kk in seq_along(NAMES)) {
[17:42:06.184]                   name <- added[[kk]]
[17:42:06.184]                   NAME <- NAMES[[kk]]
[17:42:06.184]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.184]                     next
[17:42:06.184]                   args[[name]] <- ""
[17:42:06.184]                 }
[17:42:06.184]                 NAMES <- toupper(removed)
[17:42:06.184]                 for (kk in seq_along(NAMES)) {
[17:42:06.184]                   name <- removed[[kk]]
[17:42:06.184]                   NAME <- NAMES[[kk]]
[17:42:06.184]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.184]                     next
[17:42:06.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.184]                 }
[17:42:06.184]                 if (length(args) > 0) 
[17:42:06.184]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.184]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.184]             }
[17:42:06.184]             else {
[17:42:06.184]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.184]             }
[17:42:06.184]             {
[17:42:06.184]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.184]                   0L) {
[17:42:06.184]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.184]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.184]                   base::options(opts)
[17:42:06.184]                 }
[17:42:06.184]                 {
[17:42:06.184]                   {
[17:42:06.184]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.184]                     NULL
[17:42:06.184]                   }
[17:42:06.184]                   options(future.plan = NULL)
[17:42:06.184]                   if (is.na(NA_character_)) 
[17:42:06.184]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.184]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.184]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.184]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.184]                     envir = parent.frame()) 
[17:42:06.184]                   {
[17:42:06.184]                     if (is.function(workers)) 
[17:42:06.184]                       workers <- workers()
[17:42:06.184]                     workers <- structure(as.integer(workers), 
[17:42:06.184]                       class = class(workers))
[17:42:06.184]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.184]                       workers >= 1)
[17:42:06.184]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.184]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.184]                     }
[17:42:06.184]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.184]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.184]                       envir = envir)
[17:42:06.184]                     if (!future$lazy) 
[17:42:06.184]                       future <- run(future)
[17:42:06.184]                     invisible(future)
[17:42:06.184]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.184]                 }
[17:42:06.184]             }
[17:42:06.184]         }
[17:42:06.184]     })
[17:42:06.184]     if (TRUE) {
[17:42:06.184]         base::sink(type = "output", split = FALSE)
[17:42:06.184]         if (TRUE) {
[17:42:06.184]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.184]         }
[17:42:06.184]         else {
[17:42:06.184]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.184]         }
[17:42:06.184]         base::close(...future.stdout)
[17:42:06.184]         ...future.stdout <- NULL
[17:42:06.184]     }
[17:42:06.184]     ...future.result$conditions <- ...future.conditions
[17:42:06.184]     ...future.result$finished <- base::Sys.time()
[17:42:06.184]     ...future.result
[17:42:06.184] }
[17:42:06.257] MultisessionFuture started
[17:42:06.257] result() for ClusterFuture ...
[17:42:06.258] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.258] - Validating connection of MultisessionFuture
[17:42:06.290] - received message: FutureResult
[17:42:06.290] - Received FutureResult
[17:42:06.290] - Erased future from FutureRegistry
[17:42:06.291] result() for ClusterFuture ...
[17:42:06.291] - result already collected: FutureResult
[17:42:06.291] result() for ClusterFuture ... done
[17:42:06.291] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.291] result() for ClusterFuture ... done
[17:42:06.291] result() for ClusterFuture ...
[17:42:06.291] - result already collected: FutureResult
[17:42:06.291] result() for ClusterFuture ... done
[17:42:06.292] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:42:06.295] plan(): nbrOfWorkers() = 2
[17:42:06.299] getGlobalsAndPackages() ...
[17:42:06.299] 
[17:42:06.299] - globals: [0] <none>
[17:42:06.299] getGlobalsAndPackages() ... DONE
[17:42:06.311] Packages needed by the future expression (n = 0): <none>
[17:42:06.311] Packages needed by future strategies (n = 0): <none>
[17:42:06.312] {
[17:42:06.312]     {
[17:42:06.312]         {
[17:42:06.312]             ...future.startTime <- base::Sys.time()
[17:42:06.312]             {
[17:42:06.312]                 {
[17:42:06.312]                   {
[17:42:06.312]                     {
[17:42:06.312]                       base::local({
[17:42:06.312]                         has_future <- base::requireNamespace("future", 
[17:42:06.312]                           quietly = TRUE)
[17:42:06.312]                         if (has_future) {
[17:42:06.312]                           ns <- base::getNamespace("future")
[17:42:06.312]                           version <- ns[[".package"]][["version"]]
[17:42:06.312]                           if (is.null(version)) 
[17:42:06.312]                             version <- utils::packageVersion("future")
[17:42:06.312]                         }
[17:42:06.312]                         else {
[17:42:06.312]                           version <- NULL
[17:42:06.312]                         }
[17:42:06.312]                         if (!has_future || version < "1.8.0") {
[17:42:06.312]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.312]                             "", base::R.version$version.string), 
[17:42:06.312]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.312]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.312]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.312]                               "release", "version")], collapse = " "), 
[17:42:06.312]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.312]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.312]                             info)
[17:42:06.312]                           info <- base::paste(info, collapse = "; ")
[17:42:06.312]                           if (!has_future) {
[17:42:06.312]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.312]                               info)
[17:42:06.312]                           }
[17:42:06.312]                           else {
[17:42:06.312]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.312]                               info, version)
[17:42:06.312]                           }
[17:42:06.312]                           base::stop(msg)
[17:42:06.312]                         }
[17:42:06.312]                       })
[17:42:06.312]                     }
[17:42:06.312]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.312]                     base::options(mc.cores = 1L)
[17:42:06.312]                   }
[17:42:06.312]                   options(future.plan = NULL)
[17:42:06.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.312]                 }
[17:42:06.312]                 ...future.workdir <- getwd()
[17:42:06.312]             }
[17:42:06.312]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.312]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.312]         }
[17:42:06.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.312]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.312]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.312]             base::names(...future.oldOptions))
[17:42:06.312]     }
[17:42:06.312]     if (FALSE) {
[17:42:06.312]     }
[17:42:06.312]     else {
[17:42:06.312]         if (TRUE) {
[17:42:06.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.312]                 open = "w")
[17:42:06.312]         }
[17:42:06.312]         else {
[17:42:06.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.312]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.312]         }
[17:42:06.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.312]             base::sink(type = "output", split = FALSE)
[17:42:06.312]             base::close(...future.stdout)
[17:42:06.312]         }, add = TRUE)
[17:42:06.312]     }
[17:42:06.312]     ...future.frame <- base::sys.nframe()
[17:42:06.312]     ...future.conditions <- base::list()
[17:42:06.312]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.312]     if (FALSE) {
[17:42:06.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.312]     }
[17:42:06.312]     ...future.result <- base::tryCatch({
[17:42:06.312]         base::withCallingHandlers({
[17:42:06.312]             ...future.value <- base::withVisible(base::local({
[17:42:06.312]                 ...future.makeSendCondition <- local({
[17:42:06.312]                   sendCondition <- NULL
[17:42:06.312]                   function(frame = 1L) {
[17:42:06.312]                     if (is.function(sendCondition)) 
[17:42:06.312]                       return(sendCondition)
[17:42:06.312]                     ns <- getNamespace("parallel")
[17:42:06.312]                     if (exists("sendData", mode = "function", 
[17:42:06.312]                       envir = ns)) {
[17:42:06.312]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.312]                         envir = ns)
[17:42:06.312]                       envir <- sys.frame(frame)
[17:42:06.312]                       master <- NULL
[17:42:06.312]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.312]                         !identical(envir, emptyenv())) {
[17:42:06.312]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.312]                           inherits = FALSE)) {
[17:42:06.312]                           master <- get("master", mode = "list", 
[17:42:06.312]                             envir = envir, inherits = FALSE)
[17:42:06.312]                           if (inherits(master, c("SOCKnode", 
[17:42:06.312]                             "SOCK0node"))) {
[17:42:06.312]                             sendCondition <<- function(cond) {
[17:42:06.312]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.312]                                 success = TRUE)
[17:42:06.312]                               parallel_sendData(master, data)
[17:42:06.312]                             }
[17:42:06.312]                             return(sendCondition)
[17:42:06.312]                           }
[17:42:06.312]                         }
[17:42:06.312]                         frame <- frame + 1L
[17:42:06.312]                         envir <- sys.frame(frame)
[17:42:06.312]                       }
[17:42:06.312]                     }
[17:42:06.312]                     sendCondition <<- function(cond) NULL
[17:42:06.312]                   }
[17:42:06.312]                 })
[17:42:06.312]                 withCallingHandlers({
[17:42:06.312]                   42
[17:42:06.312]                 }, immediateCondition = function(cond) {
[17:42:06.312]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.312]                   sendCondition(cond)
[17:42:06.312]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.312]                   {
[17:42:06.312]                     inherits <- base::inherits
[17:42:06.312]                     invokeRestart <- base::invokeRestart
[17:42:06.312]                     is.null <- base::is.null
[17:42:06.312]                     muffled <- FALSE
[17:42:06.312]                     if (inherits(cond, "message")) {
[17:42:06.312]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.312]                       if (muffled) 
[17:42:06.312]                         invokeRestart("muffleMessage")
[17:42:06.312]                     }
[17:42:06.312]                     else if (inherits(cond, "warning")) {
[17:42:06.312]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.312]                       if (muffled) 
[17:42:06.312]                         invokeRestart("muffleWarning")
[17:42:06.312]                     }
[17:42:06.312]                     else if (inherits(cond, "condition")) {
[17:42:06.312]                       if (!is.null(pattern)) {
[17:42:06.312]                         computeRestarts <- base::computeRestarts
[17:42:06.312]                         grepl <- base::grepl
[17:42:06.312]                         restarts <- computeRestarts(cond)
[17:42:06.312]                         for (restart in restarts) {
[17:42:06.312]                           name <- restart$name
[17:42:06.312]                           if (is.null(name)) 
[17:42:06.312]                             next
[17:42:06.312]                           if (!grepl(pattern, name)) 
[17:42:06.312]                             next
[17:42:06.312]                           invokeRestart(restart)
[17:42:06.312]                           muffled <- TRUE
[17:42:06.312]                           break
[17:42:06.312]                         }
[17:42:06.312]                       }
[17:42:06.312]                     }
[17:42:06.312]                     invisible(muffled)
[17:42:06.312]                   }
[17:42:06.312]                   muffleCondition(cond)
[17:42:06.312]                 })
[17:42:06.312]             }))
[17:42:06.312]             future::FutureResult(value = ...future.value$value, 
[17:42:06.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.312]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.312]                     ...future.globalenv.names))
[17:42:06.312]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.312]         }, condition = base::local({
[17:42:06.312]             c <- base::c
[17:42:06.312]             inherits <- base::inherits
[17:42:06.312]             invokeRestart <- base::invokeRestart
[17:42:06.312]             length <- base::length
[17:42:06.312]             list <- base::list
[17:42:06.312]             seq.int <- base::seq.int
[17:42:06.312]             signalCondition <- base::signalCondition
[17:42:06.312]             sys.calls <- base::sys.calls
[17:42:06.312]             `[[` <- base::`[[`
[17:42:06.312]             `+` <- base::`+`
[17:42:06.312]             `<<-` <- base::`<<-`
[17:42:06.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.312]                   3L)]
[17:42:06.312]             }
[17:42:06.312]             function(cond) {
[17:42:06.312]                 is_error <- inherits(cond, "error")
[17:42:06.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.312]                   NULL)
[17:42:06.312]                 if (is_error) {
[17:42:06.312]                   sessionInformation <- function() {
[17:42:06.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.312]                       search = base::search(), system = base::Sys.info())
[17:42:06.312]                   }
[17:42:06.312]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.312]                     cond$call), session = sessionInformation(), 
[17:42:06.312]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.312]                   signalCondition(cond)
[17:42:06.312]                 }
[17:42:06.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.312]                 "immediateCondition"))) {
[17:42:06.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.312]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.312]                   if (TRUE && !signal) {
[17:42:06.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.312]                     {
[17:42:06.312]                       inherits <- base::inherits
[17:42:06.312]                       invokeRestart <- base::invokeRestart
[17:42:06.312]                       is.null <- base::is.null
[17:42:06.312]                       muffled <- FALSE
[17:42:06.312]                       if (inherits(cond, "message")) {
[17:42:06.312]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.312]                         if (muffled) 
[17:42:06.312]                           invokeRestart("muffleMessage")
[17:42:06.312]                       }
[17:42:06.312]                       else if (inherits(cond, "warning")) {
[17:42:06.312]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.312]                         if (muffled) 
[17:42:06.312]                           invokeRestart("muffleWarning")
[17:42:06.312]                       }
[17:42:06.312]                       else if (inherits(cond, "condition")) {
[17:42:06.312]                         if (!is.null(pattern)) {
[17:42:06.312]                           computeRestarts <- base::computeRestarts
[17:42:06.312]                           grepl <- base::grepl
[17:42:06.312]                           restarts <- computeRestarts(cond)
[17:42:06.312]                           for (restart in restarts) {
[17:42:06.312]                             name <- restart$name
[17:42:06.312]                             if (is.null(name)) 
[17:42:06.312]                               next
[17:42:06.312]                             if (!grepl(pattern, name)) 
[17:42:06.312]                               next
[17:42:06.312]                             invokeRestart(restart)
[17:42:06.312]                             muffled <- TRUE
[17:42:06.312]                             break
[17:42:06.312]                           }
[17:42:06.312]                         }
[17:42:06.312]                       }
[17:42:06.312]                       invisible(muffled)
[17:42:06.312]                     }
[17:42:06.312]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.312]                   }
[17:42:06.312]                 }
[17:42:06.312]                 else {
[17:42:06.312]                   if (TRUE) {
[17:42:06.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.312]                     {
[17:42:06.312]                       inherits <- base::inherits
[17:42:06.312]                       invokeRestart <- base::invokeRestart
[17:42:06.312]                       is.null <- base::is.null
[17:42:06.312]                       muffled <- FALSE
[17:42:06.312]                       if (inherits(cond, "message")) {
[17:42:06.312]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.312]                         if (muffled) 
[17:42:06.312]                           invokeRestart("muffleMessage")
[17:42:06.312]                       }
[17:42:06.312]                       else if (inherits(cond, "warning")) {
[17:42:06.312]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.312]                         if (muffled) 
[17:42:06.312]                           invokeRestart("muffleWarning")
[17:42:06.312]                       }
[17:42:06.312]                       else if (inherits(cond, "condition")) {
[17:42:06.312]                         if (!is.null(pattern)) {
[17:42:06.312]                           computeRestarts <- base::computeRestarts
[17:42:06.312]                           grepl <- base::grepl
[17:42:06.312]                           restarts <- computeRestarts(cond)
[17:42:06.312]                           for (restart in restarts) {
[17:42:06.312]                             name <- restart$name
[17:42:06.312]                             if (is.null(name)) 
[17:42:06.312]                               next
[17:42:06.312]                             if (!grepl(pattern, name)) 
[17:42:06.312]                               next
[17:42:06.312]                             invokeRestart(restart)
[17:42:06.312]                             muffled <- TRUE
[17:42:06.312]                             break
[17:42:06.312]                           }
[17:42:06.312]                         }
[17:42:06.312]                       }
[17:42:06.312]                       invisible(muffled)
[17:42:06.312]                     }
[17:42:06.312]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.312]                   }
[17:42:06.312]                 }
[17:42:06.312]             }
[17:42:06.312]         }))
[17:42:06.312]     }, error = function(ex) {
[17:42:06.312]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.312]                 ...future.rng), started = ...future.startTime, 
[17:42:06.312]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.312]             version = "1.8"), class = "FutureResult")
[17:42:06.312]     }, finally = {
[17:42:06.312]         if (!identical(...future.workdir, getwd())) 
[17:42:06.312]             setwd(...future.workdir)
[17:42:06.312]         {
[17:42:06.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.312]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.312]             }
[17:42:06.312]             base::options(...future.oldOptions)
[17:42:06.312]             if (.Platform$OS.type == "windows") {
[17:42:06.312]                 old_names <- names(...future.oldEnvVars)
[17:42:06.312]                 envs <- base::Sys.getenv()
[17:42:06.312]                 names <- names(envs)
[17:42:06.312]                 common <- intersect(names, old_names)
[17:42:06.312]                 added <- setdiff(names, old_names)
[17:42:06.312]                 removed <- setdiff(old_names, names)
[17:42:06.312]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.312]                   envs[common]]
[17:42:06.312]                 NAMES <- toupper(changed)
[17:42:06.312]                 args <- list()
[17:42:06.312]                 for (kk in seq_along(NAMES)) {
[17:42:06.312]                   name <- changed[[kk]]
[17:42:06.312]                   NAME <- NAMES[[kk]]
[17:42:06.312]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.312]                     next
[17:42:06.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.312]                 }
[17:42:06.312]                 NAMES <- toupper(added)
[17:42:06.312]                 for (kk in seq_along(NAMES)) {
[17:42:06.312]                   name <- added[[kk]]
[17:42:06.312]                   NAME <- NAMES[[kk]]
[17:42:06.312]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.312]                     next
[17:42:06.312]                   args[[name]] <- ""
[17:42:06.312]                 }
[17:42:06.312]                 NAMES <- toupper(removed)
[17:42:06.312]                 for (kk in seq_along(NAMES)) {
[17:42:06.312]                   name <- removed[[kk]]
[17:42:06.312]                   NAME <- NAMES[[kk]]
[17:42:06.312]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.312]                     next
[17:42:06.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.312]                 }
[17:42:06.312]                 if (length(args) > 0) 
[17:42:06.312]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.312]             }
[17:42:06.312]             else {
[17:42:06.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.312]             }
[17:42:06.312]             {
[17:42:06.312]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.312]                   0L) {
[17:42:06.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.312]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.312]                   base::options(opts)
[17:42:06.312]                 }
[17:42:06.312]                 {
[17:42:06.312]                   {
[17:42:06.312]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.312]                     NULL
[17:42:06.312]                   }
[17:42:06.312]                   options(future.plan = NULL)
[17:42:06.312]                   if (is.na(NA_character_)) 
[17:42:06.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.312]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.312]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.312]                     envir = parent.frame()) 
[17:42:06.312]                   {
[17:42:06.312]                     if (is.function(workers)) 
[17:42:06.312]                       workers <- workers()
[17:42:06.312]                     workers <- structure(as.integer(workers), 
[17:42:06.312]                       class = class(workers))
[17:42:06.312]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.312]                       workers >= 1)
[17:42:06.312]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.312]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.312]                     }
[17:42:06.312]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.312]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.312]                       envir = envir)
[17:42:06.312]                     if (!future$lazy) 
[17:42:06.312]                       future <- run(future)
[17:42:06.312]                     invisible(future)
[17:42:06.312]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.312]                 }
[17:42:06.312]             }
[17:42:06.312]         }
[17:42:06.312]     })
[17:42:06.312]     if (TRUE) {
[17:42:06.312]         base::sink(type = "output", split = FALSE)
[17:42:06.312]         if (TRUE) {
[17:42:06.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.312]         }
[17:42:06.312]         else {
[17:42:06.312]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.312]         }
[17:42:06.312]         base::close(...future.stdout)
[17:42:06.312]         ...future.stdout <- NULL
[17:42:06.312]     }
[17:42:06.312]     ...future.result$conditions <- ...future.conditions
[17:42:06.312]     ...future.result$finished <- base::Sys.time()
[17:42:06.312]     ...future.result
[17:42:06.312] }
[17:42:06.316] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.327] result() for ClusterFuture ...
[17:42:06.327] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.328] - Validating connection of MultisessionFuture
[17:42:06.364] - received message: FutureResult
[17:42:06.364] - Received FutureResult
[17:42:06.364] - Erased future from FutureRegistry
[17:42:06.365] result() for ClusterFuture ...
[17:42:06.365] - result already collected: FutureResult
[17:42:06.365] result() for ClusterFuture ... done
[17:42:06.365] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.365] result() for ClusterFuture ... done
[17:42:06.365] result() for ClusterFuture ...
[17:42:06.365] - result already collected: FutureResult
[17:42:06.365] result() for ClusterFuture ... done
[17:42:06.366] getGlobalsAndPackages() ...
[17:42:06.366] Searching for globals...
[17:42:06.366] 
[17:42:06.366] Searching for globals ... DONE
[17:42:06.366] - globals: [0] <none>
[17:42:06.367] getGlobalsAndPackages() ... DONE
[17:42:06.367] run() for ‘Future’ ...
[17:42:06.367] - state: ‘created’
[17:42:06.367] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:06.383] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.383] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:06.383]   - Field: ‘node’
[17:42:06.383]   - Field: ‘label’
[17:42:06.383]   - Field: ‘local’
[17:42:06.383]   - Field: ‘owner’
[17:42:06.384]   - Field: ‘envir’
[17:42:06.384]   - Field: ‘workers’
[17:42:06.384]   - Field: ‘packages’
[17:42:06.384]   - Field: ‘gc’
[17:42:06.384]   - Field: ‘conditions’
[17:42:06.384]   - Field: ‘persistent’
[17:42:06.384]   - Field: ‘expr’
[17:42:06.384]   - Field: ‘uuid’
[17:42:06.384]   - Field: ‘seed’
[17:42:06.385]   - Field: ‘version’
[17:42:06.385]   - Field: ‘result’
[17:42:06.385]   - Field: ‘asynchronous’
[17:42:06.385]   - Field: ‘calls’
[17:42:06.385]   - Field: ‘globals’
[17:42:06.385]   - Field: ‘stdout’
[17:42:06.385]   - Field: ‘earlySignal’
[17:42:06.385]   - Field: ‘lazy’
[17:42:06.386]   - Field: ‘state’
[17:42:06.386] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:06.386] - Launch lazy future ...
[17:42:06.386] Packages needed by the future expression (n = 0): <none>
[17:42:06.386] Packages needed by future strategies (n = 0): <none>
[17:42:06.387] {
[17:42:06.387]     {
[17:42:06.387]         {
[17:42:06.387]             ...future.startTime <- base::Sys.time()
[17:42:06.387]             {
[17:42:06.387]                 {
[17:42:06.387]                   {
[17:42:06.387]                     {
[17:42:06.387]                       base::local({
[17:42:06.387]                         has_future <- base::requireNamespace("future", 
[17:42:06.387]                           quietly = TRUE)
[17:42:06.387]                         if (has_future) {
[17:42:06.387]                           ns <- base::getNamespace("future")
[17:42:06.387]                           version <- ns[[".package"]][["version"]]
[17:42:06.387]                           if (is.null(version)) 
[17:42:06.387]                             version <- utils::packageVersion("future")
[17:42:06.387]                         }
[17:42:06.387]                         else {
[17:42:06.387]                           version <- NULL
[17:42:06.387]                         }
[17:42:06.387]                         if (!has_future || version < "1.8.0") {
[17:42:06.387]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.387]                             "", base::R.version$version.string), 
[17:42:06.387]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.387]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.387]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.387]                               "release", "version")], collapse = " "), 
[17:42:06.387]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.387]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.387]                             info)
[17:42:06.387]                           info <- base::paste(info, collapse = "; ")
[17:42:06.387]                           if (!has_future) {
[17:42:06.387]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.387]                               info)
[17:42:06.387]                           }
[17:42:06.387]                           else {
[17:42:06.387]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.387]                               info, version)
[17:42:06.387]                           }
[17:42:06.387]                           base::stop(msg)
[17:42:06.387]                         }
[17:42:06.387]                       })
[17:42:06.387]                     }
[17:42:06.387]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.387]                     base::options(mc.cores = 1L)
[17:42:06.387]                   }
[17:42:06.387]                   options(future.plan = NULL)
[17:42:06.387]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.387]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.387]                 }
[17:42:06.387]                 ...future.workdir <- getwd()
[17:42:06.387]             }
[17:42:06.387]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.387]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.387]         }
[17:42:06.387]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.387]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.387]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.387]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.387]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.387]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.387]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.387]             base::names(...future.oldOptions))
[17:42:06.387]     }
[17:42:06.387]     if (FALSE) {
[17:42:06.387]     }
[17:42:06.387]     else {
[17:42:06.387]         if (TRUE) {
[17:42:06.387]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.387]                 open = "w")
[17:42:06.387]         }
[17:42:06.387]         else {
[17:42:06.387]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.387]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.387]         }
[17:42:06.387]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.387]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.387]             base::sink(type = "output", split = FALSE)
[17:42:06.387]             base::close(...future.stdout)
[17:42:06.387]         }, add = TRUE)
[17:42:06.387]     }
[17:42:06.387]     ...future.frame <- base::sys.nframe()
[17:42:06.387]     ...future.conditions <- base::list()
[17:42:06.387]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.387]     if (FALSE) {
[17:42:06.387]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.387]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.387]     }
[17:42:06.387]     ...future.result <- base::tryCatch({
[17:42:06.387]         base::withCallingHandlers({
[17:42:06.387]             ...future.value <- base::withVisible(base::local({
[17:42:06.387]                 ...future.makeSendCondition <- local({
[17:42:06.387]                   sendCondition <- NULL
[17:42:06.387]                   function(frame = 1L) {
[17:42:06.387]                     if (is.function(sendCondition)) 
[17:42:06.387]                       return(sendCondition)
[17:42:06.387]                     ns <- getNamespace("parallel")
[17:42:06.387]                     if (exists("sendData", mode = "function", 
[17:42:06.387]                       envir = ns)) {
[17:42:06.387]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.387]                         envir = ns)
[17:42:06.387]                       envir <- sys.frame(frame)
[17:42:06.387]                       master <- NULL
[17:42:06.387]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.387]                         !identical(envir, emptyenv())) {
[17:42:06.387]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.387]                           inherits = FALSE)) {
[17:42:06.387]                           master <- get("master", mode = "list", 
[17:42:06.387]                             envir = envir, inherits = FALSE)
[17:42:06.387]                           if (inherits(master, c("SOCKnode", 
[17:42:06.387]                             "SOCK0node"))) {
[17:42:06.387]                             sendCondition <<- function(cond) {
[17:42:06.387]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.387]                                 success = TRUE)
[17:42:06.387]                               parallel_sendData(master, data)
[17:42:06.387]                             }
[17:42:06.387]                             return(sendCondition)
[17:42:06.387]                           }
[17:42:06.387]                         }
[17:42:06.387]                         frame <- frame + 1L
[17:42:06.387]                         envir <- sys.frame(frame)
[17:42:06.387]                       }
[17:42:06.387]                     }
[17:42:06.387]                     sendCondition <<- function(cond) NULL
[17:42:06.387]                   }
[17:42:06.387]                 })
[17:42:06.387]                 withCallingHandlers({
[17:42:06.387]                   42
[17:42:06.387]                 }, immediateCondition = function(cond) {
[17:42:06.387]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.387]                   sendCondition(cond)
[17:42:06.387]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.387]                   {
[17:42:06.387]                     inherits <- base::inherits
[17:42:06.387]                     invokeRestart <- base::invokeRestart
[17:42:06.387]                     is.null <- base::is.null
[17:42:06.387]                     muffled <- FALSE
[17:42:06.387]                     if (inherits(cond, "message")) {
[17:42:06.387]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.387]                       if (muffled) 
[17:42:06.387]                         invokeRestart("muffleMessage")
[17:42:06.387]                     }
[17:42:06.387]                     else if (inherits(cond, "warning")) {
[17:42:06.387]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.387]                       if (muffled) 
[17:42:06.387]                         invokeRestart("muffleWarning")
[17:42:06.387]                     }
[17:42:06.387]                     else if (inherits(cond, "condition")) {
[17:42:06.387]                       if (!is.null(pattern)) {
[17:42:06.387]                         computeRestarts <- base::computeRestarts
[17:42:06.387]                         grepl <- base::grepl
[17:42:06.387]                         restarts <- computeRestarts(cond)
[17:42:06.387]                         for (restart in restarts) {
[17:42:06.387]                           name <- restart$name
[17:42:06.387]                           if (is.null(name)) 
[17:42:06.387]                             next
[17:42:06.387]                           if (!grepl(pattern, name)) 
[17:42:06.387]                             next
[17:42:06.387]                           invokeRestart(restart)
[17:42:06.387]                           muffled <- TRUE
[17:42:06.387]                           break
[17:42:06.387]                         }
[17:42:06.387]                       }
[17:42:06.387]                     }
[17:42:06.387]                     invisible(muffled)
[17:42:06.387]                   }
[17:42:06.387]                   muffleCondition(cond)
[17:42:06.387]                 })
[17:42:06.387]             }))
[17:42:06.387]             future::FutureResult(value = ...future.value$value, 
[17:42:06.387]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.387]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.387]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.387]                     ...future.globalenv.names))
[17:42:06.387]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.387]         }, condition = base::local({
[17:42:06.387]             c <- base::c
[17:42:06.387]             inherits <- base::inherits
[17:42:06.387]             invokeRestart <- base::invokeRestart
[17:42:06.387]             length <- base::length
[17:42:06.387]             list <- base::list
[17:42:06.387]             seq.int <- base::seq.int
[17:42:06.387]             signalCondition <- base::signalCondition
[17:42:06.387]             sys.calls <- base::sys.calls
[17:42:06.387]             `[[` <- base::`[[`
[17:42:06.387]             `+` <- base::`+`
[17:42:06.387]             `<<-` <- base::`<<-`
[17:42:06.387]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.387]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.387]                   3L)]
[17:42:06.387]             }
[17:42:06.387]             function(cond) {
[17:42:06.387]                 is_error <- inherits(cond, "error")
[17:42:06.387]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.387]                   NULL)
[17:42:06.387]                 if (is_error) {
[17:42:06.387]                   sessionInformation <- function() {
[17:42:06.387]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.387]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.387]                       search = base::search(), system = base::Sys.info())
[17:42:06.387]                   }
[17:42:06.387]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.387]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.387]                     cond$call), session = sessionInformation(), 
[17:42:06.387]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.387]                   signalCondition(cond)
[17:42:06.387]                 }
[17:42:06.387]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.387]                 "immediateCondition"))) {
[17:42:06.387]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.387]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.387]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.387]                   if (TRUE && !signal) {
[17:42:06.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.387]                     {
[17:42:06.387]                       inherits <- base::inherits
[17:42:06.387]                       invokeRestart <- base::invokeRestart
[17:42:06.387]                       is.null <- base::is.null
[17:42:06.387]                       muffled <- FALSE
[17:42:06.387]                       if (inherits(cond, "message")) {
[17:42:06.387]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.387]                         if (muffled) 
[17:42:06.387]                           invokeRestart("muffleMessage")
[17:42:06.387]                       }
[17:42:06.387]                       else if (inherits(cond, "warning")) {
[17:42:06.387]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.387]                         if (muffled) 
[17:42:06.387]                           invokeRestart("muffleWarning")
[17:42:06.387]                       }
[17:42:06.387]                       else if (inherits(cond, "condition")) {
[17:42:06.387]                         if (!is.null(pattern)) {
[17:42:06.387]                           computeRestarts <- base::computeRestarts
[17:42:06.387]                           grepl <- base::grepl
[17:42:06.387]                           restarts <- computeRestarts(cond)
[17:42:06.387]                           for (restart in restarts) {
[17:42:06.387]                             name <- restart$name
[17:42:06.387]                             if (is.null(name)) 
[17:42:06.387]                               next
[17:42:06.387]                             if (!grepl(pattern, name)) 
[17:42:06.387]                               next
[17:42:06.387]                             invokeRestart(restart)
[17:42:06.387]                             muffled <- TRUE
[17:42:06.387]                             break
[17:42:06.387]                           }
[17:42:06.387]                         }
[17:42:06.387]                       }
[17:42:06.387]                       invisible(muffled)
[17:42:06.387]                     }
[17:42:06.387]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.387]                   }
[17:42:06.387]                 }
[17:42:06.387]                 else {
[17:42:06.387]                   if (TRUE) {
[17:42:06.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.387]                     {
[17:42:06.387]                       inherits <- base::inherits
[17:42:06.387]                       invokeRestart <- base::invokeRestart
[17:42:06.387]                       is.null <- base::is.null
[17:42:06.387]                       muffled <- FALSE
[17:42:06.387]                       if (inherits(cond, "message")) {
[17:42:06.387]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.387]                         if (muffled) 
[17:42:06.387]                           invokeRestart("muffleMessage")
[17:42:06.387]                       }
[17:42:06.387]                       else if (inherits(cond, "warning")) {
[17:42:06.387]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.387]                         if (muffled) 
[17:42:06.387]                           invokeRestart("muffleWarning")
[17:42:06.387]                       }
[17:42:06.387]                       else if (inherits(cond, "condition")) {
[17:42:06.387]                         if (!is.null(pattern)) {
[17:42:06.387]                           computeRestarts <- base::computeRestarts
[17:42:06.387]                           grepl <- base::grepl
[17:42:06.387]                           restarts <- computeRestarts(cond)
[17:42:06.387]                           for (restart in restarts) {
[17:42:06.387]                             name <- restart$name
[17:42:06.387]                             if (is.null(name)) 
[17:42:06.387]                               next
[17:42:06.387]                             if (!grepl(pattern, name)) 
[17:42:06.387]                               next
[17:42:06.387]                             invokeRestart(restart)
[17:42:06.387]                             muffled <- TRUE
[17:42:06.387]                             break
[17:42:06.387]                           }
[17:42:06.387]                         }
[17:42:06.387]                       }
[17:42:06.387]                       invisible(muffled)
[17:42:06.387]                     }
[17:42:06.387]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.387]                   }
[17:42:06.387]                 }
[17:42:06.387]             }
[17:42:06.387]         }))
[17:42:06.387]     }, error = function(ex) {
[17:42:06.387]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.387]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.387]                 ...future.rng), started = ...future.startTime, 
[17:42:06.387]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.387]             version = "1.8"), class = "FutureResult")
[17:42:06.387]     }, finally = {
[17:42:06.387]         if (!identical(...future.workdir, getwd())) 
[17:42:06.387]             setwd(...future.workdir)
[17:42:06.387]         {
[17:42:06.387]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.387]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.387]             }
[17:42:06.387]             base::options(...future.oldOptions)
[17:42:06.387]             if (.Platform$OS.type == "windows") {
[17:42:06.387]                 old_names <- names(...future.oldEnvVars)
[17:42:06.387]                 envs <- base::Sys.getenv()
[17:42:06.387]                 names <- names(envs)
[17:42:06.387]                 common <- intersect(names, old_names)
[17:42:06.387]                 added <- setdiff(names, old_names)
[17:42:06.387]                 removed <- setdiff(old_names, names)
[17:42:06.387]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.387]                   envs[common]]
[17:42:06.387]                 NAMES <- toupper(changed)
[17:42:06.387]                 args <- list()
[17:42:06.387]                 for (kk in seq_along(NAMES)) {
[17:42:06.387]                   name <- changed[[kk]]
[17:42:06.387]                   NAME <- NAMES[[kk]]
[17:42:06.387]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.387]                     next
[17:42:06.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.387]                 }
[17:42:06.387]                 NAMES <- toupper(added)
[17:42:06.387]                 for (kk in seq_along(NAMES)) {
[17:42:06.387]                   name <- added[[kk]]
[17:42:06.387]                   NAME <- NAMES[[kk]]
[17:42:06.387]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.387]                     next
[17:42:06.387]                   args[[name]] <- ""
[17:42:06.387]                 }
[17:42:06.387]                 NAMES <- toupper(removed)
[17:42:06.387]                 for (kk in seq_along(NAMES)) {
[17:42:06.387]                   name <- removed[[kk]]
[17:42:06.387]                   NAME <- NAMES[[kk]]
[17:42:06.387]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.387]                     next
[17:42:06.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.387]                 }
[17:42:06.387]                 if (length(args) > 0) 
[17:42:06.387]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.387]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.387]             }
[17:42:06.387]             else {
[17:42:06.387]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.387]             }
[17:42:06.387]             {
[17:42:06.387]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.387]                   0L) {
[17:42:06.387]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.387]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.387]                   base::options(opts)
[17:42:06.387]                 }
[17:42:06.387]                 {
[17:42:06.387]                   {
[17:42:06.387]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.387]                     NULL
[17:42:06.387]                   }
[17:42:06.387]                   options(future.plan = NULL)
[17:42:06.387]                   if (is.na(NA_character_)) 
[17:42:06.387]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.387]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.387]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.387]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.387]                     envir = parent.frame()) 
[17:42:06.387]                   {
[17:42:06.387]                     if (is.function(workers)) 
[17:42:06.387]                       workers <- workers()
[17:42:06.387]                     workers <- structure(as.integer(workers), 
[17:42:06.387]                       class = class(workers))
[17:42:06.387]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.387]                       workers >= 1)
[17:42:06.387]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.387]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.387]                     }
[17:42:06.387]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.387]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.387]                       envir = envir)
[17:42:06.387]                     if (!future$lazy) 
[17:42:06.387]                       future <- run(future)
[17:42:06.387]                     invisible(future)
[17:42:06.387]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.387]                 }
[17:42:06.387]             }
[17:42:06.387]         }
[17:42:06.387]     })
[17:42:06.387]     if (TRUE) {
[17:42:06.387]         base::sink(type = "output", split = FALSE)
[17:42:06.387]         if (TRUE) {
[17:42:06.387]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.387]         }
[17:42:06.387]         else {
[17:42:06.387]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.387]         }
[17:42:06.387]         base::close(...future.stdout)
[17:42:06.387]         ...future.stdout <- NULL
[17:42:06.387]     }
[17:42:06.387]     ...future.result$conditions <- ...future.conditions
[17:42:06.387]     ...future.result$finished <- base::Sys.time()
[17:42:06.387]     ...future.result
[17:42:06.387] }
[17:42:06.390] MultisessionFuture started
[17:42:06.391] - Launch lazy future ... done
[17:42:06.391] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.402] result() for ClusterFuture ...
[17:42:06.402] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.402] - Validating connection of MultisessionFuture
[17:42:06.436] - received message: FutureResult
[17:42:06.436] - Received FutureResult
[17:42:06.436] - Erased future from FutureRegistry
[17:42:06.437] result() for ClusterFuture ...
[17:42:06.437] - result already collected: FutureResult
[17:42:06.437] result() for ClusterFuture ... done
[17:42:06.437] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.437] result() for ClusterFuture ... done
[17:42:06.437] result() for ClusterFuture ...
[17:42:06.437] - result already collected: FutureResult
[17:42:06.437] result() for ClusterFuture ... done
[17:42:06.438] getGlobalsAndPackages() ...
[17:42:06.438] Searching for globals...
[17:42:06.439] - globals found: [1] ‘{’
[17:42:06.439] Searching for globals ... DONE
[17:42:06.439] Resolving globals: FALSE
[17:42:06.440] 
[17:42:06.440] 
[17:42:06.440] getGlobalsAndPackages() ... DONE
[17:42:06.440] run() for ‘Future’ ...
[17:42:06.440] - state: ‘created’
[17:42:06.441] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:06.456] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.456] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:06.456]   - Field: ‘node’
[17:42:06.456]   - Field: ‘label’
[17:42:06.456]   - Field: ‘local’
[17:42:06.457]   - Field: ‘owner’
[17:42:06.457]   - Field: ‘envir’
[17:42:06.457]   - Field: ‘workers’
[17:42:06.457]   - Field: ‘packages’
[17:42:06.457]   - Field: ‘gc’
[17:42:06.457]   - Field: ‘conditions’
[17:42:06.457]   - Field: ‘persistent’
[17:42:06.457]   - Field: ‘expr’
[17:42:06.457]   - Field: ‘uuid’
[17:42:06.458]   - Field: ‘seed’
[17:42:06.458]   - Field: ‘version’
[17:42:06.458]   - Field: ‘result’
[17:42:06.458]   - Field: ‘asynchronous’
[17:42:06.458]   - Field: ‘calls’
[17:42:06.458]   - Field: ‘globals’
[17:42:06.458]   - Field: ‘stdout’
[17:42:06.458]   - Field: ‘earlySignal’
[17:42:06.458]   - Field: ‘lazy’
[17:42:06.459]   - Field: ‘state’
[17:42:06.459] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:06.459] - Launch lazy future ...
[17:42:06.459] Packages needed by the future expression (n = 0): <none>
[17:42:06.459] Packages needed by future strategies (n = 0): <none>
[17:42:06.460] {
[17:42:06.460]     {
[17:42:06.460]         {
[17:42:06.460]             ...future.startTime <- base::Sys.time()
[17:42:06.460]             {
[17:42:06.460]                 {
[17:42:06.460]                   {
[17:42:06.460]                     {
[17:42:06.460]                       base::local({
[17:42:06.460]                         has_future <- base::requireNamespace("future", 
[17:42:06.460]                           quietly = TRUE)
[17:42:06.460]                         if (has_future) {
[17:42:06.460]                           ns <- base::getNamespace("future")
[17:42:06.460]                           version <- ns[[".package"]][["version"]]
[17:42:06.460]                           if (is.null(version)) 
[17:42:06.460]                             version <- utils::packageVersion("future")
[17:42:06.460]                         }
[17:42:06.460]                         else {
[17:42:06.460]                           version <- NULL
[17:42:06.460]                         }
[17:42:06.460]                         if (!has_future || version < "1.8.0") {
[17:42:06.460]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.460]                             "", base::R.version$version.string), 
[17:42:06.460]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.460]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.460]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.460]                               "release", "version")], collapse = " "), 
[17:42:06.460]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.460]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.460]                             info)
[17:42:06.460]                           info <- base::paste(info, collapse = "; ")
[17:42:06.460]                           if (!has_future) {
[17:42:06.460]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.460]                               info)
[17:42:06.460]                           }
[17:42:06.460]                           else {
[17:42:06.460]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.460]                               info, version)
[17:42:06.460]                           }
[17:42:06.460]                           base::stop(msg)
[17:42:06.460]                         }
[17:42:06.460]                       })
[17:42:06.460]                     }
[17:42:06.460]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.460]                     base::options(mc.cores = 1L)
[17:42:06.460]                   }
[17:42:06.460]                   options(future.plan = NULL)
[17:42:06.460]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.460]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.460]                 }
[17:42:06.460]                 ...future.workdir <- getwd()
[17:42:06.460]             }
[17:42:06.460]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.460]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.460]         }
[17:42:06.460]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.460]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.460]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.460]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.460]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.460]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.460]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.460]             base::names(...future.oldOptions))
[17:42:06.460]     }
[17:42:06.460]     if (FALSE) {
[17:42:06.460]     }
[17:42:06.460]     else {
[17:42:06.460]         if (TRUE) {
[17:42:06.460]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.460]                 open = "w")
[17:42:06.460]         }
[17:42:06.460]         else {
[17:42:06.460]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.460]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.460]         }
[17:42:06.460]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.460]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.460]             base::sink(type = "output", split = FALSE)
[17:42:06.460]             base::close(...future.stdout)
[17:42:06.460]         }, add = TRUE)
[17:42:06.460]     }
[17:42:06.460]     ...future.frame <- base::sys.nframe()
[17:42:06.460]     ...future.conditions <- base::list()
[17:42:06.460]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.460]     if (FALSE) {
[17:42:06.460]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.460]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.460]     }
[17:42:06.460]     ...future.result <- base::tryCatch({
[17:42:06.460]         base::withCallingHandlers({
[17:42:06.460]             ...future.value <- base::withVisible(base::local({
[17:42:06.460]                 ...future.makeSendCondition <- local({
[17:42:06.460]                   sendCondition <- NULL
[17:42:06.460]                   function(frame = 1L) {
[17:42:06.460]                     if (is.function(sendCondition)) 
[17:42:06.460]                       return(sendCondition)
[17:42:06.460]                     ns <- getNamespace("parallel")
[17:42:06.460]                     if (exists("sendData", mode = "function", 
[17:42:06.460]                       envir = ns)) {
[17:42:06.460]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.460]                         envir = ns)
[17:42:06.460]                       envir <- sys.frame(frame)
[17:42:06.460]                       master <- NULL
[17:42:06.460]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.460]                         !identical(envir, emptyenv())) {
[17:42:06.460]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.460]                           inherits = FALSE)) {
[17:42:06.460]                           master <- get("master", mode = "list", 
[17:42:06.460]                             envir = envir, inherits = FALSE)
[17:42:06.460]                           if (inherits(master, c("SOCKnode", 
[17:42:06.460]                             "SOCK0node"))) {
[17:42:06.460]                             sendCondition <<- function(cond) {
[17:42:06.460]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.460]                                 success = TRUE)
[17:42:06.460]                               parallel_sendData(master, data)
[17:42:06.460]                             }
[17:42:06.460]                             return(sendCondition)
[17:42:06.460]                           }
[17:42:06.460]                         }
[17:42:06.460]                         frame <- frame + 1L
[17:42:06.460]                         envir <- sys.frame(frame)
[17:42:06.460]                       }
[17:42:06.460]                     }
[17:42:06.460]                     sendCondition <<- function(cond) NULL
[17:42:06.460]                   }
[17:42:06.460]                 })
[17:42:06.460]                 withCallingHandlers({
[17:42:06.460]                   {
[17:42:06.460]                     42
[17:42:06.460]                   }
[17:42:06.460]                 }, immediateCondition = function(cond) {
[17:42:06.460]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.460]                   sendCondition(cond)
[17:42:06.460]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.460]                   {
[17:42:06.460]                     inherits <- base::inherits
[17:42:06.460]                     invokeRestart <- base::invokeRestart
[17:42:06.460]                     is.null <- base::is.null
[17:42:06.460]                     muffled <- FALSE
[17:42:06.460]                     if (inherits(cond, "message")) {
[17:42:06.460]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.460]                       if (muffled) 
[17:42:06.460]                         invokeRestart("muffleMessage")
[17:42:06.460]                     }
[17:42:06.460]                     else if (inherits(cond, "warning")) {
[17:42:06.460]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.460]                       if (muffled) 
[17:42:06.460]                         invokeRestart("muffleWarning")
[17:42:06.460]                     }
[17:42:06.460]                     else if (inherits(cond, "condition")) {
[17:42:06.460]                       if (!is.null(pattern)) {
[17:42:06.460]                         computeRestarts <- base::computeRestarts
[17:42:06.460]                         grepl <- base::grepl
[17:42:06.460]                         restarts <- computeRestarts(cond)
[17:42:06.460]                         for (restart in restarts) {
[17:42:06.460]                           name <- restart$name
[17:42:06.460]                           if (is.null(name)) 
[17:42:06.460]                             next
[17:42:06.460]                           if (!grepl(pattern, name)) 
[17:42:06.460]                             next
[17:42:06.460]                           invokeRestart(restart)
[17:42:06.460]                           muffled <- TRUE
[17:42:06.460]                           break
[17:42:06.460]                         }
[17:42:06.460]                       }
[17:42:06.460]                     }
[17:42:06.460]                     invisible(muffled)
[17:42:06.460]                   }
[17:42:06.460]                   muffleCondition(cond)
[17:42:06.460]                 })
[17:42:06.460]             }))
[17:42:06.460]             future::FutureResult(value = ...future.value$value, 
[17:42:06.460]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.460]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.460]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.460]                     ...future.globalenv.names))
[17:42:06.460]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.460]         }, condition = base::local({
[17:42:06.460]             c <- base::c
[17:42:06.460]             inherits <- base::inherits
[17:42:06.460]             invokeRestart <- base::invokeRestart
[17:42:06.460]             length <- base::length
[17:42:06.460]             list <- base::list
[17:42:06.460]             seq.int <- base::seq.int
[17:42:06.460]             signalCondition <- base::signalCondition
[17:42:06.460]             sys.calls <- base::sys.calls
[17:42:06.460]             `[[` <- base::`[[`
[17:42:06.460]             `+` <- base::`+`
[17:42:06.460]             `<<-` <- base::`<<-`
[17:42:06.460]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.460]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.460]                   3L)]
[17:42:06.460]             }
[17:42:06.460]             function(cond) {
[17:42:06.460]                 is_error <- inherits(cond, "error")
[17:42:06.460]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.460]                   NULL)
[17:42:06.460]                 if (is_error) {
[17:42:06.460]                   sessionInformation <- function() {
[17:42:06.460]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.460]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.460]                       search = base::search(), system = base::Sys.info())
[17:42:06.460]                   }
[17:42:06.460]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.460]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.460]                     cond$call), session = sessionInformation(), 
[17:42:06.460]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.460]                   signalCondition(cond)
[17:42:06.460]                 }
[17:42:06.460]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.460]                 "immediateCondition"))) {
[17:42:06.460]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.460]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.460]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.460]                   if (TRUE && !signal) {
[17:42:06.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.460]                     {
[17:42:06.460]                       inherits <- base::inherits
[17:42:06.460]                       invokeRestart <- base::invokeRestart
[17:42:06.460]                       is.null <- base::is.null
[17:42:06.460]                       muffled <- FALSE
[17:42:06.460]                       if (inherits(cond, "message")) {
[17:42:06.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.460]                         if (muffled) 
[17:42:06.460]                           invokeRestart("muffleMessage")
[17:42:06.460]                       }
[17:42:06.460]                       else if (inherits(cond, "warning")) {
[17:42:06.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.460]                         if (muffled) 
[17:42:06.460]                           invokeRestart("muffleWarning")
[17:42:06.460]                       }
[17:42:06.460]                       else if (inherits(cond, "condition")) {
[17:42:06.460]                         if (!is.null(pattern)) {
[17:42:06.460]                           computeRestarts <- base::computeRestarts
[17:42:06.460]                           grepl <- base::grepl
[17:42:06.460]                           restarts <- computeRestarts(cond)
[17:42:06.460]                           for (restart in restarts) {
[17:42:06.460]                             name <- restart$name
[17:42:06.460]                             if (is.null(name)) 
[17:42:06.460]                               next
[17:42:06.460]                             if (!grepl(pattern, name)) 
[17:42:06.460]                               next
[17:42:06.460]                             invokeRestart(restart)
[17:42:06.460]                             muffled <- TRUE
[17:42:06.460]                             break
[17:42:06.460]                           }
[17:42:06.460]                         }
[17:42:06.460]                       }
[17:42:06.460]                       invisible(muffled)
[17:42:06.460]                     }
[17:42:06.460]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.460]                   }
[17:42:06.460]                 }
[17:42:06.460]                 else {
[17:42:06.460]                   if (TRUE) {
[17:42:06.460]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.460]                     {
[17:42:06.460]                       inherits <- base::inherits
[17:42:06.460]                       invokeRestart <- base::invokeRestart
[17:42:06.460]                       is.null <- base::is.null
[17:42:06.460]                       muffled <- FALSE
[17:42:06.460]                       if (inherits(cond, "message")) {
[17:42:06.460]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.460]                         if (muffled) 
[17:42:06.460]                           invokeRestart("muffleMessage")
[17:42:06.460]                       }
[17:42:06.460]                       else if (inherits(cond, "warning")) {
[17:42:06.460]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.460]                         if (muffled) 
[17:42:06.460]                           invokeRestart("muffleWarning")
[17:42:06.460]                       }
[17:42:06.460]                       else if (inherits(cond, "condition")) {
[17:42:06.460]                         if (!is.null(pattern)) {
[17:42:06.460]                           computeRestarts <- base::computeRestarts
[17:42:06.460]                           grepl <- base::grepl
[17:42:06.460]                           restarts <- computeRestarts(cond)
[17:42:06.460]                           for (restart in restarts) {
[17:42:06.460]                             name <- restart$name
[17:42:06.460]                             if (is.null(name)) 
[17:42:06.460]                               next
[17:42:06.460]                             if (!grepl(pattern, name)) 
[17:42:06.460]                               next
[17:42:06.460]                             invokeRestart(restart)
[17:42:06.460]                             muffled <- TRUE
[17:42:06.460]                             break
[17:42:06.460]                           }
[17:42:06.460]                         }
[17:42:06.460]                       }
[17:42:06.460]                       invisible(muffled)
[17:42:06.460]                     }
[17:42:06.460]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.460]                   }
[17:42:06.460]                 }
[17:42:06.460]             }
[17:42:06.460]         }))
[17:42:06.460]     }, error = function(ex) {
[17:42:06.460]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.460]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.460]                 ...future.rng), started = ...future.startTime, 
[17:42:06.460]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.460]             version = "1.8"), class = "FutureResult")
[17:42:06.460]     }, finally = {
[17:42:06.460]         if (!identical(...future.workdir, getwd())) 
[17:42:06.460]             setwd(...future.workdir)
[17:42:06.460]         {
[17:42:06.460]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.460]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.460]             }
[17:42:06.460]             base::options(...future.oldOptions)
[17:42:06.460]             if (.Platform$OS.type == "windows") {
[17:42:06.460]                 old_names <- names(...future.oldEnvVars)
[17:42:06.460]                 envs <- base::Sys.getenv()
[17:42:06.460]                 names <- names(envs)
[17:42:06.460]                 common <- intersect(names, old_names)
[17:42:06.460]                 added <- setdiff(names, old_names)
[17:42:06.460]                 removed <- setdiff(old_names, names)
[17:42:06.460]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.460]                   envs[common]]
[17:42:06.460]                 NAMES <- toupper(changed)
[17:42:06.460]                 args <- list()
[17:42:06.460]                 for (kk in seq_along(NAMES)) {
[17:42:06.460]                   name <- changed[[kk]]
[17:42:06.460]                   NAME <- NAMES[[kk]]
[17:42:06.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.460]                     next
[17:42:06.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.460]                 }
[17:42:06.460]                 NAMES <- toupper(added)
[17:42:06.460]                 for (kk in seq_along(NAMES)) {
[17:42:06.460]                   name <- added[[kk]]
[17:42:06.460]                   NAME <- NAMES[[kk]]
[17:42:06.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.460]                     next
[17:42:06.460]                   args[[name]] <- ""
[17:42:06.460]                 }
[17:42:06.460]                 NAMES <- toupper(removed)
[17:42:06.460]                 for (kk in seq_along(NAMES)) {
[17:42:06.460]                   name <- removed[[kk]]
[17:42:06.460]                   NAME <- NAMES[[kk]]
[17:42:06.460]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.460]                     next
[17:42:06.460]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.460]                 }
[17:42:06.460]                 if (length(args) > 0) 
[17:42:06.460]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.460]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.460]             }
[17:42:06.460]             else {
[17:42:06.460]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.460]             }
[17:42:06.460]             {
[17:42:06.460]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.460]                   0L) {
[17:42:06.460]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.460]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.460]                   base::options(opts)
[17:42:06.460]                 }
[17:42:06.460]                 {
[17:42:06.460]                   {
[17:42:06.460]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.460]                     NULL
[17:42:06.460]                   }
[17:42:06.460]                   options(future.plan = NULL)
[17:42:06.460]                   if (is.na(NA_character_)) 
[17:42:06.460]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.460]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.460]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.460]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.460]                     envir = parent.frame()) 
[17:42:06.460]                   {
[17:42:06.460]                     if (is.function(workers)) 
[17:42:06.460]                       workers <- workers()
[17:42:06.460]                     workers <- structure(as.integer(workers), 
[17:42:06.460]                       class = class(workers))
[17:42:06.460]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.460]                       workers >= 1)
[17:42:06.460]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.460]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.460]                     }
[17:42:06.460]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.460]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.460]                       envir = envir)
[17:42:06.460]                     if (!future$lazy) 
[17:42:06.460]                       future <- run(future)
[17:42:06.460]                     invisible(future)
[17:42:06.460]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.460]                 }
[17:42:06.460]             }
[17:42:06.460]         }
[17:42:06.460]     })
[17:42:06.460]     if (TRUE) {
[17:42:06.460]         base::sink(type = "output", split = FALSE)
[17:42:06.460]         if (TRUE) {
[17:42:06.460]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.460]         }
[17:42:06.460]         else {
[17:42:06.460]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.460]         }
[17:42:06.460]         base::close(...future.stdout)
[17:42:06.460]         ...future.stdout <- NULL
[17:42:06.460]     }
[17:42:06.460]     ...future.result$conditions <- ...future.conditions
[17:42:06.460]     ...future.result$finished <- base::Sys.time()
[17:42:06.460]     ...future.result
[17:42:06.460] }
[17:42:06.464] MultisessionFuture started
[17:42:06.464] - Launch lazy future ... done
[17:42:06.464] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.475] result() for ClusterFuture ...
[17:42:06.475] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.476] - Validating connection of MultisessionFuture
[17:42:06.512] - received message: FutureResult
[17:42:06.512] - Received FutureResult
[17:42:06.512] - Erased future from FutureRegistry
[17:42:06.513] result() for ClusterFuture ...
[17:42:06.513] - result already collected: FutureResult
[17:42:06.513] result() for ClusterFuture ... done
[17:42:06.513] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.513] result() for ClusterFuture ... done
[17:42:06.513] result() for ClusterFuture ...
[17:42:06.513] - result already collected: FutureResult
[17:42:06.513] result() for ClusterFuture ... done
[17:42:06.517] getGlobalsAndPackages() ...
[17:42:06.517] 
[17:42:06.518] - globals: [0] <none>
[17:42:06.518] getGlobalsAndPackages() ... DONE
[17:42:06.529] Packages needed by the future expression (n = 0): <none>
[17:42:06.530] Packages needed by future strategies (n = 0): <none>
[17:42:06.532] {
[17:42:06.532]     {
[17:42:06.532]         {
[17:42:06.532]             ...future.startTime <- base::Sys.time()
[17:42:06.532]             {
[17:42:06.532]                 {
[17:42:06.532]                   {
[17:42:06.532]                     {
[17:42:06.532]                       base::local({
[17:42:06.532]                         has_future <- base::requireNamespace("future", 
[17:42:06.532]                           quietly = TRUE)
[17:42:06.532]                         if (has_future) {
[17:42:06.532]                           ns <- base::getNamespace("future")
[17:42:06.532]                           version <- ns[[".package"]][["version"]]
[17:42:06.532]                           if (is.null(version)) 
[17:42:06.532]                             version <- utils::packageVersion("future")
[17:42:06.532]                         }
[17:42:06.532]                         else {
[17:42:06.532]                           version <- NULL
[17:42:06.532]                         }
[17:42:06.532]                         if (!has_future || version < "1.8.0") {
[17:42:06.532]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.532]                             "", base::R.version$version.string), 
[17:42:06.532]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.532]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.532]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.532]                               "release", "version")], collapse = " "), 
[17:42:06.532]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.532]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.532]                             info)
[17:42:06.532]                           info <- base::paste(info, collapse = "; ")
[17:42:06.532]                           if (!has_future) {
[17:42:06.532]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.532]                               info)
[17:42:06.532]                           }
[17:42:06.532]                           else {
[17:42:06.532]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.532]                               info, version)
[17:42:06.532]                           }
[17:42:06.532]                           base::stop(msg)
[17:42:06.532]                         }
[17:42:06.532]                       })
[17:42:06.532]                     }
[17:42:06.532]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.532]                     base::options(mc.cores = 1L)
[17:42:06.532]                   }
[17:42:06.532]                   options(future.plan = NULL)
[17:42:06.532]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.532]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.532]                 }
[17:42:06.532]                 ...future.workdir <- getwd()
[17:42:06.532]             }
[17:42:06.532]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.532]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.532]         }
[17:42:06.532]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.532]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.532]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.532]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.532]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.532]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.532]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.532]             base::names(...future.oldOptions))
[17:42:06.532]     }
[17:42:06.532]     if (FALSE) {
[17:42:06.532]     }
[17:42:06.532]     else {
[17:42:06.532]         if (TRUE) {
[17:42:06.532]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.532]                 open = "w")
[17:42:06.532]         }
[17:42:06.532]         else {
[17:42:06.532]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.532]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.532]         }
[17:42:06.532]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.532]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.532]             base::sink(type = "output", split = FALSE)
[17:42:06.532]             base::close(...future.stdout)
[17:42:06.532]         }, add = TRUE)
[17:42:06.532]     }
[17:42:06.532]     ...future.frame <- base::sys.nframe()
[17:42:06.532]     ...future.conditions <- base::list()
[17:42:06.532]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.532]     if (FALSE) {
[17:42:06.532]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.532]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.532]     }
[17:42:06.532]     ...future.result <- base::tryCatch({
[17:42:06.532]         base::withCallingHandlers({
[17:42:06.532]             ...future.value <- base::withVisible(base::local({
[17:42:06.532]                 ...future.makeSendCondition <- local({
[17:42:06.532]                   sendCondition <- NULL
[17:42:06.532]                   function(frame = 1L) {
[17:42:06.532]                     if (is.function(sendCondition)) 
[17:42:06.532]                       return(sendCondition)
[17:42:06.532]                     ns <- getNamespace("parallel")
[17:42:06.532]                     if (exists("sendData", mode = "function", 
[17:42:06.532]                       envir = ns)) {
[17:42:06.532]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.532]                         envir = ns)
[17:42:06.532]                       envir <- sys.frame(frame)
[17:42:06.532]                       master <- NULL
[17:42:06.532]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.532]                         !identical(envir, emptyenv())) {
[17:42:06.532]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.532]                           inherits = FALSE)) {
[17:42:06.532]                           master <- get("master", mode = "list", 
[17:42:06.532]                             envir = envir, inherits = FALSE)
[17:42:06.532]                           if (inherits(master, c("SOCKnode", 
[17:42:06.532]                             "SOCK0node"))) {
[17:42:06.532]                             sendCondition <<- function(cond) {
[17:42:06.532]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.532]                                 success = TRUE)
[17:42:06.532]                               parallel_sendData(master, data)
[17:42:06.532]                             }
[17:42:06.532]                             return(sendCondition)
[17:42:06.532]                           }
[17:42:06.532]                         }
[17:42:06.532]                         frame <- frame + 1L
[17:42:06.532]                         envir <- sys.frame(frame)
[17:42:06.532]                       }
[17:42:06.532]                     }
[17:42:06.532]                     sendCondition <<- function(cond) NULL
[17:42:06.532]                   }
[17:42:06.532]                 })
[17:42:06.532]                 withCallingHandlers({
[17:42:06.532]                   42
[17:42:06.532]                 }, immediateCondition = function(cond) {
[17:42:06.532]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.532]                   sendCondition(cond)
[17:42:06.532]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.532]                   {
[17:42:06.532]                     inherits <- base::inherits
[17:42:06.532]                     invokeRestart <- base::invokeRestart
[17:42:06.532]                     is.null <- base::is.null
[17:42:06.532]                     muffled <- FALSE
[17:42:06.532]                     if (inherits(cond, "message")) {
[17:42:06.532]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.532]                       if (muffled) 
[17:42:06.532]                         invokeRestart("muffleMessage")
[17:42:06.532]                     }
[17:42:06.532]                     else if (inherits(cond, "warning")) {
[17:42:06.532]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.532]                       if (muffled) 
[17:42:06.532]                         invokeRestart("muffleWarning")
[17:42:06.532]                     }
[17:42:06.532]                     else if (inherits(cond, "condition")) {
[17:42:06.532]                       if (!is.null(pattern)) {
[17:42:06.532]                         computeRestarts <- base::computeRestarts
[17:42:06.532]                         grepl <- base::grepl
[17:42:06.532]                         restarts <- computeRestarts(cond)
[17:42:06.532]                         for (restart in restarts) {
[17:42:06.532]                           name <- restart$name
[17:42:06.532]                           if (is.null(name)) 
[17:42:06.532]                             next
[17:42:06.532]                           if (!grepl(pattern, name)) 
[17:42:06.532]                             next
[17:42:06.532]                           invokeRestart(restart)
[17:42:06.532]                           muffled <- TRUE
[17:42:06.532]                           break
[17:42:06.532]                         }
[17:42:06.532]                       }
[17:42:06.532]                     }
[17:42:06.532]                     invisible(muffled)
[17:42:06.532]                   }
[17:42:06.532]                   muffleCondition(cond)
[17:42:06.532]                 })
[17:42:06.532]             }))
[17:42:06.532]             future::FutureResult(value = ...future.value$value, 
[17:42:06.532]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.532]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.532]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.532]                     ...future.globalenv.names))
[17:42:06.532]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.532]         }, condition = base::local({
[17:42:06.532]             c <- base::c
[17:42:06.532]             inherits <- base::inherits
[17:42:06.532]             invokeRestart <- base::invokeRestart
[17:42:06.532]             length <- base::length
[17:42:06.532]             list <- base::list
[17:42:06.532]             seq.int <- base::seq.int
[17:42:06.532]             signalCondition <- base::signalCondition
[17:42:06.532]             sys.calls <- base::sys.calls
[17:42:06.532]             `[[` <- base::`[[`
[17:42:06.532]             `+` <- base::`+`
[17:42:06.532]             `<<-` <- base::`<<-`
[17:42:06.532]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.532]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.532]                   3L)]
[17:42:06.532]             }
[17:42:06.532]             function(cond) {
[17:42:06.532]                 is_error <- inherits(cond, "error")
[17:42:06.532]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.532]                   NULL)
[17:42:06.532]                 if (is_error) {
[17:42:06.532]                   sessionInformation <- function() {
[17:42:06.532]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.532]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.532]                       search = base::search(), system = base::Sys.info())
[17:42:06.532]                   }
[17:42:06.532]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.532]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.532]                     cond$call), session = sessionInformation(), 
[17:42:06.532]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.532]                   signalCondition(cond)
[17:42:06.532]                 }
[17:42:06.532]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.532]                 "immediateCondition"))) {
[17:42:06.532]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.532]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.532]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.532]                   if (TRUE && !signal) {
[17:42:06.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.532]                     {
[17:42:06.532]                       inherits <- base::inherits
[17:42:06.532]                       invokeRestart <- base::invokeRestart
[17:42:06.532]                       is.null <- base::is.null
[17:42:06.532]                       muffled <- FALSE
[17:42:06.532]                       if (inherits(cond, "message")) {
[17:42:06.532]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.532]                         if (muffled) 
[17:42:06.532]                           invokeRestart("muffleMessage")
[17:42:06.532]                       }
[17:42:06.532]                       else if (inherits(cond, "warning")) {
[17:42:06.532]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.532]                         if (muffled) 
[17:42:06.532]                           invokeRestart("muffleWarning")
[17:42:06.532]                       }
[17:42:06.532]                       else if (inherits(cond, "condition")) {
[17:42:06.532]                         if (!is.null(pattern)) {
[17:42:06.532]                           computeRestarts <- base::computeRestarts
[17:42:06.532]                           grepl <- base::grepl
[17:42:06.532]                           restarts <- computeRestarts(cond)
[17:42:06.532]                           for (restart in restarts) {
[17:42:06.532]                             name <- restart$name
[17:42:06.532]                             if (is.null(name)) 
[17:42:06.532]                               next
[17:42:06.532]                             if (!grepl(pattern, name)) 
[17:42:06.532]                               next
[17:42:06.532]                             invokeRestart(restart)
[17:42:06.532]                             muffled <- TRUE
[17:42:06.532]                             break
[17:42:06.532]                           }
[17:42:06.532]                         }
[17:42:06.532]                       }
[17:42:06.532]                       invisible(muffled)
[17:42:06.532]                     }
[17:42:06.532]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.532]                   }
[17:42:06.532]                 }
[17:42:06.532]                 else {
[17:42:06.532]                   if (TRUE) {
[17:42:06.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.532]                     {
[17:42:06.532]                       inherits <- base::inherits
[17:42:06.532]                       invokeRestart <- base::invokeRestart
[17:42:06.532]                       is.null <- base::is.null
[17:42:06.532]                       muffled <- FALSE
[17:42:06.532]                       if (inherits(cond, "message")) {
[17:42:06.532]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.532]                         if (muffled) 
[17:42:06.532]                           invokeRestart("muffleMessage")
[17:42:06.532]                       }
[17:42:06.532]                       else if (inherits(cond, "warning")) {
[17:42:06.532]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.532]                         if (muffled) 
[17:42:06.532]                           invokeRestart("muffleWarning")
[17:42:06.532]                       }
[17:42:06.532]                       else if (inherits(cond, "condition")) {
[17:42:06.532]                         if (!is.null(pattern)) {
[17:42:06.532]                           computeRestarts <- base::computeRestarts
[17:42:06.532]                           grepl <- base::grepl
[17:42:06.532]                           restarts <- computeRestarts(cond)
[17:42:06.532]                           for (restart in restarts) {
[17:42:06.532]                             name <- restart$name
[17:42:06.532]                             if (is.null(name)) 
[17:42:06.532]                               next
[17:42:06.532]                             if (!grepl(pattern, name)) 
[17:42:06.532]                               next
[17:42:06.532]                             invokeRestart(restart)
[17:42:06.532]                             muffled <- TRUE
[17:42:06.532]                             break
[17:42:06.532]                           }
[17:42:06.532]                         }
[17:42:06.532]                       }
[17:42:06.532]                       invisible(muffled)
[17:42:06.532]                     }
[17:42:06.532]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.532]                   }
[17:42:06.532]                 }
[17:42:06.532]             }
[17:42:06.532]         }))
[17:42:06.532]     }, error = function(ex) {
[17:42:06.532]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.532]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.532]                 ...future.rng), started = ...future.startTime, 
[17:42:06.532]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.532]             version = "1.8"), class = "FutureResult")
[17:42:06.532]     }, finally = {
[17:42:06.532]         if (!identical(...future.workdir, getwd())) 
[17:42:06.532]             setwd(...future.workdir)
[17:42:06.532]         {
[17:42:06.532]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.532]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.532]             }
[17:42:06.532]             base::options(...future.oldOptions)
[17:42:06.532]             if (.Platform$OS.type == "windows") {
[17:42:06.532]                 old_names <- names(...future.oldEnvVars)
[17:42:06.532]                 envs <- base::Sys.getenv()
[17:42:06.532]                 names <- names(envs)
[17:42:06.532]                 common <- intersect(names, old_names)
[17:42:06.532]                 added <- setdiff(names, old_names)
[17:42:06.532]                 removed <- setdiff(old_names, names)
[17:42:06.532]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.532]                   envs[common]]
[17:42:06.532]                 NAMES <- toupper(changed)
[17:42:06.532]                 args <- list()
[17:42:06.532]                 for (kk in seq_along(NAMES)) {
[17:42:06.532]                   name <- changed[[kk]]
[17:42:06.532]                   NAME <- NAMES[[kk]]
[17:42:06.532]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.532]                     next
[17:42:06.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.532]                 }
[17:42:06.532]                 NAMES <- toupper(added)
[17:42:06.532]                 for (kk in seq_along(NAMES)) {
[17:42:06.532]                   name <- added[[kk]]
[17:42:06.532]                   NAME <- NAMES[[kk]]
[17:42:06.532]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.532]                     next
[17:42:06.532]                   args[[name]] <- ""
[17:42:06.532]                 }
[17:42:06.532]                 NAMES <- toupper(removed)
[17:42:06.532]                 for (kk in seq_along(NAMES)) {
[17:42:06.532]                   name <- removed[[kk]]
[17:42:06.532]                   NAME <- NAMES[[kk]]
[17:42:06.532]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.532]                     next
[17:42:06.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.532]                 }
[17:42:06.532]                 if (length(args) > 0) 
[17:42:06.532]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.532]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.532]             }
[17:42:06.532]             else {
[17:42:06.532]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.532]             }
[17:42:06.532]             {
[17:42:06.532]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.532]                   0L) {
[17:42:06.532]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.532]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.532]                   base::options(opts)
[17:42:06.532]                 }
[17:42:06.532]                 {
[17:42:06.532]                   {
[17:42:06.532]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.532]                     NULL
[17:42:06.532]                   }
[17:42:06.532]                   options(future.plan = NULL)
[17:42:06.532]                   if (is.na(NA_character_)) 
[17:42:06.532]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.532]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.532]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.532]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.532]                     envir = parent.frame()) 
[17:42:06.532]                   {
[17:42:06.532]                     if (is.function(workers)) 
[17:42:06.532]                       workers <- workers()
[17:42:06.532]                     workers <- structure(as.integer(workers), 
[17:42:06.532]                       class = class(workers))
[17:42:06.532]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.532]                       workers >= 1)
[17:42:06.532]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.532]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.532]                     }
[17:42:06.532]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.532]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.532]                       envir = envir)
[17:42:06.532]                     if (!future$lazy) 
[17:42:06.532]                       future <- run(future)
[17:42:06.532]                     invisible(future)
[17:42:06.532]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.532]                 }
[17:42:06.532]             }
[17:42:06.532]         }
[17:42:06.532]     })
[17:42:06.532]     if (TRUE) {
[17:42:06.532]         base::sink(type = "output", split = FALSE)
[17:42:06.532]         if (TRUE) {
[17:42:06.532]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.532]         }
[17:42:06.532]         else {
[17:42:06.532]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.532]         }
[17:42:06.532]         base::close(...future.stdout)
[17:42:06.532]         ...future.stdout <- NULL
[17:42:06.532]     }
[17:42:06.532]     ...future.result$conditions <- ...future.conditions
[17:42:06.532]     ...future.result$finished <- base::Sys.time()
[17:42:06.532]     ...future.result
[17:42:06.532] }
[17:42:06.536] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.546] result() for ClusterFuture ...
[17:42:06.547] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.547] - Validating connection of MultisessionFuture
[17:42:06.584] - received message: FutureResult
[17:42:06.584] - Received FutureResult
[17:42:06.584] - Erased future from FutureRegistry
[17:42:06.584] result() for ClusterFuture ...
[17:42:06.584] - result already collected: FutureResult
[17:42:06.585] result() for ClusterFuture ... done
[17:42:06.585] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.585] result() for ClusterFuture ... done
[17:42:06.585] result() for ClusterFuture ...
[17:42:06.585] - result already collected: FutureResult
[17:42:06.585] result() for ClusterFuture ... done
[17:42:06.585] getGlobalsAndPackages() ...
[17:42:06.585] Searching for globals...
[17:42:06.586] 
[17:42:06.586] Searching for globals ... DONE
[17:42:06.586] - globals: [0] <none>
[17:42:06.586] getGlobalsAndPackages() ... DONE
[17:42:06.586] run() for ‘Future’ ...
[17:42:06.586] - state: ‘created’
[17:42:06.586] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:06.601] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.601] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:06.601]   - Field: ‘node’
[17:42:06.601]   - Field: ‘label’
[17:42:06.601]   - Field: ‘local’
[17:42:06.602]   - Field: ‘owner’
[17:42:06.602]   - Field: ‘envir’
[17:42:06.602]   - Field: ‘workers’
[17:42:06.602]   - Field: ‘packages’
[17:42:06.602]   - Field: ‘gc’
[17:42:06.602]   - Field: ‘conditions’
[17:42:06.602]   - Field: ‘persistent’
[17:42:06.602]   - Field: ‘expr’
[17:42:06.602]   - Field: ‘uuid’
[17:42:06.602]   - Field: ‘seed’
[17:42:06.602]   - Field: ‘version’
[17:42:06.603]   - Field: ‘result’
[17:42:06.603]   - Field: ‘asynchronous’
[17:42:06.603]   - Field: ‘calls’
[17:42:06.603]   - Field: ‘globals’
[17:42:06.603]   - Field: ‘stdout’
[17:42:06.603]   - Field: ‘earlySignal’
[17:42:06.603]   - Field: ‘lazy’
[17:42:06.603]   - Field: ‘state’
[17:42:06.603] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:06.603] - Launch lazy future ...
[17:42:06.604] Packages needed by the future expression (n = 0): <none>
[17:42:06.604] Packages needed by future strategies (n = 0): <none>
[17:42:06.604] {
[17:42:06.604]     {
[17:42:06.604]         {
[17:42:06.604]             ...future.startTime <- base::Sys.time()
[17:42:06.604]             {
[17:42:06.604]                 {
[17:42:06.604]                   {
[17:42:06.604]                     {
[17:42:06.604]                       base::local({
[17:42:06.604]                         has_future <- base::requireNamespace("future", 
[17:42:06.604]                           quietly = TRUE)
[17:42:06.604]                         if (has_future) {
[17:42:06.604]                           ns <- base::getNamespace("future")
[17:42:06.604]                           version <- ns[[".package"]][["version"]]
[17:42:06.604]                           if (is.null(version)) 
[17:42:06.604]                             version <- utils::packageVersion("future")
[17:42:06.604]                         }
[17:42:06.604]                         else {
[17:42:06.604]                           version <- NULL
[17:42:06.604]                         }
[17:42:06.604]                         if (!has_future || version < "1.8.0") {
[17:42:06.604]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.604]                             "", base::R.version$version.string), 
[17:42:06.604]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.604]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.604]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.604]                               "release", "version")], collapse = " "), 
[17:42:06.604]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.604]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.604]                             info)
[17:42:06.604]                           info <- base::paste(info, collapse = "; ")
[17:42:06.604]                           if (!has_future) {
[17:42:06.604]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.604]                               info)
[17:42:06.604]                           }
[17:42:06.604]                           else {
[17:42:06.604]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.604]                               info, version)
[17:42:06.604]                           }
[17:42:06.604]                           base::stop(msg)
[17:42:06.604]                         }
[17:42:06.604]                       })
[17:42:06.604]                     }
[17:42:06.604]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.604]                     base::options(mc.cores = 1L)
[17:42:06.604]                   }
[17:42:06.604]                   options(future.plan = NULL)
[17:42:06.604]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.604]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.604]                 }
[17:42:06.604]                 ...future.workdir <- getwd()
[17:42:06.604]             }
[17:42:06.604]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.604]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.604]         }
[17:42:06.604]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.604]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.604]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.604]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.604]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.604]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.604]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.604]             base::names(...future.oldOptions))
[17:42:06.604]     }
[17:42:06.604]     if (FALSE) {
[17:42:06.604]     }
[17:42:06.604]     else {
[17:42:06.604]         if (TRUE) {
[17:42:06.604]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.604]                 open = "w")
[17:42:06.604]         }
[17:42:06.604]         else {
[17:42:06.604]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.604]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.604]         }
[17:42:06.604]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.604]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.604]             base::sink(type = "output", split = FALSE)
[17:42:06.604]             base::close(...future.stdout)
[17:42:06.604]         }, add = TRUE)
[17:42:06.604]     }
[17:42:06.604]     ...future.frame <- base::sys.nframe()
[17:42:06.604]     ...future.conditions <- base::list()
[17:42:06.604]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.604]     if (FALSE) {
[17:42:06.604]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.604]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.604]     }
[17:42:06.604]     ...future.result <- base::tryCatch({
[17:42:06.604]         base::withCallingHandlers({
[17:42:06.604]             ...future.value <- base::withVisible(base::local({
[17:42:06.604]                 ...future.makeSendCondition <- local({
[17:42:06.604]                   sendCondition <- NULL
[17:42:06.604]                   function(frame = 1L) {
[17:42:06.604]                     if (is.function(sendCondition)) 
[17:42:06.604]                       return(sendCondition)
[17:42:06.604]                     ns <- getNamespace("parallel")
[17:42:06.604]                     if (exists("sendData", mode = "function", 
[17:42:06.604]                       envir = ns)) {
[17:42:06.604]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.604]                         envir = ns)
[17:42:06.604]                       envir <- sys.frame(frame)
[17:42:06.604]                       master <- NULL
[17:42:06.604]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.604]                         !identical(envir, emptyenv())) {
[17:42:06.604]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.604]                           inherits = FALSE)) {
[17:42:06.604]                           master <- get("master", mode = "list", 
[17:42:06.604]                             envir = envir, inherits = FALSE)
[17:42:06.604]                           if (inherits(master, c("SOCKnode", 
[17:42:06.604]                             "SOCK0node"))) {
[17:42:06.604]                             sendCondition <<- function(cond) {
[17:42:06.604]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.604]                                 success = TRUE)
[17:42:06.604]                               parallel_sendData(master, data)
[17:42:06.604]                             }
[17:42:06.604]                             return(sendCondition)
[17:42:06.604]                           }
[17:42:06.604]                         }
[17:42:06.604]                         frame <- frame + 1L
[17:42:06.604]                         envir <- sys.frame(frame)
[17:42:06.604]                       }
[17:42:06.604]                     }
[17:42:06.604]                     sendCondition <<- function(cond) NULL
[17:42:06.604]                   }
[17:42:06.604]                 })
[17:42:06.604]                 withCallingHandlers({
[17:42:06.604]                   42
[17:42:06.604]                 }, immediateCondition = function(cond) {
[17:42:06.604]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.604]                   sendCondition(cond)
[17:42:06.604]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.604]                   {
[17:42:06.604]                     inherits <- base::inherits
[17:42:06.604]                     invokeRestart <- base::invokeRestart
[17:42:06.604]                     is.null <- base::is.null
[17:42:06.604]                     muffled <- FALSE
[17:42:06.604]                     if (inherits(cond, "message")) {
[17:42:06.604]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.604]                       if (muffled) 
[17:42:06.604]                         invokeRestart("muffleMessage")
[17:42:06.604]                     }
[17:42:06.604]                     else if (inherits(cond, "warning")) {
[17:42:06.604]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.604]                       if (muffled) 
[17:42:06.604]                         invokeRestart("muffleWarning")
[17:42:06.604]                     }
[17:42:06.604]                     else if (inherits(cond, "condition")) {
[17:42:06.604]                       if (!is.null(pattern)) {
[17:42:06.604]                         computeRestarts <- base::computeRestarts
[17:42:06.604]                         grepl <- base::grepl
[17:42:06.604]                         restarts <- computeRestarts(cond)
[17:42:06.604]                         for (restart in restarts) {
[17:42:06.604]                           name <- restart$name
[17:42:06.604]                           if (is.null(name)) 
[17:42:06.604]                             next
[17:42:06.604]                           if (!grepl(pattern, name)) 
[17:42:06.604]                             next
[17:42:06.604]                           invokeRestart(restart)
[17:42:06.604]                           muffled <- TRUE
[17:42:06.604]                           break
[17:42:06.604]                         }
[17:42:06.604]                       }
[17:42:06.604]                     }
[17:42:06.604]                     invisible(muffled)
[17:42:06.604]                   }
[17:42:06.604]                   muffleCondition(cond)
[17:42:06.604]                 })
[17:42:06.604]             }))
[17:42:06.604]             future::FutureResult(value = ...future.value$value, 
[17:42:06.604]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.604]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.604]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.604]                     ...future.globalenv.names))
[17:42:06.604]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.604]         }, condition = base::local({
[17:42:06.604]             c <- base::c
[17:42:06.604]             inherits <- base::inherits
[17:42:06.604]             invokeRestart <- base::invokeRestart
[17:42:06.604]             length <- base::length
[17:42:06.604]             list <- base::list
[17:42:06.604]             seq.int <- base::seq.int
[17:42:06.604]             signalCondition <- base::signalCondition
[17:42:06.604]             sys.calls <- base::sys.calls
[17:42:06.604]             `[[` <- base::`[[`
[17:42:06.604]             `+` <- base::`+`
[17:42:06.604]             `<<-` <- base::`<<-`
[17:42:06.604]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.604]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.604]                   3L)]
[17:42:06.604]             }
[17:42:06.604]             function(cond) {
[17:42:06.604]                 is_error <- inherits(cond, "error")
[17:42:06.604]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.604]                   NULL)
[17:42:06.604]                 if (is_error) {
[17:42:06.604]                   sessionInformation <- function() {
[17:42:06.604]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.604]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.604]                       search = base::search(), system = base::Sys.info())
[17:42:06.604]                   }
[17:42:06.604]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.604]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.604]                     cond$call), session = sessionInformation(), 
[17:42:06.604]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.604]                   signalCondition(cond)
[17:42:06.604]                 }
[17:42:06.604]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.604]                 "immediateCondition"))) {
[17:42:06.604]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.604]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.604]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.604]                   if (TRUE && !signal) {
[17:42:06.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.604]                     {
[17:42:06.604]                       inherits <- base::inherits
[17:42:06.604]                       invokeRestart <- base::invokeRestart
[17:42:06.604]                       is.null <- base::is.null
[17:42:06.604]                       muffled <- FALSE
[17:42:06.604]                       if (inherits(cond, "message")) {
[17:42:06.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.604]                         if (muffled) 
[17:42:06.604]                           invokeRestart("muffleMessage")
[17:42:06.604]                       }
[17:42:06.604]                       else if (inherits(cond, "warning")) {
[17:42:06.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.604]                         if (muffled) 
[17:42:06.604]                           invokeRestart("muffleWarning")
[17:42:06.604]                       }
[17:42:06.604]                       else if (inherits(cond, "condition")) {
[17:42:06.604]                         if (!is.null(pattern)) {
[17:42:06.604]                           computeRestarts <- base::computeRestarts
[17:42:06.604]                           grepl <- base::grepl
[17:42:06.604]                           restarts <- computeRestarts(cond)
[17:42:06.604]                           for (restart in restarts) {
[17:42:06.604]                             name <- restart$name
[17:42:06.604]                             if (is.null(name)) 
[17:42:06.604]                               next
[17:42:06.604]                             if (!grepl(pattern, name)) 
[17:42:06.604]                               next
[17:42:06.604]                             invokeRestart(restart)
[17:42:06.604]                             muffled <- TRUE
[17:42:06.604]                             break
[17:42:06.604]                           }
[17:42:06.604]                         }
[17:42:06.604]                       }
[17:42:06.604]                       invisible(muffled)
[17:42:06.604]                     }
[17:42:06.604]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.604]                   }
[17:42:06.604]                 }
[17:42:06.604]                 else {
[17:42:06.604]                   if (TRUE) {
[17:42:06.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.604]                     {
[17:42:06.604]                       inherits <- base::inherits
[17:42:06.604]                       invokeRestart <- base::invokeRestart
[17:42:06.604]                       is.null <- base::is.null
[17:42:06.604]                       muffled <- FALSE
[17:42:06.604]                       if (inherits(cond, "message")) {
[17:42:06.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.604]                         if (muffled) 
[17:42:06.604]                           invokeRestart("muffleMessage")
[17:42:06.604]                       }
[17:42:06.604]                       else if (inherits(cond, "warning")) {
[17:42:06.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.604]                         if (muffled) 
[17:42:06.604]                           invokeRestart("muffleWarning")
[17:42:06.604]                       }
[17:42:06.604]                       else if (inherits(cond, "condition")) {
[17:42:06.604]                         if (!is.null(pattern)) {
[17:42:06.604]                           computeRestarts <- base::computeRestarts
[17:42:06.604]                           grepl <- base::grepl
[17:42:06.604]                           restarts <- computeRestarts(cond)
[17:42:06.604]                           for (restart in restarts) {
[17:42:06.604]                             name <- restart$name
[17:42:06.604]                             if (is.null(name)) 
[17:42:06.604]                               next
[17:42:06.604]                             if (!grepl(pattern, name)) 
[17:42:06.604]                               next
[17:42:06.604]                             invokeRestart(restart)
[17:42:06.604]                             muffled <- TRUE
[17:42:06.604]                             break
[17:42:06.604]                           }
[17:42:06.604]                         }
[17:42:06.604]                       }
[17:42:06.604]                       invisible(muffled)
[17:42:06.604]                     }
[17:42:06.604]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.604]                   }
[17:42:06.604]                 }
[17:42:06.604]             }
[17:42:06.604]         }))
[17:42:06.604]     }, error = function(ex) {
[17:42:06.604]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.604]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.604]                 ...future.rng), started = ...future.startTime, 
[17:42:06.604]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.604]             version = "1.8"), class = "FutureResult")
[17:42:06.604]     }, finally = {
[17:42:06.604]         if (!identical(...future.workdir, getwd())) 
[17:42:06.604]             setwd(...future.workdir)
[17:42:06.604]         {
[17:42:06.604]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.604]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.604]             }
[17:42:06.604]             base::options(...future.oldOptions)
[17:42:06.604]             if (.Platform$OS.type == "windows") {
[17:42:06.604]                 old_names <- names(...future.oldEnvVars)
[17:42:06.604]                 envs <- base::Sys.getenv()
[17:42:06.604]                 names <- names(envs)
[17:42:06.604]                 common <- intersect(names, old_names)
[17:42:06.604]                 added <- setdiff(names, old_names)
[17:42:06.604]                 removed <- setdiff(old_names, names)
[17:42:06.604]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.604]                   envs[common]]
[17:42:06.604]                 NAMES <- toupper(changed)
[17:42:06.604]                 args <- list()
[17:42:06.604]                 for (kk in seq_along(NAMES)) {
[17:42:06.604]                   name <- changed[[kk]]
[17:42:06.604]                   NAME <- NAMES[[kk]]
[17:42:06.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.604]                     next
[17:42:06.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.604]                 }
[17:42:06.604]                 NAMES <- toupper(added)
[17:42:06.604]                 for (kk in seq_along(NAMES)) {
[17:42:06.604]                   name <- added[[kk]]
[17:42:06.604]                   NAME <- NAMES[[kk]]
[17:42:06.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.604]                     next
[17:42:06.604]                   args[[name]] <- ""
[17:42:06.604]                 }
[17:42:06.604]                 NAMES <- toupper(removed)
[17:42:06.604]                 for (kk in seq_along(NAMES)) {
[17:42:06.604]                   name <- removed[[kk]]
[17:42:06.604]                   NAME <- NAMES[[kk]]
[17:42:06.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.604]                     next
[17:42:06.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.604]                 }
[17:42:06.604]                 if (length(args) > 0) 
[17:42:06.604]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.604]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.604]             }
[17:42:06.604]             else {
[17:42:06.604]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.604]             }
[17:42:06.604]             {
[17:42:06.604]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.604]                   0L) {
[17:42:06.604]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.604]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.604]                   base::options(opts)
[17:42:06.604]                 }
[17:42:06.604]                 {
[17:42:06.604]                   {
[17:42:06.604]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.604]                     NULL
[17:42:06.604]                   }
[17:42:06.604]                   options(future.plan = NULL)
[17:42:06.604]                   if (is.na(NA_character_)) 
[17:42:06.604]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.604]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.604]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.604]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.604]                     envir = parent.frame()) 
[17:42:06.604]                   {
[17:42:06.604]                     if (is.function(workers)) 
[17:42:06.604]                       workers <- workers()
[17:42:06.604]                     workers <- structure(as.integer(workers), 
[17:42:06.604]                       class = class(workers))
[17:42:06.604]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.604]                       workers >= 1)
[17:42:06.604]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.604]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.604]                     }
[17:42:06.604]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.604]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.604]                       envir = envir)
[17:42:06.604]                     if (!future$lazy) 
[17:42:06.604]                       future <- run(future)
[17:42:06.604]                     invisible(future)
[17:42:06.604]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.604]                 }
[17:42:06.604]             }
[17:42:06.604]         }
[17:42:06.604]     })
[17:42:06.604]     if (TRUE) {
[17:42:06.604]         base::sink(type = "output", split = FALSE)
[17:42:06.604]         if (TRUE) {
[17:42:06.604]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.604]         }
[17:42:06.604]         else {
[17:42:06.604]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.604]         }
[17:42:06.604]         base::close(...future.stdout)
[17:42:06.604]         ...future.stdout <- NULL
[17:42:06.604]     }
[17:42:06.604]     ...future.result$conditions <- ...future.conditions
[17:42:06.604]     ...future.result$finished <- base::Sys.time()
[17:42:06.604]     ...future.result
[17:42:06.604] }
[17:42:06.608] MultisessionFuture started
[17:42:06.608] - Launch lazy future ... done
[17:42:06.608] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.619] result() for ClusterFuture ...
[17:42:06.619] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.619] - Validating connection of MultisessionFuture
[17:42:06.656] - received message: FutureResult
[17:42:06.656] - Received FutureResult
[17:42:06.656] - Erased future from FutureRegistry
[17:42:06.656] result() for ClusterFuture ...
[17:42:06.656] - result already collected: FutureResult
[17:42:06.656] result() for ClusterFuture ... done
[17:42:06.656] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.656] result() for ClusterFuture ... done
[17:42:06.657] result() for ClusterFuture ...
[17:42:06.657] - result already collected: FutureResult
[17:42:06.657] result() for ClusterFuture ... done
[17:42:06.657] getGlobalsAndPackages() ...
[17:42:06.657] Searching for globals...
[17:42:06.658] - globals found: [1] ‘{’
[17:42:06.658] Searching for globals ... DONE
[17:42:06.658] Resolving globals: FALSE
[17:42:06.658] 
[17:42:06.658] 
[17:42:06.659] getGlobalsAndPackages() ... DONE
[17:42:06.659] run() for ‘Future’ ...
[17:42:06.659] - state: ‘created’
[17:42:06.659] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:42:06.673] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.673] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:42:06.674]   - Field: ‘node’
[17:42:06.674]   - Field: ‘label’
[17:42:06.674]   - Field: ‘local’
[17:42:06.674]   - Field: ‘owner’
[17:42:06.674]   - Field: ‘envir’
[17:42:06.674]   - Field: ‘workers’
[17:42:06.674]   - Field: ‘packages’
[17:42:06.674]   - Field: ‘gc’
[17:42:06.674]   - Field: ‘conditions’
[17:42:06.674]   - Field: ‘persistent’
[17:42:06.675]   - Field: ‘expr’
[17:42:06.675]   - Field: ‘uuid’
[17:42:06.675]   - Field: ‘seed’
[17:42:06.675]   - Field: ‘version’
[17:42:06.675]   - Field: ‘result’
[17:42:06.675]   - Field: ‘asynchronous’
[17:42:06.675]   - Field: ‘calls’
[17:42:06.675]   - Field: ‘globals’
[17:42:06.675]   - Field: ‘stdout’
[17:42:06.675]   - Field: ‘earlySignal’
[17:42:06.676]   - Field: ‘lazy’
[17:42:06.676]   - Field: ‘state’
[17:42:06.676] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:42:06.676] - Launch lazy future ...
[17:42:06.676] Packages needed by the future expression (n = 0): <none>
[17:42:06.676] Packages needed by future strategies (n = 0): <none>
[17:42:06.677] {
[17:42:06.677]     {
[17:42:06.677]         {
[17:42:06.677]             ...future.startTime <- base::Sys.time()
[17:42:06.677]             {
[17:42:06.677]                 {
[17:42:06.677]                   {
[17:42:06.677]                     {
[17:42:06.677]                       base::local({
[17:42:06.677]                         has_future <- base::requireNamespace("future", 
[17:42:06.677]                           quietly = TRUE)
[17:42:06.677]                         if (has_future) {
[17:42:06.677]                           ns <- base::getNamespace("future")
[17:42:06.677]                           version <- ns[[".package"]][["version"]]
[17:42:06.677]                           if (is.null(version)) 
[17:42:06.677]                             version <- utils::packageVersion("future")
[17:42:06.677]                         }
[17:42:06.677]                         else {
[17:42:06.677]                           version <- NULL
[17:42:06.677]                         }
[17:42:06.677]                         if (!has_future || version < "1.8.0") {
[17:42:06.677]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:06.677]                             "", base::R.version$version.string), 
[17:42:06.677]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:06.677]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:06.677]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:06.677]                               "release", "version")], collapse = " "), 
[17:42:06.677]                             hostname = base::Sys.info()[["nodename"]])
[17:42:06.677]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:06.677]                             info)
[17:42:06.677]                           info <- base::paste(info, collapse = "; ")
[17:42:06.677]                           if (!has_future) {
[17:42:06.677]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:06.677]                               info)
[17:42:06.677]                           }
[17:42:06.677]                           else {
[17:42:06.677]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:06.677]                               info, version)
[17:42:06.677]                           }
[17:42:06.677]                           base::stop(msg)
[17:42:06.677]                         }
[17:42:06.677]                       })
[17:42:06.677]                     }
[17:42:06.677]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:06.677]                     base::options(mc.cores = 1L)
[17:42:06.677]                   }
[17:42:06.677]                   options(future.plan = NULL)
[17:42:06.677]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.677]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:06.677]                 }
[17:42:06.677]                 ...future.workdir <- getwd()
[17:42:06.677]             }
[17:42:06.677]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:06.677]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:06.677]         }
[17:42:06.677]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:06.677]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:06.677]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:06.677]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:06.677]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:06.677]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:06.677]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:06.677]             base::names(...future.oldOptions))
[17:42:06.677]     }
[17:42:06.677]     if (FALSE) {
[17:42:06.677]     }
[17:42:06.677]     else {
[17:42:06.677]         if (TRUE) {
[17:42:06.677]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:06.677]                 open = "w")
[17:42:06.677]         }
[17:42:06.677]         else {
[17:42:06.677]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:06.677]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:06.677]         }
[17:42:06.677]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:06.677]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:06.677]             base::sink(type = "output", split = FALSE)
[17:42:06.677]             base::close(...future.stdout)
[17:42:06.677]         }, add = TRUE)
[17:42:06.677]     }
[17:42:06.677]     ...future.frame <- base::sys.nframe()
[17:42:06.677]     ...future.conditions <- base::list()
[17:42:06.677]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:06.677]     if (FALSE) {
[17:42:06.677]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:06.677]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:06.677]     }
[17:42:06.677]     ...future.result <- base::tryCatch({
[17:42:06.677]         base::withCallingHandlers({
[17:42:06.677]             ...future.value <- base::withVisible(base::local({
[17:42:06.677]                 ...future.makeSendCondition <- local({
[17:42:06.677]                   sendCondition <- NULL
[17:42:06.677]                   function(frame = 1L) {
[17:42:06.677]                     if (is.function(sendCondition)) 
[17:42:06.677]                       return(sendCondition)
[17:42:06.677]                     ns <- getNamespace("parallel")
[17:42:06.677]                     if (exists("sendData", mode = "function", 
[17:42:06.677]                       envir = ns)) {
[17:42:06.677]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:06.677]                         envir = ns)
[17:42:06.677]                       envir <- sys.frame(frame)
[17:42:06.677]                       master <- NULL
[17:42:06.677]                       while (!identical(envir, .GlobalEnv) && 
[17:42:06.677]                         !identical(envir, emptyenv())) {
[17:42:06.677]                         if (exists("master", mode = "list", envir = envir, 
[17:42:06.677]                           inherits = FALSE)) {
[17:42:06.677]                           master <- get("master", mode = "list", 
[17:42:06.677]                             envir = envir, inherits = FALSE)
[17:42:06.677]                           if (inherits(master, c("SOCKnode", 
[17:42:06.677]                             "SOCK0node"))) {
[17:42:06.677]                             sendCondition <<- function(cond) {
[17:42:06.677]                               data <- list(type = "VALUE", value = cond, 
[17:42:06.677]                                 success = TRUE)
[17:42:06.677]                               parallel_sendData(master, data)
[17:42:06.677]                             }
[17:42:06.677]                             return(sendCondition)
[17:42:06.677]                           }
[17:42:06.677]                         }
[17:42:06.677]                         frame <- frame + 1L
[17:42:06.677]                         envir <- sys.frame(frame)
[17:42:06.677]                       }
[17:42:06.677]                     }
[17:42:06.677]                     sendCondition <<- function(cond) NULL
[17:42:06.677]                   }
[17:42:06.677]                 })
[17:42:06.677]                 withCallingHandlers({
[17:42:06.677]                   {
[17:42:06.677]                     42
[17:42:06.677]                   }
[17:42:06.677]                 }, immediateCondition = function(cond) {
[17:42:06.677]                   sendCondition <- ...future.makeSendCondition()
[17:42:06.677]                   sendCondition(cond)
[17:42:06.677]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.677]                   {
[17:42:06.677]                     inherits <- base::inherits
[17:42:06.677]                     invokeRestart <- base::invokeRestart
[17:42:06.677]                     is.null <- base::is.null
[17:42:06.677]                     muffled <- FALSE
[17:42:06.677]                     if (inherits(cond, "message")) {
[17:42:06.677]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:06.677]                       if (muffled) 
[17:42:06.677]                         invokeRestart("muffleMessage")
[17:42:06.677]                     }
[17:42:06.677]                     else if (inherits(cond, "warning")) {
[17:42:06.677]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:06.677]                       if (muffled) 
[17:42:06.677]                         invokeRestart("muffleWarning")
[17:42:06.677]                     }
[17:42:06.677]                     else if (inherits(cond, "condition")) {
[17:42:06.677]                       if (!is.null(pattern)) {
[17:42:06.677]                         computeRestarts <- base::computeRestarts
[17:42:06.677]                         grepl <- base::grepl
[17:42:06.677]                         restarts <- computeRestarts(cond)
[17:42:06.677]                         for (restart in restarts) {
[17:42:06.677]                           name <- restart$name
[17:42:06.677]                           if (is.null(name)) 
[17:42:06.677]                             next
[17:42:06.677]                           if (!grepl(pattern, name)) 
[17:42:06.677]                             next
[17:42:06.677]                           invokeRestart(restart)
[17:42:06.677]                           muffled <- TRUE
[17:42:06.677]                           break
[17:42:06.677]                         }
[17:42:06.677]                       }
[17:42:06.677]                     }
[17:42:06.677]                     invisible(muffled)
[17:42:06.677]                   }
[17:42:06.677]                   muffleCondition(cond)
[17:42:06.677]                 })
[17:42:06.677]             }))
[17:42:06.677]             future::FutureResult(value = ...future.value$value, 
[17:42:06.677]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.677]                   ...future.rng), globalenv = if (FALSE) 
[17:42:06.677]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:06.677]                     ...future.globalenv.names))
[17:42:06.677]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:06.677]         }, condition = base::local({
[17:42:06.677]             c <- base::c
[17:42:06.677]             inherits <- base::inherits
[17:42:06.677]             invokeRestart <- base::invokeRestart
[17:42:06.677]             length <- base::length
[17:42:06.677]             list <- base::list
[17:42:06.677]             seq.int <- base::seq.int
[17:42:06.677]             signalCondition <- base::signalCondition
[17:42:06.677]             sys.calls <- base::sys.calls
[17:42:06.677]             `[[` <- base::`[[`
[17:42:06.677]             `+` <- base::`+`
[17:42:06.677]             `<<-` <- base::`<<-`
[17:42:06.677]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:06.677]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:06.677]                   3L)]
[17:42:06.677]             }
[17:42:06.677]             function(cond) {
[17:42:06.677]                 is_error <- inherits(cond, "error")
[17:42:06.677]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:06.677]                   NULL)
[17:42:06.677]                 if (is_error) {
[17:42:06.677]                   sessionInformation <- function() {
[17:42:06.677]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:06.677]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:06.677]                       search = base::search(), system = base::Sys.info())
[17:42:06.677]                   }
[17:42:06.677]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.677]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:06.677]                     cond$call), session = sessionInformation(), 
[17:42:06.677]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:06.677]                   signalCondition(cond)
[17:42:06.677]                 }
[17:42:06.677]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:06.677]                 "immediateCondition"))) {
[17:42:06.677]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:06.677]                   ...future.conditions[[length(...future.conditions) + 
[17:42:06.677]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:06.677]                   if (TRUE && !signal) {
[17:42:06.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.677]                     {
[17:42:06.677]                       inherits <- base::inherits
[17:42:06.677]                       invokeRestart <- base::invokeRestart
[17:42:06.677]                       is.null <- base::is.null
[17:42:06.677]                       muffled <- FALSE
[17:42:06.677]                       if (inherits(cond, "message")) {
[17:42:06.677]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.677]                         if (muffled) 
[17:42:06.677]                           invokeRestart("muffleMessage")
[17:42:06.677]                       }
[17:42:06.677]                       else if (inherits(cond, "warning")) {
[17:42:06.677]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.677]                         if (muffled) 
[17:42:06.677]                           invokeRestart("muffleWarning")
[17:42:06.677]                       }
[17:42:06.677]                       else if (inherits(cond, "condition")) {
[17:42:06.677]                         if (!is.null(pattern)) {
[17:42:06.677]                           computeRestarts <- base::computeRestarts
[17:42:06.677]                           grepl <- base::grepl
[17:42:06.677]                           restarts <- computeRestarts(cond)
[17:42:06.677]                           for (restart in restarts) {
[17:42:06.677]                             name <- restart$name
[17:42:06.677]                             if (is.null(name)) 
[17:42:06.677]                               next
[17:42:06.677]                             if (!grepl(pattern, name)) 
[17:42:06.677]                               next
[17:42:06.677]                             invokeRestart(restart)
[17:42:06.677]                             muffled <- TRUE
[17:42:06.677]                             break
[17:42:06.677]                           }
[17:42:06.677]                         }
[17:42:06.677]                       }
[17:42:06.677]                       invisible(muffled)
[17:42:06.677]                     }
[17:42:06.677]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.677]                   }
[17:42:06.677]                 }
[17:42:06.677]                 else {
[17:42:06.677]                   if (TRUE) {
[17:42:06.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:06.677]                     {
[17:42:06.677]                       inherits <- base::inherits
[17:42:06.677]                       invokeRestart <- base::invokeRestart
[17:42:06.677]                       is.null <- base::is.null
[17:42:06.677]                       muffled <- FALSE
[17:42:06.677]                       if (inherits(cond, "message")) {
[17:42:06.677]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:06.677]                         if (muffled) 
[17:42:06.677]                           invokeRestart("muffleMessage")
[17:42:06.677]                       }
[17:42:06.677]                       else if (inherits(cond, "warning")) {
[17:42:06.677]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:06.677]                         if (muffled) 
[17:42:06.677]                           invokeRestart("muffleWarning")
[17:42:06.677]                       }
[17:42:06.677]                       else if (inherits(cond, "condition")) {
[17:42:06.677]                         if (!is.null(pattern)) {
[17:42:06.677]                           computeRestarts <- base::computeRestarts
[17:42:06.677]                           grepl <- base::grepl
[17:42:06.677]                           restarts <- computeRestarts(cond)
[17:42:06.677]                           for (restart in restarts) {
[17:42:06.677]                             name <- restart$name
[17:42:06.677]                             if (is.null(name)) 
[17:42:06.677]                               next
[17:42:06.677]                             if (!grepl(pattern, name)) 
[17:42:06.677]                               next
[17:42:06.677]                             invokeRestart(restart)
[17:42:06.677]                             muffled <- TRUE
[17:42:06.677]                             break
[17:42:06.677]                           }
[17:42:06.677]                         }
[17:42:06.677]                       }
[17:42:06.677]                       invisible(muffled)
[17:42:06.677]                     }
[17:42:06.677]                     muffleCondition(cond, pattern = "^muffle")
[17:42:06.677]                   }
[17:42:06.677]                 }
[17:42:06.677]             }
[17:42:06.677]         }))
[17:42:06.677]     }, error = function(ex) {
[17:42:06.677]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:06.677]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:06.677]                 ...future.rng), started = ...future.startTime, 
[17:42:06.677]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:06.677]             version = "1.8"), class = "FutureResult")
[17:42:06.677]     }, finally = {
[17:42:06.677]         if (!identical(...future.workdir, getwd())) 
[17:42:06.677]             setwd(...future.workdir)
[17:42:06.677]         {
[17:42:06.677]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:06.677]                 ...future.oldOptions$nwarnings <- NULL
[17:42:06.677]             }
[17:42:06.677]             base::options(...future.oldOptions)
[17:42:06.677]             if (.Platform$OS.type == "windows") {
[17:42:06.677]                 old_names <- names(...future.oldEnvVars)
[17:42:06.677]                 envs <- base::Sys.getenv()
[17:42:06.677]                 names <- names(envs)
[17:42:06.677]                 common <- intersect(names, old_names)
[17:42:06.677]                 added <- setdiff(names, old_names)
[17:42:06.677]                 removed <- setdiff(old_names, names)
[17:42:06.677]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:06.677]                   envs[common]]
[17:42:06.677]                 NAMES <- toupper(changed)
[17:42:06.677]                 args <- list()
[17:42:06.677]                 for (kk in seq_along(NAMES)) {
[17:42:06.677]                   name <- changed[[kk]]
[17:42:06.677]                   NAME <- NAMES[[kk]]
[17:42:06.677]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.677]                     next
[17:42:06.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.677]                 }
[17:42:06.677]                 NAMES <- toupper(added)
[17:42:06.677]                 for (kk in seq_along(NAMES)) {
[17:42:06.677]                   name <- added[[kk]]
[17:42:06.677]                   NAME <- NAMES[[kk]]
[17:42:06.677]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.677]                     next
[17:42:06.677]                   args[[name]] <- ""
[17:42:06.677]                 }
[17:42:06.677]                 NAMES <- toupper(removed)
[17:42:06.677]                 for (kk in seq_along(NAMES)) {
[17:42:06.677]                   name <- removed[[kk]]
[17:42:06.677]                   NAME <- NAMES[[kk]]
[17:42:06.677]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:06.677]                     next
[17:42:06.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:06.677]                 }
[17:42:06.677]                 if (length(args) > 0) 
[17:42:06.677]                   base::do.call(base::Sys.setenv, args = args)
[17:42:06.677]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:06.677]             }
[17:42:06.677]             else {
[17:42:06.677]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:06.677]             }
[17:42:06.677]             {
[17:42:06.677]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:06.677]                   0L) {
[17:42:06.677]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:06.677]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:06.677]                   base::options(opts)
[17:42:06.677]                 }
[17:42:06.677]                 {
[17:42:06.677]                   {
[17:42:06.677]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:06.677]                     NULL
[17:42:06.677]                   }
[17:42:06.677]                   options(future.plan = NULL)
[17:42:06.677]                   if (is.na(NA_character_)) 
[17:42:06.677]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:06.677]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:06.677]                   future::plan(list(function (..., workers = availableCores(), 
[17:42:06.677]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:42:06.677]                     envir = parent.frame()) 
[17:42:06.677]                   {
[17:42:06.677]                     if (is.function(workers)) 
[17:42:06.677]                       workers <- workers()
[17:42:06.677]                     workers <- structure(as.integer(workers), 
[17:42:06.677]                       class = class(workers))
[17:42:06.677]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:42:06.677]                       workers >= 1)
[17:42:06.677]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:42:06.677]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:42:06.677]                     }
[17:42:06.677]                     future <- MultisessionFuture(..., workers = workers, 
[17:42:06.677]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:42:06.677]                       envir = envir)
[17:42:06.677]                     if (!future$lazy) 
[17:42:06.677]                       future <- run(future)
[17:42:06.677]                     invisible(future)
[17:42:06.677]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:06.677]                 }
[17:42:06.677]             }
[17:42:06.677]         }
[17:42:06.677]     })
[17:42:06.677]     if (TRUE) {
[17:42:06.677]         base::sink(type = "output", split = FALSE)
[17:42:06.677]         if (TRUE) {
[17:42:06.677]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:06.677]         }
[17:42:06.677]         else {
[17:42:06.677]             ...future.result["stdout"] <- base::list(NULL)
[17:42:06.677]         }
[17:42:06.677]         base::close(...future.stdout)
[17:42:06.677]         ...future.stdout <- NULL
[17:42:06.677]     }
[17:42:06.677]     ...future.result$conditions <- ...future.conditions
[17:42:06.677]     ...future.result$finished <- base::Sys.time()
[17:42:06.677]     ...future.result
[17:42:06.677] }
[17:42:06.680] MultisessionFuture started
[17:42:06.680] - Launch lazy future ... done
[17:42:06.680] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: ecaa941f-6444-6050-89e6-7ed55a3c4a32
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:06.691] result() for ClusterFuture ...
[17:42:06.691] receiveMessageFromWorker() for ClusterFuture ...
[17:42:06.691] - Validating connection of MultisessionFuture
[17:42:06.728] - received message: FutureResult
[17:42:06.728] - Received FutureResult
[17:42:06.728] - Erased future from FutureRegistry
[17:42:06.729] result() for ClusterFuture ...
[17:42:06.729] - result already collected: FutureResult
[17:42:06.729] result() for ClusterFuture ... done
[17:42:06.729] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:06.729] result() for ClusterFuture ... done
[17:42:06.729] result() for ClusterFuture ...
[17:42:06.729] - result already collected: FutureResult
[17:42:06.729] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[17:42:06.730] plan(): Setting new future strategy stack:
[17:42:06.730] List of future strategies:
[17:42:06.730] 1. FutureStrategy:
[17:42:06.730]    - args: function (..., envir = parent.frame())
[17:42:06.730]    - tweaked: FALSE
[17:42:06.730]    - call: future::plan(oplan)
[17:42:06.731] plan(): nbrOfWorkers() = 1
> 
