
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:11.206] plan(): Setting new future strategy stack:
[13:20:11.207] List of future strategies:
[13:20:11.207] 1. sequential:
[13:20:11.207]    - args: function (..., envir = parent.frame())
[13:20:11.207]    - tweaked: FALSE
[13:20:11.207]    - call: future::plan("sequential")
[13:20:11.220] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[13:20:11.244] plan(): Setting new future strategy stack:
[13:20:11.244] List of future strategies:
[13:20:11.244] 1. sequential:
[13:20:11.244]    - args: function (..., envir = parent.frame())
[13:20:11.244]    - tweaked: FALSE
[13:20:11.244]    - call: plan(strategy)
[13:20:11.256] plan(): nbrOfWorkers() = 1
[13:20:11.258] getGlobalsAndPackages() ...
[13:20:11.258] Searching for globals...
[13:20:11.260] 
[13:20:11.260] Searching for globals ... DONE
[13:20:11.260] - globals: [0] <none>
[13:20:11.260] getGlobalsAndPackages() ... DONE
[13:20:11.261] Packages needed by the future expression (n = 0): <none>
[13:20:11.261] Packages needed by future strategies (n = 0): <none>
[13:20:11.262] {
[13:20:11.262]     {
[13:20:11.262]         {
[13:20:11.262]             ...future.startTime <- base::Sys.time()
[13:20:11.262]             {
[13:20:11.262]                 {
[13:20:11.262]                   {
[13:20:11.262]                     base::local({
[13:20:11.262]                       has_future <- base::requireNamespace("future", 
[13:20:11.262]                         quietly = TRUE)
[13:20:11.262]                       if (has_future) {
[13:20:11.262]                         ns <- base::getNamespace("future")
[13:20:11.262]                         version <- ns[[".package"]][["version"]]
[13:20:11.262]                         if (is.null(version)) 
[13:20:11.262]                           version <- utils::packageVersion("future")
[13:20:11.262]                       }
[13:20:11.262]                       else {
[13:20:11.262]                         version <- NULL
[13:20:11.262]                       }
[13:20:11.262]                       if (!has_future || version < "1.8.0") {
[13:20:11.262]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.262]                           "", base::R.version$version.string), 
[13:20:11.262]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:11.262]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.262]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.262]                             "release", "version")], collapse = " "), 
[13:20:11.262]                           hostname = base::Sys.info()[["nodename"]])
[13:20:11.262]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.262]                           info)
[13:20:11.262]                         info <- base::paste(info, collapse = "; ")
[13:20:11.262]                         if (!has_future) {
[13:20:11.262]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.262]                             info)
[13:20:11.262]                         }
[13:20:11.262]                         else {
[13:20:11.262]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.262]                             info, version)
[13:20:11.262]                         }
[13:20:11.262]                         base::stop(msg)
[13:20:11.262]                       }
[13:20:11.262]                     })
[13:20:11.262]                   }
[13:20:11.262]                   options(future.plan = NULL)
[13:20:11.262]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.262]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.262]                 }
[13:20:11.262]                 ...future.workdir <- getwd()
[13:20:11.262]             }
[13:20:11.262]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.262]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.262]         }
[13:20:11.262]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.262]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.262]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.262]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.262]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.262]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.262]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.262]             base::names(...future.oldOptions))
[13:20:11.262]     }
[13:20:11.262]     if (FALSE) {
[13:20:11.262]     }
[13:20:11.262]     else {
[13:20:11.262]         if (TRUE) {
[13:20:11.262]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.262]                 open = "w")
[13:20:11.262]         }
[13:20:11.262]         else {
[13:20:11.262]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.262]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.262]         }
[13:20:11.262]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.262]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.262]             base::sink(type = "output", split = FALSE)
[13:20:11.262]             base::close(...future.stdout)
[13:20:11.262]         }, add = TRUE)
[13:20:11.262]     }
[13:20:11.262]     ...future.frame <- base::sys.nframe()
[13:20:11.262]     ...future.conditions <- base::list()
[13:20:11.262]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.262]     if (FALSE) {
[13:20:11.262]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.262]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.262]     }
[13:20:11.262]     ...future.result <- base::tryCatch({
[13:20:11.262]         base::withCallingHandlers({
[13:20:11.262]             ...future.value <- base::withVisible(base::local(42))
[13:20:11.262]             future::FutureResult(value = ...future.value$value, 
[13:20:11.262]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.262]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.262]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.262]                     ...future.globalenv.names))
[13:20:11.262]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.262]         }, condition = base::local({
[13:20:11.262]             c <- base::c
[13:20:11.262]             inherits <- base::inherits
[13:20:11.262]             invokeRestart <- base::invokeRestart
[13:20:11.262]             length <- base::length
[13:20:11.262]             list <- base::list
[13:20:11.262]             seq.int <- base::seq.int
[13:20:11.262]             signalCondition <- base::signalCondition
[13:20:11.262]             sys.calls <- base::sys.calls
[13:20:11.262]             `[[` <- base::`[[`
[13:20:11.262]             `+` <- base::`+`
[13:20:11.262]             `<<-` <- base::`<<-`
[13:20:11.262]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.262]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.262]                   3L)]
[13:20:11.262]             }
[13:20:11.262]             function(cond) {
[13:20:11.262]                 is_error <- inherits(cond, "error")
[13:20:11.262]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.262]                   NULL)
[13:20:11.262]                 if (is_error) {
[13:20:11.262]                   sessionInformation <- function() {
[13:20:11.262]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.262]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.262]                       search = base::search(), system = base::Sys.info())
[13:20:11.262]                   }
[13:20:11.262]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.262]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.262]                     cond$call), session = sessionInformation(), 
[13:20:11.262]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.262]                   signalCondition(cond)
[13:20:11.262]                 }
[13:20:11.262]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.262]                 "immediateCondition"))) {
[13:20:11.262]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.262]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.262]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.262]                   if (TRUE && !signal) {
[13:20:11.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.262]                     {
[13:20:11.262]                       inherits <- base::inherits
[13:20:11.262]                       invokeRestart <- base::invokeRestart
[13:20:11.262]                       is.null <- base::is.null
[13:20:11.262]                       muffled <- FALSE
[13:20:11.262]                       if (inherits(cond, "message")) {
[13:20:11.262]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.262]                         if (muffled) 
[13:20:11.262]                           invokeRestart("muffleMessage")
[13:20:11.262]                       }
[13:20:11.262]                       else if (inherits(cond, "warning")) {
[13:20:11.262]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.262]                         if (muffled) 
[13:20:11.262]                           invokeRestart("muffleWarning")
[13:20:11.262]                       }
[13:20:11.262]                       else if (inherits(cond, "condition")) {
[13:20:11.262]                         if (!is.null(pattern)) {
[13:20:11.262]                           computeRestarts <- base::computeRestarts
[13:20:11.262]                           grepl <- base::grepl
[13:20:11.262]                           restarts <- computeRestarts(cond)
[13:20:11.262]                           for (restart in restarts) {
[13:20:11.262]                             name <- restart$name
[13:20:11.262]                             if (is.null(name)) 
[13:20:11.262]                               next
[13:20:11.262]                             if (!grepl(pattern, name)) 
[13:20:11.262]                               next
[13:20:11.262]                             invokeRestart(restart)
[13:20:11.262]                             muffled <- TRUE
[13:20:11.262]                             break
[13:20:11.262]                           }
[13:20:11.262]                         }
[13:20:11.262]                       }
[13:20:11.262]                       invisible(muffled)
[13:20:11.262]                     }
[13:20:11.262]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.262]                   }
[13:20:11.262]                 }
[13:20:11.262]                 else {
[13:20:11.262]                   if (TRUE) {
[13:20:11.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.262]                     {
[13:20:11.262]                       inherits <- base::inherits
[13:20:11.262]                       invokeRestart <- base::invokeRestart
[13:20:11.262]                       is.null <- base::is.null
[13:20:11.262]                       muffled <- FALSE
[13:20:11.262]                       if (inherits(cond, "message")) {
[13:20:11.262]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.262]                         if (muffled) 
[13:20:11.262]                           invokeRestart("muffleMessage")
[13:20:11.262]                       }
[13:20:11.262]                       else if (inherits(cond, "warning")) {
[13:20:11.262]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.262]                         if (muffled) 
[13:20:11.262]                           invokeRestart("muffleWarning")
[13:20:11.262]                       }
[13:20:11.262]                       else if (inherits(cond, "condition")) {
[13:20:11.262]                         if (!is.null(pattern)) {
[13:20:11.262]                           computeRestarts <- base::computeRestarts
[13:20:11.262]                           grepl <- base::grepl
[13:20:11.262]                           restarts <- computeRestarts(cond)
[13:20:11.262]                           for (restart in restarts) {
[13:20:11.262]                             name <- restart$name
[13:20:11.262]                             if (is.null(name)) 
[13:20:11.262]                               next
[13:20:11.262]                             if (!grepl(pattern, name)) 
[13:20:11.262]                               next
[13:20:11.262]                             invokeRestart(restart)
[13:20:11.262]                             muffled <- TRUE
[13:20:11.262]                             break
[13:20:11.262]                           }
[13:20:11.262]                         }
[13:20:11.262]                       }
[13:20:11.262]                       invisible(muffled)
[13:20:11.262]                     }
[13:20:11.262]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.262]                   }
[13:20:11.262]                 }
[13:20:11.262]             }
[13:20:11.262]         }))
[13:20:11.262]     }, error = function(ex) {
[13:20:11.262]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.262]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.262]                 ...future.rng), started = ...future.startTime, 
[13:20:11.262]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.262]             version = "1.8"), class = "FutureResult")
[13:20:11.262]     }, finally = {
[13:20:11.262]         if (!identical(...future.workdir, getwd())) 
[13:20:11.262]             setwd(...future.workdir)
[13:20:11.262]         {
[13:20:11.262]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.262]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.262]             }
[13:20:11.262]             base::options(...future.oldOptions)
[13:20:11.262]             if (.Platform$OS.type == "windows") {
[13:20:11.262]                 old_names <- names(...future.oldEnvVars)
[13:20:11.262]                 envs <- base::Sys.getenv()
[13:20:11.262]                 names <- names(envs)
[13:20:11.262]                 common <- intersect(names, old_names)
[13:20:11.262]                 added <- setdiff(names, old_names)
[13:20:11.262]                 removed <- setdiff(old_names, names)
[13:20:11.262]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.262]                   envs[common]]
[13:20:11.262]                 NAMES <- toupper(changed)
[13:20:11.262]                 args <- list()
[13:20:11.262]                 for (kk in seq_along(NAMES)) {
[13:20:11.262]                   name <- changed[[kk]]
[13:20:11.262]                   NAME <- NAMES[[kk]]
[13:20:11.262]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.262]                     next
[13:20:11.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.262]                 }
[13:20:11.262]                 NAMES <- toupper(added)
[13:20:11.262]                 for (kk in seq_along(NAMES)) {
[13:20:11.262]                   name <- added[[kk]]
[13:20:11.262]                   NAME <- NAMES[[kk]]
[13:20:11.262]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.262]                     next
[13:20:11.262]                   args[[name]] <- ""
[13:20:11.262]                 }
[13:20:11.262]                 NAMES <- toupper(removed)
[13:20:11.262]                 for (kk in seq_along(NAMES)) {
[13:20:11.262]                   name <- removed[[kk]]
[13:20:11.262]                   NAME <- NAMES[[kk]]
[13:20:11.262]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.262]                     next
[13:20:11.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.262]                 }
[13:20:11.262]                 if (length(args) > 0) 
[13:20:11.262]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.262]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.262]             }
[13:20:11.262]             else {
[13:20:11.262]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.262]             }
[13:20:11.262]             {
[13:20:11.262]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.262]                   0L) {
[13:20:11.262]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.262]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.262]                   base::options(opts)
[13:20:11.262]                 }
[13:20:11.262]                 {
[13:20:11.262]                   {
[13:20:11.262]                     NULL
[13:20:11.262]                     RNGkind("Mersenne-Twister")
[13:20:11.262]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:11.262]                       inherits = FALSE)
[13:20:11.262]                   }
[13:20:11.262]                   options(future.plan = NULL)
[13:20:11.262]                   if (is.na(NA_character_)) 
[13:20:11.262]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.262]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.262]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:11.262]                   {
[13:20:11.262]                     future <- SequentialFuture(..., envir = envir)
[13:20:11.262]                     if (!future$lazy) 
[13:20:11.262]                       future <- run(future)
[13:20:11.262]                     invisible(future)
[13:20:11.262]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.262]                 }
[13:20:11.262]             }
[13:20:11.262]         }
[13:20:11.262]     })
[13:20:11.262]     if (TRUE) {
[13:20:11.262]         base::sink(type = "output", split = FALSE)
[13:20:11.262]         if (TRUE) {
[13:20:11.262]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.262]         }
[13:20:11.262]         else {
[13:20:11.262]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.262]         }
[13:20:11.262]         base::close(...future.stdout)
[13:20:11.262]         ...future.stdout <- NULL
[13:20:11.262]     }
[13:20:11.262]     ...future.result$conditions <- ...future.conditions
[13:20:11.262]     ...future.result$finished <- base::Sys.time()
[13:20:11.262]     ...future.result
[13:20:11.262] }
[13:20:11.264] plan(): Setting new future strategy stack:
[13:20:11.264] List of future strategies:
[13:20:11.264] 1. sequential:
[13:20:11.264]    - args: function (..., envir = parent.frame())
[13:20:11.264]    - tweaked: FALSE
[13:20:11.264]    - call: NULL
[13:20:11.265] plan(): nbrOfWorkers() = 1
[13:20:11.266] plan(): Setting new future strategy stack:
[13:20:11.266] List of future strategies:
[13:20:11.266] 1. sequential:
[13:20:11.266]    - args: function (..., envir = parent.frame())
[13:20:11.266]    - tweaked: FALSE
[13:20:11.266]    - call: plan(strategy)
[13:20:11.266] plan(): nbrOfWorkers() = 1
[13:20:11.266] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.268] getGlobalsAndPackages() ...
[13:20:11.268] Searching for globals...
[13:20:11.268] 
[13:20:11.269] Searching for globals ... DONE
[13:20:11.269] - globals: [0] <none>
[13:20:11.269] getGlobalsAndPackages() ... DONE
[13:20:11.269] run() for ‘Future’ ...
[13:20:11.269] - state: ‘created’
[13:20:11.269] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:11.270] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.270] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:11.270]   - Field: ‘label’
[13:20:11.270]   - Field: ‘local’
[13:20:11.270]   - Field: ‘owner’
[13:20:11.270]   - Field: ‘envir’
[13:20:11.270]   - Field: ‘packages’
[13:20:11.270]   - Field: ‘gc’
[13:20:11.270]   - Field: ‘conditions’
[13:20:11.270]   - Field: ‘expr’
[13:20:11.271]   - Field: ‘uuid’
[13:20:11.271]   - Field: ‘seed’
[13:20:11.271]   - Field: ‘version’
[13:20:11.271]   - Field: ‘result’
[13:20:11.271]   - Field: ‘asynchronous’
[13:20:11.271]   - Field: ‘calls’
[13:20:11.271]   - Field: ‘globals’
[13:20:11.271]   - Field: ‘stdout’
[13:20:11.271]   - Field: ‘earlySignal’
[13:20:11.271]   - Field: ‘lazy’
[13:20:11.271]   - Field: ‘state’
[13:20:11.272] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:11.272] - Launch lazy future ...
[13:20:11.272] Packages needed by the future expression (n = 0): <none>
[13:20:11.272] Packages needed by future strategies (n = 0): <none>
[13:20:11.272] {
[13:20:11.272]     {
[13:20:11.272]         {
[13:20:11.272]             ...future.startTime <- base::Sys.time()
[13:20:11.272]             {
[13:20:11.272]                 {
[13:20:11.272]                   {
[13:20:11.272]                     base::local({
[13:20:11.272]                       has_future <- base::requireNamespace("future", 
[13:20:11.272]                         quietly = TRUE)
[13:20:11.272]                       if (has_future) {
[13:20:11.272]                         ns <- base::getNamespace("future")
[13:20:11.272]                         version <- ns[[".package"]][["version"]]
[13:20:11.272]                         if (is.null(version)) 
[13:20:11.272]                           version <- utils::packageVersion("future")
[13:20:11.272]                       }
[13:20:11.272]                       else {
[13:20:11.272]                         version <- NULL
[13:20:11.272]                       }
[13:20:11.272]                       if (!has_future || version < "1.8.0") {
[13:20:11.272]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.272]                           "", base::R.version$version.string), 
[13:20:11.272]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:11.272]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.272]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.272]                             "release", "version")], collapse = " "), 
[13:20:11.272]                           hostname = base::Sys.info()[["nodename"]])
[13:20:11.272]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.272]                           info)
[13:20:11.272]                         info <- base::paste(info, collapse = "; ")
[13:20:11.272]                         if (!has_future) {
[13:20:11.272]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.272]                             info)
[13:20:11.272]                         }
[13:20:11.272]                         else {
[13:20:11.272]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.272]                             info, version)
[13:20:11.272]                         }
[13:20:11.272]                         base::stop(msg)
[13:20:11.272]                       }
[13:20:11.272]                     })
[13:20:11.272]                   }
[13:20:11.272]                   options(future.plan = NULL)
[13:20:11.272]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.272]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.272]                 }
[13:20:11.272]                 ...future.workdir <- getwd()
[13:20:11.272]             }
[13:20:11.272]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.272]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.272]         }
[13:20:11.272]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.272]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.272]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.272]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.272]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.272]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.272]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.272]             base::names(...future.oldOptions))
[13:20:11.272]     }
[13:20:11.272]     if (FALSE) {
[13:20:11.272]     }
[13:20:11.272]     else {
[13:20:11.272]         if (TRUE) {
[13:20:11.272]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.272]                 open = "w")
[13:20:11.272]         }
[13:20:11.272]         else {
[13:20:11.272]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.272]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.272]         }
[13:20:11.272]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.272]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.272]             base::sink(type = "output", split = FALSE)
[13:20:11.272]             base::close(...future.stdout)
[13:20:11.272]         }, add = TRUE)
[13:20:11.272]     }
[13:20:11.272]     ...future.frame <- base::sys.nframe()
[13:20:11.272]     ...future.conditions <- base::list()
[13:20:11.272]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.272]     if (FALSE) {
[13:20:11.272]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.272]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.272]     }
[13:20:11.272]     ...future.result <- base::tryCatch({
[13:20:11.272]         base::withCallingHandlers({
[13:20:11.272]             ...future.value <- base::withVisible(base::local(42))
[13:20:11.272]             future::FutureResult(value = ...future.value$value, 
[13:20:11.272]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.272]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.272]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.272]                     ...future.globalenv.names))
[13:20:11.272]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.272]         }, condition = base::local({
[13:20:11.272]             c <- base::c
[13:20:11.272]             inherits <- base::inherits
[13:20:11.272]             invokeRestart <- base::invokeRestart
[13:20:11.272]             length <- base::length
[13:20:11.272]             list <- base::list
[13:20:11.272]             seq.int <- base::seq.int
[13:20:11.272]             signalCondition <- base::signalCondition
[13:20:11.272]             sys.calls <- base::sys.calls
[13:20:11.272]             `[[` <- base::`[[`
[13:20:11.272]             `+` <- base::`+`
[13:20:11.272]             `<<-` <- base::`<<-`
[13:20:11.272]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.272]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.272]                   3L)]
[13:20:11.272]             }
[13:20:11.272]             function(cond) {
[13:20:11.272]                 is_error <- inherits(cond, "error")
[13:20:11.272]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.272]                   NULL)
[13:20:11.272]                 if (is_error) {
[13:20:11.272]                   sessionInformation <- function() {
[13:20:11.272]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.272]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.272]                       search = base::search(), system = base::Sys.info())
[13:20:11.272]                   }
[13:20:11.272]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.272]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.272]                     cond$call), session = sessionInformation(), 
[13:20:11.272]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.272]                   signalCondition(cond)
[13:20:11.272]                 }
[13:20:11.272]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.272]                 "immediateCondition"))) {
[13:20:11.272]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.272]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.272]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.272]                   if (TRUE && !signal) {
[13:20:11.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.272]                     {
[13:20:11.272]                       inherits <- base::inherits
[13:20:11.272]                       invokeRestart <- base::invokeRestart
[13:20:11.272]                       is.null <- base::is.null
[13:20:11.272]                       muffled <- FALSE
[13:20:11.272]                       if (inherits(cond, "message")) {
[13:20:11.272]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.272]                         if (muffled) 
[13:20:11.272]                           invokeRestart("muffleMessage")
[13:20:11.272]                       }
[13:20:11.272]                       else if (inherits(cond, "warning")) {
[13:20:11.272]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.272]                         if (muffled) 
[13:20:11.272]                           invokeRestart("muffleWarning")
[13:20:11.272]                       }
[13:20:11.272]                       else if (inherits(cond, "condition")) {
[13:20:11.272]                         if (!is.null(pattern)) {
[13:20:11.272]                           computeRestarts <- base::computeRestarts
[13:20:11.272]                           grepl <- base::grepl
[13:20:11.272]                           restarts <- computeRestarts(cond)
[13:20:11.272]                           for (restart in restarts) {
[13:20:11.272]                             name <- restart$name
[13:20:11.272]                             if (is.null(name)) 
[13:20:11.272]                               next
[13:20:11.272]                             if (!grepl(pattern, name)) 
[13:20:11.272]                               next
[13:20:11.272]                             invokeRestart(restart)
[13:20:11.272]                             muffled <- TRUE
[13:20:11.272]                             break
[13:20:11.272]                           }
[13:20:11.272]                         }
[13:20:11.272]                       }
[13:20:11.272]                       invisible(muffled)
[13:20:11.272]                     }
[13:20:11.272]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.272]                   }
[13:20:11.272]                 }
[13:20:11.272]                 else {
[13:20:11.272]                   if (TRUE) {
[13:20:11.272]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.272]                     {
[13:20:11.272]                       inherits <- base::inherits
[13:20:11.272]                       invokeRestart <- base::invokeRestart
[13:20:11.272]                       is.null <- base::is.null
[13:20:11.272]                       muffled <- FALSE
[13:20:11.272]                       if (inherits(cond, "message")) {
[13:20:11.272]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.272]                         if (muffled) 
[13:20:11.272]                           invokeRestart("muffleMessage")
[13:20:11.272]                       }
[13:20:11.272]                       else if (inherits(cond, "warning")) {
[13:20:11.272]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.272]                         if (muffled) 
[13:20:11.272]                           invokeRestart("muffleWarning")
[13:20:11.272]                       }
[13:20:11.272]                       else if (inherits(cond, "condition")) {
[13:20:11.272]                         if (!is.null(pattern)) {
[13:20:11.272]                           computeRestarts <- base::computeRestarts
[13:20:11.272]                           grepl <- base::grepl
[13:20:11.272]                           restarts <- computeRestarts(cond)
[13:20:11.272]                           for (restart in restarts) {
[13:20:11.272]                             name <- restart$name
[13:20:11.272]                             if (is.null(name)) 
[13:20:11.272]                               next
[13:20:11.272]                             if (!grepl(pattern, name)) 
[13:20:11.272]                               next
[13:20:11.272]                             invokeRestart(restart)
[13:20:11.272]                             muffled <- TRUE
[13:20:11.272]                             break
[13:20:11.272]                           }
[13:20:11.272]                         }
[13:20:11.272]                       }
[13:20:11.272]                       invisible(muffled)
[13:20:11.272]                     }
[13:20:11.272]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.272]                   }
[13:20:11.272]                 }
[13:20:11.272]             }
[13:20:11.272]         }))
[13:20:11.272]     }, error = function(ex) {
[13:20:11.272]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.272]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.272]                 ...future.rng), started = ...future.startTime, 
[13:20:11.272]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.272]             version = "1.8"), class = "FutureResult")
[13:20:11.272]     }, finally = {
[13:20:11.272]         if (!identical(...future.workdir, getwd())) 
[13:20:11.272]             setwd(...future.workdir)
[13:20:11.272]         {
[13:20:11.272]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.272]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.272]             }
[13:20:11.272]             base::options(...future.oldOptions)
[13:20:11.272]             if (.Platform$OS.type == "windows") {
[13:20:11.272]                 old_names <- names(...future.oldEnvVars)
[13:20:11.272]                 envs <- base::Sys.getenv()
[13:20:11.272]                 names <- names(envs)
[13:20:11.272]                 common <- intersect(names, old_names)
[13:20:11.272]                 added <- setdiff(names, old_names)
[13:20:11.272]                 removed <- setdiff(old_names, names)
[13:20:11.272]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.272]                   envs[common]]
[13:20:11.272]                 NAMES <- toupper(changed)
[13:20:11.272]                 args <- list()
[13:20:11.272]                 for (kk in seq_along(NAMES)) {
[13:20:11.272]                   name <- changed[[kk]]
[13:20:11.272]                   NAME <- NAMES[[kk]]
[13:20:11.272]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.272]                     next
[13:20:11.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.272]                 }
[13:20:11.272]                 NAMES <- toupper(added)
[13:20:11.272]                 for (kk in seq_along(NAMES)) {
[13:20:11.272]                   name <- added[[kk]]
[13:20:11.272]                   NAME <- NAMES[[kk]]
[13:20:11.272]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.272]                     next
[13:20:11.272]                   args[[name]] <- ""
[13:20:11.272]                 }
[13:20:11.272]                 NAMES <- toupper(removed)
[13:20:11.272]                 for (kk in seq_along(NAMES)) {
[13:20:11.272]                   name <- removed[[kk]]
[13:20:11.272]                   NAME <- NAMES[[kk]]
[13:20:11.272]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.272]                     next
[13:20:11.272]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.272]                 }
[13:20:11.272]                 if (length(args) > 0) 
[13:20:11.272]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.272]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.272]             }
[13:20:11.272]             else {
[13:20:11.272]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.272]             }
[13:20:11.272]             {
[13:20:11.272]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.272]                   0L) {
[13:20:11.272]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.272]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.272]                   base::options(opts)
[13:20:11.272]                 }
[13:20:11.272]                 {
[13:20:11.272]                   {
[13:20:11.272]                     NULL
[13:20:11.272]                     RNGkind("Mersenne-Twister")
[13:20:11.272]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:11.272]                       inherits = FALSE)
[13:20:11.272]                   }
[13:20:11.272]                   options(future.plan = NULL)
[13:20:11.272]                   if (is.na(NA_character_)) 
[13:20:11.272]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.272]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.272]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:11.272]                   {
[13:20:11.272]                     future <- SequentialFuture(..., envir = envir)
[13:20:11.272]                     if (!future$lazy) 
[13:20:11.272]                       future <- run(future)
[13:20:11.272]                     invisible(future)
[13:20:11.272]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.272]                 }
[13:20:11.272]             }
[13:20:11.272]         }
[13:20:11.272]     })
[13:20:11.272]     if (TRUE) {
[13:20:11.272]         base::sink(type = "output", split = FALSE)
[13:20:11.272]         if (TRUE) {
[13:20:11.272]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.272]         }
[13:20:11.272]         else {
[13:20:11.272]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.272]         }
[13:20:11.272]         base::close(...future.stdout)
[13:20:11.272]         ...future.stdout <- NULL
[13:20:11.272]     }
[13:20:11.272]     ...future.result$conditions <- ...future.conditions
[13:20:11.272]     ...future.result$finished <- base::Sys.time()
[13:20:11.272]     ...future.result
[13:20:11.272] }
[13:20:11.274] plan(): Setting new future strategy stack:
[13:20:11.274] List of future strategies:
[13:20:11.274] 1. sequential:
[13:20:11.274]    - args: function (..., envir = parent.frame())
[13:20:11.274]    - tweaked: FALSE
[13:20:11.274]    - call: NULL
[13:20:11.275] plan(): nbrOfWorkers() = 1
[13:20:11.275] plan(): Setting new future strategy stack:
[13:20:11.276] List of future strategies:
[13:20:11.276] 1. sequential:
[13:20:11.276]    - args: function (..., envir = parent.frame())
[13:20:11.276]    - tweaked: FALSE
[13:20:11.276]    - call: plan(strategy)
[13:20:11.276] plan(): nbrOfWorkers() = 1
[13:20:11.276] SequentialFuture started (and completed)
[13:20:11.276] - Launch lazy future ... done
[13:20:11.276] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.278] getGlobalsAndPackages() ...
[13:20:11.278] Searching for globals...
[13:20:11.279] - globals found: [1] ‘{’
[13:20:11.279] Searching for globals ... DONE
[13:20:11.280] Resolving globals: FALSE
[13:20:11.280] 
[13:20:11.280] 
[13:20:11.280] getGlobalsAndPackages() ... DONE
[13:20:11.280] run() for ‘Future’ ...
[13:20:11.281] - state: ‘created’
[13:20:11.281] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:11.281] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.281] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:11.281]   - Field: ‘label’
[13:20:11.281]   - Field: ‘local’
[13:20:11.281]   - Field: ‘owner’
[13:20:11.281]   - Field: ‘envir’
[13:20:11.282]   - Field: ‘packages’
[13:20:11.282]   - Field: ‘gc’
[13:20:11.282]   - Field: ‘conditions’
[13:20:11.282]   - Field: ‘expr’
[13:20:11.282]   - Field: ‘uuid’
[13:20:11.282]   - Field: ‘seed’
[13:20:11.282]   - Field: ‘version’
[13:20:11.282]   - Field: ‘result’
[13:20:11.282]   - Field: ‘asynchronous’
[13:20:11.282]   - Field: ‘calls’
[13:20:11.282]   - Field: ‘globals’
[13:20:11.283]   - Field: ‘stdout’
[13:20:11.283]   - Field: ‘earlySignal’
[13:20:11.283]   - Field: ‘lazy’
[13:20:11.283]   - Field: ‘state’
[13:20:11.283] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:11.283] - Launch lazy future ...
[13:20:11.285] Packages needed by the future expression (n = 0): <none>
[13:20:11.285] Packages needed by future strategies (n = 0): <none>
[13:20:11.286] {
[13:20:11.286]     {
[13:20:11.286]         {
[13:20:11.286]             ...future.startTime <- base::Sys.time()
[13:20:11.286]             {
[13:20:11.286]                 {
[13:20:11.286]                   {
[13:20:11.286]                     base::local({
[13:20:11.286]                       has_future <- base::requireNamespace("future", 
[13:20:11.286]                         quietly = TRUE)
[13:20:11.286]                       if (has_future) {
[13:20:11.286]                         ns <- base::getNamespace("future")
[13:20:11.286]                         version <- ns[[".package"]][["version"]]
[13:20:11.286]                         if (is.null(version)) 
[13:20:11.286]                           version <- utils::packageVersion("future")
[13:20:11.286]                       }
[13:20:11.286]                       else {
[13:20:11.286]                         version <- NULL
[13:20:11.286]                       }
[13:20:11.286]                       if (!has_future || version < "1.8.0") {
[13:20:11.286]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.286]                           "", base::R.version$version.string), 
[13:20:11.286]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:11.286]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.286]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.286]                             "release", "version")], collapse = " "), 
[13:20:11.286]                           hostname = base::Sys.info()[["nodename"]])
[13:20:11.286]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.286]                           info)
[13:20:11.286]                         info <- base::paste(info, collapse = "; ")
[13:20:11.286]                         if (!has_future) {
[13:20:11.286]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.286]                             info)
[13:20:11.286]                         }
[13:20:11.286]                         else {
[13:20:11.286]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.286]                             info, version)
[13:20:11.286]                         }
[13:20:11.286]                         base::stop(msg)
[13:20:11.286]                       }
[13:20:11.286]                     })
[13:20:11.286]                   }
[13:20:11.286]                   options(future.plan = NULL)
[13:20:11.286]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.286]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.286]                 }
[13:20:11.286]                 ...future.workdir <- getwd()
[13:20:11.286]             }
[13:20:11.286]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.286]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.286]         }
[13:20:11.286]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.286]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.286]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.286]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.286]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.286]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.286]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.286]             base::names(...future.oldOptions))
[13:20:11.286]     }
[13:20:11.286]     if (FALSE) {
[13:20:11.286]     }
[13:20:11.286]     else {
[13:20:11.286]         if (TRUE) {
[13:20:11.286]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.286]                 open = "w")
[13:20:11.286]         }
[13:20:11.286]         else {
[13:20:11.286]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.286]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.286]         }
[13:20:11.286]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.286]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.286]             base::sink(type = "output", split = FALSE)
[13:20:11.286]             base::close(...future.stdout)
[13:20:11.286]         }, add = TRUE)
[13:20:11.286]     }
[13:20:11.286]     ...future.frame <- base::sys.nframe()
[13:20:11.286]     ...future.conditions <- base::list()
[13:20:11.286]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.286]     if (FALSE) {
[13:20:11.286]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.286]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.286]     }
[13:20:11.286]     ...future.result <- base::tryCatch({
[13:20:11.286]         base::withCallingHandlers({
[13:20:11.286]             ...future.value <- base::withVisible(base::local({
[13:20:11.286]                 42
[13:20:11.286]             }))
[13:20:11.286]             future::FutureResult(value = ...future.value$value, 
[13:20:11.286]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.286]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.286]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.286]                     ...future.globalenv.names))
[13:20:11.286]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.286]         }, condition = base::local({
[13:20:11.286]             c <- base::c
[13:20:11.286]             inherits <- base::inherits
[13:20:11.286]             invokeRestart <- base::invokeRestart
[13:20:11.286]             length <- base::length
[13:20:11.286]             list <- base::list
[13:20:11.286]             seq.int <- base::seq.int
[13:20:11.286]             signalCondition <- base::signalCondition
[13:20:11.286]             sys.calls <- base::sys.calls
[13:20:11.286]             `[[` <- base::`[[`
[13:20:11.286]             `+` <- base::`+`
[13:20:11.286]             `<<-` <- base::`<<-`
[13:20:11.286]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.286]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.286]                   3L)]
[13:20:11.286]             }
[13:20:11.286]             function(cond) {
[13:20:11.286]                 is_error <- inherits(cond, "error")
[13:20:11.286]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.286]                   NULL)
[13:20:11.286]                 if (is_error) {
[13:20:11.286]                   sessionInformation <- function() {
[13:20:11.286]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.286]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.286]                       search = base::search(), system = base::Sys.info())
[13:20:11.286]                   }
[13:20:11.286]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.286]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.286]                     cond$call), session = sessionInformation(), 
[13:20:11.286]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.286]                   signalCondition(cond)
[13:20:11.286]                 }
[13:20:11.286]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.286]                 "immediateCondition"))) {
[13:20:11.286]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.286]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.286]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.286]                   if (TRUE && !signal) {
[13:20:11.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.286]                     {
[13:20:11.286]                       inherits <- base::inherits
[13:20:11.286]                       invokeRestart <- base::invokeRestart
[13:20:11.286]                       is.null <- base::is.null
[13:20:11.286]                       muffled <- FALSE
[13:20:11.286]                       if (inherits(cond, "message")) {
[13:20:11.286]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.286]                         if (muffled) 
[13:20:11.286]                           invokeRestart("muffleMessage")
[13:20:11.286]                       }
[13:20:11.286]                       else if (inherits(cond, "warning")) {
[13:20:11.286]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.286]                         if (muffled) 
[13:20:11.286]                           invokeRestart("muffleWarning")
[13:20:11.286]                       }
[13:20:11.286]                       else if (inherits(cond, "condition")) {
[13:20:11.286]                         if (!is.null(pattern)) {
[13:20:11.286]                           computeRestarts <- base::computeRestarts
[13:20:11.286]                           grepl <- base::grepl
[13:20:11.286]                           restarts <- computeRestarts(cond)
[13:20:11.286]                           for (restart in restarts) {
[13:20:11.286]                             name <- restart$name
[13:20:11.286]                             if (is.null(name)) 
[13:20:11.286]                               next
[13:20:11.286]                             if (!grepl(pattern, name)) 
[13:20:11.286]                               next
[13:20:11.286]                             invokeRestart(restart)
[13:20:11.286]                             muffled <- TRUE
[13:20:11.286]                             break
[13:20:11.286]                           }
[13:20:11.286]                         }
[13:20:11.286]                       }
[13:20:11.286]                       invisible(muffled)
[13:20:11.286]                     }
[13:20:11.286]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.286]                   }
[13:20:11.286]                 }
[13:20:11.286]                 else {
[13:20:11.286]                   if (TRUE) {
[13:20:11.286]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.286]                     {
[13:20:11.286]                       inherits <- base::inherits
[13:20:11.286]                       invokeRestart <- base::invokeRestart
[13:20:11.286]                       is.null <- base::is.null
[13:20:11.286]                       muffled <- FALSE
[13:20:11.286]                       if (inherits(cond, "message")) {
[13:20:11.286]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.286]                         if (muffled) 
[13:20:11.286]                           invokeRestart("muffleMessage")
[13:20:11.286]                       }
[13:20:11.286]                       else if (inherits(cond, "warning")) {
[13:20:11.286]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.286]                         if (muffled) 
[13:20:11.286]                           invokeRestart("muffleWarning")
[13:20:11.286]                       }
[13:20:11.286]                       else if (inherits(cond, "condition")) {
[13:20:11.286]                         if (!is.null(pattern)) {
[13:20:11.286]                           computeRestarts <- base::computeRestarts
[13:20:11.286]                           grepl <- base::grepl
[13:20:11.286]                           restarts <- computeRestarts(cond)
[13:20:11.286]                           for (restart in restarts) {
[13:20:11.286]                             name <- restart$name
[13:20:11.286]                             if (is.null(name)) 
[13:20:11.286]                               next
[13:20:11.286]                             if (!grepl(pattern, name)) 
[13:20:11.286]                               next
[13:20:11.286]                             invokeRestart(restart)
[13:20:11.286]                             muffled <- TRUE
[13:20:11.286]                             break
[13:20:11.286]                           }
[13:20:11.286]                         }
[13:20:11.286]                       }
[13:20:11.286]                       invisible(muffled)
[13:20:11.286]                     }
[13:20:11.286]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.286]                   }
[13:20:11.286]                 }
[13:20:11.286]             }
[13:20:11.286]         }))
[13:20:11.286]     }, error = function(ex) {
[13:20:11.286]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.286]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.286]                 ...future.rng), started = ...future.startTime, 
[13:20:11.286]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.286]             version = "1.8"), class = "FutureResult")
[13:20:11.286]     }, finally = {
[13:20:11.286]         if (!identical(...future.workdir, getwd())) 
[13:20:11.286]             setwd(...future.workdir)
[13:20:11.286]         {
[13:20:11.286]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.286]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.286]             }
[13:20:11.286]             base::options(...future.oldOptions)
[13:20:11.286]             if (.Platform$OS.type == "windows") {
[13:20:11.286]                 old_names <- names(...future.oldEnvVars)
[13:20:11.286]                 envs <- base::Sys.getenv()
[13:20:11.286]                 names <- names(envs)
[13:20:11.286]                 common <- intersect(names, old_names)
[13:20:11.286]                 added <- setdiff(names, old_names)
[13:20:11.286]                 removed <- setdiff(old_names, names)
[13:20:11.286]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.286]                   envs[common]]
[13:20:11.286]                 NAMES <- toupper(changed)
[13:20:11.286]                 args <- list()
[13:20:11.286]                 for (kk in seq_along(NAMES)) {
[13:20:11.286]                   name <- changed[[kk]]
[13:20:11.286]                   NAME <- NAMES[[kk]]
[13:20:11.286]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.286]                     next
[13:20:11.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.286]                 }
[13:20:11.286]                 NAMES <- toupper(added)
[13:20:11.286]                 for (kk in seq_along(NAMES)) {
[13:20:11.286]                   name <- added[[kk]]
[13:20:11.286]                   NAME <- NAMES[[kk]]
[13:20:11.286]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.286]                     next
[13:20:11.286]                   args[[name]] <- ""
[13:20:11.286]                 }
[13:20:11.286]                 NAMES <- toupper(removed)
[13:20:11.286]                 for (kk in seq_along(NAMES)) {
[13:20:11.286]                   name <- removed[[kk]]
[13:20:11.286]                   NAME <- NAMES[[kk]]
[13:20:11.286]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.286]                     next
[13:20:11.286]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.286]                 }
[13:20:11.286]                 if (length(args) > 0) 
[13:20:11.286]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.286]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.286]             }
[13:20:11.286]             else {
[13:20:11.286]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.286]             }
[13:20:11.286]             {
[13:20:11.286]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.286]                   0L) {
[13:20:11.286]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.286]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.286]                   base::options(opts)
[13:20:11.286]                 }
[13:20:11.286]                 {
[13:20:11.286]                   {
[13:20:11.286]                     NULL
[13:20:11.286]                     RNGkind("Mersenne-Twister")
[13:20:11.286]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:11.286]                       inherits = FALSE)
[13:20:11.286]                   }
[13:20:11.286]                   options(future.plan = NULL)
[13:20:11.286]                   if (is.na(NA_character_)) 
[13:20:11.286]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.286]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.286]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:11.286]                   {
[13:20:11.286]                     future <- SequentialFuture(..., envir = envir)
[13:20:11.286]                     if (!future$lazy) 
[13:20:11.286]                       future <- run(future)
[13:20:11.286]                     invisible(future)
[13:20:11.286]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.286]                 }
[13:20:11.286]             }
[13:20:11.286]         }
[13:20:11.286]     })
[13:20:11.286]     if (TRUE) {
[13:20:11.286]         base::sink(type = "output", split = FALSE)
[13:20:11.286]         if (TRUE) {
[13:20:11.286]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.286]         }
[13:20:11.286]         else {
[13:20:11.286]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.286]         }
[13:20:11.286]         base::close(...future.stdout)
[13:20:11.286]         ...future.stdout <- NULL
[13:20:11.286]     }
[13:20:11.286]     ...future.result$conditions <- ...future.conditions
[13:20:11.286]     ...future.result$finished <- base::Sys.time()
[13:20:11.286]     ...future.result
[13:20:11.286] }
[13:20:11.288] plan(): Setting new future strategy stack:
[13:20:11.288] List of future strategies:
[13:20:11.288] 1. sequential:
[13:20:11.288]    - args: function (..., envir = parent.frame())
[13:20:11.288]    - tweaked: FALSE
[13:20:11.288]    - call: NULL
[13:20:11.288] plan(): nbrOfWorkers() = 1
[13:20:11.289] plan(): Setting new future strategy stack:
[13:20:11.289] List of future strategies:
[13:20:11.289] 1. sequential:
[13:20:11.289]    - args: function (..., envir = parent.frame())
[13:20:11.289]    - tweaked: FALSE
[13:20:11.289]    - call: plan(strategy)
[13:20:11.289] plan(): nbrOfWorkers() = 1
[13:20:11.289] SequentialFuture started (and completed)
[13:20:11.289] - Launch lazy future ... done
[13:20:11.290] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.290] getGlobalsAndPackages() ...
[13:20:11.290] Searching for globals...
[13:20:11.291] 
[13:20:11.291] Searching for globals ... DONE
[13:20:11.291] - globals: [0] <none>
[13:20:11.291] getGlobalsAndPackages() ... DONE
[13:20:11.291] Packages needed by the future expression (n = 0): <none>
[13:20:11.291] Packages needed by future strategies (n = 0): <none>
[13:20:11.292] {
[13:20:11.292]     {
[13:20:11.292]         {
[13:20:11.292]             ...future.startTime <- base::Sys.time()
[13:20:11.292]             {
[13:20:11.292]                 {
[13:20:11.292]                   {
[13:20:11.292]                     base::local({
[13:20:11.292]                       has_future <- base::requireNamespace("future", 
[13:20:11.292]                         quietly = TRUE)
[13:20:11.292]                       if (has_future) {
[13:20:11.292]                         ns <- base::getNamespace("future")
[13:20:11.292]                         version <- ns[[".package"]][["version"]]
[13:20:11.292]                         if (is.null(version)) 
[13:20:11.292]                           version <- utils::packageVersion("future")
[13:20:11.292]                       }
[13:20:11.292]                       else {
[13:20:11.292]                         version <- NULL
[13:20:11.292]                       }
[13:20:11.292]                       if (!has_future || version < "1.8.0") {
[13:20:11.292]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.292]                           "", base::R.version$version.string), 
[13:20:11.292]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:11.292]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.292]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.292]                             "release", "version")], collapse = " "), 
[13:20:11.292]                           hostname = base::Sys.info()[["nodename"]])
[13:20:11.292]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.292]                           info)
[13:20:11.292]                         info <- base::paste(info, collapse = "; ")
[13:20:11.292]                         if (!has_future) {
[13:20:11.292]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.292]                             info)
[13:20:11.292]                         }
[13:20:11.292]                         else {
[13:20:11.292]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.292]                             info, version)
[13:20:11.292]                         }
[13:20:11.292]                         base::stop(msg)
[13:20:11.292]                       }
[13:20:11.292]                     })
[13:20:11.292]                   }
[13:20:11.292]                   options(future.plan = NULL)
[13:20:11.292]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.292]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.292]                 }
[13:20:11.292]                 ...future.workdir <- getwd()
[13:20:11.292]             }
[13:20:11.292]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.292]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.292]         }
[13:20:11.292]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.292]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.292]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.292]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.292]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.292]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.292]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.292]             base::names(...future.oldOptions))
[13:20:11.292]     }
[13:20:11.292]     if (FALSE) {
[13:20:11.292]     }
[13:20:11.292]     else {
[13:20:11.292]         if (TRUE) {
[13:20:11.292]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.292]                 open = "w")
[13:20:11.292]         }
[13:20:11.292]         else {
[13:20:11.292]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.292]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.292]         }
[13:20:11.292]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.292]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.292]             base::sink(type = "output", split = FALSE)
[13:20:11.292]             base::close(...future.stdout)
[13:20:11.292]         }, add = TRUE)
[13:20:11.292]     }
[13:20:11.292]     ...future.frame <- base::sys.nframe()
[13:20:11.292]     ...future.conditions <- base::list()
[13:20:11.292]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.292]     if (FALSE) {
[13:20:11.292]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.292]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.292]     }
[13:20:11.292]     ...future.result <- base::tryCatch({
[13:20:11.292]         base::withCallingHandlers({
[13:20:11.292]             ...future.value <- base::withVisible(base::local(42))
[13:20:11.292]             future::FutureResult(value = ...future.value$value, 
[13:20:11.292]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.292]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.292]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.292]                     ...future.globalenv.names))
[13:20:11.292]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.292]         }, condition = base::local({
[13:20:11.292]             c <- base::c
[13:20:11.292]             inherits <- base::inherits
[13:20:11.292]             invokeRestart <- base::invokeRestart
[13:20:11.292]             length <- base::length
[13:20:11.292]             list <- base::list
[13:20:11.292]             seq.int <- base::seq.int
[13:20:11.292]             signalCondition <- base::signalCondition
[13:20:11.292]             sys.calls <- base::sys.calls
[13:20:11.292]             `[[` <- base::`[[`
[13:20:11.292]             `+` <- base::`+`
[13:20:11.292]             `<<-` <- base::`<<-`
[13:20:11.292]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.292]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.292]                   3L)]
[13:20:11.292]             }
[13:20:11.292]             function(cond) {
[13:20:11.292]                 is_error <- inherits(cond, "error")
[13:20:11.292]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.292]                   NULL)
[13:20:11.292]                 if (is_error) {
[13:20:11.292]                   sessionInformation <- function() {
[13:20:11.292]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.292]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.292]                       search = base::search(), system = base::Sys.info())
[13:20:11.292]                   }
[13:20:11.292]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.292]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.292]                     cond$call), session = sessionInformation(), 
[13:20:11.292]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.292]                   signalCondition(cond)
[13:20:11.292]                 }
[13:20:11.292]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.292]                 "immediateCondition"))) {
[13:20:11.292]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.292]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.292]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.292]                   if (TRUE && !signal) {
[13:20:11.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.292]                     {
[13:20:11.292]                       inherits <- base::inherits
[13:20:11.292]                       invokeRestart <- base::invokeRestart
[13:20:11.292]                       is.null <- base::is.null
[13:20:11.292]                       muffled <- FALSE
[13:20:11.292]                       if (inherits(cond, "message")) {
[13:20:11.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.292]                         if (muffled) 
[13:20:11.292]                           invokeRestart("muffleMessage")
[13:20:11.292]                       }
[13:20:11.292]                       else if (inherits(cond, "warning")) {
[13:20:11.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.292]                         if (muffled) 
[13:20:11.292]                           invokeRestart("muffleWarning")
[13:20:11.292]                       }
[13:20:11.292]                       else if (inherits(cond, "condition")) {
[13:20:11.292]                         if (!is.null(pattern)) {
[13:20:11.292]                           computeRestarts <- base::computeRestarts
[13:20:11.292]                           grepl <- base::grepl
[13:20:11.292]                           restarts <- computeRestarts(cond)
[13:20:11.292]                           for (restart in restarts) {
[13:20:11.292]                             name <- restart$name
[13:20:11.292]                             if (is.null(name)) 
[13:20:11.292]                               next
[13:20:11.292]                             if (!grepl(pattern, name)) 
[13:20:11.292]                               next
[13:20:11.292]                             invokeRestart(restart)
[13:20:11.292]                             muffled <- TRUE
[13:20:11.292]                             break
[13:20:11.292]                           }
[13:20:11.292]                         }
[13:20:11.292]                       }
[13:20:11.292]                       invisible(muffled)
[13:20:11.292]                     }
[13:20:11.292]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.292]                   }
[13:20:11.292]                 }
[13:20:11.292]                 else {
[13:20:11.292]                   if (TRUE) {
[13:20:11.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.292]                     {
[13:20:11.292]                       inherits <- base::inherits
[13:20:11.292]                       invokeRestart <- base::invokeRestart
[13:20:11.292]                       is.null <- base::is.null
[13:20:11.292]                       muffled <- FALSE
[13:20:11.292]                       if (inherits(cond, "message")) {
[13:20:11.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.292]                         if (muffled) 
[13:20:11.292]                           invokeRestart("muffleMessage")
[13:20:11.292]                       }
[13:20:11.292]                       else if (inherits(cond, "warning")) {
[13:20:11.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.292]                         if (muffled) 
[13:20:11.292]                           invokeRestart("muffleWarning")
[13:20:11.292]                       }
[13:20:11.292]                       else if (inherits(cond, "condition")) {
[13:20:11.292]                         if (!is.null(pattern)) {
[13:20:11.292]                           computeRestarts <- base::computeRestarts
[13:20:11.292]                           grepl <- base::grepl
[13:20:11.292]                           restarts <- computeRestarts(cond)
[13:20:11.292]                           for (restart in restarts) {
[13:20:11.292]                             name <- restart$name
[13:20:11.292]                             if (is.null(name)) 
[13:20:11.292]                               next
[13:20:11.292]                             if (!grepl(pattern, name)) 
[13:20:11.292]                               next
[13:20:11.292]                             invokeRestart(restart)
[13:20:11.292]                             muffled <- TRUE
[13:20:11.292]                             break
[13:20:11.292]                           }
[13:20:11.292]                         }
[13:20:11.292]                       }
[13:20:11.292]                       invisible(muffled)
[13:20:11.292]                     }
[13:20:11.292]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.292]                   }
[13:20:11.292]                 }
[13:20:11.292]             }
[13:20:11.292]         }))
[13:20:11.292]     }, error = function(ex) {
[13:20:11.292]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.292]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.292]                 ...future.rng), started = ...future.startTime, 
[13:20:11.292]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.292]             version = "1.8"), class = "FutureResult")
[13:20:11.292]     }, finally = {
[13:20:11.292]         if (!identical(...future.workdir, getwd())) 
[13:20:11.292]             setwd(...future.workdir)
[13:20:11.292]         {
[13:20:11.292]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.292]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.292]             }
[13:20:11.292]             base::options(...future.oldOptions)
[13:20:11.292]             if (.Platform$OS.type == "windows") {
[13:20:11.292]                 old_names <- names(...future.oldEnvVars)
[13:20:11.292]                 envs <- base::Sys.getenv()
[13:20:11.292]                 names <- names(envs)
[13:20:11.292]                 common <- intersect(names, old_names)
[13:20:11.292]                 added <- setdiff(names, old_names)
[13:20:11.292]                 removed <- setdiff(old_names, names)
[13:20:11.292]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.292]                   envs[common]]
[13:20:11.292]                 NAMES <- toupper(changed)
[13:20:11.292]                 args <- list()
[13:20:11.292]                 for (kk in seq_along(NAMES)) {
[13:20:11.292]                   name <- changed[[kk]]
[13:20:11.292]                   NAME <- NAMES[[kk]]
[13:20:11.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.292]                     next
[13:20:11.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.292]                 }
[13:20:11.292]                 NAMES <- toupper(added)
[13:20:11.292]                 for (kk in seq_along(NAMES)) {
[13:20:11.292]                   name <- added[[kk]]
[13:20:11.292]                   NAME <- NAMES[[kk]]
[13:20:11.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.292]                     next
[13:20:11.292]                   args[[name]] <- ""
[13:20:11.292]                 }
[13:20:11.292]                 NAMES <- toupper(removed)
[13:20:11.292]                 for (kk in seq_along(NAMES)) {
[13:20:11.292]                   name <- removed[[kk]]
[13:20:11.292]                   NAME <- NAMES[[kk]]
[13:20:11.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.292]                     next
[13:20:11.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.292]                 }
[13:20:11.292]                 if (length(args) > 0) 
[13:20:11.292]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.292]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.292]             }
[13:20:11.292]             else {
[13:20:11.292]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.292]             }
[13:20:11.292]             {
[13:20:11.292]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.292]                   0L) {
[13:20:11.292]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.292]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.292]                   base::options(opts)
[13:20:11.292]                 }
[13:20:11.292]                 {
[13:20:11.292]                   {
[13:20:11.292]                     NULL
[13:20:11.292]                     RNGkind("Mersenne-Twister")
[13:20:11.292]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:11.292]                       inherits = FALSE)
[13:20:11.292]                   }
[13:20:11.292]                   options(future.plan = NULL)
[13:20:11.292]                   if (is.na(NA_character_)) 
[13:20:11.292]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.292]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.292]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:11.292]                   {
[13:20:11.292]                     future <- SequentialFuture(..., envir = envir)
[13:20:11.292]                     if (!future$lazy) 
[13:20:11.292]                       future <- run(future)
[13:20:11.292]                     invisible(future)
[13:20:11.292]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.292]                 }
[13:20:11.292]             }
[13:20:11.292]         }
[13:20:11.292]     })
[13:20:11.292]     if (TRUE) {
[13:20:11.292]         base::sink(type = "output", split = FALSE)
[13:20:11.292]         if (TRUE) {
[13:20:11.292]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.292]         }
[13:20:11.292]         else {
[13:20:11.292]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.292]         }
[13:20:11.292]         base::close(...future.stdout)
[13:20:11.292]         ...future.stdout <- NULL
[13:20:11.292]     }
[13:20:11.292]     ...future.result$conditions <- ...future.conditions
[13:20:11.292]     ...future.result$finished <- base::Sys.time()
[13:20:11.292]     ...future.result
[13:20:11.292] }
[13:20:11.293] plan(): Setting new future strategy stack:
[13:20:11.294] List of future strategies:
[13:20:11.294] 1. sequential:
[13:20:11.294]    - args: function (..., envir = parent.frame())
[13:20:11.294]    - tweaked: FALSE
[13:20:11.294]    - call: NULL
[13:20:11.294] plan(): nbrOfWorkers() = 1
[13:20:11.295] plan(): Setting new future strategy stack:
[13:20:11.295] List of future strategies:
[13:20:11.295] 1. sequential:
[13:20:11.295]    - args: function (..., envir = parent.frame())
[13:20:11.295]    - tweaked: FALSE
[13:20:11.295]    - call: plan(strategy)
[13:20:11.295] plan(): nbrOfWorkers() = 1
[13:20:11.295] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.296] getGlobalsAndPackages() ...
[13:20:11.296] Searching for globals...
[13:20:11.296] 
[13:20:11.296] Searching for globals ... DONE
[13:20:11.296] - globals: [0] <none>
[13:20:11.296] getGlobalsAndPackages() ... DONE
[13:20:11.297] run() for ‘Future’ ...
[13:20:11.297] - state: ‘created’
[13:20:11.297] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:11.297] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.297] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:11.297]   - Field: ‘label’
[13:20:11.297]   - Field: ‘local’
[13:20:11.298]   - Field: ‘owner’
[13:20:11.298]   - Field: ‘envir’
[13:20:11.298]   - Field: ‘packages’
[13:20:11.298]   - Field: ‘gc’
[13:20:11.298]   - Field: ‘conditions’
[13:20:11.298]   - Field: ‘expr’
[13:20:11.298]   - Field: ‘uuid’
[13:20:11.298]   - Field: ‘seed’
[13:20:11.298]   - Field: ‘version’
[13:20:11.298]   - Field: ‘result’
[13:20:11.298]   - Field: ‘asynchronous’
[13:20:11.299]   - Field: ‘calls’
[13:20:11.299]   - Field: ‘globals’
[13:20:11.299]   - Field: ‘stdout’
[13:20:11.299]   - Field: ‘earlySignal’
[13:20:11.299]   - Field: ‘lazy’
[13:20:11.299]   - Field: ‘state’
[13:20:11.299] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:11.299] - Launch lazy future ...
[13:20:11.299] Packages needed by the future expression (n = 0): <none>
[13:20:11.299] Packages needed by future strategies (n = 0): <none>
[13:20:11.300] {
[13:20:11.300]     {
[13:20:11.300]         {
[13:20:11.300]             ...future.startTime <- base::Sys.time()
[13:20:11.300]             {
[13:20:11.300]                 {
[13:20:11.300]                   {
[13:20:11.300]                     base::local({
[13:20:11.300]                       has_future <- base::requireNamespace("future", 
[13:20:11.300]                         quietly = TRUE)
[13:20:11.300]                       if (has_future) {
[13:20:11.300]                         ns <- base::getNamespace("future")
[13:20:11.300]                         version <- ns[[".package"]][["version"]]
[13:20:11.300]                         if (is.null(version)) 
[13:20:11.300]                           version <- utils::packageVersion("future")
[13:20:11.300]                       }
[13:20:11.300]                       else {
[13:20:11.300]                         version <- NULL
[13:20:11.300]                       }
[13:20:11.300]                       if (!has_future || version < "1.8.0") {
[13:20:11.300]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.300]                           "", base::R.version$version.string), 
[13:20:11.300]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:11.300]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.300]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.300]                             "release", "version")], collapse = " "), 
[13:20:11.300]                           hostname = base::Sys.info()[["nodename"]])
[13:20:11.300]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.300]                           info)
[13:20:11.300]                         info <- base::paste(info, collapse = "; ")
[13:20:11.300]                         if (!has_future) {
[13:20:11.300]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.300]                             info)
[13:20:11.300]                         }
[13:20:11.300]                         else {
[13:20:11.300]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.300]                             info, version)
[13:20:11.300]                         }
[13:20:11.300]                         base::stop(msg)
[13:20:11.300]                       }
[13:20:11.300]                     })
[13:20:11.300]                   }
[13:20:11.300]                   options(future.plan = NULL)
[13:20:11.300]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.300]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.300]                 }
[13:20:11.300]                 ...future.workdir <- getwd()
[13:20:11.300]             }
[13:20:11.300]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.300]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.300]         }
[13:20:11.300]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.300]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.300]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.300]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.300]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.300]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.300]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.300]             base::names(...future.oldOptions))
[13:20:11.300]     }
[13:20:11.300]     if (FALSE) {
[13:20:11.300]     }
[13:20:11.300]     else {
[13:20:11.300]         if (TRUE) {
[13:20:11.300]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.300]                 open = "w")
[13:20:11.300]         }
[13:20:11.300]         else {
[13:20:11.300]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.300]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.300]         }
[13:20:11.300]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.300]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.300]             base::sink(type = "output", split = FALSE)
[13:20:11.300]             base::close(...future.stdout)
[13:20:11.300]         }, add = TRUE)
[13:20:11.300]     }
[13:20:11.300]     ...future.frame <- base::sys.nframe()
[13:20:11.300]     ...future.conditions <- base::list()
[13:20:11.300]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.300]     if (FALSE) {
[13:20:11.300]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.300]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.300]     }
[13:20:11.300]     ...future.result <- base::tryCatch({
[13:20:11.300]         base::withCallingHandlers({
[13:20:11.300]             ...future.value <- base::withVisible(base::local(42))
[13:20:11.300]             future::FutureResult(value = ...future.value$value, 
[13:20:11.300]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.300]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.300]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.300]                     ...future.globalenv.names))
[13:20:11.300]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.300]         }, condition = base::local({
[13:20:11.300]             c <- base::c
[13:20:11.300]             inherits <- base::inherits
[13:20:11.300]             invokeRestart <- base::invokeRestart
[13:20:11.300]             length <- base::length
[13:20:11.300]             list <- base::list
[13:20:11.300]             seq.int <- base::seq.int
[13:20:11.300]             signalCondition <- base::signalCondition
[13:20:11.300]             sys.calls <- base::sys.calls
[13:20:11.300]             `[[` <- base::`[[`
[13:20:11.300]             `+` <- base::`+`
[13:20:11.300]             `<<-` <- base::`<<-`
[13:20:11.300]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.300]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.300]                   3L)]
[13:20:11.300]             }
[13:20:11.300]             function(cond) {
[13:20:11.300]                 is_error <- inherits(cond, "error")
[13:20:11.300]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.300]                   NULL)
[13:20:11.300]                 if (is_error) {
[13:20:11.300]                   sessionInformation <- function() {
[13:20:11.300]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.300]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.300]                       search = base::search(), system = base::Sys.info())
[13:20:11.300]                   }
[13:20:11.300]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.300]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.300]                     cond$call), session = sessionInformation(), 
[13:20:11.300]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.300]                   signalCondition(cond)
[13:20:11.300]                 }
[13:20:11.300]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.300]                 "immediateCondition"))) {
[13:20:11.300]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.300]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.300]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.300]                   if (TRUE && !signal) {
[13:20:11.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.300]                     {
[13:20:11.300]                       inherits <- base::inherits
[13:20:11.300]                       invokeRestart <- base::invokeRestart
[13:20:11.300]                       is.null <- base::is.null
[13:20:11.300]                       muffled <- FALSE
[13:20:11.300]                       if (inherits(cond, "message")) {
[13:20:11.300]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.300]                         if (muffled) 
[13:20:11.300]                           invokeRestart("muffleMessage")
[13:20:11.300]                       }
[13:20:11.300]                       else if (inherits(cond, "warning")) {
[13:20:11.300]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.300]                         if (muffled) 
[13:20:11.300]                           invokeRestart("muffleWarning")
[13:20:11.300]                       }
[13:20:11.300]                       else if (inherits(cond, "condition")) {
[13:20:11.300]                         if (!is.null(pattern)) {
[13:20:11.300]                           computeRestarts <- base::computeRestarts
[13:20:11.300]                           grepl <- base::grepl
[13:20:11.300]                           restarts <- computeRestarts(cond)
[13:20:11.300]                           for (restart in restarts) {
[13:20:11.300]                             name <- restart$name
[13:20:11.300]                             if (is.null(name)) 
[13:20:11.300]                               next
[13:20:11.300]                             if (!grepl(pattern, name)) 
[13:20:11.300]                               next
[13:20:11.300]                             invokeRestart(restart)
[13:20:11.300]                             muffled <- TRUE
[13:20:11.300]                             break
[13:20:11.300]                           }
[13:20:11.300]                         }
[13:20:11.300]                       }
[13:20:11.300]                       invisible(muffled)
[13:20:11.300]                     }
[13:20:11.300]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.300]                   }
[13:20:11.300]                 }
[13:20:11.300]                 else {
[13:20:11.300]                   if (TRUE) {
[13:20:11.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.300]                     {
[13:20:11.300]                       inherits <- base::inherits
[13:20:11.300]                       invokeRestart <- base::invokeRestart
[13:20:11.300]                       is.null <- base::is.null
[13:20:11.300]                       muffled <- FALSE
[13:20:11.300]                       if (inherits(cond, "message")) {
[13:20:11.300]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.300]                         if (muffled) 
[13:20:11.300]                           invokeRestart("muffleMessage")
[13:20:11.300]                       }
[13:20:11.300]                       else if (inherits(cond, "warning")) {
[13:20:11.300]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.300]                         if (muffled) 
[13:20:11.300]                           invokeRestart("muffleWarning")
[13:20:11.300]                       }
[13:20:11.300]                       else if (inherits(cond, "condition")) {
[13:20:11.300]                         if (!is.null(pattern)) {
[13:20:11.300]                           computeRestarts <- base::computeRestarts
[13:20:11.300]                           grepl <- base::grepl
[13:20:11.300]                           restarts <- computeRestarts(cond)
[13:20:11.300]                           for (restart in restarts) {
[13:20:11.300]                             name <- restart$name
[13:20:11.300]                             if (is.null(name)) 
[13:20:11.300]                               next
[13:20:11.300]                             if (!grepl(pattern, name)) 
[13:20:11.300]                               next
[13:20:11.300]                             invokeRestart(restart)
[13:20:11.300]                             muffled <- TRUE
[13:20:11.300]                             break
[13:20:11.300]                           }
[13:20:11.300]                         }
[13:20:11.300]                       }
[13:20:11.300]                       invisible(muffled)
[13:20:11.300]                     }
[13:20:11.300]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.300]                   }
[13:20:11.300]                 }
[13:20:11.300]             }
[13:20:11.300]         }))
[13:20:11.300]     }, error = function(ex) {
[13:20:11.300]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.300]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.300]                 ...future.rng), started = ...future.startTime, 
[13:20:11.300]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.300]             version = "1.8"), class = "FutureResult")
[13:20:11.300]     }, finally = {
[13:20:11.300]         if (!identical(...future.workdir, getwd())) 
[13:20:11.300]             setwd(...future.workdir)
[13:20:11.300]         {
[13:20:11.300]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.300]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.300]             }
[13:20:11.300]             base::options(...future.oldOptions)
[13:20:11.300]             if (.Platform$OS.type == "windows") {
[13:20:11.300]                 old_names <- names(...future.oldEnvVars)
[13:20:11.300]                 envs <- base::Sys.getenv()
[13:20:11.300]                 names <- names(envs)
[13:20:11.300]                 common <- intersect(names, old_names)
[13:20:11.300]                 added <- setdiff(names, old_names)
[13:20:11.300]                 removed <- setdiff(old_names, names)
[13:20:11.300]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.300]                   envs[common]]
[13:20:11.300]                 NAMES <- toupper(changed)
[13:20:11.300]                 args <- list()
[13:20:11.300]                 for (kk in seq_along(NAMES)) {
[13:20:11.300]                   name <- changed[[kk]]
[13:20:11.300]                   NAME <- NAMES[[kk]]
[13:20:11.300]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.300]                     next
[13:20:11.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.300]                 }
[13:20:11.300]                 NAMES <- toupper(added)
[13:20:11.300]                 for (kk in seq_along(NAMES)) {
[13:20:11.300]                   name <- added[[kk]]
[13:20:11.300]                   NAME <- NAMES[[kk]]
[13:20:11.300]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.300]                     next
[13:20:11.300]                   args[[name]] <- ""
[13:20:11.300]                 }
[13:20:11.300]                 NAMES <- toupper(removed)
[13:20:11.300]                 for (kk in seq_along(NAMES)) {
[13:20:11.300]                   name <- removed[[kk]]
[13:20:11.300]                   NAME <- NAMES[[kk]]
[13:20:11.300]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.300]                     next
[13:20:11.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.300]                 }
[13:20:11.300]                 if (length(args) > 0) 
[13:20:11.300]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.300]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.300]             }
[13:20:11.300]             else {
[13:20:11.300]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.300]             }
[13:20:11.300]             {
[13:20:11.300]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.300]                   0L) {
[13:20:11.300]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.300]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.300]                   base::options(opts)
[13:20:11.300]                 }
[13:20:11.300]                 {
[13:20:11.300]                   {
[13:20:11.300]                     NULL
[13:20:11.300]                     RNGkind("Mersenne-Twister")
[13:20:11.300]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:11.300]                       inherits = FALSE)
[13:20:11.300]                   }
[13:20:11.300]                   options(future.plan = NULL)
[13:20:11.300]                   if (is.na(NA_character_)) 
[13:20:11.300]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.300]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.300]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:11.300]                   {
[13:20:11.300]                     future <- SequentialFuture(..., envir = envir)
[13:20:11.300]                     if (!future$lazy) 
[13:20:11.300]                       future <- run(future)
[13:20:11.300]                     invisible(future)
[13:20:11.300]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.300]                 }
[13:20:11.300]             }
[13:20:11.300]         }
[13:20:11.300]     })
[13:20:11.300]     if (TRUE) {
[13:20:11.300]         base::sink(type = "output", split = FALSE)
[13:20:11.300]         if (TRUE) {
[13:20:11.300]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.300]         }
[13:20:11.300]         else {
[13:20:11.300]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.300]         }
[13:20:11.300]         base::close(...future.stdout)
[13:20:11.300]         ...future.stdout <- NULL
[13:20:11.300]     }
[13:20:11.300]     ...future.result$conditions <- ...future.conditions
[13:20:11.300]     ...future.result$finished <- base::Sys.time()
[13:20:11.300]     ...future.result
[13:20:11.300] }
[13:20:11.302] plan(): Setting new future strategy stack:
[13:20:11.302] List of future strategies:
[13:20:11.302] 1. sequential:
[13:20:11.302]    - args: function (..., envir = parent.frame())
[13:20:11.302]    - tweaked: FALSE
[13:20:11.302]    - call: NULL
[13:20:11.302] plan(): nbrOfWorkers() = 1
[13:20:11.303] plan(): Setting new future strategy stack:
[13:20:11.303] List of future strategies:
[13:20:11.303] 1. sequential:
[13:20:11.303]    - args: function (..., envir = parent.frame())
[13:20:11.303]    - tweaked: FALSE
[13:20:11.303]    - call: plan(strategy)
[13:20:11.303] plan(): nbrOfWorkers() = 1
[13:20:11.303] SequentialFuture started (and completed)
[13:20:11.303] - Launch lazy future ... done
[13:20:11.304] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.304] getGlobalsAndPackages() ...
[13:20:11.304] Searching for globals...
[13:20:11.305] - globals found: [1] ‘{’
[13:20:11.305] Searching for globals ... DONE
[13:20:11.305] Resolving globals: FALSE
[13:20:11.305] 
[13:20:11.305] 
[13:20:11.306] getGlobalsAndPackages() ... DONE
[13:20:11.306] run() for ‘Future’ ...
[13:20:11.306] - state: ‘created’
[13:20:11.306] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:11.306] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:11.306] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:11.306]   - Field: ‘label’
[13:20:11.307]   - Field: ‘local’
[13:20:11.307]   - Field: ‘owner’
[13:20:11.307]   - Field: ‘envir’
[13:20:11.307]   - Field: ‘packages’
[13:20:11.307]   - Field: ‘gc’
[13:20:11.307]   - Field: ‘conditions’
[13:20:11.307]   - Field: ‘expr’
[13:20:11.307]   - Field: ‘uuid’
[13:20:11.307]   - Field: ‘seed’
[13:20:11.307]   - Field: ‘version’
[13:20:11.307]   - Field: ‘result’
[13:20:11.308]   - Field: ‘asynchronous’
[13:20:11.308]   - Field: ‘calls’
[13:20:11.308]   - Field: ‘globals’
[13:20:11.308]   - Field: ‘stdout’
[13:20:11.308]   - Field: ‘earlySignal’
[13:20:11.308]   - Field: ‘lazy’
[13:20:11.308]   - Field: ‘state’
[13:20:11.308] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:11.308] - Launch lazy future ...
[13:20:11.308] Packages needed by the future expression (n = 0): <none>
[13:20:11.309] Packages needed by future strategies (n = 0): <none>
[13:20:11.309] {
[13:20:11.309]     {
[13:20:11.309]         {
[13:20:11.309]             ...future.startTime <- base::Sys.time()
[13:20:11.309]             {
[13:20:11.309]                 {
[13:20:11.309]                   {
[13:20:11.309]                     base::local({
[13:20:11.309]                       has_future <- base::requireNamespace("future", 
[13:20:11.309]                         quietly = TRUE)
[13:20:11.309]                       if (has_future) {
[13:20:11.309]                         ns <- base::getNamespace("future")
[13:20:11.309]                         version <- ns[[".package"]][["version"]]
[13:20:11.309]                         if (is.null(version)) 
[13:20:11.309]                           version <- utils::packageVersion("future")
[13:20:11.309]                       }
[13:20:11.309]                       else {
[13:20:11.309]                         version <- NULL
[13:20:11.309]                       }
[13:20:11.309]                       if (!has_future || version < "1.8.0") {
[13:20:11.309]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.309]                           "", base::R.version$version.string), 
[13:20:11.309]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:11.309]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.309]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.309]                             "release", "version")], collapse = " "), 
[13:20:11.309]                           hostname = base::Sys.info()[["nodename"]])
[13:20:11.309]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.309]                           info)
[13:20:11.309]                         info <- base::paste(info, collapse = "; ")
[13:20:11.309]                         if (!has_future) {
[13:20:11.309]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.309]                             info)
[13:20:11.309]                         }
[13:20:11.309]                         else {
[13:20:11.309]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.309]                             info, version)
[13:20:11.309]                         }
[13:20:11.309]                         base::stop(msg)
[13:20:11.309]                       }
[13:20:11.309]                     })
[13:20:11.309]                   }
[13:20:11.309]                   options(future.plan = NULL)
[13:20:11.309]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.309]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.309]                 }
[13:20:11.309]                 ...future.workdir <- getwd()
[13:20:11.309]             }
[13:20:11.309]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.309]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.309]         }
[13:20:11.309]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.309]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.309]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.309]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.309]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.309]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.309]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.309]             base::names(...future.oldOptions))
[13:20:11.309]     }
[13:20:11.309]     if (FALSE) {
[13:20:11.309]     }
[13:20:11.309]     else {
[13:20:11.309]         if (TRUE) {
[13:20:11.309]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.309]                 open = "w")
[13:20:11.309]         }
[13:20:11.309]         else {
[13:20:11.309]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.309]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.309]         }
[13:20:11.309]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.309]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.309]             base::sink(type = "output", split = FALSE)
[13:20:11.309]             base::close(...future.stdout)
[13:20:11.309]         }, add = TRUE)
[13:20:11.309]     }
[13:20:11.309]     ...future.frame <- base::sys.nframe()
[13:20:11.309]     ...future.conditions <- base::list()
[13:20:11.309]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.309]     if (FALSE) {
[13:20:11.309]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.309]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.309]     }
[13:20:11.309]     ...future.result <- base::tryCatch({
[13:20:11.309]         base::withCallingHandlers({
[13:20:11.309]             ...future.value <- base::withVisible(base::local({
[13:20:11.309]                 42
[13:20:11.309]             }))
[13:20:11.309]             future::FutureResult(value = ...future.value$value, 
[13:20:11.309]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.309]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.309]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.309]                     ...future.globalenv.names))
[13:20:11.309]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.309]         }, condition = base::local({
[13:20:11.309]             c <- base::c
[13:20:11.309]             inherits <- base::inherits
[13:20:11.309]             invokeRestart <- base::invokeRestart
[13:20:11.309]             length <- base::length
[13:20:11.309]             list <- base::list
[13:20:11.309]             seq.int <- base::seq.int
[13:20:11.309]             signalCondition <- base::signalCondition
[13:20:11.309]             sys.calls <- base::sys.calls
[13:20:11.309]             `[[` <- base::`[[`
[13:20:11.309]             `+` <- base::`+`
[13:20:11.309]             `<<-` <- base::`<<-`
[13:20:11.309]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.309]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.309]                   3L)]
[13:20:11.309]             }
[13:20:11.309]             function(cond) {
[13:20:11.309]                 is_error <- inherits(cond, "error")
[13:20:11.309]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.309]                   NULL)
[13:20:11.309]                 if (is_error) {
[13:20:11.309]                   sessionInformation <- function() {
[13:20:11.309]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.309]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.309]                       search = base::search(), system = base::Sys.info())
[13:20:11.309]                   }
[13:20:11.309]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.309]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.309]                     cond$call), session = sessionInformation(), 
[13:20:11.309]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.309]                   signalCondition(cond)
[13:20:11.309]                 }
[13:20:11.309]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.309]                 "immediateCondition"))) {
[13:20:11.309]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.309]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.309]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.309]                   if (TRUE && !signal) {
[13:20:11.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.309]                     {
[13:20:11.309]                       inherits <- base::inherits
[13:20:11.309]                       invokeRestart <- base::invokeRestart
[13:20:11.309]                       is.null <- base::is.null
[13:20:11.309]                       muffled <- FALSE
[13:20:11.309]                       if (inherits(cond, "message")) {
[13:20:11.309]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.309]                         if (muffled) 
[13:20:11.309]                           invokeRestart("muffleMessage")
[13:20:11.309]                       }
[13:20:11.309]                       else if (inherits(cond, "warning")) {
[13:20:11.309]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.309]                         if (muffled) 
[13:20:11.309]                           invokeRestart("muffleWarning")
[13:20:11.309]                       }
[13:20:11.309]                       else if (inherits(cond, "condition")) {
[13:20:11.309]                         if (!is.null(pattern)) {
[13:20:11.309]                           computeRestarts <- base::computeRestarts
[13:20:11.309]                           grepl <- base::grepl
[13:20:11.309]                           restarts <- computeRestarts(cond)
[13:20:11.309]                           for (restart in restarts) {
[13:20:11.309]                             name <- restart$name
[13:20:11.309]                             if (is.null(name)) 
[13:20:11.309]                               next
[13:20:11.309]                             if (!grepl(pattern, name)) 
[13:20:11.309]                               next
[13:20:11.309]                             invokeRestart(restart)
[13:20:11.309]                             muffled <- TRUE
[13:20:11.309]                             break
[13:20:11.309]                           }
[13:20:11.309]                         }
[13:20:11.309]                       }
[13:20:11.309]                       invisible(muffled)
[13:20:11.309]                     }
[13:20:11.309]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.309]                   }
[13:20:11.309]                 }
[13:20:11.309]                 else {
[13:20:11.309]                   if (TRUE) {
[13:20:11.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.309]                     {
[13:20:11.309]                       inherits <- base::inherits
[13:20:11.309]                       invokeRestart <- base::invokeRestart
[13:20:11.309]                       is.null <- base::is.null
[13:20:11.309]                       muffled <- FALSE
[13:20:11.309]                       if (inherits(cond, "message")) {
[13:20:11.309]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.309]                         if (muffled) 
[13:20:11.309]                           invokeRestart("muffleMessage")
[13:20:11.309]                       }
[13:20:11.309]                       else if (inherits(cond, "warning")) {
[13:20:11.309]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.309]                         if (muffled) 
[13:20:11.309]                           invokeRestart("muffleWarning")
[13:20:11.309]                       }
[13:20:11.309]                       else if (inherits(cond, "condition")) {
[13:20:11.309]                         if (!is.null(pattern)) {
[13:20:11.309]                           computeRestarts <- base::computeRestarts
[13:20:11.309]                           grepl <- base::grepl
[13:20:11.309]                           restarts <- computeRestarts(cond)
[13:20:11.309]                           for (restart in restarts) {
[13:20:11.309]                             name <- restart$name
[13:20:11.309]                             if (is.null(name)) 
[13:20:11.309]                               next
[13:20:11.309]                             if (!grepl(pattern, name)) 
[13:20:11.309]                               next
[13:20:11.309]                             invokeRestart(restart)
[13:20:11.309]                             muffled <- TRUE
[13:20:11.309]                             break
[13:20:11.309]                           }
[13:20:11.309]                         }
[13:20:11.309]                       }
[13:20:11.309]                       invisible(muffled)
[13:20:11.309]                     }
[13:20:11.309]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.309]                   }
[13:20:11.309]                 }
[13:20:11.309]             }
[13:20:11.309]         }))
[13:20:11.309]     }, error = function(ex) {
[13:20:11.309]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.309]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.309]                 ...future.rng), started = ...future.startTime, 
[13:20:11.309]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.309]             version = "1.8"), class = "FutureResult")
[13:20:11.309]     }, finally = {
[13:20:11.309]         if (!identical(...future.workdir, getwd())) 
[13:20:11.309]             setwd(...future.workdir)
[13:20:11.309]         {
[13:20:11.309]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.309]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.309]             }
[13:20:11.309]             base::options(...future.oldOptions)
[13:20:11.309]             if (.Platform$OS.type == "windows") {
[13:20:11.309]                 old_names <- names(...future.oldEnvVars)
[13:20:11.309]                 envs <- base::Sys.getenv()
[13:20:11.309]                 names <- names(envs)
[13:20:11.309]                 common <- intersect(names, old_names)
[13:20:11.309]                 added <- setdiff(names, old_names)
[13:20:11.309]                 removed <- setdiff(old_names, names)
[13:20:11.309]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.309]                   envs[common]]
[13:20:11.309]                 NAMES <- toupper(changed)
[13:20:11.309]                 args <- list()
[13:20:11.309]                 for (kk in seq_along(NAMES)) {
[13:20:11.309]                   name <- changed[[kk]]
[13:20:11.309]                   NAME <- NAMES[[kk]]
[13:20:11.309]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.309]                     next
[13:20:11.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.309]                 }
[13:20:11.309]                 NAMES <- toupper(added)
[13:20:11.309]                 for (kk in seq_along(NAMES)) {
[13:20:11.309]                   name <- added[[kk]]
[13:20:11.309]                   NAME <- NAMES[[kk]]
[13:20:11.309]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.309]                     next
[13:20:11.309]                   args[[name]] <- ""
[13:20:11.309]                 }
[13:20:11.309]                 NAMES <- toupper(removed)
[13:20:11.309]                 for (kk in seq_along(NAMES)) {
[13:20:11.309]                   name <- removed[[kk]]
[13:20:11.309]                   NAME <- NAMES[[kk]]
[13:20:11.309]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.309]                     next
[13:20:11.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.309]                 }
[13:20:11.309]                 if (length(args) > 0) 
[13:20:11.309]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.309]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.309]             }
[13:20:11.309]             else {
[13:20:11.309]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.309]             }
[13:20:11.309]             {
[13:20:11.309]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.309]                   0L) {
[13:20:11.309]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.309]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.309]                   base::options(opts)
[13:20:11.309]                 }
[13:20:11.309]                 {
[13:20:11.309]                   {
[13:20:11.309]                     NULL
[13:20:11.309]                     RNGkind("Mersenne-Twister")
[13:20:11.309]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:11.309]                       inherits = FALSE)
[13:20:11.309]                   }
[13:20:11.309]                   options(future.plan = NULL)
[13:20:11.309]                   if (is.na(NA_character_)) 
[13:20:11.309]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.309]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.309]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:11.309]                   {
[13:20:11.309]                     future <- SequentialFuture(..., envir = envir)
[13:20:11.309]                     if (!future$lazy) 
[13:20:11.309]                       future <- run(future)
[13:20:11.309]                     invisible(future)
[13:20:11.309]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.309]                 }
[13:20:11.309]             }
[13:20:11.309]         }
[13:20:11.309]     })
[13:20:11.309]     if (TRUE) {
[13:20:11.309]         base::sink(type = "output", split = FALSE)
[13:20:11.309]         if (TRUE) {
[13:20:11.309]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.309]         }
[13:20:11.309]         else {
[13:20:11.309]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.309]         }
[13:20:11.309]         base::close(...future.stdout)
[13:20:11.309]         ...future.stdout <- NULL
[13:20:11.309]     }
[13:20:11.309]     ...future.result$conditions <- ...future.conditions
[13:20:11.309]     ...future.result$finished <- base::Sys.time()
[13:20:11.309]     ...future.result
[13:20:11.309] }
[13:20:11.311] plan(): Setting new future strategy stack:
[13:20:11.311] List of future strategies:
[13:20:11.311] 1. sequential:
[13:20:11.311]    - args: function (..., envir = parent.frame())
[13:20:11.311]    - tweaked: FALSE
[13:20:11.311]    - call: NULL
[13:20:11.311] plan(): nbrOfWorkers() = 1
[13:20:11.312] plan(): Setting new future strategy stack:
[13:20:11.312] List of future strategies:
[13:20:11.312] 1. sequential:
[13:20:11.312]    - args: function (..., envir = parent.frame())
[13:20:11.312]    - tweaked: FALSE
[13:20:11.312]    - call: plan(strategy)
[13:20:11.312] plan(): nbrOfWorkers() = 1
[13:20:11.312] SequentialFuture started (and completed)
[13:20:11.312] - Launch lazy future ... done
[13:20:11.313] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[13:20:11.314] plan(): Setting new future strategy stack:
[13:20:11.314] List of future strategies:
[13:20:11.314] 1. multicore:
[13:20:11.314]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.314]    - tweaked: FALSE
[13:20:11.314]    - call: plan(strategy)
[13:20:11.317] plan(): nbrOfWorkers() = 2
[13:20:11.321] getGlobalsAndPackages() ...
[13:20:11.321] 
[13:20:11.321] - globals: [0] <none>
[13:20:11.321] getGlobalsAndPackages() ... DONE
[13:20:11.322] Packages needed by the future expression (n = 0): <none>
[13:20:11.322] Packages needed by future strategies (n = 0): <none>
[13:20:11.323] {
[13:20:11.323]     {
[13:20:11.323]         {
[13:20:11.323]             ...future.startTime <- base::Sys.time()
[13:20:11.323]             {
[13:20:11.323]                 {
[13:20:11.323]                   {
[13:20:11.323]                     {
[13:20:11.323]                       base::local({
[13:20:11.323]                         has_future <- base::requireNamespace("future", 
[13:20:11.323]                           quietly = TRUE)
[13:20:11.323]                         if (has_future) {
[13:20:11.323]                           ns <- base::getNamespace("future")
[13:20:11.323]                           version <- ns[[".package"]][["version"]]
[13:20:11.323]                           if (is.null(version)) 
[13:20:11.323]                             version <- utils::packageVersion("future")
[13:20:11.323]                         }
[13:20:11.323]                         else {
[13:20:11.323]                           version <- NULL
[13:20:11.323]                         }
[13:20:11.323]                         if (!has_future || version < "1.8.0") {
[13:20:11.323]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.323]                             "", base::R.version$version.string), 
[13:20:11.323]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:11.323]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.323]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.323]                               "release", "version")], collapse = " "), 
[13:20:11.323]                             hostname = base::Sys.info()[["nodename"]])
[13:20:11.323]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.323]                             info)
[13:20:11.323]                           info <- base::paste(info, collapse = "; ")
[13:20:11.323]                           if (!has_future) {
[13:20:11.323]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.323]                               info)
[13:20:11.323]                           }
[13:20:11.323]                           else {
[13:20:11.323]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.323]                               info, version)
[13:20:11.323]                           }
[13:20:11.323]                           base::stop(msg)
[13:20:11.323]                         }
[13:20:11.323]                       })
[13:20:11.323]                     }
[13:20:11.323]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:11.323]                     base::options(mc.cores = 1L)
[13:20:11.323]                   }
[13:20:11.323]                   options(future.plan = NULL)
[13:20:11.323]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.323]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.323]                 }
[13:20:11.323]                 ...future.workdir <- getwd()
[13:20:11.323]             }
[13:20:11.323]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.323]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.323]         }
[13:20:11.323]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.323]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.323]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.323]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.323]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.323]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.323]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.323]             base::names(...future.oldOptions))
[13:20:11.323]     }
[13:20:11.323]     if (FALSE) {
[13:20:11.323]     }
[13:20:11.323]     else {
[13:20:11.323]         if (TRUE) {
[13:20:11.323]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.323]                 open = "w")
[13:20:11.323]         }
[13:20:11.323]         else {
[13:20:11.323]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.323]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.323]         }
[13:20:11.323]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.323]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.323]             base::sink(type = "output", split = FALSE)
[13:20:11.323]             base::close(...future.stdout)
[13:20:11.323]         }, add = TRUE)
[13:20:11.323]     }
[13:20:11.323]     ...future.frame <- base::sys.nframe()
[13:20:11.323]     ...future.conditions <- base::list()
[13:20:11.323]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.323]     if (FALSE) {
[13:20:11.323]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.323]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.323]     }
[13:20:11.323]     ...future.result <- base::tryCatch({
[13:20:11.323]         base::withCallingHandlers({
[13:20:11.323]             ...future.value <- base::withVisible(base::local({
[13:20:11.323]                 withCallingHandlers({
[13:20:11.323]                   42
[13:20:11.323]                 }, immediateCondition = function(cond) {
[13:20:11.323]                   save_rds <- function (object, pathname, ...) 
[13:20:11.323]                   {
[13:20:11.323]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:11.323]                     if (file_test("-f", pathname_tmp)) {
[13:20:11.323]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.323]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:11.323]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.323]                         fi_tmp[["mtime"]])
[13:20:11.323]                     }
[13:20:11.323]                     tryCatch({
[13:20:11.323]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:11.323]                     }, error = function(ex) {
[13:20:11.323]                       msg <- conditionMessage(ex)
[13:20:11.323]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.323]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:11.323]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.323]                         fi_tmp[["mtime"]], msg)
[13:20:11.323]                       ex$message <- msg
[13:20:11.323]                       stop(ex)
[13:20:11.323]                     })
[13:20:11.323]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:11.323]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:11.323]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:11.323]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.323]                       fi <- file.info(pathname)
[13:20:11.323]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:11.323]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.323]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:11.323]                         fi[["size"]], fi[["mtime"]])
[13:20:11.323]                       stop(msg)
[13:20:11.323]                     }
[13:20:11.323]                     invisible(pathname)
[13:20:11.323]                   }
[13:20:11.323]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:11.323]                     rootPath = tempdir()) 
[13:20:11.323]                   {
[13:20:11.323]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:11.323]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:11.323]                       tmpdir = path, fileext = ".rds")
[13:20:11.323]                     save_rds(obj, file)
[13:20:11.323]                   }
[13:20:11.323]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0V86WA/.future/immediateConditions")
[13:20:11.323]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.323]                   {
[13:20:11.323]                     inherits <- base::inherits
[13:20:11.323]                     invokeRestart <- base::invokeRestart
[13:20:11.323]                     is.null <- base::is.null
[13:20:11.323]                     muffled <- FALSE
[13:20:11.323]                     if (inherits(cond, "message")) {
[13:20:11.323]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:11.323]                       if (muffled) 
[13:20:11.323]                         invokeRestart("muffleMessage")
[13:20:11.323]                     }
[13:20:11.323]                     else if (inherits(cond, "warning")) {
[13:20:11.323]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:11.323]                       if (muffled) 
[13:20:11.323]                         invokeRestart("muffleWarning")
[13:20:11.323]                     }
[13:20:11.323]                     else if (inherits(cond, "condition")) {
[13:20:11.323]                       if (!is.null(pattern)) {
[13:20:11.323]                         computeRestarts <- base::computeRestarts
[13:20:11.323]                         grepl <- base::grepl
[13:20:11.323]                         restarts <- computeRestarts(cond)
[13:20:11.323]                         for (restart in restarts) {
[13:20:11.323]                           name <- restart$name
[13:20:11.323]                           if (is.null(name)) 
[13:20:11.323]                             next
[13:20:11.323]                           if (!grepl(pattern, name)) 
[13:20:11.323]                             next
[13:20:11.323]                           invokeRestart(restart)
[13:20:11.323]                           muffled <- TRUE
[13:20:11.323]                           break
[13:20:11.323]                         }
[13:20:11.323]                       }
[13:20:11.323]                     }
[13:20:11.323]                     invisible(muffled)
[13:20:11.323]                   }
[13:20:11.323]                   muffleCondition(cond)
[13:20:11.323]                 })
[13:20:11.323]             }))
[13:20:11.323]             future::FutureResult(value = ...future.value$value, 
[13:20:11.323]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.323]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.323]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.323]                     ...future.globalenv.names))
[13:20:11.323]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.323]         }, condition = base::local({
[13:20:11.323]             c <- base::c
[13:20:11.323]             inherits <- base::inherits
[13:20:11.323]             invokeRestart <- base::invokeRestart
[13:20:11.323]             length <- base::length
[13:20:11.323]             list <- base::list
[13:20:11.323]             seq.int <- base::seq.int
[13:20:11.323]             signalCondition <- base::signalCondition
[13:20:11.323]             sys.calls <- base::sys.calls
[13:20:11.323]             `[[` <- base::`[[`
[13:20:11.323]             `+` <- base::`+`
[13:20:11.323]             `<<-` <- base::`<<-`
[13:20:11.323]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.323]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.323]                   3L)]
[13:20:11.323]             }
[13:20:11.323]             function(cond) {
[13:20:11.323]                 is_error <- inherits(cond, "error")
[13:20:11.323]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.323]                   NULL)
[13:20:11.323]                 if (is_error) {
[13:20:11.323]                   sessionInformation <- function() {
[13:20:11.323]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.323]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.323]                       search = base::search(), system = base::Sys.info())
[13:20:11.323]                   }
[13:20:11.323]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.323]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.323]                     cond$call), session = sessionInformation(), 
[13:20:11.323]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.323]                   signalCondition(cond)
[13:20:11.323]                 }
[13:20:11.323]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.323]                 "immediateCondition"))) {
[13:20:11.323]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.323]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.323]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.323]                   if (TRUE && !signal) {
[13:20:11.323]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.323]                     {
[13:20:11.323]                       inherits <- base::inherits
[13:20:11.323]                       invokeRestart <- base::invokeRestart
[13:20:11.323]                       is.null <- base::is.null
[13:20:11.323]                       muffled <- FALSE
[13:20:11.323]                       if (inherits(cond, "message")) {
[13:20:11.323]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.323]                         if (muffled) 
[13:20:11.323]                           invokeRestart("muffleMessage")
[13:20:11.323]                       }
[13:20:11.323]                       else if (inherits(cond, "warning")) {
[13:20:11.323]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.323]                         if (muffled) 
[13:20:11.323]                           invokeRestart("muffleWarning")
[13:20:11.323]                       }
[13:20:11.323]                       else if (inherits(cond, "condition")) {
[13:20:11.323]                         if (!is.null(pattern)) {
[13:20:11.323]                           computeRestarts <- base::computeRestarts
[13:20:11.323]                           grepl <- base::grepl
[13:20:11.323]                           restarts <- computeRestarts(cond)
[13:20:11.323]                           for (restart in restarts) {
[13:20:11.323]                             name <- restart$name
[13:20:11.323]                             if (is.null(name)) 
[13:20:11.323]                               next
[13:20:11.323]                             if (!grepl(pattern, name)) 
[13:20:11.323]                               next
[13:20:11.323]                             invokeRestart(restart)
[13:20:11.323]                             muffled <- TRUE
[13:20:11.323]                             break
[13:20:11.323]                           }
[13:20:11.323]                         }
[13:20:11.323]                       }
[13:20:11.323]                       invisible(muffled)
[13:20:11.323]                     }
[13:20:11.323]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.323]                   }
[13:20:11.323]                 }
[13:20:11.323]                 else {
[13:20:11.323]                   if (TRUE) {
[13:20:11.323]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.323]                     {
[13:20:11.323]                       inherits <- base::inherits
[13:20:11.323]                       invokeRestart <- base::invokeRestart
[13:20:11.323]                       is.null <- base::is.null
[13:20:11.323]                       muffled <- FALSE
[13:20:11.323]                       if (inherits(cond, "message")) {
[13:20:11.323]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.323]                         if (muffled) 
[13:20:11.323]                           invokeRestart("muffleMessage")
[13:20:11.323]                       }
[13:20:11.323]                       else if (inherits(cond, "warning")) {
[13:20:11.323]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.323]                         if (muffled) 
[13:20:11.323]                           invokeRestart("muffleWarning")
[13:20:11.323]                       }
[13:20:11.323]                       else if (inherits(cond, "condition")) {
[13:20:11.323]                         if (!is.null(pattern)) {
[13:20:11.323]                           computeRestarts <- base::computeRestarts
[13:20:11.323]                           grepl <- base::grepl
[13:20:11.323]                           restarts <- computeRestarts(cond)
[13:20:11.323]                           for (restart in restarts) {
[13:20:11.323]                             name <- restart$name
[13:20:11.323]                             if (is.null(name)) 
[13:20:11.323]                               next
[13:20:11.323]                             if (!grepl(pattern, name)) 
[13:20:11.323]                               next
[13:20:11.323]                             invokeRestart(restart)
[13:20:11.323]                             muffled <- TRUE
[13:20:11.323]                             break
[13:20:11.323]                           }
[13:20:11.323]                         }
[13:20:11.323]                       }
[13:20:11.323]                       invisible(muffled)
[13:20:11.323]                     }
[13:20:11.323]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.323]                   }
[13:20:11.323]                 }
[13:20:11.323]             }
[13:20:11.323]         }))
[13:20:11.323]     }, error = function(ex) {
[13:20:11.323]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.323]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.323]                 ...future.rng), started = ...future.startTime, 
[13:20:11.323]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.323]             version = "1.8"), class = "FutureResult")
[13:20:11.323]     }, finally = {
[13:20:11.323]         if (!identical(...future.workdir, getwd())) 
[13:20:11.323]             setwd(...future.workdir)
[13:20:11.323]         {
[13:20:11.323]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.323]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.323]             }
[13:20:11.323]             base::options(...future.oldOptions)
[13:20:11.323]             if (.Platform$OS.type == "windows") {
[13:20:11.323]                 old_names <- names(...future.oldEnvVars)
[13:20:11.323]                 envs <- base::Sys.getenv()
[13:20:11.323]                 names <- names(envs)
[13:20:11.323]                 common <- intersect(names, old_names)
[13:20:11.323]                 added <- setdiff(names, old_names)
[13:20:11.323]                 removed <- setdiff(old_names, names)
[13:20:11.323]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.323]                   envs[common]]
[13:20:11.323]                 NAMES <- toupper(changed)
[13:20:11.323]                 args <- list()
[13:20:11.323]                 for (kk in seq_along(NAMES)) {
[13:20:11.323]                   name <- changed[[kk]]
[13:20:11.323]                   NAME <- NAMES[[kk]]
[13:20:11.323]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.323]                     next
[13:20:11.323]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.323]                 }
[13:20:11.323]                 NAMES <- toupper(added)
[13:20:11.323]                 for (kk in seq_along(NAMES)) {
[13:20:11.323]                   name <- added[[kk]]
[13:20:11.323]                   NAME <- NAMES[[kk]]
[13:20:11.323]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.323]                     next
[13:20:11.323]                   args[[name]] <- ""
[13:20:11.323]                 }
[13:20:11.323]                 NAMES <- toupper(removed)
[13:20:11.323]                 for (kk in seq_along(NAMES)) {
[13:20:11.323]                   name <- removed[[kk]]
[13:20:11.323]                   NAME <- NAMES[[kk]]
[13:20:11.323]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.323]                     next
[13:20:11.323]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.323]                 }
[13:20:11.323]                 if (length(args) > 0) 
[13:20:11.323]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.323]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.323]             }
[13:20:11.323]             else {
[13:20:11.323]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.323]             }
[13:20:11.323]             {
[13:20:11.323]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.323]                   0L) {
[13:20:11.323]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.323]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.323]                   base::options(opts)
[13:20:11.323]                 }
[13:20:11.323]                 {
[13:20:11.323]                   {
[13:20:11.323]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:11.323]                     NULL
[13:20:11.323]                   }
[13:20:11.323]                   options(future.plan = NULL)
[13:20:11.323]                   if (is.na(NA_character_)) 
[13:20:11.323]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.323]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.323]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:11.323]                     envir = parent.frame()) 
[13:20:11.323]                   {
[13:20:11.323]                     default_workers <- missing(workers)
[13:20:11.323]                     if (is.function(workers)) 
[13:20:11.323]                       workers <- workers()
[13:20:11.323]                     workers <- structure(as.integer(workers), 
[13:20:11.323]                       class = class(workers))
[13:20:11.323]                     stop_if_not(is.finite(workers), workers >= 
[13:20:11.323]                       1L)
[13:20:11.323]                     if ((workers == 1L && !inherits(workers, 
[13:20:11.323]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:11.323]                       if (default_workers) 
[13:20:11.323]                         supportsMulticore(warn = TRUE)
[13:20:11.323]                       return(sequential(..., envir = envir))
[13:20:11.323]                     }
[13:20:11.323]                     oopts <- options(mc.cores = workers)
[13:20:11.323]                     on.exit(options(oopts))
[13:20:11.323]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:11.323]                       envir = envir)
[13:20:11.323]                     if (!future$lazy) 
[13:20:11.323]                       future <- run(future)
[13:20:11.323]                     invisible(future)
[13:20:11.323]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.323]                 }
[13:20:11.323]             }
[13:20:11.323]         }
[13:20:11.323]     })
[13:20:11.323]     if (TRUE) {
[13:20:11.323]         base::sink(type = "output", split = FALSE)
[13:20:11.323]         if (TRUE) {
[13:20:11.323]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.323]         }
[13:20:11.323]         else {
[13:20:11.323]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.323]         }
[13:20:11.323]         base::close(...future.stdout)
[13:20:11.323]         ...future.stdout <- NULL
[13:20:11.323]     }
[13:20:11.323]     ...future.result$conditions <- ...future.conditions
[13:20:11.323]     ...future.result$finished <- base::Sys.time()
[13:20:11.323]     ...future.result
[13:20:11.323] }
[13:20:11.325] requestCore(): workers = 2
[13:20:11.328] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
[13:20:11.328] plan(): Setting new future strategy stack:
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:20:11.329] List of future strategies:
[13:20:11.329] 1. sequential:
[13:20:11.329]    - args: function (..., envir = parent.frame())
[13:20:11.329]    - tweaked: FALSE
[13:20:11.329]    - call: NULL
[13:20:11.335] plan(): nbrOfWorkers() = 1
[13:20:11.337] plan(): Setting new future strategy stack:
[13:20:11.337] List of future strategies:
[13:20:11.337] 1. multicore:
[13:20:11.337]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.337]    - tweaked: FALSE
[13:20:11.337]    - call: plan(strategy)
[13:20:11.343] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.350] getGlobalsAndPackages() ...
[13:20:11.350] Searching for globals...
[13:20:11.350] 
[13:20:11.350] Searching for globals ... DONE
[13:20:11.350] - globals: [0] <none>
[13:20:11.351] getGlobalsAndPackages() ... DONE
[13:20:11.351] run() for ‘Future’ ...
[13:20:11.351] - state: ‘created’
[13:20:11.351] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:11.355] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.355] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:11.355]   - Field: ‘label’
[13:20:11.356]   - Field: ‘local’
[13:20:11.356]   - Field: ‘owner’
[13:20:11.356]   - Field: ‘envir’
[13:20:11.356]   - Field: ‘workers’
[13:20:11.356]   - Field: ‘packages’
[13:20:11.356]   - Field: ‘gc’
[13:20:11.356]   - Field: ‘job’
[13:20:11.356]   - Field: ‘conditions’
[13:20:11.356]   - Field: ‘expr’
[13:20:11.357]   - Field: ‘uuid’
[13:20:11.357]   - Field: ‘seed’
[13:20:11.357]   - Field: ‘version’
[13:20:11.357]   - Field: ‘result’
[13:20:11.357]   - Field: ‘asynchronous’
[13:20:11.357]   - Field: ‘calls’
[13:20:11.357]   - Field: ‘globals’
[13:20:11.357]   - Field: ‘stdout’
[13:20:11.358]   - Field: ‘earlySignal’
[13:20:11.358]   - Field: ‘lazy’
[13:20:11.358]   - Field: ‘state’
[13:20:11.358] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:11.358] - Launch lazy future ...
[13:20:11.358] Packages needed by the future expression (n = 0): <none>
[13:20:11.358] Packages needed by future strategies (n = 0): <none>
[13:20:11.359] {
[13:20:11.359]     {
[13:20:11.359]         {
[13:20:11.359]             ...future.startTime <- base::Sys.time()
[13:20:11.359]             {
[13:20:11.359]                 {
[13:20:11.359]                   {
[13:20:11.359]                     {
[13:20:11.359]                       base::local({
[13:20:11.359]                         has_future <- base::requireNamespace("future", 
[13:20:11.359]                           quietly = TRUE)
[13:20:11.359]                         if (has_future) {
[13:20:11.359]                           ns <- base::getNamespace("future")
[13:20:11.359]                           version <- ns[[".package"]][["version"]]
[13:20:11.359]                           if (is.null(version)) 
[13:20:11.359]                             version <- utils::packageVersion("future")
[13:20:11.359]                         }
[13:20:11.359]                         else {
[13:20:11.359]                           version <- NULL
[13:20:11.359]                         }
[13:20:11.359]                         if (!has_future || version < "1.8.0") {
[13:20:11.359]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.359]                             "", base::R.version$version.string), 
[13:20:11.359]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:11.359]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.359]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.359]                               "release", "version")], collapse = " "), 
[13:20:11.359]                             hostname = base::Sys.info()[["nodename"]])
[13:20:11.359]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.359]                             info)
[13:20:11.359]                           info <- base::paste(info, collapse = "; ")
[13:20:11.359]                           if (!has_future) {
[13:20:11.359]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.359]                               info)
[13:20:11.359]                           }
[13:20:11.359]                           else {
[13:20:11.359]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.359]                               info, version)
[13:20:11.359]                           }
[13:20:11.359]                           base::stop(msg)
[13:20:11.359]                         }
[13:20:11.359]                       })
[13:20:11.359]                     }
[13:20:11.359]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:11.359]                     base::options(mc.cores = 1L)
[13:20:11.359]                   }
[13:20:11.359]                   options(future.plan = NULL)
[13:20:11.359]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.359]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.359]                 }
[13:20:11.359]                 ...future.workdir <- getwd()
[13:20:11.359]             }
[13:20:11.359]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.359]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.359]         }
[13:20:11.359]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.359]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.359]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.359]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.359]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.359]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.359]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.359]             base::names(...future.oldOptions))
[13:20:11.359]     }
[13:20:11.359]     if (FALSE) {
[13:20:11.359]     }
[13:20:11.359]     else {
[13:20:11.359]         if (TRUE) {
[13:20:11.359]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.359]                 open = "w")
[13:20:11.359]         }
[13:20:11.359]         else {
[13:20:11.359]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.359]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.359]         }
[13:20:11.359]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.359]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.359]             base::sink(type = "output", split = FALSE)
[13:20:11.359]             base::close(...future.stdout)
[13:20:11.359]         }, add = TRUE)
[13:20:11.359]     }
[13:20:11.359]     ...future.frame <- base::sys.nframe()
[13:20:11.359]     ...future.conditions <- base::list()
[13:20:11.359]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.359]     if (FALSE) {
[13:20:11.359]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.359]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.359]     }
[13:20:11.359]     ...future.result <- base::tryCatch({
[13:20:11.359]         base::withCallingHandlers({
[13:20:11.359]             ...future.value <- base::withVisible(base::local({
[13:20:11.359]                 withCallingHandlers({
[13:20:11.359]                   42
[13:20:11.359]                 }, immediateCondition = function(cond) {
[13:20:11.359]                   save_rds <- function (object, pathname, ...) 
[13:20:11.359]                   {
[13:20:11.359]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:11.359]                     if (file_test("-f", pathname_tmp)) {
[13:20:11.359]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.359]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:11.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.359]                         fi_tmp[["mtime"]])
[13:20:11.359]                     }
[13:20:11.359]                     tryCatch({
[13:20:11.359]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:11.359]                     }, error = function(ex) {
[13:20:11.359]                       msg <- conditionMessage(ex)
[13:20:11.359]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.359]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:11.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.359]                         fi_tmp[["mtime"]], msg)
[13:20:11.359]                       ex$message <- msg
[13:20:11.359]                       stop(ex)
[13:20:11.359]                     })
[13:20:11.359]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:11.359]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:11.359]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:11.359]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.359]                       fi <- file.info(pathname)
[13:20:11.359]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:11.359]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.359]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:11.359]                         fi[["size"]], fi[["mtime"]])
[13:20:11.359]                       stop(msg)
[13:20:11.359]                     }
[13:20:11.359]                     invisible(pathname)
[13:20:11.359]                   }
[13:20:11.359]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:11.359]                     rootPath = tempdir()) 
[13:20:11.359]                   {
[13:20:11.359]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:11.359]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:11.359]                       tmpdir = path, fileext = ".rds")
[13:20:11.359]                     save_rds(obj, file)
[13:20:11.359]                   }
[13:20:11.359]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0V86WA/.future/immediateConditions")
[13:20:11.359]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.359]                   {
[13:20:11.359]                     inherits <- base::inherits
[13:20:11.359]                     invokeRestart <- base::invokeRestart
[13:20:11.359]                     is.null <- base::is.null
[13:20:11.359]                     muffled <- FALSE
[13:20:11.359]                     if (inherits(cond, "message")) {
[13:20:11.359]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:11.359]                       if (muffled) 
[13:20:11.359]                         invokeRestart("muffleMessage")
[13:20:11.359]                     }
[13:20:11.359]                     else if (inherits(cond, "warning")) {
[13:20:11.359]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:11.359]                       if (muffled) 
[13:20:11.359]                         invokeRestart("muffleWarning")
[13:20:11.359]                     }
[13:20:11.359]                     else if (inherits(cond, "condition")) {
[13:20:11.359]                       if (!is.null(pattern)) {
[13:20:11.359]                         computeRestarts <- base::computeRestarts
[13:20:11.359]                         grepl <- base::grepl
[13:20:11.359]                         restarts <- computeRestarts(cond)
[13:20:11.359]                         for (restart in restarts) {
[13:20:11.359]                           name <- restart$name
[13:20:11.359]                           if (is.null(name)) 
[13:20:11.359]                             next
[13:20:11.359]                           if (!grepl(pattern, name)) 
[13:20:11.359]                             next
[13:20:11.359]                           invokeRestart(restart)
[13:20:11.359]                           muffled <- TRUE
[13:20:11.359]                           break
[13:20:11.359]                         }
[13:20:11.359]                       }
[13:20:11.359]                     }
[13:20:11.359]                     invisible(muffled)
[13:20:11.359]                   }
[13:20:11.359]                   muffleCondition(cond)
[13:20:11.359]                 })
[13:20:11.359]             }))
[13:20:11.359]             future::FutureResult(value = ...future.value$value, 
[13:20:11.359]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.359]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.359]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.359]                     ...future.globalenv.names))
[13:20:11.359]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.359]         }, condition = base::local({
[13:20:11.359]             c <- base::c
[13:20:11.359]             inherits <- base::inherits
[13:20:11.359]             invokeRestart <- base::invokeRestart
[13:20:11.359]             length <- base::length
[13:20:11.359]             list <- base::list
[13:20:11.359]             seq.int <- base::seq.int
[13:20:11.359]             signalCondition <- base::signalCondition
[13:20:11.359]             sys.calls <- base::sys.calls
[13:20:11.359]             `[[` <- base::`[[`
[13:20:11.359]             `+` <- base::`+`
[13:20:11.359]             `<<-` <- base::`<<-`
[13:20:11.359]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.359]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.359]                   3L)]
[13:20:11.359]             }
[13:20:11.359]             function(cond) {
[13:20:11.359]                 is_error <- inherits(cond, "error")
[13:20:11.359]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.359]                   NULL)
[13:20:11.359]                 if (is_error) {
[13:20:11.359]                   sessionInformation <- function() {
[13:20:11.359]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.359]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.359]                       search = base::search(), system = base::Sys.info())
[13:20:11.359]                   }
[13:20:11.359]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.359]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.359]                     cond$call), session = sessionInformation(), 
[13:20:11.359]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.359]                   signalCondition(cond)
[13:20:11.359]                 }
[13:20:11.359]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.359]                 "immediateCondition"))) {
[13:20:11.359]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.359]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.359]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.359]                   if (TRUE && !signal) {
[13:20:11.359]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.359]                     {
[13:20:11.359]                       inherits <- base::inherits
[13:20:11.359]                       invokeRestart <- base::invokeRestart
[13:20:11.359]                       is.null <- base::is.null
[13:20:11.359]                       muffled <- FALSE
[13:20:11.359]                       if (inherits(cond, "message")) {
[13:20:11.359]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.359]                         if (muffled) 
[13:20:11.359]                           invokeRestart("muffleMessage")
[13:20:11.359]                       }
[13:20:11.359]                       else if (inherits(cond, "warning")) {
[13:20:11.359]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.359]                         if (muffled) 
[13:20:11.359]                           invokeRestart("muffleWarning")
[13:20:11.359]                       }
[13:20:11.359]                       else if (inherits(cond, "condition")) {
[13:20:11.359]                         if (!is.null(pattern)) {
[13:20:11.359]                           computeRestarts <- base::computeRestarts
[13:20:11.359]                           grepl <- base::grepl
[13:20:11.359]                           restarts <- computeRestarts(cond)
[13:20:11.359]                           for (restart in restarts) {
[13:20:11.359]                             name <- restart$name
[13:20:11.359]                             if (is.null(name)) 
[13:20:11.359]                               next
[13:20:11.359]                             if (!grepl(pattern, name)) 
[13:20:11.359]                               next
[13:20:11.359]                             invokeRestart(restart)
[13:20:11.359]                             muffled <- TRUE
[13:20:11.359]                             break
[13:20:11.359]                           }
[13:20:11.359]                         }
[13:20:11.359]                       }
[13:20:11.359]                       invisible(muffled)
[13:20:11.359]                     }
[13:20:11.359]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.359]                   }
[13:20:11.359]                 }
[13:20:11.359]                 else {
[13:20:11.359]                   if (TRUE) {
[13:20:11.359]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.359]                     {
[13:20:11.359]                       inherits <- base::inherits
[13:20:11.359]                       invokeRestart <- base::invokeRestart
[13:20:11.359]                       is.null <- base::is.null
[13:20:11.359]                       muffled <- FALSE
[13:20:11.359]                       if (inherits(cond, "message")) {
[13:20:11.359]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.359]                         if (muffled) 
[13:20:11.359]                           invokeRestart("muffleMessage")
[13:20:11.359]                       }
[13:20:11.359]                       else if (inherits(cond, "warning")) {
[13:20:11.359]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.359]                         if (muffled) 
[13:20:11.359]                           invokeRestart("muffleWarning")
[13:20:11.359]                       }
[13:20:11.359]                       else if (inherits(cond, "condition")) {
[13:20:11.359]                         if (!is.null(pattern)) {
[13:20:11.359]                           computeRestarts <- base::computeRestarts
[13:20:11.359]                           grepl <- base::grepl
[13:20:11.359]                           restarts <- computeRestarts(cond)
[13:20:11.359]                           for (restart in restarts) {
[13:20:11.359]                             name <- restart$name
[13:20:11.359]                             if (is.null(name)) 
[13:20:11.359]                               next
[13:20:11.359]                             if (!grepl(pattern, name)) 
[13:20:11.359]                               next
[13:20:11.359]                             invokeRestart(restart)
[13:20:11.359]                             muffled <- TRUE
[13:20:11.359]                             break
[13:20:11.359]                           }
[13:20:11.359]                         }
[13:20:11.359]                       }
[13:20:11.359]                       invisible(muffled)
[13:20:11.359]                     }
[13:20:11.359]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.359]                   }
[13:20:11.359]                 }
[13:20:11.359]             }
[13:20:11.359]         }))
[13:20:11.359]     }, error = function(ex) {
[13:20:11.359]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.359]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.359]                 ...future.rng), started = ...future.startTime, 
[13:20:11.359]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.359]             version = "1.8"), class = "FutureResult")
[13:20:11.359]     }, finally = {
[13:20:11.359]         if (!identical(...future.workdir, getwd())) 
[13:20:11.359]             setwd(...future.workdir)
[13:20:11.359]         {
[13:20:11.359]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.359]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.359]             }
[13:20:11.359]             base::options(...future.oldOptions)
[13:20:11.359]             if (.Platform$OS.type == "windows") {
[13:20:11.359]                 old_names <- names(...future.oldEnvVars)
[13:20:11.359]                 envs <- base::Sys.getenv()
[13:20:11.359]                 names <- names(envs)
[13:20:11.359]                 common <- intersect(names, old_names)
[13:20:11.359]                 added <- setdiff(names, old_names)
[13:20:11.359]                 removed <- setdiff(old_names, names)
[13:20:11.359]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.359]                   envs[common]]
[13:20:11.359]                 NAMES <- toupper(changed)
[13:20:11.359]                 args <- list()
[13:20:11.359]                 for (kk in seq_along(NAMES)) {
[13:20:11.359]                   name <- changed[[kk]]
[13:20:11.359]                   NAME <- NAMES[[kk]]
[13:20:11.359]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.359]                     next
[13:20:11.359]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.359]                 }
[13:20:11.359]                 NAMES <- toupper(added)
[13:20:11.359]                 for (kk in seq_along(NAMES)) {
[13:20:11.359]                   name <- added[[kk]]
[13:20:11.359]                   NAME <- NAMES[[kk]]
[13:20:11.359]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.359]                     next
[13:20:11.359]                   args[[name]] <- ""
[13:20:11.359]                 }
[13:20:11.359]                 NAMES <- toupper(removed)
[13:20:11.359]                 for (kk in seq_along(NAMES)) {
[13:20:11.359]                   name <- removed[[kk]]
[13:20:11.359]                   NAME <- NAMES[[kk]]
[13:20:11.359]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.359]                     next
[13:20:11.359]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.359]                 }
[13:20:11.359]                 if (length(args) > 0) 
[13:20:11.359]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.359]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.359]             }
[13:20:11.359]             else {
[13:20:11.359]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.359]             }
[13:20:11.359]             {
[13:20:11.359]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.359]                   0L) {
[13:20:11.359]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.359]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.359]                   base::options(opts)
[13:20:11.359]                 }
[13:20:11.359]                 {
[13:20:11.359]                   {
[13:20:11.359]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:11.359]                     NULL
[13:20:11.359]                   }
[13:20:11.359]                   options(future.plan = NULL)
[13:20:11.359]                   if (is.na(NA_character_)) 
[13:20:11.359]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.359]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.359]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:11.359]                     envir = parent.frame()) 
[13:20:11.359]                   {
[13:20:11.359]                     default_workers <- missing(workers)
[13:20:11.359]                     if (is.function(workers)) 
[13:20:11.359]                       workers <- workers()
[13:20:11.359]                     workers <- structure(as.integer(workers), 
[13:20:11.359]                       class = class(workers))
[13:20:11.359]                     stop_if_not(is.finite(workers), workers >= 
[13:20:11.359]                       1L)
[13:20:11.359]                     if ((workers == 1L && !inherits(workers, 
[13:20:11.359]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:11.359]                       if (default_workers) 
[13:20:11.359]                         supportsMulticore(warn = TRUE)
[13:20:11.359]                       return(sequential(..., envir = envir))
[13:20:11.359]                     }
[13:20:11.359]                     oopts <- options(mc.cores = workers)
[13:20:11.359]                     on.exit(options(oopts))
[13:20:11.359]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:11.359]                       envir = envir)
[13:20:11.359]                     if (!future$lazy) 
[13:20:11.359]                       future <- run(future)
[13:20:11.359]                     invisible(future)
[13:20:11.359]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.359]                 }
[13:20:11.359]             }
[13:20:11.359]         }
[13:20:11.359]     })
[13:20:11.359]     if (TRUE) {
[13:20:11.359]         base::sink(type = "output", split = FALSE)
[13:20:11.359]         if (TRUE) {
[13:20:11.359]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.359]         }
[13:20:11.359]         else {
[13:20:11.359]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.359]         }
[13:20:11.359]         base::close(...future.stdout)
[13:20:11.359]         ...future.stdout <- NULL
[13:20:11.359]     }
[13:20:11.359]     ...future.result$conditions <- ...future.conditions
[13:20:11.359]     ...future.result$finished <- base::Sys.time()
[13:20:11.359]     ...future.result
[13:20:11.359] }
[13:20:11.362] requestCore(): workers = 2
[13:20:11.364] MulticoreFuture started
[13:20:11.364] - Launch lazy future ... done
[13:20:11.364] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:20:11.365] plan(): Setting new future strategy stack:
[13:20:11.365] List of future strategies:
[13:20:11.365] 1. sequential:
[13:20:11.365]    - args: function (..., envir = parent.frame())
[13:20:11.365]    - tweaked: FALSE
[13:20:11.365]    - call: NULL
[13:20:11.366] plan(): nbrOfWorkers() = 1
[13:20:11.368] plan(): Setting new future strategy stack:
[13:20:11.368] List of future strategies:
[13:20:11.368] 1. multicore:
[13:20:11.368]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.368]    - tweaked: FALSE
[13:20:11.368]    - call: plan(strategy)
[13:20:11.373] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.375] getGlobalsAndPackages() ...
[13:20:11.375] Searching for globals...
[13:20:11.376] - globals found: [1] ‘{’
[13:20:11.376] Searching for globals ... DONE
[13:20:11.376] Resolving globals: FALSE
[13:20:11.377] 
[13:20:11.377] 
[13:20:11.377] getGlobalsAndPackages() ... DONE
[13:20:11.377] run() for ‘Future’ ...
[13:20:11.377] - state: ‘created’
[13:20:11.378] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:11.382] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.382] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:11.382]   - Field: ‘label’
[13:20:11.382]   - Field: ‘local’
[13:20:11.382]   - Field: ‘owner’
[13:20:11.382]   - Field: ‘envir’
[13:20:11.383]   - Field: ‘workers’
[13:20:11.383]   - Field: ‘packages’
[13:20:11.383]   - Field: ‘gc’
[13:20:11.383]   - Field: ‘job’
[13:20:11.383]   - Field: ‘conditions’
[13:20:11.383]   - Field: ‘expr’
[13:20:11.383]   - Field: ‘uuid’
[13:20:11.383]   - Field: ‘seed’
[13:20:11.383]   - Field: ‘version’
[13:20:11.384]   - Field: ‘result’
[13:20:11.384]   - Field: ‘asynchronous’
[13:20:11.384]   - Field: ‘calls’
[13:20:11.384]   - Field: ‘globals’
[13:20:11.384]   - Field: ‘stdout’
[13:20:11.384]   - Field: ‘earlySignal’
[13:20:11.384]   - Field: ‘lazy’
[13:20:11.384]   - Field: ‘state’
[13:20:11.384] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:11.385] - Launch lazy future ...
[13:20:11.385] Packages needed by the future expression (n = 0): <none>
[13:20:11.385] Packages needed by future strategies (n = 0): <none>
[13:20:11.386] {
[13:20:11.386]     {
[13:20:11.386]         {
[13:20:11.386]             ...future.startTime <- base::Sys.time()
[13:20:11.386]             {
[13:20:11.386]                 {
[13:20:11.386]                   {
[13:20:11.386]                     {
[13:20:11.386]                       base::local({
[13:20:11.386]                         has_future <- base::requireNamespace("future", 
[13:20:11.386]                           quietly = TRUE)
[13:20:11.386]                         if (has_future) {
[13:20:11.386]                           ns <- base::getNamespace("future")
[13:20:11.386]                           version <- ns[[".package"]][["version"]]
[13:20:11.386]                           if (is.null(version)) 
[13:20:11.386]                             version <- utils::packageVersion("future")
[13:20:11.386]                         }
[13:20:11.386]                         else {
[13:20:11.386]                           version <- NULL
[13:20:11.386]                         }
[13:20:11.386]                         if (!has_future || version < "1.8.0") {
[13:20:11.386]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.386]                             "", base::R.version$version.string), 
[13:20:11.386]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:11.386]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.386]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.386]                               "release", "version")], collapse = " "), 
[13:20:11.386]                             hostname = base::Sys.info()[["nodename"]])
[13:20:11.386]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.386]                             info)
[13:20:11.386]                           info <- base::paste(info, collapse = "; ")
[13:20:11.386]                           if (!has_future) {
[13:20:11.386]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.386]                               info)
[13:20:11.386]                           }
[13:20:11.386]                           else {
[13:20:11.386]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.386]                               info, version)
[13:20:11.386]                           }
[13:20:11.386]                           base::stop(msg)
[13:20:11.386]                         }
[13:20:11.386]                       })
[13:20:11.386]                     }
[13:20:11.386]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:11.386]                     base::options(mc.cores = 1L)
[13:20:11.386]                   }
[13:20:11.386]                   options(future.plan = NULL)
[13:20:11.386]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.386]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.386]                 }
[13:20:11.386]                 ...future.workdir <- getwd()
[13:20:11.386]             }
[13:20:11.386]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.386]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.386]         }
[13:20:11.386]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.386]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.386]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.386]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.386]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.386]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.386]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.386]             base::names(...future.oldOptions))
[13:20:11.386]     }
[13:20:11.386]     if (FALSE) {
[13:20:11.386]     }
[13:20:11.386]     else {
[13:20:11.386]         if (TRUE) {
[13:20:11.386]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.386]                 open = "w")
[13:20:11.386]         }
[13:20:11.386]         else {
[13:20:11.386]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.386]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.386]         }
[13:20:11.386]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.386]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.386]             base::sink(type = "output", split = FALSE)
[13:20:11.386]             base::close(...future.stdout)
[13:20:11.386]         }, add = TRUE)
[13:20:11.386]     }
[13:20:11.386]     ...future.frame <- base::sys.nframe()
[13:20:11.386]     ...future.conditions <- base::list()
[13:20:11.386]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.386]     if (FALSE) {
[13:20:11.386]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.386]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.386]     }
[13:20:11.386]     ...future.result <- base::tryCatch({
[13:20:11.386]         base::withCallingHandlers({
[13:20:11.386]             ...future.value <- base::withVisible(base::local({
[13:20:11.386]                 withCallingHandlers({
[13:20:11.386]                   {
[13:20:11.386]                     42
[13:20:11.386]                   }
[13:20:11.386]                 }, immediateCondition = function(cond) {
[13:20:11.386]                   save_rds <- function (object, pathname, ...) 
[13:20:11.386]                   {
[13:20:11.386]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:11.386]                     if (file_test("-f", pathname_tmp)) {
[13:20:11.386]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.386]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:11.386]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.386]                         fi_tmp[["mtime"]])
[13:20:11.386]                     }
[13:20:11.386]                     tryCatch({
[13:20:11.386]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:11.386]                     }, error = function(ex) {
[13:20:11.386]                       msg <- conditionMessage(ex)
[13:20:11.386]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.386]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:11.386]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.386]                         fi_tmp[["mtime"]], msg)
[13:20:11.386]                       ex$message <- msg
[13:20:11.386]                       stop(ex)
[13:20:11.386]                     })
[13:20:11.386]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:11.386]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:11.386]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:11.386]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.386]                       fi <- file.info(pathname)
[13:20:11.386]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:11.386]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.386]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:11.386]                         fi[["size"]], fi[["mtime"]])
[13:20:11.386]                       stop(msg)
[13:20:11.386]                     }
[13:20:11.386]                     invisible(pathname)
[13:20:11.386]                   }
[13:20:11.386]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:11.386]                     rootPath = tempdir()) 
[13:20:11.386]                   {
[13:20:11.386]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:11.386]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:11.386]                       tmpdir = path, fileext = ".rds")
[13:20:11.386]                     save_rds(obj, file)
[13:20:11.386]                   }
[13:20:11.386]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0V86WA/.future/immediateConditions")
[13:20:11.386]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.386]                   {
[13:20:11.386]                     inherits <- base::inherits
[13:20:11.386]                     invokeRestart <- base::invokeRestart
[13:20:11.386]                     is.null <- base::is.null
[13:20:11.386]                     muffled <- FALSE
[13:20:11.386]                     if (inherits(cond, "message")) {
[13:20:11.386]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:11.386]                       if (muffled) 
[13:20:11.386]                         invokeRestart("muffleMessage")
[13:20:11.386]                     }
[13:20:11.386]                     else if (inherits(cond, "warning")) {
[13:20:11.386]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:11.386]                       if (muffled) 
[13:20:11.386]                         invokeRestart("muffleWarning")
[13:20:11.386]                     }
[13:20:11.386]                     else if (inherits(cond, "condition")) {
[13:20:11.386]                       if (!is.null(pattern)) {
[13:20:11.386]                         computeRestarts <- base::computeRestarts
[13:20:11.386]                         grepl <- base::grepl
[13:20:11.386]                         restarts <- computeRestarts(cond)
[13:20:11.386]                         for (restart in restarts) {
[13:20:11.386]                           name <- restart$name
[13:20:11.386]                           if (is.null(name)) 
[13:20:11.386]                             next
[13:20:11.386]                           if (!grepl(pattern, name)) 
[13:20:11.386]                             next
[13:20:11.386]                           invokeRestart(restart)
[13:20:11.386]                           muffled <- TRUE
[13:20:11.386]                           break
[13:20:11.386]                         }
[13:20:11.386]                       }
[13:20:11.386]                     }
[13:20:11.386]                     invisible(muffled)
[13:20:11.386]                   }
[13:20:11.386]                   muffleCondition(cond)
[13:20:11.386]                 })
[13:20:11.386]             }))
[13:20:11.386]             future::FutureResult(value = ...future.value$value, 
[13:20:11.386]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.386]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.386]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.386]                     ...future.globalenv.names))
[13:20:11.386]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.386]         }, condition = base::local({
[13:20:11.386]             c <- base::c
[13:20:11.386]             inherits <- base::inherits
[13:20:11.386]             invokeRestart <- base::invokeRestart
[13:20:11.386]             length <- base::length
[13:20:11.386]             list <- base::list
[13:20:11.386]             seq.int <- base::seq.int
[13:20:11.386]             signalCondition <- base::signalCondition
[13:20:11.386]             sys.calls <- base::sys.calls
[13:20:11.386]             `[[` <- base::`[[`
[13:20:11.386]             `+` <- base::`+`
[13:20:11.386]             `<<-` <- base::`<<-`
[13:20:11.386]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.386]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.386]                   3L)]
[13:20:11.386]             }
[13:20:11.386]             function(cond) {
[13:20:11.386]                 is_error <- inherits(cond, "error")
[13:20:11.386]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.386]                   NULL)
[13:20:11.386]                 if (is_error) {
[13:20:11.386]                   sessionInformation <- function() {
[13:20:11.386]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.386]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.386]                       search = base::search(), system = base::Sys.info())
[13:20:11.386]                   }
[13:20:11.386]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.386]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.386]                     cond$call), session = sessionInformation(), 
[13:20:11.386]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.386]                   signalCondition(cond)
[13:20:11.386]                 }
[13:20:11.386]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.386]                 "immediateCondition"))) {
[13:20:11.386]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.386]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.386]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.386]                   if (TRUE && !signal) {
[13:20:11.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.386]                     {
[13:20:11.386]                       inherits <- base::inherits
[13:20:11.386]                       invokeRestart <- base::invokeRestart
[13:20:11.386]                       is.null <- base::is.null
[13:20:11.386]                       muffled <- FALSE
[13:20:11.386]                       if (inherits(cond, "message")) {
[13:20:11.386]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.386]                         if (muffled) 
[13:20:11.386]                           invokeRestart("muffleMessage")
[13:20:11.386]                       }
[13:20:11.386]                       else if (inherits(cond, "warning")) {
[13:20:11.386]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.386]                         if (muffled) 
[13:20:11.386]                           invokeRestart("muffleWarning")
[13:20:11.386]                       }
[13:20:11.386]                       else if (inherits(cond, "condition")) {
[13:20:11.386]                         if (!is.null(pattern)) {
[13:20:11.386]                           computeRestarts <- base::computeRestarts
[13:20:11.386]                           grepl <- base::grepl
[13:20:11.386]                           restarts <- computeRestarts(cond)
[13:20:11.386]                           for (restart in restarts) {
[13:20:11.386]                             name <- restart$name
[13:20:11.386]                             if (is.null(name)) 
[13:20:11.386]                               next
[13:20:11.386]                             if (!grepl(pattern, name)) 
[13:20:11.386]                               next
[13:20:11.386]                             invokeRestart(restart)
[13:20:11.386]                             muffled <- TRUE
[13:20:11.386]                             break
[13:20:11.386]                           }
[13:20:11.386]                         }
[13:20:11.386]                       }
[13:20:11.386]                       invisible(muffled)
[13:20:11.386]                     }
[13:20:11.386]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.386]                   }
[13:20:11.386]                 }
[13:20:11.386]                 else {
[13:20:11.386]                   if (TRUE) {
[13:20:11.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.386]                     {
[13:20:11.386]                       inherits <- base::inherits
[13:20:11.386]                       invokeRestart <- base::invokeRestart
[13:20:11.386]                       is.null <- base::is.null
[13:20:11.386]                       muffled <- FALSE
[13:20:11.386]                       if (inherits(cond, "message")) {
[13:20:11.386]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.386]                         if (muffled) 
[13:20:11.386]                           invokeRestart("muffleMessage")
[13:20:11.386]                       }
[13:20:11.386]                       else if (inherits(cond, "warning")) {
[13:20:11.386]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.386]                         if (muffled) 
[13:20:11.386]                           invokeRestart("muffleWarning")
[13:20:11.386]                       }
[13:20:11.386]                       else if (inherits(cond, "condition")) {
[13:20:11.386]                         if (!is.null(pattern)) {
[13:20:11.386]                           computeRestarts <- base::computeRestarts
[13:20:11.386]                           grepl <- base::grepl
[13:20:11.386]                           restarts <- computeRestarts(cond)
[13:20:11.386]                           for (restart in restarts) {
[13:20:11.386]                             name <- restart$name
[13:20:11.386]                             if (is.null(name)) 
[13:20:11.386]                               next
[13:20:11.386]                             if (!grepl(pattern, name)) 
[13:20:11.386]                               next
[13:20:11.386]                             invokeRestart(restart)
[13:20:11.386]                             muffled <- TRUE
[13:20:11.386]                             break
[13:20:11.386]                           }
[13:20:11.386]                         }
[13:20:11.386]                       }
[13:20:11.386]                       invisible(muffled)
[13:20:11.386]                     }
[13:20:11.386]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.386]                   }
[13:20:11.386]                 }
[13:20:11.386]             }
[13:20:11.386]         }))
[13:20:11.386]     }, error = function(ex) {
[13:20:11.386]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.386]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.386]                 ...future.rng), started = ...future.startTime, 
[13:20:11.386]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.386]             version = "1.8"), class = "FutureResult")
[13:20:11.386]     }, finally = {
[13:20:11.386]         if (!identical(...future.workdir, getwd())) 
[13:20:11.386]             setwd(...future.workdir)
[13:20:11.386]         {
[13:20:11.386]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.386]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.386]             }
[13:20:11.386]             base::options(...future.oldOptions)
[13:20:11.386]             if (.Platform$OS.type == "windows") {
[13:20:11.386]                 old_names <- names(...future.oldEnvVars)
[13:20:11.386]                 envs <- base::Sys.getenv()
[13:20:11.386]                 names <- names(envs)
[13:20:11.386]                 common <- intersect(names, old_names)
[13:20:11.386]                 added <- setdiff(names, old_names)
[13:20:11.386]                 removed <- setdiff(old_names, names)
[13:20:11.386]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.386]                   envs[common]]
[13:20:11.386]                 NAMES <- toupper(changed)
[13:20:11.386]                 args <- list()
[13:20:11.386]                 for (kk in seq_along(NAMES)) {
[13:20:11.386]                   name <- changed[[kk]]
[13:20:11.386]                   NAME <- NAMES[[kk]]
[13:20:11.386]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.386]                     next
[13:20:11.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.386]                 }
[13:20:11.386]                 NAMES <- toupper(added)
[13:20:11.386]                 for (kk in seq_along(NAMES)) {
[13:20:11.386]                   name <- added[[kk]]
[13:20:11.386]                   NAME <- NAMES[[kk]]
[13:20:11.386]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.386]                     next
[13:20:11.386]                   args[[name]] <- ""
[13:20:11.386]                 }
[13:20:11.386]                 NAMES <- toupper(removed)
[13:20:11.386]                 for (kk in seq_along(NAMES)) {
[13:20:11.386]                   name <- removed[[kk]]
[13:20:11.386]                   NAME <- NAMES[[kk]]
[13:20:11.386]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.386]                     next
[13:20:11.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.386]                 }
[13:20:11.386]                 if (length(args) > 0) 
[13:20:11.386]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.386]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.386]             }
[13:20:11.386]             else {
[13:20:11.386]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.386]             }
[13:20:11.386]             {
[13:20:11.386]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.386]                   0L) {
[13:20:11.386]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.386]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.386]                   base::options(opts)
[13:20:11.386]                 }
[13:20:11.386]                 {
[13:20:11.386]                   {
[13:20:11.386]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:11.386]                     NULL
[13:20:11.386]                   }
[13:20:11.386]                   options(future.plan = NULL)
[13:20:11.386]                   if (is.na(NA_character_)) 
[13:20:11.386]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.386]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.386]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:11.386]                     envir = parent.frame()) 
[13:20:11.386]                   {
[13:20:11.386]                     default_workers <- missing(workers)
[13:20:11.386]                     if (is.function(workers)) 
[13:20:11.386]                       workers <- workers()
[13:20:11.386]                     workers <- structure(as.integer(workers), 
[13:20:11.386]                       class = class(workers))
[13:20:11.386]                     stop_if_not(is.finite(workers), workers >= 
[13:20:11.386]                       1L)
[13:20:11.386]                     if ((workers == 1L && !inherits(workers, 
[13:20:11.386]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:11.386]                       if (default_workers) 
[13:20:11.386]                         supportsMulticore(warn = TRUE)
[13:20:11.386]                       return(sequential(..., envir = envir))
[13:20:11.386]                     }
[13:20:11.386]                     oopts <- options(mc.cores = workers)
[13:20:11.386]                     on.exit(options(oopts))
[13:20:11.386]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:11.386]                       envir = envir)
[13:20:11.386]                     if (!future$lazy) 
[13:20:11.386]                       future <- run(future)
[13:20:11.386]                     invisible(future)
[13:20:11.386]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.386]                 }
[13:20:11.386]             }
[13:20:11.386]         }
[13:20:11.386]     })
[13:20:11.386]     if (TRUE) {
[13:20:11.386]         base::sink(type = "output", split = FALSE)
[13:20:11.386]         if (TRUE) {
[13:20:11.386]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.386]         }
[13:20:11.386]         else {
[13:20:11.386]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.386]         }
[13:20:11.386]         base::close(...future.stdout)
[13:20:11.386]         ...future.stdout <- NULL
[13:20:11.386]     }
[13:20:11.386]     ...future.result$conditions <- ...future.conditions
[13:20:11.386]     ...future.result$finished <- base::Sys.time()
[13:20:11.386]     ...future.result
[13:20:11.386] }
[13:20:11.389] requestCore(): workers = 2
[13:20:11.390] MulticoreFuture started
[13:20:11.391] - Launch lazy future ... done
[13:20:11.391] run() for ‘MulticoreFuture’ ... done
[13:20:11.391] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:20:11.392] List of future strategies:
[13:20:11.392] 1. sequential:
[13:20:11.392]    - args: function (..., envir = parent.frame())
[13:20:11.392]    - tweaked: FALSE
[13:20:11.392]    - call: NULL
[13:20:11.392] plan(): nbrOfWorkers() = 1
[13:20:11.394] plan(): Setting new future strategy stack:
[13:20:11.395] List of future strategies:
[13:20:11.395] 1. multicore:
[13:20:11.395]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.395]    - tweaked: FALSE
[13:20:11.395]    - call: plan(strategy)
[13:20:11.399] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.405] getGlobalsAndPackages() ...
[13:20:11.405] 
[13:20:11.405] - globals: [0] <none>
[13:20:11.405] getGlobalsAndPackages() ... DONE
[13:20:11.406] Packages needed by the future expression (n = 0): <none>
[13:20:11.406] Packages needed by future strategies (n = 0): <none>
[13:20:11.406] {
[13:20:11.406]     {
[13:20:11.406]         {
[13:20:11.406]             ...future.startTime <- base::Sys.time()
[13:20:11.406]             {
[13:20:11.406]                 {
[13:20:11.406]                   {
[13:20:11.406]                     {
[13:20:11.406]                       base::local({
[13:20:11.406]                         has_future <- base::requireNamespace("future", 
[13:20:11.406]                           quietly = TRUE)
[13:20:11.406]                         if (has_future) {
[13:20:11.406]                           ns <- base::getNamespace("future")
[13:20:11.406]                           version <- ns[[".package"]][["version"]]
[13:20:11.406]                           if (is.null(version)) 
[13:20:11.406]                             version <- utils::packageVersion("future")
[13:20:11.406]                         }
[13:20:11.406]                         else {
[13:20:11.406]                           version <- NULL
[13:20:11.406]                         }
[13:20:11.406]                         if (!has_future || version < "1.8.0") {
[13:20:11.406]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.406]                             "", base::R.version$version.string), 
[13:20:11.406]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:11.406]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.406]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.406]                               "release", "version")], collapse = " "), 
[13:20:11.406]                             hostname = base::Sys.info()[["nodename"]])
[13:20:11.406]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.406]                             info)
[13:20:11.406]                           info <- base::paste(info, collapse = "; ")
[13:20:11.406]                           if (!has_future) {
[13:20:11.406]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.406]                               info)
[13:20:11.406]                           }
[13:20:11.406]                           else {
[13:20:11.406]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.406]                               info, version)
[13:20:11.406]                           }
[13:20:11.406]                           base::stop(msg)
[13:20:11.406]                         }
[13:20:11.406]                       })
[13:20:11.406]                     }
[13:20:11.406]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:11.406]                     base::options(mc.cores = 1L)
[13:20:11.406]                   }
[13:20:11.406]                   options(future.plan = NULL)
[13:20:11.406]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.406]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.406]                 }
[13:20:11.406]                 ...future.workdir <- getwd()
[13:20:11.406]             }
[13:20:11.406]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.406]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.406]         }
[13:20:11.406]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.406]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.406]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.406]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.406]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.406]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.406]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.406]             base::names(...future.oldOptions))
[13:20:11.406]     }
[13:20:11.406]     if (FALSE) {
[13:20:11.406]     }
[13:20:11.406]     else {
[13:20:11.406]         if (TRUE) {
[13:20:11.406]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.406]                 open = "w")
[13:20:11.406]         }
[13:20:11.406]         else {
[13:20:11.406]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.406]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.406]         }
[13:20:11.406]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.406]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.406]             base::sink(type = "output", split = FALSE)
[13:20:11.406]             base::close(...future.stdout)
[13:20:11.406]         }, add = TRUE)
[13:20:11.406]     }
[13:20:11.406]     ...future.frame <- base::sys.nframe()
[13:20:11.406]     ...future.conditions <- base::list()
[13:20:11.406]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.406]     if (FALSE) {
[13:20:11.406]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.406]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.406]     }
[13:20:11.406]     ...future.result <- base::tryCatch({
[13:20:11.406]         base::withCallingHandlers({
[13:20:11.406]             ...future.value <- base::withVisible(base::local({
[13:20:11.406]                 withCallingHandlers({
[13:20:11.406]                   42
[13:20:11.406]                 }, immediateCondition = function(cond) {
[13:20:11.406]                   save_rds <- function (object, pathname, ...) 
[13:20:11.406]                   {
[13:20:11.406]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:11.406]                     if (file_test("-f", pathname_tmp)) {
[13:20:11.406]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.406]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:11.406]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.406]                         fi_tmp[["mtime"]])
[13:20:11.406]                     }
[13:20:11.406]                     tryCatch({
[13:20:11.406]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:11.406]                     }, error = function(ex) {
[13:20:11.406]                       msg <- conditionMessage(ex)
[13:20:11.406]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.406]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:11.406]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.406]                         fi_tmp[["mtime"]], msg)
[13:20:11.406]                       ex$message <- msg
[13:20:11.406]                       stop(ex)
[13:20:11.406]                     })
[13:20:11.406]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:11.406]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:11.406]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:11.406]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.406]                       fi <- file.info(pathname)
[13:20:11.406]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:11.406]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.406]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:11.406]                         fi[["size"]], fi[["mtime"]])
[13:20:11.406]                       stop(msg)
[13:20:11.406]                     }
[13:20:11.406]                     invisible(pathname)
[13:20:11.406]                   }
[13:20:11.406]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:11.406]                     rootPath = tempdir()) 
[13:20:11.406]                   {
[13:20:11.406]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:11.406]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:11.406]                       tmpdir = path, fileext = ".rds")
[13:20:11.406]                     save_rds(obj, file)
[13:20:11.406]                   }
[13:20:11.406]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0V86WA/.future/immediateConditions")
[13:20:11.406]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.406]                   {
[13:20:11.406]                     inherits <- base::inherits
[13:20:11.406]                     invokeRestart <- base::invokeRestart
[13:20:11.406]                     is.null <- base::is.null
[13:20:11.406]                     muffled <- FALSE
[13:20:11.406]                     if (inherits(cond, "message")) {
[13:20:11.406]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:11.406]                       if (muffled) 
[13:20:11.406]                         invokeRestart("muffleMessage")
[13:20:11.406]                     }
[13:20:11.406]                     else if (inherits(cond, "warning")) {
[13:20:11.406]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:11.406]                       if (muffled) 
[13:20:11.406]                         invokeRestart("muffleWarning")
[13:20:11.406]                     }
[13:20:11.406]                     else if (inherits(cond, "condition")) {
[13:20:11.406]                       if (!is.null(pattern)) {
[13:20:11.406]                         computeRestarts <- base::computeRestarts
[13:20:11.406]                         grepl <- base::grepl
[13:20:11.406]                         restarts <- computeRestarts(cond)
[13:20:11.406]                         for (restart in restarts) {
[13:20:11.406]                           name <- restart$name
[13:20:11.406]                           if (is.null(name)) 
[13:20:11.406]                             next
[13:20:11.406]                           if (!grepl(pattern, name)) 
[13:20:11.406]                             next
[13:20:11.406]                           invokeRestart(restart)
[13:20:11.406]                           muffled <- TRUE
[13:20:11.406]                           break
[13:20:11.406]                         }
[13:20:11.406]                       }
[13:20:11.406]                     }
[13:20:11.406]                     invisible(muffled)
[13:20:11.406]                   }
[13:20:11.406]                   muffleCondition(cond)
[13:20:11.406]                 })
[13:20:11.406]             }))
[13:20:11.406]             future::FutureResult(value = ...future.value$value, 
[13:20:11.406]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.406]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.406]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.406]                     ...future.globalenv.names))
[13:20:11.406]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.406]         }, condition = base::local({
[13:20:11.406]             c <- base::c
[13:20:11.406]             inherits <- base::inherits
[13:20:11.406]             invokeRestart <- base::invokeRestart
[13:20:11.406]             length <- base::length
[13:20:11.406]             list <- base::list
[13:20:11.406]             seq.int <- base::seq.int
[13:20:11.406]             signalCondition <- base::signalCondition
[13:20:11.406]             sys.calls <- base::sys.calls
[13:20:11.406]             `[[` <- base::`[[`
[13:20:11.406]             `+` <- base::`+`
[13:20:11.406]             `<<-` <- base::`<<-`
[13:20:11.406]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.406]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.406]                   3L)]
[13:20:11.406]             }
[13:20:11.406]             function(cond) {
[13:20:11.406]                 is_error <- inherits(cond, "error")
[13:20:11.406]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.406]                   NULL)
[13:20:11.406]                 if (is_error) {
[13:20:11.406]                   sessionInformation <- function() {
[13:20:11.406]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.406]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.406]                       search = base::search(), system = base::Sys.info())
[13:20:11.406]                   }
[13:20:11.406]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.406]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.406]                     cond$call), session = sessionInformation(), 
[13:20:11.406]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.406]                   signalCondition(cond)
[13:20:11.406]                 }
[13:20:11.406]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.406]                 "immediateCondition"))) {
[13:20:11.406]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.406]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.406]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.406]                   if (TRUE && !signal) {
[13:20:11.406]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.406]                     {
[13:20:11.406]                       inherits <- base::inherits
[13:20:11.406]                       invokeRestart <- base::invokeRestart
[13:20:11.406]                       is.null <- base::is.null
[13:20:11.406]                       muffled <- FALSE
[13:20:11.406]                       if (inherits(cond, "message")) {
[13:20:11.406]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.406]                         if (muffled) 
[13:20:11.406]                           invokeRestart("muffleMessage")
[13:20:11.406]                       }
[13:20:11.406]                       else if (inherits(cond, "warning")) {
[13:20:11.406]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.406]                         if (muffled) 
[13:20:11.406]                           invokeRestart("muffleWarning")
[13:20:11.406]                       }
[13:20:11.406]                       else if (inherits(cond, "condition")) {
[13:20:11.406]                         if (!is.null(pattern)) {
[13:20:11.406]                           computeRestarts <- base::computeRestarts
[13:20:11.406]                           grepl <- base::grepl
[13:20:11.406]                           restarts <- computeRestarts(cond)
[13:20:11.406]                           for (restart in restarts) {
[13:20:11.406]                             name <- restart$name
[13:20:11.406]                             if (is.null(name)) 
[13:20:11.406]                               next
[13:20:11.406]                             if (!grepl(pattern, name)) 
[13:20:11.406]                               next
[13:20:11.406]                             invokeRestart(restart)
[13:20:11.406]                             muffled <- TRUE
[13:20:11.406]                             break
[13:20:11.406]                           }
[13:20:11.406]                         }
[13:20:11.406]                       }
[13:20:11.406]                       invisible(muffled)
[13:20:11.406]                     }
[13:20:11.406]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.406]                   }
[13:20:11.406]                 }
[13:20:11.406]                 else {
[13:20:11.406]                   if (TRUE) {
[13:20:11.406]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.406]                     {
[13:20:11.406]                       inherits <- base::inherits
[13:20:11.406]                       invokeRestart <- base::invokeRestart
[13:20:11.406]                       is.null <- base::is.null
[13:20:11.406]                       muffled <- FALSE
[13:20:11.406]                       if (inherits(cond, "message")) {
[13:20:11.406]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.406]                         if (muffled) 
[13:20:11.406]                           invokeRestart("muffleMessage")
[13:20:11.406]                       }
[13:20:11.406]                       else if (inherits(cond, "warning")) {
[13:20:11.406]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.406]                         if (muffled) 
[13:20:11.406]                           invokeRestart("muffleWarning")
[13:20:11.406]                       }
[13:20:11.406]                       else if (inherits(cond, "condition")) {
[13:20:11.406]                         if (!is.null(pattern)) {
[13:20:11.406]                           computeRestarts <- base::computeRestarts
[13:20:11.406]                           grepl <- base::grepl
[13:20:11.406]                           restarts <- computeRestarts(cond)
[13:20:11.406]                           for (restart in restarts) {
[13:20:11.406]                             name <- restart$name
[13:20:11.406]                             if (is.null(name)) 
[13:20:11.406]                               next
[13:20:11.406]                             if (!grepl(pattern, name)) 
[13:20:11.406]                               next
[13:20:11.406]                             invokeRestart(restart)
[13:20:11.406]                             muffled <- TRUE
[13:20:11.406]                             break
[13:20:11.406]                           }
[13:20:11.406]                         }
[13:20:11.406]                       }
[13:20:11.406]                       invisible(muffled)
[13:20:11.406]                     }
[13:20:11.406]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.406]                   }
[13:20:11.406]                 }
[13:20:11.406]             }
[13:20:11.406]         }))
[13:20:11.406]     }, error = function(ex) {
[13:20:11.406]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.406]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.406]                 ...future.rng), started = ...future.startTime, 
[13:20:11.406]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.406]             version = "1.8"), class = "FutureResult")
[13:20:11.406]     }, finally = {
[13:20:11.406]         if (!identical(...future.workdir, getwd())) 
[13:20:11.406]             setwd(...future.workdir)
[13:20:11.406]         {
[13:20:11.406]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.406]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.406]             }
[13:20:11.406]             base::options(...future.oldOptions)
[13:20:11.406]             if (.Platform$OS.type == "windows") {
[13:20:11.406]                 old_names <- names(...future.oldEnvVars)
[13:20:11.406]                 envs <- base::Sys.getenv()
[13:20:11.406]                 names <- names(envs)
[13:20:11.406]                 common <- intersect(names, old_names)
[13:20:11.406]                 added <- setdiff(names, old_names)
[13:20:11.406]                 removed <- setdiff(old_names, names)
[13:20:11.406]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.406]                   envs[common]]
[13:20:11.406]                 NAMES <- toupper(changed)
[13:20:11.406]                 args <- list()
[13:20:11.406]                 for (kk in seq_along(NAMES)) {
[13:20:11.406]                   name <- changed[[kk]]
[13:20:11.406]                   NAME <- NAMES[[kk]]
[13:20:11.406]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.406]                     next
[13:20:11.406]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.406]                 }
[13:20:11.406]                 NAMES <- toupper(added)
[13:20:11.406]                 for (kk in seq_along(NAMES)) {
[13:20:11.406]                   name <- added[[kk]]
[13:20:11.406]                   NAME <- NAMES[[kk]]
[13:20:11.406]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.406]                     next
[13:20:11.406]                   args[[name]] <- ""
[13:20:11.406]                 }
[13:20:11.406]                 NAMES <- toupper(removed)
[13:20:11.406]                 for (kk in seq_along(NAMES)) {
[13:20:11.406]                   name <- removed[[kk]]
[13:20:11.406]                   NAME <- NAMES[[kk]]
[13:20:11.406]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.406]                     next
[13:20:11.406]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.406]                 }
[13:20:11.406]                 if (length(args) > 0) 
[13:20:11.406]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.406]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.406]             }
[13:20:11.406]             else {
[13:20:11.406]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.406]             }
[13:20:11.406]             {
[13:20:11.406]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.406]                   0L) {
[13:20:11.406]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.406]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.406]                   base::options(opts)
[13:20:11.406]                 }
[13:20:11.406]                 {
[13:20:11.406]                   {
[13:20:11.406]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:11.406]                     NULL
[13:20:11.406]                   }
[13:20:11.406]                   options(future.plan = NULL)
[13:20:11.406]                   if (is.na(NA_character_)) 
[13:20:11.406]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.406]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.406]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:11.406]                     envir = parent.frame()) 
[13:20:11.406]                   {
[13:20:11.406]                     default_workers <- missing(workers)
[13:20:11.406]                     if (is.function(workers)) 
[13:20:11.406]                       workers <- workers()
[13:20:11.406]                     workers <- structure(as.integer(workers), 
[13:20:11.406]                       class = class(workers))
[13:20:11.406]                     stop_if_not(is.finite(workers), workers >= 
[13:20:11.406]                       1L)
[13:20:11.406]                     if ((workers == 1L && !inherits(workers, 
[13:20:11.406]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:11.406]                       if (default_workers) 
[13:20:11.406]                         supportsMulticore(warn = TRUE)
[13:20:11.406]                       return(sequential(..., envir = envir))
[13:20:11.406]                     }
[13:20:11.406]                     oopts <- options(mc.cores = workers)
[13:20:11.406]                     on.exit(options(oopts))
[13:20:11.406]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:11.406]                       envir = envir)
[13:20:11.406]                     if (!future$lazy) 
[13:20:11.406]                       future <- run(future)
[13:20:11.406]                     invisible(future)
[13:20:11.406]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.406]                 }
[13:20:11.406]             }
[13:20:11.406]         }
[13:20:11.406]     })
[13:20:11.406]     if (TRUE) {
[13:20:11.406]         base::sink(type = "output", split = FALSE)
[13:20:11.406]         if (TRUE) {
[13:20:11.406]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.406]         }
[13:20:11.406]         else {
[13:20:11.406]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.406]         }
[13:20:11.406]         base::close(...future.stdout)
[13:20:11.406]         ...future.stdout <- NULL
[13:20:11.406]     }
[13:20:11.406]     ...future.result$conditions <- ...future.conditions
[13:20:11.406]     ...future.result$finished <- base::Sys.time()
[13:20:11.406]     ...future.result
[13:20:11.406] }
[13:20:11.409] requestCore(): workers = 2
[13:20:11.411] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:20:11.412] plan(): Setting new future strategy stack:
[13:20:11.413] List of future strategies:
[13:20:11.413] 1. sequential:
[13:20:11.413]    - args: function (..., envir = parent.frame())
[13:20:11.413]    - tweaked: FALSE
[13:20:11.413]    - call: NULL
[13:20:11.413] plan(): nbrOfWorkers() = 1
[13:20:11.415] plan(): Setting new future strategy stack:
[13:20:11.415] List of future strategies:
[13:20:11.415] 1. multicore:
[13:20:11.415]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.415]    - tweaked: FALSE
[13:20:11.415]    - call: plan(strategy)
[13:20:11.421] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.422] getGlobalsAndPackages() ...
[13:20:11.423] Searching for globals...
[13:20:11.423] 
[13:20:11.423] Searching for globals ... DONE
[13:20:11.423] - globals: [0] <none>
[13:20:11.423] getGlobalsAndPackages() ... DONE
[13:20:11.424] run() for ‘Future’ ...
[13:20:11.424] - state: ‘created’
[13:20:11.424] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:11.428] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.428] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:11.429]   - Field: ‘label’
[13:20:11.429]   - Field: ‘local’
[13:20:11.429]   - Field: ‘owner’
[13:20:11.429]   - Field: ‘envir’
[13:20:11.429]   - Field: ‘workers’
[13:20:11.429]   - Field: ‘packages’
[13:20:11.429]   - Field: ‘gc’
[13:20:11.429]   - Field: ‘job’
[13:20:11.430]   - Field: ‘conditions’
[13:20:11.430]   - Field: ‘expr’
[13:20:11.430]   - Field: ‘uuid’
[13:20:11.430]   - Field: ‘seed’
[13:20:11.430]   - Field: ‘version’
[13:20:11.430]   - Field: ‘result’
[13:20:11.430]   - Field: ‘asynchronous’
[13:20:11.430]   - Field: ‘calls’
[13:20:11.430]   - Field: ‘globals’
[13:20:11.433]   - Field: ‘stdout’
[13:20:11.434]   - Field: ‘earlySignal’
[13:20:11.434]   - Field: ‘lazy’
[13:20:11.434]   - Field: ‘state’
[13:20:11.434] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:11.434] - Launch lazy future ...
[13:20:11.434] Packages needed by the future expression (n = 0): <none>
[13:20:11.435] Packages needed by future strategies (n = 0): <none>
[13:20:11.436] {
[13:20:11.436]     {
[13:20:11.436]         {
[13:20:11.436]             ...future.startTime <- base::Sys.time()
[13:20:11.436]             {
[13:20:11.436]                 {
[13:20:11.436]                   {
[13:20:11.436]                     {
[13:20:11.436]                       base::local({
[13:20:11.436]                         has_future <- base::requireNamespace("future", 
[13:20:11.436]                           quietly = TRUE)
[13:20:11.436]                         if (has_future) {
[13:20:11.436]                           ns <- base::getNamespace("future")
[13:20:11.436]                           version <- ns[[".package"]][["version"]]
[13:20:11.436]                           if (is.null(version)) 
[13:20:11.436]                             version <- utils::packageVersion("future")
[13:20:11.436]                         }
[13:20:11.436]                         else {
[13:20:11.436]                           version <- NULL
[13:20:11.436]                         }
[13:20:11.436]                         if (!has_future || version < "1.8.0") {
[13:20:11.436]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.436]                             "", base::R.version$version.string), 
[13:20:11.436]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:11.436]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.436]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.436]                               "release", "version")], collapse = " "), 
[13:20:11.436]                             hostname = base::Sys.info()[["nodename"]])
[13:20:11.436]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.436]                             info)
[13:20:11.436]                           info <- base::paste(info, collapse = "; ")
[13:20:11.436]                           if (!has_future) {
[13:20:11.436]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.436]                               info)
[13:20:11.436]                           }
[13:20:11.436]                           else {
[13:20:11.436]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.436]                               info, version)
[13:20:11.436]                           }
[13:20:11.436]                           base::stop(msg)
[13:20:11.436]                         }
[13:20:11.436]                       })
[13:20:11.436]                     }
[13:20:11.436]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:11.436]                     base::options(mc.cores = 1L)
[13:20:11.436]                   }
[13:20:11.436]                   options(future.plan = NULL)
[13:20:11.436]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.436]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.436]                 }
[13:20:11.436]                 ...future.workdir <- getwd()
[13:20:11.436]             }
[13:20:11.436]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.436]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.436]         }
[13:20:11.436]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.436]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.436]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.436]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.436]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.436]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.436]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.436]             base::names(...future.oldOptions))
[13:20:11.436]     }
[13:20:11.436]     if (FALSE) {
[13:20:11.436]     }
[13:20:11.436]     else {
[13:20:11.436]         if (TRUE) {
[13:20:11.436]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.436]                 open = "w")
[13:20:11.436]         }
[13:20:11.436]         else {
[13:20:11.436]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.436]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.436]         }
[13:20:11.436]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.436]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.436]             base::sink(type = "output", split = FALSE)
[13:20:11.436]             base::close(...future.stdout)
[13:20:11.436]         }, add = TRUE)
[13:20:11.436]     }
[13:20:11.436]     ...future.frame <- base::sys.nframe()
[13:20:11.436]     ...future.conditions <- base::list()
[13:20:11.436]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.436]     if (FALSE) {
[13:20:11.436]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.436]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.436]     }
[13:20:11.436]     ...future.result <- base::tryCatch({
[13:20:11.436]         base::withCallingHandlers({
[13:20:11.436]             ...future.value <- base::withVisible(base::local({
[13:20:11.436]                 withCallingHandlers({
[13:20:11.436]                   42
[13:20:11.436]                 }, immediateCondition = function(cond) {
[13:20:11.436]                   save_rds <- function (object, pathname, ...) 
[13:20:11.436]                   {
[13:20:11.436]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:11.436]                     if (file_test("-f", pathname_tmp)) {
[13:20:11.436]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.436]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:11.436]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.436]                         fi_tmp[["mtime"]])
[13:20:11.436]                     }
[13:20:11.436]                     tryCatch({
[13:20:11.436]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:11.436]                     }, error = function(ex) {
[13:20:11.436]                       msg <- conditionMessage(ex)
[13:20:11.436]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.436]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:11.436]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.436]                         fi_tmp[["mtime"]], msg)
[13:20:11.436]                       ex$message <- msg
[13:20:11.436]                       stop(ex)
[13:20:11.436]                     })
[13:20:11.436]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:11.436]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:11.436]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:11.436]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.436]                       fi <- file.info(pathname)
[13:20:11.436]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:11.436]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.436]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:11.436]                         fi[["size"]], fi[["mtime"]])
[13:20:11.436]                       stop(msg)
[13:20:11.436]                     }
[13:20:11.436]                     invisible(pathname)
[13:20:11.436]                   }
[13:20:11.436]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:11.436]                     rootPath = tempdir()) 
[13:20:11.436]                   {
[13:20:11.436]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:11.436]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:11.436]                       tmpdir = path, fileext = ".rds")
[13:20:11.436]                     save_rds(obj, file)
[13:20:11.436]                   }
[13:20:11.436]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0V86WA/.future/immediateConditions")
[13:20:11.436]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.436]                   {
[13:20:11.436]                     inherits <- base::inherits
[13:20:11.436]                     invokeRestart <- base::invokeRestart
[13:20:11.436]                     is.null <- base::is.null
[13:20:11.436]                     muffled <- FALSE
[13:20:11.436]                     if (inherits(cond, "message")) {
[13:20:11.436]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:11.436]                       if (muffled) 
[13:20:11.436]                         invokeRestart("muffleMessage")
[13:20:11.436]                     }
[13:20:11.436]                     else if (inherits(cond, "warning")) {
[13:20:11.436]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:11.436]                       if (muffled) 
[13:20:11.436]                         invokeRestart("muffleWarning")
[13:20:11.436]                     }
[13:20:11.436]                     else if (inherits(cond, "condition")) {
[13:20:11.436]                       if (!is.null(pattern)) {
[13:20:11.436]                         computeRestarts <- base::computeRestarts
[13:20:11.436]                         grepl <- base::grepl
[13:20:11.436]                         restarts <- computeRestarts(cond)
[13:20:11.436]                         for (restart in restarts) {
[13:20:11.436]                           name <- restart$name
[13:20:11.436]                           if (is.null(name)) 
[13:20:11.436]                             next
[13:20:11.436]                           if (!grepl(pattern, name)) 
[13:20:11.436]                             next
[13:20:11.436]                           invokeRestart(restart)
[13:20:11.436]                           muffled <- TRUE
[13:20:11.436]                           break
[13:20:11.436]                         }
[13:20:11.436]                       }
[13:20:11.436]                     }
[13:20:11.436]                     invisible(muffled)
[13:20:11.436]                   }
[13:20:11.436]                   muffleCondition(cond)
[13:20:11.436]                 })
[13:20:11.436]             }))
[13:20:11.436]             future::FutureResult(value = ...future.value$value, 
[13:20:11.436]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.436]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.436]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.436]                     ...future.globalenv.names))
[13:20:11.436]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.436]         }, condition = base::local({
[13:20:11.436]             c <- base::c
[13:20:11.436]             inherits <- base::inherits
[13:20:11.436]             invokeRestart <- base::invokeRestart
[13:20:11.436]             length <- base::length
[13:20:11.436]             list <- base::list
[13:20:11.436]             seq.int <- base::seq.int
[13:20:11.436]             signalCondition <- base::signalCondition
[13:20:11.436]             sys.calls <- base::sys.calls
[13:20:11.436]             `[[` <- base::`[[`
[13:20:11.436]             `+` <- base::`+`
[13:20:11.436]             `<<-` <- base::`<<-`
[13:20:11.436]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.436]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.436]                   3L)]
[13:20:11.436]             }
[13:20:11.436]             function(cond) {
[13:20:11.436]                 is_error <- inherits(cond, "error")
[13:20:11.436]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.436]                   NULL)
[13:20:11.436]                 if (is_error) {
[13:20:11.436]                   sessionInformation <- function() {
[13:20:11.436]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.436]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.436]                       search = base::search(), system = base::Sys.info())
[13:20:11.436]                   }
[13:20:11.436]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.436]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.436]                     cond$call), session = sessionInformation(), 
[13:20:11.436]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.436]                   signalCondition(cond)
[13:20:11.436]                 }
[13:20:11.436]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.436]                 "immediateCondition"))) {
[13:20:11.436]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.436]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.436]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.436]                   if (TRUE && !signal) {
[13:20:11.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.436]                     {
[13:20:11.436]                       inherits <- base::inherits
[13:20:11.436]                       invokeRestart <- base::invokeRestart
[13:20:11.436]                       is.null <- base::is.null
[13:20:11.436]                       muffled <- FALSE
[13:20:11.436]                       if (inherits(cond, "message")) {
[13:20:11.436]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.436]                         if (muffled) 
[13:20:11.436]                           invokeRestart("muffleMessage")
[13:20:11.436]                       }
[13:20:11.436]                       else if (inherits(cond, "warning")) {
[13:20:11.436]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.436]                         if (muffled) 
[13:20:11.436]                           invokeRestart("muffleWarning")
[13:20:11.436]                       }
[13:20:11.436]                       else if (inherits(cond, "condition")) {
[13:20:11.436]                         if (!is.null(pattern)) {
[13:20:11.436]                           computeRestarts <- base::computeRestarts
[13:20:11.436]                           grepl <- base::grepl
[13:20:11.436]                           restarts <- computeRestarts(cond)
[13:20:11.436]                           for (restart in restarts) {
[13:20:11.436]                             name <- restart$name
[13:20:11.436]                             if (is.null(name)) 
[13:20:11.436]                               next
[13:20:11.436]                             if (!grepl(pattern, name)) 
[13:20:11.436]                               next
[13:20:11.436]                             invokeRestart(restart)
[13:20:11.436]                             muffled <- TRUE
[13:20:11.436]                             break
[13:20:11.436]                           }
[13:20:11.436]                         }
[13:20:11.436]                       }
[13:20:11.436]                       invisible(muffled)
[13:20:11.436]                     }
[13:20:11.436]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.436]                   }
[13:20:11.436]                 }
[13:20:11.436]                 else {
[13:20:11.436]                   if (TRUE) {
[13:20:11.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.436]                     {
[13:20:11.436]                       inherits <- base::inherits
[13:20:11.436]                       invokeRestart <- base::invokeRestart
[13:20:11.436]                       is.null <- base::is.null
[13:20:11.436]                       muffled <- FALSE
[13:20:11.436]                       if (inherits(cond, "message")) {
[13:20:11.436]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.436]                         if (muffled) 
[13:20:11.436]                           invokeRestart("muffleMessage")
[13:20:11.436]                       }
[13:20:11.436]                       else if (inherits(cond, "warning")) {
[13:20:11.436]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.436]                         if (muffled) 
[13:20:11.436]                           invokeRestart("muffleWarning")
[13:20:11.436]                       }
[13:20:11.436]                       else if (inherits(cond, "condition")) {
[13:20:11.436]                         if (!is.null(pattern)) {
[13:20:11.436]                           computeRestarts <- base::computeRestarts
[13:20:11.436]                           grepl <- base::grepl
[13:20:11.436]                           restarts <- computeRestarts(cond)
[13:20:11.436]                           for (restart in restarts) {
[13:20:11.436]                             name <- restart$name
[13:20:11.436]                             if (is.null(name)) 
[13:20:11.436]                               next
[13:20:11.436]                             if (!grepl(pattern, name)) 
[13:20:11.436]                               next
[13:20:11.436]                             invokeRestart(restart)
[13:20:11.436]                             muffled <- TRUE
[13:20:11.436]                             break
[13:20:11.436]                           }
[13:20:11.436]                         }
[13:20:11.436]                       }
[13:20:11.436]                       invisible(muffled)
[13:20:11.436]                     }
[13:20:11.436]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.436]                   }
[13:20:11.436]                 }
[13:20:11.436]             }
[13:20:11.436]         }))
[13:20:11.436]     }, error = function(ex) {
[13:20:11.436]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.436]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.436]                 ...future.rng), started = ...future.startTime, 
[13:20:11.436]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.436]             version = "1.8"), class = "FutureResult")
[13:20:11.436]     }, finally = {
[13:20:11.436]         if (!identical(...future.workdir, getwd())) 
[13:20:11.436]             setwd(...future.workdir)
[13:20:11.436]         {
[13:20:11.436]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.436]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.436]             }
[13:20:11.436]             base::options(...future.oldOptions)
[13:20:11.436]             if (.Platform$OS.type == "windows") {
[13:20:11.436]                 old_names <- names(...future.oldEnvVars)
[13:20:11.436]                 envs <- base::Sys.getenv()
[13:20:11.436]                 names <- names(envs)
[13:20:11.436]                 common <- intersect(names, old_names)
[13:20:11.436]                 added <- setdiff(names, old_names)
[13:20:11.436]                 removed <- setdiff(old_names, names)
[13:20:11.436]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.436]                   envs[common]]
[13:20:11.436]                 NAMES <- toupper(changed)
[13:20:11.436]                 args <- list()
[13:20:11.436]                 for (kk in seq_along(NAMES)) {
[13:20:11.436]                   name <- changed[[kk]]
[13:20:11.436]                   NAME <- NAMES[[kk]]
[13:20:11.436]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.436]                     next
[13:20:11.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.436]                 }
[13:20:11.436]                 NAMES <- toupper(added)
[13:20:11.436]                 for (kk in seq_along(NAMES)) {
[13:20:11.436]                   name <- added[[kk]]
[13:20:11.436]                   NAME <- NAMES[[kk]]
[13:20:11.436]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.436]                     next
[13:20:11.436]                   args[[name]] <- ""
[13:20:11.436]                 }
[13:20:11.436]                 NAMES <- toupper(removed)
[13:20:11.436]                 for (kk in seq_along(NAMES)) {
[13:20:11.436]                   name <- removed[[kk]]
[13:20:11.436]                   NAME <- NAMES[[kk]]
[13:20:11.436]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.436]                     next
[13:20:11.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.436]                 }
[13:20:11.436]                 if (length(args) > 0) 
[13:20:11.436]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.436]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.436]             }
[13:20:11.436]             else {
[13:20:11.436]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.436]             }
[13:20:11.436]             {
[13:20:11.436]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.436]                   0L) {
[13:20:11.436]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.436]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.436]                   base::options(opts)
[13:20:11.436]                 }
[13:20:11.436]                 {
[13:20:11.436]                   {
[13:20:11.436]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:11.436]                     NULL
[13:20:11.436]                   }
[13:20:11.436]                   options(future.plan = NULL)
[13:20:11.436]                   if (is.na(NA_character_)) 
[13:20:11.436]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.436]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.436]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:11.436]                     envir = parent.frame()) 
[13:20:11.436]                   {
[13:20:11.436]                     default_workers <- missing(workers)
[13:20:11.436]                     if (is.function(workers)) 
[13:20:11.436]                       workers <- workers()
[13:20:11.436]                     workers <- structure(as.integer(workers), 
[13:20:11.436]                       class = class(workers))
[13:20:11.436]                     stop_if_not(is.finite(workers), workers >= 
[13:20:11.436]                       1L)
[13:20:11.436]                     if ((workers == 1L && !inherits(workers, 
[13:20:11.436]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:11.436]                       if (default_workers) 
[13:20:11.436]                         supportsMulticore(warn = TRUE)
[13:20:11.436]                       return(sequential(..., envir = envir))
[13:20:11.436]                     }
[13:20:11.436]                     oopts <- options(mc.cores = workers)
[13:20:11.436]                     on.exit(options(oopts))
[13:20:11.436]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:11.436]                       envir = envir)
[13:20:11.436]                     if (!future$lazy) 
[13:20:11.436]                       future <- run(future)
[13:20:11.436]                     invisible(future)
[13:20:11.436]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.436]                 }
[13:20:11.436]             }
[13:20:11.436]         }
[13:20:11.436]     })
[13:20:11.436]     if (TRUE) {
[13:20:11.436]         base::sink(type = "output", split = FALSE)
[13:20:11.436]         if (TRUE) {
[13:20:11.436]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.436]         }
[13:20:11.436]         else {
[13:20:11.436]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.436]         }
[13:20:11.436]         base::close(...future.stdout)
[13:20:11.436]         ...future.stdout <- NULL
[13:20:11.436]     }
[13:20:11.436]     ...future.result$conditions <- ...future.conditions
[13:20:11.436]     ...future.result$finished <- base::Sys.time()
[13:20:11.436]     ...future.result
[13:20:11.436] }
[13:20:11.438] requestCore(): workers = 2
[13:20:11.440] MulticoreFuture started
[13:20:11.441] - Launch lazy future ... done
[13:20:11.441] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
[13:20:11.442] plan(): Setting new future strategy stack:
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:20:11.442] List of future strategies:
[13:20:11.442] 1. sequential:
[13:20:11.442]    - args: function (..., envir = parent.frame())
[13:20:11.442]    - tweaked: FALSE
[13:20:11.442]    - call: NULL
[13:20:11.443] plan(): nbrOfWorkers() = 1
[13:20:11.445] plan(): Setting new future strategy stack:
[13:20:11.445] List of future strategies:
[13:20:11.445] 1. multicore:
[13:20:11.445]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.445]    - tweaked: FALSE
[13:20:11.445]    - call: plan(strategy)
[13:20:11.451] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.453] getGlobalsAndPackages() ...
[13:20:11.453] Searching for globals...
[13:20:11.454] - globals found: [1] ‘{’
[13:20:11.454] Searching for globals ... DONE
[13:20:11.455] Resolving globals: FALSE
[13:20:11.455] 
[13:20:11.455] 
[13:20:11.455] getGlobalsAndPackages() ... DONE
[13:20:11.456] run() for ‘Future’ ...
[13:20:11.456] - state: ‘created’
[13:20:11.456] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:11.460] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:11.460] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:11.461]   - Field: ‘label’
[13:20:11.461]   - Field: ‘local’
[13:20:11.461]   - Field: ‘owner’
[13:20:11.461]   - Field: ‘envir’
[13:20:11.461]   - Field: ‘workers’
[13:20:11.461]   - Field: ‘packages’
[13:20:11.461]   - Field: ‘gc’
[13:20:11.462]   - Field: ‘job’
[13:20:11.462]   - Field: ‘conditions’
[13:20:11.462]   - Field: ‘expr’
[13:20:11.462]   - Field: ‘uuid’
[13:20:11.462]   - Field: ‘seed’
[13:20:11.462]   - Field: ‘version’
[13:20:11.462]   - Field: ‘result’
[13:20:11.462]   - Field: ‘asynchronous’
[13:20:11.462]   - Field: ‘calls’
[13:20:11.463]   - Field: ‘globals’
[13:20:11.463]   - Field: ‘stdout’
[13:20:11.463]   - Field: ‘earlySignal’
[13:20:11.463]   - Field: ‘lazy’
[13:20:11.463]   - Field: ‘state’
[13:20:11.463] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:11.463] - Launch lazy future ...
[13:20:11.464] Packages needed by the future expression (n = 0): <none>
[13:20:11.464] Packages needed by future strategies (n = 0): <none>
[13:20:11.465] {
[13:20:11.465]     {
[13:20:11.465]         {
[13:20:11.465]             ...future.startTime <- base::Sys.time()
[13:20:11.465]             {
[13:20:11.465]                 {
[13:20:11.465]                   {
[13:20:11.465]                     {
[13:20:11.465]                       base::local({
[13:20:11.465]                         has_future <- base::requireNamespace("future", 
[13:20:11.465]                           quietly = TRUE)
[13:20:11.465]                         if (has_future) {
[13:20:11.465]                           ns <- base::getNamespace("future")
[13:20:11.465]                           version <- ns[[".package"]][["version"]]
[13:20:11.465]                           if (is.null(version)) 
[13:20:11.465]                             version <- utils::packageVersion("future")
[13:20:11.465]                         }
[13:20:11.465]                         else {
[13:20:11.465]                           version <- NULL
[13:20:11.465]                         }
[13:20:11.465]                         if (!has_future || version < "1.8.0") {
[13:20:11.465]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:11.465]                             "", base::R.version$version.string), 
[13:20:11.465]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:11.465]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:11.465]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:11.465]                               "release", "version")], collapse = " "), 
[13:20:11.465]                             hostname = base::Sys.info()[["nodename"]])
[13:20:11.465]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:11.465]                             info)
[13:20:11.465]                           info <- base::paste(info, collapse = "; ")
[13:20:11.465]                           if (!has_future) {
[13:20:11.465]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:11.465]                               info)
[13:20:11.465]                           }
[13:20:11.465]                           else {
[13:20:11.465]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:11.465]                               info, version)
[13:20:11.465]                           }
[13:20:11.465]                           base::stop(msg)
[13:20:11.465]                         }
[13:20:11.465]                       })
[13:20:11.465]                     }
[13:20:11.465]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:11.465]                     base::options(mc.cores = 1L)
[13:20:11.465]                   }
[13:20:11.465]                   options(future.plan = NULL)
[13:20:11.465]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.465]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:11.465]                 }
[13:20:11.465]                 ...future.workdir <- getwd()
[13:20:11.465]             }
[13:20:11.465]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:11.465]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:11.465]         }
[13:20:11.465]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:11.465]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:11.465]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:11.465]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:11.465]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:11.465]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:11.465]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:11.465]             base::names(...future.oldOptions))
[13:20:11.465]     }
[13:20:11.465]     if (FALSE) {
[13:20:11.465]     }
[13:20:11.465]     else {
[13:20:11.465]         if (TRUE) {
[13:20:11.465]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:11.465]                 open = "w")
[13:20:11.465]         }
[13:20:11.465]         else {
[13:20:11.465]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:11.465]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:11.465]         }
[13:20:11.465]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:11.465]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:11.465]             base::sink(type = "output", split = FALSE)
[13:20:11.465]             base::close(...future.stdout)
[13:20:11.465]         }, add = TRUE)
[13:20:11.465]     }
[13:20:11.465]     ...future.frame <- base::sys.nframe()
[13:20:11.465]     ...future.conditions <- base::list()
[13:20:11.465]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:11.465]     if (FALSE) {
[13:20:11.465]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:11.465]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:11.465]     }
[13:20:11.465]     ...future.result <- base::tryCatch({
[13:20:11.465]         base::withCallingHandlers({
[13:20:11.465]             ...future.value <- base::withVisible(base::local({
[13:20:11.465]                 withCallingHandlers({
[13:20:11.465]                   {
[13:20:11.465]                     42
[13:20:11.465]                   }
[13:20:11.465]                 }, immediateCondition = function(cond) {
[13:20:11.465]                   save_rds <- function (object, pathname, ...) 
[13:20:11.465]                   {
[13:20:11.465]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:11.465]                     if (file_test("-f", pathname_tmp)) {
[13:20:11.465]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.465]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:11.465]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.465]                         fi_tmp[["mtime"]])
[13:20:11.465]                     }
[13:20:11.465]                     tryCatch({
[13:20:11.465]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:11.465]                     }, error = function(ex) {
[13:20:11.465]                       msg <- conditionMessage(ex)
[13:20:11.465]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.465]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:11.465]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.465]                         fi_tmp[["mtime"]], msg)
[13:20:11.465]                       ex$message <- msg
[13:20:11.465]                       stop(ex)
[13:20:11.465]                     })
[13:20:11.465]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:11.465]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:11.465]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:11.465]                       fi_tmp <- file.info(pathname_tmp)
[13:20:11.465]                       fi <- file.info(pathname)
[13:20:11.465]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:11.465]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:11.465]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:11.465]                         fi[["size"]], fi[["mtime"]])
[13:20:11.465]                       stop(msg)
[13:20:11.465]                     }
[13:20:11.465]                     invisible(pathname)
[13:20:11.465]                   }
[13:20:11.465]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:11.465]                     rootPath = tempdir()) 
[13:20:11.465]                   {
[13:20:11.465]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:11.465]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:11.465]                       tmpdir = path, fileext = ".rds")
[13:20:11.465]                     save_rds(obj, file)
[13:20:11.465]                   }
[13:20:11.465]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0V86WA/.future/immediateConditions")
[13:20:11.465]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.465]                   {
[13:20:11.465]                     inherits <- base::inherits
[13:20:11.465]                     invokeRestart <- base::invokeRestart
[13:20:11.465]                     is.null <- base::is.null
[13:20:11.465]                     muffled <- FALSE
[13:20:11.465]                     if (inherits(cond, "message")) {
[13:20:11.465]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:11.465]                       if (muffled) 
[13:20:11.465]                         invokeRestart("muffleMessage")
[13:20:11.465]                     }
[13:20:11.465]                     else if (inherits(cond, "warning")) {
[13:20:11.465]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:11.465]                       if (muffled) 
[13:20:11.465]                         invokeRestart("muffleWarning")
[13:20:11.465]                     }
[13:20:11.465]                     else if (inherits(cond, "condition")) {
[13:20:11.465]                       if (!is.null(pattern)) {
[13:20:11.465]                         computeRestarts <- base::computeRestarts
[13:20:11.465]                         grepl <- base::grepl
[13:20:11.465]                         restarts <- computeRestarts(cond)
[13:20:11.465]                         for (restart in restarts) {
[13:20:11.465]                           name <- restart$name
[13:20:11.465]                           if (is.null(name)) 
[13:20:11.465]                             next
[13:20:11.465]                           if (!grepl(pattern, name)) 
[13:20:11.465]                             next
[13:20:11.465]                           invokeRestart(restart)
[13:20:11.465]                           muffled <- TRUE
[13:20:11.465]                           break
[13:20:11.465]                         }
[13:20:11.465]                       }
[13:20:11.465]                     }
[13:20:11.465]                     invisible(muffled)
[13:20:11.465]                   }
[13:20:11.465]                   muffleCondition(cond)
[13:20:11.465]                 })
[13:20:11.465]             }))
[13:20:11.465]             future::FutureResult(value = ...future.value$value, 
[13:20:11.465]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.465]                   ...future.rng), globalenv = if (FALSE) 
[13:20:11.465]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:11.465]                     ...future.globalenv.names))
[13:20:11.465]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:11.465]         }, condition = base::local({
[13:20:11.465]             c <- base::c
[13:20:11.465]             inherits <- base::inherits
[13:20:11.465]             invokeRestart <- base::invokeRestart
[13:20:11.465]             length <- base::length
[13:20:11.465]             list <- base::list
[13:20:11.465]             seq.int <- base::seq.int
[13:20:11.465]             signalCondition <- base::signalCondition
[13:20:11.465]             sys.calls <- base::sys.calls
[13:20:11.465]             `[[` <- base::`[[`
[13:20:11.465]             `+` <- base::`+`
[13:20:11.465]             `<<-` <- base::`<<-`
[13:20:11.465]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:11.465]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:11.465]                   3L)]
[13:20:11.465]             }
[13:20:11.465]             function(cond) {
[13:20:11.465]                 is_error <- inherits(cond, "error")
[13:20:11.465]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:11.465]                   NULL)
[13:20:11.465]                 if (is_error) {
[13:20:11.465]                   sessionInformation <- function() {
[13:20:11.465]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:11.465]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:11.465]                       search = base::search(), system = base::Sys.info())
[13:20:11.465]                   }
[13:20:11.465]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.465]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:11.465]                     cond$call), session = sessionInformation(), 
[13:20:11.465]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:11.465]                   signalCondition(cond)
[13:20:11.465]                 }
[13:20:11.465]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:11.465]                 "immediateCondition"))) {
[13:20:11.465]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:11.465]                   ...future.conditions[[length(...future.conditions) + 
[13:20:11.465]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:11.465]                   if (TRUE && !signal) {
[13:20:11.465]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.465]                     {
[13:20:11.465]                       inherits <- base::inherits
[13:20:11.465]                       invokeRestart <- base::invokeRestart
[13:20:11.465]                       is.null <- base::is.null
[13:20:11.465]                       muffled <- FALSE
[13:20:11.465]                       if (inherits(cond, "message")) {
[13:20:11.465]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.465]                         if (muffled) 
[13:20:11.465]                           invokeRestart("muffleMessage")
[13:20:11.465]                       }
[13:20:11.465]                       else if (inherits(cond, "warning")) {
[13:20:11.465]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.465]                         if (muffled) 
[13:20:11.465]                           invokeRestart("muffleWarning")
[13:20:11.465]                       }
[13:20:11.465]                       else if (inherits(cond, "condition")) {
[13:20:11.465]                         if (!is.null(pattern)) {
[13:20:11.465]                           computeRestarts <- base::computeRestarts
[13:20:11.465]                           grepl <- base::grepl
[13:20:11.465]                           restarts <- computeRestarts(cond)
[13:20:11.465]                           for (restart in restarts) {
[13:20:11.465]                             name <- restart$name
[13:20:11.465]                             if (is.null(name)) 
[13:20:11.465]                               next
[13:20:11.465]                             if (!grepl(pattern, name)) 
[13:20:11.465]                               next
[13:20:11.465]                             invokeRestart(restart)
[13:20:11.465]                             muffled <- TRUE
[13:20:11.465]                             break
[13:20:11.465]                           }
[13:20:11.465]                         }
[13:20:11.465]                       }
[13:20:11.465]                       invisible(muffled)
[13:20:11.465]                     }
[13:20:11.465]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.465]                   }
[13:20:11.465]                 }
[13:20:11.465]                 else {
[13:20:11.465]                   if (TRUE) {
[13:20:11.465]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:11.465]                     {
[13:20:11.465]                       inherits <- base::inherits
[13:20:11.465]                       invokeRestart <- base::invokeRestart
[13:20:11.465]                       is.null <- base::is.null
[13:20:11.465]                       muffled <- FALSE
[13:20:11.465]                       if (inherits(cond, "message")) {
[13:20:11.465]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:11.465]                         if (muffled) 
[13:20:11.465]                           invokeRestart("muffleMessage")
[13:20:11.465]                       }
[13:20:11.465]                       else if (inherits(cond, "warning")) {
[13:20:11.465]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:11.465]                         if (muffled) 
[13:20:11.465]                           invokeRestart("muffleWarning")
[13:20:11.465]                       }
[13:20:11.465]                       else if (inherits(cond, "condition")) {
[13:20:11.465]                         if (!is.null(pattern)) {
[13:20:11.465]                           computeRestarts <- base::computeRestarts
[13:20:11.465]                           grepl <- base::grepl
[13:20:11.465]                           restarts <- computeRestarts(cond)
[13:20:11.465]                           for (restart in restarts) {
[13:20:11.465]                             name <- restart$name
[13:20:11.465]                             if (is.null(name)) 
[13:20:11.465]                               next
[13:20:11.465]                             if (!grepl(pattern, name)) 
[13:20:11.465]                               next
[13:20:11.465]                             invokeRestart(restart)
[13:20:11.465]                             muffled <- TRUE
[13:20:11.465]                             break
[13:20:11.465]                           }
[13:20:11.465]                         }
[13:20:11.465]                       }
[13:20:11.465]                       invisible(muffled)
[13:20:11.465]                     }
[13:20:11.465]                     muffleCondition(cond, pattern = "^muffle")
[13:20:11.465]                   }
[13:20:11.465]                 }
[13:20:11.465]             }
[13:20:11.465]         }))
[13:20:11.465]     }, error = function(ex) {
[13:20:11.465]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:11.465]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:11.465]                 ...future.rng), started = ...future.startTime, 
[13:20:11.465]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:11.465]             version = "1.8"), class = "FutureResult")
[13:20:11.465]     }, finally = {
[13:20:11.465]         if (!identical(...future.workdir, getwd())) 
[13:20:11.465]             setwd(...future.workdir)
[13:20:11.465]         {
[13:20:11.465]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:11.465]                 ...future.oldOptions$nwarnings <- NULL
[13:20:11.465]             }
[13:20:11.465]             base::options(...future.oldOptions)
[13:20:11.465]             if (.Platform$OS.type == "windows") {
[13:20:11.465]                 old_names <- names(...future.oldEnvVars)
[13:20:11.465]                 envs <- base::Sys.getenv()
[13:20:11.465]                 names <- names(envs)
[13:20:11.465]                 common <- intersect(names, old_names)
[13:20:11.465]                 added <- setdiff(names, old_names)
[13:20:11.465]                 removed <- setdiff(old_names, names)
[13:20:11.465]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:11.465]                   envs[common]]
[13:20:11.465]                 NAMES <- toupper(changed)
[13:20:11.465]                 args <- list()
[13:20:11.465]                 for (kk in seq_along(NAMES)) {
[13:20:11.465]                   name <- changed[[kk]]
[13:20:11.465]                   NAME <- NAMES[[kk]]
[13:20:11.465]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.465]                     next
[13:20:11.465]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.465]                 }
[13:20:11.465]                 NAMES <- toupper(added)
[13:20:11.465]                 for (kk in seq_along(NAMES)) {
[13:20:11.465]                   name <- added[[kk]]
[13:20:11.465]                   NAME <- NAMES[[kk]]
[13:20:11.465]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.465]                     next
[13:20:11.465]                   args[[name]] <- ""
[13:20:11.465]                 }
[13:20:11.465]                 NAMES <- toupper(removed)
[13:20:11.465]                 for (kk in seq_along(NAMES)) {
[13:20:11.465]                   name <- removed[[kk]]
[13:20:11.465]                   NAME <- NAMES[[kk]]
[13:20:11.465]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:11.465]                     next
[13:20:11.465]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:11.465]                 }
[13:20:11.465]                 if (length(args) > 0) 
[13:20:11.465]                   base::do.call(base::Sys.setenv, args = args)
[13:20:11.465]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:11.465]             }
[13:20:11.465]             else {
[13:20:11.465]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:11.465]             }
[13:20:11.465]             {
[13:20:11.465]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:11.465]                   0L) {
[13:20:11.465]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:11.465]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:11.465]                   base::options(opts)
[13:20:11.465]                 }
[13:20:11.465]                 {
[13:20:11.465]                   {
[13:20:11.465]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:11.465]                     NULL
[13:20:11.465]                   }
[13:20:11.465]                   options(future.plan = NULL)
[13:20:11.465]                   if (is.na(NA_character_)) 
[13:20:11.465]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:11.465]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:11.465]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:11.465]                     envir = parent.frame()) 
[13:20:11.465]                   {
[13:20:11.465]                     default_workers <- missing(workers)
[13:20:11.465]                     if (is.function(workers)) 
[13:20:11.465]                       workers <- workers()
[13:20:11.465]                     workers <- structure(as.integer(workers), 
[13:20:11.465]                       class = class(workers))
[13:20:11.465]                     stop_if_not(is.finite(workers), workers >= 
[13:20:11.465]                       1L)
[13:20:11.465]                     if ((workers == 1L && !inherits(workers, 
[13:20:11.465]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:11.465]                       if (default_workers) 
[13:20:11.465]                         supportsMulticore(warn = TRUE)
[13:20:11.465]                       return(sequential(..., envir = envir))
[13:20:11.465]                     }
[13:20:11.465]                     oopts <- options(mc.cores = workers)
[13:20:11.465]                     on.exit(options(oopts))
[13:20:11.465]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:11.465]                       envir = envir)
[13:20:11.465]                     if (!future$lazy) 
[13:20:11.465]                       future <- run(future)
[13:20:11.465]                     invisible(future)
[13:20:11.465]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:11.465]                 }
[13:20:11.465]             }
[13:20:11.465]         }
[13:20:11.465]     })
[13:20:11.465]     if (TRUE) {
[13:20:11.465]         base::sink(type = "output", split = FALSE)
[13:20:11.465]         if (TRUE) {
[13:20:11.465]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:11.465]         }
[13:20:11.465]         else {
[13:20:11.465]             ...future.result["stdout"] <- base::list(NULL)
[13:20:11.465]         }
[13:20:11.465]         base::close(...future.stdout)
[13:20:11.465]         ...future.stdout <- NULL
[13:20:11.465]     }
[13:20:11.465]     ...future.result$conditions <- ...future.conditions
[13:20:11.465]     ...future.result$finished <- base::Sys.time()
[13:20:11.465]     ...future.result
[13:20:11.465] }
[13:20:11.468] requestCore(): workers = 2
[13:20:11.470] MulticoreFuture started
[13:20:11.470] - Launch lazy future ... done
[13:20:11.470] run() for ‘MulticoreFuture’ ... done
[13:20:11.471] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:20:11.471] List of future strategies:
[13:20:11.471] 1. sequential:
[13:20:11.471]    - args: function (..., envir = parent.frame())
[13:20:11.471]    - tweaked: FALSE
[13:20:11.471]    - call: NULL
[13:20:11.472] plan(): nbrOfWorkers() = 1
[13:20:11.474] plan(): Setting new future strategy stack:
[13:20:11.474] List of future strategies:
[13:20:11.474] 1. multicore:
[13:20:11.474]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:11.474]    - tweaked: FALSE
[13:20:11.474]    - call: plan(strategy)
[13:20:11.479] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
- plan('multicore') ... DONE
- plan('multisession') ...
[13:20:11.481] plan(): Setting new future strategy stack:
[13:20:11.482] List of future strategies:
[13:20:11.482] 1. multisession:
[13:20:11.482]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:11.482]    - tweaked: FALSE
[13:20:11.482]    - call: plan(strategy)
[13:20:11.482] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:20:11.482] multisession:
[13:20:11.482] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:11.482] - tweaked: FALSE
[13:20:11.482] - call: plan(strategy)
[13:20:11.489] getGlobalsAndPackages() ...
[13:20:11.489] Not searching for globals
[13:20:11.489] - globals: [0] <none>
[13:20:11.489] getGlobalsAndPackages() ... DONE
[13:20:11.490] [local output] makeClusterPSOCK() ...
[13:20:11.530] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:11.536] [local output] Base port: 11550
[13:20:11.536] [local output] Getting setup options for 2 cluster nodes ...
[13:20:11.536] [local output]  - Node 1 of 2 ...
[13:20:11.537] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:11.537] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0V86WA/worker.rank=1.parallelly.parent=82963.14413220674b.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp0V86WA/worker.rank=1.parallelly.parent=82963.14413220674b.pid")'’
[13:20:11.726] - Possible to infer worker's PID: TRUE
[13:20:11.727] [local output] Rscript port: 11550

[13:20:11.727] [local output]  - Node 2 of 2 ...
[13:20:11.727] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:11.728] [local output] Rscript port: 11550

[13:20:11.728] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:11.728] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:11.729] [local output] Setting up PSOCK nodes in parallel
[13:20:11.729] List of 36
[13:20:11.729]  $ worker          : chr "localhost"
[13:20:11.729]   ..- attr(*, "localhost")= logi TRUE
[13:20:11.729]  $ master          : chr "localhost"
[13:20:11.729]  $ port            : int 11550
[13:20:11.729]  $ connectTimeout  : num 120
[13:20:11.729]  $ timeout         : num 2592000
[13:20:11.729]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:11.729]  $ homogeneous     : logi TRUE
[13:20:11.729]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:11.729]  $ rscript_envs    : NULL
[13:20:11.729]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:11.729]  $ rscript_startup : NULL
[13:20:11.729]  $ rscript_sh      : chr "sh"
[13:20:11.729]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:11.729]  $ methods         : logi TRUE
[13:20:11.729]  $ socketOptions   : chr "no-delay"
[13:20:11.729]  $ useXDR          : logi FALSE
[13:20:11.729]  $ outfile         : chr "/dev/null"
[13:20:11.729]  $ renice          : int NA
[13:20:11.729]  $ rshcmd          : NULL
[13:20:11.729]  $ user            : chr(0) 
[13:20:11.729]  $ revtunnel       : logi FALSE
[13:20:11.729]  $ rshlogfile      : NULL
[13:20:11.729]  $ rshopts         : chr(0) 
[13:20:11.729]  $ rank            : int 1
[13:20:11.729]  $ manual          : logi FALSE
[13:20:11.729]  $ dryrun          : logi FALSE
[13:20:11.729]  $ quiet           : logi FALSE
[13:20:11.729]  $ setup_strategy  : chr "parallel"
[13:20:11.729]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:11.729]  $ pidfile         : chr "/tmp/Rtmp0V86WA/worker.rank=1.parallelly.parent=82963.14413220674b.pid"
[13:20:11.729]  $ rshcmd_label    : NULL
[13:20:11.729]  $ rsh_call        : NULL
[13:20:11.729]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:11.729]  $ localMachine    : logi TRUE
[13:20:11.729]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:11.729]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:11.729]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:11.729]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:11.729]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:11.729]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:11.729]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:11.729]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:11.729]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:11.729]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:11.729]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:11.729]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:11.729]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:11.729]  $ arguments       :List of 28
[13:20:11.729]   ..$ worker          : chr "localhost"
[13:20:11.729]   ..$ master          : NULL
[13:20:11.729]   ..$ port            : int 11550
[13:20:11.729]   ..$ connectTimeout  : num 120
[13:20:11.729]   ..$ timeout         : num 2592000
[13:20:11.729]   ..$ rscript         : NULL
[13:20:11.729]   ..$ homogeneous     : NULL
[13:20:11.729]   ..$ rscript_args    : NULL
[13:20:11.729]   ..$ rscript_envs    : NULL
[13:20:11.729]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:11.729]   ..$ rscript_startup : NULL
[13:20:11.729]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:11.729]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:11.729]   ..$ methods         : logi TRUE
[13:20:11.729]   ..$ socketOptions   : chr "no-delay"
[13:20:11.729]   ..$ useXDR          : logi FALSE
[13:20:11.729]   ..$ outfile         : chr "/dev/null"
[13:20:11.729]   ..$ renice          : int NA
[13:20:11.729]   ..$ rshcmd          : NULL
[13:20:11.729]   ..$ user            : NULL
[13:20:11.729]   ..$ revtunnel       : logi NA
[13:20:11.729]   ..$ rshlogfile      : NULL
[13:20:11.729]   ..$ rshopts         : NULL
[13:20:11.729]   ..$ rank            : int 1
[13:20:11.729]   ..$ manual          : logi FALSE
[13:20:11.729]   ..$ dryrun          : logi FALSE
[13:20:11.729]   ..$ quiet           : logi FALSE
[13:20:11.729]   ..$ setup_strategy  : chr "parallel"
[13:20:11.729]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:11.749] [local output] System call to launch all workers:
[13:20:11.749] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0V86WA/worker.rank=1.parallelly.parent=82963.14413220674b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11550 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:11.749] [local output] Starting PSOCK main server
[13:20:11.750] [local output] Workers launched
[13:20:11.750] [local output] Waiting for workers to connect back
[13:20:11.751]  - [local output] 0 workers out of 2 ready
[13:20:11.998]  - [local output] 0 workers out of 2 ready
[13:20:11.999]  - [local output] 1 workers out of 2 ready
[13:20:12.006]  - [local output] 1 workers out of 2 ready
[13:20:12.007]  - [local output] 2 workers out of 2 ready
[13:20:12.007] [local output] Launching of workers completed
[13:20:12.007] [local output] Collecting session information from workers
[13:20:12.008] [local output]  - Worker #1 of 2
[13:20:12.008] [local output]  - Worker #2 of 2
[13:20:12.009] [local output] makeClusterPSOCK() ... done
[13:20:12.021] Packages needed by the future expression (n = 0): <none>
[13:20:12.021] Packages needed by future strategies (n = 0): <none>
[13:20:12.022] {
[13:20:12.022]     {
[13:20:12.022]         {
[13:20:12.022]             ...future.startTime <- base::Sys.time()
[13:20:12.022]             {
[13:20:12.022]                 {
[13:20:12.022]                   {
[13:20:12.022]                     {
[13:20:12.022]                       base::local({
[13:20:12.022]                         has_future <- base::requireNamespace("future", 
[13:20:12.022]                           quietly = TRUE)
[13:20:12.022]                         if (has_future) {
[13:20:12.022]                           ns <- base::getNamespace("future")
[13:20:12.022]                           version <- ns[[".package"]][["version"]]
[13:20:12.022]                           if (is.null(version)) 
[13:20:12.022]                             version <- utils::packageVersion("future")
[13:20:12.022]                         }
[13:20:12.022]                         else {
[13:20:12.022]                           version <- NULL
[13:20:12.022]                         }
[13:20:12.022]                         if (!has_future || version < "1.8.0") {
[13:20:12.022]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.022]                             "", base::R.version$version.string), 
[13:20:12.022]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.022]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.022]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.022]                               "release", "version")], collapse = " "), 
[13:20:12.022]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.022]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.022]                             info)
[13:20:12.022]                           info <- base::paste(info, collapse = "; ")
[13:20:12.022]                           if (!has_future) {
[13:20:12.022]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.022]                               info)
[13:20:12.022]                           }
[13:20:12.022]                           else {
[13:20:12.022]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.022]                               info, version)
[13:20:12.022]                           }
[13:20:12.022]                           base::stop(msg)
[13:20:12.022]                         }
[13:20:12.022]                       })
[13:20:12.022]                     }
[13:20:12.022]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.022]                     base::options(mc.cores = 1L)
[13:20:12.022]                   }
[13:20:12.022]                   options(future.plan = NULL)
[13:20:12.022]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.022]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.022]                 }
[13:20:12.022]                 ...future.workdir <- getwd()
[13:20:12.022]             }
[13:20:12.022]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.022]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.022]         }
[13:20:12.022]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.022]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.022]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.022]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.022]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.022]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.022]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.022]             base::names(...future.oldOptions))
[13:20:12.022]     }
[13:20:12.022]     if (FALSE) {
[13:20:12.022]     }
[13:20:12.022]     else {
[13:20:12.022]         if (TRUE) {
[13:20:12.022]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.022]                 open = "w")
[13:20:12.022]         }
[13:20:12.022]         else {
[13:20:12.022]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.022]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.022]         }
[13:20:12.022]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.022]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.022]             base::sink(type = "output", split = FALSE)
[13:20:12.022]             base::close(...future.stdout)
[13:20:12.022]         }, add = TRUE)
[13:20:12.022]     }
[13:20:12.022]     ...future.frame <- base::sys.nframe()
[13:20:12.022]     ...future.conditions <- base::list()
[13:20:12.022]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.022]     if (FALSE) {
[13:20:12.022]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.022]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.022]     }
[13:20:12.022]     ...future.result <- base::tryCatch({
[13:20:12.022]         base::withCallingHandlers({
[13:20:12.022]             ...future.value <- base::withVisible(base::local({
[13:20:12.022]                 ...future.makeSendCondition <- local({
[13:20:12.022]                   sendCondition <- NULL
[13:20:12.022]                   function(frame = 1L) {
[13:20:12.022]                     if (is.function(sendCondition)) 
[13:20:12.022]                       return(sendCondition)
[13:20:12.022]                     ns <- getNamespace("parallel")
[13:20:12.022]                     if (exists("sendData", mode = "function", 
[13:20:12.022]                       envir = ns)) {
[13:20:12.022]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.022]                         envir = ns)
[13:20:12.022]                       envir <- sys.frame(frame)
[13:20:12.022]                       master <- NULL
[13:20:12.022]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.022]                         !identical(envir, emptyenv())) {
[13:20:12.022]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.022]                           inherits = FALSE)) {
[13:20:12.022]                           master <- get("master", mode = "list", 
[13:20:12.022]                             envir = envir, inherits = FALSE)
[13:20:12.022]                           if (inherits(master, c("SOCKnode", 
[13:20:12.022]                             "SOCK0node"))) {
[13:20:12.022]                             sendCondition <<- function(cond) {
[13:20:12.022]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.022]                                 success = TRUE)
[13:20:12.022]                               parallel_sendData(master, data)
[13:20:12.022]                             }
[13:20:12.022]                             return(sendCondition)
[13:20:12.022]                           }
[13:20:12.022]                         }
[13:20:12.022]                         frame <- frame + 1L
[13:20:12.022]                         envir <- sys.frame(frame)
[13:20:12.022]                       }
[13:20:12.022]                     }
[13:20:12.022]                     sendCondition <<- function(cond) NULL
[13:20:12.022]                   }
[13:20:12.022]                 })
[13:20:12.022]                 withCallingHandlers({
[13:20:12.022]                   NA
[13:20:12.022]                 }, immediateCondition = function(cond) {
[13:20:12.022]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.022]                   sendCondition(cond)
[13:20:12.022]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.022]                   {
[13:20:12.022]                     inherits <- base::inherits
[13:20:12.022]                     invokeRestart <- base::invokeRestart
[13:20:12.022]                     is.null <- base::is.null
[13:20:12.022]                     muffled <- FALSE
[13:20:12.022]                     if (inherits(cond, "message")) {
[13:20:12.022]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.022]                       if (muffled) 
[13:20:12.022]                         invokeRestart("muffleMessage")
[13:20:12.022]                     }
[13:20:12.022]                     else if (inherits(cond, "warning")) {
[13:20:12.022]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.022]                       if (muffled) 
[13:20:12.022]                         invokeRestart("muffleWarning")
[13:20:12.022]                     }
[13:20:12.022]                     else if (inherits(cond, "condition")) {
[13:20:12.022]                       if (!is.null(pattern)) {
[13:20:12.022]                         computeRestarts <- base::computeRestarts
[13:20:12.022]                         grepl <- base::grepl
[13:20:12.022]                         restarts <- computeRestarts(cond)
[13:20:12.022]                         for (restart in restarts) {
[13:20:12.022]                           name <- restart$name
[13:20:12.022]                           if (is.null(name)) 
[13:20:12.022]                             next
[13:20:12.022]                           if (!grepl(pattern, name)) 
[13:20:12.022]                             next
[13:20:12.022]                           invokeRestart(restart)
[13:20:12.022]                           muffled <- TRUE
[13:20:12.022]                           break
[13:20:12.022]                         }
[13:20:12.022]                       }
[13:20:12.022]                     }
[13:20:12.022]                     invisible(muffled)
[13:20:12.022]                   }
[13:20:12.022]                   muffleCondition(cond)
[13:20:12.022]                 })
[13:20:12.022]             }))
[13:20:12.022]             future::FutureResult(value = ...future.value$value, 
[13:20:12.022]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.022]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.022]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.022]                     ...future.globalenv.names))
[13:20:12.022]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.022]         }, condition = base::local({
[13:20:12.022]             c <- base::c
[13:20:12.022]             inherits <- base::inherits
[13:20:12.022]             invokeRestart <- base::invokeRestart
[13:20:12.022]             length <- base::length
[13:20:12.022]             list <- base::list
[13:20:12.022]             seq.int <- base::seq.int
[13:20:12.022]             signalCondition <- base::signalCondition
[13:20:12.022]             sys.calls <- base::sys.calls
[13:20:12.022]             `[[` <- base::`[[`
[13:20:12.022]             `+` <- base::`+`
[13:20:12.022]             `<<-` <- base::`<<-`
[13:20:12.022]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.022]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.022]                   3L)]
[13:20:12.022]             }
[13:20:12.022]             function(cond) {
[13:20:12.022]                 is_error <- inherits(cond, "error")
[13:20:12.022]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.022]                   NULL)
[13:20:12.022]                 if (is_error) {
[13:20:12.022]                   sessionInformation <- function() {
[13:20:12.022]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.022]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.022]                       search = base::search(), system = base::Sys.info())
[13:20:12.022]                   }
[13:20:12.022]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.022]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.022]                     cond$call), session = sessionInformation(), 
[13:20:12.022]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.022]                   signalCondition(cond)
[13:20:12.022]                 }
[13:20:12.022]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.022]                 "immediateCondition"))) {
[13:20:12.022]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.022]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.022]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.022]                   if (TRUE && !signal) {
[13:20:12.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.022]                     {
[13:20:12.022]                       inherits <- base::inherits
[13:20:12.022]                       invokeRestart <- base::invokeRestart
[13:20:12.022]                       is.null <- base::is.null
[13:20:12.022]                       muffled <- FALSE
[13:20:12.022]                       if (inherits(cond, "message")) {
[13:20:12.022]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.022]                         if (muffled) 
[13:20:12.022]                           invokeRestart("muffleMessage")
[13:20:12.022]                       }
[13:20:12.022]                       else if (inherits(cond, "warning")) {
[13:20:12.022]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.022]                         if (muffled) 
[13:20:12.022]                           invokeRestart("muffleWarning")
[13:20:12.022]                       }
[13:20:12.022]                       else if (inherits(cond, "condition")) {
[13:20:12.022]                         if (!is.null(pattern)) {
[13:20:12.022]                           computeRestarts <- base::computeRestarts
[13:20:12.022]                           grepl <- base::grepl
[13:20:12.022]                           restarts <- computeRestarts(cond)
[13:20:12.022]                           for (restart in restarts) {
[13:20:12.022]                             name <- restart$name
[13:20:12.022]                             if (is.null(name)) 
[13:20:12.022]                               next
[13:20:12.022]                             if (!grepl(pattern, name)) 
[13:20:12.022]                               next
[13:20:12.022]                             invokeRestart(restart)
[13:20:12.022]                             muffled <- TRUE
[13:20:12.022]                             break
[13:20:12.022]                           }
[13:20:12.022]                         }
[13:20:12.022]                       }
[13:20:12.022]                       invisible(muffled)
[13:20:12.022]                     }
[13:20:12.022]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.022]                   }
[13:20:12.022]                 }
[13:20:12.022]                 else {
[13:20:12.022]                   if (TRUE) {
[13:20:12.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.022]                     {
[13:20:12.022]                       inherits <- base::inherits
[13:20:12.022]                       invokeRestart <- base::invokeRestart
[13:20:12.022]                       is.null <- base::is.null
[13:20:12.022]                       muffled <- FALSE
[13:20:12.022]                       if (inherits(cond, "message")) {
[13:20:12.022]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.022]                         if (muffled) 
[13:20:12.022]                           invokeRestart("muffleMessage")
[13:20:12.022]                       }
[13:20:12.022]                       else if (inherits(cond, "warning")) {
[13:20:12.022]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.022]                         if (muffled) 
[13:20:12.022]                           invokeRestart("muffleWarning")
[13:20:12.022]                       }
[13:20:12.022]                       else if (inherits(cond, "condition")) {
[13:20:12.022]                         if (!is.null(pattern)) {
[13:20:12.022]                           computeRestarts <- base::computeRestarts
[13:20:12.022]                           grepl <- base::grepl
[13:20:12.022]                           restarts <- computeRestarts(cond)
[13:20:12.022]                           for (restart in restarts) {
[13:20:12.022]                             name <- restart$name
[13:20:12.022]                             if (is.null(name)) 
[13:20:12.022]                               next
[13:20:12.022]                             if (!grepl(pattern, name)) 
[13:20:12.022]                               next
[13:20:12.022]                             invokeRestart(restart)
[13:20:12.022]                             muffled <- TRUE
[13:20:12.022]                             break
[13:20:12.022]                           }
[13:20:12.022]                         }
[13:20:12.022]                       }
[13:20:12.022]                       invisible(muffled)
[13:20:12.022]                     }
[13:20:12.022]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.022]                   }
[13:20:12.022]                 }
[13:20:12.022]             }
[13:20:12.022]         }))
[13:20:12.022]     }, error = function(ex) {
[13:20:12.022]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.022]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.022]                 ...future.rng), started = ...future.startTime, 
[13:20:12.022]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.022]             version = "1.8"), class = "FutureResult")
[13:20:12.022]     }, finally = {
[13:20:12.022]         if (!identical(...future.workdir, getwd())) 
[13:20:12.022]             setwd(...future.workdir)
[13:20:12.022]         {
[13:20:12.022]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.022]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.022]             }
[13:20:12.022]             base::options(...future.oldOptions)
[13:20:12.022]             if (.Platform$OS.type == "windows") {
[13:20:12.022]                 old_names <- names(...future.oldEnvVars)
[13:20:12.022]                 envs <- base::Sys.getenv()
[13:20:12.022]                 names <- names(envs)
[13:20:12.022]                 common <- intersect(names, old_names)
[13:20:12.022]                 added <- setdiff(names, old_names)
[13:20:12.022]                 removed <- setdiff(old_names, names)
[13:20:12.022]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.022]                   envs[common]]
[13:20:12.022]                 NAMES <- toupper(changed)
[13:20:12.022]                 args <- list()
[13:20:12.022]                 for (kk in seq_along(NAMES)) {
[13:20:12.022]                   name <- changed[[kk]]
[13:20:12.022]                   NAME <- NAMES[[kk]]
[13:20:12.022]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.022]                     next
[13:20:12.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.022]                 }
[13:20:12.022]                 NAMES <- toupper(added)
[13:20:12.022]                 for (kk in seq_along(NAMES)) {
[13:20:12.022]                   name <- added[[kk]]
[13:20:12.022]                   NAME <- NAMES[[kk]]
[13:20:12.022]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.022]                     next
[13:20:12.022]                   args[[name]] <- ""
[13:20:12.022]                 }
[13:20:12.022]                 NAMES <- toupper(removed)
[13:20:12.022]                 for (kk in seq_along(NAMES)) {
[13:20:12.022]                   name <- removed[[kk]]
[13:20:12.022]                   NAME <- NAMES[[kk]]
[13:20:12.022]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.022]                     next
[13:20:12.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.022]                 }
[13:20:12.022]                 if (length(args) > 0) 
[13:20:12.022]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.022]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.022]             }
[13:20:12.022]             else {
[13:20:12.022]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.022]             }
[13:20:12.022]             {
[13:20:12.022]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.022]                   0L) {
[13:20:12.022]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.022]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.022]                   base::options(opts)
[13:20:12.022]                 }
[13:20:12.022]                 {
[13:20:12.022]                   {
[13:20:12.022]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.022]                     NULL
[13:20:12.022]                   }
[13:20:12.022]                   options(future.plan = NULL)
[13:20:12.022]                   if (is.na(NA_character_)) 
[13:20:12.022]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.022]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.022]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.022]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.022]                     envir = parent.frame()) 
[13:20:12.022]                   {
[13:20:12.022]                     if (is.function(workers)) 
[13:20:12.022]                       workers <- workers()
[13:20:12.022]                     workers <- structure(as.integer(workers), 
[13:20:12.022]                       class = class(workers))
[13:20:12.022]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.022]                       workers >= 1)
[13:20:12.022]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.022]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.022]                     }
[13:20:12.022]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.022]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.022]                       envir = envir)
[13:20:12.022]                     if (!future$lazy) 
[13:20:12.022]                       future <- run(future)
[13:20:12.022]                     invisible(future)
[13:20:12.022]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.022]                 }
[13:20:12.022]             }
[13:20:12.022]         }
[13:20:12.022]     })
[13:20:12.022]     if (TRUE) {
[13:20:12.022]         base::sink(type = "output", split = FALSE)
[13:20:12.022]         if (TRUE) {
[13:20:12.022]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.022]         }
[13:20:12.022]         else {
[13:20:12.022]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.022]         }
[13:20:12.022]         base::close(...future.stdout)
[13:20:12.022]         ...future.stdout <- NULL
[13:20:12.022]     }
[13:20:12.022]     ...future.result$conditions <- ...future.conditions
[13:20:12.022]     ...future.result$finished <- base::Sys.time()
[13:20:12.022]     ...future.result
[13:20:12.022] }
[13:20:12.094] MultisessionFuture started
[13:20:12.094] result() for ClusterFuture ...
[13:20:12.095] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.095] - Validating connection of MultisessionFuture
[13:20:12.127] - received message: FutureResult
[13:20:12.127] - Received FutureResult
[13:20:12.127] - Erased future from FutureRegistry
[13:20:12.127] result() for ClusterFuture ...
[13:20:12.127] - result already collected: FutureResult
[13:20:12.127] result() for ClusterFuture ... done
[13:20:12.127] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.128] result() for ClusterFuture ... done
[13:20:12.128] result() for ClusterFuture ...
[13:20:12.128] - result already collected: FutureResult
[13:20:12.128] result() for ClusterFuture ... done
[13:20:12.128] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:20:12.132] plan(): nbrOfWorkers() = 2
[13:20:12.135] getGlobalsAndPackages() ...
[13:20:12.135] 
[13:20:12.135] - globals: [0] <none>
[13:20:12.135] getGlobalsAndPackages() ... DONE
[13:20:12.147] Packages needed by the future expression (n = 0): <none>
[13:20:12.147] Packages needed by future strategies (n = 0): <none>
[13:20:12.148] {
[13:20:12.148]     {
[13:20:12.148]         {
[13:20:12.148]             ...future.startTime <- base::Sys.time()
[13:20:12.148]             {
[13:20:12.148]                 {
[13:20:12.148]                   {
[13:20:12.148]                     {
[13:20:12.148]                       base::local({
[13:20:12.148]                         has_future <- base::requireNamespace("future", 
[13:20:12.148]                           quietly = TRUE)
[13:20:12.148]                         if (has_future) {
[13:20:12.148]                           ns <- base::getNamespace("future")
[13:20:12.148]                           version <- ns[[".package"]][["version"]]
[13:20:12.148]                           if (is.null(version)) 
[13:20:12.148]                             version <- utils::packageVersion("future")
[13:20:12.148]                         }
[13:20:12.148]                         else {
[13:20:12.148]                           version <- NULL
[13:20:12.148]                         }
[13:20:12.148]                         if (!has_future || version < "1.8.0") {
[13:20:12.148]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.148]                             "", base::R.version$version.string), 
[13:20:12.148]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.148]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.148]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.148]                               "release", "version")], collapse = " "), 
[13:20:12.148]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.148]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.148]                             info)
[13:20:12.148]                           info <- base::paste(info, collapse = "; ")
[13:20:12.148]                           if (!has_future) {
[13:20:12.148]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.148]                               info)
[13:20:12.148]                           }
[13:20:12.148]                           else {
[13:20:12.148]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.148]                               info, version)
[13:20:12.148]                           }
[13:20:12.148]                           base::stop(msg)
[13:20:12.148]                         }
[13:20:12.148]                       })
[13:20:12.148]                     }
[13:20:12.148]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.148]                     base::options(mc.cores = 1L)
[13:20:12.148]                   }
[13:20:12.148]                   options(future.plan = NULL)
[13:20:12.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.148]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.148]                 }
[13:20:12.148]                 ...future.workdir <- getwd()
[13:20:12.148]             }
[13:20:12.148]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.148]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.148]         }
[13:20:12.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.148]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.148]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.148]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.148]             base::names(...future.oldOptions))
[13:20:12.148]     }
[13:20:12.148]     if (FALSE) {
[13:20:12.148]     }
[13:20:12.148]     else {
[13:20:12.148]         if (TRUE) {
[13:20:12.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.148]                 open = "w")
[13:20:12.148]         }
[13:20:12.148]         else {
[13:20:12.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.148]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.148]         }
[13:20:12.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.148]             base::sink(type = "output", split = FALSE)
[13:20:12.148]             base::close(...future.stdout)
[13:20:12.148]         }, add = TRUE)
[13:20:12.148]     }
[13:20:12.148]     ...future.frame <- base::sys.nframe()
[13:20:12.148]     ...future.conditions <- base::list()
[13:20:12.148]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.148]     if (FALSE) {
[13:20:12.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.148]     }
[13:20:12.148]     ...future.result <- base::tryCatch({
[13:20:12.148]         base::withCallingHandlers({
[13:20:12.148]             ...future.value <- base::withVisible(base::local({
[13:20:12.148]                 ...future.makeSendCondition <- local({
[13:20:12.148]                   sendCondition <- NULL
[13:20:12.148]                   function(frame = 1L) {
[13:20:12.148]                     if (is.function(sendCondition)) 
[13:20:12.148]                       return(sendCondition)
[13:20:12.148]                     ns <- getNamespace("parallel")
[13:20:12.148]                     if (exists("sendData", mode = "function", 
[13:20:12.148]                       envir = ns)) {
[13:20:12.148]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.148]                         envir = ns)
[13:20:12.148]                       envir <- sys.frame(frame)
[13:20:12.148]                       master <- NULL
[13:20:12.148]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.148]                         !identical(envir, emptyenv())) {
[13:20:12.148]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.148]                           inherits = FALSE)) {
[13:20:12.148]                           master <- get("master", mode = "list", 
[13:20:12.148]                             envir = envir, inherits = FALSE)
[13:20:12.148]                           if (inherits(master, c("SOCKnode", 
[13:20:12.148]                             "SOCK0node"))) {
[13:20:12.148]                             sendCondition <<- function(cond) {
[13:20:12.148]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.148]                                 success = TRUE)
[13:20:12.148]                               parallel_sendData(master, data)
[13:20:12.148]                             }
[13:20:12.148]                             return(sendCondition)
[13:20:12.148]                           }
[13:20:12.148]                         }
[13:20:12.148]                         frame <- frame + 1L
[13:20:12.148]                         envir <- sys.frame(frame)
[13:20:12.148]                       }
[13:20:12.148]                     }
[13:20:12.148]                     sendCondition <<- function(cond) NULL
[13:20:12.148]                   }
[13:20:12.148]                 })
[13:20:12.148]                 withCallingHandlers({
[13:20:12.148]                   42
[13:20:12.148]                 }, immediateCondition = function(cond) {
[13:20:12.148]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.148]                   sendCondition(cond)
[13:20:12.148]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.148]                   {
[13:20:12.148]                     inherits <- base::inherits
[13:20:12.148]                     invokeRestart <- base::invokeRestart
[13:20:12.148]                     is.null <- base::is.null
[13:20:12.148]                     muffled <- FALSE
[13:20:12.148]                     if (inherits(cond, "message")) {
[13:20:12.148]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.148]                       if (muffled) 
[13:20:12.148]                         invokeRestart("muffleMessage")
[13:20:12.148]                     }
[13:20:12.148]                     else if (inherits(cond, "warning")) {
[13:20:12.148]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.148]                       if (muffled) 
[13:20:12.148]                         invokeRestart("muffleWarning")
[13:20:12.148]                     }
[13:20:12.148]                     else if (inherits(cond, "condition")) {
[13:20:12.148]                       if (!is.null(pattern)) {
[13:20:12.148]                         computeRestarts <- base::computeRestarts
[13:20:12.148]                         grepl <- base::grepl
[13:20:12.148]                         restarts <- computeRestarts(cond)
[13:20:12.148]                         for (restart in restarts) {
[13:20:12.148]                           name <- restart$name
[13:20:12.148]                           if (is.null(name)) 
[13:20:12.148]                             next
[13:20:12.148]                           if (!grepl(pattern, name)) 
[13:20:12.148]                             next
[13:20:12.148]                           invokeRestart(restart)
[13:20:12.148]                           muffled <- TRUE
[13:20:12.148]                           break
[13:20:12.148]                         }
[13:20:12.148]                       }
[13:20:12.148]                     }
[13:20:12.148]                     invisible(muffled)
[13:20:12.148]                   }
[13:20:12.148]                   muffleCondition(cond)
[13:20:12.148]                 })
[13:20:12.148]             }))
[13:20:12.148]             future::FutureResult(value = ...future.value$value, 
[13:20:12.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.148]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.148]                     ...future.globalenv.names))
[13:20:12.148]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.148]         }, condition = base::local({
[13:20:12.148]             c <- base::c
[13:20:12.148]             inherits <- base::inherits
[13:20:12.148]             invokeRestart <- base::invokeRestart
[13:20:12.148]             length <- base::length
[13:20:12.148]             list <- base::list
[13:20:12.148]             seq.int <- base::seq.int
[13:20:12.148]             signalCondition <- base::signalCondition
[13:20:12.148]             sys.calls <- base::sys.calls
[13:20:12.148]             `[[` <- base::`[[`
[13:20:12.148]             `+` <- base::`+`
[13:20:12.148]             `<<-` <- base::`<<-`
[13:20:12.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.148]                   3L)]
[13:20:12.148]             }
[13:20:12.148]             function(cond) {
[13:20:12.148]                 is_error <- inherits(cond, "error")
[13:20:12.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.148]                   NULL)
[13:20:12.148]                 if (is_error) {
[13:20:12.148]                   sessionInformation <- function() {
[13:20:12.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.148]                       search = base::search(), system = base::Sys.info())
[13:20:12.148]                   }
[13:20:12.148]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.148]                     cond$call), session = sessionInformation(), 
[13:20:12.148]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.148]                   signalCondition(cond)
[13:20:12.148]                 }
[13:20:12.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.148]                 "immediateCondition"))) {
[13:20:12.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.148]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.148]                   if (TRUE && !signal) {
[13:20:12.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.148]                     {
[13:20:12.148]                       inherits <- base::inherits
[13:20:12.148]                       invokeRestart <- base::invokeRestart
[13:20:12.148]                       is.null <- base::is.null
[13:20:12.148]                       muffled <- FALSE
[13:20:12.148]                       if (inherits(cond, "message")) {
[13:20:12.148]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.148]                         if (muffled) 
[13:20:12.148]                           invokeRestart("muffleMessage")
[13:20:12.148]                       }
[13:20:12.148]                       else if (inherits(cond, "warning")) {
[13:20:12.148]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.148]                         if (muffled) 
[13:20:12.148]                           invokeRestart("muffleWarning")
[13:20:12.148]                       }
[13:20:12.148]                       else if (inherits(cond, "condition")) {
[13:20:12.148]                         if (!is.null(pattern)) {
[13:20:12.148]                           computeRestarts <- base::computeRestarts
[13:20:12.148]                           grepl <- base::grepl
[13:20:12.148]                           restarts <- computeRestarts(cond)
[13:20:12.148]                           for (restart in restarts) {
[13:20:12.148]                             name <- restart$name
[13:20:12.148]                             if (is.null(name)) 
[13:20:12.148]                               next
[13:20:12.148]                             if (!grepl(pattern, name)) 
[13:20:12.148]                               next
[13:20:12.148]                             invokeRestart(restart)
[13:20:12.148]                             muffled <- TRUE
[13:20:12.148]                             break
[13:20:12.148]                           }
[13:20:12.148]                         }
[13:20:12.148]                       }
[13:20:12.148]                       invisible(muffled)
[13:20:12.148]                     }
[13:20:12.148]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.148]                   }
[13:20:12.148]                 }
[13:20:12.148]                 else {
[13:20:12.148]                   if (TRUE) {
[13:20:12.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.148]                     {
[13:20:12.148]                       inherits <- base::inherits
[13:20:12.148]                       invokeRestart <- base::invokeRestart
[13:20:12.148]                       is.null <- base::is.null
[13:20:12.148]                       muffled <- FALSE
[13:20:12.148]                       if (inherits(cond, "message")) {
[13:20:12.148]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.148]                         if (muffled) 
[13:20:12.148]                           invokeRestart("muffleMessage")
[13:20:12.148]                       }
[13:20:12.148]                       else if (inherits(cond, "warning")) {
[13:20:12.148]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.148]                         if (muffled) 
[13:20:12.148]                           invokeRestart("muffleWarning")
[13:20:12.148]                       }
[13:20:12.148]                       else if (inherits(cond, "condition")) {
[13:20:12.148]                         if (!is.null(pattern)) {
[13:20:12.148]                           computeRestarts <- base::computeRestarts
[13:20:12.148]                           grepl <- base::grepl
[13:20:12.148]                           restarts <- computeRestarts(cond)
[13:20:12.148]                           for (restart in restarts) {
[13:20:12.148]                             name <- restart$name
[13:20:12.148]                             if (is.null(name)) 
[13:20:12.148]                               next
[13:20:12.148]                             if (!grepl(pattern, name)) 
[13:20:12.148]                               next
[13:20:12.148]                             invokeRestart(restart)
[13:20:12.148]                             muffled <- TRUE
[13:20:12.148]                             break
[13:20:12.148]                           }
[13:20:12.148]                         }
[13:20:12.148]                       }
[13:20:12.148]                       invisible(muffled)
[13:20:12.148]                     }
[13:20:12.148]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.148]                   }
[13:20:12.148]                 }
[13:20:12.148]             }
[13:20:12.148]         }))
[13:20:12.148]     }, error = function(ex) {
[13:20:12.148]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.148]                 ...future.rng), started = ...future.startTime, 
[13:20:12.148]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.148]             version = "1.8"), class = "FutureResult")
[13:20:12.148]     }, finally = {
[13:20:12.148]         if (!identical(...future.workdir, getwd())) 
[13:20:12.148]             setwd(...future.workdir)
[13:20:12.148]         {
[13:20:12.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.148]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.148]             }
[13:20:12.148]             base::options(...future.oldOptions)
[13:20:12.148]             if (.Platform$OS.type == "windows") {
[13:20:12.148]                 old_names <- names(...future.oldEnvVars)
[13:20:12.148]                 envs <- base::Sys.getenv()
[13:20:12.148]                 names <- names(envs)
[13:20:12.148]                 common <- intersect(names, old_names)
[13:20:12.148]                 added <- setdiff(names, old_names)
[13:20:12.148]                 removed <- setdiff(old_names, names)
[13:20:12.148]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.148]                   envs[common]]
[13:20:12.148]                 NAMES <- toupper(changed)
[13:20:12.148]                 args <- list()
[13:20:12.148]                 for (kk in seq_along(NAMES)) {
[13:20:12.148]                   name <- changed[[kk]]
[13:20:12.148]                   NAME <- NAMES[[kk]]
[13:20:12.148]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.148]                     next
[13:20:12.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.148]                 }
[13:20:12.148]                 NAMES <- toupper(added)
[13:20:12.148]                 for (kk in seq_along(NAMES)) {
[13:20:12.148]                   name <- added[[kk]]
[13:20:12.148]                   NAME <- NAMES[[kk]]
[13:20:12.148]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.148]                     next
[13:20:12.148]                   args[[name]] <- ""
[13:20:12.148]                 }
[13:20:12.148]                 NAMES <- toupper(removed)
[13:20:12.148]                 for (kk in seq_along(NAMES)) {
[13:20:12.148]                   name <- removed[[kk]]
[13:20:12.148]                   NAME <- NAMES[[kk]]
[13:20:12.148]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.148]                     next
[13:20:12.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.148]                 }
[13:20:12.148]                 if (length(args) > 0) 
[13:20:12.148]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.148]             }
[13:20:12.148]             else {
[13:20:12.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.148]             }
[13:20:12.148]             {
[13:20:12.148]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.148]                   0L) {
[13:20:12.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.148]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.148]                   base::options(opts)
[13:20:12.148]                 }
[13:20:12.148]                 {
[13:20:12.148]                   {
[13:20:12.148]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.148]                     NULL
[13:20:12.148]                   }
[13:20:12.148]                   options(future.plan = NULL)
[13:20:12.148]                   if (is.na(NA_character_)) 
[13:20:12.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.148]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.148]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.148]                     envir = parent.frame()) 
[13:20:12.148]                   {
[13:20:12.148]                     if (is.function(workers)) 
[13:20:12.148]                       workers <- workers()
[13:20:12.148]                     workers <- structure(as.integer(workers), 
[13:20:12.148]                       class = class(workers))
[13:20:12.148]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.148]                       workers >= 1)
[13:20:12.148]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.148]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.148]                     }
[13:20:12.148]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.148]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.148]                       envir = envir)
[13:20:12.148]                     if (!future$lazy) 
[13:20:12.148]                       future <- run(future)
[13:20:12.148]                     invisible(future)
[13:20:12.148]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.148]                 }
[13:20:12.148]             }
[13:20:12.148]         }
[13:20:12.148]     })
[13:20:12.148]     if (TRUE) {
[13:20:12.148]         base::sink(type = "output", split = FALSE)
[13:20:12.148]         if (TRUE) {
[13:20:12.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.148]         }
[13:20:12.148]         else {
[13:20:12.148]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.148]         }
[13:20:12.148]         base::close(...future.stdout)
[13:20:12.148]         ...future.stdout <- NULL
[13:20:12.148]     }
[13:20:12.148]     ...future.result$conditions <- ...future.conditions
[13:20:12.148]     ...future.result$finished <- base::Sys.time()
[13:20:12.148]     ...future.result
[13:20:12.148] }
[13:20:12.151] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.163] result() for ClusterFuture ...
[13:20:12.163] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.163] - Validating connection of MultisessionFuture
[13:20:12.197] - received message: FutureResult
[13:20:12.198] - Received FutureResult
[13:20:12.198] - Erased future from FutureRegistry
[13:20:12.198] result() for ClusterFuture ...
[13:20:12.198] - result already collected: FutureResult
[13:20:12.198] result() for ClusterFuture ... done
[13:20:12.198] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.198] result() for ClusterFuture ... done
[13:20:12.199] result() for ClusterFuture ...
[13:20:12.199] - result already collected: FutureResult
[13:20:12.199] result() for ClusterFuture ... done
[13:20:12.199] getGlobalsAndPackages() ...
[13:20:12.199] Searching for globals...
[13:20:12.200] 
[13:20:12.200] Searching for globals ... DONE
[13:20:12.200] - globals: [0] <none>
[13:20:12.200] getGlobalsAndPackages() ... DONE
[13:20:12.200] run() for ‘Future’ ...
[13:20:12.200] - state: ‘created’
[13:20:12.201] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:12.215] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.216] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:12.216]   - Field: ‘node’
[13:20:12.216]   - Field: ‘label’
[13:20:12.216]   - Field: ‘local’
[13:20:12.216]   - Field: ‘owner’
[13:20:12.216]   - Field: ‘envir’
[13:20:12.216]   - Field: ‘workers’
[13:20:12.216]   - Field: ‘packages’
[13:20:12.216]   - Field: ‘gc’
[13:20:12.217]   - Field: ‘conditions’
[13:20:12.217]   - Field: ‘persistent’
[13:20:12.217]   - Field: ‘expr’
[13:20:12.217]   - Field: ‘uuid’
[13:20:12.217]   - Field: ‘seed’
[13:20:12.217]   - Field: ‘version’
[13:20:12.217]   - Field: ‘result’
[13:20:12.217]   - Field: ‘asynchronous’
[13:20:12.218]   - Field: ‘calls’
[13:20:12.218]   - Field: ‘globals’
[13:20:12.218]   - Field: ‘stdout’
[13:20:12.218]   - Field: ‘earlySignal’
[13:20:12.218]   - Field: ‘lazy’
[13:20:12.218]   - Field: ‘state’
[13:20:12.218] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:12.218] - Launch lazy future ...
[13:20:12.219] Packages needed by the future expression (n = 0): <none>
[13:20:12.219] Packages needed by future strategies (n = 0): <none>
[13:20:12.219] {
[13:20:12.219]     {
[13:20:12.219]         {
[13:20:12.219]             ...future.startTime <- base::Sys.time()
[13:20:12.219]             {
[13:20:12.219]                 {
[13:20:12.219]                   {
[13:20:12.219]                     {
[13:20:12.219]                       base::local({
[13:20:12.219]                         has_future <- base::requireNamespace("future", 
[13:20:12.219]                           quietly = TRUE)
[13:20:12.219]                         if (has_future) {
[13:20:12.219]                           ns <- base::getNamespace("future")
[13:20:12.219]                           version <- ns[[".package"]][["version"]]
[13:20:12.219]                           if (is.null(version)) 
[13:20:12.219]                             version <- utils::packageVersion("future")
[13:20:12.219]                         }
[13:20:12.219]                         else {
[13:20:12.219]                           version <- NULL
[13:20:12.219]                         }
[13:20:12.219]                         if (!has_future || version < "1.8.0") {
[13:20:12.219]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.219]                             "", base::R.version$version.string), 
[13:20:12.219]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.219]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.219]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.219]                               "release", "version")], collapse = " "), 
[13:20:12.219]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.219]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.219]                             info)
[13:20:12.219]                           info <- base::paste(info, collapse = "; ")
[13:20:12.219]                           if (!has_future) {
[13:20:12.219]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.219]                               info)
[13:20:12.219]                           }
[13:20:12.219]                           else {
[13:20:12.219]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.219]                               info, version)
[13:20:12.219]                           }
[13:20:12.219]                           base::stop(msg)
[13:20:12.219]                         }
[13:20:12.219]                       })
[13:20:12.219]                     }
[13:20:12.219]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.219]                     base::options(mc.cores = 1L)
[13:20:12.219]                   }
[13:20:12.219]                   options(future.plan = NULL)
[13:20:12.219]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.219]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.219]                 }
[13:20:12.219]                 ...future.workdir <- getwd()
[13:20:12.219]             }
[13:20:12.219]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.219]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.219]         }
[13:20:12.219]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.219]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.219]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.219]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.219]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.219]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.219]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.219]             base::names(...future.oldOptions))
[13:20:12.219]     }
[13:20:12.219]     if (FALSE) {
[13:20:12.219]     }
[13:20:12.219]     else {
[13:20:12.219]         if (TRUE) {
[13:20:12.219]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.219]                 open = "w")
[13:20:12.219]         }
[13:20:12.219]         else {
[13:20:12.219]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.219]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.219]         }
[13:20:12.219]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.219]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.219]             base::sink(type = "output", split = FALSE)
[13:20:12.219]             base::close(...future.stdout)
[13:20:12.219]         }, add = TRUE)
[13:20:12.219]     }
[13:20:12.219]     ...future.frame <- base::sys.nframe()
[13:20:12.219]     ...future.conditions <- base::list()
[13:20:12.219]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.219]     if (FALSE) {
[13:20:12.219]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.219]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.219]     }
[13:20:12.219]     ...future.result <- base::tryCatch({
[13:20:12.219]         base::withCallingHandlers({
[13:20:12.219]             ...future.value <- base::withVisible(base::local({
[13:20:12.219]                 ...future.makeSendCondition <- local({
[13:20:12.219]                   sendCondition <- NULL
[13:20:12.219]                   function(frame = 1L) {
[13:20:12.219]                     if (is.function(sendCondition)) 
[13:20:12.219]                       return(sendCondition)
[13:20:12.219]                     ns <- getNamespace("parallel")
[13:20:12.219]                     if (exists("sendData", mode = "function", 
[13:20:12.219]                       envir = ns)) {
[13:20:12.219]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.219]                         envir = ns)
[13:20:12.219]                       envir <- sys.frame(frame)
[13:20:12.219]                       master <- NULL
[13:20:12.219]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.219]                         !identical(envir, emptyenv())) {
[13:20:12.219]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.219]                           inherits = FALSE)) {
[13:20:12.219]                           master <- get("master", mode = "list", 
[13:20:12.219]                             envir = envir, inherits = FALSE)
[13:20:12.219]                           if (inherits(master, c("SOCKnode", 
[13:20:12.219]                             "SOCK0node"))) {
[13:20:12.219]                             sendCondition <<- function(cond) {
[13:20:12.219]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.219]                                 success = TRUE)
[13:20:12.219]                               parallel_sendData(master, data)
[13:20:12.219]                             }
[13:20:12.219]                             return(sendCondition)
[13:20:12.219]                           }
[13:20:12.219]                         }
[13:20:12.219]                         frame <- frame + 1L
[13:20:12.219]                         envir <- sys.frame(frame)
[13:20:12.219]                       }
[13:20:12.219]                     }
[13:20:12.219]                     sendCondition <<- function(cond) NULL
[13:20:12.219]                   }
[13:20:12.219]                 })
[13:20:12.219]                 withCallingHandlers({
[13:20:12.219]                   42
[13:20:12.219]                 }, immediateCondition = function(cond) {
[13:20:12.219]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.219]                   sendCondition(cond)
[13:20:12.219]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.219]                   {
[13:20:12.219]                     inherits <- base::inherits
[13:20:12.219]                     invokeRestart <- base::invokeRestart
[13:20:12.219]                     is.null <- base::is.null
[13:20:12.219]                     muffled <- FALSE
[13:20:12.219]                     if (inherits(cond, "message")) {
[13:20:12.219]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.219]                       if (muffled) 
[13:20:12.219]                         invokeRestart("muffleMessage")
[13:20:12.219]                     }
[13:20:12.219]                     else if (inherits(cond, "warning")) {
[13:20:12.219]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.219]                       if (muffled) 
[13:20:12.219]                         invokeRestart("muffleWarning")
[13:20:12.219]                     }
[13:20:12.219]                     else if (inherits(cond, "condition")) {
[13:20:12.219]                       if (!is.null(pattern)) {
[13:20:12.219]                         computeRestarts <- base::computeRestarts
[13:20:12.219]                         grepl <- base::grepl
[13:20:12.219]                         restarts <- computeRestarts(cond)
[13:20:12.219]                         for (restart in restarts) {
[13:20:12.219]                           name <- restart$name
[13:20:12.219]                           if (is.null(name)) 
[13:20:12.219]                             next
[13:20:12.219]                           if (!grepl(pattern, name)) 
[13:20:12.219]                             next
[13:20:12.219]                           invokeRestart(restart)
[13:20:12.219]                           muffled <- TRUE
[13:20:12.219]                           break
[13:20:12.219]                         }
[13:20:12.219]                       }
[13:20:12.219]                     }
[13:20:12.219]                     invisible(muffled)
[13:20:12.219]                   }
[13:20:12.219]                   muffleCondition(cond)
[13:20:12.219]                 })
[13:20:12.219]             }))
[13:20:12.219]             future::FutureResult(value = ...future.value$value, 
[13:20:12.219]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.219]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.219]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.219]                     ...future.globalenv.names))
[13:20:12.219]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.219]         }, condition = base::local({
[13:20:12.219]             c <- base::c
[13:20:12.219]             inherits <- base::inherits
[13:20:12.219]             invokeRestart <- base::invokeRestart
[13:20:12.219]             length <- base::length
[13:20:12.219]             list <- base::list
[13:20:12.219]             seq.int <- base::seq.int
[13:20:12.219]             signalCondition <- base::signalCondition
[13:20:12.219]             sys.calls <- base::sys.calls
[13:20:12.219]             `[[` <- base::`[[`
[13:20:12.219]             `+` <- base::`+`
[13:20:12.219]             `<<-` <- base::`<<-`
[13:20:12.219]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.219]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.219]                   3L)]
[13:20:12.219]             }
[13:20:12.219]             function(cond) {
[13:20:12.219]                 is_error <- inherits(cond, "error")
[13:20:12.219]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.219]                   NULL)
[13:20:12.219]                 if (is_error) {
[13:20:12.219]                   sessionInformation <- function() {
[13:20:12.219]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.219]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.219]                       search = base::search(), system = base::Sys.info())
[13:20:12.219]                   }
[13:20:12.219]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.219]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.219]                     cond$call), session = sessionInformation(), 
[13:20:12.219]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.219]                   signalCondition(cond)
[13:20:12.219]                 }
[13:20:12.219]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.219]                 "immediateCondition"))) {
[13:20:12.219]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.219]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.219]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.219]                   if (TRUE && !signal) {
[13:20:12.219]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.219]                     {
[13:20:12.219]                       inherits <- base::inherits
[13:20:12.219]                       invokeRestart <- base::invokeRestart
[13:20:12.219]                       is.null <- base::is.null
[13:20:12.219]                       muffled <- FALSE
[13:20:12.219]                       if (inherits(cond, "message")) {
[13:20:12.219]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.219]                         if (muffled) 
[13:20:12.219]                           invokeRestart("muffleMessage")
[13:20:12.219]                       }
[13:20:12.219]                       else if (inherits(cond, "warning")) {
[13:20:12.219]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.219]                         if (muffled) 
[13:20:12.219]                           invokeRestart("muffleWarning")
[13:20:12.219]                       }
[13:20:12.219]                       else if (inherits(cond, "condition")) {
[13:20:12.219]                         if (!is.null(pattern)) {
[13:20:12.219]                           computeRestarts <- base::computeRestarts
[13:20:12.219]                           grepl <- base::grepl
[13:20:12.219]                           restarts <- computeRestarts(cond)
[13:20:12.219]                           for (restart in restarts) {
[13:20:12.219]                             name <- restart$name
[13:20:12.219]                             if (is.null(name)) 
[13:20:12.219]                               next
[13:20:12.219]                             if (!grepl(pattern, name)) 
[13:20:12.219]                               next
[13:20:12.219]                             invokeRestart(restart)
[13:20:12.219]                             muffled <- TRUE
[13:20:12.219]                             break
[13:20:12.219]                           }
[13:20:12.219]                         }
[13:20:12.219]                       }
[13:20:12.219]                       invisible(muffled)
[13:20:12.219]                     }
[13:20:12.219]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.219]                   }
[13:20:12.219]                 }
[13:20:12.219]                 else {
[13:20:12.219]                   if (TRUE) {
[13:20:12.219]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.219]                     {
[13:20:12.219]                       inherits <- base::inherits
[13:20:12.219]                       invokeRestart <- base::invokeRestart
[13:20:12.219]                       is.null <- base::is.null
[13:20:12.219]                       muffled <- FALSE
[13:20:12.219]                       if (inherits(cond, "message")) {
[13:20:12.219]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.219]                         if (muffled) 
[13:20:12.219]                           invokeRestart("muffleMessage")
[13:20:12.219]                       }
[13:20:12.219]                       else if (inherits(cond, "warning")) {
[13:20:12.219]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.219]                         if (muffled) 
[13:20:12.219]                           invokeRestart("muffleWarning")
[13:20:12.219]                       }
[13:20:12.219]                       else if (inherits(cond, "condition")) {
[13:20:12.219]                         if (!is.null(pattern)) {
[13:20:12.219]                           computeRestarts <- base::computeRestarts
[13:20:12.219]                           grepl <- base::grepl
[13:20:12.219]                           restarts <- computeRestarts(cond)
[13:20:12.219]                           for (restart in restarts) {
[13:20:12.219]                             name <- restart$name
[13:20:12.219]                             if (is.null(name)) 
[13:20:12.219]                               next
[13:20:12.219]                             if (!grepl(pattern, name)) 
[13:20:12.219]                               next
[13:20:12.219]                             invokeRestart(restart)
[13:20:12.219]                             muffled <- TRUE
[13:20:12.219]                             break
[13:20:12.219]                           }
[13:20:12.219]                         }
[13:20:12.219]                       }
[13:20:12.219]                       invisible(muffled)
[13:20:12.219]                     }
[13:20:12.219]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.219]                   }
[13:20:12.219]                 }
[13:20:12.219]             }
[13:20:12.219]         }))
[13:20:12.219]     }, error = function(ex) {
[13:20:12.219]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.219]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.219]                 ...future.rng), started = ...future.startTime, 
[13:20:12.219]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.219]             version = "1.8"), class = "FutureResult")
[13:20:12.219]     }, finally = {
[13:20:12.219]         if (!identical(...future.workdir, getwd())) 
[13:20:12.219]             setwd(...future.workdir)
[13:20:12.219]         {
[13:20:12.219]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.219]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.219]             }
[13:20:12.219]             base::options(...future.oldOptions)
[13:20:12.219]             if (.Platform$OS.type == "windows") {
[13:20:12.219]                 old_names <- names(...future.oldEnvVars)
[13:20:12.219]                 envs <- base::Sys.getenv()
[13:20:12.219]                 names <- names(envs)
[13:20:12.219]                 common <- intersect(names, old_names)
[13:20:12.219]                 added <- setdiff(names, old_names)
[13:20:12.219]                 removed <- setdiff(old_names, names)
[13:20:12.219]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.219]                   envs[common]]
[13:20:12.219]                 NAMES <- toupper(changed)
[13:20:12.219]                 args <- list()
[13:20:12.219]                 for (kk in seq_along(NAMES)) {
[13:20:12.219]                   name <- changed[[kk]]
[13:20:12.219]                   NAME <- NAMES[[kk]]
[13:20:12.219]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.219]                     next
[13:20:12.219]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.219]                 }
[13:20:12.219]                 NAMES <- toupper(added)
[13:20:12.219]                 for (kk in seq_along(NAMES)) {
[13:20:12.219]                   name <- added[[kk]]
[13:20:12.219]                   NAME <- NAMES[[kk]]
[13:20:12.219]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.219]                     next
[13:20:12.219]                   args[[name]] <- ""
[13:20:12.219]                 }
[13:20:12.219]                 NAMES <- toupper(removed)
[13:20:12.219]                 for (kk in seq_along(NAMES)) {
[13:20:12.219]                   name <- removed[[kk]]
[13:20:12.219]                   NAME <- NAMES[[kk]]
[13:20:12.219]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.219]                     next
[13:20:12.219]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.219]                 }
[13:20:12.219]                 if (length(args) > 0) 
[13:20:12.219]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.219]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.219]             }
[13:20:12.219]             else {
[13:20:12.219]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.219]             }
[13:20:12.219]             {
[13:20:12.219]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.219]                   0L) {
[13:20:12.219]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.219]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.219]                   base::options(opts)
[13:20:12.219]                 }
[13:20:12.219]                 {
[13:20:12.219]                   {
[13:20:12.219]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.219]                     NULL
[13:20:12.219]                   }
[13:20:12.219]                   options(future.plan = NULL)
[13:20:12.219]                   if (is.na(NA_character_)) 
[13:20:12.219]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.219]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.219]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.219]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.219]                     envir = parent.frame()) 
[13:20:12.219]                   {
[13:20:12.219]                     if (is.function(workers)) 
[13:20:12.219]                       workers <- workers()
[13:20:12.219]                     workers <- structure(as.integer(workers), 
[13:20:12.219]                       class = class(workers))
[13:20:12.219]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.219]                       workers >= 1)
[13:20:12.219]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.219]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.219]                     }
[13:20:12.219]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.219]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.219]                       envir = envir)
[13:20:12.219]                     if (!future$lazy) 
[13:20:12.219]                       future <- run(future)
[13:20:12.219]                     invisible(future)
[13:20:12.219]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.219]                 }
[13:20:12.219]             }
[13:20:12.219]         }
[13:20:12.219]     })
[13:20:12.219]     if (TRUE) {
[13:20:12.219]         base::sink(type = "output", split = FALSE)
[13:20:12.219]         if (TRUE) {
[13:20:12.219]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.219]         }
[13:20:12.219]         else {
[13:20:12.219]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.219]         }
[13:20:12.219]         base::close(...future.stdout)
[13:20:12.219]         ...future.stdout <- NULL
[13:20:12.219]     }
[13:20:12.219]     ...future.result$conditions <- ...future.conditions
[13:20:12.219]     ...future.result$finished <- base::Sys.time()
[13:20:12.219]     ...future.result
[13:20:12.219] }
[13:20:12.223] MultisessionFuture started
[13:20:12.223] - Launch lazy future ... done
[13:20:12.223] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.234] result() for ClusterFuture ...
[13:20:12.234] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.235] - Validating connection of MultisessionFuture
[13:20:12.270] - received message: FutureResult
[13:20:12.270] - Received FutureResult
[13:20:12.270] - Erased future from FutureRegistry
[13:20:12.270] result() for ClusterFuture ...
[13:20:12.270] - result already collected: FutureResult
[13:20:12.270] result() for ClusterFuture ... done
[13:20:12.270] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.270] result() for ClusterFuture ... done
[13:20:12.271] result() for ClusterFuture ...
[13:20:12.271] - result already collected: FutureResult
[13:20:12.271] result() for ClusterFuture ... done
[13:20:12.271] getGlobalsAndPackages() ...
[13:20:12.271] Searching for globals...
[13:20:12.272] - globals found: [1] ‘{’
[13:20:12.272] Searching for globals ... DONE
[13:20:12.272] Resolving globals: FALSE
[13:20:12.273] 
[13:20:12.273] 
[13:20:12.273] getGlobalsAndPackages() ... DONE
[13:20:12.273] run() for ‘Future’ ...
[13:20:12.273] - state: ‘created’
[13:20:12.274] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:12.289] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.289] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:12.289]   - Field: ‘node’
[13:20:12.289]   - Field: ‘label’
[13:20:12.289]   - Field: ‘local’
[13:20:12.289]   - Field: ‘owner’
[13:20:12.289]   - Field: ‘envir’
[13:20:12.289]   - Field: ‘workers’
[13:20:12.289]   - Field: ‘packages’
[13:20:12.290]   - Field: ‘gc’
[13:20:12.290]   - Field: ‘conditions’
[13:20:12.290]   - Field: ‘persistent’
[13:20:12.290]   - Field: ‘expr’
[13:20:12.290]   - Field: ‘uuid’
[13:20:12.290]   - Field: ‘seed’
[13:20:12.290]   - Field: ‘version’
[13:20:12.290]   - Field: ‘result’
[13:20:12.290]   - Field: ‘asynchronous’
[13:20:12.291]   - Field: ‘calls’
[13:20:12.291]   - Field: ‘globals’
[13:20:12.291]   - Field: ‘stdout’
[13:20:12.291]   - Field: ‘earlySignal’
[13:20:12.291]   - Field: ‘lazy’
[13:20:12.291]   - Field: ‘state’
[13:20:12.291] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:12.291] - Launch lazy future ...
[13:20:12.292] Packages needed by the future expression (n = 0): <none>
[13:20:12.292] Packages needed by future strategies (n = 0): <none>
[13:20:12.292] {
[13:20:12.292]     {
[13:20:12.292]         {
[13:20:12.292]             ...future.startTime <- base::Sys.time()
[13:20:12.292]             {
[13:20:12.292]                 {
[13:20:12.292]                   {
[13:20:12.292]                     {
[13:20:12.292]                       base::local({
[13:20:12.292]                         has_future <- base::requireNamespace("future", 
[13:20:12.292]                           quietly = TRUE)
[13:20:12.292]                         if (has_future) {
[13:20:12.292]                           ns <- base::getNamespace("future")
[13:20:12.292]                           version <- ns[[".package"]][["version"]]
[13:20:12.292]                           if (is.null(version)) 
[13:20:12.292]                             version <- utils::packageVersion("future")
[13:20:12.292]                         }
[13:20:12.292]                         else {
[13:20:12.292]                           version <- NULL
[13:20:12.292]                         }
[13:20:12.292]                         if (!has_future || version < "1.8.0") {
[13:20:12.292]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.292]                             "", base::R.version$version.string), 
[13:20:12.292]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.292]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.292]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.292]                               "release", "version")], collapse = " "), 
[13:20:12.292]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.292]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.292]                             info)
[13:20:12.292]                           info <- base::paste(info, collapse = "; ")
[13:20:12.292]                           if (!has_future) {
[13:20:12.292]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.292]                               info)
[13:20:12.292]                           }
[13:20:12.292]                           else {
[13:20:12.292]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.292]                               info, version)
[13:20:12.292]                           }
[13:20:12.292]                           base::stop(msg)
[13:20:12.292]                         }
[13:20:12.292]                       })
[13:20:12.292]                     }
[13:20:12.292]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.292]                     base::options(mc.cores = 1L)
[13:20:12.292]                   }
[13:20:12.292]                   options(future.plan = NULL)
[13:20:12.292]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.292]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.292]                 }
[13:20:12.292]                 ...future.workdir <- getwd()
[13:20:12.292]             }
[13:20:12.292]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.292]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.292]         }
[13:20:12.292]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.292]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.292]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.292]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.292]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.292]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.292]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.292]             base::names(...future.oldOptions))
[13:20:12.292]     }
[13:20:12.292]     if (FALSE) {
[13:20:12.292]     }
[13:20:12.292]     else {
[13:20:12.292]         if (TRUE) {
[13:20:12.292]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.292]                 open = "w")
[13:20:12.292]         }
[13:20:12.292]         else {
[13:20:12.292]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.292]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.292]         }
[13:20:12.292]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.292]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.292]             base::sink(type = "output", split = FALSE)
[13:20:12.292]             base::close(...future.stdout)
[13:20:12.292]         }, add = TRUE)
[13:20:12.292]     }
[13:20:12.292]     ...future.frame <- base::sys.nframe()
[13:20:12.292]     ...future.conditions <- base::list()
[13:20:12.292]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.292]     if (FALSE) {
[13:20:12.292]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.292]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.292]     }
[13:20:12.292]     ...future.result <- base::tryCatch({
[13:20:12.292]         base::withCallingHandlers({
[13:20:12.292]             ...future.value <- base::withVisible(base::local({
[13:20:12.292]                 ...future.makeSendCondition <- local({
[13:20:12.292]                   sendCondition <- NULL
[13:20:12.292]                   function(frame = 1L) {
[13:20:12.292]                     if (is.function(sendCondition)) 
[13:20:12.292]                       return(sendCondition)
[13:20:12.292]                     ns <- getNamespace("parallel")
[13:20:12.292]                     if (exists("sendData", mode = "function", 
[13:20:12.292]                       envir = ns)) {
[13:20:12.292]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.292]                         envir = ns)
[13:20:12.292]                       envir <- sys.frame(frame)
[13:20:12.292]                       master <- NULL
[13:20:12.292]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.292]                         !identical(envir, emptyenv())) {
[13:20:12.292]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.292]                           inherits = FALSE)) {
[13:20:12.292]                           master <- get("master", mode = "list", 
[13:20:12.292]                             envir = envir, inherits = FALSE)
[13:20:12.292]                           if (inherits(master, c("SOCKnode", 
[13:20:12.292]                             "SOCK0node"))) {
[13:20:12.292]                             sendCondition <<- function(cond) {
[13:20:12.292]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.292]                                 success = TRUE)
[13:20:12.292]                               parallel_sendData(master, data)
[13:20:12.292]                             }
[13:20:12.292]                             return(sendCondition)
[13:20:12.292]                           }
[13:20:12.292]                         }
[13:20:12.292]                         frame <- frame + 1L
[13:20:12.292]                         envir <- sys.frame(frame)
[13:20:12.292]                       }
[13:20:12.292]                     }
[13:20:12.292]                     sendCondition <<- function(cond) NULL
[13:20:12.292]                   }
[13:20:12.292]                 })
[13:20:12.292]                 withCallingHandlers({
[13:20:12.292]                   {
[13:20:12.292]                     42
[13:20:12.292]                   }
[13:20:12.292]                 }, immediateCondition = function(cond) {
[13:20:12.292]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.292]                   sendCondition(cond)
[13:20:12.292]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.292]                   {
[13:20:12.292]                     inherits <- base::inherits
[13:20:12.292]                     invokeRestart <- base::invokeRestart
[13:20:12.292]                     is.null <- base::is.null
[13:20:12.292]                     muffled <- FALSE
[13:20:12.292]                     if (inherits(cond, "message")) {
[13:20:12.292]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.292]                       if (muffled) 
[13:20:12.292]                         invokeRestart("muffleMessage")
[13:20:12.292]                     }
[13:20:12.292]                     else if (inherits(cond, "warning")) {
[13:20:12.292]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.292]                       if (muffled) 
[13:20:12.292]                         invokeRestart("muffleWarning")
[13:20:12.292]                     }
[13:20:12.292]                     else if (inherits(cond, "condition")) {
[13:20:12.292]                       if (!is.null(pattern)) {
[13:20:12.292]                         computeRestarts <- base::computeRestarts
[13:20:12.292]                         grepl <- base::grepl
[13:20:12.292]                         restarts <- computeRestarts(cond)
[13:20:12.292]                         for (restart in restarts) {
[13:20:12.292]                           name <- restart$name
[13:20:12.292]                           if (is.null(name)) 
[13:20:12.292]                             next
[13:20:12.292]                           if (!grepl(pattern, name)) 
[13:20:12.292]                             next
[13:20:12.292]                           invokeRestart(restart)
[13:20:12.292]                           muffled <- TRUE
[13:20:12.292]                           break
[13:20:12.292]                         }
[13:20:12.292]                       }
[13:20:12.292]                     }
[13:20:12.292]                     invisible(muffled)
[13:20:12.292]                   }
[13:20:12.292]                   muffleCondition(cond)
[13:20:12.292]                 })
[13:20:12.292]             }))
[13:20:12.292]             future::FutureResult(value = ...future.value$value, 
[13:20:12.292]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.292]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.292]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.292]                     ...future.globalenv.names))
[13:20:12.292]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.292]         }, condition = base::local({
[13:20:12.292]             c <- base::c
[13:20:12.292]             inherits <- base::inherits
[13:20:12.292]             invokeRestart <- base::invokeRestart
[13:20:12.292]             length <- base::length
[13:20:12.292]             list <- base::list
[13:20:12.292]             seq.int <- base::seq.int
[13:20:12.292]             signalCondition <- base::signalCondition
[13:20:12.292]             sys.calls <- base::sys.calls
[13:20:12.292]             `[[` <- base::`[[`
[13:20:12.292]             `+` <- base::`+`
[13:20:12.292]             `<<-` <- base::`<<-`
[13:20:12.292]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.292]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.292]                   3L)]
[13:20:12.292]             }
[13:20:12.292]             function(cond) {
[13:20:12.292]                 is_error <- inherits(cond, "error")
[13:20:12.292]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.292]                   NULL)
[13:20:12.292]                 if (is_error) {
[13:20:12.292]                   sessionInformation <- function() {
[13:20:12.292]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.292]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.292]                       search = base::search(), system = base::Sys.info())
[13:20:12.292]                   }
[13:20:12.292]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.292]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.292]                     cond$call), session = sessionInformation(), 
[13:20:12.292]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.292]                   signalCondition(cond)
[13:20:12.292]                 }
[13:20:12.292]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.292]                 "immediateCondition"))) {
[13:20:12.292]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.292]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.292]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.292]                   if (TRUE && !signal) {
[13:20:12.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.292]                     {
[13:20:12.292]                       inherits <- base::inherits
[13:20:12.292]                       invokeRestart <- base::invokeRestart
[13:20:12.292]                       is.null <- base::is.null
[13:20:12.292]                       muffled <- FALSE
[13:20:12.292]                       if (inherits(cond, "message")) {
[13:20:12.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.292]                         if (muffled) 
[13:20:12.292]                           invokeRestart("muffleMessage")
[13:20:12.292]                       }
[13:20:12.292]                       else if (inherits(cond, "warning")) {
[13:20:12.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.292]                         if (muffled) 
[13:20:12.292]                           invokeRestart("muffleWarning")
[13:20:12.292]                       }
[13:20:12.292]                       else if (inherits(cond, "condition")) {
[13:20:12.292]                         if (!is.null(pattern)) {
[13:20:12.292]                           computeRestarts <- base::computeRestarts
[13:20:12.292]                           grepl <- base::grepl
[13:20:12.292]                           restarts <- computeRestarts(cond)
[13:20:12.292]                           for (restart in restarts) {
[13:20:12.292]                             name <- restart$name
[13:20:12.292]                             if (is.null(name)) 
[13:20:12.292]                               next
[13:20:12.292]                             if (!grepl(pattern, name)) 
[13:20:12.292]                               next
[13:20:12.292]                             invokeRestart(restart)
[13:20:12.292]                             muffled <- TRUE
[13:20:12.292]                             break
[13:20:12.292]                           }
[13:20:12.292]                         }
[13:20:12.292]                       }
[13:20:12.292]                       invisible(muffled)
[13:20:12.292]                     }
[13:20:12.292]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.292]                   }
[13:20:12.292]                 }
[13:20:12.292]                 else {
[13:20:12.292]                   if (TRUE) {
[13:20:12.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.292]                     {
[13:20:12.292]                       inherits <- base::inherits
[13:20:12.292]                       invokeRestart <- base::invokeRestart
[13:20:12.292]                       is.null <- base::is.null
[13:20:12.292]                       muffled <- FALSE
[13:20:12.292]                       if (inherits(cond, "message")) {
[13:20:12.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.292]                         if (muffled) 
[13:20:12.292]                           invokeRestart("muffleMessage")
[13:20:12.292]                       }
[13:20:12.292]                       else if (inherits(cond, "warning")) {
[13:20:12.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.292]                         if (muffled) 
[13:20:12.292]                           invokeRestart("muffleWarning")
[13:20:12.292]                       }
[13:20:12.292]                       else if (inherits(cond, "condition")) {
[13:20:12.292]                         if (!is.null(pattern)) {
[13:20:12.292]                           computeRestarts <- base::computeRestarts
[13:20:12.292]                           grepl <- base::grepl
[13:20:12.292]                           restarts <- computeRestarts(cond)
[13:20:12.292]                           for (restart in restarts) {
[13:20:12.292]                             name <- restart$name
[13:20:12.292]                             if (is.null(name)) 
[13:20:12.292]                               next
[13:20:12.292]                             if (!grepl(pattern, name)) 
[13:20:12.292]                               next
[13:20:12.292]                             invokeRestart(restart)
[13:20:12.292]                             muffled <- TRUE
[13:20:12.292]                             break
[13:20:12.292]                           }
[13:20:12.292]                         }
[13:20:12.292]                       }
[13:20:12.292]                       invisible(muffled)
[13:20:12.292]                     }
[13:20:12.292]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.292]                   }
[13:20:12.292]                 }
[13:20:12.292]             }
[13:20:12.292]         }))
[13:20:12.292]     }, error = function(ex) {
[13:20:12.292]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.292]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.292]                 ...future.rng), started = ...future.startTime, 
[13:20:12.292]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.292]             version = "1.8"), class = "FutureResult")
[13:20:12.292]     }, finally = {
[13:20:12.292]         if (!identical(...future.workdir, getwd())) 
[13:20:12.292]             setwd(...future.workdir)
[13:20:12.292]         {
[13:20:12.292]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.292]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.292]             }
[13:20:12.292]             base::options(...future.oldOptions)
[13:20:12.292]             if (.Platform$OS.type == "windows") {
[13:20:12.292]                 old_names <- names(...future.oldEnvVars)
[13:20:12.292]                 envs <- base::Sys.getenv()
[13:20:12.292]                 names <- names(envs)
[13:20:12.292]                 common <- intersect(names, old_names)
[13:20:12.292]                 added <- setdiff(names, old_names)
[13:20:12.292]                 removed <- setdiff(old_names, names)
[13:20:12.292]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.292]                   envs[common]]
[13:20:12.292]                 NAMES <- toupper(changed)
[13:20:12.292]                 args <- list()
[13:20:12.292]                 for (kk in seq_along(NAMES)) {
[13:20:12.292]                   name <- changed[[kk]]
[13:20:12.292]                   NAME <- NAMES[[kk]]
[13:20:12.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.292]                     next
[13:20:12.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.292]                 }
[13:20:12.292]                 NAMES <- toupper(added)
[13:20:12.292]                 for (kk in seq_along(NAMES)) {
[13:20:12.292]                   name <- added[[kk]]
[13:20:12.292]                   NAME <- NAMES[[kk]]
[13:20:12.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.292]                     next
[13:20:12.292]                   args[[name]] <- ""
[13:20:12.292]                 }
[13:20:12.292]                 NAMES <- toupper(removed)
[13:20:12.292]                 for (kk in seq_along(NAMES)) {
[13:20:12.292]                   name <- removed[[kk]]
[13:20:12.292]                   NAME <- NAMES[[kk]]
[13:20:12.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.292]                     next
[13:20:12.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.292]                 }
[13:20:12.292]                 if (length(args) > 0) 
[13:20:12.292]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.292]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.292]             }
[13:20:12.292]             else {
[13:20:12.292]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.292]             }
[13:20:12.292]             {
[13:20:12.292]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.292]                   0L) {
[13:20:12.292]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.292]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.292]                   base::options(opts)
[13:20:12.292]                 }
[13:20:12.292]                 {
[13:20:12.292]                   {
[13:20:12.292]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.292]                     NULL
[13:20:12.292]                   }
[13:20:12.292]                   options(future.plan = NULL)
[13:20:12.292]                   if (is.na(NA_character_)) 
[13:20:12.292]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.292]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.292]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.292]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.292]                     envir = parent.frame()) 
[13:20:12.292]                   {
[13:20:12.292]                     if (is.function(workers)) 
[13:20:12.292]                       workers <- workers()
[13:20:12.292]                     workers <- structure(as.integer(workers), 
[13:20:12.292]                       class = class(workers))
[13:20:12.292]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.292]                       workers >= 1)
[13:20:12.292]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.292]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.292]                     }
[13:20:12.292]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.292]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.292]                       envir = envir)
[13:20:12.292]                     if (!future$lazy) 
[13:20:12.292]                       future <- run(future)
[13:20:12.292]                     invisible(future)
[13:20:12.292]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.292]                 }
[13:20:12.292]             }
[13:20:12.292]         }
[13:20:12.292]     })
[13:20:12.292]     if (TRUE) {
[13:20:12.292]         base::sink(type = "output", split = FALSE)
[13:20:12.292]         if (TRUE) {
[13:20:12.292]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.292]         }
[13:20:12.292]         else {
[13:20:12.292]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.292]         }
[13:20:12.292]         base::close(...future.stdout)
[13:20:12.292]         ...future.stdout <- NULL
[13:20:12.292]     }
[13:20:12.292]     ...future.result$conditions <- ...future.conditions
[13:20:12.292]     ...future.result$finished <- base::Sys.time()
[13:20:12.292]     ...future.result
[13:20:12.292] }
[13:20:12.296] MultisessionFuture started
[13:20:12.296] - Launch lazy future ... done
[13:20:12.296] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.308] result() for ClusterFuture ...
[13:20:12.308] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.308] - Validating connection of MultisessionFuture
[13:20:12.342] - received message: FutureResult
[13:20:12.342] - Received FutureResult
[13:20:12.342] - Erased future from FutureRegistry
[13:20:12.342] result() for ClusterFuture ...
[13:20:12.342] - result already collected: FutureResult
[13:20:12.342] result() for ClusterFuture ... done
[13:20:12.342] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.343] result() for ClusterFuture ... done
[13:20:12.343] result() for ClusterFuture ...
[13:20:12.343] - result already collected: FutureResult
[13:20:12.343] result() for ClusterFuture ... done
[13:20:12.346] getGlobalsAndPackages() ...
[13:20:12.347] 
[13:20:12.347] - globals: [0] <none>
[13:20:12.347] getGlobalsAndPackages() ... DONE
[13:20:12.359] Packages needed by the future expression (n = 0): <none>
[13:20:12.359] Packages needed by future strategies (n = 0): <none>
[13:20:12.361] {
[13:20:12.361]     {
[13:20:12.361]         {
[13:20:12.361]             ...future.startTime <- base::Sys.time()
[13:20:12.361]             {
[13:20:12.361]                 {
[13:20:12.361]                   {
[13:20:12.361]                     {
[13:20:12.361]                       base::local({
[13:20:12.361]                         has_future <- base::requireNamespace("future", 
[13:20:12.361]                           quietly = TRUE)
[13:20:12.361]                         if (has_future) {
[13:20:12.361]                           ns <- base::getNamespace("future")
[13:20:12.361]                           version <- ns[[".package"]][["version"]]
[13:20:12.361]                           if (is.null(version)) 
[13:20:12.361]                             version <- utils::packageVersion("future")
[13:20:12.361]                         }
[13:20:12.361]                         else {
[13:20:12.361]                           version <- NULL
[13:20:12.361]                         }
[13:20:12.361]                         if (!has_future || version < "1.8.0") {
[13:20:12.361]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.361]                             "", base::R.version$version.string), 
[13:20:12.361]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.361]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.361]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.361]                               "release", "version")], collapse = " "), 
[13:20:12.361]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.361]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.361]                             info)
[13:20:12.361]                           info <- base::paste(info, collapse = "; ")
[13:20:12.361]                           if (!has_future) {
[13:20:12.361]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.361]                               info)
[13:20:12.361]                           }
[13:20:12.361]                           else {
[13:20:12.361]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.361]                               info, version)
[13:20:12.361]                           }
[13:20:12.361]                           base::stop(msg)
[13:20:12.361]                         }
[13:20:12.361]                       })
[13:20:12.361]                     }
[13:20:12.361]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.361]                     base::options(mc.cores = 1L)
[13:20:12.361]                   }
[13:20:12.361]                   options(future.plan = NULL)
[13:20:12.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.361]                 }
[13:20:12.361]                 ...future.workdir <- getwd()
[13:20:12.361]             }
[13:20:12.361]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.361]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.361]         }
[13:20:12.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.361]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.361]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.361]             base::names(...future.oldOptions))
[13:20:12.361]     }
[13:20:12.361]     if (FALSE) {
[13:20:12.361]     }
[13:20:12.361]     else {
[13:20:12.361]         if (TRUE) {
[13:20:12.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.361]                 open = "w")
[13:20:12.361]         }
[13:20:12.361]         else {
[13:20:12.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.361]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.361]         }
[13:20:12.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.361]             base::sink(type = "output", split = FALSE)
[13:20:12.361]             base::close(...future.stdout)
[13:20:12.361]         }, add = TRUE)
[13:20:12.361]     }
[13:20:12.361]     ...future.frame <- base::sys.nframe()
[13:20:12.361]     ...future.conditions <- base::list()
[13:20:12.361]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.361]     if (FALSE) {
[13:20:12.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.361]     }
[13:20:12.361]     ...future.result <- base::tryCatch({
[13:20:12.361]         base::withCallingHandlers({
[13:20:12.361]             ...future.value <- base::withVisible(base::local({
[13:20:12.361]                 ...future.makeSendCondition <- local({
[13:20:12.361]                   sendCondition <- NULL
[13:20:12.361]                   function(frame = 1L) {
[13:20:12.361]                     if (is.function(sendCondition)) 
[13:20:12.361]                       return(sendCondition)
[13:20:12.361]                     ns <- getNamespace("parallel")
[13:20:12.361]                     if (exists("sendData", mode = "function", 
[13:20:12.361]                       envir = ns)) {
[13:20:12.361]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.361]                         envir = ns)
[13:20:12.361]                       envir <- sys.frame(frame)
[13:20:12.361]                       master <- NULL
[13:20:12.361]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.361]                         !identical(envir, emptyenv())) {
[13:20:12.361]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.361]                           inherits = FALSE)) {
[13:20:12.361]                           master <- get("master", mode = "list", 
[13:20:12.361]                             envir = envir, inherits = FALSE)
[13:20:12.361]                           if (inherits(master, c("SOCKnode", 
[13:20:12.361]                             "SOCK0node"))) {
[13:20:12.361]                             sendCondition <<- function(cond) {
[13:20:12.361]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.361]                                 success = TRUE)
[13:20:12.361]                               parallel_sendData(master, data)
[13:20:12.361]                             }
[13:20:12.361]                             return(sendCondition)
[13:20:12.361]                           }
[13:20:12.361]                         }
[13:20:12.361]                         frame <- frame + 1L
[13:20:12.361]                         envir <- sys.frame(frame)
[13:20:12.361]                       }
[13:20:12.361]                     }
[13:20:12.361]                     sendCondition <<- function(cond) NULL
[13:20:12.361]                   }
[13:20:12.361]                 })
[13:20:12.361]                 withCallingHandlers({
[13:20:12.361]                   42
[13:20:12.361]                 }, immediateCondition = function(cond) {
[13:20:12.361]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.361]                   sendCondition(cond)
[13:20:12.361]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.361]                   {
[13:20:12.361]                     inherits <- base::inherits
[13:20:12.361]                     invokeRestart <- base::invokeRestart
[13:20:12.361]                     is.null <- base::is.null
[13:20:12.361]                     muffled <- FALSE
[13:20:12.361]                     if (inherits(cond, "message")) {
[13:20:12.361]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.361]                       if (muffled) 
[13:20:12.361]                         invokeRestart("muffleMessage")
[13:20:12.361]                     }
[13:20:12.361]                     else if (inherits(cond, "warning")) {
[13:20:12.361]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.361]                       if (muffled) 
[13:20:12.361]                         invokeRestart("muffleWarning")
[13:20:12.361]                     }
[13:20:12.361]                     else if (inherits(cond, "condition")) {
[13:20:12.361]                       if (!is.null(pattern)) {
[13:20:12.361]                         computeRestarts <- base::computeRestarts
[13:20:12.361]                         grepl <- base::grepl
[13:20:12.361]                         restarts <- computeRestarts(cond)
[13:20:12.361]                         for (restart in restarts) {
[13:20:12.361]                           name <- restart$name
[13:20:12.361]                           if (is.null(name)) 
[13:20:12.361]                             next
[13:20:12.361]                           if (!grepl(pattern, name)) 
[13:20:12.361]                             next
[13:20:12.361]                           invokeRestart(restart)
[13:20:12.361]                           muffled <- TRUE
[13:20:12.361]                           break
[13:20:12.361]                         }
[13:20:12.361]                       }
[13:20:12.361]                     }
[13:20:12.361]                     invisible(muffled)
[13:20:12.361]                   }
[13:20:12.361]                   muffleCondition(cond)
[13:20:12.361]                 })
[13:20:12.361]             }))
[13:20:12.361]             future::FutureResult(value = ...future.value$value, 
[13:20:12.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.361]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.361]                     ...future.globalenv.names))
[13:20:12.361]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.361]         }, condition = base::local({
[13:20:12.361]             c <- base::c
[13:20:12.361]             inherits <- base::inherits
[13:20:12.361]             invokeRestart <- base::invokeRestart
[13:20:12.361]             length <- base::length
[13:20:12.361]             list <- base::list
[13:20:12.361]             seq.int <- base::seq.int
[13:20:12.361]             signalCondition <- base::signalCondition
[13:20:12.361]             sys.calls <- base::sys.calls
[13:20:12.361]             `[[` <- base::`[[`
[13:20:12.361]             `+` <- base::`+`
[13:20:12.361]             `<<-` <- base::`<<-`
[13:20:12.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.361]                   3L)]
[13:20:12.361]             }
[13:20:12.361]             function(cond) {
[13:20:12.361]                 is_error <- inherits(cond, "error")
[13:20:12.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.361]                   NULL)
[13:20:12.361]                 if (is_error) {
[13:20:12.361]                   sessionInformation <- function() {
[13:20:12.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.361]                       search = base::search(), system = base::Sys.info())
[13:20:12.361]                   }
[13:20:12.361]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.361]                     cond$call), session = sessionInformation(), 
[13:20:12.361]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.361]                   signalCondition(cond)
[13:20:12.361]                 }
[13:20:12.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.361]                 "immediateCondition"))) {
[13:20:12.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.361]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.361]                   if (TRUE && !signal) {
[13:20:12.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.361]                     {
[13:20:12.361]                       inherits <- base::inherits
[13:20:12.361]                       invokeRestart <- base::invokeRestart
[13:20:12.361]                       is.null <- base::is.null
[13:20:12.361]                       muffled <- FALSE
[13:20:12.361]                       if (inherits(cond, "message")) {
[13:20:12.361]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.361]                         if (muffled) 
[13:20:12.361]                           invokeRestart("muffleMessage")
[13:20:12.361]                       }
[13:20:12.361]                       else if (inherits(cond, "warning")) {
[13:20:12.361]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.361]                         if (muffled) 
[13:20:12.361]                           invokeRestart("muffleWarning")
[13:20:12.361]                       }
[13:20:12.361]                       else if (inherits(cond, "condition")) {
[13:20:12.361]                         if (!is.null(pattern)) {
[13:20:12.361]                           computeRestarts <- base::computeRestarts
[13:20:12.361]                           grepl <- base::grepl
[13:20:12.361]                           restarts <- computeRestarts(cond)
[13:20:12.361]                           for (restart in restarts) {
[13:20:12.361]                             name <- restart$name
[13:20:12.361]                             if (is.null(name)) 
[13:20:12.361]                               next
[13:20:12.361]                             if (!grepl(pattern, name)) 
[13:20:12.361]                               next
[13:20:12.361]                             invokeRestart(restart)
[13:20:12.361]                             muffled <- TRUE
[13:20:12.361]                             break
[13:20:12.361]                           }
[13:20:12.361]                         }
[13:20:12.361]                       }
[13:20:12.361]                       invisible(muffled)
[13:20:12.361]                     }
[13:20:12.361]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.361]                   }
[13:20:12.361]                 }
[13:20:12.361]                 else {
[13:20:12.361]                   if (TRUE) {
[13:20:12.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.361]                     {
[13:20:12.361]                       inherits <- base::inherits
[13:20:12.361]                       invokeRestart <- base::invokeRestart
[13:20:12.361]                       is.null <- base::is.null
[13:20:12.361]                       muffled <- FALSE
[13:20:12.361]                       if (inherits(cond, "message")) {
[13:20:12.361]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.361]                         if (muffled) 
[13:20:12.361]                           invokeRestart("muffleMessage")
[13:20:12.361]                       }
[13:20:12.361]                       else if (inherits(cond, "warning")) {
[13:20:12.361]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.361]                         if (muffled) 
[13:20:12.361]                           invokeRestart("muffleWarning")
[13:20:12.361]                       }
[13:20:12.361]                       else if (inherits(cond, "condition")) {
[13:20:12.361]                         if (!is.null(pattern)) {
[13:20:12.361]                           computeRestarts <- base::computeRestarts
[13:20:12.361]                           grepl <- base::grepl
[13:20:12.361]                           restarts <- computeRestarts(cond)
[13:20:12.361]                           for (restart in restarts) {
[13:20:12.361]                             name <- restart$name
[13:20:12.361]                             if (is.null(name)) 
[13:20:12.361]                               next
[13:20:12.361]                             if (!grepl(pattern, name)) 
[13:20:12.361]                               next
[13:20:12.361]                             invokeRestart(restart)
[13:20:12.361]                             muffled <- TRUE
[13:20:12.361]                             break
[13:20:12.361]                           }
[13:20:12.361]                         }
[13:20:12.361]                       }
[13:20:12.361]                       invisible(muffled)
[13:20:12.361]                     }
[13:20:12.361]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.361]                   }
[13:20:12.361]                 }
[13:20:12.361]             }
[13:20:12.361]         }))
[13:20:12.361]     }, error = function(ex) {
[13:20:12.361]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.361]                 ...future.rng), started = ...future.startTime, 
[13:20:12.361]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.361]             version = "1.8"), class = "FutureResult")
[13:20:12.361]     }, finally = {
[13:20:12.361]         if (!identical(...future.workdir, getwd())) 
[13:20:12.361]             setwd(...future.workdir)
[13:20:12.361]         {
[13:20:12.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.361]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.361]             }
[13:20:12.361]             base::options(...future.oldOptions)
[13:20:12.361]             if (.Platform$OS.type == "windows") {
[13:20:12.361]                 old_names <- names(...future.oldEnvVars)
[13:20:12.361]                 envs <- base::Sys.getenv()
[13:20:12.361]                 names <- names(envs)
[13:20:12.361]                 common <- intersect(names, old_names)
[13:20:12.361]                 added <- setdiff(names, old_names)
[13:20:12.361]                 removed <- setdiff(old_names, names)
[13:20:12.361]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.361]                   envs[common]]
[13:20:12.361]                 NAMES <- toupper(changed)
[13:20:12.361]                 args <- list()
[13:20:12.361]                 for (kk in seq_along(NAMES)) {
[13:20:12.361]                   name <- changed[[kk]]
[13:20:12.361]                   NAME <- NAMES[[kk]]
[13:20:12.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.361]                     next
[13:20:12.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.361]                 }
[13:20:12.361]                 NAMES <- toupper(added)
[13:20:12.361]                 for (kk in seq_along(NAMES)) {
[13:20:12.361]                   name <- added[[kk]]
[13:20:12.361]                   NAME <- NAMES[[kk]]
[13:20:12.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.361]                     next
[13:20:12.361]                   args[[name]] <- ""
[13:20:12.361]                 }
[13:20:12.361]                 NAMES <- toupper(removed)
[13:20:12.361]                 for (kk in seq_along(NAMES)) {
[13:20:12.361]                   name <- removed[[kk]]
[13:20:12.361]                   NAME <- NAMES[[kk]]
[13:20:12.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.361]                     next
[13:20:12.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.361]                 }
[13:20:12.361]                 if (length(args) > 0) 
[13:20:12.361]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.361]             }
[13:20:12.361]             else {
[13:20:12.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.361]             }
[13:20:12.361]             {
[13:20:12.361]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.361]                   0L) {
[13:20:12.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.361]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.361]                   base::options(opts)
[13:20:12.361]                 }
[13:20:12.361]                 {
[13:20:12.361]                   {
[13:20:12.361]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.361]                     NULL
[13:20:12.361]                   }
[13:20:12.361]                   options(future.plan = NULL)
[13:20:12.361]                   if (is.na(NA_character_)) 
[13:20:12.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.361]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.361]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.361]                     envir = parent.frame()) 
[13:20:12.361]                   {
[13:20:12.361]                     if (is.function(workers)) 
[13:20:12.361]                       workers <- workers()
[13:20:12.361]                     workers <- structure(as.integer(workers), 
[13:20:12.361]                       class = class(workers))
[13:20:12.361]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.361]                       workers >= 1)
[13:20:12.361]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.361]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.361]                     }
[13:20:12.361]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.361]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.361]                       envir = envir)
[13:20:12.361]                     if (!future$lazy) 
[13:20:12.361]                       future <- run(future)
[13:20:12.361]                     invisible(future)
[13:20:12.361]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.361]                 }
[13:20:12.361]             }
[13:20:12.361]         }
[13:20:12.361]     })
[13:20:12.361]     if (TRUE) {
[13:20:12.361]         base::sink(type = "output", split = FALSE)
[13:20:12.361]         if (TRUE) {
[13:20:12.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.361]         }
[13:20:12.361]         else {
[13:20:12.361]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.361]         }
[13:20:12.361]         base::close(...future.stdout)
[13:20:12.361]         ...future.stdout <- NULL
[13:20:12.361]     }
[13:20:12.361]     ...future.result$conditions <- ...future.conditions
[13:20:12.361]     ...future.result$finished <- base::Sys.time()
[13:20:12.361]     ...future.result
[13:20:12.361] }
[13:20:12.364] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.375] result() for ClusterFuture ...
[13:20:12.376] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.376] - Validating connection of MultisessionFuture
[13:20:12.410] - received message: FutureResult
[13:20:12.410] - Received FutureResult
[13:20:12.410] - Erased future from FutureRegistry
[13:20:12.411] result() for ClusterFuture ...
[13:20:12.411] - result already collected: FutureResult
[13:20:12.411] result() for ClusterFuture ... done
[13:20:12.411] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.411] result() for ClusterFuture ... done
[13:20:12.411] result() for ClusterFuture ...
[13:20:12.411] - result already collected: FutureResult
[13:20:12.411] result() for ClusterFuture ... done
[13:20:12.411] getGlobalsAndPackages() ...
[13:20:12.411] Searching for globals...
[13:20:12.412] 
[13:20:12.412] Searching for globals ... DONE
[13:20:12.412] - globals: [0] <none>
[13:20:12.412] getGlobalsAndPackages() ... DONE
[13:20:12.412] run() for ‘Future’ ...
[13:20:12.412] - state: ‘created’
[13:20:12.413] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:12.427] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.427] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:12.427]   - Field: ‘node’
[13:20:12.427]   - Field: ‘label’
[13:20:12.427]   - Field: ‘local’
[13:20:12.428]   - Field: ‘owner’
[13:20:12.428]   - Field: ‘envir’
[13:20:12.428]   - Field: ‘workers’
[13:20:12.428]   - Field: ‘packages’
[13:20:12.428]   - Field: ‘gc’
[13:20:12.428]   - Field: ‘conditions’
[13:20:12.428]   - Field: ‘persistent’
[13:20:12.428]   - Field: ‘expr’
[13:20:12.428]   - Field: ‘uuid’
[13:20:12.428]   - Field: ‘seed’
[13:20:12.428]   - Field: ‘version’
[13:20:12.429]   - Field: ‘result’
[13:20:12.429]   - Field: ‘asynchronous’
[13:20:12.429]   - Field: ‘calls’
[13:20:12.429]   - Field: ‘globals’
[13:20:12.429]   - Field: ‘stdout’
[13:20:12.429]   - Field: ‘earlySignal’
[13:20:12.429]   - Field: ‘lazy’
[13:20:12.429]   - Field: ‘state’
[13:20:12.429] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:12.429] - Launch lazy future ...
[13:20:12.430] Packages needed by the future expression (n = 0): <none>
[13:20:12.430] Packages needed by future strategies (n = 0): <none>
[13:20:12.430] {
[13:20:12.430]     {
[13:20:12.430]         {
[13:20:12.430]             ...future.startTime <- base::Sys.time()
[13:20:12.430]             {
[13:20:12.430]                 {
[13:20:12.430]                   {
[13:20:12.430]                     {
[13:20:12.430]                       base::local({
[13:20:12.430]                         has_future <- base::requireNamespace("future", 
[13:20:12.430]                           quietly = TRUE)
[13:20:12.430]                         if (has_future) {
[13:20:12.430]                           ns <- base::getNamespace("future")
[13:20:12.430]                           version <- ns[[".package"]][["version"]]
[13:20:12.430]                           if (is.null(version)) 
[13:20:12.430]                             version <- utils::packageVersion("future")
[13:20:12.430]                         }
[13:20:12.430]                         else {
[13:20:12.430]                           version <- NULL
[13:20:12.430]                         }
[13:20:12.430]                         if (!has_future || version < "1.8.0") {
[13:20:12.430]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.430]                             "", base::R.version$version.string), 
[13:20:12.430]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.430]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.430]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.430]                               "release", "version")], collapse = " "), 
[13:20:12.430]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.430]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.430]                             info)
[13:20:12.430]                           info <- base::paste(info, collapse = "; ")
[13:20:12.430]                           if (!has_future) {
[13:20:12.430]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.430]                               info)
[13:20:12.430]                           }
[13:20:12.430]                           else {
[13:20:12.430]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.430]                               info, version)
[13:20:12.430]                           }
[13:20:12.430]                           base::stop(msg)
[13:20:12.430]                         }
[13:20:12.430]                       })
[13:20:12.430]                     }
[13:20:12.430]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.430]                     base::options(mc.cores = 1L)
[13:20:12.430]                   }
[13:20:12.430]                   options(future.plan = NULL)
[13:20:12.430]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.430]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.430]                 }
[13:20:12.430]                 ...future.workdir <- getwd()
[13:20:12.430]             }
[13:20:12.430]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.430]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.430]         }
[13:20:12.430]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.430]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.430]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.430]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.430]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.430]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.430]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.430]             base::names(...future.oldOptions))
[13:20:12.430]     }
[13:20:12.430]     if (FALSE) {
[13:20:12.430]     }
[13:20:12.430]     else {
[13:20:12.430]         if (TRUE) {
[13:20:12.430]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.430]                 open = "w")
[13:20:12.430]         }
[13:20:12.430]         else {
[13:20:12.430]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.430]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.430]         }
[13:20:12.430]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.430]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.430]             base::sink(type = "output", split = FALSE)
[13:20:12.430]             base::close(...future.stdout)
[13:20:12.430]         }, add = TRUE)
[13:20:12.430]     }
[13:20:12.430]     ...future.frame <- base::sys.nframe()
[13:20:12.430]     ...future.conditions <- base::list()
[13:20:12.430]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.430]     if (FALSE) {
[13:20:12.430]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.430]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.430]     }
[13:20:12.430]     ...future.result <- base::tryCatch({
[13:20:12.430]         base::withCallingHandlers({
[13:20:12.430]             ...future.value <- base::withVisible(base::local({
[13:20:12.430]                 ...future.makeSendCondition <- local({
[13:20:12.430]                   sendCondition <- NULL
[13:20:12.430]                   function(frame = 1L) {
[13:20:12.430]                     if (is.function(sendCondition)) 
[13:20:12.430]                       return(sendCondition)
[13:20:12.430]                     ns <- getNamespace("parallel")
[13:20:12.430]                     if (exists("sendData", mode = "function", 
[13:20:12.430]                       envir = ns)) {
[13:20:12.430]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.430]                         envir = ns)
[13:20:12.430]                       envir <- sys.frame(frame)
[13:20:12.430]                       master <- NULL
[13:20:12.430]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.430]                         !identical(envir, emptyenv())) {
[13:20:12.430]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.430]                           inherits = FALSE)) {
[13:20:12.430]                           master <- get("master", mode = "list", 
[13:20:12.430]                             envir = envir, inherits = FALSE)
[13:20:12.430]                           if (inherits(master, c("SOCKnode", 
[13:20:12.430]                             "SOCK0node"))) {
[13:20:12.430]                             sendCondition <<- function(cond) {
[13:20:12.430]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.430]                                 success = TRUE)
[13:20:12.430]                               parallel_sendData(master, data)
[13:20:12.430]                             }
[13:20:12.430]                             return(sendCondition)
[13:20:12.430]                           }
[13:20:12.430]                         }
[13:20:12.430]                         frame <- frame + 1L
[13:20:12.430]                         envir <- sys.frame(frame)
[13:20:12.430]                       }
[13:20:12.430]                     }
[13:20:12.430]                     sendCondition <<- function(cond) NULL
[13:20:12.430]                   }
[13:20:12.430]                 })
[13:20:12.430]                 withCallingHandlers({
[13:20:12.430]                   42
[13:20:12.430]                 }, immediateCondition = function(cond) {
[13:20:12.430]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.430]                   sendCondition(cond)
[13:20:12.430]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.430]                   {
[13:20:12.430]                     inherits <- base::inherits
[13:20:12.430]                     invokeRestart <- base::invokeRestart
[13:20:12.430]                     is.null <- base::is.null
[13:20:12.430]                     muffled <- FALSE
[13:20:12.430]                     if (inherits(cond, "message")) {
[13:20:12.430]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.430]                       if (muffled) 
[13:20:12.430]                         invokeRestart("muffleMessage")
[13:20:12.430]                     }
[13:20:12.430]                     else if (inherits(cond, "warning")) {
[13:20:12.430]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.430]                       if (muffled) 
[13:20:12.430]                         invokeRestart("muffleWarning")
[13:20:12.430]                     }
[13:20:12.430]                     else if (inherits(cond, "condition")) {
[13:20:12.430]                       if (!is.null(pattern)) {
[13:20:12.430]                         computeRestarts <- base::computeRestarts
[13:20:12.430]                         grepl <- base::grepl
[13:20:12.430]                         restarts <- computeRestarts(cond)
[13:20:12.430]                         for (restart in restarts) {
[13:20:12.430]                           name <- restart$name
[13:20:12.430]                           if (is.null(name)) 
[13:20:12.430]                             next
[13:20:12.430]                           if (!grepl(pattern, name)) 
[13:20:12.430]                             next
[13:20:12.430]                           invokeRestart(restart)
[13:20:12.430]                           muffled <- TRUE
[13:20:12.430]                           break
[13:20:12.430]                         }
[13:20:12.430]                       }
[13:20:12.430]                     }
[13:20:12.430]                     invisible(muffled)
[13:20:12.430]                   }
[13:20:12.430]                   muffleCondition(cond)
[13:20:12.430]                 })
[13:20:12.430]             }))
[13:20:12.430]             future::FutureResult(value = ...future.value$value, 
[13:20:12.430]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.430]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.430]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.430]                     ...future.globalenv.names))
[13:20:12.430]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.430]         }, condition = base::local({
[13:20:12.430]             c <- base::c
[13:20:12.430]             inherits <- base::inherits
[13:20:12.430]             invokeRestart <- base::invokeRestart
[13:20:12.430]             length <- base::length
[13:20:12.430]             list <- base::list
[13:20:12.430]             seq.int <- base::seq.int
[13:20:12.430]             signalCondition <- base::signalCondition
[13:20:12.430]             sys.calls <- base::sys.calls
[13:20:12.430]             `[[` <- base::`[[`
[13:20:12.430]             `+` <- base::`+`
[13:20:12.430]             `<<-` <- base::`<<-`
[13:20:12.430]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.430]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.430]                   3L)]
[13:20:12.430]             }
[13:20:12.430]             function(cond) {
[13:20:12.430]                 is_error <- inherits(cond, "error")
[13:20:12.430]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.430]                   NULL)
[13:20:12.430]                 if (is_error) {
[13:20:12.430]                   sessionInformation <- function() {
[13:20:12.430]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.430]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.430]                       search = base::search(), system = base::Sys.info())
[13:20:12.430]                   }
[13:20:12.430]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.430]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.430]                     cond$call), session = sessionInformation(), 
[13:20:12.430]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.430]                   signalCondition(cond)
[13:20:12.430]                 }
[13:20:12.430]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.430]                 "immediateCondition"))) {
[13:20:12.430]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.430]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.430]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.430]                   if (TRUE && !signal) {
[13:20:12.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.430]                     {
[13:20:12.430]                       inherits <- base::inherits
[13:20:12.430]                       invokeRestart <- base::invokeRestart
[13:20:12.430]                       is.null <- base::is.null
[13:20:12.430]                       muffled <- FALSE
[13:20:12.430]                       if (inherits(cond, "message")) {
[13:20:12.430]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.430]                         if (muffled) 
[13:20:12.430]                           invokeRestart("muffleMessage")
[13:20:12.430]                       }
[13:20:12.430]                       else if (inherits(cond, "warning")) {
[13:20:12.430]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.430]                         if (muffled) 
[13:20:12.430]                           invokeRestart("muffleWarning")
[13:20:12.430]                       }
[13:20:12.430]                       else if (inherits(cond, "condition")) {
[13:20:12.430]                         if (!is.null(pattern)) {
[13:20:12.430]                           computeRestarts <- base::computeRestarts
[13:20:12.430]                           grepl <- base::grepl
[13:20:12.430]                           restarts <- computeRestarts(cond)
[13:20:12.430]                           for (restart in restarts) {
[13:20:12.430]                             name <- restart$name
[13:20:12.430]                             if (is.null(name)) 
[13:20:12.430]                               next
[13:20:12.430]                             if (!grepl(pattern, name)) 
[13:20:12.430]                               next
[13:20:12.430]                             invokeRestart(restart)
[13:20:12.430]                             muffled <- TRUE
[13:20:12.430]                             break
[13:20:12.430]                           }
[13:20:12.430]                         }
[13:20:12.430]                       }
[13:20:12.430]                       invisible(muffled)
[13:20:12.430]                     }
[13:20:12.430]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.430]                   }
[13:20:12.430]                 }
[13:20:12.430]                 else {
[13:20:12.430]                   if (TRUE) {
[13:20:12.430]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.430]                     {
[13:20:12.430]                       inherits <- base::inherits
[13:20:12.430]                       invokeRestart <- base::invokeRestart
[13:20:12.430]                       is.null <- base::is.null
[13:20:12.430]                       muffled <- FALSE
[13:20:12.430]                       if (inherits(cond, "message")) {
[13:20:12.430]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.430]                         if (muffled) 
[13:20:12.430]                           invokeRestart("muffleMessage")
[13:20:12.430]                       }
[13:20:12.430]                       else if (inherits(cond, "warning")) {
[13:20:12.430]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.430]                         if (muffled) 
[13:20:12.430]                           invokeRestart("muffleWarning")
[13:20:12.430]                       }
[13:20:12.430]                       else if (inherits(cond, "condition")) {
[13:20:12.430]                         if (!is.null(pattern)) {
[13:20:12.430]                           computeRestarts <- base::computeRestarts
[13:20:12.430]                           grepl <- base::grepl
[13:20:12.430]                           restarts <- computeRestarts(cond)
[13:20:12.430]                           for (restart in restarts) {
[13:20:12.430]                             name <- restart$name
[13:20:12.430]                             if (is.null(name)) 
[13:20:12.430]                               next
[13:20:12.430]                             if (!grepl(pattern, name)) 
[13:20:12.430]                               next
[13:20:12.430]                             invokeRestart(restart)
[13:20:12.430]                             muffled <- TRUE
[13:20:12.430]                             break
[13:20:12.430]                           }
[13:20:12.430]                         }
[13:20:12.430]                       }
[13:20:12.430]                       invisible(muffled)
[13:20:12.430]                     }
[13:20:12.430]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.430]                   }
[13:20:12.430]                 }
[13:20:12.430]             }
[13:20:12.430]         }))
[13:20:12.430]     }, error = function(ex) {
[13:20:12.430]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.430]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.430]                 ...future.rng), started = ...future.startTime, 
[13:20:12.430]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.430]             version = "1.8"), class = "FutureResult")
[13:20:12.430]     }, finally = {
[13:20:12.430]         if (!identical(...future.workdir, getwd())) 
[13:20:12.430]             setwd(...future.workdir)
[13:20:12.430]         {
[13:20:12.430]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.430]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.430]             }
[13:20:12.430]             base::options(...future.oldOptions)
[13:20:12.430]             if (.Platform$OS.type == "windows") {
[13:20:12.430]                 old_names <- names(...future.oldEnvVars)
[13:20:12.430]                 envs <- base::Sys.getenv()
[13:20:12.430]                 names <- names(envs)
[13:20:12.430]                 common <- intersect(names, old_names)
[13:20:12.430]                 added <- setdiff(names, old_names)
[13:20:12.430]                 removed <- setdiff(old_names, names)
[13:20:12.430]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.430]                   envs[common]]
[13:20:12.430]                 NAMES <- toupper(changed)
[13:20:12.430]                 args <- list()
[13:20:12.430]                 for (kk in seq_along(NAMES)) {
[13:20:12.430]                   name <- changed[[kk]]
[13:20:12.430]                   NAME <- NAMES[[kk]]
[13:20:12.430]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.430]                     next
[13:20:12.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.430]                 }
[13:20:12.430]                 NAMES <- toupper(added)
[13:20:12.430]                 for (kk in seq_along(NAMES)) {
[13:20:12.430]                   name <- added[[kk]]
[13:20:12.430]                   NAME <- NAMES[[kk]]
[13:20:12.430]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.430]                     next
[13:20:12.430]                   args[[name]] <- ""
[13:20:12.430]                 }
[13:20:12.430]                 NAMES <- toupper(removed)
[13:20:12.430]                 for (kk in seq_along(NAMES)) {
[13:20:12.430]                   name <- removed[[kk]]
[13:20:12.430]                   NAME <- NAMES[[kk]]
[13:20:12.430]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.430]                     next
[13:20:12.430]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.430]                 }
[13:20:12.430]                 if (length(args) > 0) 
[13:20:12.430]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.430]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.430]             }
[13:20:12.430]             else {
[13:20:12.430]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.430]             }
[13:20:12.430]             {
[13:20:12.430]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.430]                   0L) {
[13:20:12.430]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.430]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.430]                   base::options(opts)
[13:20:12.430]                 }
[13:20:12.430]                 {
[13:20:12.430]                   {
[13:20:12.430]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.430]                     NULL
[13:20:12.430]                   }
[13:20:12.430]                   options(future.plan = NULL)
[13:20:12.430]                   if (is.na(NA_character_)) 
[13:20:12.430]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.430]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.430]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.430]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.430]                     envir = parent.frame()) 
[13:20:12.430]                   {
[13:20:12.430]                     if (is.function(workers)) 
[13:20:12.430]                       workers <- workers()
[13:20:12.430]                     workers <- structure(as.integer(workers), 
[13:20:12.430]                       class = class(workers))
[13:20:12.430]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.430]                       workers >= 1)
[13:20:12.430]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.430]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.430]                     }
[13:20:12.430]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.430]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.430]                       envir = envir)
[13:20:12.430]                     if (!future$lazy) 
[13:20:12.430]                       future <- run(future)
[13:20:12.430]                     invisible(future)
[13:20:12.430]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.430]                 }
[13:20:12.430]             }
[13:20:12.430]         }
[13:20:12.430]     })
[13:20:12.430]     if (TRUE) {
[13:20:12.430]         base::sink(type = "output", split = FALSE)
[13:20:12.430]         if (TRUE) {
[13:20:12.430]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.430]         }
[13:20:12.430]         else {
[13:20:12.430]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.430]         }
[13:20:12.430]         base::close(...future.stdout)
[13:20:12.430]         ...future.stdout <- NULL
[13:20:12.430]     }
[13:20:12.430]     ...future.result$conditions <- ...future.conditions
[13:20:12.430]     ...future.result$finished <- base::Sys.time()
[13:20:12.430]     ...future.result
[13:20:12.430] }
[13:20:12.433] MultisessionFuture started
[13:20:12.434] - Launch lazy future ... done
[13:20:12.434] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.445] result() for ClusterFuture ...
[13:20:12.445] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.445] - Validating connection of MultisessionFuture
[13:20:12.482] - received message: FutureResult
[13:20:12.482] - Received FutureResult
[13:20:12.482] - Erased future from FutureRegistry
[13:20:12.482] result() for ClusterFuture ...
[13:20:12.482] - result already collected: FutureResult
[13:20:12.483] result() for ClusterFuture ... done
[13:20:12.483] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.483] result() for ClusterFuture ... done
[13:20:12.483] result() for ClusterFuture ...
[13:20:12.483] - result already collected: FutureResult
[13:20:12.483] result() for ClusterFuture ... done
[13:20:12.483] getGlobalsAndPackages() ...
[13:20:12.483] Searching for globals...
[13:20:12.484] - globals found: [1] ‘{’
[13:20:12.484] Searching for globals ... DONE
[13:20:12.484] Resolving globals: FALSE
[13:20:12.485] 
[13:20:12.485] 
[13:20:12.485] getGlobalsAndPackages() ... DONE
[13:20:12.485] run() for ‘Future’ ...
[13:20:12.485] - state: ‘created’
[13:20:12.485] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:12.500] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.500] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:12.500]   - Field: ‘node’
[13:20:12.501]   - Field: ‘label’
[13:20:12.501]   - Field: ‘local’
[13:20:12.501]   - Field: ‘owner’
[13:20:12.501]   - Field: ‘envir’
[13:20:12.501]   - Field: ‘workers’
[13:20:12.501]   - Field: ‘packages’
[13:20:12.501]   - Field: ‘gc’
[13:20:12.501]   - Field: ‘conditions’
[13:20:12.501]   - Field: ‘persistent’
[13:20:12.501]   - Field: ‘expr’
[13:20:12.502]   - Field: ‘uuid’
[13:20:12.502]   - Field: ‘seed’
[13:20:12.502]   - Field: ‘version’
[13:20:12.502]   - Field: ‘result’
[13:20:12.502]   - Field: ‘asynchronous’
[13:20:12.502]   - Field: ‘calls’
[13:20:12.502]   - Field: ‘globals’
[13:20:12.502]   - Field: ‘stdout’
[13:20:12.502]   - Field: ‘earlySignal’
[13:20:12.502]   - Field: ‘lazy’
[13:20:12.502]   - Field: ‘state’
[13:20:12.503] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:12.503] - Launch lazy future ...
[13:20:12.503] Packages needed by the future expression (n = 0): <none>
[13:20:12.503] Packages needed by future strategies (n = 0): <none>
[13:20:12.504] {
[13:20:12.504]     {
[13:20:12.504]         {
[13:20:12.504]             ...future.startTime <- base::Sys.time()
[13:20:12.504]             {
[13:20:12.504]                 {
[13:20:12.504]                   {
[13:20:12.504]                     {
[13:20:12.504]                       base::local({
[13:20:12.504]                         has_future <- base::requireNamespace("future", 
[13:20:12.504]                           quietly = TRUE)
[13:20:12.504]                         if (has_future) {
[13:20:12.504]                           ns <- base::getNamespace("future")
[13:20:12.504]                           version <- ns[[".package"]][["version"]]
[13:20:12.504]                           if (is.null(version)) 
[13:20:12.504]                             version <- utils::packageVersion("future")
[13:20:12.504]                         }
[13:20:12.504]                         else {
[13:20:12.504]                           version <- NULL
[13:20:12.504]                         }
[13:20:12.504]                         if (!has_future || version < "1.8.0") {
[13:20:12.504]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:12.504]                             "", base::R.version$version.string), 
[13:20:12.504]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:12.504]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:12.504]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:12.504]                               "release", "version")], collapse = " "), 
[13:20:12.504]                             hostname = base::Sys.info()[["nodename"]])
[13:20:12.504]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:12.504]                             info)
[13:20:12.504]                           info <- base::paste(info, collapse = "; ")
[13:20:12.504]                           if (!has_future) {
[13:20:12.504]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:12.504]                               info)
[13:20:12.504]                           }
[13:20:12.504]                           else {
[13:20:12.504]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:12.504]                               info, version)
[13:20:12.504]                           }
[13:20:12.504]                           base::stop(msg)
[13:20:12.504]                         }
[13:20:12.504]                       })
[13:20:12.504]                     }
[13:20:12.504]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:12.504]                     base::options(mc.cores = 1L)
[13:20:12.504]                   }
[13:20:12.504]                   options(future.plan = NULL)
[13:20:12.504]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.504]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:12.504]                 }
[13:20:12.504]                 ...future.workdir <- getwd()
[13:20:12.504]             }
[13:20:12.504]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:12.504]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:12.504]         }
[13:20:12.504]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:12.504]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:12.504]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:12.504]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:12.504]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:12.504]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:12.504]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:12.504]             base::names(...future.oldOptions))
[13:20:12.504]     }
[13:20:12.504]     if (FALSE) {
[13:20:12.504]     }
[13:20:12.504]     else {
[13:20:12.504]         if (TRUE) {
[13:20:12.504]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:12.504]                 open = "w")
[13:20:12.504]         }
[13:20:12.504]         else {
[13:20:12.504]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:12.504]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:12.504]         }
[13:20:12.504]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:12.504]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:12.504]             base::sink(type = "output", split = FALSE)
[13:20:12.504]             base::close(...future.stdout)
[13:20:12.504]         }, add = TRUE)
[13:20:12.504]     }
[13:20:12.504]     ...future.frame <- base::sys.nframe()
[13:20:12.504]     ...future.conditions <- base::list()
[13:20:12.504]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:12.504]     if (FALSE) {
[13:20:12.504]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:12.504]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:12.504]     }
[13:20:12.504]     ...future.result <- base::tryCatch({
[13:20:12.504]         base::withCallingHandlers({
[13:20:12.504]             ...future.value <- base::withVisible(base::local({
[13:20:12.504]                 ...future.makeSendCondition <- local({
[13:20:12.504]                   sendCondition <- NULL
[13:20:12.504]                   function(frame = 1L) {
[13:20:12.504]                     if (is.function(sendCondition)) 
[13:20:12.504]                       return(sendCondition)
[13:20:12.504]                     ns <- getNamespace("parallel")
[13:20:12.504]                     if (exists("sendData", mode = "function", 
[13:20:12.504]                       envir = ns)) {
[13:20:12.504]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:12.504]                         envir = ns)
[13:20:12.504]                       envir <- sys.frame(frame)
[13:20:12.504]                       master <- NULL
[13:20:12.504]                       while (!identical(envir, .GlobalEnv) && 
[13:20:12.504]                         !identical(envir, emptyenv())) {
[13:20:12.504]                         if (exists("master", mode = "list", envir = envir, 
[13:20:12.504]                           inherits = FALSE)) {
[13:20:12.504]                           master <- get("master", mode = "list", 
[13:20:12.504]                             envir = envir, inherits = FALSE)
[13:20:12.504]                           if (inherits(master, c("SOCKnode", 
[13:20:12.504]                             "SOCK0node"))) {
[13:20:12.504]                             sendCondition <<- function(cond) {
[13:20:12.504]                               data <- list(type = "VALUE", value = cond, 
[13:20:12.504]                                 success = TRUE)
[13:20:12.504]                               parallel_sendData(master, data)
[13:20:12.504]                             }
[13:20:12.504]                             return(sendCondition)
[13:20:12.504]                           }
[13:20:12.504]                         }
[13:20:12.504]                         frame <- frame + 1L
[13:20:12.504]                         envir <- sys.frame(frame)
[13:20:12.504]                       }
[13:20:12.504]                     }
[13:20:12.504]                     sendCondition <<- function(cond) NULL
[13:20:12.504]                   }
[13:20:12.504]                 })
[13:20:12.504]                 withCallingHandlers({
[13:20:12.504]                   {
[13:20:12.504]                     42
[13:20:12.504]                   }
[13:20:12.504]                 }, immediateCondition = function(cond) {
[13:20:12.504]                   sendCondition <- ...future.makeSendCondition()
[13:20:12.504]                   sendCondition(cond)
[13:20:12.504]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.504]                   {
[13:20:12.504]                     inherits <- base::inherits
[13:20:12.504]                     invokeRestart <- base::invokeRestart
[13:20:12.504]                     is.null <- base::is.null
[13:20:12.504]                     muffled <- FALSE
[13:20:12.504]                     if (inherits(cond, "message")) {
[13:20:12.504]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:12.504]                       if (muffled) 
[13:20:12.504]                         invokeRestart("muffleMessage")
[13:20:12.504]                     }
[13:20:12.504]                     else if (inherits(cond, "warning")) {
[13:20:12.504]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:12.504]                       if (muffled) 
[13:20:12.504]                         invokeRestart("muffleWarning")
[13:20:12.504]                     }
[13:20:12.504]                     else if (inherits(cond, "condition")) {
[13:20:12.504]                       if (!is.null(pattern)) {
[13:20:12.504]                         computeRestarts <- base::computeRestarts
[13:20:12.504]                         grepl <- base::grepl
[13:20:12.504]                         restarts <- computeRestarts(cond)
[13:20:12.504]                         for (restart in restarts) {
[13:20:12.504]                           name <- restart$name
[13:20:12.504]                           if (is.null(name)) 
[13:20:12.504]                             next
[13:20:12.504]                           if (!grepl(pattern, name)) 
[13:20:12.504]                             next
[13:20:12.504]                           invokeRestart(restart)
[13:20:12.504]                           muffled <- TRUE
[13:20:12.504]                           break
[13:20:12.504]                         }
[13:20:12.504]                       }
[13:20:12.504]                     }
[13:20:12.504]                     invisible(muffled)
[13:20:12.504]                   }
[13:20:12.504]                   muffleCondition(cond)
[13:20:12.504]                 })
[13:20:12.504]             }))
[13:20:12.504]             future::FutureResult(value = ...future.value$value, 
[13:20:12.504]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.504]                   ...future.rng), globalenv = if (FALSE) 
[13:20:12.504]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:12.504]                     ...future.globalenv.names))
[13:20:12.504]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:12.504]         }, condition = base::local({
[13:20:12.504]             c <- base::c
[13:20:12.504]             inherits <- base::inherits
[13:20:12.504]             invokeRestart <- base::invokeRestart
[13:20:12.504]             length <- base::length
[13:20:12.504]             list <- base::list
[13:20:12.504]             seq.int <- base::seq.int
[13:20:12.504]             signalCondition <- base::signalCondition
[13:20:12.504]             sys.calls <- base::sys.calls
[13:20:12.504]             `[[` <- base::`[[`
[13:20:12.504]             `+` <- base::`+`
[13:20:12.504]             `<<-` <- base::`<<-`
[13:20:12.504]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:12.504]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:12.504]                   3L)]
[13:20:12.504]             }
[13:20:12.504]             function(cond) {
[13:20:12.504]                 is_error <- inherits(cond, "error")
[13:20:12.504]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:12.504]                   NULL)
[13:20:12.504]                 if (is_error) {
[13:20:12.504]                   sessionInformation <- function() {
[13:20:12.504]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:12.504]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:12.504]                       search = base::search(), system = base::Sys.info())
[13:20:12.504]                   }
[13:20:12.504]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.504]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:12.504]                     cond$call), session = sessionInformation(), 
[13:20:12.504]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:12.504]                   signalCondition(cond)
[13:20:12.504]                 }
[13:20:12.504]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:12.504]                 "immediateCondition"))) {
[13:20:12.504]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:12.504]                   ...future.conditions[[length(...future.conditions) + 
[13:20:12.504]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:12.504]                   if (TRUE && !signal) {
[13:20:12.504]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.504]                     {
[13:20:12.504]                       inherits <- base::inherits
[13:20:12.504]                       invokeRestart <- base::invokeRestart
[13:20:12.504]                       is.null <- base::is.null
[13:20:12.504]                       muffled <- FALSE
[13:20:12.504]                       if (inherits(cond, "message")) {
[13:20:12.504]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.504]                         if (muffled) 
[13:20:12.504]                           invokeRestart("muffleMessage")
[13:20:12.504]                       }
[13:20:12.504]                       else if (inherits(cond, "warning")) {
[13:20:12.504]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.504]                         if (muffled) 
[13:20:12.504]                           invokeRestart("muffleWarning")
[13:20:12.504]                       }
[13:20:12.504]                       else if (inherits(cond, "condition")) {
[13:20:12.504]                         if (!is.null(pattern)) {
[13:20:12.504]                           computeRestarts <- base::computeRestarts
[13:20:12.504]                           grepl <- base::grepl
[13:20:12.504]                           restarts <- computeRestarts(cond)
[13:20:12.504]                           for (restart in restarts) {
[13:20:12.504]                             name <- restart$name
[13:20:12.504]                             if (is.null(name)) 
[13:20:12.504]                               next
[13:20:12.504]                             if (!grepl(pattern, name)) 
[13:20:12.504]                               next
[13:20:12.504]                             invokeRestart(restart)
[13:20:12.504]                             muffled <- TRUE
[13:20:12.504]                             break
[13:20:12.504]                           }
[13:20:12.504]                         }
[13:20:12.504]                       }
[13:20:12.504]                       invisible(muffled)
[13:20:12.504]                     }
[13:20:12.504]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.504]                   }
[13:20:12.504]                 }
[13:20:12.504]                 else {
[13:20:12.504]                   if (TRUE) {
[13:20:12.504]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:12.504]                     {
[13:20:12.504]                       inherits <- base::inherits
[13:20:12.504]                       invokeRestart <- base::invokeRestart
[13:20:12.504]                       is.null <- base::is.null
[13:20:12.504]                       muffled <- FALSE
[13:20:12.504]                       if (inherits(cond, "message")) {
[13:20:12.504]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:12.504]                         if (muffled) 
[13:20:12.504]                           invokeRestart("muffleMessage")
[13:20:12.504]                       }
[13:20:12.504]                       else if (inherits(cond, "warning")) {
[13:20:12.504]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:12.504]                         if (muffled) 
[13:20:12.504]                           invokeRestart("muffleWarning")
[13:20:12.504]                       }
[13:20:12.504]                       else if (inherits(cond, "condition")) {
[13:20:12.504]                         if (!is.null(pattern)) {
[13:20:12.504]                           computeRestarts <- base::computeRestarts
[13:20:12.504]                           grepl <- base::grepl
[13:20:12.504]                           restarts <- computeRestarts(cond)
[13:20:12.504]                           for (restart in restarts) {
[13:20:12.504]                             name <- restart$name
[13:20:12.504]                             if (is.null(name)) 
[13:20:12.504]                               next
[13:20:12.504]                             if (!grepl(pattern, name)) 
[13:20:12.504]                               next
[13:20:12.504]                             invokeRestart(restart)
[13:20:12.504]                             muffled <- TRUE
[13:20:12.504]                             break
[13:20:12.504]                           }
[13:20:12.504]                         }
[13:20:12.504]                       }
[13:20:12.504]                       invisible(muffled)
[13:20:12.504]                     }
[13:20:12.504]                     muffleCondition(cond, pattern = "^muffle")
[13:20:12.504]                   }
[13:20:12.504]                 }
[13:20:12.504]             }
[13:20:12.504]         }))
[13:20:12.504]     }, error = function(ex) {
[13:20:12.504]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:12.504]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:12.504]                 ...future.rng), started = ...future.startTime, 
[13:20:12.504]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:12.504]             version = "1.8"), class = "FutureResult")
[13:20:12.504]     }, finally = {
[13:20:12.504]         if (!identical(...future.workdir, getwd())) 
[13:20:12.504]             setwd(...future.workdir)
[13:20:12.504]         {
[13:20:12.504]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:12.504]                 ...future.oldOptions$nwarnings <- NULL
[13:20:12.504]             }
[13:20:12.504]             base::options(...future.oldOptions)
[13:20:12.504]             if (.Platform$OS.type == "windows") {
[13:20:12.504]                 old_names <- names(...future.oldEnvVars)
[13:20:12.504]                 envs <- base::Sys.getenv()
[13:20:12.504]                 names <- names(envs)
[13:20:12.504]                 common <- intersect(names, old_names)
[13:20:12.504]                 added <- setdiff(names, old_names)
[13:20:12.504]                 removed <- setdiff(old_names, names)
[13:20:12.504]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:12.504]                   envs[common]]
[13:20:12.504]                 NAMES <- toupper(changed)
[13:20:12.504]                 args <- list()
[13:20:12.504]                 for (kk in seq_along(NAMES)) {
[13:20:12.504]                   name <- changed[[kk]]
[13:20:12.504]                   NAME <- NAMES[[kk]]
[13:20:12.504]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.504]                     next
[13:20:12.504]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.504]                 }
[13:20:12.504]                 NAMES <- toupper(added)
[13:20:12.504]                 for (kk in seq_along(NAMES)) {
[13:20:12.504]                   name <- added[[kk]]
[13:20:12.504]                   NAME <- NAMES[[kk]]
[13:20:12.504]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.504]                     next
[13:20:12.504]                   args[[name]] <- ""
[13:20:12.504]                 }
[13:20:12.504]                 NAMES <- toupper(removed)
[13:20:12.504]                 for (kk in seq_along(NAMES)) {
[13:20:12.504]                   name <- removed[[kk]]
[13:20:12.504]                   NAME <- NAMES[[kk]]
[13:20:12.504]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:12.504]                     next
[13:20:12.504]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:12.504]                 }
[13:20:12.504]                 if (length(args) > 0) 
[13:20:12.504]                   base::do.call(base::Sys.setenv, args = args)
[13:20:12.504]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:12.504]             }
[13:20:12.504]             else {
[13:20:12.504]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:12.504]             }
[13:20:12.504]             {
[13:20:12.504]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:12.504]                   0L) {
[13:20:12.504]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:12.504]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:12.504]                   base::options(opts)
[13:20:12.504]                 }
[13:20:12.504]                 {
[13:20:12.504]                   {
[13:20:12.504]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:12.504]                     NULL
[13:20:12.504]                   }
[13:20:12.504]                   options(future.plan = NULL)
[13:20:12.504]                   if (is.na(NA_character_)) 
[13:20:12.504]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:12.504]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:12.504]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:12.504]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:12.504]                     envir = parent.frame()) 
[13:20:12.504]                   {
[13:20:12.504]                     if (is.function(workers)) 
[13:20:12.504]                       workers <- workers()
[13:20:12.504]                     workers <- structure(as.integer(workers), 
[13:20:12.504]                       class = class(workers))
[13:20:12.504]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:12.504]                       workers >= 1)
[13:20:12.504]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:12.504]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:12.504]                     }
[13:20:12.504]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:12.504]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:12.504]                       envir = envir)
[13:20:12.504]                     if (!future$lazy) 
[13:20:12.504]                       future <- run(future)
[13:20:12.504]                     invisible(future)
[13:20:12.504]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:12.504]                 }
[13:20:12.504]             }
[13:20:12.504]         }
[13:20:12.504]     })
[13:20:12.504]     if (TRUE) {
[13:20:12.504]         base::sink(type = "output", split = FALSE)
[13:20:12.504]         if (TRUE) {
[13:20:12.504]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:12.504]         }
[13:20:12.504]         else {
[13:20:12.504]             ...future.result["stdout"] <- base::list(NULL)
[13:20:12.504]         }
[13:20:12.504]         base::close(...future.stdout)
[13:20:12.504]         ...future.stdout <- NULL
[13:20:12.504]     }
[13:20:12.504]     ...future.result$conditions <- ...future.conditions
[13:20:12.504]     ...future.result$finished <- base::Sys.time()
[13:20:12.504]     ...future.result
[13:20:12.504] }
[13:20:12.507] MultisessionFuture started
[13:20:12.507] - Launch lazy future ... done
[13:20:12.507] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 39777874-bc1a-5d5d-1060-fd9a1e35331b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:12.518] result() for ClusterFuture ...
[13:20:12.518] receiveMessageFromWorker() for ClusterFuture ...
[13:20:12.518] - Validating connection of MultisessionFuture
[13:20:12.554] - received message: FutureResult
[13:20:12.554] - Received FutureResult
[13:20:12.554] - Erased future from FutureRegistry
[13:20:12.554] result() for ClusterFuture ...
[13:20:12.554] - result already collected: FutureResult
[13:20:12.554] result() for ClusterFuture ... done
[13:20:12.555] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:12.555] result() for ClusterFuture ... done
[13:20:12.555] result() for ClusterFuture ...
[13:20:12.555] - result already collected: FutureResult
[13:20:12.555] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[13:20:12.556] plan(): Setting new future strategy stack:
[13:20:12.556] List of future strategies:
[13:20:12.556] 1. FutureStrategy:
[13:20:12.556]    - args: function (..., envir = parent.frame())
[13:20:12.556]    - tweaked: FALSE
[13:20:12.556]    - call: future::plan(oplan)
[13:20:12.557] plan(): nbrOfWorkers() = 1
> 
