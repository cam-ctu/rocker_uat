
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:11.806] plan(): Setting new future strategy stack:
[16:12:11.807] List of future strategies:
[16:12:11.807] 1. sequential:
[16:12:11.807]    - args: function (..., envir = parent.frame())
[16:12:11.807]    - tweaked: FALSE
[16:12:11.807]    - call: future::plan("sequential")
[16:12:11.820] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[16:12:11.831] getGlobalsAndPackages() ...
[16:12:11.831] 
[16:12:11.832] - globals: [0] <none>
[16:12:11.832] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 001b0eb5-b92c-fd7e-92bb-54987c329765
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[16:12:11.833] run() for ‘Future’ ...
[16:12:11.833] - state: ‘created’
[16:12:11.834] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[16:12:11.837] plan(): Setting new future strategy stack:
[16:12:11.837] List of future strategies:
[16:12:11.837] 1. future:
[16:12:11.837]    - args: function (...)
[16:12:11.837]    - tweaked: FALSE
[16:12:11.837]    - call: plan(foo)
[16:12:11.848] plan(): nbrOfWorkers() = Inf
> f <- Future()
[16:12:11.848] getGlobalsAndPackages() ...
[16:12:11.848] 
[16:12:11.849] - globals: [0] <none>
[16:12:11.849] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[16:12:11.849] Packages needed by the future expression (n = 0): <none>
[16:12:11.849] Packages needed by future strategies (n = 0): <none>
[16:12:11.853] {
[16:12:11.853]     {
[16:12:11.853]         {
[16:12:11.853]             ...future.startTime <- base::Sys.time()
[16:12:11.853]             {
[16:12:11.853]                 {
[16:12:11.853]                   {
[16:12:11.853]                     base::local({
[16:12:11.853]                       has_future <- base::requireNamespace("future", 
[16:12:11.853]                         quietly = TRUE)
[16:12:11.853]                       if (has_future) {
[16:12:11.853]                         ns <- base::getNamespace("future")
[16:12:11.853]                         version <- ns[[".package"]][["version"]]
[16:12:11.853]                         if (is.null(version)) 
[16:12:11.853]                           version <- utils::packageVersion("future")
[16:12:11.853]                       }
[16:12:11.853]                       else {
[16:12:11.853]                         version <- NULL
[16:12:11.853]                       }
[16:12:11.853]                       if (!has_future || version < "1.8.0") {
[16:12:11.853]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:11.853]                           "", base::R.version$version.string), 
[16:12:11.853]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:11.853]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:11.853]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:11.853]                             "release", "version")], collapse = " "), 
[16:12:11.853]                           hostname = base::Sys.info()[["nodename"]])
[16:12:11.853]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:11.853]                           info)
[16:12:11.853]                         info <- base::paste(info, collapse = "; ")
[16:12:11.853]                         if (!has_future) {
[16:12:11.853]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:11.853]                             info)
[16:12:11.853]                         }
[16:12:11.853]                         else {
[16:12:11.853]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:11.853]                             info, version)
[16:12:11.853]                         }
[16:12:11.853]                         base::stop(msg)
[16:12:11.853]                       }
[16:12:11.853]                     })
[16:12:11.853]                   }
[16:12:11.853]                   options(future.plan = NULL)
[16:12:11.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:11.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:11.853]                 }
[16:12:11.853]                 ...future.workdir <- getwd()
[16:12:11.853]             }
[16:12:11.853]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:11.853]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:11.853]         }
[16:12:11.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:11.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:11.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:11.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:11.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:11.853]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:11.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:11.853]             base::names(...future.oldOptions))
[16:12:11.853]     }
[16:12:11.853]     if (FALSE) {
[16:12:11.853]     }
[16:12:11.853]     else {
[16:12:11.853]         if (TRUE) {
[16:12:11.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:11.853]                 open = "w")
[16:12:11.853]         }
[16:12:11.853]         else {
[16:12:11.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:11.853]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:11.853]         }
[16:12:11.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:11.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:11.853]             base::sink(type = "output", split = FALSE)
[16:12:11.853]             base::close(...future.stdout)
[16:12:11.853]         }, add = TRUE)
[16:12:11.853]     }
[16:12:11.853]     ...future.frame <- base::sys.nframe()
[16:12:11.853]     ...future.conditions <- base::list()
[16:12:11.853]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:11.853]     if (FALSE) {
[16:12:11.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:11.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:11.853]     }
[16:12:11.853]     ...future.result <- base::tryCatch({
[16:12:11.853]         base::withCallingHandlers({
[16:12:11.853]             ...future.value <- base::withVisible(base::local(NULL))
[16:12:11.853]             future::FutureResult(value = ...future.value$value, 
[16:12:11.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:11.853]                   ...future.rng), globalenv = if (FALSE) 
[16:12:11.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:11.853]                     ...future.globalenv.names))
[16:12:11.853]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:11.853]         }, condition = base::local({
[16:12:11.853]             c <- base::c
[16:12:11.853]             inherits <- base::inherits
[16:12:11.853]             invokeRestart <- base::invokeRestart
[16:12:11.853]             length <- base::length
[16:12:11.853]             list <- base::list
[16:12:11.853]             seq.int <- base::seq.int
[16:12:11.853]             signalCondition <- base::signalCondition
[16:12:11.853]             sys.calls <- base::sys.calls
[16:12:11.853]             `[[` <- base::`[[`
[16:12:11.853]             `+` <- base::`+`
[16:12:11.853]             `<<-` <- base::`<<-`
[16:12:11.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:11.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:11.853]                   3L)]
[16:12:11.853]             }
[16:12:11.853]             function(cond) {
[16:12:11.853]                 is_error <- inherits(cond, "error")
[16:12:11.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:11.853]                   NULL)
[16:12:11.853]                 if (is_error) {
[16:12:11.853]                   sessionInformation <- function() {
[16:12:11.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:11.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:11.853]                       search = base::search(), system = base::Sys.info())
[16:12:11.853]                   }
[16:12:11.853]                   ...future.conditions[[length(...future.conditions) + 
[16:12:11.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:11.853]                     cond$call), session = sessionInformation(), 
[16:12:11.853]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:11.853]                   signalCondition(cond)
[16:12:11.853]                 }
[16:12:11.853]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[16:12:11.853]                   signal <- FALSE && inherits(cond, character(0))
[16:12:11.853]                   ...future.conditions[[length(...future.conditions) + 
[16:12:11.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:11.853]                   if (FALSE && !signal) {
[16:12:11.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:11.853]                     {
[16:12:11.853]                       inherits <- base::inherits
[16:12:11.853]                       invokeRestart <- base::invokeRestart
[16:12:11.853]                       is.null <- base::is.null
[16:12:11.853]                       muffled <- FALSE
[16:12:11.853]                       if (inherits(cond, "message")) {
[16:12:11.853]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:11.853]                         if (muffled) 
[16:12:11.853]                           invokeRestart("muffleMessage")
[16:12:11.853]                       }
[16:12:11.853]                       else if (inherits(cond, "warning")) {
[16:12:11.853]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:11.853]                         if (muffled) 
[16:12:11.853]                           invokeRestart("muffleWarning")
[16:12:11.853]                       }
[16:12:11.853]                       else if (inherits(cond, "condition")) {
[16:12:11.853]                         if (!is.null(pattern)) {
[16:12:11.853]                           computeRestarts <- base::computeRestarts
[16:12:11.853]                           grepl <- base::grepl
[16:12:11.853]                           restarts <- computeRestarts(cond)
[16:12:11.853]                           for (restart in restarts) {
[16:12:11.853]                             name <- restart$name
[16:12:11.853]                             if (is.null(name)) 
[16:12:11.853]                               next
[16:12:11.853]                             if (!grepl(pattern, name)) 
[16:12:11.853]                               next
[16:12:11.853]                             invokeRestart(restart)
[16:12:11.853]                             muffled <- TRUE
[16:12:11.853]                             break
[16:12:11.853]                           }
[16:12:11.853]                         }
[16:12:11.853]                       }
[16:12:11.853]                       invisible(muffled)
[16:12:11.853]                     }
[16:12:11.853]                     muffleCondition(cond, pattern = "^muffle")
[16:12:11.853]                   }
[16:12:11.853]                 }
[16:12:11.853]                 else {
[16:12:11.853]                   if (TRUE) {
[16:12:11.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:11.853]                     {
[16:12:11.853]                       inherits <- base::inherits
[16:12:11.853]                       invokeRestart <- base::invokeRestart
[16:12:11.853]                       is.null <- base::is.null
[16:12:11.853]                       muffled <- FALSE
[16:12:11.853]                       if (inherits(cond, "message")) {
[16:12:11.853]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:11.853]                         if (muffled) 
[16:12:11.853]                           invokeRestart("muffleMessage")
[16:12:11.853]                       }
[16:12:11.853]                       else if (inherits(cond, "warning")) {
[16:12:11.853]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:11.853]                         if (muffled) 
[16:12:11.853]                           invokeRestart("muffleWarning")
[16:12:11.853]                       }
[16:12:11.853]                       else if (inherits(cond, "condition")) {
[16:12:11.853]                         if (!is.null(pattern)) {
[16:12:11.853]                           computeRestarts <- base::computeRestarts
[16:12:11.853]                           grepl <- base::grepl
[16:12:11.853]                           restarts <- computeRestarts(cond)
[16:12:11.853]                           for (restart in restarts) {
[16:12:11.853]                             name <- restart$name
[16:12:11.853]                             if (is.null(name)) 
[16:12:11.853]                               next
[16:12:11.853]                             if (!grepl(pattern, name)) 
[16:12:11.853]                               next
[16:12:11.853]                             invokeRestart(restart)
[16:12:11.853]                             muffled <- TRUE
[16:12:11.853]                             break
[16:12:11.853]                           }
[16:12:11.853]                         }
[16:12:11.853]                       }
[16:12:11.853]                       invisible(muffled)
[16:12:11.853]                     }
[16:12:11.853]                     muffleCondition(cond, pattern = "^muffle")
[16:12:11.853]                   }
[16:12:11.853]                 }
[16:12:11.853]             }
[16:12:11.853]         }))
[16:12:11.853]     }, error = function(ex) {
[16:12:11.853]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:11.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:11.853]                 ...future.rng), started = ...future.startTime, 
[16:12:11.853]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:11.853]             version = "1.8"), class = "FutureResult")
[16:12:11.853]     }, finally = {
[16:12:11.853]         if (!identical(...future.workdir, getwd())) 
[16:12:11.853]             setwd(...future.workdir)
[16:12:11.853]         {
[16:12:11.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:11.853]                 ...future.oldOptions$nwarnings <- NULL
[16:12:11.853]             }
[16:12:11.853]             base::options(...future.oldOptions)
[16:12:11.853]             if (.Platform$OS.type == "windows") {
[16:12:11.853]                 old_names <- names(...future.oldEnvVars)
[16:12:11.853]                 envs <- base::Sys.getenv()
[16:12:11.853]                 names <- names(envs)
[16:12:11.853]                 common <- intersect(names, old_names)
[16:12:11.853]                 added <- setdiff(names, old_names)
[16:12:11.853]                 removed <- setdiff(old_names, names)
[16:12:11.853]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:11.853]                   envs[common]]
[16:12:11.853]                 NAMES <- toupper(changed)
[16:12:11.853]                 args <- list()
[16:12:11.853]                 for (kk in seq_along(NAMES)) {
[16:12:11.853]                   name <- changed[[kk]]
[16:12:11.853]                   NAME <- NAMES[[kk]]
[16:12:11.853]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.853]                     next
[16:12:11.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:11.853]                 }
[16:12:11.853]                 NAMES <- toupper(added)
[16:12:11.853]                 for (kk in seq_along(NAMES)) {
[16:12:11.853]                   name <- added[[kk]]
[16:12:11.853]                   NAME <- NAMES[[kk]]
[16:12:11.853]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.853]                     next
[16:12:11.853]                   args[[name]] <- ""
[16:12:11.853]                 }
[16:12:11.853]                 NAMES <- toupper(removed)
[16:12:11.853]                 for (kk in seq_along(NAMES)) {
[16:12:11.853]                   name <- removed[[kk]]
[16:12:11.853]                   NAME <- NAMES[[kk]]
[16:12:11.853]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.853]                     next
[16:12:11.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:11.853]                 }
[16:12:11.853]                 if (length(args) > 0) 
[16:12:11.853]                   base::do.call(base::Sys.setenv, args = args)
[16:12:11.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:11.853]             }
[16:12:11.853]             else {
[16:12:11.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:11.853]             }
[16:12:11.853]             {
[16:12:11.853]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:11.853]                   0L) {
[16:12:11.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:11.853]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:11.853]                   base::options(opts)
[16:12:11.853]                 }
[16:12:11.853]                 {
[16:12:11.853]                   NULL
[16:12:11.853]                   options(future.plan = NULL)
[16:12:11.853]                   if (is.na(NA_character_)) 
[16:12:11.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:11.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:11.853]                   future::plan(list(function (...) 
[16:12:11.853]                   {
[16:12:11.853]                     Future(1)
[16:12:11.853]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:11.853]                 }
[16:12:11.853]             }
[16:12:11.853]         }
[16:12:11.853]     })
[16:12:11.853]     if (TRUE) {
[16:12:11.853]         base::sink(type = "output", split = FALSE)
[16:12:11.853]         if (TRUE) {
[16:12:11.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:11.853]         }
[16:12:11.853]         else {
[16:12:11.853]             ...future.result["stdout"] <- base::list(NULL)
[16:12:11.853]         }
[16:12:11.853]         base::close(...future.stdout)
[16:12:11.853]         ...future.stdout <- NULL
[16:12:11.853]     }
[16:12:11.853]     ...future.result$conditions <- ...future.conditions
[16:12:11.853]     ...future.result$finished <- base::Sys.time()
[16:12:11.853]     ...future.result
[16:12:11.853] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(list(function (...) 
                  {
                    Future(1)
                  }), .cleanup = FALSE, .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[16:12:11.863] getGlobalsAndPackages() ...
[16:12:11.863] Searching for globals...
[16:12:11.866] - globals found: [1] ‘{’
[16:12:11.866] Searching for globals ... DONE
[16:12:11.866] Resolving globals: FALSE
[16:12:11.867] 
[16:12:11.867] 
[16:12:11.867] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 001b0eb5-b92c-fd7e-92bb-54987c329765
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:11.868] Packages needed by the future expression (n = 0): <none>
[16:12:11.868] Packages needed by future strategies (n = 0): <none>
[16:12:11.869] {
[16:12:11.869]     {
[16:12:11.869]         {
[16:12:11.869]             ...future.startTime <- base::Sys.time()
[16:12:11.869]             {
[16:12:11.869]                 {
[16:12:11.869]                   {
[16:12:11.869]                     base::local({
[16:12:11.869]                       has_future <- base::requireNamespace("future", 
[16:12:11.869]                         quietly = TRUE)
[16:12:11.869]                       if (has_future) {
[16:12:11.869]                         ns <- base::getNamespace("future")
[16:12:11.869]                         version <- ns[[".package"]][["version"]]
[16:12:11.869]                         if (is.null(version)) 
[16:12:11.869]                           version <- utils::packageVersion("future")
[16:12:11.869]                       }
[16:12:11.869]                       else {
[16:12:11.869]                         version <- NULL
[16:12:11.869]                       }
[16:12:11.869]                       if (!has_future || version < "1.8.0") {
[16:12:11.869]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:11.869]                           "", base::R.version$version.string), 
[16:12:11.869]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:11.869]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:11.869]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:11.869]                             "release", "version")], collapse = " "), 
[16:12:11.869]                           hostname = base::Sys.info()[["nodename"]])
[16:12:11.869]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:11.869]                           info)
[16:12:11.869]                         info <- base::paste(info, collapse = "; ")
[16:12:11.869]                         if (!has_future) {
[16:12:11.869]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:11.869]                             info)
[16:12:11.869]                         }
[16:12:11.869]                         else {
[16:12:11.869]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:11.869]                             info, version)
[16:12:11.869]                         }
[16:12:11.869]                         base::stop(msg)
[16:12:11.869]                       }
[16:12:11.869]                     })
[16:12:11.869]                   }
[16:12:11.869]                   options(future.plan = NULL)
[16:12:11.869]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:11.869]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:11.869]                 }
[16:12:11.869]                 ...future.workdir <- getwd()
[16:12:11.869]             }
[16:12:11.869]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:11.869]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:11.869]         }
[16:12:11.869]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:11.869]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:11.869]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:11.869]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:11.869]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:11.869]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:11.869]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:11.869]             base::names(...future.oldOptions))
[16:12:11.869]     }
[16:12:11.869]     if (FALSE) {
[16:12:11.869]     }
[16:12:11.869]     else {
[16:12:11.869]         if (TRUE) {
[16:12:11.869]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:11.869]                 open = "w")
[16:12:11.869]         }
[16:12:11.869]         else {
[16:12:11.869]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:11.869]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:11.869]         }
[16:12:11.869]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:11.869]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:11.869]             base::sink(type = "output", split = FALSE)
[16:12:11.869]             base::close(...future.stdout)
[16:12:11.869]         }, add = TRUE)
[16:12:11.869]     }
[16:12:11.869]     ...future.frame <- base::sys.nframe()
[16:12:11.869]     ...future.conditions <- base::list()
[16:12:11.869]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:11.869]     if (FALSE) {
[16:12:11.869]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:11.869]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:11.869]     }
[16:12:11.869]     ...future.result <- base::tryCatch({
[16:12:11.869]         base::withCallingHandlers({
[16:12:11.869]             ...future.value <- base::withVisible(base::local({
[16:12:11.869]                 42L
[16:12:11.869]             }))
[16:12:11.869]             future::FutureResult(value = ...future.value$value, 
[16:12:11.869]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:11.869]                   ...future.rng), globalenv = if (FALSE) 
[16:12:11.869]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:11.869]                     ...future.globalenv.names))
[16:12:11.869]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:11.869]         }, condition = base::local({
[16:12:11.869]             c <- base::c
[16:12:11.869]             inherits <- base::inherits
[16:12:11.869]             invokeRestart <- base::invokeRestart
[16:12:11.869]             length <- base::length
[16:12:11.869]             list <- base::list
[16:12:11.869]             seq.int <- base::seq.int
[16:12:11.869]             signalCondition <- base::signalCondition
[16:12:11.869]             sys.calls <- base::sys.calls
[16:12:11.869]             `[[` <- base::`[[`
[16:12:11.869]             `+` <- base::`+`
[16:12:11.869]             `<<-` <- base::`<<-`
[16:12:11.869]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:11.869]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:11.869]                   3L)]
[16:12:11.869]             }
[16:12:11.869]             function(cond) {
[16:12:11.869]                 is_error <- inherits(cond, "error")
[16:12:11.869]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:11.869]                   NULL)
[16:12:11.869]                 if (is_error) {
[16:12:11.869]                   sessionInformation <- function() {
[16:12:11.869]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:11.869]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:11.869]                       search = base::search(), system = base::Sys.info())
[16:12:11.869]                   }
[16:12:11.869]                   ...future.conditions[[length(...future.conditions) + 
[16:12:11.869]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:11.869]                     cond$call), session = sessionInformation(), 
[16:12:11.869]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:11.869]                   signalCondition(cond)
[16:12:11.869]                 }
[16:12:11.869]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:11.869]                 "immediateCondition"))) {
[16:12:11.869]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:11.869]                   ...future.conditions[[length(...future.conditions) + 
[16:12:11.869]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:11.869]                   if (TRUE && !signal) {
[16:12:11.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:11.869]                     {
[16:12:11.869]                       inherits <- base::inherits
[16:12:11.869]                       invokeRestart <- base::invokeRestart
[16:12:11.869]                       is.null <- base::is.null
[16:12:11.869]                       muffled <- FALSE
[16:12:11.869]                       if (inherits(cond, "message")) {
[16:12:11.869]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:11.869]                         if (muffled) 
[16:12:11.869]                           invokeRestart("muffleMessage")
[16:12:11.869]                       }
[16:12:11.869]                       else if (inherits(cond, "warning")) {
[16:12:11.869]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:11.869]                         if (muffled) 
[16:12:11.869]                           invokeRestart("muffleWarning")
[16:12:11.869]                       }
[16:12:11.869]                       else if (inherits(cond, "condition")) {
[16:12:11.869]                         if (!is.null(pattern)) {
[16:12:11.869]                           computeRestarts <- base::computeRestarts
[16:12:11.869]                           grepl <- base::grepl
[16:12:11.869]                           restarts <- computeRestarts(cond)
[16:12:11.869]                           for (restart in restarts) {
[16:12:11.869]                             name <- restart$name
[16:12:11.869]                             if (is.null(name)) 
[16:12:11.869]                               next
[16:12:11.869]                             if (!grepl(pattern, name)) 
[16:12:11.869]                               next
[16:12:11.869]                             invokeRestart(restart)
[16:12:11.869]                             muffled <- TRUE
[16:12:11.869]                             break
[16:12:11.869]                           }
[16:12:11.869]                         }
[16:12:11.869]                       }
[16:12:11.869]                       invisible(muffled)
[16:12:11.869]                     }
[16:12:11.869]                     muffleCondition(cond, pattern = "^muffle")
[16:12:11.869]                   }
[16:12:11.869]                 }
[16:12:11.869]                 else {
[16:12:11.869]                   if (TRUE) {
[16:12:11.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:11.869]                     {
[16:12:11.869]                       inherits <- base::inherits
[16:12:11.869]                       invokeRestart <- base::invokeRestart
[16:12:11.869]                       is.null <- base::is.null
[16:12:11.869]                       muffled <- FALSE
[16:12:11.869]                       if (inherits(cond, "message")) {
[16:12:11.869]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:11.869]                         if (muffled) 
[16:12:11.869]                           invokeRestart("muffleMessage")
[16:12:11.869]                       }
[16:12:11.869]                       else if (inherits(cond, "warning")) {
[16:12:11.869]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:11.869]                         if (muffled) 
[16:12:11.869]                           invokeRestart("muffleWarning")
[16:12:11.869]                       }
[16:12:11.869]                       else if (inherits(cond, "condition")) {
[16:12:11.869]                         if (!is.null(pattern)) {
[16:12:11.869]                           computeRestarts <- base::computeRestarts
[16:12:11.869]                           grepl <- base::grepl
[16:12:11.869]                           restarts <- computeRestarts(cond)
[16:12:11.869]                           for (restart in restarts) {
[16:12:11.869]                             name <- restart$name
[16:12:11.869]                             if (is.null(name)) 
[16:12:11.869]                               next
[16:12:11.869]                             if (!grepl(pattern, name)) 
[16:12:11.869]                               next
[16:12:11.869]                             invokeRestart(restart)
[16:12:11.869]                             muffled <- TRUE
[16:12:11.869]                             break
[16:12:11.869]                           }
[16:12:11.869]                         }
[16:12:11.869]                       }
[16:12:11.869]                       invisible(muffled)
[16:12:11.869]                     }
[16:12:11.869]                     muffleCondition(cond, pattern = "^muffle")
[16:12:11.869]                   }
[16:12:11.869]                 }
[16:12:11.869]             }
[16:12:11.869]         }))
[16:12:11.869]     }, error = function(ex) {
[16:12:11.869]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:11.869]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:11.869]                 ...future.rng), started = ...future.startTime, 
[16:12:11.869]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:11.869]             version = "1.8"), class = "FutureResult")
[16:12:11.869]     }, finally = {
[16:12:11.869]         if (!identical(...future.workdir, getwd())) 
[16:12:11.869]             setwd(...future.workdir)
[16:12:11.869]         {
[16:12:11.869]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:11.869]                 ...future.oldOptions$nwarnings <- NULL
[16:12:11.869]             }
[16:12:11.869]             base::options(...future.oldOptions)
[16:12:11.869]             if (.Platform$OS.type == "windows") {
[16:12:11.869]                 old_names <- names(...future.oldEnvVars)
[16:12:11.869]                 envs <- base::Sys.getenv()
[16:12:11.869]                 names <- names(envs)
[16:12:11.869]                 common <- intersect(names, old_names)
[16:12:11.869]                 added <- setdiff(names, old_names)
[16:12:11.869]                 removed <- setdiff(old_names, names)
[16:12:11.869]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:11.869]                   envs[common]]
[16:12:11.869]                 NAMES <- toupper(changed)
[16:12:11.869]                 args <- list()
[16:12:11.869]                 for (kk in seq_along(NAMES)) {
[16:12:11.869]                   name <- changed[[kk]]
[16:12:11.869]                   NAME <- NAMES[[kk]]
[16:12:11.869]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.869]                     next
[16:12:11.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:11.869]                 }
[16:12:11.869]                 NAMES <- toupper(added)
[16:12:11.869]                 for (kk in seq_along(NAMES)) {
[16:12:11.869]                   name <- added[[kk]]
[16:12:11.869]                   NAME <- NAMES[[kk]]
[16:12:11.869]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.869]                     next
[16:12:11.869]                   args[[name]] <- ""
[16:12:11.869]                 }
[16:12:11.869]                 NAMES <- toupper(removed)
[16:12:11.869]                 for (kk in seq_along(NAMES)) {
[16:12:11.869]                   name <- removed[[kk]]
[16:12:11.869]                   NAME <- NAMES[[kk]]
[16:12:11.869]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.869]                     next
[16:12:11.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:11.869]                 }
[16:12:11.869]                 if (length(args) > 0) 
[16:12:11.869]                   base::do.call(base::Sys.setenv, args = args)
[16:12:11.869]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:11.869]             }
[16:12:11.869]             else {
[16:12:11.869]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:11.869]             }
[16:12:11.869]             {
[16:12:11.869]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:11.869]                   0L) {
[16:12:11.869]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:11.869]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:11.869]                   base::options(opts)
[16:12:11.869]                 }
[16:12:11.869]                 {
[16:12:11.869]                   {
[16:12:11.869]                     NULL
[16:12:11.869]                     RNGkind("Mersenne-Twister")
[16:12:11.869]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:11.869]                       inherits = FALSE)
[16:12:11.869]                   }
[16:12:11.869]                   options(future.plan = NULL)
[16:12:11.869]                   if (is.na(NA_character_)) 
[16:12:11.869]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:11.869]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:11.869]                   future::plan(list(function (...) 
[16:12:11.869]                   {
[16:12:11.869]                     Future(1)
[16:12:11.869]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:11.869]                 }
[16:12:11.869]             }
[16:12:11.869]         }
[16:12:11.869]     })
[16:12:11.869]     if (TRUE) {
[16:12:11.869]         base::sink(type = "output", split = FALSE)
[16:12:11.869]         if (TRUE) {
[16:12:11.869]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:11.869]         }
[16:12:11.869]         else {
[16:12:11.869]             ...future.result["stdout"] <- base::list(NULL)
[16:12:11.869]         }
[16:12:11.869]         base::close(...future.stdout)
[16:12:11.869]         ...future.stdout <- NULL
[16:12:11.869]     }
[16:12:11.869]     ...future.result$conditions <- ...future.conditions
[16:12:11.869]     ...future.result$finished <- base::Sys.time()
[16:12:11.869]     ...future.result
[16:12:11.869] }
[16:12:11.870] plan(): Setting new future strategy stack:
[16:12:11.871] List of future strategies:
[16:12:11.871] 1. sequential:
[16:12:11.871]    - args: function (..., envir = parent.frame())
[16:12:11.871]    - tweaked: FALSE
[16:12:11.871]    - call: NULL
[16:12:11.871] plan(): nbrOfWorkers() = 1
[16:12:11.872] plan(): Setting new future strategy stack:
[16:12:11.872] List of future strategies:
[16:12:11.872] 1. future:
[16:12:11.872]    - args: function (...)
[16:12:11.872]    - tweaked: FALSE
[16:12:11.872]    - call: plan(foo)
[16:12:11.873] plan(): nbrOfWorkers() = Inf
[16:12:11.873] SequentialFuture started (and completed)
[1] 42
[16:12:11.874] getGlobalsAndPackages() ...
[16:12:11.874] Searching for globals...
[16:12:11.874] - globals found: [1] ‘{’
[16:12:11.874] Searching for globals ... DONE
[16:12:11.874] Resolving globals: FALSE
[16:12:11.875] 
[16:12:11.875] 
[16:12:11.875] getGlobalsAndPackages() ... DONE
[16:12:11.875] Packages needed by the future expression (n = 0): <none>
[16:12:11.875] Packages needed by future strategies (n = 0): <none>
[16:12:11.876] {
[16:12:11.876]     {
[16:12:11.876]         {
[16:12:11.876]             ...future.startTime <- base::Sys.time()
[16:12:11.876]             {
[16:12:11.876]                 {
[16:12:11.876]                   {
[16:12:11.876]                     base::local({
[16:12:11.876]                       has_future <- base::requireNamespace("future", 
[16:12:11.876]                         quietly = TRUE)
[16:12:11.876]                       if (has_future) {
[16:12:11.876]                         ns <- base::getNamespace("future")
[16:12:11.876]                         version <- ns[[".package"]][["version"]]
[16:12:11.876]                         if (is.null(version)) 
[16:12:11.876]                           version <- utils::packageVersion("future")
[16:12:11.876]                       }
[16:12:11.876]                       else {
[16:12:11.876]                         version <- NULL
[16:12:11.876]                       }
[16:12:11.876]                       if (!has_future || version < "1.8.0") {
[16:12:11.876]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:11.876]                           "", base::R.version$version.string), 
[16:12:11.876]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:11.876]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:11.876]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:11.876]                             "release", "version")], collapse = " "), 
[16:12:11.876]                           hostname = base::Sys.info()[["nodename"]])
[16:12:11.876]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:11.876]                           info)
[16:12:11.876]                         info <- base::paste(info, collapse = "; ")
[16:12:11.876]                         if (!has_future) {
[16:12:11.876]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:11.876]                             info)
[16:12:11.876]                         }
[16:12:11.876]                         else {
[16:12:11.876]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:11.876]                             info, version)
[16:12:11.876]                         }
[16:12:11.876]                         base::stop(msg)
[16:12:11.876]                       }
[16:12:11.876]                     })
[16:12:11.876]                   }
[16:12:11.876]                   options(future.plan = NULL)
[16:12:11.876]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:11.876]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:11.876]                 }
[16:12:11.876]                 ...future.workdir <- getwd()
[16:12:11.876]             }
[16:12:11.876]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:11.876]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:11.876]         }
[16:12:11.876]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:11.876]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:11.876]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:11.876]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:11.876]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:11.876]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:11.876]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:11.876]             base::names(...future.oldOptions))
[16:12:11.876]     }
[16:12:11.876]     if (FALSE) {
[16:12:11.876]     }
[16:12:11.876]     else {
[16:12:11.876]         if (TRUE) {
[16:12:11.876]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:11.876]                 open = "w")
[16:12:11.876]         }
[16:12:11.876]         else {
[16:12:11.876]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:11.876]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:11.876]         }
[16:12:11.876]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:11.876]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:11.876]             base::sink(type = "output", split = FALSE)
[16:12:11.876]             base::close(...future.stdout)
[16:12:11.876]         }, add = TRUE)
[16:12:11.876]     }
[16:12:11.876]     ...future.frame <- base::sys.nframe()
[16:12:11.876]     ...future.conditions <- base::list()
[16:12:11.876]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:11.876]     if (FALSE) {
[16:12:11.876]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:11.876]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:11.876]     }
[16:12:11.876]     ...future.result <- base::tryCatch({
[16:12:11.876]         base::withCallingHandlers({
[16:12:11.876]             ...future.value <- base::withVisible(base::local({
[16:12:11.876]                 42L
[16:12:11.876]             }))
[16:12:11.876]             future::FutureResult(value = ...future.value$value, 
[16:12:11.876]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:11.876]                   ...future.rng), globalenv = if (FALSE) 
[16:12:11.876]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:11.876]                     ...future.globalenv.names))
[16:12:11.876]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:11.876]         }, condition = base::local({
[16:12:11.876]             c <- base::c
[16:12:11.876]             inherits <- base::inherits
[16:12:11.876]             invokeRestart <- base::invokeRestart
[16:12:11.876]             length <- base::length
[16:12:11.876]             list <- base::list
[16:12:11.876]             seq.int <- base::seq.int
[16:12:11.876]             signalCondition <- base::signalCondition
[16:12:11.876]             sys.calls <- base::sys.calls
[16:12:11.876]             `[[` <- base::`[[`
[16:12:11.876]             `+` <- base::`+`
[16:12:11.876]             `<<-` <- base::`<<-`
[16:12:11.876]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:11.876]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:11.876]                   3L)]
[16:12:11.876]             }
[16:12:11.876]             function(cond) {
[16:12:11.876]                 is_error <- inherits(cond, "error")
[16:12:11.876]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:11.876]                   NULL)
[16:12:11.876]                 if (is_error) {
[16:12:11.876]                   sessionInformation <- function() {
[16:12:11.876]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:11.876]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:11.876]                       search = base::search(), system = base::Sys.info())
[16:12:11.876]                   }
[16:12:11.876]                   ...future.conditions[[length(...future.conditions) + 
[16:12:11.876]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:11.876]                     cond$call), session = sessionInformation(), 
[16:12:11.876]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:11.876]                   signalCondition(cond)
[16:12:11.876]                 }
[16:12:11.876]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:11.876]                 "immediateCondition"))) {
[16:12:11.876]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:11.876]                   ...future.conditions[[length(...future.conditions) + 
[16:12:11.876]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:11.876]                   if (TRUE && !signal) {
[16:12:11.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:11.876]                     {
[16:12:11.876]                       inherits <- base::inherits
[16:12:11.876]                       invokeRestart <- base::invokeRestart
[16:12:11.876]                       is.null <- base::is.null
[16:12:11.876]                       muffled <- FALSE
[16:12:11.876]                       if (inherits(cond, "message")) {
[16:12:11.876]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:11.876]                         if (muffled) 
[16:12:11.876]                           invokeRestart("muffleMessage")
[16:12:11.876]                       }
[16:12:11.876]                       else if (inherits(cond, "warning")) {
[16:12:11.876]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:11.876]                         if (muffled) 
[16:12:11.876]                           invokeRestart("muffleWarning")
[16:12:11.876]                       }
[16:12:11.876]                       else if (inherits(cond, "condition")) {
[16:12:11.876]                         if (!is.null(pattern)) {
[16:12:11.876]                           computeRestarts <- base::computeRestarts
[16:12:11.876]                           grepl <- base::grepl
[16:12:11.876]                           restarts <- computeRestarts(cond)
[16:12:11.876]                           for (restart in restarts) {
[16:12:11.876]                             name <- restart$name
[16:12:11.876]                             if (is.null(name)) 
[16:12:11.876]                               next
[16:12:11.876]                             if (!grepl(pattern, name)) 
[16:12:11.876]                               next
[16:12:11.876]                             invokeRestart(restart)
[16:12:11.876]                             muffled <- TRUE
[16:12:11.876]                             break
[16:12:11.876]                           }
[16:12:11.876]                         }
[16:12:11.876]                       }
[16:12:11.876]                       invisible(muffled)
[16:12:11.876]                     }
[16:12:11.876]                     muffleCondition(cond, pattern = "^muffle")
[16:12:11.876]                   }
[16:12:11.876]                 }
[16:12:11.876]                 else {
[16:12:11.876]                   if (TRUE) {
[16:12:11.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:11.876]                     {
[16:12:11.876]                       inherits <- base::inherits
[16:12:11.876]                       invokeRestart <- base::invokeRestart
[16:12:11.876]                       is.null <- base::is.null
[16:12:11.876]                       muffled <- FALSE
[16:12:11.876]                       if (inherits(cond, "message")) {
[16:12:11.876]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:11.876]                         if (muffled) 
[16:12:11.876]                           invokeRestart("muffleMessage")
[16:12:11.876]                       }
[16:12:11.876]                       else if (inherits(cond, "warning")) {
[16:12:11.876]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:11.876]                         if (muffled) 
[16:12:11.876]                           invokeRestart("muffleWarning")
[16:12:11.876]                       }
[16:12:11.876]                       else if (inherits(cond, "condition")) {
[16:12:11.876]                         if (!is.null(pattern)) {
[16:12:11.876]                           computeRestarts <- base::computeRestarts
[16:12:11.876]                           grepl <- base::grepl
[16:12:11.876]                           restarts <- computeRestarts(cond)
[16:12:11.876]                           for (restart in restarts) {
[16:12:11.876]                             name <- restart$name
[16:12:11.876]                             if (is.null(name)) 
[16:12:11.876]                               next
[16:12:11.876]                             if (!grepl(pattern, name)) 
[16:12:11.876]                               next
[16:12:11.876]                             invokeRestart(restart)
[16:12:11.876]                             muffled <- TRUE
[16:12:11.876]                             break
[16:12:11.876]                           }
[16:12:11.876]                         }
[16:12:11.876]                       }
[16:12:11.876]                       invisible(muffled)
[16:12:11.876]                     }
[16:12:11.876]                     muffleCondition(cond, pattern = "^muffle")
[16:12:11.876]                   }
[16:12:11.876]                 }
[16:12:11.876]             }
[16:12:11.876]         }))
[16:12:11.876]     }, error = function(ex) {
[16:12:11.876]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:11.876]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:11.876]                 ...future.rng), started = ...future.startTime, 
[16:12:11.876]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:11.876]             version = "1.8"), class = "FutureResult")
[16:12:11.876]     }, finally = {
[16:12:11.876]         if (!identical(...future.workdir, getwd())) 
[16:12:11.876]             setwd(...future.workdir)
[16:12:11.876]         {
[16:12:11.876]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:11.876]                 ...future.oldOptions$nwarnings <- NULL
[16:12:11.876]             }
[16:12:11.876]             base::options(...future.oldOptions)
[16:12:11.876]             if (.Platform$OS.type == "windows") {
[16:12:11.876]                 old_names <- names(...future.oldEnvVars)
[16:12:11.876]                 envs <- base::Sys.getenv()
[16:12:11.876]                 names <- names(envs)
[16:12:11.876]                 common <- intersect(names, old_names)
[16:12:11.876]                 added <- setdiff(names, old_names)
[16:12:11.876]                 removed <- setdiff(old_names, names)
[16:12:11.876]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:11.876]                   envs[common]]
[16:12:11.876]                 NAMES <- toupper(changed)
[16:12:11.876]                 args <- list()
[16:12:11.876]                 for (kk in seq_along(NAMES)) {
[16:12:11.876]                   name <- changed[[kk]]
[16:12:11.876]                   NAME <- NAMES[[kk]]
[16:12:11.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.876]                     next
[16:12:11.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:11.876]                 }
[16:12:11.876]                 NAMES <- toupper(added)
[16:12:11.876]                 for (kk in seq_along(NAMES)) {
[16:12:11.876]                   name <- added[[kk]]
[16:12:11.876]                   NAME <- NAMES[[kk]]
[16:12:11.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.876]                     next
[16:12:11.876]                   args[[name]] <- ""
[16:12:11.876]                 }
[16:12:11.876]                 NAMES <- toupper(removed)
[16:12:11.876]                 for (kk in seq_along(NAMES)) {
[16:12:11.876]                   name <- removed[[kk]]
[16:12:11.876]                   NAME <- NAMES[[kk]]
[16:12:11.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:11.876]                     next
[16:12:11.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:11.876]                 }
[16:12:11.876]                 if (length(args) > 0) 
[16:12:11.876]                   base::do.call(base::Sys.setenv, args = args)
[16:12:11.876]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:11.876]             }
[16:12:11.876]             else {
[16:12:11.876]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:11.876]             }
[16:12:11.876]             {
[16:12:11.876]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:11.876]                   0L) {
[16:12:11.876]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:11.876]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:11.876]                   base::options(opts)
[16:12:11.876]                 }
[16:12:11.876]                 {
[16:12:11.876]                   {
[16:12:11.876]                     NULL
[16:12:11.876]                     RNGkind("Mersenne-Twister")
[16:12:11.876]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:11.876]                       inherits = FALSE)
[16:12:11.876]                   }
[16:12:11.876]                   options(future.plan = NULL)
[16:12:11.876]                   if (is.na(NA_character_)) 
[16:12:11.876]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:11.876]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:11.876]                   future::plan(list(function (...) 
[16:12:11.876]                   {
[16:12:11.876]                     Future(1)
[16:12:11.876]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:11.876]                 }
[16:12:11.876]             }
[16:12:11.876]         }
[16:12:11.876]     })
[16:12:11.876]     if (TRUE) {
[16:12:11.876]         base::sink(type = "output", split = FALSE)
[16:12:11.876]         if (TRUE) {
[16:12:11.876]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:11.876]         }
[16:12:11.876]         else {
[16:12:11.876]             ...future.result["stdout"] <- base::list(NULL)
[16:12:11.876]         }
[16:12:11.876]         base::close(...future.stdout)
[16:12:11.876]         ...future.stdout <- NULL
[16:12:11.876]     }
[16:12:11.876]     ...future.result$conditions <- ...future.conditions
[16:12:11.876]     ...future.result$finished <- base::Sys.time()
[16:12:11.876]     ...future.result
[16:12:11.876] }
[16:12:11.878] plan(): Setting new future strategy stack:
[16:12:11.878] List of future strategies:
[16:12:11.878] 1. sequential:
[16:12:11.878]    - args: function (..., envir = parent.frame())
[16:12:11.878]    - tweaked: FALSE
[16:12:11.878]    - call: NULL
[16:12:11.878] plan(): nbrOfWorkers() = 1
[16:12:11.879] plan(): Setting new future strategy stack:
[16:12:11.879] List of future strategies:
[16:12:11.879] 1. future:
[16:12:11.879]    - args: function (...)
[16:12:11.879]    - tweaked: FALSE
[16:12:11.879]    - call: plan(foo)
[16:12:11.879] plan(): nbrOfWorkers() = Inf
[16:12:11.880] SequentialFuture started (and completed)
[1] 42
[16:12:11.882] getGlobalsAndPackages() ...
[16:12:11.882] 
[16:12:11.882] - globals: [0] <none>
[16:12:11.882] getGlobalsAndPackages() ... DONE
[16:12:11.883] [local output] makeClusterPSOCK() ...
[16:12:11.917] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:11.922] [local output] Base port: 11286
[16:12:11.922] [local output] Getting setup options for 2 cluster nodes ...
[16:12:11.922] [local output]  - Node 1 of 2 ...
[16:12:11.923] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:11.924] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpLU09to/worker.rank=1.parallelly.parent=81715.13f333b07eb46.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpLU09to/worker.rank=1.parallelly.parent=81715.13f333b07eb46.pid")'’
[16:12:12.112] - Possible to infer worker's PID: TRUE
[16:12:12.112] [local output] Rscript port: 11286

[16:12:12.112] [local output]  - Node 2 of 2 ...
[16:12:12.113] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:12.113] [local output] Rscript port: 11286

[16:12:12.113] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:12.114] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:12.114] [local output] Setting up PSOCK nodes in parallel
[16:12:12.114] List of 36
[16:12:12.114]  $ worker          : chr "localhost"
[16:12:12.114]   ..- attr(*, "localhost")= logi TRUE
[16:12:12.114]  $ master          : chr "localhost"
[16:12:12.114]  $ port            : int 11286
[16:12:12.114]  $ connectTimeout  : num 120
[16:12:12.114]  $ timeout         : num 2592000
[16:12:12.114]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:12.114]  $ homogeneous     : logi TRUE
[16:12:12.114]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:12.114]  $ rscript_envs    : NULL
[16:12:12.114]  $ rscript_libs    : NULL
[16:12:12.114]  $ rscript_startup : NULL
[16:12:12.114]  $ rscript_sh      : chr "sh"
[16:12:12.114]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:12.114]  $ methods         : logi TRUE
[16:12:12.114]  $ socketOptions   : chr "no-delay"
[16:12:12.114]  $ useXDR          : logi FALSE
[16:12:12.114]  $ outfile         : chr "/dev/null"
[16:12:12.114]  $ renice          : int NA
[16:12:12.114]  $ rshcmd          : NULL
[16:12:12.114]  $ user            : chr(0) 
[16:12:12.114]  $ revtunnel       : logi FALSE
[16:12:12.114]  $ rshlogfile      : NULL
[16:12:12.114]  $ rshopts         : chr(0) 
[16:12:12.114]  $ rank            : int 1
[16:12:12.114]  $ manual          : logi FALSE
[16:12:12.114]  $ dryrun          : logi FALSE
[16:12:12.114]  $ quiet           : logi FALSE
[16:12:12.114]  $ setup_strategy  : chr "parallel"
[16:12:12.114]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:12.114]  $ pidfile         : chr "/tmp/RtmpLU09to/worker.rank=1.parallelly.parent=81715.13f333b07eb46.pid"
[16:12:12.114]  $ rshcmd_label    : NULL
[16:12:12.114]  $ rsh_call        : NULL
[16:12:12.114]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:12.114]  $ localMachine    : logi TRUE
[16:12:12.114]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:12.114]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:12.114]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:12.114]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:12.114]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:12.114]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:12.114]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:12.114]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:12.114]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:12.114]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:12.114]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:12.114]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:12.114]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:12.114]  $ arguments       :List of 28
[16:12:12.114]   ..$ worker          : chr "localhost"
[16:12:12.114]   ..$ master          : NULL
[16:12:12.114]   ..$ port            : int 11286
[16:12:12.114]   ..$ connectTimeout  : num 120
[16:12:12.114]   ..$ timeout         : num 2592000
[16:12:12.114]   ..$ rscript         : NULL
[16:12:12.114]   ..$ homogeneous     : NULL
[16:12:12.114]   ..$ rscript_args    : NULL
[16:12:12.114]   ..$ rscript_envs    : NULL
[16:12:12.114]   ..$ rscript_libs    : NULL
[16:12:12.114]   ..$ rscript_startup : NULL
[16:12:12.114]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:12.114]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:12.114]   ..$ methods         : logi TRUE
[16:12:12.114]   ..$ socketOptions   : chr "no-delay"
[16:12:12.114]   ..$ useXDR          : logi FALSE
[16:12:12.114]   ..$ outfile         : chr "/dev/null"
[16:12:12.114]   ..$ renice          : int NA
[16:12:12.114]   ..$ rshcmd          : NULL
[16:12:12.114]   ..$ user            : NULL
[16:12:12.114]   ..$ revtunnel       : logi NA
[16:12:12.114]   ..$ rshlogfile      : NULL
[16:12:12.114]   ..$ rshopts         : NULL
[16:12:12.114]   ..$ rank            : int 1
[16:12:12.114]   ..$ manual          : logi FALSE
[16:12:12.114]   ..$ dryrun          : logi FALSE
[16:12:12.114]   ..$ quiet           : logi FALSE
[16:12:12.114]   ..$ setup_strategy  : chr "parallel"
[16:12:12.114]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:12.131] [local output] System call to launch all workers:
[16:12:12.131] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpLU09to/worker.rank=1.parallelly.parent=81715.13f333b07eb46.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11286 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:12.131] [local output] Starting PSOCK main server
[16:12:12.133] [local output] Workers launched
[16:12:12.133] [local output] Waiting for workers to connect back
[16:12:12.133]  - [local output] 0 workers out of 2 ready
[16:12:12.398]  - [local output] 0 workers out of 2 ready
[16:12:12.399]  - [local output] 1 workers out of 2 ready
[16:12:12.418]  - [local output] 1 workers out of 2 ready
[16:12:12.419]  - [local output] 2 workers out of 2 ready
[16:12:12.419] [local output] Launching of workers completed
[16:12:12.419] [local output] Collecting session information from workers
[16:12:12.420] [local output]  - Worker #1 of 2
[16:12:12.421] [local output]  - Worker #2 of 2
[16:12:12.421] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55b00521abb0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 001b0eb5-b92c-fd7e-92bb-54987c329765
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:12.434] Packages needed by the future expression (n = 0): <none>
[16:12:12.434] Packages needed by future strategies (n = 0): <none>
[16:12:12.434] {
[16:12:12.434]     {
[16:12:12.434]         {
[16:12:12.434]             ...future.startTime <- base::Sys.time()
[16:12:12.434]             {
[16:12:12.434]                 {
[16:12:12.434]                   {
[16:12:12.434]                     {
[16:12:12.434]                       base::local({
[16:12:12.434]                         has_future <- base::requireNamespace("future", 
[16:12:12.434]                           quietly = TRUE)
[16:12:12.434]                         if (has_future) {
[16:12:12.434]                           ns <- base::getNamespace("future")
[16:12:12.434]                           version <- ns[[".package"]][["version"]]
[16:12:12.434]                           if (is.null(version)) 
[16:12:12.434]                             version <- utils::packageVersion("future")
[16:12:12.434]                         }
[16:12:12.434]                         else {
[16:12:12.434]                           version <- NULL
[16:12:12.434]                         }
[16:12:12.434]                         if (!has_future || version < "1.8.0") {
[16:12:12.434]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.434]                             "", base::R.version$version.string), 
[16:12:12.434]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:12.434]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.434]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.434]                               "release", "version")], collapse = " "), 
[16:12:12.434]                             hostname = base::Sys.info()[["nodename"]])
[16:12:12.434]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.434]                             info)
[16:12:12.434]                           info <- base::paste(info, collapse = "; ")
[16:12:12.434]                           if (!has_future) {
[16:12:12.434]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.434]                               info)
[16:12:12.434]                           }
[16:12:12.434]                           else {
[16:12:12.434]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.434]                               info, version)
[16:12:12.434]                           }
[16:12:12.434]                           base::stop(msg)
[16:12:12.434]                         }
[16:12:12.434]                       })
[16:12:12.434]                     }
[16:12:12.434]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:12.434]                     base::options(mc.cores = 1L)
[16:12:12.434]                   }
[16:12:12.434]                   options(future.plan = NULL)
[16:12:12.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.434]                 }
[16:12:12.434]                 ...future.workdir <- getwd()
[16:12:12.434]             }
[16:12:12.434]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.434]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.434]         }
[16:12:12.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.434]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.434]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.434]             base::names(...future.oldOptions))
[16:12:12.434]     }
[16:12:12.434]     if (FALSE) {
[16:12:12.434]     }
[16:12:12.434]     else {
[16:12:12.434]         if (TRUE) {
[16:12:12.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.434]                 open = "w")
[16:12:12.434]         }
[16:12:12.434]         else {
[16:12:12.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.434]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.434]         }
[16:12:12.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.434]             base::sink(type = "output", split = FALSE)
[16:12:12.434]             base::close(...future.stdout)
[16:12:12.434]         }, add = TRUE)
[16:12:12.434]     }
[16:12:12.434]     ...future.frame <- base::sys.nframe()
[16:12:12.434]     ...future.conditions <- base::list()
[16:12:12.434]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.434]     if (FALSE) {
[16:12:12.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.434]     }
[16:12:12.434]     ...future.result <- base::tryCatch({
[16:12:12.434]         base::withCallingHandlers({
[16:12:12.434]             ...future.value <- base::withVisible(base::local({
[16:12:12.434]                 ...future.makeSendCondition <- local({
[16:12:12.434]                   sendCondition <- NULL
[16:12:12.434]                   function(frame = 1L) {
[16:12:12.434]                     if (is.function(sendCondition)) 
[16:12:12.434]                       return(sendCondition)
[16:12:12.434]                     ns <- getNamespace("parallel")
[16:12:12.434]                     if (exists("sendData", mode = "function", 
[16:12:12.434]                       envir = ns)) {
[16:12:12.434]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:12.434]                         envir = ns)
[16:12:12.434]                       envir <- sys.frame(frame)
[16:12:12.434]                       master <- NULL
[16:12:12.434]                       while (!identical(envir, .GlobalEnv) && 
[16:12:12.434]                         !identical(envir, emptyenv())) {
[16:12:12.434]                         if (exists("master", mode = "list", envir = envir, 
[16:12:12.434]                           inherits = FALSE)) {
[16:12:12.434]                           master <- get("master", mode = "list", 
[16:12:12.434]                             envir = envir, inherits = FALSE)
[16:12:12.434]                           if (inherits(master, c("SOCKnode", 
[16:12:12.434]                             "SOCK0node"))) {
[16:12:12.434]                             sendCondition <<- function(cond) {
[16:12:12.434]                               data <- list(type = "VALUE", value = cond, 
[16:12:12.434]                                 success = TRUE)
[16:12:12.434]                               parallel_sendData(master, data)
[16:12:12.434]                             }
[16:12:12.434]                             return(sendCondition)
[16:12:12.434]                           }
[16:12:12.434]                         }
[16:12:12.434]                         frame <- frame + 1L
[16:12:12.434]                         envir <- sys.frame(frame)
[16:12:12.434]                       }
[16:12:12.434]                     }
[16:12:12.434]                     sendCondition <<- function(cond) NULL
[16:12:12.434]                   }
[16:12:12.434]                 })
[16:12:12.434]                 withCallingHandlers({
[16:12:12.434]                   {
[16:12:12.434]                     42L
[16:12:12.434]                   }
[16:12:12.434]                 }, immediateCondition = function(cond) {
[16:12:12.434]                   sendCondition <- ...future.makeSendCondition()
[16:12:12.434]                   sendCondition(cond)
[16:12:12.434]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.434]                   {
[16:12:12.434]                     inherits <- base::inherits
[16:12:12.434]                     invokeRestart <- base::invokeRestart
[16:12:12.434]                     is.null <- base::is.null
[16:12:12.434]                     muffled <- FALSE
[16:12:12.434]                     if (inherits(cond, "message")) {
[16:12:12.434]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:12.434]                       if (muffled) 
[16:12:12.434]                         invokeRestart("muffleMessage")
[16:12:12.434]                     }
[16:12:12.434]                     else if (inherits(cond, "warning")) {
[16:12:12.434]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:12.434]                       if (muffled) 
[16:12:12.434]                         invokeRestart("muffleWarning")
[16:12:12.434]                     }
[16:12:12.434]                     else if (inherits(cond, "condition")) {
[16:12:12.434]                       if (!is.null(pattern)) {
[16:12:12.434]                         computeRestarts <- base::computeRestarts
[16:12:12.434]                         grepl <- base::grepl
[16:12:12.434]                         restarts <- computeRestarts(cond)
[16:12:12.434]                         for (restart in restarts) {
[16:12:12.434]                           name <- restart$name
[16:12:12.434]                           if (is.null(name)) 
[16:12:12.434]                             next
[16:12:12.434]                           if (!grepl(pattern, name)) 
[16:12:12.434]                             next
[16:12:12.434]                           invokeRestart(restart)
[16:12:12.434]                           muffled <- TRUE
[16:12:12.434]                           break
[16:12:12.434]                         }
[16:12:12.434]                       }
[16:12:12.434]                     }
[16:12:12.434]                     invisible(muffled)
[16:12:12.434]                   }
[16:12:12.434]                   muffleCondition(cond)
[16:12:12.434]                 })
[16:12:12.434]             }))
[16:12:12.434]             future::FutureResult(value = ...future.value$value, 
[16:12:12.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.434]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.434]                     ...future.globalenv.names))
[16:12:12.434]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.434]         }, condition = base::local({
[16:12:12.434]             c <- base::c
[16:12:12.434]             inherits <- base::inherits
[16:12:12.434]             invokeRestart <- base::invokeRestart
[16:12:12.434]             length <- base::length
[16:12:12.434]             list <- base::list
[16:12:12.434]             seq.int <- base::seq.int
[16:12:12.434]             signalCondition <- base::signalCondition
[16:12:12.434]             sys.calls <- base::sys.calls
[16:12:12.434]             `[[` <- base::`[[`
[16:12:12.434]             `+` <- base::`+`
[16:12:12.434]             `<<-` <- base::`<<-`
[16:12:12.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.434]                   3L)]
[16:12:12.434]             }
[16:12:12.434]             function(cond) {
[16:12:12.434]                 is_error <- inherits(cond, "error")
[16:12:12.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.434]                   NULL)
[16:12:12.434]                 if (is_error) {
[16:12:12.434]                   sessionInformation <- function() {
[16:12:12.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.434]                       search = base::search(), system = base::Sys.info())
[16:12:12.434]                   }
[16:12:12.434]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.434]                     cond$call), session = sessionInformation(), 
[16:12:12.434]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.434]                   signalCondition(cond)
[16:12:12.434]                 }
[16:12:12.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.434]                 "immediateCondition"))) {
[16:12:12.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.434]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.434]                   if (TRUE && !signal) {
[16:12:12.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.434]                     {
[16:12:12.434]                       inherits <- base::inherits
[16:12:12.434]                       invokeRestart <- base::invokeRestart
[16:12:12.434]                       is.null <- base::is.null
[16:12:12.434]                       muffled <- FALSE
[16:12:12.434]                       if (inherits(cond, "message")) {
[16:12:12.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.434]                         if (muffled) 
[16:12:12.434]                           invokeRestart("muffleMessage")
[16:12:12.434]                       }
[16:12:12.434]                       else if (inherits(cond, "warning")) {
[16:12:12.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.434]                         if (muffled) 
[16:12:12.434]                           invokeRestart("muffleWarning")
[16:12:12.434]                       }
[16:12:12.434]                       else if (inherits(cond, "condition")) {
[16:12:12.434]                         if (!is.null(pattern)) {
[16:12:12.434]                           computeRestarts <- base::computeRestarts
[16:12:12.434]                           grepl <- base::grepl
[16:12:12.434]                           restarts <- computeRestarts(cond)
[16:12:12.434]                           for (restart in restarts) {
[16:12:12.434]                             name <- restart$name
[16:12:12.434]                             if (is.null(name)) 
[16:12:12.434]                               next
[16:12:12.434]                             if (!grepl(pattern, name)) 
[16:12:12.434]                               next
[16:12:12.434]                             invokeRestart(restart)
[16:12:12.434]                             muffled <- TRUE
[16:12:12.434]                             break
[16:12:12.434]                           }
[16:12:12.434]                         }
[16:12:12.434]                       }
[16:12:12.434]                       invisible(muffled)
[16:12:12.434]                     }
[16:12:12.434]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.434]                   }
[16:12:12.434]                 }
[16:12:12.434]                 else {
[16:12:12.434]                   if (TRUE) {
[16:12:12.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.434]                     {
[16:12:12.434]                       inherits <- base::inherits
[16:12:12.434]                       invokeRestart <- base::invokeRestart
[16:12:12.434]                       is.null <- base::is.null
[16:12:12.434]                       muffled <- FALSE
[16:12:12.434]                       if (inherits(cond, "message")) {
[16:12:12.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.434]                         if (muffled) 
[16:12:12.434]                           invokeRestart("muffleMessage")
[16:12:12.434]                       }
[16:12:12.434]                       else if (inherits(cond, "warning")) {
[16:12:12.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.434]                         if (muffled) 
[16:12:12.434]                           invokeRestart("muffleWarning")
[16:12:12.434]                       }
[16:12:12.434]                       else if (inherits(cond, "condition")) {
[16:12:12.434]                         if (!is.null(pattern)) {
[16:12:12.434]                           computeRestarts <- base::computeRestarts
[16:12:12.434]                           grepl <- base::grepl
[16:12:12.434]                           restarts <- computeRestarts(cond)
[16:12:12.434]                           for (restart in restarts) {
[16:12:12.434]                             name <- restart$name
[16:12:12.434]                             if (is.null(name)) 
[16:12:12.434]                               next
[16:12:12.434]                             if (!grepl(pattern, name)) 
[16:12:12.434]                               next
[16:12:12.434]                             invokeRestart(restart)
[16:12:12.434]                             muffled <- TRUE
[16:12:12.434]                             break
[16:12:12.434]                           }
[16:12:12.434]                         }
[16:12:12.434]                       }
[16:12:12.434]                       invisible(muffled)
[16:12:12.434]                     }
[16:12:12.434]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.434]                   }
[16:12:12.434]                 }
[16:12:12.434]             }
[16:12:12.434]         }))
[16:12:12.434]     }, error = function(ex) {
[16:12:12.434]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.434]                 ...future.rng), started = ...future.startTime, 
[16:12:12.434]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.434]             version = "1.8"), class = "FutureResult")
[16:12:12.434]     }, finally = {
[16:12:12.434]         if (!identical(...future.workdir, getwd())) 
[16:12:12.434]             setwd(...future.workdir)
[16:12:12.434]         {
[16:12:12.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.434]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.434]             }
[16:12:12.434]             base::options(...future.oldOptions)
[16:12:12.434]             if (.Platform$OS.type == "windows") {
[16:12:12.434]                 old_names <- names(...future.oldEnvVars)
[16:12:12.434]                 envs <- base::Sys.getenv()
[16:12:12.434]                 names <- names(envs)
[16:12:12.434]                 common <- intersect(names, old_names)
[16:12:12.434]                 added <- setdiff(names, old_names)
[16:12:12.434]                 removed <- setdiff(old_names, names)
[16:12:12.434]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.434]                   envs[common]]
[16:12:12.434]                 NAMES <- toupper(changed)
[16:12:12.434]                 args <- list()
[16:12:12.434]                 for (kk in seq_along(NAMES)) {
[16:12:12.434]                   name <- changed[[kk]]
[16:12:12.434]                   NAME <- NAMES[[kk]]
[16:12:12.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.434]                     next
[16:12:12.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.434]                 }
[16:12:12.434]                 NAMES <- toupper(added)
[16:12:12.434]                 for (kk in seq_along(NAMES)) {
[16:12:12.434]                   name <- added[[kk]]
[16:12:12.434]                   NAME <- NAMES[[kk]]
[16:12:12.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.434]                     next
[16:12:12.434]                   args[[name]] <- ""
[16:12:12.434]                 }
[16:12:12.434]                 NAMES <- toupper(removed)
[16:12:12.434]                 for (kk in seq_along(NAMES)) {
[16:12:12.434]                   name <- removed[[kk]]
[16:12:12.434]                   NAME <- NAMES[[kk]]
[16:12:12.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.434]                     next
[16:12:12.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.434]                 }
[16:12:12.434]                 if (length(args) > 0) 
[16:12:12.434]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.434]             }
[16:12:12.434]             else {
[16:12:12.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.434]             }
[16:12:12.434]             {
[16:12:12.434]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.434]                   0L) {
[16:12:12.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.434]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.434]                   base::options(opts)
[16:12:12.434]                 }
[16:12:12.434]                 {
[16:12:12.434]                   {
[16:12:12.434]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:12.434]                     NULL
[16:12:12.434]                   }
[16:12:12.434]                   options(future.plan = NULL)
[16:12:12.434]                   if (is.na(NA_character_)) 
[16:12:12.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.434]                   future::plan(list(function (...) 
[16:12:12.434]                   {
[16:12:12.434]                     Future(1)
[16:12:12.434]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.434]                 }
[16:12:12.434]             }
[16:12:12.434]         }
[16:12:12.434]     })
[16:12:12.434]     if (TRUE) {
[16:12:12.434]         base::sink(type = "output", split = FALSE)
[16:12:12.434]         if (TRUE) {
[16:12:12.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.434]         }
[16:12:12.434]         else {
[16:12:12.434]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.434]         }
[16:12:12.434]         base::close(...future.stdout)
[16:12:12.434]         ...future.stdout <- NULL
[16:12:12.434]     }
[16:12:12.434]     ...future.result$conditions <- ...future.conditions
[16:12:12.434]     ...future.result$finished <- base::Sys.time()
[16:12:12.434]     ...future.result
[16:12:12.434] }
[16:12:12.505] MultisessionFuture started
[16:12:12.506] result() for ClusterFuture ...
[16:12:12.506] receiveMessageFromWorker() for ClusterFuture ...
[16:12:12.506] - Validating connection of MultisessionFuture
[16:12:12.531] - received message: FutureResult
[16:12:12.531] - Received FutureResult
[16:12:12.534] - Erased future from FutureRegistry
[16:12:12.534] result() for ClusterFuture ...
[16:12:12.534] - result already collected: FutureResult
[16:12:12.534] result() for ClusterFuture ... done
[16:12:12.534] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:12.534] result() for ClusterFuture ... done
[16:12:12.535] result() for ClusterFuture ...
[16:12:12.535] - result already collected: FutureResult
[16:12:12.535] result() for ClusterFuture ... done
[1] 42
[16:12:12.536] getGlobalsAndPackages() ...
[16:12:12.536] 
[16:12:12.536] - globals: [0] <none>
[16:12:12.536] getGlobalsAndPackages() ... DONE
[16:12:12.548] Packages needed by the future expression (n = 0): <none>
[16:12:12.548] Packages needed by future strategies (n = 0): <none>
[16:12:12.549] {
[16:12:12.549]     {
[16:12:12.549]         {
[16:12:12.549]             ...future.startTime <- base::Sys.time()
[16:12:12.549]             {
[16:12:12.549]                 {
[16:12:12.549]                   {
[16:12:12.549]                     {
[16:12:12.549]                       base::local({
[16:12:12.549]                         has_future <- base::requireNamespace("future", 
[16:12:12.549]                           quietly = TRUE)
[16:12:12.549]                         if (has_future) {
[16:12:12.549]                           ns <- base::getNamespace("future")
[16:12:12.549]                           version <- ns[[".package"]][["version"]]
[16:12:12.549]                           if (is.null(version)) 
[16:12:12.549]                             version <- utils::packageVersion("future")
[16:12:12.549]                         }
[16:12:12.549]                         else {
[16:12:12.549]                           version <- NULL
[16:12:12.549]                         }
[16:12:12.549]                         if (!has_future || version < "1.8.0") {
[16:12:12.549]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.549]                             "", base::R.version$version.string), 
[16:12:12.549]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:12.549]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.549]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.549]                               "release", "version")], collapse = " "), 
[16:12:12.549]                             hostname = base::Sys.info()[["nodename"]])
[16:12:12.549]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.549]                             info)
[16:12:12.549]                           info <- base::paste(info, collapse = "; ")
[16:12:12.549]                           if (!has_future) {
[16:12:12.549]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.549]                               info)
[16:12:12.549]                           }
[16:12:12.549]                           else {
[16:12:12.549]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.549]                               info, version)
[16:12:12.549]                           }
[16:12:12.549]                           base::stop(msg)
[16:12:12.549]                         }
[16:12:12.549]                       })
[16:12:12.549]                     }
[16:12:12.549]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:12.549]                     base::options(mc.cores = 1L)
[16:12:12.549]                   }
[16:12:12.549]                   options(future.plan = NULL)
[16:12:12.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.549]                 }
[16:12:12.549]                 ...future.workdir <- getwd()
[16:12:12.549]             }
[16:12:12.549]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.549]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.549]         }
[16:12:12.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.549]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.549]             base::names(...future.oldOptions))
[16:12:12.549]     }
[16:12:12.549]     if (FALSE) {
[16:12:12.549]     }
[16:12:12.549]     else {
[16:12:12.549]         if (TRUE) {
[16:12:12.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.549]                 open = "w")
[16:12:12.549]         }
[16:12:12.549]         else {
[16:12:12.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.549]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.549]         }
[16:12:12.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.549]             base::sink(type = "output", split = FALSE)
[16:12:12.549]             base::close(...future.stdout)
[16:12:12.549]         }, add = TRUE)
[16:12:12.549]     }
[16:12:12.549]     ...future.frame <- base::sys.nframe()
[16:12:12.549]     ...future.conditions <- base::list()
[16:12:12.549]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.549]     if (FALSE) {
[16:12:12.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.549]     }
[16:12:12.549]     ...future.result <- base::tryCatch({
[16:12:12.549]         base::withCallingHandlers({
[16:12:12.549]             ...future.value <- base::withVisible(base::local({
[16:12:12.549]                 ...future.makeSendCondition <- local({
[16:12:12.549]                   sendCondition <- NULL
[16:12:12.549]                   function(frame = 1L) {
[16:12:12.549]                     if (is.function(sendCondition)) 
[16:12:12.549]                       return(sendCondition)
[16:12:12.549]                     ns <- getNamespace("parallel")
[16:12:12.549]                     if (exists("sendData", mode = "function", 
[16:12:12.549]                       envir = ns)) {
[16:12:12.549]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:12.549]                         envir = ns)
[16:12:12.549]                       envir <- sys.frame(frame)
[16:12:12.549]                       master <- NULL
[16:12:12.549]                       while (!identical(envir, .GlobalEnv) && 
[16:12:12.549]                         !identical(envir, emptyenv())) {
[16:12:12.549]                         if (exists("master", mode = "list", envir = envir, 
[16:12:12.549]                           inherits = FALSE)) {
[16:12:12.549]                           master <- get("master", mode = "list", 
[16:12:12.549]                             envir = envir, inherits = FALSE)
[16:12:12.549]                           if (inherits(master, c("SOCKnode", 
[16:12:12.549]                             "SOCK0node"))) {
[16:12:12.549]                             sendCondition <<- function(cond) {
[16:12:12.549]                               data <- list(type = "VALUE", value = cond, 
[16:12:12.549]                                 success = TRUE)
[16:12:12.549]                               parallel_sendData(master, data)
[16:12:12.549]                             }
[16:12:12.549]                             return(sendCondition)
[16:12:12.549]                           }
[16:12:12.549]                         }
[16:12:12.549]                         frame <- frame + 1L
[16:12:12.549]                         envir <- sys.frame(frame)
[16:12:12.549]                       }
[16:12:12.549]                     }
[16:12:12.549]                     sendCondition <<- function(cond) NULL
[16:12:12.549]                   }
[16:12:12.549]                 })
[16:12:12.549]                 withCallingHandlers({
[16:12:12.549]                   {
[16:12:12.549]                     42L
[16:12:12.549]                   }
[16:12:12.549]                 }, immediateCondition = function(cond) {
[16:12:12.549]                   sendCondition <- ...future.makeSendCondition()
[16:12:12.549]                   sendCondition(cond)
[16:12:12.549]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.549]                   {
[16:12:12.549]                     inherits <- base::inherits
[16:12:12.549]                     invokeRestart <- base::invokeRestart
[16:12:12.549]                     is.null <- base::is.null
[16:12:12.549]                     muffled <- FALSE
[16:12:12.549]                     if (inherits(cond, "message")) {
[16:12:12.549]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:12.549]                       if (muffled) 
[16:12:12.549]                         invokeRestart("muffleMessage")
[16:12:12.549]                     }
[16:12:12.549]                     else if (inherits(cond, "warning")) {
[16:12:12.549]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:12.549]                       if (muffled) 
[16:12:12.549]                         invokeRestart("muffleWarning")
[16:12:12.549]                     }
[16:12:12.549]                     else if (inherits(cond, "condition")) {
[16:12:12.549]                       if (!is.null(pattern)) {
[16:12:12.549]                         computeRestarts <- base::computeRestarts
[16:12:12.549]                         grepl <- base::grepl
[16:12:12.549]                         restarts <- computeRestarts(cond)
[16:12:12.549]                         for (restart in restarts) {
[16:12:12.549]                           name <- restart$name
[16:12:12.549]                           if (is.null(name)) 
[16:12:12.549]                             next
[16:12:12.549]                           if (!grepl(pattern, name)) 
[16:12:12.549]                             next
[16:12:12.549]                           invokeRestart(restart)
[16:12:12.549]                           muffled <- TRUE
[16:12:12.549]                           break
[16:12:12.549]                         }
[16:12:12.549]                       }
[16:12:12.549]                     }
[16:12:12.549]                     invisible(muffled)
[16:12:12.549]                   }
[16:12:12.549]                   muffleCondition(cond)
[16:12:12.549]                 })
[16:12:12.549]             }))
[16:12:12.549]             future::FutureResult(value = ...future.value$value, 
[16:12:12.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.549]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.549]                     ...future.globalenv.names))
[16:12:12.549]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.549]         }, condition = base::local({
[16:12:12.549]             c <- base::c
[16:12:12.549]             inherits <- base::inherits
[16:12:12.549]             invokeRestart <- base::invokeRestart
[16:12:12.549]             length <- base::length
[16:12:12.549]             list <- base::list
[16:12:12.549]             seq.int <- base::seq.int
[16:12:12.549]             signalCondition <- base::signalCondition
[16:12:12.549]             sys.calls <- base::sys.calls
[16:12:12.549]             `[[` <- base::`[[`
[16:12:12.549]             `+` <- base::`+`
[16:12:12.549]             `<<-` <- base::`<<-`
[16:12:12.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.549]                   3L)]
[16:12:12.549]             }
[16:12:12.549]             function(cond) {
[16:12:12.549]                 is_error <- inherits(cond, "error")
[16:12:12.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.549]                   NULL)
[16:12:12.549]                 if (is_error) {
[16:12:12.549]                   sessionInformation <- function() {
[16:12:12.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.549]                       search = base::search(), system = base::Sys.info())
[16:12:12.549]                   }
[16:12:12.549]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.549]                     cond$call), session = sessionInformation(), 
[16:12:12.549]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.549]                   signalCondition(cond)
[16:12:12.549]                 }
[16:12:12.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.549]                 "immediateCondition"))) {
[16:12:12.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.549]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.549]                   if (TRUE && !signal) {
[16:12:12.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.549]                     {
[16:12:12.549]                       inherits <- base::inherits
[16:12:12.549]                       invokeRestart <- base::invokeRestart
[16:12:12.549]                       is.null <- base::is.null
[16:12:12.549]                       muffled <- FALSE
[16:12:12.549]                       if (inherits(cond, "message")) {
[16:12:12.549]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.549]                         if (muffled) 
[16:12:12.549]                           invokeRestart("muffleMessage")
[16:12:12.549]                       }
[16:12:12.549]                       else if (inherits(cond, "warning")) {
[16:12:12.549]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.549]                         if (muffled) 
[16:12:12.549]                           invokeRestart("muffleWarning")
[16:12:12.549]                       }
[16:12:12.549]                       else if (inherits(cond, "condition")) {
[16:12:12.549]                         if (!is.null(pattern)) {
[16:12:12.549]                           computeRestarts <- base::computeRestarts
[16:12:12.549]                           grepl <- base::grepl
[16:12:12.549]                           restarts <- computeRestarts(cond)
[16:12:12.549]                           for (restart in restarts) {
[16:12:12.549]                             name <- restart$name
[16:12:12.549]                             if (is.null(name)) 
[16:12:12.549]                               next
[16:12:12.549]                             if (!grepl(pattern, name)) 
[16:12:12.549]                               next
[16:12:12.549]                             invokeRestart(restart)
[16:12:12.549]                             muffled <- TRUE
[16:12:12.549]                             break
[16:12:12.549]                           }
[16:12:12.549]                         }
[16:12:12.549]                       }
[16:12:12.549]                       invisible(muffled)
[16:12:12.549]                     }
[16:12:12.549]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.549]                   }
[16:12:12.549]                 }
[16:12:12.549]                 else {
[16:12:12.549]                   if (TRUE) {
[16:12:12.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.549]                     {
[16:12:12.549]                       inherits <- base::inherits
[16:12:12.549]                       invokeRestart <- base::invokeRestart
[16:12:12.549]                       is.null <- base::is.null
[16:12:12.549]                       muffled <- FALSE
[16:12:12.549]                       if (inherits(cond, "message")) {
[16:12:12.549]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.549]                         if (muffled) 
[16:12:12.549]                           invokeRestart("muffleMessage")
[16:12:12.549]                       }
[16:12:12.549]                       else if (inherits(cond, "warning")) {
[16:12:12.549]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.549]                         if (muffled) 
[16:12:12.549]                           invokeRestart("muffleWarning")
[16:12:12.549]                       }
[16:12:12.549]                       else if (inherits(cond, "condition")) {
[16:12:12.549]                         if (!is.null(pattern)) {
[16:12:12.549]                           computeRestarts <- base::computeRestarts
[16:12:12.549]                           grepl <- base::grepl
[16:12:12.549]                           restarts <- computeRestarts(cond)
[16:12:12.549]                           for (restart in restarts) {
[16:12:12.549]                             name <- restart$name
[16:12:12.549]                             if (is.null(name)) 
[16:12:12.549]                               next
[16:12:12.549]                             if (!grepl(pattern, name)) 
[16:12:12.549]                               next
[16:12:12.549]                             invokeRestart(restart)
[16:12:12.549]                             muffled <- TRUE
[16:12:12.549]                             break
[16:12:12.549]                           }
[16:12:12.549]                         }
[16:12:12.549]                       }
[16:12:12.549]                       invisible(muffled)
[16:12:12.549]                     }
[16:12:12.549]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.549]                   }
[16:12:12.549]                 }
[16:12:12.549]             }
[16:12:12.549]         }))
[16:12:12.549]     }, error = function(ex) {
[16:12:12.549]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.549]                 ...future.rng), started = ...future.startTime, 
[16:12:12.549]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.549]             version = "1.8"), class = "FutureResult")
[16:12:12.549]     }, finally = {
[16:12:12.549]         if (!identical(...future.workdir, getwd())) 
[16:12:12.549]             setwd(...future.workdir)
[16:12:12.549]         {
[16:12:12.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.549]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.549]             }
[16:12:12.549]             base::options(...future.oldOptions)
[16:12:12.549]             if (.Platform$OS.type == "windows") {
[16:12:12.549]                 old_names <- names(...future.oldEnvVars)
[16:12:12.549]                 envs <- base::Sys.getenv()
[16:12:12.549]                 names <- names(envs)
[16:12:12.549]                 common <- intersect(names, old_names)
[16:12:12.549]                 added <- setdiff(names, old_names)
[16:12:12.549]                 removed <- setdiff(old_names, names)
[16:12:12.549]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.549]                   envs[common]]
[16:12:12.549]                 NAMES <- toupper(changed)
[16:12:12.549]                 args <- list()
[16:12:12.549]                 for (kk in seq_along(NAMES)) {
[16:12:12.549]                   name <- changed[[kk]]
[16:12:12.549]                   NAME <- NAMES[[kk]]
[16:12:12.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.549]                     next
[16:12:12.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.549]                 }
[16:12:12.549]                 NAMES <- toupper(added)
[16:12:12.549]                 for (kk in seq_along(NAMES)) {
[16:12:12.549]                   name <- added[[kk]]
[16:12:12.549]                   NAME <- NAMES[[kk]]
[16:12:12.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.549]                     next
[16:12:12.549]                   args[[name]] <- ""
[16:12:12.549]                 }
[16:12:12.549]                 NAMES <- toupper(removed)
[16:12:12.549]                 for (kk in seq_along(NAMES)) {
[16:12:12.549]                   name <- removed[[kk]]
[16:12:12.549]                   NAME <- NAMES[[kk]]
[16:12:12.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.549]                     next
[16:12:12.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.549]                 }
[16:12:12.549]                 if (length(args) > 0) 
[16:12:12.549]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.549]             }
[16:12:12.549]             else {
[16:12:12.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.549]             }
[16:12:12.549]             {
[16:12:12.549]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.549]                   0L) {
[16:12:12.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.549]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.549]                   base::options(opts)
[16:12:12.549]                 }
[16:12:12.549]                 {
[16:12:12.549]                   {
[16:12:12.549]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:12.549]                     NULL
[16:12:12.549]                   }
[16:12:12.549]                   options(future.plan = NULL)
[16:12:12.549]                   if (is.na(NA_character_)) 
[16:12:12.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.549]                   future::plan(list(function (...) 
[16:12:12.549]                   {
[16:12:12.549]                     Future(1)
[16:12:12.549]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.549]                 }
[16:12:12.549]             }
[16:12:12.549]         }
[16:12:12.549]     })
[16:12:12.549]     if (TRUE) {
[16:12:12.549]         base::sink(type = "output", split = FALSE)
[16:12:12.549]         if (TRUE) {
[16:12:12.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.549]         }
[16:12:12.549]         else {
[16:12:12.549]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.549]         }
[16:12:12.549]         base::close(...future.stdout)
[16:12:12.549]         ...future.stdout <- NULL
[16:12:12.549]     }
[16:12:12.549]     ...future.result$conditions <- ...future.conditions
[16:12:12.549]     ...future.result$finished <- base::Sys.time()
[16:12:12.549]     ...future.result
[16:12:12.549] }
[16:12:12.552] MultisessionFuture started
[16:12:12.552] result() for ClusterFuture ...
[16:12:12.552] receiveMessageFromWorker() for ClusterFuture ...
[16:12:12.552] - Validating connection of MultisessionFuture
[16:12:12.553] - received message: FutureResult
[16:12:12.554] - Received FutureResult
[16:12:12.554] - Erased future from FutureRegistry
[16:12:12.554] result() for ClusterFuture ...
[16:12:12.554] - result already collected: FutureResult
[16:12:12.554] result() for ClusterFuture ... done
[16:12:12.554] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:12.554] result() for ClusterFuture ... done
[16:12:12.554] result() for ClusterFuture ...
[16:12:12.554] - result already collected: FutureResult
[16:12:12.555] result() for ClusterFuture ... done
[1] 42
[16:12:12.555] getGlobalsAndPackages() ...
[16:12:12.555] Searching for globals...
[16:12:12.556] - globals found: [1] ‘{’
[16:12:12.556] Searching for globals ... DONE
[16:12:12.556] Resolving globals: FALSE
[16:12:12.556] 
[16:12:12.556] 
[16:12:12.557] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 001b0eb5-b92c-fd7e-92bb-54987c329765
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:12.557] Packages needed by the future expression (n = 0): <none>
[16:12:12.557] Packages needed by future strategies (n = 0): <none>
[16:12:12.558] {
[16:12:12.558]     {
[16:12:12.558]         {
[16:12:12.558]             ...future.startTime <- base::Sys.time()
[16:12:12.558]             {
[16:12:12.558]                 {
[16:12:12.558]                   {
[16:12:12.558]                     base::local({
[16:12:12.558]                       has_future <- base::requireNamespace("future", 
[16:12:12.558]                         quietly = TRUE)
[16:12:12.558]                       if (has_future) {
[16:12:12.558]                         ns <- base::getNamespace("future")
[16:12:12.558]                         version <- ns[[".package"]][["version"]]
[16:12:12.558]                         if (is.null(version)) 
[16:12:12.558]                           version <- utils::packageVersion("future")
[16:12:12.558]                       }
[16:12:12.558]                       else {
[16:12:12.558]                         version <- NULL
[16:12:12.558]                       }
[16:12:12.558]                       if (!has_future || version < "1.8.0") {
[16:12:12.558]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.558]                           "", base::R.version$version.string), 
[16:12:12.558]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.558]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.558]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.558]                             "release", "version")], collapse = " "), 
[16:12:12.558]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.558]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.558]                           info)
[16:12:12.558]                         info <- base::paste(info, collapse = "; ")
[16:12:12.558]                         if (!has_future) {
[16:12:12.558]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.558]                             info)
[16:12:12.558]                         }
[16:12:12.558]                         else {
[16:12:12.558]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.558]                             info, version)
[16:12:12.558]                         }
[16:12:12.558]                         base::stop(msg)
[16:12:12.558]                       }
[16:12:12.558]                     })
[16:12:12.558]                   }
[16:12:12.558]                   options(future.plan = NULL)
[16:12:12.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.558]                 }
[16:12:12.558]                 ...future.workdir <- getwd()
[16:12:12.558]             }
[16:12:12.558]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.558]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.558]         }
[16:12:12.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.558]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.558]             base::names(...future.oldOptions))
[16:12:12.558]     }
[16:12:12.558]     if (FALSE) {
[16:12:12.558]     }
[16:12:12.558]     else {
[16:12:12.558]         if (TRUE) {
[16:12:12.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.558]                 open = "w")
[16:12:12.558]         }
[16:12:12.558]         else {
[16:12:12.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.558]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.558]         }
[16:12:12.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.558]             base::sink(type = "output", split = FALSE)
[16:12:12.558]             base::close(...future.stdout)
[16:12:12.558]         }, add = TRUE)
[16:12:12.558]     }
[16:12:12.558]     ...future.frame <- base::sys.nframe()
[16:12:12.558]     ...future.conditions <- base::list()
[16:12:12.558]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.558]     if (FALSE) {
[16:12:12.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.558]     }
[16:12:12.558]     ...future.result <- base::tryCatch({
[16:12:12.558]         base::withCallingHandlers({
[16:12:12.558]             ...future.value <- base::withVisible(base::local({
[16:12:12.558]                 42L
[16:12:12.558]             }))
[16:12:12.558]             future::FutureResult(value = ...future.value$value, 
[16:12:12.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.558]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.558]                     ...future.globalenv.names))
[16:12:12.558]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.558]         }, condition = base::local({
[16:12:12.558]             c <- base::c
[16:12:12.558]             inherits <- base::inherits
[16:12:12.558]             invokeRestart <- base::invokeRestart
[16:12:12.558]             length <- base::length
[16:12:12.558]             list <- base::list
[16:12:12.558]             seq.int <- base::seq.int
[16:12:12.558]             signalCondition <- base::signalCondition
[16:12:12.558]             sys.calls <- base::sys.calls
[16:12:12.558]             `[[` <- base::`[[`
[16:12:12.558]             `+` <- base::`+`
[16:12:12.558]             `<<-` <- base::`<<-`
[16:12:12.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.558]                   3L)]
[16:12:12.558]             }
[16:12:12.558]             function(cond) {
[16:12:12.558]                 is_error <- inherits(cond, "error")
[16:12:12.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.558]                   NULL)
[16:12:12.558]                 if (is_error) {
[16:12:12.558]                   sessionInformation <- function() {
[16:12:12.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.558]                       search = base::search(), system = base::Sys.info())
[16:12:12.558]                   }
[16:12:12.558]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.558]                     cond$call), session = sessionInformation(), 
[16:12:12.558]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.558]                   signalCondition(cond)
[16:12:12.558]                 }
[16:12:12.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.558]                 "immediateCondition"))) {
[16:12:12.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.558]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.558]                   if (TRUE && !signal) {
[16:12:12.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.558]                     {
[16:12:12.558]                       inherits <- base::inherits
[16:12:12.558]                       invokeRestart <- base::invokeRestart
[16:12:12.558]                       is.null <- base::is.null
[16:12:12.558]                       muffled <- FALSE
[16:12:12.558]                       if (inherits(cond, "message")) {
[16:12:12.558]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.558]                         if (muffled) 
[16:12:12.558]                           invokeRestart("muffleMessage")
[16:12:12.558]                       }
[16:12:12.558]                       else if (inherits(cond, "warning")) {
[16:12:12.558]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.558]                         if (muffled) 
[16:12:12.558]                           invokeRestart("muffleWarning")
[16:12:12.558]                       }
[16:12:12.558]                       else if (inherits(cond, "condition")) {
[16:12:12.558]                         if (!is.null(pattern)) {
[16:12:12.558]                           computeRestarts <- base::computeRestarts
[16:12:12.558]                           grepl <- base::grepl
[16:12:12.558]                           restarts <- computeRestarts(cond)
[16:12:12.558]                           for (restart in restarts) {
[16:12:12.558]                             name <- restart$name
[16:12:12.558]                             if (is.null(name)) 
[16:12:12.558]                               next
[16:12:12.558]                             if (!grepl(pattern, name)) 
[16:12:12.558]                               next
[16:12:12.558]                             invokeRestart(restart)
[16:12:12.558]                             muffled <- TRUE
[16:12:12.558]                             break
[16:12:12.558]                           }
[16:12:12.558]                         }
[16:12:12.558]                       }
[16:12:12.558]                       invisible(muffled)
[16:12:12.558]                     }
[16:12:12.558]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.558]                   }
[16:12:12.558]                 }
[16:12:12.558]                 else {
[16:12:12.558]                   if (TRUE) {
[16:12:12.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.558]                     {
[16:12:12.558]                       inherits <- base::inherits
[16:12:12.558]                       invokeRestart <- base::invokeRestart
[16:12:12.558]                       is.null <- base::is.null
[16:12:12.558]                       muffled <- FALSE
[16:12:12.558]                       if (inherits(cond, "message")) {
[16:12:12.558]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.558]                         if (muffled) 
[16:12:12.558]                           invokeRestart("muffleMessage")
[16:12:12.558]                       }
[16:12:12.558]                       else if (inherits(cond, "warning")) {
[16:12:12.558]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.558]                         if (muffled) 
[16:12:12.558]                           invokeRestart("muffleWarning")
[16:12:12.558]                       }
[16:12:12.558]                       else if (inherits(cond, "condition")) {
[16:12:12.558]                         if (!is.null(pattern)) {
[16:12:12.558]                           computeRestarts <- base::computeRestarts
[16:12:12.558]                           grepl <- base::grepl
[16:12:12.558]                           restarts <- computeRestarts(cond)
[16:12:12.558]                           for (restart in restarts) {
[16:12:12.558]                             name <- restart$name
[16:12:12.558]                             if (is.null(name)) 
[16:12:12.558]                               next
[16:12:12.558]                             if (!grepl(pattern, name)) 
[16:12:12.558]                               next
[16:12:12.558]                             invokeRestart(restart)
[16:12:12.558]                             muffled <- TRUE
[16:12:12.558]                             break
[16:12:12.558]                           }
[16:12:12.558]                         }
[16:12:12.558]                       }
[16:12:12.558]                       invisible(muffled)
[16:12:12.558]                     }
[16:12:12.558]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.558]                   }
[16:12:12.558]                 }
[16:12:12.558]             }
[16:12:12.558]         }))
[16:12:12.558]     }, error = function(ex) {
[16:12:12.558]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.558]                 ...future.rng), started = ...future.startTime, 
[16:12:12.558]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.558]             version = "1.8"), class = "FutureResult")
[16:12:12.558]     }, finally = {
[16:12:12.558]         if (!identical(...future.workdir, getwd())) 
[16:12:12.558]             setwd(...future.workdir)
[16:12:12.558]         {
[16:12:12.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.558]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.558]             }
[16:12:12.558]             base::options(...future.oldOptions)
[16:12:12.558]             if (.Platform$OS.type == "windows") {
[16:12:12.558]                 old_names <- names(...future.oldEnvVars)
[16:12:12.558]                 envs <- base::Sys.getenv()
[16:12:12.558]                 names <- names(envs)
[16:12:12.558]                 common <- intersect(names, old_names)
[16:12:12.558]                 added <- setdiff(names, old_names)
[16:12:12.558]                 removed <- setdiff(old_names, names)
[16:12:12.558]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.558]                   envs[common]]
[16:12:12.558]                 NAMES <- toupper(changed)
[16:12:12.558]                 args <- list()
[16:12:12.558]                 for (kk in seq_along(NAMES)) {
[16:12:12.558]                   name <- changed[[kk]]
[16:12:12.558]                   NAME <- NAMES[[kk]]
[16:12:12.558]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.558]                     next
[16:12:12.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.558]                 }
[16:12:12.558]                 NAMES <- toupper(added)
[16:12:12.558]                 for (kk in seq_along(NAMES)) {
[16:12:12.558]                   name <- added[[kk]]
[16:12:12.558]                   NAME <- NAMES[[kk]]
[16:12:12.558]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.558]                     next
[16:12:12.558]                   args[[name]] <- ""
[16:12:12.558]                 }
[16:12:12.558]                 NAMES <- toupper(removed)
[16:12:12.558]                 for (kk in seq_along(NAMES)) {
[16:12:12.558]                   name <- removed[[kk]]
[16:12:12.558]                   NAME <- NAMES[[kk]]
[16:12:12.558]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.558]                     next
[16:12:12.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.558]                 }
[16:12:12.558]                 if (length(args) > 0) 
[16:12:12.558]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.558]             }
[16:12:12.558]             else {
[16:12:12.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.558]             }
[16:12:12.558]             {
[16:12:12.558]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.558]                   0L) {
[16:12:12.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.558]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.558]                   base::options(opts)
[16:12:12.558]                 }
[16:12:12.558]                 {
[16:12:12.558]                   {
[16:12:12.558]                     NULL
[16:12:12.558]                     RNGkind("Mersenne-Twister")
[16:12:12.558]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.558]                       inherits = FALSE)
[16:12:12.558]                   }
[16:12:12.558]                   options(future.plan = NULL)
[16:12:12.558]                   if (is.na(NA_character_)) 
[16:12:12.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.558]                   future::plan(list(function (...) 
[16:12:12.558]                   {
[16:12:12.558]                     Future(1)
[16:12:12.558]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.558]                 }
[16:12:12.558]             }
[16:12:12.558]         }
[16:12:12.558]     })
[16:12:12.558]     if (TRUE) {
[16:12:12.558]         base::sink(type = "output", split = FALSE)
[16:12:12.558]         if (TRUE) {
[16:12:12.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.558]         }
[16:12:12.558]         else {
[16:12:12.558]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.558]         }
[16:12:12.558]         base::close(...future.stdout)
[16:12:12.558]         ...future.stdout <- NULL
[16:12:12.558]     }
[16:12:12.558]     ...future.result$conditions <- ...future.conditions
[16:12:12.558]     ...future.result$finished <- base::Sys.time()
[16:12:12.558]     ...future.result
[16:12:12.558] }
[16:12:12.560] plan(): Setting new future strategy stack:
[16:12:12.560] List of future strategies:
[16:12:12.560] 1. sequential:
[16:12:12.560]    - args: function (..., envir = parent.frame())
[16:12:12.560]    - tweaked: FALSE
[16:12:12.560]    - call: NULL
[16:12:12.561] plan(): nbrOfWorkers() = 1
[16:12:12.561] plan(): Setting new future strategy stack:
[16:12:12.562] List of future strategies:
[16:12:12.562] 1. future:
[16:12:12.562]    - args: function (...)
[16:12:12.562]    - tweaked: FALSE
[16:12:12.562]    - call: plan(foo)
[16:12:12.562] plan(): nbrOfWorkers() = Inf
[16:12:12.562] SequentialFuture started (and completed)
[1] 42
[16:12:12.563] getGlobalsAndPackages() ...
[16:12:12.563] Searching for globals...
[16:12:12.563] - globals found: [1] ‘{’
[16:12:12.563] Searching for globals ... DONE
[16:12:12.564] Resolving globals: FALSE
[16:12:12.564] 
[16:12:12.564] 
[16:12:12.564] getGlobalsAndPackages() ... DONE
[16:12:12.565] Packages needed by the future expression (n = 0): <none>
[16:12:12.565] Packages needed by future strategies (n = 0): <none>
[16:12:12.566] {
[16:12:12.566]     {
[16:12:12.566]         {
[16:12:12.566]             ...future.startTime <- base::Sys.time()
[16:12:12.566]             {
[16:12:12.566]                 {
[16:12:12.566]                   {
[16:12:12.566]                     base::local({
[16:12:12.566]                       has_future <- base::requireNamespace("future", 
[16:12:12.566]                         quietly = TRUE)
[16:12:12.566]                       if (has_future) {
[16:12:12.566]                         ns <- base::getNamespace("future")
[16:12:12.566]                         version <- ns[[".package"]][["version"]]
[16:12:12.566]                         if (is.null(version)) 
[16:12:12.566]                           version <- utils::packageVersion("future")
[16:12:12.566]                       }
[16:12:12.566]                       else {
[16:12:12.566]                         version <- NULL
[16:12:12.566]                       }
[16:12:12.566]                       if (!has_future || version < "1.8.0") {
[16:12:12.566]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.566]                           "", base::R.version$version.string), 
[16:12:12.566]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:12.566]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.566]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.566]                             "release", "version")], collapse = " "), 
[16:12:12.566]                           hostname = base::Sys.info()[["nodename"]])
[16:12:12.566]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.566]                           info)
[16:12:12.566]                         info <- base::paste(info, collapse = "; ")
[16:12:12.566]                         if (!has_future) {
[16:12:12.566]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.566]                             info)
[16:12:12.566]                         }
[16:12:12.566]                         else {
[16:12:12.566]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.566]                             info, version)
[16:12:12.566]                         }
[16:12:12.566]                         base::stop(msg)
[16:12:12.566]                       }
[16:12:12.566]                     })
[16:12:12.566]                   }
[16:12:12.566]                   options(future.plan = NULL)
[16:12:12.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.566]                 }
[16:12:12.566]                 ...future.workdir <- getwd()
[16:12:12.566]             }
[16:12:12.566]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.566]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.566]         }
[16:12:12.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.566]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.566]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.566]             base::names(...future.oldOptions))
[16:12:12.566]     }
[16:12:12.566]     if (FALSE) {
[16:12:12.566]     }
[16:12:12.566]     else {
[16:12:12.566]         if (TRUE) {
[16:12:12.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.566]                 open = "w")
[16:12:12.566]         }
[16:12:12.566]         else {
[16:12:12.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.566]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.566]         }
[16:12:12.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.566]             base::sink(type = "output", split = FALSE)
[16:12:12.566]             base::close(...future.stdout)
[16:12:12.566]         }, add = TRUE)
[16:12:12.566]     }
[16:12:12.566]     ...future.frame <- base::sys.nframe()
[16:12:12.566]     ...future.conditions <- base::list()
[16:12:12.566]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.566]     if (FALSE) {
[16:12:12.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.566]     }
[16:12:12.566]     ...future.result <- base::tryCatch({
[16:12:12.566]         base::withCallingHandlers({
[16:12:12.566]             ...future.value <- base::withVisible(base::local({
[16:12:12.566]                 42L
[16:12:12.566]             }))
[16:12:12.566]             future::FutureResult(value = ...future.value$value, 
[16:12:12.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.566]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.566]                     ...future.globalenv.names))
[16:12:12.566]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.566]         }, condition = base::local({
[16:12:12.566]             c <- base::c
[16:12:12.566]             inherits <- base::inherits
[16:12:12.566]             invokeRestart <- base::invokeRestart
[16:12:12.566]             length <- base::length
[16:12:12.566]             list <- base::list
[16:12:12.566]             seq.int <- base::seq.int
[16:12:12.566]             signalCondition <- base::signalCondition
[16:12:12.566]             sys.calls <- base::sys.calls
[16:12:12.566]             `[[` <- base::`[[`
[16:12:12.566]             `+` <- base::`+`
[16:12:12.566]             `<<-` <- base::`<<-`
[16:12:12.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.566]                   3L)]
[16:12:12.566]             }
[16:12:12.566]             function(cond) {
[16:12:12.566]                 is_error <- inherits(cond, "error")
[16:12:12.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.566]                   NULL)
[16:12:12.566]                 if (is_error) {
[16:12:12.566]                   sessionInformation <- function() {
[16:12:12.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.566]                       search = base::search(), system = base::Sys.info())
[16:12:12.566]                   }
[16:12:12.566]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.566]                     cond$call), session = sessionInformation(), 
[16:12:12.566]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.566]                   signalCondition(cond)
[16:12:12.566]                 }
[16:12:12.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.566]                 "immediateCondition"))) {
[16:12:12.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.566]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.566]                   if (TRUE && !signal) {
[16:12:12.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.566]                     {
[16:12:12.566]                       inherits <- base::inherits
[16:12:12.566]                       invokeRestart <- base::invokeRestart
[16:12:12.566]                       is.null <- base::is.null
[16:12:12.566]                       muffled <- FALSE
[16:12:12.566]                       if (inherits(cond, "message")) {
[16:12:12.566]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.566]                         if (muffled) 
[16:12:12.566]                           invokeRestart("muffleMessage")
[16:12:12.566]                       }
[16:12:12.566]                       else if (inherits(cond, "warning")) {
[16:12:12.566]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.566]                         if (muffled) 
[16:12:12.566]                           invokeRestart("muffleWarning")
[16:12:12.566]                       }
[16:12:12.566]                       else if (inherits(cond, "condition")) {
[16:12:12.566]                         if (!is.null(pattern)) {
[16:12:12.566]                           computeRestarts <- base::computeRestarts
[16:12:12.566]                           grepl <- base::grepl
[16:12:12.566]                           restarts <- computeRestarts(cond)
[16:12:12.566]                           for (restart in restarts) {
[16:12:12.566]                             name <- restart$name
[16:12:12.566]                             if (is.null(name)) 
[16:12:12.566]                               next
[16:12:12.566]                             if (!grepl(pattern, name)) 
[16:12:12.566]                               next
[16:12:12.566]                             invokeRestart(restart)
[16:12:12.566]                             muffled <- TRUE
[16:12:12.566]                             break
[16:12:12.566]                           }
[16:12:12.566]                         }
[16:12:12.566]                       }
[16:12:12.566]                       invisible(muffled)
[16:12:12.566]                     }
[16:12:12.566]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.566]                   }
[16:12:12.566]                 }
[16:12:12.566]                 else {
[16:12:12.566]                   if (TRUE) {
[16:12:12.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.566]                     {
[16:12:12.566]                       inherits <- base::inherits
[16:12:12.566]                       invokeRestart <- base::invokeRestart
[16:12:12.566]                       is.null <- base::is.null
[16:12:12.566]                       muffled <- FALSE
[16:12:12.566]                       if (inherits(cond, "message")) {
[16:12:12.566]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.566]                         if (muffled) 
[16:12:12.566]                           invokeRestart("muffleMessage")
[16:12:12.566]                       }
[16:12:12.566]                       else if (inherits(cond, "warning")) {
[16:12:12.566]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.566]                         if (muffled) 
[16:12:12.566]                           invokeRestart("muffleWarning")
[16:12:12.566]                       }
[16:12:12.566]                       else if (inherits(cond, "condition")) {
[16:12:12.566]                         if (!is.null(pattern)) {
[16:12:12.566]                           computeRestarts <- base::computeRestarts
[16:12:12.566]                           grepl <- base::grepl
[16:12:12.566]                           restarts <- computeRestarts(cond)
[16:12:12.566]                           for (restart in restarts) {
[16:12:12.566]                             name <- restart$name
[16:12:12.566]                             if (is.null(name)) 
[16:12:12.566]                               next
[16:12:12.566]                             if (!grepl(pattern, name)) 
[16:12:12.566]                               next
[16:12:12.566]                             invokeRestart(restart)
[16:12:12.566]                             muffled <- TRUE
[16:12:12.566]                             break
[16:12:12.566]                           }
[16:12:12.566]                         }
[16:12:12.566]                       }
[16:12:12.566]                       invisible(muffled)
[16:12:12.566]                     }
[16:12:12.566]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.566]                   }
[16:12:12.566]                 }
[16:12:12.566]             }
[16:12:12.566]         }))
[16:12:12.566]     }, error = function(ex) {
[16:12:12.566]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.566]                 ...future.rng), started = ...future.startTime, 
[16:12:12.566]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.566]             version = "1.8"), class = "FutureResult")
[16:12:12.566]     }, finally = {
[16:12:12.566]         if (!identical(...future.workdir, getwd())) 
[16:12:12.566]             setwd(...future.workdir)
[16:12:12.566]         {
[16:12:12.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.566]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.566]             }
[16:12:12.566]             base::options(...future.oldOptions)
[16:12:12.566]             if (.Platform$OS.type == "windows") {
[16:12:12.566]                 old_names <- names(...future.oldEnvVars)
[16:12:12.566]                 envs <- base::Sys.getenv()
[16:12:12.566]                 names <- names(envs)
[16:12:12.566]                 common <- intersect(names, old_names)
[16:12:12.566]                 added <- setdiff(names, old_names)
[16:12:12.566]                 removed <- setdiff(old_names, names)
[16:12:12.566]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.566]                   envs[common]]
[16:12:12.566]                 NAMES <- toupper(changed)
[16:12:12.566]                 args <- list()
[16:12:12.566]                 for (kk in seq_along(NAMES)) {
[16:12:12.566]                   name <- changed[[kk]]
[16:12:12.566]                   NAME <- NAMES[[kk]]
[16:12:12.566]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.566]                     next
[16:12:12.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.566]                 }
[16:12:12.566]                 NAMES <- toupper(added)
[16:12:12.566]                 for (kk in seq_along(NAMES)) {
[16:12:12.566]                   name <- added[[kk]]
[16:12:12.566]                   NAME <- NAMES[[kk]]
[16:12:12.566]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.566]                     next
[16:12:12.566]                   args[[name]] <- ""
[16:12:12.566]                 }
[16:12:12.566]                 NAMES <- toupper(removed)
[16:12:12.566]                 for (kk in seq_along(NAMES)) {
[16:12:12.566]                   name <- removed[[kk]]
[16:12:12.566]                   NAME <- NAMES[[kk]]
[16:12:12.566]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.566]                     next
[16:12:12.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.566]                 }
[16:12:12.566]                 if (length(args) > 0) 
[16:12:12.566]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.566]             }
[16:12:12.566]             else {
[16:12:12.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.566]             }
[16:12:12.566]             {
[16:12:12.566]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.566]                   0L) {
[16:12:12.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.566]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.566]                   base::options(opts)
[16:12:12.566]                 }
[16:12:12.566]                 {
[16:12:12.566]                   {
[16:12:12.566]                     NULL
[16:12:12.566]                     RNGkind("Mersenne-Twister")
[16:12:12.566]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:12.566]                       inherits = FALSE)
[16:12:12.566]                   }
[16:12:12.566]                   options(future.plan = NULL)
[16:12:12.566]                   if (is.na(NA_character_)) 
[16:12:12.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.566]                   future::plan(list(function (...) 
[16:12:12.566]                   {
[16:12:12.566]                     Future(1)
[16:12:12.566]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.566]                 }
[16:12:12.566]             }
[16:12:12.566]         }
[16:12:12.566]     })
[16:12:12.566]     if (TRUE) {
[16:12:12.566]         base::sink(type = "output", split = FALSE)
[16:12:12.566]         if (TRUE) {
[16:12:12.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.566]         }
[16:12:12.566]         else {
[16:12:12.566]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.566]         }
[16:12:12.566]         base::close(...future.stdout)
[16:12:12.566]         ...future.stdout <- NULL
[16:12:12.566]     }
[16:12:12.566]     ...future.result$conditions <- ...future.conditions
[16:12:12.566]     ...future.result$finished <- base::Sys.time()
[16:12:12.566]     ...future.result
[16:12:12.566] }
[16:12:12.569] plan(): Setting new future strategy stack:
[16:12:12.569] List of future strategies:
[16:12:12.569] 1. sequential:
[16:12:12.569]    - args: function (..., envir = parent.frame())
[16:12:12.569]    - tweaked: FALSE
[16:12:12.569]    - call: NULL
[16:12:12.569] plan(): nbrOfWorkers() = 1
[16:12:12.570] plan(): Setting new future strategy stack:
[16:12:12.571] List of future strategies:
[16:12:12.571] 1. future:
[16:12:12.571]    - args: function (...)
[16:12:12.571]    - tweaked: FALSE
[16:12:12.571]    - call: plan(foo)
[16:12:12.571] plan(): nbrOfWorkers() = Inf
[16:12:12.571] SequentialFuture started (and completed)
[1] 42
[16:12:12.572] getGlobalsAndPackages() ...
[16:12:12.572] 
[16:12:12.572] - globals: [0] <none>
[16:12:12.573] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55b0067a30f8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 001b0eb5-b92c-fd7e-92bb-54987c329765
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:12.575] Packages needed by the future expression (n = 0): <none>
[16:12:12.575] Packages needed by future strategies (n = 0): <none>
[16:12:12.576] {
[16:12:12.576]     {
[16:12:12.576]         {
[16:12:12.576]             ...future.startTime <- base::Sys.time()
[16:12:12.576]             {
[16:12:12.576]                 {
[16:12:12.576]                   {
[16:12:12.576]                     {
[16:12:12.576]                       base::local({
[16:12:12.576]                         has_future <- base::requireNamespace("future", 
[16:12:12.576]                           quietly = TRUE)
[16:12:12.576]                         if (has_future) {
[16:12:12.576]                           ns <- base::getNamespace("future")
[16:12:12.576]                           version <- ns[[".package"]][["version"]]
[16:12:12.576]                           if (is.null(version)) 
[16:12:12.576]                             version <- utils::packageVersion("future")
[16:12:12.576]                         }
[16:12:12.576]                         else {
[16:12:12.576]                           version <- NULL
[16:12:12.576]                         }
[16:12:12.576]                         if (!has_future || version < "1.8.0") {
[16:12:12.576]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.576]                             "", base::R.version$version.string), 
[16:12:12.576]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:12.576]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.576]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.576]                               "release", "version")], collapse = " "), 
[16:12:12.576]                             hostname = base::Sys.info()[["nodename"]])
[16:12:12.576]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.576]                             info)
[16:12:12.576]                           info <- base::paste(info, collapse = "; ")
[16:12:12.576]                           if (!has_future) {
[16:12:12.576]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.576]                               info)
[16:12:12.576]                           }
[16:12:12.576]                           else {
[16:12:12.576]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.576]                               info, version)
[16:12:12.576]                           }
[16:12:12.576]                           base::stop(msg)
[16:12:12.576]                         }
[16:12:12.576]                       })
[16:12:12.576]                     }
[16:12:12.576]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:12.576]                     base::options(mc.cores = 1L)
[16:12:12.576]                   }
[16:12:12.576]                   options(future.plan = NULL)
[16:12:12.576]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.576]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.576]                 }
[16:12:12.576]                 ...future.workdir <- getwd()
[16:12:12.576]             }
[16:12:12.576]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.576]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.576]         }
[16:12:12.576]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.576]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.576]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.576]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.576]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.576]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.576]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.576]             base::names(...future.oldOptions))
[16:12:12.576]     }
[16:12:12.576]     if (FALSE) {
[16:12:12.576]     }
[16:12:12.576]     else {
[16:12:12.576]         if (TRUE) {
[16:12:12.576]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.576]                 open = "w")
[16:12:12.576]         }
[16:12:12.576]         else {
[16:12:12.576]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.576]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.576]         }
[16:12:12.576]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.576]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.576]             base::sink(type = "output", split = FALSE)
[16:12:12.576]             base::close(...future.stdout)
[16:12:12.576]         }, add = TRUE)
[16:12:12.576]     }
[16:12:12.576]     ...future.frame <- base::sys.nframe()
[16:12:12.576]     ...future.conditions <- base::list()
[16:12:12.576]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.576]     if (FALSE) {
[16:12:12.576]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.576]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.576]     }
[16:12:12.576]     ...future.result <- base::tryCatch({
[16:12:12.576]         base::withCallingHandlers({
[16:12:12.576]             ...future.value <- base::withVisible(base::local({
[16:12:12.576]                 withCallingHandlers({
[16:12:12.576]                   {
[16:12:12.576]                     42L
[16:12:12.576]                   }
[16:12:12.576]                 }, immediateCondition = function(cond) {
[16:12:12.576]                   save_rds <- function (object, pathname, ...) 
[16:12:12.576]                   {
[16:12:12.576]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:12.576]                     if (file_test("-f", pathname_tmp)) {
[16:12:12.576]                       fi_tmp <- file.info(pathname_tmp)
[16:12:12.576]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:12.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:12.576]                         fi_tmp[["mtime"]])
[16:12:12.576]                     }
[16:12:12.576]                     tryCatch({
[16:12:12.576]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:12.576]                     }, error = function(ex) {
[16:12:12.576]                       msg <- conditionMessage(ex)
[16:12:12.576]                       fi_tmp <- file.info(pathname_tmp)
[16:12:12.576]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:12.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:12.576]                         fi_tmp[["mtime"]], msg)
[16:12:12.576]                       ex$message <- msg
[16:12:12.576]                       stop(ex)
[16:12:12.576]                     })
[16:12:12.576]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:12.576]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:12.576]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:12.576]                       fi_tmp <- file.info(pathname_tmp)
[16:12:12.576]                       fi <- file.info(pathname)
[16:12:12.576]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:12.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:12.576]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:12.576]                         fi[["size"]], fi[["mtime"]])
[16:12:12.576]                       stop(msg)
[16:12:12.576]                     }
[16:12:12.576]                     invisible(pathname)
[16:12:12.576]                   }
[16:12:12.576]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:12.576]                     rootPath = tempdir()) 
[16:12:12.576]                   {
[16:12:12.576]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:12.576]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:12.576]                       tmpdir = path, fileext = ".rds")
[16:12:12.576]                     save_rds(obj, file)
[16:12:12.576]                   }
[16:12:12.576]                   saveImmediateCondition(cond, path = "/tmp/RtmpLU09to/.future/immediateConditions")
[16:12:12.576]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.576]                   {
[16:12:12.576]                     inherits <- base::inherits
[16:12:12.576]                     invokeRestart <- base::invokeRestart
[16:12:12.576]                     is.null <- base::is.null
[16:12:12.576]                     muffled <- FALSE
[16:12:12.576]                     if (inherits(cond, "message")) {
[16:12:12.576]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:12.576]                       if (muffled) 
[16:12:12.576]                         invokeRestart("muffleMessage")
[16:12:12.576]                     }
[16:12:12.576]                     else if (inherits(cond, "warning")) {
[16:12:12.576]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:12.576]                       if (muffled) 
[16:12:12.576]                         invokeRestart("muffleWarning")
[16:12:12.576]                     }
[16:12:12.576]                     else if (inherits(cond, "condition")) {
[16:12:12.576]                       if (!is.null(pattern)) {
[16:12:12.576]                         computeRestarts <- base::computeRestarts
[16:12:12.576]                         grepl <- base::grepl
[16:12:12.576]                         restarts <- computeRestarts(cond)
[16:12:12.576]                         for (restart in restarts) {
[16:12:12.576]                           name <- restart$name
[16:12:12.576]                           if (is.null(name)) 
[16:12:12.576]                             next
[16:12:12.576]                           if (!grepl(pattern, name)) 
[16:12:12.576]                             next
[16:12:12.576]                           invokeRestart(restart)
[16:12:12.576]                           muffled <- TRUE
[16:12:12.576]                           break
[16:12:12.576]                         }
[16:12:12.576]                       }
[16:12:12.576]                     }
[16:12:12.576]                     invisible(muffled)
[16:12:12.576]                   }
[16:12:12.576]                   muffleCondition(cond)
[16:12:12.576]                 })
[16:12:12.576]             }))
[16:12:12.576]             future::FutureResult(value = ...future.value$value, 
[16:12:12.576]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.576]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.576]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.576]                     ...future.globalenv.names))
[16:12:12.576]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.576]         }, condition = base::local({
[16:12:12.576]             c <- base::c
[16:12:12.576]             inherits <- base::inherits
[16:12:12.576]             invokeRestart <- base::invokeRestart
[16:12:12.576]             length <- base::length
[16:12:12.576]             list <- base::list
[16:12:12.576]             seq.int <- base::seq.int
[16:12:12.576]             signalCondition <- base::signalCondition
[16:12:12.576]             sys.calls <- base::sys.calls
[16:12:12.576]             `[[` <- base::`[[`
[16:12:12.576]             `+` <- base::`+`
[16:12:12.576]             `<<-` <- base::`<<-`
[16:12:12.576]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.576]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.576]                   3L)]
[16:12:12.576]             }
[16:12:12.576]             function(cond) {
[16:12:12.576]                 is_error <- inherits(cond, "error")
[16:12:12.576]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.576]                   NULL)
[16:12:12.576]                 if (is_error) {
[16:12:12.576]                   sessionInformation <- function() {
[16:12:12.576]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.576]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.576]                       search = base::search(), system = base::Sys.info())
[16:12:12.576]                   }
[16:12:12.576]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.576]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.576]                     cond$call), session = sessionInformation(), 
[16:12:12.576]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.576]                   signalCondition(cond)
[16:12:12.576]                 }
[16:12:12.576]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.576]                 "immediateCondition"))) {
[16:12:12.576]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.576]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.576]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.576]                   if (TRUE && !signal) {
[16:12:12.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.576]                     {
[16:12:12.576]                       inherits <- base::inherits
[16:12:12.576]                       invokeRestart <- base::invokeRestart
[16:12:12.576]                       is.null <- base::is.null
[16:12:12.576]                       muffled <- FALSE
[16:12:12.576]                       if (inherits(cond, "message")) {
[16:12:12.576]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.576]                         if (muffled) 
[16:12:12.576]                           invokeRestart("muffleMessage")
[16:12:12.576]                       }
[16:12:12.576]                       else if (inherits(cond, "warning")) {
[16:12:12.576]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.576]                         if (muffled) 
[16:12:12.576]                           invokeRestart("muffleWarning")
[16:12:12.576]                       }
[16:12:12.576]                       else if (inherits(cond, "condition")) {
[16:12:12.576]                         if (!is.null(pattern)) {
[16:12:12.576]                           computeRestarts <- base::computeRestarts
[16:12:12.576]                           grepl <- base::grepl
[16:12:12.576]                           restarts <- computeRestarts(cond)
[16:12:12.576]                           for (restart in restarts) {
[16:12:12.576]                             name <- restart$name
[16:12:12.576]                             if (is.null(name)) 
[16:12:12.576]                               next
[16:12:12.576]                             if (!grepl(pattern, name)) 
[16:12:12.576]                               next
[16:12:12.576]                             invokeRestart(restart)
[16:12:12.576]                             muffled <- TRUE
[16:12:12.576]                             break
[16:12:12.576]                           }
[16:12:12.576]                         }
[16:12:12.576]                       }
[16:12:12.576]                       invisible(muffled)
[16:12:12.576]                     }
[16:12:12.576]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.576]                   }
[16:12:12.576]                 }
[16:12:12.576]                 else {
[16:12:12.576]                   if (TRUE) {
[16:12:12.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.576]                     {
[16:12:12.576]                       inherits <- base::inherits
[16:12:12.576]                       invokeRestart <- base::invokeRestart
[16:12:12.576]                       is.null <- base::is.null
[16:12:12.576]                       muffled <- FALSE
[16:12:12.576]                       if (inherits(cond, "message")) {
[16:12:12.576]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.576]                         if (muffled) 
[16:12:12.576]                           invokeRestart("muffleMessage")
[16:12:12.576]                       }
[16:12:12.576]                       else if (inherits(cond, "warning")) {
[16:12:12.576]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.576]                         if (muffled) 
[16:12:12.576]                           invokeRestart("muffleWarning")
[16:12:12.576]                       }
[16:12:12.576]                       else if (inherits(cond, "condition")) {
[16:12:12.576]                         if (!is.null(pattern)) {
[16:12:12.576]                           computeRestarts <- base::computeRestarts
[16:12:12.576]                           grepl <- base::grepl
[16:12:12.576]                           restarts <- computeRestarts(cond)
[16:12:12.576]                           for (restart in restarts) {
[16:12:12.576]                             name <- restart$name
[16:12:12.576]                             if (is.null(name)) 
[16:12:12.576]                               next
[16:12:12.576]                             if (!grepl(pattern, name)) 
[16:12:12.576]                               next
[16:12:12.576]                             invokeRestart(restart)
[16:12:12.576]                             muffled <- TRUE
[16:12:12.576]                             break
[16:12:12.576]                           }
[16:12:12.576]                         }
[16:12:12.576]                       }
[16:12:12.576]                       invisible(muffled)
[16:12:12.576]                     }
[16:12:12.576]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.576]                   }
[16:12:12.576]                 }
[16:12:12.576]             }
[16:12:12.576]         }))
[16:12:12.576]     }, error = function(ex) {
[16:12:12.576]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.576]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.576]                 ...future.rng), started = ...future.startTime, 
[16:12:12.576]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.576]             version = "1.8"), class = "FutureResult")
[16:12:12.576]     }, finally = {
[16:12:12.576]         if (!identical(...future.workdir, getwd())) 
[16:12:12.576]             setwd(...future.workdir)
[16:12:12.576]         {
[16:12:12.576]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.576]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.576]             }
[16:12:12.576]             base::options(...future.oldOptions)
[16:12:12.576]             if (.Platform$OS.type == "windows") {
[16:12:12.576]                 old_names <- names(...future.oldEnvVars)
[16:12:12.576]                 envs <- base::Sys.getenv()
[16:12:12.576]                 names <- names(envs)
[16:12:12.576]                 common <- intersect(names, old_names)
[16:12:12.576]                 added <- setdiff(names, old_names)
[16:12:12.576]                 removed <- setdiff(old_names, names)
[16:12:12.576]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.576]                   envs[common]]
[16:12:12.576]                 NAMES <- toupper(changed)
[16:12:12.576]                 args <- list()
[16:12:12.576]                 for (kk in seq_along(NAMES)) {
[16:12:12.576]                   name <- changed[[kk]]
[16:12:12.576]                   NAME <- NAMES[[kk]]
[16:12:12.576]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.576]                     next
[16:12:12.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.576]                 }
[16:12:12.576]                 NAMES <- toupper(added)
[16:12:12.576]                 for (kk in seq_along(NAMES)) {
[16:12:12.576]                   name <- added[[kk]]
[16:12:12.576]                   NAME <- NAMES[[kk]]
[16:12:12.576]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.576]                     next
[16:12:12.576]                   args[[name]] <- ""
[16:12:12.576]                 }
[16:12:12.576]                 NAMES <- toupper(removed)
[16:12:12.576]                 for (kk in seq_along(NAMES)) {
[16:12:12.576]                   name <- removed[[kk]]
[16:12:12.576]                   NAME <- NAMES[[kk]]
[16:12:12.576]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.576]                     next
[16:12:12.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.576]                 }
[16:12:12.576]                 if (length(args) > 0) 
[16:12:12.576]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.576]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.576]             }
[16:12:12.576]             else {
[16:12:12.576]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.576]             }
[16:12:12.576]             {
[16:12:12.576]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.576]                   0L) {
[16:12:12.576]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.576]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.576]                   base::options(opts)
[16:12:12.576]                 }
[16:12:12.576]                 {
[16:12:12.576]                   {
[16:12:12.576]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:12.576]                     NULL
[16:12:12.576]                   }
[16:12:12.576]                   options(future.plan = NULL)
[16:12:12.576]                   if (is.na(NA_character_)) 
[16:12:12.576]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.576]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.576]                   future::plan(list(function (...) 
[16:12:12.576]                   {
[16:12:12.576]                     Future(1)
[16:12:12.576]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.576]                 }
[16:12:12.576]             }
[16:12:12.576]         }
[16:12:12.576]     })
[16:12:12.576]     if (TRUE) {
[16:12:12.576]         base::sink(type = "output", split = FALSE)
[16:12:12.576]         if (TRUE) {
[16:12:12.576]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.576]         }
[16:12:12.576]         else {
[16:12:12.576]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.576]         }
[16:12:12.576]         base::close(...future.stdout)
[16:12:12.576]         ...future.stdout <- NULL
[16:12:12.576]     }
[16:12:12.576]     ...future.result$conditions <- ...future.conditions
[16:12:12.576]     ...future.result$finished <- base::Sys.time()
[16:12:12.576]     ...future.result
[16:12:12.576] }
[16:12:12.580] requestCore(): workers = 2
[16:12:12.583] MulticoreFuture started
[16:12:12.584] plan(): Setting new future strategy stack:
[16:12:12.584] List of future strategies:
[16:12:12.584] 1. sequential:
[16:12:12.584]    - args: function (..., envir = parent.frame())
[16:12:12.584]    - tweaked: FALSE
[16:12:12.584]    - call: NULL
[16:12:12.585] plan(): nbrOfWorkers() = 1
[16:12:12.586] plan(): Setting new future strategy stack:
[16:12:12.587] List of future strategies:
[16:12:12.587] 1. future:
[16:12:12.587]    - args: function (...)
[16:12:12.587]    - tweaked: FALSE
[16:12:12.587]    - call: plan(foo)
[16:12:12.587] plan(): nbrOfWorkers() = Inf
[1] 42
[16:12:12.591] getGlobalsAndPackages() ...
[16:12:12.591] 
[16:12:12.591] - globals: [0] <none>
[16:12:12.591] getGlobalsAndPackages() ... DONE
[16:12:12.592] Packages needed by the future expression (n = 0): <none>
[16:12:12.592] Packages needed by future strategies (n = 0): <none>
[16:12:12.592] {
[16:12:12.592]     {
[16:12:12.592]         {
[16:12:12.592]             ...future.startTime <- base::Sys.time()
[16:12:12.592]             {
[16:12:12.592]                 {
[16:12:12.592]                   {
[16:12:12.592]                     {
[16:12:12.592]                       base::local({
[16:12:12.592]                         has_future <- base::requireNamespace("future", 
[16:12:12.592]                           quietly = TRUE)
[16:12:12.592]                         if (has_future) {
[16:12:12.592]                           ns <- base::getNamespace("future")
[16:12:12.592]                           version <- ns[[".package"]][["version"]]
[16:12:12.592]                           if (is.null(version)) 
[16:12:12.592]                             version <- utils::packageVersion("future")
[16:12:12.592]                         }
[16:12:12.592]                         else {
[16:12:12.592]                           version <- NULL
[16:12:12.592]                         }
[16:12:12.592]                         if (!has_future || version < "1.8.0") {
[16:12:12.592]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:12.592]                             "", base::R.version$version.string), 
[16:12:12.592]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:12.592]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:12.592]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:12.592]                               "release", "version")], collapse = " "), 
[16:12:12.592]                             hostname = base::Sys.info()[["nodename"]])
[16:12:12.592]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:12.592]                             info)
[16:12:12.592]                           info <- base::paste(info, collapse = "; ")
[16:12:12.592]                           if (!has_future) {
[16:12:12.592]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:12.592]                               info)
[16:12:12.592]                           }
[16:12:12.592]                           else {
[16:12:12.592]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:12.592]                               info, version)
[16:12:12.592]                           }
[16:12:12.592]                           base::stop(msg)
[16:12:12.592]                         }
[16:12:12.592]                       })
[16:12:12.592]                     }
[16:12:12.592]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:12.592]                     base::options(mc.cores = 1L)
[16:12:12.592]                   }
[16:12:12.592]                   options(future.plan = NULL)
[16:12:12.592]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.592]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:12.592]                 }
[16:12:12.592]                 ...future.workdir <- getwd()
[16:12:12.592]             }
[16:12:12.592]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:12.592]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:12.592]         }
[16:12:12.592]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:12.592]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:12.592]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:12.592]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:12.592]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:12.592]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:12.592]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:12.592]             base::names(...future.oldOptions))
[16:12:12.592]     }
[16:12:12.592]     if (FALSE) {
[16:12:12.592]     }
[16:12:12.592]     else {
[16:12:12.592]         if (TRUE) {
[16:12:12.592]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:12.592]                 open = "w")
[16:12:12.592]         }
[16:12:12.592]         else {
[16:12:12.592]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:12.592]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:12.592]         }
[16:12:12.592]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:12.592]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:12.592]             base::sink(type = "output", split = FALSE)
[16:12:12.592]             base::close(...future.stdout)
[16:12:12.592]         }, add = TRUE)
[16:12:12.592]     }
[16:12:12.592]     ...future.frame <- base::sys.nframe()
[16:12:12.592]     ...future.conditions <- base::list()
[16:12:12.592]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:12.592]     if (FALSE) {
[16:12:12.592]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:12.592]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:12.592]     }
[16:12:12.592]     ...future.result <- base::tryCatch({
[16:12:12.592]         base::withCallingHandlers({
[16:12:12.592]             ...future.value <- base::withVisible(base::local({
[16:12:12.592]                 withCallingHandlers({
[16:12:12.592]                   {
[16:12:12.592]                     42L
[16:12:12.592]                   }
[16:12:12.592]                 }, immediateCondition = function(cond) {
[16:12:12.592]                   save_rds <- function (object, pathname, ...) 
[16:12:12.592]                   {
[16:12:12.592]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:12.592]                     if (file_test("-f", pathname_tmp)) {
[16:12:12.592]                       fi_tmp <- file.info(pathname_tmp)
[16:12:12.592]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:12.592]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:12.592]                         fi_tmp[["mtime"]])
[16:12:12.592]                     }
[16:12:12.592]                     tryCatch({
[16:12:12.592]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:12.592]                     }, error = function(ex) {
[16:12:12.592]                       msg <- conditionMessage(ex)
[16:12:12.592]                       fi_tmp <- file.info(pathname_tmp)
[16:12:12.592]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:12.592]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:12.592]                         fi_tmp[["mtime"]], msg)
[16:12:12.592]                       ex$message <- msg
[16:12:12.592]                       stop(ex)
[16:12:12.592]                     })
[16:12:12.592]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:12.592]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:12.592]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:12.592]                       fi_tmp <- file.info(pathname_tmp)
[16:12:12.592]                       fi <- file.info(pathname)
[16:12:12.592]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:12.592]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:12.592]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:12.592]                         fi[["size"]], fi[["mtime"]])
[16:12:12.592]                       stop(msg)
[16:12:12.592]                     }
[16:12:12.592]                     invisible(pathname)
[16:12:12.592]                   }
[16:12:12.592]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:12.592]                     rootPath = tempdir()) 
[16:12:12.592]                   {
[16:12:12.592]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:12.592]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:12.592]                       tmpdir = path, fileext = ".rds")
[16:12:12.592]                     save_rds(obj, file)
[16:12:12.592]                   }
[16:12:12.592]                   saveImmediateCondition(cond, path = "/tmp/RtmpLU09to/.future/immediateConditions")
[16:12:12.592]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.592]                   {
[16:12:12.592]                     inherits <- base::inherits
[16:12:12.592]                     invokeRestart <- base::invokeRestart
[16:12:12.592]                     is.null <- base::is.null
[16:12:12.592]                     muffled <- FALSE
[16:12:12.592]                     if (inherits(cond, "message")) {
[16:12:12.592]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:12.592]                       if (muffled) 
[16:12:12.592]                         invokeRestart("muffleMessage")
[16:12:12.592]                     }
[16:12:12.592]                     else if (inherits(cond, "warning")) {
[16:12:12.592]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:12.592]                       if (muffled) 
[16:12:12.592]                         invokeRestart("muffleWarning")
[16:12:12.592]                     }
[16:12:12.592]                     else if (inherits(cond, "condition")) {
[16:12:12.592]                       if (!is.null(pattern)) {
[16:12:12.592]                         computeRestarts <- base::computeRestarts
[16:12:12.592]                         grepl <- base::grepl
[16:12:12.592]                         restarts <- computeRestarts(cond)
[16:12:12.592]                         for (restart in restarts) {
[16:12:12.592]                           name <- restart$name
[16:12:12.592]                           if (is.null(name)) 
[16:12:12.592]                             next
[16:12:12.592]                           if (!grepl(pattern, name)) 
[16:12:12.592]                             next
[16:12:12.592]                           invokeRestart(restart)
[16:12:12.592]                           muffled <- TRUE
[16:12:12.592]                           break
[16:12:12.592]                         }
[16:12:12.592]                       }
[16:12:12.592]                     }
[16:12:12.592]                     invisible(muffled)
[16:12:12.592]                   }
[16:12:12.592]                   muffleCondition(cond)
[16:12:12.592]                 })
[16:12:12.592]             }))
[16:12:12.592]             future::FutureResult(value = ...future.value$value, 
[16:12:12.592]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.592]                   ...future.rng), globalenv = if (FALSE) 
[16:12:12.592]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:12.592]                     ...future.globalenv.names))
[16:12:12.592]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:12.592]         }, condition = base::local({
[16:12:12.592]             c <- base::c
[16:12:12.592]             inherits <- base::inherits
[16:12:12.592]             invokeRestart <- base::invokeRestart
[16:12:12.592]             length <- base::length
[16:12:12.592]             list <- base::list
[16:12:12.592]             seq.int <- base::seq.int
[16:12:12.592]             signalCondition <- base::signalCondition
[16:12:12.592]             sys.calls <- base::sys.calls
[16:12:12.592]             `[[` <- base::`[[`
[16:12:12.592]             `+` <- base::`+`
[16:12:12.592]             `<<-` <- base::`<<-`
[16:12:12.592]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:12.592]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:12.592]                   3L)]
[16:12:12.592]             }
[16:12:12.592]             function(cond) {
[16:12:12.592]                 is_error <- inherits(cond, "error")
[16:12:12.592]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:12.592]                   NULL)
[16:12:12.592]                 if (is_error) {
[16:12:12.592]                   sessionInformation <- function() {
[16:12:12.592]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:12.592]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:12.592]                       search = base::search(), system = base::Sys.info())
[16:12:12.592]                   }
[16:12:12.592]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.592]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:12.592]                     cond$call), session = sessionInformation(), 
[16:12:12.592]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:12.592]                   signalCondition(cond)
[16:12:12.592]                 }
[16:12:12.592]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:12.592]                 "immediateCondition"))) {
[16:12:12.592]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:12.592]                   ...future.conditions[[length(...future.conditions) + 
[16:12:12.592]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:12.592]                   if (TRUE && !signal) {
[16:12:12.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.592]                     {
[16:12:12.592]                       inherits <- base::inherits
[16:12:12.592]                       invokeRestart <- base::invokeRestart
[16:12:12.592]                       is.null <- base::is.null
[16:12:12.592]                       muffled <- FALSE
[16:12:12.592]                       if (inherits(cond, "message")) {
[16:12:12.592]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.592]                         if (muffled) 
[16:12:12.592]                           invokeRestart("muffleMessage")
[16:12:12.592]                       }
[16:12:12.592]                       else if (inherits(cond, "warning")) {
[16:12:12.592]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.592]                         if (muffled) 
[16:12:12.592]                           invokeRestart("muffleWarning")
[16:12:12.592]                       }
[16:12:12.592]                       else if (inherits(cond, "condition")) {
[16:12:12.592]                         if (!is.null(pattern)) {
[16:12:12.592]                           computeRestarts <- base::computeRestarts
[16:12:12.592]                           grepl <- base::grepl
[16:12:12.592]                           restarts <- computeRestarts(cond)
[16:12:12.592]                           for (restart in restarts) {
[16:12:12.592]                             name <- restart$name
[16:12:12.592]                             if (is.null(name)) 
[16:12:12.592]                               next
[16:12:12.592]                             if (!grepl(pattern, name)) 
[16:12:12.592]                               next
[16:12:12.592]                             invokeRestart(restart)
[16:12:12.592]                             muffled <- TRUE
[16:12:12.592]                             break
[16:12:12.592]                           }
[16:12:12.592]                         }
[16:12:12.592]                       }
[16:12:12.592]                       invisible(muffled)
[16:12:12.592]                     }
[16:12:12.592]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.592]                   }
[16:12:12.592]                 }
[16:12:12.592]                 else {
[16:12:12.592]                   if (TRUE) {
[16:12:12.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:12.592]                     {
[16:12:12.592]                       inherits <- base::inherits
[16:12:12.592]                       invokeRestart <- base::invokeRestart
[16:12:12.592]                       is.null <- base::is.null
[16:12:12.592]                       muffled <- FALSE
[16:12:12.592]                       if (inherits(cond, "message")) {
[16:12:12.592]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:12.592]                         if (muffled) 
[16:12:12.592]                           invokeRestart("muffleMessage")
[16:12:12.592]                       }
[16:12:12.592]                       else if (inherits(cond, "warning")) {
[16:12:12.592]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:12.592]                         if (muffled) 
[16:12:12.592]                           invokeRestart("muffleWarning")
[16:12:12.592]                       }
[16:12:12.592]                       else if (inherits(cond, "condition")) {
[16:12:12.592]                         if (!is.null(pattern)) {
[16:12:12.592]                           computeRestarts <- base::computeRestarts
[16:12:12.592]                           grepl <- base::grepl
[16:12:12.592]                           restarts <- computeRestarts(cond)
[16:12:12.592]                           for (restart in restarts) {
[16:12:12.592]                             name <- restart$name
[16:12:12.592]                             if (is.null(name)) 
[16:12:12.592]                               next
[16:12:12.592]                             if (!grepl(pattern, name)) 
[16:12:12.592]                               next
[16:12:12.592]                             invokeRestart(restart)
[16:12:12.592]                             muffled <- TRUE
[16:12:12.592]                             break
[16:12:12.592]                           }
[16:12:12.592]                         }
[16:12:12.592]                       }
[16:12:12.592]                       invisible(muffled)
[16:12:12.592]                     }
[16:12:12.592]                     muffleCondition(cond, pattern = "^muffle")
[16:12:12.592]                   }
[16:12:12.592]                 }
[16:12:12.592]             }
[16:12:12.592]         }))
[16:12:12.592]     }, error = function(ex) {
[16:12:12.592]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:12.592]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:12.592]                 ...future.rng), started = ...future.startTime, 
[16:12:12.592]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:12.592]             version = "1.8"), class = "FutureResult")
[16:12:12.592]     }, finally = {
[16:12:12.592]         if (!identical(...future.workdir, getwd())) 
[16:12:12.592]             setwd(...future.workdir)
[16:12:12.592]         {
[16:12:12.592]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:12.592]                 ...future.oldOptions$nwarnings <- NULL
[16:12:12.592]             }
[16:12:12.592]             base::options(...future.oldOptions)
[16:12:12.592]             if (.Platform$OS.type == "windows") {
[16:12:12.592]                 old_names <- names(...future.oldEnvVars)
[16:12:12.592]                 envs <- base::Sys.getenv()
[16:12:12.592]                 names <- names(envs)
[16:12:12.592]                 common <- intersect(names, old_names)
[16:12:12.592]                 added <- setdiff(names, old_names)
[16:12:12.592]                 removed <- setdiff(old_names, names)
[16:12:12.592]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:12.592]                   envs[common]]
[16:12:12.592]                 NAMES <- toupper(changed)
[16:12:12.592]                 args <- list()
[16:12:12.592]                 for (kk in seq_along(NAMES)) {
[16:12:12.592]                   name <- changed[[kk]]
[16:12:12.592]                   NAME <- NAMES[[kk]]
[16:12:12.592]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.592]                     next
[16:12:12.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.592]                 }
[16:12:12.592]                 NAMES <- toupper(added)
[16:12:12.592]                 for (kk in seq_along(NAMES)) {
[16:12:12.592]                   name <- added[[kk]]
[16:12:12.592]                   NAME <- NAMES[[kk]]
[16:12:12.592]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.592]                     next
[16:12:12.592]                   args[[name]] <- ""
[16:12:12.592]                 }
[16:12:12.592]                 NAMES <- toupper(removed)
[16:12:12.592]                 for (kk in seq_along(NAMES)) {
[16:12:12.592]                   name <- removed[[kk]]
[16:12:12.592]                   NAME <- NAMES[[kk]]
[16:12:12.592]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:12.592]                     next
[16:12:12.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:12.592]                 }
[16:12:12.592]                 if (length(args) > 0) 
[16:12:12.592]                   base::do.call(base::Sys.setenv, args = args)
[16:12:12.592]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:12.592]             }
[16:12:12.592]             else {
[16:12:12.592]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:12.592]             }
[16:12:12.592]             {
[16:12:12.592]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:12.592]                   0L) {
[16:12:12.592]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:12.592]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:12.592]                   base::options(opts)
[16:12:12.592]                 }
[16:12:12.592]                 {
[16:12:12.592]                   {
[16:12:12.592]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:12.592]                     NULL
[16:12:12.592]                   }
[16:12:12.592]                   options(future.plan = NULL)
[16:12:12.592]                   if (is.na(NA_character_)) 
[16:12:12.592]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:12.592]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:12.592]                   future::plan(list(function (...) 
[16:12:12.592]                   {
[16:12:12.592]                     Future(1)
[16:12:12.592]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:12.592]                 }
[16:12:12.592]             }
[16:12:12.592]         }
[16:12:12.592]     })
[16:12:12.592]     if (TRUE) {
[16:12:12.592]         base::sink(type = "output", split = FALSE)
[16:12:12.592]         if (TRUE) {
[16:12:12.592]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:12.592]         }
[16:12:12.592]         else {
[16:12:12.592]             ...future.result["stdout"] <- base::list(NULL)
[16:12:12.592]         }
[16:12:12.592]         base::close(...future.stdout)
[16:12:12.592]         ...future.stdout <- NULL
[16:12:12.592]     }
[16:12:12.592]     ...future.result$conditions <- ...future.conditions
[16:12:12.592]     ...future.result$finished <- base::Sys.time()
[16:12:12.592]     ...future.result
[16:12:12.592] }
[16:12:12.595] requestCore(): workers = 2
[16:12:12.598] MulticoreFuture started
[16:12:12.599] plan(): Setting new future strategy stack:
[16:12:12.599] List of future strategies:
[16:12:12.599] 1. sequential:
[16:12:12.599]    - args: function (..., envir = parent.frame())
[16:12:12.599]    - tweaked: FALSE
[16:12:12.599]    - call: NULL
[16:12:12.600] plan(): nbrOfWorkers() = 1
[16:12:12.602] plan(): Setting new future strategy stack:
[16:12:12.602] List of future strategies:
[16:12:12.602] 1. future:
[16:12:12.602]    - args: function (...)
[16:12:12.602]    - tweaked: FALSE
[16:12:12.602]    - call: plan(foo)
[16:12:12.603] plan(): nbrOfWorkers() = Inf
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[16:12:12.605] plan(): Setting new future strategy stack:
[16:12:12.605] List of future strategies:
[16:12:12.605] 1. FutureStrategy:
[16:12:12.605]    - args: function (..., envir = parent.frame())
[16:12:12.605]    - tweaked: FALSE
[16:12:12.605]    - call: future::plan(oplan)
[16:12:12.607] plan(): nbrOfWorkers() = 1
> 
