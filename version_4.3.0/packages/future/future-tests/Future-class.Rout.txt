
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:04.273] plan(): Setting new future strategy stack:
[17:42:04.273] List of future strategies:
[17:42:04.273] 1. sequential:
[17:42:04.273]    - args: function (..., envir = parent.frame())
[17:42:04.273]    - tweaked: FALSE
[17:42:04.273]    - call: future::plan("sequential")
[17:42:04.287] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[17:42:04.298] getGlobalsAndPackages() ...
[17:42:04.298] 
[17:42:04.298] - globals: [0] <none>
[17:42:04.298] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: fd59c262-9856-3ba0-3259-37750b172310
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[17:42:04.300] run() for ‘Future’ ...
[17:42:04.300] - state: ‘created’
[17:42:04.300] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[17:42:04.303] plan(): Setting new future strategy stack:
[17:42:04.303] List of future strategies:
[17:42:04.303] 1. future:
[17:42:04.303]    - args: function (...)
[17:42:04.303]    - tweaked: FALSE
[17:42:04.303]    - call: plan(foo)
[17:42:04.315] plan(): nbrOfWorkers() = Inf
> f <- Future()
[17:42:04.315] getGlobalsAndPackages() ...
[17:42:04.315] 
[17:42:04.315] - globals: [0] <none>
[17:42:04.315] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[17:42:04.316] Packages needed by the future expression (n = 0): <none>
[17:42:04.316] Packages needed by future strategies (n = 0): <none>
[17:42:04.319] {
[17:42:04.319]     {
[17:42:04.319]         {
[17:42:04.319]             ...future.startTime <- base::Sys.time()
[17:42:04.319]             {
[17:42:04.319]                 {
[17:42:04.319]                   {
[17:42:04.319]                     base::local({
[17:42:04.319]                       has_future <- base::requireNamespace("future", 
[17:42:04.319]                         quietly = TRUE)
[17:42:04.319]                       if (has_future) {
[17:42:04.319]                         ns <- base::getNamespace("future")
[17:42:04.319]                         version <- ns[[".package"]][["version"]]
[17:42:04.319]                         if (is.null(version)) 
[17:42:04.319]                           version <- utils::packageVersion("future")
[17:42:04.319]                       }
[17:42:04.319]                       else {
[17:42:04.319]                         version <- NULL
[17:42:04.319]                       }
[17:42:04.319]                       if (!has_future || version < "1.8.0") {
[17:42:04.319]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:04.319]                           "", base::R.version$version.string), 
[17:42:04.319]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:04.319]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:04.319]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:04.319]                             "release", "version")], collapse = " "), 
[17:42:04.319]                           hostname = base::Sys.info()[["nodename"]])
[17:42:04.319]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:04.319]                           info)
[17:42:04.319]                         info <- base::paste(info, collapse = "; ")
[17:42:04.319]                         if (!has_future) {
[17:42:04.319]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:04.319]                             info)
[17:42:04.319]                         }
[17:42:04.319]                         else {
[17:42:04.319]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:04.319]                             info, version)
[17:42:04.319]                         }
[17:42:04.319]                         base::stop(msg)
[17:42:04.319]                       }
[17:42:04.319]                     })
[17:42:04.319]                   }
[17:42:04.319]                   options(future.plan = NULL)
[17:42:04.319]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.319]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:04.319]                 }
[17:42:04.319]                 ...future.workdir <- getwd()
[17:42:04.319]             }
[17:42:04.319]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:04.319]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:04.319]         }
[17:42:04.319]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:04.319]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:04.319]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:04.319]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:04.319]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:04.319]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:04.319]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:04.319]             base::names(...future.oldOptions))
[17:42:04.319]     }
[17:42:04.319]     if (FALSE) {
[17:42:04.319]     }
[17:42:04.319]     else {
[17:42:04.319]         if (TRUE) {
[17:42:04.319]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:04.319]                 open = "w")
[17:42:04.319]         }
[17:42:04.319]         else {
[17:42:04.319]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:04.319]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:04.319]         }
[17:42:04.319]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:04.319]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:04.319]             base::sink(type = "output", split = FALSE)
[17:42:04.319]             base::close(...future.stdout)
[17:42:04.319]         }, add = TRUE)
[17:42:04.319]     }
[17:42:04.319]     ...future.frame <- base::sys.nframe()
[17:42:04.319]     ...future.conditions <- base::list()
[17:42:04.319]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:04.319]     if (FALSE) {
[17:42:04.319]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:04.319]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:04.319]     }
[17:42:04.319]     ...future.result <- base::tryCatch({
[17:42:04.319]         base::withCallingHandlers({
[17:42:04.319]             ...future.value <- base::withVisible(base::local(NULL))
[17:42:04.319]             future::FutureResult(value = ...future.value$value, 
[17:42:04.319]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.319]                   ...future.rng), globalenv = if (FALSE) 
[17:42:04.319]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:04.319]                     ...future.globalenv.names))
[17:42:04.319]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:04.319]         }, condition = base::local({
[17:42:04.319]             c <- base::c
[17:42:04.319]             inherits <- base::inherits
[17:42:04.319]             invokeRestart <- base::invokeRestart
[17:42:04.319]             length <- base::length
[17:42:04.319]             list <- base::list
[17:42:04.319]             seq.int <- base::seq.int
[17:42:04.319]             signalCondition <- base::signalCondition
[17:42:04.319]             sys.calls <- base::sys.calls
[17:42:04.319]             `[[` <- base::`[[`
[17:42:04.319]             `+` <- base::`+`
[17:42:04.319]             `<<-` <- base::`<<-`
[17:42:04.319]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:04.319]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:04.319]                   3L)]
[17:42:04.319]             }
[17:42:04.319]             function(cond) {
[17:42:04.319]                 is_error <- inherits(cond, "error")
[17:42:04.319]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:04.319]                   NULL)
[17:42:04.319]                 if (is_error) {
[17:42:04.319]                   sessionInformation <- function() {
[17:42:04.319]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:04.319]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:04.319]                       search = base::search(), system = base::Sys.info())
[17:42:04.319]                   }
[17:42:04.319]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.319]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:04.319]                     cond$call), session = sessionInformation(), 
[17:42:04.319]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:04.319]                   signalCondition(cond)
[17:42:04.319]                 }
[17:42:04.319]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[17:42:04.319]                   signal <- FALSE && inherits(cond, character(0))
[17:42:04.319]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.319]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:04.319]                   if (FALSE && !signal) {
[17:42:04.319]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.319]                     {
[17:42:04.319]                       inherits <- base::inherits
[17:42:04.319]                       invokeRestart <- base::invokeRestart
[17:42:04.319]                       is.null <- base::is.null
[17:42:04.319]                       muffled <- FALSE
[17:42:04.319]                       if (inherits(cond, "message")) {
[17:42:04.319]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.319]                         if (muffled) 
[17:42:04.319]                           invokeRestart("muffleMessage")
[17:42:04.319]                       }
[17:42:04.319]                       else if (inherits(cond, "warning")) {
[17:42:04.319]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.319]                         if (muffled) 
[17:42:04.319]                           invokeRestart("muffleWarning")
[17:42:04.319]                       }
[17:42:04.319]                       else if (inherits(cond, "condition")) {
[17:42:04.319]                         if (!is.null(pattern)) {
[17:42:04.319]                           computeRestarts <- base::computeRestarts
[17:42:04.319]                           grepl <- base::grepl
[17:42:04.319]                           restarts <- computeRestarts(cond)
[17:42:04.319]                           for (restart in restarts) {
[17:42:04.319]                             name <- restart$name
[17:42:04.319]                             if (is.null(name)) 
[17:42:04.319]                               next
[17:42:04.319]                             if (!grepl(pattern, name)) 
[17:42:04.319]                               next
[17:42:04.319]                             invokeRestart(restart)
[17:42:04.319]                             muffled <- TRUE
[17:42:04.319]                             break
[17:42:04.319]                           }
[17:42:04.319]                         }
[17:42:04.319]                       }
[17:42:04.319]                       invisible(muffled)
[17:42:04.319]                     }
[17:42:04.319]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.319]                   }
[17:42:04.319]                 }
[17:42:04.319]                 else {
[17:42:04.319]                   if (TRUE) {
[17:42:04.319]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.319]                     {
[17:42:04.319]                       inherits <- base::inherits
[17:42:04.319]                       invokeRestart <- base::invokeRestart
[17:42:04.319]                       is.null <- base::is.null
[17:42:04.319]                       muffled <- FALSE
[17:42:04.319]                       if (inherits(cond, "message")) {
[17:42:04.319]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.319]                         if (muffled) 
[17:42:04.319]                           invokeRestart("muffleMessage")
[17:42:04.319]                       }
[17:42:04.319]                       else if (inherits(cond, "warning")) {
[17:42:04.319]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.319]                         if (muffled) 
[17:42:04.319]                           invokeRestart("muffleWarning")
[17:42:04.319]                       }
[17:42:04.319]                       else if (inherits(cond, "condition")) {
[17:42:04.319]                         if (!is.null(pattern)) {
[17:42:04.319]                           computeRestarts <- base::computeRestarts
[17:42:04.319]                           grepl <- base::grepl
[17:42:04.319]                           restarts <- computeRestarts(cond)
[17:42:04.319]                           for (restart in restarts) {
[17:42:04.319]                             name <- restart$name
[17:42:04.319]                             if (is.null(name)) 
[17:42:04.319]                               next
[17:42:04.319]                             if (!grepl(pattern, name)) 
[17:42:04.319]                               next
[17:42:04.319]                             invokeRestart(restart)
[17:42:04.319]                             muffled <- TRUE
[17:42:04.319]                             break
[17:42:04.319]                           }
[17:42:04.319]                         }
[17:42:04.319]                       }
[17:42:04.319]                       invisible(muffled)
[17:42:04.319]                     }
[17:42:04.319]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.319]                   }
[17:42:04.319]                 }
[17:42:04.319]             }
[17:42:04.319]         }))
[17:42:04.319]     }, error = function(ex) {
[17:42:04.319]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:04.319]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.319]                 ...future.rng), started = ...future.startTime, 
[17:42:04.319]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:04.319]             version = "1.8"), class = "FutureResult")
[17:42:04.319]     }, finally = {
[17:42:04.319]         if (!identical(...future.workdir, getwd())) 
[17:42:04.319]             setwd(...future.workdir)
[17:42:04.319]         {
[17:42:04.319]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:04.319]                 ...future.oldOptions$nwarnings <- NULL
[17:42:04.319]             }
[17:42:04.319]             base::options(...future.oldOptions)
[17:42:04.319]             if (.Platform$OS.type == "windows") {
[17:42:04.319]                 old_names <- names(...future.oldEnvVars)
[17:42:04.319]                 envs <- base::Sys.getenv()
[17:42:04.319]                 names <- names(envs)
[17:42:04.319]                 common <- intersect(names, old_names)
[17:42:04.319]                 added <- setdiff(names, old_names)
[17:42:04.319]                 removed <- setdiff(old_names, names)
[17:42:04.319]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:04.319]                   envs[common]]
[17:42:04.319]                 NAMES <- toupper(changed)
[17:42:04.319]                 args <- list()
[17:42:04.319]                 for (kk in seq_along(NAMES)) {
[17:42:04.319]                   name <- changed[[kk]]
[17:42:04.319]                   NAME <- NAMES[[kk]]
[17:42:04.319]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.319]                     next
[17:42:04.319]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.319]                 }
[17:42:04.319]                 NAMES <- toupper(added)
[17:42:04.319]                 for (kk in seq_along(NAMES)) {
[17:42:04.319]                   name <- added[[kk]]
[17:42:04.319]                   NAME <- NAMES[[kk]]
[17:42:04.319]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.319]                     next
[17:42:04.319]                   args[[name]] <- ""
[17:42:04.319]                 }
[17:42:04.319]                 NAMES <- toupper(removed)
[17:42:04.319]                 for (kk in seq_along(NAMES)) {
[17:42:04.319]                   name <- removed[[kk]]
[17:42:04.319]                   NAME <- NAMES[[kk]]
[17:42:04.319]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.319]                     next
[17:42:04.319]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.319]                 }
[17:42:04.319]                 if (length(args) > 0) 
[17:42:04.319]                   base::do.call(base::Sys.setenv, args = args)
[17:42:04.319]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:04.319]             }
[17:42:04.319]             else {
[17:42:04.319]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:04.319]             }
[17:42:04.319]             {
[17:42:04.319]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:04.319]                   0L) {
[17:42:04.319]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:04.319]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:04.319]                   base::options(opts)
[17:42:04.319]                 }
[17:42:04.319]                 {
[17:42:04.319]                   NULL
[17:42:04.319]                   options(future.plan = NULL)
[17:42:04.319]                   if (is.na(NA_character_)) 
[17:42:04.319]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.319]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:04.319]                   future::plan(list(function (...) 
[17:42:04.319]                   {
[17:42:04.319]                     Future(1)
[17:42:04.319]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:04.319]                 }
[17:42:04.319]             }
[17:42:04.319]         }
[17:42:04.319]     })
[17:42:04.319]     if (TRUE) {
[17:42:04.319]         base::sink(type = "output", split = FALSE)
[17:42:04.319]         if (TRUE) {
[17:42:04.319]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:04.319]         }
[17:42:04.319]         else {
[17:42:04.319]             ...future.result["stdout"] <- base::list(NULL)
[17:42:04.319]         }
[17:42:04.319]         base::close(...future.stdout)
[17:42:04.319]         ...future.stdout <- NULL
[17:42:04.319]     }
[17:42:04.319]     ...future.result$conditions <- ...future.conditions
[17:42:04.319]     ...future.result$finished <- base::Sys.time()
[17:42:04.319]     ...future.result
[17:42:04.319] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(list(function (...) 
                  {
                    Future(1)
                  }), .cleanup = FALSE, .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[17:42:04.330] getGlobalsAndPackages() ...
[17:42:04.330] Searching for globals...
[17:42:04.333] - globals found: [1] ‘{’
[17:42:04.333] Searching for globals ... DONE
[17:42:04.333] Resolving globals: FALSE
[17:42:04.334] 
[17:42:04.334] 
[17:42:04.334] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: fd59c262-9856-3ba0-3259-37750b172310
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:04.335] Packages needed by the future expression (n = 0): <none>
[17:42:04.335] Packages needed by future strategies (n = 0): <none>
[17:42:04.335] {
[17:42:04.335]     {
[17:42:04.335]         {
[17:42:04.335]             ...future.startTime <- base::Sys.time()
[17:42:04.335]             {
[17:42:04.335]                 {
[17:42:04.335]                   {
[17:42:04.335]                     base::local({
[17:42:04.335]                       has_future <- base::requireNamespace("future", 
[17:42:04.335]                         quietly = TRUE)
[17:42:04.335]                       if (has_future) {
[17:42:04.335]                         ns <- base::getNamespace("future")
[17:42:04.335]                         version <- ns[[".package"]][["version"]]
[17:42:04.335]                         if (is.null(version)) 
[17:42:04.335]                           version <- utils::packageVersion("future")
[17:42:04.335]                       }
[17:42:04.335]                       else {
[17:42:04.335]                         version <- NULL
[17:42:04.335]                       }
[17:42:04.335]                       if (!has_future || version < "1.8.0") {
[17:42:04.335]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:04.335]                           "", base::R.version$version.string), 
[17:42:04.335]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:04.335]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:04.335]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:04.335]                             "release", "version")], collapse = " "), 
[17:42:04.335]                           hostname = base::Sys.info()[["nodename"]])
[17:42:04.335]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:04.335]                           info)
[17:42:04.335]                         info <- base::paste(info, collapse = "; ")
[17:42:04.335]                         if (!has_future) {
[17:42:04.335]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:04.335]                             info)
[17:42:04.335]                         }
[17:42:04.335]                         else {
[17:42:04.335]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:04.335]                             info, version)
[17:42:04.335]                         }
[17:42:04.335]                         base::stop(msg)
[17:42:04.335]                       }
[17:42:04.335]                     })
[17:42:04.335]                   }
[17:42:04.335]                   options(future.plan = NULL)
[17:42:04.335]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.335]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:04.335]                 }
[17:42:04.335]                 ...future.workdir <- getwd()
[17:42:04.335]             }
[17:42:04.335]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:04.335]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:04.335]         }
[17:42:04.335]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:04.335]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:04.335]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:04.335]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:04.335]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:04.335]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:04.335]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:04.335]             base::names(...future.oldOptions))
[17:42:04.335]     }
[17:42:04.335]     if (FALSE) {
[17:42:04.335]     }
[17:42:04.335]     else {
[17:42:04.335]         if (TRUE) {
[17:42:04.335]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:04.335]                 open = "w")
[17:42:04.335]         }
[17:42:04.335]         else {
[17:42:04.335]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:04.335]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:04.335]         }
[17:42:04.335]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:04.335]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:04.335]             base::sink(type = "output", split = FALSE)
[17:42:04.335]             base::close(...future.stdout)
[17:42:04.335]         }, add = TRUE)
[17:42:04.335]     }
[17:42:04.335]     ...future.frame <- base::sys.nframe()
[17:42:04.335]     ...future.conditions <- base::list()
[17:42:04.335]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:04.335]     if (FALSE) {
[17:42:04.335]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:04.335]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:04.335]     }
[17:42:04.335]     ...future.result <- base::tryCatch({
[17:42:04.335]         base::withCallingHandlers({
[17:42:04.335]             ...future.value <- base::withVisible(base::local({
[17:42:04.335]                 42L
[17:42:04.335]             }))
[17:42:04.335]             future::FutureResult(value = ...future.value$value, 
[17:42:04.335]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.335]                   ...future.rng), globalenv = if (FALSE) 
[17:42:04.335]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:04.335]                     ...future.globalenv.names))
[17:42:04.335]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:04.335]         }, condition = base::local({
[17:42:04.335]             c <- base::c
[17:42:04.335]             inherits <- base::inherits
[17:42:04.335]             invokeRestart <- base::invokeRestart
[17:42:04.335]             length <- base::length
[17:42:04.335]             list <- base::list
[17:42:04.335]             seq.int <- base::seq.int
[17:42:04.335]             signalCondition <- base::signalCondition
[17:42:04.335]             sys.calls <- base::sys.calls
[17:42:04.335]             `[[` <- base::`[[`
[17:42:04.335]             `+` <- base::`+`
[17:42:04.335]             `<<-` <- base::`<<-`
[17:42:04.335]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:04.335]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:04.335]                   3L)]
[17:42:04.335]             }
[17:42:04.335]             function(cond) {
[17:42:04.335]                 is_error <- inherits(cond, "error")
[17:42:04.335]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:04.335]                   NULL)
[17:42:04.335]                 if (is_error) {
[17:42:04.335]                   sessionInformation <- function() {
[17:42:04.335]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:04.335]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:04.335]                       search = base::search(), system = base::Sys.info())
[17:42:04.335]                   }
[17:42:04.335]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.335]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:04.335]                     cond$call), session = sessionInformation(), 
[17:42:04.335]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:04.335]                   signalCondition(cond)
[17:42:04.335]                 }
[17:42:04.335]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:04.335]                 "immediateCondition"))) {
[17:42:04.335]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:04.335]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.335]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:04.335]                   if (TRUE && !signal) {
[17:42:04.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.335]                     {
[17:42:04.335]                       inherits <- base::inherits
[17:42:04.335]                       invokeRestart <- base::invokeRestart
[17:42:04.335]                       is.null <- base::is.null
[17:42:04.335]                       muffled <- FALSE
[17:42:04.335]                       if (inherits(cond, "message")) {
[17:42:04.335]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.335]                         if (muffled) 
[17:42:04.335]                           invokeRestart("muffleMessage")
[17:42:04.335]                       }
[17:42:04.335]                       else if (inherits(cond, "warning")) {
[17:42:04.335]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.335]                         if (muffled) 
[17:42:04.335]                           invokeRestart("muffleWarning")
[17:42:04.335]                       }
[17:42:04.335]                       else if (inherits(cond, "condition")) {
[17:42:04.335]                         if (!is.null(pattern)) {
[17:42:04.335]                           computeRestarts <- base::computeRestarts
[17:42:04.335]                           grepl <- base::grepl
[17:42:04.335]                           restarts <- computeRestarts(cond)
[17:42:04.335]                           for (restart in restarts) {
[17:42:04.335]                             name <- restart$name
[17:42:04.335]                             if (is.null(name)) 
[17:42:04.335]                               next
[17:42:04.335]                             if (!grepl(pattern, name)) 
[17:42:04.335]                               next
[17:42:04.335]                             invokeRestart(restart)
[17:42:04.335]                             muffled <- TRUE
[17:42:04.335]                             break
[17:42:04.335]                           }
[17:42:04.335]                         }
[17:42:04.335]                       }
[17:42:04.335]                       invisible(muffled)
[17:42:04.335]                     }
[17:42:04.335]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.335]                   }
[17:42:04.335]                 }
[17:42:04.335]                 else {
[17:42:04.335]                   if (TRUE) {
[17:42:04.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.335]                     {
[17:42:04.335]                       inherits <- base::inherits
[17:42:04.335]                       invokeRestart <- base::invokeRestart
[17:42:04.335]                       is.null <- base::is.null
[17:42:04.335]                       muffled <- FALSE
[17:42:04.335]                       if (inherits(cond, "message")) {
[17:42:04.335]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.335]                         if (muffled) 
[17:42:04.335]                           invokeRestart("muffleMessage")
[17:42:04.335]                       }
[17:42:04.335]                       else if (inherits(cond, "warning")) {
[17:42:04.335]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.335]                         if (muffled) 
[17:42:04.335]                           invokeRestart("muffleWarning")
[17:42:04.335]                       }
[17:42:04.335]                       else if (inherits(cond, "condition")) {
[17:42:04.335]                         if (!is.null(pattern)) {
[17:42:04.335]                           computeRestarts <- base::computeRestarts
[17:42:04.335]                           grepl <- base::grepl
[17:42:04.335]                           restarts <- computeRestarts(cond)
[17:42:04.335]                           for (restart in restarts) {
[17:42:04.335]                             name <- restart$name
[17:42:04.335]                             if (is.null(name)) 
[17:42:04.335]                               next
[17:42:04.335]                             if (!grepl(pattern, name)) 
[17:42:04.335]                               next
[17:42:04.335]                             invokeRestart(restart)
[17:42:04.335]                             muffled <- TRUE
[17:42:04.335]                             break
[17:42:04.335]                           }
[17:42:04.335]                         }
[17:42:04.335]                       }
[17:42:04.335]                       invisible(muffled)
[17:42:04.335]                     }
[17:42:04.335]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.335]                   }
[17:42:04.335]                 }
[17:42:04.335]             }
[17:42:04.335]         }))
[17:42:04.335]     }, error = function(ex) {
[17:42:04.335]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:04.335]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.335]                 ...future.rng), started = ...future.startTime, 
[17:42:04.335]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:04.335]             version = "1.8"), class = "FutureResult")
[17:42:04.335]     }, finally = {
[17:42:04.335]         if (!identical(...future.workdir, getwd())) 
[17:42:04.335]             setwd(...future.workdir)
[17:42:04.335]         {
[17:42:04.335]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:04.335]                 ...future.oldOptions$nwarnings <- NULL
[17:42:04.335]             }
[17:42:04.335]             base::options(...future.oldOptions)
[17:42:04.335]             if (.Platform$OS.type == "windows") {
[17:42:04.335]                 old_names <- names(...future.oldEnvVars)
[17:42:04.335]                 envs <- base::Sys.getenv()
[17:42:04.335]                 names <- names(envs)
[17:42:04.335]                 common <- intersect(names, old_names)
[17:42:04.335]                 added <- setdiff(names, old_names)
[17:42:04.335]                 removed <- setdiff(old_names, names)
[17:42:04.335]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:04.335]                   envs[common]]
[17:42:04.335]                 NAMES <- toupper(changed)
[17:42:04.335]                 args <- list()
[17:42:04.335]                 for (kk in seq_along(NAMES)) {
[17:42:04.335]                   name <- changed[[kk]]
[17:42:04.335]                   NAME <- NAMES[[kk]]
[17:42:04.335]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.335]                     next
[17:42:04.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.335]                 }
[17:42:04.335]                 NAMES <- toupper(added)
[17:42:04.335]                 for (kk in seq_along(NAMES)) {
[17:42:04.335]                   name <- added[[kk]]
[17:42:04.335]                   NAME <- NAMES[[kk]]
[17:42:04.335]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.335]                     next
[17:42:04.335]                   args[[name]] <- ""
[17:42:04.335]                 }
[17:42:04.335]                 NAMES <- toupper(removed)
[17:42:04.335]                 for (kk in seq_along(NAMES)) {
[17:42:04.335]                   name <- removed[[kk]]
[17:42:04.335]                   NAME <- NAMES[[kk]]
[17:42:04.335]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.335]                     next
[17:42:04.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.335]                 }
[17:42:04.335]                 if (length(args) > 0) 
[17:42:04.335]                   base::do.call(base::Sys.setenv, args = args)
[17:42:04.335]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:04.335]             }
[17:42:04.335]             else {
[17:42:04.335]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:04.335]             }
[17:42:04.335]             {
[17:42:04.335]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:04.335]                   0L) {
[17:42:04.335]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:04.335]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:04.335]                   base::options(opts)
[17:42:04.335]                 }
[17:42:04.335]                 {
[17:42:04.335]                   {
[17:42:04.335]                     NULL
[17:42:04.335]                     RNGkind("Mersenne-Twister")
[17:42:04.335]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:04.335]                       inherits = FALSE)
[17:42:04.335]                   }
[17:42:04.335]                   options(future.plan = NULL)
[17:42:04.335]                   if (is.na(NA_character_)) 
[17:42:04.335]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.335]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:04.335]                   future::plan(list(function (...) 
[17:42:04.335]                   {
[17:42:04.335]                     Future(1)
[17:42:04.335]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:04.335]                 }
[17:42:04.335]             }
[17:42:04.335]         }
[17:42:04.335]     })
[17:42:04.335]     if (TRUE) {
[17:42:04.335]         base::sink(type = "output", split = FALSE)
[17:42:04.335]         if (TRUE) {
[17:42:04.335]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:04.335]         }
[17:42:04.335]         else {
[17:42:04.335]             ...future.result["stdout"] <- base::list(NULL)
[17:42:04.335]         }
[17:42:04.335]         base::close(...future.stdout)
[17:42:04.335]         ...future.stdout <- NULL
[17:42:04.335]     }
[17:42:04.335]     ...future.result$conditions <- ...future.conditions
[17:42:04.335]     ...future.result$finished <- base::Sys.time()
[17:42:04.335]     ...future.result
[17:42:04.335] }
[17:42:04.337] plan(): Setting new future strategy stack:
[17:42:04.338] List of future strategies:
[17:42:04.338] 1. sequential:
[17:42:04.338]    - args: function (..., envir = parent.frame())
[17:42:04.338]    - tweaked: FALSE
[17:42:04.338]    - call: NULL
[17:42:04.338] plan(): nbrOfWorkers() = 1
[17:42:04.339] plan(): Setting new future strategy stack:
[17:42:04.339] List of future strategies:
[17:42:04.339] 1. future:
[17:42:04.339]    - args: function (...)
[17:42:04.339]    - tweaked: FALSE
[17:42:04.339]    - call: plan(foo)
[17:42:04.340] plan(): nbrOfWorkers() = Inf
[17:42:04.340] SequentialFuture started (and completed)
[1] 42
[17:42:04.341] getGlobalsAndPackages() ...
[17:42:04.341] Searching for globals...
[17:42:04.341] - globals found: [1] ‘{’
[17:42:04.341] Searching for globals ... DONE
[17:42:04.342] Resolving globals: FALSE
[17:42:04.342] 
[17:42:04.342] 
[17:42:04.342] getGlobalsAndPackages() ... DONE
[17:42:04.342] Packages needed by the future expression (n = 0): <none>
[17:42:04.342] Packages needed by future strategies (n = 0): <none>
[17:42:04.343] {
[17:42:04.343]     {
[17:42:04.343]         {
[17:42:04.343]             ...future.startTime <- base::Sys.time()
[17:42:04.343]             {
[17:42:04.343]                 {
[17:42:04.343]                   {
[17:42:04.343]                     base::local({
[17:42:04.343]                       has_future <- base::requireNamespace("future", 
[17:42:04.343]                         quietly = TRUE)
[17:42:04.343]                       if (has_future) {
[17:42:04.343]                         ns <- base::getNamespace("future")
[17:42:04.343]                         version <- ns[[".package"]][["version"]]
[17:42:04.343]                         if (is.null(version)) 
[17:42:04.343]                           version <- utils::packageVersion("future")
[17:42:04.343]                       }
[17:42:04.343]                       else {
[17:42:04.343]                         version <- NULL
[17:42:04.343]                       }
[17:42:04.343]                       if (!has_future || version < "1.8.0") {
[17:42:04.343]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:04.343]                           "", base::R.version$version.string), 
[17:42:04.343]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:04.343]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:04.343]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:04.343]                             "release", "version")], collapse = " "), 
[17:42:04.343]                           hostname = base::Sys.info()[["nodename"]])
[17:42:04.343]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:04.343]                           info)
[17:42:04.343]                         info <- base::paste(info, collapse = "; ")
[17:42:04.343]                         if (!has_future) {
[17:42:04.343]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:04.343]                             info)
[17:42:04.343]                         }
[17:42:04.343]                         else {
[17:42:04.343]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:04.343]                             info, version)
[17:42:04.343]                         }
[17:42:04.343]                         base::stop(msg)
[17:42:04.343]                       }
[17:42:04.343]                     })
[17:42:04.343]                   }
[17:42:04.343]                   options(future.plan = NULL)
[17:42:04.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:04.343]                 }
[17:42:04.343]                 ...future.workdir <- getwd()
[17:42:04.343]             }
[17:42:04.343]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:04.343]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:04.343]         }
[17:42:04.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:04.343]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:04.343]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:04.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:04.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:04.343]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:04.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:04.343]             base::names(...future.oldOptions))
[17:42:04.343]     }
[17:42:04.343]     if (FALSE) {
[17:42:04.343]     }
[17:42:04.343]     else {
[17:42:04.343]         if (TRUE) {
[17:42:04.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:04.343]                 open = "w")
[17:42:04.343]         }
[17:42:04.343]         else {
[17:42:04.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:04.343]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:04.343]         }
[17:42:04.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:04.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:04.343]             base::sink(type = "output", split = FALSE)
[17:42:04.343]             base::close(...future.stdout)
[17:42:04.343]         }, add = TRUE)
[17:42:04.343]     }
[17:42:04.343]     ...future.frame <- base::sys.nframe()
[17:42:04.343]     ...future.conditions <- base::list()
[17:42:04.343]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:04.343]     if (FALSE) {
[17:42:04.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:04.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:04.343]     }
[17:42:04.343]     ...future.result <- base::tryCatch({
[17:42:04.343]         base::withCallingHandlers({
[17:42:04.343]             ...future.value <- base::withVisible(base::local({
[17:42:04.343]                 42L
[17:42:04.343]             }))
[17:42:04.343]             future::FutureResult(value = ...future.value$value, 
[17:42:04.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.343]                   ...future.rng), globalenv = if (FALSE) 
[17:42:04.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:04.343]                     ...future.globalenv.names))
[17:42:04.343]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:04.343]         }, condition = base::local({
[17:42:04.343]             c <- base::c
[17:42:04.343]             inherits <- base::inherits
[17:42:04.343]             invokeRestart <- base::invokeRestart
[17:42:04.343]             length <- base::length
[17:42:04.343]             list <- base::list
[17:42:04.343]             seq.int <- base::seq.int
[17:42:04.343]             signalCondition <- base::signalCondition
[17:42:04.343]             sys.calls <- base::sys.calls
[17:42:04.343]             `[[` <- base::`[[`
[17:42:04.343]             `+` <- base::`+`
[17:42:04.343]             `<<-` <- base::`<<-`
[17:42:04.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:04.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:04.343]                   3L)]
[17:42:04.343]             }
[17:42:04.343]             function(cond) {
[17:42:04.343]                 is_error <- inherits(cond, "error")
[17:42:04.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:04.343]                   NULL)
[17:42:04.343]                 if (is_error) {
[17:42:04.343]                   sessionInformation <- function() {
[17:42:04.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:04.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:04.343]                       search = base::search(), system = base::Sys.info())
[17:42:04.343]                   }
[17:42:04.343]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:04.343]                     cond$call), session = sessionInformation(), 
[17:42:04.343]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:04.343]                   signalCondition(cond)
[17:42:04.343]                 }
[17:42:04.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:04.343]                 "immediateCondition"))) {
[17:42:04.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:04.343]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:04.343]                   if (TRUE && !signal) {
[17:42:04.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.343]                     {
[17:42:04.343]                       inherits <- base::inherits
[17:42:04.343]                       invokeRestart <- base::invokeRestart
[17:42:04.343]                       is.null <- base::is.null
[17:42:04.343]                       muffled <- FALSE
[17:42:04.343]                       if (inherits(cond, "message")) {
[17:42:04.343]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.343]                         if (muffled) 
[17:42:04.343]                           invokeRestart("muffleMessage")
[17:42:04.343]                       }
[17:42:04.343]                       else if (inherits(cond, "warning")) {
[17:42:04.343]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.343]                         if (muffled) 
[17:42:04.343]                           invokeRestart("muffleWarning")
[17:42:04.343]                       }
[17:42:04.343]                       else if (inherits(cond, "condition")) {
[17:42:04.343]                         if (!is.null(pattern)) {
[17:42:04.343]                           computeRestarts <- base::computeRestarts
[17:42:04.343]                           grepl <- base::grepl
[17:42:04.343]                           restarts <- computeRestarts(cond)
[17:42:04.343]                           for (restart in restarts) {
[17:42:04.343]                             name <- restart$name
[17:42:04.343]                             if (is.null(name)) 
[17:42:04.343]                               next
[17:42:04.343]                             if (!grepl(pattern, name)) 
[17:42:04.343]                               next
[17:42:04.343]                             invokeRestart(restart)
[17:42:04.343]                             muffled <- TRUE
[17:42:04.343]                             break
[17:42:04.343]                           }
[17:42:04.343]                         }
[17:42:04.343]                       }
[17:42:04.343]                       invisible(muffled)
[17:42:04.343]                     }
[17:42:04.343]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.343]                   }
[17:42:04.343]                 }
[17:42:04.343]                 else {
[17:42:04.343]                   if (TRUE) {
[17:42:04.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.343]                     {
[17:42:04.343]                       inherits <- base::inherits
[17:42:04.343]                       invokeRestart <- base::invokeRestart
[17:42:04.343]                       is.null <- base::is.null
[17:42:04.343]                       muffled <- FALSE
[17:42:04.343]                       if (inherits(cond, "message")) {
[17:42:04.343]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.343]                         if (muffled) 
[17:42:04.343]                           invokeRestart("muffleMessage")
[17:42:04.343]                       }
[17:42:04.343]                       else if (inherits(cond, "warning")) {
[17:42:04.343]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.343]                         if (muffled) 
[17:42:04.343]                           invokeRestart("muffleWarning")
[17:42:04.343]                       }
[17:42:04.343]                       else if (inherits(cond, "condition")) {
[17:42:04.343]                         if (!is.null(pattern)) {
[17:42:04.343]                           computeRestarts <- base::computeRestarts
[17:42:04.343]                           grepl <- base::grepl
[17:42:04.343]                           restarts <- computeRestarts(cond)
[17:42:04.343]                           for (restart in restarts) {
[17:42:04.343]                             name <- restart$name
[17:42:04.343]                             if (is.null(name)) 
[17:42:04.343]                               next
[17:42:04.343]                             if (!grepl(pattern, name)) 
[17:42:04.343]                               next
[17:42:04.343]                             invokeRestart(restart)
[17:42:04.343]                             muffled <- TRUE
[17:42:04.343]                             break
[17:42:04.343]                           }
[17:42:04.343]                         }
[17:42:04.343]                       }
[17:42:04.343]                       invisible(muffled)
[17:42:04.343]                     }
[17:42:04.343]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.343]                   }
[17:42:04.343]                 }
[17:42:04.343]             }
[17:42:04.343]         }))
[17:42:04.343]     }, error = function(ex) {
[17:42:04.343]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:04.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.343]                 ...future.rng), started = ...future.startTime, 
[17:42:04.343]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:04.343]             version = "1.8"), class = "FutureResult")
[17:42:04.343]     }, finally = {
[17:42:04.343]         if (!identical(...future.workdir, getwd())) 
[17:42:04.343]             setwd(...future.workdir)
[17:42:04.343]         {
[17:42:04.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:04.343]                 ...future.oldOptions$nwarnings <- NULL
[17:42:04.343]             }
[17:42:04.343]             base::options(...future.oldOptions)
[17:42:04.343]             if (.Platform$OS.type == "windows") {
[17:42:04.343]                 old_names <- names(...future.oldEnvVars)
[17:42:04.343]                 envs <- base::Sys.getenv()
[17:42:04.343]                 names <- names(envs)
[17:42:04.343]                 common <- intersect(names, old_names)
[17:42:04.343]                 added <- setdiff(names, old_names)
[17:42:04.343]                 removed <- setdiff(old_names, names)
[17:42:04.343]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:04.343]                   envs[common]]
[17:42:04.343]                 NAMES <- toupper(changed)
[17:42:04.343]                 args <- list()
[17:42:04.343]                 for (kk in seq_along(NAMES)) {
[17:42:04.343]                   name <- changed[[kk]]
[17:42:04.343]                   NAME <- NAMES[[kk]]
[17:42:04.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.343]                     next
[17:42:04.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.343]                 }
[17:42:04.343]                 NAMES <- toupper(added)
[17:42:04.343]                 for (kk in seq_along(NAMES)) {
[17:42:04.343]                   name <- added[[kk]]
[17:42:04.343]                   NAME <- NAMES[[kk]]
[17:42:04.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.343]                     next
[17:42:04.343]                   args[[name]] <- ""
[17:42:04.343]                 }
[17:42:04.343]                 NAMES <- toupper(removed)
[17:42:04.343]                 for (kk in seq_along(NAMES)) {
[17:42:04.343]                   name <- removed[[kk]]
[17:42:04.343]                   NAME <- NAMES[[kk]]
[17:42:04.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.343]                     next
[17:42:04.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.343]                 }
[17:42:04.343]                 if (length(args) > 0) 
[17:42:04.343]                   base::do.call(base::Sys.setenv, args = args)
[17:42:04.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:04.343]             }
[17:42:04.343]             else {
[17:42:04.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:04.343]             }
[17:42:04.343]             {
[17:42:04.343]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:04.343]                   0L) {
[17:42:04.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:04.343]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:04.343]                   base::options(opts)
[17:42:04.343]                 }
[17:42:04.343]                 {
[17:42:04.343]                   {
[17:42:04.343]                     NULL
[17:42:04.343]                     RNGkind("Mersenne-Twister")
[17:42:04.343]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:04.343]                       inherits = FALSE)
[17:42:04.343]                   }
[17:42:04.343]                   options(future.plan = NULL)
[17:42:04.343]                   if (is.na(NA_character_)) 
[17:42:04.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:04.343]                   future::plan(list(function (...) 
[17:42:04.343]                   {
[17:42:04.343]                     Future(1)
[17:42:04.343]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:04.343]                 }
[17:42:04.343]             }
[17:42:04.343]         }
[17:42:04.343]     })
[17:42:04.343]     if (TRUE) {
[17:42:04.343]         base::sink(type = "output", split = FALSE)
[17:42:04.343]         if (TRUE) {
[17:42:04.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:04.343]         }
[17:42:04.343]         else {
[17:42:04.343]             ...future.result["stdout"] <- base::list(NULL)
[17:42:04.343]         }
[17:42:04.343]         base::close(...future.stdout)
[17:42:04.343]         ...future.stdout <- NULL
[17:42:04.343]     }
[17:42:04.343]     ...future.result$conditions <- ...future.conditions
[17:42:04.343]     ...future.result$finished <- base::Sys.time()
[17:42:04.343]     ...future.result
[17:42:04.343] }
[17:42:04.345] plan(): Setting new future strategy stack:
[17:42:04.345] List of future strategies:
[17:42:04.345] 1. sequential:
[17:42:04.345]    - args: function (..., envir = parent.frame())
[17:42:04.345]    - tweaked: FALSE
[17:42:04.345]    - call: NULL
[17:42:04.345] plan(): nbrOfWorkers() = 1
[17:42:04.346] plan(): Setting new future strategy stack:
[17:42:04.346] List of future strategies:
[17:42:04.346] 1. future:
[17:42:04.346]    - args: function (...)
[17:42:04.346]    - tweaked: FALSE
[17:42:04.346]    - call: plan(foo)
[17:42:04.346] plan(): nbrOfWorkers() = Inf
[17:42:04.346] SequentialFuture started (and completed)
[1] 42
[17:42:04.349] getGlobalsAndPackages() ...
[17:42:04.349] 
[17:42:04.349] - globals: [0] <none>
[17:42:04.349] getGlobalsAndPackages() ... DONE
[17:42:04.349] [local output] makeClusterPSOCK() ...
[17:42:04.382] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:04.388] [local output] Base port: 11215
[17:42:04.389] [local output] Getting setup options for 2 cluster nodes ...
[17:42:04.389] [local output]  - Node 1 of 2 ...
[17:42:04.390] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:04.391] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8wqjE3/worker.rank=1.parallelly.parent=43184.a8b02930a3df.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp8wqjE3/worker.rank=1.parallelly.parent=43184.a8b02930a3df.pid")'’
[17:42:04.591] - Possible to infer worker's PID: TRUE
[17:42:04.591] [local output] Rscript port: 11215

[17:42:04.592] [local output]  - Node 2 of 2 ...
[17:42:04.592] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:04.593] [local output] Rscript port: 11215

[17:42:04.593] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:04.593] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:04.593] [local output] Setting up PSOCK nodes in parallel
[17:42:04.594] List of 36
[17:42:04.594]  $ worker          : chr "localhost"
[17:42:04.594]   ..- attr(*, "localhost")= logi TRUE
[17:42:04.594]  $ master          : chr "localhost"
[17:42:04.594]  $ port            : int 11215
[17:42:04.594]  $ connectTimeout  : num 120
[17:42:04.594]  $ timeout         : num 2592000
[17:42:04.594]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:04.594]  $ homogeneous     : logi TRUE
[17:42:04.594]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:04.594]  $ rscript_envs    : NULL
[17:42:04.594]  $ rscript_libs    : NULL
[17:42:04.594]  $ rscript_startup : NULL
[17:42:04.594]  $ rscript_sh      : chr "sh"
[17:42:04.594]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:04.594]  $ methods         : logi TRUE
[17:42:04.594]  $ socketOptions   : chr "no-delay"
[17:42:04.594]  $ useXDR          : logi FALSE
[17:42:04.594]  $ outfile         : chr "/dev/null"
[17:42:04.594]  $ renice          : int NA
[17:42:04.594]  $ rshcmd          : NULL
[17:42:04.594]  $ user            : chr(0) 
[17:42:04.594]  $ revtunnel       : logi FALSE
[17:42:04.594]  $ rshlogfile      : NULL
[17:42:04.594]  $ rshopts         : chr(0) 
[17:42:04.594]  $ rank            : int 1
[17:42:04.594]  $ manual          : logi FALSE
[17:42:04.594]  $ dryrun          : logi FALSE
[17:42:04.594]  $ quiet           : logi FALSE
[17:42:04.594]  $ setup_strategy  : chr "parallel"
[17:42:04.594]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:04.594]  $ pidfile         : chr "/tmp/Rtmp8wqjE3/worker.rank=1.parallelly.parent=43184.a8b02930a3df.pid"
[17:42:04.594]  $ rshcmd_label    : NULL
[17:42:04.594]  $ rsh_call        : NULL
[17:42:04.594]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:04.594]  $ localMachine    : logi TRUE
[17:42:04.594]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:04.594]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:04.594]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:04.594]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:04.594]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:04.594]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:04.594]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:04.594]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:04.594]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:04.594]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:04.594]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:04.594]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:04.594]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:04.594]  $ arguments       :List of 28
[17:42:04.594]   ..$ worker          : chr "localhost"
[17:42:04.594]   ..$ master          : NULL
[17:42:04.594]   ..$ port            : int 11215
[17:42:04.594]   ..$ connectTimeout  : num 120
[17:42:04.594]   ..$ timeout         : num 2592000
[17:42:04.594]   ..$ rscript         : NULL
[17:42:04.594]   ..$ homogeneous     : NULL
[17:42:04.594]   ..$ rscript_args    : NULL
[17:42:04.594]   ..$ rscript_envs    : NULL
[17:42:04.594]   ..$ rscript_libs    : NULL
[17:42:04.594]   ..$ rscript_startup : NULL
[17:42:04.594]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:04.594]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:04.594]   ..$ methods         : logi TRUE
[17:42:04.594]   ..$ socketOptions   : chr "no-delay"
[17:42:04.594]   ..$ useXDR          : logi FALSE
[17:42:04.594]   ..$ outfile         : chr "/dev/null"
[17:42:04.594]   ..$ renice          : int NA
[17:42:04.594]   ..$ rshcmd          : NULL
[17:42:04.594]   ..$ user            : NULL
[17:42:04.594]   ..$ revtunnel       : logi NA
[17:42:04.594]   ..$ rshlogfile      : NULL
[17:42:04.594]   ..$ rshopts         : NULL
[17:42:04.594]   ..$ rank            : int 1
[17:42:04.594]   ..$ manual          : logi FALSE
[17:42:04.594]   ..$ dryrun          : logi FALSE
[17:42:04.594]   ..$ quiet           : logi FALSE
[17:42:04.594]   ..$ setup_strategy  : chr "parallel"
[17:42:04.594]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:04.610] [local output] System call to launch all workers:
[17:42:04.610] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8wqjE3/worker.rank=1.parallelly.parent=43184.a8b02930a3df.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11215 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:04.610] [local output] Starting PSOCK main server
[17:42:04.612] [local output] Workers launched
[17:42:04.612] [local output] Waiting for workers to connect back
[17:42:04.612]  - [local output] 0 workers out of 2 ready
[17:42:04.852]  - [local output] 0 workers out of 2 ready
[17:42:04.852]  - [local output] 1 workers out of 2 ready
[17:42:04.853]  - [local output] 1 workers out of 2 ready
[17:42:04.854]  - [local output] 2 workers out of 2 ready
[17:42:04.854] [local output] Launching of workers completed
[17:42:04.854] [local output] Collecting session information from workers
[17:42:04.855] [local output]  - Worker #1 of 2
[17:42:04.855] [local output]  - Worker #2 of 2
[17:42:04.856] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x5613d6096318
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: fd59c262-9856-3ba0-3259-37750b172310
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:04.868] Packages needed by the future expression (n = 0): <none>
[17:42:04.869] Packages needed by future strategies (n = 0): <none>
[17:42:04.869] {
[17:42:04.869]     {
[17:42:04.869]         {
[17:42:04.869]             ...future.startTime <- base::Sys.time()
[17:42:04.869]             {
[17:42:04.869]                 {
[17:42:04.869]                   {
[17:42:04.869]                     {
[17:42:04.869]                       base::local({
[17:42:04.869]                         has_future <- base::requireNamespace("future", 
[17:42:04.869]                           quietly = TRUE)
[17:42:04.869]                         if (has_future) {
[17:42:04.869]                           ns <- base::getNamespace("future")
[17:42:04.869]                           version <- ns[[".package"]][["version"]]
[17:42:04.869]                           if (is.null(version)) 
[17:42:04.869]                             version <- utils::packageVersion("future")
[17:42:04.869]                         }
[17:42:04.869]                         else {
[17:42:04.869]                           version <- NULL
[17:42:04.869]                         }
[17:42:04.869]                         if (!has_future || version < "1.8.0") {
[17:42:04.869]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:04.869]                             "", base::R.version$version.string), 
[17:42:04.869]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:04.869]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:04.869]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:04.869]                               "release", "version")], collapse = " "), 
[17:42:04.869]                             hostname = base::Sys.info()[["nodename"]])
[17:42:04.869]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:04.869]                             info)
[17:42:04.869]                           info <- base::paste(info, collapse = "; ")
[17:42:04.869]                           if (!has_future) {
[17:42:04.869]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:04.869]                               info)
[17:42:04.869]                           }
[17:42:04.869]                           else {
[17:42:04.869]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:04.869]                               info, version)
[17:42:04.869]                           }
[17:42:04.869]                           base::stop(msg)
[17:42:04.869]                         }
[17:42:04.869]                       })
[17:42:04.869]                     }
[17:42:04.869]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:04.869]                     base::options(mc.cores = 1L)
[17:42:04.869]                   }
[17:42:04.869]                   options(future.plan = NULL)
[17:42:04.869]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.869]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:04.869]                 }
[17:42:04.869]                 ...future.workdir <- getwd()
[17:42:04.869]             }
[17:42:04.869]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:04.869]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:04.869]         }
[17:42:04.869]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:04.869]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:04.869]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:04.869]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:04.869]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:04.869]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:04.869]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:04.869]             base::names(...future.oldOptions))
[17:42:04.869]     }
[17:42:04.869]     if (FALSE) {
[17:42:04.869]     }
[17:42:04.869]     else {
[17:42:04.869]         if (TRUE) {
[17:42:04.869]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:04.869]                 open = "w")
[17:42:04.869]         }
[17:42:04.869]         else {
[17:42:04.869]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:04.869]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:04.869]         }
[17:42:04.869]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:04.869]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:04.869]             base::sink(type = "output", split = FALSE)
[17:42:04.869]             base::close(...future.stdout)
[17:42:04.869]         }, add = TRUE)
[17:42:04.869]     }
[17:42:04.869]     ...future.frame <- base::sys.nframe()
[17:42:04.869]     ...future.conditions <- base::list()
[17:42:04.869]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:04.869]     if (FALSE) {
[17:42:04.869]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:04.869]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:04.869]     }
[17:42:04.869]     ...future.result <- base::tryCatch({
[17:42:04.869]         base::withCallingHandlers({
[17:42:04.869]             ...future.value <- base::withVisible(base::local({
[17:42:04.869]                 ...future.makeSendCondition <- local({
[17:42:04.869]                   sendCondition <- NULL
[17:42:04.869]                   function(frame = 1L) {
[17:42:04.869]                     if (is.function(sendCondition)) 
[17:42:04.869]                       return(sendCondition)
[17:42:04.869]                     ns <- getNamespace("parallel")
[17:42:04.869]                     if (exists("sendData", mode = "function", 
[17:42:04.869]                       envir = ns)) {
[17:42:04.869]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:04.869]                         envir = ns)
[17:42:04.869]                       envir <- sys.frame(frame)
[17:42:04.869]                       master <- NULL
[17:42:04.869]                       while (!identical(envir, .GlobalEnv) && 
[17:42:04.869]                         !identical(envir, emptyenv())) {
[17:42:04.869]                         if (exists("master", mode = "list", envir = envir, 
[17:42:04.869]                           inherits = FALSE)) {
[17:42:04.869]                           master <- get("master", mode = "list", 
[17:42:04.869]                             envir = envir, inherits = FALSE)
[17:42:04.869]                           if (inherits(master, c("SOCKnode", 
[17:42:04.869]                             "SOCK0node"))) {
[17:42:04.869]                             sendCondition <<- function(cond) {
[17:42:04.869]                               data <- list(type = "VALUE", value = cond, 
[17:42:04.869]                                 success = TRUE)
[17:42:04.869]                               parallel_sendData(master, data)
[17:42:04.869]                             }
[17:42:04.869]                             return(sendCondition)
[17:42:04.869]                           }
[17:42:04.869]                         }
[17:42:04.869]                         frame <- frame + 1L
[17:42:04.869]                         envir <- sys.frame(frame)
[17:42:04.869]                       }
[17:42:04.869]                     }
[17:42:04.869]                     sendCondition <<- function(cond) NULL
[17:42:04.869]                   }
[17:42:04.869]                 })
[17:42:04.869]                 withCallingHandlers({
[17:42:04.869]                   {
[17:42:04.869]                     42L
[17:42:04.869]                   }
[17:42:04.869]                 }, immediateCondition = function(cond) {
[17:42:04.869]                   sendCondition <- ...future.makeSendCondition()
[17:42:04.869]                   sendCondition(cond)
[17:42:04.869]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.869]                   {
[17:42:04.869]                     inherits <- base::inherits
[17:42:04.869]                     invokeRestart <- base::invokeRestart
[17:42:04.869]                     is.null <- base::is.null
[17:42:04.869]                     muffled <- FALSE
[17:42:04.869]                     if (inherits(cond, "message")) {
[17:42:04.869]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:04.869]                       if (muffled) 
[17:42:04.869]                         invokeRestart("muffleMessage")
[17:42:04.869]                     }
[17:42:04.869]                     else if (inherits(cond, "warning")) {
[17:42:04.869]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:04.869]                       if (muffled) 
[17:42:04.869]                         invokeRestart("muffleWarning")
[17:42:04.869]                     }
[17:42:04.869]                     else if (inherits(cond, "condition")) {
[17:42:04.869]                       if (!is.null(pattern)) {
[17:42:04.869]                         computeRestarts <- base::computeRestarts
[17:42:04.869]                         grepl <- base::grepl
[17:42:04.869]                         restarts <- computeRestarts(cond)
[17:42:04.869]                         for (restart in restarts) {
[17:42:04.869]                           name <- restart$name
[17:42:04.869]                           if (is.null(name)) 
[17:42:04.869]                             next
[17:42:04.869]                           if (!grepl(pattern, name)) 
[17:42:04.869]                             next
[17:42:04.869]                           invokeRestart(restart)
[17:42:04.869]                           muffled <- TRUE
[17:42:04.869]                           break
[17:42:04.869]                         }
[17:42:04.869]                       }
[17:42:04.869]                     }
[17:42:04.869]                     invisible(muffled)
[17:42:04.869]                   }
[17:42:04.869]                   muffleCondition(cond)
[17:42:04.869]                 })
[17:42:04.869]             }))
[17:42:04.869]             future::FutureResult(value = ...future.value$value, 
[17:42:04.869]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.869]                   ...future.rng), globalenv = if (FALSE) 
[17:42:04.869]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:04.869]                     ...future.globalenv.names))
[17:42:04.869]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:04.869]         }, condition = base::local({
[17:42:04.869]             c <- base::c
[17:42:04.869]             inherits <- base::inherits
[17:42:04.869]             invokeRestart <- base::invokeRestart
[17:42:04.869]             length <- base::length
[17:42:04.869]             list <- base::list
[17:42:04.869]             seq.int <- base::seq.int
[17:42:04.869]             signalCondition <- base::signalCondition
[17:42:04.869]             sys.calls <- base::sys.calls
[17:42:04.869]             `[[` <- base::`[[`
[17:42:04.869]             `+` <- base::`+`
[17:42:04.869]             `<<-` <- base::`<<-`
[17:42:04.869]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:04.869]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:04.869]                   3L)]
[17:42:04.869]             }
[17:42:04.869]             function(cond) {
[17:42:04.869]                 is_error <- inherits(cond, "error")
[17:42:04.869]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:04.869]                   NULL)
[17:42:04.869]                 if (is_error) {
[17:42:04.869]                   sessionInformation <- function() {
[17:42:04.869]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:04.869]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:04.869]                       search = base::search(), system = base::Sys.info())
[17:42:04.869]                   }
[17:42:04.869]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.869]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:04.869]                     cond$call), session = sessionInformation(), 
[17:42:04.869]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:04.869]                   signalCondition(cond)
[17:42:04.869]                 }
[17:42:04.869]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:04.869]                 "immediateCondition"))) {
[17:42:04.869]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:04.869]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.869]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:04.869]                   if (TRUE && !signal) {
[17:42:04.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.869]                     {
[17:42:04.869]                       inherits <- base::inherits
[17:42:04.869]                       invokeRestart <- base::invokeRestart
[17:42:04.869]                       is.null <- base::is.null
[17:42:04.869]                       muffled <- FALSE
[17:42:04.869]                       if (inherits(cond, "message")) {
[17:42:04.869]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.869]                         if (muffled) 
[17:42:04.869]                           invokeRestart("muffleMessage")
[17:42:04.869]                       }
[17:42:04.869]                       else if (inherits(cond, "warning")) {
[17:42:04.869]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.869]                         if (muffled) 
[17:42:04.869]                           invokeRestart("muffleWarning")
[17:42:04.869]                       }
[17:42:04.869]                       else if (inherits(cond, "condition")) {
[17:42:04.869]                         if (!is.null(pattern)) {
[17:42:04.869]                           computeRestarts <- base::computeRestarts
[17:42:04.869]                           grepl <- base::grepl
[17:42:04.869]                           restarts <- computeRestarts(cond)
[17:42:04.869]                           for (restart in restarts) {
[17:42:04.869]                             name <- restart$name
[17:42:04.869]                             if (is.null(name)) 
[17:42:04.869]                               next
[17:42:04.869]                             if (!grepl(pattern, name)) 
[17:42:04.869]                               next
[17:42:04.869]                             invokeRestart(restart)
[17:42:04.869]                             muffled <- TRUE
[17:42:04.869]                             break
[17:42:04.869]                           }
[17:42:04.869]                         }
[17:42:04.869]                       }
[17:42:04.869]                       invisible(muffled)
[17:42:04.869]                     }
[17:42:04.869]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.869]                   }
[17:42:04.869]                 }
[17:42:04.869]                 else {
[17:42:04.869]                   if (TRUE) {
[17:42:04.869]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.869]                     {
[17:42:04.869]                       inherits <- base::inherits
[17:42:04.869]                       invokeRestart <- base::invokeRestart
[17:42:04.869]                       is.null <- base::is.null
[17:42:04.869]                       muffled <- FALSE
[17:42:04.869]                       if (inherits(cond, "message")) {
[17:42:04.869]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.869]                         if (muffled) 
[17:42:04.869]                           invokeRestart("muffleMessage")
[17:42:04.869]                       }
[17:42:04.869]                       else if (inherits(cond, "warning")) {
[17:42:04.869]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.869]                         if (muffled) 
[17:42:04.869]                           invokeRestart("muffleWarning")
[17:42:04.869]                       }
[17:42:04.869]                       else if (inherits(cond, "condition")) {
[17:42:04.869]                         if (!is.null(pattern)) {
[17:42:04.869]                           computeRestarts <- base::computeRestarts
[17:42:04.869]                           grepl <- base::grepl
[17:42:04.869]                           restarts <- computeRestarts(cond)
[17:42:04.869]                           for (restart in restarts) {
[17:42:04.869]                             name <- restart$name
[17:42:04.869]                             if (is.null(name)) 
[17:42:04.869]                               next
[17:42:04.869]                             if (!grepl(pattern, name)) 
[17:42:04.869]                               next
[17:42:04.869]                             invokeRestart(restart)
[17:42:04.869]                             muffled <- TRUE
[17:42:04.869]                             break
[17:42:04.869]                           }
[17:42:04.869]                         }
[17:42:04.869]                       }
[17:42:04.869]                       invisible(muffled)
[17:42:04.869]                     }
[17:42:04.869]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.869]                   }
[17:42:04.869]                 }
[17:42:04.869]             }
[17:42:04.869]         }))
[17:42:04.869]     }, error = function(ex) {
[17:42:04.869]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:04.869]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.869]                 ...future.rng), started = ...future.startTime, 
[17:42:04.869]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:04.869]             version = "1.8"), class = "FutureResult")
[17:42:04.869]     }, finally = {
[17:42:04.869]         if (!identical(...future.workdir, getwd())) 
[17:42:04.869]             setwd(...future.workdir)
[17:42:04.869]         {
[17:42:04.869]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:04.869]                 ...future.oldOptions$nwarnings <- NULL
[17:42:04.869]             }
[17:42:04.869]             base::options(...future.oldOptions)
[17:42:04.869]             if (.Platform$OS.type == "windows") {
[17:42:04.869]                 old_names <- names(...future.oldEnvVars)
[17:42:04.869]                 envs <- base::Sys.getenv()
[17:42:04.869]                 names <- names(envs)
[17:42:04.869]                 common <- intersect(names, old_names)
[17:42:04.869]                 added <- setdiff(names, old_names)
[17:42:04.869]                 removed <- setdiff(old_names, names)
[17:42:04.869]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:04.869]                   envs[common]]
[17:42:04.869]                 NAMES <- toupper(changed)
[17:42:04.869]                 args <- list()
[17:42:04.869]                 for (kk in seq_along(NAMES)) {
[17:42:04.869]                   name <- changed[[kk]]
[17:42:04.869]                   NAME <- NAMES[[kk]]
[17:42:04.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.869]                     next
[17:42:04.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.869]                 }
[17:42:04.869]                 NAMES <- toupper(added)
[17:42:04.869]                 for (kk in seq_along(NAMES)) {
[17:42:04.869]                   name <- added[[kk]]
[17:42:04.869]                   NAME <- NAMES[[kk]]
[17:42:04.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.869]                     next
[17:42:04.869]                   args[[name]] <- ""
[17:42:04.869]                 }
[17:42:04.869]                 NAMES <- toupper(removed)
[17:42:04.869]                 for (kk in seq_along(NAMES)) {
[17:42:04.869]                   name <- removed[[kk]]
[17:42:04.869]                   NAME <- NAMES[[kk]]
[17:42:04.869]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.869]                     next
[17:42:04.869]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.869]                 }
[17:42:04.869]                 if (length(args) > 0) 
[17:42:04.869]                   base::do.call(base::Sys.setenv, args = args)
[17:42:04.869]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:04.869]             }
[17:42:04.869]             else {
[17:42:04.869]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:04.869]             }
[17:42:04.869]             {
[17:42:04.869]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:04.869]                   0L) {
[17:42:04.869]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:04.869]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:04.869]                   base::options(opts)
[17:42:04.869]                 }
[17:42:04.869]                 {
[17:42:04.869]                   {
[17:42:04.869]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:04.869]                     NULL
[17:42:04.869]                   }
[17:42:04.869]                   options(future.plan = NULL)
[17:42:04.869]                   if (is.na(NA_character_)) 
[17:42:04.869]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.869]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:04.869]                   future::plan(list(function (...) 
[17:42:04.869]                   {
[17:42:04.869]                     Future(1)
[17:42:04.869]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:04.869]                 }
[17:42:04.869]             }
[17:42:04.869]         }
[17:42:04.869]     })
[17:42:04.869]     if (TRUE) {
[17:42:04.869]         base::sink(type = "output", split = FALSE)
[17:42:04.869]         if (TRUE) {
[17:42:04.869]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:04.869]         }
[17:42:04.869]         else {
[17:42:04.869]             ...future.result["stdout"] <- base::list(NULL)
[17:42:04.869]         }
[17:42:04.869]         base::close(...future.stdout)
[17:42:04.869]         ...future.stdout <- NULL
[17:42:04.869]     }
[17:42:04.869]     ...future.result$conditions <- ...future.conditions
[17:42:04.869]     ...future.result$finished <- base::Sys.time()
[17:42:04.869]     ...future.result
[17:42:04.869] }
[17:42:04.942] MultisessionFuture started
[17:42:04.943] result() for ClusterFuture ...
[17:42:04.943] receiveMessageFromWorker() for ClusterFuture ...
[17:42:04.944] - Validating connection of MultisessionFuture
[17:42:04.969] - received message: FutureResult
[17:42:04.969] - Received FutureResult
[17:42:04.972] - Erased future from FutureRegistry
[17:42:04.972] result() for ClusterFuture ...
[17:42:04.972] - result already collected: FutureResult
[17:42:04.972] result() for ClusterFuture ... done
[17:42:04.973] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:04.973] result() for ClusterFuture ... done
[17:42:04.973] result() for ClusterFuture ...
[17:42:04.973] - result already collected: FutureResult
[17:42:04.973] result() for ClusterFuture ... done
[1] 42
[17:42:04.974] getGlobalsAndPackages() ...
[17:42:04.974] 
[17:42:04.974] - globals: [0] <none>
[17:42:04.975] getGlobalsAndPackages() ... DONE
[17:42:04.987] Packages needed by the future expression (n = 0): <none>
[17:42:04.987] Packages needed by future strategies (n = 0): <none>
[17:42:04.987] {
[17:42:04.987]     {
[17:42:04.987]         {
[17:42:04.987]             ...future.startTime <- base::Sys.time()
[17:42:04.987]             {
[17:42:04.987]                 {
[17:42:04.987]                   {
[17:42:04.987]                     {
[17:42:04.987]                       base::local({
[17:42:04.987]                         has_future <- base::requireNamespace("future", 
[17:42:04.987]                           quietly = TRUE)
[17:42:04.987]                         if (has_future) {
[17:42:04.987]                           ns <- base::getNamespace("future")
[17:42:04.987]                           version <- ns[[".package"]][["version"]]
[17:42:04.987]                           if (is.null(version)) 
[17:42:04.987]                             version <- utils::packageVersion("future")
[17:42:04.987]                         }
[17:42:04.987]                         else {
[17:42:04.987]                           version <- NULL
[17:42:04.987]                         }
[17:42:04.987]                         if (!has_future || version < "1.8.0") {
[17:42:04.987]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:04.987]                             "", base::R.version$version.string), 
[17:42:04.987]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:04.987]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:04.987]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:04.987]                               "release", "version")], collapse = " "), 
[17:42:04.987]                             hostname = base::Sys.info()[["nodename"]])
[17:42:04.987]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:04.987]                             info)
[17:42:04.987]                           info <- base::paste(info, collapse = "; ")
[17:42:04.987]                           if (!has_future) {
[17:42:04.987]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:04.987]                               info)
[17:42:04.987]                           }
[17:42:04.987]                           else {
[17:42:04.987]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:04.987]                               info, version)
[17:42:04.987]                           }
[17:42:04.987]                           base::stop(msg)
[17:42:04.987]                         }
[17:42:04.987]                       })
[17:42:04.987]                     }
[17:42:04.987]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:04.987]                     base::options(mc.cores = 1L)
[17:42:04.987]                   }
[17:42:04.987]                   options(future.plan = NULL)
[17:42:04.987]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.987]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:04.987]                 }
[17:42:04.987]                 ...future.workdir <- getwd()
[17:42:04.987]             }
[17:42:04.987]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:04.987]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:04.987]         }
[17:42:04.987]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:04.987]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:04.987]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:04.987]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:04.987]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:04.987]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:04.987]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:04.987]             base::names(...future.oldOptions))
[17:42:04.987]     }
[17:42:04.987]     if (FALSE) {
[17:42:04.987]     }
[17:42:04.987]     else {
[17:42:04.987]         if (TRUE) {
[17:42:04.987]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:04.987]                 open = "w")
[17:42:04.987]         }
[17:42:04.987]         else {
[17:42:04.987]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:04.987]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:04.987]         }
[17:42:04.987]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:04.987]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:04.987]             base::sink(type = "output", split = FALSE)
[17:42:04.987]             base::close(...future.stdout)
[17:42:04.987]         }, add = TRUE)
[17:42:04.987]     }
[17:42:04.987]     ...future.frame <- base::sys.nframe()
[17:42:04.987]     ...future.conditions <- base::list()
[17:42:04.987]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:04.987]     if (FALSE) {
[17:42:04.987]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:04.987]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:04.987]     }
[17:42:04.987]     ...future.result <- base::tryCatch({
[17:42:04.987]         base::withCallingHandlers({
[17:42:04.987]             ...future.value <- base::withVisible(base::local({
[17:42:04.987]                 ...future.makeSendCondition <- local({
[17:42:04.987]                   sendCondition <- NULL
[17:42:04.987]                   function(frame = 1L) {
[17:42:04.987]                     if (is.function(sendCondition)) 
[17:42:04.987]                       return(sendCondition)
[17:42:04.987]                     ns <- getNamespace("parallel")
[17:42:04.987]                     if (exists("sendData", mode = "function", 
[17:42:04.987]                       envir = ns)) {
[17:42:04.987]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:04.987]                         envir = ns)
[17:42:04.987]                       envir <- sys.frame(frame)
[17:42:04.987]                       master <- NULL
[17:42:04.987]                       while (!identical(envir, .GlobalEnv) && 
[17:42:04.987]                         !identical(envir, emptyenv())) {
[17:42:04.987]                         if (exists("master", mode = "list", envir = envir, 
[17:42:04.987]                           inherits = FALSE)) {
[17:42:04.987]                           master <- get("master", mode = "list", 
[17:42:04.987]                             envir = envir, inherits = FALSE)
[17:42:04.987]                           if (inherits(master, c("SOCKnode", 
[17:42:04.987]                             "SOCK0node"))) {
[17:42:04.987]                             sendCondition <<- function(cond) {
[17:42:04.987]                               data <- list(type = "VALUE", value = cond, 
[17:42:04.987]                                 success = TRUE)
[17:42:04.987]                               parallel_sendData(master, data)
[17:42:04.987]                             }
[17:42:04.987]                             return(sendCondition)
[17:42:04.987]                           }
[17:42:04.987]                         }
[17:42:04.987]                         frame <- frame + 1L
[17:42:04.987]                         envir <- sys.frame(frame)
[17:42:04.987]                       }
[17:42:04.987]                     }
[17:42:04.987]                     sendCondition <<- function(cond) NULL
[17:42:04.987]                   }
[17:42:04.987]                 })
[17:42:04.987]                 withCallingHandlers({
[17:42:04.987]                   {
[17:42:04.987]                     42L
[17:42:04.987]                   }
[17:42:04.987]                 }, immediateCondition = function(cond) {
[17:42:04.987]                   sendCondition <- ...future.makeSendCondition()
[17:42:04.987]                   sendCondition(cond)
[17:42:04.987]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.987]                   {
[17:42:04.987]                     inherits <- base::inherits
[17:42:04.987]                     invokeRestart <- base::invokeRestart
[17:42:04.987]                     is.null <- base::is.null
[17:42:04.987]                     muffled <- FALSE
[17:42:04.987]                     if (inherits(cond, "message")) {
[17:42:04.987]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:04.987]                       if (muffled) 
[17:42:04.987]                         invokeRestart("muffleMessage")
[17:42:04.987]                     }
[17:42:04.987]                     else if (inherits(cond, "warning")) {
[17:42:04.987]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:04.987]                       if (muffled) 
[17:42:04.987]                         invokeRestart("muffleWarning")
[17:42:04.987]                     }
[17:42:04.987]                     else if (inherits(cond, "condition")) {
[17:42:04.987]                       if (!is.null(pattern)) {
[17:42:04.987]                         computeRestarts <- base::computeRestarts
[17:42:04.987]                         grepl <- base::grepl
[17:42:04.987]                         restarts <- computeRestarts(cond)
[17:42:04.987]                         for (restart in restarts) {
[17:42:04.987]                           name <- restart$name
[17:42:04.987]                           if (is.null(name)) 
[17:42:04.987]                             next
[17:42:04.987]                           if (!grepl(pattern, name)) 
[17:42:04.987]                             next
[17:42:04.987]                           invokeRestart(restart)
[17:42:04.987]                           muffled <- TRUE
[17:42:04.987]                           break
[17:42:04.987]                         }
[17:42:04.987]                       }
[17:42:04.987]                     }
[17:42:04.987]                     invisible(muffled)
[17:42:04.987]                   }
[17:42:04.987]                   muffleCondition(cond)
[17:42:04.987]                 })
[17:42:04.987]             }))
[17:42:04.987]             future::FutureResult(value = ...future.value$value, 
[17:42:04.987]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.987]                   ...future.rng), globalenv = if (FALSE) 
[17:42:04.987]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:04.987]                     ...future.globalenv.names))
[17:42:04.987]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:04.987]         }, condition = base::local({
[17:42:04.987]             c <- base::c
[17:42:04.987]             inherits <- base::inherits
[17:42:04.987]             invokeRestart <- base::invokeRestart
[17:42:04.987]             length <- base::length
[17:42:04.987]             list <- base::list
[17:42:04.987]             seq.int <- base::seq.int
[17:42:04.987]             signalCondition <- base::signalCondition
[17:42:04.987]             sys.calls <- base::sys.calls
[17:42:04.987]             `[[` <- base::`[[`
[17:42:04.987]             `+` <- base::`+`
[17:42:04.987]             `<<-` <- base::`<<-`
[17:42:04.987]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:04.987]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:04.987]                   3L)]
[17:42:04.987]             }
[17:42:04.987]             function(cond) {
[17:42:04.987]                 is_error <- inherits(cond, "error")
[17:42:04.987]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:04.987]                   NULL)
[17:42:04.987]                 if (is_error) {
[17:42:04.987]                   sessionInformation <- function() {
[17:42:04.987]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:04.987]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:04.987]                       search = base::search(), system = base::Sys.info())
[17:42:04.987]                   }
[17:42:04.987]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.987]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:04.987]                     cond$call), session = sessionInformation(), 
[17:42:04.987]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:04.987]                   signalCondition(cond)
[17:42:04.987]                 }
[17:42:04.987]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:04.987]                 "immediateCondition"))) {
[17:42:04.987]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:04.987]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.987]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:04.987]                   if (TRUE && !signal) {
[17:42:04.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.987]                     {
[17:42:04.987]                       inherits <- base::inherits
[17:42:04.987]                       invokeRestart <- base::invokeRestart
[17:42:04.987]                       is.null <- base::is.null
[17:42:04.987]                       muffled <- FALSE
[17:42:04.987]                       if (inherits(cond, "message")) {
[17:42:04.987]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.987]                         if (muffled) 
[17:42:04.987]                           invokeRestart("muffleMessage")
[17:42:04.987]                       }
[17:42:04.987]                       else if (inherits(cond, "warning")) {
[17:42:04.987]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.987]                         if (muffled) 
[17:42:04.987]                           invokeRestart("muffleWarning")
[17:42:04.987]                       }
[17:42:04.987]                       else if (inherits(cond, "condition")) {
[17:42:04.987]                         if (!is.null(pattern)) {
[17:42:04.987]                           computeRestarts <- base::computeRestarts
[17:42:04.987]                           grepl <- base::grepl
[17:42:04.987]                           restarts <- computeRestarts(cond)
[17:42:04.987]                           for (restart in restarts) {
[17:42:04.987]                             name <- restart$name
[17:42:04.987]                             if (is.null(name)) 
[17:42:04.987]                               next
[17:42:04.987]                             if (!grepl(pattern, name)) 
[17:42:04.987]                               next
[17:42:04.987]                             invokeRestart(restart)
[17:42:04.987]                             muffled <- TRUE
[17:42:04.987]                             break
[17:42:04.987]                           }
[17:42:04.987]                         }
[17:42:04.987]                       }
[17:42:04.987]                       invisible(muffled)
[17:42:04.987]                     }
[17:42:04.987]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.987]                   }
[17:42:04.987]                 }
[17:42:04.987]                 else {
[17:42:04.987]                   if (TRUE) {
[17:42:04.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.987]                     {
[17:42:04.987]                       inherits <- base::inherits
[17:42:04.987]                       invokeRestart <- base::invokeRestart
[17:42:04.987]                       is.null <- base::is.null
[17:42:04.987]                       muffled <- FALSE
[17:42:04.987]                       if (inherits(cond, "message")) {
[17:42:04.987]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.987]                         if (muffled) 
[17:42:04.987]                           invokeRestart("muffleMessage")
[17:42:04.987]                       }
[17:42:04.987]                       else if (inherits(cond, "warning")) {
[17:42:04.987]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.987]                         if (muffled) 
[17:42:04.987]                           invokeRestart("muffleWarning")
[17:42:04.987]                       }
[17:42:04.987]                       else if (inherits(cond, "condition")) {
[17:42:04.987]                         if (!is.null(pattern)) {
[17:42:04.987]                           computeRestarts <- base::computeRestarts
[17:42:04.987]                           grepl <- base::grepl
[17:42:04.987]                           restarts <- computeRestarts(cond)
[17:42:04.987]                           for (restart in restarts) {
[17:42:04.987]                             name <- restart$name
[17:42:04.987]                             if (is.null(name)) 
[17:42:04.987]                               next
[17:42:04.987]                             if (!grepl(pattern, name)) 
[17:42:04.987]                               next
[17:42:04.987]                             invokeRestart(restart)
[17:42:04.987]                             muffled <- TRUE
[17:42:04.987]                             break
[17:42:04.987]                           }
[17:42:04.987]                         }
[17:42:04.987]                       }
[17:42:04.987]                       invisible(muffled)
[17:42:04.987]                     }
[17:42:04.987]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.987]                   }
[17:42:04.987]                 }
[17:42:04.987]             }
[17:42:04.987]         }))
[17:42:04.987]     }, error = function(ex) {
[17:42:04.987]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:04.987]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.987]                 ...future.rng), started = ...future.startTime, 
[17:42:04.987]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:04.987]             version = "1.8"), class = "FutureResult")
[17:42:04.987]     }, finally = {
[17:42:04.987]         if (!identical(...future.workdir, getwd())) 
[17:42:04.987]             setwd(...future.workdir)
[17:42:04.987]         {
[17:42:04.987]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:04.987]                 ...future.oldOptions$nwarnings <- NULL
[17:42:04.987]             }
[17:42:04.987]             base::options(...future.oldOptions)
[17:42:04.987]             if (.Platform$OS.type == "windows") {
[17:42:04.987]                 old_names <- names(...future.oldEnvVars)
[17:42:04.987]                 envs <- base::Sys.getenv()
[17:42:04.987]                 names <- names(envs)
[17:42:04.987]                 common <- intersect(names, old_names)
[17:42:04.987]                 added <- setdiff(names, old_names)
[17:42:04.987]                 removed <- setdiff(old_names, names)
[17:42:04.987]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:04.987]                   envs[common]]
[17:42:04.987]                 NAMES <- toupper(changed)
[17:42:04.987]                 args <- list()
[17:42:04.987]                 for (kk in seq_along(NAMES)) {
[17:42:04.987]                   name <- changed[[kk]]
[17:42:04.987]                   NAME <- NAMES[[kk]]
[17:42:04.987]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.987]                     next
[17:42:04.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.987]                 }
[17:42:04.987]                 NAMES <- toupper(added)
[17:42:04.987]                 for (kk in seq_along(NAMES)) {
[17:42:04.987]                   name <- added[[kk]]
[17:42:04.987]                   NAME <- NAMES[[kk]]
[17:42:04.987]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.987]                     next
[17:42:04.987]                   args[[name]] <- ""
[17:42:04.987]                 }
[17:42:04.987]                 NAMES <- toupper(removed)
[17:42:04.987]                 for (kk in seq_along(NAMES)) {
[17:42:04.987]                   name <- removed[[kk]]
[17:42:04.987]                   NAME <- NAMES[[kk]]
[17:42:04.987]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.987]                     next
[17:42:04.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.987]                 }
[17:42:04.987]                 if (length(args) > 0) 
[17:42:04.987]                   base::do.call(base::Sys.setenv, args = args)
[17:42:04.987]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:04.987]             }
[17:42:04.987]             else {
[17:42:04.987]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:04.987]             }
[17:42:04.987]             {
[17:42:04.987]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:04.987]                   0L) {
[17:42:04.987]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:04.987]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:04.987]                   base::options(opts)
[17:42:04.987]                 }
[17:42:04.987]                 {
[17:42:04.987]                   {
[17:42:04.987]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:04.987]                     NULL
[17:42:04.987]                   }
[17:42:04.987]                   options(future.plan = NULL)
[17:42:04.987]                   if (is.na(NA_character_)) 
[17:42:04.987]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.987]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:04.987]                   future::plan(list(function (...) 
[17:42:04.987]                   {
[17:42:04.987]                     Future(1)
[17:42:04.987]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:04.987]                 }
[17:42:04.987]             }
[17:42:04.987]         }
[17:42:04.987]     })
[17:42:04.987]     if (TRUE) {
[17:42:04.987]         base::sink(type = "output", split = FALSE)
[17:42:04.987]         if (TRUE) {
[17:42:04.987]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:04.987]         }
[17:42:04.987]         else {
[17:42:04.987]             ...future.result["stdout"] <- base::list(NULL)
[17:42:04.987]         }
[17:42:04.987]         base::close(...future.stdout)
[17:42:04.987]         ...future.stdout <- NULL
[17:42:04.987]     }
[17:42:04.987]     ...future.result$conditions <- ...future.conditions
[17:42:04.987]     ...future.result$finished <- base::Sys.time()
[17:42:04.987]     ...future.result
[17:42:04.987] }
[17:42:04.991] MultisessionFuture started
[17:42:04.991] result() for ClusterFuture ...
[17:42:04.991] receiveMessageFromWorker() for ClusterFuture ...
[17:42:04.991] - Validating connection of MultisessionFuture
[17:42:04.993] - received message: FutureResult
[17:42:04.993] - Received FutureResult
[17:42:04.993] - Erased future from FutureRegistry
[17:42:04.993] result() for ClusterFuture ...
[17:42:04.993] - result already collected: FutureResult
[17:42:04.993] result() for ClusterFuture ... done
[17:42:04.993] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:04.993] result() for ClusterFuture ... done
[17:42:04.994] result() for ClusterFuture ...
[17:42:04.994] - result already collected: FutureResult
[17:42:04.994] result() for ClusterFuture ... done
[1] 42
[17:42:04.994] getGlobalsAndPackages() ...
[17:42:04.994] Searching for globals...
[17:42:04.995] - globals found: [1] ‘{’
[17:42:04.995] Searching for globals ... DONE
[17:42:04.995] Resolving globals: FALSE
[17:42:04.996] 
[17:42:04.996] 
[17:42:04.996] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: fd59c262-9856-3ba0-3259-37750b172310
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:04.997] Packages needed by the future expression (n = 0): <none>
[17:42:04.997] Packages needed by future strategies (n = 0): <none>
[17:42:04.997] {
[17:42:04.997]     {
[17:42:04.997]         {
[17:42:04.997]             ...future.startTime <- base::Sys.time()
[17:42:04.997]             {
[17:42:04.997]                 {
[17:42:04.997]                   {
[17:42:04.997]                     base::local({
[17:42:04.997]                       has_future <- base::requireNamespace("future", 
[17:42:04.997]                         quietly = TRUE)
[17:42:04.997]                       if (has_future) {
[17:42:04.997]                         ns <- base::getNamespace("future")
[17:42:04.997]                         version <- ns[[".package"]][["version"]]
[17:42:04.997]                         if (is.null(version)) 
[17:42:04.997]                           version <- utils::packageVersion("future")
[17:42:04.997]                       }
[17:42:04.997]                       else {
[17:42:04.997]                         version <- NULL
[17:42:04.997]                       }
[17:42:04.997]                       if (!has_future || version < "1.8.0") {
[17:42:04.997]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:04.997]                           "", base::R.version$version.string), 
[17:42:04.997]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:04.997]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:04.997]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:04.997]                             "release", "version")], collapse = " "), 
[17:42:04.997]                           hostname = base::Sys.info()[["nodename"]])
[17:42:04.997]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:04.997]                           info)
[17:42:04.997]                         info <- base::paste(info, collapse = "; ")
[17:42:04.997]                         if (!has_future) {
[17:42:04.997]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:04.997]                             info)
[17:42:04.997]                         }
[17:42:04.997]                         else {
[17:42:04.997]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:04.997]                             info, version)
[17:42:04.997]                         }
[17:42:04.997]                         base::stop(msg)
[17:42:04.997]                       }
[17:42:04.997]                     })
[17:42:04.997]                   }
[17:42:04.997]                   options(future.plan = NULL)
[17:42:04.997]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.997]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:04.997]                 }
[17:42:04.997]                 ...future.workdir <- getwd()
[17:42:04.997]             }
[17:42:04.997]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:04.997]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:04.997]         }
[17:42:04.997]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:04.997]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:04.997]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:04.997]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:04.997]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:04.997]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:04.997]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:04.997]             base::names(...future.oldOptions))
[17:42:04.997]     }
[17:42:04.997]     if (FALSE) {
[17:42:04.997]     }
[17:42:04.997]     else {
[17:42:04.997]         if (TRUE) {
[17:42:04.997]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:04.997]                 open = "w")
[17:42:04.997]         }
[17:42:04.997]         else {
[17:42:04.997]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:04.997]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:04.997]         }
[17:42:04.997]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:04.997]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:04.997]             base::sink(type = "output", split = FALSE)
[17:42:04.997]             base::close(...future.stdout)
[17:42:04.997]         }, add = TRUE)
[17:42:04.997]     }
[17:42:04.997]     ...future.frame <- base::sys.nframe()
[17:42:04.997]     ...future.conditions <- base::list()
[17:42:04.997]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:04.997]     if (FALSE) {
[17:42:04.997]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:04.997]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:04.997]     }
[17:42:04.997]     ...future.result <- base::tryCatch({
[17:42:04.997]         base::withCallingHandlers({
[17:42:04.997]             ...future.value <- base::withVisible(base::local({
[17:42:04.997]                 42L
[17:42:04.997]             }))
[17:42:04.997]             future::FutureResult(value = ...future.value$value, 
[17:42:04.997]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.997]                   ...future.rng), globalenv = if (FALSE) 
[17:42:04.997]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:04.997]                     ...future.globalenv.names))
[17:42:04.997]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:04.997]         }, condition = base::local({
[17:42:04.997]             c <- base::c
[17:42:04.997]             inherits <- base::inherits
[17:42:04.997]             invokeRestart <- base::invokeRestart
[17:42:04.997]             length <- base::length
[17:42:04.997]             list <- base::list
[17:42:04.997]             seq.int <- base::seq.int
[17:42:04.997]             signalCondition <- base::signalCondition
[17:42:04.997]             sys.calls <- base::sys.calls
[17:42:04.997]             `[[` <- base::`[[`
[17:42:04.997]             `+` <- base::`+`
[17:42:04.997]             `<<-` <- base::`<<-`
[17:42:04.997]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:04.997]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:04.997]                   3L)]
[17:42:04.997]             }
[17:42:04.997]             function(cond) {
[17:42:04.997]                 is_error <- inherits(cond, "error")
[17:42:04.997]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:04.997]                   NULL)
[17:42:04.997]                 if (is_error) {
[17:42:04.997]                   sessionInformation <- function() {
[17:42:04.997]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:04.997]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:04.997]                       search = base::search(), system = base::Sys.info())
[17:42:04.997]                   }
[17:42:04.997]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.997]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:04.997]                     cond$call), session = sessionInformation(), 
[17:42:04.997]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:04.997]                   signalCondition(cond)
[17:42:04.997]                 }
[17:42:04.997]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:04.997]                 "immediateCondition"))) {
[17:42:04.997]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:04.997]                   ...future.conditions[[length(...future.conditions) + 
[17:42:04.997]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:04.997]                   if (TRUE && !signal) {
[17:42:04.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.997]                     {
[17:42:04.997]                       inherits <- base::inherits
[17:42:04.997]                       invokeRestart <- base::invokeRestart
[17:42:04.997]                       is.null <- base::is.null
[17:42:04.997]                       muffled <- FALSE
[17:42:04.997]                       if (inherits(cond, "message")) {
[17:42:04.997]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.997]                         if (muffled) 
[17:42:04.997]                           invokeRestart("muffleMessage")
[17:42:04.997]                       }
[17:42:04.997]                       else if (inherits(cond, "warning")) {
[17:42:04.997]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.997]                         if (muffled) 
[17:42:04.997]                           invokeRestart("muffleWarning")
[17:42:04.997]                       }
[17:42:04.997]                       else if (inherits(cond, "condition")) {
[17:42:04.997]                         if (!is.null(pattern)) {
[17:42:04.997]                           computeRestarts <- base::computeRestarts
[17:42:04.997]                           grepl <- base::grepl
[17:42:04.997]                           restarts <- computeRestarts(cond)
[17:42:04.997]                           for (restart in restarts) {
[17:42:04.997]                             name <- restart$name
[17:42:04.997]                             if (is.null(name)) 
[17:42:04.997]                               next
[17:42:04.997]                             if (!grepl(pattern, name)) 
[17:42:04.997]                               next
[17:42:04.997]                             invokeRestart(restart)
[17:42:04.997]                             muffled <- TRUE
[17:42:04.997]                             break
[17:42:04.997]                           }
[17:42:04.997]                         }
[17:42:04.997]                       }
[17:42:04.997]                       invisible(muffled)
[17:42:04.997]                     }
[17:42:04.997]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.997]                   }
[17:42:04.997]                 }
[17:42:04.997]                 else {
[17:42:04.997]                   if (TRUE) {
[17:42:04.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:04.997]                     {
[17:42:04.997]                       inherits <- base::inherits
[17:42:04.997]                       invokeRestart <- base::invokeRestart
[17:42:04.997]                       is.null <- base::is.null
[17:42:04.997]                       muffled <- FALSE
[17:42:04.997]                       if (inherits(cond, "message")) {
[17:42:04.997]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:04.997]                         if (muffled) 
[17:42:04.997]                           invokeRestart("muffleMessage")
[17:42:04.997]                       }
[17:42:04.997]                       else if (inherits(cond, "warning")) {
[17:42:04.997]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:04.997]                         if (muffled) 
[17:42:04.997]                           invokeRestart("muffleWarning")
[17:42:04.997]                       }
[17:42:04.997]                       else if (inherits(cond, "condition")) {
[17:42:04.997]                         if (!is.null(pattern)) {
[17:42:04.997]                           computeRestarts <- base::computeRestarts
[17:42:04.997]                           grepl <- base::grepl
[17:42:04.997]                           restarts <- computeRestarts(cond)
[17:42:04.997]                           for (restart in restarts) {
[17:42:04.997]                             name <- restart$name
[17:42:04.997]                             if (is.null(name)) 
[17:42:04.997]                               next
[17:42:04.997]                             if (!grepl(pattern, name)) 
[17:42:04.997]                               next
[17:42:04.997]                             invokeRestart(restart)
[17:42:04.997]                             muffled <- TRUE
[17:42:04.997]                             break
[17:42:04.997]                           }
[17:42:04.997]                         }
[17:42:04.997]                       }
[17:42:04.997]                       invisible(muffled)
[17:42:04.997]                     }
[17:42:04.997]                     muffleCondition(cond, pattern = "^muffle")
[17:42:04.997]                   }
[17:42:04.997]                 }
[17:42:04.997]             }
[17:42:04.997]         }))
[17:42:04.997]     }, error = function(ex) {
[17:42:04.997]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:04.997]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:04.997]                 ...future.rng), started = ...future.startTime, 
[17:42:04.997]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:04.997]             version = "1.8"), class = "FutureResult")
[17:42:04.997]     }, finally = {
[17:42:04.997]         if (!identical(...future.workdir, getwd())) 
[17:42:04.997]             setwd(...future.workdir)
[17:42:04.997]         {
[17:42:04.997]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:04.997]                 ...future.oldOptions$nwarnings <- NULL
[17:42:04.997]             }
[17:42:04.997]             base::options(...future.oldOptions)
[17:42:04.997]             if (.Platform$OS.type == "windows") {
[17:42:04.997]                 old_names <- names(...future.oldEnvVars)
[17:42:04.997]                 envs <- base::Sys.getenv()
[17:42:04.997]                 names <- names(envs)
[17:42:04.997]                 common <- intersect(names, old_names)
[17:42:04.997]                 added <- setdiff(names, old_names)
[17:42:04.997]                 removed <- setdiff(old_names, names)
[17:42:04.997]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:04.997]                   envs[common]]
[17:42:04.997]                 NAMES <- toupper(changed)
[17:42:04.997]                 args <- list()
[17:42:04.997]                 for (kk in seq_along(NAMES)) {
[17:42:04.997]                   name <- changed[[kk]]
[17:42:04.997]                   NAME <- NAMES[[kk]]
[17:42:04.997]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.997]                     next
[17:42:04.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.997]                 }
[17:42:04.997]                 NAMES <- toupper(added)
[17:42:04.997]                 for (kk in seq_along(NAMES)) {
[17:42:04.997]                   name <- added[[kk]]
[17:42:04.997]                   NAME <- NAMES[[kk]]
[17:42:04.997]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.997]                     next
[17:42:04.997]                   args[[name]] <- ""
[17:42:04.997]                 }
[17:42:04.997]                 NAMES <- toupper(removed)
[17:42:04.997]                 for (kk in seq_along(NAMES)) {
[17:42:04.997]                   name <- removed[[kk]]
[17:42:04.997]                   NAME <- NAMES[[kk]]
[17:42:04.997]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:04.997]                     next
[17:42:04.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:04.997]                 }
[17:42:04.997]                 if (length(args) > 0) 
[17:42:04.997]                   base::do.call(base::Sys.setenv, args = args)
[17:42:04.997]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:04.997]             }
[17:42:04.997]             else {
[17:42:04.997]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:04.997]             }
[17:42:04.997]             {
[17:42:04.997]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:04.997]                   0L) {
[17:42:04.997]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:04.997]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:04.997]                   base::options(opts)
[17:42:04.997]                 }
[17:42:04.997]                 {
[17:42:04.997]                   {
[17:42:04.997]                     NULL
[17:42:04.997]                     RNGkind("Mersenne-Twister")
[17:42:04.997]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:04.997]                       inherits = FALSE)
[17:42:04.997]                   }
[17:42:04.997]                   options(future.plan = NULL)
[17:42:04.997]                   if (is.na(NA_character_)) 
[17:42:04.997]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:04.997]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:04.997]                   future::plan(list(function (...) 
[17:42:04.997]                   {
[17:42:04.997]                     Future(1)
[17:42:04.997]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:04.997]                 }
[17:42:04.997]             }
[17:42:04.997]         }
[17:42:04.997]     })
[17:42:04.997]     if (TRUE) {
[17:42:04.997]         base::sink(type = "output", split = FALSE)
[17:42:04.997]         if (TRUE) {
[17:42:04.997]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:04.997]         }
[17:42:04.997]         else {
[17:42:04.997]             ...future.result["stdout"] <- base::list(NULL)
[17:42:04.997]         }
[17:42:04.997]         base::close(...future.stdout)
[17:42:04.997]         ...future.stdout <- NULL
[17:42:04.997]     }
[17:42:04.997]     ...future.result$conditions <- ...future.conditions
[17:42:04.997]     ...future.result$finished <- base::Sys.time()
[17:42:04.997]     ...future.result
[17:42:04.997] }
[17:42:04.999] plan(): Setting new future strategy stack:
[17:42:04.999] List of future strategies:
[17:42:04.999] 1. sequential:
[17:42:04.999]    - args: function (..., envir = parent.frame())
[17:42:04.999]    - tweaked: FALSE
[17:42:04.999]    - call: NULL
[17:42:05.000] plan(): nbrOfWorkers() = 1
[17:42:05.001] plan(): Setting new future strategy stack:
[17:42:05.001] List of future strategies:
[17:42:05.001] 1. future:
[17:42:05.001]    - args: function (...)
[17:42:05.001]    - tweaked: FALSE
[17:42:05.001]    - call: plan(foo)
[17:42:05.001] plan(): nbrOfWorkers() = Inf
[17:42:05.002] SequentialFuture started (and completed)
[1] 42
[17:42:05.002] getGlobalsAndPackages() ...
[17:42:05.002] Searching for globals...
[17:42:05.003] - globals found: [1] ‘{’
[17:42:05.003] Searching for globals ... DONE
[17:42:05.003] Resolving globals: FALSE
[17:42:05.004] 
[17:42:05.004] 
[17:42:05.004] getGlobalsAndPackages() ... DONE
[17:42:05.004] Packages needed by the future expression (n = 0): <none>
[17:42:05.004] Packages needed by future strategies (n = 0): <none>
[17:42:05.005] {
[17:42:05.005]     {
[17:42:05.005]         {
[17:42:05.005]             ...future.startTime <- base::Sys.time()
[17:42:05.005]             {
[17:42:05.005]                 {
[17:42:05.005]                   {
[17:42:05.005]                     base::local({
[17:42:05.005]                       has_future <- base::requireNamespace("future", 
[17:42:05.005]                         quietly = TRUE)
[17:42:05.005]                       if (has_future) {
[17:42:05.005]                         ns <- base::getNamespace("future")
[17:42:05.005]                         version <- ns[[".package"]][["version"]]
[17:42:05.005]                         if (is.null(version)) 
[17:42:05.005]                           version <- utils::packageVersion("future")
[17:42:05.005]                       }
[17:42:05.005]                       else {
[17:42:05.005]                         version <- NULL
[17:42:05.005]                       }
[17:42:05.005]                       if (!has_future || version < "1.8.0") {
[17:42:05.005]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.005]                           "", base::R.version$version.string), 
[17:42:05.005]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:05.005]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.005]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.005]                             "release", "version")], collapse = " "), 
[17:42:05.005]                           hostname = base::Sys.info()[["nodename"]])
[17:42:05.005]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.005]                           info)
[17:42:05.005]                         info <- base::paste(info, collapse = "; ")
[17:42:05.005]                         if (!has_future) {
[17:42:05.005]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.005]                             info)
[17:42:05.005]                         }
[17:42:05.005]                         else {
[17:42:05.005]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.005]                             info, version)
[17:42:05.005]                         }
[17:42:05.005]                         base::stop(msg)
[17:42:05.005]                       }
[17:42:05.005]                     })
[17:42:05.005]                   }
[17:42:05.005]                   options(future.plan = NULL)
[17:42:05.005]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.005]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.005]                 }
[17:42:05.005]                 ...future.workdir <- getwd()
[17:42:05.005]             }
[17:42:05.005]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.005]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.005]         }
[17:42:05.005]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.005]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.005]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.005]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.005]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.005]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.005]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.005]             base::names(...future.oldOptions))
[17:42:05.005]     }
[17:42:05.005]     if (FALSE) {
[17:42:05.005]     }
[17:42:05.005]     else {
[17:42:05.005]         if (TRUE) {
[17:42:05.005]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.005]                 open = "w")
[17:42:05.005]         }
[17:42:05.005]         else {
[17:42:05.005]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.005]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.005]         }
[17:42:05.005]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.005]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.005]             base::sink(type = "output", split = FALSE)
[17:42:05.005]             base::close(...future.stdout)
[17:42:05.005]         }, add = TRUE)
[17:42:05.005]     }
[17:42:05.005]     ...future.frame <- base::sys.nframe()
[17:42:05.005]     ...future.conditions <- base::list()
[17:42:05.005]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.005]     if (FALSE) {
[17:42:05.005]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.005]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.005]     }
[17:42:05.005]     ...future.result <- base::tryCatch({
[17:42:05.005]         base::withCallingHandlers({
[17:42:05.005]             ...future.value <- base::withVisible(base::local({
[17:42:05.005]                 42L
[17:42:05.005]             }))
[17:42:05.005]             future::FutureResult(value = ...future.value$value, 
[17:42:05.005]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.005]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.005]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.005]                     ...future.globalenv.names))
[17:42:05.005]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.005]         }, condition = base::local({
[17:42:05.005]             c <- base::c
[17:42:05.005]             inherits <- base::inherits
[17:42:05.005]             invokeRestart <- base::invokeRestart
[17:42:05.005]             length <- base::length
[17:42:05.005]             list <- base::list
[17:42:05.005]             seq.int <- base::seq.int
[17:42:05.005]             signalCondition <- base::signalCondition
[17:42:05.005]             sys.calls <- base::sys.calls
[17:42:05.005]             `[[` <- base::`[[`
[17:42:05.005]             `+` <- base::`+`
[17:42:05.005]             `<<-` <- base::`<<-`
[17:42:05.005]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.005]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.005]                   3L)]
[17:42:05.005]             }
[17:42:05.005]             function(cond) {
[17:42:05.005]                 is_error <- inherits(cond, "error")
[17:42:05.005]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.005]                   NULL)
[17:42:05.005]                 if (is_error) {
[17:42:05.005]                   sessionInformation <- function() {
[17:42:05.005]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.005]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.005]                       search = base::search(), system = base::Sys.info())
[17:42:05.005]                   }
[17:42:05.005]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.005]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.005]                     cond$call), session = sessionInformation(), 
[17:42:05.005]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.005]                   signalCondition(cond)
[17:42:05.005]                 }
[17:42:05.005]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.005]                 "immediateCondition"))) {
[17:42:05.005]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.005]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.005]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.005]                   if (TRUE && !signal) {
[17:42:05.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.005]                     {
[17:42:05.005]                       inherits <- base::inherits
[17:42:05.005]                       invokeRestart <- base::invokeRestart
[17:42:05.005]                       is.null <- base::is.null
[17:42:05.005]                       muffled <- FALSE
[17:42:05.005]                       if (inherits(cond, "message")) {
[17:42:05.005]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.005]                         if (muffled) 
[17:42:05.005]                           invokeRestart("muffleMessage")
[17:42:05.005]                       }
[17:42:05.005]                       else if (inherits(cond, "warning")) {
[17:42:05.005]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.005]                         if (muffled) 
[17:42:05.005]                           invokeRestart("muffleWarning")
[17:42:05.005]                       }
[17:42:05.005]                       else if (inherits(cond, "condition")) {
[17:42:05.005]                         if (!is.null(pattern)) {
[17:42:05.005]                           computeRestarts <- base::computeRestarts
[17:42:05.005]                           grepl <- base::grepl
[17:42:05.005]                           restarts <- computeRestarts(cond)
[17:42:05.005]                           for (restart in restarts) {
[17:42:05.005]                             name <- restart$name
[17:42:05.005]                             if (is.null(name)) 
[17:42:05.005]                               next
[17:42:05.005]                             if (!grepl(pattern, name)) 
[17:42:05.005]                               next
[17:42:05.005]                             invokeRestart(restart)
[17:42:05.005]                             muffled <- TRUE
[17:42:05.005]                             break
[17:42:05.005]                           }
[17:42:05.005]                         }
[17:42:05.005]                       }
[17:42:05.005]                       invisible(muffled)
[17:42:05.005]                     }
[17:42:05.005]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.005]                   }
[17:42:05.005]                 }
[17:42:05.005]                 else {
[17:42:05.005]                   if (TRUE) {
[17:42:05.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.005]                     {
[17:42:05.005]                       inherits <- base::inherits
[17:42:05.005]                       invokeRestart <- base::invokeRestart
[17:42:05.005]                       is.null <- base::is.null
[17:42:05.005]                       muffled <- FALSE
[17:42:05.005]                       if (inherits(cond, "message")) {
[17:42:05.005]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.005]                         if (muffled) 
[17:42:05.005]                           invokeRestart("muffleMessage")
[17:42:05.005]                       }
[17:42:05.005]                       else if (inherits(cond, "warning")) {
[17:42:05.005]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.005]                         if (muffled) 
[17:42:05.005]                           invokeRestart("muffleWarning")
[17:42:05.005]                       }
[17:42:05.005]                       else if (inherits(cond, "condition")) {
[17:42:05.005]                         if (!is.null(pattern)) {
[17:42:05.005]                           computeRestarts <- base::computeRestarts
[17:42:05.005]                           grepl <- base::grepl
[17:42:05.005]                           restarts <- computeRestarts(cond)
[17:42:05.005]                           for (restart in restarts) {
[17:42:05.005]                             name <- restart$name
[17:42:05.005]                             if (is.null(name)) 
[17:42:05.005]                               next
[17:42:05.005]                             if (!grepl(pattern, name)) 
[17:42:05.005]                               next
[17:42:05.005]                             invokeRestart(restart)
[17:42:05.005]                             muffled <- TRUE
[17:42:05.005]                             break
[17:42:05.005]                           }
[17:42:05.005]                         }
[17:42:05.005]                       }
[17:42:05.005]                       invisible(muffled)
[17:42:05.005]                     }
[17:42:05.005]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.005]                   }
[17:42:05.005]                 }
[17:42:05.005]             }
[17:42:05.005]         }))
[17:42:05.005]     }, error = function(ex) {
[17:42:05.005]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.005]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.005]                 ...future.rng), started = ...future.startTime, 
[17:42:05.005]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.005]             version = "1.8"), class = "FutureResult")
[17:42:05.005]     }, finally = {
[17:42:05.005]         if (!identical(...future.workdir, getwd())) 
[17:42:05.005]             setwd(...future.workdir)
[17:42:05.005]         {
[17:42:05.005]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.005]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.005]             }
[17:42:05.005]             base::options(...future.oldOptions)
[17:42:05.005]             if (.Platform$OS.type == "windows") {
[17:42:05.005]                 old_names <- names(...future.oldEnvVars)
[17:42:05.005]                 envs <- base::Sys.getenv()
[17:42:05.005]                 names <- names(envs)
[17:42:05.005]                 common <- intersect(names, old_names)
[17:42:05.005]                 added <- setdiff(names, old_names)
[17:42:05.005]                 removed <- setdiff(old_names, names)
[17:42:05.005]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.005]                   envs[common]]
[17:42:05.005]                 NAMES <- toupper(changed)
[17:42:05.005]                 args <- list()
[17:42:05.005]                 for (kk in seq_along(NAMES)) {
[17:42:05.005]                   name <- changed[[kk]]
[17:42:05.005]                   NAME <- NAMES[[kk]]
[17:42:05.005]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.005]                     next
[17:42:05.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.005]                 }
[17:42:05.005]                 NAMES <- toupper(added)
[17:42:05.005]                 for (kk in seq_along(NAMES)) {
[17:42:05.005]                   name <- added[[kk]]
[17:42:05.005]                   NAME <- NAMES[[kk]]
[17:42:05.005]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.005]                     next
[17:42:05.005]                   args[[name]] <- ""
[17:42:05.005]                 }
[17:42:05.005]                 NAMES <- toupper(removed)
[17:42:05.005]                 for (kk in seq_along(NAMES)) {
[17:42:05.005]                   name <- removed[[kk]]
[17:42:05.005]                   NAME <- NAMES[[kk]]
[17:42:05.005]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.005]                     next
[17:42:05.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.005]                 }
[17:42:05.005]                 if (length(args) > 0) 
[17:42:05.005]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.005]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.005]             }
[17:42:05.005]             else {
[17:42:05.005]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.005]             }
[17:42:05.005]             {
[17:42:05.005]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.005]                   0L) {
[17:42:05.005]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.005]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.005]                   base::options(opts)
[17:42:05.005]                 }
[17:42:05.005]                 {
[17:42:05.005]                   {
[17:42:05.005]                     NULL
[17:42:05.005]                     RNGkind("Mersenne-Twister")
[17:42:05.005]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:05.005]                       inherits = FALSE)
[17:42:05.005]                   }
[17:42:05.005]                   options(future.plan = NULL)
[17:42:05.005]                   if (is.na(NA_character_)) 
[17:42:05.005]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.005]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.005]                   future::plan(list(function (...) 
[17:42:05.005]                   {
[17:42:05.005]                     Future(1)
[17:42:05.005]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.005]                 }
[17:42:05.005]             }
[17:42:05.005]         }
[17:42:05.005]     })
[17:42:05.005]     if (TRUE) {
[17:42:05.005]         base::sink(type = "output", split = FALSE)
[17:42:05.005]         if (TRUE) {
[17:42:05.005]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.005]         }
[17:42:05.005]         else {
[17:42:05.005]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.005]         }
[17:42:05.005]         base::close(...future.stdout)
[17:42:05.005]         ...future.stdout <- NULL
[17:42:05.005]     }
[17:42:05.005]     ...future.result$conditions <- ...future.conditions
[17:42:05.005]     ...future.result$finished <- base::Sys.time()
[17:42:05.005]     ...future.result
[17:42:05.005] }
[17:42:05.007] plan(): Setting new future strategy stack:
[17:42:05.007] List of future strategies:
[17:42:05.007] 1. sequential:
[17:42:05.007]    - args: function (..., envir = parent.frame())
[17:42:05.007]    - tweaked: FALSE
[17:42:05.007]    - call: NULL
[17:42:05.007] plan(): nbrOfWorkers() = 1
[17:42:05.008] plan(): Setting new future strategy stack:
[17:42:05.008] List of future strategies:
[17:42:05.008] 1. future:
[17:42:05.008]    - args: function (...)
[17:42:05.008]    - tweaked: FALSE
[17:42:05.008]    - call: plan(foo)
[17:42:05.009] plan(): nbrOfWorkers() = Inf
[17:42:05.009] SequentialFuture started (and completed)
[1] 42
[17:42:05.009] getGlobalsAndPackages() ...
[17:42:05.010] 
[17:42:05.010] - globals: [0] <none>
[17:42:05.010] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x5613d7620648
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: fd59c262-9856-3ba0-3259-37750b172310
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:05.012] Packages needed by the future expression (n = 0): <none>
[17:42:05.012] Packages needed by future strategies (n = 0): <none>
[17:42:05.012] {
[17:42:05.012]     {
[17:42:05.012]         {
[17:42:05.012]             ...future.startTime <- base::Sys.time()
[17:42:05.012]             {
[17:42:05.012]                 {
[17:42:05.012]                   {
[17:42:05.012]                     {
[17:42:05.012]                       base::local({
[17:42:05.012]                         has_future <- base::requireNamespace("future", 
[17:42:05.012]                           quietly = TRUE)
[17:42:05.012]                         if (has_future) {
[17:42:05.012]                           ns <- base::getNamespace("future")
[17:42:05.012]                           version <- ns[[".package"]][["version"]]
[17:42:05.012]                           if (is.null(version)) 
[17:42:05.012]                             version <- utils::packageVersion("future")
[17:42:05.012]                         }
[17:42:05.012]                         else {
[17:42:05.012]                           version <- NULL
[17:42:05.012]                         }
[17:42:05.012]                         if (!has_future || version < "1.8.0") {
[17:42:05.012]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.012]                             "", base::R.version$version.string), 
[17:42:05.012]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.012]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.012]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.012]                               "release", "version")], collapse = " "), 
[17:42:05.012]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.012]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.012]                             info)
[17:42:05.012]                           info <- base::paste(info, collapse = "; ")
[17:42:05.012]                           if (!has_future) {
[17:42:05.012]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.012]                               info)
[17:42:05.012]                           }
[17:42:05.012]                           else {
[17:42:05.012]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.012]                               info, version)
[17:42:05.012]                           }
[17:42:05.012]                           base::stop(msg)
[17:42:05.012]                         }
[17:42:05.012]                       })
[17:42:05.012]                     }
[17:42:05.012]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.012]                     base::options(mc.cores = 1L)
[17:42:05.012]                   }
[17:42:05.012]                   options(future.plan = NULL)
[17:42:05.012]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.012]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.012]                 }
[17:42:05.012]                 ...future.workdir <- getwd()
[17:42:05.012]             }
[17:42:05.012]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.012]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.012]         }
[17:42:05.012]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.012]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.012]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.012]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.012]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.012]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.012]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.012]             base::names(...future.oldOptions))
[17:42:05.012]     }
[17:42:05.012]     if (FALSE) {
[17:42:05.012]     }
[17:42:05.012]     else {
[17:42:05.012]         if (TRUE) {
[17:42:05.012]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.012]                 open = "w")
[17:42:05.012]         }
[17:42:05.012]         else {
[17:42:05.012]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.012]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.012]         }
[17:42:05.012]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.012]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.012]             base::sink(type = "output", split = FALSE)
[17:42:05.012]             base::close(...future.stdout)
[17:42:05.012]         }, add = TRUE)
[17:42:05.012]     }
[17:42:05.012]     ...future.frame <- base::sys.nframe()
[17:42:05.012]     ...future.conditions <- base::list()
[17:42:05.012]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.012]     if (FALSE) {
[17:42:05.012]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.012]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.012]     }
[17:42:05.012]     ...future.result <- base::tryCatch({
[17:42:05.012]         base::withCallingHandlers({
[17:42:05.012]             ...future.value <- base::withVisible(base::local({
[17:42:05.012]                 withCallingHandlers({
[17:42:05.012]                   {
[17:42:05.012]                     42L
[17:42:05.012]                   }
[17:42:05.012]                 }, immediateCondition = function(cond) {
[17:42:05.012]                   save_rds <- function (object, pathname, ...) 
[17:42:05.012]                   {
[17:42:05.012]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.012]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.012]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.012]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.012]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.012]                         fi_tmp[["mtime"]])
[17:42:05.012]                     }
[17:42:05.012]                     tryCatch({
[17:42:05.012]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.012]                     }, error = function(ex) {
[17:42:05.012]                       msg <- conditionMessage(ex)
[17:42:05.012]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.012]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.012]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.012]                         fi_tmp[["mtime"]], msg)
[17:42:05.012]                       ex$message <- msg
[17:42:05.012]                       stop(ex)
[17:42:05.012]                     })
[17:42:05.012]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.012]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.012]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.012]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.012]                       fi <- file.info(pathname)
[17:42:05.012]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.012]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.012]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.012]                         fi[["size"]], fi[["mtime"]])
[17:42:05.012]                       stop(msg)
[17:42:05.012]                     }
[17:42:05.012]                     invisible(pathname)
[17:42:05.012]                   }
[17:42:05.012]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.012]                     rootPath = tempdir()) 
[17:42:05.012]                   {
[17:42:05.012]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.012]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.012]                       tmpdir = path, fileext = ".rds")
[17:42:05.012]                     save_rds(obj, file)
[17:42:05.012]                   }
[17:42:05.012]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8wqjE3/.future/immediateConditions")
[17:42:05.012]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.012]                   {
[17:42:05.012]                     inherits <- base::inherits
[17:42:05.012]                     invokeRestart <- base::invokeRestart
[17:42:05.012]                     is.null <- base::is.null
[17:42:05.012]                     muffled <- FALSE
[17:42:05.012]                     if (inherits(cond, "message")) {
[17:42:05.012]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.012]                       if (muffled) 
[17:42:05.012]                         invokeRestart("muffleMessage")
[17:42:05.012]                     }
[17:42:05.012]                     else if (inherits(cond, "warning")) {
[17:42:05.012]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.012]                       if (muffled) 
[17:42:05.012]                         invokeRestart("muffleWarning")
[17:42:05.012]                     }
[17:42:05.012]                     else if (inherits(cond, "condition")) {
[17:42:05.012]                       if (!is.null(pattern)) {
[17:42:05.012]                         computeRestarts <- base::computeRestarts
[17:42:05.012]                         grepl <- base::grepl
[17:42:05.012]                         restarts <- computeRestarts(cond)
[17:42:05.012]                         for (restart in restarts) {
[17:42:05.012]                           name <- restart$name
[17:42:05.012]                           if (is.null(name)) 
[17:42:05.012]                             next
[17:42:05.012]                           if (!grepl(pattern, name)) 
[17:42:05.012]                             next
[17:42:05.012]                           invokeRestart(restart)
[17:42:05.012]                           muffled <- TRUE
[17:42:05.012]                           break
[17:42:05.012]                         }
[17:42:05.012]                       }
[17:42:05.012]                     }
[17:42:05.012]                     invisible(muffled)
[17:42:05.012]                   }
[17:42:05.012]                   muffleCondition(cond)
[17:42:05.012]                 })
[17:42:05.012]             }))
[17:42:05.012]             future::FutureResult(value = ...future.value$value, 
[17:42:05.012]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.012]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.012]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.012]                     ...future.globalenv.names))
[17:42:05.012]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.012]         }, condition = base::local({
[17:42:05.012]             c <- base::c
[17:42:05.012]             inherits <- base::inherits
[17:42:05.012]             invokeRestart <- base::invokeRestart
[17:42:05.012]             length <- base::length
[17:42:05.012]             list <- base::list
[17:42:05.012]             seq.int <- base::seq.int
[17:42:05.012]             signalCondition <- base::signalCondition
[17:42:05.012]             sys.calls <- base::sys.calls
[17:42:05.012]             `[[` <- base::`[[`
[17:42:05.012]             `+` <- base::`+`
[17:42:05.012]             `<<-` <- base::`<<-`
[17:42:05.012]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.012]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.012]                   3L)]
[17:42:05.012]             }
[17:42:05.012]             function(cond) {
[17:42:05.012]                 is_error <- inherits(cond, "error")
[17:42:05.012]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.012]                   NULL)
[17:42:05.012]                 if (is_error) {
[17:42:05.012]                   sessionInformation <- function() {
[17:42:05.012]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.012]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.012]                       search = base::search(), system = base::Sys.info())
[17:42:05.012]                   }
[17:42:05.012]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.012]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.012]                     cond$call), session = sessionInformation(), 
[17:42:05.012]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.012]                   signalCondition(cond)
[17:42:05.012]                 }
[17:42:05.012]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.012]                 "immediateCondition"))) {
[17:42:05.012]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.012]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.012]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.012]                   if (TRUE && !signal) {
[17:42:05.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.012]                     {
[17:42:05.012]                       inherits <- base::inherits
[17:42:05.012]                       invokeRestart <- base::invokeRestart
[17:42:05.012]                       is.null <- base::is.null
[17:42:05.012]                       muffled <- FALSE
[17:42:05.012]                       if (inherits(cond, "message")) {
[17:42:05.012]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.012]                         if (muffled) 
[17:42:05.012]                           invokeRestart("muffleMessage")
[17:42:05.012]                       }
[17:42:05.012]                       else if (inherits(cond, "warning")) {
[17:42:05.012]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.012]                         if (muffled) 
[17:42:05.012]                           invokeRestart("muffleWarning")
[17:42:05.012]                       }
[17:42:05.012]                       else if (inherits(cond, "condition")) {
[17:42:05.012]                         if (!is.null(pattern)) {
[17:42:05.012]                           computeRestarts <- base::computeRestarts
[17:42:05.012]                           grepl <- base::grepl
[17:42:05.012]                           restarts <- computeRestarts(cond)
[17:42:05.012]                           for (restart in restarts) {
[17:42:05.012]                             name <- restart$name
[17:42:05.012]                             if (is.null(name)) 
[17:42:05.012]                               next
[17:42:05.012]                             if (!grepl(pattern, name)) 
[17:42:05.012]                               next
[17:42:05.012]                             invokeRestart(restart)
[17:42:05.012]                             muffled <- TRUE
[17:42:05.012]                             break
[17:42:05.012]                           }
[17:42:05.012]                         }
[17:42:05.012]                       }
[17:42:05.012]                       invisible(muffled)
[17:42:05.012]                     }
[17:42:05.012]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.012]                   }
[17:42:05.012]                 }
[17:42:05.012]                 else {
[17:42:05.012]                   if (TRUE) {
[17:42:05.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.012]                     {
[17:42:05.012]                       inherits <- base::inherits
[17:42:05.012]                       invokeRestart <- base::invokeRestart
[17:42:05.012]                       is.null <- base::is.null
[17:42:05.012]                       muffled <- FALSE
[17:42:05.012]                       if (inherits(cond, "message")) {
[17:42:05.012]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.012]                         if (muffled) 
[17:42:05.012]                           invokeRestart("muffleMessage")
[17:42:05.012]                       }
[17:42:05.012]                       else if (inherits(cond, "warning")) {
[17:42:05.012]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.012]                         if (muffled) 
[17:42:05.012]                           invokeRestart("muffleWarning")
[17:42:05.012]                       }
[17:42:05.012]                       else if (inherits(cond, "condition")) {
[17:42:05.012]                         if (!is.null(pattern)) {
[17:42:05.012]                           computeRestarts <- base::computeRestarts
[17:42:05.012]                           grepl <- base::grepl
[17:42:05.012]                           restarts <- computeRestarts(cond)
[17:42:05.012]                           for (restart in restarts) {
[17:42:05.012]                             name <- restart$name
[17:42:05.012]                             if (is.null(name)) 
[17:42:05.012]                               next
[17:42:05.012]                             if (!grepl(pattern, name)) 
[17:42:05.012]                               next
[17:42:05.012]                             invokeRestart(restart)
[17:42:05.012]                             muffled <- TRUE
[17:42:05.012]                             break
[17:42:05.012]                           }
[17:42:05.012]                         }
[17:42:05.012]                       }
[17:42:05.012]                       invisible(muffled)
[17:42:05.012]                     }
[17:42:05.012]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.012]                   }
[17:42:05.012]                 }
[17:42:05.012]             }
[17:42:05.012]         }))
[17:42:05.012]     }, error = function(ex) {
[17:42:05.012]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.012]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.012]                 ...future.rng), started = ...future.startTime, 
[17:42:05.012]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.012]             version = "1.8"), class = "FutureResult")
[17:42:05.012]     }, finally = {
[17:42:05.012]         if (!identical(...future.workdir, getwd())) 
[17:42:05.012]             setwd(...future.workdir)
[17:42:05.012]         {
[17:42:05.012]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.012]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.012]             }
[17:42:05.012]             base::options(...future.oldOptions)
[17:42:05.012]             if (.Platform$OS.type == "windows") {
[17:42:05.012]                 old_names <- names(...future.oldEnvVars)
[17:42:05.012]                 envs <- base::Sys.getenv()
[17:42:05.012]                 names <- names(envs)
[17:42:05.012]                 common <- intersect(names, old_names)
[17:42:05.012]                 added <- setdiff(names, old_names)
[17:42:05.012]                 removed <- setdiff(old_names, names)
[17:42:05.012]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.012]                   envs[common]]
[17:42:05.012]                 NAMES <- toupper(changed)
[17:42:05.012]                 args <- list()
[17:42:05.012]                 for (kk in seq_along(NAMES)) {
[17:42:05.012]                   name <- changed[[kk]]
[17:42:05.012]                   NAME <- NAMES[[kk]]
[17:42:05.012]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.012]                     next
[17:42:05.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.012]                 }
[17:42:05.012]                 NAMES <- toupper(added)
[17:42:05.012]                 for (kk in seq_along(NAMES)) {
[17:42:05.012]                   name <- added[[kk]]
[17:42:05.012]                   NAME <- NAMES[[kk]]
[17:42:05.012]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.012]                     next
[17:42:05.012]                   args[[name]] <- ""
[17:42:05.012]                 }
[17:42:05.012]                 NAMES <- toupper(removed)
[17:42:05.012]                 for (kk in seq_along(NAMES)) {
[17:42:05.012]                   name <- removed[[kk]]
[17:42:05.012]                   NAME <- NAMES[[kk]]
[17:42:05.012]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.012]                     next
[17:42:05.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.012]                 }
[17:42:05.012]                 if (length(args) > 0) 
[17:42:05.012]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.012]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.012]             }
[17:42:05.012]             else {
[17:42:05.012]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.012]             }
[17:42:05.012]             {
[17:42:05.012]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.012]                   0L) {
[17:42:05.012]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.012]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.012]                   base::options(opts)
[17:42:05.012]                 }
[17:42:05.012]                 {
[17:42:05.012]                   {
[17:42:05.012]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.012]                     NULL
[17:42:05.012]                   }
[17:42:05.012]                   options(future.plan = NULL)
[17:42:05.012]                   if (is.na(NA_character_)) 
[17:42:05.012]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.012]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.012]                   future::plan(list(function (...) 
[17:42:05.012]                   {
[17:42:05.012]                     Future(1)
[17:42:05.012]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.012]                 }
[17:42:05.012]             }
[17:42:05.012]         }
[17:42:05.012]     })
[17:42:05.012]     if (TRUE) {
[17:42:05.012]         base::sink(type = "output", split = FALSE)
[17:42:05.012]         if (TRUE) {
[17:42:05.012]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.012]         }
[17:42:05.012]         else {
[17:42:05.012]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.012]         }
[17:42:05.012]         base::close(...future.stdout)
[17:42:05.012]         ...future.stdout <- NULL
[17:42:05.012]     }
[17:42:05.012]     ...future.result$conditions <- ...future.conditions
[17:42:05.012]     ...future.result$finished <- base::Sys.time()
[17:42:05.012]     ...future.result
[17:42:05.012] }
[17:42:05.015] requestCore(): workers = 2
[17:42:05.018] MulticoreFuture started
[17:42:05.019] plan(): Setting new future strategy stack:
[17:42:05.019] List of future strategies:
[17:42:05.019] 1. sequential:
[17:42:05.019]    - args: function (..., envir = parent.frame())
[17:42:05.019]    - tweaked: FALSE
[17:42:05.019]    - call: NULL
[17:42:05.020] plan(): nbrOfWorkers() = 1
[17:42:05.022] plan(): Setting new future strategy stack:
[17:42:05.022] List of future strategies:
[17:42:05.022] 1. future:
[17:42:05.022]    - args: function (...)
[17:42:05.022]    - tweaked: FALSE
[17:42:05.022]    - call: plan(foo)
[17:42:05.022] plan(): nbrOfWorkers() = Inf
[1] 42
[17:42:05.025] getGlobalsAndPackages() ...
[17:42:05.025] 
[17:42:05.025] - globals: [0] <none>
[17:42:05.025] getGlobalsAndPackages() ... DONE
[17:42:05.026] Packages needed by the future expression (n = 0): <none>
[17:42:05.026] Packages needed by future strategies (n = 0): <none>
[17:42:05.027] {
[17:42:05.027]     {
[17:42:05.027]         {
[17:42:05.027]             ...future.startTime <- base::Sys.time()
[17:42:05.027]             {
[17:42:05.027]                 {
[17:42:05.027]                   {
[17:42:05.027]                     {
[17:42:05.027]                       base::local({
[17:42:05.027]                         has_future <- base::requireNamespace("future", 
[17:42:05.027]                           quietly = TRUE)
[17:42:05.027]                         if (has_future) {
[17:42:05.027]                           ns <- base::getNamespace("future")
[17:42:05.027]                           version <- ns[[".package"]][["version"]]
[17:42:05.027]                           if (is.null(version)) 
[17:42:05.027]                             version <- utils::packageVersion("future")
[17:42:05.027]                         }
[17:42:05.027]                         else {
[17:42:05.027]                           version <- NULL
[17:42:05.027]                         }
[17:42:05.027]                         if (!has_future || version < "1.8.0") {
[17:42:05.027]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:05.027]                             "", base::R.version$version.string), 
[17:42:05.027]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:05.027]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:05.027]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:05.027]                               "release", "version")], collapse = " "), 
[17:42:05.027]                             hostname = base::Sys.info()[["nodename"]])
[17:42:05.027]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:05.027]                             info)
[17:42:05.027]                           info <- base::paste(info, collapse = "; ")
[17:42:05.027]                           if (!has_future) {
[17:42:05.027]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:05.027]                               info)
[17:42:05.027]                           }
[17:42:05.027]                           else {
[17:42:05.027]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:05.027]                               info, version)
[17:42:05.027]                           }
[17:42:05.027]                           base::stop(msg)
[17:42:05.027]                         }
[17:42:05.027]                       })
[17:42:05.027]                     }
[17:42:05.027]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:05.027]                     base::options(mc.cores = 1L)
[17:42:05.027]                   }
[17:42:05.027]                   options(future.plan = NULL)
[17:42:05.027]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.027]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:05.027]                 }
[17:42:05.027]                 ...future.workdir <- getwd()
[17:42:05.027]             }
[17:42:05.027]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:05.027]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:05.027]         }
[17:42:05.027]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:05.027]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:05.027]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:05.027]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:05.027]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:05.027]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:05.027]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:05.027]             base::names(...future.oldOptions))
[17:42:05.027]     }
[17:42:05.027]     if (FALSE) {
[17:42:05.027]     }
[17:42:05.027]     else {
[17:42:05.027]         if (TRUE) {
[17:42:05.027]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:05.027]                 open = "w")
[17:42:05.027]         }
[17:42:05.027]         else {
[17:42:05.027]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:05.027]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:05.027]         }
[17:42:05.027]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:05.027]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:05.027]             base::sink(type = "output", split = FALSE)
[17:42:05.027]             base::close(...future.stdout)
[17:42:05.027]         }, add = TRUE)
[17:42:05.027]     }
[17:42:05.027]     ...future.frame <- base::sys.nframe()
[17:42:05.027]     ...future.conditions <- base::list()
[17:42:05.027]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:05.027]     if (FALSE) {
[17:42:05.027]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:05.027]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:05.027]     }
[17:42:05.027]     ...future.result <- base::tryCatch({
[17:42:05.027]         base::withCallingHandlers({
[17:42:05.027]             ...future.value <- base::withVisible(base::local({
[17:42:05.027]                 withCallingHandlers({
[17:42:05.027]                   {
[17:42:05.027]                     42L
[17:42:05.027]                   }
[17:42:05.027]                 }, immediateCondition = function(cond) {
[17:42:05.027]                   save_rds <- function (object, pathname, ...) 
[17:42:05.027]                   {
[17:42:05.027]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:42:05.027]                     if (file_test("-f", pathname_tmp)) {
[17:42:05.027]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.027]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:42:05.027]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.027]                         fi_tmp[["mtime"]])
[17:42:05.027]                     }
[17:42:05.027]                     tryCatch({
[17:42:05.027]                       saveRDS(object, file = pathname_tmp, ...)
[17:42:05.027]                     }, error = function(ex) {
[17:42:05.027]                       msg <- conditionMessage(ex)
[17:42:05.027]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.027]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:42:05.027]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.027]                         fi_tmp[["mtime"]], msg)
[17:42:05.027]                       ex$message <- msg
[17:42:05.027]                       stop(ex)
[17:42:05.027]                     })
[17:42:05.027]                     stopifnot(file_test("-f", pathname_tmp))
[17:42:05.027]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:42:05.027]                     if (!res || file_test("-f", pathname_tmp)) {
[17:42:05.027]                       fi_tmp <- file.info(pathname_tmp)
[17:42:05.027]                       fi <- file.info(pathname)
[17:42:05.027]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:42:05.027]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:42:05.027]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:42:05.027]                         fi[["size"]], fi[["mtime"]])
[17:42:05.027]                       stop(msg)
[17:42:05.027]                     }
[17:42:05.027]                     invisible(pathname)
[17:42:05.027]                   }
[17:42:05.027]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:42:05.027]                     rootPath = tempdir()) 
[17:42:05.027]                   {
[17:42:05.027]                     obj <- list(time = Sys.time(), condition = cond)
[17:42:05.027]                     file <- tempfile(pattern = class(cond)[1], 
[17:42:05.027]                       tmpdir = path, fileext = ".rds")
[17:42:05.027]                     save_rds(obj, file)
[17:42:05.027]                   }
[17:42:05.027]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8wqjE3/.future/immediateConditions")
[17:42:05.027]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.027]                   {
[17:42:05.027]                     inherits <- base::inherits
[17:42:05.027]                     invokeRestart <- base::invokeRestart
[17:42:05.027]                     is.null <- base::is.null
[17:42:05.027]                     muffled <- FALSE
[17:42:05.027]                     if (inherits(cond, "message")) {
[17:42:05.027]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:05.027]                       if (muffled) 
[17:42:05.027]                         invokeRestart("muffleMessage")
[17:42:05.027]                     }
[17:42:05.027]                     else if (inherits(cond, "warning")) {
[17:42:05.027]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:05.027]                       if (muffled) 
[17:42:05.027]                         invokeRestart("muffleWarning")
[17:42:05.027]                     }
[17:42:05.027]                     else if (inherits(cond, "condition")) {
[17:42:05.027]                       if (!is.null(pattern)) {
[17:42:05.027]                         computeRestarts <- base::computeRestarts
[17:42:05.027]                         grepl <- base::grepl
[17:42:05.027]                         restarts <- computeRestarts(cond)
[17:42:05.027]                         for (restart in restarts) {
[17:42:05.027]                           name <- restart$name
[17:42:05.027]                           if (is.null(name)) 
[17:42:05.027]                             next
[17:42:05.027]                           if (!grepl(pattern, name)) 
[17:42:05.027]                             next
[17:42:05.027]                           invokeRestart(restart)
[17:42:05.027]                           muffled <- TRUE
[17:42:05.027]                           break
[17:42:05.027]                         }
[17:42:05.027]                       }
[17:42:05.027]                     }
[17:42:05.027]                     invisible(muffled)
[17:42:05.027]                   }
[17:42:05.027]                   muffleCondition(cond)
[17:42:05.027]                 })
[17:42:05.027]             }))
[17:42:05.027]             future::FutureResult(value = ...future.value$value, 
[17:42:05.027]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.027]                   ...future.rng), globalenv = if (FALSE) 
[17:42:05.027]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:05.027]                     ...future.globalenv.names))
[17:42:05.027]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:05.027]         }, condition = base::local({
[17:42:05.027]             c <- base::c
[17:42:05.027]             inherits <- base::inherits
[17:42:05.027]             invokeRestart <- base::invokeRestart
[17:42:05.027]             length <- base::length
[17:42:05.027]             list <- base::list
[17:42:05.027]             seq.int <- base::seq.int
[17:42:05.027]             signalCondition <- base::signalCondition
[17:42:05.027]             sys.calls <- base::sys.calls
[17:42:05.027]             `[[` <- base::`[[`
[17:42:05.027]             `+` <- base::`+`
[17:42:05.027]             `<<-` <- base::`<<-`
[17:42:05.027]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:05.027]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:05.027]                   3L)]
[17:42:05.027]             }
[17:42:05.027]             function(cond) {
[17:42:05.027]                 is_error <- inherits(cond, "error")
[17:42:05.027]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:05.027]                   NULL)
[17:42:05.027]                 if (is_error) {
[17:42:05.027]                   sessionInformation <- function() {
[17:42:05.027]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:05.027]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:05.027]                       search = base::search(), system = base::Sys.info())
[17:42:05.027]                   }
[17:42:05.027]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.027]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:05.027]                     cond$call), session = sessionInformation(), 
[17:42:05.027]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:05.027]                   signalCondition(cond)
[17:42:05.027]                 }
[17:42:05.027]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:05.027]                 "immediateCondition"))) {
[17:42:05.027]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:05.027]                   ...future.conditions[[length(...future.conditions) + 
[17:42:05.027]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:05.027]                   if (TRUE && !signal) {
[17:42:05.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.027]                     {
[17:42:05.027]                       inherits <- base::inherits
[17:42:05.027]                       invokeRestart <- base::invokeRestart
[17:42:05.027]                       is.null <- base::is.null
[17:42:05.027]                       muffled <- FALSE
[17:42:05.027]                       if (inherits(cond, "message")) {
[17:42:05.027]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.027]                         if (muffled) 
[17:42:05.027]                           invokeRestart("muffleMessage")
[17:42:05.027]                       }
[17:42:05.027]                       else if (inherits(cond, "warning")) {
[17:42:05.027]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.027]                         if (muffled) 
[17:42:05.027]                           invokeRestart("muffleWarning")
[17:42:05.027]                       }
[17:42:05.027]                       else if (inherits(cond, "condition")) {
[17:42:05.027]                         if (!is.null(pattern)) {
[17:42:05.027]                           computeRestarts <- base::computeRestarts
[17:42:05.027]                           grepl <- base::grepl
[17:42:05.027]                           restarts <- computeRestarts(cond)
[17:42:05.027]                           for (restart in restarts) {
[17:42:05.027]                             name <- restart$name
[17:42:05.027]                             if (is.null(name)) 
[17:42:05.027]                               next
[17:42:05.027]                             if (!grepl(pattern, name)) 
[17:42:05.027]                               next
[17:42:05.027]                             invokeRestart(restart)
[17:42:05.027]                             muffled <- TRUE
[17:42:05.027]                             break
[17:42:05.027]                           }
[17:42:05.027]                         }
[17:42:05.027]                       }
[17:42:05.027]                       invisible(muffled)
[17:42:05.027]                     }
[17:42:05.027]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.027]                   }
[17:42:05.027]                 }
[17:42:05.027]                 else {
[17:42:05.027]                   if (TRUE) {
[17:42:05.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:05.027]                     {
[17:42:05.027]                       inherits <- base::inherits
[17:42:05.027]                       invokeRestart <- base::invokeRestart
[17:42:05.027]                       is.null <- base::is.null
[17:42:05.027]                       muffled <- FALSE
[17:42:05.027]                       if (inherits(cond, "message")) {
[17:42:05.027]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:05.027]                         if (muffled) 
[17:42:05.027]                           invokeRestart("muffleMessage")
[17:42:05.027]                       }
[17:42:05.027]                       else if (inherits(cond, "warning")) {
[17:42:05.027]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:05.027]                         if (muffled) 
[17:42:05.027]                           invokeRestart("muffleWarning")
[17:42:05.027]                       }
[17:42:05.027]                       else if (inherits(cond, "condition")) {
[17:42:05.027]                         if (!is.null(pattern)) {
[17:42:05.027]                           computeRestarts <- base::computeRestarts
[17:42:05.027]                           grepl <- base::grepl
[17:42:05.027]                           restarts <- computeRestarts(cond)
[17:42:05.027]                           for (restart in restarts) {
[17:42:05.027]                             name <- restart$name
[17:42:05.027]                             if (is.null(name)) 
[17:42:05.027]                               next
[17:42:05.027]                             if (!grepl(pattern, name)) 
[17:42:05.027]                               next
[17:42:05.027]                             invokeRestart(restart)
[17:42:05.027]                             muffled <- TRUE
[17:42:05.027]                             break
[17:42:05.027]                           }
[17:42:05.027]                         }
[17:42:05.027]                       }
[17:42:05.027]                       invisible(muffled)
[17:42:05.027]                     }
[17:42:05.027]                     muffleCondition(cond, pattern = "^muffle")
[17:42:05.027]                   }
[17:42:05.027]                 }
[17:42:05.027]             }
[17:42:05.027]         }))
[17:42:05.027]     }, error = function(ex) {
[17:42:05.027]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:05.027]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:05.027]                 ...future.rng), started = ...future.startTime, 
[17:42:05.027]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:05.027]             version = "1.8"), class = "FutureResult")
[17:42:05.027]     }, finally = {
[17:42:05.027]         if (!identical(...future.workdir, getwd())) 
[17:42:05.027]             setwd(...future.workdir)
[17:42:05.027]         {
[17:42:05.027]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:05.027]                 ...future.oldOptions$nwarnings <- NULL
[17:42:05.027]             }
[17:42:05.027]             base::options(...future.oldOptions)
[17:42:05.027]             if (.Platform$OS.type == "windows") {
[17:42:05.027]                 old_names <- names(...future.oldEnvVars)
[17:42:05.027]                 envs <- base::Sys.getenv()
[17:42:05.027]                 names <- names(envs)
[17:42:05.027]                 common <- intersect(names, old_names)
[17:42:05.027]                 added <- setdiff(names, old_names)
[17:42:05.027]                 removed <- setdiff(old_names, names)
[17:42:05.027]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:05.027]                   envs[common]]
[17:42:05.027]                 NAMES <- toupper(changed)
[17:42:05.027]                 args <- list()
[17:42:05.027]                 for (kk in seq_along(NAMES)) {
[17:42:05.027]                   name <- changed[[kk]]
[17:42:05.027]                   NAME <- NAMES[[kk]]
[17:42:05.027]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.027]                     next
[17:42:05.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.027]                 }
[17:42:05.027]                 NAMES <- toupper(added)
[17:42:05.027]                 for (kk in seq_along(NAMES)) {
[17:42:05.027]                   name <- added[[kk]]
[17:42:05.027]                   NAME <- NAMES[[kk]]
[17:42:05.027]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.027]                     next
[17:42:05.027]                   args[[name]] <- ""
[17:42:05.027]                 }
[17:42:05.027]                 NAMES <- toupper(removed)
[17:42:05.027]                 for (kk in seq_along(NAMES)) {
[17:42:05.027]                   name <- removed[[kk]]
[17:42:05.027]                   NAME <- NAMES[[kk]]
[17:42:05.027]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:05.027]                     next
[17:42:05.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:05.027]                 }
[17:42:05.027]                 if (length(args) > 0) 
[17:42:05.027]                   base::do.call(base::Sys.setenv, args = args)
[17:42:05.027]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:05.027]             }
[17:42:05.027]             else {
[17:42:05.027]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:05.027]             }
[17:42:05.027]             {
[17:42:05.027]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:05.027]                   0L) {
[17:42:05.027]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:05.027]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:05.027]                   base::options(opts)
[17:42:05.027]                 }
[17:42:05.027]                 {
[17:42:05.027]                   {
[17:42:05.027]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:05.027]                     NULL
[17:42:05.027]                   }
[17:42:05.027]                   options(future.plan = NULL)
[17:42:05.027]                   if (is.na(NA_character_)) 
[17:42:05.027]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:05.027]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:05.027]                   future::plan(list(function (...) 
[17:42:05.027]                   {
[17:42:05.027]                     Future(1)
[17:42:05.027]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:05.027]                 }
[17:42:05.027]             }
[17:42:05.027]         }
[17:42:05.027]     })
[17:42:05.027]     if (TRUE) {
[17:42:05.027]         base::sink(type = "output", split = FALSE)
[17:42:05.027]         if (TRUE) {
[17:42:05.027]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:05.027]         }
[17:42:05.027]         else {
[17:42:05.027]             ...future.result["stdout"] <- base::list(NULL)
[17:42:05.027]         }
[17:42:05.027]         base::close(...future.stdout)
[17:42:05.027]         ...future.stdout <- NULL
[17:42:05.027]     }
[17:42:05.027]     ...future.result$conditions <- ...future.conditions
[17:42:05.027]     ...future.result$finished <- base::Sys.time()
[17:42:05.027]     ...future.result
[17:42:05.027] }
[17:42:05.029] requestCore(): workers = 2
[17:42:05.031] MulticoreFuture started
[17:42:05.032] plan(): Setting new future strategy stack:
[17:42:05.033] List of future strategies:
[17:42:05.033] 1. sequential:
[17:42:05.033]    - args: function (..., envir = parent.frame())
[17:42:05.033]    - tweaked: FALSE
[17:42:05.033]    - call: NULL
[17:42:05.033] plan(): nbrOfWorkers() = 1
[17:42:05.035] plan(): Setting new future strategy stack:
[17:42:05.035] List of future strategies:
[17:42:05.035] 1. future:
[17:42:05.035]    - args: function (...)
[17:42:05.035]    - tweaked: FALSE
[17:42:05.035]    - call: plan(foo)
[17:42:05.036] plan(): nbrOfWorkers() = Inf
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[17:42:05.038] plan(): Setting new future strategy stack:
[17:42:05.038] List of future strategies:
[17:42:05.038] 1. FutureStrategy:
[17:42:05.038]    - args: function (..., envir = parent.frame())
[17:42:05.038]    - tweaked: FALSE
[17:42:05.038]    - call: future::plan(oplan)
[17:42:05.039] plan(): nbrOfWorkers() = 1
> 
