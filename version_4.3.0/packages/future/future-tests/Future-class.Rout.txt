
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:10.175] plan(): Setting new future strategy stack:
[13:20:10.175] List of future strategies:
[13:20:10.175] 1. sequential:
[13:20:10.175]    - args: function (..., envir = parent.frame())
[13:20:10.175]    - tweaked: FALSE
[13:20:10.175]    - call: future::plan("sequential")
[13:20:10.188] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[13:20:10.200] getGlobalsAndPackages() ...
[13:20:10.200] 
[13:20:10.200] - globals: [0] <none>
[13:20:10.200] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a7f47358-01a6-8bf9-1a3c-c3c7ce484823
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[13:20:10.202] run() for ‘Future’ ...
[13:20:10.202] - state: ‘created’
[13:20:10.202] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[13:20:10.205] plan(): Setting new future strategy stack:
[13:20:10.205] List of future strategies:
[13:20:10.205] 1. future:
[13:20:10.205]    - args: function (...)
[13:20:10.205]    - tweaked: FALSE
[13:20:10.205]    - call: plan(foo)
[13:20:10.216] plan(): nbrOfWorkers() = Inf
> f <- Future()
[13:20:10.217] getGlobalsAndPackages() ...
[13:20:10.217] 
[13:20:10.217] - globals: [0] <none>
[13:20:10.217] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[13:20:10.217] Packages needed by the future expression (n = 0): <none>
[13:20:10.218] Packages needed by future strategies (n = 0): <none>
[13:20:10.220] {
[13:20:10.220]     {
[13:20:10.220]         {
[13:20:10.220]             ...future.startTime <- base::Sys.time()
[13:20:10.220]             {
[13:20:10.220]                 {
[13:20:10.220]                   {
[13:20:10.220]                     base::local({
[13:20:10.220]                       has_future <- base::requireNamespace("future", 
[13:20:10.220]                         quietly = TRUE)
[13:20:10.220]                       if (has_future) {
[13:20:10.220]                         ns <- base::getNamespace("future")
[13:20:10.220]                         version <- ns[[".package"]][["version"]]
[13:20:10.220]                         if (is.null(version)) 
[13:20:10.220]                           version <- utils::packageVersion("future")
[13:20:10.220]                       }
[13:20:10.220]                       else {
[13:20:10.220]                         version <- NULL
[13:20:10.220]                       }
[13:20:10.220]                       if (!has_future || version < "1.8.0") {
[13:20:10.220]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.220]                           "", base::R.version$version.string), 
[13:20:10.220]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:10.220]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.220]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.220]                             "release", "version")], collapse = " "), 
[13:20:10.220]                           hostname = base::Sys.info()[["nodename"]])
[13:20:10.220]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.220]                           info)
[13:20:10.220]                         info <- base::paste(info, collapse = "; ")
[13:20:10.220]                         if (!has_future) {
[13:20:10.220]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.220]                             info)
[13:20:10.220]                         }
[13:20:10.220]                         else {
[13:20:10.220]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.220]                             info, version)
[13:20:10.220]                         }
[13:20:10.220]                         base::stop(msg)
[13:20:10.220]                       }
[13:20:10.220]                     })
[13:20:10.220]                   }
[13:20:10.220]                   options(future.plan = NULL)
[13:20:10.220]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.220]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.220]                 }
[13:20:10.220]                 ...future.workdir <- getwd()
[13:20:10.220]             }
[13:20:10.220]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.220]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.220]         }
[13:20:10.220]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.220]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.220]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.220]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.220]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.220]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.220]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.220]             base::names(...future.oldOptions))
[13:20:10.220]     }
[13:20:10.220]     if (FALSE) {
[13:20:10.220]     }
[13:20:10.220]     else {
[13:20:10.220]         if (TRUE) {
[13:20:10.220]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.220]                 open = "w")
[13:20:10.220]         }
[13:20:10.220]         else {
[13:20:10.220]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.220]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.220]         }
[13:20:10.220]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.220]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.220]             base::sink(type = "output", split = FALSE)
[13:20:10.220]             base::close(...future.stdout)
[13:20:10.220]         }, add = TRUE)
[13:20:10.220]     }
[13:20:10.220]     ...future.frame <- base::sys.nframe()
[13:20:10.220]     ...future.conditions <- base::list()
[13:20:10.220]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.220]     if (FALSE) {
[13:20:10.220]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.220]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.220]     }
[13:20:10.220]     ...future.result <- base::tryCatch({
[13:20:10.220]         base::withCallingHandlers({
[13:20:10.220]             ...future.value <- base::withVisible(base::local(NULL))
[13:20:10.220]             future::FutureResult(value = ...future.value$value, 
[13:20:10.220]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.220]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.220]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.220]                     ...future.globalenv.names))
[13:20:10.220]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.220]         }, condition = base::local({
[13:20:10.220]             c <- base::c
[13:20:10.220]             inherits <- base::inherits
[13:20:10.220]             invokeRestart <- base::invokeRestart
[13:20:10.220]             length <- base::length
[13:20:10.220]             list <- base::list
[13:20:10.220]             seq.int <- base::seq.int
[13:20:10.220]             signalCondition <- base::signalCondition
[13:20:10.220]             sys.calls <- base::sys.calls
[13:20:10.220]             `[[` <- base::`[[`
[13:20:10.220]             `+` <- base::`+`
[13:20:10.220]             `<<-` <- base::`<<-`
[13:20:10.220]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.220]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.220]                   3L)]
[13:20:10.220]             }
[13:20:10.220]             function(cond) {
[13:20:10.220]                 is_error <- inherits(cond, "error")
[13:20:10.220]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.220]                   NULL)
[13:20:10.220]                 if (is_error) {
[13:20:10.220]                   sessionInformation <- function() {
[13:20:10.220]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.220]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.220]                       search = base::search(), system = base::Sys.info())
[13:20:10.220]                   }
[13:20:10.220]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.220]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.220]                     cond$call), session = sessionInformation(), 
[13:20:10.220]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.220]                   signalCondition(cond)
[13:20:10.220]                 }
[13:20:10.220]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[13:20:10.220]                   signal <- FALSE && inherits(cond, character(0))
[13:20:10.220]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.220]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.220]                   if (FALSE && !signal) {
[13:20:10.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.220]                     {
[13:20:10.220]                       inherits <- base::inherits
[13:20:10.220]                       invokeRestart <- base::invokeRestart
[13:20:10.220]                       is.null <- base::is.null
[13:20:10.220]                       muffled <- FALSE
[13:20:10.220]                       if (inherits(cond, "message")) {
[13:20:10.220]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.220]                         if (muffled) 
[13:20:10.220]                           invokeRestart("muffleMessage")
[13:20:10.220]                       }
[13:20:10.220]                       else if (inherits(cond, "warning")) {
[13:20:10.220]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.220]                         if (muffled) 
[13:20:10.220]                           invokeRestart("muffleWarning")
[13:20:10.220]                       }
[13:20:10.220]                       else if (inherits(cond, "condition")) {
[13:20:10.220]                         if (!is.null(pattern)) {
[13:20:10.220]                           computeRestarts <- base::computeRestarts
[13:20:10.220]                           grepl <- base::grepl
[13:20:10.220]                           restarts <- computeRestarts(cond)
[13:20:10.220]                           for (restart in restarts) {
[13:20:10.220]                             name <- restart$name
[13:20:10.220]                             if (is.null(name)) 
[13:20:10.220]                               next
[13:20:10.220]                             if (!grepl(pattern, name)) 
[13:20:10.220]                               next
[13:20:10.220]                             invokeRestart(restart)
[13:20:10.220]                             muffled <- TRUE
[13:20:10.220]                             break
[13:20:10.220]                           }
[13:20:10.220]                         }
[13:20:10.220]                       }
[13:20:10.220]                       invisible(muffled)
[13:20:10.220]                     }
[13:20:10.220]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.220]                   }
[13:20:10.220]                 }
[13:20:10.220]                 else {
[13:20:10.220]                   if (TRUE) {
[13:20:10.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.220]                     {
[13:20:10.220]                       inherits <- base::inherits
[13:20:10.220]                       invokeRestart <- base::invokeRestart
[13:20:10.220]                       is.null <- base::is.null
[13:20:10.220]                       muffled <- FALSE
[13:20:10.220]                       if (inherits(cond, "message")) {
[13:20:10.220]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.220]                         if (muffled) 
[13:20:10.220]                           invokeRestart("muffleMessage")
[13:20:10.220]                       }
[13:20:10.220]                       else if (inherits(cond, "warning")) {
[13:20:10.220]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.220]                         if (muffled) 
[13:20:10.220]                           invokeRestart("muffleWarning")
[13:20:10.220]                       }
[13:20:10.220]                       else if (inherits(cond, "condition")) {
[13:20:10.220]                         if (!is.null(pattern)) {
[13:20:10.220]                           computeRestarts <- base::computeRestarts
[13:20:10.220]                           grepl <- base::grepl
[13:20:10.220]                           restarts <- computeRestarts(cond)
[13:20:10.220]                           for (restart in restarts) {
[13:20:10.220]                             name <- restart$name
[13:20:10.220]                             if (is.null(name)) 
[13:20:10.220]                               next
[13:20:10.220]                             if (!grepl(pattern, name)) 
[13:20:10.220]                               next
[13:20:10.220]                             invokeRestart(restart)
[13:20:10.220]                             muffled <- TRUE
[13:20:10.220]                             break
[13:20:10.220]                           }
[13:20:10.220]                         }
[13:20:10.220]                       }
[13:20:10.220]                       invisible(muffled)
[13:20:10.220]                     }
[13:20:10.220]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.220]                   }
[13:20:10.220]                 }
[13:20:10.220]             }
[13:20:10.220]         }))
[13:20:10.220]     }, error = function(ex) {
[13:20:10.220]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.220]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.220]                 ...future.rng), started = ...future.startTime, 
[13:20:10.220]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.220]             version = "1.8"), class = "FutureResult")
[13:20:10.220]     }, finally = {
[13:20:10.220]         if (!identical(...future.workdir, getwd())) 
[13:20:10.220]             setwd(...future.workdir)
[13:20:10.220]         {
[13:20:10.220]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.220]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.220]             }
[13:20:10.220]             base::options(...future.oldOptions)
[13:20:10.220]             if (.Platform$OS.type == "windows") {
[13:20:10.220]                 old_names <- names(...future.oldEnvVars)
[13:20:10.220]                 envs <- base::Sys.getenv()
[13:20:10.220]                 names <- names(envs)
[13:20:10.220]                 common <- intersect(names, old_names)
[13:20:10.220]                 added <- setdiff(names, old_names)
[13:20:10.220]                 removed <- setdiff(old_names, names)
[13:20:10.220]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.220]                   envs[common]]
[13:20:10.220]                 NAMES <- toupper(changed)
[13:20:10.220]                 args <- list()
[13:20:10.220]                 for (kk in seq_along(NAMES)) {
[13:20:10.220]                   name <- changed[[kk]]
[13:20:10.220]                   NAME <- NAMES[[kk]]
[13:20:10.220]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.220]                     next
[13:20:10.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.220]                 }
[13:20:10.220]                 NAMES <- toupper(added)
[13:20:10.220]                 for (kk in seq_along(NAMES)) {
[13:20:10.220]                   name <- added[[kk]]
[13:20:10.220]                   NAME <- NAMES[[kk]]
[13:20:10.220]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.220]                     next
[13:20:10.220]                   args[[name]] <- ""
[13:20:10.220]                 }
[13:20:10.220]                 NAMES <- toupper(removed)
[13:20:10.220]                 for (kk in seq_along(NAMES)) {
[13:20:10.220]                   name <- removed[[kk]]
[13:20:10.220]                   NAME <- NAMES[[kk]]
[13:20:10.220]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.220]                     next
[13:20:10.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.220]                 }
[13:20:10.220]                 if (length(args) > 0) 
[13:20:10.220]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.220]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.220]             }
[13:20:10.220]             else {
[13:20:10.220]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.220]             }
[13:20:10.220]             {
[13:20:10.220]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.220]                   0L) {
[13:20:10.220]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.220]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.220]                   base::options(opts)
[13:20:10.220]                 }
[13:20:10.220]                 {
[13:20:10.220]                   NULL
[13:20:10.220]                   options(future.plan = NULL)
[13:20:10.220]                   if (is.na(NA_character_)) 
[13:20:10.220]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.220]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.220]                   future::plan(list(function (...) 
[13:20:10.220]                   {
[13:20:10.220]                     Future(1)
[13:20:10.220]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.220]                 }
[13:20:10.220]             }
[13:20:10.220]         }
[13:20:10.220]     })
[13:20:10.220]     if (TRUE) {
[13:20:10.220]         base::sink(type = "output", split = FALSE)
[13:20:10.220]         if (TRUE) {
[13:20:10.220]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.220]         }
[13:20:10.220]         else {
[13:20:10.220]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.220]         }
[13:20:10.220]         base::close(...future.stdout)
[13:20:10.220]         ...future.stdout <- NULL
[13:20:10.220]     }
[13:20:10.220]     ...future.result$conditions <- ...future.conditions
[13:20:10.220]     ...future.result$finished <- base::Sys.time()
[13:20:10.220]     ...future.result
[13:20:10.220] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(list(function (...) 
                  {
                    Future(1)
                  }), .cleanup = FALSE, .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[13:20:10.231] getGlobalsAndPackages() ...
[13:20:10.231] Searching for globals...
[13:20:10.234] - globals found: [1] ‘{’
[13:20:10.234] Searching for globals ... DONE
[13:20:10.234] Resolving globals: FALSE
[13:20:10.235] 
[13:20:10.235] 
[13:20:10.235] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a7f47358-01a6-8bf9-1a3c-c3c7ce484823
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:10.236] Packages needed by the future expression (n = 0): <none>
[13:20:10.236] Packages needed by future strategies (n = 0): <none>
[13:20:10.236] {
[13:20:10.236]     {
[13:20:10.236]         {
[13:20:10.236]             ...future.startTime <- base::Sys.time()
[13:20:10.236]             {
[13:20:10.236]                 {
[13:20:10.236]                   {
[13:20:10.236]                     base::local({
[13:20:10.236]                       has_future <- base::requireNamespace("future", 
[13:20:10.236]                         quietly = TRUE)
[13:20:10.236]                       if (has_future) {
[13:20:10.236]                         ns <- base::getNamespace("future")
[13:20:10.236]                         version <- ns[[".package"]][["version"]]
[13:20:10.236]                         if (is.null(version)) 
[13:20:10.236]                           version <- utils::packageVersion("future")
[13:20:10.236]                       }
[13:20:10.236]                       else {
[13:20:10.236]                         version <- NULL
[13:20:10.236]                       }
[13:20:10.236]                       if (!has_future || version < "1.8.0") {
[13:20:10.236]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.236]                           "", base::R.version$version.string), 
[13:20:10.236]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:10.236]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.236]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.236]                             "release", "version")], collapse = " "), 
[13:20:10.236]                           hostname = base::Sys.info()[["nodename"]])
[13:20:10.236]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.236]                           info)
[13:20:10.236]                         info <- base::paste(info, collapse = "; ")
[13:20:10.236]                         if (!has_future) {
[13:20:10.236]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.236]                             info)
[13:20:10.236]                         }
[13:20:10.236]                         else {
[13:20:10.236]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.236]                             info, version)
[13:20:10.236]                         }
[13:20:10.236]                         base::stop(msg)
[13:20:10.236]                       }
[13:20:10.236]                     })
[13:20:10.236]                   }
[13:20:10.236]                   options(future.plan = NULL)
[13:20:10.236]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.236]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.236]                 }
[13:20:10.236]                 ...future.workdir <- getwd()
[13:20:10.236]             }
[13:20:10.236]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.236]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.236]         }
[13:20:10.236]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.236]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.236]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.236]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.236]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.236]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.236]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.236]             base::names(...future.oldOptions))
[13:20:10.236]     }
[13:20:10.236]     if (FALSE) {
[13:20:10.236]     }
[13:20:10.236]     else {
[13:20:10.236]         if (TRUE) {
[13:20:10.236]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.236]                 open = "w")
[13:20:10.236]         }
[13:20:10.236]         else {
[13:20:10.236]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.236]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.236]         }
[13:20:10.236]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.236]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.236]             base::sink(type = "output", split = FALSE)
[13:20:10.236]             base::close(...future.stdout)
[13:20:10.236]         }, add = TRUE)
[13:20:10.236]     }
[13:20:10.236]     ...future.frame <- base::sys.nframe()
[13:20:10.236]     ...future.conditions <- base::list()
[13:20:10.236]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.236]     if (FALSE) {
[13:20:10.236]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.236]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.236]     }
[13:20:10.236]     ...future.result <- base::tryCatch({
[13:20:10.236]         base::withCallingHandlers({
[13:20:10.236]             ...future.value <- base::withVisible(base::local({
[13:20:10.236]                 42L
[13:20:10.236]             }))
[13:20:10.236]             future::FutureResult(value = ...future.value$value, 
[13:20:10.236]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.236]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.236]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.236]                     ...future.globalenv.names))
[13:20:10.236]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.236]         }, condition = base::local({
[13:20:10.236]             c <- base::c
[13:20:10.236]             inherits <- base::inherits
[13:20:10.236]             invokeRestart <- base::invokeRestart
[13:20:10.236]             length <- base::length
[13:20:10.236]             list <- base::list
[13:20:10.236]             seq.int <- base::seq.int
[13:20:10.236]             signalCondition <- base::signalCondition
[13:20:10.236]             sys.calls <- base::sys.calls
[13:20:10.236]             `[[` <- base::`[[`
[13:20:10.236]             `+` <- base::`+`
[13:20:10.236]             `<<-` <- base::`<<-`
[13:20:10.236]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.236]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.236]                   3L)]
[13:20:10.236]             }
[13:20:10.236]             function(cond) {
[13:20:10.236]                 is_error <- inherits(cond, "error")
[13:20:10.236]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.236]                   NULL)
[13:20:10.236]                 if (is_error) {
[13:20:10.236]                   sessionInformation <- function() {
[13:20:10.236]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.236]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.236]                       search = base::search(), system = base::Sys.info())
[13:20:10.236]                   }
[13:20:10.236]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.236]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.236]                     cond$call), session = sessionInformation(), 
[13:20:10.236]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.236]                   signalCondition(cond)
[13:20:10.236]                 }
[13:20:10.236]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.236]                 "immediateCondition"))) {
[13:20:10.236]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.236]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.236]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.236]                   if (TRUE && !signal) {
[13:20:10.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.236]                     {
[13:20:10.236]                       inherits <- base::inherits
[13:20:10.236]                       invokeRestart <- base::invokeRestart
[13:20:10.236]                       is.null <- base::is.null
[13:20:10.236]                       muffled <- FALSE
[13:20:10.236]                       if (inherits(cond, "message")) {
[13:20:10.236]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.236]                         if (muffled) 
[13:20:10.236]                           invokeRestart("muffleMessage")
[13:20:10.236]                       }
[13:20:10.236]                       else if (inherits(cond, "warning")) {
[13:20:10.236]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.236]                         if (muffled) 
[13:20:10.236]                           invokeRestart("muffleWarning")
[13:20:10.236]                       }
[13:20:10.236]                       else if (inherits(cond, "condition")) {
[13:20:10.236]                         if (!is.null(pattern)) {
[13:20:10.236]                           computeRestarts <- base::computeRestarts
[13:20:10.236]                           grepl <- base::grepl
[13:20:10.236]                           restarts <- computeRestarts(cond)
[13:20:10.236]                           for (restart in restarts) {
[13:20:10.236]                             name <- restart$name
[13:20:10.236]                             if (is.null(name)) 
[13:20:10.236]                               next
[13:20:10.236]                             if (!grepl(pattern, name)) 
[13:20:10.236]                               next
[13:20:10.236]                             invokeRestart(restart)
[13:20:10.236]                             muffled <- TRUE
[13:20:10.236]                             break
[13:20:10.236]                           }
[13:20:10.236]                         }
[13:20:10.236]                       }
[13:20:10.236]                       invisible(muffled)
[13:20:10.236]                     }
[13:20:10.236]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.236]                   }
[13:20:10.236]                 }
[13:20:10.236]                 else {
[13:20:10.236]                   if (TRUE) {
[13:20:10.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.236]                     {
[13:20:10.236]                       inherits <- base::inherits
[13:20:10.236]                       invokeRestart <- base::invokeRestart
[13:20:10.236]                       is.null <- base::is.null
[13:20:10.236]                       muffled <- FALSE
[13:20:10.236]                       if (inherits(cond, "message")) {
[13:20:10.236]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.236]                         if (muffled) 
[13:20:10.236]                           invokeRestart("muffleMessage")
[13:20:10.236]                       }
[13:20:10.236]                       else if (inherits(cond, "warning")) {
[13:20:10.236]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.236]                         if (muffled) 
[13:20:10.236]                           invokeRestart("muffleWarning")
[13:20:10.236]                       }
[13:20:10.236]                       else if (inherits(cond, "condition")) {
[13:20:10.236]                         if (!is.null(pattern)) {
[13:20:10.236]                           computeRestarts <- base::computeRestarts
[13:20:10.236]                           grepl <- base::grepl
[13:20:10.236]                           restarts <- computeRestarts(cond)
[13:20:10.236]                           for (restart in restarts) {
[13:20:10.236]                             name <- restart$name
[13:20:10.236]                             if (is.null(name)) 
[13:20:10.236]                               next
[13:20:10.236]                             if (!grepl(pattern, name)) 
[13:20:10.236]                               next
[13:20:10.236]                             invokeRestart(restart)
[13:20:10.236]                             muffled <- TRUE
[13:20:10.236]                             break
[13:20:10.236]                           }
[13:20:10.236]                         }
[13:20:10.236]                       }
[13:20:10.236]                       invisible(muffled)
[13:20:10.236]                     }
[13:20:10.236]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.236]                   }
[13:20:10.236]                 }
[13:20:10.236]             }
[13:20:10.236]         }))
[13:20:10.236]     }, error = function(ex) {
[13:20:10.236]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.236]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.236]                 ...future.rng), started = ...future.startTime, 
[13:20:10.236]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.236]             version = "1.8"), class = "FutureResult")
[13:20:10.236]     }, finally = {
[13:20:10.236]         if (!identical(...future.workdir, getwd())) 
[13:20:10.236]             setwd(...future.workdir)
[13:20:10.236]         {
[13:20:10.236]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.236]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.236]             }
[13:20:10.236]             base::options(...future.oldOptions)
[13:20:10.236]             if (.Platform$OS.type == "windows") {
[13:20:10.236]                 old_names <- names(...future.oldEnvVars)
[13:20:10.236]                 envs <- base::Sys.getenv()
[13:20:10.236]                 names <- names(envs)
[13:20:10.236]                 common <- intersect(names, old_names)
[13:20:10.236]                 added <- setdiff(names, old_names)
[13:20:10.236]                 removed <- setdiff(old_names, names)
[13:20:10.236]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.236]                   envs[common]]
[13:20:10.236]                 NAMES <- toupper(changed)
[13:20:10.236]                 args <- list()
[13:20:10.236]                 for (kk in seq_along(NAMES)) {
[13:20:10.236]                   name <- changed[[kk]]
[13:20:10.236]                   NAME <- NAMES[[kk]]
[13:20:10.236]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.236]                     next
[13:20:10.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.236]                 }
[13:20:10.236]                 NAMES <- toupper(added)
[13:20:10.236]                 for (kk in seq_along(NAMES)) {
[13:20:10.236]                   name <- added[[kk]]
[13:20:10.236]                   NAME <- NAMES[[kk]]
[13:20:10.236]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.236]                     next
[13:20:10.236]                   args[[name]] <- ""
[13:20:10.236]                 }
[13:20:10.236]                 NAMES <- toupper(removed)
[13:20:10.236]                 for (kk in seq_along(NAMES)) {
[13:20:10.236]                   name <- removed[[kk]]
[13:20:10.236]                   NAME <- NAMES[[kk]]
[13:20:10.236]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.236]                     next
[13:20:10.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.236]                 }
[13:20:10.236]                 if (length(args) > 0) 
[13:20:10.236]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.236]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.236]             }
[13:20:10.236]             else {
[13:20:10.236]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.236]             }
[13:20:10.236]             {
[13:20:10.236]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.236]                   0L) {
[13:20:10.236]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.236]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.236]                   base::options(opts)
[13:20:10.236]                 }
[13:20:10.236]                 {
[13:20:10.236]                   {
[13:20:10.236]                     NULL
[13:20:10.236]                     RNGkind("Mersenne-Twister")
[13:20:10.236]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:10.236]                       inherits = FALSE)
[13:20:10.236]                   }
[13:20:10.236]                   options(future.plan = NULL)
[13:20:10.236]                   if (is.na(NA_character_)) 
[13:20:10.236]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.236]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.236]                   future::plan(list(function (...) 
[13:20:10.236]                   {
[13:20:10.236]                     Future(1)
[13:20:10.236]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.236]                 }
[13:20:10.236]             }
[13:20:10.236]         }
[13:20:10.236]     })
[13:20:10.236]     if (TRUE) {
[13:20:10.236]         base::sink(type = "output", split = FALSE)
[13:20:10.236]         if (TRUE) {
[13:20:10.236]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.236]         }
[13:20:10.236]         else {
[13:20:10.236]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.236]         }
[13:20:10.236]         base::close(...future.stdout)
[13:20:10.236]         ...future.stdout <- NULL
[13:20:10.236]     }
[13:20:10.236]     ...future.result$conditions <- ...future.conditions
[13:20:10.236]     ...future.result$finished <- base::Sys.time()
[13:20:10.236]     ...future.result
[13:20:10.236] }
[13:20:10.238] plan(): Setting new future strategy stack:
[13:20:10.238] List of future strategies:
[13:20:10.238] 1. sequential:
[13:20:10.238]    - args: function (..., envir = parent.frame())
[13:20:10.238]    - tweaked: FALSE
[13:20:10.238]    - call: NULL
[13:20:10.239] plan(): nbrOfWorkers() = 1
[13:20:10.240] plan(): Setting new future strategy stack:
[13:20:10.240] List of future strategies:
[13:20:10.240] 1. future:
[13:20:10.240]    - args: function (...)
[13:20:10.240]    - tweaked: FALSE
[13:20:10.240]    - call: plan(foo)
[13:20:10.240] plan(): nbrOfWorkers() = Inf
[13:20:10.240] SequentialFuture started (and completed)
[1] 42
[13:20:10.241] getGlobalsAndPackages() ...
[13:20:10.241] Searching for globals...
[13:20:10.242] - globals found: [1] ‘{’
[13:20:10.242] Searching for globals ... DONE
[13:20:10.242] Resolving globals: FALSE
[13:20:10.242] 
[13:20:10.242] 
[13:20:10.242] getGlobalsAndPackages() ... DONE
[13:20:10.243] Packages needed by the future expression (n = 0): <none>
[13:20:10.243] Packages needed by future strategies (n = 0): <none>
[13:20:10.243] {
[13:20:10.243]     {
[13:20:10.243]         {
[13:20:10.243]             ...future.startTime <- base::Sys.time()
[13:20:10.243]             {
[13:20:10.243]                 {
[13:20:10.243]                   {
[13:20:10.243]                     base::local({
[13:20:10.243]                       has_future <- base::requireNamespace("future", 
[13:20:10.243]                         quietly = TRUE)
[13:20:10.243]                       if (has_future) {
[13:20:10.243]                         ns <- base::getNamespace("future")
[13:20:10.243]                         version <- ns[[".package"]][["version"]]
[13:20:10.243]                         if (is.null(version)) 
[13:20:10.243]                           version <- utils::packageVersion("future")
[13:20:10.243]                       }
[13:20:10.243]                       else {
[13:20:10.243]                         version <- NULL
[13:20:10.243]                       }
[13:20:10.243]                       if (!has_future || version < "1.8.0") {
[13:20:10.243]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.243]                           "", base::R.version$version.string), 
[13:20:10.243]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:10.243]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.243]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.243]                             "release", "version")], collapse = " "), 
[13:20:10.243]                           hostname = base::Sys.info()[["nodename"]])
[13:20:10.243]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.243]                           info)
[13:20:10.243]                         info <- base::paste(info, collapse = "; ")
[13:20:10.243]                         if (!has_future) {
[13:20:10.243]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.243]                             info)
[13:20:10.243]                         }
[13:20:10.243]                         else {
[13:20:10.243]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.243]                             info, version)
[13:20:10.243]                         }
[13:20:10.243]                         base::stop(msg)
[13:20:10.243]                       }
[13:20:10.243]                     })
[13:20:10.243]                   }
[13:20:10.243]                   options(future.plan = NULL)
[13:20:10.243]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.243]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.243]                 }
[13:20:10.243]                 ...future.workdir <- getwd()
[13:20:10.243]             }
[13:20:10.243]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.243]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.243]         }
[13:20:10.243]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.243]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.243]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.243]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.243]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.243]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.243]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.243]             base::names(...future.oldOptions))
[13:20:10.243]     }
[13:20:10.243]     if (FALSE) {
[13:20:10.243]     }
[13:20:10.243]     else {
[13:20:10.243]         if (TRUE) {
[13:20:10.243]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.243]                 open = "w")
[13:20:10.243]         }
[13:20:10.243]         else {
[13:20:10.243]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.243]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.243]         }
[13:20:10.243]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.243]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.243]             base::sink(type = "output", split = FALSE)
[13:20:10.243]             base::close(...future.stdout)
[13:20:10.243]         }, add = TRUE)
[13:20:10.243]     }
[13:20:10.243]     ...future.frame <- base::sys.nframe()
[13:20:10.243]     ...future.conditions <- base::list()
[13:20:10.243]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.243]     if (FALSE) {
[13:20:10.243]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.243]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.243]     }
[13:20:10.243]     ...future.result <- base::tryCatch({
[13:20:10.243]         base::withCallingHandlers({
[13:20:10.243]             ...future.value <- base::withVisible(base::local({
[13:20:10.243]                 42L
[13:20:10.243]             }))
[13:20:10.243]             future::FutureResult(value = ...future.value$value, 
[13:20:10.243]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.243]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.243]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.243]                     ...future.globalenv.names))
[13:20:10.243]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.243]         }, condition = base::local({
[13:20:10.243]             c <- base::c
[13:20:10.243]             inherits <- base::inherits
[13:20:10.243]             invokeRestart <- base::invokeRestart
[13:20:10.243]             length <- base::length
[13:20:10.243]             list <- base::list
[13:20:10.243]             seq.int <- base::seq.int
[13:20:10.243]             signalCondition <- base::signalCondition
[13:20:10.243]             sys.calls <- base::sys.calls
[13:20:10.243]             `[[` <- base::`[[`
[13:20:10.243]             `+` <- base::`+`
[13:20:10.243]             `<<-` <- base::`<<-`
[13:20:10.243]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.243]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.243]                   3L)]
[13:20:10.243]             }
[13:20:10.243]             function(cond) {
[13:20:10.243]                 is_error <- inherits(cond, "error")
[13:20:10.243]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.243]                   NULL)
[13:20:10.243]                 if (is_error) {
[13:20:10.243]                   sessionInformation <- function() {
[13:20:10.243]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.243]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.243]                       search = base::search(), system = base::Sys.info())
[13:20:10.243]                   }
[13:20:10.243]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.243]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.243]                     cond$call), session = sessionInformation(), 
[13:20:10.243]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.243]                   signalCondition(cond)
[13:20:10.243]                 }
[13:20:10.243]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.243]                 "immediateCondition"))) {
[13:20:10.243]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.243]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.243]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.243]                   if (TRUE && !signal) {
[13:20:10.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.243]                     {
[13:20:10.243]                       inherits <- base::inherits
[13:20:10.243]                       invokeRestart <- base::invokeRestart
[13:20:10.243]                       is.null <- base::is.null
[13:20:10.243]                       muffled <- FALSE
[13:20:10.243]                       if (inherits(cond, "message")) {
[13:20:10.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.243]                         if (muffled) 
[13:20:10.243]                           invokeRestart("muffleMessage")
[13:20:10.243]                       }
[13:20:10.243]                       else if (inherits(cond, "warning")) {
[13:20:10.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.243]                         if (muffled) 
[13:20:10.243]                           invokeRestart("muffleWarning")
[13:20:10.243]                       }
[13:20:10.243]                       else if (inherits(cond, "condition")) {
[13:20:10.243]                         if (!is.null(pattern)) {
[13:20:10.243]                           computeRestarts <- base::computeRestarts
[13:20:10.243]                           grepl <- base::grepl
[13:20:10.243]                           restarts <- computeRestarts(cond)
[13:20:10.243]                           for (restart in restarts) {
[13:20:10.243]                             name <- restart$name
[13:20:10.243]                             if (is.null(name)) 
[13:20:10.243]                               next
[13:20:10.243]                             if (!grepl(pattern, name)) 
[13:20:10.243]                               next
[13:20:10.243]                             invokeRestart(restart)
[13:20:10.243]                             muffled <- TRUE
[13:20:10.243]                             break
[13:20:10.243]                           }
[13:20:10.243]                         }
[13:20:10.243]                       }
[13:20:10.243]                       invisible(muffled)
[13:20:10.243]                     }
[13:20:10.243]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.243]                   }
[13:20:10.243]                 }
[13:20:10.243]                 else {
[13:20:10.243]                   if (TRUE) {
[13:20:10.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.243]                     {
[13:20:10.243]                       inherits <- base::inherits
[13:20:10.243]                       invokeRestart <- base::invokeRestart
[13:20:10.243]                       is.null <- base::is.null
[13:20:10.243]                       muffled <- FALSE
[13:20:10.243]                       if (inherits(cond, "message")) {
[13:20:10.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.243]                         if (muffled) 
[13:20:10.243]                           invokeRestart("muffleMessage")
[13:20:10.243]                       }
[13:20:10.243]                       else if (inherits(cond, "warning")) {
[13:20:10.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.243]                         if (muffled) 
[13:20:10.243]                           invokeRestart("muffleWarning")
[13:20:10.243]                       }
[13:20:10.243]                       else if (inherits(cond, "condition")) {
[13:20:10.243]                         if (!is.null(pattern)) {
[13:20:10.243]                           computeRestarts <- base::computeRestarts
[13:20:10.243]                           grepl <- base::grepl
[13:20:10.243]                           restarts <- computeRestarts(cond)
[13:20:10.243]                           for (restart in restarts) {
[13:20:10.243]                             name <- restart$name
[13:20:10.243]                             if (is.null(name)) 
[13:20:10.243]                               next
[13:20:10.243]                             if (!grepl(pattern, name)) 
[13:20:10.243]                               next
[13:20:10.243]                             invokeRestart(restart)
[13:20:10.243]                             muffled <- TRUE
[13:20:10.243]                             break
[13:20:10.243]                           }
[13:20:10.243]                         }
[13:20:10.243]                       }
[13:20:10.243]                       invisible(muffled)
[13:20:10.243]                     }
[13:20:10.243]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.243]                   }
[13:20:10.243]                 }
[13:20:10.243]             }
[13:20:10.243]         }))
[13:20:10.243]     }, error = function(ex) {
[13:20:10.243]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.243]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.243]                 ...future.rng), started = ...future.startTime, 
[13:20:10.243]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.243]             version = "1.8"), class = "FutureResult")
[13:20:10.243]     }, finally = {
[13:20:10.243]         if (!identical(...future.workdir, getwd())) 
[13:20:10.243]             setwd(...future.workdir)
[13:20:10.243]         {
[13:20:10.243]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.243]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.243]             }
[13:20:10.243]             base::options(...future.oldOptions)
[13:20:10.243]             if (.Platform$OS.type == "windows") {
[13:20:10.243]                 old_names <- names(...future.oldEnvVars)
[13:20:10.243]                 envs <- base::Sys.getenv()
[13:20:10.243]                 names <- names(envs)
[13:20:10.243]                 common <- intersect(names, old_names)
[13:20:10.243]                 added <- setdiff(names, old_names)
[13:20:10.243]                 removed <- setdiff(old_names, names)
[13:20:10.243]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.243]                   envs[common]]
[13:20:10.243]                 NAMES <- toupper(changed)
[13:20:10.243]                 args <- list()
[13:20:10.243]                 for (kk in seq_along(NAMES)) {
[13:20:10.243]                   name <- changed[[kk]]
[13:20:10.243]                   NAME <- NAMES[[kk]]
[13:20:10.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.243]                     next
[13:20:10.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.243]                 }
[13:20:10.243]                 NAMES <- toupper(added)
[13:20:10.243]                 for (kk in seq_along(NAMES)) {
[13:20:10.243]                   name <- added[[kk]]
[13:20:10.243]                   NAME <- NAMES[[kk]]
[13:20:10.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.243]                     next
[13:20:10.243]                   args[[name]] <- ""
[13:20:10.243]                 }
[13:20:10.243]                 NAMES <- toupper(removed)
[13:20:10.243]                 for (kk in seq_along(NAMES)) {
[13:20:10.243]                   name <- removed[[kk]]
[13:20:10.243]                   NAME <- NAMES[[kk]]
[13:20:10.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.243]                     next
[13:20:10.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.243]                 }
[13:20:10.243]                 if (length(args) > 0) 
[13:20:10.243]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.243]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.243]             }
[13:20:10.243]             else {
[13:20:10.243]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.243]             }
[13:20:10.243]             {
[13:20:10.243]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.243]                   0L) {
[13:20:10.243]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.243]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.243]                   base::options(opts)
[13:20:10.243]                 }
[13:20:10.243]                 {
[13:20:10.243]                   {
[13:20:10.243]                     NULL
[13:20:10.243]                     RNGkind("Mersenne-Twister")
[13:20:10.243]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:10.243]                       inherits = FALSE)
[13:20:10.243]                   }
[13:20:10.243]                   options(future.plan = NULL)
[13:20:10.243]                   if (is.na(NA_character_)) 
[13:20:10.243]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.243]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.243]                   future::plan(list(function (...) 
[13:20:10.243]                   {
[13:20:10.243]                     Future(1)
[13:20:10.243]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.243]                 }
[13:20:10.243]             }
[13:20:10.243]         }
[13:20:10.243]     })
[13:20:10.243]     if (TRUE) {
[13:20:10.243]         base::sink(type = "output", split = FALSE)
[13:20:10.243]         if (TRUE) {
[13:20:10.243]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.243]         }
[13:20:10.243]         else {
[13:20:10.243]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.243]         }
[13:20:10.243]         base::close(...future.stdout)
[13:20:10.243]         ...future.stdout <- NULL
[13:20:10.243]     }
[13:20:10.243]     ...future.result$conditions <- ...future.conditions
[13:20:10.243]     ...future.result$finished <- base::Sys.time()
[13:20:10.243]     ...future.result
[13:20:10.243] }
[13:20:10.245] plan(): Setting new future strategy stack:
[13:20:10.245] List of future strategies:
[13:20:10.245] 1. sequential:
[13:20:10.245]    - args: function (..., envir = parent.frame())
[13:20:10.245]    - tweaked: FALSE
[13:20:10.245]    - call: NULL
[13:20:10.245] plan(): nbrOfWorkers() = 1
[13:20:10.246] plan(): Setting new future strategy stack:
[13:20:10.246] List of future strategies:
[13:20:10.246] 1. future:
[13:20:10.246]    - args: function (...)
[13:20:10.246]    - tweaked: FALSE
[13:20:10.246]    - call: plan(foo)
[13:20:10.247] plan(): nbrOfWorkers() = Inf
[13:20:10.247] SequentialFuture started (and completed)
[1] 42
[13:20:10.249] getGlobalsAndPackages() ...
[13:20:10.249] 
[13:20:10.249] - globals: [0] <none>
[13:20:10.249] getGlobalsAndPackages() ... DONE
[13:20:10.250] [local output] makeClusterPSOCK() ...
[13:20:10.279] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:10.284] [local output] Base port: 11822
[13:20:10.284] [local output] Getting setup options for 2 cluster nodes ...
[13:20:10.285] [local output]  - Node 1 of 2 ...
[13:20:10.285] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:10.286] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpeVCpI1/worker.rank=1.parallelly.parent=82833.14391fd75301.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpeVCpI1/worker.rank=1.parallelly.parent=82833.14391fd75301.pid")'’
[13:20:10.476] - Possible to infer worker's PID: TRUE
[13:20:10.476] [local output] Rscript port: 11822

[13:20:10.476] [local output]  - Node 2 of 2 ...
[13:20:10.477] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:10.477] [local output] Rscript port: 11822

[13:20:10.478] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:10.478] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:10.478] [local output] Setting up PSOCK nodes in parallel
[13:20:10.478] List of 36
[13:20:10.478]  $ worker          : chr "localhost"
[13:20:10.478]   ..- attr(*, "localhost")= logi TRUE
[13:20:10.478]  $ master          : chr "localhost"
[13:20:10.478]  $ port            : int 11822
[13:20:10.478]  $ connectTimeout  : num 120
[13:20:10.478]  $ timeout         : num 2592000
[13:20:10.478]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:10.478]  $ homogeneous     : logi TRUE
[13:20:10.478]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:10.478]  $ rscript_envs    : NULL
[13:20:10.478]  $ rscript_libs    : NULL
[13:20:10.478]  $ rscript_startup : NULL
[13:20:10.478]  $ rscript_sh      : chr "sh"
[13:20:10.478]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:10.478]  $ methods         : logi TRUE
[13:20:10.478]  $ socketOptions   : chr "no-delay"
[13:20:10.478]  $ useXDR          : logi FALSE
[13:20:10.478]  $ outfile         : chr "/dev/null"
[13:20:10.478]  $ renice          : int NA
[13:20:10.478]  $ rshcmd          : NULL
[13:20:10.478]  $ user            : chr(0) 
[13:20:10.478]  $ revtunnel       : logi FALSE
[13:20:10.478]  $ rshlogfile      : NULL
[13:20:10.478]  $ rshopts         : chr(0) 
[13:20:10.478]  $ rank            : int 1
[13:20:10.478]  $ manual          : logi FALSE
[13:20:10.478]  $ dryrun          : logi FALSE
[13:20:10.478]  $ quiet           : logi FALSE
[13:20:10.478]  $ setup_strategy  : chr "parallel"
[13:20:10.478]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:10.478]  $ pidfile         : chr "/tmp/RtmpeVCpI1/worker.rank=1.parallelly.parent=82833.14391fd75301.pid"
[13:20:10.478]  $ rshcmd_label    : NULL
[13:20:10.478]  $ rsh_call        : NULL
[13:20:10.478]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:10.478]  $ localMachine    : logi TRUE
[13:20:10.478]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:10.478]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:10.478]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:10.478]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:10.478]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:10.478]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:10.478]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:10.478]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:10.478]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:10.478]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:10.478]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:10.478]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:10.478]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:10.478]  $ arguments       :List of 28
[13:20:10.478]   ..$ worker          : chr "localhost"
[13:20:10.478]   ..$ master          : NULL
[13:20:10.478]   ..$ port            : int 11822
[13:20:10.478]   ..$ connectTimeout  : num 120
[13:20:10.478]   ..$ timeout         : num 2592000
[13:20:10.478]   ..$ rscript         : NULL
[13:20:10.478]   ..$ homogeneous     : NULL
[13:20:10.478]   ..$ rscript_args    : NULL
[13:20:10.478]   ..$ rscript_envs    : NULL
[13:20:10.478]   ..$ rscript_libs    : NULL
[13:20:10.478]   ..$ rscript_startup : NULL
[13:20:10.478]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:10.478]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:10.478]   ..$ methods         : logi TRUE
[13:20:10.478]   ..$ socketOptions   : chr "no-delay"
[13:20:10.478]   ..$ useXDR          : logi FALSE
[13:20:10.478]   ..$ outfile         : chr "/dev/null"
[13:20:10.478]   ..$ renice          : int NA
[13:20:10.478]   ..$ rshcmd          : NULL
[13:20:10.478]   ..$ user            : NULL
[13:20:10.478]   ..$ revtunnel       : logi NA
[13:20:10.478]   ..$ rshlogfile      : NULL
[13:20:10.478]   ..$ rshopts         : NULL
[13:20:10.478]   ..$ rank            : int 1
[13:20:10.478]   ..$ manual          : logi FALSE
[13:20:10.478]   ..$ dryrun          : logi FALSE
[13:20:10.478]   ..$ quiet           : logi FALSE
[13:20:10.478]   ..$ setup_strategy  : chr "parallel"
[13:20:10.478]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:10.495] [local output] System call to launch all workers:
[13:20:10.495] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpeVCpI1/worker.rank=1.parallelly.parent=82833.14391fd75301.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11822 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:10.495] [local output] Starting PSOCK main server
[13:20:10.497] [local output] Workers launched
[13:20:10.497] [local output] Waiting for workers to connect back
[13:20:10.497]  - [local output] 0 workers out of 2 ready
[13:20:10.738]  - [local output] 0 workers out of 2 ready
[13:20:10.739]  - [local output] 1 workers out of 2 ready
[13:20:10.740]  - [local output] 1 workers out of 2 ready
[13:20:10.740]  - [local output] 2 workers out of 2 ready
[13:20:10.740] [local output] Launching of workers completed
[13:20:10.740] [local output] Collecting session information from workers
[13:20:10.741] [local output]  - Worker #1 of 2
[13:20:10.742] [local output]  - Worker #2 of 2
[13:20:10.742] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55f7a4ce9c20
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a7f47358-01a6-8bf9-1a3c-c3c7ce484823
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:10.755] Packages needed by the future expression (n = 0): <none>
[13:20:10.755] Packages needed by future strategies (n = 0): <none>
[13:20:10.755] {
[13:20:10.755]     {
[13:20:10.755]         {
[13:20:10.755]             ...future.startTime <- base::Sys.time()
[13:20:10.755]             {
[13:20:10.755]                 {
[13:20:10.755]                   {
[13:20:10.755]                     {
[13:20:10.755]                       base::local({
[13:20:10.755]                         has_future <- base::requireNamespace("future", 
[13:20:10.755]                           quietly = TRUE)
[13:20:10.755]                         if (has_future) {
[13:20:10.755]                           ns <- base::getNamespace("future")
[13:20:10.755]                           version <- ns[[".package"]][["version"]]
[13:20:10.755]                           if (is.null(version)) 
[13:20:10.755]                             version <- utils::packageVersion("future")
[13:20:10.755]                         }
[13:20:10.755]                         else {
[13:20:10.755]                           version <- NULL
[13:20:10.755]                         }
[13:20:10.755]                         if (!has_future || version < "1.8.0") {
[13:20:10.755]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.755]                             "", base::R.version$version.string), 
[13:20:10.755]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:10.755]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.755]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.755]                               "release", "version")], collapse = " "), 
[13:20:10.755]                             hostname = base::Sys.info()[["nodename"]])
[13:20:10.755]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.755]                             info)
[13:20:10.755]                           info <- base::paste(info, collapse = "; ")
[13:20:10.755]                           if (!has_future) {
[13:20:10.755]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.755]                               info)
[13:20:10.755]                           }
[13:20:10.755]                           else {
[13:20:10.755]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.755]                               info, version)
[13:20:10.755]                           }
[13:20:10.755]                           base::stop(msg)
[13:20:10.755]                         }
[13:20:10.755]                       })
[13:20:10.755]                     }
[13:20:10.755]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:10.755]                     base::options(mc.cores = 1L)
[13:20:10.755]                   }
[13:20:10.755]                   options(future.plan = NULL)
[13:20:10.755]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.755]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.755]                 }
[13:20:10.755]                 ...future.workdir <- getwd()
[13:20:10.755]             }
[13:20:10.755]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.755]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.755]         }
[13:20:10.755]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.755]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.755]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.755]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.755]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.755]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.755]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.755]             base::names(...future.oldOptions))
[13:20:10.755]     }
[13:20:10.755]     if (FALSE) {
[13:20:10.755]     }
[13:20:10.755]     else {
[13:20:10.755]         if (TRUE) {
[13:20:10.755]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.755]                 open = "w")
[13:20:10.755]         }
[13:20:10.755]         else {
[13:20:10.755]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.755]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.755]         }
[13:20:10.755]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.755]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.755]             base::sink(type = "output", split = FALSE)
[13:20:10.755]             base::close(...future.stdout)
[13:20:10.755]         }, add = TRUE)
[13:20:10.755]     }
[13:20:10.755]     ...future.frame <- base::sys.nframe()
[13:20:10.755]     ...future.conditions <- base::list()
[13:20:10.755]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.755]     if (FALSE) {
[13:20:10.755]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.755]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.755]     }
[13:20:10.755]     ...future.result <- base::tryCatch({
[13:20:10.755]         base::withCallingHandlers({
[13:20:10.755]             ...future.value <- base::withVisible(base::local({
[13:20:10.755]                 ...future.makeSendCondition <- local({
[13:20:10.755]                   sendCondition <- NULL
[13:20:10.755]                   function(frame = 1L) {
[13:20:10.755]                     if (is.function(sendCondition)) 
[13:20:10.755]                       return(sendCondition)
[13:20:10.755]                     ns <- getNamespace("parallel")
[13:20:10.755]                     if (exists("sendData", mode = "function", 
[13:20:10.755]                       envir = ns)) {
[13:20:10.755]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:10.755]                         envir = ns)
[13:20:10.755]                       envir <- sys.frame(frame)
[13:20:10.755]                       master <- NULL
[13:20:10.755]                       while (!identical(envir, .GlobalEnv) && 
[13:20:10.755]                         !identical(envir, emptyenv())) {
[13:20:10.755]                         if (exists("master", mode = "list", envir = envir, 
[13:20:10.755]                           inherits = FALSE)) {
[13:20:10.755]                           master <- get("master", mode = "list", 
[13:20:10.755]                             envir = envir, inherits = FALSE)
[13:20:10.755]                           if (inherits(master, c("SOCKnode", 
[13:20:10.755]                             "SOCK0node"))) {
[13:20:10.755]                             sendCondition <<- function(cond) {
[13:20:10.755]                               data <- list(type = "VALUE", value = cond, 
[13:20:10.755]                                 success = TRUE)
[13:20:10.755]                               parallel_sendData(master, data)
[13:20:10.755]                             }
[13:20:10.755]                             return(sendCondition)
[13:20:10.755]                           }
[13:20:10.755]                         }
[13:20:10.755]                         frame <- frame + 1L
[13:20:10.755]                         envir <- sys.frame(frame)
[13:20:10.755]                       }
[13:20:10.755]                     }
[13:20:10.755]                     sendCondition <<- function(cond) NULL
[13:20:10.755]                   }
[13:20:10.755]                 })
[13:20:10.755]                 withCallingHandlers({
[13:20:10.755]                   {
[13:20:10.755]                     42L
[13:20:10.755]                   }
[13:20:10.755]                 }, immediateCondition = function(cond) {
[13:20:10.755]                   sendCondition <- ...future.makeSendCondition()
[13:20:10.755]                   sendCondition(cond)
[13:20:10.755]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.755]                   {
[13:20:10.755]                     inherits <- base::inherits
[13:20:10.755]                     invokeRestart <- base::invokeRestart
[13:20:10.755]                     is.null <- base::is.null
[13:20:10.755]                     muffled <- FALSE
[13:20:10.755]                     if (inherits(cond, "message")) {
[13:20:10.755]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:10.755]                       if (muffled) 
[13:20:10.755]                         invokeRestart("muffleMessage")
[13:20:10.755]                     }
[13:20:10.755]                     else if (inherits(cond, "warning")) {
[13:20:10.755]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:10.755]                       if (muffled) 
[13:20:10.755]                         invokeRestart("muffleWarning")
[13:20:10.755]                     }
[13:20:10.755]                     else if (inherits(cond, "condition")) {
[13:20:10.755]                       if (!is.null(pattern)) {
[13:20:10.755]                         computeRestarts <- base::computeRestarts
[13:20:10.755]                         grepl <- base::grepl
[13:20:10.755]                         restarts <- computeRestarts(cond)
[13:20:10.755]                         for (restart in restarts) {
[13:20:10.755]                           name <- restart$name
[13:20:10.755]                           if (is.null(name)) 
[13:20:10.755]                             next
[13:20:10.755]                           if (!grepl(pattern, name)) 
[13:20:10.755]                             next
[13:20:10.755]                           invokeRestart(restart)
[13:20:10.755]                           muffled <- TRUE
[13:20:10.755]                           break
[13:20:10.755]                         }
[13:20:10.755]                       }
[13:20:10.755]                     }
[13:20:10.755]                     invisible(muffled)
[13:20:10.755]                   }
[13:20:10.755]                   muffleCondition(cond)
[13:20:10.755]                 })
[13:20:10.755]             }))
[13:20:10.755]             future::FutureResult(value = ...future.value$value, 
[13:20:10.755]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.755]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.755]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.755]                     ...future.globalenv.names))
[13:20:10.755]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.755]         }, condition = base::local({
[13:20:10.755]             c <- base::c
[13:20:10.755]             inherits <- base::inherits
[13:20:10.755]             invokeRestart <- base::invokeRestart
[13:20:10.755]             length <- base::length
[13:20:10.755]             list <- base::list
[13:20:10.755]             seq.int <- base::seq.int
[13:20:10.755]             signalCondition <- base::signalCondition
[13:20:10.755]             sys.calls <- base::sys.calls
[13:20:10.755]             `[[` <- base::`[[`
[13:20:10.755]             `+` <- base::`+`
[13:20:10.755]             `<<-` <- base::`<<-`
[13:20:10.755]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.755]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.755]                   3L)]
[13:20:10.755]             }
[13:20:10.755]             function(cond) {
[13:20:10.755]                 is_error <- inherits(cond, "error")
[13:20:10.755]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.755]                   NULL)
[13:20:10.755]                 if (is_error) {
[13:20:10.755]                   sessionInformation <- function() {
[13:20:10.755]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.755]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.755]                       search = base::search(), system = base::Sys.info())
[13:20:10.755]                   }
[13:20:10.755]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.755]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.755]                     cond$call), session = sessionInformation(), 
[13:20:10.755]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.755]                   signalCondition(cond)
[13:20:10.755]                 }
[13:20:10.755]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.755]                 "immediateCondition"))) {
[13:20:10.755]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.755]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.755]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.755]                   if (TRUE && !signal) {
[13:20:10.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.755]                     {
[13:20:10.755]                       inherits <- base::inherits
[13:20:10.755]                       invokeRestart <- base::invokeRestart
[13:20:10.755]                       is.null <- base::is.null
[13:20:10.755]                       muffled <- FALSE
[13:20:10.755]                       if (inherits(cond, "message")) {
[13:20:10.755]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.755]                         if (muffled) 
[13:20:10.755]                           invokeRestart("muffleMessage")
[13:20:10.755]                       }
[13:20:10.755]                       else if (inherits(cond, "warning")) {
[13:20:10.755]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.755]                         if (muffled) 
[13:20:10.755]                           invokeRestart("muffleWarning")
[13:20:10.755]                       }
[13:20:10.755]                       else if (inherits(cond, "condition")) {
[13:20:10.755]                         if (!is.null(pattern)) {
[13:20:10.755]                           computeRestarts <- base::computeRestarts
[13:20:10.755]                           grepl <- base::grepl
[13:20:10.755]                           restarts <- computeRestarts(cond)
[13:20:10.755]                           for (restart in restarts) {
[13:20:10.755]                             name <- restart$name
[13:20:10.755]                             if (is.null(name)) 
[13:20:10.755]                               next
[13:20:10.755]                             if (!grepl(pattern, name)) 
[13:20:10.755]                               next
[13:20:10.755]                             invokeRestart(restart)
[13:20:10.755]                             muffled <- TRUE
[13:20:10.755]                             break
[13:20:10.755]                           }
[13:20:10.755]                         }
[13:20:10.755]                       }
[13:20:10.755]                       invisible(muffled)
[13:20:10.755]                     }
[13:20:10.755]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.755]                   }
[13:20:10.755]                 }
[13:20:10.755]                 else {
[13:20:10.755]                   if (TRUE) {
[13:20:10.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.755]                     {
[13:20:10.755]                       inherits <- base::inherits
[13:20:10.755]                       invokeRestart <- base::invokeRestart
[13:20:10.755]                       is.null <- base::is.null
[13:20:10.755]                       muffled <- FALSE
[13:20:10.755]                       if (inherits(cond, "message")) {
[13:20:10.755]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.755]                         if (muffled) 
[13:20:10.755]                           invokeRestart("muffleMessage")
[13:20:10.755]                       }
[13:20:10.755]                       else if (inherits(cond, "warning")) {
[13:20:10.755]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.755]                         if (muffled) 
[13:20:10.755]                           invokeRestart("muffleWarning")
[13:20:10.755]                       }
[13:20:10.755]                       else if (inherits(cond, "condition")) {
[13:20:10.755]                         if (!is.null(pattern)) {
[13:20:10.755]                           computeRestarts <- base::computeRestarts
[13:20:10.755]                           grepl <- base::grepl
[13:20:10.755]                           restarts <- computeRestarts(cond)
[13:20:10.755]                           for (restart in restarts) {
[13:20:10.755]                             name <- restart$name
[13:20:10.755]                             if (is.null(name)) 
[13:20:10.755]                               next
[13:20:10.755]                             if (!grepl(pattern, name)) 
[13:20:10.755]                               next
[13:20:10.755]                             invokeRestart(restart)
[13:20:10.755]                             muffled <- TRUE
[13:20:10.755]                             break
[13:20:10.755]                           }
[13:20:10.755]                         }
[13:20:10.755]                       }
[13:20:10.755]                       invisible(muffled)
[13:20:10.755]                     }
[13:20:10.755]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.755]                   }
[13:20:10.755]                 }
[13:20:10.755]             }
[13:20:10.755]         }))
[13:20:10.755]     }, error = function(ex) {
[13:20:10.755]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.755]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.755]                 ...future.rng), started = ...future.startTime, 
[13:20:10.755]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.755]             version = "1.8"), class = "FutureResult")
[13:20:10.755]     }, finally = {
[13:20:10.755]         if (!identical(...future.workdir, getwd())) 
[13:20:10.755]             setwd(...future.workdir)
[13:20:10.755]         {
[13:20:10.755]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.755]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.755]             }
[13:20:10.755]             base::options(...future.oldOptions)
[13:20:10.755]             if (.Platform$OS.type == "windows") {
[13:20:10.755]                 old_names <- names(...future.oldEnvVars)
[13:20:10.755]                 envs <- base::Sys.getenv()
[13:20:10.755]                 names <- names(envs)
[13:20:10.755]                 common <- intersect(names, old_names)
[13:20:10.755]                 added <- setdiff(names, old_names)
[13:20:10.755]                 removed <- setdiff(old_names, names)
[13:20:10.755]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.755]                   envs[common]]
[13:20:10.755]                 NAMES <- toupper(changed)
[13:20:10.755]                 args <- list()
[13:20:10.755]                 for (kk in seq_along(NAMES)) {
[13:20:10.755]                   name <- changed[[kk]]
[13:20:10.755]                   NAME <- NAMES[[kk]]
[13:20:10.755]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.755]                     next
[13:20:10.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.755]                 }
[13:20:10.755]                 NAMES <- toupper(added)
[13:20:10.755]                 for (kk in seq_along(NAMES)) {
[13:20:10.755]                   name <- added[[kk]]
[13:20:10.755]                   NAME <- NAMES[[kk]]
[13:20:10.755]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.755]                     next
[13:20:10.755]                   args[[name]] <- ""
[13:20:10.755]                 }
[13:20:10.755]                 NAMES <- toupper(removed)
[13:20:10.755]                 for (kk in seq_along(NAMES)) {
[13:20:10.755]                   name <- removed[[kk]]
[13:20:10.755]                   NAME <- NAMES[[kk]]
[13:20:10.755]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.755]                     next
[13:20:10.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.755]                 }
[13:20:10.755]                 if (length(args) > 0) 
[13:20:10.755]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.755]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.755]             }
[13:20:10.755]             else {
[13:20:10.755]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.755]             }
[13:20:10.755]             {
[13:20:10.755]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.755]                   0L) {
[13:20:10.755]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.755]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.755]                   base::options(opts)
[13:20:10.755]                 }
[13:20:10.755]                 {
[13:20:10.755]                   {
[13:20:10.755]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:10.755]                     NULL
[13:20:10.755]                   }
[13:20:10.755]                   options(future.plan = NULL)
[13:20:10.755]                   if (is.na(NA_character_)) 
[13:20:10.755]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.755]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.755]                   future::plan(list(function (...) 
[13:20:10.755]                   {
[13:20:10.755]                     Future(1)
[13:20:10.755]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.755]                 }
[13:20:10.755]             }
[13:20:10.755]         }
[13:20:10.755]     })
[13:20:10.755]     if (TRUE) {
[13:20:10.755]         base::sink(type = "output", split = FALSE)
[13:20:10.755]         if (TRUE) {
[13:20:10.755]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.755]         }
[13:20:10.755]         else {
[13:20:10.755]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.755]         }
[13:20:10.755]         base::close(...future.stdout)
[13:20:10.755]         ...future.stdout <- NULL
[13:20:10.755]     }
[13:20:10.755]     ...future.result$conditions <- ...future.conditions
[13:20:10.755]     ...future.result$finished <- base::Sys.time()
[13:20:10.755]     ...future.result
[13:20:10.755] }
[13:20:10.829] MultisessionFuture started
[13:20:10.830] result() for ClusterFuture ...
[13:20:10.831] receiveMessageFromWorker() for ClusterFuture ...
[13:20:10.831] - Validating connection of MultisessionFuture
[13:20:10.856] - received message: FutureResult
[13:20:10.857] - Received FutureResult
[13:20:10.860] - Erased future from FutureRegistry
[13:20:10.860] result() for ClusterFuture ...
[13:20:10.860] - result already collected: FutureResult
[13:20:10.860] result() for ClusterFuture ... done
[13:20:10.860] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:10.860] result() for ClusterFuture ... done
[13:20:10.860] result() for ClusterFuture ...
[13:20:10.860] - result already collected: FutureResult
[13:20:10.861] result() for ClusterFuture ... done
[1] 42
[13:20:10.862] getGlobalsAndPackages() ...
[13:20:10.862] 
[13:20:10.862] - globals: [0] <none>
[13:20:10.862] getGlobalsAndPackages() ... DONE
[13:20:10.874] Packages needed by the future expression (n = 0): <none>
[13:20:10.874] Packages needed by future strategies (n = 0): <none>
[13:20:10.875] {
[13:20:10.875]     {
[13:20:10.875]         {
[13:20:10.875]             ...future.startTime <- base::Sys.time()
[13:20:10.875]             {
[13:20:10.875]                 {
[13:20:10.875]                   {
[13:20:10.875]                     {
[13:20:10.875]                       base::local({
[13:20:10.875]                         has_future <- base::requireNamespace("future", 
[13:20:10.875]                           quietly = TRUE)
[13:20:10.875]                         if (has_future) {
[13:20:10.875]                           ns <- base::getNamespace("future")
[13:20:10.875]                           version <- ns[[".package"]][["version"]]
[13:20:10.875]                           if (is.null(version)) 
[13:20:10.875]                             version <- utils::packageVersion("future")
[13:20:10.875]                         }
[13:20:10.875]                         else {
[13:20:10.875]                           version <- NULL
[13:20:10.875]                         }
[13:20:10.875]                         if (!has_future || version < "1.8.0") {
[13:20:10.875]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.875]                             "", base::R.version$version.string), 
[13:20:10.875]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:10.875]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.875]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.875]                               "release", "version")], collapse = " "), 
[13:20:10.875]                             hostname = base::Sys.info()[["nodename"]])
[13:20:10.875]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.875]                             info)
[13:20:10.875]                           info <- base::paste(info, collapse = "; ")
[13:20:10.875]                           if (!has_future) {
[13:20:10.875]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.875]                               info)
[13:20:10.875]                           }
[13:20:10.875]                           else {
[13:20:10.875]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.875]                               info, version)
[13:20:10.875]                           }
[13:20:10.875]                           base::stop(msg)
[13:20:10.875]                         }
[13:20:10.875]                       })
[13:20:10.875]                     }
[13:20:10.875]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:10.875]                     base::options(mc.cores = 1L)
[13:20:10.875]                   }
[13:20:10.875]                   options(future.plan = NULL)
[13:20:10.875]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.875]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.875]                 }
[13:20:10.875]                 ...future.workdir <- getwd()
[13:20:10.875]             }
[13:20:10.875]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.875]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.875]         }
[13:20:10.875]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.875]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.875]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.875]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.875]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.875]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.875]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.875]             base::names(...future.oldOptions))
[13:20:10.875]     }
[13:20:10.875]     if (FALSE) {
[13:20:10.875]     }
[13:20:10.875]     else {
[13:20:10.875]         if (TRUE) {
[13:20:10.875]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.875]                 open = "w")
[13:20:10.875]         }
[13:20:10.875]         else {
[13:20:10.875]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.875]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.875]         }
[13:20:10.875]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.875]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.875]             base::sink(type = "output", split = FALSE)
[13:20:10.875]             base::close(...future.stdout)
[13:20:10.875]         }, add = TRUE)
[13:20:10.875]     }
[13:20:10.875]     ...future.frame <- base::sys.nframe()
[13:20:10.875]     ...future.conditions <- base::list()
[13:20:10.875]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.875]     if (FALSE) {
[13:20:10.875]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.875]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.875]     }
[13:20:10.875]     ...future.result <- base::tryCatch({
[13:20:10.875]         base::withCallingHandlers({
[13:20:10.875]             ...future.value <- base::withVisible(base::local({
[13:20:10.875]                 ...future.makeSendCondition <- local({
[13:20:10.875]                   sendCondition <- NULL
[13:20:10.875]                   function(frame = 1L) {
[13:20:10.875]                     if (is.function(sendCondition)) 
[13:20:10.875]                       return(sendCondition)
[13:20:10.875]                     ns <- getNamespace("parallel")
[13:20:10.875]                     if (exists("sendData", mode = "function", 
[13:20:10.875]                       envir = ns)) {
[13:20:10.875]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:10.875]                         envir = ns)
[13:20:10.875]                       envir <- sys.frame(frame)
[13:20:10.875]                       master <- NULL
[13:20:10.875]                       while (!identical(envir, .GlobalEnv) && 
[13:20:10.875]                         !identical(envir, emptyenv())) {
[13:20:10.875]                         if (exists("master", mode = "list", envir = envir, 
[13:20:10.875]                           inherits = FALSE)) {
[13:20:10.875]                           master <- get("master", mode = "list", 
[13:20:10.875]                             envir = envir, inherits = FALSE)
[13:20:10.875]                           if (inherits(master, c("SOCKnode", 
[13:20:10.875]                             "SOCK0node"))) {
[13:20:10.875]                             sendCondition <<- function(cond) {
[13:20:10.875]                               data <- list(type = "VALUE", value = cond, 
[13:20:10.875]                                 success = TRUE)
[13:20:10.875]                               parallel_sendData(master, data)
[13:20:10.875]                             }
[13:20:10.875]                             return(sendCondition)
[13:20:10.875]                           }
[13:20:10.875]                         }
[13:20:10.875]                         frame <- frame + 1L
[13:20:10.875]                         envir <- sys.frame(frame)
[13:20:10.875]                       }
[13:20:10.875]                     }
[13:20:10.875]                     sendCondition <<- function(cond) NULL
[13:20:10.875]                   }
[13:20:10.875]                 })
[13:20:10.875]                 withCallingHandlers({
[13:20:10.875]                   {
[13:20:10.875]                     42L
[13:20:10.875]                   }
[13:20:10.875]                 }, immediateCondition = function(cond) {
[13:20:10.875]                   sendCondition <- ...future.makeSendCondition()
[13:20:10.875]                   sendCondition(cond)
[13:20:10.875]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.875]                   {
[13:20:10.875]                     inherits <- base::inherits
[13:20:10.875]                     invokeRestart <- base::invokeRestart
[13:20:10.875]                     is.null <- base::is.null
[13:20:10.875]                     muffled <- FALSE
[13:20:10.875]                     if (inherits(cond, "message")) {
[13:20:10.875]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:10.875]                       if (muffled) 
[13:20:10.875]                         invokeRestart("muffleMessage")
[13:20:10.875]                     }
[13:20:10.875]                     else if (inherits(cond, "warning")) {
[13:20:10.875]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:10.875]                       if (muffled) 
[13:20:10.875]                         invokeRestart("muffleWarning")
[13:20:10.875]                     }
[13:20:10.875]                     else if (inherits(cond, "condition")) {
[13:20:10.875]                       if (!is.null(pattern)) {
[13:20:10.875]                         computeRestarts <- base::computeRestarts
[13:20:10.875]                         grepl <- base::grepl
[13:20:10.875]                         restarts <- computeRestarts(cond)
[13:20:10.875]                         for (restart in restarts) {
[13:20:10.875]                           name <- restart$name
[13:20:10.875]                           if (is.null(name)) 
[13:20:10.875]                             next
[13:20:10.875]                           if (!grepl(pattern, name)) 
[13:20:10.875]                             next
[13:20:10.875]                           invokeRestart(restart)
[13:20:10.875]                           muffled <- TRUE
[13:20:10.875]                           break
[13:20:10.875]                         }
[13:20:10.875]                       }
[13:20:10.875]                     }
[13:20:10.875]                     invisible(muffled)
[13:20:10.875]                   }
[13:20:10.875]                   muffleCondition(cond)
[13:20:10.875]                 })
[13:20:10.875]             }))
[13:20:10.875]             future::FutureResult(value = ...future.value$value, 
[13:20:10.875]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.875]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.875]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.875]                     ...future.globalenv.names))
[13:20:10.875]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.875]         }, condition = base::local({
[13:20:10.875]             c <- base::c
[13:20:10.875]             inherits <- base::inherits
[13:20:10.875]             invokeRestart <- base::invokeRestart
[13:20:10.875]             length <- base::length
[13:20:10.875]             list <- base::list
[13:20:10.875]             seq.int <- base::seq.int
[13:20:10.875]             signalCondition <- base::signalCondition
[13:20:10.875]             sys.calls <- base::sys.calls
[13:20:10.875]             `[[` <- base::`[[`
[13:20:10.875]             `+` <- base::`+`
[13:20:10.875]             `<<-` <- base::`<<-`
[13:20:10.875]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.875]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.875]                   3L)]
[13:20:10.875]             }
[13:20:10.875]             function(cond) {
[13:20:10.875]                 is_error <- inherits(cond, "error")
[13:20:10.875]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.875]                   NULL)
[13:20:10.875]                 if (is_error) {
[13:20:10.875]                   sessionInformation <- function() {
[13:20:10.875]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.875]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.875]                       search = base::search(), system = base::Sys.info())
[13:20:10.875]                   }
[13:20:10.875]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.875]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.875]                     cond$call), session = sessionInformation(), 
[13:20:10.875]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.875]                   signalCondition(cond)
[13:20:10.875]                 }
[13:20:10.875]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.875]                 "immediateCondition"))) {
[13:20:10.875]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.875]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.875]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.875]                   if (TRUE && !signal) {
[13:20:10.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.875]                     {
[13:20:10.875]                       inherits <- base::inherits
[13:20:10.875]                       invokeRestart <- base::invokeRestart
[13:20:10.875]                       is.null <- base::is.null
[13:20:10.875]                       muffled <- FALSE
[13:20:10.875]                       if (inherits(cond, "message")) {
[13:20:10.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.875]                         if (muffled) 
[13:20:10.875]                           invokeRestart("muffleMessage")
[13:20:10.875]                       }
[13:20:10.875]                       else if (inherits(cond, "warning")) {
[13:20:10.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.875]                         if (muffled) 
[13:20:10.875]                           invokeRestart("muffleWarning")
[13:20:10.875]                       }
[13:20:10.875]                       else if (inherits(cond, "condition")) {
[13:20:10.875]                         if (!is.null(pattern)) {
[13:20:10.875]                           computeRestarts <- base::computeRestarts
[13:20:10.875]                           grepl <- base::grepl
[13:20:10.875]                           restarts <- computeRestarts(cond)
[13:20:10.875]                           for (restart in restarts) {
[13:20:10.875]                             name <- restart$name
[13:20:10.875]                             if (is.null(name)) 
[13:20:10.875]                               next
[13:20:10.875]                             if (!grepl(pattern, name)) 
[13:20:10.875]                               next
[13:20:10.875]                             invokeRestart(restart)
[13:20:10.875]                             muffled <- TRUE
[13:20:10.875]                             break
[13:20:10.875]                           }
[13:20:10.875]                         }
[13:20:10.875]                       }
[13:20:10.875]                       invisible(muffled)
[13:20:10.875]                     }
[13:20:10.875]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.875]                   }
[13:20:10.875]                 }
[13:20:10.875]                 else {
[13:20:10.875]                   if (TRUE) {
[13:20:10.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.875]                     {
[13:20:10.875]                       inherits <- base::inherits
[13:20:10.875]                       invokeRestart <- base::invokeRestart
[13:20:10.875]                       is.null <- base::is.null
[13:20:10.875]                       muffled <- FALSE
[13:20:10.875]                       if (inherits(cond, "message")) {
[13:20:10.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.875]                         if (muffled) 
[13:20:10.875]                           invokeRestart("muffleMessage")
[13:20:10.875]                       }
[13:20:10.875]                       else if (inherits(cond, "warning")) {
[13:20:10.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.875]                         if (muffled) 
[13:20:10.875]                           invokeRestart("muffleWarning")
[13:20:10.875]                       }
[13:20:10.875]                       else if (inherits(cond, "condition")) {
[13:20:10.875]                         if (!is.null(pattern)) {
[13:20:10.875]                           computeRestarts <- base::computeRestarts
[13:20:10.875]                           grepl <- base::grepl
[13:20:10.875]                           restarts <- computeRestarts(cond)
[13:20:10.875]                           for (restart in restarts) {
[13:20:10.875]                             name <- restart$name
[13:20:10.875]                             if (is.null(name)) 
[13:20:10.875]                               next
[13:20:10.875]                             if (!grepl(pattern, name)) 
[13:20:10.875]                               next
[13:20:10.875]                             invokeRestart(restart)
[13:20:10.875]                             muffled <- TRUE
[13:20:10.875]                             break
[13:20:10.875]                           }
[13:20:10.875]                         }
[13:20:10.875]                       }
[13:20:10.875]                       invisible(muffled)
[13:20:10.875]                     }
[13:20:10.875]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.875]                   }
[13:20:10.875]                 }
[13:20:10.875]             }
[13:20:10.875]         }))
[13:20:10.875]     }, error = function(ex) {
[13:20:10.875]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.875]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.875]                 ...future.rng), started = ...future.startTime, 
[13:20:10.875]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.875]             version = "1.8"), class = "FutureResult")
[13:20:10.875]     }, finally = {
[13:20:10.875]         if (!identical(...future.workdir, getwd())) 
[13:20:10.875]             setwd(...future.workdir)
[13:20:10.875]         {
[13:20:10.875]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.875]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.875]             }
[13:20:10.875]             base::options(...future.oldOptions)
[13:20:10.875]             if (.Platform$OS.type == "windows") {
[13:20:10.875]                 old_names <- names(...future.oldEnvVars)
[13:20:10.875]                 envs <- base::Sys.getenv()
[13:20:10.875]                 names <- names(envs)
[13:20:10.875]                 common <- intersect(names, old_names)
[13:20:10.875]                 added <- setdiff(names, old_names)
[13:20:10.875]                 removed <- setdiff(old_names, names)
[13:20:10.875]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.875]                   envs[common]]
[13:20:10.875]                 NAMES <- toupper(changed)
[13:20:10.875]                 args <- list()
[13:20:10.875]                 for (kk in seq_along(NAMES)) {
[13:20:10.875]                   name <- changed[[kk]]
[13:20:10.875]                   NAME <- NAMES[[kk]]
[13:20:10.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.875]                     next
[13:20:10.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.875]                 }
[13:20:10.875]                 NAMES <- toupper(added)
[13:20:10.875]                 for (kk in seq_along(NAMES)) {
[13:20:10.875]                   name <- added[[kk]]
[13:20:10.875]                   NAME <- NAMES[[kk]]
[13:20:10.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.875]                     next
[13:20:10.875]                   args[[name]] <- ""
[13:20:10.875]                 }
[13:20:10.875]                 NAMES <- toupper(removed)
[13:20:10.875]                 for (kk in seq_along(NAMES)) {
[13:20:10.875]                   name <- removed[[kk]]
[13:20:10.875]                   NAME <- NAMES[[kk]]
[13:20:10.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.875]                     next
[13:20:10.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.875]                 }
[13:20:10.875]                 if (length(args) > 0) 
[13:20:10.875]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.875]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.875]             }
[13:20:10.875]             else {
[13:20:10.875]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.875]             }
[13:20:10.875]             {
[13:20:10.875]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.875]                   0L) {
[13:20:10.875]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.875]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.875]                   base::options(opts)
[13:20:10.875]                 }
[13:20:10.875]                 {
[13:20:10.875]                   {
[13:20:10.875]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:10.875]                     NULL
[13:20:10.875]                   }
[13:20:10.875]                   options(future.plan = NULL)
[13:20:10.875]                   if (is.na(NA_character_)) 
[13:20:10.875]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.875]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.875]                   future::plan(list(function (...) 
[13:20:10.875]                   {
[13:20:10.875]                     Future(1)
[13:20:10.875]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.875]                 }
[13:20:10.875]             }
[13:20:10.875]         }
[13:20:10.875]     })
[13:20:10.875]     if (TRUE) {
[13:20:10.875]         base::sink(type = "output", split = FALSE)
[13:20:10.875]         if (TRUE) {
[13:20:10.875]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.875]         }
[13:20:10.875]         else {
[13:20:10.875]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.875]         }
[13:20:10.875]         base::close(...future.stdout)
[13:20:10.875]         ...future.stdout <- NULL
[13:20:10.875]     }
[13:20:10.875]     ...future.result$conditions <- ...future.conditions
[13:20:10.875]     ...future.result$finished <- base::Sys.time()
[13:20:10.875]     ...future.result
[13:20:10.875] }
[13:20:10.878] MultisessionFuture started
[13:20:10.878] result() for ClusterFuture ...
[13:20:10.878] receiveMessageFromWorker() for ClusterFuture ...
[13:20:10.878] - Validating connection of MultisessionFuture
[13:20:10.880] - received message: FutureResult
[13:20:10.880] - Received FutureResult
[13:20:10.880] - Erased future from FutureRegistry
[13:20:10.880] result() for ClusterFuture ...
[13:20:10.880] - result already collected: FutureResult
[13:20:10.880] result() for ClusterFuture ... done
[13:20:10.880] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:10.881] result() for ClusterFuture ... done
[13:20:10.881] result() for ClusterFuture ...
[13:20:10.881] - result already collected: FutureResult
[13:20:10.881] result() for ClusterFuture ... done
[1] 42
[13:20:10.881] getGlobalsAndPackages() ...
[13:20:10.881] Searching for globals...
[13:20:10.882] - globals found: [1] ‘{’
[13:20:10.882] Searching for globals ... DONE
[13:20:10.882] Resolving globals: FALSE
[13:20:10.883] 
[13:20:10.883] 
[13:20:10.883] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a7f47358-01a6-8bf9-1a3c-c3c7ce484823
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:10.884] Packages needed by the future expression (n = 0): <none>
[13:20:10.884] Packages needed by future strategies (n = 0): <none>
[13:20:10.884] {
[13:20:10.884]     {
[13:20:10.884]         {
[13:20:10.884]             ...future.startTime <- base::Sys.time()
[13:20:10.884]             {
[13:20:10.884]                 {
[13:20:10.884]                   {
[13:20:10.884]                     base::local({
[13:20:10.884]                       has_future <- base::requireNamespace("future", 
[13:20:10.884]                         quietly = TRUE)
[13:20:10.884]                       if (has_future) {
[13:20:10.884]                         ns <- base::getNamespace("future")
[13:20:10.884]                         version <- ns[[".package"]][["version"]]
[13:20:10.884]                         if (is.null(version)) 
[13:20:10.884]                           version <- utils::packageVersion("future")
[13:20:10.884]                       }
[13:20:10.884]                       else {
[13:20:10.884]                         version <- NULL
[13:20:10.884]                       }
[13:20:10.884]                       if (!has_future || version < "1.8.0") {
[13:20:10.884]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.884]                           "", base::R.version$version.string), 
[13:20:10.884]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:10.884]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.884]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.884]                             "release", "version")], collapse = " "), 
[13:20:10.884]                           hostname = base::Sys.info()[["nodename"]])
[13:20:10.884]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.884]                           info)
[13:20:10.884]                         info <- base::paste(info, collapse = "; ")
[13:20:10.884]                         if (!has_future) {
[13:20:10.884]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.884]                             info)
[13:20:10.884]                         }
[13:20:10.884]                         else {
[13:20:10.884]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.884]                             info, version)
[13:20:10.884]                         }
[13:20:10.884]                         base::stop(msg)
[13:20:10.884]                       }
[13:20:10.884]                     })
[13:20:10.884]                   }
[13:20:10.884]                   options(future.plan = NULL)
[13:20:10.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.884]                 }
[13:20:10.884]                 ...future.workdir <- getwd()
[13:20:10.884]             }
[13:20:10.884]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.884]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.884]         }
[13:20:10.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.884]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.884]             base::names(...future.oldOptions))
[13:20:10.884]     }
[13:20:10.884]     if (FALSE) {
[13:20:10.884]     }
[13:20:10.884]     else {
[13:20:10.884]         if (TRUE) {
[13:20:10.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.884]                 open = "w")
[13:20:10.884]         }
[13:20:10.884]         else {
[13:20:10.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.884]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.884]         }
[13:20:10.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.884]             base::sink(type = "output", split = FALSE)
[13:20:10.884]             base::close(...future.stdout)
[13:20:10.884]         }, add = TRUE)
[13:20:10.884]     }
[13:20:10.884]     ...future.frame <- base::sys.nframe()
[13:20:10.884]     ...future.conditions <- base::list()
[13:20:10.884]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.884]     if (FALSE) {
[13:20:10.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.884]     }
[13:20:10.884]     ...future.result <- base::tryCatch({
[13:20:10.884]         base::withCallingHandlers({
[13:20:10.884]             ...future.value <- base::withVisible(base::local({
[13:20:10.884]                 42L
[13:20:10.884]             }))
[13:20:10.884]             future::FutureResult(value = ...future.value$value, 
[13:20:10.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.884]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.884]                     ...future.globalenv.names))
[13:20:10.884]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.884]         }, condition = base::local({
[13:20:10.884]             c <- base::c
[13:20:10.884]             inherits <- base::inherits
[13:20:10.884]             invokeRestart <- base::invokeRestart
[13:20:10.884]             length <- base::length
[13:20:10.884]             list <- base::list
[13:20:10.884]             seq.int <- base::seq.int
[13:20:10.884]             signalCondition <- base::signalCondition
[13:20:10.884]             sys.calls <- base::sys.calls
[13:20:10.884]             `[[` <- base::`[[`
[13:20:10.884]             `+` <- base::`+`
[13:20:10.884]             `<<-` <- base::`<<-`
[13:20:10.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.884]                   3L)]
[13:20:10.884]             }
[13:20:10.884]             function(cond) {
[13:20:10.884]                 is_error <- inherits(cond, "error")
[13:20:10.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.884]                   NULL)
[13:20:10.884]                 if (is_error) {
[13:20:10.884]                   sessionInformation <- function() {
[13:20:10.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.884]                       search = base::search(), system = base::Sys.info())
[13:20:10.884]                   }
[13:20:10.884]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.884]                     cond$call), session = sessionInformation(), 
[13:20:10.884]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.884]                   signalCondition(cond)
[13:20:10.884]                 }
[13:20:10.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.884]                 "immediateCondition"))) {
[13:20:10.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.884]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.884]                   if (TRUE && !signal) {
[13:20:10.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.884]                     {
[13:20:10.884]                       inherits <- base::inherits
[13:20:10.884]                       invokeRestart <- base::invokeRestart
[13:20:10.884]                       is.null <- base::is.null
[13:20:10.884]                       muffled <- FALSE
[13:20:10.884]                       if (inherits(cond, "message")) {
[13:20:10.884]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.884]                         if (muffled) 
[13:20:10.884]                           invokeRestart("muffleMessage")
[13:20:10.884]                       }
[13:20:10.884]                       else if (inherits(cond, "warning")) {
[13:20:10.884]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.884]                         if (muffled) 
[13:20:10.884]                           invokeRestart("muffleWarning")
[13:20:10.884]                       }
[13:20:10.884]                       else if (inherits(cond, "condition")) {
[13:20:10.884]                         if (!is.null(pattern)) {
[13:20:10.884]                           computeRestarts <- base::computeRestarts
[13:20:10.884]                           grepl <- base::grepl
[13:20:10.884]                           restarts <- computeRestarts(cond)
[13:20:10.884]                           for (restart in restarts) {
[13:20:10.884]                             name <- restart$name
[13:20:10.884]                             if (is.null(name)) 
[13:20:10.884]                               next
[13:20:10.884]                             if (!grepl(pattern, name)) 
[13:20:10.884]                               next
[13:20:10.884]                             invokeRestart(restart)
[13:20:10.884]                             muffled <- TRUE
[13:20:10.884]                             break
[13:20:10.884]                           }
[13:20:10.884]                         }
[13:20:10.884]                       }
[13:20:10.884]                       invisible(muffled)
[13:20:10.884]                     }
[13:20:10.884]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.884]                   }
[13:20:10.884]                 }
[13:20:10.884]                 else {
[13:20:10.884]                   if (TRUE) {
[13:20:10.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.884]                     {
[13:20:10.884]                       inherits <- base::inherits
[13:20:10.884]                       invokeRestart <- base::invokeRestart
[13:20:10.884]                       is.null <- base::is.null
[13:20:10.884]                       muffled <- FALSE
[13:20:10.884]                       if (inherits(cond, "message")) {
[13:20:10.884]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.884]                         if (muffled) 
[13:20:10.884]                           invokeRestart("muffleMessage")
[13:20:10.884]                       }
[13:20:10.884]                       else if (inherits(cond, "warning")) {
[13:20:10.884]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.884]                         if (muffled) 
[13:20:10.884]                           invokeRestart("muffleWarning")
[13:20:10.884]                       }
[13:20:10.884]                       else if (inherits(cond, "condition")) {
[13:20:10.884]                         if (!is.null(pattern)) {
[13:20:10.884]                           computeRestarts <- base::computeRestarts
[13:20:10.884]                           grepl <- base::grepl
[13:20:10.884]                           restarts <- computeRestarts(cond)
[13:20:10.884]                           for (restart in restarts) {
[13:20:10.884]                             name <- restart$name
[13:20:10.884]                             if (is.null(name)) 
[13:20:10.884]                               next
[13:20:10.884]                             if (!grepl(pattern, name)) 
[13:20:10.884]                               next
[13:20:10.884]                             invokeRestart(restart)
[13:20:10.884]                             muffled <- TRUE
[13:20:10.884]                             break
[13:20:10.884]                           }
[13:20:10.884]                         }
[13:20:10.884]                       }
[13:20:10.884]                       invisible(muffled)
[13:20:10.884]                     }
[13:20:10.884]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.884]                   }
[13:20:10.884]                 }
[13:20:10.884]             }
[13:20:10.884]         }))
[13:20:10.884]     }, error = function(ex) {
[13:20:10.884]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.884]                 ...future.rng), started = ...future.startTime, 
[13:20:10.884]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.884]             version = "1.8"), class = "FutureResult")
[13:20:10.884]     }, finally = {
[13:20:10.884]         if (!identical(...future.workdir, getwd())) 
[13:20:10.884]             setwd(...future.workdir)
[13:20:10.884]         {
[13:20:10.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.884]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.884]             }
[13:20:10.884]             base::options(...future.oldOptions)
[13:20:10.884]             if (.Platform$OS.type == "windows") {
[13:20:10.884]                 old_names <- names(...future.oldEnvVars)
[13:20:10.884]                 envs <- base::Sys.getenv()
[13:20:10.884]                 names <- names(envs)
[13:20:10.884]                 common <- intersect(names, old_names)
[13:20:10.884]                 added <- setdiff(names, old_names)
[13:20:10.884]                 removed <- setdiff(old_names, names)
[13:20:10.884]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.884]                   envs[common]]
[13:20:10.884]                 NAMES <- toupper(changed)
[13:20:10.884]                 args <- list()
[13:20:10.884]                 for (kk in seq_along(NAMES)) {
[13:20:10.884]                   name <- changed[[kk]]
[13:20:10.884]                   NAME <- NAMES[[kk]]
[13:20:10.884]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.884]                     next
[13:20:10.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.884]                 }
[13:20:10.884]                 NAMES <- toupper(added)
[13:20:10.884]                 for (kk in seq_along(NAMES)) {
[13:20:10.884]                   name <- added[[kk]]
[13:20:10.884]                   NAME <- NAMES[[kk]]
[13:20:10.884]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.884]                     next
[13:20:10.884]                   args[[name]] <- ""
[13:20:10.884]                 }
[13:20:10.884]                 NAMES <- toupper(removed)
[13:20:10.884]                 for (kk in seq_along(NAMES)) {
[13:20:10.884]                   name <- removed[[kk]]
[13:20:10.884]                   NAME <- NAMES[[kk]]
[13:20:10.884]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.884]                     next
[13:20:10.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.884]                 }
[13:20:10.884]                 if (length(args) > 0) 
[13:20:10.884]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.884]             }
[13:20:10.884]             else {
[13:20:10.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.884]             }
[13:20:10.884]             {
[13:20:10.884]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.884]                   0L) {
[13:20:10.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.884]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.884]                   base::options(opts)
[13:20:10.884]                 }
[13:20:10.884]                 {
[13:20:10.884]                   {
[13:20:10.884]                     NULL
[13:20:10.884]                     RNGkind("Mersenne-Twister")
[13:20:10.884]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:10.884]                       inherits = FALSE)
[13:20:10.884]                   }
[13:20:10.884]                   options(future.plan = NULL)
[13:20:10.884]                   if (is.na(NA_character_)) 
[13:20:10.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.884]                   future::plan(list(function (...) 
[13:20:10.884]                   {
[13:20:10.884]                     Future(1)
[13:20:10.884]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.884]                 }
[13:20:10.884]             }
[13:20:10.884]         }
[13:20:10.884]     })
[13:20:10.884]     if (TRUE) {
[13:20:10.884]         base::sink(type = "output", split = FALSE)
[13:20:10.884]         if (TRUE) {
[13:20:10.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.884]         }
[13:20:10.884]         else {
[13:20:10.884]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.884]         }
[13:20:10.884]         base::close(...future.stdout)
[13:20:10.884]         ...future.stdout <- NULL
[13:20:10.884]     }
[13:20:10.884]     ...future.result$conditions <- ...future.conditions
[13:20:10.884]     ...future.result$finished <- base::Sys.time()
[13:20:10.884]     ...future.result
[13:20:10.884] }
[13:20:10.886] plan(): Setting new future strategy stack:
[13:20:10.886] List of future strategies:
[13:20:10.886] 1. sequential:
[13:20:10.886]    - args: function (..., envir = parent.frame())
[13:20:10.886]    - tweaked: FALSE
[13:20:10.886]    - call: NULL
[13:20:10.887] plan(): nbrOfWorkers() = 1
[13:20:10.888] plan(): Setting new future strategy stack:
[13:20:10.888] List of future strategies:
[13:20:10.888] 1. future:
[13:20:10.888]    - args: function (...)
[13:20:10.888]    - tweaked: FALSE
[13:20:10.888]    - call: plan(foo)
[13:20:10.888] plan(): nbrOfWorkers() = Inf
[13:20:10.888] SequentialFuture started (and completed)
[1] 42
[13:20:10.889] getGlobalsAndPackages() ...
[13:20:10.889] Searching for globals...
[13:20:10.890] - globals found: [1] ‘{’
[13:20:10.890] Searching for globals ... DONE
[13:20:10.890] Resolving globals: FALSE
[13:20:10.890] 
[13:20:10.890] 
[13:20:10.891] getGlobalsAndPackages() ... DONE
[13:20:10.891] Packages needed by the future expression (n = 0): <none>
[13:20:10.891] Packages needed by future strategies (n = 0): <none>
[13:20:10.891] {
[13:20:10.891]     {
[13:20:10.891]         {
[13:20:10.891]             ...future.startTime <- base::Sys.time()
[13:20:10.891]             {
[13:20:10.891]                 {
[13:20:10.891]                   {
[13:20:10.891]                     base::local({
[13:20:10.891]                       has_future <- base::requireNamespace("future", 
[13:20:10.891]                         quietly = TRUE)
[13:20:10.891]                       if (has_future) {
[13:20:10.891]                         ns <- base::getNamespace("future")
[13:20:10.891]                         version <- ns[[".package"]][["version"]]
[13:20:10.891]                         if (is.null(version)) 
[13:20:10.891]                           version <- utils::packageVersion("future")
[13:20:10.891]                       }
[13:20:10.891]                       else {
[13:20:10.891]                         version <- NULL
[13:20:10.891]                       }
[13:20:10.891]                       if (!has_future || version < "1.8.0") {
[13:20:10.891]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.891]                           "", base::R.version$version.string), 
[13:20:10.891]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:10.891]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.891]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.891]                             "release", "version")], collapse = " "), 
[13:20:10.891]                           hostname = base::Sys.info()[["nodename"]])
[13:20:10.891]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.891]                           info)
[13:20:10.891]                         info <- base::paste(info, collapse = "; ")
[13:20:10.891]                         if (!has_future) {
[13:20:10.891]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.891]                             info)
[13:20:10.891]                         }
[13:20:10.891]                         else {
[13:20:10.891]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.891]                             info, version)
[13:20:10.891]                         }
[13:20:10.891]                         base::stop(msg)
[13:20:10.891]                       }
[13:20:10.891]                     })
[13:20:10.891]                   }
[13:20:10.891]                   options(future.plan = NULL)
[13:20:10.891]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.891]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.891]                 }
[13:20:10.891]                 ...future.workdir <- getwd()
[13:20:10.891]             }
[13:20:10.891]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.891]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.891]         }
[13:20:10.891]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.891]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.891]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.891]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.891]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.891]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.891]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.891]             base::names(...future.oldOptions))
[13:20:10.891]     }
[13:20:10.891]     if (FALSE) {
[13:20:10.891]     }
[13:20:10.891]     else {
[13:20:10.891]         if (TRUE) {
[13:20:10.891]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.891]                 open = "w")
[13:20:10.891]         }
[13:20:10.891]         else {
[13:20:10.891]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.891]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.891]         }
[13:20:10.891]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.891]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.891]             base::sink(type = "output", split = FALSE)
[13:20:10.891]             base::close(...future.stdout)
[13:20:10.891]         }, add = TRUE)
[13:20:10.891]     }
[13:20:10.891]     ...future.frame <- base::sys.nframe()
[13:20:10.891]     ...future.conditions <- base::list()
[13:20:10.891]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.891]     if (FALSE) {
[13:20:10.891]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.891]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.891]     }
[13:20:10.891]     ...future.result <- base::tryCatch({
[13:20:10.891]         base::withCallingHandlers({
[13:20:10.891]             ...future.value <- base::withVisible(base::local({
[13:20:10.891]                 42L
[13:20:10.891]             }))
[13:20:10.891]             future::FutureResult(value = ...future.value$value, 
[13:20:10.891]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.891]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.891]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.891]                     ...future.globalenv.names))
[13:20:10.891]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.891]         }, condition = base::local({
[13:20:10.891]             c <- base::c
[13:20:10.891]             inherits <- base::inherits
[13:20:10.891]             invokeRestart <- base::invokeRestart
[13:20:10.891]             length <- base::length
[13:20:10.891]             list <- base::list
[13:20:10.891]             seq.int <- base::seq.int
[13:20:10.891]             signalCondition <- base::signalCondition
[13:20:10.891]             sys.calls <- base::sys.calls
[13:20:10.891]             `[[` <- base::`[[`
[13:20:10.891]             `+` <- base::`+`
[13:20:10.891]             `<<-` <- base::`<<-`
[13:20:10.891]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.891]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.891]                   3L)]
[13:20:10.891]             }
[13:20:10.891]             function(cond) {
[13:20:10.891]                 is_error <- inherits(cond, "error")
[13:20:10.891]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.891]                   NULL)
[13:20:10.891]                 if (is_error) {
[13:20:10.891]                   sessionInformation <- function() {
[13:20:10.891]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.891]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.891]                       search = base::search(), system = base::Sys.info())
[13:20:10.891]                   }
[13:20:10.891]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.891]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.891]                     cond$call), session = sessionInformation(), 
[13:20:10.891]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.891]                   signalCondition(cond)
[13:20:10.891]                 }
[13:20:10.891]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.891]                 "immediateCondition"))) {
[13:20:10.891]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.891]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.891]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.891]                   if (TRUE && !signal) {
[13:20:10.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.891]                     {
[13:20:10.891]                       inherits <- base::inherits
[13:20:10.891]                       invokeRestart <- base::invokeRestart
[13:20:10.891]                       is.null <- base::is.null
[13:20:10.891]                       muffled <- FALSE
[13:20:10.891]                       if (inherits(cond, "message")) {
[13:20:10.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.891]                         if (muffled) 
[13:20:10.891]                           invokeRestart("muffleMessage")
[13:20:10.891]                       }
[13:20:10.891]                       else if (inherits(cond, "warning")) {
[13:20:10.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.891]                         if (muffled) 
[13:20:10.891]                           invokeRestart("muffleWarning")
[13:20:10.891]                       }
[13:20:10.891]                       else if (inherits(cond, "condition")) {
[13:20:10.891]                         if (!is.null(pattern)) {
[13:20:10.891]                           computeRestarts <- base::computeRestarts
[13:20:10.891]                           grepl <- base::grepl
[13:20:10.891]                           restarts <- computeRestarts(cond)
[13:20:10.891]                           for (restart in restarts) {
[13:20:10.891]                             name <- restart$name
[13:20:10.891]                             if (is.null(name)) 
[13:20:10.891]                               next
[13:20:10.891]                             if (!grepl(pattern, name)) 
[13:20:10.891]                               next
[13:20:10.891]                             invokeRestart(restart)
[13:20:10.891]                             muffled <- TRUE
[13:20:10.891]                             break
[13:20:10.891]                           }
[13:20:10.891]                         }
[13:20:10.891]                       }
[13:20:10.891]                       invisible(muffled)
[13:20:10.891]                     }
[13:20:10.891]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.891]                   }
[13:20:10.891]                 }
[13:20:10.891]                 else {
[13:20:10.891]                   if (TRUE) {
[13:20:10.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.891]                     {
[13:20:10.891]                       inherits <- base::inherits
[13:20:10.891]                       invokeRestart <- base::invokeRestart
[13:20:10.891]                       is.null <- base::is.null
[13:20:10.891]                       muffled <- FALSE
[13:20:10.891]                       if (inherits(cond, "message")) {
[13:20:10.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.891]                         if (muffled) 
[13:20:10.891]                           invokeRestart("muffleMessage")
[13:20:10.891]                       }
[13:20:10.891]                       else if (inherits(cond, "warning")) {
[13:20:10.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.891]                         if (muffled) 
[13:20:10.891]                           invokeRestart("muffleWarning")
[13:20:10.891]                       }
[13:20:10.891]                       else if (inherits(cond, "condition")) {
[13:20:10.891]                         if (!is.null(pattern)) {
[13:20:10.891]                           computeRestarts <- base::computeRestarts
[13:20:10.891]                           grepl <- base::grepl
[13:20:10.891]                           restarts <- computeRestarts(cond)
[13:20:10.891]                           for (restart in restarts) {
[13:20:10.891]                             name <- restart$name
[13:20:10.891]                             if (is.null(name)) 
[13:20:10.891]                               next
[13:20:10.891]                             if (!grepl(pattern, name)) 
[13:20:10.891]                               next
[13:20:10.891]                             invokeRestart(restart)
[13:20:10.891]                             muffled <- TRUE
[13:20:10.891]                             break
[13:20:10.891]                           }
[13:20:10.891]                         }
[13:20:10.891]                       }
[13:20:10.891]                       invisible(muffled)
[13:20:10.891]                     }
[13:20:10.891]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.891]                   }
[13:20:10.891]                 }
[13:20:10.891]             }
[13:20:10.891]         }))
[13:20:10.891]     }, error = function(ex) {
[13:20:10.891]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.891]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.891]                 ...future.rng), started = ...future.startTime, 
[13:20:10.891]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.891]             version = "1.8"), class = "FutureResult")
[13:20:10.891]     }, finally = {
[13:20:10.891]         if (!identical(...future.workdir, getwd())) 
[13:20:10.891]             setwd(...future.workdir)
[13:20:10.891]         {
[13:20:10.891]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.891]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.891]             }
[13:20:10.891]             base::options(...future.oldOptions)
[13:20:10.891]             if (.Platform$OS.type == "windows") {
[13:20:10.891]                 old_names <- names(...future.oldEnvVars)
[13:20:10.891]                 envs <- base::Sys.getenv()
[13:20:10.891]                 names <- names(envs)
[13:20:10.891]                 common <- intersect(names, old_names)
[13:20:10.891]                 added <- setdiff(names, old_names)
[13:20:10.891]                 removed <- setdiff(old_names, names)
[13:20:10.891]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.891]                   envs[common]]
[13:20:10.891]                 NAMES <- toupper(changed)
[13:20:10.891]                 args <- list()
[13:20:10.891]                 for (kk in seq_along(NAMES)) {
[13:20:10.891]                   name <- changed[[kk]]
[13:20:10.891]                   NAME <- NAMES[[kk]]
[13:20:10.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.891]                     next
[13:20:10.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.891]                 }
[13:20:10.891]                 NAMES <- toupper(added)
[13:20:10.891]                 for (kk in seq_along(NAMES)) {
[13:20:10.891]                   name <- added[[kk]]
[13:20:10.891]                   NAME <- NAMES[[kk]]
[13:20:10.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.891]                     next
[13:20:10.891]                   args[[name]] <- ""
[13:20:10.891]                 }
[13:20:10.891]                 NAMES <- toupper(removed)
[13:20:10.891]                 for (kk in seq_along(NAMES)) {
[13:20:10.891]                   name <- removed[[kk]]
[13:20:10.891]                   NAME <- NAMES[[kk]]
[13:20:10.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.891]                     next
[13:20:10.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.891]                 }
[13:20:10.891]                 if (length(args) > 0) 
[13:20:10.891]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.891]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.891]             }
[13:20:10.891]             else {
[13:20:10.891]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.891]             }
[13:20:10.891]             {
[13:20:10.891]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.891]                   0L) {
[13:20:10.891]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.891]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.891]                   base::options(opts)
[13:20:10.891]                 }
[13:20:10.891]                 {
[13:20:10.891]                   {
[13:20:10.891]                     NULL
[13:20:10.891]                     RNGkind("Mersenne-Twister")
[13:20:10.891]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:10.891]                       inherits = FALSE)
[13:20:10.891]                   }
[13:20:10.891]                   options(future.plan = NULL)
[13:20:10.891]                   if (is.na(NA_character_)) 
[13:20:10.891]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.891]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.891]                   future::plan(list(function (...) 
[13:20:10.891]                   {
[13:20:10.891]                     Future(1)
[13:20:10.891]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.891]                 }
[13:20:10.891]             }
[13:20:10.891]         }
[13:20:10.891]     })
[13:20:10.891]     if (TRUE) {
[13:20:10.891]         base::sink(type = "output", split = FALSE)
[13:20:10.891]         if (TRUE) {
[13:20:10.891]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.891]         }
[13:20:10.891]         else {
[13:20:10.891]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.891]         }
[13:20:10.891]         base::close(...future.stdout)
[13:20:10.891]         ...future.stdout <- NULL
[13:20:10.891]     }
[13:20:10.891]     ...future.result$conditions <- ...future.conditions
[13:20:10.891]     ...future.result$finished <- base::Sys.time()
[13:20:10.891]     ...future.result
[13:20:10.891] }
[13:20:10.893] plan(): Setting new future strategy stack:
[13:20:10.894] List of future strategies:
[13:20:10.894] 1. sequential:
[13:20:10.894]    - args: function (..., envir = parent.frame())
[13:20:10.894]    - tweaked: FALSE
[13:20:10.894]    - call: NULL
[13:20:10.894] plan(): nbrOfWorkers() = 1
[13:20:10.895] plan(): Setting new future strategy stack:
[13:20:10.895] List of future strategies:
[13:20:10.895] 1. future:
[13:20:10.895]    - args: function (...)
[13:20:10.895]    - tweaked: FALSE
[13:20:10.895]    - call: plan(foo)
[13:20:10.895] plan(): nbrOfWorkers() = Inf
[13:20:10.896] SequentialFuture started (and completed)
[1] 42
[13:20:10.896] getGlobalsAndPackages() ...
[13:20:10.896] 
[13:20:10.896] - globals: [0] <none>
[13:20:10.896] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55f7a6272808
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a7f47358-01a6-8bf9-1a3c-c3c7ce484823
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:10.898] Packages needed by the future expression (n = 0): <none>
[13:20:10.898] Packages needed by future strategies (n = 0): <none>
[13:20:10.899] {
[13:20:10.899]     {
[13:20:10.899]         {
[13:20:10.899]             ...future.startTime <- base::Sys.time()
[13:20:10.899]             {
[13:20:10.899]                 {
[13:20:10.899]                   {
[13:20:10.899]                     {
[13:20:10.899]                       base::local({
[13:20:10.899]                         has_future <- base::requireNamespace("future", 
[13:20:10.899]                           quietly = TRUE)
[13:20:10.899]                         if (has_future) {
[13:20:10.899]                           ns <- base::getNamespace("future")
[13:20:10.899]                           version <- ns[[".package"]][["version"]]
[13:20:10.899]                           if (is.null(version)) 
[13:20:10.899]                             version <- utils::packageVersion("future")
[13:20:10.899]                         }
[13:20:10.899]                         else {
[13:20:10.899]                           version <- NULL
[13:20:10.899]                         }
[13:20:10.899]                         if (!has_future || version < "1.8.0") {
[13:20:10.899]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.899]                             "", base::R.version$version.string), 
[13:20:10.899]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:10.899]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.899]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.899]                               "release", "version")], collapse = " "), 
[13:20:10.899]                             hostname = base::Sys.info()[["nodename"]])
[13:20:10.899]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.899]                             info)
[13:20:10.899]                           info <- base::paste(info, collapse = "; ")
[13:20:10.899]                           if (!has_future) {
[13:20:10.899]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.899]                               info)
[13:20:10.899]                           }
[13:20:10.899]                           else {
[13:20:10.899]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.899]                               info, version)
[13:20:10.899]                           }
[13:20:10.899]                           base::stop(msg)
[13:20:10.899]                         }
[13:20:10.899]                       })
[13:20:10.899]                     }
[13:20:10.899]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:10.899]                     base::options(mc.cores = 1L)
[13:20:10.899]                   }
[13:20:10.899]                   options(future.plan = NULL)
[13:20:10.899]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.899]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.899]                 }
[13:20:10.899]                 ...future.workdir <- getwd()
[13:20:10.899]             }
[13:20:10.899]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.899]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.899]         }
[13:20:10.899]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.899]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.899]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.899]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.899]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.899]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.899]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.899]             base::names(...future.oldOptions))
[13:20:10.899]     }
[13:20:10.899]     if (FALSE) {
[13:20:10.899]     }
[13:20:10.899]     else {
[13:20:10.899]         if (TRUE) {
[13:20:10.899]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.899]                 open = "w")
[13:20:10.899]         }
[13:20:10.899]         else {
[13:20:10.899]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.899]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.899]         }
[13:20:10.899]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.899]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.899]             base::sink(type = "output", split = FALSE)
[13:20:10.899]             base::close(...future.stdout)
[13:20:10.899]         }, add = TRUE)
[13:20:10.899]     }
[13:20:10.899]     ...future.frame <- base::sys.nframe()
[13:20:10.899]     ...future.conditions <- base::list()
[13:20:10.899]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.899]     if (FALSE) {
[13:20:10.899]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.899]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.899]     }
[13:20:10.899]     ...future.result <- base::tryCatch({
[13:20:10.899]         base::withCallingHandlers({
[13:20:10.899]             ...future.value <- base::withVisible(base::local({
[13:20:10.899]                 withCallingHandlers({
[13:20:10.899]                   {
[13:20:10.899]                     42L
[13:20:10.899]                   }
[13:20:10.899]                 }, immediateCondition = function(cond) {
[13:20:10.899]                   save_rds <- function (object, pathname, ...) 
[13:20:10.899]                   {
[13:20:10.899]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:10.899]                     if (file_test("-f", pathname_tmp)) {
[13:20:10.899]                       fi_tmp <- file.info(pathname_tmp)
[13:20:10.899]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:10.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:10.899]                         fi_tmp[["mtime"]])
[13:20:10.899]                     }
[13:20:10.899]                     tryCatch({
[13:20:10.899]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:10.899]                     }, error = function(ex) {
[13:20:10.899]                       msg <- conditionMessage(ex)
[13:20:10.899]                       fi_tmp <- file.info(pathname_tmp)
[13:20:10.899]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:10.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:10.899]                         fi_tmp[["mtime"]], msg)
[13:20:10.899]                       ex$message <- msg
[13:20:10.899]                       stop(ex)
[13:20:10.899]                     })
[13:20:10.899]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:10.899]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:10.899]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:10.899]                       fi_tmp <- file.info(pathname_tmp)
[13:20:10.899]                       fi <- file.info(pathname)
[13:20:10.899]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:10.899]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:10.899]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:10.899]                         fi[["size"]], fi[["mtime"]])
[13:20:10.899]                       stop(msg)
[13:20:10.899]                     }
[13:20:10.899]                     invisible(pathname)
[13:20:10.899]                   }
[13:20:10.899]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:10.899]                     rootPath = tempdir()) 
[13:20:10.899]                   {
[13:20:10.899]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:10.899]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:10.899]                       tmpdir = path, fileext = ".rds")
[13:20:10.899]                     save_rds(obj, file)
[13:20:10.899]                   }
[13:20:10.899]                   saveImmediateCondition(cond, path = "/tmp/RtmpeVCpI1/.future/immediateConditions")
[13:20:10.899]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.899]                   {
[13:20:10.899]                     inherits <- base::inherits
[13:20:10.899]                     invokeRestart <- base::invokeRestart
[13:20:10.899]                     is.null <- base::is.null
[13:20:10.899]                     muffled <- FALSE
[13:20:10.899]                     if (inherits(cond, "message")) {
[13:20:10.899]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:10.899]                       if (muffled) 
[13:20:10.899]                         invokeRestart("muffleMessage")
[13:20:10.899]                     }
[13:20:10.899]                     else if (inherits(cond, "warning")) {
[13:20:10.899]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:10.899]                       if (muffled) 
[13:20:10.899]                         invokeRestart("muffleWarning")
[13:20:10.899]                     }
[13:20:10.899]                     else if (inherits(cond, "condition")) {
[13:20:10.899]                       if (!is.null(pattern)) {
[13:20:10.899]                         computeRestarts <- base::computeRestarts
[13:20:10.899]                         grepl <- base::grepl
[13:20:10.899]                         restarts <- computeRestarts(cond)
[13:20:10.899]                         for (restart in restarts) {
[13:20:10.899]                           name <- restart$name
[13:20:10.899]                           if (is.null(name)) 
[13:20:10.899]                             next
[13:20:10.899]                           if (!grepl(pattern, name)) 
[13:20:10.899]                             next
[13:20:10.899]                           invokeRestart(restart)
[13:20:10.899]                           muffled <- TRUE
[13:20:10.899]                           break
[13:20:10.899]                         }
[13:20:10.899]                       }
[13:20:10.899]                     }
[13:20:10.899]                     invisible(muffled)
[13:20:10.899]                   }
[13:20:10.899]                   muffleCondition(cond)
[13:20:10.899]                 })
[13:20:10.899]             }))
[13:20:10.899]             future::FutureResult(value = ...future.value$value, 
[13:20:10.899]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.899]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.899]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.899]                     ...future.globalenv.names))
[13:20:10.899]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.899]         }, condition = base::local({
[13:20:10.899]             c <- base::c
[13:20:10.899]             inherits <- base::inherits
[13:20:10.899]             invokeRestart <- base::invokeRestart
[13:20:10.899]             length <- base::length
[13:20:10.899]             list <- base::list
[13:20:10.899]             seq.int <- base::seq.int
[13:20:10.899]             signalCondition <- base::signalCondition
[13:20:10.899]             sys.calls <- base::sys.calls
[13:20:10.899]             `[[` <- base::`[[`
[13:20:10.899]             `+` <- base::`+`
[13:20:10.899]             `<<-` <- base::`<<-`
[13:20:10.899]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.899]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.899]                   3L)]
[13:20:10.899]             }
[13:20:10.899]             function(cond) {
[13:20:10.899]                 is_error <- inherits(cond, "error")
[13:20:10.899]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.899]                   NULL)
[13:20:10.899]                 if (is_error) {
[13:20:10.899]                   sessionInformation <- function() {
[13:20:10.899]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.899]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.899]                       search = base::search(), system = base::Sys.info())
[13:20:10.899]                   }
[13:20:10.899]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.899]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.899]                     cond$call), session = sessionInformation(), 
[13:20:10.899]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.899]                   signalCondition(cond)
[13:20:10.899]                 }
[13:20:10.899]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.899]                 "immediateCondition"))) {
[13:20:10.899]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.899]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.899]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.899]                   if (TRUE && !signal) {
[13:20:10.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.899]                     {
[13:20:10.899]                       inherits <- base::inherits
[13:20:10.899]                       invokeRestart <- base::invokeRestart
[13:20:10.899]                       is.null <- base::is.null
[13:20:10.899]                       muffled <- FALSE
[13:20:10.899]                       if (inherits(cond, "message")) {
[13:20:10.899]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.899]                         if (muffled) 
[13:20:10.899]                           invokeRestart("muffleMessage")
[13:20:10.899]                       }
[13:20:10.899]                       else if (inherits(cond, "warning")) {
[13:20:10.899]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.899]                         if (muffled) 
[13:20:10.899]                           invokeRestart("muffleWarning")
[13:20:10.899]                       }
[13:20:10.899]                       else if (inherits(cond, "condition")) {
[13:20:10.899]                         if (!is.null(pattern)) {
[13:20:10.899]                           computeRestarts <- base::computeRestarts
[13:20:10.899]                           grepl <- base::grepl
[13:20:10.899]                           restarts <- computeRestarts(cond)
[13:20:10.899]                           for (restart in restarts) {
[13:20:10.899]                             name <- restart$name
[13:20:10.899]                             if (is.null(name)) 
[13:20:10.899]                               next
[13:20:10.899]                             if (!grepl(pattern, name)) 
[13:20:10.899]                               next
[13:20:10.899]                             invokeRestart(restart)
[13:20:10.899]                             muffled <- TRUE
[13:20:10.899]                             break
[13:20:10.899]                           }
[13:20:10.899]                         }
[13:20:10.899]                       }
[13:20:10.899]                       invisible(muffled)
[13:20:10.899]                     }
[13:20:10.899]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.899]                   }
[13:20:10.899]                 }
[13:20:10.899]                 else {
[13:20:10.899]                   if (TRUE) {
[13:20:10.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.899]                     {
[13:20:10.899]                       inherits <- base::inherits
[13:20:10.899]                       invokeRestart <- base::invokeRestart
[13:20:10.899]                       is.null <- base::is.null
[13:20:10.899]                       muffled <- FALSE
[13:20:10.899]                       if (inherits(cond, "message")) {
[13:20:10.899]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.899]                         if (muffled) 
[13:20:10.899]                           invokeRestart("muffleMessage")
[13:20:10.899]                       }
[13:20:10.899]                       else if (inherits(cond, "warning")) {
[13:20:10.899]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.899]                         if (muffled) 
[13:20:10.899]                           invokeRestart("muffleWarning")
[13:20:10.899]                       }
[13:20:10.899]                       else if (inherits(cond, "condition")) {
[13:20:10.899]                         if (!is.null(pattern)) {
[13:20:10.899]                           computeRestarts <- base::computeRestarts
[13:20:10.899]                           grepl <- base::grepl
[13:20:10.899]                           restarts <- computeRestarts(cond)
[13:20:10.899]                           for (restart in restarts) {
[13:20:10.899]                             name <- restart$name
[13:20:10.899]                             if (is.null(name)) 
[13:20:10.899]                               next
[13:20:10.899]                             if (!grepl(pattern, name)) 
[13:20:10.899]                               next
[13:20:10.899]                             invokeRestart(restart)
[13:20:10.899]                             muffled <- TRUE
[13:20:10.899]                             break
[13:20:10.899]                           }
[13:20:10.899]                         }
[13:20:10.899]                       }
[13:20:10.899]                       invisible(muffled)
[13:20:10.899]                     }
[13:20:10.899]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.899]                   }
[13:20:10.899]                 }
[13:20:10.899]             }
[13:20:10.899]         }))
[13:20:10.899]     }, error = function(ex) {
[13:20:10.899]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.899]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.899]                 ...future.rng), started = ...future.startTime, 
[13:20:10.899]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.899]             version = "1.8"), class = "FutureResult")
[13:20:10.899]     }, finally = {
[13:20:10.899]         if (!identical(...future.workdir, getwd())) 
[13:20:10.899]             setwd(...future.workdir)
[13:20:10.899]         {
[13:20:10.899]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.899]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.899]             }
[13:20:10.899]             base::options(...future.oldOptions)
[13:20:10.899]             if (.Platform$OS.type == "windows") {
[13:20:10.899]                 old_names <- names(...future.oldEnvVars)
[13:20:10.899]                 envs <- base::Sys.getenv()
[13:20:10.899]                 names <- names(envs)
[13:20:10.899]                 common <- intersect(names, old_names)
[13:20:10.899]                 added <- setdiff(names, old_names)
[13:20:10.899]                 removed <- setdiff(old_names, names)
[13:20:10.899]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.899]                   envs[common]]
[13:20:10.899]                 NAMES <- toupper(changed)
[13:20:10.899]                 args <- list()
[13:20:10.899]                 for (kk in seq_along(NAMES)) {
[13:20:10.899]                   name <- changed[[kk]]
[13:20:10.899]                   NAME <- NAMES[[kk]]
[13:20:10.899]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.899]                     next
[13:20:10.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.899]                 }
[13:20:10.899]                 NAMES <- toupper(added)
[13:20:10.899]                 for (kk in seq_along(NAMES)) {
[13:20:10.899]                   name <- added[[kk]]
[13:20:10.899]                   NAME <- NAMES[[kk]]
[13:20:10.899]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.899]                     next
[13:20:10.899]                   args[[name]] <- ""
[13:20:10.899]                 }
[13:20:10.899]                 NAMES <- toupper(removed)
[13:20:10.899]                 for (kk in seq_along(NAMES)) {
[13:20:10.899]                   name <- removed[[kk]]
[13:20:10.899]                   NAME <- NAMES[[kk]]
[13:20:10.899]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.899]                     next
[13:20:10.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.899]                 }
[13:20:10.899]                 if (length(args) > 0) 
[13:20:10.899]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.899]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.899]             }
[13:20:10.899]             else {
[13:20:10.899]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.899]             }
[13:20:10.899]             {
[13:20:10.899]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.899]                   0L) {
[13:20:10.899]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.899]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.899]                   base::options(opts)
[13:20:10.899]                 }
[13:20:10.899]                 {
[13:20:10.899]                   {
[13:20:10.899]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:10.899]                     NULL
[13:20:10.899]                   }
[13:20:10.899]                   options(future.plan = NULL)
[13:20:10.899]                   if (is.na(NA_character_)) 
[13:20:10.899]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.899]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.899]                   future::plan(list(function (...) 
[13:20:10.899]                   {
[13:20:10.899]                     Future(1)
[13:20:10.899]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.899]                 }
[13:20:10.899]             }
[13:20:10.899]         }
[13:20:10.899]     })
[13:20:10.899]     if (TRUE) {
[13:20:10.899]         base::sink(type = "output", split = FALSE)
[13:20:10.899]         if (TRUE) {
[13:20:10.899]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.899]         }
[13:20:10.899]         else {
[13:20:10.899]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.899]         }
[13:20:10.899]         base::close(...future.stdout)
[13:20:10.899]         ...future.stdout <- NULL
[13:20:10.899]     }
[13:20:10.899]     ...future.result$conditions <- ...future.conditions
[13:20:10.899]     ...future.result$finished <- base::Sys.time()
[13:20:10.899]     ...future.result
[13:20:10.899] }
[13:20:10.901] requestCore(): workers = 2
[13:20:10.904] MulticoreFuture started
[13:20:10.905] plan(): Setting new future strategy stack:
[13:20:10.905] List of future strategies:
[13:20:10.905] 1. sequential:
[13:20:10.905]    - args: function (..., envir = parent.frame())
[13:20:10.905]    - tweaked: FALSE
[13:20:10.905]    - call: NULL
[13:20:10.906] plan(): nbrOfWorkers() = 1
[13:20:10.908] plan(): Setting new future strategy stack:
[13:20:10.908] List of future strategies:
[13:20:10.908] 1. future:
[13:20:10.908]    - args: function (...)
[13:20:10.908]    - tweaked: FALSE
[13:20:10.908]    - call: plan(foo)
[13:20:10.909] plan(): nbrOfWorkers() = Inf
[1] 42
[13:20:10.911] getGlobalsAndPackages() ...
[13:20:10.911] 
[13:20:10.911] - globals: [0] <none>
[13:20:10.912] getGlobalsAndPackages() ... DONE
[13:20:10.912] Packages needed by the future expression (n = 0): <none>
[13:20:10.912] Packages needed by future strategies (n = 0): <none>
[13:20:10.913] {
[13:20:10.913]     {
[13:20:10.913]         {
[13:20:10.913]             ...future.startTime <- base::Sys.time()
[13:20:10.913]             {
[13:20:10.913]                 {
[13:20:10.913]                   {
[13:20:10.913]                     {
[13:20:10.913]                       base::local({
[13:20:10.913]                         has_future <- base::requireNamespace("future", 
[13:20:10.913]                           quietly = TRUE)
[13:20:10.913]                         if (has_future) {
[13:20:10.913]                           ns <- base::getNamespace("future")
[13:20:10.913]                           version <- ns[[".package"]][["version"]]
[13:20:10.913]                           if (is.null(version)) 
[13:20:10.913]                             version <- utils::packageVersion("future")
[13:20:10.913]                         }
[13:20:10.913]                         else {
[13:20:10.913]                           version <- NULL
[13:20:10.913]                         }
[13:20:10.913]                         if (!has_future || version < "1.8.0") {
[13:20:10.913]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:10.913]                             "", base::R.version$version.string), 
[13:20:10.913]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:10.913]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:10.913]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:10.913]                               "release", "version")], collapse = " "), 
[13:20:10.913]                             hostname = base::Sys.info()[["nodename"]])
[13:20:10.913]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:10.913]                             info)
[13:20:10.913]                           info <- base::paste(info, collapse = "; ")
[13:20:10.913]                           if (!has_future) {
[13:20:10.913]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:10.913]                               info)
[13:20:10.913]                           }
[13:20:10.913]                           else {
[13:20:10.913]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:10.913]                               info, version)
[13:20:10.913]                           }
[13:20:10.913]                           base::stop(msg)
[13:20:10.913]                         }
[13:20:10.913]                       })
[13:20:10.913]                     }
[13:20:10.913]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:10.913]                     base::options(mc.cores = 1L)
[13:20:10.913]                   }
[13:20:10.913]                   options(future.plan = NULL)
[13:20:10.913]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.913]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:10.913]                 }
[13:20:10.913]                 ...future.workdir <- getwd()
[13:20:10.913]             }
[13:20:10.913]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:10.913]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:10.913]         }
[13:20:10.913]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:10.913]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:10.913]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:10.913]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:10.913]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:10.913]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:10.913]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:10.913]             base::names(...future.oldOptions))
[13:20:10.913]     }
[13:20:10.913]     if (FALSE) {
[13:20:10.913]     }
[13:20:10.913]     else {
[13:20:10.913]         if (TRUE) {
[13:20:10.913]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:10.913]                 open = "w")
[13:20:10.913]         }
[13:20:10.913]         else {
[13:20:10.913]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:10.913]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:10.913]         }
[13:20:10.913]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:10.913]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:10.913]             base::sink(type = "output", split = FALSE)
[13:20:10.913]             base::close(...future.stdout)
[13:20:10.913]         }, add = TRUE)
[13:20:10.913]     }
[13:20:10.913]     ...future.frame <- base::sys.nframe()
[13:20:10.913]     ...future.conditions <- base::list()
[13:20:10.913]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:10.913]     if (FALSE) {
[13:20:10.913]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:10.913]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:10.913]     }
[13:20:10.913]     ...future.result <- base::tryCatch({
[13:20:10.913]         base::withCallingHandlers({
[13:20:10.913]             ...future.value <- base::withVisible(base::local({
[13:20:10.913]                 withCallingHandlers({
[13:20:10.913]                   {
[13:20:10.913]                     42L
[13:20:10.913]                   }
[13:20:10.913]                 }, immediateCondition = function(cond) {
[13:20:10.913]                   save_rds <- function (object, pathname, ...) 
[13:20:10.913]                   {
[13:20:10.913]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:10.913]                     if (file_test("-f", pathname_tmp)) {
[13:20:10.913]                       fi_tmp <- file.info(pathname_tmp)
[13:20:10.913]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:10.913]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:10.913]                         fi_tmp[["mtime"]])
[13:20:10.913]                     }
[13:20:10.913]                     tryCatch({
[13:20:10.913]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:10.913]                     }, error = function(ex) {
[13:20:10.913]                       msg <- conditionMessage(ex)
[13:20:10.913]                       fi_tmp <- file.info(pathname_tmp)
[13:20:10.913]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:10.913]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:10.913]                         fi_tmp[["mtime"]], msg)
[13:20:10.913]                       ex$message <- msg
[13:20:10.913]                       stop(ex)
[13:20:10.913]                     })
[13:20:10.913]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:10.913]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:10.913]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:10.913]                       fi_tmp <- file.info(pathname_tmp)
[13:20:10.913]                       fi <- file.info(pathname)
[13:20:10.913]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:10.913]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:10.913]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:10.913]                         fi[["size"]], fi[["mtime"]])
[13:20:10.913]                       stop(msg)
[13:20:10.913]                     }
[13:20:10.913]                     invisible(pathname)
[13:20:10.913]                   }
[13:20:10.913]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:10.913]                     rootPath = tempdir()) 
[13:20:10.913]                   {
[13:20:10.913]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:10.913]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:10.913]                       tmpdir = path, fileext = ".rds")
[13:20:10.913]                     save_rds(obj, file)
[13:20:10.913]                   }
[13:20:10.913]                   saveImmediateCondition(cond, path = "/tmp/RtmpeVCpI1/.future/immediateConditions")
[13:20:10.913]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.913]                   {
[13:20:10.913]                     inherits <- base::inherits
[13:20:10.913]                     invokeRestart <- base::invokeRestart
[13:20:10.913]                     is.null <- base::is.null
[13:20:10.913]                     muffled <- FALSE
[13:20:10.913]                     if (inherits(cond, "message")) {
[13:20:10.913]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:10.913]                       if (muffled) 
[13:20:10.913]                         invokeRestart("muffleMessage")
[13:20:10.913]                     }
[13:20:10.913]                     else if (inherits(cond, "warning")) {
[13:20:10.913]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:10.913]                       if (muffled) 
[13:20:10.913]                         invokeRestart("muffleWarning")
[13:20:10.913]                     }
[13:20:10.913]                     else if (inherits(cond, "condition")) {
[13:20:10.913]                       if (!is.null(pattern)) {
[13:20:10.913]                         computeRestarts <- base::computeRestarts
[13:20:10.913]                         grepl <- base::grepl
[13:20:10.913]                         restarts <- computeRestarts(cond)
[13:20:10.913]                         for (restart in restarts) {
[13:20:10.913]                           name <- restart$name
[13:20:10.913]                           if (is.null(name)) 
[13:20:10.913]                             next
[13:20:10.913]                           if (!grepl(pattern, name)) 
[13:20:10.913]                             next
[13:20:10.913]                           invokeRestart(restart)
[13:20:10.913]                           muffled <- TRUE
[13:20:10.913]                           break
[13:20:10.913]                         }
[13:20:10.913]                       }
[13:20:10.913]                     }
[13:20:10.913]                     invisible(muffled)
[13:20:10.913]                   }
[13:20:10.913]                   muffleCondition(cond)
[13:20:10.913]                 })
[13:20:10.913]             }))
[13:20:10.913]             future::FutureResult(value = ...future.value$value, 
[13:20:10.913]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.913]                   ...future.rng), globalenv = if (FALSE) 
[13:20:10.913]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:10.913]                     ...future.globalenv.names))
[13:20:10.913]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:10.913]         }, condition = base::local({
[13:20:10.913]             c <- base::c
[13:20:10.913]             inherits <- base::inherits
[13:20:10.913]             invokeRestart <- base::invokeRestart
[13:20:10.913]             length <- base::length
[13:20:10.913]             list <- base::list
[13:20:10.913]             seq.int <- base::seq.int
[13:20:10.913]             signalCondition <- base::signalCondition
[13:20:10.913]             sys.calls <- base::sys.calls
[13:20:10.913]             `[[` <- base::`[[`
[13:20:10.913]             `+` <- base::`+`
[13:20:10.913]             `<<-` <- base::`<<-`
[13:20:10.913]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:10.913]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:10.913]                   3L)]
[13:20:10.913]             }
[13:20:10.913]             function(cond) {
[13:20:10.913]                 is_error <- inherits(cond, "error")
[13:20:10.913]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:10.913]                   NULL)
[13:20:10.913]                 if (is_error) {
[13:20:10.913]                   sessionInformation <- function() {
[13:20:10.913]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:10.913]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:10.913]                       search = base::search(), system = base::Sys.info())
[13:20:10.913]                   }
[13:20:10.913]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.913]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:10.913]                     cond$call), session = sessionInformation(), 
[13:20:10.913]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:10.913]                   signalCondition(cond)
[13:20:10.913]                 }
[13:20:10.913]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:10.913]                 "immediateCondition"))) {
[13:20:10.913]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:10.913]                   ...future.conditions[[length(...future.conditions) + 
[13:20:10.913]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:10.913]                   if (TRUE && !signal) {
[13:20:10.913]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.913]                     {
[13:20:10.913]                       inherits <- base::inherits
[13:20:10.913]                       invokeRestart <- base::invokeRestart
[13:20:10.913]                       is.null <- base::is.null
[13:20:10.913]                       muffled <- FALSE
[13:20:10.913]                       if (inherits(cond, "message")) {
[13:20:10.913]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.913]                         if (muffled) 
[13:20:10.913]                           invokeRestart("muffleMessage")
[13:20:10.913]                       }
[13:20:10.913]                       else if (inherits(cond, "warning")) {
[13:20:10.913]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.913]                         if (muffled) 
[13:20:10.913]                           invokeRestart("muffleWarning")
[13:20:10.913]                       }
[13:20:10.913]                       else if (inherits(cond, "condition")) {
[13:20:10.913]                         if (!is.null(pattern)) {
[13:20:10.913]                           computeRestarts <- base::computeRestarts
[13:20:10.913]                           grepl <- base::grepl
[13:20:10.913]                           restarts <- computeRestarts(cond)
[13:20:10.913]                           for (restart in restarts) {
[13:20:10.913]                             name <- restart$name
[13:20:10.913]                             if (is.null(name)) 
[13:20:10.913]                               next
[13:20:10.913]                             if (!grepl(pattern, name)) 
[13:20:10.913]                               next
[13:20:10.913]                             invokeRestart(restart)
[13:20:10.913]                             muffled <- TRUE
[13:20:10.913]                             break
[13:20:10.913]                           }
[13:20:10.913]                         }
[13:20:10.913]                       }
[13:20:10.913]                       invisible(muffled)
[13:20:10.913]                     }
[13:20:10.913]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.913]                   }
[13:20:10.913]                 }
[13:20:10.913]                 else {
[13:20:10.913]                   if (TRUE) {
[13:20:10.913]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:10.913]                     {
[13:20:10.913]                       inherits <- base::inherits
[13:20:10.913]                       invokeRestart <- base::invokeRestart
[13:20:10.913]                       is.null <- base::is.null
[13:20:10.913]                       muffled <- FALSE
[13:20:10.913]                       if (inherits(cond, "message")) {
[13:20:10.913]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:10.913]                         if (muffled) 
[13:20:10.913]                           invokeRestart("muffleMessage")
[13:20:10.913]                       }
[13:20:10.913]                       else if (inherits(cond, "warning")) {
[13:20:10.913]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:10.913]                         if (muffled) 
[13:20:10.913]                           invokeRestart("muffleWarning")
[13:20:10.913]                       }
[13:20:10.913]                       else if (inherits(cond, "condition")) {
[13:20:10.913]                         if (!is.null(pattern)) {
[13:20:10.913]                           computeRestarts <- base::computeRestarts
[13:20:10.913]                           grepl <- base::grepl
[13:20:10.913]                           restarts <- computeRestarts(cond)
[13:20:10.913]                           for (restart in restarts) {
[13:20:10.913]                             name <- restart$name
[13:20:10.913]                             if (is.null(name)) 
[13:20:10.913]                               next
[13:20:10.913]                             if (!grepl(pattern, name)) 
[13:20:10.913]                               next
[13:20:10.913]                             invokeRestart(restart)
[13:20:10.913]                             muffled <- TRUE
[13:20:10.913]                             break
[13:20:10.913]                           }
[13:20:10.913]                         }
[13:20:10.913]                       }
[13:20:10.913]                       invisible(muffled)
[13:20:10.913]                     }
[13:20:10.913]                     muffleCondition(cond, pattern = "^muffle")
[13:20:10.913]                   }
[13:20:10.913]                 }
[13:20:10.913]             }
[13:20:10.913]         }))
[13:20:10.913]     }, error = function(ex) {
[13:20:10.913]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:10.913]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:10.913]                 ...future.rng), started = ...future.startTime, 
[13:20:10.913]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:10.913]             version = "1.8"), class = "FutureResult")
[13:20:10.913]     }, finally = {
[13:20:10.913]         if (!identical(...future.workdir, getwd())) 
[13:20:10.913]             setwd(...future.workdir)
[13:20:10.913]         {
[13:20:10.913]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:10.913]                 ...future.oldOptions$nwarnings <- NULL
[13:20:10.913]             }
[13:20:10.913]             base::options(...future.oldOptions)
[13:20:10.913]             if (.Platform$OS.type == "windows") {
[13:20:10.913]                 old_names <- names(...future.oldEnvVars)
[13:20:10.913]                 envs <- base::Sys.getenv()
[13:20:10.913]                 names <- names(envs)
[13:20:10.913]                 common <- intersect(names, old_names)
[13:20:10.913]                 added <- setdiff(names, old_names)
[13:20:10.913]                 removed <- setdiff(old_names, names)
[13:20:10.913]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:10.913]                   envs[common]]
[13:20:10.913]                 NAMES <- toupper(changed)
[13:20:10.913]                 args <- list()
[13:20:10.913]                 for (kk in seq_along(NAMES)) {
[13:20:10.913]                   name <- changed[[kk]]
[13:20:10.913]                   NAME <- NAMES[[kk]]
[13:20:10.913]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.913]                     next
[13:20:10.913]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.913]                 }
[13:20:10.913]                 NAMES <- toupper(added)
[13:20:10.913]                 for (kk in seq_along(NAMES)) {
[13:20:10.913]                   name <- added[[kk]]
[13:20:10.913]                   NAME <- NAMES[[kk]]
[13:20:10.913]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.913]                     next
[13:20:10.913]                   args[[name]] <- ""
[13:20:10.913]                 }
[13:20:10.913]                 NAMES <- toupper(removed)
[13:20:10.913]                 for (kk in seq_along(NAMES)) {
[13:20:10.913]                   name <- removed[[kk]]
[13:20:10.913]                   NAME <- NAMES[[kk]]
[13:20:10.913]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:10.913]                     next
[13:20:10.913]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:10.913]                 }
[13:20:10.913]                 if (length(args) > 0) 
[13:20:10.913]                   base::do.call(base::Sys.setenv, args = args)
[13:20:10.913]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:10.913]             }
[13:20:10.913]             else {
[13:20:10.913]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:10.913]             }
[13:20:10.913]             {
[13:20:10.913]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:10.913]                   0L) {
[13:20:10.913]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:10.913]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:10.913]                   base::options(opts)
[13:20:10.913]                 }
[13:20:10.913]                 {
[13:20:10.913]                   {
[13:20:10.913]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:10.913]                     NULL
[13:20:10.913]                   }
[13:20:10.913]                   options(future.plan = NULL)
[13:20:10.913]                   if (is.na(NA_character_)) 
[13:20:10.913]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:10.913]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:10.913]                   future::plan(list(function (...) 
[13:20:10.913]                   {
[13:20:10.913]                     Future(1)
[13:20:10.913]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:10.913]                 }
[13:20:10.913]             }
[13:20:10.913]         }
[13:20:10.913]     })
[13:20:10.913]     if (TRUE) {
[13:20:10.913]         base::sink(type = "output", split = FALSE)
[13:20:10.913]         if (TRUE) {
[13:20:10.913]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:10.913]         }
[13:20:10.913]         else {
[13:20:10.913]             ...future.result["stdout"] <- base::list(NULL)
[13:20:10.913]         }
[13:20:10.913]         base::close(...future.stdout)
[13:20:10.913]         ...future.stdout <- NULL
[13:20:10.913]     }
[13:20:10.913]     ...future.result$conditions <- ...future.conditions
[13:20:10.913]     ...future.result$finished <- base::Sys.time()
[13:20:10.913]     ...future.result
[13:20:10.913] }
[13:20:10.915] requestCore(): workers = 2
[13:20:10.918] MulticoreFuture started
[13:20:10.918] plan(): Setting new future strategy stack:
[13:20:10.919] List of future strategies:
[13:20:10.919] 1. sequential:
[13:20:10.919]    - args: function (..., envir = parent.frame())
[13:20:10.919]    - tweaked: FALSE
[13:20:10.919]    - call: NULL
[13:20:10.919] plan(): nbrOfWorkers() = 1
[13:20:10.921] plan(): Setting new future strategy stack:
[13:20:10.921] List of future strategies:
[13:20:10.921] 1. future:
[13:20:10.921]    - args: function (...)
[13:20:10.921]    - tweaked: FALSE
[13:20:10.921]    - call: plan(foo)
[13:20:10.922] plan(): nbrOfWorkers() = Inf
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[13:20:10.924] plan(): Setting new future strategy stack:
[13:20:10.924] List of future strategies:
[13:20:10.924] 1. FutureStrategy:
[13:20:10.924]    - args: function (..., envir = parent.frame())
[13:20:10.924]    - tweaked: FALSE
[13:20:10.924]    - call: future::plan(oplan)
[13:20:10.925] plan(): nbrOfWorkers() = 1
> 
