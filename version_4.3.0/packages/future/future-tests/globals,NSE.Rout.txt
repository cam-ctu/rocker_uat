
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:41.136] plan(): Setting new future strategy stack:
[16:12:41.136] List of future strategies:
[16:12:41.136] 1. sequential:
[16:12:41.136]    - args: function (..., envir = parent.frame())
[16:12:41.136]    - tweaked: FALSE
[16:12:41.136]    - call: future::plan("sequential")
[16:12:41.149] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[16:12:41.180] plan(): Setting new future strategy stack:
[16:12:41.180] List of future strategies:
[16:12:41.180] 1. sequential:
[16:12:41.180]    - args: function (..., envir = parent.frame())
[16:12:41.180]    - tweaked: FALSE
[16:12:41.180]    - call: plan(strategy)
[16:12:41.191] plan(): nbrOfWorkers() = 1
[16:12:41.192] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:12:41.193] Searching for globals...
[16:12:41.197] - globals found: [1] ‘getOption’
[16:12:41.197] Searching for globals ... DONE
[16:12:41.197] Resolving globals: FALSE
[16:12:41.198] 
[16:12:41.198] 
[16:12:41.198] getGlobalsAndPackages() ... DONE
[16:12:41.198] run() for ‘Future’ ...
[16:12:41.199] - state: ‘created’
[16:12:41.199] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:41.199] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:41.199] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:41.199]   - Field: ‘label’
[16:12:41.199]   - Field: ‘local’
[16:12:41.200]   - Field: ‘owner’
[16:12:41.200]   - Field: ‘envir’
[16:12:41.200]   - Field: ‘packages’
[16:12:41.200]   - Field: ‘gc’
[16:12:41.200]   - Field: ‘conditions’
[16:12:41.200]   - Field: ‘expr’
[16:12:41.200]   - Field: ‘uuid’
[16:12:41.200]   - Field: ‘seed’
[16:12:41.200]   - Field: ‘version’
[16:12:41.200]   - Field: ‘result’
[16:12:41.201]   - Field: ‘asynchronous’
[16:12:41.201]   - Field: ‘calls’
[16:12:41.201]   - Field: ‘globals’
[16:12:41.201]   - Field: ‘stdout’
[16:12:41.201]   - Field: ‘earlySignal’
[16:12:41.201]   - Field: ‘lazy’
[16:12:41.201]   - Field: ‘state’
[16:12:41.201] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:41.201] - Launch lazy future ...
[16:12:41.202] Packages needed by the future expression (n = 0): <none>
[16:12:41.202] Packages needed by future strategies (n = 0): <none>
[16:12:41.203] {
[16:12:41.203]     {
[16:12:41.203]         {
[16:12:41.203]             ...future.startTime <- base::Sys.time()
[16:12:41.203]             {
[16:12:41.203]                 {
[16:12:41.203]                   {
[16:12:41.203]                     base::local({
[16:12:41.203]                       has_future <- base::requireNamespace("future", 
[16:12:41.203]                         quietly = TRUE)
[16:12:41.203]                       if (has_future) {
[16:12:41.203]                         ns <- base::getNamespace("future")
[16:12:41.203]                         version <- ns[[".package"]][["version"]]
[16:12:41.203]                         if (is.null(version)) 
[16:12:41.203]                           version <- utils::packageVersion("future")
[16:12:41.203]                       }
[16:12:41.203]                       else {
[16:12:41.203]                         version <- NULL
[16:12:41.203]                       }
[16:12:41.203]                       if (!has_future || version < "1.8.0") {
[16:12:41.203]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.203]                           "", base::R.version$version.string), 
[16:12:41.203]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:41.203]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.203]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.203]                             "release", "version")], collapse = " "), 
[16:12:41.203]                           hostname = base::Sys.info()[["nodename"]])
[16:12:41.203]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.203]                           info)
[16:12:41.203]                         info <- base::paste(info, collapse = "; ")
[16:12:41.203]                         if (!has_future) {
[16:12:41.203]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.203]                             info)
[16:12:41.203]                         }
[16:12:41.203]                         else {
[16:12:41.203]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.203]                             info, version)
[16:12:41.203]                         }
[16:12:41.203]                         base::stop(msg)
[16:12:41.203]                       }
[16:12:41.203]                     })
[16:12:41.203]                   }
[16:12:41.203]                   options(future.plan = NULL)
[16:12:41.203]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.203]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.203]                 }
[16:12:41.203]                 ...future.workdir <- getwd()
[16:12:41.203]             }
[16:12:41.203]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.203]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.203]         }
[16:12:41.203]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:12:41.203]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.203]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:12:41.203]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.203]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.203]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.203]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.203]             base::names(...future.oldOptions))
[16:12:41.203]     }
[16:12:41.203]     if (FALSE) {
[16:12:41.203]     }
[16:12:41.203]     else {
[16:12:41.203]         if (TRUE) {
[16:12:41.203]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.203]                 open = "w")
[16:12:41.203]         }
[16:12:41.203]         else {
[16:12:41.203]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.203]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.203]         }
[16:12:41.203]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.203]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.203]             base::sink(type = "output", split = FALSE)
[16:12:41.203]             base::close(...future.stdout)
[16:12:41.203]         }, add = TRUE)
[16:12:41.203]     }
[16:12:41.203]     ...future.frame <- base::sys.nframe()
[16:12:41.203]     ...future.conditions <- base::list()
[16:12:41.203]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.203]     if (FALSE) {
[16:12:41.203]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.203]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.203]     }
[16:12:41.203]     ...future.result <- base::tryCatch({
[16:12:41.203]         base::withCallingHandlers({
[16:12:41.203]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[16:12:41.203]             future::FutureResult(value = ...future.value$value, 
[16:12:41.203]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.203]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.203]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.203]                     ...future.globalenv.names))
[16:12:41.203]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.203]         }, condition = base::local({
[16:12:41.203]             c <- base::c
[16:12:41.203]             inherits <- base::inherits
[16:12:41.203]             invokeRestart <- base::invokeRestart
[16:12:41.203]             length <- base::length
[16:12:41.203]             list <- base::list
[16:12:41.203]             seq.int <- base::seq.int
[16:12:41.203]             signalCondition <- base::signalCondition
[16:12:41.203]             sys.calls <- base::sys.calls
[16:12:41.203]             `[[` <- base::`[[`
[16:12:41.203]             `+` <- base::`+`
[16:12:41.203]             `<<-` <- base::`<<-`
[16:12:41.203]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.203]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.203]                   3L)]
[16:12:41.203]             }
[16:12:41.203]             function(cond) {
[16:12:41.203]                 is_error <- inherits(cond, "error")
[16:12:41.203]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.203]                   NULL)
[16:12:41.203]                 if (is_error) {
[16:12:41.203]                   sessionInformation <- function() {
[16:12:41.203]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.203]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.203]                       search = base::search(), system = base::Sys.info())
[16:12:41.203]                   }
[16:12:41.203]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.203]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.203]                     cond$call), session = sessionInformation(), 
[16:12:41.203]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.203]                   signalCondition(cond)
[16:12:41.203]                 }
[16:12:41.203]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.203]                 "immediateCondition"))) {
[16:12:41.203]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.203]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.203]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.203]                   if (TRUE && !signal) {
[16:12:41.203]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.203]                     {
[16:12:41.203]                       inherits <- base::inherits
[16:12:41.203]                       invokeRestart <- base::invokeRestart
[16:12:41.203]                       is.null <- base::is.null
[16:12:41.203]                       muffled <- FALSE
[16:12:41.203]                       if (inherits(cond, "message")) {
[16:12:41.203]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.203]                         if (muffled) 
[16:12:41.203]                           invokeRestart("muffleMessage")
[16:12:41.203]                       }
[16:12:41.203]                       else if (inherits(cond, "warning")) {
[16:12:41.203]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.203]                         if (muffled) 
[16:12:41.203]                           invokeRestart("muffleWarning")
[16:12:41.203]                       }
[16:12:41.203]                       else if (inherits(cond, "condition")) {
[16:12:41.203]                         if (!is.null(pattern)) {
[16:12:41.203]                           computeRestarts <- base::computeRestarts
[16:12:41.203]                           grepl <- base::grepl
[16:12:41.203]                           restarts <- computeRestarts(cond)
[16:12:41.203]                           for (restart in restarts) {
[16:12:41.203]                             name <- restart$name
[16:12:41.203]                             if (is.null(name)) 
[16:12:41.203]                               next
[16:12:41.203]                             if (!grepl(pattern, name)) 
[16:12:41.203]                               next
[16:12:41.203]                             invokeRestart(restart)
[16:12:41.203]                             muffled <- TRUE
[16:12:41.203]                             break
[16:12:41.203]                           }
[16:12:41.203]                         }
[16:12:41.203]                       }
[16:12:41.203]                       invisible(muffled)
[16:12:41.203]                     }
[16:12:41.203]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.203]                   }
[16:12:41.203]                 }
[16:12:41.203]                 else {
[16:12:41.203]                   if (TRUE) {
[16:12:41.203]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.203]                     {
[16:12:41.203]                       inherits <- base::inherits
[16:12:41.203]                       invokeRestart <- base::invokeRestart
[16:12:41.203]                       is.null <- base::is.null
[16:12:41.203]                       muffled <- FALSE
[16:12:41.203]                       if (inherits(cond, "message")) {
[16:12:41.203]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.203]                         if (muffled) 
[16:12:41.203]                           invokeRestart("muffleMessage")
[16:12:41.203]                       }
[16:12:41.203]                       else if (inherits(cond, "warning")) {
[16:12:41.203]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.203]                         if (muffled) 
[16:12:41.203]                           invokeRestart("muffleWarning")
[16:12:41.203]                       }
[16:12:41.203]                       else if (inherits(cond, "condition")) {
[16:12:41.203]                         if (!is.null(pattern)) {
[16:12:41.203]                           computeRestarts <- base::computeRestarts
[16:12:41.203]                           grepl <- base::grepl
[16:12:41.203]                           restarts <- computeRestarts(cond)
[16:12:41.203]                           for (restart in restarts) {
[16:12:41.203]                             name <- restart$name
[16:12:41.203]                             if (is.null(name)) 
[16:12:41.203]                               next
[16:12:41.203]                             if (!grepl(pattern, name)) 
[16:12:41.203]                               next
[16:12:41.203]                             invokeRestart(restart)
[16:12:41.203]                             muffled <- TRUE
[16:12:41.203]                             break
[16:12:41.203]                           }
[16:12:41.203]                         }
[16:12:41.203]                       }
[16:12:41.203]                       invisible(muffled)
[16:12:41.203]                     }
[16:12:41.203]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.203]                   }
[16:12:41.203]                 }
[16:12:41.203]             }
[16:12:41.203]         }))
[16:12:41.203]     }, error = function(ex) {
[16:12:41.203]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.203]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.203]                 ...future.rng), started = ...future.startTime, 
[16:12:41.203]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.203]             version = "1.8"), class = "FutureResult")
[16:12:41.203]     }, finally = {
[16:12:41.203]         if (!identical(...future.workdir, getwd())) 
[16:12:41.203]             setwd(...future.workdir)
[16:12:41.203]         {
[16:12:41.203]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.203]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.203]             }
[16:12:41.203]             base::options(...future.oldOptions)
[16:12:41.203]             if (.Platform$OS.type == "windows") {
[16:12:41.203]                 old_names <- names(...future.oldEnvVars)
[16:12:41.203]                 envs <- base::Sys.getenv()
[16:12:41.203]                 names <- names(envs)
[16:12:41.203]                 common <- intersect(names, old_names)
[16:12:41.203]                 added <- setdiff(names, old_names)
[16:12:41.203]                 removed <- setdiff(old_names, names)
[16:12:41.203]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.203]                   envs[common]]
[16:12:41.203]                 NAMES <- toupper(changed)
[16:12:41.203]                 args <- list()
[16:12:41.203]                 for (kk in seq_along(NAMES)) {
[16:12:41.203]                   name <- changed[[kk]]
[16:12:41.203]                   NAME <- NAMES[[kk]]
[16:12:41.203]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.203]                     next
[16:12:41.203]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.203]                 }
[16:12:41.203]                 NAMES <- toupper(added)
[16:12:41.203]                 for (kk in seq_along(NAMES)) {
[16:12:41.203]                   name <- added[[kk]]
[16:12:41.203]                   NAME <- NAMES[[kk]]
[16:12:41.203]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.203]                     next
[16:12:41.203]                   args[[name]] <- ""
[16:12:41.203]                 }
[16:12:41.203]                 NAMES <- toupper(removed)
[16:12:41.203]                 for (kk in seq_along(NAMES)) {
[16:12:41.203]                   name <- removed[[kk]]
[16:12:41.203]                   NAME <- NAMES[[kk]]
[16:12:41.203]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.203]                     next
[16:12:41.203]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.203]                 }
[16:12:41.203]                 if (length(args) > 0) 
[16:12:41.203]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.203]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.203]             }
[16:12:41.203]             else {
[16:12:41.203]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.203]             }
[16:12:41.203]             {
[16:12:41.203]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.203]                   0L) {
[16:12:41.203]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.203]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.203]                   base::options(opts)
[16:12:41.203]                 }
[16:12:41.203]                 {
[16:12:41.203]                   {
[16:12:41.203]                     NULL
[16:12:41.203]                     RNGkind("Mersenne-Twister")
[16:12:41.203]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:41.203]                       inherits = FALSE)
[16:12:41.203]                   }
[16:12:41.203]                   options(future.plan = NULL)
[16:12:41.203]                   if (is.na(NA_character_)) 
[16:12:41.203]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.203]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.203]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.203]                   {
[16:12:41.203]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.203]                     if (!future$lazy) 
[16:12:41.203]                       future <- run(future)
[16:12:41.203]                     invisible(future)
[16:12:41.203]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.203]                 }
[16:12:41.203]             }
[16:12:41.203]         }
[16:12:41.203]     })
[16:12:41.203]     if (TRUE) {
[16:12:41.203]         base::sink(type = "output", split = FALSE)
[16:12:41.203]         if (TRUE) {
[16:12:41.203]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.203]         }
[16:12:41.203]         else {
[16:12:41.203]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.203]         }
[16:12:41.203]         base::close(...future.stdout)
[16:12:41.203]         ...future.stdout <- NULL
[16:12:41.203]     }
[16:12:41.203]     ...future.result$conditions <- ...future.conditions
[16:12:41.203]     ...future.result$finished <- base::Sys.time()
[16:12:41.203]     ...future.result
[16:12:41.203] }
[16:12:41.205] plan(): Setting new future strategy stack:
[16:12:41.205] List of future strategies:
[16:12:41.205] 1. sequential:
[16:12:41.205]    - args: function (..., envir = parent.frame())
[16:12:41.205]    - tweaked: FALSE
[16:12:41.205]    - call: NULL
[16:12:41.205] plan(): nbrOfWorkers() = 1
[16:12:41.207] plan(): Setting new future strategy stack:
[16:12:41.207] List of future strategies:
[16:12:41.207] 1. sequential:
[16:12:41.207]    - args: function (..., envir = parent.frame())
[16:12:41.207]    - tweaked: FALSE
[16:12:41.207]    - call: plan(strategy)
[16:12:41.207] plan(): nbrOfWorkers() = 1
[16:12:41.207] SequentialFuture started (and completed)
[16:12:41.208] - Launch lazy future ... done
[16:12:41.208] run() for ‘SequentialFuture’ ... done
[16:12:41.208] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.209] Searching for globals...
[16:12:41.209] - globals found: [1] ‘getOption’
[16:12:41.209] Searching for globals ... DONE
[16:12:41.209] Resolving globals: FALSE
[16:12:41.210] 
[16:12:41.210] 
[16:12:41.210] getGlobalsAndPackages() ... DONE
[16:12:41.210] run() for ‘Future’ ...
[16:12:41.210] - state: ‘created’
[16:12:41.212] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:41.212] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:41.213] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:41.213]   - Field: ‘label’
[16:12:41.213]   - Field: ‘local’
[16:12:41.213]   - Field: ‘owner’
[16:12:41.213]   - Field: ‘envir’
[16:12:41.213]   - Field: ‘packages’
[16:12:41.213]   - Field: ‘gc’
[16:12:41.213]   - Field: ‘conditions’
[16:12:41.213]   - Field: ‘expr’
[16:12:41.213]   - Field: ‘uuid’
[16:12:41.214]   - Field: ‘seed’
[16:12:41.214]   - Field: ‘version’
[16:12:41.214]   - Field: ‘result’
[16:12:41.214]   - Field: ‘asynchronous’
[16:12:41.214]   - Field: ‘calls’
[16:12:41.214]   - Field: ‘globals’
[16:12:41.214]   - Field: ‘stdout’
[16:12:41.214]   - Field: ‘earlySignal’
[16:12:41.214]   - Field: ‘lazy’
[16:12:41.214]   - Field: ‘state’
[16:12:41.214] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:41.215] - Launch lazy future ...
[16:12:41.215] Packages needed by the future expression (n = 0): <none>
[16:12:41.215] Packages needed by future strategies (n = 0): <none>
[16:12:41.215] {
[16:12:41.215]     {
[16:12:41.215]         {
[16:12:41.215]             ...future.startTime <- base::Sys.time()
[16:12:41.215]             {
[16:12:41.215]                 {
[16:12:41.215]                   {
[16:12:41.215]                     base::local({
[16:12:41.215]                       has_future <- base::requireNamespace("future", 
[16:12:41.215]                         quietly = TRUE)
[16:12:41.215]                       if (has_future) {
[16:12:41.215]                         ns <- base::getNamespace("future")
[16:12:41.215]                         version <- ns[[".package"]][["version"]]
[16:12:41.215]                         if (is.null(version)) 
[16:12:41.215]                           version <- utils::packageVersion("future")
[16:12:41.215]                       }
[16:12:41.215]                       else {
[16:12:41.215]                         version <- NULL
[16:12:41.215]                       }
[16:12:41.215]                       if (!has_future || version < "1.8.0") {
[16:12:41.215]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.215]                           "", base::R.version$version.string), 
[16:12:41.215]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:41.215]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.215]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.215]                             "release", "version")], collapse = " "), 
[16:12:41.215]                           hostname = base::Sys.info()[["nodename"]])
[16:12:41.215]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.215]                           info)
[16:12:41.215]                         info <- base::paste(info, collapse = "; ")
[16:12:41.215]                         if (!has_future) {
[16:12:41.215]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.215]                             info)
[16:12:41.215]                         }
[16:12:41.215]                         else {
[16:12:41.215]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.215]                             info, version)
[16:12:41.215]                         }
[16:12:41.215]                         base::stop(msg)
[16:12:41.215]                       }
[16:12:41.215]                     })
[16:12:41.215]                   }
[16:12:41.215]                   options(future.plan = NULL)
[16:12:41.215]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.215]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.215]                 }
[16:12:41.215]                 ...future.workdir <- getwd()
[16:12:41.215]             }
[16:12:41.215]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.215]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.215]         }
[16:12:41.215]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.215]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.215]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.215]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.215]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.215]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.215]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.215]             base::names(...future.oldOptions))
[16:12:41.215]     }
[16:12:41.215]     if (FALSE) {
[16:12:41.215]     }
[16:12:41.215]     else {
[16:12:41.215]         if (TRUE) {
[16:12:41.215]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.215]                 open = "w")
[16:12:41.215]         }
[16:12:41.215]         else {
[16:12:41.215]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.215]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.215]         }
[16:12:41.215]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.215]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.215]             base::sink(type = "output", split = FALSE)
[16:12:41.215]             base::close(...future.stdout)
[16:12:41.215]         }, add = TRUE)
[16:12:41.215]     }
[16:12:41.215]     ...future.frame <- base::sys.nframe()
[16:12:41.215]     ...future.conditions <- base::list()
[16:12:41.215]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.215]     if (FALSE) {
[16:12:41.215]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.215]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.215]     }
[16:12:41.215]     ...future.result <- base::tryCatch({
[16:12:41.215]         base::withCallingHandlers({
[16:12:41.215]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[16:12:41.215]             future::FutureResult(value = ...future.value$value, 
[16:12:41.215]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.215]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.215]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.215]                     ...future.globalenv.names))
[16:12:41.215]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.215]         }, condition = base::local({
[16:12:41.215]             c <- base::c
[16:12:41.215]             inherits <- base::inherits
[16:12:41.215]             invokeRestart <- base::invokeRestart
[16:12:41.215]             length <- base::length
[16:12:41.215]             list <- base::list
[16:12:41.215]             seq.int <- base::seq.int
[16:12:41.215]             signalCondition <- base::signalCondition
[16:12:41.215]             sys.calls <- base::sys.calls
[16:12:41.215]             `[[` <- base::`[[`
[16:12:41.215]             `+` <- base::`+`
[16:12:41.215]             `<<-` <- base::`<<-`
[16:12:41.215]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.215]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.215]                   3L)]
[16:12:41.215]             }
[16:12:41.215]             function(cond) {
[16:12:41.215]                 is_error <- inherits(cond, "error")
[16:12:41.215]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.215]                   NULL)
[16:12:41.215]                 if (is_error) {
[16:12:41.215]                   sessionInformation <- function() {
[16:12:41.215]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.215]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.215]                       search = base::search(), system = base::Sys.info())
[16:12:41.215]                   }
[16:12:41.215]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.215]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.215]                     cond$call), session = sessionInformation(), 
[16:12:41.215]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.215]                   signalCondition(cond)
[16:12:41.215]                 }
[16:12:41.215]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.215]                 "immediateCondition"))) {
[16:12:41.215]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.215]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.215]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.215]                   if (TRUE && !signal) {
[16:12:41.215]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.215]                     {
[16:12:41.215]                       inherits <- base::inherits
[16:12:41.215]                       invokeRestart <- base::invokeRestart
[16:12:41.215]                       is.null <- base::is.null
[16:12:41.215]                       muffled <- FALSE
[16:12:41.215]                       if (inherits(cond, "message")) {
[16:12:41.215]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.215]                         if (muffled) 
[16:12:41.215]                           invokeRestart("muffleMessage")
[16:12:41.215]                       }
[16:12:41.215]                       else if (inherits(cond, "warning")) {
[16:12:41.215]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.215]                         if (muffled) 
[16:12:41.215]                           invokeRestart("muffleWarning")
[16:12:41.215]                       }
[16:12:41.215]                       else if (inherits(cond, "condition")) {
[16:12:41.215]                         if (!is.null(pattern)) {
[16:12:41.215]                           computeRestarts <- base::computeRestarts
[16:12:41.215]                           grepl <- base::grepl
[16:12:41.215]                           restarts <- computeRestarts(cond)
[16:12:41.215]                           for (restart in restarts) {
[16:12:41.215]                             name <- restart$name
[16:12:41.215]                             if (is.null(name)) 
[16:12:41.215]                               next
[16:12:41.215]                             if (!grepl(pattern, name)) 
[16:12:41.215]                               next
[16:12:41.215]                             invokeRestart(restart)
[16:12:41.215]                             muffled <- TRUE
[16:12:41.215]                             break
[16:12:41.215]                           }
[16:12:41.215]                         }
[16:12:41.215]                       }
[16:12:41.215]                       invisible(muffled)
[16:12:41.215]                     }
[16:12:41.215]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.215]                   }
[16:12:41.215]                 }
[16:12:41.215]                 else {
[16:12:41.215]                   if (TRUE) {
[16:12:41.215]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.215]                     {
[16:12:41.215]                       inherits <- base::inherits
[16:12:41.215]                       invokeRestart <- base::invokeRestart
[16:12:41.215]                       is.null <- base::is.null
[16:12:41.215]                       muffled <- FALSE
[16:12:41.215]                       if (inherits(cond, "message")) {
[16:12:41.215]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.215]                         if (muffled) 
[16:12:41.215]                           invokeRestart("muffleMessage")
[16:12:41.215]                       }
[16:12:41.215]                       else if (inherits(cond, "warning")) {
[16:12:41.215]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.215]                         if (muffled) 
[16:12:41.215]                           invokeRestart("muffleWarning")
[16:12:41.215]                       }
[16:12:41.215]                       else if (inherits(cond, "condition")) {
[16:12:41.215]                         if (!is.null(pattern)) {
[16:12:41.215]                           computeRestarts <- base::computeRestarts
[16:12:41.215]                           grepl <- base::grepl
[16:12:41.215]                           restarts <- computeRestarts(cond)
[16:12:41.215]                           for (restart in restarts) {
[16:12:41.215]                             name <- restart$name
[16:12:41.215]                             if (is.null(name)) 
[16:12:41.215]                               next
[16:12:41.215]                             if (!grepl(pattern, name)) 
[16:12:41.215]                               next
[16:12:41.215]                             invokeRestart(restart)
[16:12:41.215]                             muffled <- TRUE
[16:12:41.215]                             break
[16:12:41.215]                           }
[16:12:41.215]                         }
[16:12:41.215]                       }
[16:12:41.215]                       invisible(muffled)
[16:12:41.215]                     }
[16:12:41.215]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.215]                   }
[16:12:41.215]                 }
[16:12:41.215]             }
[16:12:41.215]         }))
[16:12:41.215]     }, error = function(ex) {
[16:12:41.215]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.215]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.215]                 ...future.rng), started = ...future.startTime, 
[16:12:41.215]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.215]             version = "1.8"), class = "FutureResult")
[16:12:41.215]     }, finally = {
[16:12:41.215]         if (!identical(...future.workdir, getwd())) 
[16:12:41.215]             setwd(...future.workdir)
[16:12:41.215]         {
[16:12:41.215]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.215]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.215]             }
[16:12:41.215]             base::options(...future.oldOptions)
[16:12:41.215]             if (.Platform$OS.type == "windows") {
[16:12:41.215]                 old_names <- names(...future.oldEnvVars)
[16:12:41.215]                 envs <- base::Sys.getenv()
[16:12:41.215]                 names <- names(envs)
[16:12:41.215]                 common <- intersect(names, old_names)
[16:12:41.215]                 added <- setdiff(names, old_names)
[16:12:41.215]                 removed <- setdiff(old_names, names)
[16:12:41.215]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.215]                   envs[common]]
[16:12:41.215]                 NAMES <- toupper(changed)
[16:12:41.215]                 args <- list()
[16:12:41.215]                 for (kk in seq_along(NAMES)) {
[16:12:41.215]                   name <- changed[[kk]]
[16:12:41.215]                   NAME <- NAMES[[kk]]
[16:12:41.215]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.215]                     next
[16:12:41.215]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.215]                 }
[16:12:41.215]                 NAMES <- toupper(added)
[16:12:41.215]                 for (kk in seq_along(NAMES)) {
[16:12:41.215]                   name <- added[[kk]]
[16:12:41.215]                   NAME <- NAMES[[kk]]
[16:12:41.215]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.215]                     next
[16:12:41.215]                   args[[name]] <- ""
[16:12:41.215]                 }
[16:12:41.215]                 NAMES <- toupper(removed)
[16:12:41.215]                 for (kk in seq_along(NAMES)) {
[16:12:41.215]                   name <- removed[[kk]]
[16:12:41.215]                   NAME <- NAMES[[kk]]
[16:12:41.215]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.215]                     next
[16:12:41.215]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.215]                 }
[16:12:41.215]                 if (length(args) > 0) 
[16:12:41.215]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.215]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.215]             }
[16:12:41.215]             else {
[16:12:41.215]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.215]             }
[16:12:41.215]             {
[16:12:41.215]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.215]                   0L) {
[16:12:41.215]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.215]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.215]                   base::options(opts)
[16:12:41.215]                 }
[16:12:41.215]                 {
[16:12:41.215]                   {
[16:12:41.215]                     NULL
[16:12:41.215]                     RNGkind("Mersenne-Twister")
[16:12:41.215]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:41.215]                       inherits = FALSE)
[16:12:41.215]                   }
[16:12:41.215]                   options(future.plan = NULL)
[16:12:41.215]                   if (is.na(NA_character_)) 
[16:12:41.215]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.215]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.215]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.215]                   {
[16:12:41.215]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.215]                     if (!future$lazy) 
[16:12:41.215]                       future <- run(future)
[16:12:41.215]                     invisible(future)
[16:12:41.215]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.215]                 }
[16:12:41.215]             }
[16:12:41.215]         }
[16:12:41.215]     })
[16:12:41.215]     if (TRUE) {
[16:12:41.215]         base::sink(type = "output", split = FALSE)
[16:12:41.215]         if (TRUE) {
[16:12:41.215]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.215]         }
[16:12:41.215]         else {
[16:12:41.215]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.215]         }
[16:12:41.215]         base::close(...future.stdout)
[16:12:41.215]         ...future.stdout <- NULL
[16:12:41.215]     }
[16:12:41.215]     ...future.result$conditions <- ...future.conditions
[16:12:41.215]     ...future.result$finished <- base::Sys.time()
[16:12:41.215]     ...future.result
[16:12:41.215] }
[16:12:41.217] plan(): Setting new future strategy stack:
[16:12:41.217] List of future strategies:
[16:12:41.217] 1. sequential:
[16:12:41.217]    - args: function (..., envir = parent.frame())
[16:12:41.217]    - tweaked: FALSE
[16:12:41.217]    - call: NULL
[16:12:41.217] plan(): nbrOfWorkers() = 1
[16:12:41.218] plan(): Setting new future strategy stack:
[16:12:41.218] List of future strategies:
[16:12:41.218] 1. sequential:
[16:12:41.218]    - args: function (..., envir = parent.frame())
[16:12:41.218]    - tweaked: FALSE
[16:12:41.218]    - call: plan(strategy)
[16:12:41.219] plan(): nbrOfWorkers() = 1
[16:12:41.219] SequentialFuture started (and completed)
[16:12:41.219] - Launch lazy future ... done
[16:12:41.219] run() for ‘SequentialFuture’ ... done
[16:12:41.219] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:12:41.220] Searching for globals...
[16:12:41.221] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.221] Searching for globals...
[16:12:41.222] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:12:41.222] Searching for globals ... DONE
[16:12:41.222] Resolving globals: FALSE
[16:12:41.223] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:41.224] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:41.224] - globals: [1] ‘data’
[16:12:41.224] 
[16:12:41.224] getGlobalsAndPackages() ... DONE
[16:12:41.224] run() for ‘Future’ ...
[16:12:41.224] - state: ‘created’
[16:12:41.225] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:41.225] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:41.225] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:41.225]   - Field: ‘label’
[16:12:41.225]   - Field: ‘local’
[16:12:41.225]   - Field: ‘owner’
[16:12:41.225]   - Field: ‘envir’
[16:12:41.225]   - Field: ‘packages’
[16:12:41.226]   - Field: ‘gc’
[16:12:41.226]   - Field: ‘conditions’
[16:12:41.226]   - Field: ‘expr’
[16:12:41.226]   - Field: ‘uuid’
[16:12:41.226]   - Field: ‘seed’
[16:12:41.226]   - Field: ‘version’
[16:12:41.226]   - Field: ‘result’
[16:12:41.226]   - Field: ‘asynchronous’
[16:12:41.226]   - Field: ‘calls’
[16:12:41.226]   - Field: ‘globals’
[16:12:41.226]   - Field: ‘stdout’
[16:12:41.227]   - Field: ‘earlySignal’
[16:12:41.227]   - Field: ‘lazy’
[16:12:41.227]   - Field: ‘state’
[16:12:41.227] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:41.227] - Launch lazy future ...
[16:12:41.227] Packages needed by the future expression (n = 0): <none>
[16:12:41.227] Packages needed by future strategies (n = 0): <none>
[16:12:41.228] {
[16:12:41.228]     {
[16:12:41.228]         {
[16:12:41.228]             ...future.startTime <- base::Sys.time()
[16:12:41.228]             {
[16:12:41.228]                 {
[16:12:41.228]                   {
[16:12:41.228]                     base::local({
[16:12:41.228]                       has_future <- base::requireNamespace("future", 
[16:12:41.228]                         quietly = TRUE)
[16:12:41.228]                       if (has_future) {
[16:12:41.228]                         ns <- base::getNamespace("future")
[16:12:41.228]                         version <- ns[[".package"]][["version"]]
[16:12:41.228]                         if (is.null(version)) 
[16:12:41.228]                           version <- utils::packageVersion("future")
[16:12:41.228]                       }
[16:12:41.228]                       else {
[16:12:41.228]                         version <- NULL
[16:12:41.228]                       }
[16:12:41.228]                       if (!has_future || version < "1.8.0") {
[16:12:41.228]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.228]                           "", base::R.version$version.string), 
[16:12:41.228]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:41.228]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.228]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.228]                             "release", "version")], collapse = " "), 
[16:12:41.228]                           hostname = base::Sys.info()[["nodename"]])
[16:12:41.228]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.228]                           info)
[16:12:41.228]                         info <- base::paste(info, collapse = "; ")
[16:12:41.228]                         if (!has_future) {
[16:12:41.228]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.228]                             info)
[16:12:41.228]                         }
[16:12:41.228]                         else {
[16:12:41.228]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.228]                             info, version)
[16:12:41.228]                         }
[16:12:41.228]                         base::stop(msg)
[16:12:41.228]                       }
[16:12:41.228]                     })
[16:12:41.228]                   }
[16:12:41.228]                   options(future.plan = NULL)
[16:12:41.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.228]                 }
[16:12:41.228]                 ...future.workdir <- getwd()
[16:12:41.228]             }
[16:12:41.228]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.228]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.228]         }
[16:12:41.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.228]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.228]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.228]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.228]             base::names(...future.oldOptions))
[16:12:41.228]     }
[16:12:41.228]     if (FALSE) {
[16:12:41.228]     }
[16:12:41.228]     else {
[16:12:41.228]         if (TRUE) {
[16:12:41.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.228]                 open = "w")
[16:12:41.228]         }
[16:12:41.228]         else {
[16:12:41.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.228]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.228]         }
[16:12:41.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.228]             base::sink(type = "output", split = FALSE)
[16:12:41.228]             base::close(...future.stdout)
[16:12:41.228]         }, add = TRUE)
[16:12:41.228]     }
[16:12:41.228]     ...future.frame <- base::sys.nframe()
[16:12:41.228]     ...future.conditions <- base::list()
[16:12:41.228]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.228]     if (FALSE) {
[16:12:41.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.228]     }
[16:12:41.228]     ...future.result <- base::tryCatch({
[16:12:41.228]         base::withCallingHandlers({
[16:12:41.228]             ...future.value <- base::withVisible(base::local(subset(data, 
[16:12:41.228]                 x < 3)$y))
[16:12:41.228]             future::FutureResult(value = ...future.value$value, 
[16:12:41.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.228]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.228]                     ...future.globalenv.names))
[16:12:41.228]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.228]         }, condition = base::local({
[16:12:41.228]             c <- base::c
[16:12:41.228]             inherits <- base::inherits
[16:12:41.228]             invokeRestart <- base::invokeRestart
[16:12:41.228]             length <- base::length
[16:12:41.228]             list <- base::list
[16:12:41.228]             seq.int <- base::seq.int
[16:12:41.228]             signalCondition <- base::signalCondition
[16:12:41.228]             sys.calls <- base::sys.calls
[16:12:41.228]             `[[` <- base::`[[`
[16:12:41.228]             `+` <- base::`+`
[16:12:41.228]             `<<-` <- base::`<<-`
[16:12:41.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.228]                   3L)]
[16:12:41.228]             }
[16:12:41.228]             function(cond) {
[16:12:41.228]                 is_error <- inherits(cond, "error")
[16:12:41.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.228]                   NULL)
[16:12:41.228]                 if (is_error) {
[16:12:41.228]                   sessionInformation <- function() {
[16:12:41.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.228]                       search = base::search(), system = base::Sys.info())
[16:12:41.228]                   }
[16:12:41.228]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.228]                     cond$call), session = sessionInformation(), 
[16:12:41.228]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.228]                   signalCondition(cond)
[16:12:41.228]                 }
[16:12:41.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.228]                 "immediateCondition"))) {
[16:12:41.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.228]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.228]                   if (TRUE && !signal) {
[16:12:41.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.228]                     {
[16:12:41.228]                       inherits <- base::inherits
[16:12:41.228]                       invokeRestart <- base::invokeRestart
[16:12:41.228]                       is.null <- base::is.null
[16:12:41.228]                       muffled <- FALSE
[16:12:41.228]                       if (inherits(cond, "message")) {
[16:12:41.228]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.228]                         if (muffled) 
[16:12:41.228]                           invokeRestart("muffleMessage")
[16:12:41.228]                       }
[16:12:41.228]                       else if (inherits(cond, "warning")) {
[16:12:41.228]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.228]                         if (muffled) 
[16:12:41.228]                           invokeRestart("muffleWarning")
[16:12:41.228]                       }
[16:12:41.228]                       else if (inherits(cond, "condition")) {
[16:12:41.228]                         if (!is.null(pattern)) {
[16:12:41.228]                           computeRestarts <- base::computeRestarts
[16:12:41.228]                           grepl <- base::grepl
[16:12:41.228]                           restarts <- computeRestarts(cond)
[16:12:41.228]                           for (restart in restarts) {
[16:12:41.228]                             name <- restart$name
[16:12:41.228]                             if (is.null(name)) 
[16:12:41.228]                               next
[16:12:41.228]                             if (!grepl(pattern, name)) 
[16:12:41.228]                               next
[16:12:41.228]                             invokeRestart(restart)
[16:12:41.228]                             muffled <- TRUE
[16:12:41.228]                             break
[16:12:41.228]                           }
[16:12:41.228]                         }
[16:12:41.228]                       }
[16:12:41.228]                       invisible(muffled)
[16:12:41.228]                     }
[16:12:41.228]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.228]                   }
[16:12:41.228]                 }
[16:12:41.228]                 else {
[16:12:41.228]                   if (TRUE) {
[16:12:41.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.228]                     {
[16:12:41.228]                       inherits <- base::inherits
[16:12:41.228]                       invokeRestart <- base::invokeRestart
[16:12:41.228]                       is.null <- base::is.null
[16:12:41.228]                       muffled <- FALSE
[16:12:41.228]                       if (inherits(cond, "message")) {
[16:12:41.228]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.228]                         if (muffled) 
[16:12:41.228]                           invokeRestart("muffleMessage")
[16:12:41.228]                       }
[16:12:41.228]                       else if (inherits(cond, "warning")) {
[16:12:41.228]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.228]                         if (muffled) 
[16:12:41.228]                           invokeRestart("muffleWarning")
[16:12:41.228]                       }
[16:12:41.228]                       else if (inherits(cond, "condition")) {
[16:12:41.228]                         if (!is.null(pattern)) {
[16:12:41.228]                           computeRestarts <- base::computeRestarts
[16:12:41.228]                           grepl <- base::grepl
[16:12:41.228]                           restarts <- computeRestarts(cond)
[16:12:41.228]                           for (restart in restarts) {
[16:12:41.228]                             name <- restart$name
[16:12:41.228]                             if (is.null(name)) 
[16:12:41.228]                               next
[16:12:41.228]                             if (!grepl(pattern, name)) 
[16:12:41.228]                               next
[16:12:41.228]                             invokeRestart(restart)
[16:12:41.228]                             muffled <- TRUE
[16:12:41.228]                             break
[16:12:41.228]                           }
[16:12:41.228]                         }
[16:12:41.228]                       }
[16:12:41.228]                       invisible(muffled)
[16:12:41.228]                     }
[16:12:41.228]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.228]                   }
[16:12:41.228]                 }
[16:12:41.228]             }
[16:12:41.228]         }))
[16:12:41.228]     }, error = function(ex) {
[16:12:41.228]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.228]                 ...future.rng), started = ...future.startTime, 
[16:12:41.228]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.228]             version = "1.8"), class = "FutureResult")
[16:12:41.228]     }, finally = {
[16:12:41.228]         if (!identical(...future.workdir, getwd())) 
[16:12:41.228]             setwd(...future.workdir)
[16:12:41.228]         {
[16:12:41.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.228]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.228]             }
[16:12:41.228]             base::options(...future.oldOptions)
[16:12:41.228]             if (.Platform$OS.type == "windows") {
[16:12:41.228]                 old_names <- names(...future.oldEnvVars)
[16:12:41.228]                 envs <- base::Sys.getenv()
[16:12:41.228]                 names <- names(envs)
[16:12:41.228]                 common <- intersect(names, old_names)
[16:12:41.228]                 added <- setdiff(names, old_names)
[16:12:41.228]                 removed <- setdiff(old_names, names)
[16:12:41.228]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.228]                   envs[common]]
[16:12:41.228]                 NAMES <- toupper(changed)
[16:12:41.228]                 args <- list()
[16:12:41.228]                 for (kk in seq_along(NAMES)) {
[16:12:41.228]                   name <- changed[[kk]]
[16:12:41.228]                   NAME <- NAMES[[kk]]
[16:12:41.228]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.228]                     next
[16:12:41.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.228]                 }
[16:12:41.228]                 NAMES <- toupper(added)
[16:12:41.228]                 for (kk in seq_along(NAMES)) {
[16:12:41.228]                   name <- added[[kk]]
[16:12:41.228]                   NAME <- NAMES[[kk]]
[16:12:41.228]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.228]                     next
[16:12:41.228]                   args[[name]] <- ""
[16:12:41.228]                 }
[16:12:41.228]                 NAMES <- toupper(removed)
[16:12:41.228]                 for (kk in seq_along(NAMES)) {
[16:12:41.228]                   name <- removed[[kk]]
[16:12:41.228]                   NAME <- NAMES[[kk]]
[16:12:41.228]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.228]                     next
[16:12:41.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.228]                 }
[16:12:41.228]                 if (length(args) > 0) 
[16:12:41.228]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.228]             }
[16:12:41.228]             else {
[16:12:41.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.228]             }
[16:12:41.228]             {
[16:12:41.228]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.228]                   0L) {
[16:12:41.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.228]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.228]                   base::options(opts)
[16:12:41.228]                 }
[16:12:41.228]                 {
[16:12:41.228]                   {
[16:12:41.228]                     NULL
[16:12:41.228]                     RNGkind("Mersenne-Twister")
[16:12:41.228]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:41.228]                       inherits = FALSE)
[16:12:41.228]                   }
[16:12:41.228]                   options(future.plan = NULL)
[16:12:41.228]                   if (is.na(NA_character_)) 
[16:12:41.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.228]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.228]                   {
[16:12:41.228]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.228]                     if (!future$lazy) 
[16:12:41.228]                       future <- run(future)
[16:12:41.228]                     invisible(future)
[16:12:41.228]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.228]                 }
[16:12:41.228]             }
[16:12:41.228]         }
[16:12:41.228]     })
[16:12:41.228]     if (TRUE) {
[16:12:41.228]         base::sink(type = "output", split = FALSE)
[16:12:41.228]         if (TRUE) {
[16:12:41.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.228]         }
[16:12:41.228]         else {
[16:12:41.228]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.228]         }
[16:12:41.228]         base::close(...future.stdout)
[16:12:41.228]         ...future.stdout <- NULL
[16:12:41.228]     }
[16:12:41.228]     ...future.result$conditions <- ...future.conditions
[16:12:41.228]     ...future.result$finished <- base::Sys.time()
[16:12:41.228]     ...future.result
[16:12:41.228] }
[16:12:41.229] assign_globals() ...
[16:12:41.229] List of 1
[16:12:41.229]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:41.229]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:41.229]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:41.229]  - attr(*, "where")=List of 1
[16:12:41.229]   ..$ data:<environment: R_EmptyEnv> 
[16:12:41.229]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:41.229]  - attr(*, "resolved")= logi FALSE
[16:12:41.229]  - attr(*, "total_size")= num 160
[16:12:41.229]  - attr(*, "already-done")= logi TRUE
[16:12:41.235] - copied ‘data’ to environment
[16:12:41.235] assign_globals() ... done
[16:12:41.235] plan(): Setting new future strategy stack:
[16:12:41.236] List of future strategies:
[16:12:41.236] 1. sequential:
[16:12:41.236]    - args: function (..., envir = parent.frame())
[16:12:41.236]    - tweaked: FALSE
[16:12:41.236]    - call: NULL
[16:12:41.236] plan(): nbrOfWorkers() = 1
[16:12:41.237] plan(): Setting new future strategy stack:
[16:12:41.237] List of future strategies:
[16:12:41.237] 1. sequential:
[16:12:41.237]    - args: function (..., envir = parent.frame())
[16:12:41.237]    - tweaked: FALSE
[16:12:41.237]    - call: plan(strategy)
[16:12:41.237] plan(): nbrOfWorkers() = 1
[16:12:41.237] SequentialFuture started (and completed)
[16:12:41.238] - Launch lazy future ... done
[16:12:41.238] run() for ‘SequentialFuture’ ... done
[16:12:41.238] plan(): Setting new future strategy stack:
[16:12:41.238] List of future strategies:
[16:12:41.238] 1. sequential:
[16:12:41.238]    - args: function (..., envir = parent.frame())
[16:12:41.238]    - tweaked: FALSE
[16:12:41.238]    - call: plan(list(sequential, strategy))
[16:12:41.238] 2. sequential:
[16:12:41.238]    - args: function (..., envir = parent.frame())
[16:12:41.238]    - tweaked: FALSE
[16:12:41.238]    - call: plan(list(sequential, strategy))
[16:12:41.238] plan(): nbrOfWorkers() = 1
[16:12:41.239] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.239] Searching for globals...
[16:12:41.246] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[16:12:41.246] Searching for globals ... DONE
[16:12:41.246] Resolving globals: FALSE
[16:12:41.246] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:41.247] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:41.247] - globals: [1] ‘data’
[16:12:41.247] - packages: [1] ‘future’
[16:12:41.247] getGlobalsAndPackages() ... DONE
[16:12:41.248] run() for ‘Future’ ...
[16:12:41.248] - state: ‘created’
[16:12:41.248] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:41.248] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:41.248] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:41.248]   - Field: ‘label’
[16:12:41.248]   - Field: ‘local’
[16:12:41.248]   - Field: ‘owner’
[16:12:41.249]   - Field: ‘envir’
[16:12:41.249]   - Field: ‘packages’
[16:12:41.249]   - Field: ‘gc’
[16:12:41.249]   - Field: ‘conditions’
[16:12:41.249]   - Field: ‘expr’
[16:12:41.249]   - Field: ‘uuid’
[16:12:41.249]   - Field: ‘seed’
[16:12:41.249]   - Field: ‘version’
[16:12:41.249]   - Field: ‘result’
[16:12:41.249]   - Field: ‘asynchronous’
[16:12:41.249]   - Field: ‘calls’
[16:12:41.250]   - Field: ‘globals’
[16:12:41.250]   - Field: ‘stdout’
[16:12:41.250]   - Field: ‘earlySignal’
[16:12:41.250]   - Field: ‘lazy’
[16:12:41.250]   - Field: ‘state’
[16:12:41.250] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:41.250] - Launch lazy future ...
[16:12:41.250] Packages needed by the future expression (n = 1): ‘future’
[16:12:41.250] Packages needed by future strategies (n = 1): ‘future’
[16:12:41.251] {
[16:12:41.251]     {
[16:12:41.251]         {
[16:12:41.251]             ...future.startTime <- base::Sys.time()
[16:12:41.251]             {
[16:12:41.251]                 {
[16:12:41.251]                   {
[16:12:41.251]                     {
[16:12:41.251]                       base::local({
[16:12:41.251]                         has_future <- base::requireNamespace("future", 
[16:12:41.251]                           quietly = TRUE)
[16:12:41.251]                         if (has_future) {
[16:12:41.251]                           ns <- base::getNamespace("future")
[16:12:41.251]                           version <- ns[[".package"]][["version"]]
[16:12:41.251]                           if (is.null(version)) 
[16:12:41.251]                             version <- utils::packageVersion("future")
[16:12:41.251]                         }
[16:12:41.251]                         else {
[16:12:41.251]                           version <- NULL
[16:12:41.251]                         }
[16:12:41.251]                         if (!has_future || version < "1.8.0") {
[16:12:41.251]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.251]                             "", base::R.version$version.string), 
[16:12:41.251]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.251]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.251]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.251]                               "release", "version")], collapse = " "), 
[16:12:41.251]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.251]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.251]                             info)
[16:12:41.251]                           info <- base::paste(info, collapse = "; ")
[16:12:41.251]                           if (!has_future) {
[16:12:41.251]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.251]                               info)
[16:12:41.251]                           }
[16:12:41.251]                           else {
[16:12:41.251]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.251]                               info, version)
[16:12:41.251]                           }
[16:12:41.251]                           base::stop(msg)
[16:12:41.251]                         }
[16:12:41.251]                       })
[16:12:41.251]                     }
[16:12:41.251]                     base::local({
[16:12:41.251]                       for (pkg in "future") {
[16:12:41.251]                         base::loadNamespace(pkg)
[16:12:41.251]                         base::library(pkg, character.only = TRUE)
[16:12:41.251]                       }
[16:12:41.251]                     })
[16:12:41.251]                   }
[16:12:41.251]                   options(future.plan = NULL)
[16:12:41.251]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.251]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.251]                   {
[16:12:41.251]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.251]                     if (!future$lazy) 
[16:12:41.251]                       future <- run(future)
[16:12:41.251]                     invisible(future)
[16:12:41.251]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.251]                 }
[16:12:41.251]                 ...future.workdir <- getwd()
[16:12:41.251]             }
[16:12:41.251]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.251]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.251]         }
[16:12:41.251]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.251]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.251]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.251]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.251]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.251]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.251]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.251]             base::names(...future.oldOptions))
[16:12:41.251]     }
[16:12:41.251]     if (FALSE) {
[16:12:41.251]     }
[16:12:41.251]     else {
[16:12:41.251]         if (TRUE) {
[16:12:41.251]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.251]                 open = "w")
[16:12:41.251]         }
[16:12:41.251]         else {
[16:12:41.251]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.251]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.251]         }
[16:12:41.251]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.251]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.251]             base::sink(type = "output", split = FALSE)
[16:12:41.251]             base::close(...future.stdout)
[16:12:41.251]         }, add = TRUE)
[16:12:41.251]     }
[16:12:41.251]     ...future.frame <- base::sys.nframe()
[16:12:41.251]     ...future.conditions <- base::list()
[16:12:41.251]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.251]     if (FALSE) {
[16:12:41.251]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.251]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.251]     }
[16:12:41.251]     ...future.result <- base::tryCatch({
[16:12:41.251]         base::withCallingHandlers({
[16:12:41.251]             ...future.value <- base::withVisible(base::local({
[16:12:41.251]                 a %<-% subset(data, x < 3)$y
[16:12:41.251]                 a
[16:12:41.251]             }))
[16:12:41.251]             future::FutureResult(value = ...future.value$value, 
[16:12:41.251]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.251]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.251]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.251]                     ...future.globalenv.names))
[16:12:41.251]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.251]         }, condition = base::local({
[16:12:41.251]             c <- base::c
[16:12:41.251]             inherits <- base::inherits
[16:12:41.251]             invokeRestart <- base::invokeRestart
[16:12:41.251]             length <- base::length
[16:12:41.251]             list <- base::list
[16:12:41.251]             seq.int <- base::seq.int
[16:12:41.251]             signalCondition <- base::signalCondition
[16:12:41.251]             sys.calls <- base::sys.calls
[16:12:41.251]             `[[` <- base::`[[`
[16:12:41.251]             `+` <- base::`+`
[16:12:41.251]             `<<-` <- base::`<<-`
[16:12:41.251]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.251]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.251]                   3L)]
[16:12:41.251]             }
[16:12:41.251]             function(cond) {
[16:12:41.251]                 is_error <- inherits(cond, "error")
[16:12:41.251]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.251]                   NULL)
[16:12:41.251]                 if (is_error) {
[16:12:41.251]                   sessionInformation <- function() {
[16:12:41.251]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.251]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.251]                       search = base::search(), system = base::Sys.info())
[16:12:41.251]                   }
[16:12:41.251]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.251]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.251]                     cond$call), session = sessionInformation(), 
[16:12:41.251]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.251]                   signalCondition(cond)
[16:12:41.251]                 }
[16:12:41.251]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.251]                 "immediateCondition"))) {
[16:12:41.251]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.251]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.251]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.251]                   if (TRUE && !signal) {
[16:12:41.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.251]                     {
[16:12:41.251]                       inherits <- base::inherits
[16:12:41.251]                       invokeRestart <- base::invokeRestart
[16:12:41.251]                       is.null <- base::is.null
[16:12:41.251]                       muffled <- FALSE
[16:12:41.251]                       if (inherits(cond, "message")) {
[16:12:41.251]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.251]                         if (muffled) 
[16:12:41.251]                           invokeRestart("muffleMessage")
[16:12:41.251]                       }
[16:12:41.251]                       else if (inherits(cond, "warning")) {
[16:12:41.251]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.251]                         if (muffled) 
[16:12:41.251]                           invokeRestart("muffleWarning")
[16:12:41.251]                       }
[16:12:41.251]                       else if (inherits(cond, "condition")) {
[16:12:41.251]                         if (!is.null(pattern)) {
[16:12:41.251]                           computeRestarts <- base::computeRestarts
[16:12:41.251]                           grepl <- base::grepl
[16:12:41.251]                           restarts <- computeRestarts(cond)
[16:12:41.251]                           for (restart in restarts) {
[16:12:41.251]                             name <- restart$name
[16:12:41.251]                             if (is.null(name)) 
[16:12:41.251]                               next
[16:12:41.251]                             if (!grepl(pattern, name)) 
[16:12:41.251]                               next
[16:12:41.251]                             invokeRestart(restart)
[16:12:41.251]                             muffled <- TRUE
[16:12:41.251]                             break
[16:12:41.251]                           }
[16:12:41.251]                         }
[16:12:41.251]                       }
[16:12:41.251]                       invisible(muffled)
[16:12:41.251]                     }
[16:12:41.251]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.251]                   }
[16:12:41.251]                 }
[16:12:41.251]                 else {
[16:12:41.251]                   if (TRUE) {
[16:12:41.251]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.251]                     {
[16:12:41.251]                       inherits <- base::inherits
[16:12:41.251]                       invokeRestart <- base::invokeRestart
[16:12:41.251]                       is.null <- base::is.null
[16:12:41.251]                       muffled <- FALSE
[16:12:41.251]                       if (inherits(cond, "message")) {
[16:12:41.251]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.251]                         if (muffled) 
[16:12:41.251]                           invokeRestart("muffleMessage")
[16:12:41.251]                       }
[16:12:41.251]                       else if (inherits(cond, "warning")) {
[16:12:41.251]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.251]                         if (muffled) 
[16:12:41.251]                           invokeRestart("muffleWarning")
[16:12:41.251]                       }
[16:12:41.251]                       else if (inherits(cond, "condition")) {
[16:12:41.251]                         if (!is.null(pattern)) {
[16:12:41.251]                           computeRestarts <- base::computeRestarts
[16:12:41.251]                           grepl <- base::grepl
[16:12:41.251]                           restarts <- computeRestarts(cond)
[16:12:41.251]                           for (restart in restarts) {
[16:12:41.251]                             name <- restart$name
[16:12:41.251]                             if (is.null(name)) 
[16:12:41.251]                               next
[16:12:41.251]                             if (!grepl(pattern, name)) 
[16:12:41.251]                               next
[16:12:41.251]                             invokeRestart(restart)
[16:12:41.251]                             muffled <- TRUE
[16:12:41.251]                             break
[16:12:41.251]                           }
[16:12:41.251]                         }
[16:12:41.251]                       }
[16:12:41.251]                       invisible(muffled)
[16:12:41.251]                     }
[16:12:41.251]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.251]                   }
[16:12:41.251]                 }
[16:12:41.251]             }
[16:12:41.251]         }))
[16:12:41.251]     }, error = function(ex) {
[16:12:41.251]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.251]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.251]                 ...future.rng), started = ...future.startTime, 
[16:12:41.251]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.251]             version = "1.8"), class = "FutureResult")
[16:12:41.251]     }, finally = {
[16:12:41.251]         if (!identical(...future.workdir, getwd())) 
[16:12:41.251]             setwd(...future.workdir)
[16:12:41.251]         {
[16:12:41.251]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.251]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.251]             }
[16:12:41.251]             base::options(...future.oldOptions)
[16:12:41.251]             if (.Platform$OS.type == "windows") {
[16:12:41.251]                 old_names <- names(...future.oldEnvVars)
[16:12:41.251]                 envs <- base::Sys.getenv()
[16:12:41.251]                 names <- names(envs)
[16:12:41.251]                 common <- intersect(names, old_names)
[16:12:41.251]                 added <- setdiff(names, old_names)
[16:12:41.251]                 removed <- setdiff(old_names, names)
[16:12:41.251]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.251]                   envs[common]]
[16:12:41.251]                 NAMES <- toupper(changed)
[16:12:41.251]                 args <- list()
[16:12:41.251]                 for (kk in seq_along(NAMES)) {
[16:12:41.251]                   name <- changed[[kk]]
[16:12:41.251]                   NAME <- NAMES[[kk]]
[16:12:41.251]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.251]                     next
[16:12:41.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.251]                 }
[16:12:41.251]                 NAMES <- toupper(added)
[16:12:41.251]                 for (kk in seq_along(NAMES)) {
[16:12:41.251]                   name <- added[[kk]]
[16:12:41.251]                   NAME <- NAMES[[kk]]
[16:12:41.251]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.251]                     next
[16:12:41.251]                   args[[name]] <- ""
[16:12:41.251]                 }
[16:12:41.251]                 NAMES <- toupper(removed)
[16:12:41.251]                 for (kk in seq_along(NAMES)) {
[16:12:41.251]                   name <- removed[[kk]]
[16:12:41.251]                   NAME <- NAMES[[kk]]
[16:12:41.251]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.251]                     next
[16:12:41.251]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.251]                 }
[16:12:41.251]                 if (length(args) > 0) 
[16:12:41.251]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.251]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.251]             }
[16:12:41.251]             else {
[16:12:41.251]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.251]             }
[16:12:41.251]             {
[16:12:41.251]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.251]                   0L) {
[16:12:41.251]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.251]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.251]                   base::options(opts)
[16:12:41.251]                 }
[16:12:41.251]                 {
[16:12:41.251]                   {
[16:12:41.251]                     NULL
[16:12:41.251]                     RNGkind("Mersenne-Twister")
[16:12:41.251]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:41.251]                       inherits = FALSE)
[16:12:41.251]                   }
[16:12:41.251]                   options(future.plan = NULL)
[16:12:41.251]                   if (is.na(NA_character_)) 
[16:12:41.251]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.251]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.251]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.251]                   {
[16:12:41.251]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.251]                     if (!future$lazy) 
[16:12:41.251]                       future <- run(future)
[16:12:41.251]                     invisible(future)
[16:12:41.251]                   }, function (..., envir = parent.frame()) 
[16:12:41.251]                   {
[16:12:41.251]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.251]                     if (!future$lazy) 
[16:12:41.251]                       future <- run(future)
[16:12:41.251]                     invisible(future)
[16:12:41.251]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.251]                 }
[16:12:41.251]             }
[16:12:41.251]         }
[16:12:41.251]     })
[16:12:41.251]     if (TRUE) {
[16:12:41.251]         base::sink(type = "output", split = FALSE)
[16:12:41.251]         if (TRUE) {
[16:12:41.251]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.251]         }
[16:12:41.251]         else {
[16:12:41.251]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.251]         }
[16:12:41.251]         base::close(...future.stdout)
[16:12:41.251]         ...future.stdout <- NULL
[16:12:41.251]     }
[16:12:41.251]     ...future.result$conditions <- ...future.conditions
[16:12:41.251]     ...future.result$finished <- base::Sys.time()
[16:12:41.251]     ...future.result
[16:12:41.251] }
[16:12:41.253] assign_globals() ...
[16:12:41.253] List of 1
[16:12:41.253]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:41.253]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:41.253]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:41.253]  - attr(*, "where")=List of 1
[16:12:41.253]   ..$ data:<environment: R_EmptyEnv> 
[16:12:41.253]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:41.253]  - attr(*, "resolved")= logi FALSE
[16:12:41.253]  - attr(*, "total_size")= num 160
[16:12:41.253]  - attr(*, "already-done")= logi TRUE
[16:12:41.256] - copied ‘data’ to environment
[16:12:41.256] assign_globals() ... done
[16:12:41.256] plan(): Setting new future strategy stack:
[16:12:41.256] List of future strategies:
[16:12:41.256] 1. sequential:
[16:12:41.256]    - args: function (..., envir = parent.frame())
[16:12:41.256]    - tweaked: FALSE
[16:12:41.256]    - call: plan(list(sequential, strategy))
[16:12:41.257] plan(): nbrOfWorkers() = 1
[16:12:41.285] plan(): Setting new future strategy stack:
[16:12:41.285] List of future strategies:
[16:12:41.285] 1. sequential:
[16:12:41.285]    - args: function (..., envir = parent.frame())
[16:12:41.285]    - tweaked: FALSE
[16:12:41.285]    - call: plan(list(sequential, strategy))
[16:12:41.285] 2. sequential:
[16:12:41.285]    - args: function (..., envir = parent.frame())
[16:12:41.285]    - tweaked: FALSE
[16:12:41.285]    - call: plan(list(sequential, strategy))
[16:12:41.286] plan(): nbrOfWorkers() = 1
[16:12:41.286] SequentialFuture started (and completed)
[16:12:41.286] signalConditions() ...
[16:12:41.286]  - include = ‘immediateCondition’
[16:12:41.286]  - exclude = 
[16:12:41.286]  - resignal = FALSE
[16:12:41.286]  - Number of conditions: 53
[16:12:41.287] signalConditions() ... done
[16:12:41.287] - Launch lazy future ... done
[16:12:41.287] run() for ‘SequentialFuture’ ... done
[16:12:41.287] signalConditions() ...
[16:12:41.287]  - include = ‘immediateCondition’
[16:12:41.287]  - exclude = 
[16:12:41.287]  - resignal = FALSE
[16:12:41.287]  - Number of conditions: 53
[16:12:41.287] signalConditions() ... done
[16:12:41.287] Future state: ‘finished’
[16:12:41.288] signalConditions() ...
[16:12:41.288]  - include = ‘condition’
[16:12:41.288]  - exclude = ‘immediateCondition’
[16:12:41.288]  - resignal = TRUE
[16:12:41.288]  - Number of conditions: 53
[16:12:41.288]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.257] getGlobalsAndPackages() ...
[16:12:41.288]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.288]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.271] Searching for globals...
[16:12:41.288]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.272] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:12:41.288]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.273] Searching for globals ... DONE
[16:12:41.289]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.273] Resolving globals: FALSE
[16:12:41.290]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.273] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:41.290]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:41.290]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] - globals: [1] ‘data’
[16:12:41.290]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] 
[16:12:41.290]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] getGlobalsAndPackages() ... DONE
[16:12:41.290]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] run() for ‘Future’ ...
[16:12:41.291]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] - state: ‘created’
[16:12:41.291]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.274] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:41.291]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:41.291]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:41.291]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘label’
[16:12:41.291]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘local’
[16:12:41.291]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘owner’
[16:12:41.291]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘envir’
[16:12:41.292]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘packages’
[16:12:41.292]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘gc’
[16:12:41.292]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.275]   - Field: ‘conditions’
[16:12:41.292]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘expr’
[16:12:41.292]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘uuid’
[16:12:41.292]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘seed’
[16:12:41.292]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘version’
[16:12:41.293]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘result’
[16:12:41.293]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘asynchronous’
[16:12:41.293]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘calls’
[16:12:41.293]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘globals’
[16:12:41.293]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.276]   - Field: ‘stdout’
[16:12:41.293]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277]   - Field: ‘earlySignal’
[16:12:41.293]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277]   - Field: ‘lazy’
[16:12:41.293]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277]   - Field: ‘state’
[16:12:41.294]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:41.294]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277] - Launch lazy future ...
[16:12:41.294]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277] Packages needed by the future expression (n = 0): <none>
[16:12:41.294]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.277] Packages needed by future strategies (n = 0): <none>
[16:12:41.294]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.278] {
[16:12:41.278]     {
[16:12:41.278]         {
[16:12:41.278]             ...future.startTime <- base::Sys.time()
[16:12:41.278]             {
[16:12:41.278]                 {
[16:12:41.278]                   {
[16:12:41.278]                     base::local({
[16:12:41.278]                       has_future <- base::requireNamespace("future", 
[16:12:41.278]                         quietly = TRUE)
[16:12:41.278]                       if (has_future) {
[16:12:41.278]                         ns <- base::getNamespace("future")
[16:12:41.278]                         version <- ns[[".package"]][["version"]]
[16:12:41.278]                         if (is.null(version)) 
[16:12:41.278]                           version <- utils::packageVersion("future")
[16:12:41.278]                       }
[16:12:41.278]                       else {
[16:12:41.278]                         version <- NULL
[16:12:41.278]                       }
[16:12:41.278]                       if (!has_future || version < "1.8.0") {
[16:12:41.278]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.278]                           "", base::R.version$version.string), 
[16:12:41.278]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:41.278]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.278]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.278]                             "release", "version")], collapse = " "), 
[16:12:41.278]                           hostname = base::Sys.info()[["nodename"]])
[16:12:41.278]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.278]                           info)
[16:12:41.278]                         info <- base::paste(info, collapse = "; ")
[16:12:41.278]                         if (!has_future) {
[16:12:41.278]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.278]                             info)
[16:12:41.278]                         }
[16:12:41.278]                         else {
[16:12:41.278]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.278]                             info, version)
[16:12:41.278]                         }
[16:12:41.278]                         base::stop(msg)
[16:12:41.278]                       }
[16:12:41.278]                     })
[16:12:41.278]                   }
[16:12:41.278]                   options(future.plan = NULL)
[16:12:41.278]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.278]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.278]                 }
[16:12:41.278]                 ...future.workdir <- getwd()
[16:12:41.278]             }
[16:12:41.278]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.278]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.278]         }
[16:12:41.278]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.278]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.278]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.278]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.278]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.278]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.278]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.278]             base::names(...future.oldOptions))
[16:12:41.278]     }
[16:12:41.278]     if (FALSE) {
[16:12:41.278]     }
[16:12:41.278]     else {
[16:12:41.278]         if (TRUE) {
[16:12:41.278]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.278]                 open = "w")
[16:12:41.278]         }
[16:12:41.278]         else {
[16:12:41.278]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.278]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.278]         }
[16:12:41.278]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.278]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.278]             base::sink(type = "output", split = FALSE)
[16:12:41.278]             base::close(...future.stdout)
[16:12:41.278]         }, add = TRUE)
[16:12:41.278]     }
[16:12:41.278]     ...future.frame <- base::sys.nframe()
[16:12:41.278]     ...future.conditions <- base::list()
[16:12:41.278]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.278]     if (FALSE) {
[16:12:41.278]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.278]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.278]     }
[16:12:41.278]     ...future.result <- base::tryCatch({
[16:12:41.278]         base::withCallingHandlers({
[16:12:41.278]             ...future.value <- base::withVisible(base::local(subset(data, 
[16:12:41.278]                 x < 3)$y))
[16:12:41.278]             future::FutureResult(value = ...future.value$value, 
[16:12:41.278]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.278]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.278]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.278]                     ...future.globalenv.names))
[16:12:41.278]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.278]         }, condition = base::local({
[16:12:41.278]             c <- base::c
[16:12:41.278]             inherits <- base::inherits
[16:12:41.278]             invokeRestart <- base::invokeRestart
[16:12:41.278]             length <- base::length
[16:12:41.278]             list <- base::list
[16:12:41.278]             seq.int <- base::seq.int
[16:12:41.278]             signalCondition <- base::signalCondition
[16:12:41.278]             sys.calls <- base::sys.calls
[16:12:41.278]             `[[` <- base::`[[`
[16:12:41.278]             `+` <- base::`+`
[16:12:41.278]             `<<-` <- base::`<<-`
[16:12:41.278]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.278]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.278]                   3L)]
[16:12:41.278]             }
[16:12:41.278]             function(cond) {
[16:12:41.278]                 is_error <- inherits(cond, "error")
[16:12:41.278]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.278]                   NULL)
[16:12:41.278]                 if (is_error) {
[16:12:41.278]                   sessionInformation <- function() {
[16:12:41.278]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.278]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.278]                       search = base::search(), system = base::Sys.info())
[16:12:41.278]                   }
[16:12:41.278]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.278]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.278]                     cond$call), session = sessionInformation(), 
[16:12:41.278]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.278]                   signalCondition(cond)
[16:12:41.278]                 }
[16:12:41.278]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.278]                 "immediateCondition"))) {
[16:12:41.278]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.278]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.278]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.278]                   if (TRUE && !signal) {
[16:12:41.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.278]                     {
[16:12:41.278]                       inherits <- base::inherits
[16:12:41.278]                       invokeRestart <- base::invokeRestart
[16:12:41.278]                       is.null <- base::is.null
[16:12:41.278]                       muffled <- FALSE
[16:12:41.278]                       if (inherits(cond, "message")) {
[16:12:41.278]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.278]                         if (muffled) 
[16:12:41.278]                           invokeRestart("muffleMessage")
[16:12:41.278]                       }
[16:12:41.278]                       else if (inherits(cond, "warning")) {
[16:12:41.278]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.278]                         if (muffled) 
[16:12:41.278]                           invokeRestart("muffleWarning")
[16:12:41.278]                       }
[16:12:41.278]                       else if (inherits(cond, "condition")) {
[16:12:41.278]                         if (!is.null(pattern)) {
[16:12:41.278]                           computeRestarts <- base::computeRestarts
[16:12:41.278]                           grepl <- base::grepl
[16:12:41.278]                           restarts <- computeRestarts(cond)
[16:12:41.278]                           for (restart in restarts) {
[16:12:41.278]                             name <- restart$name
[16:12:41.278]                             if (is.null(name)) 
[16:12:41.278]                               next
[16:12:41.278]                             if (!grepl(pattern, name)) 
[16:12:41.278]                               next
[16:12:41.278]                             invokeRestart(restart)
[16:12:41.278]                             muffled <- TRUE
[16:12:41.278]                             break
[16:12:41.278]                           }
[16:12:41.278]                         }
[16:12:41.278]                       }
[16:12:41.278]                       invisible(muffled)
[16:12:41.278]                     }
[16:12:41.278]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.278]                   }
[16:12:41.278]                 }
[16:12:41.278]                 else {
[16:12:41.278]                   if (TRUE) {
[16:12:41.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.278]                     {
[16:12:41.278]                       inherits <- base::inherits
[16:12:41.278]                       invokeRestart <- base::invokeRestart
[16:12:41.278]                       is.null <- base::is.null
[16:12:41.278]                       muffled <- FALSE
[16:12:41.278]                       if (inherits(cond, "message")) {
[16:12:41.278]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.278]                         if (muffled) 
[16:12:41.278]                           invokeRestart("muffleMessage")
[16:12:41.278]                       }
[16:12:41.278]                       else if (inherits(cond, "warning")) {
[16:12:41.278]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.278]                         if (muffled) 
[16:12:41.278]                           invokeRestart("muffleWarning")
[16:12:41.278]                       }
[16:12:41.278]                       else if (inherits(cond, "condition")) {
[16:12:41.278]                         if (!is.null(pattern)) {
[16:12:41.278]                           computeRestarts <- base::computeRestarts
[16:12:41.278]                           grepl <- base::grepl
[16:12:41.278]                           restarts <- computeRestarts(cond)
[16:12:41.278]                           for (restart in restarts) {
[16:12:41.278]                             name <- restart$name
[16:12:41.278]                             if (is.null(name)) 
[16:12:41.278]                               next
[16:12:41.278]                             if (!grepl(pattern, name)) 
[16:12:41.278]                               next
[16:12:41.278]                             invokeRestart(restart)
[16:12:41.278]                             muffled <- TRUE
[16:12:41.278]                             break
[16:12:41.278]                           }
[16:12:41.278]                         }
[16:12:41.278]                       }
[16:12:41.278]                       invisible(muffled)
[16:12:41.278]                     }
[16:12:41.278]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.278]                   }
[16:12:41.278]                 }
[16:12:41.278]             }
[16:12:41.278]         }))
[16:12:41.278]     }, error = function(ex) {
[16:12:41.278]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.278]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.278]                 ...future.rng), started = ...future.startTime, 
[16:12:41.278]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.278]             version = "1.8"), class = "FutureResult")
[16:12:41.278]     }, finally = {
[16:12:41.278]         if (!identical(...future.workdir, getwd())) 
[16:12:41.278]             setwd(...future.workdir)
[16:12:41.278]         {
[16:12:41.278]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.278]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.278]             }
[16:12:41.278]             base::options(...future.oldOptions)
[16:12:41.278]             if (.Platform$OS.type == "windows") {
[16:12:41.278]                 old_names <- names(...future.oldEnvVars)
[16:12:41.278]                 envs <- base::Sys.getenv()
[16:12:41.278]                 names <- names(envs)
[16:12:41.278]                 common <- intersect(names, old_names)
[16:12:41.278]                 added <- setdiff(names, old_names)
[16:12:41.278]                 removed <- setdiff(old_names, names)
[16:12:41.278]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.278]                   envs[common]]
[16:12:41.278]                 NAMES <- toupper(changed)
[16:12:41.278]                 args <- list()
[16:12:41.278]                 for (kk in seq_along(NAMES)) {
[16:12:41.278]                   name <- changed[[kk]]
[16:12:41.278]                   NAME <- NAMES[[kk]]
[16:12:41.278]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.278]                     next
[16:12:41.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.278]                 }
[16:12:41.278]                 NAMES <- toupper(added)
[16:12:41.278]                 for (kk in seq_along(NAMES)) {
[16:12:41.278]                   name <- added[[kk]]
[16:12:41.278]                   NAME <- NAMES[[kk]]
[16:12:41.278]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.278]                     next
[16:12:41.278]                   args[[name]] <- ""
[16:12:41.278]                 }
[16:12:41.278]                 NAMES <- toupper(removed)
[16:12:41.278]                 for (kk in seq_along(NAMES)) {
[16:12:41.278]                   name <- removed[[kk]]
[16:12:41.278]                   NAME <- NAMES[[kk]]
[16:12:41.278]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.278]                     next
[16:12:41.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.278]                 }
[16:12:41.278]                 if (length(args) > 0) 
[16:12:41.278]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.278]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.278]             }
[16:12:41.278]             else {
[16:12:41.278]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.278]             }
[16:12:41.278]             {
[16:12:41.278]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.278]                   0L) {
[16:12:41.278]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.278]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.278]                   base::options(opts)
[16:12:41.278]                 }
[16:12:41.278]                 {
[16:12:41.278]                   {
[16:12:41.278]                     NULL
[16:12:41.278]                     RNGkind("Mersenne-Twister")
[16:12:41.278]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:41.278]                       inherits = FALSE)
[16:12:41.278]                   }
[16:12:41.278]                   options(future.plan = NULL)
[16:12:41.278]                   if (is.na(NA_character_)) 
[16:12:41.278]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.278]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.278]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.278]                   {
[16:12:41.278]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.278]                     if (!future$lazy) 
[16:12:41.278]                       future <- run(future)
[16:12:41.278]                     invisible(future)
[16:12:41.278]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.278]                 }
[16:12:41.278]             }
[16:12:41.278]         }
[16:12:41.278]     })
[16:12:41.278]     if (TRUE) {
[16:12:41.278]         base::sink(type = "output", split = FALSE)
[16:12:41.278]         if (TRUE) {
[16:12:41.278]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.278]         }
[16:12:41.278]         else {
[16:12:41.278]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.278]         }
[16:12:41.278]         base::close(...future.stdout)
[16:12:41.278]         ...future.stdout <- NULL
[16:12:41.278]     }
[16:12:41.278]     ...future.result$conditions <- ...future.conditions
[16:12:41.278]     ...future.result$finished <- base::Sys.time()
[16:12:41.278]     ...future.result
[16:12:41.278] }
[16:12:41.294]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.279] assign_globals() ...
[16:12:41.294]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.279] List of 1
[16:12:41.279]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:41.279]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:41.279]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:41.279]  - attr(*, "where")=List of 1
[16:12:41.279]   ..$ data:<environment: R_EmptyEnv> 
[16:12:41.279]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:41.279]  - attr(*, "resolved")= logi FALSE
[16:12:41.279]  - attr(*, "total_size")= num 160
[16:12:41.279]  - attr(*, "already-done")= logi TRUE
[16:12:41.294]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.282] - copied ‘data’ to environment
[16:12:41.295]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.282] assign_globals() ... done
[16:12:41.295]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.283] plan(): Setting new future strategy stack:
[16:12:41.295]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.283] List of future strategies:
[16:12:41.283] 1. sequential:
[16:12:41.283]    - args: function (..., envir = parent.frame())
[16:12:41.283]    - tweaked: FALSE
[16:12:41.283]    - call: NULL
[16:12:41.295]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.283] plan(): nbrOfWorkers() = 1
[16:12:41.295]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.284] plan(): Setting new future strategy stack:
[16:12:41.295]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.284] List of future strategies:
[16:12:41.284] 1. sequential:
[16:12:41.284]    - args: function (..., envir = parent.frame())
[16:12:41.284]    - tweaked: FALSE
[16:12:41.284]    - call: plan(list(sequential, strategy))
[16:12:41.295]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.284] plan(): nbrOfWorkers() = 1
[16:12:41.295]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.285] SequentialFuture started (and completed)
[16:12:41.296]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.285] - Launch lazy future ... done
[16:12:41.296]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.285] run() for ‘SequentialFuture’ ... done
[16:12:41.296] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[16:12:41.296] plan(): Setting new future strategy stack:
[16:12:41.296] List of future strategies:
[16:12:41.296] 1. multicore:
[16:12:41.296]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.296]    - tweaked: FALSE
[16:12:41.296]    - call: plan(strategy)
[16:12:41.300] plan(): nbrOfWorkers() = 2
[16:12:41.300] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:12:41.301] Searching for globals...
[16:12:41.301] - globals found: [1] ‘getOption’
[16:12:41.301] Searching for globals ... DONE
[16:12:41.301] Resolving globals: FALSE
[16:12:41.302] 
[16:12:41.302] 
[16:12:41.302] getGlobalsAndPackages() ... DONE
[16:12:41.302] run() for ‘Future’ ...
[16:12:41.302] - state: ‘created’
[16:12:41.302] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:41.306] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:41.306] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:41.306]   - Field: ‘label’
[16:12:41.306]   - Field: ‘local’
[16:12:41.306]   - Field: ‘owner’
[16:12:41.306]   - Field: ‘envir’
[16:12:41.306]   - Field: ‘workers’
[16:12:41.306]   - Field: ‘packages’
[16:12:41.307]   - Field: ‘gc’
[16:12:41.307]   - Field: ‘job’
[16:12:41.307]   - Field: ‘conditions’
[16:12:41.307]   - Field: ‘expr’
[16:12:41.307]   - Field: ‘uuid’
[16:12:41.307]   - Field: ‘seed’
[16:12:41.307]   - Field: ‘version’
[16:12:41.307]   - Field: ‘result’
[16:12:41.307]   - Field: ‘asynchronous’
[16:12:41.307]   - Field: ‘calls’
[16:12:41.307]   - Field: ‘globals’
[16:12:41.307]   - Field: ‘stdout’
[16:12:41.308]   - Field: ‘earlySignal’
[16:12:41.308]   - Field: ‘lazy’
[16:12:41.308]   - Field: ‘state’
[16:12:41.308] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:41.308] - Launch lazy future ...
[16:12:41.309] Packages needed by the future expression (n = 0): <none>
[16:12:41.309] Packages needed by future strategies (n = 0): <none>
[16:12:41.309] {
[16:12:41.309]     {
[16:12:41.309]         {
[16:12:41.309]             ...future.startTime <- base::Sys.time()
[16:12:41.309]             {
[16:12:41.309]                 {
[16:12:41.309]                   {
[16:12:41.309]                     {
[16:12:41.309]                       base::local({
[16:12:41.309]                         has_future <- base::requireNamespace("future", 
[16:12:41.309]                           quietly = TRUE)
[16:12:41.309]                         if (has_future) {
[16:12:41.309]                           ns <- base::getNamespace("future")
[16:12:41.309]                           version <- ns[[".package"]][["version"]]
[16:12:41.309]                           if (is.null(version)) 
[16:12:41.309]                             version <- utils::packageVersion("future")
[16:12:41.309]                         }
[16:12:41.309]                         else {
[16:12:41.309]                           version <- NULL
[16:12:41.309]                         }
[16:12:41.309]                         if (!has_future || version < "1.8.0") {
[16:12:41.309]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.309]                             "", base::R.version$version.string), 
[16:12:41.309]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.309]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.309]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.309]                               "release", "version")], collapse = " "), 
[16:12:41.309]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.309]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.309]                             info)
[16:12:41.309]                           info <- base::paste(info, collapse = "; ")
[16:12:41.309]                           if (!has_future) {
[16:12:41.309]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.309]                               info)
[16:12:41.309]                           }
[16:12:41.309]                           else {
[16:12:41.309]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.309]                               info, version)
[16:12:41.309]                           }
[16:12:41.309]                           base::stop(msg)
[16:12:41.309]                         }
[16:12:41.309]                       })
[16:12:41.309]                     }
[16:12:41.309]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:41.309]                     base::options(mc.cores = 1L)
[16:12:41.309]                   }
[16:12:41.309]                   options(future.plan = NULL)
[16:12:41.309]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.309]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.309]                 }
[16:12:41.309]                 ...future.workdir <- getwd()
[16:12:41.309]             }
[16:12:41.309]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.309]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.309]         }
[16:12:41.309]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:12:41.309]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.309]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:12:41.309]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.309]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.309]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.309]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.309]             base::names(...future.oldOptions))
[16:12:41.309]     }
[16:12:41.309]     if (FALSE) {
[16:12:41.309]     }
[16:12:41.309]     else {
[16:12:41.309]         if (TRUE) {
[16:12:41.309]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.309]                 open = "w")
[16:12:41.309]         }
[16:12:41.309]         else {
[16:12:41.309]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.309]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.309]         }
[16:12:41.309]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.309]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.309]             base::sink(type = "output", split = FALSE)
[16:12:41.309]             base::close(...future.stdout)
[16:12:41.309]         }, add = TRUE)
[16:12:41.309]     }
[16:12:41.309]     ...future.frame <- base::sys.nframe()
[16:12:41.309]     ...future.conditions <- base::list()
[16:12:41.309]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.309]     if (FALSE) {
[16:12:41.309]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.309]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.309]     }
[16:12:41.309]     ...future.result <- base::tryCatch({
[16:12:41.309]         base::withCallingHandlers({
[16:12:41.309]             ...future.value <- base::withVisible(base::local({
[16:12:41.309]                 withCallingHandlers({
[16:12:41.309]                   getOption("future.globals.onMissing")
[16:12:41.309]                 }, immediateCondition = function(cond) {
[16:12:41.309]                   save_rds <- function (object, pathname, ...) 
[16:12:41.309]                   {
[16:12:41.309]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:41.309]                     if (file_test("-f", pathname_tmp)) {
[16:12:41.309]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.309]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:41.309]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.309]                         fi_tmp[["mtime"]])
[16:12:41.309]                     }
[16:12:41.309]                     tryCatch({
[16:12:41.309]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:41.309]                     }, error = function(ex) {
[16:12:41.309]                       msg <- conditionMessage(ex)
[16:12:41.309]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.309]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:41.309]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.309]                         fi_tmp[["mtime"]], msg)
[16:12:41.309]                       ex$message <- msg
[16:12:41.309]                       stop(ex)
[16:12:41.309]                     })
[16:12:41.309]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:41.309]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:41.309]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:41.309]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.309]                       fi <- file.info(pathname)
[16:12:41.309]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:41.309]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.309]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:41.309]                         fi[["size"]], fi[["mtime"]])
[16:12:41.309]                       stop(msg)
[16:12:41.309]                     }
[16:12:41.309]                     invisible(pathname)
[16:12:41.309]                   }
[16:12:41.309]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:41.309]                     rootPath = tempdir()) 
[16:12:41.309]                   {
[16:12:41.309]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:41.309]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:41.309]                       tmpdir = path, fileext = ".rds")
[16:12:41.309]                     save_rds(obj, file)
[16:12:41.309]                   }
[16:12:41.309]                   saveImmediateCondition(cond, path = "/tmp/RtmprHXcW8/.future/immediateConditions")
[16:12:41.309]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.309]                   {
[16:12:41.309]                     inherits <- base::inherits
[16:12:41.309]                     invokeRestart <- base::invokeRestart
[16:12:41.309]                     is.null <- base::is.null
[16:12:41.309]                     muffled <- FALSE
[16:12:41.309]                     if (inherits(cond, "message")) {
[16:12:41.309]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:41.309]                       if (muffled) 
[16:12:41.309]                         invokeRestart("muffleMessage")
[16:12:41.309]                     }
[16:12:41.309]                     else if (inherits(cond, "warning")) {
[16:12:41.309]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:41.309]                       if (muffled) 
[16:12:41.309]                         invokeRestart("muffleWarning")
[16:12:41.309]                     }
[16:12:41.309]                     else if (inherits(cond, "condition")) {
[16:12:41.309]                       if (!is.null(pattern)) {
[16:12:41.309]                         computeRestarts <- base::computeRestarts
[16:12:41.309]                         grepl <- base::grepl
[16:12:41.309]                         restarts <- computeRestarts(cond)
[16:12:41.309]                         for (restart in restarts) {
[16:12:41.309]                           name <- restart$name
[16:12:41.309]                           if (is.null(name)) 
[16:12:41.309]                             next
[16:12:41.309]                           if (!grepl(pattern, name)) 
[16:12:41.309]                             next
[16:12:41.309]                           invokeRestart(restart)
[16:12:41.309]                           muffled <- TRUE
[16:12:41.309]                           break
[16:12:41.309]                         }
[16:12:41.309]                       }
[16:12:41.309]                     }
[16:12:41.309]                     invisible(muffled)
[16:12:41.309]                   }
[16:12:41.309]                   muffleCondition(cond)
[16:12:41.309]                 })
[16:12:41.309]             }))
[16:12:41.309]             future::FutureResult(value = ...future.value$value, 
[16:12:41.309]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.309]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.309]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.309]                     ...future.globalenv.names))
[16:12:41.309]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.309]         }, condition = base::local({
[16:12:41.309]             c <- base::c
[16:12:41.309]             inherits <- base::inherits
[16:12:41.309]             invokeRestart <- base::invokeRestart
[16:12:41.309]             length <- base::length
[16:12:41.309]             list <- base::list
[16:12:41.309]             seq.int <- base::seq.int
[16:12:41.309]             signalCondition <- base::signalCondition
[16:12:41.309]             sys.calls <- base::sys.calls
[16:12:41.309]             `[[` <- base::`[[`
[16:12:41.309]             `+` <- base::`+`
[16:12:41.309]             `<<-` <- base::`<<-`
[16:12:41.309]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.309]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.309]                   3L)]
[16:12:41.309]             }
[16:12:41.309]             function(cond) {
[16:12:41.309]                 is_error <- inherits(cond, "error")
[16:12:41.309]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.309]                   NULL)
[16:12:41.309]                 if (is_error) {
[16:12:41.309]                   sessionInformation <- function() {
[16:12:41.309]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.309]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.309]                       search = base::search(), system = base::Sys.info())
[16:12:41.309]                   }
[16:12:41.309]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.309]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.309]                     cond$call), session = sessionInformation(), 
[16:12:41.309]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.309]                   signalCondition(cond)
[16:12:41.309]                 }
[16:12:41.309]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.309]                 "immediateCondition"))) {
[16:12:41.309]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.309]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.309]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.309]                   if (TRUE && !signal) {
[16:12:41.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.309]                     {
[16:12:41.309]                       inherits <- base::inherits
[16:12:41.309]                       invokeRestart <- base::invokeRestart
[16:12:41.309]                       is.null <- base::is.null
[16:12:41.309]                       muffled <- FALSE
[16:12:41.309]                       if (inherits(cond, "message")) {
[16:12:41.309]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.309]                         if (muffled) 
[16:12:41.309]                           invokeRestart("muffleMessage")
[16:12:41.309]                       }
[16:12:41.309]                       else if (inherits(cond, "warning")) {
[16:12:41.309]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.309]                         if (muffled) 
[16:12:41.309]                           invokeRestart("muffleWarning")
[16:12:41.309]                       }
[16:12:41.309]                       else if (inherits(cond, "condition")) {
[16:12:41.309]                         if (!is.null(pattern)) {
[16:12:41.309]                           computeRestarts <- base::computeRestarts
[16:12:41.309]                           grepl <- base::grepl
[16:12:41.309]                           restarts <- computeRestarts(cond)
[16:12:41.309]                           for (restart in restarts) {
[16:12:41.309]                             name <- restart$name
[16:12:41.309]                             if (is.null(name)) 
[16:12:41.309]                               next
[16:12:41.309]                             if (!grepl(pattern, name)) 
[16:12:41.309]                               next
[16:12:41.309]                             invokeRestart(restart)
[16:12:41.309]                             muffled <- TRUE
[16:12:41.309]                             break
[16:12:41.309]                           }
[16:12:41.309]                         }
[16:12:41.309]                       }
[16:12:41.309]                       invisible(muffled)
[16:12:41.309]                     }
[16:12:41.309]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.309]                   }
[16:12:41.309]                 }
[16:12:41.309]                 else {
[16:12:41.309]                   if (TRUE) {
[16:12:41.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.309]                     {
[16:12:41.309]                       inherits <- base::inherits
[16:12:41.309]                       invokeRestart <- base::invokeRestart
[16:12:41.309]                       is.null <- base::is.null
[16:12:41.309]                       muffled <- FALSE
[16:12:41.309]                       if (inherits(cond, "message")) {
[16:12:41.309]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.309]                         if (muffled) 
[16:12:41.309]                           invokeRestart("muffleMessage")
[16:12:41.309]                       }
[16:12:41.309]                       else if (inherits(cond, "warning")) {
[16:12:41.309]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.309]                         if (muffled) 
[16:12:41.309]                           invokeRestart("muffleWarning")
[16:12:41.309]                       }
[16:12:41.309]                       else if (inherits(cond, "condition")) {
[16:12:41.309]                         if (!is.null(pattern)) {
[16:12:41.309]                           computeRestarts <- base::computeRestarts
[16:12:41.309]                           grepl <- base::grepl
[16:12:41.309]                           restarts <- computeRestarts(cond)
[16:12:41.309]                           for (restart in restarts) {
[16:12:41.309]                             name <- restart$name
[16:12:41.309]                             if (is.null(name)) 
[16:12:41.309]                               next
[16:12:41.309]                             if (!grepl(pattern, name)) 
[16:12:41.309]                               next
[16:12:41.309]                             invokeRestart(restart)
[16:12:41.309]                             muffled <- TRUE
[16:12:41.309]                             break
[16:12:41.309]                           }
[16:12:41.309]                         }
[16:12:41.309]                       }
[16:12:41.309]                       invisible(muffled)
[16:12:41.309]                     }
[16:12:41.309]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.309]                   }
[16:12:41.309]                 }
[16:12:41.309]             }
[16:12:41.309]         }))
[16:12:41.309]     }, error = function(ex) {
[16:12:41.309]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.309]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.309]                 ...future.rng), started = ...future.startTime, 
[16:12:41.309]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.309]             version = "1.8"), class = "FutureResult")
[16:12:41.309]     }, finally = {
[16:12:41.309]         if (!identical(...future.workdir, getwd())) 
[16:12:41.309]             setwd(...future.workdir)
[16:12:41.309]         {
[16:12:41.309]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.309]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.309]             }
[16:12:41.309]             base::options(...future.oldOptions)
[16:12:41.309]             if (.Platform$OS.type == "windows") {
[16:12:41.309]                 old_names <- names(...future.oldEnvVars)
[16:12:41.309]                 envs <- base::Sys.getenv()
[16:12:41.309]                 names <- names(envs)
[16:12:41.309]                 common <- intersect(names, old_names)
[16:12:41.309]                 added <- setdiff(names, old_names)
[16:12:41.309]                 removed <- setdiff(old_names, names)
[16:12:41.309]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.309]                   envs[common]]
[16:12:41.309]                 NAMES <- toupper(changed)
[16:12:41.309]                 args <- list()
[16:12:41.309]                 for (kk in seq_along(NAMES)) {
[16:12:41.309]                   name <- changed[[kk]]
[16:12:41.309]                   NAME <- NAMES[[kk]]
[16:12:41.309]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.309]                     next
[16:12:41.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.309]                 }
[16:12:41.309]                 NAMES <- toupper(added)
[16:12:41.309]                 for (kk in seq_along(NAMES)) {
[16:12:41.309]                   name <- added[[kk]]
[16:12:41.309]                   NAME <- NAMES[[kk]]
[16:12:41.309]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.309]                     next
[16:12:41.309]                   args[[name]] <- ""
[16:12:41.309]                 }
[16:12:41.309]                 NAMES <- toupper(removed)
[16:12:41.309]                 for (kk in seq_along(NAMES)) {
[16:12:41.309]                   name <- removed[[kk]]
[16:12:41.309]                   NAME <- NAMES[[kk]]
[16:12:41.309]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.309]                     next
[16:12:41.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.309]                 }
[16:12:41.309]                 if (length(args) > 0) 
[16:12:41.309]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.309]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.309]             }
[16:12:41.309]             else {
[16:12:41.309]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.309]             }
[16:12:41.309]             {
[16:12:41.309]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.309]                   0L) {
[16:12:41.309]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.309]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.309]                   base::options(opts)
[16:12:41.309]                 }
[16:12:41.309]                 {
[16:12:41.309]                   {
[16:12:41.309]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:41.309]                     NULL
[16:12:41.309]                   }
[16:12:41.309]                   options(future.plan = NULL)
[16:12:41.309]                   if (is.na(NA_character_)) 
[16:12:41.309]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.309]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.309]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:41.309]                     envir = parent.frame()) 
[16:12:41.309]                   {
[16:12:41.309]                     default_workers <- missing(workers)
[16:12:41.309]                     if (is.function(workers)) 
[16:12:41.309]                       workers <- workers()
[16:12:41.309]                     workers <- structure(as.integer(workers), 
[16:12:41.309]                       class = class(workers))
[16:12:41.309]                     stop_if_not(is.finite(workers), workers >= 
[16:12:41.309]                       1L)
[16:12:41.309]                     if ((workers == 1L && !inherits(workers, 
[16:12:41.309]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:41.309]                       if (default_workers) 
[16:12:41.309]                         supportsMulticore(warn = TRUE)
[16:12:41.309]                       return(sequential(..., envir = envir))
[16:12:41.309]                     }
[16:12:41.309]                     oopts <- options(mc.cores = workers)
[16:12:41.309]                     on.exit(options(oopts))
[16:12:41.309]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:41.309]                       envir = envir)
[16:12:41.309]                     if (!future$lazy) 
[16:12:41.309]                       future <- run(future)
[16:12:41.309]                     invisible(future)
[16:12:41.309]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.309]                 }
[16:12:41.309]             }
[16:12:41.309]         }
[16:12:41.309]     })
[16:12:41.309]     if (TRUE) {
[16:12:41.309]         base::sink(type = "output", split = FALSE)
[16:12:41.309]         if (TRUE) {
[16:12:41.309]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.309]         }
[16:12:41.309]         else {
[16:12:41.309]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.309]         }
[16:12:41.309]         base::close(...future.stdout)
[16:12:41.309]         ...future.stdout <- NULL
[16:12:41.309]     }
[16:12:41.309]     ...future.result$conditions <- ...future.conditions
[16:12:41.309]     ...future.result$finished <- base::Sys.time()
[16:12:41.309]     ...future.result
[16:12:41.309] }
[16:12:41.312] requestCore(): workers = 2
[16:12:41.314] MulticoreFuture started
[16:12:41.315] - Launch lazy future ... done
[16:12:41.315] run() for ‘MulticoreFuture’ ... done
[16:12:41.315] plan(): Setting new future strategy stack:
[16:12:41.315] List of future strategies:
[16:12:41.315] 1. sequential:
[16:12:41.315]    - args: function (..., envir = parent.frame())
[16:12:41.315]    - tweaked: FALSE
[16:12:41.315]    - call: NULL
[16:12:41.316] plan(): nbrOfWorkers() = 1
[16:12:41.318] plan(): Setting new future strategy stack:
[16:12:41.318] List of future strategies:
[16:12:41.318] 1. multicore:
[16:12:41.318]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.318]    - tweaked: FALSE
[16:12:41.318]    - call: plan(strategy)
[16:12:41.323] plan(): nbrOfWorkers() = 2
[16:12:41.327] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.328] Searching for globals...
[16:12:41.328] - globals found: [1] ‘getOption’
[16:12:41.329] Searching for globals ... DONE
[16:12:41.329] Resolving globals: FALSE
[16:12:41.329] 
[16:12:41.329] 
[16:12:41.329] getGlobalsAndPackages() ... DONE
[16:12:41.330] run() for ‘Future’ ...
[16:12:41.330] - state: ‘created’
[16:12:41.330] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:41.334] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:41.334] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:41.334]   - Field: ‘label’
[16:12:41.334]   - Field: ‘local’
[16:12:41.334]   - Field: ‘owner’
[16:12:41.334]   - Field: ‘envir’
[16:12:41.337]   - Field: ‘workers’
[16:12:41.337]   - Field: ‘packages’
[16:12:41.337]   - Field: ‘gc’
[16:12:41.337]   - Field: ‘job’
[16:12:41.337]   - Field: ‘conditions’
[16:12:41.337]   - Field: ‘expr’
[16:12:41.337]   - Field: ‘uuid’
[16:12:41.338]   - Field: ‘seed’
[16:12:41.338]   - Field: ‘version’
[16:12:41.338]   - Field: ‘result’
[16:12:41.338]   - Field: ‘asynchronous’
[16:12:41.338]   - Field: ‘calls’
[16:12:41.338]   - Field: ‘globals’
[16:12:41.338]   - Field: ‘stdout’
[16:12:41.339]   - Field: ‘earlySignal’
[16:12:41.339]   - Field: ‘lazy’
[16:12:41.339]   - Field: ‘state’
[16:12:41.339] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:41.339] - Launch lazy future ...
[16:12:41.339] Packages needed by the future expression (n = 0): <none>
[16:12:41.340] Packages needed by future strategies (n = 0): <none>
[16:12:41.340] {
[16:12:41.340]     {
[16:12:41.340]         {
[16:12:41.340]             ...future.startTime <- base::Sys.time()
[16:12:41.340]             {
[16:12:41.340]                 {
[16:12:41.340]                   {
[16:12:41.340]                     {
[16:12:41.340]                       base::local({
[16:12:41.340]                         has_future <- base::requireNamespace("future", 
[16:12:41.340]                           quietly = TRUE)
[16:12:41.340]                         if (has_future) {
[16:12:41.340]                           ns <- base::getNamespace("future")
[16:12:41.340]                           version <- ns[[".package"]][["version"]]
[16:12:41.340]                           if (is.null(version)) 
[16:12:41.340]                             version <- utils::packageVersion("future")
[16:12:41.340]                         }
[16:12:41.340]                         else {
[16:12:41.340]                           version <- NULL
[16:12:41.340]                         }
[16:12:41.340]                         if (!has_future || version < "1.8.0") {
[16:12:41.340]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.340]                             "", base::R.version$version.string), 
[16:12:41.340]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.340]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.340]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.340]                               "release", "version")], collapse = " "), 
[16:12:41.340]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.340]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.340]                             info)
[16:12:41.340]                           info <- base::paste(info, collapse = "; ")
[16:12:41.340]                           if (!has_future) {
[16:12:41.340]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.340]                               info)
[16:12:41.340]                           }
[16:12:41.340]                           else {
[16:12:41.340]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.340]                               info, version)
[16:12:41.340]                           }
[16:12:41.340]                           base::stop(msg)
[16:12:41.340]                         }
[16:12:41.340]                       })
[16:12:41.340]                     }
[16:12:41.340]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:41.340]                     base::options(mc.cores = 1L)
[16:12:41.340]                   }
[16:12:41.340]                   options(future.plan = NULL)
[16:12:41.340]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.340]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.340]                 }
[16:12:41.340]                 ...future.workdir <- getwd()
[16:12:41.340]             }
[16:12:41.340]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.340]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.340]         }
[16:12:41.340]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.340]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.340]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.340]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.340]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.340]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.340]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.340]             base::names(...future.oldOptions))
[16:12:41.340]     }
[16:12:41.340]     if (FALSE) {
[16:12:41.340]     }
[16:12:41.340]     else {
[16:12:41.340]         if (TRUE) {
[16:12:41.340]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.340]                 open = "w")
[16:12:41.340]         }
[16:12:41.340]         else {
[16:12:41.340]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.340]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.340]         }
[16:12:41.340]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.340]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.340]             base::sink(type = "output", split = FALSE)
[16:12:41.340]             base::close(...future.stdout)
[16:12:41.340]         }, add = TRUE)
[16:12:41.340]     }
[16:12:41.340]     ...future.frame <- base::sys.nframe()
[16:12:41.340]     ...future.conditions <- base::list()
[16:12:41.340]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.340]     if (FALSE) {
[16:12:41.340]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.340]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.340]     }
[16:12:41.340]     ...future.result <- base::tryCatch({
[16:12:41.340]         base::withCallingHandlers({
[16:12:41.340]             ...future.value <- base::withVisible(base::local({
[16:12:41.340]                 withCallingHandlers({
[16:12:41.340]                   getOption("future.globals.onMissing")
[16:12:41.340]                 }, immediateCondition = function(cond) {
[16:12:41.340]                   save_rds <- function (object, pathname, ...) 
[16:12:41.340]                   {
[16:12:41.340]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:41.340]                     if (file_test("-f", pathname_tmp)) {
[16:12:41.340]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.340]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:41.340]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.340]                         fi_tmp[["mtime"]])
[16:12:41.340]                     }
[16:12:41.340]                     tryCatch({
[16:12:41.340]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:41.340]                     }, error = function(ex) {
[16:12:41.340]                       msg <- conditionMessage(ex)
[16:12:41.340]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.340]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:41.340]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.340]                         fi_tmp[["mtime"]], msg)
[16:12:41.340]                       ex$message <- msg
[16:12:41.340]                       stop(ex)
[16:12:41.340]                     })
[16:12:41.340]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:41.340]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:41.340]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:41.340]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.340]                       fi <- file.info(pathname)
[16:12:41.340]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:41.340]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.340]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:41.340]                         fi[["size"]], fi[["mtime"]])
[16:12:41.340]                       stop(msg)
[16:12:41.340]                     }
[16:12:41.340]                     invisible(pathname)
[16:12:41.340]                   }
[16:12:41.340]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:41.340]                     rootPath = tempdir()) 
[16:12:41.340]                   {
[16:12:41.340]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:41.340]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:41.340]                       tmpdir = path, fileext = ".rds")
[16:12:41.340]                     save_rds(obj, file)
[16:12:41.340]                   }
[16:12:41.340]                   saveImmediateCondition(cond, path = "/tmp/RtmprHXcW8/.future/immediateConditions")
[16:12:41.340]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.340]                   {
[16:12:41.340]                     inherits <- base::inherits
[16:12:41.340]                     invokeRestart <- base::invokeRestart
[16:12:41.340]                     is.null <- base::is.null
[16:12:41.340]                     muffled <- FALSE
[16:12:41.340]                     if (inherits(cond, "message")) {
[16:12:41.340]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:41.340]                       if (muffled) 
[16:12:41.340]                         invokeRestart("muffleMessage")
[16:12:41.340]                     }
[16:12:41.340]                     else if (inherits(cond, "warning")) {
[16:12:41.340]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:41.340]                       if (muffled) 
[16:12:41.340]                         invokeRestart("muffleWarning")
[16:12:41.340]                     }
[16:12:41.340]                     else if (inherits(cond, "condition")) {
[16:12:41.340]                       if (!is.null(pattern)) {
[16:12:41.340]                         computeRestarts <- base::computeRestarts
[16:12:41.340]                         grepl <- base::grepl
[16:12:41.340]                         restarts <- computeRestarts(cond)
[16:12:41.340]                         for (restart in restarts) {
[16:12:41.340]                           name <- restart$name
[16:12:41.340]                           if (is.null(name)) 
[16:12:41.340]                             next
[16:12:41.340]                           if (!grepl(pattern, name)) 
[16:12:41.340]                             next
[16:12:41.340]                           invokeRestart(restart)
[16:12:41.340]                           muffled <- TRUE
[16:12:41.340]                           break
[16:12:41.340]                         }
[16:12:41.340]                       }
[16:12:41.340]                     }
[16:12:41.340]                     invisible(muffled)
[16:12:41.340]                   }
[16:12:41.340]                   muffleCondition(cond)
[16:12:41.340]                 })
[16:12:41.340]             }))
[16:12:41.340]             future::FutureResult(value = ...future.value$value, 
[16:12:41.340]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.340]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.340]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.340]                     ...future.globalenv.names))
[16:12:41.340]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.340]         }, condition = base::local({
[16:12:41.340]             c <- base::c
[16:12:41.340]             inherits <- base::inherits
[16:12:41.340]             invokeRestart <- base::invokeRestart
[16:12:41.340]             length <- base::length
[16:12:41.340]             list <- base::list
[16:12:41.340]             seq.int <- base::seq.int
[16:12:41.340]             signalCondition <- base::signalCondition
[16:12:41.340]             sys.calls <- base::sys.calls
[16:12:41.340]             `[[` <- base::`[[`
[16:12:41.340]             `+` <- base::`+`
[16:12:41.340]             `<<-` <- base::`<<-`
[16:12:41.340]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.340]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.340]                   3L)]
[16:12:41.340]             }
[16:12:41.340]             function(cond) {
[16:12:41.340]                 is_error <- inherits(cond, "error")
[16:12:41.340]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.340]                   NULL)
[16:12:41.340]                 if (is_error) {
[16:12:41.340]                   sessionInformation <- function() {
[16:12:41.340]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.340]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.340]                       search = base::search(), system = base::Sys.info())
[16:12:41.340]                   }
[16:12:41.340]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.340]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.340]                     cond$call), session = sessionInformation(), 
[16:12:41.340]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.340]                   signalCondition(cond)
[16:12:41.340]                 }
[16:12:41.340]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.340]                 "immediateCondition"))) {
[16:12:41.340]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.340]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.340]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.340]                   if (TRUE && !signal) {
[16:12:41.340]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.340]                     {
[16:12:41.340]                       inherits <- base::inherits
[16:12:41.340]                       invokeRestart <- base::invokeRestart
[16:12:41.340]                       is.null <- base::is.null
[16:12:41.340]                       muffled <- FALSE
[16:12:41.340]                       if (inherits(cond, "message")) {
[16:12:41.340]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.340]                         if (muffled) 
[16:12:41.340]                           invokeRestart("muffleMessage")
[16:12:41.340]                       }
[16:12:41.340]                       else if (inherits(cond, "warning")) {
[16:12:41.340]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.340]                         if (muffled) 
[16:12:41.340]                           invokeRestart("muffleWarning")
[16:12:41.340]                       }
[16:12:41.340]                       else if (inherits(cond, "condition")) {
[16:12:41.340]                         if (!is.null(pattern)) {
[16:12:41.340]                           computeRestarts <- base::computeRestarts
[16:12:41.340]                           grepl <- base::grepl
[16:12:41.340]                           restarts <- computeRestarts(cond)
[16:12:41.340]                           for (restart in restarts) {
[16:12:41.340]                             name <- restart$name
[16:12:41.340]                             if (is.null(name)) 
[16:12:41.340]                               next
[16:12:41.340]                             if (!grepl(pattern, name)) 
[16:12:41.340]                               next
[16:12:41.340]                             invokeRestart(restart)
[16:12:41.340]                             muffled <- TRUE
[16:12:41.340]                             break
[16:12:41.340]                           }
[16:12:41.340]                         }
[16:12:41.340]                       }
[16:12:41.340]                       invisible(muffled)
[16:12:41.340]                     }
[16:12:41.340]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.340]                   }
[16:12:41.340]                 }
[16:12:41.340]                 else {
[16:12:41.340]                   if (TRUE) {
[16:12:41.340]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.340]                     {
[16:12:41.340]                       inherits <- base::inherits
[16:12:41.340]                       invokeRestart <- base::invokeRestart
[16:12:41.340]                       is.null <- base::is.null
[16:12:41.340]                       muffled <- FALSE
[16:12:41.340]                       if (inherits(cond, "message")) {
[16:12:41.340]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.340]                         if (muffled) 
[16:12:41.340]                           invokeRestart("muffleMessage")
[16:12:41.340]                       }
[16:12:41.340]                       else if (inherits(cond, "warning")) {
[16:12:41.340]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.340]                         if (muffled) 
[16:12:41.340]                           invokeRestart("muffleWarning")
[16:12:41.340]                       }
[16:12:41.340]                       else if (inherits(cond, "condition")) {
[16:12:41.340]                         if (!is.null(pattern)) {
[16:12:41.340]                           computeRestarts <- base::computeRestarts
[16:12:41.340]                           grepl <- base::grepl
[16:12:41.340]                           restarts <- computeRestarts(cond)
[16:12:41.340]                           for (restart in restarts) {
[16:12:41.340]                             name <- restart$name
[16:12:41.340]                             if (is.null(name)) 
[16:12:41.340]                               next
[16:12:41.340]                             if (!grepl(pattern, name)) 
[16:12:41.340]                               next
[16:12:41.340]                             invokeRestart(restart)
[16:12:41.340]                             muffled <- TRUE
[16:12:41.340]                             break
[16:12:41.340]                           }
[16:12:41.340]                         }
[16:12:41.340]                       }
[16:12:41.340]                       invisible(muffled)
[16:12:41.340]                     }
[16:12:41.340]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.340]                   }
[16:12:41.340]                 }
[16:12:41.340]             }
[16:12:41.340]         }))
[16:12:41.340]     }, error = function(ex) {
[16:12:41.340]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.340]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.340]                 ...future.rng), started = ...future.startTime, 
[16:12:41.340]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.340]             version = "1.8"), class = "FutureResult")
[16:12:41.340]     }, finally = {
[16:12:41.340]         if (!identical(...future.workdir, getwd())) 
[16:12:41.340]             setwd(...future.workdir)
[16:12:41.340]         {
[16:12:41.340]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.340]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.340]             }
[16:12:41.340]             base::options(...future.oldOptions)
[16:12:41.340]             if (.Platform$OS.type == "windows") {
[16:12:41.340]                 old_names <- names(...future.oldEnvVars)
[16:12:41.340]                 envs <- base::Sys.getenv()
[16:12:41.340]                 names <- names(envs)
[16:12:41.340]                 common <- intersect(names, old_names)
[16:12:41.340]                 added <- setdiff(names, old_names)
[16:12:41.340]                 removed <- setdiff(old_names, names)
[16:12:41.340]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.340]                   envs[common]]
[16:12:41.340]                 NAMES <- toupper(changed)
[16:12:41.340]                 args <- list()
[16:12:41.340]                 for (kk in seq_along(NAMES)) {
[16:12:41.340]                   name <- changed[[kk]]
[16:12:41.340]                   NAME <- NAMES[[kk]]
[16:12:41.340]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.340]                     next
[16:12:41.340]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.340]                 }
[16:12:41.340]                 NAMES <- toupper(added)
[16:12:41.340]                 for (kk in seq_along(NAMES)) {
[16:12:41.340]                   name <- added[[kk]]
[16:12:41.340]                   NAME <- NAMES[[kk]]
[16:12:41.340]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.340]                     next
[16:12:41.340]                   args[[name]] <- ""
[16:12:41.340]                 }
[16:12:41.340]                 NAMES <- toupper(removed)
[16:12:41.340]                 for (kk in seq_along(NAMES)) {
[16:12:41.340]                   name <- removed[[kk]]
[16:12:41.340]                   NAME <- NAMES[[kk]]
[16:12:41.340]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.340]                     next
[16:12:41.340]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.340]                 }
[16:12:41.340]                 if (length(args) > 0) 
[16:12:41.340]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.340]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.340]             }
[16:12:41.340]             else {
[16:12:41.340]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.340]             }
[16:12:41.340]             {
[16:12:41.340]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.340]                   0L) {
[16:12:41.340]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.340]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.340]                   base::options(opts)
[16:12:41.340]                 }
[16:12:41.340]                 {
[16:12:41.340]                   {
[16:12:41.340]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:41.340]                     NULL
[16:12:41.340]                   }
[16:12:41.340]                   options(future.plan = NULL)
[16:12:41.340]                   if (is.na(NA_character_)) 
[16:12:41.340]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.340]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.340]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:41.340]                     envir = parent.frame()) 
[16:12:41.340]                   {
[16:12:41.340]                     default_workers <- missing(workers)
[16:12:41.340]                     if (is.function(workers)) 
[16:12:41.340]                       workers <- workers()
[16:12:41.340]                     workers <- structure(as.integer(workers), 
[16:12:41.340]                       class = class(workers))
[16:12:41.340]                     stop_if_not(is.finite(workers), workers >= 
[16:12:41.340]                       1L)
[16:12:41.340]                     if ((workers == 1L && !inherits(workers, 
[16:12:41.340]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:41.340]                       if (default_workers) 
[16:12:41.340]                         supportsMulticore(warn = TRUE)
[16:12:41.340]                       return(sequential(..., envir = envir))
[16:12:41.340]                     }
[16:12:41.340]                     oopts <- options(mc.cores = workers)
[16:12:41.340]                     on.exit(options(oopts))
[16:12:41.340]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:41.340]                       envir = envir)
[16:12:41.340]                     if (!future$lazy) 
[16:12:41.340]                       future <- run(future)
[16:12:41.340]                     invisible(future)
[16:12:41.340]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.340]                 }
[16:12:41.340]             }
[16:12:41.340]         }
[16:12:41.340]     })
[16:12:41.340]     if (TRUE) {
[16:12:41.340]         base::sink(type = "output", split = FALSE)
[16:12:41.340]         if (TRUE) {
[16:12:41.340]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.340]         }
[16:12:41.340]         else {
[16:12:41.340]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.340]         }
[16:12:41.340]         base::close(...future.stdout)
[16:12:41.340]         ...future.stdout <- NULL
[16:12:41.340]     }
[16:12:41.340]     ...future.result$conditions <- ...future.conditions
[16:12:41.340]     ...future.result$finished <- base::Sys.time()
[16:12:41.340]     ...future.result
[16:12:41.340] }
[16:12:41.343] requestCore(): workers = 2
[16:12:41.344] MulticoreFuture started
[16:12:41.345] - Launch lazy future ... done
[16:12:41.345] run() for ‘MulticoreFuture’ ... done
[16:12:41.345] plan(): Setting new future strategy stack:
[16:12:41.346] List of future strategies:
[16:12:41.346] 1. sequential:
[16:12:41.346]    - args: function (..., envir = parent.frame())
[16:12:41.346]    - tweaked: FALSE
[16:12:41.346]    - call: NULL
[16:12:41.346] plan(): nbrOfWorkers() = 1
[16:12:41.348] plan(): Setting new future strategy stack:
[16:12:41.349] List of future strategies:
[16:12:41.349] 1. multicore:
[16:12:41.349]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.349]    - tweaked: FALSE
[16:12:41.349]    - call: plan(strategy)
[16:12:41.354] plan(): nbrOfWorkers() = 2
[16:12:41.355] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:12:41.356] Searching for globals...
[16:12:41.358] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.358] Searching for globals...
[16:12:41.359] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:12:41.359] Searching for globals ... DONE
[16:12:41.359] Resolving globals: FALSE
[16:12:41.360] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:41.361] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:41.361] - globals: [1] ‘data’
[16:12:41.361] 
[16:12:41.361] getGlobalsAndPackages() ... DONE
[16:12:41.361] run() for ‘Future’ ...
[16:12:41.361] - state: ‘created’
[16:12:41.362] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:41.365] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:41.366] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:41.366]   - Field: ‘label’
[16:12:41.366]   - Field: ‘local’
[16:12:41.366]   - Field: ‘owner’
[16:12:41.366]   - Field: ‘envir’
[16:12:41.366]   - Field: ‘workers’
[16:12:41.366]   - Field: ‘packages’
[16:12:41.366]   - Field: ‘gc’
[16:12:41.367]   - Field: ‘job’
[16:12:41.367]   - Field: ‘conditions’
[16:12:41.367]   - Field: ‘expr’
[16:12:41.367]   - Field: ‘uuid’
[16:12:41.367]   - Field: ‘seed’
[16:12:41.367]   - Field: ‘version’
[16:12:41.367]   - Field: ‘result’
[16:12:41.367]   - Field: ‘asynchronous’
[16:12:41.367]   - Field: ‘calls’
[16:12:41.368]   - Field: ‘globals’
[16:12:41.368]   - Field: ‘stdout’
[16:12:41.368]   - Field: ‘earlySignal’
[16:12:41.368]   - Field: ‘lazy’
[16:12:41.368]   - Field: ‘state’
[16:12:41.368] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:41.368] - Launch lazy future ...
[16:12:41.369] Packages needed by the future expression (n = 0): <none>
[16:12:41.369] Packages needed by future strategies (n = 0): <none>
[16:12:41.369] {
[16:12:41.369]     {
[16:12:41.369]         {
[16:12:41.369]             ...future.startTime <- base::Sys.time()
[16:12:41.369]             {
[16:12:41.369]                 {
[16:12:41.369]                   {
[16:12:41.369]                     {
[16:12:41.369]                       base::local({
[16:12:41.369]                         has_future <- base::requireNamespace("future", 
[16:12:41.369]                           quietly = TRUE)
[16:12:41.369]                         if (has_future) {
[16:12:41.369]                           ns <- base::getNamespace("future")
[16:12:41.369]                           version <- ns[[".package"]][["version"]]
[16:12:41.369]                           if (is.null(version)) 
[16:12:41.369]                             version <- utils::packageVersion("future")
[16:12:41.369]                         }
[16:12:41.369]                         else {
[16:12:41.369]                           version <- NULL
[16:12:41.369]                         }
[16:12:41.369]                         if (!has_future || version < "1.8.0") {
[16:12:41.369]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.369]                             "", base::R.version$version.string), 
[16:12:41.369]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.369]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.369]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.369]                               "release", "version")], collapse = " "), 
[16:12:41.369]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.369]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.369]                             info)
[16:12:41.369]                           info <- base::paste(info, collapse = "; ")
[16:12:41.369]                           if (!has_future) {
[16:12:41.369]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.369]                               info)
[16:12:41.369]                           }
[16:12:41.369]                           else {
[16:12:41.369]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.369]                               info, version)
[16:12:41.369]                           }
[16:12:41.369]                           base::stop(msg)
[16:12:41.369]                         }
[16:12:41.369]                       })
[16:12:41.369]                     }
[16:12:41.369]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:41.369]                     base::options(mc.cores = 1L)
[16:12:41.369]                   }
[16:12:41.369]                   options(future.plan = NULL)
[16:12:41.369]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.369]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.369]                 }
[16:12:41.369]                 ...future.workdir <- getwd()
[16:12:41.369]             }
[16:12:41.369]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.369]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.369]         }
[16:12:41.369]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.369]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.369]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.369]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.369]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.369]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.369]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.369]             base::names(...future.oldOptions))
[16:12:41.369]     }
[16:12:41.369]     if (FALSE) {
[16:12:41.369]     }
[16:12:41.369]     else {
[16:12:41.369]         if (TRUE) {
[16:12:41.369]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.369]                 open = "w")
[16:12:41.369]         }
[16:12:41.369]         else {
[16:12:41.369]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.369]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.369]         }
[16:12:41.369]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.369]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.369]             base::sink(type = "output", split = FALSE)
[16:12:41.369]             base::close(...future.stdout)
[16:12:41.369]         }, add = TRUE)
[16:12:41.369]     }
[16:12:41.369]     ...future.frame <- base::sys.nframe()
[16:12:41.369]     ...future.conditions <- base::list()
[16:12:41.369]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.369]     if (FALSE) {
[16:12:41.369]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.369]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.369]     }
[16:12:41.369]     ...future.result <- base::tryCatch({
[16:12:41.369]         base::withCallingHandlers({
[16:12:41.369]             ...future.value <- base::withVisible(base::local({
[16:12:41.369]                 withCallingHandlers({
[16:12:41.369]                   subset(data, x < 3)$y
[16:12:41.369]                 }, immediateCondition = function(cond) {
[16:12:41.369]                   save_rds <- function (object, pathname, ...) 
[16:12:41.369]                   {
[16:12:41.369]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:41.369]                     if (file_test("-f", pathname_tmp)) {
[16:12:41.369]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.369]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:41.369]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.369]                         fi_tmp[["mtime"]])
[16:12:41.369]                     }
[16:12:41.369]                     tryCatch({
[16:12:41.369]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:41.369]                     }, error = function(ex) {
[16:12:41.369]                       msg <- conditionMessage(ex)
[16:12:41.369]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.369]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:41.369]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.369]                         fi_tmp[["mtime"]], msg)
[16:12:41.369]                       ex$message <- msg
[16:12:41.369]                       stop(ex)
[16:12:41.369]                     })
[16:12:41.369]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:41.369]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:41.369]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:41.369]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.369]                       fi <- file.info(pathname)
[16:12:41.369]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:41.369]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.369]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:41.369]                         fi[["size"]], fi[["mtime"]])
[16:12:41.369]                       stop(msg)
[16:12:41.369]                     }
[16:12:41.369]                     invisible(pathname)
[16:12:41.369]                   }
[16:12:41.369]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:41.369]                     rootPath = tempdir()) 
[16:12:41.369]                   {
[16:12:41.369]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:41.369]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:41.369]                       tmpdir = path, fileext = ".rds")
[16:12:41.369]                     save_rds(obj, file)
[16:12:41.369]                   }
[16:12:41.369]                   saveImmediateCondition(cond, path = "/tmp/RtmprHXcW8/.future/immediateConditions")
[16:12:41.369]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.369]                   {
[16:12:41.369]                     inherits <- base::inherits
[16:12:41.369]                     invokeRestart <- base::invokeRestart
[16:12:41.369]                     is.null <- base::is.null
[16:12:41.369]                     muffled <- FALSE
[16:12:41.369]                     if (inherits(cond, "message")) {
[16:12:41.369]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:41.369]                       if (muffled) 
[16:12:41.369]                         invokeRestart("muffleMessage")
[16:12:41.369]                     }
[16:12:41.369]                     else if (inherits(cond, "warning")) {
[16:12:41.369]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:41.369]                       if (muffled) 
[16:12:41.369]                         invokeRestart("muffleWarning")
[16:12:41.369]                     }
[16:12:41.369]                     else if (inherits(cond, "condition")) {
[16:12:41.369]                       if (!is.null(pattern)) {
[16:12:41.369]                         computeRestarts <- base::computeRestarts
[16:12:41.369]                         grepl <- base::grepl
[16:12:41.369]                         restarts <- computeRestarts(cond)
[16:12:41.369]                         for (restart in restarts) {
[16:12:41.369]                           name <- restart$name
[16:12:41.369]                           if (is.null(name)) 
[16:12:41.369]                             next
[16:12:41.369]                           if (!grepl(pattern, name)) 
[16:12:41.369]                             next
[16:12:41.369]                           invokeRestart(restart)
[16:12:41.369]                           muffled <- TRUE
[16:12:41.369]                           break
[16:12:41.369]                         }
[16:12:41.369]                       }
[16:12:41.369]                     }
[16:12:41.369]                     invisible(muffled)
[16:12:41.369]                   }
[16:12:41.369]                   muffleCondition(cond)
[16:12:41.369]                 })
[16:12:41.369]             }))
[16:12:41.369]             future::FutureResult(value = ...future.value$value, 
[16:12:41.369]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.369]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.369]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.369]                     ...future.globalenv.names))
[16:12:41.369]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.369]         }, condition = base::local({
[16:12:41.369]             c <- base::c
[16:12:41.369]             inherits <- base::inherits
[16:12:41.369]             invokeRestart <- base::invokeRestart
[16:12:41.369]             length <- base::length
[16:12:41.369]             list <- base::list
[16:12:41.369]             seq.int <- base::seq.int
[16:12:41.369]             signalCondition <- base::signalCondition
[16:12:41.369]             sys.calls <- base::sys.calls
[16:12:41.369]             `[[` <- base::`[[`
[16:12:41.369]             `+` <- base::`+`
[16:12:41.369]             `<<-` <- base::`<<-`
[16:12:41.369]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.369]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.369]                   3L)]
[16:12:41.369]             }
[16:12:41.369]             function(cond) {
[16:12:41.369]                 is_error <- inherits(cond, "error")
[16:12:41.369]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.369]                   NULL)
[16:12:41.369]                 if (is_error) {
[16:12:41.369]                   sessionInformation <- function() {
[16:12:41.369]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.369]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.369]                       search = base::search(), system = base::Sys.info())
[16:12:41.369]                   }
[16:12:41.369]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.369]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.369]                     cond$call), session = sessionInformation(), 
[16:12:41.369]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.369]                   signalCondition(cond)
[16:12:41.369]                 }
[16:12:41.369]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.369]                 "immediateCondition"))) {
[16:12:41.369]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.369]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.369]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.369]                   if (TRUE && !signal) {
[16:12:41.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.369]                     {
[16:12:41.369]                       inherits <- base::inherits
[16:12:41.369]                       invokeRestart <- base::invokeRestart
[16:12:41.369]                       is.null <- base::is.null
[16:12:41.369]                       muffled <- FALSE
[16:12:41.369]                       if (inherits(cond, "message")) {
[16:12:41.369]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.369]                         if (muffled) 
[16:12:41.369]                           invokeRestart("muffleMessage")
[16:12:41.369]                       }
[16:12:41.369]                       else if (inherits(cond, "warning")) {
[16:12:41.369]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.369]                         if (muffled) 
[16:12:41.369]                           invokeRestart("muffleWarning")
[16:12:41.369]                       }
[16:12:41.369]                       else if (inherits(cond, "condition")) {
[16:12:41.369]                         if (!is.null(pattern)) {
[16:12:41.369]                           computeRestarts <- base::computeRestarts
[16:12:41.369]                           grepl <- base::grepl
[16:12:41.369]                           restarts <- computeRestarts(cond)
[16:12:41.369]                           for (restart in restarts) {
[16:12:41.369]                             name <- restart$name
[16:12:41.369]                             if (is.null(name)) 
[16:12:41.369]                               next
[16:12:41.369]                             if (!grepl(pattern, name)) 
[16:12:41.369]                               next
[16:12:41.369]                             invokeRestart(restart)
[16:12:41.369]                             muffled <- TRUE
[16:12:41.369]                             break
[16:12:41.369]                           }
[16:12:41.369]                         }
[16:12:41.369]                       }
[16:12:41.369]                       invisible(muffled)
[16:12:41.369]                     }
[16:12:41.369]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.369]                   }
[16:12:41.369]                 }
[16:12:41.369]                 else {
[16:12:41.369]                   if (TRUE) {
[16:12:41.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.369]                     {
[16:12:41.369]                       inherits <- base::inherits
[16:12:41.369]                       invokeRestart <- base::invokeRestart
[16:12:41.369]                       is.null <- base::is.null
[16:12:41.369]                       muffled <- FALSE
[16:12:41.369]                       if (inherits(cond, "message")) {
[16:12:41.369]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.369]                         if (muffled) 
[16:12:41.369]                           invokeRestart("muffleMessage")
[16:12:41.369]                       }
[16:12:41.369]                       else if (inherits(cond, "warning")) {
[16:12:41.369]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.369]                         if (muffled) 
[16:12:41.369]                           invokeRestart("muffleWarning")
[16:12:41.369]                       }
[16:12:41.369]                       else if (inherits(cond, "condition")) {
[16:12:41.369]                         if (!is.null(pattern)) {
[16:12:41.369]                           computeRestarts <- base::computeRestarts
[16:12:41.369]                           grepl <- base::grepl
[16:12:41.369]                           restarts <- computeRestarts(cond)
[16:12:41.369]                           for (restart in restarts) {
[16:12:41.369]                             name <- restart$name
[16:12:41.369]                             if (is.null(name)) 
[16:12:41.369]                               next
[16:12:41.369]                             if (!grepl(pattern, name)) 
[16:12:41.369]                               next
[16:12:41.369]                             invokeRestart(restart)
[16:12:41.369]                             muffled <- TRUE
[16:12:41.369]                             break
[16:12:41.369]                           }
[16:12:41.369]                         }
[16:12:41.369]                       }
[16:12:41.369]                       invisible(muffled)
[16:12:41.369]                     }
[16:12:41.369]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.369]                   }
[16:12:41.369]                 }
[16:12:41.369]             }
[16:12:41.369]         }))
[16:12:41.369]     }, error = function(ex) {
[16:12:41.369]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.369]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.369]                 ...future.rng), started = ...future.startTime, 
[16:12:41.369]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.369]             version = "1.8"), class = "FutureResult")
[16:12:41.369]     }, finally = {
[16:12:41.369]         if (!identical(...future.workdir, getwd())) 
[16:12:41.369]             setwd(...future.workdir)
[16:12:41.369]         {
[16:12:41.369]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.369]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.369]             }
[16:12:41.369]             base::options(...future.oldOptions)
[16:12:41.369]             if (.Platform$OS.type == "windows") {
[16:12:41.369]                 old_names <- names(...future.oldEnvVars)
[16:12:41.369]                 envs <- base::Sys.getenv()
[16:12:41.369]                 names <- names(envs)
[16:12:41.369]                 common <- intersect(names, old_names)
[16:12:41.369]                 added <- setdiff(names, old_names)
[16:12:41.369]                 removed <- setdiff(old_names, names)
[16:12:41.369]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.369]                   envs[common]]
[16:12:41.369]                 NAMES <- toupper(changed)
[16:12:41.369]                 args <- list()
[16:12:41.369]                 for (kk in seq_along(NAMES)) {
[16:12:41.369]                   name <- changed[[kk]]
[16:12:41.369]                   NAME <- NAMES[[kk]]
[16:12:41.369]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.369]                     next
[16:12:41.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.369]                 }
[16:12:41.369]                 NAMES <- toupper(added)
[16:12:41.369]                 for (kk in seq_along(NAMES)) {
[16:12:41.369]                   name <- added[[kk]]
[16:12:41.369]                   NAME <- NAMES[[kk]]
[16:12:41.369]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.369]                     next
[16:12:41.369]                   args[[name]] <- ""
[16:12:41.369]                 }
[16:12:41.369]                 NAMES <- toupper(removed)
[16:12:41.369]                 for (kk in seq_along(NAMES)) {
[16:12:41.369]                   name <- removed[[kk]]
[16:12:41.369]                   NAME <- NAMES[[kk]]
[16:12:41.369]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.369]                     next
[16:12:41.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.369]                 }
[16:12:41.369]                 if (length(args) > 0) 
[16:12:41.369]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.369]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.369]             }
[16:12:41.369]             else {
[16:12:41.369]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.369]             }
[16:12:41.369]             {
[16:12:41.369]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.369]                   0L) {
[16:12:41.369]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.369]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.369]                   base::options(opts)
[16:12:41.369]                 }
[16:12:41.369]                 {
[16:12:41.369]                   {
[16:12:41.369]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:41.369]                     NULL
[16:12:41.369]                   }
[16:12:41.369]                   options(future.plan = NULL)
[16:12:41.369]                   if (is.na(NA_character_)) 
[16:12:41.369]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.369]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.369]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:41.369]                     envir = parent.frame()) 
[16:12:41.369]                   {
[16:12:41.369]                     default_workers <- missing(workers)
[16:12:41.369]                     if (is.function(workers)) 
[16:12:41.369]                       workers <- workers()
[16:12:41.369]                     workers <- structure(as.integer(workers), 
[16:12:41.369]                       class = class(workers))
[16:12:41.369]                     stop_if_not(is.finite(workers), workers >= 
[16:12:41.369]                       1L)
[16:12:41.369]                     if ((workers == 1L && !inherits(workers, 
[16:12:41.369]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:41.369]                       if (default_workers) 
[16:12:41.369]                         supportsMulticore(warn = TRUE)
[16:12:41.369]                       return(sequential(..., envir = envir))
[16:12:41.369]                     }
[16:12:41.369]                     oopts <- options(mc.cores = workers)
[16:12:41.369]                     on.exit(options(oopts))
[16:12:41.369]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:41.369]                       envir = envir)
[16:12:41.369]                     if (!future$lazy) 
[16:12:41.369]                       future <- run(future)
[16:12:41.369]                     invisible(future)
[16:12:41.369]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.369]                 }
[16:12:41.369]             }
[16:12:41.369]         }
[16:12:41.369]     })
[16:12:41.369]     if (TRUE) {
[16:12:41.369]         base::sink(type = "output", split = FALSE)
[16:12:41.369]         if (TRUE) {
[16:12:41.369]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.369]         }
[16:12:41.369]         else {
[16:12:41.369]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.369]         }
[16:12:41.369]         base::close(...future.stdout)
[16:12:41.369]         ...future.stdout <- NULL
[16:12:41.369]     }
[16:12:41.369]     ...future.result$conditions <- ...future.conditions
[16:12:41.369]     ...future.result$finished <- base::Sys.time()
[16:12:41.369]     ...future.result
[16:12:41.369] }
[16:12:41.372] assign_globals() ...
[16:12:41.372] List of 1
[16:12:41.372]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:41.372]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:41.372]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:41.372]  - attr(*, "where")=List of 1
[16:12:41.372]   ..$ data:<environment: R_EmptyEnv> 
[16:12:41.372]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:41.372]  - attr(*, "resolved")= logi FALSE
[16:12:41.372]  - attr(*, "total_size")= num 160
[16:12:41.372]  - attr(*, "already-done")= logi TRUE
[16:12:41.376] - copied ‘data’ to environment
[16:12:41.376] assign_globals() ... done
[16:12:41.376] requestCore(): workers = 2
[16:12:41.378] MulticoreFuture started
[16:12:41.378] - Launch lazy future ... done
[16:12:41.378] run() for ‘MulticoreFuture’ ... done
[16:12:41.379] plan(): Setting new future strategy stack:
[16:12:41.379] List of future strategies:
[16:12:41.379] 1. sequential:
[16:12:41.379]    - args: function (..., envir = parent.frame())
[16:12:41.379]    - tweaked: FALSE
[16:12:41.379]    - call: NULL
[16:12:41.380] plan(): nbrOfWorkers() = 1
[16:12:41.382] plan(): Setting new future strategy stack:
[16:12:41.382] List of future strategies:
[16:12:41.382] 1. multicore:
[16:12:41.382]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.382]    - tweaked: FALSE
[16:12:41.382]    - call: plan(strategy)
[16:12:41.387] plan(): nbrOfWorkers() = 2
[16:12:41.388] plan(): Setting new future strategy stack:
[16:12:41.388] List of future strategies:
[16:12:41.388] 1. sequential:
[16:12:41.388]    - args: function (..., envir = parent.frame())
[16:12:41.388]    - tweaked: FALSE
[16:12:41.388]    - call: plan(list(sequential, strategy))
[16:12:41.388] 2. multicore:
[16:12:41.388]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.388]    - tweaked: FALSE
[16:12:41.388]    - call: plan(list(sequential, strategy))
[16:12:41.389] plan(): nbrOfWorkers() = 1
[16:12:41.389] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.390] Searching for globals...
[16:12:41.396] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[16:12:41.396] Searching for globals ... DONE
[16:12:41.396] Resolving globals: FALSE
[16:12:41.397] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:41.397] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:41.397] - globals: [1] ‘data’
[16:12:41.398] - packages: [1] ‘future’
[16:12:41.398] getGlobalsAndPackages() ... DONE
[16:12:41.398] run() for ‘Future’ ...
[16:12:41.398] - state: ‘created’
[16:12:41.399] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:41.399] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:41.399] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:41.399]   - Field: ‘label’
[16:12:41.399]   - Field: ‘local’
[16:12:41.400]   - Field: ‘owner’
[16:12:41.400]   - Field: ‘envir’
[16:12:41.400]   - Field: ‘packages’
[16:12:41.400]   - Field: ‘gc’
[16:12:41.400]   - Field: ‘conditions’
[16:12:41.400]   - Field: ‘expr’
[16:12:41.400]   - Field: ‘uuid’
[16:12:41.401]   - Field: ‘seed’
[16:12:41.401]   - Field: ‘version’
[16:12:41.401]   - Field: ‘result’
[16:12:41.401]   - Field: ‘asynchronous’
[16:12:41.401]   - Field: ‘calls’
[16:12:41.401]   - Field: ‘globals’
[16:12:41.401]   - Field: ‘stdout’
[16:12:41.401]   - Field: ‘earlySignal’
[16:12:41.401]   - Field: ‘lazy’
[16:12:41.402]   - Field: ‘state’
[16:12:41.402] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:41.402] - Launch lazy future ...
[16:12:41.402] Packages needed by the future expression (n = 1): ‘future’
[16:12:41.402] Packages needed by future strategies (n = 1): ‘future’
[16:12:41.403] {
[16:12:41.403]     {
[16:12:41.403]         {
[16:12:41.403]             ...future.startTime <- base::Sys.time()
[16:12:41.403]             {
[16:12:41.403]                 {
[16:12:41.403]                   {
[16:12:41.403]                     {
[16:12:41.403]                       base::local({
[16:12:41.403]                         has_future <- base::requireNamespace("future", 
[16:12:41.403]                           quietly = TRUE)
[16:12:41.403]                         if (has_future) {
[16:12:41.403]                           ns <- base::getNamespace("future")
[16:12:41.403]                           version <- ns[[".package"]][["version"]]
[16:12:41.403]                           if (is.null(version)) 
[16:12:41.403]                             version <- utils::packageVersion("future")
[16:12:41.403]                         }
[16:12:41.403]                         else {
[16:12:41.403]                           version <- NULL
[16:12:41.403]                         }
[16:12:41.403]                         if (!has_future || version < "1.8.0") {
[16:12:41.403]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.403]                             "", base::R.version$version.string), 
[16:12:41.403]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.403]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.403]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.403]                               "release", "version")], collapse = " "), 
[16:12:41.403]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.403]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.403]                             info)
[16:12:41.403]                           info <- base::paste(info, collapse = "; ")
[16:12:41.403]                           if (!has_future) {
[16:12:41.403]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.403]                               info)
[16:12:41.403]                           }
[16:12:41.403]                           else {
[16:12:41.403]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.403]                               info, version)
[16:12:41.403]                           }
[16:12:41.403]                           base::stop(msg)
[16:12:41.403]                         }
[16:12:41.403]                       })
[16:12:41.403]                     }
[16:12:41.403]                     base::local({
[16:12:41.403]                       for (pkg in "future") {
[16:12:41.403]                         base::loadNamespace(pkg)
[16:12:41.403]                         base::library(pkg, character.only = TRUE)
[16:12:41.403]                       }
[16:12:41.403]                     })
[16:12:41.403]                   }
[16:12:41.403]                   options(future.plan = NULL)
[16:12:41.403]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.403]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:41.403]                     envir = parent.frame()) 
[16:12:41.403]                   {
[16:12:41.403]                     default_workers <- missing(workers)
[16:12:41.403]                     if (is.function(workers)) 
[16:12:41.403]                       workers <- workers()
[16:12:41.403]                     workers <- structure(as.integer(workers), 
[16:12:41.403]                       class = class(workers))
[16:12:41.403]                     stop_if_not(is.finite(workers), workers >= 
[16:12:41.403]                       1L)
[16:12:41.403]                     if ((workers == 1L && !inherits(workers, 
[16:12:41.403]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:41.403]                       if (default_workers) 
[16:12:41.403]                         supportsMulticore(warn = TRUE)
[16:12:41.403]                       return(sequential(..., envir = envir))
[16:12:41.403]                     }
[16:12:41.403]                     oopts <- options(mc.cores = workers)
[16:12:41.403]                     on.exit(options(oopts))
[16:12:41.403]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:41.403]                       envir = envir)
[16:12:41.403]                     if (!future$lazy) 
[16:12:41.403]                       future <- run(future)
[16:12:41.403]                     invisible(future)
[16:12:41.403]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.403]                 }
[16:12:41.403]                 ...future.workdir <- getwd()
[16:12:41.403]             }
[16:12:41.403]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.403]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.403]         }
[16:12:41.403]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.403]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.403]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.403]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.403]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.403]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.403]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.403]             base::names(...future.oldOptions))
[16:12:41.403]     }
[16:12:41.403]     if (FALSE) {
[16:12:41.403]     }
[16:12:41.403]     else {
[16:12:41.403]         if (TRUE) {
[16:12:41.403]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.403]                 open = "w")
[16:12:41.403]         }
[16:12:41.403]         else {
[16:12:41.403]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.403]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.403]         }
[16:12:41.403]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.403]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.403]             base::sink(type = "output", split = FALSE)
[16:12:41.403]             base::close(...future.stdout)
[16:12:41.403]         }, add = TRUE)
[16:12:41.403]     }
[16:12:41.403]     ...future.frame <- base::sys.nframe()
[16:12:41.403]     ...future.conditions <- base::list()
[16:12:41.403]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.403]     if (FALSE) {
[16:12:41.403]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.403]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.403]     }
[16:12:41.403]     ...future.result <- base::tryCatch({
[16:12:41.403]         base::withCallingHandlers({
[16:12:41.403]             ...future.value <- base::withVisible(base::local({
[16:12:41.403]                 a %<-% subset(data, x < 3)$y
[16:12:41.403]                 a
[16:12:41.403]             }))
[16:12:41.403]             future::FutureResult(value = ...future.value$value, 
[16:12:41.403]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.403]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.403]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.403]                     ...future.globalenv.names))
[16:12:41.403]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.403]         }, condition = base::local({
[16:12:41.403]             c <- base::c
[16:12:41.403]             inherits <- base::inherits
[16:12:41.403]             invokeRestart <- base::invokeRestart
[16:12:41.403]             length <- base::length
[16:12:41.403]             list <- base::list
[16:12:41.403]             seq.int <- base::seq.int
[16:12:41.403]             signalCondition <- base::signalCondition
[16:12:41.403]             sys.calls <- base::sys.calls
[16:12:41.403]             `[[` <- base::`[[`
[16:12:41.403]             `+` <- base::`+`
[16:12:41.403]             `<<-` <- base::`<<-`
[16:12:41.403]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.403]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.403]                   3L)]
[16:12:41.403]             }
[16:12:41.403]             function(cond) {
[16:12:41.403]                 is_error <- inherits(cond, "error")
[16:12:41.403]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.403]                   NULL)
[16:12:41.403]                 if (is_error) {
[16:12:41.403]                   sessionInformation <- function() {
[16:12:41.403]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.403]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.403]                       search = base::search(), system = base::Sys.info())
[16:12:41.403]                   }
[16:12:41.403]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.403]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.403]                     cond$call), session = sessionInformation(), 
[16:12:41.403]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.403]                   signalCondition(cond)
[16:12:41.403]                 }
[16:12:41.403]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.403]                 "immediateCondition"))) {
[16:12:41.403]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.403]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.403]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.403]                   if (TRUE && !signal) {
[16:12:41.403]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.403]                     {
[16:12:41.403]                       inherits <- base::inherits
[16:12:41.403]                       invokeRestart <- base::invokeRestart
[16:12:41.403]                       is.null <- base::is.null
[16:12:41.403]                       muffled <- FALSE
[16:12:41.403]                       if (inherits(cond, "message")) {
[16:12:41.403]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.403]                         if (muffled) 
[16:12:41.403]                           invokeRestart("muffleMessage")
[16:12:41.403]                       }
[16:12:41.403]                       else if (inherits(cond, "warning")) {
[16:12:41.403]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.403]                         if (muffled) 
[16:12:41.403]                           invokeRestart("muffleWarning")
[16:12:41.403]                       }
[16:12:41.403]                       else if (inherits(cond, "condition")) {
[16:12:41.403]                         if (!is.null(pattern)) {
[16:12:41.403]                           computeRestarts <- base::computeRestarts
[16:12:41.403]                           grepl <- base::grepl
[16:12:41.403]                           restarts <- computeRestarts(cond)
[16:12:41.403]                           for (restart in restarts) {
[16:12:41.403]                             name <- restart$name
[16:12:41.403]                             if (is.null(name)) 
[16:12:41.403]                               next
[16:12:41.403]                             if (!grepl(pattern, name)) 
[16:12:41.403]                               next
[16:12:41.403]                             invokeRestart(restart)
[16:12:41.403]                             muffled <- TRUE
[16:12:41.403]                             break
[16:12:41.403]                           }
[16:12:41.403]                         }
[16:12:41.403]                       }
[16:12:41.403]                       invisible(muffled)
[16:12:41.403]                     }
[16:12:41.403]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.403]                   }
[16:12:41.403]                 }
[16:12:41.403]                 else {
[16:12:41.403]                   if (TRUE) {
[16:12:41.403]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.403]                     {
[16:12:41.403]                       inherits <- base::inherits
[16:12:41.403]                       invokeRestart <- base::invokeRestart
[16:12:41.403]                       is.null <- base::is.null
[16:12:41.403]                       muffled <- FALSE
[16:12:41.403]                       if (inherits(cond, "message")) {
[16:12:41.403]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.403]                         if (muffled) 
[16:12:41.403]                           invokeRestart("muffleMessage")
[16:12:41.403]                       }
[16:12:41.403]                       else if (inherits(cond, "warning")) {
[16:12:41.403]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.403]                         if (muffled) 
[16:12:41.403]                           invokeRestart("muffleWarning")
[16:12:41.403]                       }
[16:12:41.403]                       else if (inherits(cond, "condition")) {
[16:12:41.403]                         if (!is.null(pattern)) {
[16:12:41.403]                           computeRestarts <- base::computeRestarts
[16:12:41.403]                           grepl <- base::grepl
[16:12:41.403]                           restarts <- computeRestarts(cond)
[16:12:41.403]                           for (restart in restarts) {
[16:12:41.403]                             name <- restart$name
[16:12:41.403]                             if (is.null(name)) 
[16:12:41.403]                               next
[16:12:41.403]                             if (!grepl(pattern, name)) 
[16:12:41.403]                               next
[16:12:41.403]                             invokeRestart(restart)
[16:12:41.403]                             muffled <- TRUE
[16:12:41.403]                             break
[16:12:41.403]                           }
[16:12:41.403]                         }
[16:12:41.403]                       }
[16:12:41.403]                       invisible(muffled)
[16:12:41.403]                     }
[16:12:41.403]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.403]                   }
[16:12:41.403]                 }
[16:12:41.403]             }
[16:12:41.403]         }))
[16:12:41.403]     }, error = function(ex) {
[16:12:41.403]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.403]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.403]                 ...future.rng), started = ...future.startTime, 
[16:12:41.403]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.403]             version = "1.8"), class = "FutureResult")
[16:12:41.403]     }, finally = {
[16:12:41.403]         if (!identical(...future.workdir, getwd())) 
[16:12:41.403]             setwd(...future.workdir)
[16:12:41.403]         {
[16:12:41.403]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.403]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.403]             }
[16:12:41.403]             base::options(...future.oldOptions)
[16:12:41.403]             if (.Platform$OS.type == "windows") {
[16:12:41.403]                 old_names <- names(...future.oldEnvVars)
[16:12:41.403]                 envs <- base::Sys.getenv()
[16:12:41.403]                 names <- names(envs)
[16:12:41.403]                 common <- intersect(names, old_names)
[16:12:41.403]                 added <- setdiff(names, old_names)
[16:12:41.403]                 removed <- setdiff(old_names, names)
[16:12:41.403]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.403]                   envs[common]]
[16:12:41.403]                 NAMES <- toupper(changed)
[16:12:41.403]                 args <- list()
[16:12:41.403]                 for (kk in seq_along(NAMES)) {
[16:12:41.403]                   name <- changed[[kk]]
[16:12:41.403]                   NAME <- NAMES[[kk]]
[16:12:41.403]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.403]                     next
[16:12:41.403]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.403]                 }
[16:12:41.403]                 NAMES <- toupper(added)
[16:12:41.403]                 for (kk in seq_along(NAMES)) {
[16:12:41.403]                   name <- added[[kk]]
[16:12:41.403]                   NAME <- NAMES[[kk]]
[16:12:41.403]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.403]                     next
[16:12:41.403]                   args[[name]] <- ""
[16:12:41.403]                 }
[16:12:41.403]                 NAMES <- toupper(removed)
[16:12:41.403]                 for (kk in seq_along(NAMES)) {
[16:12:41.403]                   name <- removed[[kk]]
[16:12:41.403]                   NAME <- NAMES[[kk]]
[16:12:41.403]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.403]                     next
[16:12:41.403]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.403]                 }
[16:12:41.403]                 if (length(args) > 0) 
[16:12:41.403]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.403]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.403]             }
[16:12:41.403]             else {
[16:12:41.403]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.403]             }
[16:12:41.403]             {
[16:12:41.403]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.403]                   0L) {
[16:12:41.403]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.403]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.403]                   base::options(opts)
[16:12:41.403]                 }
[16:12:41.403]                 {
[16:12:41.403]                   {
[16:12:41.403]                     NULL
[16:12:41.403]                     RNGkind("Mersenne-Twister")
[16:12:41.403]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:41.403]                       inherits = FALSE)
[16:12:41.403]                   }
[16:12:41.403]                   options(future.plan = NULL)
[16:12:41.403]                   if (is.na(NA_character_)) 
[16:12:41.403]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.403]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.403]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:41.403]                   {
[16:12:41.403]                     future <- SequentialFuture(..., envir = envir)
[16:12:41.403]                     if (!future$lazy) 
[16:12:41.403]                       future <- run(future)
[16:12:41.403]                     invisible(future)
[16:12:41.403]                   }, function (..., workers = availableCores(constraints = "multicore"), 
[16:12:41.403]                     envir = parent.frame()) 
[16:12:41.403]                   {
[16:12:41.403]                     default_workers <- missing(workers)
[16:12:41.403]                     if (is.function(workers)) 
[16:12:41.403]                       workers <- workers()
[16:12:41.403]                     workers <- structure(as.integer(workers), 
[16:12:41.403]                       class = class(workers))
[16:12:41.403]                     stop_if_not(is.finite(workers), workers >= 
[16:12:41.403]                       1L)
[16:12:41.403]                     if ((workers == 1L && !inherits(workers, 
[16:12:41.403]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:41.403]                       if (default_workers) 
[16:12:41.403]                         supportsMulticore(warn = TRUE)
[16:12:41.403]                       return(sequential(..., envir = envir))
[16:12:41.403]                     }
[16:12:41.403]                     oopts <- options(mc.cores = workers)
[16:12:41.403]                     on.exit(options(oopts))
[16:12:41.403]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:41.403]                       envir = envir)
[16:12:41.403]                     if (!future$lazy) 
[16:12:41.403]                       future <- run(future)
[16:12:41.403]                     invisible(future)
[16:12:41.403]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.403]                 }
[16:12:41.403]             }
[16:12:41.403]         }
[16:12:41.403]     })
[16:12:41.403]     if (TRUE) {
[16:12:41.403]         base::sink(type = "output", split = FALSE)
[16:12:41.403]         if (TRUE) {
[16:12:41.403]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.403]         }
[16:12:41.403]         else {
[16:12:41.403]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.403]         }
[16:12:41.403]         base::close(...future.stdout)
[16:12:41.403]         ...future.stdout <- NULL
[16:12:41.403]     }
[16:12:41.403]     ...future.result$conditions <- ...future.conditions
[16:12:41.403]     ...future.result$finished <- base::Sys.time()
[16:12:41.403]     ...future.result
[16:12:41.403] }
[16:12:41.405] assign_globals() ...
[16:12:41.405] List of 1
[16:12:41.405]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:41.405]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:41.405]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:41.405]  - attr(*, "where")=List of 1
[16:12:41.405]   ..$ data:<environment: R_EmptyEnv> 
[16:12:41.405]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:41.405]  - attr(*, "resolved")= logi FALSE
[16:12:41.405]  - attr(*, "total_size")= num 160
[16:12:41.405]  - attr(*, "already-done")= logi TRUE
[16:12:41.409] - copied ‘data’ to environment
[16:12:41.409] assign_globals() ... done
[16:12:41.410] plan(): Setting new future strategy stack:
[16:12:41.410] List of future strategies:
[16:12:41.410] 1. multicore:
[16:12:41.410]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.410]    - tweaked: FALSE
[16:12:41.410]    - call: plan(list(sequential, strategy))
[16:12:41.414] plan(): nbrOfWorkers() = 2
[16:12:41.459] plan(): Setting new future strategy stack:
[16:12:41.459] List of future strategies:
[16:12:41.459] 1. sequential:
[16:12:41.459]    - args: function (..., envir = parent.frame())
[16:12:41.459]    - tweaked: FALSE
[16:12:41.459]    - call: plan(list(sequential, strategy))
[16:12:41.459] 2. multicore:
[16:12:41.459]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:12:41.459]    - tweaked: FALSE
[16:12:41.459]    - call: plan(list(sequential, strategy))
[16:12:41.460] plan(): nbrOfWorkers() = 1
[16:12:41.460] SequentialFuture started (and completed)
[16:12:41.461] signalConditions() ...
[16:12:41.461]  - include = ‘immediateCondition’
[16:12:41.461]  - exclude = 
[16:12:41.461]  - resignal = FALSE
[16:12:41.461]  - Number of conditions: 50
[16:12:41.461] signalConditions() ... done
[16:12:41.461] - Launch lazy future ... done
[16:12:41.461] run() for ‘SequentialFuture’ ... done
[16:12:41.462] signalConditions() ...
[16:12:41.462]  - include = ‘immediateCondition’
[16:12:41.462]  - exclude = 
[16:12:41.462]  - resignal = FALSE
[16:12:41.462]  - Number of conditions: 50
[16:12:41.464] signalConditions() ... done
[16:12:41.465] Future state: ‘finished’
[16:12:41.465] signalConditions() ...
[16:12:41.465]  - include = ‘condition’
[16:12:41.465]  - exclude = ‘immediateCondition’
[16:12:41.465]  - resignal = TRUE
[16:12:41.465]  - Number of conditions: 50
[16:12:41.465]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.414] getGlobalsAndPackages() ...
[16:12:41.465]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.466]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.430] Searching for globals...
[16:12:41.466]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.431] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:12:41.466]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.431] Searching for globals ... DONE
[16:12:41.466]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.431] Resolving globals: FALSE
[16:12:41.467]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.431] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:41.467]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.432] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:41.467]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.432] - globals: [1] ‘data’
[16:12:41.467]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.432] 
[16:12:41.467]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.432] getGlobalsAndPackages() ... DONE
[16:12:41.467]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.432] run() for ‘Future’ ...
[16:12:41.468]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.432] - state: ‘created’
[16:12:41.468]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.433] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:12:41.468]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.436] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:41.468]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:12:41.468]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437]   - Field: ‘label’
[16:12:41.469]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437]   - Field: ‘local’
[16:12:41.469]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437]   - Field: ‘owner’
[16:12:41.469]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437]   - Field: ‘envir’
[16:12:41.469]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437]   - Field: ‘workers’
[16:12:41.469]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.437]   - Field: ‘packages’
[16:12:41.470]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘gc’
[16:12:41.470]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘job’
[16:12:41.470]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘conditions’
[16:12:41.470]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘expr’
[16:12:41.470]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘uuid’
[16:12:41.470]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘seed’
[16:12:41.471]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘version’
[16:12:41.471]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘result’
[16:12:41.471]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.438]   - Field: ‘asynchronous’
[16:12:41.471]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439]   - Field: ‘calls’
[16:12:41.471]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439]   - Field: ‘globals’
[16:12:41.471]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439]   - Field: ‘stdout’
[16:12:41.472]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439]   - Field: ‘earlySignal’
[16:12:41.472]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439]   - Field: ‘lazy’
[16:12:41.472]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439]   - Field: ‘state’
[16:12:41.472]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:12:41.472]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.439] - Launch lazy future ...
[16:12:41.472]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.440] Packages needed by the future expression (n = 0): <none>
[16:12:41.473]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.440] Packages needed by future strategies (n = 0): <none>
[16:12:41.473]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.440] {
[16:12:41.440]     {
[16:12:41.440]         {
[16:12:41.440]             ...future.startTime <- base::Sys.time()
[16:12:41.440]             {
[16:12:41.440]                 {
[16:12:41.440]                   {
[16:12:41.440]                     {
[16:12:41.440]                       base::local({
[16:12:41.440]                         has_future <- base::requireNamespace("future", 
[16:12:41.440]                           quietly = TRUE)
[16:12:41.440]                         if (has_future) {
[16:12:41.440]                           ns <- base::getNamespace("future")
[16:12:41.440]                           version <- ns[[".package"]][["version"]]
[16:12:41.440]                           if (is.null(version)) 
[16:12:41.440]                             version <- utils::packageVersion("future")
[16:12:41.440]                         }
[16:12:41.440]                         else {
[16:12:41.440]                           version <- NULL
[16:12:41.440]                         }
[16:12:41.440]                         if (!has_future || version < "1.8.0") {
[16:12:41.440]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.440]                             "", base::R.version$version.string), 
[16:12:41.440]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.440]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.440]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.440]                               "release", "version")], collapse = " "), 
[16:12:41.440]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.440]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.440]                             info)
[16:12:41.440]                           info <- base::paste(info, collapse = "; ")
[16:12:41.440]                           if (!has_future) {
[16:12:41.440]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.440]                               info)
[16:12:41.440]                           }
[16:12:41.440]                           else {
[16:12:41.440]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.440]                               info, version)
[16:12:41.440]                           }
[16:12:41.440]                           base::stop(msg)
[16:12:41.440]                         }
[16:12:41.440]                       })
[16:12:41.440]                     }
[16:12:41.440]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:41.440]                     base::options(mc.cores = 1L)
[16:12:41.440]                   }
[16:12:41.440]                   options(future.plan = NULL)
[16:12:41.440]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.440]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.440]                 }
[16:12:41.440]                 ...future.workdir <- getwd()
[16:12:41.440]             }
[16:12:41.440]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.440]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.440]         }
[16:12:41.440]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.440]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.440]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.440]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.440]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.440]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.440]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.440]             base::names(...future.oldOptions))
[16:12:41.440]     }
[16:12:41.440]     if (FALSE) {
[16:12:41.440]     }
[16:12:41.440]     else {
[16:12:41.440]         if (TRUE) {
[16:12:41.440]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.440]                 open = "w")
[16:12:41.440]         }
[16:12:41.440]         else {
[16:12:41.440]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.440]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.440]         }
[16:12:41.440]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.440]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.440]             base::sink(type = "output", split = FALSE)
[16:12:41.440]             base::close(...future.stdout)
[16:12:41.440]         }, add = TRUE)
[16:12:41.440]     }
[16:12:41.440]     ...future.frame <- base::sys.nframe()
[16:12:41.440]     ...future.conditions <- base::list()
[16:12:41.440]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.440]     if (FALSE) {
[16:12:41.440]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.440]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.440]     }
[16:12:41.440]     ...future.result <- base::tryCatch({
[16:12:41.440]         base::withCallingHandlers({
[16:12:41.440]             ...future.value <- base::withVisible(base::local({
[16:12:41.440]                 withCallingHandlers({
[16:12:41.440]                   subset(data, x < 3)$y
[16:12:41.440]                 }, immediateCondition = function(cond) {
[16:12:41.440]                   save_rds <- function (object, pathname, ...) 
[16:12:41.440]                   {
[16:12:41.440]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:12:41.440]                     if (file_test("-f", pathname_tmp)) {
[16:12:41.440]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.440]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:12:41.440]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.440]                         fi_tmp[["mtime"]])
[16:12:41.440]                     }
[16:12:41.440]                     tryCatch({
[16:12:41.440]                       saveRDS(object, file = pathname_tmp, ...)
[16:12:41.440]                     }, error = function(ex) {
[16:12:41.440]                       msg <- conditionMessage(ex)
[16:12:41.440]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.440]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:12:41.440]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.440]                         fi_tmp[["mtime"]], msg)
[16:12:41.440]                       ex$message <- msg
[16:12:41.440]                       stop(ex)
[16:12:41.440]                     })
[16:12:41.440]                     stopifnot(file_test("-f", pathname_tmp))
[16:12:41.440]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:12:41.440]                     if (!res || file_test("-f", pathname_tmp)) {
[16:12:41.440]                       fi_tmp <- file.info(pathname_tmp)
[16:12:41.440]                       fi <- file.info(pathname)
[16:12:41.440]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:12:41.440]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:12:41.440]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:12:41.440]                         fi[["size"]], fi[["mtime"]])
[16:12:41.440]                       stop(msg)
[16:12:41.440]                     }
[16:12:41.440]                     invisible(pathname)
[16:12:41.440]                   }
[16:12:41.440]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:12:41.440]                     rootPath = tempdir()) 
[16:12:41.440]                   {
[16:12:41.440]                     obj <- list(time = Sys.time(), condition = cond)
[16:12:41.440]                     file <- tempfile(pattern = class(cond)[1], 
[16:12:41.440]                       tmpdir = path, fileext = ".rds")
[16:12:41.440]                     save_rds(obj, file)
[16:12:41.440]                   }
[16:12:41.440]                   saveImmediateCondition(cond, path = "/tmp/RtmprHXcW8/.future/immediateConditions")
[16:12:41.440]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.440]                   {
[16:12:41.440]                     inherits <- base::inherits
[16:12:41.440]                     invokeRestart <- base::invokeRestart
[16:12:41.440]                     is.null <- base::is.null
[16:12:41.440]                     muffled <- FALSE
[16:12:41.440]                     if (inherits(cond, "message")) {
[16:12:41.440]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:41.440]                       if (muffled) 
[16:12:41.440]                         invokeRestart("muffleMessage")
[16:12:41.440]                     }
[16:12:41.440]                     else if (inherits(cond, "warning")) {
[16:12:41.440]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:41.440]                       if (muffled) 
[16:12:41.440]                         invokeRestart("muffleWarning")
[16:12:41.440]                     }
[16:12:41.440]                     else if (inherits(cond, "condition")) {
[16:12:41.440]                       if (!is.null(pattern)) {
[16:12:41.440]                         computeRestarts <- base::computeRestarts
[16:12:41.440]                         grepl <- base::grepl
[16:12:41.440]                         restarts <- computeRestarts(cond)
[16:12:41.440]                         for (restart in restarts) {
[16:12:41.440]                           name <- restart$name
[16:12:41.440]                           if (is.null(name)) 
[16:12:41.440]                             next
[16:12:41.440]                           if (!grepl(pattern, name)) 
[16:12:41.440]                             next
[16:12:41.440]                           invokeRestart(restart)
[16:12:41.440]                           muffled <- TRUE
[16:12:41.440]                           break
[16:12:41.440]                         }
[16:12:41.440]                       }
[16:12:41.440]                     }
[16:12:41.440]                     invisible(muffled)
[16:12:41.440]                   }
[16:12:41.440]                   muffleCondition(cond)
[16:12:41.440]                 })
[16:12:41.440]             }))
[16:12:41.440]             future::FutureResult(value = ...future.value$value, 
[16:12:41.440]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.440]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.440]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.440]                     ...future.globalenv.names))
[16:12:41.440]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.440]         }, condition = base::local({
[16:12:41.440]             c <- base::c
[16:12:41.440]             inherits <- base::inherits
[16:12:41.440]             invokeRestart <- base::invokeRestart
[16:12:41.440]             length <- base::length
[16:12:41.440]             list <- base::list
[16:12:41.440]             seq.int <- base::seq.int
[16:12:41.440]             signalCondition <- base::signalCondition
[16:12:41.440]             sys.calls <- base::sys.calls
[16:12:41.440]             `[[` <- base::`[[`
[16:12:41.440]             `+` <- base::`+`
[16:12:41.440]             `<<-` <- base::`<<-`
[16:12:41.440]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.440]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.440]                   3L)]
[16:12:41.440]             }
[16:12:41.440]             function(cond) {
[16:12:41.440]                 is_error <- inherits(cond, "error")
[16:12:41.440]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.440]                   NULL)
[16:12:41.440]                 if (is_error) {
[16:12:41.440]                   sessionInformation <- function() {
[16:12:41.440]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.440]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.440]                       search = base::search(), system = base::Sys.info())
[16:12:41.440]                   }
[16:12:41.440]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.440]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.440]                     cond$call), session = sessionInformation(), 
[16:12:41.440]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.440]                   signalCondition(cond)
[16:12:41.440]                 }
[16:12:41.440]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.440]                 "immediateCondition"))) {
[16:12:41.440]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.440]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.440]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.440]                   if (TRUE && !signal) {
[16:12:41.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.440]                     {
[16:12:41.440]                       inherits <- base::inherits
[16:12:41.440]                       invokeRestart <- base::invokeRestart
[16:12:41.440]                       is.null <- base::is.null
[16:12:41.440]                       muffled <- FALSE
[16:12:41.440]                       if (inherits(cond, "message")) {
[16:12:41.440]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.440]                         if (muffled) 
[16:12:41.440]                           invokeRestart("muffleMessage")
[16:12:41.440]                       }
[16:12:41.440]                       else if (inherits(cond, "warning")) {
[16:12:41.440]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.440]                         if (muffled) 
[16:12:41.440]                           invokeRestart("muffleWarning")
[16:12:41.440]                       }
[16:12:41.440]                       else if (inherits(cond, "condition")) {
[16:12:41.440]                         if (!is.null(pattern)) {
[16:12:41.440]                           computeRestarts <- base::computeRestarts
[16:12:41.440]                           grepl <- base::grepl
[16:12:41.440]                           restarts <- computeRestarts(cond)
[16:12:41.440]                           for (restart in restarts) {
[16:12:41.440]                             name <- restart$name
[16:12:41.440]                             if (is.null(name)) 
[16:12:41.440]                               next
[16:12:41.440]                             if (!grepl(pattern, name)) 
[16:12:41.440]                               next
[16:12:41.440]                             invokeRestart(restart)
[16:12:41.440]                             muffled <- TRUE
[16:12:41.440]                             break
[16:12:41.440]                           }
[16:12:41.440]                         }
[16:12:41.440]                       }
[16:12:41.440]                       invisible(muffled)
[16:12:41.440]                     }
[16:12:41.440]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.440]                   }
[16:12:41.440]                 }
[16:12:41.440]                 else {
[16:12:41.440]                   if (TRUE) {
[16:12:41.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.440]                     {
[16:12:41.440]                       inherits <- base::inherits
[16:12:41.440]                       invokeRestart <- base::invokeRestart
[16:12:41.440]                       is.null <- base::is.null
[16:12:41.440]                       muffled <- FALSE
[16:12:41.440]                       if (inherits(cond, "message")) {
[16:12:41.440]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.440]                         if (muffled) 
[16:12:41.440]                           invokeRestart("muffleMessage")
[16:12:41.440]                       }
[16:12:41.440]                       else if (inherits(cond, "warning")) {
[16:12:41.440]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.440]                         if (muffled) 
[16:12:41.440]                           invokeRestart("muffleWarning")
[16:12:41.440]                       }
[16:12:41.440]                       else if (inherits(cond, "condition")) {
[16:12:41.440]                         if (!is.null(pattern)) {
[16:12:41.440]                           computeRestarts <- base::computeRestarts
[16:12:41.440]                           grepl <- base::grepl
[16:12:41.440]                           restarts <- computeRestarts(cond)
[16:12:41.440]                           for (restart in restarts) {
[16:12:41.440]                             name <- restart$name
[16:12:41.440]                             if (is.null(name)) 
[16:12:41.440]                               next
[16:12:41.440]                             if (!grepl(pattern, name)) 
[16:12:41.440]                               next
[16:12:41.440]                             invokeRestart(restart)
[16:12:41.440]                             muffled <- TRUE
[16:12:41.440]                             break
[16:12:41.440]                           }
[16:12:41.440]                         }
[16:12:41.440]                       }
[16:12:41.440]                       invisible(muffled)
[16:12:41.440]                     }
[16:12:41.440]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.440]                   }
[16:12:41.440]                 }
[16:12:41.440]             }
[16:12:41.440]         }))
[16:12:41.440]     }, error = function(ex) {
[16:12:41.440]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.440]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.440]                 ...future.rng), started = ...future.startTime, 
[16:12:41.440]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.440]             version = "1.8"), class = "FutureResult")
[16:12:41.440]     }, finally = {
[16:12:41.440]         if (!identical(...future.workdir, getwd())) 
[16:12:41.440]             setwd(...future.workdir)
[16:12:41.440]         {
[16:12:41.440]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.440]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.440]             }
[16:12:41.440]             base::options(...future.oldOptions)
[16:12:41.440]             if (.Platform$OS.type == "windows") {
[16:12:41.440]                 old_names <- names(...future.oldEnvVars)
[16:12:41.440]                 envs <- base::Sys.getenv()
[16:12:41.440]                 names <- names(envs)
[16:12:41.440]                 common <- intersect(names, old_names)
[16:12:41.440]                 added <- setdiff(names, old_names)
[16:12:41.440]                 removed <- setdiff(old_names, names)
[16:12:41.440]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.440]                   envs[common]]
[16:12:41.440]                 NAMES <- toupper(changed)
[16:12:41.440]                 args <- list()
[16:12:41.440]                 for (kk in seq_along(NAMES)) {
[16:12:41.440]                   name <- changed[[kk]]
[16:12:41.440]                   NAME <- NAMES[[kk]]
[16:12:41.440]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.440]                     next
[16:12:41.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.440]                 }
[16:12:41.440]                 NAMES <- toupper(added)
[16:12:41.440]                 for (kk in seq_along(NAMES)) {
[16:12:41.440]                   name <- added[[kk]]
[16:12:41.440]                   NAME <- NAMES[[kk]]
[16:12:41.440]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.440]                     next
[16:12:41.440]                   args[[name]] <- ""
[16:12:41.440]                 }
[16:12:41.440]                 NAMES <- toupper(removed)
[16:12:41.440]                 for (kk in seq_along(NAMES)) {
[16:12:41.440]                   name <- removed[[kk]]
[16:12:41.440]                   NAME <- NAMES[[kk]]
[16:12:41.440]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.440]                     next
[16:12:41.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.440]                 }
[16:12:41.440]                 if (length(args) > 0) 
[16:12:41.440]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.440]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.440]             }
[16:12:41.440]             else {
[16:12:41.440]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.440]             }
[16:12:41.440]             {
[16:12:41.440]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.440]                   0L) {
[16:12:41.440]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.440]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.440]                   base::options(opts)
[16:12:41.440]                 }
[16:12:41.440]                 {
[16:12:41.440]                   {
[16:12:41.440]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:41.440]                     NULL
[16:12:41.440]                   }
[16:12:41.440]                   options(future.plan = NULL)
[16:12:41.440]                   if (is.na(NA_character_)) 
[16:12:41.440]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.440]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.440]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:12:41.440]                     envir = parent.frame()) 
[16:12:41.440]                   {
[16:12:41.440]                     default_workers <- missing(workers)
[16:12:41.440]                     if (is.function(workers)) 
[16:12:41.440]                       workers <- workers()
[16:12:41.440]                     workers <- structure(as.integer(workers), 
[16:12:41.440]                       class = class(workers))
[16:12:41.440]                     stop_if_not(is.finite(workers), workers >= 
[16:12:41.440]                       1L)
[16:12:41.440]                     if ((workers == 1L && !inherits(workers, 
[16:12:41.440]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:12:41.440]                       if (default_workers) 
[16:12:41.440]                         supportsMulticore(warn = TRUE)
[16:12:41.440]                       return(sequential(..., envir = envir))
[16:12:41.440]                     }
[16:12:41.440]                     oopts <- options(mc.cores = workers)
[16:12:41.440]                     on.exit(options(oopts))
[16:12:41.440]                     future <- MulticoreFuture(..., workers = workers, 
[16:12:41.440]                       envir = envir)
[16:12:41.440]                     if (!future$lazy) 
[16:12:41.440]                       future <- run(future)
[16:12:41.440]                     invisible(future)
[16:12:41.440]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.440]                 }
[16:12:41.440]             }
[16:12:41.440]         }
[16:12:41.440]     })
[16:12:41.440]     if (TRUE) {
[16:12:41.440]         base::sink(type = "output", split = FALSE)
[16:12:41.440]         if (TRUE) {
[16:12:41.440]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.440]         }
[16:12:41.440]         else {
[16:12:41.440]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.440]         }
[16:12:41.440]         base::close(...future.stdout)
[16:12:41.440]         ...future.stdout <- NULL
[16:12:41.440]     }
[16:12:41.440]     ...future.result$conditions <- ...future.conditions
[16:12:41.440]     ...future.result$finished <- base::Sys.time()
[16:12:41.440]     ...future.result
[16:12:41.440] }
[16:12:41.473]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.442] assign_globals() ...
[16:12:41.473]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.442] List of 1
[16:12:41.442]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:41.442]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:41.442]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:41.442]  - attr(*, "where")=List of 1
[16:12:41.442]   ..$ data:<environment: R_EmptyEnv> 
[16:12:41.442]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:41.442]  - attr(*, "resolved")= logi FALSE
[16:12:41.442]  - attr(*, "total_size")= num 160
[16:12:41.442]  - attr(*, "already-done")= logi TRUE
[16:12:41.473]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.446] - copied ‘data’ to environment
[16:12:41.473]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.446] assign_globals() ... done
[16:12:41.474]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.446] requestCore(): workers = 2
[16:12:41.474]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.448] MulticoreFuture started
[16:12:41.474]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.448] - Launch lazy future ... done
[16:12:41.474]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:41.449] run() for ‘MulticoreFuture’ ... done
[16:12:41.474] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[16:12:41.475] plan(): Setting new future strategy stack:
[16:12:41.475] List of future strategies:
[16:12:41.475] 1. multisession:
[16:12:41.475]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:41.475]    - tweaked: FALSE
[16:12:41.475]    - call: plan(strategy)
[16:12:41.475] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:12:41.475] multisession:
[16:12:41.475] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:41.475] - tweaked: FALSE
[16:12:41.475] - call: plan(strategy)
[16:12:41.482] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:41.482] Not searching for globals
[16:12:41.482] - globals: [0] <none>
[16:12:41.482] getGlobalsAndPackages() ... DONE
[16:12:41.483] [local output] makeClusterPSOCK() ...
[16:12:41.518] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:41.524] [local output] Base port: 11327
[16:12:41.524] [local output] Getting setup options for 2 cluster nodes ...
[16:12:41.524] [local output]  - Node 1 of 2 ...
[16:12:41.525] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:41.526] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmprHXcW8/worker.rank=1.parallelly.parent=84974.14bee5ad56a84.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmprHXcW8/worker.rank=1.parallelly.parent=84974.14bee5ad56a84.pid")'’
[16:12:41.713] - Possible to infer worker's PID: TRUE
[16:12:41.714] [local output] Rscript port: 11327

[16:12:41.714] [local output]  - Node 2 of 2 ...
[16:12:41.715] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:41.715] [local output] Rscript port: 11327

[16:12:41.715] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:41.716] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:41.716] [local output] Setting up PSOCK nodes in parallel
[16:12:41.716] List of 36
[16:12:41.716]  $ worker          : chr "localhost"
[16:12:41.716]   ..- attr(*, "localhost")= logi TRUE
[16:12:41.716]  $ master          : chr "localhost"
[16:12:41.716]  $ port            : int 11327
[16:12:41.716]  $ connectTimeout  : num 120
[16:12:41.716]  $ timeout         : num 2592000
[16:12:41.716]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:41.716]  $ homogeneous     : logi TRUE
[16:12:41.716]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:41.716]  $ rscript_envs    : NULL
[16:12:41.716]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:41.716]  $ rscript_startup : NULL
[16:12:41.716]  $ rscript_sh      : chr "sh"
[16:12:41.716]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:41.716]  $ methods         : logi TRUE
[16:12:41.716]  $ socketOptions   : chr "no-delay"
[16:12:41.716]  $ useXDR          : logi FALSE
[16:12:41.716]  $ outfile         : chr "/dev/null"
[16:12:41.716]  $ renice          : int NA
[16:12:41.716]  $ rshcmd          : NULL
[16:12:41.716]  $ user            : chr(0) 
[16:12:41.716]  $ revtunnel       : logi FALSE
[16:12:41.716]  $ rshlogfile      : NULL
[16:12:41.716]  $ rshopts         : chr(0) 
[16:12:41.716]  $ rank            : int 1
[16:12:41.716]  $ manual          : logi FALSE
[16:12:41.716]  $ dryrun          : logi FALSE
[16:12:41.716]  $ quiet           : logi FALSE
[16:12:41.716]  $ setup_strategy  : chr "parallel"
[16:12:41.716]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:41.716]  $ pidfile         : chr "/tmp/RtmprHXcW8/worker.rank=1.parallelly.parent=84974.14bee5ad56a84.pid"
[16:12:41.716]  $ rshcmd_label    : NULL
[16:12:41.716]  $ rsh_call        : NULL
[16:12:41.716]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:41.716]  $ localMachine    : logi TRUE
[16:12:41.716]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:41.716]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:41.716]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:41.716]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:41.716]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:41.716]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:41.716]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:41.716]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:41.716]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:41.716]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:41.716]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:41.716]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:41.716]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:41.716]  $ arguments       :List of 28
[16:12:41.716]   ..$ worker          : chr "localhost"
[16:12:41.716]   ..$ master          : NULL
[16:12:41.716]   ..$ port            : int 11327
[16:12:41.716]   ..$ connectTimeout  : num 120
[16:12:41.716]   ..$ timeout         : num 2592000
[16:12:41.716]   ..$ rscript         : NULL
[16:12:41.716]   ..$ homogeneous     : NULL
[16:12:41.716]   ..$ rscript_args    : NULL
[16:12:41.716]   ..$ rscript_envs    : NULL
[16:12:41.716]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:41.716]   ..$ rscript_startup : NULL
[16:12:41.716]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:41.716]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:41.716]   ..$ methods         : logi TRUE
[16:12:41.716]   ..$ socketOptions   : chr "no-delay"
[16:12:41.716]   ..$ useXDR          : logi FALSE
[16:12:41.716]   ..$ outfile         : chr "/dev/null"
[16:12:41.716]   ..$ renice          : int NA
[16:12:41.716]   ..$ rshcmd          : NULL
[16:12:41.716]   ..$ user            : NULL
[16:12:41.716]   ..$ revtunnel       : logi NA
[16:12:41.716]   ..$ rshlogfile      : NULL
[16:12:41.716]   ..$ rshopts         : NULL
[16:12:41.716]   ..$ rank            : int 1
[16:12:41.716]   ..$ manual          : logi FALSE
[16:12:41.716]   ..$ dryrun          : logi FALSE
[16:12:41.716]   ..$ quiet           : logi FALSE
[16:12:41.716]   ..$ setup_strategy  : chr "parallel"
[16:12:41.716]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:41.734] [local output] System call to launch all workers:
[16:12:41.734] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmprHXcW8/worker.rank=1.parallelly.parent=84974.14bee5ad56a84.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11327 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:41.734] [local output] Starting PSOCK main server
[16:12:41.735] [local output] Workers launched
[16:12:41.736] [local output] Waiting for workers to connect back
[16:12:41.736]  - [local output] 0 workers out of 2 ready
[16:12:41.978]  - [local output] 0 workers out of 2 ready
[16:12:41.978]  - [local output] 1 workers out of 2 ready
[16:12:41.983]  - [local output] 1 workers out of 2 ready
[16:12:41.984]  - [local output] 2 workers out of 2 ready
[16:12:41.984] [local output] Launching of workers completed
[16:12:41.984] [local output] Collecting session information from workers
[16:12:41.985] [local output]  - Worker #1 of 2
[16:12:41.985] [local output]  - Worker #2 of 2
[16:12:41.986] [local output] makeClusterPSOCK() ... done
[16:12:41.998] Packages needed by the future expression (n = 0): <none>
[16:12:41.998] Packages needed by future strategies (n = 0): <none>
[16:12:41.998] {
[16:12:41.998]     {
[16:12:41.998]         {
[16:12:41.998]             ...future.startTime <- base::Sys.time()
[16:12:41.998]             {
[16:12:41.998]                 {
[16:12:41.998]                   {
[16:12:41.998]                     {
[16:12:41.998]                       base::local({
[16:12:41.998]                         has_future <- base::requireNamespace("future", 
[16:12:41.998]                           quietly = TRUE)
[16:12:41.998]                         if (has_future) {
[16:12:41.998]                           ns <- base::getNamespace("future")
[16:12:41.998]                           version <- ns[[".package"]][["version"]]
[16:12:41.998]                           if (is.null(version)) 
[16:12:41.998]                             version <- utils::packageVersion("future")
[16:12:41.998]                         }
[16:12:41.998]                         else {
[16:12:41.998]                           version <- NULL
[16:12:41.998]                         }
[16:12:41.998]                         if (!has_future || version < "1.8.0") {
[16:12:41.998]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:41.998]                             "", base::R.version$version.string), 
[16:12:41.998]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:41.998]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:41.998]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:41.998]                               "release", "version")], collapse = " "), 
[16:12:41.998]                             hostname = base::Sys.info()[["nodename"]])
[16:12:41.998]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:41.998]                             info)
[16:12:41.998]                           info <- base::paste(info, collapse = "; ")
[16:12:41.998]                           if (!has_future) {
[16:12:41.998]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:41.998]                               info)
[16:12:41.998]                           }
[16:12:41.998]                           else {
[16:12:41.998]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:41.998]                               info, version)
[16:12:41.998]                           }
[16:12:41.998]                           base::stop(msg)
[16:12:41.998]                         }
[16:12:41.998]                       })
[16:12:41.998]                     }
[16:12:41.998]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:41.998]                     base::options(mc.cores = 1L)
[16:12:41.998]                   }
[16:12:41.998]                   options(future.plan = NULL)
[16:12:41.998]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.998]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:41.998]                 }
[16:12:41.998]                 ...future.workdir <- getwd()
[16:12:41.998]             }
[16:12:41.998]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:41.998]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:41.998]         }
[16:12:41.998]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:41.998]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:41.998]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:41.998]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:41.998]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:41.998]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:41.998]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:41.998]             base::names(...future.oldOptions))
[16:12:41.998]     }
[16:12:41.998]     if (FALSE) {
[16:12:41.998]     }
[16:12:41.998]     else {
[16:12:41.998]         if (TRUE) {
[16:12:41.998]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:41.998]                 open = "w")
[16:12:41.998]         }
[16:12:41.998]         else {
[16:12:41.998]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:41.998]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:41.998]         }
[16:12:41.998]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:41.998]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:41.998]             base::sink(type = "output", split = FALSE)
[16:12:41.998]             base::close(...future.stdout)
[16:12:41.998]         }, add = TRUE)
[16:12:41.998]     }
[16:12:41.998]     ...future.frame <- base::sys.nframe()
[16:12:41.998]     ...future.conditions <- base::list()
[16:12:41.998]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:41.998]     if (FALSE) {
[16:12:41.998]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:41.998]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:41.998]     }
[16:12:41.998]     ...future.result <- base::tryCatch({
[16:12:41.998]         base::withCallingHandlers({
[16:12:41.998]             ...future.value <- base::withVisible(base::local({
[16:12:41.998]                 ...future.makeSendCondition <- local({
[16:12:41.998]                   sendCondition <- NULL
[16:12:41.998]                   function(frame = 1L) {
[16:12:41.998]                     if (is.function(sendCondition)) 
[16:12:41.998]                       return(sendCondition)
[16:12:41.998]                     ns <- getNamespace("parallel")
[16:12:41.998]                     if (exists("sendData", mode = "function", 
[16:12:41.998]                       envir = ns)) {
[16:12:41.998]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:41.998]                         envir = ns)
[16:12:41.998]                       envir <- sys.frame(frame)
[16:12:41.998]                       master <- NULL
[16:12:41.998]                       while (!identical(envir, .GlobalEnv) && 
[16:12:41.998]                         !identical(envir, emptyenv())) {
[16:12:41.998]                         if (exists("master", mode = "list", envir = envir, 
[16:12:41.998]                           inherits = FALSE)) {
[16:12:41.998]                           master <- get("master", mode = "list", 
[16:12:41.998]                             envir = envir, inherits = FALSE)
[16:12:41.998]                           if (inherits(master, c("SOCKnode", 
[16:12:41.998]                             "SOCK0node"))) {
[16:12:41.998]                             sendCondition <<- function(cond) {
[16:12:41.998]                               data <- list(type = "VALUE", value = cond, 
[16:12:41.998]                                 success = TRUE)
[16:12:41.998]                               parallel_sendData(master, data)
[16:12:41.998]                             }
[16:12:41.998]                             return(sendCondition)
[16:12:41.998]                           }
[16:12:41.998]                         }
[16:12:41.998]                         frame <- frame + 1L
[16:12:41.998]                         envir <- sys.frame(frame)
[16:12:41.998]                       }
[16:12:41.998]                     }
[16:12:41.998]                     sendCondition <<- function(cond) NULL
[16:12:41.998]                   }
[16:12:41.998]                 })
[16:12:41.998]                 withCallingHandlers({
[16:12:41.998]                   NA
[16:12:41.998]                 }, immediateCondition = function(cond) {
[16:12:41.998]                   sendCondition <- ...future.makeSendCondition()
[16:12:41.998]                   sendCondition(cond)
[16:12:41.998]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.998]                   {
[16:12:41.998]                     inherits <- base::inherits
[16:12:41.998]                     invokeRestart <- base::invokeRestart
[16:12:41.998]                     is.null <- base::is.null
[16:12:41.998]                     muffled <- FALSE
[16:12:41.998]                     if (inherits(cond, "message")) {
[16:12:41.998]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:41.998]                       if (muffled) 
[16:12:41.998]                         invokeRestart("muffleMessage")
[16:12:41.998]                     }
[16:12:41.998]                     else if (inherits(cond, "warning")) {
[16:12:41.998]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:41.998]                       if (muffled) 
[16:12:41.998]                         invokeRestart("muffleWarning")
[16:12:41.998]                     }
[16:12:41.998]                     else if (inherits(cond, "condition")) {
[16:12:41.998]                       if (!is.null(pattern)) {
[16:12:41.998]                         computeRestarts <- base::computeRestarts
[16:12:41.998]                         grepl <- base::grepl
[16:12:41.998]                         restarts <- computeRestarts(cond)
[16:12:41.998]                         for (restart in restarts) {
[16:12:41.998]                           name <- restart$name
[16:12:41.998]                           if (is.null(name)) 
[16:12:41.998]                             next
[16:12:41.998]                           if (!grepl(pattern, name)) 
[16:12:41.998]                             next
[16:12:41.998]                           invokeRestart(restart)
[16:12:41.998]                           muffled <- TRUE
[16:12:41.998]                           break
[16:12:41.998]                         }
[16:12:41.998]                       }
[16:12:41.998]                     }
[16:12:41.998]                     invisible(muffled)
[16:12:41.998]                   }
[16:12:41.998]                   muffleCondition(cond)
[16:12:41.998]                 })
[16:12:41.998]             }))
[16:12:41.998]             future::FutureResult(value = ...future.value$value, 
[16:12:41.998]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.998]                   ...future.rng), globalenv = if (FALSE) 
[16:12:41.998]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:41.998]                     ...future.globalenv.names))
[16:12:41.998]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:41.998]         }, condition = base::local({
[16:12:41.998]             c <- base::c
[16:12:41.998]             inherits <- base::inherits
[16:12:41.998]             invokeRestart <- base::invokeRestart
[16:12:41.998]             length <- base::length
[16:12:41.998]             list <- base::list
[16:12:41.998]             seq.int <- base::seq.int
[16:12:41.998]             signalCondition <- base::signalCondition
[16:12:41.998]             sys.calls <- base::sys.calls
[16:12:41.998]             `[[` <- base::`[[`
[16:12:41.998]             `+` <- base::`+`
[16:12:41.998]             `<<-` <- base::`<<-`
[16:12:41.998]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:41.998]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:41.998]                   3L)]
[16:12:41.998]             }
[16:12:41.998]             function(cond) {
[16:12:41.998]                 is_error <- inherits(cond, "error")
[16:12:41.998]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:41.998]                   NULL)
[16:12:41.998]                 if (is_error) {
[16:12:41.998]                   sessionInformation <- function() {
[16:12:41.998]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:41.998]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:41.998]                       search = base::search(), system = base::Sys.info())
[16:12:41.998]                   }
[16:12:41.998]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.998]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:41.998]                     cond$call), session = sessionInformation(), 
[16:12:41.998]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:41.998]                   signalCondition(cond)
[16:12:41.998]                 }
[16:12:41.998]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:41.998]                 "immediateCondition"))) {
[16:12:41.998]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:41.998]                   ...future.conditions[[length(...future.conditions) + 
[16:12:41.998]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:41.998]                   if (TRUE && !signal) {
[16:12:41.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.998]                     {
[16:12:41.998]                       inherits <- base::inherits
[16:12:41.998]                       invokeRestart <- base::invokeRestart
[16:12:41.998]                       is.null <- base::is.null
[16:12:41.998]                       muffled <- FALSE
[16:12:41.998]                       if (inherits(cond, "message")) {
[16:12:41.998]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.998]                         if (muffled) 
[16:12:41.998]                           invokeRestart("muffleMessage")
[16:12:41.998]                       }
[16:12:41.998]                       else if (inherits(cond, "warning")) {
[16:12:41.998]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.998]                         if (muffled) 
[16:12:41.998]                           invokeRestart("muffleWarning")
[16:12:41.998]                       }
[16:12:41.998]                       else if (inherits(cond, "condition")) {
[16:12:41.998]                         if (!is.null(pattern)) {
[16:12:41.998]                           computeRestarts <- base::computeRestarts
[16:12:41.998]                           grepl <- base::grepl
[16:12:41.998]                           restarts <- computeRestarts(cond)
[16:12:41.998]                           for (restart in restarts) {
[16:12:41.998]                             name <- restart$name
[16:12:41.998]                             if (is.null(name)) 
[16:12:41.998]                               next
[16:12:41.998]                             if (!grepl(pattern, name)) 
[16:12:41.998]                               next
[16:12:41.998]                             invokeRestart(restart)
[16:12:41.998]                             muffled <- TRUE
[16:12:41.998]                             break
[16:12:41.998]                           }
[16:12:41.998]                         }
[16:12:41.998]                       }
[16:12:41.998]                       invisible(muffled)
[16:12:41.998]                     }
[16:12:41.998]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.998]                   }
[16:12:41.998]                 }
[16:12:41.998]                 else {
[16:12:41.998]                   if (TRUE) {
[16:12:41.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:41.998]                     {
[16:12:41.998]                       inherits <- base::inherits
[16:12:41.998]                       invokeRestart <- base::invokeRestart
[16:12:41.998]                       is.null <- base::is.null
[16:12:41.998]                       muffled <- FALSE
[16:12:41.998]                       if (inherits(cond, "message")) {
[16:12:41.998]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:41.998]                         if (muffled) 
[16:12:41.998]                           invokeRestart("muffleMessage")
[16:12:41.998]                       }
[16:12:41.998]                       else if (inherits(cond, "warning")) {
[16:12:41.998]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:41.998]                         if (muffled) 
[16:12:41.998]                           invokeRestart("muffleWarning")
[16:12:41.998]                       }
[16:12:41.998]                       else if (inherits(cond, "condition")) {
[16:12:41.998]                         if (!is.null(pattern)) {
[16:12:41.998]                           computeRestarts <- base::computeRestarts
[16:12:41.998]                           grepl <- base::grepl
[16:12:41.998]                           restarts <- computeRestarts(cond)
[16:12:41.998]                           for (restart in restarts) {
[16:12:41.998]                             name <- restart$name
[16:12:41.998]                             if (is.null(name)) 
[16:12:41.998]                               next
[16:12:41.998]                             if (!grepl(pattern, name)) 
[16:12:41.998]                               next
[16:12:41.998]                             invokeRestart(restart)
[16:12:41.998]                             muffled <- TRUE
[16:12:41.998]                             break
[16:12:41.998]                           }
[16:12:41.998]                         }
[16:12:41.998]                       }
[16:12:41.998]                       invisible(muffled)
[16:12:41.998]                     }
[16:12:41.998]                     muffleCondition(cond, pattern = "^muffle")
[16:12:41.998]                   }
[16:12:41.998]                 }
[16:12:41.998]             }
[16:12:41.998]         }))
[16:12:41.998]     }, error = function(ex) {
[16:12:41.998]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:41.998]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:41.998]                 ...future.rng), started = ...future.startTime, 
[16:12:41.998]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:41.998]             version = "1.8"), class = "FutureResult")
[16:12:41.998]     }, finally = {
[16:12:41.998]         if (!identical(...future.workdir, getwd())) 
[16:12:41.998]             setwd(...future.workdir)
[16:12:41.998]         {
[16:12:41.998]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:41.998]                 ...future.oldOptions$nwarnings <- NULL
[16:12:41.998]             }
[16:12:41.998]             base::options(...future.oldOptions)
[16:12:41.998]             if (.Platform$OS.type == "windows") {
[16:12:41.998]                 old_names <- names(...future.oldEnvVars)
[16:12:41.998]                 envs <- base::Sys.getenv()
[16:12:41.998]                 names <- names(envs)
[16:12:41.998]                 common <- intersect(names, old_names)
[16:12:41.998]                 added <- setdiff(names, old_names)
[16:12:41.998]                 removed <- setdiff(old_names, names)
[16:12:41.998]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:41.998]                   envs[common]]
[16:12:41.998]                 NAMES <- toupper(changed)
[16:12:41.998]                 args <- list()
[16:12:41.998]                 for (kk in seq_along(NAMES)) {
[16:12:41.998]                   name <- changed[[kk]]
[16:12:41.998]                   NAME <- NAMES[[kk]]
[16:12:41.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.998]                     next
[16:12:41.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.998]                 }
[16:12:41.998]                 NAMES <- toupper(added)
[16:12:41.998]                 for (kk in seq_along(NAMES)) {
[16:12:41.998]                   name <- added[[kk]]
[16:12:41.998]                   NAME <- NAMES[[kk]]
[16:12:41.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.998]                     next
[16:12:41.998]                   args[[name]] <- ""
[16:12:41.998]                 }
[16:12:41.998]                 NAMES <- toupper(removed)
[16:12:41.998]                 for (kk in seq_along(NAMES)) {
[16:12:41.998]                   name <- removed[[kk]]
[16:12:41.998]                   NAME <- NAMES[[kk]]
[16:12:41.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:41.998]                     next
[16:12:41.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:41.998]                 }
[16:12:41.998]                 if (length(args) > 0) 
[16:12:41.998]                   base::do.call(base::Sys.setenv, args = args)
[16:12:41.998]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:41.998]             }
[16:12:41.998]             else {
[16:12:41.998]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:41.998]             }
[16:12:41.998]             {
[16:12:41.998]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:41.998]                   0L) {
[16:12:41.998]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:41.998]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:41.998]                   base::options(opts)
[16:12:41.998]                 }
[16:12:41.998]                 {
[16:12:41.998]                   {
[16:12:41.998]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:41.998]                     NULL
[16:12:41.998]                   }
[16:12:41.998]                   options(future.plan = NULL)
[16:12:41.998]                   if (is.na(NA_character_)) 
[16:12:41.998]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:41.998]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:41.998]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:41.998]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:41.998]                     envir = parent.frame()) 
[16:12:41.998]                   {
[16:12:41.998]                     if (is.function(workers)) 
[16:12:41.998]                       workers <- workers()
[16:12:41.998]                     workers <- structure(as.integer(workers), 
[16:12:41.998]                       class = class(workers))
[16:12:41.998]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:41.998]                       workers >= 1)
[16:12:41.998]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:41.998]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:41.998]                     }
[16:12:41.998]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:41.998]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:41.998]                       envir = envir)
[16:12:41.998]                     if (!future$lazy) 
[16:12:41.998]                       future <- run(future)
[16:12:41.998]                     invisible(future)
[16:12:41.998]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:41.998]                 }
[16:12:41.998]             }
[16:12:41.998]         }
[16:12:41.998]     })
[16:12:41.998]     if (TRUE) {
[16:12:41.998]         base::sink(type = "output", split = FALSE)
[16:12:41.998]         if (TRUE) {
[16:12:41.998]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:41.998]         }
[16:12:41.998]         else {
[16:12:41.998]             ...future.result["stdout"] <- base::list(NULL)
[16:12:41.998]         }
[16:12:41.998]         base::close(...future.stdout)
[16:12:41.998]         ...future.stdout <- NULL
[16:12:41.998]     }
[16:12:41.998]     ...future.result$conditions <- ...future.conditions
[16:12:41.998]     ...future.result$finished <- base::Sys.time()
[16:12:41.998]     ...future.result
[16:12:41.998] }
[16:12:42.069] MultisessionFuture started
[16:12:42.069] result() for ClusterFuture ...
[16:12:42.070] receiveMessageFromWorker() for ClusterFuture ...
[16:12:42.070] - Validating connection of MultisessionFuture
[16:12:42.101] - received message: FutureResult
[16:12:42.101] - Received FutureResult
[16:12:42.102] - Erased future from FutureRegistry
[16:12:42.102] result() for ClusterFuture ...
[16:12:42.102] - result already collected: FutureResult
[16:12:42.102] result() for ClusterFuture ... done
[16:12:42.102] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:42.102] result() for ClusterFuture ... done
[16:12:42.103] result() for ClusterFuture ...
[16:12:42.103] - result already collected: FutureResult
[16:12:42.103] result() for ClusterFuture ... done
[16:12:42.103] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:12:42.107] plan(): nbrOfWorkers() = 2
[16:12:42.107] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:12:42.107] Searching for globals...
[16:12:42.108] - globals found: [1] ‘getOption’
[16:12:42.108] Searching for globals ... DONE
[16:12:42.108] Resolving globals: FALSE
[16:12:42.109] 
[16:12:42.109] 
[16:12:42.109] getGlobalsAndPackages() ... DONE
[16:12:42.109] run() for ‘Future’ ...
[16:12:42.109] - state: ‘created’
[16:12:42.109] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:42.124] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:42.124] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:42.125]   - Field: ‘node’
[16:12:42.125]   - Field: ‘label’
[16:12:42.125]   - Field: ‘local’
[16:12:42.125]   - Field: ‘owner’
[16:12:42.125]   - Field: ‘envir’
[16:12:42.125]   - Field: ‘workers’
[16:12:42.125]   - Field: ‘packages’
[16:12:42.125]   - Field: ‘gc’
[16:12:42.125]   - Field: ‘conditions’
[16:12:42.125]   - Field: ‘persistent’
[16:12:42.126]   - Field: ‘expr’
[16:12:42.126]   - Field: ‘uuid’
[16:12:42.126]   - Field: ‘seed’
[16:12:42.126]   - Field: ‘version’
[16:12:42.126]   - Field: ‘result’
[16:12:42.126]   - Field: ‘asynchronous’
[16:12:42.126]   - Field: ‘calls’
[16:12:42.126]   - Field: ‘globals’
[16:12:42.126]   - Field: ‘stdout’
[16:12:42.127]   - Field: ‘earlySignal’
[16:12:42.127]   - Field: ‘lazy’
[16:12:42.127]   - Field: ‘state’
[16:12:42.127] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:42.127] - Launch lazy future ...
[16:12:42.127] Packages needed by the future expression (n = 0): <none>
[16:12:42.127] Packages needed by future strategies (n = 0): <none>
[16:12:42.128] {
[16:12:42.128]     {
[16:12:42.128]         {
[16:12:42.128]             ...future.startTime <- base::Sys.time()
[16:12:42.128]             {
[16:12:42.128]                 {
[16:12:42.128]                   {
[16:12:42.128]                     {
[16:12:42.128]                       base::local({
[16:12:42.128]                         has_future <- base::requireNamespace("future", 
[16:12:42.128]                           quietly = TRUE)
[16:12:42.128]                         if (has_future) {
[16:12:42.128]                           ns <- base::getNamespace("future")
[16:12:42.128]                           version <- ns[[".package"]][["version"]]
[16:12:42.128]                           if (is.null(version)) 
[16:12:42.128]                             version <- utils::packageVersion("future")
[16:12:42.128]                         }
[16:12:42.128]                         else {
[16:12:42.128]                           version <- NULL
[16:12:42.128]                         }
[16:12:42.128]                         if (!has_future || version < "1.8.0") {
[16:12:42.128]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:42.128]                             "", base::R.version$version.string), 
[16:12:42.128]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:42.128]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:42.128]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:42.128]                               "release", "version")], collapse = " "), 
[16:12:42.128]                             hostname = base::Sys.info()[["nodename"]])
[16:12:42.128]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:42.128]                             info)
[16:12:42.128]                           info <- base::paste(info, collapse = "; ")
[16:12:42.128]                           if (!has_future) {
[16:12:42.128]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:42.128]                               info)
[16:12:42.128]                           }
[16:12:42.128]                           else {
[16:12:42.128]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:42.128]                               info, version)
[16:12:42.128]                           }
[16:12:42.128]                           base::stop(msg)
[16:12:42.128]                         }
[16:12:42.128]                       })
[16:12:42.128]                     }
[16:12:42.128]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:42.128]                     base::options(mc.cores = 1L)
[16:12:42.128]                   }
[16:12:42.128]                   options(future.plan = NULL)
[16:12:42.128]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.128]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:42.128]                 }
[16:12:42.128]                 ...future.workdir <- getwd()
[16:12:42.128]             }
[16:12:42.128]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:42.128]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:42.128]         }
[16:12:42.128]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:12:42.128]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:42.128]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:12:42.128]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:42.128]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:42.128]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:42.128]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:42.128]             base::names(...future.oldOptions))
[16:12:42.128]     }
[16:12:42.128]     if (FALSE) {
[16:12:42.128]     }
[16:12:42.128]     else {
[16:12:42.128]         if (TRUE) {
[16:12:42.128]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:42.128]                 open = "w")
[16:12:42.128]         }
[16:12:42.128]         else {
[16:12:42.128]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:42.128]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:42.128]         }
[16:12:42.128]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:42.128]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:42.128]             base::sink(type = "output", split = FALSE)
[16:12:42.128]             base::close(...future.stdout)
[16:12:42.128]         }, add = TRUE)
[16:12:42.128]     }
[16:12:42.128]     ...future.frame <- base::sys.nframe()
[16:12:42.128]     ...future.conditions <- base::list()
[16:12:42.128]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:42.128]     if (FALSE) {
[16:12:42.128]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:42.128]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:42.128]     }
[16:12:42.128]     ...future.result <- base::tryCatch({
[16:12:42.128]         base::withCallingHandlers({
[16:12:42.128]             ...future.value <- base::withVisible(base::local({
[16:12:42.128]                 ...future.makeSendCondition <- local({
[16:12:42.128]                   sendCondition <- NULL
[16:12:42.128]                   function(frame = 1L) {
[16:12:42.128]                     if (is.function(sendCondition)) 
[16:12:42.128]                       return(sendCondition)
[16:12:42.128]                     ns <- getNamespace("parallel")
[16:12:42.128]                     if (exists("sendData", mode = "function", 
[16:12:42.128]                       envir = ns)) {
[16:12:42.128]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:42.128]                         envir = ns)
[16:12:42.128]                       envir <- sys.frame(frame)
[16:12:42.128]                       master <- NULL
[16:12:42.128]                       while (!identical(envir, .GlobalEnv) && 
[16:12:42.128]                         !identical(envir, emptyenv())) {
[16:12:42.128]                         if (exists("master", mode = "list", envir = envir, 
[16:12:42.128]                           inherits = FALSE)) {
[16:12:42.128]                           master <- get("master", mode = "list", 
[16:12:42.128]                             envir = envir, inherits = FALSE)
[16:12:42.128]                           if (inherits(master, c("SOCKnode", 
[16:12:42.128]                             "SOCK0node"))) {
[16:12:42.128]                             sendCondition <<- function(cond) {
[16:12:42.128]                               data <- list(type = "VALUE", value = cond, 
[16:12:42.128]                                 success = TRUE)
[16:12:42.128]                               parallel_sendData(master, data)
[16:12:42.128]                             }
[16:12:42.128]                             return(sendCondition)
[16:12:42.128]                           }
[16:12:42.128]                         }
[16:12:42.128]                         frame <- frame + 1L
[16:12:42.128]                         envir <- sys.frame(frame)
[16:12:42.128]                       }
[16:12:42.128]                     }
[16:12:42.128]                     sendCondition <<- function(cond) NULL
[16:12:42.128]                   }
[16:12:42.128]                 })
[16:12:42.128]                 withCallingHandlers({
[16:12:42.128]                   getOption("future.globals.onMissing")
[16:12:42.128]                 }, immediateCondition = function(cond) {
[16:12:42.128]                   sendCondition <- ...future.makeSendCondition()
[16:12:42.128]                   sendCondition(cond)
[16:12:42.128]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.128]                   {
[16:12:42.128]                     inherits <- base::inherits
[16:12:42.128]                     invokeRestart <- base::invokeRestart
[16:12:42.128]                     is.null <- base::is.null
[16:12:42.128]                     muffled <- FALSE
[16:12:42.128]                     if (inherits(cond, "message")) {
[16:12:42.128]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:42.128]                       if (muffled) 
[16:12:42.128]                         invokeRestart("muffleMessage")
[16:12:42.128]                     }
[16:12:42.128]                     else if (inherits(cond, "warning")) {
[16:12:42.128]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:42.128]                       if (muffled) 
[16:12:42.128]                         invokeRestart("muffleWarning")
[16:12:42.128]                     }
[16:12:42.128]                     else if (inherits(cond, "condition")) {
[16:12:42.128]                       if (!is.null(pattern)) {
[16:12:42.128]                         computeRestarts <- base::computeRestarts
[16:12:42.128]                         grepl <- base::grepl
[16:12:42.128]                         restarts <- computeRestarts(cond)
[16:12:42.128]                         for (restart in restarts) {
[16:12:42.128]                           name <- restart$name
[16:12:42.128]                           if (is.null(name)) 
[16:12:42.128]                             next
[16:12:42.128]                           if (!grepl(pattern, name)) 
[16:12:42.128]                             next
[16:12:42.128]                           invokeRestart(restart)
[16:12:42.128]                           muffled <- TRUE
[16:12:42.128]                           break
[16:12:42.128]                         }
[16:12:42.128]                       }
[16:12:42.128]                     }
[16:12:42.128]                     invisible(muffled)
[16:12:42.128]                   }
[16:12:42.128]                   muffleCondition(cond)
[16:12:42.128]                 })
[16:12:42.128]             }))
[16:12:42.128]             future::FutureResult(value = ...future.value$value, 
[16:12:42.128]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.128]                   ...future.rng), globalenv = if (FALSE) 
[16:12:42.128]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:42.128]                     ...future.globalenv.names))
[16:12:42.128]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:42.128]         }, condition = base::local({
[16:12:42.128]             c <- base::c
[16:12:42.128]             inherits <- base::inherits
[16:12:42.128]             invokeRestart <- base::invokeRestart
[16:12:42.128]             length <- base::length
[16:12:42.128]             list <- base::list
[16:12:42.128]             seq.int <- base::seq.int
[16:12:42.128]             signalCondition <- base::signalCondition
[16:12:42.128]             sys.calls <- base::sys.calls
[16:12:42.128]             `[[` <- base::`[[`
[16:12:42.128]             `+` <- base::`+`
[16:12:42.128]             `<<-` <- base::`<<-`
[16:12:42.128]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:42.128]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:42.128]                   3L)]
[16:12:42.128]             }
[16:12:42.128]             function(cond) {
[16:12:42.128]                 is_error <- inherits(cond, "error")
[16:12:42.128]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:42.128]                   NULL)
[16:12:42.128]                 if (is_error) {
[16:12:42.128]                   sessionInformation <- function() {
[16:12:42.128]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:42.128]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:42.128]                       search = base::search(), system = base::Sys.info())
[16:12:42.128]                   }
[16:12:42.128]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.128]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:42.128]                     cond$call), session = sessionInformation(), 
[16:12:42.128]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:42.128]                   signalCondition(cond)
[16:12:42.128]                 }
[16:12:42.128]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:42.128]                 "immediateCondition"))) {
[16:12:42.128]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:42.128]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.128]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:42.128]                   if (TRUE && !signal) {
[16:12:42.128]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.128]                     {
[16:12:42.128]                       inherits <- base::inherits
[16:12:42.128]                       invokeRestart <- base::invokeRestart
[16:12:42.128]                       is.null <- base::is.null
[16:12:42.128]                       muffled <- FALSE
[16:12:42.128]                       if (inherits(cond, "message")) {
[16:12:42.128]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.128]                         if (muffled) 
[16:12:42.128]                           invokeRestart("muffleMessage")
[16:12:42.128]                       }
[16:12:42.128]                       else if (inherits(cond, "warning")) {
[16:12:42.128]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.128]                         if (muffled) 
[16:12:42.128]                           invokeRestart("muffleWarning")
[16:12:42.128]                       }
[16:12:42.128]                       else if (inherits(cond, "condition")) {
[16:12:42.128]                         if (!is.null(pattern)) {
[16:12:42.128]                           computeRestarts <- base::computeRestarts
[16:12:42.128]                           grepl <- base::grepl
[16:12:42.128]                           restarts <- computeRestarts(cond)
[16:12:42.128]                           for (restart in restarts) {
[16:12:42.128]                             name <- restart$name
[16:12:42.128]                             if (is.null(name)) 
[16:12:42.128]                               next
[16:12:42.128]                             if (!grepl(pattern, name)) 
[16:12:42.128]                               next
[16:12:42.128]                             invokeRestart(restart)
[16:12:42.128]                             muffled <- TRUE
[16:12:42.128]                             break
[16:12:42.128]                           }
[16:12:42.128]                         }
[16:12:42.128]                       }
[16:12:42.128]                       invisible(muffled)
[16:12:42.128]                     }
[16:12:42.128]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.128]                   }
[16:12:42.128]                 }
[16:12:42.128]                 else {
[16:12:42.128]                   if (TRUE) {
[16:12:42.128]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.128]                     {
[16:12:42.128]                       inherits <- base::inherits
[16:12:42.128]                       invokeRestart <- base::invokeRestart
[16:12:42.128]                       is.null <- base::is.null
[16:12:42.128]                       muffled <- FALSE
[16:12:42.128]                       if (inherits(cond, "message")) {
[16:12:42.128]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.128]                         if (muffled) 
[16:12:42.128]                           invokeRestart("muffleMessage")
[16:12:42.128]                       }
[16:12:42.128]                       else if (inherits(cond, "warning")) {
[16:12:42.128]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.128]                         if (muffled) 
[16:12:42.128]                           invokeRestart("muffleWarning")
[16:12:42.128]                       }
[16:12:42.128]                       else if (inherits(cond, "condition")) {
[16:12:42.128]                         if (!is.null(pattern)) {
[16:12:42.128]                           computeRestarts <- base::computeRestarts
[16:12:42.128]                           grepl <- base::grepl
[16:12:42.128]                           restarts <- computeRestarts(cond)
[16:12:42.128]                           for (restart in restarts) {
[16:12:42.128]                             name <- restart$name
[16:12:42.128]                             if (is.null(name)) 
[16:12:42.128]                               next
[16:12:42.128]                             if (!grepl(pattern, name)) 
[16:12:42.128]                               next
[16:12:42.128]                             invokeRestart(restart)
[16:12:42.128]                             muffled <- TRUE
[16:12:42.128]                             break
[16:12:42.128]                           }
[16:12:42.128]                         }
[16:12:42.128]                       }
[16:12:42.128]                       invisible(muffled)
[16:12:42.128]                     }
[16:12:42.128]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.128]                   }
[16:12:42.128]                 }
[16:12:42.128]             }
[16:12:42.128]         }))
[16:12:42.128]     }, error = function(ex) {
[16:12:42.128]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:42.128]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.128]                 ...future.rng), started = ...future.startTime, 
[16:12:42.128]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:42.128]             version = "1.8"), class = "FutureResult")
[16:12:42.128]     }, finally = {
[16:12:42.128]         if (!identical(...future.workdir, getwd())) 
[16:12:42.128]             setwd(...future.workdir)
[16:12:42.128]         {
[16:12:42.128]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:42.128]                 ...future.oldOptions$nwarnings <- NULL
[16:12:42.128]             }
[16:12:42.128]             base::options(...future.oldOptions)
[16:12:42.128]             if (.Platform$OS.type == "windows") {
[16:12:42.128]                 old_names <- names(...future.oldEnvVars)
[16:12:42.128]                 envs <- base::Sys.getenv()
[16:12:42.128]                 names <- names(envs)
[16:12:42.128]                 common <- intersect(names, old_names)
[16:12:42.128]                 added <- setdiff(names, old_names)
[16:12:42.128]                 removed <- setdiff(old_names, names)
[16:12:42.128]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:42.128]                   envs[common]]
[16:12:42.128]                 NAMES <- toupper(changed)
[16:12:42.128]                 args <- list()
[16:12:42.128]                 for (kk in seq_along(NAMES)) {
[16:12:42.128]                   name <- changed[[kk]]
[16:12:42.128]                   NAME <- NAMES[[kk]]
[16:12:42.128]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.128]                     next
[16:12:42.128]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.128]                 }
[16:12:42.128]                 NAMES <- toupper(added)
[16:12:42.128]                 for (kk in seq_along(NAMES)) {
[16:12:42.128]                   name <- added[[kk]]
[16:12:42.128]                   NAME <- NAMES[[kk]]
[16:12:42.128]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.128]                     next
[16:12:42.128]                   args[[name]] <- ""
[16:12:42.128]                 }
[16:12:42.128]                 NAMES <- toupper(removed)
[16:12:42.128]                 for (kk in seq_along(NAMES)) {
[16:12:42.128]                   name <- removed[[kk]]
[16:12:42.128]                   NAME <- NAMES[[kk]]
[16:12:42.128]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.128]                     next
[16:12:42.128]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.128]                 }
[16:12:42.128]                 if (length(args) > 0) 
[16:12:42.128]                   base::do.call(base::Sys.setenv, args = args)
[16:12:42.128]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:42.128]             }
[16:12:42.128]             else {
[16:12:42.128]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:42.128]             }
[16:12:42.128]             {
[16:12:42.128]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:42.128]                   0L) {
[16:12:42.128]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:42.128]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:42.128]                   base::options(opts)
[16:12:42.128]                 }
[16:12:42.128]                 {
[16:12:42.128]                   {
[16:12:42.128]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:42.128]                     NULL
[16:12:42.128]                   }
[16:12:42.128]                   options(future.plan = NULL)
[16:12:42.128]                   if (is.na(NA_character_)) 
[16:12:42.128]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.128]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:42.128]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:42.128]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:42.128]                     envir = parent.frame()) 
[16:12:42.128]                   {
[16:12:42.128]                     if (is.function(workers)) 
[16:12:42.128]                       workers <- workers()
[16:12:42.128]                     workers <- structure(as.integer(workers), 
[16:12:42.128]                       class = class(workers))
[16:12:42.128]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:42.128]                       workers >= 1)
[16:12:42.128]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:42.128]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:42.128]                     }
[16:12:42.128]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:42.128]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:42.128]                       envir = envir)
[16:12:42.128]                     if (!future$lazy) 
[16:12:42.128]                       future <- run(future)
[16:12:42.128]                     invisible(future)
[16:12:42.128]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:42.128]                 }
[16:12:42.128]             }
[16:12:42.128]         }
[16:12:42.128]     })
[16:12:42.128]     if (TRUE) {
[16:12:42.128]         base::sink(type = "output", split = FALSE)
[16:12:42.128]         if (TRUE) {
[16:12:42.128]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:42.128]         }
[16:12:42.128]         else {
[16:12:42.128]             ...future.result["stdout"] <- base::list(NULL)
[16:12:42.128]         }
[16:12:42.128]         base::close(...future.stdout)
[16:12:42.128]         ...future.stdout <- NULL
[16:12:42.128]     }
[16:12:42.128]     ...future.result$conditions <- ...future.conditions
[16:12:42.128]     ...future.result$finished <- base::Sys.time()
[16:12:42.128]     ...future.result
[16:12:42.128] }
[16:12:42.131] MultisessionFuture started
[16:12:42.132] - Launch lazy future ... done
[16:12:42.132] run() for ‘MultisessionFuture’ ... done
[16:12:42.132] result() for ClusterFuture ...
[16:12:42.132] receiveMessageFromWorker() for ClusterFuture ...
[16:12:42.132] - Validating connection of MultisessionFuture
[16:12:42.176] - received message: FutureResult
[16:12:42.176] - Received FutureResult
[16:12:42.176] - Erased future from FutureRegistry
[16:12:42.177] result() for ClusterFuture ...
[16:12:42.177] - result already collected: FutureResult
[16:12:42.177] result() for ClusterFuture ... done
[16:12:42.177] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:42.177] result() for ClusterFuture ... done
[16:12:42.177] result() for ClusterFuture ...
[16:12:42.177] - result already collected: FutureResult
[16:12:42.177] result() for ClusterFuture ... done
[16:12:42.178] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:42.178] Searching for globals...
[16:12:42.179] - globals found: [1] ‘getOption’
[16:12:42.179] Searching for globals ... DONE
[16:12:42.179] Resolving globals: FALSE
[16:12:42.179] 
[16:12:42.179] 
[16:12:42.179] getGlobalsAndPackages() ... DONE
[16:12:42.180] run() for ‘Future’ ...
[16:12:42.180] - state: ‘created’
[16:12:42.180] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:42.195] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:42.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:42.195]   - Field: ‘node’
[16:12:42.195]   - Field: ‘label’
[16:12:42.195]   - Field: ‘local’
[16:12:42.195]   - Field: ‘owner’
[16:12:42.195]   - Field: ‘envir’
[16:12:42.196]   - Field: ‘workers’
[16:12:42.196]   - Field: ‘packages’
[16:12:42.196]   - Field: ‘gc’
[16:12:42.196]   - Field: ‘conditions’
[16:12:42.196]   - Field: ‘persistent’
[16:12:42.196]   - Field: ‘expr’
[16:12:42.196]   - Field: ‘uuid’
[16:12:42.196]   - Field: ‘seed’
[16:12:42.196]   - Field: ‘version’
[16:12:42.197]   - Field: ‘result’
[16:12:42.197]   - Field: ‘asynchronous’
[16:12:42.197]   - Field: ‘calls’
[16:12:42.197]   - Field: ‘globals’
[16:12:42.197]   - Field: ‘stdout’
[16:12:42.197]   - Field: ‘earlySignal’
[16:12:42.197]   - Field: ‘lazy’
[16:12:42.197]   - Field: ‘state’
[16:12:42.197] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:42.198] - Launch lazy future ...
[16:12:42.198] Packages needed by the future expression (n = 0): <none>
[16:12:42.198] Packages needed by future strategies (n = 0): <none>
[16:12:42.199] {
[16:12:42.199]     {
[16:12:42.199]         {
[16:12:42.199]             ...future.startTime <- base::Sys.time()
[16:12:42.199]             {
[16:12:42.199]                 {
[16:12:42.199]                   {
[16:12:42.199]                     {
[16:12:42.199]                       base::local({
[16:12:42.199]                         has_future <- base::requireNamespace("future", 
[16:12:42.199]                           quietly = TRUE)
[16:12:42.199]                         if (has_future) {
[16:12:42.199]                           ns <- base::getNamespace("future")
[16:12:42.199]                           version <- ns[[".package"]][["version"]]
[16:12:42.199]                           if (is.null(version)) 
[16:12:42.199]                             version <- utils::packageVersion("future")
[16:12:42.199]                         }
[16:12:42.199]                         else {
[16:12:42.199]                           version <- NULL
[16:12:42.199]                         }
[16:12:42.199]                         if (!has_future || version < "1.8.0") {
[16:12:42.199]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:42.199]                             "", base::R.version$version.string), 
[16:12:42.199]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:42.199]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:42.199]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:42.199]                               "release", "version")], collapse = " "), 
[16:12:42.199]                             hostname = base::Sys.info()[["nodename"]])
[16:12:42.199]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:42.199]                             info)
[16:12:42.199]                           info <- base::paste(info, collapse = "; ")
[16:12:42.199]                           if (!has_future) {
[16:12:42.199]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:42.199]                               info)
[16:12:42.199]                           }
[16:12:42.199]                           else {
[16:12:42.199]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:42.199]                               info, version)
[16:12:42.199]                           }
[16:12:42.199]                           base::stop(msg)
[16:12:42.199]                         }
[16:12:42.199]                       })
[16:12:42.199]                     }
[16:12:42.199]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:42.199]                     base::options(mc.cores = 1L)
[16:12:42.199]                   }
[16:12:42.199]                   options(future.plan = NULL)
[16:12:42.199]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.199]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:42.199]                 }
[16:12:42.199]                 ...future.workdir <- getwd()
[16:12:42.199]             }
[16:12:42.199]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:42.199]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:42.199]         }
[16:12:42.199]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:42.199]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:42.199]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:42.199]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:42.199]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:42.199]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:42.199]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:42.199]             base::names(...future.oldOptions))
[16:12:42.199]     }
[16:12:42.199]     if (FALSE) {
[16:12:42.199]     }
[16:12:42.199]     else {
[16:12:42.199]         if (TRUE) {
[16:12:42.199]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:42.199]                 open = "w")
[16:12:42.199]         }
[16:12:42.199]         else {
[16:12:42.199]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:42.199]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:42.199]         }
[16:12:42.199]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:42.199]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:42.199]             base::sink(type = "output", split = FALSE)
[16:12:42.199]             base::close(...future.stdout)
[16:12:42.199]         }, add = TRUE)
[16:12:42.199]     }
[16:12:42.199]     ...future.frame <- base::sys.nframe()
[16:12:42.199]     ...future.conditions <- base::list()
[16:12:42.199]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:42.199]     if (FALSE) {
[16:12:42.199]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:42.199]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:42.199]     }
[16:12:42.199]     ...future.result <- base::tryCatch({
[16:12:42.199]         base::withCallingHandlers({
[16:12:42.199]             ...future.value <- base::withVisible(base::local({
[16:12:42.199]                 ...future.makeSendCondition <- local({
[16:12:42.199]                   sendCondition <- NULL
[16:12:42.199]                   function(frame = 1L) {
[16:12:42.199]                     if (is.function(sendCondition)) 
[16:12:42.199]                       return(sendCondition)
[16:12:42.199]                     ns <- getNamespace("parallel")
[16:12:42.199]                     if (exists("sendData", mode = "function", 
[16:12:42.199]                       envir = ns)) {
[16:12:42.199]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:42.199]                         envir = ns)
[16:12:42.199]                       envir <- sys.frame(frame)
[16:12:42.199]                       master <- NULL
[16:12:42.199]                       while (!identical(envir, .GlobalEnv) && 
[16:12:42.199]                         !identical(envir, emptyenv())) {
[16:12:42.199]                         if (exists("master", mode = "list", envir = envir, 
[16:12:42.199]                           inherits = FALSE)) {
[16:12:42.199]                           master <- get("master", mode = "list", 
[16:12:42.199]                             envir = envir, inherits = FALSE)
[16:12:42.199]                           if (inherits(master, c("SOCKnode", 
[16:12:42.199]                             "SOCK0node"))) {
[16:12:42.199]                             sendCondition <<- function(cond) {
[16:12:42.199]                               data <- list(type = "VALUE", value = cond, 
[16:12:42.199]                                 success = TRUE)
[16:12:42.199]                               parallel_sendData(master, data)
[16:12:42.199]                             }
[16:12:42.199]                             return(sendCondition)
[16:12:42.199]                           }
[16:12:42.199]                         }
[16:12:42.199]                         frame <- frame + 1L
[16:12:42.199]                         envir <- sys.frame(frame)
[16:12:42.199]                       }
[16:12:42.199]                     }
[16:12:42.199]                     sendCondition <<- function(cond) NULL
[16:12:42.199]                   }
[16:12:42.199]                 })
[16:12:42.199]                 withCallingHandlers({
[16:12:42.199]                   getOption("future.globals.onMissing")
[16:12:42.199]                 }, immediateCondition = function(cond) {
[16:12:42.199]                   sendCondition <- ...future.makeSendCondition()
[16:12:42.199]                   sendCondition(cond)
[16:12:42.199]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.199]                   {
[16:12:42.199]                     inherits <- base::inherits
[16:12:42.199]                     invokeRestart <- base::invokeRestart
[16:12:42.199]                     is.null <- base::is.null
[16:12:42.199]                     muffled <- FALSE
[16:12:42.199]                     if (inherits(cond, "message")) {
[16:12:42.199]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:42.199]                       if (muffled) 
[16:12:42.199]                         invokeRestart("muffleMessage")
[16:12:42.199]                     }
[16:12:42.199]                     else if (inherits(cond, "warning")) {
[16:12:42.199]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:42.199]                       if (muffled) 
[16:12:42.199]                         invokeRestart("muffleWarning")
[16:12:42.199]                     }
[16:12:42.199]                     else if (inherits(cond, "condition")) {
[16:12:42.199]                       if (!is.null(pattern)) {
[16:12:42.199]                         computeRestarts <- base::computeRestarts
[16:12:42.199]                         grepl <- base::grepl
[16:12:42.199]                         restarts <- computeRestarts(cond)
[16:12:42.199]                         for (restart in restarts) {
[16:12:42.199]                           name <- restart$name
[16:12:42.199]                           if (is.null(name)) 
[16:12:42.199]                             next
[16:12:42.199]                           if (!grepl(pattern, name)) 
[16:12:42.199]                             next
[16:12:42.199]                           invokeRestart(restart)
[16:12:42.199]                           muffled <- TRUE
[16:12:42.199]                           break
[16:12:42.199]                         }
[16:12:42.199]                       }
[16:12:42.199]                     }
[16:12:42.199]                     invisible(muffled)
[16:12:42.199]                   }
[16:12:42.199]                   muffleCondition(cond)
[16:12:42.199]                 })
[16:12:42.199]             }))
[16:12:42.199]             future::FutureResult(value = ...future.value$value, 
[16:12:42.199]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.199]                   ...future.rng), globalenv = if (FALSE) 
[16:12:42.199]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:42.199]                     ...future.globalenv.names))
[16:12:42.199]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:42.199]         }, condition = base::local({
[16:12:42.199]             c <- base::c
[16:12:42.199]             inherits <- base::inherits
[16:12:42.199]             invokeRestart <- base::invokeRestart
[16:12:42.199]             length <- base::length
[16:12:42.199]             list <- base::list
[16:12:42.199]             seq.int <- base::seq.int
[16:12:42.199]             signalCondition <- base::signalCondition
[16:12:42.199]             sys.calls <- base::sys.calls
[16:12:42.199]             `[[` <- base::`[[`
[16:12:42.199]             `+` <- base::`+`
[16:12:42.199]             `<<-` <- base::`<<-`
[16:12:42.199]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:42.199]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:42.199]                   3L)]
[16:12:42.199]             }
[16:12:42.199]             function(cond) {
[16:12:42.199]                 is_error <- inherits(cond, "error")
[16:12:42.199]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:42.199]                   NULL)
[16:12:42.199]                 if (is_error) {
[16:12:42.199]                   sessionInformation <- function() {
[16:12:42.199]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:42.199]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:42.199]                       search = base::search(), system = base::Sys.info())
[16:12:42.199]                   }
[16:12:42.199]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.199]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:42.199]                     cond$call), session = sessionInformation(), 
[16:12:42.199]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:42.199]                   signalCondition(cond)
[16:12:42.199]                 }
[16:12:42.199]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:42.199]                 "immediateCondition"))) {
[16:12:42.199]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:42.199]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.199]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:42.199]                   if (TRUE && !signal) {
[16:12:42.199]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.199]                     {
[16:12:42.199]                       inherits <- base::inherits
[16:12:42.199]                       invokeRestart <- base::invokeRestart
[16:12:42.199]                       is.null <- base::is.null
[16:12:42.199]                       muffled <- FALSE
[16:12:42.199]                       if (inherits(cond, "message")) {
[16:12:42.199]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.199]                         if (muffled) 
[16:12:42.199]                           invokeRestart("muffleMessage")
[16:12:42.199]                       }
[16:12:42.199]                       else if (inherits(cond, "warning")) {
[16:12:42.199]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.199]                         if (muffled) 
[16:12:42.199]                           invokeRestart("muffleWarning")
[16:12:42.199]                       }
[16:12:42.199]                       else if (inherits(cond, "condition")) {
[16:12:42.199]                         if (!is.null(pattern)) {
[16:12:42.199]                           computeRestarts <- base::computeRestarts
[16:12:42.199]                           grepl <- base::grepl
[16:12:42.199]                           restarts <- computeRestarts(cond)
[16:12:42.199]                           for (restart in restarts) {
[16:12:42.199]                             name <- restart$name
[16:12:42.199]                             if (is.null(name)) 
[16:12:42.199]                               next
[16:12:42.199]                             if (!grepl(pattern, name)) 
[16:12:42.199]                               next
[16:12:42.199]                             invokeRestart(restart)
[16:12:42.199]                             muffled <- TRUE
[16:12:42.199]                             break
[16:12:42.199]                           }
[16:12:42.199]                         }
[16:12:42.199]                       }
[16:12:42.199]                       invisible(muffled)
[16:12:42.199]                     }
[16:12:42.199]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.199]                   }
[16:12:42.199]                 }
[16:12:42.199]                 else {
[16:12:42.199]                   if (TRUE) {
[16:12:42.199]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.199]                     {
[16:12:42.199]                       inherits <- base::inherits
[16:12:42.199]                       invokeRestart <- base::invokeRestart
[16:12:42.199]                       is.null <- base::is.null
[16:12:42.199]                       muffled <- FALSE
[16:12:42.199]                       if (inherits(cond, "message")) {
[16:12:42.199]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.199]                         if (muffled) 
[16:12:42.199]                           invokeRestart("muffleMessage")
[16:12:42.199]                       }
[16:12:42.199]                       else if (inherits(cond, "warning")) {
[16:12:42.199]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.199]                         if (muffled) 
[16:12:42.199]                           invokeRestart("muffleWarning")
[16:12:42.199]                       }
[16:12:42.199]                       else if (inherits(cond, "condition")) {
[16:12:42.199]                         if (!is.null(pattern)) {
[16:12:42.199]                           computeRestarts <- base::computeRestarts
[16:12:42.199]                           grepl <- base::grepl
[16:12:42.199]                           restarts <- computeRestarts(cond)
[16:12:42.199]                           for (restart in restarts) {
[16:12:42.199]                             name <- restart$name
[16:12:42.199]                             if (is.null(name)) 
[16:12:42.199]                               next
[16:12:42.199]                             if (!grepl(pattern, name)) 
[16:12:42.199]                               next
[16:12:42.199]                             invokeRestart(restart)
[16:12:42.199]                             muffled <- TRUE
[16:12:42.199]                             break
[16:12:42.199]                           }
[16:12:42.199]                         }
[16:12:42.199]                       }
[16:12:42.199]                       invisible(muffled)
[16:12:42.199]                     }
[16:12:42.199]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.199]                   }
[16:12:42.199]                 }
[16:12:42.199]             }
[16:12:42.199]         }))
[16:12:42.199]     }, error = function(ex) {
[16:12:42.199]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:42.199]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.199]                 ...future.rng), started = ...future.startTime, 
[16:12:42.199]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:42.199]             version = "1.8"), class = "FutureResult")
[16:12:42.199]     }, finally = {
[16:12:42.199]         if (!identical(...future.workdir, getwd())) 
[16:12:42.199]             setwd(...future.workdir)
[16:12:42.199]         {
[16:12:42.199]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:42.199]                 ...future.oldOptions$nwarnings <- NULL
[16:12:42.199]             }
[16:12:42.199]             base::options(...future.oldOptions)
[16:12:42.199]             if (.Platform$OS.type == "windows") {
[16:12:42.199]                 old_names <- names(...future.oldEnvVars)
[16:12:42.199]                 envs <- base::Sys.getenv()
[16:12:42.199]                 names <- names(envs)
[16:12:42.199]                 common <- intersect(names, old_names)
[16:12:42.199]                 added <- setdiff(names, old_names)
[16:12:42.199]                 removed <- setdiff(old_names, names)
[16:12:42.199]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:42.199]                   envs[common]]
[16:12:42.199]                 NAMES <- toupper(changed)
[16:12:42.199]                 args <- list()
[16:12:42.199]                 for (kk in seq_along(NAMES)) {
[16:12:42.199]                   name <- changed[[kk]]
[16:12:42.199]                   NAME <- NAMES[[kk]]
[16:12:42.199]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.199]                     next
[16:12:42.199]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.199]                 }
[16:12:42.199]                 NAMES <- toupper(added)
[16:12:42.199]                 for (kk in seq_along(NAMES)) {
[16:12:42.199]                   name <- added[[kk]]
[16:12:42.199]                   NAME <- NAMES[[kk]]
[16:12:42.199]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.199]                     next
[16:12:42.199]                   args[[name]] <- ""
[16:12:42.199]                 }
[16:12:42.199]                 NAMES <- toupper(removed)
[16:12:42.199]                 for (kk in seq_along(NAMES)) {
[16:12:42.199]                   name <- removed[[kk]]
[16:12:42.199]                   NAME <- NAMES[[kk]]
[16:12:42.199]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.199]                     next
[16:12:42.199]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.199]                 }
[16:12:42.199]                 if (length(args) > 0) 
[16:12:42.199]                   base::do.call(base::Sys.setenv, args = args)
[16:12:42.199]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:42.199]             }
[16:12:42.199]             else {
[16:12:42.199]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:42.199]             }
[16:12:42.199]             {
[16:12:42.199]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:42.199]                   0L) {
[16:12:42.199]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:42.199]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:42.199]                   base::options(opts)
[16:12:42.199]                 }
[16:12:42.199]                 {
[16:12:42.199]                   {
[16:12:42.199]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:42.199]                     NULL
[16:12:42.199]                   }
[16:12:42.199]                   options(future.plan = NULL)
[16:12:42.199]                   if (is.na(NA_character_)) 
[16:12:42.199]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.199]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:42.199]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:42.199]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:42.199]                     envir = parent.frame()) 
[16:12:42.199]                   {
[16:12:42.199]                     if (is.function(workers)) 
[16:12:42.199]                       workers <- workers()
[16:12:42.199]                     workers <- structure(as.integer(workers), 
[16:12:42.199]                       class = class(workers))
[16:12:42.199]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:42.199]                       workers >= 1)
[16:12:42.199]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:42.199]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:42.199]                     }
[16:12:42.199]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:42.199]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:42.199]                       envir = envir)
[16:12:42.199]                     if (!future$lazy) 
[16:12:42.199]                       future <- run(future)
[16:12:42.199]                     invisible(future)
[16:12:42.199]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:42.199]                 }
[16:12:42.199]             }
[16:12:42.199]         }
[16:12:42.199]     })
[16:12:42.199]     if (TRUE) {
[16:12:42.199]         base::sink(type = "output", split = FALSE)
[16:12:42.199]         if (TRUE) {
[16:12:42.199]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:42.199]         }
[16:12:42.199]         else {
[16:12:42.199]             ...future.result["stdout"] <- base::list(NULL)
[16:12:42.199]         }
[16:12:42.199]         base::close(...future.stdout)
[16:12:42.199]         ...future.stdout <- NULL
[16:12:42.199]     }
[16:12:42.199]     ...future.result$conditions <- ...future.conditions
[16:12:42.199]     ...future.result$finished <- base::Sys.time()
[16:12:42.199]     ...future.result
[16:12:42.199] }
[16:12:42.202] MultisessionFuture started
[16:12:42.202] - Launch lazy future ... done
[16:12:42.202] run() for ‘MultisessionFuture’ ... done
[16:12:42.202] result() for ClusterFuture ...
[16:12:42.202] receiveMessageFromWorker() for ClusterFuture ...
[16:12:42.203] - Validating connection of MultisessionFuture
[16:12:42.248] - received message: FutureResult
[16:12:42.248] - Received FutureResult
[16:12:42.248] - Erased future from FutureRegistry
[16:12:42.248] result() for ClusterFuture ...
[16:12:42.249] - result already collected: FutureResult
[16:12:42.249] result() for ClusterFuture ... done
[16:12:42.249] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:42.249] result() for ClusterFuture ... done
[16:12:42.249] result() for ClusterFuture ...
[16:12:42.249] - result already collected: FutureResult
[16:12:42.249] result() for ClusterFuture ... done
[16:12:42.250] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:12:42.250] Searching for globals...
[16:12:42.251] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:42.252] Searching for globals...
[16:12:42.253] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:12:42.253] Searching for globals ... DONE
[16:12:42.253] Resolving globals: FALSE
[16:12:42.254] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:42.254] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:42.254] - globals: [1] ‘data’
[16:12:42.254] 
[16:12:42.254] getGlobalsAndPackages() ... DONE
[16:12:42.255] run() for ‘Future’ ...
[16:12:42.255] - state: ‘created’
[16:12:42.255] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:42.270] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:42.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:42.270]   - Field: ‘node’
[16:12:42.270]   - Field: ‘label’
[16:12:42.270]   - Field: ‘local’
[16:12:42.270]   - Field: ‘owner’
[16:12:42.270]   - Field: ‘envir’
[16:12:42.271]   - Field: ‘workers’
[16:12:42.271]   - Field: ‘packages’
[16:12:42.271]   - Field: ‘gc’
[16:12:42.271]   - Field: ‘conditions’
[16:12:42.271]   - Field: ‘persistent’
[16:12:42.271]   - Field: ‘expr’
[16:12:42.271]   - Field: ‘uuid’
[16:12:42.271]   - Field: ‘seed’
[16:12:42.271]   - Field: ‘version’
[16:12:42.272]   - Field: ‘result’
[16:12:42.272]   - Field: ‘asynchronous’
[16:12:42.272]   - Field: ‘calls’
[16:12:42.272]   - Field: ‘globals’
[16:12:42.272]   - Field: ‘stdout’
[16:12:42.272]   - Field: ‘earlySignal’
[16:12:42.272]   - Field: ‘lazy’
[16:12:42.273]   - Field: ‘state’
[16:12:42.273] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:42.273] - Launch lazy future ...
[16:12:42.273] Packages needed by the future expression (n = 0): <none>
[16:12:42.273] Packages needed by future strategies (n = 0): <none>
[16:12:42.274] {
[16:12:42.274]     {
[16:12:42.274]         {
[16:12:42.274]             ...future.startTime <- base::Sys.time()
[16:12:42.274]             {
[16:12:42.274]                 {
[16:12:42.274]                   {
[16:12:42.274]                     {
[16:12:42.274]                       base::local({
[16:12:42.274]                         has_future <- base::requireNamespace("future", 
[16:12:42.274]                           quietly = TRUE)
[16:12:42.274]                         if (has_future) {
[16:12:42.274]                           ns <- base::getNamespace("future")
[16:12:42.274]                           version <- ns[[".package"]][["version"]]
[16:12:42.274]                           if (is.null(version)) 
[16:12:42.274]                             version <- utils::packageVersion("future")
[16:12:42.274]                         }
[16:12:42.274]                         else {
[16:12:42.274]                           version <- NULL
[16:12:42.274]                         }
[16:12:42.274]                         if (!has_future || version < "1.8.0") {
[16:12:42.274]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:42.274]                             "", base::R.version$version.string), 
[16:12:42.274]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:42.274]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:42.274]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:42.274]                               "release", "version")], collapse = " "), 
[16:12:42.274]                             hostname = base::Sys.info()[["nodename"]])
[16:12:42.274]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:42.274]                             info)
[16:12:42.274]                           info <- base::paste(info, collapse = "; ")
[16:12:42.274]                           if (!has_future) {
[16:12:42.274]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:42.274]                               info)
[16:12:42.274]                           }
[16:12:42.274]                           else {
[16:12:42.274]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:42.274]                               info, version)
[16:12:42.274]                           }
[16:12:42.274]                           base::stop(msg)
[16:12:42.274]                         }
[16:12:42.274]                       })
[16:12:42.274]                     }
[16:12:42.274]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:42.274]                     base::options(mc.cores = 1L)
[16:12:42.274]                   }
[16:12:42.274]                   options(future.plan = NULL)
[16:12:42.274]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.274]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:42.274]                 }
[16:12:42.274]                 ...future.workdir <- getwd()
[16:12:42.274]             }
[16:12:42.274]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:42.274]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:42.274]         }
[16:12:42.274]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:42.274]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:42.274]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:42.274]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:42.274]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:42.274]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:42.274]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:42.274]             base::names(...future.oldOptions))
[16:12:42.274]     }
[16:12:42.274]     if (FALSE) {
[16:12:42.274]     }
[16:12:42.274]     else {
[16:12:42.274]         if (TRUE) {
[16:12:42.274]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:42.274]                 open = "w")
[16:12:42.274]         }
[16:12:42.274]         else {
[16:12:42.274]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:42.274]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:42.274]         }
[16:12:42.274]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:42.274]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:42.274]             base::sink(type = "output", split = FALSE)
[16:12:42.274]             base::close(...future.stdout)
[16:12:42.274]         }, add = TRUE)
[16:12:42.274]     }
[16:12:42.274]     ...future.frame <- base::sys.nframe()
[16:12:42.274]     ...future.conditions <- base::list()
[16:12:42.274]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:42.274]     if (FALSE) {
[16:12:42.274]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:42.274]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:42.274]     }
[16:12:42.274]     ...future.result <- base::tryCatch({
[16:12:42.274]         base::withCallingHandlers({
[16:12:42.274]             ...future.value <- base::withVisible(base::local({
[16:12:42.274]                 ...future.makeSendCondition <- local({
[16:12:42.274]                   sendCondition <- NULL
[16:12:42.274]                   function(frame = 1L) {
[16:12:42.274]                     if (is.function(sendCondition)) 
[16:12:42.274]                       return(sendCondition)
[16:12:42.274]                     ns <- getNamespace("parallel")
[16:12:42.274]                     if (exists("sendData", mode = "function", 
[16:12:42.274]                       envir = ns)) {
[16:12:42.274]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:42.274]                         envir = ns)
[16:12:42.274]                       envir <- sys.frame(frame)
[16:12:42.274]                       master <- NULL
[16:12:42.274]                       while (!identical(envir, .GlobalEnv) && 
[16:12:42.274]                         !identical(envir, emptyenv())) {
[16:12:42.274]                         if (exists("master", mode = "list", envir = envir, 
[16:12:42.274]                           inherits = FALSE)) {
[16:12:42.274]                           master <- get("master", mode = "list", 
[16:12:42.274]                             envir = envir, inherits = FALSE)
[16:12:42.274]                           if (inherits(master, c("SOCKnode", 
[16:12:42.274]                             "SOCK0node"))) {
[16:12:42.274]                             sendCondition <<- function(cond) {
[16:12:42.274]                               data <- list(type = "VALUE", value = cond, 
[16:12:42.274]                                 success = TRUE)
[16:12:42.274]                               parallel_sendData(master, data)
[16:12:42.274]                             }
[16:12:42.274]                             return(sendCondition)
[16:12:42.274]                           }
[16:12:42.274]                         }
[16:12:42.274]                         frame <- frame + 1L
[16:12:42.274]                         envir <- sys.frame(frame)
[16:12:42.274]                       }
[16:12:42.274]                     }
[16:12:42.274]                     sendCondition <<- function(cond) NULL
[16:12:42.274]                   }
[16:12:42.274]                 })
[16:12:42.274]                 withCallingHandlers({
[16:12:42.274]                   subset(data, x < 3)$y
[16:12:42.274]                 }, immediateCondition = function(cond) {
[16:12:42.274]                   sendCondition <- ...future.makeSendCondition()
[16:12:42.274]                   sendCondition(cond)
[16:12:42.274]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.274]                   {
[16:12:42.274]                     inherits <- base::inherits
[16:12:42.274]                     invokeRestart <- base::invokeRestart
[16:12:42.274]                     is.null <- base::is.null
[16:12:42.274]                     muffled <- FALSE
[16:12:42.274]                     if (inherits(cond, "message")) {
[16:12:42.274]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:42.274]                       if (muffled) 
[16:12:42.274]                         invokeRestart("muffleMessage")
[16:12:42.274]                     }
[16:12:42.274]                     else if (inherits(cond, "warning")) {
[16:12:42.274]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:42.274]                       if (muffled) 
[16:12:42.274]                         invokeRestart("muffleWarning")
[16:12:42.274]                     }
[16:12:42.274]                     else if (inherits(cond, "condition")) {
[16:12:42.274]                       if (!is.null(pattern)) {
[16:12:42.274]                         computeRestarts <- base::computeRestarts
[16:12:42.274]                         grepl <- base::grepl
[16:12:42.274]                         restarts <- computeRestarts(cond)
[16:12:42.274]                         for (restart in restarts) {
[16:12:42.274]                           name <- restart$name
[16:12:42.274]                           if (is.null(name)) 
[16:12:42.274]                             next
[16:12:42.274]                           if (!grepl(pattern, name)) 
[16:12:42.274]                             next
[16:12:42.274]                           invokeRestart(restart)
[16:12:42.274]                           muffled <- TRUE
[16:12:42.274]                           break
[16:12:42.274]                         }
[16:12:42.274]                       }
[16:12:42.274]                     }
[16:12:42.274]                     invisible(muffled)
[16:12:42.274]                   }
[16:12:42.274]                   muffleCondition(cond)
[16:12:42.274]                 })
[16:12:42.274]             }))
[16:12:42.274]             future::FutureResult(value = ...future.value$value, 
[16:12:42.274]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.274]                   ...future.rng), globalenv = if (FALSE) 
[16:12:42.274]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:42.274]                     ...future.globalenv.names))
[16:12:42.274]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:42.274]         }, condition = base::local({
[16:12:42.274]             c <- base::c
[16:12:42.274]             inherits <- base::inherits
[16:12:42.274]             invokeRestart <- base::invokeRestart
[16:12:42.274]             length <- base::length
[16:12:42.274]             list <- base::list
[16:12:42.274]             seq.int <- base::seq.int
[16:12:42.274]             signalCondition <- base::signalCondition
[16:12:42.274]             sys.calls <- base::sys.calls
[16:12:42.274]             `[[` <- base::`[[`
[16:12:42.274]             `+` <- base::`+`
[16:12:42.274]             `<<-` <- base::`<<-`
[16:12:42.274]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:42.274]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:42.274]                   3L)]
[16:12:42.274]             }
[16:12:42.274]             function(cond) {
[16:12:42.274]                 is_error <- inherits(cond, "error")
[16:12:42.274]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:42.274]                   NULL)
[16:12:42.274]                 if (is_error) {
[16:12:42.274]                   sessionInformation <- function() {
[16:12:42.274]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:42.274]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:42.274]                       search = base::search(), system = base::Sys.info())
[16:12:42.274]                   }
[16:12:42.274]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.274]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:42.274]                     cond$call), session = sessionInformation(), 
[16:12:42.274]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:42.274]                   signalCondition(cond)
[16:12:42.274]                 }
[16:12:42.274]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:42.274]                 "immediateCondition"))) {
[16:12:42.274]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:42.274]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.274]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:42.274]                   if (TRUE && !signal) {
[16:12:42.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.274]                     {
[16:12:42.274]                       inherits <- base::inherits
[16:12:42.274]                       invokeRestart <- base::invokeRestart
[16:12:42.274]                       is.null <- base::is.null
[16:12:42.274]                       muffled <- FALSE
[16:12:42.274]                       if (inherits(cond, "message")) {
[16:12:42.274]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.274]                         if (muffled) 
[16:12:42.274]                           invokeRestart("muffleMessage")
[16:12:42.274]                       }
[16:12:42.274]                       else if (inherits(cond, "warning")) {
[16:12:42.274]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.274]                         if (muffled) 
[16:12:42.274]                           invokeRestart("muffleWarning")
[16:12:42.274]                       }
[16:12:42.274]                       else if (inherits(cond, "condition")) {
[16:12:42.274]                         if (!is.null(pattern)) {
[16:12:42.274]                           computeRestarts <- base::computeRestarts
[16:12:42.274]                           grepl <- base::grepl
[16:12:42.274]                           restarts <- computeRestarts(cond)
[16:12:42.274]                           for (restart in restarts) {
[16:12:42.274]                             name <- restart$name
[16:12:42.274]                             if (is.null(name)) 
[16:12:42.274]                               next
[16:12:42.274]                             if (!grepl(pattern, name)) 
[16:12:42.274]                               next
[16:12:42.274]                             invokeRestart(restart)
[16:12:42.274]                             muffled <- TRUE
[16:12:42.274]                             break
[16:12:42.274]                           }
[16:12:42.274]                         }
[16:12:42.274]                       }
[16:12:42.274]                       invisible(muffled)
[16:12:42.274]                     }
[16:12:42.274]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.274]                   }
[16:12:42.274]                 }
[16:12:42.274]                 else {
[16:12:42.274]                   if (TRUE) {
[16:12:42.274]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.274]                     {
[16:12:42.274]                       inherits <- base::inherits
[16:12:42.274]                       invokeRestart <- base::invokeRestart
[16:12:42.274]                       is.null <- base::is.null
[16:12:42.274]                       muffled <- FALSE
[16:12:42.274]                       if (inherits(cond, "message")) {
[16:12:42.274]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.274]                         if (muffled) 
[16:12:42.274]                           invokeRestart("muffleMessage")
[16:12:42.274]                       }
[16:12:42.274]                       else if (inherits(cond, "warning")) {
[16:12:42.274]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.274]                         if (muffled) 
[16:12:42.274]                           invokeRestart("muffleWarning")
[16:12:42.274]                       }
[16:12:42.274]                       else if (inherits(cond, "condition")) {
[16:12:42.274]                         if (!is.null(pattern)) {
[16:12:42.274]                           computeRestarts <- base::computeRestarts
[16:12:42.274]                           grepl <- base::grepl
[16:12:42.274]                           restarts <- computeRestarts(cond)
[16:12:42.274]                           for (restart in restarts) {
[16:12:42.274]                             name <- restart$name
[16:12:42.274]                             if (is.null(name)) 
[16:12:42.274]                               next
[16:12:42.274]                             if (!grepl(pattern, name)) 
[16:12:42.274]                               next
[16:12:42.274]                             invokeRestart(restart)
[16:12:42.274]                             muffled <- TRUE
[16:12:42.274]                             break
[16:12:42.274]                           }
[16:12:42.274]                         }
[16:12:42.274]                       }
[16:12:42.274]                       invisible(muffled)
[16:12:42.274]                     }
[16:12:42.274]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.274]                   }
[16:12:42.274]                 }
[16:12:42.274]             }
[16:12:42.274]         }))
[16:12:42.274]     }, error = function(ex) {
[16:12:42.274]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:42.274]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.274]                 ...future.rng), started = ...future.startTime, 
[16:12:42.274]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:42.274]             version = "1.8"), class = "FutureResult")
[16:12:42.274]     }, finally = {
[16:12:42.274]         if (!identical(...future.workdir, getwd())) 
[16:12:42.274]             setwd(...future.workdir)
[16:12:42.274]         {
[16:12:42.274]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:42.274]                 ...future.oldOptions$nwarnings <- NULL
[16:12:42.274]             }
[16:12:42.274]             base::options(...future.oldOptions)
[16:12:42.274]             if (.Platform$OS.type == "windows") {
[16:12:42.274]                 old_names <- names(...future.oldEnvVars)
[16:12:42.274]                 envs <- base::Sys.getenv()
[16:12:42.274]                 names <- names(envs)
[16:12:42.274]                 common <- intersect(names, old_names)
[16:12:42.274]                 added <- setdiff(names, old_names)
[16:12:42.274]                 removed <- setdiff(old_names, names)
[16:12:42.274]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:42.274]                   envs[common]]
[16:12:42.274]                 NAMES <- toupper(changed)
[16:12:42.274]                 args <- list()
[16:12:42.274]                 for (kk in seq_along(NAMES)) {
[16:12:42.274]                   name <- changed[[kk]]
[16:12:42.274]                   NAME <- NAMES[[kk]]
[16:12:42.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.274]                     next
[16:12:42.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.274]                 }
[16:12:42.274]                 NAMES <- toupper(added)
[16:12:42.274]                 for (kk in seq_along(NAMES)) {
[16:12:42.274]                   name <- added[[kk]]
[16:12:42.274]                   NAME <- NAMES[[kk]]
[16:12:42.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.274]                     next
[16:12:42.274]                   args[[name]] <- ""
[16:12:42.274]                 }
[16:12:42.274]                 NAMES <- toupper(removed)
[16:12:42.274]                 for (kk in seq_along(NAMES)) {
[16:12:42.274]                   name <- removed[[kk]]
[16:12:42.274]                   NAME <- NAMES[[kk]]
[16:12:42.274]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.274]                     next
[16:12:42.274]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.274]                 }
[16:12:42.274]                 if (length(args) > 0) 
[16:12:42.274]                   base::do.call(base::Sys.setenv, args = args)
[16:12:42.274]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:42.274]             }
[16:12:42.274]             else {
[16:12:42.274]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:42.274]             }
[16:12:42.274]             {
[16:12:42.274]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:42.274]                   0L) {
[16:12:42.274]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:42.274]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:42.274]                   base::options(opts)
[16:12:42.274]                 }
[16:12:42.274]                 {
[16:12:42.274]                   {
[16:12:42.274]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:42.274]                     NULL
[16:12:42.274]                   }
[16:12:42.274]                   options(future.plan = NULL)
[16:12:42.274]                   if (is.na(NA_character_)) 
[16:12:42.274]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.274]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:42.274]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:42.274]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:42.274]                     envir = parent.frame()) 
[16:12:42.274]                   {
[16:12:42.274]                     if (is.function(workers)) 
[16:12:42.274]                       workers <- workers()
[16:12:42.274]                     workers <- structure(as.integer(workers), 
[16:12:42.274]                       class = class(workers))
[16:12:42.274]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:42.274]                       workers >= 1)
[16:12:42.274]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:42.274]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:42.274]                     }
[16:12:42.274]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:42.274]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:42.274]                       envir = envir)
[16:12:42.274]                     if (!future$lazy) 
[16:12:42.274]                       future <- run(future)
[16:12:42.274]                     invisible(future)
[16:12:42.274]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:42.274]                 }
[16:12:42.274]             }
[16:12:42.274]         }
[16:12:42.274]     })
[16:12:42.274]     if (TRUE) {
[16:12:42.274]         base::sink(type = "output", split = FALSE)
[16:12:42.274]         if (TRUE) {
[16:12:42.274]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:42.274]         }
[16:12:42.274]         else {
[16:12:42.274]             ...future.result["stdout"] <- base::list(NULL)
[16:12:42.274]         }
[16:12:42.274]         base::close(...future.stdout)
[16:12:42.274]         ...future.stdout <- NULL
[16:12:42.274]     }
[16:12:42.274]     ...future.result$conditions <- ...future.conditions
[16:12:42.274]     ...future.result$finished <- base::Sys.time()
[16:12:42.274]     ...future.result
[16:12:42.274] }
[16:12:42.277] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[16:12:42.277] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[16:12:42.277] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[16:12:42.278] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[16:12:42.278] MultisessionFuture started
[16:12:42.278] - Launch lazy future ... done
[16:12:42.278] run() for ‘MultisessionFuture’ ... done
[16:12:42.279] result() for ClusterFuture ...
[16:12:42.279] receiveMessageFromWorker() for ClusterFuture ...
[16:12:42.279] - Validating connection of MultisessionFuture
[16:12:42.324] - received message: FutureResult
[16:12:42.325] - Received FutureResult
[16:12:42.325] - Erased future from FutureRegistry
[16:12:42.325] result() for ClusterFuture ...
[16:12:42.325] - result already collected: FutureResult
[16:12:42.325] result() for ClusterFuture ... done
[16:12:42.325] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:42.325] result() for ClusterFuture ... done
[16:12:42.325] result() for ClusterFuture ...
[16:12:42.325] - result already collected: FutureResult
[16:12:42.326] result() for ClusterFuture ... done
[16:12:42.326] plan(): Setting new future strategy stack:
[16:12:42.326] List of future strategies:
[16:12:42.326] 1. sequential:
[16:12:42.326]    - args: function (..., envir = parent.frame())
[16:12:42.326]    - tweaked: FALSE
[16:12:42.326]    - call: plan(list(sequential, strategy))
[16:12:42.326] 2. multisession:
[16:12:42.326]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:42.326]    - tweaked: FALSE
[16:12:42.326]    - call: plan(list(sequential, strategy))
[16:12:42.327] plan(): nbrOfWorkers() = 1
[16:12:42.327] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:42.328] Searching for globals...
[16:12:42.336] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[16:12:42.336] Searching for globals ... DONE
[16:12:42.336] Resolving globals: FALSE
[16:12:42.337] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:42.338] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:42.338] - globals: [1] ‘data’
[16:12:42.338] - packages: [1] ‘future’
[16:12:42.338] getGlobalsAndPackages() ... DONE
[16:12:42.339] run() for ‘Future’ ...
[16:12:42.339] - state: ‘created’
[16:12:42.339] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:42.339] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:42.340] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:42.340]   - Field: ‘label’
[16:12:42.340]   - Field: ‘local’
[16:12:42.340]   - Field: ‘owner’
[16:12:42.340]   - Field: ‘envir’
[16:12:42.340]   - Field: ‘packages’
[16:12:42.341]   - Field: ‘gc’
[16:12:42.341]   - Field: ‘conditions’
[16:12:42.341]   - Field: ‘expr’
[16:12:42.341]   - Field: ‘uuid’
[16:12:42.341]   - Field: ‘seed’
[16:12:42.341]   - Field: ‘version’
[16:12:42.342]   - Field: ‘result’
[16:12:42.342]   - Field: ‘asynchronous’
[16:12:42.342]   - Field: ‘calls’
[16:12:42.342]   - Field: ‘globals’
[16:12:42.342]   - Field: ‘stdout’
[16:12:42.342]   - Field: ‘earlySignal’
[16:12:42.342]   - Field: ‘lazy’
[16:12:42.343]   - Field: ‘state’
[16:12:42.343] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:42.343] - Launch lazy future ...
[16:12:42.343] Packages needed by the future expression (n = 1): ‘future’
[16:12:42.343] Packages needed by future strategies (n = 1): ‘future’
[16:12:42.344] {
[16:12:42.344]     {
[16:12:42.344]         {
[16:12:42.344]             ...future.startTime <- base::Sys.time()
[16:12:42.344]             {
[16:12:42.344]                 {
[16:12:42.344]                   {
[16:12:42.344]                     {
[16:12:42.344]                       base::local({
[16:12:42.344]                         has_future <- base::requireNamespace("future", 
[16:12:42.344]                           quietly = TRUE)
[16:12:42.344]                         if (has_future) {
[16:12:42.344]                           ns <- base::getNamespace("future")
[16:12:42.344]                           version <- ns[[".package"]][["version"]]
[16:12:42.344]                           if (is.null(version)) 
[16:12:42.344]                             version <- utils::packageVersion("future")
[16:12:42.344]                         }
[16:12:42.344]                         else {
[16:12:42.344]                           version <- NULL
[16:12:42.344]                         }
[16:12:42.344]                         if (!has_future || version < "1.8.0") {
[16:12:42.344]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:42.344]                             "", base::R.version$version.string), 
[16:12:42.344]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:42.344]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:42.344]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:42.344]                               "release", "version")], collapse = " "), 
[16:12:42.344]                             hostname = base::Sys.info()[["nodename"]])
[16:12:42.344]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:42.344]                             info)
[16:12:42.344]                           info <- base::paste(info, collapse = "; ")
[16:12:42.344]                           if (!has_future) {
[16:12:42.344]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:42.344]                               info)
[16:12:42.344]                           }
[16:12:42.344]                           else {
[16:12:42.344]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:42.344]                               info, version)
[16:12:42.344]                           }
[16:12:42.344]                           base::stop(msg)
[16:12:42.344]                         }
[16:12:42.344]                       })
[16:12:42.344]                     }
[16:12:42.344]                     base::local({
[16:12:42.344]                       for (pkg in "future") {
[16:12:42.344]                         base::loadNamespace(pkg)
[16:12:42.344]                         base::library(pkg, character.only = TRUE)
[16:12:42.344]                       }
[16:12:42.344]                     })
[16:12:42.344]                   }
[16:12:42.344]                   options(future.plan = NULL)
[16:12:42.344]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.344]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:42.344]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:42.344]                     envir = parent.frame()) 
[16:12:42.344]                   {
[16:12:42.344]                     if (is.function(workers)) 
[16:12:42.344]                       workers <- workers()
[16:12:42.344]                     workers <- structure(as.integer(workers), 
[16:12:42.344]                       class = class(workers))
[16:12:42.344]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:42.344]                       workers >= 1)
[16:12:42.344]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:42.344]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:42.344]                     }
[16:12:42.344]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:42.344]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:42.344]                       envir = envir)
[16:12:42.344]                     if (!future$lazy) 
[16:12:42.344]                       future <- run(future)
[16:12:42.344]                     invisible(future)
[16:12:42.344]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:42.344]                 }
[16:12:42.344]                 ...future.workdir <- getwd()
[16:12:42.344]             }
[16:12:42.344]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:42.344]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:42.344]         }
[16:12:42.344]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:42.344]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:42.344]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:42.344]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:42.344]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:42.344]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:42.344]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:42.344]             base::names(...future.oldOptions))
[16:12:42.344]     }
[16:12:42.344]     if (FALSE) {
[16:12:42.344]     }
[16:12:42.344]     else {
[16:12:42.344]         if (TRUE) {
[16:12:42.344]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:42.344]                 open = "w")
[16:12:42.344]         }
[16:12:42.344]         else {
[16:12:42.344]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:42.344]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:42.344]         }
[16:12:42.344]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:42.344]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:42.344]             base::sink(type = "output", split = FALSE)
[16:12:42.344]             base::close(...future.stdout)
[16:12:42.344]         }, add = TRUE)
[16:12:42.344]     }
[16:12:42.344]     ...future.frame <- base::sys.nframe()
[16:12:42.344]     ...future.conditions <- base::list()
[16:12:42.344]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:42.344]     if (FALSE) {
[16:12:42.344]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:42.344]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:42.344]     }
[16:12:42.344]     ...future.result <- base::tryCatch({
[16:12:42.344]         base::withCallingHandlers({
[16:12:42.344]             ...future.value <- base::withVisible(base::local({
[16:12:42.344]                 a %<-% subset(data, x < 3)$y
[16:12:42.344]                 a
[16:12:42.344]             }))
[16:12:42.344]             future::FutureResult(value = ...future.value$value, 
[16:12:42.344]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.344]                   ...future.rng), globalenv = if (FALSE) 
[16:12:42.344]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:42.344]                     ...future.globalenv.names))
[16:12:42.344]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:42.344]         }, condition = base::local({
[16:12:42.344]             c <- base::c
[16:12:42.344]             inherits <- base::inherits
[16:12:42.344]             invokeRestart <- base::invokeRestart
[16:12:42.344]             length <- base::length
[16:12:42.344]             list <- base::list
[16:12:42.344]             seq.int <- base::seq.int
[16:12:42.344]             signalCondition <- base::signalCondition
[16:12:42.344]             sys.calls <- base::sys.calls
[16:12:42.344]             `[[` <- base::`[[`
[16:12:42.344]             `+` <- base::`+`
[16:12:42.344]             `<<-` <- base::`<<-`
[16:12:42.344]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:42.344]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:42.344]                   3L)]
[16:12:42.344]             }
[16:12:42.344]             function(cond) {
[16:12:42.344]                 is_error <- inherits(cond, "error")
[16:12:42.344]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:42.344]                   NULL)
[16:12:42.344]                 if (is_error) {
[16:12:42.344]                   sessionInformation <- function() {
[16:12:42.344]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:42.344]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:42.344]                       search = base::search(), system = base::Sys.info())
[16:12:42.344]                   }
[16:12:42.344]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.344]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:42.344]                     cond$call), session = sessionInformation(), 
[16:12:42.344]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:42.344]                   signalCondition(cond)
[16:12:42.344]                 }
[16:12:42.344]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:42.344]                 "immediateCondition"))) {
[16:12:42.344]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:42.344]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.344]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:42.344]                   if (TRUE && !signal) {
[16:12:42.344]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.344]                     {
[16:12:42.344]                       inherits <- base::inherits
[16:12:42.344]                       invokeRestart <- base::invokeRestart
[16:12:42.344]                       is.null <- base::is.null
[16:12:42.344]                       muffled <- FALSE
[16:12:42.344]                       if (inherits(cond, "message")) {
[16:12:42.344]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.344]                         if (muffled) 
[16:12:42.344]                           invokeRestart("muffleMessage")
[16:12:42.344]                       }
[16:12:42.344]                       else if (inherits(cond, "warning")) {
[16:12:42.344]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.344]                         if (muffled) 
[16:12:42.344]                           invokeRestart("muffleWarning")
[16:12:42.344]                       }
[16:12:42.344]                       else if (inherits(cond, "condition")) {
[16:12:42.344]                         if (!is.null(pattern)) {
[16:12:42.344]                           computeRestarts <- base::computeRestarts
[16:12:42.344]                           grepl <- base::grepl
[16:12:42.344]                           restarts <- computeRestarts(cond)
[16:12:42.344]                           for (restart in restarts) {
[16:12:42.344]                             name <- restart$name
[16:12:42.344]                             if (is.null(name)) 
[16:12:42.344]                               next
[16:12:42.344]                             if (!grepl(pattern, name)) 
[16:12:42.344]                               next
[16:12:42.344]                             invokeRestart(restart)
[16:12:42.344]                             muffled <- TRUE
[16:12:42.344]                             break
[16:12:42.344]                           }
[16:12:42.344]                         }
[16:12:42.344]                       }
[16:12:42.344]                       invisible(muffled)
[16:12:42.344]                     }
[16:12:42.344]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.344]                   }
[16:12:42.344]                 }
[16:12:42.344]                 else {
[16:12:42.344]                   if (TRUE) {
[16:12:42.344]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.344]                     {
[16:12:42.344]                       inherits <- base::inherits
[16:12:42.344]                       invokeRestart <- base::invokeRestart
[16:12:42.344]                       is.null <- base::is.null
[16:12:42.344]                       muffled <- FALSE
[16:12:42.344]                       if (inherits(cond, "message")) {
[16:12:42.344]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.344]                         if (muffled) 
[16:12:42.344]                           invokeRestart("muffleMessage")
[16:12:42.344]                       }
[16:12:42.344]                       else if (inherits(cond, "warning")) {
[16:12:42.344]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.344]                         if (muffled) 
[16:12:42.344]                           invokeRestart("muffleWarning")
[16:12:42.344]                       }
[16:12:42.344]                       else if (inherits(cond, "condition")) {
[16:12:42.344]                         if (!is.null(pattern)) {
[16:12:42.344]                           computeRestarts <- base::computeRestarts
[16:12:42.344]                           grepl <- base::grepl
[16:12:42.344]                           restarts <- computeRestarts(cond)
[16:12:42.344]                           for (restart in restarts) {
[16:12:42.344]                             name <- restart$name
[16:12:42.344]                             if (is.null(name)) 
[16:12:42.344]                               next
[16:12:42.344]                             if (!grepl(pattern, name)) 
[16:12:42.344]                               next
[16:12:42.344]                             invokeRestart(restart)
[16:12:42.344]                             muffled <- TRUE
[16:12:42.344]                             break
[16:12:42.344]                           }
[16:12:42.344]                         }
[16:12:42.344]                       }
[16:12:42.344]                       invisible(muffled)
[16:12:42.344]                     }
[16:12:42.344]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.344]                   }
[16:12:42.344]                 }
[16:12:42.344]             }
[16:12:42.344]         }))
[16:12:42.344]     }, error = function(ex) {
[16:12:42.344]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:42.344]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.344]                 ...future.rng), started = ...future.startTime, 
[16:12:42.344]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:42.344]             version = "1.8"), class = "FutureResult")
[16:12:42.344]     }, finally = {
[16:12:42.344]         if (!identical(...future.workdir, getwd())) 
[16:12:42.344]             setwd(...future.workdir)
[16:12:42.344]         {
[16:12:42.344]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:42.344]                 ...future.oldOptions$nwarnings <- NULL
[16:12:42.344]             }
[16:12:42.344]             base::options(...future.oldOptions)
[16:12:42.344]             if (.Platform$OS.type == "windows") {
[16:12:42.344]                 old_names <- names(...future.oldEnvVars)
[16:12:42.344]                 envs <- base::Sys.getenv()
[16:12:42.344]                 names <- names(envs)
[16:12:42.344]                 common <- intersect(names, old_names)
[16:12:42.344]                 added <- setdiff(names, old_names)
[16:12:42.344]                 removed <- setdiff(old_names, names)
[16:12:42.344]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:42.344]                   envs[common]]
[16:12:42.344]                 NAMES <- toupper(changed)
[16:12:42.344]                 args <- list()
[16:12:42.344]                 for (kk in seq_along(NAMES)) {
[16:12:42.344]                   name <- changed[[kk]]
[16:12:42.344]                   NAME <- NAMES[[kk]]
[16:12:42.344]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.344]                     next
[16:12:42.344]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.344]                 }
[16:12:42.344]                 NAMES <- toupper(added)
[16:12:42.344]                 for (kk in seq_along(NAMES)) {
[16:12:42.344]                   name <- added[[kk]]
[16:12:42.344]                   NAME <- NAMES[[kk]]
[16:12:42.344]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.344]                     next
[16:12:42.344]                   args[[name]] <- ""
[16:12:42.344]                 }
[16:12:42.344]                 NAMES <- toupper(removed)
[16:12:42.344]                 for (kk in seq_along(NAMES)) {
[16:12:42.344]                   name <- removed[[kk]]
[16:12:42.344]                   NAME <- NAMES[[kk]]
[16:12:42.344]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.344]                     next
[16:12:42.344]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.344]                 }
[16:12:42.344]                 if (length(args) > 0) 
[16:12:42.344]                   base::do.call(base::Sys.setenv, args = args)
[16:12:42.344]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:42.344]             }
[16:12:42.344]             else {
[16:12:42.344]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:42.344]             }
[16:12:42.344]             {
[16:12:42.344]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:42.344]                   0L) {
[16:12:42.344]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:42.344]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:42.344]                   base::options(opts)
[16:12:42.344]                 }
[16:12:42.344]                 {
[16:12:42.344]                   {
[16:12:42.344]                     NULL
[16:12:42.344]                     RNGkind("Mersenne-Twister")
[16:12:42.344]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:42.344]                       inherits = FALSE)
[16:12:42.344]                   }
[16:12:42.344]                   options(future.plan = NULL)
[16:12:42.344]                   if (is.na(NA_character_)) 
[16:12:42.344]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.344]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:42.344]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:42.344]                   {
[16:12:42.344]                     future <- SequentialFuture(..., envir = envir)
[16:12:42.344]                     if (!future$lazy) 
[16:12:42.344]                       future <- run(future)
[16:12:42.344]                     invisible(future)
[16:12:42.344]                   }, function (..., workers = availableCores(), 
[16:12:42.344]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:42.344]                     envir = parent.frame()) 
[16:12:42.344]                   {
[16:12:42.344]                     if (is.function(workers)) 
[16:12:42.344]                       workers <- workers()
[16:12:42.344]                     workers <- structure(as.integer(workers), 
[16:12:42.344]                       class = class(workers))
[16:12:42.344]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:42.344]                       workers >= 1)
[16:12:42.344]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:42.344]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:42.344]                     }
[16:12:42.344]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:42.344]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:42.344]                       envir = envir)
[16:12:42.344]                     if (!future$lazy) 
[16:12:42.344]                       future <- run(future)
[16:12:42.344]                     invisible(future)
[16:12:42.344]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:42.344]                 }
[16:12:42.344]             }
[16:12:42.344]         }
[16:12:42.344]     })
[16:12:42.344]     if (TRUE) {
[16:12:42.344]         base::sink(type = "output", split = FALSE)
[16:12:42.344]         if (TRUE) {
[16:12:42.344]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:42.344]         }
[16:12:42.344]         else {
[16:12:42.344]             ...future.result["stdout"] <- base::list(NULL)
[16:12:42.344]         }
[16:12:42.344]         base::close(...future.stdout)
[16:12:42.344]         ...future.stdout <- NULL
[16:12:42.344]     }
[16:12:42.344]     ...future.result$conditions <- ...future.conditions
[16:12:42.344]     ...future.result$finished <- base::Sys.time()
[16:12:42.344]     ...future.result
[16:12:42.344] }
[16:12:42.346] assign_globals() ...
[16:12:42.346] List of 1
[16:12:42.346]  $ data:'data.frame':	5 obs. of  2 variables:
[16:12:42.346]   ..$ x: int [1:5] 1 2 3 4 5
[16:12:42.346]   ..$ y: int [1:5] 1 2 3 4 5
[16:12:42.346]  - attr(*, "where")=List of 1
[16:12:42.346]   ..$ data:<environment: R_EmptyEnv> 
[16:12:42.346]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:12:42.346]  - attr(*, "resolved")= logi FALSE
[16:12:42.346]  - attr(*, "total_size")= num 160
[16:12:42.346]  - attr(*, "already-done")= logi TRUE
[16:12:42.350] - copied ‘data’ to environment
[16:12:42.350] assign_globals() ... done
[16:12:42.350] plan(): Setting new future strategy stack:
[16:12:42.350] List of future strategies:
[16:12:42.350] 1. multisession:
[16:12:42.350]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:42.350]    - tweaked: FALSE
[16:12:42.350]    - call: plan(list(sequential, strategy))
[16:12:42.354] plan(): nbrOfWorkers() = 2
[16:12:42.859] plan(): Setting new future strategy stack:
[16:12:42.859] List of future strategies:
[16:12:42.859] 1. sequential:
[16:12:42.859]    - args: function (..., envir = parent.frame())
[16:12:42.859]    - tweaked: FALSE
[16:12:42.859]    - call: plan(list(sequential, strategy))
[16:12:42.859] 2. multisession:
[16:12:42.859]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:12:42.859]    - tweaked: FALSE
[16:12:42.859]    - call: plan(list(sequential, strategy))
[16:12:42.860] plan(): nbrOfWorkers() = 1
[16:12:42.860] SequentialFuture started (and completed)
[16:12:42.860] signalConditions() ...
[16:12:42.860]  - include = ‘immediateCondition’
[16:12:42.860]  - exclude = 
[16:12:42.860]  - resignal = FALSE
[16:12:42.860]  - Number of conditions: 93
[16:12:42.861] signalConditions() ... done
[16:12:42.861] - Launch lazy future ... done
[16:12:42.861] run() for ‘SequentialFuture’ ... done
[16:12:42.861] signalConditions() ...
[16:12:42.861]  - include = ‘immediateCondition’
[16:12:42.861]  - exclude = 
[16:12:42.861]  - resignal = FALSE
[16:12:42.861]  - Number of conditions: 93
[16:12:42.861] signalConditions() ... done
[16:12:42.862] Future state: ‘finished’
[16:12:42.862] signalConditions() ...
[16:12:42.862]  - include = ‘condition’
[16:12:42.862]  - exclude = ‘immediateCondition’
[16:12:42.862]  - resignal = TRUE
[16:12:42.862]  - Number of conditions: 93
[16:12:42.862]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.354] getGlobalsAndPackages() ...
[16:12:42.862]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[16:12:42.862]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.367] Searching for globals...
[16:12:42.862]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.368] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[16:12:42.863]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.369] Searching for globals ... DONE
[16:12:42.863]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.369] Resolving globals: FALSE
[16:12:42.863]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.369] The total size of the 1 globals is 160 bytes (160 bytes)
[16:12:42.863]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[16:12:42.863]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] - globals: [1] ‘data’
[16:12:42.863]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] 
[16:12:42.863]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] getGlobalsAndPackages() ... DONE
[16:12:42.864]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] run() for ‘Future’ ...
[16:12:42.864]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] - state: ‘created’
[16:12:42.864]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.370] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:12:42.864]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.374] [local output] makeClusterPSOCK() ...
[16:12:42.864]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.374] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:12:42.864]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.375] [local output] Base port: 11357
[16:12:42.864]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.375] [local output] Getting setup options for 2 cluster nodes ...
[16:12:42.864]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.375] [local output]  - Node 1 of 2 ...
[16:12:42.865]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.375] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:42.865]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.376] [local output] Rscript port: 11357

[16:12:42.865]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.376] [local output]  - Node 2 of 2 ...
[16:12:42.865]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.377] [local output] localMachine=TRUE => revtunnel=FALSE

[16:12:42.865]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.377] [local output] Rscript port: 11357

[16:12:42.865]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.377] [local output] Getting setup options for 2 cluster nodes ... done
[16:12:42.865]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.377] [local output]  - Parallel setup requested for some PSOCK nodes
[16:12:42.865]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.378] [local output] Setting up PSOCK nodes in parallel
[16:12:42.866]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.378] List of 36
[16:12:42.378]  $ worker          : chr "localhost"
[16:12:42.378]   ..- attr(*, "localhost")= logi TRUE
[16:12:42.378]  $ master          : chr "localhost"
[16:12:42.378]  $ port            : int 11357
[16:12:42.378]  $ connectTimeout  : num 120
[16:12:42.378]  $ timeout         : num 2592000
[16:12:42.378]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:12:42.378]  $ homogeneous     : logi TRUE
[16:12:42.378]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:12:42.378]  $ rscript_envs    : NULL
[16:12:42.378]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:42.378]  $ rscript_startup : NULL
[16:12:42.378]  $ rscript_sh      : chr "sh"
[16:12:42.378]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:42.378]  $ methods         : logi TRUE
[16:12:42.378]  $ socketOptions   : chr "no-delay"
[16:12:42.378]  $ useXDR          : logi FALSE
[16:12:42.378]  $ outfile         : chr "/dev/null"
[16:12:42.378]  $ renice          : int NA
[16:12:42.378]  $ rshcmd          : NULL
[16:12:42.378]  $ user            : chr(0) 
[16:12:42.378]  $ revtunnel       : logi FALSE
[16:12:42.378]  $ rshlogfile      : NULL
[16:12:42.378]  $ rshopts         : chr(0) 
[16:12:42.378]  $ rank            : int 1
[16:12:42.378]  $ manual          : logi FALSE
[16:12:42.378]  $ dryrun          : logi FALSE
[16:12:42.378]  $ quiet           : logi FALSE
[16:12:42.378]  $ setup_strategy  : chr "parallel"
[16:12:42.378]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:42.378]  $ pidfile         : chr "/tmp/RtmprHXcW8/worker.rank=1.parallelly.parent=84974.14bee29a441e0.pid"
[16:12:42.378]  $ rshcmd_label    : NULL
[16:12:42.378]  $ rsh_call        : NULL
[16:12:42.378]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:12:42.378]  $ localMachine    : logi TRUE
[16:12:42.378]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:12:42.378]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:12:42.378]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:12:42.378]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:12:42.378]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:12:42.378]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:12:42.378]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:12:42.378]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:12:42.378]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:12:42.378]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:12:42.378]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:12:42.378]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:12:42.378]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:12:42.378]  $ arguments       :List of 28
[16:12:42.378]   ..$ worker          : chr "localhost"
[16:12:42.378]   ..$ master          : NULL
[16:12:42.378]   ..$ port            : int 11357
[16:12:42.378]   ..$ connectTimeout  : num 120
[16:12:42.378]   ..$ timeout         : num 2592000
[16:12:42.378]   ..$ rscript         : NULL
[16:12:42.378]   ..$ homogeneous     : NULL
[16:12:42.378]   ..$ rscript_args    : NULL
[16:12:42.378]   ..$ rscript_envs    : NULL
[16:12:42.378]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:12:42.378]   ..$ rscript_startup : NULL
[16:12:42.378]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:12:42.378]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:12:42.378]   ..$ methods         : logi TRUE
[16:12:42.378]   ..$ socketOptions   : chr "no-delay"
[16:12:42.378]   ..$ useXDR          : logi FALSE
[16:12:42.378]   ..$ outfile         : chr "/dev/null"
[16:12:42.378]   ..$ renice          : int NA
[16:12:42.378]   ..$ rshcmd          : NULL
[16:12:42.378]   ..$ user            : NULL
[16:12:42.378]   ..$ revtunnel       : logi NA
[16:12:42.378]   ..$ rshlogfile      : NULL
[16:12:42.378]   ..$ rshopts         : NULL
[16:12:42.378]   ..$ rank            : int 1
[16:12:42.378]   ..$ manual          : logi FALSE
[16:12:42.378]   ..$ dryrun          : logi FALSE
[16:12:42.378]   ..$ quiet           : logi FALSE
[16:12:42.378]   ..$ setup_strategy  : chr "parallel"
[16:12:42.378]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:12:42.866]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.395] [local output] System call to launch all workers:
[16:12:42.866]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.395] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmprHXcW8/worker.rank=1.parallelly.parent=84974.14bee29a441e0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11357 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:12:42.866]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.395] [local output] Starting PSOCK main server
[16:12:42.866]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.396] [local output] Workers launched
[16:12:42.866]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.396] [local output] Waiting for workers to connect back
[16:12:42.866]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.396]  - [local output] 0 workers out of 2 ready
[16:12:42.867]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.672]  - [local output] 0 workers out of 2 ready
[16:12:42.867]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.673]  - [local output] 1 workers out of 2 ready
[16:12:42.867]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.691]  - [local output] 1 workers out of 2 ready
[16:12:42.867]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.691]  - [local output] 2 workers out of 2 ready
[16:12:42.867]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.691] [local output] Launching of workers completed
[16:12:42.867]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.691] [local output] Collecting session information from workers
[16:12:42.867]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.692] [local output]  - Worker #1 of 2
[16:12:42.867]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.693] [local output]  - Worker #2 of 2
[16:12:42.868]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.693] [local output] makeClusterPSOCK() ... done
[16:12:42.868]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.704] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:12:42.868]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.704] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:12:42.868]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.704]   - Field: ‘node’
[16:12:42.868]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.704]   - Field: ‘label’
[16:12:42.868]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.704]   - Field: ‘local’
[16:12:42.868]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘owner’
[16:12:42.868]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘envir’
[16:12:42.869]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘workers’
[16:12:42.869]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘packages’
[16:12:42.869]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘gc’
[16:12:42.869]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘conditions’
[16:12:42.869]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘persistent’
[16:12:42.869]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘expr’
[16:12:42.869]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘uuid’
[16:12:42.869]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.705]   - Field: ‘seed’
[16:12:42.870]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘version’
[16:12:42.870]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘result’
[16:12:42.870]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘asynchronous’
[16:12:42.870]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘calls’
[16:12:42.870]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘globals’
[16:12:42.870]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘stdout’
[16:12:42.870]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘earlySignal’
[16:12:42.871]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘lazy’
[16:12:42.871]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706]   - Field: ‘state’
[16:12:42.871]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.706] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:12:42.871]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.707] - Launch lazy future ...
[16:12:42.871]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.707] Packages needed by the future expression (n = 0): <none>
[16:12:42.871]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.707] Packages needed by future strategies (n = 0): <none>
[16:12:42.871]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.707] {
[16:12:42.707]     {
[16:12:42.707]         {
[16:12:42.707]             ...future.startTime <- base::Sys.time()
[16:12:42.707]             {
[16:12:42.707]                 {
[16:12:42.707]                   {
[16:12:42.707]                     {
[16:12:42.707]                       base::local({
[16:12:42.707]                         has_future <- base::requireNamespace("future", 
[16:12:42.707]                           quietly = TRUE)
[16:12:42.707]                         if (has_future) {
[16:12:42.707]                           ns <- base::getNamespace("future")
[16:12:42.707]                           version <- ns[[".package"]][["version"]]
[16:12:42.707]                           if (is.null(version)) 
[16:12:42.707]                             version <- utils::packageVersion("future")
[16:12:42.707]                         }
[16:12:42.707]                         else {
[16:12:42.707]                           version <- NULL
[16:12:42.707]                         }
[16:12:42.707]                         if (!has_future || version < "1.8.0") {
[16:12:42.707]                           info <- base::c(r_version = base::gsub("R version ", 
[16:12:42.707]                             "", base::R.version$version.string), 
[16:12:42.707]                             platform = base::sprintf("%s (%s-bit)", 
[16:12:42.707]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:42.707]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:42.707]                               "release", "version")], collapse = " "), 
[16:12:42.707]                             hostname = base::Sys.info()[["nodename"]])
[16:12:42.707]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:12:42.707]                             info)
[16:12:42.707]                           info <- base::paste(info, collapse = "; ")
[16:12:42.707]                           if (!has_future) {
[16:12:42.707]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:42.707]                               info)
[16:12:42.707]                           }
[16:12:42.707]                           else {
[16:12:42.707]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:42.707]                               info, version)
[16:12:42.707]                           }
[16:12:42.707]                           base::stop(msg)
[16:12:42.707]                         }
[16:12:42.707]                       })
[16:12:42.707]                     }
[16:12:42.707]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:12:42.707]                     base::options(mc.cores = 1L)
[16:12:42.707]                   }
[16:12:42.707]                   options(future.plan = NULL)
[16:12:42.707]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.707]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:42.707]                 }
[16:12:42.707]                 ...future.workdir <- getwd()
[16:12:42.707]             }
[16:12:42.707]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:42.707]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:42.707]         }
[16:12:42.707]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[16:12:42.707]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:42.707]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[16:12:42.707]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:42.707]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:42.707]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:42.707]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:42.707]             base::names(...future.oldOptions))
[16:12:42.707]     }
[16:12:42.707]     if (FALSE) {
[16:12:42.707]     }
[16:12:42.707]     else {
[16:12:42.707]         if (TRUE) {
[16:12:42.707]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:42.707]                 open = "w")
[16:12:42.707]         }
[16:12:42.707]         else {
[16:12:42.707]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:42.707]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:42.707]         }
[16:12:42.707]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:42.707]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:42.707]             base::sink(type = "output", split = FALSE)
[16:12:42.707]             base::close(...future.stdout)
[16:12:42.707]         }, add = TRUE)
[16:12:42.707]     }
[16:12:42.707]     ...future.frame <- base::sys.nframe()
[16:12:42.707]     ...future.conditions <- base::list()
[16:12:42.707]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:42.707]     if (FALSE) {
[16:12:42.707]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:42.707]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:42.707]     }
[16:12:42.707]     ...future.result <- base::tryCatch({
[16:12:42.707]         base::withCallingHandlers({
[16:12:42.707]             ...future.value <- base::withVisible(base::local({
[16:12:42.707]                 ...future.makeSendCondition <- local({
[16:12:42.707]                   sendCondition <- NULL
[16:12:42.707]                   function(frame = 1L) {
[16:12:42.707]                     if (is.function(sendCondition)) 
[16:12:42.707]                       return(sendCondition)
[16:12:42.707]                     ns <- getNamespace("parallel")
[16:12:42.707]                     if (exists("sendData", mode = "function", 
[16:12:42.707]                       envir = ns)) {
[16:12:42.707]                       parallel_sendData <- get("sendData", mode = "function", 
[16:12:42.707]                         envir = ns)
[16:12:42.707]                       envir <- sys.frame(frame)
[16:12:42.707]                       master <- NULL
[16:12:42.707]                       while (!identical(envir, .GlobalEnv) && 
[16:12:42.707]                         !identical(envir, emptyenv())) {
[16:12:42.707]                         if (exists("master", mode = "list", envir = envir, 
[16:12:42.707]                           inherits = FALSE)) {
[16:12:42.707]                           master <- get("master", mode = "list", 
[16:12:42.707]                             envir = envir, inherits = FALSE)
[16:12:42.707]                           if (inherits(master, c("SOCKnode", 
[16:12:42.707]                             "SOCK0node"))) {
[16:12:42.707]                             sendCondition <<- function(cond) {
[16:12:42.707]                               data <- list(type = "VALUE", value = cond, 
[16:12:42.707]                                 success = TRUE)
[16:12:42.707]                               parallel_sendData(master, data)
[16:12:42.707]                             }
[16:12:42.707]                             return(sendCondition)
[16:12:42.707]                           }
[16:12:42.707]                         }
[16:12:42.707]                         frame <- frame + 1L
[16:12:42.707]                         envir <- sys.frame(frame)
[16:12:42.707]                       }
[16:12:42.707]                     }
[16:12:42.707]                     sendCondition <<- function(cond) NULL
[16:12:42.707]                   }
[16:12:42.707]                 })
[16:12:42.707]                 withCallingHandlers({
[16:12:42.707]                   subset(data, x < 3)$y
[16:12:42.707]                 }, immediateCondition = function(cond) {
[16:12:42.707]                   sendCondition <- ...future.makeSendCondition()
[16:12:42.707]                   sendCondition(cond)
[16:12:42.707]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.707]                   {
[16:12:42.707]                     inherits <- base::inherits
[16:12:42.707]                     invokeRestart <- base::invokeRestart
[16:12:42.707]                     is.null <- base::is.null
[16:12:42.707]                     muffled <- FALSE
[16:12:42.707]                     if (inherits(cond, "message")) {
[16:12:42.707]                       muffled <- grepl(pattern, "muffleMessage")
[16:12:42.707]                       if (muffled) 
[16:12:42.707]                         invokeRestart("muffleMessage")
[16:12:42.707]                     }
[16:12:42.707]                     else if (inherits(cond, "warning")) {
[16:12:42.707]                       muffled <- grepl(pattern, "muffleWarning")
[16:12:42.707]                       if (muffled) 
[16:12:42.707]                         invokeRestart("muffleWarning")
[16:12:42.707]                     }
[16:12:42.707]                     else if (inherits(cond, "condition")) {
[16:12:42.707]                       if (!is.null(pattern)) {
[16:12:42.707]                         computeRestarts <- base::computeRestarts
[16:12:42.707]                         grepl <- base::grepl
[16:12:42.707]                         restarts <- computeRestarts(cond)
[16:12:42.707]                         for (restart in restarts) {
[16:12:42.707]                           name <- restart$name
[16:12:42.707]                           if (is.null(name)) 
[16:12:42.707]                             next
[16:12:42.707]                           if (!grepl(pattern, name)) 
[16:12:42.707]                             next
[16:12:42.707]                           invokeRestart(restart)
[16:12:42.707]                           muffled <- TRUE
[16:12:42.707]                           break
[16:12:42.707]                         }
[16:12:42.707]                       }
[16:12:42.707]                     }
[16:12:42.707]                     invisible(muffled)
[16:12:42.707]                   }
[16:12:42.707]                   muffleCondition(cond)
[16:12:42.707]                 })
[16:12:42.707]             }))
[16:12:42.707]             future::FutureResult(value = ...future.value$value, 
[16:12:42.707]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.707]                   ...future.rng), globalenv = if (FALSE) 
[16:12:42.707]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:42.707]                     ...future.globalenv.names))
[16:12:42.707]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:42.707]         }, condition = base::local({
[16:12:42.707]             c <- base::c
[16:12:42.707]             inherits <- base::inherits
[16:12:42.707]             invokeRestart <- base::invokeRestart
[16:12:42.707]             length <- base::length
[16:12:42.707]             list <- base::list
[16:12:42.707]             seq.int <- base::seq.int
[16:12:42.707]             signalCondition <- base::signalCondition
[16:12:42.707]             sys.calls <- base::sys.calls
[16:12:42.707]             `[[` <- base::`[[`
[16:12:42.707]             `+` <- base::`+`
[16:12:42.707]             `<<-` <- base::`<<-`
[16:12:42.707]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:42.707]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:42.707]                   3L)]
[16:12:42.707]             }
[16:12:42.707]             function(cond) {
[16:12:42.707]                 is_error <- inherits(cond, "error")
[16:12:42.707]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:42.707]                   NULL)
[16:12:42.707]                 if (is_error) {
[16:12:42.707]                   sessionInformation <- function() {
[16:12:42.707]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:42.707]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:42.707]                       search = base::search(), system = base::Sys.info())
[16:12:42.707]                   }
[16:12:42.707]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.707]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:42.707]                     cond$call), session = sessionInformation(), 
[16:12:42.707]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:42.707]                   signalCondition(cond)
[16:12:42.707]                 }
[16:12:42.707]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:42.707]                 "immediateCondition"))) {
[16:12:42.707]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:42.707]                   ...future.conditions[[length(...future.conditions) + 
[16:12:42.707]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:42.707]                   if (TRUE && !signal) {
[16:12:42.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.707]                     {
[16:12:42.707]                       inherits <- base::inherits
[16:12:42.707]                       invokeRestart <- base::invokeRestart
[16:12:42.707]                       is.null <- base::is.null
[16:12:42.707]                       muffled <- FALSE
[16:12:42.707]                       if (inherits(cond, "message")) {
[16:12:42.707]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.707]                         if (muffled) 
[16:12:42.707]                           invokeRestart("muffleMessage")
[16:12:42.707]                       }
[16:12:42.707]                       else if (inherits(cond, "warning")) {
[16:12:42.707]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.707]                         if (muffled) 
[16:12:42.707]                           invokeRestart("muffleWarning")
[16:12:42.707]                       }
[16:12:42.707]                       else if (inherits(cond, "condition")) {
[16:12:42.707]                         if (!is.null(pattern)) {
[16:12:42.707]                           computeRestarts <- base::computeRestarts
[16:12:42.707]                           grepl <- base::grepl
[16:12:42.707]                           restarts <- computeRestarts(cond)
[16:12:42.707]                           for (restart in restarts) {
[16:12:42.707]                             name <- restart$name
[16:12:42.707]                             if (is.null(name)) 
[16:12:42.707]                               next
[16:12:42.707]                             if (!grepl(pattern, name)) 
[16:12:42.707]                               next
[16:12:42.707]                             invokeRestart(restart)
[16:12:42.707]                             muffled <- TRUE
[16:12:42.707]                             break
[16:12:42.707]                           }
[16:12:42.707]                         }
[16:12:42.707]                       }
[16:12:42.707]                       invisible(muffled)
[16:12:42.707]                     }
[16:12:42.707]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.707]                   }
[16:12:42.707]                 }
[16:12:42.707]                 else {
[16:12:42.707]                   if (TRUE) {
[16:12:42.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:42.707]                     {
[16:12:42.707]                       inherits <- base::inherits
[16:12:42.707]                       invokeRestart <- base::invokeRestart
[16:12:42.707]                       is.null <- base::is.null
[16:12:42.707]                       muffled <- FALSE
[16:12:42.707]                       if (inherits(cond, "message")) {
[16:12:42.707]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:42.707]                         if (muffled) 
[16:12:42.707]                           invokeRestart("muffleMessage")
[16:12:42.707]                       }
[16:12:42.707]                       else if (inherits(cond, "warning")) {
[16:12:42.707]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:42.707]                         if (muffled) 
[16:12:42.707]                           invokeRestart("muffleWarning")
[16:12:42.707]                       }
[16:12:42.707]                       else if (inherits(cond, "condition")) {
[16:12:42.707]                         if (!is.null(pattern)) {
[16:12:42.707]                           computeRestarts <- base::computeRestarts
[16:12:42.707]                           grepl <- base::grepl
[16:12:42.707]                           restarts <- computeRestarts(cond)
[16:12:42.707]                           for (restart in restarts) {
[16:12:42.707]                             name <- restart$name
[16:12:42.707]                             if (is.null(name)) 
[16:12:42.707]                               next
[16:12:42.707]                             if (!grepl(pattern, name)) 
[16:12:42.707]                               next
[16:12:42.707]                             invokeRestart(restart)
[16:12:42.707]                             muffled <- TRUE
[16:12:42.707]                             break
[16:12:42.707]                           }
[16:12:42.707]                         }
[16:12:42.707]                       }
[16:12:42.707]                       invisible(muffled)
[16:12:42.707]                     }
[16:12:42.707]                     muffleCondition(cond, pattern = "^muffle")
[16:12:42.707]                   }
[16:12:42.707]                 }
[16:12:42.707]             }
[16:12:42.707]         }))
[16:12:42.707]     }, error = function(ex) {
[16:12:42.707]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:42.707]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:42.707]                 ...future.rng), started = ...future.startTime, 
[16:12:42.707]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:42.707]             version = "1.8"), class = "FutureResult")
[16:12:42.707]     }, finally = {
[16:12:42.707]         if (!identical(...future.workdir, getwd())) 
[16:12:42.707]             setwd(...future.workdir)
[16:12:42.707]         {
[16:12:42.707]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:42.707]                 ...future.oldOptions$nwarnings <- NULL
[16:12:42.707]             }
[16:12:42.707]             base::options(...future.oldOptions)
[16:12:42.707]             if (.Platform$OS.type == "windows") {
[16:12:42.707]                 old_names <- names(...future.oldEnvVars)
[16:12:42.707]                 envs <- base::Sys.getenv()
[16:12:42.707]                 names <- names(envs)
[16:12:42.707]                 common <- intersect(names, old_names)
[16:12:42.707]                 added <- setdiff(names, old_names)
[16:12:42.707]                 removed <- setdiff(old_names, names)
[16:12:42.707]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:42.707]                   envs[common]]
[16:12:42.707]                 NAMES <- toupper(changed)
[16:12:42.707]                 args <- list()
[16:12:42.707]                 for (kk in seq_along(NAMES)) {
[16:12:42.707]                   name <- changed[[kk]]
[16:12:42.707]                   NAME <- NAMES[[kk]]
[16:12:42.707]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.707]                     next
[16:12:42.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.707]                 }
[16:12:42.707]                 NAMES <- toupper(added)
[16:12:42.707]                 for (kk in seq_along(NAMES)) {
[16:12:42.707]                   name <- added[[kk]]
[16:12:42.707]                   NAME <- NAMES[[kk]]
[16:12:42.707]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.707]                     next
[16:12:42.707]                   args[[name]] <- ""
[16:12:42.707]                 }
[16:12:42.707]                 NAMES <- toupper(removed)
[16:12:42.707]                 for (kk in seq_along(NAMES)) {
[16:12:42.707]                   name <- removed[[kk]]
[16:12:42.707]                   NAME <- NAMES[[kk]]
[16:12:42.707]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:42.707]                     next
[16:12:42.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:42.707]                 }
[16:12:42.707]                 if (length(args) > 0) 
[16:12:42.707]                   base::do.call(base::Sys.setenv, args = args)
[16:12:42.707]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:42.707]             }
[16:12:42.707]             else {
[16:12:42.707]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:42.707]             }
[16:12:42.707]             {
[16:12:42.707]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:42.707]                   0L) {
[16:12:42.707]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:42.707]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:42.707]                   base::options(opts)
[16:12:42.707]                 }
[16:12:42.707]                 {
[16:12:42.707]                   {
[16:12:42.707]                     base::options(mc.cores = ...future.mc.cores.old)
[16:12:42.707]                     NULL
[16:12:42.707]                   }
[16:12:42.707]                   options(future.plan = NULL)
[16:12:42.707]                   if (is.na(NA_character_)) 
[16:12:42.707]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:42.707]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:42.707]                   future::plan(list(function (..., workers = availableCores(), 
[16:12:42.707]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:12:42.707]                     envir = parent.frame()) 
[16:12:42.707]                   {
[16:12:42.707]                     if (is.function(workers)) 
[16:12:42.707]                       workers <- workers()
[16:12:42.707]                     workers <- structure(as.integer(workers), 
[16:12:42.707]                       class = class(workers))
[16:12:42.707]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:12:42.707]                       workers >= 1)
[16:12:42.707]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:12:42.707]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:12:42.707]                     }
[16:12:42.707]                     future <- MultisessionFuture(..., workers = workers, 
[16:12:42.707]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:12:42.707]                       envir = envir)
[16:12:42.707]                     if (!future$lazy) 
[16:12:42.707]                       future <- run(future)
[16:12:42.707]                     invisible(future)
[16:12:42.707]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:42.707]                 }
[16:12:42.707]             }
[16:12:42.707]         }
[16:12:42.707]     })
[16:12:42.707]     if (TRUE) {
[16:12:42.707]         base::sink(type = "output", split = FALSE)
[16:12:42.707]         if (TRUE) {
[16:12:42.707]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:42.707]         }
[16:12:42.707]         else {
[16:12:42.707]             ...future.result["stdout"] <- base::list(NULL)
[16:12:42.707]         }
[16:12:42.707]         base::close(...future.stdout)
[16:12:42.707]         ...future.stdout <- NULL
[16:12:42.707]     }
[16:12:42.707]     ...future.result$conditions <- ...future.conditions
[16:12:42.707]     ...future.result$finished <- base::Sys.time()
[16:12:42.707]     ...future.result
[16:12:42.707] }
[16:12:42.871]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.779] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[16:12:42.872]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.780] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[16:12:42.872]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.780] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[16:12:42.872]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.780] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[16:12:42.872]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.783] MultisessionFuture started
[16:12:42.872]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.783] - Launch lazy future ... done
[16:12:42.872]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.783] run() for ‘MultisessionFuture’ ... done
[16:12:42.872]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.783] result() for ClusterFuture ...
[16:12:42.872]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.783] receiveMessageFromWorker() for ClusterFuture ...
[16:12:42.873]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.784] - Validating connection of MultisessionFuture
[16:12:42.873]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.857] - received message: FutureResult
[16:12:42.873]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.857] - Received FutureResult
[16:12:42.873]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] - Erased future from FutureRegistry
[16:12:42.873]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] result() for ClusterFuture ...
[16:12:42.873]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] - result already collected: FutureResult
[16:12:42.873]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] result() for ClusterFuture ... done
[16:12:42.874]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] receiveMessageFromWorker() for ClusterFuture ... done
[16:12:42.874]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] result() for ClusterFuture ... done
[16:12:42.874]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] result() for ClusterFuture ...
[16:12:42.874]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] - result already collected: FutureResult
[16:12:42.874]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[16:12:42.858] result() for ClusterFuture ... done
[16:12:42.874] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[16:12:42.875] plan(): Setting new future strategy stack:
[16:12:42.875] List of future strategies:
[16:12:42.875] 1. FutureStrategy:
[16:12:42.875]    - args: function (..., envir = parent.frame())
[16:12:42.875]    - tweaked: FALSE
[16:12:42.875]    - call: future::plan(oplan)
[16:12:42.876] plan(): nbrOfWorkers() = 1
> 
