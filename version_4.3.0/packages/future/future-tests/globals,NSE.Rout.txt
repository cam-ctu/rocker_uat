
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:40.233] plan(): Setting new future strategy stack:
[13:20:40.234] List of future strategies:
[13:20:40.234] 1. sequential:
[13:20:40.234]    - args: function (..., envir = parent.frame())
[13:20:40.234]    - tweaked: FALSE
[13:20:40.234]    - call: future::plan("sequential")
[13:20:40.247] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[13:20:40.277] plan(): Setting new future strategy stack:
[13:20:40.277] List of future strategies:
[13:20:40.277] 1. sequential:
[13:20:40.277]    - args: function (..., envir = parent.frame())
[13:20:40.277]    - tweaked: FALSE
[13:20:40.277]    - call: plan(strategy)
[13:20:40.288] plan(): nbrOfWorkers() = 1
[13:20:40.290] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:20:40.290] Searching for globals...
[13:20:40.294] - globals found: [1] ‘getOption’
[13:20:40.294] Searching for globals ... DONE
[13:20:40.294] Resolving globals: FALSE
[13:20:40.295] 
[13:20:40.295] 
[13:20:40.295] getGlobalsAndPackages() ... DONE
[13:20:40.296] run() for ‘Future’ ...
[13:20:40.296] - state: ‘created’
[13:20:40.296] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:40.296] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:40.296] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:40.296]   - Field: ‘label’
[13:20:40.296]   - Field: ‘local’
[13:20:40.297]   - Field: ‘owner’
[13:20:40.297]   - Field: ‘envir’
[13:20:40.297]   - Field: ‘packages’
[13:20:40.297]   - Field: ‘gc’
[13:20:40.297]   - Field: ‘conditions’
[13:20:40.297]   - Field: ‘expr’
[13:20:40.297]   - Field: ‘uuid’
[13:20:40.297]   - Field: ‘seed’
[13:20:40.297]   - Field: ‘version’
[13:20:40.297]   - Field: ‘result’
[13:20:40.298]   - Field: ‘asynchronous’
[13:20:40.298]   - Field: ‘calls’
[13:20:40.298]   - Field: ‘globals’
[13:20:40.298]   - Field: ‘stdout’
[13:20:40.298]   - Field: ‘earlySignal’
[13:20:40.298]   - Field: ‘lazy’
[13:20:40.298]   - Field: ‘state’
[13:20:40.298] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:40.298] - Launch lazy future ...
[13:20:40.299] Packages needed by the future expression (n = 0): <none>
[13:20:40.299] Packages needed by future strategies (n = 0): <none>
[13:20:40.300] {
[13:20:40.300]     {
[13:20:40.300]         {
[13:20:40.300]             ...future.startTime <- base::Sys.time()
[13:20:40.300]             {
[13:20:40.300]                 {
[13:20:40.300]                   {
[13:20:40.300]                     base::local({
[13:20:40.300]                       has_future <- base::requireNamespace("future", 
[13:20:40.300]                         quietly = TRUE)
[13:20:40.300]                       if (has_future) {
[13:20:40.300]                         ns <- base::getNamespace("future")
[13:20:40.300]                         version <- ns[[".package"]][["version"]]
[13:20:40.300]                         if (is.null(version)) 
[13:20:40.300]                           version <- utils::packageVersion("future")
[13:20:40.300]                       }
[13:20:40.300]                       else {
[13:20:40.300]                         version <- NULL
[13:20:40.300]                       }
[13:20:40.300]                       if (!has_future || version < "1.8.0") {
[13:20:40.300]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.300]                           "", base::R.version$version.string), 
[13:20:40.300]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:40.300]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.300]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.300]                             "release", "version")], collapse = " "), 
[13:20:40.300]                           hostname = base::Sys.info()[["nodename"]])
[13:20:40.300]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.300]                           info)
[13:20:40.300]                         info <- base::paste(info, collapse = "; ")
[13:20:40.300]                         if (!has_future) {
[13:20:40.300]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.300]                             info)
[13:20:40.300]                         }
[13:20:40.300]                         else {
[13:20:40.300]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.300]                             info, version)
[13:20:40.300]                         }
[13:20:40.300]                         base::stop(msg)
[13:20:40.300]                       }
[13:20:40.300]                     })
[13:20:40.300]                   }
[13:20:40.300]                   options(future.plan = NULL)
[13:20:40.300]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.300]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.300]                 }
[13:20:40.300]                 ...future.workdir <- getwd()
[13:20:40.300]             }
[13:20:40.300]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.300]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.300]         }
[13:20:40.300]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:20:40.300]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.300]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:20:40.300]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.300]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.300]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.300]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.300]             base::names(...future.oldOptions))
[13:20:40.300]     }
[13:20:40.300]     if (FALSE) {
[13:20:40.300]     }
[13:20:40.300]     else {
[13:20:40.300]         if (TRUE) {
[13:20:40.300]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.300]                 open = "w")
[13:20:40.300]         }
[13:20:40.300]         else {
[13:20:40.300]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.300]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.300]         }
[13:20:40.300]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.300]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.300]             base::sink(type = "output", split = FALSE)
[13:20:40.300]             base::close(...future.stdout)
[13:20:40.300]         }, add = TRUE)
[13:20:40.300]     }
[13:20:40.300]     ...future.frame <- base::sys.nframe()
[13:20:40.300]     ...future.conditions <- base::list()
[13:20:40.300]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.300]     if (FALSE) {
[13:20:40.300]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.300]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.300]     }
[13:20:40.300]     ...future.result <- base::tryCatch({
[13:20:40.300]         base::withCallingHandlers({
[13:20:40.300]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[13:20:40.300]             future::FutureResult(value = ...future.value$value, 
[13:20:40.300]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.300]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.300]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.300]                     ...future.globalenv.names))
[13:20:40.300]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.300]         }, condition = base::local({
[13:20:40.300]             c <- base::c
[13:20:40.300]             inherits <- base::inherits
[13:20:40.300]             invokeRestart <- base::invokeRestart
[13:20:40.300]             length <- base::length
[13:20:40.300]             list <- base::list
[13:20:40.300]             seq.int <- base::seq.int
[13:20:40.300]             signalCondition <- base::signalCondition
[13:20:40.300]             sys.calls <- base::sys.calls
[13:20:40.300]             `[[` <- base::`[[`
[13:20:40.300]             `+` <- base::`+`
[13:20:40.300]             `<<-` <- base::`<<-`
[13:20:40.300]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.300]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.300]                   3L)]
[13:20:40.300]             }
[13:20:40.300]             function(cond) {
[13:20:40.300]                 is_error <- inherits(cond, "error")
[13:20:40.300]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.300]                   NULL)
[13:20:40.300]                 if (is_error) {
[13:20:40.300]                   sessionInformation <- function() {
[13:20:40.300]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.300]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.300]                       search = base::search(), system = base::Sys.info())
[13:20:40.300]                   }
[13:20:40.300]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.300]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.300]                     cond$call), session = sessionInformation(), 
[13:20:40.300]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.300]                   signalCondition(cond)
[13:20:40.300]                 }
[13:20:40.300]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.300]                 "immediateCondition"))) {
[13:20:40.300]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.300]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.300]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.300]                   if (TRUE && !signal) {
[13:20:40.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.300]                     {
[13:20:40.300]                       inherits <- base::inherits
[13:20:40.300]                       invokeRestart <- base::invokeRestart
[13:20:40.300]                       is.null <- base::is.null
[13:20:40.300]                       muffled <- FALSE
[13:20:40.300]                       if (inherits(cond, "message")) {
[13:20:40.300]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.300]                         if (muffled) 
[13:20:40.300]                           invokeRestart("muffleMessage")
[13:20:40.300]                       }
[13:20:40.300]                       else if (inherits(cond, "warning")) {
[13:20:40.300]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.300]                         if (muffled) 
[13:20:40.300]                           invokeRestart("muffleWarning")
[13:20:40.300]                       }
[13:20:40.300]                       else if (inherits(cond, "condition")) {
[13:20:40.300]                         if (!is.null(pattern)) {
[13:20:40.300]                           computeRestarts <- base::computeRestarts
[13:20:40.300]                           grepl <- base::grepl
[13:20:40.300]                           restarts <- computeRestarts(cond)
[13:20:40.300]                           for (restart in restarts) {
[13:20:40.300]                             name <- restart$name
[13:20:40.300]                             if (is.null(name)) 
[13:20:40.300]                               next
[13:20:40.300]                             if (!grepl(pattern, name)) 
[13:20:40.300]                               next
[13:20:40.300]                             invokeRestart(restart)
[13:20:40.300]                             muffled <- TRUE
[13:20:40.300]                             break
[13:20:40.300]                           }
[13:20:40.300]                         }
[13:20:40.300]                       }
[13:20:40.300]                       invisible(muffled)
[13:20:40.300]                     }
[13:20:40.300]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.300]                   }
[13:20:40.300]                 }
[13:20:40.300]                 else {
[13:20:40.300]                   if (TRUE) {
[13:20:40.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.300]                     {
[13:20:40.300]                       inherits <- base::inherits
[13:20:40.300]                       invokeRestart <- base::invokeRestart
[13:20:40.300]                       is.null <- base::is.null
[13:20:40.300]                       muffled <- FALSE
[13:20:40.300]                       if (inherits(cond, "message")) {
[13:20:40.300]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.300]                         if (muffled) 
[13:20:40.300]                           invokeRestart("muffleMessage")
[13:20:40.300]                       }
[13:20:40.300]                       else if (inherits(cond, "warning")) {
[13:20:40.300]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.300]                         if (muffled) 
[13:20:40.300]                           invokeRestart("muffleWarning")
[13:20:40.300]                       }
[13:20:40.300]                       else if (inherits(cond, "condition")) {
[13:20:40.300]                         if (!is.null(pattern)) {
[13:20:40.300]                           computeRestarts <- base::computeRestarts
[13:20:40.300]                           grepl <- base::grepl
[13:20:40.300]                           restarts <- computeRestarts(cond)
[13:20:40.300]                           for (restart in restarts) {
[13:20:40.300]                             name <- restart$name
[13:20:40.300]                             if (is.null(name)) 
[13:20:40.300]                               next
[13:20:40.300]                             if (!grepl(pattern, name)) 
[13:20:40.300]                               next
[13:20:40.300]                             invokeRestart(restart)
[13:20:40.300]                             muffled <- TRUE
[13:20:40.300]                             break
[13:20:40.300]                           }
[13:20:40.300]                         }
[13:20:40.300]                       }
[13:20:40.300]                       invisible(muffled)
[13:20:40.300]                     }
[13:20:40.300]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.300]                   }
[13:20:40.300]                 }
[13:20:40.300]             }
[13:20:40.300]         }))
[13:20:40.300]     }, error = function(ex) {
[13:20:40.300]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.300]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.300]                 ...future.rng), started = ...future.startTime, 
[13:20:40.300]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.300]             version = "1.8"), class = "FutureResult")
[13:20:40.300]     }, finally = {
[13:20:40.300]         if (!identical(...future.workdir, getwd())) 
[13:20:40.300]             setwd(...future.workdir)
[13:20:40.300]         {
[13:20:40.300]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.300]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.300]             }
[13:20:40.300]             base::options(...future.oldOptions)
[13:20:40.300]             if (.Platform$OS.type == "windows") {
[13:20:40.300]                 old_names <- names(...future.oldEnvVars)
[13:20:40.300]                 envs <- base::Sys.getenv()
[13:20:40.300]                 names <- names(envs)
[13:20:40.300]                 common <- intersect(names, old_names)
[13:20:40.300]                 added <- setdiff(names, old_names)
[13:20:40.300]                 removed <- setdiff(old_names, names)
[13:20:40.300]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.300]                   envs[common]]
[13:20:40.300]                 NAMES <- toupper(changed)
[13:20:40.300]                 args <- list()
[13:20:40.300]                 for (kk in seq_along(NAMES)) {
[13:20:40.300]                   name <- changed[[kk]]
[13:20:40.300]                   NAME <- NAMES[[kk]]
[13:20:40.300]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.300]                     next
[13:20:40.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.300]                 }
[13:20:40.300]                 NAMES <- toupper(added)
[13:20:40.300]                 for (kk in seq_along(NAMES)) {
[13:20:40.300]                   name <- added[[kk]]
[13:20:40.300]                   NAME <- NAMES[[kk]]
[13:20:40.300]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.300]                     next
[13:20:40.300]                   args[[name]] <- ""
[13:20:40.300]                 }
[13:20:40.300]                 NAMES <- toupper(removed)
[13:20:40.300]                 for (kk in seq_along(NAMES)) {
[13:20:40.300]                   name <- removed[[kk]]
[13:20:40.300]                   NAME <- NAMES[[kk]]
[13:20:40.300]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.300]                     next
[13:20:40.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.300]                 }
[13:20:40.300]                 if (length(args) > 0) 
[13:20:40.300]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.300]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.300]             }
[13:20:40.300]             else {
[13:20:40.300]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.300]             }
[13:20:40.300]             {
[13:20:40.300]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.300]                   0L) {
[13:20:40.300]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.300]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.300]                   base::options(opts)
[13:20:40.300]                 }
[13:20:40.300]                 {
[13:20:40.300]                   {
[13:20:40.300]                     NULL
[13:20:40.300]                     RNGkind("Mersenne-Twister")
[13:20:40.300]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:40.300]                       inherits = FALSE)
[13:20:40.300]                   }
[13:20:40.300]                   options(future.plan = NULL)
[13:20:40.300]                   if (is.na(NA_character_)) 
[13:20:40.300]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.300]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.300]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.300]                   {
[13:20:40.300]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.300]                     if (!future$lazy) 
[13:20:40.300]                       future <- run(future)
[13:20:40.300]                     invisible(future)
[13:20:40.300]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.300]                 }
[13:20:40.300]             }
[13:20:40.300]         }
[13:20:40.300]     })
[13:20:40.300]     if (TRUE) {
[13:20:40.300]         base::sink(type = "output", split = FALSE)
[13:20:40.300]         if (TRUE) {
[13:20:40.300]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.300]         }
[13:20:40.300]         else {
[13:20:40.300]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.300]         }
[13:20:40.300]         base::close(...future.stdout)
[13:20:40.300]         ...future.stdout <- NULL
[13:20:40.300]     }
[13:20:40.300]     ...future.result$conditions <- ...future.conditions
[13:20:40.300]     ...future.result$finished <- base::Sys.time()
[13:20:40.300]     ...future.result
[13:20:40.300] }
[13:20:40.302] plan(): Setting new future strategy stack:
[13:20:40.302] List of future strategies:
[13:20:40.302] 1. sequential:
[13:20:40.302]    - args: function (..., envir = parent.frame())
[13:20:40.302]    - tweaked: FALSE
[13:20:40.302]    - call: NULL
[13:20:40.302] plan(): nbrOfWorkers() = 1
[13:20:40.303] plan(): Setting new future strategy stack:
[13:20:40.304] List of future strategies:
[13:20:40.304] 1. sequential:
[13:20:40.304]    - args: function (..., envir = parent.frame())
[13:20:40.304]    - tweaked: FALSE
[13:20:40.304]    - call: plan(strategy)
[13:20:40.304] plan(): nbrOfWorkers() = 1
[13:20:40.304] SequentialFuture started (and completed)
[13:20:40.305] - Launch lazy future ... done
[13:20:40.305] run() for ‘SequentialFuture’ ... done
[13:20:40.305] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.306] Searching for globals...
[13:20:40.306] - globals found: [1] ‘getOption’
[13:20:40.306] Searching for globals ... DONE
[13:20:40.306] Resolving globals: FALSE
[13:20:40.306] 
[13:20:40.307] 
[13:20:40.307] getGlobalsAndPackages() ... DONE
[13:20:40.307] run() for ‘Future’ ...
[13:20:40.307] - state: ‘created’
[13:20:40.309] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:40.309] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:40.309] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:40.310]   - Field: ‘label’
[13:20:40.310]   - Field: ‘local’
[13:20:40.310]   - Field: ‘owner’
[13:20:40.310]   - Field: ‘envir’
[13:20:40.310]   - Field: ‘packages’
[13:20:40.310]   - Field: ‘gc’
[13:20:40.310]   - Field: ‘conditions’
[13:20:40.310]   - Field: ‘expr’
[13:20:40.310]   - Field: ‘uuid’
[13:20:40.310]   - Field: ‘seed’
[13:20:40.311]   - Field: ‘version’
[13:20:40.311]   - Field: ‘result’
[13:20:40.311]   - Field: ‘asynchronous’
[13:20:40.311]   - Field: ‘calls’
[13:20:40.311]   - Field: ‘globals’
[13:20:40.311]   - Field: ‘stdout’
[13:20:40.311]   - Field: ‘earlySignal’
[13:20:40.311]   - Field: ‘lazy’
[13:20:40.311]   - Field: ‘state’
[13:20:40.311] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:40.311] - Launch lazy future ...
[13:20:40.312] Packages needed by the future expression (n = 0): <none>
[13:20:40.312] Packages needed by future strategies (n = 0): <none>
[13:20:40.312] {
[13:20:40.312]     {
[13:20:40.312]         {
[13:20:40.312]             ...future.startTime <- base::Sys.time()
[13:20:40.312]             {
[13:20:40.312]                 {
[13:20:40.312]                   {
[13:20:40.312]                     base::local({
[13:20:40.312]                       has_future <- base::requireNamespace("future", 
[13:20:40.312]                         quietly = TRUE)
[13:20:40.312]                       if (has_future) {
[13:20:40.312]                         ns <- base::getNamespace("future")
[13:20:40.312]                         version <- ns[[".package"]][["version"]]
[13:20:40.312]                         if (is.null(version)) 
[13:20:40.312]                           version <- utils::packageVersion("future")
[13:20:40.312]                       }
[13:20:40.312]                       else {
[13:20:40.312]                         version <- NULL
[13:20:40.312]                       }
[13:20:40.312]                       if (!has_future || version < "1.8.0") {
[13:20:40.312]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.312]                           "", base::R.version$version.string), 
[13:20:40.312]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:40.312]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.312]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.312]                             "release", "version")], collapse = " "), 
[13:20:40.312]                           hostname = base::Sys.info()[["nodename"]])
[13:20:40.312]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.312]                           info)
[13:20:40.312]                         info <- base::paste(info, collapse = "; ")
[13:20:40.312]                         if (!has_future) {
[13:20:40.312]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.312]                             info)
[13:20:40.312]                         }
[13:20:40.312]                         else {
[13:20:40.312]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.312]                             info, version)
[13:20:40.312]                         }
[13:20:40.312]                         base::stop(msg)
[13:20:40.312]                       }
[13:20:40.312]                     })
[13:20:40.312]                   }
[13:20:40.312]                   options(future.plan = NULL)
[13:20:40.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.312]                 }
[13:20:40.312]                 ...future.workdir <- getwd()
[13:20:40.312]             }
[13:20:40.312]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.312]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.312]         }
[13:20:40.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.312]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.312]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.312]             base::names(...future.oldOptions))
[13:20:40.312]     }
[13:20:40.312]     if (FALSE) {
[13:20:40.312]     }
[13:20:40.312]     else {
[13:20:40.312]         if (TRUE) {
[13:20:40.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.312]                 open = "w")
[13:20:40.312]         }
[13:20:40.312]         else {
[13:20:40.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.312]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.312]         }
[13:20:40.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.312]             base::sink(type = "output", split = FALSE)
[13:20:40.312]             base::close(...future.stdout)
[13:20:40.312]         }, add = TRUE)
[13:20:40.312]     }
[13:20:40.312]     ...future.frame <- base::sys.nframe()
[13:20:40.312]     ...future.conditions <- base::list()
[13:20:40.312]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.312]     if (FALSE) {
[13:20:40.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.312]     }
[13:20:40.312]     ...future.result <- base::tryCatch({
[13:20:40.312]         base::withCallingHandlers({
[13:20:40.312]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[13:20:40.312]             future::FutureResult(value = ...future.value$value, 
[13:20:40.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.312]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.312]                     ...future.globalenv.names))
[13:20:40.312]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.312]         }, condition = base::local({
[13:20:40.312]             c <- base::c
[13:20:40.312]             inherits <- base::inherits
[13:20:40.312]             invokeRestart <- base::invokeRestart
[13:20:40.312]             length <- base::length
[13:20:40.312]             list <- base::list
[13:20:40.312]             seq.int <- base::seq.int
[13:20:40.312]             signalCondition <- base::signalCondition
[13:20:40.312]             sys.calls <- base::sys.calls
[13:20:40.312]             `[[` <- base::`[[`
[13:20:40.312]             `+` <- base::`+`
[13:20:40.312]             `<<-` <- base::`<<-`
[13:20:40.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.312]                   3L)]
[13:20:40.312]             }
[13:20:40.312]             function(cond) {
[13:20:40.312]                 is_error <- inherits(cond, "error")
[13:20:40.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.312]                   NULL)
[13:20:40.312]                 if (is_error) {
[13:20:40.312]                   sessionInformation <- function() {
[13:20:40.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.312]                       search = base::search(), system = base::Sys.info())
[13:20:40.312]                   }
[13:20:40.312]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.312]                     cond$call), session = sessionInformation(), 
[13:20:40.312]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.312]                   signalCondition(cond)
[13:20:40.312]                 }
[13:20:40.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.312]                 "immediateCondition"))) {
[13:20:40.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.312]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.312]                   if (TRUE && !signal) {
[13:20:40.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.312]                     {
[13:20:40.312]                       inherits <- base::inherits
[13:20:40.312]                       invokeRestart <- base::invokeRestart
[13:20:40.312]                       is.null <- base::is.null
[13:20:40.312]                       muffled <- FALSE
[13:20:40.312]                       if (inherits(cond, "message")) {
[13:20:40.312]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.312]                         if (muffled) 
[13:20:40.312]                           invokeRestart("muffleMessage")
[13:20:40.312]                       }
[13:20:40.312]                       else if (inherits(cond, "warning")) {
[13:20:40.312]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.312]                         if (muffled) 
[13:20:40.312]                           invokeRestart("muffleWarning")
[13:20:40.312]                       }
[13:20:40.312]                       else if (inherits(cond, "condition")) {
[13:20:40.312]                         if (!is.null(pattern)) {
[13:20:40.312]                           computeRestarts <- base::computeRestarts
[13:20:40.312]                           grepl <- base::grepl
[13:20:40.312]                           restarts <- computeRestarts(cond)
[13:20:40.312]                           for (restart in restarts) {
[13:20:40.312]                             name <- restart$name
[13:20:40.312]                             if (is.null(name)) 
[13:20:40.312]                               next
[13:20:40.312]                             if (!grepl(pattern, name)) 
[13:20:40.312]                               next
[13:20:40.312]                             invokeRestart(restart)
[13:20:40.312]                             muffled <- TRUE
[13:20:40.312]                             break
[13:20:40.312]                           }
[13:20:40.312]                         }
[13:20:40.312]                       }
[13:20:40.312]                       invisible(muffled)
[13:20:40.312]                     }
[13:20:40.312]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.312]                   }
[13:20:40.312]                 }
[13:20:40.312]                 else {
[13:20:40.312]                   if (TRUE) {
[13:20:40.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.312]                     {
[13:20:40.312]                       inherits <- base::inherits
[13:20:40.312]                       invokeRestart <- base::invokeRestart
[13:20:40.312]                       is.null <- base::is.null
[13:20:40.312]                       muffled <- FALSE
[13:20:40.312]                       if (inherits(cond, "message")) {
[13:20:40.312]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.312]                         if (muffled) 
[13:20:40.312]                           invokeRestart("muffleMessage")
[13:20:40.312]                       }
[13:20:40.312]                       else if (inherits(cond, "warning")) {
[13:20:40.312]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.312]                         if (muffled) 
[13:20:40.312]                           invokeRestart("muffleWarning")
[13:20:40.312]                       }
[13:20:40.312]                       else if (inherits(cond, "condition")) {
[13:20:40.312]                         if (!is.null(pattern)) {
[13:20:40.312]                           computeRestarts <- base::computeRestarts
[13:20:40.312]                           grepl <- base::grepl
[13:20:40.312]                           restarts <- computeRestarts(cond)
[13:20:40.312]                           for (restart in restarts) {
[13:20:40.312]                             name <- restart$name
[13:20:40.312]                             if (is.null(name)) 
[13:20:40.312]                               next
[13:20:40.312]                             if (!grepl(pattern, name)) 
[13:20:40.312]                               next
[13:20:40.312]                             invokeRestart(restart)
[13:20:40.312]                             muffled <- TRUE
[13:20:40.312]                             break
[13:20:40.312]                           }
[13:20:40.312]                         }
[13:20:40.312]                       }
[13:20:40.312]                       invisible(muffled)
[13:20:40.312]                     }
[13:20:40.312]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.312]                   }
[13:20:40.312]                 }
[13:20:40.312]             }
[13:20:40.312]         }))
[13:20:40.312]     }, error = function(ex) {
[13:20:40.312]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.312]                 ...future.rng), started = ...future.startTime, 
[13:20:40.312]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.312]             version = "1.8"), class = "FutureResult")
[13:20:40.312]     }, finally = {
[13:20:40.312]         if (!identical(...future.workdir, getwd())) 
[13:20:40.312]             setwd(...future.workdir)
[13:20:40.312]         {
[13:20:40.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.312]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.312]             }
[13:20:40.312]             base::options(...future.oldOptions)
[13:20:40.312]             if (.Platform$OS.type == "windows") {
[13:20:40.312]                 old_names <- names(...future.oldEnvVars)
[13:20:40.312]                 envs <- base::Sys.getenv()
[13:20:40.312]                 names <- names(envs)
[13:20:40.312]                 common <- intersect(names, old_names)
[13:20:40.312]                 added <- setdiff(names, old_names)
[13:20:40.312]                 removed <- setdiff(old_names, names)
[13:20:40.312]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.312]                   envs[common]]
[13:20:40.312]                 NAMES <- toupper(changed)
[13:20:40.312]                 args <- list()
[13:20:40.312]                 for (kk in seq_along(NAMES)) {
[13:20:40.312]                   name <- changed[[kk]]
[13:20:40.312]                   NAME <- NAMES[[kk]]
[13:20:40.312]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.312]                     next
[13:20:40.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.312]                 }
[13:20:40.312]                 NAMES <- toupper(added)
[13:20:40.312]                 for (kk in seq_along(NAMES)) {
[13:20:40.312]                   name <- added[[kk]]
[13:20:40.312]                   NAME <- NAMES[[kk]]
[13:20:40.312]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.312]                     next
[13:20:40.312]                   args[[name]] <- ""
[13:20:40.312]                 }
[13:20:40.312]                 NAMES <- toupper(removed)
[13:20:40.312]                 for (kk in seq_along(NAMES)) {
[13:20:40.312]                   name <- removed[[kk]]
[13:20:40.312]                   NAME <- NAMES[[kk]]
[13:20:40.312]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.312]                     next
[13:20:40.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.312]                 }
[13:20:40.312]                 if (length(args) > 0) 
[13:20:40.312]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.312]             }
[13:20:40.312]             else {
[13:20:40.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.312]             }
[13:20:40.312]             {
[13:20:40.312]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.312]                   0L) {
[13:20:40.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.312]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.312]                   base::options(opts)
[13:20:40.312]                 }
[13:20:40.312]                 {
[13:20:40.312]                   {
[13:20:40.312]                     NULL
[13:20:40.312]                     RNGkind("Mersenne-Twister")
[13:20:40.312]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:40.312]                       inherits = FALSE)
[13:20:40.312]                   }
[13:20:40.312]                   options(future.plan = NULL)
[13:20:40.312]                   if (is.na(NA_character_)) 
[13:20:40.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.312]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.312]                   {
[13:20:40.312]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.312]                     if (!future$lazy) 
[13:20:40.312]                       future <- run(future)
[13:20:40.312]                     invisible(future)
[13:20:40.312]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.312]                 }
[13:20:40.312]             }
[13:20:40.312]         }
[13:20:40.312]     })
[13:20:40.312]     if (TRUE) {
[13:20:40.312]         base::sink(type = "output", split = FALSE)
[13:20:40.312]         if (TRUE) {
[13:20:40.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.312]         }
[13:20:40.312]         else {
[13:20:40.312]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.312]         }
[13:20:40.312]         base::close(...future.stdout)
[13:20:40.312]         ...future.stdout <- NULL
[13:20:40.312]     }
[13:20:40.312]     ...future.result$conditions <- ...future.conditions
[13:20:40.312]     ...future.result$finished <- base::Sys.time()
[13:20:40.312]     ...future.result
[13:20:40.312] }
[13:20:40.314] plan(): Setting new future strategy stack:
[13:20:40.314] List of future strategies:
[13:20:40.314] 1. sequential:
[13:20:40.314]    - args: function (..., envir = parent.frame())
[13:20:40.314]    - tweaked: FALSE
[13:20:40.314]    - call: NULL
[13:20:40.314] plan(): nbrOfWorkers() = 1
[13:20:40.315] plan(): Setting new future strategy stack:
[13:20:40.315] List of future strategies:
[13:20:40.315] 1. sequential:
[13:20:40.315]    - args: function (..., envir = parent.frame())
[13:20:40.315]    - tweaked: FALSE
[13:20:40.315]    - call: plan(strategy)
[13:20:40.315] plan(): nbrOfWorkers() = 1
[13:20:40.316] SequentialFuture started (and completed)
[13:20:40.316] - Launch lazy future ... done
[13:20:40.316] run() for ‘SequentialFuture’ ... done
[13:20:40.316] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:20:40.316] Searching for globals...
[13:20:40.318] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.318] Searching for globals...
[13:20:40.319] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:20:40.319] Searching for globals ... DONE
[13:20:40.319] Resolving globals: FALSE
[13:20:40.320] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:40.320] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:40.321] - globals: [1] ‘data’
[13:20:40.321] 
[13:20:40.321] getGlobalsAndPackages() ... DONE
[13:20:40.321] run() for ‘Future’ ...
[13:20:40.321] - state: ‘created’
[13:20:40.321] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:40.322] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:40.322] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:40.322]   - Field: ‘label’
[13:20:40.322]   - Field: ‘local’
[13:20:40.322]   - Field: ‘owner’
[13:20:40.322]   - Field: ‘envir’
[13:20:40.322]   - Field: ‘packages’
[13:20:40.322]   - Field: ‘gc’
[13:20:40.322]   - Field: ‘conditions’
[13:20:40.322]   - Field: ‘expr’
[13:20:40.322]   - Field: ‘uuid’
[13:20:40.323]   - Field: ‘seed’
[13:20:40.323]   - Field: ‘version’
[13:20:40.323]   - Field: ‘result’
[13:20:40.323]   - Field: ‘asynchronous’
[13:20:40.323]   - Field: ‘calls’
[13:20:40.323]   - Field: ‘globals’
[13:20:40.323]   - Field: ‘stdout’
[13:20:40.323]   - Field: ‘earlySignal’
[13:20:40.323]   - Field: ‘lazy’
[13:20:40.323]   - Field: ‘state’
[13:20:40.323] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:40.324] - Launch lazy future ...
[13:20:40.324] Packages needed by the future expression (n = 0): <none>
[13:20:40.324] Packages needed by future strategies (n = 0): <none>
[13:20:40.324] {
[13:20:40.324]     {
[13:20:40.324]         {
[13:20:40.324]             ...future.startTime <- base::Sys.time()
[13:20:40.324]             {
[13:20:40.324]                 {
[13:20:40.324]                   {
[13:20:40.324]                     base::local({
[13:20:40.324]                       has_future <- base::requireNamespace("future", 
[13:20:40.324]                         quietly = TRUE)
[13:20:40.324]                       if (has_future) {
[13:20:40.324]                         ns <- base::getNamespace("future")
[13:20:40.324]                         version <- ns[[".package"]][["version"]]
[13:20:40.324]                         if (is.null(version)) 
[13:20:40.324]                           version <- utils::packageVersion("future")
[13:20:40.324]                       }
[13:20:40.324]                       else {
[13:20:40.324]                         version <- NULL
[13:20:40.324]                       }
[13:20:40.324]                       if (!has_future || version < "1.8.0") {
[13:20:40.324]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.324]                           "", base::R.version$version.string), 
[13:20:40.324]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:40.324]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.324]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.324]                             "release", "version")], collapse = " "), 
[13:20:40.324]                           hostname = base::Sys.info()[["nodename"]])
[13:20:40.324]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.324]                           info)
[13:20:40.324]                         info <- base::paste(info, collapse = "; ")
[13:20:40.324]                         if (!has_future) {
[13:20:40.324]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.324]                             info)
[13:20:40.324]                         }
[13:20:40.324]                         else {
[13:20:40.324]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.324]                             info, version)
[13:20:40.324]                         }
[13:20:40.324]                         base::stop(msg)
[13:20:40.324]                       }
[13:20:40.324]                     })
[13:20:40.324]                   }
[13:20:40.324]                   options(future.plan = NULL)
[13:20:40.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.324]                 }
[13:20:40.324]                 ...future.workdir <- getwd()
[13:20:40.324]             }
[13:20:40.324]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.324]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.324]         }
[13:20:40.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.324]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.324]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.324]             base::names(...future.oldOptions))
[13:20:40.324]     }
[13:20:40.324]     if (FALSE) {
[13:20:40.324]     }
[13:20:40.324]     else {
[13:20:40.324]         if (TRUE) {
[13:20:40.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.324]                 open = "w")
[13:20:40.324]         }
[13:20:40.324]         else {
[13:20:40.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.324]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.324]         }
[13:20:40.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.324]             base::sink(type = "output", split = FALSE)
[13:20:40.324]             base::close(...future.stdout)
[13:20:40.324]         }, add = TRUE)
[13:20:40.324]     }
[13:20:40.324]     ...future.frame <- base::sys.nframe()
[13:20:40.324]     ...future.conditions <- base::list()
[13:20:40.324]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.324]     if (FALSE) {
[13:20:40.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.324]     }
[13:20:40.324]     ...future.result <- base::tryCatch({
[13:20:40.324]         base::withCallingHandlers({
[13:20:40.324]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:20:40.324]                 x < 3)$y))
[13:20:40.324]             future::FutureResult(value = ...future.value$value, 
[13:20:40.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.324]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.324]                     ...future.globalenv.names))
[13:20:40.324]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.324]         }, condition = base::local({
[13:20:40.324]             c <- base::c
[13:20:40.324]             inherits <- base::inherits
[13:20:40.324]             invokeRestart <- base::invokeRestart
[13:20:40.324]             length <- base::length
[13:20:40.324]             list <- base::list
[13:20:40.324]             seq.int <- base::seq.int
[13:20:40.324]             signalCondition <- base::signalCondition
[13:20:40.324]             sys.calls <- base::sys.calls
[13:20:40.324]             `[[` <- base::`[[`
[13:20:40.324]             `+` <- base::`+`
[13:20:40.324]             `<<-` <- base::`<<-`
[13:20:40.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.324]                   3L)]
[13:20:40.324]             }
[13:20:40.324]             function(cond) {
[13:20:40.324]                 is_error <- inherits(cond, "error")
[13:20:40.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.324]                   NULL)
[13:20:40.324]                 if (is_error) {
[13:20:40.324]                   sessionInformation <- function() {
[13:20:40.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.324]                       search = base::search(), system = base::Sys.info())
[13:20:40.324]                   }
[13:20:40.324]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.324]                     cond$call), session = sessionInformation(), 
[13:20:40.324]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.324]                   signalCondition(cond)
[13:20:40.324]                 }
[13:20:40.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.324]                 "immediateCondition"))) {
[13:20:40.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.324]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.324]                   if (TRUE && !signal) {
[13:20:40.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.324]                     {
[13:20:40.324]                       inherits <- base::inherits
[13:20:40.324]                       invokeRestart <- base::invokeRestart
[13:20:40.324]                       is.null <- base::is.null
[13:20:40.324]                       muffled <- FALSE
[13:20:40.324]                       if (inherits(cond, "message")) {
[13:20:40.324]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.324]                         if (muffled) 
[13:20:40.324]                           invokeRestart("muffleMessage")
[13:20:40.324]                       }
[13:20:40.324]                       else if (inherits(cond, "warning")) {
[13:20:40.324]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.324]                         if (muffled) 
[13:20:40.324]                           invokeRestart("muffleWarning")
[13:20:40.324]                       }
[13:20:40.324]                       else if (inherits(cond, "condition")) {
[13:20:40.324]                         if (!is.null(pattern)) {
[13:20:40.324]                           computeRestarts <- base::computeRestarts
[13:20:40.324]                           grepl <- base::grepl
[13:20:40.324]                           restarts <- computeRestarts(cond)
[13:20:40.324]                           for (restart in restarts) {
[13:20:40.324]                             name <- restart$name
[13:20:40.324]                             if (is.null(name)) 
[13:20:40.324]                               next
[13:20:40.324]                             if (!grepl(pattern, name)) 
[13:20:40.324]                               next
[13:20:40.324]                             invokeRestart(restart)
[13:20:40.324]                             muffled <- TRUE
[13:20:40.324]                             break
[13:20:40.324]                           }
[13:20:40.324]                         }
[13:20:40.324]                       }
[13:20:40.324]                       invisible(muffled)
[13:20:40.324]                     }
[13:20:40.324]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.324]                   }
[13:20:40.324]                 }
[13:20:40.324]                 else {
[13:20:40.324]                   if (TRUE) {
[13:20:40.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.324]                     {
[13:20:40.324]                       inherits <- base::inherits
[13:20:40.324]                       invokeRestart <- base::invokeRestart
[13:20:40.324]                       is.null <- base::is.null
[13:20:40.324]                       muffled <- FALSE
[13:20:40.324]                       if (inherits(cond, "message")) {
[13:20:40.324]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.324]                         if (muffled) 
[13:20:40.324]                           invokeRestart("muffleMessage")
[13:20:40.324]                       }
[13:20:40.324]                       else if (inherits(cond, "warning")) {
[13:20:40.324]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.324]                         if (muffled) 
[13:20:40.324]                           invokeRestart("muffleWarning")
[13:20:40.324]                       }
[13:20:40.324]                       else if (inherits(cond, "condition")) {
[13:20:40.324]                         if (!is.null(pattern)) {
[13:20:40.324]                           computeRestarts <- base::computeRestarts
[13:20:40.324]                           grepl <- base::grepl
[13:20:40.324]                           restarts <- computeRestarts(cond)
[13:20:40.324]                           for (restart in restarts) {
[13:20:40.324]                             name <- restart$name
[13:20:40.324]                             if (is.null(name)) 
[13:20:40.324]                               next
[13:20:40.324]                             if (!grepl(pattern, name)) 
[13:20:40.324]                               next
[13:20:40.324]                             invokeRestart(restart)
[13:20:40.324]                             muffled <- TRUE
[13:20:40.324]                             break
[13:20:40.324]                           }
[13:20:40.324]                         }
[13:20:40.324]                       }
[13:20:40.324]                       invisible(muffled)
[13:20:40.324]                     }
[13:20:40.324]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.324]                   }
[13:20:40.324]                 }
[13:20:40.324]             }
[13:20:40.324]         }))
[13:20:40.324]     }, error = function(ex) {
[13:20:40.324]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.324]                 ...future.rng), started = ...future.startTime, 
[13:20:40.324]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.324]             version = "1.8"), class = "FutureResult")
[13:20:40.324]     }, finally = {
[13:20:40.324]         if (!identical(...future.workdir, getwd())) 
[13:20:40.324]             setwd(...future.workdir)
[13:20:40.324]         {
[13:20:40.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.324]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.324]             }
[13:20:40.324]             base::options(...future.oldOptions)
[13:20:40.324]             if (.Platform$OS.type == "windows") {
[13:20:40.324]                 old_names <- names(...future.oldEnvVars)
[13:20:40.324]                 envs <- base::Sys.getenv()
[13:20:40.324]                 names <- names(envs)
[13:20:40.324]                 common <- intersect(names, old_names)
[13:20:40.324]                 added <- setdiff(names, old_names)
[13:20:40.324]                 removed <- setdiff(old_names, names)
[13:20:40.324]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.324]                   envs[common]]
[13:20:40.324]                 NAMES <- toupper(changed)
[13:20:40.324]                 args <- list()
[13:20:40.324]                 for (kk in seq_along(NAMES)) {
[13:20:40.324]                   name <- changed[[kk]]
[13:20:40.324]                   NAME <- NAMES[[kk]]
[13:20:40.324]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.324]                     next
[13:20:40.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.324]                 }
[13:20:40.324]                 NAMES <- toupper(added)
[13:20:40.324]                 for (kk in seq_along(NAMES)) {
[13:20:40.324]                   name <- added[[kk]]
[13:20:40.324]                   NAME <- NAMES[[kk]]
[13:20:40.324]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.324]                     next
[13:20:40.324]                   args[[name]] <- ""
[13:20:40.324]                 }
[13:20:40.324]                 NAMES <- toupper(removed)
[13:20:40.324]                 for (kk in seq_along(NAMES)) {
[13:20:40.324]                   name <- removed[[kk]]
[13:20:40.324]                   NAME <- NAMES[[kk]]
[13:20:40.324]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.324]                     next
[13:20:40.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.324]                 }
[13:20:40.324]                 if (length(args) > 0) 
[13:20:40.324]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.324]             }
[13:20:40.324]             else {
[13:20:40.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.324]             }
[13:20:40.324]             {
[13:20:40.324]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.324]                   0L) {
[13:20:40.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.324]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.324]                   base::options(opts)
[13:20:40.324]                 }
[13:20:40.324]                 {
[13:20:40.324]                   {
[13:20:40.324]                     NULL
[13:20:40.324]                     RNGkind("Mersenne-Twister")
[13:20:40.324]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:40.324]                       inherits = FALSE)
[13:20:40.324]                   }
[13:20:40.324]                   options(future.plan = NULL)
[13:20:40.324]                   if (is.na(NA_character_)) 
[13:20:40.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.324]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.324]                   {
[13:20:40.324]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.324]                     if (!future$lazy) 
[13:20:40.324]                       future <- run(future)
[13:20:40.324]                     invisible(future)
[13:20:40.324]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.324]                 }
[13:20:40.324]             }
[13:20:40.324]         }
[13:20:40.324]     })
[13:20:40.324]     if (TRUE) {
[13:20:40.324]         base::sink(type = "output", split = FALSE)
[13:20:40.324]         if (TRUE) {
[13:20:40.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.324]         }
[13:20:40.324]         else {
[13:20:40.324]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.324]         }
[13:20:40.324]         base::close(...future.stdout)
[13:20:40.324]         ...future.stdout <- NULL
[13:20:40.324]     }
[13:20:40.324]     ...future.result$conditions <- ...future.conditions
[13:20:40.324]     ...future.result$finished <- base::Sys.time()
[13:20:40.324]     ...future.result
[13:20:40.324] }
[13:20:40.326] assign_globals() ...
[13:20:40.326] List of 1
[13:20:40.326]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:40.326]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:40.326]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:40.326]  - attr(*, "where")=List of 1
[13:20:40.326]   ..$ data:<environment: R_EmptyEnv> 
[13:20:40.326]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:40.326]  - attr(*, "resolved")= logi FALSE
[13:20:40.326]  - attr(*, "total_size")= num 160
[13:20:40.326]  - attr(*, "already-done")= logi TRUE
[13:20:40.332] - copied ‘data’ to environment
[13:20:40.332] assign_globals() ... done
[13:20:40.332] plan(): Setting new future strategy stack:
[13:20:40.332] List of future strategies:
[13:20:40.332] 1. sequential:
[13:20:40.332]    - args: function (..., envir = parent.frame())
[13:20:40.332]    - tweaked: FALSE
[13:20:40.332]    - call: NULL
[13:20:40.332] plan(): nbrOfWorkers() = 1
[13:20:40.333] plan(): Setting new future strategy stack:
[13:20:40.333] List of future strategies:
[13:20:40.333] 1. sequential:
[13:20:40.333]    - args: function (..., envir = parent.frame())
[13:20:40.333]    - tweaked: FALSE
[13:20:40.333]    - call: plan(strategy)
[13:20:40.334] plan(): nbrOfWorkers() = 1
[13:20:40.334] SequentialFuture started (and completed)
[13:20:40.334] - Launch lazy future ... done
[13:20:40.334] run() for ‘SequentialFuture’ ... done
[13:20:40.334] plan(): Setting new future strategy stack:
[13:20:40.334] List of future strategies:
[13:20:40.334] 1. sequential:
[13:20:40.334]    - args: function (..., envir = parent.frame())
[13:20:40.334]    - tweaked: FALSE
[13:20:40.334]    - call: plan(list(sequential, strategy))
[13:20:40.334] 2. sequential:
[13:20:40.334]    - args: function (..., envir = parent.frame())
[13:20:40.334]    - tweaked: FALSE
[13:20:40.334]    - call: plan(list(sequential, strategy))
[13:20:40.335] plan(): nbrOfWorkers() = 1
[13:20:40.335] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.335] Searching for globals...
[13:20:40.342] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:20:40.342] Searching for globals ... DONE
[13:20:40.342] Resolving globals: FALSE
[13:20:40.343] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:40.343] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:40.343] - globals: [1] ‘data’
[13:20:40.343] - packages: [1] ‘future’
[13:20:40.343] getGlobalsAndPackages() ... DONE
[13:20:40.344] run() for ‘Future’ ...
[13:20:40.344] - state: ‘created’
[13:20:40.344] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:40.344] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:40.344] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:40.344]   - Field: ‘label’
[13:20:40.344]   - Field: ‘local’
[13:20:40.345]   - Field: ‘owner’
[13:20:40.345]   - Field: ‘envir’
[13:20:40.345]   - Field: ‘packages’
[13:20:40.345]   - Field: ‘gc’
[13:20:40.345]   - Field: ‘conditions’
[13:20:40.345]   - Field: ‘expr’
[13:20:40.345]   - Field: ‘uuid’
[13:20:40.345]   - Field: ‘seed’
[13:20:40.345]   - Field: ‘version’
[13:20:40.345]   - Field: ‘result’
[13:20:40.345]   - Field: ‘asynchronous’
[13:20:40.346]   - Field: ‘calls’
[13:20:40.346]   - Field: ‘globals’
[13:20:40.346]   - Field: ‘stdout’
[13:20:40.346]   - Field: ‘earlySignal’
[13:20:40.346]   - Field: ‘lazy’
[13:20:40.346]   - Field: ‘state’
[13:20:40.346] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:40.346] - Launch lazy future ...
[13:20:40.346] Packages needed by the future expression (n = 1): ‘future’
[13:20:40.347] Packages needed by future strategies (n = 1): ‘future’
[13:20:40.347] {
[13:20:40.347]     {
[13:20:40.347]         {
[13:20:40.347]             ...future.startTime <- base::Sys.time()
[13:20:40.347]             {
[13:20:40.347]                 {
[13:20:40.347]                   {
[13:20:40.347]                     {
[13:20:40.347]                       base::local({
[13:20:40.347]                         has_future <- base::requireNamespace("future", 
[13:20:40.347]                           quietly = TRUE)
[13:20:40.347]                         if (has_future) {
[13:20:40.347]                           ns <- base::getNamespace("future")
[13:20:40.347]                           version <- ns[[".package"]][["version"]]
[13:20:40.347]                           if (is.null(version)) 
[13:20:40.347]                             version <- utils::packageVersion("future")
[13:20:40.347]                         }
[13:20:40.347]                         else {
[13:20:40.347]                           version <- NULL
[13:20:40.347]                         }
[13:20:40.347]                         if (!has_future || version < "1.8.0") {
[13:20:40.347]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.347]                             "", base::R.version$version.string), 
[13:20:40.347]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:40.347]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.347]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.347]                               "release", "version")], collapse = " "), 
[13:20:40.347]                             hostname = base::Sys.info()[["nodename"]])
[13:20:40.347]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.347]                             info)
[13:20:40.347]                           info <- base::paste(info, collapse = "; ")
[13:20:40.347]                           if (!has_future) {
[13:20:40.347]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.347]                               info)
[13:20:40.347]                           }
[13:20:40.347]                           else {
[13:20:40.347]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.347]                               info, version)
[13:20:40.347]                           }
[13:20:40.347]                           base::stop(msg)
[13:20:40.347]                         }
[13:20:40.347]                       })
[13:20:40.347]                     }
[13:20:40.347]                     base::local({
[13:20:40.347]                       for (pkg in "future") {
[13:20:40.347]                         base::loadNamespace(pkg)
[13:20:40.347]                         base::library(pkg, character.only = TRUE)
[13:20:40.347]                       }
[13:20:40.347]                     })
[13:20:40.347]                   }
[13:20:40.347]                   options(future.plan = NULL)
[13:20:40.347]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.347]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.347]                   {
[13:20:40.347]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.347]                     if (!future$lazy) 
[13:20:40.347]                       future <- run(future)
[13:20:40.347]                     invisible(future)
[13:20:40.347]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.347]                 }
[13:20:40.347]                 ...future.workdir <- getwd()
[13:20:40.347]             }
[13:20:40.347]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.347]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.347]         }
[13:20:40.347]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.347]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.347]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.347]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.347]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.347]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.347]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.347]             base::names(...future.oldOptions))
[13:20:40.347]     }
[13:20:40.347]     if (FALSE) {
[13:20:40.347]     }
[13:20:40.347]     else {
[13:20:40.347]         if (TRUE) {
[13:20:40.347]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.347]                 open = "w")
[13:20:40.347]         }
[13:20:40.347]         else {
[13:20:40.347]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.347]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.347]         }
[13:20:40.347]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.347]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.347]             base::sink(type = "output", split = FALSE)
[13:20:40.347]             base::close(...future.stdout)
[13:20:40.347]         }, add = TRUE)
[13:20:40.347]     }
[13:20:40.347]     ...future.frame <- base::sys.nframe()
[13:20:40.347]     ...future.conditions <- base::list()
[13:20:40.347]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.347]     if (FALSE) {
[13:20:40.347]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.347]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.347]     }
[13:20:40.347]     ...future.result <- base::tryCatch({
[13:20:40.347]         base::withCallingHandlers({
[13:20:40.347]             ...future.value <- base::withVisible(base::local({
[13:20:40.347]                 a %<-% subset(data, x < 3)$y
[13:20:40.347]                 a
[13:20:40.347]             }))
[13:20:40.347]             future::FutureResult(value = ...future.value$value, 
[13:20:40.347]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.347]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.347]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.347]                     ...future.globalenv.names))
[13:20:40.347]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.347]         }, condition = base::local({
[13:20:40.347]             c <- base::c
[13:20:40.347]             inherits <- base::inherits
[13:20:40.347]             invokeRestart <- base::invokeRestart
[13:20:40.347]             length <- base::length
[13:20:40.347]             list <- base::list
[13:20:40.347]             seq.int <- base::seq.int
[13:20:40.347]             signalCondition <- base::signalCondition
[13:20:40.347]             sys.calls <- base::sys.calls
[13:20:40.347]             `[[` <- base::`[[`
[13:20:40.347]             `+` <- base::`+`
[13:20:40.347]             `<<-` <- base::`<<-`
[13:20:40.347]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.347]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.347]                   3L)]
[13:20:40.347]             }
[13:20:40.347]             function(cond) {
[13:20:40.347]                 is_error <- inherits(cond, "error")
[13:20:40.347]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.347]                   NULL)
[13:20:40.347]                 if (is_error) {
[13:20:40.347]                   sessionInformation <- function() {
[13:20:40.347]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.347]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.347]                       search = base::search(), system = base::Sys.info())
[13:20:40.347]                   }
[13:20:40.347]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.347]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.347]                     cond$call), session = sessionInformation(), 
[13:20:40.347]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.347]                   signalCondition(cond)
[13:20:40.347]                 }
[13:20:40.347]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.347]                 "immediateCondition"))) {
[13:20:40.347]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.347]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.347]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.347]                   if (TRUE && !signal) {
[13:20:40.347]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.347]                     {
[13:20:40.347]                       inherits <- base::inherits
[13:20:40.347]                       invokeRestart <- base::invokeRestart
[13:20:40.347]                       is.null <- base::is.null
[13:20:40.347]                       muffled <- FALSE
[13:20:40.347]                       if (inherits(cond, "message")) {
[13:20:40.347]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.347]                         if (muffled) 
[13:20:40.347]                           invokeRestart("muffleMessage")
[13:20:40.347]                       }
[13:20:40.347]                       else if (inherits(cond, "warning")) {
[13:20:40.347]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.347]                         if (muffled) 
[13:20:40.347]                           invokeRestart("muffleWarning")
[13:20:40.347]                       }
[13:20:40.347]                       else if (inherits(cond, "condition")) {
[13:20:40.347]                         if (!is.null(pattern)) {
[13:20:40.347]                           computeRestarts <- base::computeRestarts
[13:20:40.347]                           grepl <- base::grepl
[13:20:40.347]                           restarts <- computeRestarts(cond)
[13:20:40.347]                           for (restart in restarts) {
[13:20:40.347]                             name <- restart$name
[13:20:40.347]                             if (is.null(name)) 
[13:20:40.347]                               next
[13:20:40.347]                             if (!grepl(pattern, name)) 
[13:20:40.347]                               next
[13:20:40.347]                             invokeRestart(restart)
[13:20:40.347]                             muffled <- TRUE
[13:20:40.347]                             break
[13:20:40.347]                           }
[13:20:40.347]                         }
[13:20:40.347]                       }
[13:20:40.347]                       invisible(muffled)
[13:20:40.347]                     }
[13:20:40.347]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.347]                   }
[13:20:40.347]                 }
[13:20:40.347]                 else {
[13:20:40.347]                   if (TRUE) {
[13:20:40.347]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.347]                     {
[13:20:40.347]                       inherits <- base::inherits
[13:20:40.347]                       invokeRestart <- base::invokeRestart
[13:20:40.347]                       is.null <- base::is.null
[13:20:40.347]                       muffled <- FALSE
[13:20:40.347]                       if (inherits(cond, "message")) {
[13:20:40.347]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.347]                         if (muffled) 
[13:20:40.347]                           invokeRestart("muffleMessage")
[13:20:40.347]                       }
[13:20:40.347]                       else if (inherits(cond, "warning")) {
[13:20:40.347]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.347]                         if (muffled) 
[13:20:40.347]                           invokeRestart("muffleWarning")
[13:20:40.347]                       }
[13:20:40.347]                       else if (inherits(cond, "condition")) {
[13:20:40.347]                         if (!is.null(pattern)) {
[13:20:40.347]                           computeRestarts <- base::computeRestarts
[13:20:40.347]                           grepl <- base::grepl
[13:20:40.347]                           restarts <- computeRestarts(cond)
[13:20:40.347]                           for (restart in restarts) {
[13:20:40.347]                             name <- restart$name
[13:20:40.347]                             if (is.null(name)) 
[13:20:40.347]                               next
[13:20:40.347]                             if (!grepl(pattern, name)) 
[13:20:40.347]                               next
[13:20:40.347]                             invokeRestart(restart)
[13:20:40.347]                             muffled <- TRUE
[13:20:40.347]                             break
[13:20:40.347]                           }
[13:20:40.347]                         }
[13:20:40.347]                       }
[13:20:40.347]                       invisible(muffled)
[13:20:40.347]                     }
[13:20:40.347]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.347]                   }
[13:20:40.347]                 }
[13:20:40.347]             }
[13:20:40.347]         }))
[13:20:40.347]     }, error = function(ex) {
[13:20:40.347]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.347]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.347]                 ...future.rng), started = ...future.startTime, 
[13:20:40.347]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.347]             version = "1.8"), class = "FutureResult")
[13:20:40.347]     }, finally = {
[13:20:40.347]         if (!identical(...future.workdir, getwd())) 
[13:20:40.347]             setwd(...future.workdir)
[13:20:40.347]         {
[13:20:40.347]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.347]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.347]             }
[13:20:40.347]             base::options(...future.oldOptions)
[13:20:40.347]             if (.Platform$OS.type == "windows") {
[13:20:40.347]                 old_names <- names(...future.oldEnvVars)
[13:20:40.347]                 envs <- base::Sys.getenv()
[13:20:40.347]                 names <- names(envs)
[13:20:40.347]                 common <- intersect(names, old_names)
[13:20:40.347]                 added <- setdiff(names, old_names)
[13:20:40.347]                 removed <- setdiff(old_names, names)
[13:20:40.347]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.347]                   envs[common]]
[13:20:40.347]                 NAMES <- toupper(changed)
[13:20:40.347]                 args <- list()
[13:20:40.347]                 for (kk in seq_along(NAMES)) {
[13:20:40.347]                   name <- changed[[kk]]
[13:20:40.347]                   NAME <- NAMES[[kk]]
[13:20:40.347]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.347]                     next
[13:20:40.347]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.347]                 }
[13:20:40.347]                 NAMES <- toupper(added)
[13:20:40.347]                 for (kk in seq_along(NAMES)) {
[13:20:40.347]                   name <- added[[kk]]
[13:20:40.347]                   NAME <- NAMES[[kk]]
[13:20:40.347]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.347]                     next
[13:20:40.347]                   args[[name]] <- ""
[13:20:40.347]                 }
[13:20:40.347]                 NAMES <- toupper(removed)
[13:20:40.347]                 for (kk in seq_along(NAMES)) {
[13:20:40.347]                   name <- removed[[kk]]
[13:20:40.347]                   NAME <- NAMES[[kk]]
[13:20:40.347]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.347]                     next
[13:20:40.347]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.347]                 }
[13:20:40.347]                 if (length(args) > 0) 
[13:20:40.347]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.347]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.347]             }
[13:20:40.347]             else {
[13:20:40.347]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.347]             }
[13:20:40.347]             {
[13:20:40.347]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.347]                   0L) {
[13:20:40.347]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.347]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.347]                   base::options(opts)
[13:20:40.347]                 }
[13:20:40.347]                 {
[13:20:40.347]                   {
[13:20:40.347]                     NULL
[13:20:40.347]                     RNGkind("Mersenne-Twister")
[13:20:40.347]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:40.347]                       inherits = FALSE)
[13:20:40.347]                   }
[13:20:40.347]                   options(future.plan = NULL)
[13:20:40.347]                   if (is.na(NA_character_)) 
[13:20:40.347]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.347]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.347]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.347]                   {
[13:20:40.347]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.347]                     if (!future$lazy) 
[13:20:40.347]                       future <- run(future)
[13:20:40.347]                     invisible(future)
[13:20:40.347]                   }, function (..., envir = parent.frame()) 
[13:20:40.347]                   {
[13:20:40.347]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.347]                     if (!future$lazy) 
[13:20:40.347]                       future <- run(future)
[13:20:40.347]                     invisible(future)
[13:20:40.347]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.347]                 }
[13:20:40.347]             }
[13:20:40.347]         }
[13:20:40.347]     })
[13:20:40.347]     if (TRUE) {
[13:20:40.347]         base::sink(type = "output", split = FALSE)
[13:20:40.347]         if (TRUE) {
[13:20:40.347]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.347]         }
[13:20:40.347]         else {
[13:20:40.347]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.347]         }
[13:20:40.347]         base::close(...future.stdout)
[13:20:40.347]         ...future.stdout <- NULL
[13:20:40.347]     }
[13:20:40.347]     ...future.result$conditions <- ...future.conditions
[13:20:40.347]     ...future.result$finished <- base::Sys.time()
[13:20:40.347]     ...future.result
[13:20:40.347] }
[13:20:40.349] assign_globals() ...
[13:20:40.349] List of 1
[13:20:40.349]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:40.349]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:40.349]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:40.349]  - attr(*, "where")=List of 1
[13:20:40.349]   ..$ data:<environment: R_EmptyEnv> 
[13:20:40.349]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:40.349]  - attr(*, "resolved")= logi FALSE
[13:20:40.349]  - attr(*, "total_size")= num 160
[13:20:40.349]  - attr(*, "already-done")= logi TRUE
[13:20:40.352] - copied ‘data’ to environment
[13:20:40.352] assign_globals() ... done
[13:20:40.352] plan(): Setting new future strategy stack:
[13:20:40.352] List of future strategies:
[13:20:40.352] 1. sequential:
[13:20:40.352]    - args: function (..., envir = parent.frame())
[13:20:40.352]    - tweaked: FALSE
[13:20:40.352]    - call: plan(list(sequential, strategy))
[13:20:40.353] plan(): nbrOfWorkers() = 1
[13:20:40.382] plan(): Setting new future strategy stack:
[13:20:40.382] List of future strategies:
[13:20:40.382] 1. sequential:
[13:20:40.382]    - args: function (..., envir = parent.frame())
[13:20:40.382]    - tweaked: FALSE
[13:20:40.382]    - call: plan(list(sequential, strategy))
[13:20:40.382] 2. sequential:
[13:20:40.382]    - args: function (..., envir = parent.frame())
[13:20:40.382]    - tweaked: FALSE
[13:20:40.382]    - call: plan(list(sequential, strategy))
[13:20:40.382] plan(): nbrOfWorkers() = 1
[13:20:40.383] SequentialFuture started (and completed)
[13:20:40.383] signalConditions() ...
[13:20:40.383]  - include = ‘immediateCondition’
[13:20:40.383]  - exclude = 
[13:20:40.383]  - resignal = FALSE
[13:20:40.383]  - Number of conditions: 53
[13:20:40.383] signalConditions() ... done
[13:20:40.383] - Launch lazy future ... done
[13:20:40.383] run() for ‘SequentialFuture’ ... done
[13:20:40.383] signalConditions() ...
[13:20:40.384]  - include = ‘immediateCondition’
[13:20:40.384]  - exclude = 
[13:20:40.384]  - resignal = FALSE
[13:20:40.384]  - Number of conditions: 53
[13:20:40.384] signalConditions() ... done
[13:20:40.384] Future state: ‘finished’
[13:20:40.384] signalConditions() ...
[13:20:40.384]  - include = ‘condition’
[13:20:40.384]  - exclude = ‘immediateCondition’
[13:20:40.384]  - resignal = TRUE
[13:20:40.384]  - Number of conditions: 53
[13:20:40.385]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.353] getGlobalsAndPackages() ...
[13:20:40.385]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.385]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.368] Searching for globals...
[13:20:40.385]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.369] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:20:40.385]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.369] Searching for globals ... DONE
[13:20:40.385]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.369] Resolving globals: FALSE
[13:20:40.387]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.369] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:40.387]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.370] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:40.387]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.370] - globals: [1] ‘data’
[13:20:40.387]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.370] 
[13:20:40.387]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.370] getGlobalsAndPackages() ... DONE
[13:20:40.387]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.370] run() for ‘Future’ ...
[13:20:40.387]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.370] - state: ‘created’
[13:20:40.388]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:40.388]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:40.388]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:40.388]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371]   - Field: ‘label’
[13:20:40.388]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371]   - Field: ‘local’
[13:20:40.388]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371]   - Field: ‘owner’
[13:20:40.388]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.371]   - Field: ‘envir’
[13:20:40.389]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘packages’
[13:20:40.389]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘gc’
[13:20:40.389]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘conditions’
[13:20:40.389]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘expr’
[13:20:40.389]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘uuid’
[13:20:40.389]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘seed’
[13:20:40.389]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘version’
[13:20:40.389]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘result’
[13:20:40.390]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.372]   - Field: ‘asynchronous’
[13:20:40.390]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373]   - Field: ‘calls’
[13:20:40.390]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373]   - Field: ‘globals’
[13:20:40.390]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373]   - Field: ‘stdout’
[13:20:40.390]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373]   - Field: ‘earlySignal’
[13:20:40.390]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373]   - Field: ‘lazy’
[13:20:40.390]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373]   - Field: ‘state’
[13:20:40.391]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:40.391]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373] - Launch lazy future ...
[13:20:40.391]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.373] Packages needed by the future expression (n = 0): <none>
[13:20:40.391]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.374] Packages needed by future strategies (n = 0): <none>
[13:20:40.391]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.374] {
[13:20:40.374]     {
[13:20:40.374]         {
[13:20:40.374]             ...future.startTime <- base::Sys.time()
[13:20:40.374]             {
[13:20:40.374]                 {
[13:20:40.374]                   {
[13:20:40.374]                     base::local({
[13:20:40.374]                       has_future <- base::requireNamespace("future", 
[13:20:40.374]                         quietly = TRUE)
[13:20:40.374]                       if (has_future) {
[13:20:40.374]                         ns <- base::getNamespace("future")
[13:20:40.374]                         version <- ns[[".package"]][["version"]]
[13:20:40.374]                         if (is.null(version)) 
[13:20:40.374]                           version <- utils::packageVersion("future")
[13:20:40.374]                       }
[13:20:40.374]                       else {
[13:20:40.374]                         version <- NULL
[13:20:40.374]                       }
[13:20:40.374]                       if (!has_future || version < "1.8.0") {
[13:20:40.374]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.374]                           "", base::R.version$version.string), 
[13:20:40.374]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:40.374]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.374]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.374]                             "release", "version")], collapse = " "), 
[13:20:40.374]                           hostname = base::Sys.info()[["nodename"]])
[13:20:40.374]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.374]                           info)
[13:20:40.374]                         info <- base::paste(info, collapse = "; ")
[13:20:40.374]                         if (!has_future) {
[13:20:40.374]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.374]                             info)
[13:20:40.374]                         }
[13:20:40.374]                         else {
[13:20:40.374]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.374]                             info, version)
[13:20:40.374]                         }
[13:20:40.374]                         base::stop(msg)
[13:20:40.374]                       }
[13:20:40.374]                     })
[13:20:40.374]                   }
[13:20:40.374]                   options(future.plan = NULL)
[13:20:40.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.374]                 }
[13:20:40.374]                 ...future.workdir <- getwd()
[13:20:40.374]             }
[13:20:40.374]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.374]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.374]         }
[13:20:40.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.374]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.374]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.374]             base::names(...future.oldOptions))
[13:20:40.374]     }
[13:20:40.374]     if (FALSE) {
[13:20:40.374]     }
[13:20:40.374]     else {
[13:20:40.374]         if (TRUE) {
[13:20:40.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.374]                 open = "w")
[13:20:40.374]         }
[13:20:40.374]         else {
[13:20:40.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.374]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.374]         }
[13:20:40.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.374]             base::sink(type = "output", split = FALSE)
[13:20:40.374]             base::close(...future.stdout)
[13:20:40.374]         }, add = TRUE)
[13:20:40.374]     }
[13:20:40.374]     ...future.frame <- base::sys.nframe()
[13:20:40.374]     ...future.conditions <- base::list()
[13:20:40.374]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.374]     if (FALSE) {
[13:20:40.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.374]     }
[13:20:40.374]     ...future.result <- base::tryCatch({
[13:20:40.374]         base::withCallingHandlers({
[13:20:40.374]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:20:40.374]                 x < 3)$y))
[13:20:40.374]             future::FutureResult(value = ...future.value$value, 
[13:20:40.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.374]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.374]                     ...future.globalenv.names))
[13:20:40.374]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.374]         }, condition = base::local({
[13:20:40.374]             c <- base::c
[13:20:40.374]             inherits <- base::inherits
[13:20:40.374]             invokeRestart <- base::invokeRestart
[13:20:40.374]             length <- base::length
[13:20:40.374]             list <- base::list
[13:20:40.374]             seq.int <- base::seq.int
[13:20:40.374]             signalCondition <- base::signalCondition
[13:20:40.374]             sys.calls <- base::sys.calls
[13:20:40.374]             `[[` <- base::`[[`
[13:20:40.374]             `+` <- base::`+`
[13:20:40.374]             `<<-` <- base::`<<-`
[13:20:40.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.374]                   3L)]
[13:20:40.374]             }
[13:20:40.374]             function(cond) {
[13:20:40.374]                 is_error <- inherits(cond, "error")
[13:20:40.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.374]                   NULL)
[13:20:40.374]                 if (is_error) {
[13:20:40.374]                   sessionInformation <- function() {
[13:20:40.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.374]                       search = base::search(), system = base::Sys.info())
[13:20:40.374]                   }
[13:20:40.374]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.374]                     cond$call), session = sessionInformation(), 
[13:20:40.374]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.374]                   signalCondition(cond)
[13:20:40.374]                 }
[13:20:40.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.374]                 "immediateCondition"))) {
[13:20:40.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.374]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.374]                   if (TRUE && !signal) {
[13:20:40.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.374]                     {
[13:20:40.374]                       inherits <- base::inherits
[13:20:40.374]                       invokeRestart <- base::invokeRestart
[13:20:40.374]                       is.null <- base::is.null
[13:20:40.374]                       muffled <- FALSE
[13:20:40.374]                       if (inherits(cond, "message")) {
[13:20:40.374]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.374]                         if (muffled) 
[13:20:40.374]                           invokeRestart("muffleMessage")
[13:20:40.374]                       }
[13:20:40.374]                       else if (inherits(cond, "warning")) {
[13:20:40.374]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.374]                         if (muffled) 
[13:20:40.374]                           invokeRestart("muffleWarning")
[13:20:40.374]                       }
[13:20:40.374]                       else if (inherits(cond, "condition")) {
[13:20:40.374]                         if (!is.null(pattern)) {
[13:20:40.374]                           computeRestarts <- base::computeRestarts
[13:20:40.374]                           grepl <- base::grepl
[13:20:40.374]                           restarts <- computeRestarts(cond)
[13:20:40.374]                           for (restart in restarts) {
[13:20:40.374]                             name <- restart$name
[13:20:40.374]                             if (is.null(name)) 
[13:20:40.374]                               next
[13:20:40.374]                             if (!grepl(pattern, name)) 
[13:20:40.374]                               next
[13:20:40.374]                             invokeRestart(restart)
[13:20:40.374]                             muffled <- TRUE
[13:20:40.374]                             break
[13:20:40.374]                           }
[13:20:40.374]                         }
[13:20:40.374]                       }
[13:20:40.374]                       invisible(muffled)
[13:20:40.374]                     }
[13:20:40.374]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.374]                   }
[13:20:40.374]                 }
[13:20:40.374]                 else {
[13:20:40.374]                   if (TRUE) {
[13:20:40.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.374]                     {
[13:20:40.374]                       inherits <- base::inherits
[13:20:40.374]                       invokeRestart <- base::invokeRestart
[13:20:40.374]                       is.null <- base::is.null
[13:20:40.374]                       muffled <- FALSE
[13:20:40.374]                       if (inherits(cond, "message")) {
[13:20:40.374]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.374]                         if (muffled) 
[13:20:40.374]                           invokeRestart("muffleMessage")
[13:20:40.374]                       }
[13:20:40.374]                       else if (inherits(cond, "warning")) {
[13:20:40.374]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.374]                         if (muffled) 
[13:20:40.374]                           invokeRestart("muffleWarning")
[13:20:40.374]                       }
[13:20:40.374]                       else if (inherits(cond, "condition")) {
[13:20:40.374]                         if (!is.null(pattern)) {
[13:20:40.374]                           computeRestarts <- base::computeRestarts
[13:20:40.374]                           grepl <- base::grepl
[13:20:40.374]                           restarts <- computeRestarts(cond)
[13:20:40.374]                           for (restart in restarts) {
[13:20:40.374]                             name <- restart$name
[13:20:40.374]                             if (is.null(name)) 
[13:20:40.374]                               next
[13:20:40.374]                             if (!grepl(pattern, name)) 
[13:20:40.374]                               next
[13:20:40.374]                             invokeRestart(restart)
[13:20:40.374]                             muffled <- TRUE
[13:20:40.374]                             break
[13:20:40.374]                           }
[13:20:40.374]                         }
[13:20:40.374]                       }
[13:20:40.374]                       invisible(muffled)
[13:20:40.374]                     }
[13:20:40.374]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.374]                   }
[13:20:40.374]                 }
[13:20:40.374]             }
[13:20:40.374]         }))
[13:20:40.374]     }, error = function(ex) {
[13:20:40.374]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.374]                 ...future.rng), started = ...future.startTime, 
[13:20:40.374]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.374]             version = "1.8"), class = "FutureResult")
[13:20:40.374]     }, finally = {
[13:20:40.374]         if (!identical(...future.workdir, getwd())) 
[13:20:40.374]             setwd(...future.workdir)
[13:20:40.374]         {
[13:20:40.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.374]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.374]             }
[13:20:40.374]             base::options(...future.oldOptions)
[13:20:40.374]             if (.Platform$OS.type == "windows") {
[13:20:40.374]                 old_names <- names(...future.oldEnvVars)
[13:20:40.374]                 envs <- base::Sys.getenv()
[13:20:40.374]                 names <- names(envs)
[13:20:40.374]                 common <- intersect(names, old_names)
[13:20:40.374]                 added <- setdiff(names, old_names)
[13:20:40.374]                 removed <- setdiff(old_names, names)
[13:20:40.374]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.374]                   envs[common]]
[13:20:40.374]                 NAMES <- toupper(changed)
[13:20:40.374]                 args <- list()
[13:20:40.374]                 for (kk in seq_along(NAMES)) {
[13:20:40.374]                   name <- changed[[kk]]
[13:20:40.374]                   NAME <- NAMES[[kk]]
[13:20:40.374]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.374]                     next
[13:20:40.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.374]                 }
[13:20:40.374]                 NAMES <- toupper(added)
[13:20:40.374]                 for (kk in seq_along(NAMES)) {
[13:20:40.374]                   name <- added[[kk]]
[13:20:40.374]                   NAME <- NAMES[[kk]]
[13:20:40.374]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.374]                     next
[13:20:40.374]                   args[[name]] <- ""
[13:20:40.374]                 }
[13:20:40.374]                 NAMES <- toupper(removed)
[13:20:40.374]                 for (kk in seq_along(NAMES)) {
[13:20:40.374]                   name <- removed[[kk]]
[13:20:40.374]                   NAME <- NAMES[[kk]]
[13:20:40.374]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.374]                     next
[13:20:40.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.374]                 }
[13:20:40.374]                 if (length(args) > 0) 
[13:20:40.374]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.374]             }
[13:20:40.374]             else {
[13:20:40.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.374]             }
[13:20:40.374]             {
[13:20:40.374]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.374]                   0L) {
[13:20:40.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.374]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.374]                   base::options(opts)
[13:20:40.374]                 }
[13:20:40.374]                 {
[13:20:40.374]                   {
[13:20:40.374]                     NULL
[13:20:40.374]                     RNGkind("Mersenne-Twister")
[13:20:40.374]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:40.374]                       inherits = FALSE)
[13:20:40.374]                   }
[13:20:40.374]                   options(future.plan = NULL)
[13:20:40.374]                   if (is.na(NA_character_)) 
[13:20:40.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.374]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.374]                   {
[13:20:40.374]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.374]                     if (!future$lazy) 
[13:20:40.374]                       future <- run(future)
[13:20:40.374]                     invisible(future)
[13:20:40.374]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.374]                 }
[13:20:40.374]             }
[13:20:40.374]         }
[13:20:40.374]     })
[13:20:40.374]     if (TRUE) {
[13:20:40.374]         base::sink(type = "output", split = FALSE)
[13:20:40.374]         if (TRUE) {
[13:20:40.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.374]         }
[13:20:40.374]         else {
[13:20:40.374]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.374]         }
[13:20:40.374]         base::close(...future.stdout)
[13:20:40.374]         ...future.stdout <- NULL
[13:20:40.374]     }
[13:20:40.374]     ...future.result$conditions <- ...future.conditions
[13:20:40.374]     ...future.result$finished <- base::Sys.time()
[13:20:40.374]     ...future.result
[13:20:40.374] }
[13:20:40.391]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.376] assign_globals() ...
[13:20:40.391]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.376] List of 1
[13:20:40.376]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:40.376]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:40.376]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:40.376]  - attr(*, "where")=List of 1
[13:20:40.376]   ..$ data:<environment: R_EmptyEnv> 
[13:20:40.376]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:40.376]  - attr(*, "resolved")= logi FALSE
[13:20:40.376]  - attr(*, "total_size")= num 160
[13:20:40.376]  - attr(*, "already-done")= logi TRUE
[13:20:40.391]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.379] - copied ‘data’ to environment
[13:20:40.392]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.379] assign_globals() ... done
[13:20:40.392]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.379] plan(): Setting new future strategy stack:
[13:20:40.392]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.379] List of future strategies:
[13:20:40.379] 1. sequential:
[13:20:40.379]    - args: function (..., envir = parent.frame())
[13:20:40.379]    - tweaked: FALSE
[13:20:40.379]    - call: NULL
[13:20:40.392]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.380] plan(): nbrOfWorkers() = 1
[13:20:40.392]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.380] plan(): Setting new future strategy stack:
[13:20:40.392]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.380] List of future strategies:
[13:20:40.380] 1. sequential:
[13:20:40.380]    - args: function (..., envir = parent.frame())
[13:20:40.380]    - tweaked: FALSE
[13:20:40.380]    - call: plan(list(sequential, strategy))
[13:20:40.392]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.381] plan(): nbrOfWorkers() = 1
[13:20:40.393]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.381] SequentialFuture started (and completed)
[13:20:40.393]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.381] - Launch lazy future ... done
[13:20:40.393]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.381] run() for ‘SequentialFuture’ ... done
[13:20:40.393] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[13:20:40.393] plan(): Setting new future strategy stack:
[13:20:40.393] List of future strategies:
[13:20:40.393] 1. multicore:
[13:20:40.393]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.393]    - tweaked: FALSE
[13:20:40.393]    - call: plan(strategy)
[13:20:40.397] plan(): nbrOfWorkers() = 2
[13:20:40.398] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:20:40.398] Searching for globals...
[13:20:40.398] - globals found: [1] ‘getOption’
[13:20:40.398] Searching for globals ... DONE
[13:20:40.399] Resolving globals: FALSE
[13:20:40.399] 
[13:20:40.399] 
[13:20:40.399] getGlobalsAndPackages() ... DONE
[13:20:40.399] run() for ‘Future’ ...
[13:20:40.399] - state: ‘created’
[13:20:40.399] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:40.403] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:40.403] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:40.403]   - Field: ‘label’
[13:20:40.403]   - Field: ‘local’
[13:20:40.403]   - Field: ‘owner’
[13:20:40.403]   - Field: ‘envir’
[13:20:40.404]   - Field: ‘workers’
[13:20:40.404]   - Field: ‘packages’
[13:20:40.404]   - Field: ‘gc’
[13:20:40.404]   - Field: ‘job’
[13:20:40.404]   - Field: ‘conditions’
[13:20:40.404]   - Field: ‘expr’
[13:20:40.404]   - Field: ‘uuid’
[13:20:40.404]   - Field: ‘seed’
[13:20:40.404]   - Field: ‘version’
[13:20:40.404]   - Field: ‘result’
[13:20:40.405]   - Field: ‘asynchronous’
[13:20:40.405]   - Field: ‘calls’
[13:20:40.405]   - Field: ‘globals’
[13:20:40.405]   - Field: ‘stdout’
[13:20:40.405]   - Field: ‘earlySignal’
[13:20:40.405]   - Field: ‘lazy’
[13:20:40.405]   - Field: ‘state’
[13:20:40.405] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:40.405] - Launch lazy future ...
[13:20:40.406] Packages needed by the future expression (n = 0): <none>
[13:20:40.406] Packages needed by future strategies (n = 0): <none>
[13:20:40.407] {
[13:20:40.407]     {
[13:20:40.407]         {
[13:20:40.407]             ...future.startTime <- base::Sys.time()
[13:20:40.407]             {
[13:20:40.407]                 {
[13:20:40.407]                   {
[13:20:40.407]                     {
[13:20:40.407]                       base::local({
[13:20:40.407]                         has_future <- base::requireNamespace("future", 
[13:20:40.407]                           quietly = TRUE)
[13:20:40.407]                         if (has_future) {
[13:20:40.407]                           ns <- base::getNamespace("future")
[13:20:40.407]                           version <- ns[[".package"]][["version"]]
[13:20:40.407]                           if (is.null(version)) 
[13:20:40.407]                             version <- utils::packageVersion("future")
[13:20:40.407]                         }
[13:20:40.407]                         else {
[13:20:40.407]                           version <- NULL
[13:20:40.407]                         }
[13:20:40.407]                         if (!has_future || version < "1.8.0") {
[13:20:40.407]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.407]                             "", base::R.version$version.string), 
[13:20:40.407]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:40.407]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.407]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.407]                               "release", "version")], collapse = " "), 
[13:20:40.407]                             hostname = base::Sys.info()[["nodename"]])
[13:20:40.407]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.407]                             info)
[13:20:40.407]                           info <- base::paste(info, collapse = "; ")
[13:20:40.407]                           if (!has_future) {
[13:20:40.407]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.407]                               info)
[13:20:40.407]                           }
[13:20:40.407]                           else {
[13:20:40.407]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.407]                               info, version)
[13:20:40.407]                           }
[13:20:40.407]                           base::stop(msg)
[13:20:40.407]                         }
[13:20:40.407]                       })
[13:20:40.407]                     }
[13:20:40.407]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:40.407]                     base::options(mc.cores = 1L)
[13:20:40.407]                   }
[13:20:40.407]                   options(future.plan = NULL)
[13:20:40.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.407]                 }
[13:20:40.407]                 ...future.workdir <- getwd()
[13:20:40.407]             }
[13:20:40.407]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.407]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.407]         }
[13:20:40.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:20:40.407]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.407]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:20:40.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.407]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.407]             base::names(...future.oldOptions))
[13:20:40.407]     }
[13:20:40.407]     if (FALSE) {
[13:20:40.407]     }
[13:20:40.407]     else {
[13:20:40.407]         if (TRUE) {
[13:20:40.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.407]                 open = "w")
[13:20:40.407]         }
[13:20:40.407]         else {
[13:20:40.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.407]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.407]         }
[13:20:40.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.407]             base::sink(type = "output", split = FALSE)
[13:20:40.407]             base::close(...future.stdout)
[13:20:40.407]         }, add = TRUE)
[13:20:40.407]     }
[13:20:40.407]     ...future.frame <- base::sys.nframe()
[13:20:40.407]     ...future.conditions <- base::list()
[13:20:40.407]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.407]     if (FALSE) {
[13:20:40.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.407]     }
[13:20:40.407]     ...future.result <- base::tryCatch({
[13:20:40.407]         base::withCallingHandlers({
[13:20:40.407]             ...future.value <- base::withVisible(base::local({
[13:20:40.407]                 withCallingHandlers({
[13:20:40.407]                   getOption("future.globals.onMissing")
[13:20:40.407]                 }, immediateCondition = function(cond) {
[13:20:40.407]                   save_rds <- function (object, pathname, ...) 
[13:20:40.407]                   {
[13:20:40.407]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:40.407]                     if (file_test("-f", pathname_tmp)) {
[13:20:40.407]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.407]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:40.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.407]                         fi_tmp[["mtime"]])
[13:20:40.407]                     }
[13:20:40.407]                     tryCatch({
[13:20:40.407]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:40.407]                     }, error = function(ex) {
[13:20:40.407]                       msg <- conditionMessage(ex)
[13:20:40.407]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.407]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:40.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.407]                         fi_tmp[["mtime"]], msg)
[13:20:40.407]                       ex$message <- msg
[13:20:40.407]                       stop(ex)
[13:20:40.407]                     })
[13:20:40.407]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:40.407]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:40.407]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:40.407]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.407]                       fi <- file.info(pathname)
[13:20:40.407]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:40.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.407]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:40.407]                         fi[["size"]], fi[["mtime"]])
[13:20:40.407]                       stop(msg)
[13:20:40.407]                     }
[13:20:40.407]                     invisible(pathname)
[13:20:40.407]                   }
[13:20:40.407]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:40.407]                     rootPath = tempdir()) 
[13:20:40.407]                   {
[13:20:40.407]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:40.407]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:40.407]                       tmpdir = path, fileext = ".rds")
[13:20:40.407]                     save_rds(obj, file)
[13:20:40.407]                   }
[13:20:40.407]                   saveImmediateCondition(cond, path = "/tmp/Rtmpbh7exT/.future/immediateConditions")
[13:20:40.407]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.407]                   {
[13:20:40.407]                     inherits <- base::inherits
[13:20:40.407]                     invokeRestart <- base::invokeRestart
[13:20:40.407]                     is.null <- base::is.null
[13:20:40.407]                     muffled <- FALSE
[13:20:40.407]                     if (inherits(cond, "message")) {
[13:20:40.407]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:40.407]                       if (muffled) 
[13:20:40.407]                         invokeRestart("muffleMessage")
[13:20:40.407]                     }
[13:20:40.407]                     else if (inherits(cond, "warning")) {
[13:20:40.407]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:40.407]                       if (muffled) 
[13:20:40.407]                         invokeRestart("muffleWarning")
[13:20:40.407]                     }
[13:20:40.407]                     else if (inherits(cond, "condition")) {
[13:20:40.407]                       if (!is.null(pattern)) {
[13:20:40.407]                         computeRestarts <- base::computeRestarts
[13:20:40.407]                         grepl <- base::grepl
[13:20:40.407]                         restarts <- computeRestarts(cond)
[13:20:40.407]                         for (restart in restarts) {
[13:20:40.407]                           name <- restart$name
[13:20:40.407]                           if (is.null(name)) 
[13:20:40.407]                             next
[13:20:40.407]                           if (!grepl(pattern, name)) 
[13:20:40.407]                             next
[13:20:40.407]                           invokeRestart(restart)
[13:20:40.407]                           muffled <- TRUE
[13:20:40.407]                           break
[13:20:40.407]                         }
[13:20:40.407]                       }
[13:20:40.407]                     }
[13:20:40.407]                     invisible(muffled)
[13:20:40.407]                   }
[13:20:40.407]                   muffleCondition(cond)
[13:20:40.407]                 })
[13:20:40.407]             }))
[13:20:40.407]             future::FutureResult(value = ...future.value$value, 
[13:20:40.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.407]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.407]                     ...future.globalenv.names))
[13:20:40.407]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.407]         }, condition = base::local({
[13:20:40.407]             c <- base::c
[13:20:40.407]             inherits <- base::inherits
[13:20:40.407]             invokeRestart <- base::invokeRestart
[13:20:40.407]             length <- base::length
[13:20:40.407]             list <- base::list
[13:20:40.407]             seq.int <- base::seq.int
[13:20:40.407]             signalCondition <- base::signalCondition
[13:20:40.407]             sys.calls <- base::sys.calls
[13:20:40.407]             `[[` <- base::`[[`
[13:20:40.407]             `+` <- base::`+`
[13:20:40.407]             `<<-` <- base::`<<-`
[13:20:40.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.407]                   3L)]
[13:20:40.407]             }
[13:20:40.407]             function(cond) {
[13:20:40.407]                 is_error <- inherits(cond, "error")
[13:20:40.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.407]                   NULL)
[13:20:40.407]                 if (is_error) {
[13:20:40.407]                   sessionInformation <- function() {
[13:20:40.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.407]                       search = base::search(), system = base::Sys.info())
[13:20:40.407]                   }
[13:20:40.407]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.407]                     cond$call), session = sessionInformation(), 
[13:20:40.407]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.407]                   signalCondition(cond)
[13:20:40.407]                 }
[13:20:40.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.407]                 "immediateCondition"))) {
[13:20:40.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.407]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.407]                   if (TRUE && !signal) {
[13:20:40.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.407]                     {
[13:20:40.407]                       inherits <- base::inherits
[13:20:40.407]                       invokeRestart <- base::invokeRestart
[13:20:40.407]                       is.null <- base::is.null
[13:20:40.407]                       muffled <- FALSE
[13:20:40.407]                       if (inherits(cond, "message")) {
[13:20:40.407]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.407]                         if (muffled) 
[13:20:40.407]                           invokeRestart("muffleMessage")
[13:20:40.407]                       }
[13:20:40.407]                       else if (inherits(cond, "warning")) {
[13:20:40.407]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.407]                         if (muffled) 
[13:20:40.407]                           invokeRestart("muffleWarning")
[13:20:40.407]                       }
[13:20:40.407]                       else if (inherits(cond, "condition")) {
[13:20:40.407]                         if (!is.null(pattern)) {
[13:20:40.407]                           computeRestarts <- base::computeRestarts
[13:20:40.407]                           grepl <- base::grepl
[13:20:40.407]                           restarts <- computeRestarts(cond)
[13:20:40.407]                           for (restart in restarts) {
[13:20:40.407]                             name <- restart$name
[13:20:40.407]                             if (is.null(name)) 
[13:20:40.407]                               next
[13:20:40.407]                             if (!grepl(pattern, name)) 
[13:20:40.407]                               next
[13:20:40.407]                             invokeRestart(restart)
[13:20:40.407]                             muffled <- TRUE
[13:20:40.407]                             break
[13:20:40.407]                           }
[13:20:40.407]                         }
[13:20:40.407]                       }
[13:20:40.407]                       invisible(muffled)
[13:20:40.407]                     }
[13:20:40.407]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.407]                   }
[13:20:40.407]                 }
[13:20:40.407]                 else {
[13:20:40.407]                   if (TRUE) {
[13:20:40.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.407]                     {
[13:20:40.407]                       inherits <- base::inherits
[13:20:40.407]                       invokeRestart <- base::invokeRestart
[13:20:40.407]                       is.null <- base::is.null
[13:20:40.407]                       muffled <- FALSE
[13:20:40.407]                       if (inherits(cond, "message")) {
[13:20:40.407]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.407]                         if (muffled) 
[13:20:40.407]                           invokeRestart("muffleMessage")
[13:20:40.407]                       }
[13:20:40.407]                       else if (inherits(cond, "warning")) {
[13:20:40.407]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.407]                         if (muffled) 
[13:20:40.407]                           invokeRestart("muffleWarning")
[13:20:40.407]                       }
[13:20:40.407]                       else if (inherits(cond, "condition")) {
[13:20:40.407]                         if (!is.null(pattern)) {
[13:20:40.407]                           computeRestarts <- base::computeRestarts
[13:20:40.407]                           grepl <- base::grepl
[13:20:40.407]                           restarts <- computeRestarts(cond)
[13:20:40.407]                           for (restart in restarts) {
[13:20:40.407]                             name <- restart$name
[13:20:40.407]                             if (is.null(name)) 
[13:20:40.407]                               next
[13:20:40.407]                             if (!grepl(pattern, name)) 
[13:20:40.407]                               next
[13:20:40.407]                             invokeRestart(restart)
[13:20:40.407]                             muffled <- TRUE
[13:20:40.407]                             break
[13:20:40.407]                           }
[13:20:40.407]                         }
[13:20:40.407]                       }
[13:20:40.407]                       invisible(muffled)
[13:20:40.407]                     }
[13:20:40.407]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.407]                   }
[13:20:40.407]                 }
[13:20:40.407]             }
[13:20:40.407]         }))
[13:20:40.407]     }, error = function(ex) {
[13:20:40.407]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.407]                 ...future.rng), started = ...future.startTime, 
[13:20:40.407]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.407]             version = "1.8"), class = "FutureResult")
[13:20:40.407]     }, finally = {
[13:20:40.407]         if (!identical(...future.workdir, getwd())) 
[13:20:40.407]             setwd(...future.workdir)
[13:20:40.407]         {
[13:20:40.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.407]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.407]             }
[13:20:40.407]             base::options(...future.oldOptions)
[13:20:40.407]             if (.Platform$OS.type == "windows") {
[13:20:40.407]                 old_names <- names(...future.oldEnvVars)
[13:20:40.407]                 envs <- base::Sys.getenv()
[13:20:40.407]                 names <- names(envs)
[13:20:40.407]                 common <- intersect(names, old_names)
[13:20:40.407]                 added <- setdiff(names, old_names)
[13:20:40.407]                 removed <- setdiff(old_names, names)
[13:20:40.407]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.407]                   envs[common]]
[13:20:40.407]                 NAMES <- toupper(changed)
[13:20:40.407]                 args <- list()
[13:20:40.407]                 for (kk in seq_along(NAMES)) {
[13:20:40.407]                   name <- changed[[kk]]
[13:20:40.407]                   NAME <- NAMES[[kk]]
[13:20:40.407]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.407]                     next
[13:20:40.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.407]                 }
[13:20:40.407]                 NAMES <- toupper(added)
[13:20:40.407]                 for (kk in seq_along(NAMES)) {
[13:20:40.407]                   name <- added[[kk]]
[13:20:40.407]                   NAME <- NAMES[[kk]]
[13:20:40.407]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.407]                     next
[13:20:40.407]                   args[[name]] <- ""
[13:20:40.407]                 }
[13:20:40.407]                 NAMES <- toupper(removed)
[13:20:40.407]                 for (kk in seq_along(NAMES)) {
[13:20:40.407]                   name <- removed[[kk]]
[13:20:40.407]                   NAME <- NAMES[[kk]]
[13:20:40.407]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.407]                     next
[13:20:40.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.407]                 }
[13:20:40.407]                 if (length(args) > 0) 
[13:20:40.407]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.407]             }
[13:20:40.407]             else {
[13:20:40.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.407]             }
[13:20:40.407]             {
[13:20:40.407]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.407]                   0L) {
[13:20:40.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.407]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.407]                   base::options(opts)
[13:20:40.407]                 }
[13:20:40.407]                 {
[13:20:40.407]                   {
[13:20:40.407]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:40.407]                     NULL
[13:20:40.407]                   }
[13:20:40.407]                   options(future.plan = NULL)
[13:20:40.407]                   if (is.na(NA_character_)) 
[13:20:40.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.407]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:40.407]                     envir = parent.frame()) 
[13:20:40.407]                   {
[13:20:40.407]                     default_workers <- missing(workers)
[13:20:40.407]                     if (is.function(workers)) 
[13:20:40.407]                       workers <- workers()
[13:20:40.407]                     workers <- structure(as.integer(workers), 
[13:20:40.407]                       class = class(workers))
[13:20:40.407]                     stop_if_not(is.finite(workers), workers >= 
[13:20:40.407]                       1L)
[13:20:40.407]                     if ((workers == 1L && !inherits(workers, 
[13:20:40.407]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:40.407]                       if (default_workers) 
[13:20:40.407]                         supportsMulticore(warn = TRUE)
[13:20:40.407]                       return(sequential(..., envir = envir))
[13:20:40.407]                     }
[13:20:40.407]                     oopts <- options(mc.cores = workers)
[13:20:40.407]                     on.exit(options(oopts))
[13:20:40.407]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:40.407]                       envir = envir)
[13:20:40.407]                     if (!future$lazy) 
[13:20:40.407]                       future <- run(future)
[13:20:40.407]                     invisible(future)
[13:20:40.407]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.407]                 }
[13:20:40.407]             }
[13:20:40.407]         }
[13:20:40.407]     })
[13:20:40.407]     if (TRUE) {
[13:20:40.407]         base::sink(type = "output", split = FALSE)
[13:20:40.407]         if (TRUE) {
[13:20:40.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.407]         }
[13:20:40.407]         else {
[13:20:40.407]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.407]         }
[13:20:40.407]         base::close(...future.stdout)
[13:20:40.407]         ...future.stdout <- NULL
[13:20:40.407]     }
[13:20:40.407]     ...future.result$conditions <- ...future.conditions
[13:20:40.407]     ...future.result$finished <- base::Sys.time()
[13:20:40.407]     ...future.result
[13:20:40.407] }
[13:20:40.409] requestCore(): workers = 2
[13:20:40.412] MulticoreFuture started
[13:20:40.412] - Launch lazy future ... done
[13:20:40.413] run() for ‘MulticoreFuture’ ... done
[13:20:40.413] plan(): Setting new future strategy stack:
[13:20:40.413] List of future strategies:
[13:20:40.413] 1. sequential:
[13:20:40.413]    - args: function (..., envir = parent.frame())
[13:20:40.413]    - tweaked: FALSE
[13:20:40.413]    - call: NULL
[13:20:40.414] plan(): nbrOfWorkers() = 1
[13:20:40.416] plan(): Setting new future strategy stack:
[13:20:40.416] List of future strategies:
[13:20:40.416] 1. multicore:
[13:20:40.416]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.416]    - tweaked: FALSE
[13:20:40.416]    - call: plan(strategy)
[13:20:40.420] plan(): nbrOfWorkers() = 2
[13:20:40.425] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.425] Searching for globals...
[13:20:40.426] - globals found: [1] ‘getOption’
[13:20:40.426] Searching for globals ... DONE
[13:20:40.426] Resolving globals: FALSE
[13:20:40.426] 
[13:20:40.427] 
[13:20:40.427] getGlobalsAndPackages() ... DONE
[13:20:40.427] run() for ‘Future’ ...
[13:20:40.427] - state: ‘created’
[13:20:40.427] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:40.431] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:40.431] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:40.431]   - Field: ‘label’
[13:20:40.432]   - Field: ‘local’
[13:20:40.432]   - Field: ‘owner’
[13:20:40.432]   - Field: ‘envir’
[13:20:40.434]   - Field: ‘workers’
[13:20:40.435]   - Field: ‘packages’
[13:20:40.435]   - Field: ‘gc’
[13:20:40.435]   - Field: ‘job’
[13:20:40.435]   - Field: ‘conditions’
[13:20:40.435]   - Field: ‘expr’
[13:20:40.435]   - Field: ‘uuid’
[13:20:40.435]   - Field: ‘seed’
[13:20:40.435]   - Field: ‘version’
[13:20:40.436]   - Field: ‘result’
[13:20:40.436]   - Field: ‘asynchronous’
[13:20:40.436]   - Field: ‘calls’
[13:20:40.436]   - Field: ‘globals’
[13:20:40.436]   - Field: ‘stdout’
[13:20:40.436]   - Field: ‘earlySignal’
[13:20:40.436]   - Field: ‘lazy’
[13:20:40.437]   - Field: ‘state’
[13:20:40.437] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:40.437] - Launch lazy future ...
[13:20:40.437] Packages needed by the future expression (n = 0): <none>
[13:20:40.437] Packages needed by future strategies (n = 0): <none>
[13:20:40.438] {
[13:20:40.438]     {
[13:20:40.438]         {
[13:20:40.438]             ...future.startTime <- base::Sys.time()
[13:20:40.438]             {
[13:20:40.438]                 {
[13:20:40.438]                   {
[13:20:40.438]                     {
[13:20:40.438]                       base::local({
[13:20:40.438]                         has_future <- base::requireNamespace("future", 
[13:20:40.438]                           quietly = TRUE)
[13:20:40.438]                         if (has_future) {
[13:20:40.438]                           ns <- base::getNamespace("future")
[13:20:40.438]                           version <- ns[[".package"]][["version"]]
[13:20:40.438]                           if (is.null(version)) 
[13:20:40.438]                             version <- utils::packageVersion("future")
[13:20:40.438]                         }
[13:20:40.438]                         else {
[13:20:40.438]                           version <- NULL
[13:20:40.438]                         }
[13:20:40.438]                         if (!has_future || version < "1.8.0") {
[13:20:40.438]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.438]                             "", base::R.version$version.string), 
[13:20:40.438]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:40.438]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.438]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.438]                               "release", "version")], collapse = " "), 
[13:20:40.438]                             hostname = base::Sys.info()[["nodename"]])
[13:20:40.438]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.438]                             info)
[13:20:40.438]                           info <- base::paste(info, collapse = "; ")
[13:20:40.438]                           if (!has_future) {
[13:20:40.438]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.438]                               info)
[13:20:40.438]                           }
[13:20:40.438]                           else {
[13:20:40.438]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.438]                               info, version)
[13:20:40.438]                           }
[13:20:40.438]                           base::stop(msg)
[13:20:40.438]                         }
[13:20:40.438]                       })
[13:20:40.438]                     }
[13:20:40.438]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:40.438]                     base::options(mc.cores = 1L)
[13:20:40.438]                   }
[13:20:40.438]                   options(future.plan = NULL)
[13:20:40.438]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.438]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.438]                 }
[13:20:40.438]                 ...future.workdir <- getwd()
[13:20:40.438]             }
[13:20:40.438]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.438]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.438]         }
[13:20:40.438]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.438]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.438]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.438]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.438]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.438]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.438]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.438]             base::names(...future.oldOptions))
[13:20:40.438]     }
[13:20:40.438]     if (FALSE) {
[13:20:40.438]     }
[13:20:40.438]     else {
[13:20:40.438]         if (TRUE) {
[13:20:40.438]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.438]                 open = "w")
[13:20:40.438]         }
[13:20:40.438]         else {
[13:20:40.438]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.438]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.438]         }
[13:20:40.438]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.438]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.438]             base::sink(type = "output", split = FALSE)
[13:20:40.438]             base::close(...future.stdout)
[13:20:40.438]         }, add = TRUE)
[13:20:40.438]     }
[13:20:40.438]     ...future.frame <- base::sys.nframe()
[13:20:40.438]     ...future.conditions <- base::list()
[13:20:40.438]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.438]     if (FALSE) {
[13:20:40.438]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.438]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.438]     }
[13:20:40.438]     ...future.result <- base::tryCatch({
[13:20:40.438]         base::withCallingHandlers({
[13:20:40.438]             ...future.value <- base::withVisible(base::local({
[13:20:40.438]                 withCallingHandlers({
[13:20:40.438]                   getOption("future.globals.onMissing")
[13:20:40.438]                 }, immediateCondition = function(cond) {
[13:20:40.438]                   save_rds <- function (object, pathname, ...) 
[13:20:40.438]                   {
[13:20:40.438]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:40.438]                     if (file_test("-f", pathname_tmp)) {
[13:20:40.438]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.438]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:40.438]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.438]                         fi_tmp[["mtime"]])
[13:20:40.438]                     }
[13:20:40.438]                     tryCatch({
[13:20:40.438]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:40.438]                     }, error = function(ex) {
[13:20:40.438]                       msg <- conditionMessage(ex)
[13:20:40.438]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.438]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:40.438]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.438]                         fi_tmp[["mtime"]], msg)
[13:20:40.438]                       ex$message <- msg
[13:20:40.438]                       stop(ex)
[13:20:40.438]                     })
[13:20:40.438]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:40.438]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:40.438]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:40.438]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.438]                       fi <- file.info(pathname)
[13:20:40.438]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:40.438]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.438]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:40.438]                         fi[["size"]], fi[["mtime"]])
[13:20:40.438]                       stop(msg)
[13:20:40.438]                     }
[13:20:40.438]                     invisible(pathname)
[13:20:40.438]                   }
[13:20:40.438]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:40.438]                     rootPath = tempdir()) 
[13:20:40.438]                   {
[13:20:40.438]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:40.438]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:40.438]                       tmpdir = path, fileext = ".rds")
[13:20:40.438]                     save_rds(obj, file)
[13:20:40.438]                   }
[13:20:40.438]                   saveImmediateCondition(cond, path = "/tmp/Rtmpbh7exT/.future/immediateConditions")
[13:20:40.438]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.438]                   {
[13:20:40.438]                     inherits <- base::inherits
[13:20:40.438]                     invokeRestart <- base::invokeRestart
[13:20:40.438]                     is.null <- base::is.null
[13:20:40.438]                     muffled <- FALSE
[13:20:40.438]                     if (inherits(cond, "message")) {
[13:20:40.438]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:40.438]                       if (muffled) 
[13:20:40.438]                         invokeRestart("muffleMessage")
[13:20:40.438]                     }
[13:20:40.438]                     else if (inherits(cond, "warning")) {
[13:20:40.438]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:40.438]                       if (muffled) 
[13:20:40.438]                         invokeRestart("muffleWarning")
[13:20:40.438]                     }
[13:20:40.438]                     else if (inherits(cond, "condition")) {
[13:20:40.438]                       if (!is.null(pattern)) {
[13:20:40.438]                         computeRestarts <- base::computeRestarts
[13:20:40.438]                         grepl <- base::grepl
[13:20:40.438]                         restarts <- computeRestarts(cond)
[13:20:40.438]                         for (restart in restarts) {
[13:20:40.438]                           name <- restart$name
[13:20:40.438]                           if (is.null(name)) 
[13:20:40.438]                             next
[13:20:40.438]                           if (!grepl(pattern, name)) 
[13:20:40.438]                             next
[13:20:40.438]                           invokeRestart(restart)
[13:20:40.438]                           muffled <- TRUE
[13:20:40.438]                           break
[13:20:40.438]                         }
[13:20:40.438]                       }
[13:20:40.438]                     }
[13:20:40.438]                     invisible(muffled)
[13:20:40.438]                   }
[13:20:40.438]                   muffleCondition(cond)
[13:20:40.438]                 })
[13:20:40.438]             }))
[13:20:40.438]             future::FutureResult(value = ...future.value$value, 
[13:20:40.438]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.438]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.438]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.438]                     ...future.globalenv.names))
[13:20:40.438]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.438]         }, condition = base::local({
[13:20:40.438]             c <- base::c
[13:20:40.438]             inherits <- base::inherits
[13:20:40.438]             invokeRestart <- base::invokeRestart
[13:20:40.438]             length <- base::length
[13:20:40.438]             list <- base::list
[13:20:40.438]             seq.int <- base::seq.int
[13:20:40.438]             signalCondition <- base::signalCondition
[13:20:40.438]             sys.calls <- base::sys.calls
[13:20:40.438]             `[[` <- base::`[[`
[13:20:40.438]             `+` <- base::`+`
[13:20:40.438]             `<<-` <- base::`<<-`
[13:20:40.438]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.438]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.438]                   3L)]
[13:20:40.438]             }
[13:20:40.438]             function(cond) {
[13:20:40.438]                 is_error <- inherits(cond, "error")
[13:20:40.438]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.438]                   NULL)
[13:20:40.438]                 if (is_error) {
[13:20:40.438]                   sessionInformation <- function() {
[13:20:40.438]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.438]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.438]                       search = base::search(), system = base::Sys.info())
[13:20:40.438]                   }
[13:20:40.438]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.438]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.438]                     cond$call), session = sessionInformation(), 
[13:20:40.438]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.438]                   signalCondition(cond)
[13:20:40.438]                 }
[13:20:40.438]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.438]                 "immediateCondition"))) {
[13:20:40.438]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.438]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.438]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.438]                   if (TRUE && !signal) {
[13:20:40.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.438]                     {
[13:20:40.438]                       inherits <- base::inherits
[13:20:40.438]                       invokeRestart <- base::invokeRestart
[13:20:40.438]                       is.null <- base::is.null
[13:20:40.438]                       muffled <- FALSE
[13:20:40.438]                       if (inherits(cond, "message")) {
[13:20:40.438]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.438]                         if (muffled) 
[13:20:40.438]                           invokeRestart("muffleMessage")
[13:20:40.438]                       }
[13:20:40.438]                       else if (inherits(cond, "warning")) {
[13:20:40.438]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.438]                         if (muffled) 
[13:20:40.438]                           invokeRestart("muffleWarning")
[13:20:40.438]                       }
[13:20:40.438]                       else if (inherits(cond, "condition")) {
[13:20:40.438]                         if (!is.null(pattern)) {
[13:20:40.438]                           computeRestarts <- base::computeRestarts
[13:20:40.438]                           grepl <- base::grepl
[13:20:40.438]                           restarts <- computeRestarts(cond)
[13:20:40.438]                           for (restart in restarts) {
[13:20:40.438]                             name <- restart$name
[13:20:40.438]                             if (is.null(name)) 
[13:20:40.438]                               next
[13:20:40.438]                             if (!grepl(pattern, name)) 
[13:20:40.438]                               next
[13:20:40.438]                             invokeRestart(restart)
[13:20:40.438]                             muffled <- TRUE
[13:20:40.438]                             break
[13:20:40.438]                           }
[13:20:40.438]                         }
[13:20:40.438]                       }
[13:20:40.438]                       invisible(muffled)
[13:20:40.438]                     }
[13:20:40.438]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.438]                   }
[13:20:40.438]                 }
[13:20:40.438]                 else {
[13:20:40.438]                   if (TRUE) {
[13:20:40.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.438]                     {
[13:20:40.438]                       inherits <- base::inherits
[13:20:40.438]                       invokeRestart <- base::invokeRestart
[13:20:40.438]                       is.null <- base::is.null
[13:20:40.438]                       muffled <- FALSE
[13:20:40.438]                       if (inherits(cond, "message")) {
[13:20:40.438]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.438]                         if (muffled) 
[13:20:40.438]                           invokeRestart("muffleMessage")
[13:20:40.438]                       }
[13:20:40.438]                       else if (inherits(cond, "warning")) {
[13:20:40.438]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.438]                         if (muffled) 
[13:20:40.438]                           invokeRestart("muffleWarning")
[13:20:40.438]                       }
[13:20:40.438]                       else if (inherits(cond, "condition")) {
[13:20:40.438]                         if (!is.null(pattern)) {
[13:20:40.438]                           computeRestarts <- base::computeRestarts
[13:20:40.438]                           grepl <- base::grepl
[13:20:40.438]                           restarts <- computeRestarts(cond)
[13:20:40.438]                           for (restart in restarts) {
[13:20:40.438]                             name <- restart$name
[13:20:40.438]                             if (is.null(name)) 
[13:20:40.438]                               next
[13:20:40.438]                             if (!grepl(pattern, name)) 
[13:20:40.438]                               next
[13:20:40.438]                             invokeRestart(restart)
[13:20:40.438]                             muffled <- TRUE
[13:20:40.438]                             break
[13:20:40.438]                           }
[13:20:40.438]                         }
[13:20:40.438]                       }
[13:20:40.438]                       invisible(muffled)
[13:20:40.438]                     }
[13:20:40.438]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.438]                   }
[13:20:40.438]                 }
[13:20:40.438]             }
[13:20:40.438]         }))
[13:20:40.438]     }, error = function(ex) {
[13:20:40.438]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.438]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.438]                 ...future.rng), started = ...future.startTime, 
[13:20:40.438]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.438]             version = "1.8"), class = "FutureResult")
[13:20:40.438]     }, finally = {
[13:20:40.438]         if (!identical(...future.workdir, getwd())) 
[13:20:40.438]             setwd(...future.workdir)
[13:20:40.438]         {
[13:20:40.438]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.438]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.438]             }
[13:20:40.438]             base::options(...future.oldOptions)
[13:20:40.438]             if (.Platform$OS.type == "windows") {
[13:20:40.438]                 old_names <- names(...future.oldEnvVars)
[13:20:40.438]                 envs <- base::Sys.getenv()
[13:20:40.438]                 names <- names(envs)
[13:20:40.438]                 common <- intersect(names, old_names)
[13:20:40.438]                 added <- setdiff(names, old_names)
[13:20:40.438]                 removed <- setdiff(old_names, names)
[13:20:40.438]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.438]                   envs[common]]
[13:20:40.438]                 NAMES <- toupper(changed)
[13:20:40.438]                 args <- list()
[13:20:40.438]                 for (kk in seq_along(NAMES)) {
[13:20:40.438]                   name <- changed[[kk]]
[13:20:40.438]                   NAME <- NAMES[[kk]]
[13:20:40.438]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.438]                     next
[13:20:40.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.438]                 }
[13:20:40.438]                 NAMES <- toupper(added)
[13:20:40.438]                 for (kk in seq_along(NAMES)) {
[13:20:40.438]                   name <- added[[kk]]
[13:20:40.438]                   NAME <- NAMES[[kk]]
[13:20:40.438]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.438]                     next
[13:20:40.438]                   args[[name]] <- ""
[13:20:40.438]                 }
[13:20:40.438]                 NAMES <- toupper(removed)
[13:20:40.438]                 for (kk in seq_along(NAMES)) {
[13:20:40.438]                   name <- removed[[kk]]
[13:20:40.438]                   NAME <- NAMES[[kk]]
[13:20:40.438]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.438]                     next
[13:20:40.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.438]                 }
[13:20:40.438]                 if (length(args) > 0) 
[13:20:40.438]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.438]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.438]             }
[13:20:40.438]             else {
[13:20:40.438]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.438]             }
[13:20:40.438]             {
[13:20:40.438]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.438]                   0L) {
[13:20:40.438]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.438]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.438]                   base::options(opts)
[13:20:40.438]                 }
[13:20:40.438]                 {
[13:20:40.438]                   {
[13:20:40.438]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:40.438]                     NULL
[13:20:40.438]                   }
[13:20:40.438]                   options(future.plan = NULL)
[13:20:40.438]                   if (is.na(NA_character_)) 
[13:20:40.438]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.438]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.438]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:40.438]                     envir = parent.frame()) 
[13:20:40.438]                   {
[13:20:40.438]                     default_workers <- missing(workers)
[13:20:40.438]                     if (is.function(workers)) 
[13:20:40.438]                       workers <- workers()
[13:20:40.438]                     workers <- structure(as.integer(workers), 
[13:20:40.438]                       class = class(workers))
[13:20:40.438]                     stop_if_not(is.finite(workers), workers >= 
[13:20:40.438]                       1L)
[13:20:40.438]                     if ((workers == 1L && !inherits(workers, 
[13:20:40.438]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:40.438]                       if (default_workers) 
[13:20:40.438]                         supportsMulticore(warn = TRUE)
[13:20:40.438]                       return(sequential(..., envir = envir))
[13:20:40.438]                     }
[13:20:40.438]                     oopts <- options(mc.cores = workers)
[13:20:40.438]                     on.exit(options(oopts))
[13:20:40.438]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:40.438]                       envir = envir)
[13:20:40.438]                     if (!future$lazy) 
[13:20:40.438]                       future <- run(future)
[13:20:40.438]                     invisible(future)
[13:20:40.438]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.438]                 }
[13:20:40.438]             }
[13:20:40.438]         }
[13:20:40.438]     })
[13:20:40.438]     if (TRUE) {
[13:20:40.438]         base::sink(type = "output", split = FALSE)
[13:20:40.438]         if (TRUE) {
[13:20:40.438]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.438]         }
[13:20:40.438]         else {
[13:20:40.438]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.438]         }
[13:20:40.438]         base::close(...future.stdout)
[13:20:40.438]         ...future.stdout <- NULL
[13:20:40.438]     }
[13:20:40.438]     ...future.result$conditions <- ...future.conditions
[13:20:40.438]     ...future.result$finished <- base::Sys.time()
[13:20:40.438]     ...future.result
[13:20:40.438] }
[13:20:40.441] requestCore(): workers = 2
[13:20:40.442] MulticoreFuture started
[13:20:40.443] - Launch lazy future ... done
[13:20:40.443] run() for ‘MulticoreFuture’ ... done
[13:20:40.444] plan(): Setting new future strategy stack:
[13:20:40.444] List of future strategies:
[13:20:40.444] 1. sequential:
[13:20:40.444]    - args: function (..., envir = parent.frame())
[13:20:40.444]    - tweaked: FALSE
[13:20:40.444]    - call: NULL
[13:20:40.445] plan(): nbrOfWorkers() = 1
[13:20:40.447] plan(): Setting new future strategy stack:
[13:20:40.447] List of future strategies:
[13:20:40.447] 1. multicore:
[13:20:40.447]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.447]    - tweaked: FALSE
[13:20:40.447]    - call: plan(strategy)
[13:20:40.452] plan(): nbrOfWorkers() = 2
[13:20:40.454] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:20:40.454] Searching for globals...
[13:20:40.456] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.456] Searching for globals...
[13:20:40.458] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:20:40.458] Searching for globals ... DONE
[13:20:40.458] Resolving globals: FALSE
[13:20:40.459] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:40.459] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:40.459] - globals: [1] ‘data’
[13:20:40.459] 
[13:20:40.459] getGlobalsAndPackages() ... DONE
[13:20:40.460] run() for ‘Future’ ...
[13:20:40.460] - state: ‘created’
[13:20:40.460] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:40.464] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:40.464] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:40.464]   - Field: ‘label’
[13:20:40.465]   - Field: ‘local’
[13:20:40.465]   - Field: ‘owner’
[13:20:40.465]   - Field: ‘envir’
[13:20:40.465]   - Field: ‘workers’
[13:20:40.465]   - Field: ‘packages’
[13:20:40.465]   - Field: ‘gc’
[13:20:40.465]   - Field: ‘job’
[13:20:40.465]   - Field: ‘conditions’
[13:20:40.465]   - Field: ‘expr’
[13:20:40.466]   - Field: ‘uuid’
[13:20:40.466]   - Field: ‘seed’
[13:20:40.466]   - Field: ‘version’
[13:20:40.466]   - Field: ‘result’
[13:20:40.466]   - Field: ‘asynchronous’
[13:20:40.466]   - Field: ‘calls’
[13:20:40.466]   - Field: ‘globals’
[13:20:40.466]   - Field: ‘stdout’
[13:20:40.467]   - Field: ‘earlySignal’
[13:20:40.467]   - Field: ‘lazy’
[13:20:40.467]   - Field: ‘state’
[13:20:40.467] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:40.467] - Launch lazy future ...
[13:20:40.467] Packages needed by the future expression (n = 0): <none>
[13:20:40.467] Packages needed by future strategies (n = 0): <none>
[13:20:40.468] {
[13:20:40.468]     {
[13:20:40.468]         {
[13:20:40.468]             ...future.startTime <- base::Sys.time()
[13:20:40.468]             {
[13:20:40.468]                 {
[13:20:40.468]                   {
[13:20:40.468]                     {
[13:20:40.468]                       base::local({
[13:20:40.468]                         has_future <- base::requireNamespace("future", 
[13:20:40.468]                           quietly = TRUE)
[13:20:40.468]                         if (has_future) {
[13:20:40.468]                           ns <- base::getNamespace("future")
[13:20:40.468]                           version <- ns[[".package"]][["version"]]
[13:20:40.468]                           if (is.null(version)) 
[13:20:40.468]                             version <- utils::packageVersion("future")
[13:20:40.468]                         }
[13:20:40.468]                         else {
[13:20:40.468]                           version <- NULL
[13:20:40.468]                         }
[13:20:40.468]                         if (!has_future || version < "1.8.0") {
[13:20:40.468]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.468]                             "", base::R.version$version.string), 
[13:20:40.468]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:40.468]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.468]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.468]                               "release", "version")], collapse = " "), 
[13:20:40.468]                             hostname = base::Sys.info()[["nodename"]])
[13:20:40.468]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.468]                             info)
[13:20:40.468]                           info <- base::paste(info, collapse = "; ")
[13:20:40.468]                           if (!has_future) {
[13:20:40.468]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.468]                               info)
[13:20:40.468]                           }
[13:20:40.468]                           else {
[13:20:40.468]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.468]                               info, version)
[13:20:40.468]                           }
[13:20:40.468]                           base::stop(msg)
[13:20:40.468]                         }
[13:20:40.468]                       })
[13:20:40.468]                     }
[13:20:40.468]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:40.468]                     base::options(mc.cores = 1L)
[13:20:40.468]                   }
[13:20:40.468]                   options(future.plan = NULL)
[13:20:40.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.468]                 }
[13:20:40.468]                 ...future.workdir <- getwd()
[13:20:40.468]             }
[13:20:40.468]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.468]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.468]         }
[13:20:40.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.468]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.468]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.468]             base::names(...future.oldOptions))
[13:20:40.468]     }
[13:20:40.468]     if (FALSE) {
[13:20:40.468]     }
[13:20:40.468]     else {
[13:20:40.468]         if (TRUE) {
[13:20:40.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.468]                 open = "w")
[13:20:40.468]         }
[13:20:40.468]         else {
[13:20:40.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.468]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.468]         }
[13:20:40.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.468]             base::sink(type = "output", split = FALSE)
[13:20:40.468]             base::close(...future.stdout)
[13:20:40.468]         }, add = TRUE)
[13:20:40.468]     }
[13:20:40.468]     ...future.frame <- base::sys.nframe()
[13:20:40.468]     ...future.conditions <- base::list()
[13:20:40.468]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.468]     if (FALSE) {
[13:20:40.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.468]     }
[13:20:40.468]     ...future.result <- base::tryCatch({
[13:20:40.468]         base::withCallingHandlers({
[13:20:40.468]             ...future.value <- base::withVisible(base::local({
[13:20:40.468]                 withCallingHandlers({
[13:20:40.468]                   subset(data, x < 3)$y
[13:20:40.468]                 }, immediateCondition = function(cond) {
[13:20:40.468]                   save_rds <- function (object, pathname, ...) 
[13:20:40.468]                   {
[13:20:40.468]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:40.468]                     if (file_test("-f", pathname_tmp)) {
[13:20:40.468]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.468]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:40.468]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.468]                         fi_tmp[["mtime"]])
[13:20:40.468]                     }
[13:20:40.468]                     tryCatch({
[13:20:40.468]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:40.468]                     }, error = function(ex) {
[13:20:40.468]                       msg <- conditionMessage(ex)
[13:20:40.468]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.468]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:40.468]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.468]                         fi_tmp[["mtime"]], msg)
[13:20:40.468]                       ex$message <- msg
[13:20:40.468]                       stop(ex)
[13:20:40.468]                     })
[13:20:40.468]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:40.468]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:40.468]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:40.468]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.468]                       fi <- file.info(pathname)
[13:20:40.468]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:40.468]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.468]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:40.468]                         fi[["size"]], fi[["mtime"]])
[13:20:40.468]                       stop(msg)
[13:20:40.468]                     }
[13:20:40.468]                     invisible(pathname)
[13:20:40.468]                   }
[13:20:40.468]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:40.468]                     rootPath = tempdir()) 
[13:20:40.468]                   {
[13:20:40.468]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:40.468]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:40.468]                       tmpdir = path, fileext = ".rds")
[13:20:40.468]                     save_rds(obj, file)
[13:20:40.468]                   }
[13:20:40.468]                   saveImmediateCondition(cond, path = "/tmp/Rtmpbh7exT/.future/immediateConditions")
[13:20:40.468]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.468]                   {
[13:20:40.468]                     inherits <- base::inherits
[13:20:40.468]                     invokeRestart <- base::invokeRestart
[13:20:40.468]                     is.null <- base::is.null
[13:20:40.468]                     muffled <- FALSE
[13:20:40.468]                     if (inherits(cond, "message")) {
[13:20:40.468]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:40.468]                       if (muffled) 
[13:20:40.468]                         invokeRestart("muffleMessage")
[13:20:40.468]                     }
[13:20:40.468]                     else if (inherits(cond, "warning")) {
[13:20:40.468]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:40.468]                       if (muffled) 
[13:20:40.468]                         invokeRestart("muffleWarning")
[13:20:40.468]                     }
[13:20:40.468]                     else if (inherits(cond, "condition")) {
[13:20:40.468]                       if (!is.null(pattern)) {
[13:20:40.468]                         computeRestarts <- base::computeRestarts
[13:20:40.468]                         grepl <- base::grepl
[13:20:40.468]                         restarts <- computeRestarts(cond)
[13:20:40.468]                         for (restart in restarts) {
[13:20:40.468]                           name <- restart$name
[13:20:40.468]                           if (is.null(name)) 
[13:20:40.468]                             next
[13:20:40.468]                           if (!grepl(pattern, name)) 
[13:20:40.468]                             next
[13:20:40.468]                           invokeRestart(restart)
[13:20:40.468]                           muffled <- TRUE
[13:20:40.468]                           break
[13:20:40.468]                         }
[13:20:40.468]                       }
[13:20:40.468]                     }
[13:20:40.468]                     invisible(muffled)
[13:20:40.468]                   }
[13:20:40.468]                   muffleCondition(cond)
[13:20:40.468]                 })
[13:20:40.468]             }))
[13:20:40.468]             future::FutureResult(value = ...future.value$value, 
[13:20:40.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.468]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.468]                     ...future.globalenv.names))
[13:20:40.468]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.468]         }, condition = base::local({
[13:20:40.468]             c <- base::c
[13:20:40.468]             inherits <- base::inherits
[13:20:40.468]             invokeRestart <- base::invokeRestart
[13:20:40.468]             length <- base::length
[13:20:40.468]             list <- base::list
[13:20:40.468]             seq.int <- base::seq.int
[13:20:40.468]             signalCondition <- base::signalCondition
[13:20:40.468]             sys.calls <- base::sys.calls
[13:20:40.468]             `[[` <- base::`[[`
[13:20:40.468]             `+` <- base::`+`
[13:20:40.468]             `<<-` <- base::`<<-`
[13:20:40.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.468]                   3L)]
[13:20:40.468]             }
[13:20:40.468]             function(cond) {
[13:20:40.468]                 is_error <- inherits(cond, "error")
[13:20:40.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.468]                   NULL)
[13:20:40.468]                 if (is_error) {
[13:20:40.468]                   sessionInformation <- function() {
[13:20:40.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.468]                       search = base::search(), system = base::Sys.info())
[13:20:40.468]                   }
[13:20:40.468]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.468]                     cond$call), session = sessionInformation(), 
[13:20:40.468]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.468]                   signalCondition(cond)
[13:20:40.468]                 }
[13:20:40.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.468]                 "immediateCondition"))) {
[13:20:40.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.468]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.468]                   if (TRUE && !signal) {
[13:20:40.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.468]                     {
[13:20:40.468]                       inherits <- base::inherits
[13:20:40.468]                       invokeRestart <- base::invokeRestart
[13:20:40.468]                       is.null <- base::is.null
[13:20:40.468]                       muffled <- FALSE
[13:20:40.468]                       if (inherits(cond, "message")) {
[13:20:40.468]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.468]                         if (muffled) 
[13:20:40.468]                           invokeRestart("muffleMessage")
[13:20:40.468]                       }
[13:20:40.468]                       else if (inherits(cond, "warning")) {
[13:20:40.468]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.468]                         if (muffled) 
[13:20:40.468]                           invokeRestart("muffleWarning")
[13:20:40.468]                       }
[13:20:40.468]                       else if (inherits(cond, "condition")) {
[13:20:40.468]                         if (!is.null(pattern)) {
[13:20:40.468]                           computeRestarts <- base::computeRestarts
[13:20:40.468]                           grepl <- base::grepl
[13:20:40.468]                           restarts <- computeRestarts(cond)
[13:20:40.468]                           for (restart in restarts) {
[13:20:40.468]                             name <- restart$name
[13:20:40.468]                             if (is.null(name)) 
[13:20:40.468]                               next
[13:20:40.468]                             if (!grepl(pattern, name)) 
[13:20:40.468]                               next
[13:20:40.468]                             invokeRestart(restart)
[13:20:40.468]                             muffled <- TRUE
[13:20:40.468]                             break
[13:20:40.468]                           }
[13:20:40.468]                         }
[13:20:40.468]                       }
[13:20:40.468]                       invisible(muffled)
[13:20:40.468]                     }
[13:20:40.468]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.468]                   }
[13:20:40.468]                 }
[13:20:40.468]                 else {
[13:20:40.468]                   if (TRUE) {
[13:20:40.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.468]                     {
[13:20:40.468]                       inherits <- base::inherits
[13:20:40.468]                       invokeRestart <- base::invokeRestart
[13:20:40.468]                       is.null <- base::is.null
[13:20:40.468]                       muffled <- FALSE
[13:20:40.468]                       if (inherits(cond, "message")) {
[13:20:40.468]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.468]                         if (muffled) 
[13:20:40.468]                           invokeRestart("muffleMessage")
[13:20:40.468]                       }
[13:20:40.468]                       else if (inherits(cond, "warning")) {
[13:20:40.468]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.468]                         if (muffled) 
[13:20:40.468]                           invokeRestart("muffleWarning")
[13:20:40.468]                       }
[13:20:40.468]                       else if (inherits(cond, "condition")) {
[13:20:40.468]                         if (!is.null(pattern)) {
[13:20:40.468]                           computeRestarts <- base::computeRestarts
[13:20:40.468]                           grepl <- base::grepl
[13:20:40.468]                           restarts <- computeRestarts(cond)
[13:20:40.468]                           for (restart in restarts) {
[13:20:40.468]                             name <- restart$name
[13:20:40.468]                             if (is.null(name)) 
[13:20:40.468]                               next
[13:20:40.468]                             if (!grepl(pattern, name)) 
[13:20:40.468]                               next
[13:20:40.468]                             invokeRestart(restart)
[13:20:40.468]                             muffled <- TRUE
[13:20:40.468]                             break
[13:20:40.468]                           }
[13:20:40.468]                         }
[13:20:40.468]                       }
[13:20:40.468]                       invisible(muffled)
[13:20:40.468]                     }
[13:20:40.468]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.468]                   }
[13:20:40.468]                 }
[13:20:40.468]             }
[13:20:40.468]         }))
[13:20:40.468]     }, error = function(ex) {
[13:20:40.468]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.468]                 ...future.rng), started = ...future.startTime, 
[13:20:40.468]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.468]             version = "1.8"), class = "FutureResult")
[13:20:40.468]     }, finally = {
[13:20:40.468]         if (!identical(...future.workdir, getwd())) 
[13:20:40.468]             setwd(...future.workdir)
[13:20:40.468]         {
[13:20:40.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.468]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.468]             }
[13:20:40.468]             base::options(...future.oldOptions)
[13:20:40.468]             if (.Platform$OS.type == "windows") {
[13:20:40.468]                 old_names <- names(...future.oldEnvVars)
[13:20:40.468]                 envs <- base::Sys.getenv()
[13:20:40.468]                 names <- names(envs)
[13:20:40.468]                 common <- intersect(names, old_names)
[13:20:40.468]                 added <- setdiff(names, old_names)
[13:20:40.468]                 removed <- setdiff(old_names, names)
[13:20:40.468]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.468]                   envs[common]]
[13:20:40.468]                 NAMES <- toupper(changed)
[13:20:40.468]                 args <- list()
[13:20:40.468]                 for (kk in seq_along(NAMES)) {
[13:20:40.468]                   name <- changed[[kk]]
[13:20:40.468]                   NAME <- NAMES[[kk]]
[13:20:40.468]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.468]                     next
[13:20:40.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.468]                 }
[13:20:40.468]                 NAMES <- toupper(added)
[13:20:40.468]                 for (kk in seq_along(NAMES)) {
[13:20:40.468]                   name <- added[[kk]]
[13:20:40.468]                   NAME <- NAMES[[kk]]
[13:20:40.468]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.468]                     next
[13:20:40.468]                   args[[name]] <- ""
[13:20:40.468]                 }
[13:20:40.468]                 NAMES <- toupper(removed)
[13:20:40.468]                 for (kk in seq_along(NAMES)) {
[13:20:40.468]                   name <- removed[[kk]]
[13:20:40.468]                   NAME <- NAMES[[kk]]
[13:20:40.468]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.468]                     next
[13:20:40.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.468]                 }
[13:20:40.468]                 if (length(args) > 0) 
[13:20:40.468]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.468]             }
[13:20:40.468]             else {
[13:20:40.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.468]             }
[13:20:40.468]             {
[13:20:40.468]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.468]                   0L) {
[13:20:40.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.468]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.468]                   base::options(opts)
[13:20:40.468]                 }
[13:20:40.468]                 {
[13:20:40.468]                   {
[13:20:40.468]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:40.468]                     NULL
[13:20:40.468]                   }
[13:20:40.468]                   options(future.plan = NULL)
[13:20:40.468]                   if (is.na(NA_character_)) 
[13:20:40.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.468]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:40.468]                     envir = parent.frame()) 
[13:20:40.468]                   {
[13:20:40.468]                     default_workers <- missing(workers)
[13:20:40.468]                     if (is.function(workers)) 
[13:20:40.468]                       workers <- workers()
[13:20:40.468]                     workers <- structure(as.integer(workers), 
[13:20:40.468]                       class = class(workers))
[13:20:40.468]                     stop_if_not(is.finite(workers), workers >= 
[13:20:40.468]                       1L)
[13:20:40.468]                     if ((workers == 1L && !inherits(workers, 
[13:20:40.468]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:40.468]                       if (default_workers) 
[13:20:40.468]                         supportsMulticore(warn = TRUE)
[13:20:40.468]                       return(sequential(..., envir = envir))
[13:20:40.468]                     }
[13:20:40.468]                     oopts <- options(mc.cores = workers)
[13:20:40.468]                     on.exit(options(oopts))
[13:20:40.468]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:40.468]                       envir = envir)
[13:20:40.468]                     if (!future$lazy) 
[13:20:40.468]                       future <- run(future)
[13:20:40.468]                     invisible(future)
[13:20:40.468]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.468]                 }
[13:20:40.468]             }
[13:20:40.468]         }
[13:20:40.468]     })
[13:20:40.468]     if (TRUE) {
[13:20:40.468]         base::sink(type = "output", split = FALSE)
[13:20:40.468]         if (TRUE) {
[13:20:40.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.468]         }
[13:20:40.468]         else {
[13:20:40.468]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.468]         }
[13:20:40.468]         base::close(...future.stdout)
[13:20:40.468]         ...future.stdout <- NULL
[13:20:40.468]     }
[13:20:40.468]     ...future.result$conditions <- ...future.conditions
[13:20:40.468]     ...future.result$finished <- base::Sys.time()
[13:20:40.468]     ...future.result
[13:20:40.468] }
[13:20:40.471] assign_globals() ...
[13:20:40.471] List of 1
[13:20:40.471]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:40.471]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:40.471]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:40.471]  - attr(*, "where")=List of 1
[13:20:40.471]   ..$ data:<environment: R_EmptyEnv> 
[13:20:40.471]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:40.471]  - attr(*, "resolved")= logi FALSE
[13:20:40.471]  - attr(*, "total_size")= num 160
[13:20:40.471]  - attr(*, "already-done")= logi TRUE
[13:20:40.475] - copied ‘data’ to environment
[13:20:40.475] assign_globals() ... done
[13:20:40.475] requestCore(): workers = 2
[13:20:40.477] MulticoreFuture started
[13:20:40.477] - Launch lazy future ... done
[13:20:40.478] run() for ‘MulticoreFuture’ ... done
[13:20:40.478] plan(): Setting new future strategy stack:
[13:20:40.478] List of future strategies:
[13:20:40.478] 1. sequential:
[13:20:40.478]    - args: function (..., envir = parent.frame())
[13:20:40.478]    - tweaked: FALSE
[13:20:40.478]    - call: NULL
[13:20:40.479] plan(): nbrOfWorkers() = 1
[13:20:40.481] plan(): Setting new future strategy stack:
[13:20:40.481] List of future strategies:
[13:20:40.481] 1. multicore:
[13:20:40.481]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.481]    - tweaked: FALSE
[13:20:40.481]    - call: plan(strategy)
[13:20:40.486] plan(): nbrOfWorkers() = 2
[13:20:40.488] plan(): Setting new future strategy stack:
[13:20:40.488] List of future strategies:
[13:20:40.488] 1. sequential:
[13:20:40.488]    - args: function (..., envir = parent.frame())
[13:20:40.488]    - tweaked: FALSE
[13:20:40.488]    - call: plan(list(sequential, strategy))
[13:20:40.488] 2. multicore:
[13:20:40.488]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.488]    - tweaked: FALSE
[13:20:40.488]    - call: plan(list(sequential, strategy))
[13:20:40.489] plan(): nbrOfWorkers() = 1
[13:20:40.489] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.489] Searching for globals...
[13:20:40.495] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:20:40.496] Searching for globals ... DONE
[13:20:40.496] Resolving globals: FALSE
[13:20:40.497] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:40.497] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:40.497] - globals: [1] ‘data’
[13:20:40.497] - packages: [1] ‘future’
[13:20:40.498] getGlobalsAndPackages() ... DONE
[13:20:40.498] run() for ‘Future’ ...
[13:20:40.498] - state: ‘created’
[13:20:40.499] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:40.499] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:40.499] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:40.499]   - Field: ‘label’
[13:20:40.500]   - Field: ‘local’
[13:20:40.500]   - Field: ‘owner’
[13:20:40.500]   - Field: ‘envir’
[13:20:40.500]   - Field: ‘packages’
[13:20:40.500]   - Field: ‘gc’
[13:20:40.500]   - Field: ‘conditions’
[13:20:40.500]   - Field: ‘expr’
[13:20:40.500]   - Field: ‘uuid’
[13:20:40.501]   - Field: ‘seed’
[13:20:40.501]   - Field: ‘version’
[13:20:40.501]   - Field: ‘result’
[13:20:40.501]   - Field: ‘asynchronous’
[13:20:40.501]   - Field: ‘calls’
[13:20:40.501]   - Field: ‘globals’
[13:20:40.501]   - Field: ‘stdout’
[13:20:40.501]   - Field: ‘earlySignal’
[13:20:40.502]   - Field: ‘lazy’
[13:20:40.502]   - Field: ‘state’
[13:20:40.502] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:40.502] - Launch lazy future ...
[13:20:40.502] Packages needed by the future expression (n = 1): ‘future’
[13:20:40.502] Packages needed by future strategies (n = 1): ‘future’
[13:20:40.503] {
[13:20:40.503]     {
[13:20:40.503]         {
[13:20:40.503]             ...future.startTime <- base::Sys.time()
[13:20:40.503]             {
[13:20:40.503]                 {
[13:20:40.503]                   {
[13:20:40.503]                     {
[13:20:40.503]                       base::local({
[13:20:40.503]                         has_future <- base::requireNamespace("future", 
[13:20:40.503]                           quietly = TRUE)
[13:20:40.503]                         if (has_future) {
[13:20:40.503]                           ns <- base::getNamespace("future")
[13:20:40.503]                           version <- ns[[".package"]][["version"]]
[13:20:40.503]                           if (is.null(version)) 
[13:20:40.503]                             version <- utils::packageVersion("future")
[13:20:40.503]                         }
[13:20:40.503]                         else {
[13:20:40.503]                           version <- NULL
[13:20:40.503]                         }
[13:20:40.503]                         if (!has_future || version < "1.8.0") {
[13:20:40.503]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.503]                             "", base::R.version$version.string), 
[13:20:40.503]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:40.503]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.503]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.503]                               "release", "version")], collapse = " "), 
[13:20:40.503]                             hostname = base::Sys.info()[["nodename"]])
[13:20:40.503]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.503]                             info)
[13:20:40.503]                           info <- base::paste(info, collapse = "; ")
[13:20:40.503]                           if (!has_future) {
[13:20:40.503]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.503]                               info)
[13:20:40.503]                           }
[13:20:40.503]                           else {
[13:20:40.503]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.503]                               info, version)
[13:20:40.503]                           }
[13:20:40.503]                           base::stop(msg)
[13:20:40.503]                         }
[13:20:40.503]                       })
[13:20:40.503]                     }
[13:20:40.503]                     base::local({
[13:20:40.503]                       for (pkg in "future") {
[13:20:40.503]                         base::loadNamespace(pkg)
[13:20:40.503]                         base::library(pkg, character.only = TRUE)
[13:20:40.503]                       }
[13:20:40.503]                     })
[13:20:40.503]                   }
[13:20:40.503]                   options(future.plan = NULL)
[13:20:40.503]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.503]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:40.503]                     envir = parent.frame()) 
[13:20:40.503]                   {
[13:20:40.503]                     default_workers <- missing(workers)
[13:20:40.503]                     if (is.function(workers)) 
[13:20:40.503]                       workers <- workers()
[13:20:40.503]                     workers <- structure(as.integer(workers), 
[13:20:40.503]                       class = class(workers))
[13:20:40.503]                     stop_if_not(is.finite(workers), workers >= 
[13:20:40.503]                       1L)
[13:20:40.503]                     if ((workers == 1L && !inherits(workers, 
[13:20:40.503]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:40.503]                       if (default_workers) 
[13:20:40.503]                         supportsMulticore(warn = TRUE)
[13:20:40.503]                       return(sequential(..., envir = envir))
[13:20:40.503]                     }
[13:20:40.503]                     oopts <- options(mc.cores = workers)
[13:20:40.503]                     on.exit(options(oopts))
[13:20:40.503]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:40.503]                       envir = envir)
[13:20:40.503]                     if (!future$lazy) 
[13:20:40.503]                       future <- run(future)
[13:20:40.503]                     invisible(future)
[13:20:40.503]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.503]                 }
[13:20:40.503]                 ...future.workdir <- getwd()
[13:20:40.503]             }
[13:20:40.503]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.503]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.503]         }
[13:20:40.503]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.503]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.503]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.503]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.503]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.503]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.503]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.503]             base::names(...future.oldOptions))
[13:20:40.503]     }
[13:20:40.503]     if (FALSE) {
[13:20:40.503]     }
[13:20:40.503]     else {
[13:20:40.503]         if (TRUE) {
[13:20:40.503]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.503]                 open = "w")
[13:20:40.503]         }
[13:20:40.503]         else {
[13:20:40.503]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.503]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.503]         }
[13:20:40.503]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.503]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.503]             base::sink(type = "output", split = FALSE)
[13:20:40.503]             base::close(...future.stdout)
[13:20:40.503]         }, add = TRUE)
[13:20:40.503]     }
[13:20:40.503]     ...future.frame <- base::sys.nframe()
[13:20:40.503]     ...future.conditions <- base::list()
[13:20:40.503]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.503]     if (FALSE) {
[13:20:40.503]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.503]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.503]     }
[13:20:40.503]     ...future.result <- base::tryCatch({
[13:20:40.503]         base::withCallingHandlers({
[13:20:40.503]             ...future.value <- base::withVisible(base::local({
[13:20:40.503]                 a %<-% subset(data, x < 3)$y
[13:20:40.503]                 a
[13:20:40.503]             }))
[13:20:40.503]             future::FutureResult(value = ...future.value$value, 
[13:20:40.503]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.503]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.503]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.503]                     ...future.globalenv.names))
[13:20:40.503]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.503]         }, condition = base::local({
[13:20:40.503]             c <- base::c
[13:20:40.503]             inherits <- base::inherits
[13:20:40.503]             invokeRestart <- base::invokeRestart
[13:20:40.503]             length <- base::length
[13:20:40.503]             list <- base::list
[13:20:40.503]             seq.int <- base::seq.int
[13:20:40.503]             signalCondition <- base::signalCondition
[13:20:40.503]             sys.calls <- base::sys.calls
[13:20:40.503]             `[[` <- base::`[[`
[13:20:40.503]             `+` <- base::`+`
[13:20:40.503]             `<<-` <- base::`<<-`
[13:20:40.503]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.503]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.503]                   3L)]
[13:20:40.503]             }
[13:20:40.503]             function(cond) {
[13:20:40.503]                 is_error <- inherits(cond, "error")
[13:20:40.503]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.503]                   NULL)
[13:20:40.503]                 if (is_error) {
[13:20:40.503]                   sessionInformation <- function() {
[13:20:40.503]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.503]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.503]                       search = base::search(), system = base::Sys.info())
[13:20:40.503]                   }
[13:20:40.503]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.503]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.503]                     cond$call), session = sessionInformation(), 
[13:20:40.503]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.503]                   signalCondition(cond)
[13:20:40.503]                 }
[13:20:40.503]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.503]                 "immediateCondition"))) {
[13:20:40.503]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.503]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.503]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.503]                   if (TRUE && !signal) {
[13:20:40.503]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.503]                     {
[13:20:40.503]                       inherits <- base::inherits
[13:20:40.503]                       invokeRestart <- base::invokeRestart
[13:20:40.503]                       is.null <- base::is.null
[13:20:40.503]                       muffled <- FALSE
[13:20:40.503]                       if (inherits(cond, "message")) {
[13:20:40.503]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.503]                         if (muffled) 
[13:20:40.503]                           invokeRestart("muffleMessage")
[13:20:40.503]                       }
[13:20:40.503]                       else if (inherits(cond, "warning")) {
[13:20:40.503]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.503]                         if (muffled) 
[13:20:40.503]                           invokeRestart("muffleWarning")
[13:20:40.503]                       }
[13:20:40.503]                       else if (inherits(cond, "condition")) {
[13:20:40.503]                         if (!is.null(pattern)) {
[13:20:40.503]                           computeRestarts <- base::computeRestarts
[13:20:40.503]                           grepl <- base::grepl
[13:20:40.503]                           restarts <- computeRestarts(cond)
[13:20:40.503]                           for (restart in restarts) {
[13:20:40.503]                             name <- restart$name
[13:20:40.503]                             if (is.null(name)) 
[13:20:40.503]                               next
[13:20:40.503]                             if (!grepl(pattern, name)) 
[13:20:40.503]                               next
[13:20:40.503]                             invokeRestart(restart)
[13:20:40.503]                             muffled <- TRUE
[13:20:40.503]                             break
[13:20:40.503]                           }
[13:20:40.503]                         }
[13:20:40.503]                       }
[13:20:40.503]                       invisible(muffled)
[13:20:40.503]                     }
[13:20:40.503]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.503]                   }
[13:20:40.503]                 }
[13:20:40.503]                 else {
[13:20:40.503]                   if (TRUE) {
[13:20:40.503]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.503]                     {
[13:20:40.503]                       inherits <- base::inherits
[13:20:40.503]                       invokeRestart <- base::invokeRestart
[13:20:40.503]                       is.null <- base::is.null
[13:20:40.503]                       muffled <- FALSE
[13:20:40.503]                       if (inherits(cond, "message")) {
[13:20:40.503]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.503]                         if (muffled) 
[13:20:40.503]                           invokeRestart("muffleMessage")
[13:20:40.503]                       }
[13:20:40.503]                       else if (inherits(cond, "warning")) {
[13:20:40.503]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.503]                         if (muffled) 
[13:20:40.503]                           invokeRestart("muffleWarning")
[13:20:40.503]                       }
[13:20:40.503]                       else if (inherits(cond, "condition")) {
[13:20:40.503]                         if (!is.null(pattern)) {
[13:20:40.503]                           computeRestarts <- base::computeRestarts
[13:20:40.503]                           grepl <- base::grepl
[13:20:40.503]                           restarts <- computeRestarts(cond)
[13:20:40.503]                           for (restart in restarts) {
[13:20:40.503]                             name <- restart$name
[13:20:40.503]                             if (is.null(name)) 
[13:20:40.503]                               next
[13:20:40.503]                             if (!grepl(pattern, name)) 
[13:20:40.503]                               next
[13:20:40.503]                             invokeRestart(restart)
[13:20:40.503]                             muffled <- TRUE
[13:20:40.503]                             break
[13:20:40.503]                           }
[13:20:40.503]                         }
[13:20:40.503]                       }
[13:20:40.503]                       invisible(muffled)
[13:20:40.503]                     }
[13:20:40.503]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.503]                   }
[13:20:40.503]                 }
[13:20:40.503]             }
[13:20:40.503]         }))
[13:20:40.503]     }, error = function(ex) {
[13:20:40.503]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.503]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.503]                 ...future.rng), started = ...future.startTime, 
[13:20:40.503]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.503]             version = "1.8"), class = "FutureResult")
[13:20:40.503]     }, finally = {
[13:20:40.503]         if (!identical(...future.workdir, getwd())) 
[13:20:40.503]             setwd(...future.workdir)
[13:20:40.503]         {
[13:20:40.503]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.503]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.503]             }
[13:20:40.503]             base::options(...future.oldOptions)
[13:20:40.503]             if (.Platform$OS.type == "windows") {
[13:20:40.503]                 old_names <- names(...future.oldEnvVars)
[13:20:40.503]                 envs <- base::Sys.getenv()
[13:20:40.503]                 names <- names(envs)
[13:20:40.503]                 common <- intersect(names, old_names)
[13:20:40.503]                 added <- setdiff(names, old_names)
[13:20:40.503]                 removed <- setdiff(old_names, names)
[13:20:40.503]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.503]                   envs[common]]
[13:20:40.503]                 NAMES <- toupper(changed)
[13:20:40.503]                 args <- list()
[13:20:40.503]                 for (kk in seq_along(NAMES)) {
[13:20:40.503]                   name <- changed[[kk]]
[13:20:40.503]                   NAME <- NAMES[[kk]]
[13:20:40.503]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.503]                     next
[13:20:40.503]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.503]                 }
[13:20:40.503]                 NAMES <- toupper(added)
[13:20:40.503]                 for (kk in seq_along(NAMES)) {
[13:20:40.503]                   name <- added[[kk]]
[13:20:40.503]                   NAME <- NAMES[[kk]]
[13:20:40.503]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.503]                     next
[13:20:40.503]                   args[[name]] <- ""
[13:20:40.503]                 }
[13:20:40.503]                 NAMES <- toupper(removed)
[13:20:40.503]                 for (kk in seq_along(NAMES)) {
[13:20:40.503]                   name <- removed[[kk]]
[13:20:40.503]                   NAME <- NAMES[[kk]]
[13:20:40.503]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.503]                     next
[13:20:40.503]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.503]                 }
[13:20:40.503]                 if (length(args) > 0) 
[13:20:40.503]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.503]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.503]             }
[13:20:40.503]             else {
[13:20:40.503]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.503]             }
[13:20:40.503]             {
[13:20:40.503]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.503]                   0L) {
[13:20:40.503]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.503]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.503]                   base::options(opts)
[13:20:40.503]                 }
[13:20:40.503]                 {
[13:20:40.503]                   {
[13:20:40.503]                     NULL
[13:20:40.503]                     RNGkind("Mersenne-Twister")
[13:20:40.503]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:40.503]                       inherits = FALSE)
[13:20:40.503]                   }
[13:20:40.503]                   options(future.plan = NULL)
[13:20:40.503]                   if (is.na(NA_character_)) 
[13:20:40.503]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.503]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.503]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:40.503]                   {
[13:20:40.503]                     future <- SequentialFuture(..., envir = envir)
[13:20:40.503]                     if (!future$lazy) 
[13:20:40.503]                       future <- run(future)
[13:20:40.503]                     invisible(future)
[13:20:40.503]                   }, function (..., workers = availableCores(constraints = "multicore"), 
[13:20:40.503]                     envir = parent.frame()) 
[13:20:40.503]                   {
[13:20:40.503]                     default_workers <- missing(workers)
[13:20:40.503]                     if (is.function(workers)) 
[13:20:40.503]                       workers <- workers()
[13:20:40.503]                     workers <- structure(as.integer(workers), 
[13:20:40.503]                       class = class(workers))
[13:20:40.503]                     stop_if_not(is.finite(workers), workers >= 
[13:20:40.503]                       1L)
[13:20:40.503]                     if ((workers == 1L && !inherits(workers, 
[13:20:40.503]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:40.503]                       if (default_workers) 
[13:20:40.503]                         supportsMulticore(warn = TRUE)
[13:20:40.503]                       return(sequential(..., envir = envir))
[13:20:40.503]                     }
[13:20:40.503]                     oopts <- options(mc.cores = workers)
[13:20:40.503]                     on.exit(options(oopts))
[13:20:40.503]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:40.503]                       envir = envir)
[13:20:40.503]                     if (!future$lazy) 
[13:20:40.503]                       future <- run(future)
[13:20:40.503]                     invisible(future)
[13:20:40.503]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.503]                 }
[13:20:40.503]             }
[13:20:40.503]         }
[13:20:40.503]     })
[13:20:40.503]     if (TRUE) {
[13:20:40.503]         base::sink(type = "output", split = FALSE)
[13:20:40.503]         if (TRUE) {
[13:20:40.503]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.503]         }
[13:20:40.503]         else {
[13:20:40.503]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.503]         }
[13:20:40.503]         base::close(...future.stdout)
[13:20:40.503]         ...future.stdout <- NULL
[13:20:40.503]     }
[13:20:40.503]     ...future.result$conditions <- ...future.conditions
[13:20:40.503]     ...future.result$finished <- base::Sys.time()
[13:20:40.503]     ...future.result
[13:20:40.503] }
[13:20:40.505] assign_globals() ...
[13:20:40.505] List of 1
[13:20:40.505]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:40.505]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:40.505]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:40.505]  - attr(*, "where")=List of 1
[13:20:40.505]   ..$ data:<environment: R_EmptyEnv> 
[13:20:40.505]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:40.505]  - attr(*, "resolved")= logi FALSE
[13:20:40.505]  - attr(*, "total_size")= num 160
[13:20:40.505]  - attr(*, "already-done")= logi TRUE
[13:20:40.509] - copied ‘data’ to environment
[13:20:40.509] assign_globals() ... done
[13:20:40.510] plan(): Setting new future strategy stack:
[13:20:40.510] List of future strategies:
[13:20:40.510] 1. multicore:
[13:20:40.510]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.510]    - tweaked: FALSE
[13:20:40.510]    - call: plan(list(sequential, strategy))
[13:20:40.514] plan(): nbrOfWorkers() = 2
[13:20:40.564] plan(): Setting new future strategy stack:
[13:20:40.564] List of future strategies:
[13:20:40.564] 1. sequential:
[13:20:40.564]    - args: function (..., envir = parent.frame())
[13:20:40.564]    - tweaked: FALSE
[13:20:40.564]    - call: plan(list(sequential, strategy))
[13:20:40.564] 2. multicore:
[13:20:40.564]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:20:40.564]    - tweaked: FALSE
[13:20:40.564]    - call: plan(list(sequential, strategy))
[13:20:40.565] plan(): nbrOfWorkers() = 1
[13:20:40.565] SequentialFuture started (and completed)
[13:20:40.565] signalConditions() ...
[13:20:40.565]  - include = ‘immediateCondition’
[13:20:40.566]  - exclude = 
[13:20:40.566]  - resignal = FALSE
[13:20:40.566]  - Number of conditions: 50
[13:20:40.566] signalConditions() ... done
[13:20:40.566] - Launch lazy future ... done
[13:20:40.566] run() for ‘SequentialFuture’ ... done
[13:20:40.566] signalConditions() ...
[13:20:40.567]  - include = ‘immediateCondition’
[13:20:40.567]  - exclude = 
[13:20:40.567]  - resignal = FALSE
[13:20:40.567]  - Number of conditions: 50
[13:20:40.570] signalConditions() ... done
[13:20:40.570] Future state: ‘finished’
[13:20:40.570] signalConditions() ...
[13:20:40.570]  - include = ‘condition’
[13:20:40.570]  - exclude = ‘immediateCondition’
[13:20:40.570]  - resignal = TRUE
[13:20:40.571]  - Number of conditions: 50
[13:20:40.571]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.515] getGlobalsAndPackages() ...
[13:20:40.571]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.571]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.532] Searching for globals...
[13:20:40.571]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.533] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:20:40.572]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.533] Searching for globals ... DONE
[13:20:40.572]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.533] Resolving globals: FALSE
[13:20:40.572]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.534] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:40.572]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.534] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:40.572]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.535] - globals: [1] ‘data’
[13:20:40.573]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.535] 
[13:20:40.573]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.535] getGlobalsAndPackages() ... DONE
[13:20:40.573]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.535] run() for ‘Future’ ...
[13:20:40.573]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.535] - state: ‘created’
[13:20:40.573]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.535] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:20:40.574]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.539] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:40.574]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:20:40.574]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘label’
[13:20:40.574]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘local’
[13:20:40.574]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘owner’
[13:20:40.575]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘envir’
[13:20:40.575]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘workers’
[13:20:40.575]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘packages’
[13:20:40.575]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.540]   - Field: ‘gc’
[13:20:40.575]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘job’
[13:20:40.575]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘conditions’
[13:20:40.576]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘expr’
[13:20:40.576]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘uuid’
[13:20:40.576]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘seed’
[13:20:40.576]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘version’
[13:20:40.576]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘result’
[13:20:40.576]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.541]   - Field: ‘asynchronous’
[13:20:40.577]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542]   - Field: ‘calls’
[13:20:40.577]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542]   - Field: ‘globals’
[13:20:40.577]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542]   - Field: ‘stdout’
[13:20:40.577]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542]   - Field: ‘earlySignal’
[13:20:40.577]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542]   - Field: ‘lazy’
[13:20:40.577]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542]   - Field: ‘state’
[13:20:40.578]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:20:40.578]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.542] - Launch lazy future ...
[13:20:40.578]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.543] Packages needed by the future expression (n = 0): <none>
[13:20:40.578]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.543] Packages needed by future strategies (n = 0): <none>
[13:20:40.578]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.543] {
[13:20:40.543]     {
[13:20:40.543]         {
[13:20:40.543]             ...future.startTime <- base::Sys.time()
[13:20:40.543]             {
[13:20:40.543]                 {
[13:20:40.543]                   {
[13:20:40.543]                     {
[13:20:40.543]                       base::local({
[13:20:40.543]                         has_future <- base::requireNamespace("future", 
[13:20:40.543]                           quietly = TRUE)
[13:20:40.543]                         if (has_future) {
[13:20:40.543]                           ns <- base::getNamespace("future")
[13:20:40.543]                           version <- ns[[".package"]][["version"]]
[13:20:40.543]                           if (is.null(version)) 
[13:20:40.543]                             version <- utils::packageVersion("future")
[13:20:40.543]                         }
[13:20:40.543]                         else {
[13:20:40.543]                           version <- NULL
[13:20:40.543]                         }
[13:20:40.543]                         if (!has_future || version < "1.8.0") {
[13:20:40.543]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:40.543]                             "", base::R.version$version.string), 
[13:20:40.543]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:40.543]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:40.543]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:40.543]                               "release", "version")], collapse = " "), 
[13:20:40.543]                             hostname = base::Sys.info()[["nodename"]])
[13:20:40.543]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:40.543]                             info)
[13:20:40.543]                           info <- base::paste(info, collapse = "; ")
[13:20:40.543]                           if (!has_future) {
[13:20:40.543]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:40.543]                               info)
[13:20:40.543]                           }
[13:20:40.543]                           else {
[13:20:40.543]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:40.543]                               info, version)
[13:20:40.543]                           }
[13:20:40.543]                           base::stop(msg)
[13:20:40.543]                         }
[13:20:40.543]                       })
[13:20:40.543]                     }
[13:20:40.543]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:40.543]                     base::options(mc.cores = 1L)
[13:20:40.543]                   }
[13:20:40.543]                   options(future.plan = NULL)
[13:20:40.543]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.543]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:40.543]                 }
[13:20:40.543]                 ...future.workdir <- getwd()
[13:20:40.543]             }
[13:20:40.543]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:40.543]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:40.543]         }
[13:20:40.543]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:40.543]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:40.543]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:40.543]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:40.543]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:40.543]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:40.543]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:40.543]             base::names(...future.oldOptions))
[13:20:40.543]     }
[13:20:40.543]     if (FALSE) {
[13:20:40.543]     }
[13:20:40.543]     else {
[13:20:40.543]         if (TRUE) {
[13:20:40.543]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:40.543]                 open = "w")
[13:20:40.543]         }
[13:20:40.543]         else {
[13:20:40.543]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:40.543]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:40.543]         }
[13:20:40.543]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:40.543]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:40.543]             base::sink(type = "output", split = FALSE)
[13:20:40.543]             base::close(...future.stdout)
[13:20:40.543]         }, add = TRUE)
[13:20:40.543]     }
[13:20:40.543]     ...future.frame <- base::sys.nframe()
[13:20:40.543]     ...future.conditions <- base::list()
[13:20:40.543]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:40.543]     if (FALSE) {
[13:20:40.543]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:40.543]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:40.543]     }
[13:20:40.543]     ...future.result <- base::tryCatch({
[13:20:40.543]         base::withCallingHandlers({
[13:20:40.543]             ...future.value <- base::withVisible(base::local({
[13:20:40.543]                 withCallingHandlers({
[13:20:40.543]                   subset(data, x < 3)$y
[13:20:40.543]                 }, immediateCondition = function(cond) {
[13:20:40.543]                   save_rds <- function (object, pathname, ...) 
[13:20:40.543]                   {
[13:20:40.543]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:20:40.543]                     if (file_test("-f", pathname_tmp)) {
[13:20:40.543]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.543]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:20:40.543]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.543]                         fi_tmp[["mtime"]])
[13:20:40.543]                     }
[13:20:40.543]                     tryCatch({
[13:20:40.543]                       saveRDS(object, file = pathname_tmp, ...)
[13:20:40.543]                     }, error = function(ex) {
[13:20:40.543]                       msg <- conditionMessage(ex)
[13:20:40.543]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.543]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:20:40.543]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.543]                         fi_tmp[["mtime"]], msg)
[13:20:40.543]                       ex$message <- msg
[13:20:40.543]                       stop(ex)
[13:20:40.543]                     })
[13:20:40.543]                     stopifnot(file_test("-f", pathname_tmp))
[13:20:40.543]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:20:40.543]                     if (!res || file_test("-f", pathname_tmp)) {
[13:20:40.543]                       fi_tmp <- file.info(pathname_tmp)
[13:20:40.543]                       fi <- file.info(pathname)
[13:20:40.543]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:20:40.543]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:20:40.543]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:20:40.543]                         fi[["size"]], fi[["mtime"]])
[13:20:40.543]                       stop(msg)
[13:20:40.543]                     }
[13:20:40.543]                     invisible(pathname)
[13:20:40.543]                   }
[13:20:40.543]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:20:40.543]                     rootPath = tempdir()) 
[13:20:40.543]                   {
[13:20:40.543]                     obj <- list(time = Sys.time(), condition = cond)
[13:20:40.543]                     file <- tempfile(pattern = class(cond)[1], 
[13:20:40.543]                       tmpdir = path, fileext = ".rds")
[13:20:40.543]                     save_rds(obj, file)
[13:20:40.543]                   }
[13:20:40.543]                   saveImmediateCondition(cond, path = "/tmp/Rtmpbh7exT/.future/immediateConditions")
[13:20:40.543]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.543]                   {
[13:20:40.543]                     inherits <- base::inherits
[13:20:40.543]                     invokeRestart <- base::invokeRestart
[13:20:40.543]                     is.null <- base::is.null
[13:20:40.543]                     muffled <- FALSE
[13:20:40.543]                     if (inherits(cond, "message")) {
[13:20:40.543]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:40.543]                       if (muffled) 
[13:20:40.543]                         invokeRestart("muffleMessage")
[13:20:40.543]                     }
[13:20:40.543]                     else if (inherits(cond, "warning")) {
[13:20:40.543]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:40.543]                       if (muffled) 
[13:20:40.543]                         invokeRestart("muffleWarning")
[13:20:40.543]                     }
[13:20:40.543]                     else if (inherits(cond, "condition")) {
[13:20:40.543]                       if (!is.null(pattern)) {
[13:20:40.543]                         computeRestarts <- base::computeRestarts
[13:20:40.543]                         grepl <- base::grepl
[13:20:40.543]                         restarts <- computeRestarts(cond)
[13:20:40.543]                         for (restart in restarts) {
[13:20:40.543]                           name <- restart$name
[13:20:40.543]                           if (is.null(name)) 
[13:20:40.543]                             next
[13:20:40.543]                           if (!grepl(pattern, name)) 
[13:20:40.543]                             next
[13:20:40.543]                           invokeRestart(restart)
[13:20:40.543]                           muffled <- TRUE
[13:20:40.543]                           break
[13:20:40.543]                         }
[13:20:40.543]                       }
[13:20:40.543]                     }
[13:20:40.543]                     invisible(muffled)
[13:20:40.543]                   }
[13:20:40.543]                   muffleCondition(cond)
[13:20:40.543]                 })
[13:20:40.543]             }))
[13:20:40.543]             future::FutureResult(value = ...future.value$value, 
[13:20:40.543]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.543]                   ...future.rng), globalenv = if (FALSE) 
[13:20:40.543]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:40.543]                     ...future.globalenv.names))
[13:20:40.543]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:40.543]         }, condition = base::local({
[13:20:40.543]             c <- base::c
[13:20:40.543]             inherits <- base::inherits
[13:20:40.543]             invokeRestart <- base::invokeRestart
[13:20:40.543]             length <- base::length
[13:20:40.543]             list <- base::list
[13:20:40.543]             seq.int <- base::seq.int
[13:20:40.543]             signalCondition <- base::signalCondition
[13:20:40.543]             sys.calls <- base::sys.calls
[13:20:40.543]             `[[` <- base::`[[`
[13:20:40.543]             `+` <- base::`+`
[13:20:40.543]             `<<-` <- base::`<<-`
[13:20:40.543]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:40.543]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:40.543]                   3L)]
[13:20:40.543]             }
[13:20:40.543]             function(cond) {
[13:20:40.543]                 is_error <- inherits(cond, "error")
[13:20:40.543]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:40.543]                   NULL)
[13:20:40.543]                 if (is_error) {
[13:20:40.543]                   sessionInformation <- function() {
[13:20:40.543]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:40.543]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:40.543]                       search = base::search(), system = base::Sys.info())
[13:20:40.543]                   }
[13:20:40.543]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.543]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:40.543]                     cond$call), session = sessionInformation(), 
[13:20:40.543]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:40.543]                   signalCondition(cond)
[13:20:40.543]                 }
[13:20:40.543]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:40.543]                 "immediateCondition"))) {
[13:20:40.543]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:40.543]                   ...future.conditions[[length(...future.conditions) + 
[13:20:40.543]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:40.543]                   if (TRUE && !signal) {
[13:20:40.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.543]                     {
[13:20:40.543]                       inherits <- base::inherits
[13:20:40.543]                       invokeRestart <- base::invokeRestart
[13:20:40.543]                       is.null <- base::is.null
[13:20:40.543]                       muffled <- FALSE
[13:20:40.543]                       if (inherits(cond, "message")) {
[13:20:40.543]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.543]                         if (muffled) 
[13:20:40.543]                           invokeRestart("muffleMessage")
[13:20:40.543]                       }
[13:20:40.543]                       else if (inherits(cond, "warning")) {
[13:20:40.543]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.543]                         if (muffled) 
[13:20:40.543]                           invokeRestart("muffleWarning")
[13:20:40.543]                       }
[13:20:40.543]                       else if (inherits(cond, "condition")) {
[13:20:40.543]                         if (!is.null(pattern)) {
[13:20:40.543]                           computeRestarts <- base::computeRestarts
[13:20:40.543]                           grepl <- base::grepl
[13:20:40.543]                           restarts <- computeRestarts(cond)
[13:20:40.543]                           for (restart in restarts) {
[13:20:40.543]                             name <- restart$name
[13:20:40.543]                             if (is.null(name)) 
[13:20:40.543]                               next
[13:20:40.543]                             if (!grepl(pattern, name)) 
[13:20:40.543]                               next
[13:20:40.543]                             invokeRestart(restart)
[13:20:40.543]                             muffled <- TRUE
[13:20:40.543]                             break
[13:20:40.543]                           }
[13:20:40.543]                         }
[13:20:40.543]                       }
[13:20:40.543]                       invisible(muffled)
[13:20:40.543]                     }
[13:20:40.543]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.543]                   }
[13:20:40.543]                 }
[13:20:40.543]                 else {
[13:20:40.543]                   if (TRUE) {
[13:20:40.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:40.543]                     {
[13:20:40.543]                       inherits <- base::inherits
[13:20:40.543]                       invokeRestart <- base::invokeRestart
[13:20:40.543]                       is.null <- base::is.null
[13:20:40.543]                       muffled <- FALSE
[13:20:40.543]                       if (inherits(cond, "message")) {
[13:20:40.543]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:40.543]                         if (muffled) 
[13:20:40.543]                           invokeRestart("muffleMessage")
[13:20:40.543]                       }
[13:20:40.543]                       else if (inherits(cond, "warning")) {
[13:20:40.543]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:40.543]                         if (muffled) 
[13:20:40.543]                           invokeRestart("muffleWarning")
[13:20:40.543]                       }
[13:20:40.543]                       else if (inherits(cond, "condition")) {
[13:20:40.543]                         if (!is.null(pattern)) {
[13:20:40.543]                           computeRestarts <- base::computeRestarts
[13:20:40.543]                           grepl <- base::grepl
[13:20:40.543]                           restarts <- computeRestarts(cond)
[13:20:40.543]                           for (restart in restarts) {
[13:20:40.543]                             name <- restart$name
[13:20:40.543]                             if (is.null(name)) 
[13:20:40.543]                               next
[13:20:40.543]                             if (!grepl(pattern, name)) 
[13:20:40.543]                               next
[13:20:40.543]                             invokeRestart(restart)
[13:20:40.543]                             muffled <- TRUE
[13:20:40.543]                             break
[13:20:40.543]                           }
[13:20:40.543]                         }
[13:20:40.543]                       }
[13:20:40.543]                       invisible(muffled)
[13:20:40.543]                     }
[13:20:40.543]                     muffleCondition(cond, pattern = "^muffle")
[13:20:40.543]                   }
[13:20:40.543]                 }
[13:20:40.543]             }
[13:20:40.543]         }))
[13:20:40.543]     }, error = function(ex) {
[13:20:40.543]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:40.543]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:40.543]                 ...future.rng), started = ...future.startTime, 
[13:20:40.543]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:40.543]             version = "1.8"), class = "FutureResult")
[13:20:40.543]     }, finally = {
[13:20:40.543]         if (!identical(...future.workdir, getwd())) 
[13:20:40.543]             setwd(...future.workdir)
[13:20:40.543]         {
[13:20:40.543]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:40.543]                 ...future.oldOptions$nwarnings <- NULL
[13:20:40.543]             }
[13:20:40.543]             base::options(...future.oldOptions)
[13:20:40.543]             if (.Platform$OS.type == "windows") {
[13:20:40.543]                 old_names <- names(...future.oldEnvVars)
[13:20:40.543]                 envs <- base::Sys.getenv()
[13:20:40.543]                 names <- names(envs)
[13:20:40.543]                 common <- intersect(names, old_names)
[13:20:40.543]                 added <- setdiff(names, old_names)
[13:20:40.543]                 removed <- setdiff(old_names, names)
[13:20:40.543]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:40.543]                   envs[common]]
[13:20:40.543]                 NAMES <- toupper(changed)
[13:20:40.543]                 args <- list()
[13:20:40.543]                 for (kk in seq_along(NAMES)) {
[13:20:40.543]                   name <- changed[[kk]]
[13:20:40.543]                   NAME <- NAMES[[kk]]
[13:20:40.543]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.543]                     next
[13:20:40.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.543]                 }
[13:20:40.543]                 NAMES <- toupper(added)
[13:20:40.543]                 for (kk in seq_along(NAMES)) {
[13:20:40.543]                   name <- added[[kk]]
[13:20:40.543]                   NAME <- NAMES[[kk]]
[13:20:40.543]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.543]                     next
[13:20:40.543]                   args[[name]] <- ""
[13:20:40.543]                 }
[13:20:40.543]                 NAMES <- toupper(removed)
[13:20:40.543]                 for (kk in seq_along(NAMES)) {
[13:20:40.543]                   name <- removed[[kk]]
[13:20:40.543]                   NAME <- NAMES[[kk]]
[13:20:40.543]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:40.543]                     next
[13:20:40.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:40.543]                 }
[13:20:40.543]                 if (length(args) > 0) 
[13:20:40.543]                   base::do.call(base::Sys.setenv, args = args)
[13:20:40.543]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:40.543]             }
[13:20:40.543]             else {
[13:20:40.543]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:40.543]             }
[13:20:40.543]             {
[13:20:40.543]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:40.543]                   0L) {
[13:20:40.543]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:40.543]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:40.543]                   base::options(opts)
[13:20:40.543]                 }
[13:20:40.543]                 {
[13:20:40.543]                   {
[13:20:40.543]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:40.543]                     NULL
[13:20:40.543]                   }
[13:20:40.543]                   options(future.plan = NULL)
[13:20:40.543]                   if (is.na(NA_character_)) 
[13:20:40.543]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:40.543]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:40.543]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:20:40.543]                     envir = parent.frame()) 
[13:20:40.543]                   {
[13:20:40.543]                     default_workers <- missing(workers)
[13:20:40.543]                     if (is.function(workers)) 
[13:20:40.543]                       workers <- workers()
[13:20:40.543]                     workers <- structure(as.integer(workers), 
[13:20:40.543]                       class = class(workers))
[13:20:40.543]                     stop_if_not(is.finite(workers), workers >= 
[13:20:40.543]                       1L)
[13:20:40.543]                     if ((workers == 1L && !inherits(workers, 
[13:20:40.543]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:20:40.543]                       if (default_workers) 
[13:20:40.543]                         supportsMulticore(warn = TRUE)
[13:20:40.543]                       return(sequential(..., envir = envir))
[13:20:40.543]                     }
[13:20:40.543]                     oopts <- options(mc.cores = workers)
[13:20:40.543]                     on.exit(options(oopts))
[13:20:40.543]                     future <- MulticoreFuture(..., workers = workers, 
[13:20:40.543]                       envir = envir)
[13:20:40.543]                     if (!future$lazy) 
[13:20:40.543]                       future <- run(future)
[13:20:40.543]                     invisible(future)
[13:20:40.543]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:40.543]                 }
[13:20:40.543]             }
[13:20:40.543]         }
[13:20:40.543]     })
[13:20:40.543]     if (TRUE) {
[13:20:40.543]         base::sink(type = "output", split = FALSE)
[13:20:40.543]         if (TRUE) {
[13:20:40.543]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:40.543]         }
[13:20:40.543]         else {
[13:20:40.543]             ...future.result["stdout"] <- base::list(NULL)
[13:20:40.543]         }
[13:20:40.543]         base::close(...future.stdout)
[13:20:40.543]         ...future.stdout <- NULL
[13:20:40.543]     }
[13:20:40.543]     ...future.result$conditions <- ...future.conditions
[13:20:40.543]     ...future.result$finished <- base::Sys.time()
[13:20:40.543]     ...future.result
[13:20:40.543] }
[13:20:40.578]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.546] assign_globals() ...
[13:20:40.579]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.546] List of 1
[13:20:40.546]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:40.546]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:40.546]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:40.546]  - attr(*, "where")=List of 1
[13:20:40.546]   ..$ data:<environment: R_EmptyEnv> 
[13:20:40.546]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:40.546]  - attr(*, "resolved")= logi FALSE
[13:20:40.546]  - attr(*, "total_size")= num 160
[13:20:40.546]  - attr(*, "already-done")= logi TRUE
[13:20:40.579]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.549] - copied ‘data’ to environment
[13:20:40.579]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.549] assign_globals() ... done
[13:20:40.579]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.550] requestCore(): workers = 2
[13:20:40.579]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.552] MulticoreFuture started
[13:20:40.579]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.552] - Launch lazy future ... done
[13:20:40.580]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:40.553] run() for ‘MulticoreFuture’ ... done
[13:20:40.580] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[13:20:40.580] plan(): Setting new future strategy stack:
[13:20:40.580] List of future strategies:
[13:20:40.580] 1. multisession:
[13:20:40.580]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:40.580]    - tweaked: FALSE
[13:20:40.580]    - call: plan(strategy)
[13:20:40.581] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:20:40.581] multisession:
[13:20:40.581] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:40.581] - tweaked: FALSE
[13:20:40.581] - call: plan(strategy)
[13:20:40.588] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:40.588] Not searching for globals
[13:20:40.589] - globals: [0] <none>
[13:20:40.589] getGlobalsAndPackages() ... DONE
[13:20:40.589] [local output] makeClusterPSOCK() ...
[13:20:40.630] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:40.636] [local output] Base port: 11369
[13:20:40.636] [local output] Getting setup options for 2 cluster nodes ...
[13:20:40.636] [local output]  - Node 1 of 2 ...
[13:20:40.636] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:40.637] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpbh7exT/worker.rank=1.parallelly.parent=86092.1504c12cc3fae.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpbh7exT/worker.rank=1.parallelly.parent=86092.1504c12cc3fae.pid")'’
[13:20:40.829] - Possible to infer worker's PID: TRUE
[13:20:40.829] [local output] Rscript port: 11369

[13:20:40.830] [local output]  - Node 2 of 2 ...
[13:20:40.830] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:40.831] [local output] Rscript port: 11369

[13:20:40.831] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:40.831] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:40.832] [local output] Setting up PSOCK nodes in parallel
[13:20:40.832] List of 36
[13:20:40.832]  $ worker          : chr "localhost"
[13:20:40.832]   ..- attr(*, "localhost")= logi TRUE
[13:20:40.832]  $ master          : chr "localhost"
[13:20:40.832]  $ port            : int 11369
[13:20:40.832]  $ connectTimeout  : num 120
[13:20:40.832]  $ timeout         : num 2592000
[13:20:40.832]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:40.832]  $ homogeneous     : logi TRUE
[13:20:40.832]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:40.832]  $ rscript_envs    : NULL
[13:20:40.832]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:40.832]  $ rscript_startup : NULL
[13:20:40.832]  $ rscript_sh      : chr "sh"
[13:20:40.832]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:40.832]  $ methods         : logi TRUE
[13:20:40.832]  $ socketOptions   : chr "no-delay"
[13:20:40.832]  $ useXDR          : logi FALSE
[13:20:40.832]  $ outfile         : chr "/dev/null"
[13:20:40.832]  $ renice          : int NA
[13:20:40.832]  $ rshcmd          : NULL
[13:20:40.832]  $ user            : chr(0) 
[13:20:40.832]  $ revtunnel       : logi FALSE
[13:20:40.832]  $ rshlogfile      : NULL
[13:20:40.832]  $ rshopts         : chr(0) 
[13:20:40.832]  $ rank            : int 1
[13:20:40.832]  $ manual          : logi FALSE
[13:20:40.832]  $ dryrun          : logi FALSE
[13:20:40.832]  $ quiet           : logi FALSE
[13:20:40.832]  $ setup_strategy  : chr "parallel"
[13:20:40.832]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:40.832]  $ pidfile         : chr "/tmp/Rtmpbh7exT/worker.rank=1.parallelly.parent=86092.1504c12cc3fae.pid"
[13:20:40.832]  $ rshcmd_label    : NULL
[13:20:40.832]  $ rsh_call        : NULL
[13:20:40.832]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:40.832]  $ localMachine    : logi TRUE
[13:20:40.832]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:40.832]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:40.832]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:40.832]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:40.832]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:40.832]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:40.832]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:40.832]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:40.832]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:40.832]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:40.832]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:40.832]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:40.832]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:40.832]  $ arguments       :List of 28
[13:20:40.832]   ..$ worker          : chr "localhost"
[13:20:40.832]   ..$ master          : NULL
[13:20:40.832]   ..$ port            : int 11369
[13:20:40.832]   ..$ connectTimeout  : num 120
[13:20:40.832]   ..$ timeout         : num 2592000
[13:20:40.832]   ..$ rscript         : NULL
[13:20:40.832]   ..$ homogeneous     : NULL
[13:20:40.832]   ..$ rscript_args    : NULL
[13:20:40.832]   ..$ rscript_envs    : NULL
[13:20:40.832]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:40.832]   ..$ rscript_startup : NULL
[13:20:40.832]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:40.832]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:40.832]   ..$ methods         : logi TRUE
[13:20:40.832]   ..$ socketOptions   : chr "no-delay"
[13:20:40.832]   ..$ useXDR          : logi FALSE
[13:20:40.832]   ..$ outfile         : chr "/dev/null"
[13:20:40.832]   ..$ renice          : int NA
[13:20:40.832]   ..$ rshcmd          : NULL
[13:20:40.832]   ..$ user            : NULL
[13:20:40.832]   ..$ revtunnel       : logi NA
[13:20:40.832]   ..$ rshlogfile      : NULL
[13:20:40.832]   ..$ rshopts         : NULL
[13:20:40.832]   ..$ rank            : int 1
[13:20:40.832]   ..$ manual          : logi FALSE
[13:20:40.832]   ..$ dryrun          : logi FALSE
[13:20:40.832]   ..$ quiet           : logi FALSE
[13:20:40.832]   ..$ setup_strategy  : chr "parallel"
[13:20:40.832]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:40.849] [local output] System call to launch all workers:
[13:20:40.849] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpbh7exT/worker.rank=1.parallelly.parent=86092.1504c12cc3fae.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11369 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:40.849] [local output] Starting PSOCK main server
[13:20:40.850] [local output] Workers launched
[13:20:40.851] [local output] Waiting for workers to connect back
[13:20:40.851]  - [local output] 0 workers out of 2 ready
[13:20:41.102]  - [local output] 0 workers out of 2 ready
[13:20:41.103]  - [local output] 1 workers out of 2 ready
[13:20:41.104]  - [local output] 1 workers out of 2 ready
[13:20:41.104]  - [local output] 2 workers out of 2 ready
[13:20:41.104] [local output] Launching of workers completed
[13:20:41.105] [local output] Collecting session information from workers
[13:20:41.105] [local output]  - Worker #1 of 2
[13:20:41.106] [local output]  - Worker #2 of 2
[13:20:41.106] [local output] makeClusterPSOCK() ... done
[13:20:41.118] Packages needed by the future expression (n = 0): <none>
[13:20:41.118] Packages needed by future strategies (n = 0): <none>
[13:20:41.119] {
[13:20:41.119]     {
[13:20:41.119]         {
[13:20:41.119]             ...future.startTime <- base::Sys.time()
[13:20:41.119]             {
[13:20:41.119]                 {
[13:20:41.119]                   {
[13:20:41.119]                     {
[13:20:41.119]                       base::local({
[13:20:41.119]                         has_future <- base::requireNamespace("future", 
[13:20:41.119]                           quietly = TRUE)
[13:20:41.119]                         if (has_future) {
[13:20:41.119]                           ns <- base::getNamespace("future")
[13:20:41.119]                           version <- ns[[".package"]][["version"]]
[13:20:41.119]                           if (is.null(version)) 
[13:20:41.119]                             version <- utils::packageVersion("future")
[13:20:41.119]                         }
[13:20:41.119]                         else {
[13:20:41.119]                           version <- NULL
[13:20:41.119]                         }
[13:20:41.119]                         if (!has_future || version < "1.8.0") {
[13:20:41.119]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:41.119]                             "", base::R.version$version.string), 
[13:20:41.119]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:41.119]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:41.119]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:41.119]                               "release", "version")], collapse = " "), 
[13:20:41.119]                             hostname = base::Sys.info()[["nodename"]])
[13:20:41.119]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:41.119]                             info)
[13:20:41.119]                           info <- base::paste(info, collapse = "; ")
[13:20:41.119]                           if (!has_future) {
[13:20:41.119]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:41.119]                               info)
[13:20:41.119]                           }
[13:20:41.119]                           else {
[13:20:41.119]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:41.119]                               info, version)
[13:20:41.119]                           }
[13:20:41.119]                           base::stop(msg)
[13:20:41.119]                         }
[13:20:41.119]                       })
[13:20:41.119]                     }
[13:20:41.119]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:41.119]                     base::options(mc.cores = 1L)
[13:20:41.119]                   }
[13:20:41.119]                   options(future.plan = NULL)
[13:20:41.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:41.119]                 }
[13:20:41.119]                 ...future.workdir <- getwd()
[13:20:41.119]             }
[13:20:41.119]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:41.119]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:41.119]         }
[13:20:41.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:41.119]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:41.119]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:41.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:41.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:41.119]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:41.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:41.119]             base::names(...future.oldOptions))
[13:20:41.119]     }
[13:20:41.119]     if (FALSE) {
[13:20:41.119]     }
[13:20:41.119]     else {
[13:20:41.119]         if (TRUE) {
[13:20:41.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:41.119]                 open = "w")
[13:20:41.119]         }
[13:20:41.119]         else {
[13:20:41.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:41.119]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:41.119]         }
[13:20:41.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:41.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:41.119]             base::sink(type = "output", split = FALSE)
[13:20:41.119]             base::close(...future.stdout)
[13:20:41.119]         }, add = TRUE)
[13:20:41.119]     }
[13:20:41.119]     ...future.frame <- base::sys.nframe()
[13:20:41.119]     ...future.conditions <- base::list()
[13:20:41.119]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:41.119]     if (FALSE) {
[13:20:41.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:41.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:41.119]     }
[13:20:41.119]     ...future.result <- base::tryCatch({
[13:20:41.119]         base::withCallingHandlers({
[13:20:41.119]             ...future.value <- base::withVisible(base::local({
[13:20:41.119]                 ...future.makeSendCondition <- local({
[13:20:41.119]                   sendCondition <- NULL
[13:20:41.119]                   function(frame = 1L) {
[13:20:41.119]                     if (is.function(sendCondition)) 
[13:20:41.119]                       return(sendCondition)
[13:20:41.119]                     ns <- getNamespace("parallel")
[13:20:41.119]                     if (exists("sendData", mode = "function", 
[13:20:41.119]                       envir = ns)) {
[13:20:41.119]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:41.119]                         envir = ns)
[13:20:41.119]                       envir <- sys.frame(frame)
[13:20:41.119]                       master <- NULL
[13:20:41.119]                       while (!identical(envir, .GlobalEnv) && 
[13:20:41.119]                         !identical(envir, emptyenv())) {
[13:20:41.119]                         if (exists("master", mode = "list", envir = envir, 
[13:20:41.119]                           inherits = FALSE)) {
[13:20:41.119]                           master <- get("master", mode = "list", 
[13:20:41.119]                             envir = envir, inherits = FALSE)
[13:20:41.119]                           if (inherits(master, c("SOCKnode", 
[13:20:41.119]                             "SOCK0node"))) {
[13:20:41.119]                             sendCondition <<- function(cond) {
[13:20:41.119]                               data <- list(type = "VALUE", value = cond, 
[13:20:41.119]                                 success = TRUE)
[13:20:41.119]                               parallel_sendData(master, data)
[13:20:41.119]                             }
[13:20:41.119]                             return(sendCondition)
[13:20:41.119]                           }
[13:20:41.119]                         }
[13:20:41.119]                         frame <- frame + 1L
[13:20:41.119]                         envir <- sys.frame(frame)
[13:20:41.119]                       }
[13:20:41.119]                     }
[13:20:41.119]                     sendCondition <<- function(cond) NULL
[13:20:41.119]                   }
[13:20:41.119]                 })
[13:20:41.119]                 withCallingHandlers({
[13:20:41.119]                   NA
[13:20:41.119]                 }, immediateCondition = function(cond) {
[13:20:41.119]                   sendCondition <- ...future.makeSendCondition()
[13:20:41.119]                   sendCondition(cond)
[13:20:41.119]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.119]                   {
[13:20:41.119]                     inherits <- base::inherits
[13:20:41.119]                     invokeRestart <- base::invokeRestart
[13:20:41.119]                     is.null <- base::is.null
[13:20:41.119]                     muffled <- FALSE
[13:20:41.119]                     if (inherits(cond, "message")) {
[13:20:41.119]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:41.119]                       if (muffled) 
[13:20:41.119]                         invokeRestart("muffleMessage")
[13:20:41.119]                     }
[13:20:41.119]                     else if (inherits(cond, "warning")) {
[13:20:41.119]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:41.119]                       if (muffled) 
[13:20:41.119]                         invokeRestart("muffleWarning")
[13:20:41.119]                     }
[13:20:41.119]                     else if (inherits(cond, "condition")) {
[13:20:41.119]                       if (!is.null(pattern)) {
[13:20:41.119]                         computeRestarts <- base::computeRestarts
[13:20:41.119]                         grepl <- base::grepl
[13:20:41.119]                         restarts <- computeRestarts(cond)
[13:20:41.119]                         for (restart in restarts) {
[13:20:41.119]                           name <- restart$name
[13:20:41.119]                           if (is.null(name)) 
[13:20:41.119]                             next
[13:20:41.119]                           if (!grepl(pattern, name)) 
[13:20:41.119]                             next
[13:20:41.119]                           invokeRestart(restart)
[13:20:41.119]                           muffled <- TRUE
[13:20:41.119]                           break
[13:20:41.119]                         }
[13:20:41.119]                       }
[13:20:41.119]                     }
[13:20:41.119]                     invisible(muffled)
[13:20:41.119]                   }
[13:20:41.119]                   muffleCondition(cond)
[13:20:41.119]                 })
[13:20:41.119]             }))
[13:20:41.119]             future::FutureResult(value = ...future.value$value, 
[13:20:41.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.119]                   ...future.rng), globalenv = if (FALSE) 
[13:20:41.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:41.119]                     ...future.globalenv.names))
[13:20:41.119]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:41.119]         }, condition = base::local({
[13:20:41.119]             c <- base::c
[13:20:41.119]             inherits <- base::inherits
[13:20:41.119]             invokeRestart <- base::invokeRestart
[13:20:41.119]             length <- base::length
[13:20:41.119]             list <- base::list
[13:20:41.119]             seq.int <- base::seq.int
[13:20:41.119]             signalCondition <- base::signalCondition
[13:20:41.119]             sys.calls <- base::sys.calls
[13:20:41.119]             `[[` <- base::`[[`
[13:20:41.119]             `+` <- base::`+`
[13:20:41.119]             `<<-` <- base::`<<-`
[13:20:41.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:41.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:41.119]                   3L)]
[13:20:41.119]             }
[13:20:41.119]             function(cond) {
[13:20:41.119]                 is_error <- inherits(cond, "error")
[13:20:41.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:41.119]                   NULL)
[13:20:41.119]                 if (is_error) {
[13:20:41.119]                   sessionInformation <- function() {
[13:20:41.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:41.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:41.119]                       search = base::search(), system = base::Sys.info())
[13:20:41.119]                   }
[13:20:41.119]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:41.119]                     cond$call), session = sessionInformation(), 
[13:20:41.119]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:41.119]                   signalCondition(cond)
[13:20:41.119]                 }
[13:20:41.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:41.119]                 "immediateCondition"))) {
[13:20:41.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:41.119]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:41.119]                   if (TRUE && !signal) {
[13:20:41.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.119]                     {
[13:20:41.119]                       inherits <- base::inherits
[13:20:41.119]                       invokeRestart <- base::invokeRestart
[13:20:41.119]                       is.null <- base::is.null
[13:20:41.119]                       muffled <- FALSE
[13:20:41.119]                       if (inherits(cond, "message")) {
[13:20:41.119]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.119]                         if (muffled) 
[13:20:41.119]                           invokeRestart("muffleMessage")
[13:20:41.119]                       }
[13:20:41.119]                       else if (inherits(cond, "warning")) {
[13:20:41.119]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.119]                         if (muffled) 
[13:20:41.119]                           invokeRestart("muffleWarning")
[13:20:41.119]                       }
[13:20:41.119]                       else if (inherits(cond, "condition")) {
[13:20:41.119]                         if (!is.null(pattern)) {
[13:20:41.119]                           computeRestarts <- base::computeRestarts
[13:20:41.119]                           grepl <- base::grepl
[13:20:41.119]                           restarts <- computeRestarts(cond)
[13:20:41.119]                           for (restart in restarts) {
[13:20:41.119]                             name <- restart$name
[13:20:41.119]                             if (is.null(name)) 
[13:20:41.119]                               next
[13:20:41.119]                             if (!grepl(pattern, name)) 
[13:20:41.119]                               next
[13:20:41.119]                             invokeRestart(restart)
[13:20:41.119]                             muffled <- TRUE
[13:20:41.119]                             break
[13:20:41.119]                           }
[13:20:41.119]                         }
[13:20:41.119]                       }
[13:20:41.119]                       invisible(muffled)
[13:20:41.119]                     }
[13:20:41.119]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.119]                   }
[13:20:41.119]                 }
[13:20:41.119]                 else {
[13:20:41.119]                   if (TRUE) {
[13:20:41.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.119]                     {
[13:20:41.119]                       inherits <- base::inherits
[13:20:41.119]                       invokeRestart <- base::invokeRestart
[13:20:41.119]                       is.null <- base::is.null
[13:20:41.119]                       muffled <- FALSE
[13:20:41.119]                       if (inherits(cond, "message")) {
[13:20:41.119]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.119]                         if (muffled) 
[13:20:41.119]                           invokeRestart("muffleMessage")
[13:20:41.119]                       }
[13:20:41.119]                       else if (inherits(cond, "warning")) {
[13:20:41.119]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.119]                         if (muffled) 
[13:20:41.119]                           invokeRestart("muffleWarning")
[13:20:41.119]                       }
[13:20:41.119]                       else if (inherits(cond, "condition")) {
[13:20:41.119]                         if (!is.null(pattern)) {
[13:20:41.119]                           computeRestarts <- base::computeRestarts
[13:20:41.119]                           grepl <- base::grepl
[13:20:41.119]                           restarts <- computeRestarts(cond)
[13:20:41.119]                           for (restart in restarts) {
[13:20:41.119]                             name <- restart$name
[13:20:41.119]                             if (is.null(name)) 
[13:20:41.119]                               next
[13:20:41.119]                             if (!grepl(pattern, name)) 
[13:20:41.119]                               next
[13:20:41.119]                             invokeRestart(restart)
[13:20:41.119]                             muffled <- TRUE
[13:20:41.119]                             break
[13:20:41.119]                           }
[13:20:41.119]                         }
[13:20:41.119]                       }
[13:20:41.119]                       invisible(muffled)
[13:20:41.119]                     }
[13:20:41.119]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.119]                   }
[13:20:41.119]                 }
[13:20:41.119]             }
[13:20:41.119]         }))
[13:20:41.119]     }, error = function(ex) {
[13:20:41.119]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:41.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.119]                 ...future.rng), started = ...future.startTime, 
[13:20:41.119]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:41.119]             version = "1.8"), class = "FutureResult")
[13:20:41.119]     }, finally = {
[13:20:41.119]         if (!identical(...future.workdir, getwd())) 
[13:20:41.119]             setwd(...future.workdir)
[13:20:41.119]         {
[13:20:41.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:41.119]                 ...future.oldOptions$nwarnings <- NULL
[13:20:41.119]             }
[13:20:41.119]             base::options(...future.oldOptions)
[13:20:41.119]             if (.Platform$OS.type == "windows") {
[13:20:41.119]                 old_names <- names(...future.oldEnvVars)
[13:20:41.119]                 envs <- base::Sys.getenv()
[13:20:41.119]                 names <- names(envs)
[13:20:41.119]                 common <- intersect(names, old_names)
[13:20:41.119]                 added <- setdiff(names, old_names)
[13:20:41.119]                 removed <- setdiff(old_names, names)
[13:20:41.119]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:41.119]                   envs[common]]
[13:20:41.119]                 NAMES <- toupper(changed)
[13:20:41.119]                 args <- list()
[13:20:41.119]                 for (kk in seq_along(NAMES)) {
[13:20:41.119]                   name <- changed[[kk]]
[13:20:41.119]                   NAME <- NAMES[[kk]]
[13:20:41.119]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.119]                     next
[13:20:41.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.119]                 }
[13:20:41.119]                 NAMES <- toupper(added)
[13:20:41.119]                 for (kk in seq_along(NAMES)) {
[13:20:41.119]                   name <- added[[kk]]
[13:20:41.119]                   NAME <- NAMES[[kk]]
[13:20:41.119]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.119]                     next
[13:20:41.119]                   args[[name]] <- ""
[13:20:41.119]                 }
[13:20:41.119]                 NAMES <- toupper(removed)
[13:20:41.119]                 for (kk in seq_along(NAMES)) {
[13:20:41.119]                   name <- removed[[kk]]
[13:20:41.119]                   NAME <- NAMES[[kk]]
[13:20:41.119]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.119]                     next
[13:20:41.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.119]                 }
[13:20:41.119]                 if (length(args) > 0) 
[13:20:41.119]                   base::do.call(base::Sys.setenv, args = args)
[13:20:41.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:41.119]             }
[13:20:41.119]             else {
[13:20:41.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:41.119]             }
[13:20:41.119]             {
[13:20:41.119]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:41.119]                   0L) {
[13:20:41.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:41.119]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:41.119]                   base::options(opts)
[13:20:41.119]                 }
[13:20:41.119]                 {
[13:20:41.119]                   {
[13:20:41.119]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:41.119]                     NULL
[13:20:41.119]                   }
[13:20:41.119]                   options(future.plan = NULL)
[13:20:41.119]                   if (is.na(NA_character_)) 
[13:20:41.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:41.119]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:41.119]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.119]                     envir = parent.frame()) 
[13:20:41.119]                   {
[13:20:41.119]                     if (is.function(workers)) 
[13:20:41.119]                       workers <- workers()
[13:20:41.119]                     workers <- structure(as.integer(workers), 
[13:20:41.119]                       class = class(workers))
[13:20:41.119]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.119]                       workers >= 1)
[13:20:41.119]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.119]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.119]                     }
[13:20:41.119]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.119]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.119]                       envir = envir)
[13:20:41.119]                     if (!future$lazy) 
[13:20:41.119]                       future <- run(future)
[13:20:41.119]                     invisible(future)
[13:20:41.119]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.119]                 }
[13:20:41.119]             }
[13:20:41.119]         }
[13:20:41.119]     })
[13:20:41.119]     if (TRUE) {
[13:20:41.119]         base::sink(type = "output", split = FALSE)
[13:20:41.119]         if (TRUE) {
[13:20:41.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:41.119]         }
[13:20:41.119]         else {
[13:20:41.119]             ...future.result["stdout"] <- base::list(NULL)
[13:20:41.119]         }
[13:20:41.119]         base::close(...future.stdout)
[13:20:41.119]         ...future.stdout <- NULL
[13:20:41.119]     }
[13:20:41.119]     ...future.result$conditions <- ...future.conditions
[13:20:41.119]     ...future.result$finished <- base::Sys.time()
[13:20:41.119]     ...future.result
[13:20:41.119] }
[13:20:41.193] MultisessionFuture started
[13:20:41.193] result() for ClusterFuture ...
[13:20:41.194] receiveMessageFromWorker() for ClusterFuture ...
[13:20:41.194] - Validating connection of MultisessionFuture
[13:20:41.226] - received message: FutureResult
[13:20:41.227] - Received FutureResult
[13:20:41.227] - Erased future from FutureRegistry
[13:20:41.227] result() for ClusterFuture ...
[13:20:41.227] - result already collected: FutureResult
[13:20:41.227] result() for ClusterFuture ... done
[13:20:41.227] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:41.228] result() for ClusterFuture ... done
[13:20:41.228] result() for ClusterFuture ...
[13:20:41.228] - result already collected: FutureResult
[13:20:41.228] result() for ClusterFuture ... done
[13:20:41.228] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:20:41.232] plan(): nbrOfWorkers() = 2
[13:20:41.232] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:20:41.232] Searching for globals...
[13:20:41.233] - globals found: [1] ‘getOption’
[13:20:41.233] Searching for globals ... DONE
[13:20:41.233] Resolving globals: FALSE
[13:20:41.234] 
[13:20:41.234] 
[13:20:41.234] getGlobalsAndPackages() ... DONE
[13:20:41.234] run() for ‘Future’ ...
[13:20:41.234] - state: ‘created’
[13:20:41.235] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:41.250] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:41.250] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:41.250]   - Field: ‘node’
[13:20:41.250]   - Field: ‘label’
[13:20:41.250]   - Field: ‘local’
[13:20:41.250]   - Field: ‘owner’
[13:20:41.251]   - Field: ‘envir’
[13:20:41.251]   - Field: ‘workers’
[13:20:41.251]   - Field: ‘packages’
[13:20:41.251]   - Field: ‘gc’
[13:20:41.251]   - Field: ‘conditions’
[13:20:41.251]   - Field: ‘persistent’
[13:20:41.251]   - Field: ‘expr’
[13:20:41.251]   - Field: ‘uuid’
[13:20:41.251]   - Field: ‘seed’
[13:20:41.252]   - Field: ‘version’
[13:20:41.252]   - Field: ‘result’
[13:20:41.252]   - Field: ‘asynchronous’
[13:20:41.252]   - Field: ‘calls’
[13:20:41.252]   - Field: ‘globals’
[13:20:41.252]   - Field: ‘stdout’
[13:20:41.252]   - Field: ‘earlySignal’
[13:20:41.252]   - Field: ‘lazy’
[13:20:41.252]   - Field: ‘state’
[13:20:41.253] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:41.253] - Launch lazy future ...
[13:20:41.253] Packages needed by the future expression (n = 0): <none>
[13:20:41.253] Packages needed by future strategies (n = 0): <none>
[13:20:41.254] {
[13:20:41.254]     {
[13:20:41.254]         {
[13:20:41.254]             ...future.startTime <- base::Sys.time()
[13:20:41.254]             {
[13:20:41.254]                 {
[13:20:41.254]                   {
[13:20:41.254]                     {
[13:20:41.254]                       base::local({
[13:20:41.254]                         has_future <- base::requireNamespace("future", 
[13:20:41.254]                           quietly = TRUE)
[13:20:41.254]                         if (has_future) {
[13:20:41.254]                           ns <- base::getNamespace("future")
[13:20:41.254]                           version <- ns[[".package"]][["version"]]
[13:20:41.254]                           if (is.null(version)) 
[13:20:41.254]                             version <- utils::packageVersion("future")
[13:20:41.254]                         }
[13:20:41.254]                         else {
[13:20:41.254]                           version <- NULL
[13:20:41.254]                         }
[13:20:41.254]                         if (!has_future || version < "1.8.0") {
[13:20:41.254]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:41.254]                             "", base::R.version$version.string), 
[13:20:41.254]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:41.254]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:41.254]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:41.254]                               "release", "version")], collapse = " "), 
[13:20:41.254]                             hostname = base::Sys.info()[["nodename"]])
[13:20:41.254]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:41.254]                             info)
[13:20:41.254]                           info <- base::paste(info, collapse = "; ")
[13:20:41.254]                           if (!has_future) {
[13:20:41.254]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:41.254]                               info)
[13:20:41.254]                           }
[13:20:41.254]                           else {
[13:20:41.254]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:41.254]                               info, version)
[13:20:41.254]                           }
[13:20:41.254]                           base::stop(msg)
[13:20:41.254]                         }
[13:20:41.254]                       })
[13:20:41.254]                     }
[13:20:41.254]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:41.254]                     base::options(mc.cores = 1L)
[13:20:41.254]                   }
[13:20:41.254]                   options(future.plan = NULL)
[13:20:41.254]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.254]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:41.254]                 }
[13:20:41.254]                 ...future.workdir <- getwd()
[13:20:41.254]             }
[13:20:41.254]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:41.254]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:41.254]         }
[13:20:41.254]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:20:41.254]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:41.254]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:20:41.254]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:41.254]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:41.254]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:41.254]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:41.254]             base::names(...future.oldOptions))
[13:20:41.254]     }
[13:20:41.254]     if (FALSE) {
[13:20:41.254]     }
[13:20:41.254]     else {
[13:20:41.254]         if (TRUE) {
[13:20:41.254]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:41.254]                 open = "w")
[13:20:41.254]         }
[13:20:41.254]         else {
[13:20:41.254]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:41.254]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:41.254]         }
[13:20:41.254]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:41.254]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:41.254]             base::sink(type = "output", split = FALSE)
[13:20:41.254]             base::close(...future.stdout)
[13:20:41.254]         }, add = TRUE)
[13:20:41.254]     }
[13:20:41.254]     ...future.frame <- base::sys.nframe()
[13:20:41.254]     ...future.conditions <- base::list()
[13:20:41.254]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:41.254]     if (FALSE) {
[13:20:41.254]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:41.254]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:41.254]     }
[13:20:41.254]     ...future.result <- base::tryCatch({
[13:20:41.254]         base::withCallingHandlers({
[13:20:41.254]             ...future.value <- base::withVisible(base::local({
[13:20:41.254]                 ...future.makeSendCondition <- local({
[13:20:41.254]                   sendCondition <- NULL
[13:20:41.254]                   function(frame = 1L) {
[13:20:41.254]                     if (is.function(sendCondition)) 
[13:20:41.254]                       return(sendCondition)
[13:20:41.254]                     ns <- getNamespace("parallel")
[13:20:41.254]                     if (exists("sendData", mode = "function", 
[13:20:41.254]                       envir = ns)) {
[13:20:41.254]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:41.254]                         envir = ns)
[13:20:41.254]                       envir <- sys.frame(frame)
[13:20:41.254]                       master <- NULL
[13:20:41.254]                       while (!identical(envir, .GlobalEnv) && 
[13:20:41.254]                         !identical(envir, emptyenv())) {
[13:20:41.254]                         if (exists("master", mode = "list", envir = envir, 
[13:20:41.254]                           inherits = FALSE)) {
[13:20:41.254]                           master <- get("master", mode = "list", 
[13:20:41.254]                             envir = envir, inherits = FALSE)
[13:20:41.254]                           if (inherits(master, c("SOCKnode", 
[13:20:41.254]                             "SOCK0node"))) {
[13:20:41.254]                             sendCondition <<- function(cond) {
[13:20:41.254]                               data <- list(type = "VALUE", value = cond, 
[13:20:41.254]                                 success = TRUE)
[13:20:41.254]                               parallel_sendData(master, data)
[13:20:41.254]                             }
[13:20:41.254]                             return(sendCondition)
[13:20:41.254]                           }
[13:20:41.254]                         }
[13:20:41.254]                         frame <- frame + 1L
[13:20:41.254]                         envir <- sys.frame(frame)
[13:20:41.254]                       }
[13:20:41.254]                     }
[13:20:41.254]                     sendCondition <<- function(cond) NULL
[13:20:41.254]                   }
[13:20:41.254]                 })
[13:20:41.254]                 withCallingHandlers({
[13:20:41.254]                   getOption("future.globals.onMissing")
[13:20:41.254]                 }, immediateCondition = function(cond) {
[13:20:41.254]                   sendCondition <- ...future.makeSendCondition()
[13:20:41.254]                   sendCondition(cond)
[13:20:41.254]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.254]                   {
[13:20:41.254]                     inherits <- base::inherits
[13:20:41.254]                     invokeRestart <- base::invokeRestart
[13:20:41.254]                     is.null <- base::is.null
[13:20:41.254]                     muffled <- FALSE
[13:20:41.254]                     if (inherits(cond, "message")) {
[13:20:41.254]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:41.254]                       if (muffled) 
[13:20:41.254]                         invokeRestart("muffleMessage")
[13:20:41.254]                     }
[13:20:41.254]                     else if (inherits(cond, "warning")) {
[13:20:41.254]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:41.254]                       if (muffled) 
[13:20:41.254]                         invokeRestart("muffleWarning")
[13:20:41.254]                     }
[13:20:41.254]                     else if (inherits(cond, "condition")) {
[13:20:41.254]                       if (!is.null(pattern)) {
[13:20:41.254]                         computeRestarts <- base::computeRestarts
[13:20:41.254]                         grepl <- base::grepl
[13:20:41.254]                         restarts <- computeRestarts(cond)
[13:20:41.254]                         for (restart in restarts) {
[13:20:41.254]                           name <- restart$name
[13:20:41.254]                           if (is.null(name)) 
[13:20:41.254]                             next
[13:20:41.254]                           if (!grepl(pattern, name)) 
[13:20:41.254]                             next
[13:20:41.254]                           invokeRestart(restart)
[13:20:41.254]                           muffled <- TRUE
[13:20:41.254]                           break
[13:20:41.254]                         }
[13:20:41.254]                       }
[13:20:41.254]                     }
[13:20:41.254]                     invisible(muffled)
[13:20:41.254]                   }
[13:20:41.254]                   muffleCondition(cond)
[13:20:41.254]                 })
[13:20:41.254]             }))
[13:20:41.254]             future::FutureResult(value = ...future.value$value, 
[13:20:41.254]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.254]                   ...future.rng), globalenv = if (FALSE) 
[13:20:41.254]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:41.254]                     ...future.globalenv.names))
[13:20:41.254]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:41.254]         }, condition = base::local({
[13:20:41.254]             c <- base::c
[13:20:41.254]             inherits <- base::inherits
[13:20:41.254]             invokeRestart <- base::invokeRestart
[13:20:41.254]             length <- base::length
[13:20:41.254]             list <- base::list
[13:20:41.254]             seq.int <- base::seq.int
[13:20:41.254]             signalCondition <- base::signalCondition
[13:20:41.254]             sys.calls <- base::sys.calls
[13:20:41.254]             `[[` <- base::`[[`
[13:20:41.254]             `+` <- base::`+`
[13:20:41.254]             `<<-` <- base::`<<-`
[13:20:41.254]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:41.254]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:41.254]                   3L)]
[13:20:41.254]             }
[13:20:41.254]             function(cond) {
[13:20:41.254]                 is_error <- inherits(cond, "error")
[13:20:41.254]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:41.254]                   NULL)
[13:20:41.254]                 if (is_error) {
[13:20:41.254]                   sessionInformation <- function() {
[13:20:41.254]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:41.254]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:41.254]                       search = base::search(), system = base::Sys.info())
[13:20:41.254]                   }
[13:20:41.254]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.254]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:41.254]                     cond$call), session = sessionInformation(), 
[13:20:41.254]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:41.254]                   signalCondition(cond)
[13:20:41.254]                 }
[13:20:41.254]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:41.254]                 "immediateCondition"))) {
[13:20:41.254]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:41.254]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.254]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:41.254]                   if (TRUE && !signal) {
[13:20:41.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.254]                     {
[13:20:41.254]                       inherits <- base::inherits
[13:20:41.254]                       invokeRestart <- base::invokeRestart
[13:20:41.254]                       is.null <- base::is.null
[13:20:41.254]                       muffled <- FALSE
[13:20:41.254]                       if (inherits(cond, "message")) {
[13:20:41.254]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.254]                         if (muffled) 
[13:20:41.254]                           invokeRestart("muffleMessage")
[13:20:41.254]                       }
[13:20:41.254]                       else if (inherits(cond, "warning")) {
[13:20:41.254]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.254]                         if (muffled) 
[13:20:41.254]                           invokeRestart("muffleWarning")
[13:20:41.254]                       }
[13:20:41.254]                       else if (inherits(cond, "condition")) {
[13:20:41.254]                         if (!is.null(pattern)) {
[13:20:41.254]                           computeRestarts <- base::computeRestarts
[13:20:41.254]                           grepl <- base::grepl
[13:20:41.254]                           restarts <- computeRestarts(cond)
[13:20:41.254]                           for (restart in restarts) {
[13:20:41.254]                             name <- restart$name
[13:20:41.254]                             if (is.null(name)) 
[13:20:41.254]                               next
[13:20:41.254]                             if (!grepl(pattern, name)) 
[13:20:41.254]                               next
[13:20:41.254]                             invokeRestart(restart)
[13:20:41.254]                             muffled <- TRUE
[13:20:41.254]                             break
[13:20:41.254]                           }
[13:20:41.254]                         }
[13:20:41.254]                       }
[13:20:41.254]                       invisible(muffled)
[13:20:41.254]                     }
[13:20:41.254]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.254]                   }
[13:20:41.254]                 }
[13:20:41.254]                 else {
[13:20:41.254]                   if (TRUE) {
[13:20:41.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.254]                     {
[13:20:41.254]                       inherits <- base::inherits
[13:20:41.254]                       invokeRestart <- base::invokeRestart
[13:20:41.254]                       is.null <- base::is.null
[13:20:41.254]                       muffled <- FALSE
[13:20:41.254]                       if (inherits(cond, "message")) {
[13:20:41.254]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.254]                         if (muffled) 
[13:20:41.254]                           invokeRestart("muffleMessage")
[13:20:41.254]                       }
[13:20:41.254]                       else if (inherits(cond, "warning")) {
[13:20:41.254]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.254]                         if (muffled) 
[13:20:41.254]                           invokeRestart("muffleWarning")
[13:20:41.254]                       }
[13:20:41.254]                       else if (inherits(cond, "condition")) {
[13:20:41.254]                         if (!is.null(pattern)) {
[13:20:41.254]                           computeRestarts <- base::computeRestarts
[13:20:41.254]                           grepl <- base::grepl
[13:20:41.254]                           restarts <- computeRestarts(cond)
[13:20:41.254]                           for (restart in restarts) {
[13:20:41.254]                             name <- restart$name
[13:20:41.254]                             if (is.null(name)) 
[13:20:41.254]                               next
[13:20:41.254]                             if (!grepl(pattern, name)) 
[13:20:41.254]                               next
[13:20:41.254]                             invokeRestart(restart)
[13:20:41.254]                             muffled <- TRUE
[13:20:41.254]                             break
[13:20:41.254]                           }
[13:20:41.254]                         }
[13:20:41.254]                       }
[13:20:41.254]                       invisible(muffled)
[13:20:41.254]                     }
[13:20:41.254]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.254]                   }
[13:20:41.254]                 }
[13:20:41.254]             }
[13:20:41.254]         }))
[13:20:41.254]     }, error = function(ex) {
[13:20:41.254]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:41.254]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.254]                 ...future.rng), started = ...future.startTime, 
[13:20:41.254]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:41.254]             version = "1.8"), class = "FutureResult")
[13:20:41.254]     }, finally = {
[13:20:41.254]         if (!identical(...future.workdir, getwd())) 
[13:20:41.254]             setwd(...future.workdir)
[13:20:41.254]         {
[13:20:41.254]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:41.254]                 ...future.oldOptions$nwarnings <- NULL
[13:20:41.254]             }
[13:20:41.254]             base::options(...future.oldOptions)
[13:20:41.254]             if (.Platform$OS.type == "windows") {
[13:20:41.254]                 old_names <- names(...future.oldEnvVars)
[13:20:41.254]                 envs <- base::Sys.getenv()
[13:20:41.254]                 names <- names(envs)
[13:20:41.254]                 common <- intersect(names, old_names)
[13:20:41.254]                 added <- setdiff(names, old_names)
[13:20:41.254]                 removed <- setdiff(old_names, names)
[13:20:41.254]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:41.254]                   envs[common]]
[13:20:41.254]                 NAMES <- toupper(changed)
[13:20:41.254]                 args <- list()
[13:20:41.254]                 for (kk in seq_along(NAMES)) {
[13:20:41.254]                   name <- changed[[kk]]
[13:20:41.254]                   NAME <- NAMES[[kk]]
[13:20:41.254]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.254]                     next
[13:20:41.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.254]                 }
[13:20:41.254]                 NAMES <- toupper(added)
[13:20:41.254]                 for (kk in seq_along(NAMES)) {
[13:20:41.254]                   name <- added[[kk]]
[13:20:41.254]                   NAME <- NAMES[[kk]]
[13:20:41.254]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.254]                     next
[13:20:41.254]                   args[[name]] <- ""
[13:20:41.254]                 }
[13:20:41.254]                 NAMES <- toupper(removed)
[13:20:41.254]                 for (kk in seq_along(NAMES)) {
[13:20:41.254]                   name <- removed[[kk]]
[13:20:41.254]                   NAME <- NAMES[[kk]]
[13:20:41.254]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.254]                     next
[13:20:41.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.254]                 }
[13:20:41.254]                 if (length(args) > 0) 
[13:20:41.254]                   base::do.call(base::Sys.setenv, args = args)
[13:20:41.254]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:41.254]             }
[13:20:41.254]             else {
[13:20:41.254]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:41.254]             }
[13:20:41.254]             {
[13:20:41.254]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:41.254]                   0L) {
[13:20:41.254]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:41.254]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:41.254]                   base::options(opts)
[13:20:41.254]                 }
[13:20:41.254]                 {
[13:20:41.254]                   {
[13:20:41.254]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:41.254]                     NULL
[13:20:41.254]                   }
[13:20:41.254]                   options(future.plan = NULL)
[13:20:41.254]                   if (is.na(NA_character_)) 
[13:20:41.254]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.254]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:41.254]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:41.254]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.254]                     envir = parent.frame()) 
[13:20:41.254]                   {
[13:20:41.254]                     if (is.function(workers)) 
[13:20:41.254]                       workers <- workers()
[13:20:41.254]                     workers <- structure(as.integer(workers), 
[13:20:41.254]                       class = class(workers))
[13:20:41.254]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.254]                       workers >= 1)
[13:20:41.254]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.254]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.254]                     }
[13:20:41.254]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.254]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.254]                       envir = envir)
[13:20:41.254]                     if (!future$lazy) 
[13:20:41.254]                       future <- run(future)
[13:20:41.254]                     invisible(future)
[13:20:41.254]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.254]                 }
[13:20:41.254]             }
[13:20:41.254]         }
[13:20:41.254]     })
[13:20:41.254]     if (TRUE) {
[13:20:41.254]         base::sink(type = "output", split = FALSE)
[13:20:41.254]         if (TRUE) {
[13:20:41.254]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:41.254]         }
[13:20:41.254]         else {
[13:20:41.254]             ...future.result["stdout"] <- base::list(NULL)
[13:20:41.254]         }
[13:20:41.254]         base::close(...future.stdout)
[13:20:41.254]         ...future.stdout <- NULL
[13:20:41.254]     }
[13:20:41.254]     ...future.result$conditions <- ...future.conditions
[13:20:41.254]     ...future.result$finished <- base::Sys.time()
[13:20:41.254]     ...future.result
[13:20:41.254] }
[13:20:41.257] MultisessionFuture started
[13:20:41.258] - Launch lazy future ... done
[13:20:41.258] run() for ‘MultisessionFuture’ ... done
[13:20:41.258] result() for ClusterFuture ...
[13:20:41.258] receiveMessageFromWorker() for ClusterFuture ...
[13:20:41.258] - Validating connection of MultisessionFuture
[13:20:41.306] - received message: FutureResult
[13:20:41.306] - Received FutureResult
[13:20:41.307] - Erased future from FutureRegistry
[13:20:41.307] result() for ClusterFuture ...
[13:20:41.307] - result already collected: FutureResult
[13:20:41.307] result() for ClusterFuture ... done
[13:20:41.307] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:41.307] result() for ClusterFuture ... done
[13:20:41.307] result() for ClusterFuture ...
[13:20:41.307] - result already collected: FutureResult
[13:20:41.308] result() for ClusterFuture ... done
[13:20:41.308] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:41.308] Searching for globals...
[13:20:41.309] - globals found: [1] ‘getOption’
[13:20:41.309] Searching for globals ... DONE
[13:20:41.309] Resolving globals: FALSE
[13:20:41.310] 
[13:20:41.310] 
[13:20:41.310] getGlobalsAndPackages() ... DONE
[13:20:41.310] run() for ‘Future’ ...
[13:20:41.310] - state: ‘created’
[13:20:41.311] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:41.326] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:41.326] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:41.326]   - Field: ‘node’
[13:20:41.327]   - Field: ‘label’
[13:20:41.327]   - Field: ‘local’
[13:20:41.327]   - Field: ‘owner’
[13:20:41.327]   - Field: ‘envir’
[13:20:41.327]   - Field: ‘workers’
[13:20:41.327]   - Field: ‘packages’
[13:20:41.327]   - Field: ‘gc’
[13:20:41.327]   - Field: ‘conditions’
[13:20:41.327]   - Field: ‘persistent’
[13:20:41.327]   - Field: ‘expr’
[13:20:41.328]   - Field: ‘uuid’
[13:20:41.328]   - Field: ‘seed’
[13:20:41.328]   - Field: ‘version’
[13:20:41.328]   - Field: ‘result’
[13:20:41.328]   - Field: ‘asynchronous’
[13:20:41.328]   - Field: ‘calls’
[13:20:41.328]   - Field: ‘globals’
[13:20:41.328]   - Field: ‘stdout’
[13:20:41.329]   - Field: ‘earlySignal’
[13:20:41.329]   - Field: ‘lazy’
[13:20:41.329]   - Field: ‘state’
[13:20:41.329] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:41.329] - Launch lazy future ...
[13:20:41.329] Packages needed by the future expression (n = 0): <none>
[13:20:41.330] Packages needed by future strategies (n = 0): <none>
[13:20:41.330] {
[13:20:41.330]     {
[13:20:41.330]         {
[13:20:41.330]             ...future.startTime <- base::Sys.time()
[13:20:41.330]             {
[13:20:41.330]                 {
[13:20:41.330]                   {
[13:20:41.330]                     {
[13:20:41.330]                       base::local({
[13:20:41.330]                         has_future <- base::requireNamespace("future", 
[13:20:41.330]                           quietly = TRUE)
[13:20:41.330]                         if (has_future) {
[13:20:41.330]                           ns <- base::getNamespace("future")
[13:20:41.330]                           version <- ns[[".package"]][["version"]]
[13:20:41.330]                           if (is.null(version)) 
[13:20:41.330]                             version <- utils::packageVersion("future")
[13:20:41.330]                         }
[13:20:41.330]                         else {
[13:20:41.330]                           version <- NULL
[13:20:41.330]                         }
[13:20:41.330]                         if (!has_future || version < "1.8.0") {
[13:20:41.330]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:41.330]                             "", base::R.version$version.string), 
[13:20:41.330]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:41.330]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:41.330]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:41.330]                               "release", "version")], collapse = " "), 
[13:20:41.330]                             hostname = base::Sys.info()[["nodename"]])
[13:20:41.330]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:41.330]                             info)
[13:20:41.330]                           info <- base::paste(info, collapse = "; ")
[13:20:41.330]                           if (!has_future) {
[13:20:41.330]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:41.330]                               info)
[13:20:41.330]                           }
[13:20:41.330]                           else {
[13:20:41.330]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:41.330]                               info, version)
[13:20:41.330]                           }
[13:20:41.330]                           base::stop(msg)
[13:20:41.330]                         }
[13:20:41.330]                       })
[13:20:41.330]                     }
[13:20:41.330]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:41.330]                     base::options(mc.cores = 1L)
[13:20:41.330]                   }
[13:20:41.330]                   options(future.plan = NULL)
[13:20:41.330]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.330]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:41.330]                 }
[13:20:41.330]                 ...future.workdir <- getwd()
[13:20:41.330]             }
[13:20:41.330]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:41.330]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:41.330]         }
[13:20:41.330]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:41.330]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:41.330]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:41.330]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:41.330]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:41.330]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:41.330]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:41.330]             base::names(...future.oldOptions))
[13:20:41.330]     }
[13:20:41.330]     if (FALSE) {
[13:20:41.330]     }
[13:20:41.330]     else {
[13:20:41.330]         if (TRUE) {
[13:20:41.330]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:41.330]                 open = "w")
[13:20:41.330]         }
[13:20:41.330]         else {
[13:20:41.330]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:41.330]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:41.330]         }
[13:20:41.330]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:41.330]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:41.330]             base::sink(type = "output", split = FALSE)
[13:20:41.330]             base::close(...future.stdout)
[13:20:41.330]         }, add = TRUE)
[13:20:41.330]     }
[13:20:41.330]     ...future.frame <- base::sys.nframe()
[13:20:41.330]     ...future.conditions <- base::list()
[13:20:41.330]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:41.330]     if (FALSE) {
[13:20:41.330]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:41.330]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:41.330]     }
[13:20:41.330]     ...future.result <- base::tryCatch({
[13:20:41.330]         base::withCallingHandlers({
[13:20:41.330]             ...future.value <- base::withVisible(base::local({
[13:20:41.330]                 ...future.makeSendCondition <- local({
[13:20:41.330]                   sendCondition <- NULL
[13:20:41.330]                   function(frame = 1L) {
[13:20:41.330]                     if (is.function(sendCondition)) 
[13:20:41.330]                       return(sendCondition)
[13:20:41.330]                     ns <- getNamespace("parallel")
[13:20:41.330]                     if (exists("sendData", mode = "function", 
[13:20:41.330]                       envir = ns)) {
[13:20:41.330]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:41.330]                         envir = ns)
[13:20:41.330]                       envir <- sys.frame(frame)
[13:20:41.330]                       master <- NULL
[13:20:41.330]                       while (!identical(envir, .GlobalEnv) && 
[13:20:41.330]                         !identical(envir, emptyenv())) {
[13:20:41.330]                         if (exists("master", mode = "list", envir = envir, 
[13:20:41.330]                           inherits = FALSE)) {
[13:20:41.330]                           master <- get("master", mode = "list", 
[13:20:41.330]                             envir = envir, inherits = FALSE)
[13:20:41.330]                           if (inherits(master, c("SOCKnode", 
[13:20:41.330]                             "SOCK0node"))) {
[13:20:41.330]                             sendCondition <<- function(cond) {
[13:20:41.330]                               data <- list(type = "VALUE", value = cond, 
[13:20:41.330]                                 success = TRUE)
[13:20:41.330]                               parallel_sendData(master, data)
[13:20:41.330]                             }
[13:20:41.330]                             return(sendCondition)
[13:20:41.330]                           }
[13:20:41.330]                         }
[13:20:41.330]                         frame <- frame + 1L
[13:20:41.330]                         envir <- sys.frame(frame)
[13:20:41.330]                       }
[13:20:41.330]                     }
[13:20:41.330]                     sendCondition <<- function(cond) NULL
[13:20:41.330]                   }
[13:20:41.330]                 })
[13:20:41.330]                 withCallingHandlers({
[13:20:41.330]                   getOption("future.globals.onMissing")
[13:20:41.330]                 }, immediateCondition = function(cond) {
[13:20:41.330]                   sendCondition <- ...future.makeSendCondition()
[13:20:41.330]                   sendCondition(cond)
[13:20:41.330]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.330]                   {
[13:20:41.330]                     inherits <- base::inherits
[13:20:41.330]                     invokeRestart <- base::invokeRestart
[13:20:41.330]                     is.null <- base::is.null
[13:20:41.330]                     muffled <- FALSE
[13:20:41.330]                     if (inherits(cond, "message")) {
[13:20:41.330]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:41.330]                       if (muffled) 
[13:20:41.330]                         invokeRestart("muffleMessage")
[13:20:41.330]                     }
[13:20:41.330]                     else if (inherits(cond, "warning")) {
[13:20:41.330]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:41.330]                       if (muffled) 
[13:20:41.330]                         invokeRestart("muffleWarning")
[13:20:41.330]                     }
[13:20:41.330]                     else if (inherits(cond, "condition")) {
[13:20:41.330]                       if (!is.null(pattern)) {
[13:20:41.330]                         computeRestarts <- base::computeRestarts
[13:20:41.330]                         grepl <- base::grepl
[13:20:41.330]                         restarts <- computeRestarts(cond)
[13:20:41.330]                         for (restart in restarts) {
[13:20:41.330]                           name <- restart$name
[13:20:41.330]                           if (is.null(name)) 
[13:20:41.330]                             next
[13:20:41.330]                           if (!grepl(pattern, name)) 
[13:20:41.330]                             next
[13:20:41.330]                           invokeRestart(restart)
[13:20:41.330]                           muffled <- TRUE
[13:20:41.330]                           break
[13:20:41.330]                         }
[13:20:41.330]                       }
[13:20:41.330]                     }
[13:20:41.330]                     invisible(muffled)
[13:20:41.330]                   }
[13:20:41.330]                   muffleCondition(cond)
[13:20:41.330]                 })
[13:20:41.330]             }))
[13:20:41.330]             future::FutureResult(value = ...future.value$value, 
[13:20:41.330]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.330]                   ...future.rng), globalenv = if (FALSE) 
[13:20:41.330]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:41.330]                     ...future.globalenv.names))
[13:20:41.330]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:41.330]         }, condition = base::local({
[13:20:41.330]             c <- base::c
[13:20:41.330]             inherits <- base::inherits
[13:20:41.330]             invokeRestart <- base::invokeRestart
[13:20:41.330]             length <- base::length
[13:20:41.330]             list <- base::list
[13:20:41.330]             seq.int <- base::seq.int
[13:20:41.330]             signalCondition <- base::signalCondition
[13:20:41.330]             sys.calls <- base::sys.calls
[13:20:41.330]             `[[` <- base::`[[`
[13:20:41.330]             `+` <- base::`+`
[13:20:41.330]             `<<-` <- base::`<<-`
[13:20:41.330]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:41.330]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:41.330]                   3L)]
[13:20:41.330]             }
[13:20:41.330]             function(cond) {
[13:20:41.330]                 is_error <- inherits(cond, "error")
[13:20:41.330]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:41.330]                   NULL)
[13:20:41.330]                 if (is_error) {
[13:20:41.330]                   sessionInformation <- function() {
[13:20:41.330]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:41.330]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:41.330]                       search = base::search(), system = base::Sys.info())
[13:20:41.330]                   }
[13:20:41.330]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.330]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:41.330]                     cond$call), session = sessionInformation(), 
[13:20:41.330]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:41.330]                   signalCondition(cond)
[13:20:41.330]                 }
[13:20:41.330]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:41.330]                 "immediateCondition"))) {
[13:20:41.330]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:41.330]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.330]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:41.330]                   if (TRUE && !signal) {
[13:20:41.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.330]                     {
[13:20:41.330]                       inherits <- base::inherits
[13:20:41.330]                       invokeRestart <- base::invokeRestart
[13:20:41.330]                       is.null <- base::is.null
[13:20:41.330]                       muffled <- FALSE
[13:20:41.330]                       if (inherits(cond, "message")) {
[13:20:41.330]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.330]                         if (muffled) 
[13:20:41.330]                           invokeRestart("muffleMessage")
[13:20:41.330]                       }
[13:20:41.330]                       else if (inherits(cond, "warning")) {
[13:20:41.330]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.330]                         if (muffled) 
[13:20:41.330]                           invokeRestart("muffleWarning")
[13:20:41.330]                       }
[13:20:41.330]                       else if (inherits(cond, "condition")) {
[13:20:41.330]                         if (!is.null(pattern)) {
[13:20:41.330]                           computeRestarts <- base::computeRestarts
[13:20:41.330]                           grepl <- base::grepl
[13:20:41.330]                           restarts <- computeRestarts(cond)
[13:20:41.330]                           for (restart in restarts) {
[13:20:41.330]                             name <- restart$name
[13:20:41.330]                             if (is.null(name)) 
[13:20:41.330]                               next
[13:20:41.330]                             if (!grepl(pattern, name)) 
[13:20:41.330]                               next
[13:20:41.330]                             invokeRestart(restart)
[13:20:41.330]                             muffled <- TRUE
[13:20:41.330]                             break
[13:20:41.330]                           }
[13:20:41.330]                         }
[13:20:41.330]                       }
[13:20:41.330]                       invisible(muffled)
[13:20:41.330]                     }
[13:20:41.330]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.330]                   }
[13:20:41.330]                 }
[13:20:41.330]                 else {
[13:20:41.330]                   if (TRUE) {
[13:20:41.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.330]                     {
[13:20:41.330]                       inherits <- base::inherits
[13:20:41.330]                       invokeRestart <- base::invokeRestart
[13:20:41.330]                       is.null <- base::is.null
[13:20:41.330]                       muffled <- FALSE
[13:20:41.330]                       if (inherits(cond, "message")) {
[13:20:41.330]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.330]                         if (muffled) 
[13:20:41.330]                           invokeRestart("muffleMessage")
[13:20:41.330]                       }
[13:20:41.330]                       else if (inherits(cond, "warning")) {
[13:20:41.330]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.330]                         if (muffled) 
[13:20:41.330]                           invokeRestart("muffleWarning")
[13:20:41.330]                       }
[13:20:41.330]                       else if (inherits(cond, "condition")) {
[13:20:41.330]                         if (!is.null(pattern)) {
[13:20:41.330]                           computeRestarts <- base::computeRestarts
[13:20:41.330]                           grepl <- base::grepl
[13:20:41.330]                           restarts <- computeRestarts(cond)
[13:20:41.330]                           for (restart in restarts) {
[13:20:41.330]                             name <- restart$name
[13:20:41.330]                             if (is.null(name)) 
[13:20:41.330]                               next
[13:20:41.330]                             if (!grepl(pattern, name)) 
[13:20:41.330]                               next
[13:20:41.330]                             invokeRestart(restart)
[13:20:41.330]                             muffled <- TRUE
[13:20:41.330]                             break
[13:20:41.330]                           }
[13:20:41.330]                         }
[13:20:41.330]                       }
[13:20:41.330]                       invisible(muffled)
[13:20:41.330]                     }
[13:20:41.330]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.330]                   }
[13:20:41.330]                 }
[13:20:41.330]             }
[13:20:41.330]         }))
[13:20:41.330]     }, error = function(ex) {
[13:20:41.330]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:41.330]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.330]                 ...future.rng), started = ...future.startTime, 
[13:20:41.330]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:41.330]             version = "1.8"), class = "FutureResult")
[13:20:41.330]     }, finally = {
[13:20:41.330]         if (!identical(...future.workdir, getwd())) 
[13:20:41.330]             setwd(...future.workdir)
[13:20:41.330]         {
[13:20:41.330]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:41.330]                 ...future.oldOptions$nwarnings <- NULL
[13:20:41.330]             }
[13:20:41.330]             base::options(...future.oldOptions)
[13:20:41.330]             if (.Platform$OS.type == "windows") {
[13:20:41.330]                 old_names <- names(...future.oldEnvVars)
[13:20:41.330]                 envs <- base::Sys.getenv()
[13:20:41.330]                 names <- names(envs)
[13:20:41.330]                 common <- intersect(names, old_names)
[13:20:41.330]                 added <- setdiff(names, old_names)
[13:20:41.330]                 removed <- setdiff(old_names, names)
[13:20:41.330]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:41.330]                   envs[common]]
[13:20:41.330]                 NAMES <- toupper(changed)
[13:20:41.330]                 args <- list()
[13:20:41.330]                 for (kk in seq_along(NAMES)) {
[13:20:41.330]                   name <- changed[[kk]]
[13:20:41.330]                   NAME <- NAMES[[kk]]
[13:20:41.330]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.330]                     next
[13:20:41.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.330]                 }
[13:20:41.330]                 NAMES <- toupper(added)
[13:20:41.330]                 for (kk in seq_along(NAMES)) {
[13:20:41.330]                   name <- added[[kk]]
[13:20:41.330]                   NAME <- NAMES[[kk]]
[13:20:41.330]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.330]                     next
[13:20:41.330]                   args[[name]] <- ""
[13:20:41.330]                 }
[13:20:41.330]                 NAMES <- toupper(removed)
[13:20:41.330]                 for (kk in seq_along(NAMES)) {
[13:20:41.330]                   name <- removed[[kk]]
[13:20:41.330]                   NAME <- NAMES[[kk]]
[13:20:41.330]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.330]                     next
[13:20:41.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.330]                 }
[13:20:41.330]                 if (length(args) > 0) 
[13:20:41.330]                   base::do.call(base::Sys.setenv, args = args)
[13:20:41.330]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:41.330]             }
[13:20:41.330]             else {
[13:20:41.330]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:41.330]             }
[13:20:41.330]             {
[13:20:41.330]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:41.330]                   0L) {
[13:20:41.330]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:41.330]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:41.330]                   base::options(opts)
[13:20:41.330]                 }
[13:20:41.330]                 {
[13:20:41.330]                   {
[13:20:41.330]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:41.330]                     NULL
[13:20:41.330]                   }
[13:20:41.330]                   options(future.plan = NULL)
[13:20:41.330]                   if (is.na(NA_character_)) 
[13:20:41.330]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.330]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:41.330]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:41.330]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.330]                     envir = parent.frame()) 
[13:20:41.330]                   {
[13:20:41.330]                     if (is.function(workers)) 
[13:20:41.330]                       workers <- workers()
[13:20:41.330]                     workers <- structure(as.integer(workers), 
[13:20:41.330]                       class = class(workers))
[13:20:41.330]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.330]                       workers >= 1)
[13:20:41.330]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.330]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.330]                     }
[13:20:41.330]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.330]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.330]                       envir = envir)
[13:20:41.330]                     if (!future$lazy) 
[13:20:41.330]                       future <- run(future)
[13:20:41.330]                     invisible(future)
[13:20:41.330]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.330]                 }
[13:20:41.330]             }
[13:20:41.330]         }
[13:20:41.330]     })
[13:20:41.330]     if (TRUE) {
[13:20:41.330]         base::sink(type = "output", split = FALSE)
[13:20:41.330]         if (TRUE) {
[13:20:41.330]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:41.330]         }
[13:20:41.330]         else {
[13:20:41.330]             ...future.result["stdout"] <- base::list(NULL)
[13:20:41.330]         }
[13:20:41.330]         base::close(...future.stdout)
[13:20:41.330]         ...future.stdout <- NULL
[13:20:41.330]     }
[13:20:41.330]     ...future.result$conditions <- ...future.conditions
[13:20:41.330]     ...future.result$finished <- base::Sys.time()
[13:20:41.330]     ...future.result
[13:20:41.330] }
[13:20:41.334] MultisessionFuture started
[13:20:41.334] - Launch lazy future ... done
[13:20:41.334] run() for ‘MultisessionFuture’ ... done
[13:20:41.335] result() for ClusterFuture ...
[13:20:41.335] receiveMessageFromWorker() for ClusterFuture ...
[13:20:41.335] - Validating connection of MultisessionFuture
[13:20:41.382] - received message: FutureResult
[13:20:41.382] - Received FutureResult
[13:20:41.383] - Erased future from FutureRegistry
[13:20:41.383] result() for ClusterFuture ...
[13:20:41.383] - result already collected: FutureResult
[13:20:41.383] result() for ClusterFuture ... done
[13:20:41.383] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:41.383] result() for ClusterFuture ... done
[13:20:41.384] result() for ClusterFuture ...
[13:20:41.384] - result already collected: FutureResult
[13:20:41.384] result() for ClusterFuture ... done
[13:20:41.384] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:20:41.385] Searching for globals...
[13:20:41.386] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:41.387] Searching for globals...
[13:20:41.388] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:20:41.388] Searching for globals ... DONE
[13:20:41.388] Resolving globals: FALSE
[13:20:41.389] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:41.389] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:41.389] - globals: [1] ‘data’
[13:20:41.389] 
[13:20:41.389] getGlobalsAndPackages() ... DONE
[13:20:41.390] run() for ‘Future’ ...
[13:20:41.390] - state: ‘created’
[13:20:41.390] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:41.406] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:41.406] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:41.406]   - Field: ‘node’
[13:20:41.406]   - Field: ‘label’
[13:20:41.406]   - Field: ‘local’
[13:20:41.406]   - Field: ‘owner’
[13:20:41.406]   - Field: ‘envir’
[13:20:41.406]   - Field: ‘workers’
[13:20:41.407]   - Field: ‘packages’
[13:20:41.407]   - Field: ‘gc’
[13:20:41.407]   - Field: ‘conditions’
[13:20:41.407]   - Field: ‘persistent’
[13:20:41.407]   - Field: ‘expr’
[13:20:41.407]   - Field: ‘uuid’
[13:20:41.407]   - Field: ‘seed’
[13:20:41.407]   - Field: ‘version’
[13:20:41.408]   - Field: ‘result’
[13:20:41.408]   - Field: ‘asynchronous’
[13:20:41.408]   - Field: ‘calls’
[13:20:41.408]   - Field: ‘globals’
[13:20:41.408]   - Field: ‘stdout’
[13:20:41.408]   - Field: ‘earlySignal’
[13:20:41.408]   - Field: ‘lazy’
[13:20:41.408]   - Field: ‘state’
[13:20:41.408] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:41.409] - Launch lazy future ...
[13:20:41.409] Packages needed by the future expression (n = 0): <none>
[13:20:41.409] Packages needed by future strategies (n = 0): <none>
[13:20:41.410] {
[13:20:41.410]     {
[13:20:41.410]         {
[13:20:41.410]             ...future.startTime <- base::Sys.time()
[13:20:41.410]             {
[13:20:41.410]                 {
[13:20:41.410]                   {
[13:20:41.410]                     {
[13:20:41.410]                       base::local({
[13:20:41.410]                         has_future <- base::requireNamespace("future", 
[13:20:41.410]                           quietly = TRUE)
[13:20:41.410]                         if (has_future) {
[13:20:41.410]                           ns <- base::getNamespace("future")
[13:20:41.410]                           version <- ns[[".package"]][["version"]]
[13:20:41.410]                           if (is.null(version)) 
[13:20:41.410]                             version <- utils::packageVersion("future")
[13:20:41.410]                         }
[13:20:41.410]                         else {
[13:20:41.410]                           version <- NULL
[13:20:41.410]                         }
[13:20:41.410]                         if (!has_future || version < "1.8.0") {
[13:20:41.410]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:41.410]                             "", base::R.version$version.string), 
[13:20:41.410]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:41.410]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:41.410]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:41.410]                               "release", "version")], collapse = " "), 
[13:20:41.410]                             hostname = base::Sys.info()[["nodename"]])
[13:20:41.410]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:41.410]                             info)
[13:20:41.410]                           info <- base::paste(info, collapse = "; ")
[13:20:41.410]                           if (!has_future) {
[13:20:41.410]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:41.410]                               info)
[13:20:41.410]                           }
[13:20:41.410]                           else {
[13:20:41.410]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:41.410]                               info, version)
[13:20:41.410]                           }
[13:20:41.410]                           base::stop(msg)
[13:20:41.410]                         }
[13:20:41.410]                       })
[13:20:41.410]                     }
[13:20:41.410]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:41.410]                     base::options(mc.cores = 1L)
[13:20:41.410]                   }
[13:20:41.410]                   options(future.plan = NULL)
[13:20:41.410]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.410]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:41.410]                 }
[13:20:41.410]                 ...future.workdir <- getwd()
[13:20:41.410]             }
[13:20:41.410]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:41.410]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:41.410]         }
[13:20:41.410]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:41.410]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:41.410]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:41.410]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:41.410]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:41.410]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:41.410]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:41.410]             base::names(...future.oldOptions))
[13:20:41.410]     }
[13:20:41.410]     if (FALSE) {
[13:20:41.410]     }
[13:20:41.410]     else {
[13:20:41.410]         if (TRUE) {
[13:20:41.410]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:41.410]                 open = "w")
[13:20:41.410]         }
[13:20:41.410]         else {
[13:20:41.410]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:41.410]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:41.410]         }
[13:20:41.410]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:41.410]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:41.410]             base::sink(type = "output", split = FALSE)
[13:20:41.410]             base::close(...future.stdout)
[13:20:41.410]         }, add = TRUE)
[13:20:41.410]     }
[13:20:41.410]     ...future.frame <- base::sys.nframe()
[13:20:41.410]     ...future.conditions <- base::list()
[13:20:41.410]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:41.410]     if (FALSE) {
[13:20:41.410]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:41.410]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:41.410]     }
[13:20:41.410]     ...future.result <- base::tryCatch({
[13:20:41.410]         base::withCallingHandlers({
[13:20:41.410]             ...future.value <- base::withVisible(base::local({
[13:20:41.410]                 ...future.makeSendCondition <- local({
[13:20:41.410]                   sendCondition <- NULL
[13:20:41.410]                   function(frame = 1L) {
[13:20:41.410]                     if (is.function(sendCondition)) 
[13:20:41.410]                       return(sendCondition)
[13:20:41.410]                     ns <- getNamespace("parallel")
[13:20:41.410]                     if (exists("sendData", mode = "function", 
[13:20:41.410]                       envir = ns)) {
[13:20:41.410]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:41.410]                         envir = ns)
[13:20:41.410]                       envir <- sys.frame(frame)
[13:20:41.410]                       master <- NULL
[13:20:41.410]                       while (!identical(envir, .GlobalEnv) && 
[13:20:41.410]                         !identical(envir, emptyenv())) {
[13:20:41.410]                         if (exists("master", mode = "list", envir = envir, 
[13:20:41.410]                           inherits = FALSE)) {
[13:20:41.410]                           master <- get("master", mode = "list", 
[13:20:41.410]                             envir = envir, inherits = FALSE)
[13:20:41.410]                           if (inherits(master, c("SOCKnode", 
[13:20:41.410]                             "SOCK0node"))) {
[13:20:41.410]                             sendCondition <<- function(cond) {
[13:20:41.410]                               data <- list(type = "VALUE", value = cond, 
[13:20:41.410]                                 success = TRUE)
[13:20:41.410]                               parallel_sendData(master, data)
[13:20:41.410]                             }
[13:20:41.410]                             return(sendCondition)
[13:20:41.410]                           }
[13:20:41.410]                         }
[13:20:41.410]                         frame <- frame + 1L
[13:20:41.410]                         envir <- sys.frame(frame)
[13:20:41.410]                       }
[13:20:41.410]                     }
[13:20:41.410]                     sendCondition <<- function(cond) NULL
[13:20:41.410]                   }
[13:20:41.410]                 })
[13:20:41.410]                 withCallingHandlers({
[13:20:41.410]                   subset(data, x < 3)$y
[13:20:41.410]                 }, immediateCondition = function(cond) {
[13:20:41.410]                   sendCondition <- ...future.makeSendCondition()
[13:20:41.410]                   sendCondition(cond)
[13:20:41.410]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.410]                   {
[13:20:41.410]                     inherits <- base::inherits
[13:20:41.410]                     invokeRestart <- base::invokeRestart
[13:20:41.410]                     is.null <- base::is.null
[13:20:41.410]                     muffled <- FALSE
[13:20:41.410]                     if (inherits(cond, "message")) {
[13:20:41.410]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:41.410]                       if (muffled) 
[13:20:41.410]                         invokeRestart("muffleMessage")
[13:20:41.410]                     }
[13:20:41.410]                     else if (inherits(cond, "warning")) {
[13:20:41.410]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:41.410]                       if (muffled) 
[13:20:41.410]                         invokeRestart("muffleWarning")
[13:20:41.410]                     }
[13:20:41.410]                     else if (inherits(cond, "condition")) {
[13:20:41.410]                       if (!is.null(pattern)) {
[13:20:41.410]                         computeRestarts <- base::computeRestarts
[13:20:41.410]                         grepl <- base::grepl
[13:20:41.410]                         restarts <- computeRestarts(cond)
[13:20:41.410]                         for (restart in restarts) {
[13:20:41.410]                           name <- restart$name
[13:20:41.410]                           if (is.null(name)) 
[13:20:41.410]                             next
[13:20:41.410]                           if (!grepl(pattern, name)) 
[13:20:41.410]                             next
[13:20:41.410]                           invokeRestart(restart)
[13:20:41.410]                           muffled <- TRUE
[13:20:41.410]                           break
[13:20:41.410]                         }
[13:20:41.410]                       }
[13:20:41.410]                     }
[13:20:41.410]                     invisible(muffled)
[13:20:41.410]                   }
[13:20:41.410]                   muffleCondition(cond)
[13:20:41.410]                 })
[13:20:41.410]             }))
[13:20:41.410]             future::FutureResult(value = ...future.value$value, 
[13:20:41.410]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.410]                   ...future.rng), globalenv = if (FALSE) 
[13:20:41.410]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:41.410]                     ...future.globalenv.names))
[13:20:41.410]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:41.410]         }, condition = base::local({
[13:20:41.410]             c <- base::c
[13:20:41.410]             inherits <- base::inherits
[13:20:41.410]             invokeRestart <- base::invokeRestart
[13:20:41.410]             length <- base::length
[13:20:41.410]             list <- base::list
[13:20:41.410]             seq.int <- base::seq.int
[13:20:41.410]             signalCondition <- base::signalCondition
[13:20:41.410]             sys.calls <- base::sys.calls
[13:20:41.410]             `[[` <- base::`[[`
[13:20:41.410]             `+` <- base::`+`
[13:20:41.410]             `<<-` <- base::`<<-`
[13:20:41.410]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:41.410]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:41.410]                   3L)]
[13:20:41.410]             }
[13:20:41.410]             function(cond) {
[13:20:41.410]                 is_error <- inherits(cond, "error")
[13:20:41.410]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:41.410]                   NULL)
[13:20:41.410]                 if (is_error) {
[13:20:41.410]                   sessionInformation <- function() {
[13:20:41.410]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:41.410]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:41.410]                       search = base::search(), system = base::Sys.info())
[13:20:41.410]                   }
[13:20:41.410]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.410]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:41.410]                     cond$call), session = sessionInformation(), 
[13:20:41.410]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:41.410]                   signalCondition(cond)
[13:20:41.410]                 }
[13:20:41.410]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:41.410]                 "immediateCondition"))) {
[13:20:41.410]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:41.410]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.410]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:41.410]                   if (TRUE && !signal) {
[13:20:41.410]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.410]                     {
[13:20:41.410]                       inherits <- base::inherits
[13:20:41.410]                       invokeRestart <- base::invokeRestart
[13:20:41.410]                       is.null <- base::is.null
[13:20:41.410]                       muffled <- FALSE
[13:20:41.410]                       if (inherits(cond, "message")) {
[13:20:41.410]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.410]                         if (muffled) 
[13:20:41.410]                           invokeRestart("muffleMessage")
[13:20:41.410]                       }
[13:20:41.410]                       else if (inherits(cond, "warning")) {
[13:20:41.410]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.410]                         if (muffled) 
[13:20:41.410]                           invokeRestart("muffleWarning")
[13:20:41.410]                       }
[13:20:41.410]                       else if (inherits(cond, "condition")) {
[13:20:41.410]                         if (!is.null(pattern)) {
[13:20:41.410]                           computeRestarts <- base::computeRestarts
[13:20:41.410]                           grepl <- base::grepl
[13:20:41.410]                           restarts <- computeRestarts(cond)
[13:20:41.410]                           for (restart in restarts) {
[13:20:41.410]                             name <- restart$name
[13:20:41.410]                             if (is.null(name)) 
[13:20:41.410]                               next
[13:20:41.410]                             if (!grepl(pattern, name)) 
[13:20:41.410]                               next
[13:20:41.410]                             invokeRestart(restart)
[13:20:41.410]                             muffled <- TRUE
[13:20:41.410]                             break
[13:20:41.410]                           }
[13:20:41.410]                         }
[13:20:41.410]                       }
[13:20:41.410]                       invisible(muffled)
[13:20:41.410]                     }
[13:20:41.410]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.410]                   }
[13:20:41.410]                 }
[13:20:41.410]                 else {
[13:20:41.410]                   if (TRUE) {
[13:20:41.410]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.410]                     {
[13:20:41.410]                       inherits <- base::inherits
[13:20:41.410]                       invokeRestart <- base::invokeRestart
[13:20:41.410]                       is.null <- base::is.null
[13:20:41.410]                       muffled <- FALSE
[13:20:41.410]                       if (inherits(cond, "message")) {
[13:20:41.410]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.410]                         if (muffled) 
[13:20:41.410]                           invokeRestart("muffleMessage")
[13:20:41.410]                       }
[13:20:41.410]                       else if (inherits(cond, "warning")) {
[13:20:41.410]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.410]                         if (muffled) 
[13:20:41.410]                           invokeRestart("muffleWarning")
[13:20:41.410]                       }
[13:20:41.410]                       else if (inherits(cond, "condition")) {
[13:20:41.410]                         if (!is.null(pattern)) {
[13:20:41.410]                           computeRestarts <- base::computeRestarts
[13:20:41.410]                           grepl <- base::grepl
[13:20:41.410]                           restarts <- computeRestarts(cond)
[13:20:41.410]                           for (restart in restarts) {
[13:20:41.410]                             name <- restart$name
[13:20:41.410]                             if (is.null(name)) 
[13:20:41.410]                               next
[13:20:41.410]                             if (!grepl(pattern, name)) 
[13:20:41.410]                               next
[13:20:41.410]                             invokeRestart(restart)
[13:20:41.410]                             muffled <- TRUE
[13:20:41.410]                             break
[13:20:41.410]                           }
[13:20:41.410]                         }
[13:20:41.410]                       }
[13:20:41.410]                       invisible(muffled)
[13:20:41.410]                     }
[13:20:41.410]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.410]                   }
[13:20:41.410]                 }
[13:20:41.410]             }
[13:20:41.410]         }))
[13:20:41.410]     }, error = function(ex) {
[13:20:41.410]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:41.410]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.410]                 ...future.rng), started = ...future.startTime, 
[13:20:41.410]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:41.410]             version = "1.8"), class = "FutureResult")
[13:20:41.410]     }, finally = {
[13:20:41.410]         if (!identical(...future.workdir, getwd())) 
[13:20:41.410]             setwd(...future.workdir)
[13:20:41.410]         {
[13:20:41.410]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:41.410]                 ...future.oldOptions$nwarnings <- NULL
[13:20:41.410]             }
[13:20:41.410]             base::options(...future.oldOptions)
[13:20:41.410]             if (.Platform$OS.type == "windows") {
[13:20:41.410]                 old_names <- names(...future.oldEnvVars)
[13:20:41.410]                 envs <- base::Sys.getenv()
[13:20:41.410]                 names <- names(envs)
[13:20:41.410]                 common <- intersect(names, old_names)
[13:20:41.410]                 added <- setdiff(names, old_names)
[13:20:41.410]                 removed <- setdiff(old_names, names)
[13:20:41.410]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:41.410]                   envs[common]]
[13:20:41.410]                 NAMES <- toupper(changed)
[13:20:41.410]                 args <- list()
[13:20:41.410]                 for (kk in seq_along(NAMES)) {
[13:20:41.410]                   name <- changed[[kk]]
[13:20:41.410]                   NAME <- NAMES[[kk]]
[13:20:41.410]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.410]                     next
[13:20:41.410]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.410]                 }
[13:20:41.410]                 NAMES <- toupper(added)
[13:20:41.410]                 for (kk in seq_along(NAMES)) {
[13:20:41.410]                   name <- added[[kk]]
[13:20:41.410]                   NAME <- NAMES[[kk]]
[13:20:41.410]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.410]                     next
[13:20:41.410]                   args[[name]] <- ""
[13:20:41.410]                 }
[13:20:41.410]                 NAMES <- toupper(removed)
[13:20:41.410]                 for (kk in seq_along(NAMES)) {
[13:20:41.410]                   name <- removed[[kk]]
[13:20:41.410]                   NAME <- NAMES[[kk]]
[13:20:41.410]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.410]                     next
[13:20:41.410]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.410]                 }
[13:20:41.410]                 if (length(args) > 0) 
[13:20:41.410]                   base::do.call(base::Sys.setenv, args = args)
[13:20:41.410]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:41.410]             }
[13:20:41.410]             else {
[13:20:41.410]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:41.410]             }
[13:20:41.410]             {
[13:20:41.410]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:41.410]                   0L) {
[13:20:41.410]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:41.410]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:41.410]                   base::options(opts)
[13:20:41.410]                 }
[13:20:41.410]                 {
[13:20:41.410]                   {
[13:20:41.410]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:41.410]                     NULL
[13:20:41.410]                   }
[13:20:41.410]                   options(future.plan = NULL)
[13:20:41.410]                   if (is.na(NA_character_)) 
[13:20:41.410]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.410]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:41.410]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:41.410]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.410]                     envir = parent.frame()) 
[13:20:41.410]                   {
[13:20:41.410]                     if (is.function(workers)) 
[13:20:41.410]                       workers <- workers()
[13:20:41.410]                     workers <- structure(as.integer(workers), 
[13:20:41.410]                       class = class(workers))
[13:20:41.410]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.410]                       workers >= 1)
[13:20:41.410]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.410]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.410]                     }
[13:20:41.410]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.410]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.410]                       envir = envir)
[13:20:41.410]                     if (!future$lazy) 
[13:20:41.410]                       future <- run(future)
[13:20:41.410]                     invisible(future)
[13:20:41.410]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.410]                 }
[13:20:41.410]             }
[13:20:41.410]         }
[13:20:41.410]     })
[13:20:41.410]     if (TRUE) {
[13:20:41.410]         base::sink(type = "output", split = FALSE)
[13:20:41.410]         if (TRUE) {
[13:20:41.410]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:41.410]         }
[13:20:41.410]         else {
[13:20:41.410]             ...future.result["stdout"] <- base::list(NULL)
[13:20:41.410]         }
[13:20:41.410]         base::close(...future.stdout)
[13:20:41.410]         ...future.stdout <- NULL
[13:20:41.410]     }
[13:20:41.410]     ...future.result$conditions <- ...future.conditions
[13:20:41.410]     ...future.result$finished <- base::Sys.time()
[13:20:41.410]     ...future.result
[13:20:41.410] }
[13:20:41.413] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[13:20:41.413] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[13:20:41.414] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[13:20:41.414] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[13:20:41.414] MultisessionFuture started
[13:20:41.414] - Launch lazy future ... done
[13:20:41.415] run() for ‘MultisessionFuture’ ... done
[13:20:41.415] result() for ClusterFuture ...
[13:20:41.415] receiveMessageFromWorker() for ClusterFuture ...
[13:20:41.415] - Validating connection of MultisessionFuture
[13:20:41.462] - received message: FutureResult
[13:20:41.462] - Received FutureResult
[13:20:41.463] - Erased future from FutureRegistry
[13:20:41.463] result() for ClusterFuture ...
[13:20:41.463] - result already collected: FutureResult
[13:20:41.463] result() for ClusterFuture ... done
[13:20:41.463] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:41.463] result() for ClusterFuture ... done
[13:20:41.463] result() for ClusterFuture ...
[13:20:41.463] - result already collected: FutureResult
[13:20:41.464] result() for ClusterFuture ... done
[13:20:41.464] plan(): Setting new future strategy stack:
[13:20:41.464] List of future strategies:
[13:20:41.464] 1. sequential:
[13:20:41.464]    - args: function (..., envir = parent.frame())
[13:20:41.464]    - tweaked: FALSE
[13:20:41.464]    - call: plan(list(sequential, strategy))
[13:20:41.464] 2. multisession:
[13:20:41.464]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:41.464]    - tweaked: FALSE
[13:20:41.464]    - call: plan(list(sequential, strategy))
[13:20:41.465] plan(): nbrOfWorkers() = 1
[13:20:41.466] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:41.466] Searching for globals...
[13:20:41.474] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:20:41.475] Searching for globals ... DONE
[13:20:41.475] Resolving globals: FALSE
[13:20:41.476] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:41.476] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:41.477] - globals: [1] ‘data’
[13:20:41.477] - packages: [1] ‘future’
[13:20:41.477] getGlobalsAndPackages() ... DONE
[13:20:41.478] run() for ‘Future’ ...
[13:20:41.478] - state: ‘created’
[13:20:41.478] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:41.478] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:41.479] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:41.479]   - Field: ‘label’
[13:20:41.479]   - Field: ‘local’
[13:20:41.479]   - Field: ‘owner’
[13:20:41.479]   - Field: ‘envir’
[13:20:41.480]   - Field: ‘packages’
[13:20:41.480]   - Field: ‘gc’
[13:20:41.480]   - Field: ‘conditions’
[13:20:41.480]   - Field: ‘expr’
[13:20:41.480]   - Field: ‘uuid’
[13:20:41.480]   - Field: ‘seed’
[13:20:41.480]   - Field: ‘version’
[13:20:41.481]   - Field: ‘result’
[13:20:41.481]   - Field: ‘asynchronous’
[13:20:41.481]   - Field: ‘calls’
[13:20:41.481]   - Field: ‘globals’
[13:20:41.481]   - Field: ‘stdout’
[13:20:41.481]   - Field: ‘earlySignal’
[13:20:41.481]   - Field: ‘lazy’
[13:20:41.482]   - Field: ‘state’
[13:20:41.482] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:41.482] - Launch lazy future ...
[13:20:41.482] Packages needed by the future expression (n = 1): ‘future’
[13:20:41.482] Packages needed by future strategies (n = 1): ‘future’
[13:20:41.483] {
[13:20:41.483]     {
[13:20:41.483]         {
[13:20:41.483]             ...future.startTime <- base::Sys.time()
[13:20:41.483]             {
[13:20:41.483]                 {
[13:20:41.483]                   {
[13:20:41.483]                     {
[13:20:41.483]                       base::local({
[13:20:41.483]                         has_future <- base::requireNamespace("future", 
[13:20:41.483]                           quietly = TRUE)
[13:20:41.483]                         if (has_future) {
[13:20:41.483]                           ns <- base::getNamespace("future")
[13:20:41.483]                           version <- ns[[".package"]][["version"]]
[13:20:41.483]                           if (is.null(version)) 
[13:20:41.483]                             version <- utils::packageVersion("future")
[13:20:41.483]                         }
[13:20:41.483]                         else {
[13:20:41.483]                           version <- NULL
[13:20:41.483]                         }
[13:20:41.483]                         if (!has_future || version < "1.8.0") {
[13:20:41.483]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:41.483]                             "", base::R.version$version.string), 
[13:20:41.483]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:41.483]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:41.483]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:41.483]                               "release", "version")], collapse = " "), 
[13:20:41.483]                             hostname = base::Sys.info()[["nodename"]])
[13:20:41.483]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:41.483]                             info)
[13:20:41.483]                           info <- base::paste(info, collapse = "; ")
[13:20:41.483]                           if (!has_future) {
[13:20:41.483]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:41.483]                               info)
[13:20:41.483]                           }
[13:20:41.483]                           else {
[13:20:41.483]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:41.483]                               info, version)
[13:20:41.483]                           }
[13:20:41.483]                           base::stop(msg)
[13:20:41.483]                         }
[13:20:41.483]                       })
[13:20:41.483]                     }
[13:20:41.483]                     base::local({
[13:20:41.483]                       for (pkg in "future") {
[13:20:41.483]                         base::loadNamespace(pkg)
[13:20:41.483]                         base::library(pkg, character.only = TRUE)
[13:20:41.483]                       }
[13:20:41.483]                     })
[13:20:41.483]                   }
[13:20:41.483]                   options(future.plan = NULL)
[13:20:41.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.483]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:41.483]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.483]                     envir = parent.frame()) 
[13:20:41.483]                   {
[13:20:41.483]                     if (is.function(workers)) 
[13:20:41.483]                       workers <- workers()
[13:20:41.483]                     workers <- structure(as.integer(workers), 
[13:20:41.483]                       class = class(workers))
[13:20:41.483]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.483]                       workers >= 1)
[13:20:41.483]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.483]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.483]                     }
[13:20:41.483]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.483]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.483]                       envir = envir)
[13:20:41.483]                     if (!future$lazy) 
[13:20:41.483]                       future <- run(future)
[13:20:41.483]                     invisible(future)
[13:20:41.483]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.483]                 }
[13:20:41.483]                 ...future.workdir <- getwd()
[13:20:41.483]             }
[13:20:41.483]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:41.483]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:41.483]         }
[13:20:41.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:41.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:41.483]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:41.483]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:41.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:41.483]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:41.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:41.483]             base::names(...future.oldOptions))
[13:20:41.483]     }
[13:20:41.483]     if (FALSE) {
[13:20:41.483]     }
[13:20:41.483]     else {
[13:20:41.483]         if (TRUE) {
[13:20:41.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:41.483]                 open = "w")
[13:20:41.483]         }
[13:20:41.483]         else {
[13:20:41.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:41.483]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:41.483]         }
[13:20:41.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:41.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:41.483]             base::sink(type = "output", split = FALSE)
[13:20:41.483]             base::close(...future.stdout)
[13:20:41.483]         }, add = TRUE)
[13:20:41.483]     }
[13:20:41.483]     ...future.frame <- base::sys.nframe()
[13:20:41.483]     ...future.conditions <- base::list()
[13:20:41.483]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:41.483]     if (FALSE) {
[13:20:41.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:41.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:41.483]     }
[13:20:41.483]     ...future.result <- base::tryCatch({
[13:20:41.483]         base::withCallingHandlers({
[13:20:41.483]             ...future.value <- base::withVisible(base::local({
[13:20:41.483]                 a %<-% subset(data, x < 3)$y
[13:20:41.483]                 a
[13:20:41.483]             }))
[13:20:41.483]             future::FutureResult(value = ...future.value$value, 
[13:20:41.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.483]                   ...future.rng), globalenv = if (FALSE) 
[13:20:41.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:41.483]                     ...future.globalenv.names))
[13:20:41.483]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:41.483]         }, condition = base::local({
[13:20:41.483]             c <- base::c
[13:20:41.483]             inherits <- base::inherits
[13:20:41.483]             invokeRestart <- base::invokeRestart
[13:20:41.483]             length <- base::length
[13:20:41.483]             list <- base::list
[13:20:41.483]             seq.int <- base::seq.int
[13:20:41.483]             signalCondition <- base::signalCondition
[13:20:41.483]             sys.calls <- base::sys.calls
[13:20:41.483]             `[[` <- base::`[[`
[13:20:41.483]             `+` <- base::`+`
[13:20:41.483]             `<<-` <- base::`<<-`
[13:20:41.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:41.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:41.483]                   3L)]
[13:20:41.483]             }
[13:20:41.483]             function(cond) {
[13:20:41.483]                 is_error <- inherits(cond, "error")
[13:20:41.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:41.483]                   NULL)
[13:20:41.483]                 if (is_error) {
[13:20:41.483]                   sessionInformation <- function() {
[13:20:41.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:41.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:41.483]                       search = base::search(), system = base::Sys.info())
[13:20:41.483]                   }
[13:20:41.483]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:41.483]                     cond$call), session = sessionInformation(), 
[13:20:41.483]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:41.483]                   signalCondition(cond)
[13:20:41.483]                 }
[13:20:41.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:41.483]                 "immediateCondition"))) {
[13:20:41.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:41.483]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:41.483]                   if (TRUE && !signal) {
[13:20:41.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.483]                     {
[13:20:41.483]                       inherits <- base::inherits
[13:20:41.483]                       invokeRestart <- base::invokeRestart
[13:20:41.483]                       is.null <- base::is.null
[13:20:41.483]                       muffled <- FALSE
[13:20:41.483]                       if (inherits(cond, "message")) {
[13:20:41.483]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.483]                         if (muffled) 
[13:20:41.483]                           invokeRestart("muffleMessage")
[13:20:41.483]                       }
[13:20:41.483]                       else if (inherits(cond, "warning")) {
[13:20:41.483]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.483]                         if (muffled) 
[13:20:41.483]                           invokeRestart("muffleWarning")
[13:20:41.483]                       }
[13:20:41.483]                       else if (inherits(cond, "condition")) {
[13:20:41.483]                         if (!is.null(pattern)) {
[13:20:41.483]                           computeRestarts <- base::computeRestarts
[13:20:41.483]                           grepl <- base::grepl
[13:20:41.483]                           restarts <- computeRestarts(cond)
[13:20:41.483]                           for (restart in restarts) {
[13:20:41.483]                             name <- restart$name
[13:20:41.483]                             if (is.null(name)) 
[13:20:41.483]                               next
[13:20:41.483]                             if (!grepl(pattern, name)) 
[13:20:41.483]                               next
[13:20:41.483]                             invokeRestart(restart)
[13:20:41.483]                             muffled <- TRUE
[13:20:41.483]                             break
[13:20:41.483]                           }
[13:20:41.483]                         }
[13:20:41.483]                       }
[13:20:41.483]                       invisible(muffled)
[13:20:41.483]                     }
[13:20:41.483]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.483]                   }
[13:20:41.483]                 }
[13:20:41.483]                 else {
[13:20:41.483]                   if (TRUE) {
[13:20:41.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.483]                     {
[13:20:41.483]                       inherits <- base::inherits
[13:20:41.483]                       invokeRestart <- base::invokeRestart
[13:20:41.483]                       is.null <- base::is.null
[13:20:41.483]                       muffled <- FALSE
[13:20:41.483]                       if (inherits(cond, "message")) {
[13:20:41.483]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.483]                         if (muffled) 
[13:20:41.483]                           invokeRestart("muffleMessage")
[13:20:41.483]                       }
[13:20:41.483]                       else if (inherits(cond, "warning")) {
[13:20:41.483]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.483]                         if (muffled) 
[13:20:41.483]                           invokeRestart("muffleWarning")
[13:20:41.483]                       }
[13:20:41.483]                       else if (inherits(cond, "condition")) {
[13:20:41.483]                         if (!is.null(pattern)) {
[13:20:41.483]                           computeRestarts <- base::computeRestarts
[13:20:41.483]                           grepl <- base::grepl
[13:20:41.483]                           restarts <- computeRestarts(cond)
[13:20:41.483]                           for (restart in restarts) {
[13:20:41.483]                             name <- restart$name
[13:20:41.483]                             if (is.null(name)) 
[13:20:41.483]                               next
[13:20:41.483]                             if (!grepl(pattern, name)) 
[13:20:41.483]                               next
[13:20:41.483]                             invokeRestart(restart)
[13:20:41.483]                             muffled <- TRUE
[13:20:41.483]                             break
[13:20:41.483]                           }
[13:20:41.483]                         }
[13:20:41.483]                       }
[13:20:41.483]                       invisible(muffled)
[13:20:41.483]                     }
[13:20:41.483]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.483]                   }
[13:20:41.483]                 }
[13:20:41.483]             }
[13:20:41.483]         }))
[13:20:41.483]     }, error = function(ex) {
[13:20:41.483]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:41.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.483]                 ...future.rng), started = ...future.startTime, 
[13:20:41.483]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:41.483]             version = "1.8"), class = "FutureResult")
[13:20:41.483]     }, finally = {
[13:20:41.483]         if (!identical(...future.workdir, getwd())) 
[13:20:41.483]             setwd(...future.workdir)
[13:20:41.483]         {
[13:20:41.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:41.483]                 ...future.oldOptions$nwarnings <- NULL
[13:20:41.483]             }
[13:20:41.483]             base::options(...future.oldOptions)
[13:20:41.483]             if (.Platform$OS.type == "windows") {
[13:20:41.483]                 old_names <- names(...future.oldEnvVars)
[13:20:41.483]                 envs <- base::Sys.getenv()
[13:20:41.483]                 names <- names(envs)
[13:20:41.483]                 common <- intersect(names, old_names)
[13:20:41.483]                 added <- setdiff(names, old_names)
[13:20:41.483]                 removed <- setdiff(old_names, names)
[13:20:41.483]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:41.483]                   envs[common]]
[13:20:41.483]                 NAMES <- toupper(changed)
[13:20:41.483]                 args <- list()
[13:20:41.483]                 for (kk in seq_along(NAMES)) {
[13:20:41.483]                   name <- changed[[kk]]
[13:20:41.483]                   NAME <- NAMES[[kk]]
[13:20:41.483]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.483]                     next
[13:20:41.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.483]                 }
[13:20:41.483]                 NAMES <- toupper(added)
[13:20:41.483]                 for (kk in seq_along(NAMES)) {
[13:20:41.483]                   name <- added[[kk]]
[13:20:41.483]                   NAME <- NAMES[[kk]]
[13:20:41.483]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.483]                     next
[13:20:41.483]                   args[[name]] <- ""
[13:20:41.483]                 }
[13:20:41.483]                 NAMES <- toupper(removed)
[13:20:41.483]                 for (kk in seq_along(NAMES)) {
[13:20:41.483]                   name <- removed[[kk]]
[13:20:41.483]                   NAME <- NAMES[[kk]]
[13:20:41.483]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.483]                     next
[13:20:41.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.483]                 }
[13:20:41.483]                 if (length(args) > 0) 
[13:20:41.483]                   base::do.call(base::Sys.setenv, args = args)
[13:20:41.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:41.483]             }
[13:20:41.483]             else {
[13:20:41.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:41.483]             }
[13:20:41.483]             {
[13:20:41.483]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:41.483]                   0L) {
[13:20:41.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:41.483]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:41.483]                   base::options(opts)
[13:20:41.483]                 }
[13:20:41.483]                 {
[13:20:41.483]                   {
[13:20:41.483]                     NULL
[13:20:41.483]                     RNGkind("Mersenne-Twister")
[13:20:41.483]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:41.483]                       inherits = FALSE)
[13:20:41.483]                   }
[13:20:41.483]                   options(future.plan = NULL)
[13:20:41.483]                   if (is.na(NA_character_)) 
[13:20:41.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:41.483]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:41.483]                   {
[13:20:41.483]                     future <- SequentialFuture(..., envir = envir)
[13:20:41.483]                     if (!future$lazy) 
[13:20:41.483]                       future <- run(future)
[13:20:41.483]                     invisible(future)
[13:20:41.483]                   }, function (..., workers = availableCores(), 
[13:20:41.483]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.483]                     envir = parent.frame()) 
[13:20:41.483]                   {
[13:20:41.483]                     if (is.function(workers)) 
[13:20:41.483]                       workers <- workers()
[13:20:41.483]                     workers <- structure(as.integer(workers), 
[13:20:41.483]                       class = class(workers))
[13:20:41.483]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.483]                       workers >= 1)
[13:20:41.483]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.483]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.483]                     }
[13:20:41.483]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.483]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.483]                       envir = envir)
[13:20:41.483]                     if (!future$lazy) 
[13:20:41.483]                       future <- run(future)
[13:20:41.483]                     invisible(future)
[13:20:41.483]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.483]                 }
[13:20:41.483]             }
[13:20:41.483]         }
[13:20:41.483]     })
[13:20:41.483]     if (TRUE) {
[13:20:41.483]         base::sink(type = "output", split = FALSE)
[13:20:41.483]         if (TRUE) {
[13:20:41.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:41.483]         }
[13:20:41.483]         else {
[13:20:41.483]             ...future.result["stdout"] <- base::list(NULL)
[13:20:41.483]         }
[13:20:41.483]         base::close(...future.stdout)
[13:20:41.483]         ...future.stdout <- NULL
[13:20:41.483]     }
[13:20:41.483]     ...future.result$conditions <- ...future.conditions
[13:20:41.483]     ...future.result$finished <- base::Sys.time()
[13:20:41.483]     ...future.result
[13:20:41.483] }
[13:20:41.485] assign_globals() ...
[13:20:41.485] List of 1
[13:20:41.485]  $ data:'data.frame':	5 obs. of  2 variables:
[13:20:41.485]   ..$ x: int [1:5] 1 2 3 4 5
[13:20:41.485]   ..$ y: int [1:5] 1 2 3 4 5
[13:20:41.485]  - attr(*, "where")=List of 1
[13:20:41.485]   ..$ data:<environment: R_EmptyEnv> 
[13:20:41.485]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:20:41.485]  - attr(*, "resolved")= logi FALSE
[13:20:41.485]  - attr(*, "total_size")= num 160
[13:20:41.485]  - attr(*, "already-done")= logi TRUE
[13:20:41.489] - copied ‘data’ to environment
[13:20:41.489] assign_globals() ... done
[13:20:41.489] plan(): Setting new future strategy stack:
[13:20:41.489] List of future strategies:
[13:20:41.489] 1. multisession:
[13:20:41.489]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:41.489]    - tweaked: FALSE
[13:20:41.489]    - call: plan(list(sequential, strategy))
[13:20:41.493] plan(): nbrOfWorkers() = 2
[13:20:42.015] plan(): Setting new future strategy stack:
[13:20:42.015] List of future strategies:
[13:20:42.015] 1. sequential:
[13:20:42.015]    - args: function (..., envir = parent.frame())
[13:20:42.015]    - tweaked: FALSE
[13:20:42.015]    - call: plan(list(sequential, strategy))
[13:20:42.015] 2. multisession:
[13:20:42.015]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:20:42.015]    - tweaked: FALSE
[13:20:42.015]    - call: plan(list(sequential, strategy))
[13:20:42.015] plan(): nbrOfWorkers() = 1
[13:20:42.016] SequentialFuture started (and completed)
[13:20:42.016] signalConditions() ...
[13:20:42.016]  - include = ‘immediateCondition’
[13:20:42.016]  - exclude = 
[13:20:42.016]  - resignal = FALSE
[13:20:42.016]  - Number of conditions: 93
[13:20:42.016] signalConditions() ... done
[13:20:42.016] - Launch lazy future ... done
[13:20:42.016] run() for ‘SequentialFuture’ ... done
[13:20:42.017] signalConditions() ...
[13:20:42.017]  - include = ‘immediateCondition’
[13:20:42.017]  - exclude = 
[13:20:42.017]  - resignal = FALSE
[13:20:42.017]  - Number of conditions: 93
[13:20:42.017] signalConditions() ... done
[13:20:42.017] Future state: ‘finished’
[13:20:42.017] signalConditions() ...
[13:20:42.017]  - include = ‘condition’
[13:20:42.018]  - exclude = ‘immediateCondition’
[13:20:42.018]  - resignal = TRUE
[13:20:42.018]  - Number of conditions: 93
[13:20:42.018]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.494] getGlobalsAndPackages() ...
[13:20:42.018]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:20:42.018]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.507] Searching for globals...
[13:20:42.018]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.508] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:20:42.018]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.508] Searching for globals ... DONE
[13:20:42.018]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.508] Resolving globals: FALSE
[13:20:42.019]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.509] The total size of the 1 globals is 160 bytes (160 bytes)
[13:20:42.019]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.509] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:20:42.019]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.509] - globals: [1] ‘data’
[13:20:42.019]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.510] 
[13:20:42.019]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.510] getGlobalsAndPackages() ... DONE
[13:20:42.019]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.510] run() for ‘Future’ ...
[13:20:42.019]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.510] - state: ‘created’
[13:20:42.020]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.510] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:20:42.020]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.514] [local output] makeClusterPSOCK() ...
[13:20:42.020]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.514] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:20:42.020]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.515] [local output] Base port: 11677
[13:20:42.020]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.515] [local output] Getting setup options for 2 cluster nodes ...
[13:20:42.020]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.515] [local output]  - Node 1 of 2 ...
[13:20:42.020]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.516] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:42.020]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.516] [local output] Rscript port: 11677

[13:20:42.021]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.517] [local output]  - Node 2 of 2 ...
[13:20:42.021]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.517] [local output] localMachine=TRUE => revtunnel=FALSE

[13:20:42.021]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.517] [local output] Rscript port: 11677

[13:20:42.021]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.518] [local output] Getting setup options for 2 cluster nodes ... done
[13:20:42.021]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.518] [local output]  - Parallel setup requested for some PSOCK nodes
[13:20:42.021]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.518] [local output] Setting up PSOCK nodes in parallel
[13:20:42.021]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.518] List of 36
[13:20:41.518]  $ worker          : chr "localhost"
[13:20:41.518]   ..- attr(*, "localhost")= logi TRUE
[13:20:41.518]  $ master          : chr "localhost"
[13:20:41.518]  $ port            : int 11677
[13:20:41.518]  $ connectTimeout  : num 120
[13:20:41.518]  $ timeout         : num 2592000
[13:20:41.518]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:20:41.518]  $ homogeneous     : logi TRUE
[13:20:41.518]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:20:41.518]  $ rscript_envs    : NULL
[13:20:41.518]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:41.518]  $ rscript_startup : NULL
[13:20:41.518]  $ rscript_sh      : chr "sh"
[13:20:41.518]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:41.518]  $ methods         : logi TRUE
[13:20:41.518]  $ socketOptions   : chr "no-delay"
[13:20:41.518]  $ useXDR          : logi FALSE
[13:20:41.518]  $ outfile         : chr "/dev/null"
[13:20:41.518]  $ renice          : int NA
[13:20:41.518]  $ rshcmd          : NULL
[13:20:41.518]  $ user            : chr(0) 
[13:20:41.518]  $ revtunnel       : logi FALSE
[13:20:41.518]  $ rshlogfile      : NULL
[13:20:41.518]  $ rshopts         : chr(0) 
[13:20:41.518]  $ rank            : int 1
[13:20:41.518]  $ manual          : logi FALSE
[13:20:41.518]  $ dryrun          : logi FALSE
[13:20:41.518]  $ quiet           : logi FALSE
[13:20:41.518]  $ setup_strategy  : chr "parallel"
[13:20:41.518]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:41.518]  $ pidfile         : chr "/tmp/Rtmpbh7exT/worker.rank=1.parallelly.parent=86092.1504c2982be2.pid"
[13:20:41.518]  $ rshcmd_label    : NULL
[13:20:41.518]  $ rsh_call        : NULL
[13:20:41.518]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:20:41.518]  $ localMachine    : logi TRUE
[13:20:41.518]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:20:41.518]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:20:41.518]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:20:41.518]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:20:41.518]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:20:41.518]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:20:41.518]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:20:41.518]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:20:41.518]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:20:41.518]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:20:41.518]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:20:41.518]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:20:41.518]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:20:41.518]  $ arguments       :List of 28
[13:20:41.518]   ..$ worker          : chr "localhost"
[13:20:41.518]   ..$ master          : NULL
[13:20:41.518]   ..$ port            : int 11677
[13:20:41.518]   ..$ connectTimeout  : num 120
[13:20:41.518]   ..$ timeout         : num 2592000
[13:20:41.518]   ..$ rscript         : NULL
[13:20:41.518]   ..$ homogeneous     : NULL
[13:20:41.518]   ..$ rscript_args    : NULL
[13:20:41.518]   ..$ rscript_envs    : NULL
[13:20:41.518]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:20:41.518]   ..$ rscript_startup : NULL
[13:20:41.518]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:20:41.518]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:20:41.518]   ..$ methods         : logi TRUE
[13:20:41.518]   ..$ socketOptions   : chr "no-delay"
[13:20:41.518]   ..$ useXDR          : logi FALSE
[13:20:41.518]   ..$ outfile         : chr "/dev/null"
[13:20:41.518]   ..$ renice          : int NA
[13:20:41.518]   ..$ rshcmd          : NULL
[13:20:41.518]   ..$ user            : NULL
[13:20:41.518]   ..$ revtunnel       : logi NA
[13:20:41.518]   ..$ rshlogfile      : NULL
[13:20:41.518]   ..$ rshopts         : NULL
[13:20:41.518]   ..$ rank            : int 1
[13:20:41.518]   ..$ manual          : logi FALSE
[13:20:41.518]   ..$ dryrun          : logi FALSE
[13:20:41.518]   ..$ quiet           : logi FALSE
[13:20:41.518]   ..$ setup_strategy  : chr "parallel"
[13:20:41.518]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:20:42.022]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.535] [local output] System call to launch all workers:
[13:20:42.022]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.535] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpbh7exT/worker.rank=1.parallelly.parent=86092.1504c2982be2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11677 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:20:42.022]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.536] [local output] Starting PSOCK main server
[13:20:42.022]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.537] [local output] Workers launched
[13:20:42.022]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.537] [local output] Waiting for workers to connect back
[13:20:42.022]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.538]  - [local output] 0 workers out of 2 ready
[13:20:42.022]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.834]  - [local output] 0 workers out of 2 ready
[13:20:42.023]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.835]  - [local output] 1 workers out of 2 ready
[13:20:42.023]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.840]  - [local output] 1 workers out of 2 ready
[13:20:42.023]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.840]  - [local output] 2 workers out of 2 ready
[13:20:42.023]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.841] [local output] Launching of workers completed
[13:20:42.023]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.841] [local output] Collecting session information from workers
[13:20:42.023]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.841] [local output]  - Worker #1 of 2
[13:20:42.023]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.842] [local output]  - Worker #2 of 2
[13:20:42.023]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.842] [local output] makeClusterPSOCK() ... done
[13:20:42.024]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.853] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:20:42.024]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.853] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:20:42.024]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.853]   - Field: ‘node’
[13:20:42.024]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘label’
[13:20:42.024]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘local’
[13:20:42.024]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘owner’
[13:20:42.024]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘envir’
[13:20:42.025]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘workers’
[13:20:42.025]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘packages’
[13:20:42.025]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘gc’
[13:20:42.025]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘conditions’
[13:20:42.025]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘persistent’
[13:20:42.025]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.854]   - Field: ‘expr’
[13:20:42.025]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘uuid’
[13:20:42.026]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘seed’
[13:20:42.026]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘version’
[13:20:42.026]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘result’
[13:20:42.026]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘asynchronous’
[13:20:42.026]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘calls’
[13:20:42.026]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘globals’
[13:20:42.026]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘stdout’
[13:20:42.027]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.855]   - Field: ‘earlySignal’
[13:20:42.027]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.856]   - Field: ‘lazy’
[13:20:42.027]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.856]   - Field: ‘state’
[13:20:42.027]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.856] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:20:42.027]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.856] - Launch lazy future ...
[13:20:42.027]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.856] Packages needed by the future expression (n = 0): <none>
[13:20:42.027]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.856] Packages needed by future strategies (n = 0): <none>
[13:20:42.027]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.857] {
[13:20:41.857]     {
[13:20:41.857]         {
[13:20:41.857]             ...future.startTime <- base::Sys.time()
[13:20:41.857]             {
[13:20:41.857]                 {
[13:20:41.857]                   {
[13:20:41.857]                     {
[13:20:41.857]                       base::local({
[13:20:41.857]                         has_future <- base::requireNamespace("future", 
[13:20:41.857]                           quietly = TRUE)
[13:20:41.857]                         if (has_future) {
[13:20:41.857]                           ns <- base::getNamespace("future")
[13:20:41.857]                           version <- ns[[".package"]][["version"]]
[13:20:41.857]                           if (is.null(version)) 
[13:20:41.857]                             version <- utils::packageVersion("future")
[13:20:41.857]                         }
[13:20:41.857]                         else {
[13:20:41.857]                           version <- NULL
[13:20:41.857]                         }
[13:20:41.857]                         if (!has_future || version < "1.8.0") {
[13:20:41.857]                           info <- base::c(r_version = base::gsub("R version ", 
[13:20:41.857]                             "", base::R.version$version.string), 
[13:20:41.857]                             platform = base::sprintf("%s (%s-bit)", 
[13:20:41.857]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:41.857]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:41.857]                               "release", "version")], collapse = " "), 
[13:20:41.857]                             hostname = base::Sys.info()[["nodename"]])
[13:20:41.857]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:20:41.857]                             info)
[13:20:41.857]                           info <- base::paste(info, collapse = "; ")
[13:20:41.857]                           if (!has_future) {
[13:20:41.857]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:41.857]                               info)
[13:20:41.857]                           }
[13:20:41.857]                           else {
[13:20:41.857]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:41.857]                               info, version)
[13:20:41.857]                           }
[13:20:41.857]                           base::stop(msg)
[13:20:41.857]                         }
[13:20:41.857]                       })
[13:20:41.857]                     }
[13:20:41.857]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:20:41.857]                     base::options(mc.cores = 1L)
[13:20:41.857]                   }
[13:20:41.857]                   options(future.plan = NULL)
[13:20:41.857]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.857]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:41.857]                 }
[13:20:41.857]                 ...future.workdir <- getwd()
[13:20:41.857]             }
[13:20:41.857]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:41.857]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:41.857]         }
[13:20:41.857]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:20:41.857]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:41.857]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:20:41.857]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:41.857]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:41.857]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:41.857]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:41.857]             base::names(...future.oldOptions))
[13:20:41.857]     }
[13:20:41.857]     if (FALSE) {
[13:20:41.857]     }
[13:20:41.857]     else {
[13:20:41.857]         if (TRUE) {
[13:20:41.857]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:41.857]                 open = "w")
[13:20:41.857]         }
[13:20:41.857]         else {
[13:20:41.857]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:41.857]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:41.857]         }
[13:20:41.857]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:41.857]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:41.857]             base::sink(type = "output", split = FALSE)
[13:20:41.857]             base::close(...future.stdout)
[13:20:41.857]         }, add = TRUE)
[13:20:41.857]     }
[13:20:41.857]     ...future.frame <- base::sys.nframe()
[13:20:41.857]     ...future.conditions <- base::list()
[13:20:41.857]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:41.857]     if (FALSE) {
[13:20:41.857]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:41.857]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:41.857]     }
[13:20:41.857]     ...future.result <- base::tryCatch({
[13:20:41.857]         base::withCallingHandlers({
[13:20:41.857]             ...future.value <- base::withVisible(base::local({
[13:20:41.857]                 ...future.makeSendCondition <- local({
[13:20:41.857]                   sendCondition <- NULL
[13:20:41.857]                   function(frame = 1L) {
[13:20:41.857]                     if (is.function(sendCondition)) 
[13:20:41.857]                       return(sendCondition)
[13:20:41.857]                     ns <- getNamespace("parallel")
[13:20:41.857]                     if (exists("sendData", mode = "function", 
[13:20:41.857]                       envir = ns)) {
[13:20:41.857]                       parallel_sendData <- get("sendData", mode = "function", 
[13:20:41.857]                         envir = ns)
[13:20:41.857]                       envir <- sys.frame(frame)
[13:20:41.857]                       master <- NULL
[13:20:41.857]                       while (!identical(envir, .GlobalEnv) && 
[13:20:41.857]                         !identical(envir, emptyenv())) {
[13:20:41.857]                         if (exists("master", mode = "list", envir = envir, 
[13:20:41.857]                           inherits = FALSE)) {
[13:20:41.857]                           master <- get("master", mode = "list", 
[13:20:41.857]                             envir = envir, inherits = FALSE)
[13:20:41.857]                           if (inherits(master, c("SOCKnode", 
[13:20:41.857]                             "SOCK0node"))) {
[13:20:41.857]                             sendCondition <<- function(cond) {
[13:20:41.857]                               data <- list(type = "VALUE", value = cond, 
[13:20:41.857]                                 success = TRUE)
[13:20:41.857]                               parallel_sendData(master, data)
[13:20:41.857]                             }
[13:20:41.857]                             return(sendCondition)
[13:20:41.857]                           }
[13:20:41.857]                         }
[13:20:41.857]                         frame <- frame + 1L
[13:20:41.857]                         envir <- sys.frame(frame)
[13:20:41.857]                       }
[13:20:41.857]                     }
[13:20:41.857]                     sendCondition <<- function(cond) NULL
[13:20:41.857]                   }
[13:20:41.857]                 })
[13:20:41.857]                 withCallingHandlers({
[13:20:41.857]                   subset(data, x < 3)$y
[13:20:41.857]                 }, immediateCondition = function(cond) {
[13:20:41.857]                   sendCondition <- ...future.makeSendCondition()
[13:20:41.857]                   sendCondition(cond)
[13:20:41.857]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.857]                   {
[13:20:41.857]                     inherits <- base::inherits
[13:20:41.857]                     invokeRestart <- base::invokeRestart
[13:20:41.857]                     is.null <- base::is.null
[13:20:41.857]                     muffled <- FALSE
[13:20:41.857]                     if (inherits(cond, "message")) {
[13:20:41.857]                       muffled <- grepl(pattern, "muffleMessage")
[13:20:41.857]                       if (muffled) 
[13:20:41.857]                         invokeRestart("muffleMessage")
[13:20:41.857]                     }
[13:20:41.857]                     else if (inherits(cond, "warning")) {
[13:20:41.857]                       muffled <- grepl(pattern, "muffleWarning")
[13:20:41.857]                       if (muffled) 
[13:20:41.857]                         invokeRestart("muffleWarning")
[13:20:41.857]                     }
[13:20:41.857]                     else if (inherits(cond, "condition")) {
[13:20:41.857]                       if (!is.null(pattern)) {
[13:20:41.857]                         computeRestarts <- base::computeRestarts
[13:20:41.857]                         grepl <- base::grepl
[13:20:41.857]                         restarts <- computeRestarts(cond)
[13:20:41.857]                         for (restart in restarts) {
[13:20:41.857]                           name <- restart$name
[13:20:41.857]                           if (is.null(name)) 
[13:20:41.857]                             next
[13:20:41.857]                           if (!grepl(pattern, name)) 
[13:20:41.857]                             next
[13:20:41.857]                           invokeRestart(restart)
[13:20:41.857]                           muffled <- TRUE
[13:20:41.857]                           break
[13:20:41.857]                         }
[13:20:41.857]                       }
[13:20:41.857]                     }
[13:20:41.857]                     invisible(muffled)
[13:20:41.857]                   }
[13:20:41.857]                   muffleCondition(cond)
[13:20:41.857]                 })
[13:20:41.857]             }))
[13:20:41.857]             future::FutureResult(value = ...future.value$value, 
[13:20:41.857]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.857]                   ...future.rng), globalenv = if (FALSE) 
[13:20:41.857]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:41.857]                     ...future.globalenv.names))
[13:20:41.857]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:41.857]         }, condition = base::local({
[13:20:41.857]             c <- base::c
[13:20:41.857]             inherits <- base::inherits
[13:20:41.857]             invokeRestart <- base::invokeRestart
[13:20:41.857]             length <- base::length
[13:20:41.857]             list <- base::list
[13:20:41.857]             seq.int <- base::seq.int
[13:20:41.857]             signalCondition <- base::signalCondition
[13:20:41.857]             sys.calls <- base::sys.calls
[13:20:41.857]             `[[` <- base::`[[`
[13:20:41.857]             `+` <- base::`+`
[13:20:41.857]             `<<-` <- base::`<<-`
[13:20:41.857]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:41.857]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:41.857]                   3L)]
[13:20:41.857]             }
[13:20:41.857]             function(cond) {
[13:20:41.857]                 is_error <- inherits(cond, "error")
[13:20:41.857]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:41.857]                   NULL)
[13:20:41.857]                 if (is_error) {
[13:20:41.857]                   sessionInformation <- function() {
[13:20:41.857]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:41.857]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:41.857]                       search = base::search(), system = base::Sys.info())
[13:20:41.857]                   }
[13:20:41.857]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.857]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:41.857]                     cond$call), session = sessionInformation(), 
[13:20:41.857]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:41.857]                   signalCondition(cond)
[13:20:41.857]                 }
[13:20:41.857]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:41.857]                 "immediateCondition"))) {
[13:20:41.857]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:41.857]                   ...future.conditions[[length(...future.conditions) + 
[13:20:41.857]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:41.857]                   if (TRUE && !signal) {
[13:20:41.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.857]                     {
[13:20:41.857]                       inherits <- base::inherits
[13:20:41.857]                       invokeRestart <- base::invokeRestart
[13:20:41.857]                       is.null <- base::is.null
[13:20:41.857]                       muffled <- FALSE
[13:20:41.857]                       if (inherits(cond, "message")) {
[13:20:41.857]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.857]                         if (muffled) 
[13:20:41.857]                           invokeRestart("muffleMessage")
[13:20:41.857]                       }
[13:20:41.857]                       else if (inherits(cond, "warning")) {
[13:20:41.857]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.857]                         if (muffled) 
[13:20:41.857]                           invokeRestart("muffleWarning")
[13:20:41.857]                       }
[13:20:41.857]                       else if (inherits(cond, "condition")) {
[13:20:41.857]                         if (!is.null(pattern)) {
[13:20:41.857]                           computeRestarts <- base::computeRestarts
[13:20:41.857]                           grepl <- base::grepl
[13:20:41.857]                           restarts <- computeRestarts(cond)
[13:20:41.857]                           for (restart in restarts) {
[13:20:41.857]                             name <- restart$name
[13:20:41.857]                             if (is.null(name)) 
[13:20:41.857]                               next
[13:20:41.857]                             if (!grepl(pattern, name)) 
[13:20:41.857]                               next
[13:20:41.857]                             invokeRestart(restart)
[13:20:41.857]                             muffled <- TRUE
[13:20:41.857]                             break
[13:20:41.857]                           }
[13:20:41.857]                         }
[13:20:41.857]                       }
[13:20:41.857]                       invisible(muffled)
[13:20:41.857]                     }
[13:20:41.857]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.857]                   }
[13:20:41.857]                 }
[13:20:41.857]                 else {
[13:20:41.857]                   if (TRUE) {
[13:20:41.857]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:41.857]                     {
[13:20:41.857]                       inherits <- base::inherits
[13:20:41.857]                       invokeRestart <- base::invokeRestart
[13:20:41.857]                       is.null <- base::is.null
[13:20:41.857]                       muffled <- FALSE
[13:20:41.857]                       if (inherits(cond, "message")) {
[13:20:41.857]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:41.857]                         if (muffled) 
[13:20:41.857]                           invokeRestart("muffleMessage")
[13:20:41.857]                       }
[13:20:41.857]                       else if (inherits(cond, "warning")) {
[13:20:41.857]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:41.857]                         if (muffled) 
[13:20:41.857]                           invokeRestart("muffleWarning")
[13:20:41.857]                       }
[13:20:41.857]                       else if (inherits(cond, "condition")) {
[13:20:41.857]                         if (!is.null(pattern)) {
[13:20:41.857]                           computeRestarts <- base::computeRestarts
[13:20:41.857]                           grepl <- base::grepl
[13:20:41.857]                           restarts <- computeRestarts(cond)
[13:20:41.857]                           for (restart in restarts) {
[13:20:41.857]                             name <- restart$name
[13:20:41.857]                             if (is.null(name)) 
[13:20:41.857]                               next
[13:20:41.857]                             if (!grepl(pattern, name)) 
[13:20:41.857]                               next
[13:20:41.857]                             invokeRestart(restart)
[13:20:41.857]                             muffled <- TRUE
[13:20:41.857]                             break
[13:20:41.857]                           }
[13:20:41.857]                         }
[13:20:41.857]                       }
[13:20:41.857]                       invisible(muffled)
[13:20:41.857]                     }
[13:20:41.857]                     muffleCondition(cond, pattern = "^muffle")
[13:20:41.857]                   }
[13:20:41.857]                 }
[13:20:41.857]             }
[13:20:41.857]         }))
[13:20:41.857]     }, error = function(ex) {
[13:20:41.857]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:41.857]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:41.857]                 ...future.rng), started = ...future.startTime, 
[13:20:41.857]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:41.857]             version = "1.8"), class = "FutureResult")
[13:20:41.857]     }, finally = {
[13:20:41.857]         if (!identical(...future.workdir, getwd())) 
[13:20:41.857]             setwd(...future.workdir)
[13:20:41.857]         {
[13:20:41.857]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:41.857]                 ...future.oldOptions$nwarnings <- NULL
[13:20:41.857]             }
[13:20:41.857]             base::options(...future.oldOptions)
[13:20:41.857]             if (.Platform$OS.type == "windows") {
[13:20:41.857]                 old_names <- names(...future.oldEnvVars)
[13:20:41.857]                 envs <- base::Sys.getenv()
[13:20:41.857]                 names <- names(envs)
[13:20:41.857]                 common <- intersect(names, old_names)
[13:20:41.857]                 added <- setdiff(names, old_names)
[13:20:41.857]                 removed <- setdiff(old_names, names)
[13:20:41.857]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:41.857]                   envs[common]]
[13:20:41.857]                 NAMES <- toupper(changed)
[13:20:41.857]                 args <- list()
[13:20:41.857]                 for (kk in seq_along(NAMES)) {
[13:20:41.857]                   name <- changed[[kk]]
[13:20:41.857]                   NAME <- NAMES[[kk]]
[13:20:41.857]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.857]                     next
[13:20:41.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.857]                 }
[13:20:41.857]                 NAMES <- toupper(added)
[13:20:41.857]                 for (kk in seq_along(NAMES)) {
[13:20:41.857]                   name <- added[[kk]]
[13:20:41.857]                   NAME <- NAMES[[kk]]
[13:20:41.857]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.857]                     next
[13:20:41.857]                   args[[name]] <- ""
[13:20:41.857]                 }
[13:20:41.857]                 NAMES <- toupper(removed)
[13:20:41.857]                 for (kk in seq_along(NAMES)) {
[13:20:41.857]                   name <- removed[[kk]]
[13:20:41.857]                   NAME <- NAMES[[kk]]
[13:20:41.857]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:41.857]                     next
[13:20:41.857]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:41.857]                 }
[13:20:41.857]                 if (length(args) > 0) 
[13:20:41.857]                   base::do.call(base::Sys.setenv, args = args)
[13:20:41.857]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:41.857]             }
[13:20:41.857]             else {
[13:20:41.857]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:41.857]             }
[13:20:41.857]             {
[13:20:41.857]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:41.857]                   0L) {
[13:20:41.857]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:41.857]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:41.857]                   base::options(opts)
[13:20:41.857]                 }
[13:20:41.857]                 {
[13:20:41.857]                   {
[13:20:41.857]                     base::options(mc.cores = ...future.mc.cores.old)
[13:20:41.857]                     NULL
[13:20:41.857]                   }
[13:20:41.857]                   options(future.plan = NULL)
[13:20:41.857]                   if (is.na(NA_character_)) 
[13:20:41.857]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:41.857]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:41.857]                   future::plan(list(function (..., workers = availableCores(), 
[13:20:41.857]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:20:41.857]                     envir = parent.frame()) 
[13:20:41.857]                   {
[13:20:41.857]                     if (is.function(workers)) 
[13:20:41.857]                       workers <- workers()
[13:20:41.857]                     workers <- structure(as.integer(workers), 
[13:20:41.857]                       class = class(workers))
[13:20:41.857]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:20:41.857]                       workers >= 1)
[13:20:41.857]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:20:41.857]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:20:41.857]                     }
[13:20:41.857]                     future <- MultisessionFuture(..., workers = workers, 
[13:20:41.857]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:20:41.857]                       envir = envir)
[13:20:41.857]                     if (!future$lazy) 
[13:20:41.857]                       future <- run(future)
[13:20:41.857]                     invisible(future)
[13:20:41.857]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:41.857]                 }
[13:20:41.857]             }
[13:20:41.857]         }
[13:20:41.857]     })
[13:20:41.857]     if (TRUE) {
[13:20:41.857]         base::sink(type = "output", split = FALSE)
[13:20:41.857]         if (TRUE) {
[13:20:41.857]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:41.857]         }
[13:20:41.857]         else {
[13:20:41.857]             ...future.result["stdout"] <- base::list(NULL)
[13:20:41.857]         }
[13:20:41.857]         base::close(...future.stdout)
[13:20:41.857]         ...future.stdout <- NULL
[13:20:41.857]     }
[13:20:41.857]     ...future.result$conditions <- ...future.conditions
[13:20:41.857]     ...future.result$finished <- base::Sys.time()
[13:20:41.857]     ...future.result
[13:20:41.857] }
[13:20:42.028]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.931] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[13:20:42.028]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.931] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[13:20:42.028]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.932] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[13:20:42.028]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.932] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[13:20:42.028]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.935] MultisessionFuture started
[13:20:42.028]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.935] - Launch lazy future ... done
[13:20:42.028]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.935] run() for ‘MultisessionFuture’ ... done
[13:20:42.029]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.935] result() for ClusterFuture ...
[13:20:42.029]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.935] receiveMessageFromWorker() for ClusterFuture ...
[13:20:42.029]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:41.935] - Validating connection of MultisessionFuture
[13:20:42.029]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.013] - received message: FutureResult
[13:20:42.029]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.013] - Received FutureResult
[13:20:42.029]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.013] - Erased future from FutureRegistry
[13:20:42.029]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.013] result() for ClusterFuture ...
[13:20:42.030]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.013] - result already collected: FutureResult
[13:20:42.030]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.014] result() for ClusterFuture ... done
[13:20:42.030]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.014] receiveMessageFromWorker() for ClusterFuture ... done
[13:20:42.030]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.014] result() for ClusterFuture ... done
[13:20:42.030]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.014] result() for ClusterFuture ...
[13:20:42.030]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.014] - result already collected: FutureResult
[13:20:42.031]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[13:20:42.014] result() for ClusterFuture ... done
[13:20:42.031] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[13:20:42.032] plan(): Setting new future strategy stack:
[13:20:42.032] List of future strategies:
[13:20:42.032] 1. FutureStrategy:
[13:20:42.032]    - args: function (..., envir = parent.frame())
[13:20:42.032]    - tweaked: FALSE
[13:20:42.032]    - call: future::plan(oplan)
[13:20:42.033] plan(): nbrOfWorkers() = 1
> 
