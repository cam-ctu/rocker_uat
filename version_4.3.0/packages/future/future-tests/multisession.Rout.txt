
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:21:04.219] plan(): Setting new future strategy stack:
[13:21:04.220] List of future strategies:
[13:21:04.220] 1. sequential:
[13:21:04.220]    - args: function (..., envir = parent.frame())
[13:21:04.220]    - tweaked: FALSE
[13:21:04.220]    - call: future::plan("sequential")
[13:21:04.232] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[13:21:04.283] getGlobalsAndPackages() ...
[13:21:04.283] Searching for globals...
[13:21:04.286] - globals found: [1] ‘{’
[13:21:04.286] Searching for globals ... DONE
[13:21:04.286] Resolving globals: FALSE
[13:21:04.287] 
[13:21:04.287] 
[13:21:04.287] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:04.289] Packages needed by the future expression (n = 0): <none>
[13:21:04.289] Packages needed by future strategies (n = 0): <none>
[13:21:04.290] {
[13:21:04.290]     {
[13:21:04.290]         {
[13:21:04.290]             ...future.startTime <- base::Sys.time()
[13:21:04.290]             {
[13:21:04.290]                 {
[13:21:04.290]                   {
[13:21:04.290]                     base::local({
[13:21:04.290]                       has_future <- base::requireNamespace("future", 
[13:21:04.290]                         quietly = TRUE)
[13:21:04.290]                       if (has_future) {
[13:21:04.290]                         ns <- base::getNamespace("future")
[13:21:04.290]                         version <- ns[[".package"]][["version"]]
[13:21:04.290]                         if (is.null(version)) 
[13:21:04.290]                           version <- utils::packageVersion("future")
[13:21:04.290]                       }
[13:21:04.290]                       else {
[13:21:04.290]                         version <- NULL
[13:21:04.290]                       }
[13:21:04.290]                       if (!has_future || version < "1.8.0") {
[13:21:04.290]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.290]                           "", base::R.version$version.string), 
[13:21:04.290]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.290]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.290]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.290]                             "release", "version")], collapse = " "), 
[13:21:04.290]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.290]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.290]                           info)
[13:21:04.290]                         info <- base::paste(info, collapse = "; ")
[13:21:04.290]                         if (!has_future) {
[13:21:04.290]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.290]                             info)
[13:21:04.290]                         }
[13:21:04.290]                         else {
[13:21:04.290]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.290]                             info, version)
[13:21:04.290]                         }
[13:21:04.290]                         base::stop(msg)
[13:21:04.290]                       }
[13:21:04.290]                     })
[13:21:04.290]                   }
[13:21:04.290]                   options(future.plan = NULL)
[13:21:04.290]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.290]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.290]                 }
[13:21:04.290]                 ...future.workdir <- getwd()
[13:21:04.290]             }
[13:21:04.290]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.290]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.290]         }
[13:21:04.290]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.290]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.290]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.290]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.290]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.290]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.290]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.290]             base::names(...future.oldOptions))
[13:21:04.290]     }
[13:21:04.290]     if (FALSE) {
[13:21:04.290]     }
[13:21:04.290]     else {
[13:21:04.290]         if (TRUE) {
[13:21:04.290]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.290]                 open = "w")
[13:21:04.290]         }
[13:21:04.290]         else {
[13:21:04.290]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.290]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.290]         }
[13:21:04.290]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.290]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.290]             base::sink(type = "output", split = FALSE)
[13:21:04.290]             base::close(...future.stdout)
[13:21:04.290]         }, add = TRUE)
[13:21:04.290]     }
[13:21:04.290]     ...future.frame <- base::sys.nframe()
[13:21:04.290]     ...future.conditions <- base::list()
[13:21:04.290]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.290]     if (FALSE) {
[13:21:04.290]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.290]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.290]     }
[13:21:04.290]     ...future.result <- base::tryCatch({
[13:21:04.290]         base::withCallingHandlers({
[13:21:04.290]             ...future.value <- base::withVisible(base::local({
[13:21:04.290]                 42L
[13:21:04.290]             }))
[13:21:04.290]             future::FutureResult(value = ...future.value$value, 
[13:21:04.290]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.290]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.290]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.290]                     ...future.globalenv.names))
[13:21:04.290]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.290]         }, condition = base::local({
[13:21:04.290]             c <- base::c
[13:21:04.290]             inherits <- base::inherits
[13:21:04.290]             invokeRestart <- base::invokeRestart
[13:21:04.290]             length <- base::length
[13:21:04.290]             list <- base::list
[13:21:04.290]             seq.int <- base::seq.int
[13:21:04.290]             signalCondition <- base::signalCondition
[13:21:04.290]             sys.calls <- base::sys.calls
[13:21:04.290]             `[[` <- base::`[[`
[13:21:04.290]             `+` <- base::`+`
[13:21:04.290]             `<<-` <- base::`<<-`
[13:21:04.290]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.290]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.290]                   3L)]
[13:21:04.290]             }
[13:21:04.290]             function(cond) {
[13:21:04.290]                 is_error <- inherits(cond, "error")
[13:21:04.290]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.290]                   NULL)
[13:21:04.290]                 if (is_error) {
[13:21:04.290]                   sessionInformation <- function() {
[13:21:04.290]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.290]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.290]                       search = base::search(), system = base::Sys.info())
[13:21:04.290]                   }
[13:21:04.290]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.290]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.290]                     cond$call), session = sessionInformation(), 
[13:21:04.290]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.290]                   signalCondition(cond)
[13:21:04.290]                 }
[13:21:04.290]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.290]                 "immediateCondition"))) {
[13:21:04.290]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.290]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.290]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.290]                   if (TRUE && !signal) {
[13:21:04.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.290]                     {
[13:21:04.290]                       inherits <- base::inherits
[13:21:04.290]                       invokeRestart <- base::invokeRestart
[13:21:04.290]                       is.null <- base::is.null
[13:21:04.290]                       muffled <- FALSE
[13:21:04.290]                       if (inherits(cond, "message")) {
[13:21:04.290]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.290]                         if (muffled) 
[13:21:04.290]                           invokeRestart("muffleMessage")
[13:21:04.290]                       }
[13:21:04.290]                       else if (inherits(cond, "warning")) {
[13:21:04.290]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.290]                         if (muffled) 
[13:21:04.290]                           invokeRestart("muffleWarning")
[13:21:04.290]                       }
[13:21:04.290]                       else if (inherits(cond, "condition")) {
[13:21:04.290]                         if (!is.null(pattern)) {
[13:21:04.290]                           computeRestarts <- base::computeRestarts
[13:21:04.290]                           grepl <- base::grepl
[13:21:04.290]                           restarts <- computeRestarts(cond)
[13:21:04.290]                           for (restart in restarts) {
[13:21:04.290]                             name <- restart$name
[13:21:04.290]                             if (is.null(name)) 
[13:21:04.290]                               next
[13:21:04.290]                             if (!grepl(pattern, name)) 
[13:21:04.290]                               next
[13:21:04.290]                             invokeRestart(restart)
[13:21:04.290]                             muffled <- TRUE
[13:21:04.290]                             break
[13:21:04.290]                           }
[13:21:04.290]                         }
[13:21:04.290]                       }
[13:21:04.290]                       invisible(muffled)
[13:21:04.290]                     }
[13:21:04.290]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.290]                   }
[13:21:04.290]                 }
[13:21:04.290]                 else {
[13:21:04.290]                   if (TRUE) {
[13:21:04.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.290]                     {
[13:21:04.290]                       inherits <- base::inherits
[13:21:04.290]                       invokeRestart <- base::invokeRestart
[13:21:04.290]                       is.null <- base::is.null
[13:21:04.290]                       muffled <- FALSE
[13:21:04.290]                       if (inherits(cond, "message")) {
[13:21:04.290]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.290]                         if (muffled) 
[13:21:04.290]                           invokeRestart("muffleMessage")
[13:21:04.290]                       }
[13:21:04.290]                       else if (inherits(cond, "warning")) {
[13:21:04.290]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.290]                         if (muffled) 
[13:21:04.290]                           invokeRestart("muffleWarning")
[13:21:04.290]                       }
[13:21:04.290]                       else if (inherits(cond, "condition")) {
[13:21:04.290]                         if (!is.null(pattern)) {
[13:21:04.290]                           computeRestarts <- base::computeRestarts
[13:21:04.290]                           grepl <- base::grepl
[13:21:04.290]                           restarts <- computeRestarts(cond)
[13:21:04.290]                           for (restart in restarts) {
[13:21:04.290]                             name <- restart$name
[13:21:04.290]                             if (is.null(name)) 
[13:21:04.290]                               next
[13:21:04.290]                             if (!grepl(pattern, name)) 
[13:21:04.290]                               next
[13:21:04.290]                             invokeRestart(restart)
[13:21:04.290]                             muffled <- TRUE
[13:21:04.290]                             break
[13:21:04.290]                           }
[13:21:04.290]                         }
[13:21:04.290]                       }
[13:21:04.290]                       invisible(muffled)
[13:21:04.290]                     }
[13:21:04.290]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.290]                   }
[13:21:04.290]                 }
[13:21:04.290]             }
[13:21:04.290]         }))
[13:21:04.290]     }, error = function(ex) {
[13:21:04.290]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.290]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.290]                 ...future.rng), started = ...future.startTime, 
[13:21:04.290]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.290]             version = "1.8"), class = "FutureResult")
[13:21:04.290]     }, finally = {
[13:21:04.290]         if (!identical(...future.workdir, getwd())) 
[13:21:04.290]             setwd(...future.workdir)
[13:21:04.290]         {
[13:21:04.290]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.290]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.290]             }
[13:21:04.290]             base::options(...future.oldOptions)
[13:21:04.290]             if (.Platform$OS.type == "windows") {
[13:21:04.290]                 old_names <- names(...future.oldEnvVars)
[13:21:04.290]                 envs <- base::Sys.getenv()
[13:21:04.290]                 names <- names(envs)
[13:21:04.290]                 common <- intersect(names, old_names)
[13:21:04.290]                 added <- setdiff(names, old_names)
[13:21:04.290]                 removed <- setdiff(old_names, names)
[13:21:04.290]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.290]                   envs[common]]
[13:21:04.290]                 NAMES <- toupper(changed)
[13:21:04.290]                 args <- list()
[13:21:04.290]                 for (kk in seq_along(NAMES)) {
[13:21:04.290]                   name <- changed[[kk]]
[13:21:04.290]                   NAME <- NAMES[[kk]]
[13:21:04.290]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.290]                     next
[13:21:04.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.290]                 }
[13:21:04.290]                 NAMES <- toupper(added)
[13:21:04.290]                 for (kk in seq_along(NAMES)) {
[13:21:04.290]                   name <- added[[kk]]
[13:21:04.290]                   NAME <- NAMES[[kk]]
[13:21:04.290]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.290]                     next
[13:21:04.290]                   args[[name]] <- ""
[13:21:04.290]                 }
[13:21:04.290]                 NAMES <- toupper(removed)
[13:21:04.290]                 for (kk in seq_along(NAMES)) {
[13:21:04.290]                   name <- removed[[kk]]
[13:21:04.290]                   NAME <- NAMES[[kk]]
[13:21:04.290]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.290]                     next
[13:21:04.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.290]                 }
[13:21:04.290]                 if (length(args) > 0) 
[13:21:04.290]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.290]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.290]             }
[13:21:04.290]             else {
[13:21:04.290]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.290]             }
[13:21:04.290]             {
[13:21:04.290]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.290]                   0L) {
[13:21:04.290]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.290]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.290]                   base::options(opts)
[13:21:04.290]                 }
[13:21:04.290]                 {
[13:21:04.290]                   {
[13:21:04.290]                     NULL
[13:21:04.290]                     RNGkind("Mersenne-Twister")
[13:21:04.290]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.290]                       inherits = FALSE)
[13:21:04.290]                   }
[13:21:04.290]                   options(future.plan = NULL)
[13:21:04.290]                   if (is.na(NA_character_)) 
[13:21:04.290]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.290]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.290]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.290]                   {
[13:21:04.290]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.290]                     if (!future$lazy) 
[13:21:04.290]                       future <- run(future)
[13:21:04.290]                     invisible(future)
[13:21:04.290]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.290]                 }
[13:21:04.290]             }
[13:21:04.290]         }
[13:21:04.290]     })
[13:21:04.290]     if (TRUE) {
[13:21:04.290]         base::sink(type = "output", split = FALSE)
[13:21:04.290]         if (TRUE) {
[13:21:04.290]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.290]         }
[13:21:04.290]         else {
[13:21:04.290]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.290]         }
[13:21:04.290]         base::close(...future.stdout)
[13:21:04.290]         ...future.stdout <- NULL
[13:21:04.290]     }
[13:21:04.290]     ...future.result$conditions <- ...future.conditions
[13:21:04.290]     ...future.result$finished <- base::Sys.time()
[13:21:04.290]     ...future.result
[13:21:04.290] }
[13:21:04.292] plan(): Setting new future strategy stack:
[13:21:04.292] List of future strategies:
[13:21:04.292] 1. sequential:
[13:21:04.292]    - args: function (..., envir = parent.frame())
[13:21:04.292]    - tweaked: FALSE
[13:21:04.292]    - call: NULL
[13:21:04.292] plan(): nbrOfWorkers() = 1
[13:21:04.293] plan(): Setting new future strategy stack:
[13:21:04.293] List of future strategies:
[13:21:04.293] 1. sequential:
[13:21:04.293]    - args: function (..., envir = parent.frame())
[13:21:04.293]    - tweaked: FALSE
[13:21:04.293]    - call: future::plan("sequential")
[13:21:04.295] plan(): nbrOfWorkers() = 1
[13:21:04.295] SequentialFuture started (and completed)
[13:21:04.296] resolved() for ‘SequentialFuture’ ...
[13:21:04.296] - state: ‘finished’
[13:21:04.296] - run: TRUE
[13:21:04.296] - result: ‘FutureResult’
[13:21:04.296] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[13:21:04.300] getGlobalsAndPackages() ...
[13:21:04.300] Searching for globals...
[13:21:04.304] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:21:04.305] Searching for globals ... DONE
[13:21:04.305] Resolving globals: FALSE
[13:21:04.306] The total size of the 1 globals is 56 bytes (56 bytes)
[13:21:04.306] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:21:04.306] - globals: [1] ‘a’
[13:21:04.306] 
[13:21:04.306] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:04.307] Packages needed by the future expression (n = 0): <none>
[13:21:04.307] Packages needed by future strategies (n = 0): <none>
[13:21:04.308] {
[13:21:04.308]     {
[13:21:04.308]         {
[13:21:04.308]             ...future.startTime <- base::Sys.time()
[13:21:04.308]             {
[13:21:04.308]                 {
[13:21:04.308]                   {
[13:21:04.308]                     base::local({
[13:21:04.308]                       has_future <- base::requireNamespace("future", 
[13:21:04.308]                         quietly = TRUE)
[13:21:04.308]                       if (has_future) {
[13:21:04.308]                         ns <- base::getNamespace("future")
[13:21:04.308]                         version <- ns[[".package"]][["version"]]
[13:21:04.308]                         if (is.null(version)) 
[13:21:04.308]                           version <- utils::packageVersion("future")
[13:21:04.308]                       }
[13:21:04.308]                       else {
[13:21:04.308]                         version <- NULL
[13:21:04.308]                       }
[13:21:04.308]                       if (!has_future || version < "1.8.0") {
[13:21:04.308]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.308]                           "", base::R.version$version.string), 
[13:21:04.308]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.308]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.308]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.308]                             "release", "version")], collapse = " "), 
[13:21:04.308]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.308]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.308]                           info)
[13:21:04.308]                         info <- base::paste(info, collapse = "; ")
[13:21:04.308]                         if (!has_future) {
[13:21:04.308]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.308]                             info)
[13:21:04.308]                         }
[13:21:04.308]                         else {
[13:21:04.308]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.308]                             info, version)
[13:21:04.308]                         }
[13:21:04.308]                         base::stop(msg)
[13:21:04.308]                       }
[13:21:04.308]                     })
[13:21:04.308]                   }
[13:21:04.308]                   options(future.plan = NULL)
[13:21:04.308]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.308]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.308]                 }
[13:21:04.308]                 ...future.workdir <- getwd()
[13:21:04.308]             }
[13:21:04.308]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.308]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.308]         }
[13:21:04.308]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.308]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.308]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.308]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.308]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.308]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.308]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.308]             base::names(...future.oldOptions))
[13:21:04.308]     }
[13:21:04.308]     if (FALSE) {
[13:21:04.308]     }
[13:21:04.308]     else {
[13:21:04.308]         if (TRUE) {
[13:21:04.308]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.308]                 open = "w")
[13:21:04.308]         }
[13:21:04.308]         else {
[13:21:04.308]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.308]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.308]         }
[13:21:04.308]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.308]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.308]             base::sink(type = "output", split = FALSE)
[13:21:04.308]             base::close(...future.stdout)
[13:21:04.308]         }, add = TRUE)
[13:21:04.308]     }
[13:21:04.308]     ...future.frame <- base::sys.nframe()
[13:21:04.308]     ...future.conditions <- base::list()
[13:21:04.308]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.308]     if (FALSE) {
[13:21:04.308]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.308]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.308]     }
[13:21:04.308]     ...future.result <- base::tryCatch({
[13:21:04.308]         base::withCallingHandlers({
[13:21:04.308]             ...future.value <- base::withVisible(base::local({
[13:21:04.308]                 b <- 3
[13:21:04.308]                 c <- 2
[13:21:04.308]                 a * b * c
[13:21:04.308]             }))
[13:21:04.308]             future::FutureResult(value = ...future.value$value, 
[13:21:04.308]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.308]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.308]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.308]                     ...future.globalenv.names))
[13:21:04.308]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.308]         }, condition = base::local({
[13:21:04.308]             c <- base::c
[13:21:04.308]             inherits <- base::inherits
[13:21:04.308]             invokeRestart <- base::invokeRestart
[13:21:04.308]             length <- base::length
[13:21:04.308]             list <- base::list
[13:21:04.308]             seq.int <- base::seq.int
[13:21:04.308]             signalCondition <- base::signalCondition
[13:21:04.308]             sys.calls <- base::sys.calls
[13:21:04.308]             `[[` <- base::`[[`
[13:21:04.308]             `+` <- base::`+`
[13:21:04.308]             `<<-` <- base::`<<-`
[13:21:04.308]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.308]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.308]                   3L)]
[13:21:04.308]             }
[13:21:04.308]             function(cond) {
[13:21:04.308]                 is_error <- inherits(cond, "error")
[13:21:04.308]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.308]                   NULL)
[13:21:04.308]                 if (is_error) {
[13:21:04.308]                   sessionInformation <- function() {
[13:21:04.308]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.308]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.308]                       search = base::search(), system = base::Sys.info())
[13:21:04.308]                   }
[13:21:04.308]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.308]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.308]                     cond$call), session = sessionInformation(), 
[13:21:04.308]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.308]                   signalCondition(cond)
[13:21:04.308]                 }
[13:21:04.308]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.308]                 "immediateCondition"))) {
[13:21:04.308]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.308]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.308]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.308]                   if (TRUE && !signal) {
[13:21:04.308]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.308]                     {
[13:21:04.308]                       inherits <- base::inherits
[13:21:04.308]                       invokeRestart <- base::invokeRestart
[13:21:04.308]                       is.null <- base::is.null
[13:21:04.308]                       muffled <- FALSE
[13:21:04.308]                       if (inherits(cond, "message")) {
[13:21:04.308]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.308]                         if (muffled) 
[13:21:04.308]                           invokeRestart("muffleMessage")
[13:21:04.308]                       }
[13:21:04.308]                       else if (inherits(cond, "warning")) {
[13:21:04.308]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.308]                         if (muffled) 
[13:21:04.308]                           invokeRestart("muffleWarning")
[13:21:04.308]                       }
[13:21:04.308]                       else if (inherits(cond, "condition")) {
[13:21:04.308]                         if (!is.null(pattern)) {
[13:21:04.308]                           computeRestarts <- base::computeRestarts
[13:21:04.308]                           grepl <- base::grepl
[13:21:04.308]                           restarts <- computeRestarts(cond)
[13:21:04.308]                           for (restart in restarts) {
[13:21:04.308]                             name <- restart$name
[13:21:04.308]                             if (is.null(name)) 
[13:21:04.308]                               next
[13:21:04.308]                             if (!grepl(pattern, name)) 
[13:21:04.308]                               next
[13:21:04.308]                             invokeRestart(restart)
[13:21:04.308]                             muffled <- TRUE
[13:21:04.308]                             break
[13:21:04.308]                           }
[13:21:04.308]                         }
[13:21:04.308]                       }
[13:21:04.308]                       invisible(muffled)
[13:21:04.308]                     }
[13:21:04.308]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.308]                   }
[13:21:04.308]                 }
[13:21:04.308]                 else {
[13:21:04.308]                   if (TRUE) {
[13:21:04.308]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.308]                     {
[13:21:04.308]                       inherits <- base::inherits
[13:21:04.308]                       invokeRestart <- base::invokeRestart
[13:21:04.308]                       is.null <- base::is.null
[13:21:04.308]                       muffled <- FALSE
[13:21:04.308]                       if (inherits(cond, "message")) {
[13:21:04.308]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.308]                         if (muffled) 
[13:21:04.308]                           invokeRestart("muffleMessage")
[13:21:04.308]                       }
[13:21:04.308]                       else if (inherits(cond, "warning")) {
[13:21:04.308]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.308]                         if (muffled) 
[13:21:04.308]                           invokeRestart("muffleWarning")
[13:21:04.308]                       }
[13:21:04.308]                       else if (inherits(cond, "condition")) {
[13:21:04.308]                         if (!is.null(pattern)) {
[13:21:04.308]                           computeRestarts <- base::computeRestarts
[13:21:04.308]                           grepl <- base::grepl
[13:21:04.308]                           restarts <- computeRestarts(cond)
[13:21:04.308]                           for (restart in restarts) {
[13:21:04.308]                             name <- restart$name
[13:21:04.308]                             if (is.null(name)) 
[13:21:04.308]                               next
[13:21:04.308]                             if (!grepl(pattern, name)) 
[13:21:04.308]                               next
[13:21:04.308]                             invokeRestart(restart)
[13:21:04.308]                             muffled <- TRUE
[13:21:04.308]                             break
[13:21:04.308]                           }
[13:21:04.308]                         }
[13:21:04.308]                       }
[13:21:04.308]                       invisible(muffled)
[13:21:04.308]                     }
[13:21:04.308]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.308]                   }
[13:21:04.308]                 }
[13:21:04.308]             }
[13:21:04.308]         }))
[13:21:04.308]     }, error = function(ex) {
[13:21:04.308]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.308]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.308]                 ...future.rng), started = ...future.startTime, 
[13:21:04.308]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.308]             version = "1.8"), class = "FutureResult")
[13:21:04.308]     }, finally = {
[13:21:04.308]         if (!identical(...future.workdir, getwd())) 
[13:21:04.308]             setwd(...future.workdir)
[13:21:04.308]         {
[13:21:04.308]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.308]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.308]             }
[13:21:04.308]             base::options(...future.oldOptions)
[13:21:04.308]             if (.Platform$OS.type == "windows") {
[13:21:04.308]                 old_names <- names(...future.oldEnvVars)
[13:21:04.308]                 envs <- base::Sys.getenv()
[13:21:04.308]                 names <- names(envs)
[13:21:04.308]                 common <- intersect(names, old_names)
[13:21:04.308]                 added <- setdiff(names, old_names)
[13:21:04.308]                 removed <- setdiff(old_names, names)
[13:21:04.308]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.308]                   envs[common]]
[13:21:04.308]                 NAMES <- toupper(changed)
[13:21:04.308]                 args <- list()
[13:21:04.308]                 for (kk in seq_along(NAMES)) {
[13:21:04.308]                   name <- changed[[kk]]
[13:21:04.308]                   NAME <- NAMES[[kk]]
[13:21:04.308]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.308]                     next
[13:21:04.308]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.308]                 }
[13:21:04.308]                 NAMES <- toupper(added)
[13:21:04.308]                 for (kk in seq_along(NAMES)) {
[13:21:04.308]                   name <- added[[kk]]
[13:21:04.308]                   NAME <- NAMES[[kk]]
[13:21:04.308]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.308]                     next
[13:21:04.308]                   args[[name]] <- ""
[13:21:04.308]                 }
[13:21:04.308]                 NAMES <- toupper(removed)
[13:21:04.308]                 for (kk in seq_along(NAMES)) {
[13:21:04.308]                   name <- removed[[kk]]
[13:21:04.308]                   NAME <- NAMES[[kk]]
[13:21:04.308]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.308]                     next
[13:21:04.308]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.308]                 }
[13:21:04.308]                 if (length(args) > 0) 
[13:21:04.308]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.308]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.308]             }
[13:21:04.308]             else {
[13:21:04.308]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.308]             }
[13:21:04.308]             {
[13:21:04.308]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.308]                   0L) {
[13:21:04.308]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.308]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.308]                   base::options(opts)
[13:21:04.308]                 }
[13:21:04.308]                 {
[13:21:04.308]                   {
[13:21:04.308]                     NULL
[13:21:04.308]                     RNGkind("Mersenne-Twister")
[13:21:04.308]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.308]                       inherits = FALSE)
[13:21:04.308]                   }
[13:21:04.308]                   options(future.plan = NULL)
[13:21:04.308]                   if (is.na(NA_character_)) 
[13:21:04.308]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.308]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.308]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.308]                   {
[13:21:04.308]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.308]                     if (!future$lazy) 
[13:21:04.308]                       future <- run(future)
[13:21:04.308]                     invisible(future)
[13:21:04.308]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.308]                 }
[13:21:04.308]             }
[13:21:04.308]         }
[13:21:04.308]     })
[13:21:04.308]     if (TRUE) {
[13:21:04.308]         base::sink(type = "output", split = FALSE)
[13:21:04.308]         if (TRUE) {
[13:21:04.308]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.308]         }
[13:21:04.308]         else {
[13:21:04.308]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.308]         }
[13:21:04.308]         base::close(...future.stdout)
[13:21:04.308]         ...future.stdout <- NULL
[13:21:04.308]     }
[13:21:04.308]     ...future.result$conditions <- ...future.conditions
[13:21:04.308]     ...future.result$finished <- base::Sys.time()
[13:21:04.308]     ...future.result
[13:21:04.308] }
[13:21:04.309] assign_globals() ...
[13:21:04.309] List of 1
[13:21:04.309]  $ a: num 0
[13:21:04.309]  - attr(*, "where")=List of 1
[13:21:04.309]   ..$ a:<environment: R_EmptyEnv> 
[13:21:04.309]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:04.309]  - attr(*, "resolved")= logi FALSE
[13:21:04.309]  - attr(*, "total_size")= num 56
[13:21:04.314] - copied ‘a’ to environment
[13:21:04.314] assign_globals() ... done
[13:21:04.314] plan(): Setting new future strategy stack:
[13:21:04.314] List of future strategies:
[13:21:04.314] 1. sequential:
[13:21:04.314]    - args: function (..., envir = parent.frame())
[13:21:04.314]    - tweaked: FALSE
[13:21:04.314]    - call: NULL
[13:21:04.315] plan(): nbrOfWorkers() = 1
[13:21:04.315] plan(): Setting new future strategy stack:
[13:21:04.315] List of future strategies:
[13:21:04.315] 1. sequential:
[13:21:04.315]    - args: function (..., envir = parent.frame())
[13:21:04.315]    - tweaked: FALSE
[13:21:04.315]    - call: future::plan("sequential")
[13:21:04.316] plan(): nbrOfWorkers() = 1
[13:21:04.316] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[13:21:04.319] getGlobalsAndPackages() ...
[13:21:04.320] Searching for globals...
[13:21:04.320] - globals found: [2] ‘{’, ‘ii’
[13:21:04.320] Searching for globals ... DONE
[13:21:04.320] Resolving globals: FALSE
[13:21:04.321] The total size of the 1 globals is 56 bytes (56 bytes)
[13:21:04.321] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:21:04.321] - globals: [1] ‘ii’
[13:21:04.321] 
[13:21:04.321] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[13:21:04.325] getGlobalsAndPackages() ...
[13:21:04.325] Searching for globals...
[13:21:04.326] - globals found: [2] ‘{’, ‘ii’
[13:21:04.326] Searching for globals ... DONE
[13:21:04.326] Resolving globals: FALSE
[13:21:04.326] The total size of the 1 globals is 56 bytes (56 bytes)
[13:21:04.327] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:21:04.327] - globals: [1] ‘ii’
[13:21:04.327] 
[13:21:04.327] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[13:21:04.327] Packages needed by the future expression (n = 0): <none>
[13:21:04.328] Packages needed by future strategies (n = 0): <none>
[13:21:04.328] {
[13:21:04.328]     {
[13:21:04.328]         {
[13:21:04.328]             ...future.startTime <- base::Sys.time()
[13:21:04.328]             {
[13:21:04.328]                 {
[13:21:04.328]                   {
[13:21:04.328]                     base::local({
[13:21:04.328]                       has_future <- base::requireNamespace("future", 
[13:21:04.328]                         quietly = TRUE)
[13:21:04.328]                       if (has_future) {
[13:21:04.328]                         ns <- base::getNamespace("future")
[13:21:04.328]                         version <- ns[[".package"]][["version"]]
[13:21:04.328]                         if (is.null(version)) 
[13:21:04.328]                           version <- utils::packageVersion("future")
[13:21:04.328]                       }
[13:21:04.328]                       else {
[13:21:04.328]                         version <- NULL
[13:21:04.328]                       }
[13:21:04.328]                       if (!has_future || version < "1.8.0") {
[13:21:04.328]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.328]                           "", base::R.version$version.string), 
[13:21:04.328]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.328]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.328]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.328]                             "release", "version")], collapse = " "), 
[13:21:04.328]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.328]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.328]                           info)
[13:21:04.328]                         info <- base::paste(info, collapse = "; ")
[13:21:04.328]                         if (!has_future) {
[13:21:04.328]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.328]                             info)
[13:21:04.328]                         }
[13:21:04.328]                         else {
[13:21:04.328]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.328]                             info, version)
[13:21:04.328]                         }
[13:21:04.328]                         base::stop(msg)
[13:21:04.328]                       }
[13:21:04.328]                     })
[13:21:04.328]                   }
[13:21:04.328]                   options(future.plan = NULL)
[13:21:04.328]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.328]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.328]                 }
[13:21:04.328]                 ...future.workdir <- getwd()
[13:21:04.328]             }
[13:21:04.328]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.328]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.328]         }
[13:21:04.328]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.328]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.328]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.328]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.328]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.328]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.328]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.328]             base::names(...future.oldOptions))
[13:21:04.328]     }
[13:21:04.328]     if (FALSE) {
[13:21:04.328]     }
[13:21:04.328]     else {
[13:21:04.328]         if (TRUE) {
[13:21:04.328]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.328]                 open = "w")
[13:21:04.328]         }
[13:21:04.328]         else {
[13:21:04.328]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.328]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.328]         }
[13:21:04.328]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.328]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.328]             base::sink(type = "output", split = FALSE)
[13:21:04.328]             base::close(...future.stdout)
[13:21:04.328]         }, add = TRUE)
[13:21:04.328]     }
[13:21:04.328]     ...future.frame <- base::sys.nframe()
[13:21:04.328]     ...future.conditions <- base::list()
[13:21:04.328]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.328]     if (FALSE) {
[13:21:04.328]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.328]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.328]     }
[13:21:04.328]     ...future.result <- base::tryCatch({
[13:21:04.328]         base::withCallingHandlers({
[13:21:04.328]             ...future.value <- base::withVisible(base::local({
[13:21:04.328]                 ii
[13:21:04.328]             }))
[13:21:04.328]             future::FutureResult(value = ...future.value$value, 
[13:21:04.328]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.328]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.328]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.328]                     ...future.globalenv.names))
[13:21:04.328]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.328]         }, condition = base::local({
[13:21:04.328]             c <- base::c
[13:21:04.328]             inherits <- base::inherits
[13:21:04.328]             invokeRestart <- base::invokeRestart
[13:21:04.328]             length <- base::length
[13:21:04.328]             list <- base::list
[13:21:04.328]             seq.int <- base::seq.int
[13:21:04.328]             signalCondition <- base::signalCondition
[13:21:04.328]             sys.calls <- base::sys.calls
[13:21:04.328]             `[[` <- base::`[[`
[13:21:04.328]             `+` <- base::`+`
[13:21:04.328]             `<<-` <- base::`<<-`
[13:21:04.328]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.328]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.328]                   3L)]
[13:21:04.328]             }
[13:21:04.328]             function(cond) {
[13:21:04.328]                 is_error <- inherits(cond, "error")
[13:21:04.328]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.328]                   NULL)
[13:21:04.328]                 if (is_error) {
[13:21:04.328]                   sessionInformation <- function() {
[13:21:04.328]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.328]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.328]                       search = base::search(), system = base::Sys.info())
[13:21:04.328]                   }
[13:21:04.328]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.328]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.328]                     cond$call), session = sessionInformation(), 
[13:21:04.328]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.328]                   signalCondition(cond)
[13:21:04.328]                 }
[13:21:04.328]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.328]                 "immediateCondition"))) {
[13:21:04.328]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.328]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.328]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.328]                   if (TRUE && !signal) {
[13:21:04.328]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.328]                     {
[13:21:04.328]                       inherits <- base::inherits
[13:21:04.328]                       invokeRestart <- base::invokeRestart
[13:21:04.328]                       is.null <- base::is.null
[13:21:04.328]                       muffled <- FALSE
[13:21:04.328]                       if (inherits(cond, "message")) {
[13:21:04.328]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.328]                         if (muffled) 
[13:21:04.328]                           invokeRestart("muffleMessage")
[13:21:04.328]                       }
[13:21:04.328]                       else if (inherits(cond, "warning")) {
[13:21:04.328]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.328]                         if (muffled) 
[13:21:04.328]                           invokeRestart("muffleWarning")
[13:21:04.328]                       }
[13:21:04.328]                       else if (inherits(cond, "condition")) {
[13:21:04.328]                         if (!is.null(pattern)) {
[13:21:04.328]                           computeRestarts <- base::computeRestarts
[13:21:04.328]                           grepl <- base::grepl
[13:21:04.328]                           restarts <- computeRestarts(cond)
[13:21:04.328]                           for (restart in restarts) {
[13:21:04.328]                             name <- restart$name
[13:21:04.328]                             if (is.null(name)) 
[13:21:04.328]                               next
[13:21:04.328]                             if (!grepl(pattern, name)) 
[13:21:04.328]                               next
[13:21:04.328]                             invokeRestart(restart)
[13:21:04.328]                             muffled <- TRUE
[13:21:04.328]                             break
[13:21:04.328]                           }
[13:21:04.328]                         }
[13:21:04.328]                       }
[13:21:04.328]                       invisible(muffled)
[13:21:04.328]                     }
[13:21:04.328]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.328]                   }
[13:21:04.328]                 }
[13:21:04.328]                 else {
[13:21:04.328]                   if (TRUE) {
[13:21:04.328]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.328]                     {
[13:21:04.328]                       inherits <- base::inherits
[13:21:04.328]                       invokeRestart <- base::invokeRestart
[13:21:04.328]                       is.null <- base::is.null
[13:21:04.328]                       muffled <- FALSE
[13:21:04.328]                       if (inherits(cond, "message")) {
[13:21:04.328]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.328]                         if (muffled) 
[13:21:04.328]                           invokeRestart("muffleMessage")
[13:21:04.328]                       }
[13:21:04.328]                       else if (inherits(cond, "warning")) {
[13:21:04.328]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.328]                         if (muffled) 
[13:21:04.328]                           invokeRestart("muffleWarning")
[13:21:04.328]                       }
[13:21:04.328]                       else if (inherits(cond, "condition")) {
[13:21:04.328]                         if (!is.null(pattern)) {
[13:21:04.328]                           computeRestarts <- base::computeRestarts
[13:21:04.328]                           grepl <- base::grepl
[13:21:04.328]                           restarts <- computeRestarts(cond)
[13:21:04.328]                           for (restart in restarts) {
[13:21:04.328]                             name <- restart$name
[13:21:04.328]                             if (is.null(name)) 
[13:21:04.328]                               next
[13:21:04.328]                             if (!grepl(pattern, name)) 
[13:21:04.328]                               next
[13:21:04.328]                             invokeRestart(restart)
[13:21:04.328]                             muffled <- TRUE
[13:21:04.328]                             break
[13:21:04.328]                           }
[13:21:04.328]                         }
[13:21:04.328]                       }
[13:21:04.328]                       invisible(muffled)
[13:21:04.328]                     }
[13:21:04.328]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.328]                   }
[13:21:04.328]                 }
[13:21:04.328]             }
[13:21:04.328]         }))
[13:21:04.328]     }, error = function(ex) {
[13:21:04.328]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.328]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.328]                 ...future.rng), started = ...future.startTime, 
[13:21:04.328]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.328]             version = "1.8"), class = "FutureResult")
[13:21:04.328]     }, finally = {
[13:21:04.328]         if (!identical(...future.workdir, getwd())) 
[13:21:04.328]             setwd(...future.workdir)
[13:21:04.328]         {
[13:21:04.328]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.328]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.328]             }
[13:21:04.328]             base::options(...future.oldOptions)
[13:21:04.328]             if (.Platform$OS.type == "windows") {
[13:21:04.328]                 old_names <- names(...future.oldEnvVars)
[13:21:04.328]                 envs <- base::Sys.getenv()
[13:21:04.328]                 names <- names(envs)
[13:21:04.328]                 common <- intersect(names, old_names)
[13:21:04.328]                 added <- setdiff(names, old_names)
[13:21:04.328]                 removed <- setdiff(old_names, names)
[13:21:04.328]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.328]                   envs[common]]
[13:21:04.328]                 NAMES <- toupper(changed)
[13:21:04.328]                 args <- list()
[13:21:04.328]                 for (kk in seq_along(NAMES)) {
[13:21:04.328]                   name <- changed[[kk]]
[13:21:04.328]                   NAME <- NAMES[[kk]]
[13:21:04.328]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.328]                     next
[13:21:04.328]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.328]                 }
[13:21:04.328]                 NAMES <- toupper(added)
[13:21:04.328]                 for (kk in seq_along(NAMES)) {
[13:21:04.328]                   name <- added[[kk]]
[13:21:04.328]                   NAME <- NAMES[[kk]]
[13:21:04.328]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.328]                     next
[13:21:04.328]                   args[[name]] <- ""
[13:21:04.328]                 }
[13:21:04.328]                 NAMES <- toupper(removed)
[13:21:04.328]                 for (kk in seq_along(NAMES)) {
[13:21:04.328]                   name <- removed[[kk]]
[13:21:04.328]                   NAME <- NAMES[[kk]]
[13:21:04.328]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.328]                     next
[13:21:04.328]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.328]                 }
[13:21:04.328]                 if (length(args) > 0) 
[13:21:04.328]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.328]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.328]             }
[13:21:04.328]             else {
[13:21:04.328]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.328]             }
[13:21:04.328]             {
[13:21:04.328]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.328]                   0L) {
[13:21:04.328]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.328]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.328]                   base::options(opts)
[13:21:04.328]                 }
[13:21:04.328]                 {
[13:21:04.328]                   {
[13:21:04.328]                     NULL
[13:21:04.328]                     RNGkind("Mersenne-Twister")
[13:21:04.328]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.328]                       inherits = FALSE)
[13:21:04.328]                   }
[13:21:04.328]                   options(future.plan = NULL)
[13:21:04.328]                   if (is.na(NA_character_)) 
[13:21:04.328]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.328]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.328]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.328]                   {
[13:21:04.328]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.328]                     if (!future$lazy) 
[13:21:04.328]                       future <- run(future)
[13:21:04.328]                     invisible(future)
[13:21:04.328]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.328]                 }
[13:21:04.328]             }
[13:21:04.328]         }
[13:21:04.328]     })
[13:21:04.328]     if (TRUE) {
[13:21:04.328]         base::sink(type = "output", split = FALSE)
[13:21:04.328]         if (TRUE) {
[13:21:04.328]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.328]         }
[13:21:04.328]         else {
[13:21:04.328]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.328]         }
[13:21:04.328]         base::close(...future.stdout)
[13:21:04.328]         ...future.stdout <- NULL
[13:21:04.328]     }
[13:21:04.328]     ...future.result$conditions <- ...future.conditions
[13:21:04.328]     ...future.result$finished <- base::Sys.time()
[13:21:04.328]     ...future.result
[13:21:04.328] }
[13:21:04.330] assign_globals() ...
[13:21:04.330] List of 1
[13:21:04.330]  $ ii: int 1
[13:21:04.330]  - attr(*, "where")=List of 1
[13:21:04.330]   ..$ ii:<environment: R_EmptyEnv> 
[13:21:04.330]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:04.330]  - attr(*, "resolved")= logi FALSE
[13:21:04.330]  - attr(*, "total_size")= num 56
[13:21:04.332] - copied ‘ii’ to environment
[13:21:04.332] assign_globals() ... done
[13:21:04.332] plan(): Setting new future strategy stack:
[13:21:04.332] List of future strategies:
[13:21:04.332] 1. sequential:
[13:21:04.332]    - args: function (..., envir = parent.frame())
[13:21:04.332]    - tweaked: FALSE
[13:21:04.332]    - call: NULL
[13:21:04.333] plan(): nbrOfWorkers() = 1
[13:21:04.333] plan(): Setting new future strategy stack:
[13:21:04.333] List of future strategies:
[13:21:04.333] 1. sequential:
[13:21:04.333]    - args: function (..., envir = parent.frame())
[13:21:04.333]    - tweaked: FALSE
[13:21:04.333]    - call: future::plan("sequential")
[13:21:04.334] plan(): nbrOfWorkers() = 1
[13:21:04.336] SequentialFuture started (and completed)
[13:21:04.336] Packages needed by the future expression (n = 0): <none>
[13:21:04.336] Packages needed by future strategies (n = 0): <none>
[13:21:04.337] {
[13:21:04.337]     {
[13:21:04.337]         {
[13:21:04.337]             ...future.startTime <- base::Sys.time()
[13:21:04.337]             {
[13:21:04.337]                 {
[13:21:04.337]                   {
[13:21:04.337]                     base::local({
[13:21:04.337]                       has_future <- base::requireNamespace("future", 
[13:21:04.337]                         quietly = TRUE)
[13:21:04.337]                       if (has_future) {
[13:21:04.337]                         ns <- base::getNamespace("future")
[13:21:04.337]                         version <- ns[[".package"]][["version"]]
[13:21:04.337]                         if (is.null(version)) 
[13:21:04.337]                           version <- utils::packageVersion("future")
[13:21:04.337]                       }
[13:21:04.337]                       else {
[13:21:04.337]                         version <- NULL
[13:21:04.337]                       }
[13:21:04.337]                       if (!has_future || version < "1.8.0") {
[13:21:04.337]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.337]                           "", base::R.version$version.string), 
[13:21:04.337]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.337]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.337]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.337]                             "release", "version")], collapse = " "), 
[13:21:04.337]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.337]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.337]                           info)
[13:21:04.337]                         info <- base::paste(info, collapse = "; ")
[13:21:04.337]                         if (!has_future) {
[13:21:04.337]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.337]                             info)
[13:21:04.337]                         }
[13:21:04.337]                         else {
[13:21:04.337]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.337]                             info, version)
[13:21:04.337]                         }
[13:21:04.337]                         base::stop(msg)
[13:21:04.337]                       }
[13:21:04.337]                     })
[13:21:04.337]                   }
[13:21:04.337]                   options(future.plan = NULL)
[13:21:04.337]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.337]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.337]                 }
[13:21:04.337]                 ...future.workdir <- getwd()
[13:21:04.337]             }
[13:21:04.337]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.337]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.337]         }
[13:21:04.337]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.337]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.337]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.337]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.337]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.337]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.337]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.337]             base::names(...future.oldOptions))
[13:21:04.337]     }
[13:21:04.337]     if (FALSE) {
[13:21:04.337]     }
[13:21:04.337]     else {
[13:21:04.337]         if (TRUE) {
[13:21:04.337]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.337]                 open = "w")
[13:21:04.337]         }
[13:21:04.337]         else {
[13:21:04.337]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.337]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.337]         }
[13:21:04.337]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.337]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.337]             base::sink(type = "output", split = FALSE)
[13:21:04.337]             base::close(...future.stdout)
[13:21:04.337]         }, add = TRUE)
[13:21:04.337]     }
[13:21:04.337]     ...future.frame <- base::sys.nframe()
[13:21:04.337]     ...future.conditions <- base::list()
[13:21:04.337]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.337]     if (FALSE) {
[13:21:04.337]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.337]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.337]     }
[13:21:04.337]     ...future.result <- base::tryCatch({
[13:21:04.337]         base::withCallingHandlers({
[13:21:04.337]             ...future.value <- base::withVisible(base::local({
[13:21:04.337]                 ii
[13:21:04.337]             }))
[13:21:04.337]             future::FutureResult(value = ...future.value$value, 
[13:21:04.337]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.337]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.337]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.337]                     ...future.globalenv.names))
[13:21:04.337]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.337]         }, condition = base::local({
[13:21:04.337]             c <- base::c
[13:21:04.337]             inherits <- base::inherits
[13:21:04.337]             invokeRestart <- base::invokeRestart
[13:21:04.337]             length <- base::length
[13:21:04.337]             list <- base::list
[13:21:04.337]             seq.int <- base::seq.int
[13:21:04.337]             signalCondition <- base::signalCondition
[13:21:04.337]             sys.calls <- base::sys.calls
[13:21:04.337]             `[[` <- base::`[[`
[13:21:04.337]             `+` <- base::`+`
[13:21:04.337]             `<<-` <- base::`<<-`
[13:21:04.337]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.337]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.337]                   3L)]
[13:21:04.337]             }
[13:21:04.337]             function(cond) {
[13:21:04.337]                 is_error <- inherits(cond, "error")
[13:21:04.337]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.337]                   NULL)
[13:21:04.337]                 if (is_error) {
[13:21:04.337]                   sessionInformation <- function() {
[13:21:04.337]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.337]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.337]                       search = base::search(), system = base::Sys.info())
[13:21:04.337]                   }
[13:21:04.337]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.337]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.337]                     cond$call), session = sessionInformation(), 
[13:21:04.337]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.337]                   signalCondition(cond)
[13:21:04.337]                 }
[13:21:04.337]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.337]                 "immediateCondition"))) {
[13:21:04.337]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.337]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.337]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.337]                   if (TRUE && !signal) {
[13:21:04.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.337]                     {
[13:21:04.337]                       inherits <- base::inherits
[13:21:04.337]                       invokeRestart <- base::invokeRestart
[13:21:04.337]                       is.null <- base::is.null
[13:21:04.337]                       muffled <- FALSE
[13:21:04.337]                       if (inherits(cond, "message")) {
[13:21:04.337]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.337]                         if (muffled) 
[13:21:04.337]                           invokeRestart("muffleMessage")
[13:21:04.337]                       }
[13:21:04.337]                       else if (inherits(cond, "warning")) {
[13:21:04.337]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.337]                         if (muffled) 
[13:21:04.337]                           invokeRestart("muffleWarning")
[13:21:04.337]                       }
[13:21:04.337]                       else if (inherits(cond, "condition")) {
[13:21:04.337]                         if (!is.null(pattern)) {
[13:21:04.337]                           computeRestarts <- base::computeRestarts
[13:21:04.337]                           grepl <- base::grepl
[13:21:04.337]                           restarts <- computeRestarts(cond)
[13:21:04.337]                           for (restart in restarts) {
[13:21:04.337]                             name <- restart$name
[13:21:04.337]                             if (is.null(name)) 
[13:21:04.337]                               next
[13:21:04.337]                             if (!grepl(pattern, name)) 
[13:21:04.337]                               next
[13:21:04.337]                             invokeRestart(restart)
[13:21:04.337]                             muffled <- TRUE
[13:21:04.337]                             break
[13:21:04.337]                           }
[13:21:04.337]                         }
[13:21:04.337]                       }
[13:21:04.337]                       invisible(muffled)
[13:21:04.337]                     }
[13:21:04.337]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.337]                   }
[13:21:04.337]                 }
[13:21:04.337]                 else {
[13:21:04.337]                   if (TRUE) {
[13:21:04.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.337]                     {
[13:21:04.337]                       inherits <- base::inherits
[13:21:04.337]                       invokeRestart <- base::invokeRestart
[13:21:04.337]                       is.null <- base::is.null
[13:21:04.337]                       muffled <- FALSE
[13:21:04.337]                       if (inherits(cond, "message")) {
[13:21:04.337]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.337]                         if (muffled) 
[13:21:04.337]                           invokeRestart("muffleMessage")
[13:21:04.337]                       }
[13:21:04.337]                       else if (inherits(cond, "warning")) {
[13:21:04.337]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.337]                         if (muffled) 
[13:21:04.337]                           invokeRestart("muffleWarning")
[13:21:04.337]                       }
[13:21:04.337]                       else if (inherits(cond, "condition")) {
[13:21:04.337]                         if (!is.null(pattern)) {
[13:21:04.337]                           computeRestarts <- base::computeRestarts
[13:21:04.337]                           grepl <- base::grepl
[13:21:04.337]                           restarts <- computeRestarts(cond)
[13:21:04.337]                           for (restart in restarts) {
[13:21:04.337]                             name <- restart$name
[13:21:04.337]                             if (is.null(name)) 
[13:21:04.337]                               next
[13:21:04.337]                             if (!grepl(pattern, name)) 
[13:21:04.337]                               next
[13:21:04.337]                             invokeRestart(restart)
[13:21:04.337]                             muffled <- TRUE
[13:21:04.337]                             break
[13:21:04.337]                           }
[13:21:04.337]                         }
[13:21:04.337]                       }
[13:21:04.337]                       invisible(muffled)
[13:21:04.337]                     }
[13:21:04.337]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.337]                   }
[13:21:04.337]                 }
[13:21:04.337]             }
[13:21:04.337]         }))
[13:21:04.337]     }, error = function(ex) {
[13:21:04.337]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.337]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.337]                 ...future.rng), started = ...future.startTime, 
[13:21:04.337]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.337]             version = "1.8"), class = "FutureResult")
[13:21:04.337]     }, finally = {
[13:21:04.337]         if (!identical(...future.workdir, getwd())) 
[13:21:04.337]             setwd(...future.workdir)
[13:21:04.337]         {
[13:21:04.337]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.337]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.337]             }
[13:21:04.337]             base::options(...future.oldOptions)
[13:21:04.337]             if (.Platform$OS.type == "windows") {
[13:21:04.337]                 old_names <- names(...future.oldEnvVars)
[13:21:04.337]                 envs <- base::Sys.getenv()
[13:21:04.337]                 names <- names(envs)
[13:21:04.337]                 common <- intersect(names, old_names)
[13:21:04.337]                 added <- setdiff(names, old_names)
[13:21:04.337]                 removed <- setdiff(old_names, names)
[13:21:04.337]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.337]                   envs[common]]
[13:21:04.337]                 NAMES <- toupper(changed)
[13:21:04.337]                 args <- list()
[13:21:04.337]                 for (kk in seq_along(NAMES)) {
[13:21:04.337]                   name <- changed[[kk]]
[13:21:04.337]                   NAME <- NAMES[[kk]]
[13:21:04.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.337]                     next
[13:21:04.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.337]                 }
[13:21:04.337]                 NAMES <- toupper(added)
[13:21:04.337]                 for (kk in seq_along(NAMES)) {
[13:21:04.337]                   name <- added[[kk]]
[13:21:04.337]                   NAME <- NAMES[[kk]]
[13:21:04.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.337]                     next
[13:21:04.337]                   args[[name]] <- ""
[13:21:04.337]                 }
[13:21:04.337]                 NAMES <- toupper(removed)
[13:21:04.337]                 for (kk in seq_along(NAMES)) {
[13:21:04.337]                   name <- removed[[kk]]
[13:21:04.337]                   NAME <- NAMES[[kk]]
[13:21:04.337]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.337]                     next
[13:21:04.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.337]                 }
[13:21:04.337]                 if (length(args) > 0) 
[13:21:04.337]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.337]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.337]             }
[13:21:04.337]             else {
[13:21:04.337]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.337]             }
[13:21:04.337]             {
[13:21:04.337]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.337]                   0L) {
[13:21:04.337]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.337]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.337]                   base::options(opts)
[13:21:04.337]                 }
[13:21:04.337]                 {
[13:21:04.337]                   {
[13:21:04.337]                     NULL
[13:21:04.337]                     RNGkind("Mersenne-Twister")
[13:21:04.337]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.337]                       inherits = FALSE)
[13:21:04.337]                   }
[13:21:04.337]                   options(future.plan = NULL)
[13:21:04.337]                   if (is.na(NA_character_)) 
[13:21:04.337]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.337]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.337]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.337]                   {
[13:21:04.337]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.337]                     if (!future$lazy) 
[13:21:04.337]                       future <- run(future)
[13:21:04.337]                     invisible(future)
[13:21:04.337]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.337]                 }
[13:21:04.337]             }
[13:21:04.337]         }
[13:21:04.337]     })
[13:21:04.337]     if (TRUE) {
[13:21:04.337]         base::sink(type = "output", split = FALSE)
[13:21:04.337]         if (TRUE) {
[13:21:04.337]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.337]         }
[13:21:04.337]         else {
[13:21:04.337]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.337]         }
[13:21:04.337]         base::close(...future.stdout)
[13:21:04.337]         ...future.stdout <- NULL
[13:21:04.337]     }
[13:21:04.337]     ...future.result$conditions <- ...future.conditions
[13:21:04.337]     ...future.result$finished <- base::Sys.time()
[13:21:04.337]     ...future.result
[13:21:04.337] }
[13:21:04.338] assign_globals() ...
[13:21:04.338] List of 1
[13:21:04.338]  $ ii: int 2
[13:21:04.338]  - attr(*, "where")=List of 1
[13:21:04.338]   ..$ ii:<environment: R_EmptyEnv> 
[13:21:04.338]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:04.338]  - attr(*, "resolved")= logi FALSE
[13:21:04.338]  - attr(*, "total_size")= num 56
[13:21:04.341] - copied ‘ii’ to environment
[13:21:04.341] assign_globals() ... done
[13:21:04.341] plan(): Setting new future strategy stack:
[13:21:04.341] List of future strategies:
[13:21:04.341] 1. sequential:
[13:21:04.341]    - args: function (..., envir = parent.frame())
[13:21:04.341]    - tweaked: FALSE
[13:21:04.341]    - call: NULL
[13:21:04.341] plan(): nbrOfWorkers() = 1
[13:21:04.342] plan(): Setting new future strategy stack:
[13:21:04.342] List of future strategies:
[13:21:04.342] 1. sequential:
[13:21:04.342]    - args: function (..., envir = parent.frame())
[13:21:04.342]    - tweaked: FALSE
[13:21:04.342]    - call: future::plan("sequential")
[13:21:04.343] plan(): nbrOfWorkers() = 1
[13:21:04.343] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[13:21:04.343] getGlobalsAndPackages() ...
[13:21:04.343] Searching for globals...
[13:21:04.343] - globals found: [1] ‘.libPaths’
[13:21:04.344] Searching for globals ... DONE
[13:21:04.344] Resolving globals: FALSE
[13:21:04.344] 
[13:21:04.344] 
[13:21:04.344] getGlobalsAndPackages() ... DONE
[13:21:04.345] run() for ‘Future’ ...
[13:21:04.345] - state: ‘created’
[13:21:04.345] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:04.345] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:04.345] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:04.345]   - Field: ‘label’
[13:21:04.345]   - Field: ‘local’
[13:21:04.345]   - Field: ‘owner’
[13:21:04.346]   - Field: ‘envir’
[13:21:04.346]   - Field: ‘packages’
[13:21:04.346]   - Field: ‘gc’
[13:21:04.346]   - Field: ‘conditions’
[13:21:04.346]   - Field: ‘expr’
[13:21:04.346]   - Field: ‘uuid’
[13:21:04.346]   - Field: ‘seed’
[13:21:04.346]   - Field: ‘version’
[13:21:04.346]   - Field: ‘result’
[13:21:04.346]   - Field: ‘asynchronous’
[13:21:04.346]   - Field: ‘calls’
[13:21:04.347]   - Field: ‘globals’
[13:21:04.347]   - Field: ‘stdout’
[13:21:04.347]   - Field: ‘earlySignal’
[13:21:04.347]   - Field: ‘lazy’
[13:21:04.347]   - Field: ‘state’
[13:21:04.347] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:04.347] - Launch lazy future ...
[13:21:04.347] Packages needed by the future expression (n = 0): <none>
[13:21:04.347] Packages needed by future strategies (n = 0): <none>
[13:21:04.348] {
[13:21:04.348]     {
[13:21:04.348]         {
[13:21:04.348]             ...future.startTime <- base::Sys.time()
[13:21:04.348]             {
[13:21:04.348]                 {
[13:21:04.348]                   {
[13:21:04.348]                     base::local({
[13:21:04.348]                       has_future <- base::requireNamespace("future", 
[13:21:04.348]                         quietly = TRUE)
[13:21:04.348]                       if (has_future) {
[13:21:04.348]                         ns <- base::getNamespace("future")
[13:21:04.348]                         version <- ns[[".package"]][["version"]]
[13:21:04.348]                         if (is.null(version)) 
[13:21:04.348]                           version <- utils::packageVersion("future")
[13:21:04.348]                       }
[13:21:04.348]                       else {
[13:21:04.348]                         version <- NULL
[13:21:04.348]                       }
[13:21:04.348]                       if (!has_future || version < "1.8.0") {
[13:21:04.348]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.348]                           "", base::R.version$version.string), 
[13:21:04.348]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.348]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.348]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.348]                             "release", "version")], collapse = " "), 
[13:21:04.348]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.348]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.348]                           info)
[13:21:04.348]                         info <- base::paste(info, collapse = "; ")
[13:21:04.348]                         if (!has_future) {
[13:21:04.348]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.348]                             info)
[13:21:04.348]                         }
[13:21:04.348]                         else {
[13:21:04.348]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.348]                             info, version)
[13:21:04.348]                         }
[13:21:04.348]                         base::stop(msg)
[13:21:04.348]                       }
[13:21:04.348]                     })
[13:21:04.348]                   }
[13:21:04.348]                   options(future.plan = NULL)
[13:21:04.348]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.348]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.348]                 }
[13:21:04.348]                 ...future.workdir <- getwd()
[13:21:04.348]             }
[13:21:04.348]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.348]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.348]         }
[13:21:04.348]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.348]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.348]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.348]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.348]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.348]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.348]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.348]             base::names(...future.oldOptions))
[13:21:04.348]     }
[13:21:04.348]     if (FALSE) {
[13:21:04.348]     }
[13:21:04.348]     else {
[13:21:04.348]         if (TRUE) {
[13:21:04.348]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.348]                 open = "w")
[13:21:04.348]         }
[13:21:04.348]         else {
[13:21:04.348]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.348]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.348]         }
[13:21:04.348]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.348]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.348]             base::sink(type = "output", split = FALSE)
[13:21:04.348]             base::close(...future.stdout)
[13:21:04.348]         }, add = TRUE)
[13:21:04.348]     }
[13:21:04.348]     ...future.frame <- base::sys.nframe()
[13:21:04.348]     ...future.conditions <- base::list()
[13:21:04.348]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.348]     if (FALSE) {
[13:21:04.348]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.348]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.348]     }
[13:21:04.348]     ...future.result <- base::tryCatch({
[13:21:04.348]         base::withCallingHandlers({
[13:21:04.348]             ...future.value <- base::withVisible(base::local(.libPaths()))
[13:21:04.348]             future::FutureResult(value = ...future.value$value, 
[13:21:04.348]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.348]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.348]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.348]                     ...future.globalenv.names))
[13:21:04.348]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.348]         }, condition = base::local({
[13:21:04.348]             c <- base::c
[13:21:04.348]             inherits <- base::inherits
[13:21:04.348]             invokeRestart <- base::invokeRestart
[13:21:04.348]             length <- base::length
[13:21:04.348]             list <- base::list
[13:21:04.348]             seq.int <- base::seq.int
[13:21:04.348]             signalCondition <- base::signalCondition
[13:21:04.348]             sys.calls <- base::sys.calls
[13:21:04.348]             `[[` <- base::`[[`
[13:21:04.348]             `+` <- base::`+`
[13:21:04.348]             `<<-` <- base::`<<-`
[13:21:04.348]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.348]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.348]                   3L)]
[13:21:04.348]             }
[13:21:04.348]             function(cond) {
[13:21:04.348]                 is_error <- inherits(cond, "error")
[13:21:04.348]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.348]                   NULL)
[13:21:04.348]                 if (is_error) {
[13:21:04.348]                   sessionInformation <- function() {
[13:21:04.348]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.348]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.348]                       search = base::search(), system = base::Sys.info())
[13:21:04.348]                   }
[13:21:04.348]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.348]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.348]                     cond$call), session = sessionInformation(), 
[13:21:04.348]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.348]                   signalCondition(cond)
[13:21:04.348]                 }
[13:21:04.348]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.348]                 "immediateCondition"))) {
[13:21:04.348]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.348]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.348]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.348]                   if (TRUE && !signal) {
[13:21:04.348]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.348]                     {
[13:21:04.348]                       inherits <- base::inherits
[13:21:04.348]                       invokeRestart <- base::invokeRestart
[13:21:04.348]                       is.null <- base::is.null
[13:21:04.348]                       muffled <- FALSE
[13:21:04.348]                       if (inherits(cond, "message")) {
[13:21:04.348]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.348]                         if (muffled) 
[13:21:04.348]                           invokeRestart("muffleMessage")
[13:21:04.348]                       }
[13:21:04.348]                       else if (inherits(cond, "warning")) {
[13:21:04.348]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.348]                         if (muffled) 
[13:21:04.348]                           invokeRestart("muffleWarning")
[13:21:04.348]                       }
[13:21:04.348]                       else if (inherits(cond, "condition")) {
[13:21:04.348]                         if (!is.null(pattern)) {
[13:21:04.348]                           computeRestarts <- base::computeRestarts
[13:21:04.348]                           grepl <- base::grepl
[13:21:04.348]                           restarts <- computeRestarts(cond)
[13:21:04.348]                           for (restart in restarts) {
[13:21:04.348]                             name <- restart$name
[13:21:04.348]                             if (is.null(name)) 
[13:21:04.348]                               next
[13:21:04.348]                             if (!grepl(pattern, name)) 
[13:21:04.348]                               next
[13:21:04.348]                             invokeRestart(restart)
[13:21:04.348]                             muffled <- TRUE
[13:21:04.348]                             break
[13:21:04.348]                           }
[13:21:04.348]                         }
[13:21:04.348]                       }
[13:21:04.348]                       invisible(muffled)
[13:21:04.348]                     }
[13:21:04.348]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.348]                   }
[13:21:04.348]                 }
[13:21:04.348]                 else {
[13:21:04.348]                   if (TRUE) {
[13:21:04.348]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.348]                     {
[13:21:04.348]                       inherits <- base::inherits
[13:21:04.348]                       invokeRestart <- base::invokeRestart
[13:21:04.348]                       is.null <- base::is.null
[13:21:04.348]                       muffled <- FALSE
[13:21:04.348]                       if (inherits(cond, "message")) {
[13:21:04.348]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.348]                         if (muffled) 
[13:21:04.348]                           invokeRestart("muffleMessage")
[13:21:04.348]                       }
[13:21:04.348]                       else if (inherits(cond, "warning")) {
[13:21:04.348]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.348]                         if (muffled) 
[13:21:04.348]                           invokeRestart("muffleWarning")
[13:21:04.348]                       }
[13:21:04.348]                       else if (inherits(cond, "condition")) {
[13:21:04.348]                         if (!is.null(pattern)) {
[13:21:04.348]                           computeRestarts <- base::computeRestarts
[13:21:04.348]                           grepl <- base::grepl
[13:21:04.348]                           restarts <- computeRestarts(cond)
[13:21:04.348]                           for (restart in restarts) {
[13:21:04.348]                             name <- restart$name
[13:21:04.348]                             if (is.null(name)) 
[13:21:04.348]                               next
[13:21:04.348]                             if (!grepl(pattern, name)) 
[13:21:04.348]                               next
[13:21:04.348]                             invokeRestart(restart)
[13:21:04.348]                             muffled <- TRUE
[13:21:04.348]                             break
[13:21:04.348]                           }
[13:21:04.348]                         }
[13:21:04.348]                       }
[13:21:04.348]                       invisible(muffled)
[13:21:04.348]                     }
[13:21:04.348]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.348]                   }
[13:21:04.348]                 }
[13:21:04.348]             }
[13:21:04.348]         }))
[13:21:04.348]     }, error = function(ex) {
[13:21:04.348]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.348]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.348]                 ...future.rng), started = ...future.startTime, 
[13:21:04.348]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.348]             version = "1.8"), class = "FutureResult")
[13:21:04.348]     }, finally = {
[13:21:04.348]         if (!identical(...future.workdir, getwd())) 
[13:21:04.348]             setwd(...future.workdir)
[13:21:04.348]         {
[13:21:04.348]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.348]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.348]             }
[13:21:04.348]             base::options(...future.oldOptions)
[13:21:04.348]             if (.Platform$OS.type == "windows") {
[13:21:04.348]                 old_names <- names(...future.oldEnvVars)
[13:21:04.348]                 envs <- base::Sys.getenv()
[13:21:04.348]                 names <- names(envs)
[13:21:04.348]                 common <- intersect(names, old_names)
[13:21:04.348]                 added <- setdiff(names, old_names)
[13:21:04.348]                 removed <- setdiff(old_names, names)
[13:21:04.348]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.348]                   envs[common]]
[13:21:04.348]                 NAMES <- toupper(changed)
[13:21:04.348]                 args <- list()
[13:21:04.348]                 for (kk in seq_along(NAMES)) {
[13:21:04.348]                   name <- changed[[kk]]
[13:21:04.348]                   NAME <- NAMES[[kk]]
[13:21:04.348]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.348]                     next
[13:21:04.348]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.348]                 }
[13:21:04.348]                 NAMES <- toupper(added)
[13:21:04.348]                 for (kk in seq_along(NAMES)) {
[13:21:04.348]                   name <- added[[kk]]
[13:21:04.348]                   NAME <- NAMES[[kk]]
[13:21:04.348]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.348]                     next
[13:21:04.348]                   args[[name]] <- ""
[13:21:04.348]                 }
[13:21:04.348]                 NAMES <- toupper(removed)
[13:21:04.348]                 for (kk in seq_along(NAMES)) {
[13:21:04.348]                   name <- removed[[kk]]
[13:21:04.348]                   NAME <- NAMES[[kk]]
[13:21:04.348]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.348]                     next
[13:21:04.348]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.348]                 }
[13:21:04.348]                 if (length(args) > 0) 
[13:21:04.348]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.348]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.348]             }
[13:21:04.348]             else {
[13:21:04.348]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.348]             }
[13:21:04.348]             {
[13:21:04.348]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.348]                   0L) {
[13:21:04.348]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.348]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.348]                   base::options(opts)
[13:21:04.348]                 }
[13:21:04.348]                 {
[13:21:04.348]                   {
[13:21:04.348]                     NULL
[13:21:04.348]                     RNGkind("Mersenne-Twister")
[13:21:04.348]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.348]                       inherits = FALSE)
[13:21:04.348]                   }
[13:21:04.348]                   options(future.plan = NULL)
[13:21:04.348]                   if (is.na(NA_character_)) 
[13:21:04.348]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.348]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.348]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.348]                   {
[13:21:04.348]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.348]                     if (!future$lazy) 
[13:21:04.348]                       future <- run(future)
[13:21:04.348]                     invisible(future)
[13:21:04.348]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.348]                 }
[13:21:04.348]             }
[13:21:04.348]         }
[13:21:04.348]     })
[13:21:04.348]     if (TRUE) {
[13:21:04.348]         base::sink(type = "output", split = FALSE)
[13:21:04.348]         if (TRUE) {
[13:21:04.348]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.348]         }
[13:21:04.348]         else {
[13:21:04.348]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.348]         }
[13:21:04.348]         base::close(...future.stdout)
[13:21:04.348]         ...future.stdout <- NULL
[13:21:04.348]     }
[13:21:04.348]     ...future.result$conditions <- ...future.conditions
[13:21:04.348]     ...future.result$finished <- base::Sys.time()
[13:21:04.348]     ...future.result
[13:21:04.348] }
[13:21:04.349] plan(): Setting new future strategy stack:
[13:21:04.350] List of future strategies:
[13:21:04.350] 1. sequential:
[13:21:04.350]    - args: function (..., envir = parent.frame())
[13:21:04.350]    - tweaked: FALSE
[13:21:04.350]    - call: NULL
[13:21:04.350] plan(): nbrOfWorkers() = 1
[13:21:04.351] plan(): Setting new future strategy stack:
[13:21:04.351] List of future strategies:
[13:21:04.351] 1. sequential:
[13:21:04.351]    - args: function (..., envir = parent.frame())
[13:21:04.351]    - tweaked: FALSE
[13:21:04.351]    - call: future::plan("sequential")
[13:21:04.351] plan(): nbrOfWorkers() = 1
[13:21:04.351] SequentialFuture started (and completed)
[13:21:04.351] - Launch lazy future ... done
[13:21:04.351] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[13:21:04.356] getGlobalsAndPackages() ...
[13:21:04.356] Searching for globals...
[13:21:04.356] - globals found: [2] ‘{’, ‘stop’
[13:21:04.357] Searching for globals ... DONE
[13:21:04.357] Resolving globals: FALSE
[13:21:04.357] 
[13:21:04.357] 
[13:21:04.357] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:04.358] Packages needed by the future expression (n = 0): <none>
[13:21:04.358] Packages needed by future strategies (n = 0): <none>
[13:21:04.358] {
[13:21:04.358]     {
[13:21:04.358]         {
[13:21:04.358]             ...future.startTime <- base::Sys.time()
[13:21:04.358]             {
[13:21:04.358]                 {
[13:21:04.358]                   {
[13:21:04.358]                     base::local({
[13:21:04.358]                       has_future <- base::requireNamespace("future", 
[13:21:04.358]                         quietly = TRUE)
[13:21:04.358]                       if (has_future) {
[13:21:04.358]                         ns <- base::getNamespace("future")
[13:21:04.358]                         version <- ns[[".package"]][["version"]]
[13:21:04.358]                         if (is.null(version)) 
[13:21:04.358]                           version <- utils::packageVersion("future")
[13:21:04.358]                       }
[13:21:04.358]                       else {
[13:21:04.358]                         version <- NULL
[13:21:04.358]                       }
[13:21:04.358]                       if (!has_future || version < "1.8.0") {
[13:21:04.358]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.358]                           "", base::R.version$version.string), 
[13:21:04.358]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.358]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.358]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.358]                             "release", "version")], collapse = " "), 
[13:21:04.358]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.358]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.358]                           info)
[13:21:04.358]                         info <- base::paste(info, collapse = "; ")
[13:21:04.358]                         if (!has_future) {
[13:21:04.358]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.358]                             info)
[13:21:04.358]                         }
[13:21:04.358]                         else {
[13:21:04.358]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.358]                             info, version)
[13:21:04.358]                         }
[13:21:04.358]                         base::stop(msg)
[13:21:04.358]                       }
[13:21:04.358]                     })
[13:21:04.358]                   }
[13:21:04.358]                   options(future.plan = NULL)
[13:21:04.358]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.358]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.358]                 }
[13:21:04.358]                 ...future.workdir <- getwd()
[13:21:04.358]             }
[13:21:04.358]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.358]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.358]         }
[13:21:04.358]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.358]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.358]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.358]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.358]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.358]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.358]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.358]             base::names(...future.oldOptions))
[13:21:04.358]     }
[13:21:04.358]     if (FALSE) {
[13:21:04.358]     }
[13:21:04.358]     else {
[13:21:04.358]         if (TRUE) {
[13:21:04.358]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.358]                 open = "w")
[13:21:04.358]         }
[13:21:04.358]         else {
[13:21:04.358]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.358]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.358]         }
[13:21:04.358]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.358]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.358]             base::sink(type = "output", split = FALSE)
[13:21:04.358]             base::close(...future.stdout)
[13:21:04.358]         }, add = TRUE)
[13:21:04.358]     }
[13:21:04.358]     ...future.frame <- base::sys.nframe()
[13:21:04.358]     ...future.conditions <- base::list()
[13:21:04.358]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.358]     if (FALSE) {
[13:21:04.358]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.358]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.358]     }
[13:21:04.358]     ...future.result <- base::tryCatch({
[13:21:04.358]         base::withCallingHandlers({
[13:21:04.358]             ...future.value <- base::withVisible(base::local({
[13:21:04.358]                 stop("Whoops!")
[13:21:04.358]                 1
[13:21:04.358]             }))
[13:21:04.358]             future::FutureResult(value = ...future.value$value, 
[13:21:04.358]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.358]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.358]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.358]                     ...future.globalenv.names))
[13:21:04.358]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.358]         }, condition = base::local({
[13:21:04.358]             c <- base::c
[13:21:04.358]             inherits <- base::inherits
[13:21:04.358]             invokeRestart <- base::invokeRestart
[13:21:04.358]             length <- base::length
[13:21:04.358]             list <- base::list
[13:21:04.358]             seq.int <- base::seq.int
[13:21:04.358]             signalCondition <- base::signalCondition
[13:21:04.358]             sys.calls <- base::sys.calls
[13:21:04.358]             `[[` <- base::`[[`
[13:21:04.358]             `+` <- base::`+`
[13:21:04.358]             `<<-` <- base::`<<-`
[13:21:04.358]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.358]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.358]                   3L)]
[13:21:04.358]             }
[13:21:04.358]             function(cond) {
[13:21:04.358]                 is_error <- inherits(cond, "error")
[13:21:04.358]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.358]                   NULL)
[13:21:04.358]                 if (is_error) {
[13:21:04.358]                   sessionInformation <- function() {
[13:21:04.358]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.358]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.358]                       search = base::search(), system = base::Sys.info())
[13:21:04.358]                   }
[13:21:04.358]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.358]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.358]                     cond$call), session = sessionInformation(), 
[13:21:04.358]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.358]                   signalCondition(cond)
[13:21:04.358]                 }
[13:21:04.358]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.358]                 "immediateCondition"))) {
[13:21:04.358]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.358]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.358]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.358]                   if (TRUE && !signal) {
[13:21:04.358]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.358]                     {
[13:21:04.358]                       inherits <- base::inherits
[13:21:04.358]                       invokeRestart <- base::invokeRestart
[13:21:04.358]                       is.null <- base::is.null
[13:21:04.358]                       muffled <- FALSE
[13:21:04.358]                       if (inherits(cond, "message")) {
[13:21:04.358]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.358]                         if (muffled) 
[13:21:04.358]                           invokeRestart("muffleMessage")
[13:21:04.358]                       }
[13:21:04.358]                       else if (inherits(cond, "warning")) {
[13:21:04.358]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.358]                         if (muffled) 
[13:21:04.358]                           invokeRestart("muffleWarning")
[13:21:04.358]                       }
[13:21:04.358]                       else if (inherits(cond, "condition")) {
[13:21:04.358]                         if (!is.null(pattern)) {
[13:21:04.358]                           computeRestarts <- base::computeRestarts
[13:21:04.358]                           grepl <- base::grepl
[13:21:04.358]                           restarts <- computeRestarts(cond)
[13:21:04.358]                           for (restart in restarts) {
[13:21:04.358]                             name <- restart$name
[13:21:04.358]                             if (is.null(name)) 
[13:21:04.358]                               next
[13:21:04.358]                             if (!grepl(pattern, name)) 
[13:21:04.358]                               next
[13:21:04.358]                             invokeRestart(restart)
[13:21:04.358]                             muffled <- TRUE
[13:21:04.358]                             break
[13:21:04.358]                           }
[13:21:04.358]                         }
[13:21:04.358]                       }
[13:21:04.358]                       invisible(muffled)
[13:21:04.358]                     }
[13:21:04.358]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.358]                   }
[13:21:04.358]                 }
[13:21:04.358]                 else {
[13:21:04.358]                   if (TRUE) {
[13:21:04.358]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.358]                     {
[13:21:04.358]                       inherits <- base::inherits
[13:21:04.358]                       invokeRestart <- base::invokeRestart
[13:21:04.358]                       is.null <- base::is.null
[13:21:04.358]                       muffled <- FALSE
[13:21:04.358]                       if (inherits(cond, "message")) {
[13:21:04.358]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.358]                         if (muffled) 
[13:21:04.358]                           invokeRestart("muffleMessage")
[13:21:04.358]                       }
[13:21:04.358]                       else if (inherits(cond, "warning")) {
[13:21:04.358]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.358]                         if (muffled) 
[13:21:04.358]                           invokeRestart("muffleWarning")
[13:21:04.358]                       }
[13:21:04.358]                       else if (inherits(cond, "condition")) {
[13:21:04.358]                         if (!is.null(pattern)) {
[13:21:04.358]                           computeRestarts <- base::computeRestarts
[13:21:04.358]                           grepl <- base::grepl
[13:21:04.358]                           restarts <- computeRestarts(cond)
[13:21:04.358]                           for (restart in restarts) {
[13:21:04.358]                             name <- restart$name
[13:21:04.358]                             if (is.null(name)) 
[13:21:04.358]                               next
[13:21:04.358]                             if (!grepl(pattern, name)) 
[13:21:04.358]                               next
[13:21:04.358]                             invokeRestart(restart)
[13:21:04.358]                             muffled <- TRUE
[13:21:04.358]                             break
[13:21:04.358]                           }
[13:21:04.358]                         }
[13:21:04.358]                       }
[13:21:04.358]                       invisible(muffled)
[13:21:04.358]                     }
[13:21:04.358]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.358]                   }
[13:21:04.358]                 }
[13:21:04.358]             }
[13:21:04.358]         }))
[13:21:04.358]     }, error = function(ex) {
[13:21:04.358]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.358]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.358]                 ...future.rng), started = ...future.startTime, 
[13:21:04.358]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.358]             version = "1.8"), class = "FutureResult")
[13:21:04.358]     }, finally = {
[13:21:04.358]         if (!identical(...future.workdir, getwd())) 
[13:21:04.358]             setwd(...future.workdir)
[13:21:04.358]         {
[13:21:04.358]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.358]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.358]             }
[13:21:04.358]             base::options(...future.oldOptions)
[13:21:04.358]             if (.Platform$OS.type == "windows") {
[13:21:04.358]                 old_names <- names(...future.oldEnvVars)
[13:21:04.358]                 envs <- base::Sys.getenv()
[13:21:04.358]                 names <- names(envs)
[13:21:04.358]                 common <- intersect(names, old_names)
[13:21:04.358]                 added <- setdiff(names, old_names)
[13:21:04.358]                 removed <- setdiff(old_names, names)
[13:21:04.358]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.358]                   envs[common]]
[13:21:04.358]                 NAMES <- toupper(changed)
[13:21:04.358]                 args <- list()
[13:21:04.358]                 for (kk in seq_along(NAMES)) {
[13:21:04.358]                   name <- changed[[kk]]
[13:21:04.358]                   NAME <- NAMES[[kk]]
[13:21:04.358]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.358]                     next
[13:21:04.358]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.358]                 }
[13:21:04.358]                 NAMES <- toupper(added)
[13:21:04.358]                 for (kk in seq_along(NAMES)) {
[13:21:04.358]                   name <- added[[kk]]
[13:21:04.358]                   NAME <- NAMES[[kk]]
[13:21:04.358]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.358]                     next
[13:21:04.358]                   args[[name]] <- ""
[13:21:04.358]                 }
[13:21:04.358]                 NAMES <- toupper(removed)
[13:21:04.358]                 for (kk in seq_along(NAMES)) {
[13:21:04.358]                   name <- removed[[kk]]
[13:21:04.358]                   NAME <- NAMES[[kk]]
[13:21:04.358]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.358]                     next
[13:21:04.358]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.358]                 }
[13:21:04.358]                 if (length(args) > 0) 
[13:21:04.358]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.358]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.358]             }
[13:21:04.358]             else {
[13:21:04.358]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.358]             }
[13:21:04.358]             {
[13:21:04.358]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.358]                   0L) {
[13:21:04.358]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.358]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.358]                   base::options(opts)
[13:21:04.358]                 }
[13:21:04.358]                 {
[13:21:04.358]                   {
[13:21:04.358]                     NULL
[13:21:04.358]                     RNGkind("Mersenne-Twister")
[13:21:04.358]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.358]                       inherits = FALSE)
[13:21:04.358]                   }
[13:21:04.358]                   options(future.plan = NULL)
[13:21:04.358]                   if (is.na(NA_character_)) 
[13:21:04.358]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.358]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.358]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.358]                   {
[13:21:04.358]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.358]                     if (!future$lazy) 
[13:21:04.358]                       future <- run(future)
[13:21:04.358]                     invisible(future)
[13:21:04.358]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.358]                 }
[13:21:04.358]             }
[13:21:04.358]         }
[13:21:04.358]     })
[13:21:04.358]     if (TRUE) {
[13:21:04.358]         base::sink(type = "output", split = FALSE)
[13:21:04.358]         if (TRUE) {
[13:21:04.358]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.358]         }
[13:21:04.358]         else {
[13:21:04.358]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.358]         }
[13:21:04.358]         base::close(...future.stdout)
[13:21:04.358]         ...future.stdout <- NULL
[13:21:04.358]     }
[13:21:04.358]     ...future.result$conditions <- ...future.conditions
[13:21:04.358]     ...future.result$finished <- base::Sys.time()
[13:21:04.358]     ...future.result
[13:21:04.358] }
[13:21:04.360] plan(): Setting new future strategy stack:
[13:21:04.360] List of future strategies:
[13:21:04.360] 1. sequential:
[13:21:04.360]    - args: function (..., envir = parent.frame())
[13:21:04.360]    - tweaked: FALSE
[13:21:04.360]    - call: NULL
[13:21:04.360] plan(): nbrOfWorkers() = 1
[13:21:04.361] plan(): Setting new future strategy stack:
[13:21:04.361] List of future strategies:
[13:21:04.361] 1. sequential:
[13:21:04.361]    - args: function (..., envir = parent.frame())
[13:21:04.361]    - tweaked: FALSE
[13:21:04.361]    - call: future::plan("sequential")
[13:21:04.362] plan(): nbrOfWorkers() = 1
[13:21:04.362] SequentialFuture started (and completed)
[13:21:04.362] signalConditions() ...
[13:21:04.362]  - include = ‘immediateCondition’
[13:21:04.362]  - exclude = 
[13:21:04.362]  - resignal = FALSE
[13:21:04.362]  - Number of conditions: 1
[13:21:04.363] signalConditions() ... done
[13:21:04.363] signalConditions() ...
[13:21:04.363]  - include = ‘immediateCondition’
[13:21:04.363]  - exclude = 
[13:21:04.363]  - resignal = FALSE
[13:21:04.363]  - Number of conditions: 1
[13:21:04.363] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:21:04.363] signalConditions() ...
[13:21:04.363]  - include = ‘immediateCondition’
[13:21:04.364]  - exclude = 
[13:21:04.364]  - resignal = FALSE
[13:21:04.364]  - Number of conditions: 1
[13:21:04.364] signalConditions() ... done
[13:21:04.364] Future state: ‘finished’
[13:21:04.364] signalConditions() ...
[13:21:04.364]  - include = ‘condition’
[13:21:04.364]  - exclude = ‘immediateCondition’
[13:21:04.364]  - resignal = TRUE
[13:21:04.364]  - Number of conditions: 1
[13:21:04.364]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:21:04.365] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:21:04.365] signalConditions() ...
[13:21:04.365]  - include = ‘immediateCondition’
[13:21:04.365]  - exclude = 
[13:21:04.365]  - resignal = FALSE
[13:21:04.365]  - Number of conditions: 1
[13:21:04.365] signalConditions() ... done
[13:21:04.366] Future state: ‘finished’
[13:21:04.366] signalConditions() ...
[13:21:04.366]  - include = ‘condition’
[13:21:04.366]  - exclude = ‘immediateCondition’
[13:21:04.366]  - resignal = TRUE
[13:21:04.366]  - Number of conditions: 1
[13:21:04.366]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:21:04.366] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[13:21:04.369] getGlobalsAndPackages() ...
[13:21:04.370] Searching for globals...
[13:21:04.372] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[13:21:04.372] Searching for globals ... DONE
[13:21:04.372] Resolving globals: FALSE
[13:21:04.373] 
[13:21:04.373] 
[13:21:04.373] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:04.374] Packages needed by the future expression (n = 0): <none>
[13:21:04.374] Packages needed by future strategies (n = 0): <none>
[13:21:04.374] {
[13:21:04.374]     {
[13:21:04.374]         {
[13:21:04.374]             ...future.startTime <- base::Sys.time()
[13:21:04.374]             {
[13:21:04.374]                 {
[13:21:04.374]                   {
[13:21:04.374]                     base::local({
[13:21:04.374]                       has_future <- base::requireNamespace("future", 
[13:21:04.374]                         quietly = TRUE)
[13:21:04.374]                       if (has_future) {
[13:21:04.374]                         ns <- base::getNamespace("future")
[13:21:04.374]                         version <- ns[[".package"]][["version"]]
[13:21:04.374]                         if (is.null(version)) 
[13:21:04.374]                           version <- utils::packageVersion("future")
[13:21:04.374]                       }
[13:21:04.374]                       else {
[13:21:04.374]                         version <- NULL
[13:21:04.374]                       }
[13:21:04.374]                       if (!has_future || version < "1.8.0") {
[13:21:04.374]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.374]                           "", base::R.version$version.string), 
[13:21:04.374]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:04.374]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.374]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.374]                             "release", "version")], collapse = " "), 
[13:21:04.374]                           hostname = base::Sys.info()[["nodename"]])
[13:21:04.374]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.374]                           info)
[13:21:04.374]                         info <- base::paste(info, collapse = "; ")
[13:21:04.374]                         if (!has_future) {
[13:21:04.374]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.374]                             info)
[13:21:04.374]                         }
[13:21:04.374]                         else {
[13:21:04.374]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.374]                             info, version)
[13:21:04.374]                         }
[13:21:04.374]                         base::stop(msg)
[13:21:04.374]                       }
[13:21:04.374]                     })
[13:21:04.374]                   }
[13:21:04.374]                   options(future.plan = NULL)
[13:21:04.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.374]                 }
[13:21:04.374]                 ...future.workdir <- getwd()
[13:21:04.374]             }
[13:21:04.374]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.374]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.374]         }
[13:21:04.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.374]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.374]             base::names(...future.oldOptions))
[13:21:04.374]     }
[13:21:04.374]     if (FALSE) {
[13:21:04.374]     }
[13:21:04.374]     else {
[13:21:04.374]         if (TRUE) {
[13:21:04.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.374]                 open = "w")
[13:21:04.374]         }
[13:21:04.374]         else {
[13:21:04.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.374]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.374]         }
[13:21:04.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.374]             base::sink(type = "output", split = FALSE)
[13:21:04.374]             base::close(...future.stdout)
[13:21:04.374]         }, add = TRUE)
[13:21:04.374]     }
[13:21:04.374]     ...future.frame <- base::sys.nframe()
[13:21:04.374]     ...future.conditions <- base::list()
[13:21:04.374]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.374]     if (FALSE) {
[13:21:04.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.374]     }
[13:21:04.374]     ...future.result <- base::tryCatch({
[13:21:04.374]         base::withCallingHandlers({
[13:21:04.374]             ...future.value <- base::withVisible(base::local({
[13:21:04.374]                 stop(structure(list(message = "boom"), class = c("MyError", 
[13:21:04.374]                   "error", "condition")))
[13:21:04.374]             }))
[13:21:04.374]             future::FutureResult(value = ...future.value$value, 
[13:21:04.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.374]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.374]                     ...future.globalenv.names))
[13:21:04.374]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.374]         }, condition = base::local({
[13:21:04.374]             c <- base::c
[13:21:04.374]             inherits <- base::inherits
[13:21:04.374]             invokeRestart <- base::invokeRestart
[13:21:04.374]             length <- base::length
[13:21:04.374]             list <- base::list
[13:21:04.374]             seq.int <- base::seq.int
[13:21:04.374]             signalCondition <- base::signalCondition
[13:21:04.374]             sys.calls <- base::sys.calls
[13:21:04.374]             `[[` <- base::`[[`
[13:21:04.374]             `+` <- base::`+`
[13:21:04.374]             `<<-` <- base::`<<-`
[13:21:04.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.374]                   3L)]
[13:21:04.374]             }
[13:21:04.374]             function(cond) {
[13:21:04.374]                 is_error <- inherits(cond, "error")
[13:21:04.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.374]                   NULL)
[13:21:04.374]                 if (is_error) {
[13:21:04.374]                   sessionInformation <- function() {
[13:21:04.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.374]                       search = base::search(), system = base::Sys.info())
[13:21:04.374]                   }
[13:21:04.374]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.374]                     cond$call), session = sessionInformation(), 
[13:21:04.374]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.374]                   signalCondition(cond)
[13:21:04.374]                 }
[13:21:04.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.374]                 "immediateCondition"))) {
[13:21:04.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.374]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.374]                   if (TRUE && !signal) {
[13:21:04.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.374]                     {
[13:21:04.374]                       inherits <- base::inherits
[13:21:04.374]                       invokeRestart <- base::invokeRestart
[13:21:04.374]                       is.null <- base::is.null
[13:21:04.374]                       muffled <- FALSE
[13:21:04.374]                       if (inherits(cond, "message")) {
[13:21:04.374]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.374]                         if (muffled) 
[13:21:04.374]                           invokeRestart("muffleMessage")
[13:21:04.374]                       }
[13:21:04.374]                       else if (inherits(cond, "warning")) {
[13:21:04.374]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.374]                         if (muffled) 
[13:21:04.374]                           invokeRestart("muffleWarning")
[13:21:04.374]                       }
[13:21:04.374]                       else if (inherits(cond, "condition")) {
[13:21:04.374]                         if (!is.null(pattern)) {
[13:21:04.374]                           computeRestarts <- base::computeRestarts
[13:21:04.374]                           grepl <- base::grepl
[13:21:04.374]                           restarts <- computeRestarts(cond)
[13:21:04.374]                           for (restart in restarts) {
[13:21:04.374]                             name <- restart$name
[13:21:04.374]                             if (is.null(name)) 
[13:21:04.374]                               next
[13:21:04.374]                             if (!grepl(pattern, name)) 
[13:21:04.374]                               next
[13:21:04.374]                             invokeRestart(restart)
[13:21:04.374]                             muffled <- TRUE
[13:21:04.374]                             break
[13:21:04.374]                           }
[13:21:04.374]                         }
[13:21:04.374]                       }
[13:21:04.374]                       invisible(muffled)
[13:21:04.374]                     }
[13:21:04.374]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.374]                   }
[13:21:04.374]                 }
[13:21:04.374]                 else {
[13:21:04.374]                   if (TRUE) {
[13:21:04.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.374]                     {
[13:21:04.374]                       inherits <- base::inherits
[13:21:04.374]                       invokeRestart <- base::invokeRestart
[13:21:04.374]                       is.null <- base::is.null
[13:21:04.374]                       muffled <- FALSE
[13:21:04.374]                       if (inherits(cond, "message")) {
[13:21:04.374]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.374]                         if (muffled) 
[13:21:04.374]                           invokeRestart("muffleMessage")
[13:21:04.374]                       }
[13:21:04.374]                       else if (inherits(cond, "warning")) {
[13:21:04.374]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.374]                         if (muffled) 
[13:21:04.374]                           invokeRestart("muffleWarning")
[13:21:04.374]                       }
[13:21:04.374]                       else if (inherits(cond, "condition")) {
[13:21:04.374]                         if (!is.null(pattern)) {
[13:21:04.374]                           computeRestarts <- base::computeRestarts
[13:21:04.374]                           grepl <- base::grepl
[13:21:04.374]                           restarts <- computeRestarts(cond)
[13:21:04.374]                           for (restart in restarts) {
[13:21:04.374]                             name <- restart$name
[13:21:04.374]                             if (is.null(name)) 
[13:21:04.374]                               next
[13:21:04.374]                             if (!grepl(pattern, name)) 
[13:21:04.374]                               next
[13:21:04.374]                             invokeRestart(restart)
[13:21:04.374]                             muffled <- TRUE
[13:21:04.374]                             break
[13:21:04.374]                           }
[13:21:04.374]                         }
[13:21:04.374]                       }
[13:21:04.374]                       invisible(muffled)
[13:21:04.374]                     }
[13:21:04.374]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.374]                   }
[13:21:04.374]                 }
[13:21:04.374]             }
[13:21:04.374]         }))
[13:21:04.374]     }, error = function(ex) {
[13:21:04.374]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.374]                 ...future.rng), started = ...future.startTime, 
[13:21:04.374]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.374]             version = "1.8"), class = "FutureResult")
[13:21:04.374]     }, finally = {
[13:21:04.374]         if (!identical(...future.workdir, getwd())) 
[13:21:04.374]             setwd(...future.workdir)
[13:21:04.374]         {
[13:21:04.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.374]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.374]             }
[13:21:04.374]             base::options(...future.oldOptions)
[13:21:04.374]             if (.Platform$OS.type == "windows") {
[13:21:04.374]                 old_names <- names(...future.oldEnvVars)
[13:21:04.374]                 envs <- base::Sys.getenv()
[13:21:04.374]                 names <- names(envs)
[13:21:04.374]                 common <- intersect(names, old_names)
[13:21:04.374]                 added <- setdiff(names, old_names)
[13:21:04.374]                 removed <- setdiff(old_names, names)
[13:21:04.374]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.374]                   envs[common]]
[13:21:04.374]                 NAMES <- toupper(changed)
[13:21:04.374]                 args <- list()
[13:21:04.374]                 for (kk in seq_along(NAMES)) {
[13:21:04.374]                   name <- changed[[kk]]
[13:21:04.374]                   NAME <- NAMES[[kk]]
[13:21:04.374]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.374]                     next
[13:21:04.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.374]                 }
[13:21:04.374]                 NAMES <- toupper(added)
[13:21:04.374]                 for (kk in seq_along(NAMES)) {
[13:21:04.374]                   name <- added[[kk]]
[13:21:04.374]                   NAME <- NAMES[[kk]]
[13:21:04.374]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.374]                     next
[13:21:04.374]                   args[[name]] <- ""
[13:21:04.374]                 }
[13:21:04.374]                 NAMES <- toupper(removed)
[13:21:04.374]                 for (kk in seq_along(NAMES)) {
[13:21:04.374]                   name <- removed[[kk]]
[13:21:04.374]                   NAME <- NAMES[[kk]]
[13:21:04.374]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.374]                     next
[13:21:04.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.374]                 }
[13:21:04.374]                 if (length(args) > 0) 
[13:21:04.374]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.374]             }
[13:21:04.374]             else {
[13:21:04.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.374]             }
[13:21:04.374]             {
[13:21:04.374]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.374]                   0L) {
[13:21:04.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.374]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.374]                   base::options(opts)
[13:21:04.374]                 }
[13:21:04.374]                 {
[13:21:04.374]                   {
[13:21:04.374]                     NULL
[13:21:04.374]                     RNGkind("Mersenne-Twister")
[13:21:04.374]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:04.374]                       inherits = FALSE)
[13:21:04.374]                   }
[13:21:04.374]                   options(future.plan = NULL)
[13:21:04.374]                   if (is.na(NA_character_)) 
[13:21:04.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.374]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.374]                   {
[13:21:04.374]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.374]                     if (!future$lazy) 
[13:21:04.374]                       future <- run(future)
[13:21:04.374]                     invisible(future)
[13:21:04.374]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.374]                 }
[13:21:04.374]             }
[13:21:04.374]         }
[13:21:04.374]     })
[13:21:04.374]     if (TRUE) {
[13:21:04.374]         base::sink(type = "output", split = FALSE)
[13:21:04.374]         if (TRUE) {
[13:21:04.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.374]         }
[13:21:04.374]         else {
[13:21:04.374]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.374]         }
[13:21:04.374]         base::close(...future.stdout)
[13:21:04.374]         ...future.stdout <- NULL
[13:21:04.374]     }
[13:21:04.374]     ...future.result$conditions <- ...future.conditions
[13:21:04.374]     ...future.result$finished <- base::Sys.time()
[13:21:04.374]     ...future.result
[13:21:04.374] }
[13:21:04.376] plan(): Setting new future strategy stack:
[13:21:04.376] List of future strategies:
[13:21:04.376] 1. sequential:
[13:21:04.376]    - args: function (..., envir = parent.frame())
[13:21:04.376]    - tweaked: FALSE
[13:21:04.376]    - call: NULL
[13:21:04.376] plan(): nbrOfWorkers() = 1
[13:21:04.377] plan(): Setting new future strategy stack:
[13:21:04.377] List of future strategies:
[13:21:04.377] 1. sequential:
[13:21:04.377]    - args: function (..., envir = parent.frame())
[13:21:04.377]    - tweaked: FALSE
[13:21:04.377]    - call: future::plan("sequential")
[13:21:04.377] plan(): nbrOfWorkers() = 1
[13:21:04.378] SequentialFuture started (and completed)
[13:21:04.378] signalConditions() ...
[13:21:04.378]  - include = ‘immediateCondition’
[13:21:04.378]  - exclude = 
[13:21:04.378]  - resignal = FALSE
[13:21:04.378]  - Number of conditions: 1
[13:21:04.378] signalConditions() ... done
[13:21:04.378] signalConditions() ...
[13:21:04.378]  - include = ‘immediateCondition’
[13:21:04.379]  - exclude = 
[13:21:04.379]  - resignal = FALSE
[13:21:04.379]  - Number of conditions: 1
[13:21:04.379] signalConditions() ... done
<MyError: boom>
[13:21:04.379] signalConditions() ...
[13:21:04.379]  - include = ‘immediateCondition’
[13:21:04.379]  - exclude = 
[13:21:04.379]  - resignal = FALSE
[13:21:04.379]  - Number of conditions: 1
[13:21:04.379] signalConditions() ... done
[13:21:04.380] Future state: ‘finished’
[13:21:04.380] signalConditions() ...
[13:21:04.380]  - include = ‘condition’
[13:21:04.380]  - exclude = ‘immediateCondition’
[13:21:04.380]  - resignal = TRUE
[13:21:04.380]  - Number of conditions: 1
[13:21:04.380]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:21:04.380] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[13:21:04.385] getGlobalsAndPackages() ...
[13:21:04.385] 
[13:21:04.386] - globals: [0] <none>
[13:21:04.386] getGlobalsAndPackages() ... DONE
[13:21:04.386] [local output] makeClusterPSOCK() ...
[13:21:04.416] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:04.421] [local output] Base port: 11473
[13:21:04.421] [local output] Getting setup options for 2 cluster nodes ...
[13:21:04.421] [local output]  - Node 1 of 2 ...
[13:21:04.422] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:04.422] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df75b76008.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df75b76008.pid")'’
[13:21:04.608] - Possible to infer worker's PID: TRUE
[13:21:04.608] [local output] Rscript port: 11473

[13:21:04.609] [local output]  - Node 2 of 2 ...
[13:21:04.609] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:04.610] [local output] Rscript port: 11473

[13:21:04.610] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:04.610] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:04.611] [local output] Setting up PSOCK nodes in parallel
[13:21:04.611] List of 36
[13:21:04.611]  $ worker          : chr "localhost"
[13:21:04.611]   ..- attr(*, "localhost")= logi TRUE
[13:21:04.611]  $ master          : chr "localhost"
[13:21:04.611]  $ port            : int 11473
[13:21:04.611]  $ connectTimeout  : num 120
[13:21:04.611]  $ timeout         : num 2592000
[13:21:04.611]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:04.611]  $ homogeneous     : logi TRUE
[13:21:04.611]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:04.611]  $ rscript_envs    : NULL
[13:21:04.611]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:04.611]  $ rscript_startup : NULL
[13:21:04.611]  $ rscript_sh      : chr "sh"
[13:21:04.611]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:04.611]  $ methods         : logi TRUE
[13:21:04.611]  $ socketOptions   : chr "no-delay"
[13:21:04.611]  $ useXDR          : logi FALSE
[13:21:04.611]  $ outfile         : chr "/dev/null"
[13:21:04.611]  $ renice          : int NA
[13:21:04.611]  $ rshcmd          : NULL
[13:21:04.611]  $ user            : chr(0) 
[13:21:04.611]  $ revtunnel       : logi FALSE
[13:21:04.611]  $ rshlogfile      : NULL
[13:21:04.611]  $ rshopts         : chr(0) 
[13:21:04.611]  $ rank            : int 1
[13:21:04.611]  $ manual          : logi FALSE
[13:21:04.611]  $ dryrun          : logi FALSE
[13:21:04.611]  $ quiet           : logi FALSE
[13:21:04.611]  $ setup_strategy  : chr "parallel"
[13:21:04.611]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:04.611]  $ pidfile         : chr "/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df75b76008.pid"
[13:21:04.611]  $ rshcmd_label    : NULL
[13:21:04.611]  $ rsh_call        : NULL
[13:21:04.611]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:04.611]  $ localMachine    : logi TRUE
[13:21:04.611]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:04.611]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:04.611]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:04.611]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:04.611]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:04.611]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:04.611]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:04.611]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:04.611]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:04.611]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:04.611]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:04.611]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:04.611]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:04.611]  $ arguments       :List of 28
[13:21:04.611]   ..$ worker          : chr "localhost"
[13:21:04.611]   ..$ master          : NULL
[13:21:04.611]   ..$ port            : int 11473
[13:21:04.611]   ..$ connectTimeout  : num 120
[13:21:04.611]   ..$ timeout         : num 2592000
[13:21:04.611]   ..$ rscript         : NULL
[13:21:04.611]   ..$ homogeneous     : NULL
[13:21:04.611]   ..$ rscript_args    : NULL
[13:21:04.611]   ..$ rscript_envs    : NULL
[13:21:04.611]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:04.611]   ..$ rscript_startup : NULL
[13:21:04.611]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:04.611]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:04.611]   ..$ methods         : logi TRUE
[13:21:04.611]   ..$ socketOptions   : chr "no-delay"
[13:21:04.611]   ..$ useXDR          : logi FALSE
[13:21:04.611]   ..$ outfile         : chr "/dev/null"
[13:21:04.611]   ..$ renice          : int NA
[13:21:04.611]   ..$ rshcmd          : NULL
[13:21:04.611]   ..$ user            : NULL
[13:21:04.611]   ..$ revtunnel       : logi NA
[13:21:04.611]   ..$ rshlogfile      : NULL
[13:21:04.611]   ..$ rshopts         : NULL
[13:21:04.611]   ..$ rank            : int 1
[13:21:04.611]   ..$ manual          : logi FALSE
[13:21:04.611]   ..$ dryrun          : logi FALSE
[13:21:04.611]   ..$ quiet           : logi FALSE
[13:21:04.611]   ..$ setup_strategy  : chr "parallel"
[13:21:04.611]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:04.627] [local output] System call to launch all workers:
[13:21:04.628] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df75b76008.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11473 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:04.628] [local output] Starting PSOCK main server
[13:21:04.629] [local output] Workers launched
[13:21:04.629] [local output] Waiting for workers to connect back
[13:21:04.629]  - [local output] 0 workers out of 2 ready
[13:21:04.875]  - [local output] 0 workers out of 2 ready
[13:21:04.876]  - [local output] 1 workers out of 2 ready
[13:21:04.876]  - [local output] 2 workers out of 2 ready
[13:21:04.876] [local output] Launching of workers completed
[13:21:04.876] [local output] Collecting session information from workers
[13:21:04.877] [local output]  - Worker #1 of 2
[13:21:04.878] [local output]  - Worker #2 of 2
[13:21:04.878] [local output] makeClusterPSOCK() ... done
[13:21:04.890] Packages needed by the future expression (n = 0): <none>
[13:21:04.890] Packages needed by future strategies (n = 0): <none>
[13:21:04.891] {
[13:21:04.891]     {
[13:21:04.891]         {
[13:21:04.891]             ...future.startTime <- base::Sys.time()
[13:21:04.891]             {
[13:21:04.891]                 {
[13:21:04.891]                   {
[13:21:04.891]                     {
[13:21:04.891]                       base::local({
[13:21:04.891]                         has_future <- base::requireNamespace("future", 
[13:21:04.891]                           quietly = TRUE)
[13:21:04.891]                         if (has_future) {
[13:21:04.891]                           ns <- base::getNamespace("future")
[13:21:04.891]                           version <- ns[[".package"]][["version"]]
[13:21:04.891]                           if (is.null(version)) 
[13:21:04.891]                             version <- utils::packageVersion("future")
[13:21:04.891]                         }
[13:21:04.891]                         else {
[13:21:04.891]                           version <- NULL
[13:21:04.891]                         }
[13:21:04.891]                         if (!has_future || version < "1.8.0") {
[13:21:04.891]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:04.891]                             "", base::R.version$version.string), 
[13:21:04.891]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:04.891]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:04.891]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:04.891]                               "release", "version")], collapse = " "), 
[13:21:04.891]                             hostname = base::Sys.info()[["nodename"]])
[13:21:04.891]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:04.891]                             info)
[13:21:04.891]                           info <- base::paste(info, collapse = "; ")
[13:21:04.891]                           if (!has_future) {
[13:21:04.891]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:04.891]                               info)
[13:21:04.891]                           }
[13:21:04.891]                           else {
[13:21:04.891]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:04.891]                               info, version)
[13:21:04.891]                           }
[13:21:04.891]                           base::stop(msg)
[13:21:04.891]                         }
[13:21:04.891]                       })
[13:21:04.891]                     }
[13:21:04.891]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:04.891]                     base::options(mc.cores = 1L)
[13:21:04.891]                   }
[13:21:04.891]                   options(future.plan = NULL)
[13:21:04.891]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.891]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:04.891]                 }
[13:21:04.891]                 ...future.workdir <- getwd()
[13:21:04.891]             }
[13:21:04.891]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:04.891]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:04.891]         }
[13:21:04.891]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:04.891]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:04.891]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:04.891]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:04.891]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:04.891]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:04.891]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:04.891]             base::names(...future.oldOptions))
[13:21:04.891]     }
[13:21:04.891]     if (FALSE) {
[13:21:04.891]     }
[13:21:04.891]     else {
[13:21:04.891]         if (TRUE) {
[13:21:04.891]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:04.891]                 open = "w")
[13:21:04.891]         }
[13:21:04.891]         else {
[13:21:04.891]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:04.891]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:04.891]         }
[13:21:04.891]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:04.891]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:04.891]             base::sink(type = "output", split = FALSE)
[13:21:04.891]             base::close(...future.stdout)
[13:21:04.891]         }, add = TRUE)
[13:21:04.891]     }
[13:21:04.891]     ...future.frame <- base::sys.nframe()
[13:21:04.891]     ...future.conditions <- base::list()
[13:21:04.891]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:04.891]     if (FALSE) {
[13:21:04.891]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:04.891]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:04.891]     }
[13:21:04.891]     ...future.result <- base::tryCatch({
[13:21:04.891]         base::withCallingHandlers({
[13:21:04.891]             ...future.value <- base::withVisible(base::local({
[13:21:04.891]                 ...future.makeSendCondition <- local({
[13:21:04.891]                   sendCondition <- NULL
[13:21:04.891]                   function(frame = 1L) {
[13:21:04.891]                     if (is.function(sendCondition)) 
[13:21:04.891]                       return(sendCondition)
[13:21:04.891]                     ns <- getNamespace("parallel")
[13:21:04.891]                     if (exists("sendData", mode = "function", 
[13:21:04.891]                       envir = ns)) {
[13:21:04.891]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:04.891]                         envir = ns)
[13:21:04.891]                       envir <- sys.frame(frame)
[13:21:04.891]                       master <- NULL
[13:21:04.891]                       while (!identical(envir, .GlobalEnv) && 
[13:21:04.891]                         !identical(envir, emptyenv())) {
[13:21:04.891]                         if (exists("master", mode = "list", envir = envir, 
[13:21:04.891]                           inherits = FALSE)) {
[13:21:04.891]                           master <- get("master", mode = "list", 
[13:21:04.891]                             envir = envir, inherits = FALSE)
[13:21:04.891]                           if (inherits(master, c("SOCKnode", 
[13:21:04.891]                             "SOCK0node"))) {
[13:21:04.891]                             sendCondition <<- function(cond) {
[13:21:04.891]                               data <- list(type = "VALUE", value = cond, 
[13:21:04.891]                                 success = TRUE)
[13:21:04.891]                               parallel_sendData(master, data)
[13:21:04.891]                             }
[13:21:04.891]                             return(sendCondition)
[13:21:04.891]                           }
[13:21:04.891]                         }
[13:21:04.891]                         frame <- frame + 1L
[13:21:04.891]                         envir <- sys.frame(frame)
[13:21:04.891]                       }
[13:21:04.891]                     }
[13:21:04.891]                     sendCondition <<- function(cond) NULL
[13:21:04.891]                   }
[13:21:04.891]                 })
[13:21:04.891]                 withCallingHandlers({
[13:21:04.891]                   {
[13:21:04.891]                     42L
[13:21:04.891]                   }
[13:21:04.891]                 }, immediateCondition = function(cond) {
[13:21:04.891]                   sendCondition <- ...future.makeSendCondition()
[13:21:04.891]                   sendCondition(cond)
[13:21:04.891]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.891]                   {
[13:21:04.891]                     inherits <- base::inherits
[13:21:04.891]                     invokeRestart <- base::invokeRestart
[13:21:04.891]                     is.null <- base::is.null
[13:21:04.891]                     muffled <- FALSE
[13:21:04.891]                     if (inherits(cond, "message")) {
[13:21:04.891]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:04.891]                       if (muffled) 
[13:21:04.891]                         invokeRestart("muffleMessage")
[13:21:04.891]                     }
[13:21:04.891]                     else if (inherits(cond, "warning")) {
[13:21:04.891]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:04.891]                       if (muffled) 
[13:21:04.891]                         invokeRestart("muffleWarning")
[13:21:04.891]                     }
[13:21:04.891]                     else if (inherits(cond, "condition")) {
[13:21:04.891]                       if (!is.null(pattern)) {
[13:21:04.891]                         computeRestarts <- base::computeRestarts
[13:21:04.891]                         grepl <- base::grepl
[13:21:04.891]                         restarts <- computeRestarts(cond)
[13:21:04.891]                         for (restart in restarts) {
[13:21:04.891]                           name <- restart$name
[13:21:04.891]                           if (is.null(name)) 
[13:21:04.891]                             next
[13:21:04.891]                           if (!grepl(pattern, name)) 
[13:21:04.891]                             next
[13:21:04.891]                           invokeRestart(restart)
[13:21:04.891]                           muffled <- TRUE
[13:21:04.891]                           break
[13:21:04.891]                         }
[13:21:04.891]                       }
[13:21:04.891]                     }
[13:21:04.891]                     invisible(muffled)
[13:21:04.891]                   }
[13:21:04.891]                   muffleCondition(cond)
[13:21:04.891]                 })
[13:21:04.891]             }))
[13:21:04.891]             future::FutureResult(value = ...future.value$value, 
[13:21:04.891]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.891]                   ...future.rng), globalenv = if (FALSE) 
[13:21:04.891]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:04.891]                     ...future.globalenv.names))
[13:21:04.891]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:04.891]         }, condition = base::local({
[13:21:04.891]             c <- base::c
[13:21:04.891]             inherits <- base::inherits
[13:21:04.891]             invokeRestart <- base::invokeRestart
[13:21:04.891]             length <- base::length
[13:21:04.891]             list <- base::list
[13:21:04.891]             seq.int <- base::seq.int
[13:21:04.891]             signalCondition <- base::signalCondition
[13:21:04.891]             sys.calls <- base::sys.calls
[13:21:04.891]             `[[` <- base::`[[`
[13:21:04.891]             `+` <- base::`+`
[13:21:04.891]             `<<-` <- base::`<<-`
[13:21:04.891]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:04.891]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:04.891]                   3L)]
[13:21:04.891]             }
[13:21:04.891]             function(cond) {
[13:21:04.891]                 is_error <- inherits(cond, "error")
[13:21:04.891]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:04.891]                   NULL)
[13:21:04.891]                 if (is_error) {
[13:21:04.891]                   sessionInformation <- function() {
[13:21:04.891]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:04.891]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:04.891]                       search = base::search(), system = base::Sys.info())
[13:21:04.891]                   }
[13:21:04.891]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.891]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:04.891]                     cond$call), session = sessionInformation(), 
[13:21:04.891]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:04.891]                   signalCondition(cond)
[13:21:04.891]                 }
[13:21:04.891]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:04.891]                 "immediateCondition"))) {
[13:21:04.891]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:04.891]                   ...future.conditions[[length(...future.conditions) + 
[13:21:04.891]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:04.891]                   if (TRUE && !signal) {
[13:21:04.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.891]                     {
[13:21:04.891]                       inherits <- base::inherits
[13:21:04.891]                       invokeRestart <- base::invokeRestart
[13:21:04.891]                       is.null <- base::is.null
[13:21:04.891]                       muffled <- FALSE
[13:21:04.891]                       if (inherits(cond, "message")) {
[13:21:04.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.891]                         if (muffled) 
[13:21:04.891]                           invokeRestart("muffleMessage")
[13:21:04.891]                       }
[13:21:04.891]                       else if (inherits(cond, "warning")) {
[13:21:04.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.891]                         if (muffled) 
[13:21:04.891]                           invokeRestart("muffleWarning")
[13:21:04.891]                       }
[13:21:04.891]                       else if (inherits(cond, "condition")) {
[13:21:04.891]                         if (!is.null(pattern)) {
[13:21:04.891]                           computeRestarts <- base::computeRestarts
[13:21:04.891]                           grepl <- base::grepl
[13:21:04.891]                           restarts <- computeRestarts(cond)
[13:21:04.891]                           for (restart in restarts) {
[13:21:04.891]                             name <- restart$name
[13:21:04.891]                             if (is.null(name)) 
[13:21:04.891]                               next
[13:21:04.891]                             if (!grepl(pattern, name)) 
[13:21:04.891]                               next
[13:21:04.891]                             invokeRestart(restart)
[13:21:04.891]                             muffled <- TRUE
[13:21:04.891]                             break
[13:21:04.891]                           }
[13:21:04.891]                         }
[13:21:04.891]                       }
[13:21:04.891]                       invisible(muffled)
[13:21:04.891]                     }
[13:21:04.891]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.891]                   }
[13:21:04.891]                 }
[13:21:04.891]                 else {
[13:21:04.891]                   if (TRUE) {
[13:21:04.891]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:04.891]                     {
[13:21:04.891]                       inherits <- base::inherits
[13:21:04.891]                       invokeRestart <- base::invokeRestart
[13:21:04.891]                       is.null <- base::is.null
[13:21:04.891]                       muffled <- FALSE
[13:21:04.891]                       if (inherits(cond, "message")) {
[13:21:04.891]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:04.891]                         if (muffled) 
[13:21:04.891]                           invokeRestart("muffleMessage")
[13:21:04.891]                       }
[13:21:04.891]                       else if (inherits(cond, "warning")) {
[13:21:04.891]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:04.891]                         if (muffled) 
[13:21:04.891]                           invokeRestart("muffleWarning")
[13:21:04.891]                       }
[13:21:04.891]                       else if (inherits(cond, "condition")) {
[13:21:04.891]                         if (!is.null(pattern)) {
[13:21:04.891]                           computeRestarts <- base::computeRestarts
[13:21:04.891]                           grepl <- base::grepl
[13:21:04.891]                           restarts <- computeRestarts(cond)
[13:21:04.891]                           for (restart in restarts) {
[13:21:04.891]                             name <- restart$name
[13:21:04.891]                             if (is.null(name)) 
[13:21:04.891]                               next
[13:21:04.891]                             if (!grepl(pattern, name)) 
[13:21:04.891]                               next
[13:21:04.891]                             invokeRestart(restart)
[13:21:04.891]                             muffled <- TRUE
[13:21:04.891]                             break
[13:21:04.891]                           }
[13:21:04.891]                         }
[13:21:04.891]                       }
[13:21:04.891]                       invisible(muffled)
[13:21:04.891]                     }
[13:21:04.891]                     muffleCondition(cond, pattern = "^muffle")
[13:21:04.891]                   }
[13:21:04.891]                 }
[13:21:04.891]             }
[13:21:04.891]         }))
[13:21:04.891]     }, error = function(ex) {
[13:21:04.891]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:04.891]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:04.891]                 ...future.rng), started = ...future.startTime, 
[13:21:04.891]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:04.891]             version = "1.8"), class = "FutureResult")
[13:21:04.891]     }, finally = {
[13:21:04.891]         if (!identical(...future.workdir, getwd())) 
[13:21:04.891]             setwd(...future.workdir)
[13:21:04.891]         {
[13:21:04.891]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:04.891]                 ...future.oldOptions$nwarnings <- NULL
[13:21:04.891]             }
[13:21:04.891]             base::options(...future.oldOptions)
[13:21:04.891]             if (.Platform$OS.type == "windows") {
[13:21:04.891]                 old_names <- names(...future.oldEnvVars)
[13:21:04.891]                 envs <- base::Sys.getenv()
[13:21:04.891]                 names <- names(envs)
[13:21:04.891]                 common <- intersect(names, old_names)
[13:21:04.891]                 added <- setdiff(names, old_names)
[13:21:04.891]                 removed <- setdiff(old_names, names)
[13:21:04.891]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:04.891]                   envs[common]]
[13:21:04.891]                 NAMES <- toupper(changed)
[13:21:04.891]                 args <- list()
[13:21:04.891]                 for (kk in seq_along(NAMES)) {
[13:21:04.891]                   name <- changed[[kk]]
[13:21:04.891]                   NAME <- NAMES[[kk]]
[13:21:04.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.891]                     next
[13:21:04.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.891]                 }
[13:21:04.891]                 NAMES <- toupper(added)
[13:21:04.891]                 for (kk in seq_along(NAMES)) {
[13:21:04.891]                   name <- added[[kk]]
[13:21:04.891]                   NAME <- NAMES[[kk]]
[13:21:04.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.891]                     next
[13:21:04.891]                   args[[name]] <- ""
[13:21:04.891]                 }
[13:21:04.891]                 NAMES <- toupper(removed)
[13:21:04.891]                 for (kk in seq_along(NAMES)) {
[13:21:04.891]                   name <- removed[[kk]]
[13:21:04.891]                   NAME <- NAMES[[kk]]
[13:21:04.891]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:04.891]                     next
[13:21:04.891]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:04.891]                 }
[13:21:04.891]                 if (length(args) > 0) 
[13:21:04.891]                   base::do.call(base::Sys.setenv, args = args)
[13:21:04.891]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:04.891]             }
[13:21:04.891]             else {
[13:21:04.891]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:04.891]             }
[13:21:04.891]             {
[13:21:04.891]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:04.891]                   0L) {
[13:21:04.891]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:04.891]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:04.891]                   base::options(opts)
[13:21:04.891]                 }
[13:21:04.891]                 {
[13:21:04.891]                   {
[13:21:04.891]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:04.891]                     NULL
[13:21:04.891]                   }
[13:21:04.891]                   options(future.plan = NULL)
[13:21:04.891]                   if (is.na(NA_character_)) 
[13:21:04.891]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:04.891]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:04.891]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:04.891]                   {
[13:21:04.891]                     future <- SequentialFuture(..., envir = envir)
[13:21:04.891]                     if (!future$lazy) 
[13:21:04.891]                       future <- run(future)
[13:21:04.891]                     invisible(future)
[13:21:04.891]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:04.891]                 }
[13:21:04.891]             }
[13:21:04.891]         }
[13:21:04.891]     })
[13:21:04.891]     if (TRUE) {
[13:21:04.891]         base::sink(type = "output", split = FALSE)
[13:21:04.891]         if (TRUE) {
[13:21:04.891]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:04.891]         }
[13:21:04.891]         else {
[13:21:04.891]             ...future.result["stdout"] <- base::list(NULL)
[13:21:04.891]         }
[13:21:04.891]         base::close(...future.stdout)
[13:21:04.891]         ...future.stdout <- NULL
[13:21:04.891]     }
[13:21:04.891]     ...future.result$conditions <- ...future.conditions
[13:21:04.891]     ...future.result$finished <- base::Sys.time()
[13:21:04.891]     ...future.result
[13:21:04.891] }
[13:21:04.962] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[13:21:04.985] result() for ClusterFuture ...
[13:21:04.986] receiveMessageFromWorker() for ClusterFuture ...
[13:21:04.986] - Validating connection of MultisessionFuture
[13:21:04.989] - received message: FutureResult
[13:21:04.989] - Received FutureResult
[13:21:04.992] - Erased future from FutureRegistry
[13:21:04.992] result() for ClusterFuture ...
[13:21:04.992] - result already collected: FutureResult
[13:21:04.992] result() for ClusterFuture ... done
[13:21:04.992] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:04.992] result() for ClusterFuture ... done
[13:21:04.993] result() for ClusterFuture ...
[13:21:04.993] - result already collected: FutureResult
[13:21:04.993] result() for ClusterFuture ... done
[1] 42
[13:21:04.997] getGlobalsAndPackages() ...
[13:21:04.997] Searching for globals...
[13:21:04.999] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[13:21:04.999] Searching for globals ... DONE
[13:21:04.999] Resolving globals: FALSE
[13:21:05.000] The total size of the 1 globals is 56 bytes (56 bytes)
[13:21:05.000] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[13:21:05.000] - globals: [1] ‘a’
[13:21:05.001] 
[13:21:05.001] getGlobalsAndPackages() ... DONE
[13:21:05.013] Packages needed by the future expression (n = 0): <none>
[13:21:05.013] Packages needed by future strategies (n = 0): <none>
[13:21:05.013] {
[13:21:05.013]     {
[13:21:05.013]         {
[13:21:05.013]             ...future.startTime <- base::Sys.time()
[13:21:05.013]             {
[13:21:05.013]                 {
[13:21:05.013]                   {
[13:21:05.013]                     {
[13:21:05.013]                       base::local({
[13:21:05.013]                         has_future <- base::requireNamespace("future", 
[13:21:05.013]                           quietly = TRUE)
[13:21:05.013]                         if (has_future) {
[13:21:05.013]                           ns <- base::getNamespace("future")
[13:21:05.013]                           version <- ns[[".package"]][["version"]]
[13:21:05.013]                           if (is.null(version)) 
[13:21:05.013]                             version <- utils::packageVersion("future")
[13:21:05.013]                         }
[13:21:05.013]                         else {
[13:21:05.013]                           version <- NULL
[13:21:05.013]                         }
[13:21:05.013]                         if (!has_future || version < "1.8.0") {
[13:21:05.013]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.013]                             "", base::R.version$version.string), 
[13:21:05.013]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.013]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.013]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.013]                               "release", "version")], collapse = " "), 
[13:21:05.013]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.013]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.013]                             info)
[13:21:05.013]                           info <- base::paste(info, collapse = "; ")
[13:21:05.013]                           if (!has_future) {
[13:21:05.013]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.013]                               info)
[13:21:05.013]                           }
[13:21:05.013]                           else {
[13:21:05.013]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.013]                               info, version)
[13:21:05.013]                           }
[13:21:05.013]                           base::stop(msg)
[13:21:05.013]                         }
[13:21:05.013]                       })
[13:21:05.013]                     }
[13:21:05.013]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.013]                     base::options(mc.cores = 1L)
[13:21:05.013]                   }
[13:21:05.013]                   options(future.plan = NULL)
[13:21:05.013]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.013]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.013]                 }
[13:21:05.013]                 ...future.workdir <- getwd()
[13:21:05.013]             }
[13:21:05.013]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.013]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.013]         }
[13:21:05.013]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.013]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.013]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.013]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.013]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.013]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.013]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.013]             base::names(...future.oldOptions))
[13:21:05.013]     }
[13:21:05.013]     if (FALSE) {
[13:21:05.013]     }
[13:21:05.013]     else {
[13:21:05.013]         if (TRUE) {
[13:21:05.013]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.013]                 open = "w")
[13:21:05.013]         }
[13:21:05.013]         else {
[13:21:05.013]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.013]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.013]         }
[13:21:05.013]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.013]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.013]             base::sink(type = "output", split = FALSE)
[13:21:05.013]             base::close(...future.stdout)
[13:21:05.013]         }, add = TRUE)
[13:21:05.013]     }
[13:21:05.013]     ...future.frame <- base::sys.nframe()
[13:21:05.013]     ...future.conditions <- base::list()
[13:21:05.013]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.013]     if (FALSE) {
[13:21:05.013]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.013]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.013]     }
[13:21:05.013]     ...future.result <- base::tryCatch({
[13:21:05.013]         base::withCallingHandlers({
[13:21:05.013]             ...future.value <- base::withVisible(base::local({
[13:21:05.013]                 ...future.makeSendCondition <- local({
[13:21:05.013]                   sendCondition <- NULL
[13:21:05.013]                   function(frame = 1L) {
[13:21:05.013]                     if (is.function(sendCondition)) 
[13:21:05.013]                       return(sendCondition)
[13:21:05.013]                     ns <- getNamespace("parallel")
[13:21:05.013]                     if (exists("sendData", mode = "function", 
[13:21:05.013]                       envir = ns)) {
[13:21:05.013]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.013]                         envir = ns)
[13:21:05.013]                       envir <- sys.frame(frame)
[13:21:05.013]                       master <- NULL
[13:21:05.013]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.013]                         !identical(envir, emptyenv())) {
[13:21:05.013]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.013]                           inherits = FALSE)) {
[13:21:05.013]                           master <- get("master", mode = "list", 
[13:21:05.013]                             envir = envir, inherits = FALSE)
[13:21:05.013]                           if (inherits(master, c("SOCKnode", 
[13:21:05.013]                             "SOCK0node"))) {
[13:21:05.013]                             sendCondition <<- function(cond) {
[13:21:05.013]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.013]                                 success = TRUE)
[13:21:05.013]                               parallel_sendData(master, data)
[13:21:05.013]                             }
[13:21:05.013]                             return(sendCondition)
[13:21:05.013]                           }
[13:21:05.013]                         }
[13:21:05.013]                         frame <- frame + 1L
[13:21:05.013]                         envir <- sys.frame(frame)
[13:21:05.013]                       }
[13:21:05.013]                     }
[13:21:05.013]                     sendCondition <<- function(cond) NULL
[13:21:05.013]                   }
[13:21:05.013]                 })
[13:21:05.013]                 withCallingHandlers({
[13:21:05.013]                   {
[13:21:05.013]                     b <- 3
[13:21:05.013]                     c <- 2
[13:21:05.013]                     a * b * c
[13:21:05.013]                   }
[13:21:05.013]                 }, immediateCondition = function(cond) {
[13:21:05.013]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.013]                   sendCondition(cond)
[13:21:05.013]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.013]                   {
[13:21:05.013]                     inherits <- base::inherits
[13:21:05.013]                     invokeRestart <- base::invokeRestart
[13:21:05.013]                     is.null <- base::is.null
[13:21:05.013]                     muffled <- FALSE
[13:21:05.013]                     if (inherits(cond, "message")) {
[13:21:05.013]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.013]                       if (muffled) 
[13:21:05.013]                         invokeRestart("muffleMessage")
[13:21:05.013]                     }
[13:21:05.013]                     else if (inherits(cond, "warning")) {
[13:21:05.013]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.013]                       if (muffled) 
[13:21:05.013]                         invokeRestart("muffleWarning")
[13:21:05.013]                     }
[13:21:05.013]                     else if (inherits(cond, "condition")) {
[13:21:05.013]                       if (!is.null(pattern)) {
[13:21:05.013]                         computeRestarts <- base::computeRestarts
[13:21:05.013]                         grepl <- base::grepl
[13:21:05.013]                         restarts <- computeRestarts(cond)
[13:21:05.013]                         for (restart in restarts) {
[13:21:05.013]                           name <- restart$name
[13:21:05.013]                           if (is.null(name)) 
[13:21:05.013]                             next
[13:21:05.013]                           if (!grepl(pattern, name)) 
[13:21:05.013]                             next
[13:21:05.013]                           invokeRestart(restart)
[13:21:05.013]                           muffled <- TRUE
[13:21:05.013]                           break
[13:21:05.013]                         }
[13:21:05.013]                       }
[13:21:05.013]                     }
[13:21:05.013]                     invisible(muffled)
[13:21:05.013]                   }
[13:21:05.013]                   muffleCondition(cond)
[13:21:05.013]                 })
[13:21:05.013]             }))
[13:21:05.013]             future::FutureResult(value = ...future.value$value, 
[13:21:05.013]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.013]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.013]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.013]                     ...future.globalenv.names))
[13:21:05.013]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.013]         }, condition = base::local({
[13:21:05.013]             c <- base::c
[13:21:05.013]             inherits <- base::inherits
[13:21:05.013]             invokeRestart <- base::invokeRestart
[13:21:05.013]             length <- base::length
[13:21:05.013]             list <- base::list
[13:21:05.013]             seq.int <- base::seq.int
[13:21:05.013]             signalCondition <- base::signalCondition
[13:21:05.013]             sys.calls <- base::sys.calls
[13:21:05.013]             `[[` <- base::`[[`
[13:21:05.013]             `+` <- base::`+`
[13:21:05.013]             `<<-` <- base::`<<-`
[13:21:05.013]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.013]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.013]                   3L)]
[13:21:05.013]             }
[13:21:05.013]             function(cond) {
[13:21:05.013]                 is_error <- inherits(cond, "error")
[13:21:05.013]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.013]                   NULL)
[13:21:05.013]                 if (is_error) {
[13:21:05.013]                   sessionInformation <- function() {
[13:21:05.013]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.013]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.013]                       search = base::search(), system = base::Sys.info())
[13:21:05.013]                   }
[13:21:05.013]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.013]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.013]                     cond$call), session = sessionInformation(), 
[13:21:05.013]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.013]                   signalCondition(cond)
[13:21:05.013]                 }
[13:21:05.013]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.013]                 "immediateCondition"))) {
[13:21:05.013]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.013]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.013]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.013]                   if (TRUE && !signal) {
[13:21:05.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.013]                     {
[13:21:05.013]                       inherits <- base::inherits
[13:21:05.013]                       invokeRestart <- base::invokeRestart
[13:21:05.013]                       is.null <- base::is.null
[13:21:05.013]                       muffled <- FALSE
[13:21:05.013]                       if (inherits(cond, "message")) {
[13:21:05.013]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.013]                         if (muffled) 
[13:21:05.013]                           invokeRestart("muffleMessage")
[13:21:05.013]                       }
[13:21:05.013]                       else if (inherits(cond, "warning")) {
[13:21:05.013]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.013]                         if (muffled) 
[13:21:05.013]                           invokeRestart("muffleWarning")
[13:21:05.013]                       }
[13:21:05.013]                       else if (inherits(cond, "condition")) {
[13:21:05.013]                         if (!is.null(pattern)) {
[13:21:05.013]                           computeRestarts <- base::computeRestarts
[13:21:05.013]                           grepl <- base::grepl
[13:21:05.013]                           restarts <- computeRestarts(cond)
[13:21:05.013]                           for (restart in restarts) {
[13:21:05.013]                             name <- restart$name
[13:21:05.013]                             if (is.null(name)) 
[13:21:05.013]                               next
[13:21:05.013]                             if (!grepl(pattern, name)) 
[13:21:05.013]                               next
[13:21:05.013]                             invokeRestart(restart)
[13:21:05.013]                             muffled <- TRUE
[13:21:05.013]                             break
[13:21:05.013]                           }
[13:21:05.013]                         }
[13:21:05.013]                       }
[13:21:05.013]                       invisible(muffled)
[13:21:05.013]                     }
[13:21:05.013]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.013]                   }
[13:21:05.013]                 }
[13:21:05.013]                 else {
[13:21:05.013]                   if (TRUE) {
[13:21:05.013]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.013]                     {
[13:21:05.013]                       inherits <- base::inherits
[13:21:05.013]                       invokeRestart <- base::invokeRestart
[13:21:05.013]                       is.null <- base::is.null
[13:21:05.013]                       muffled <- FALSE
[13:21:05.013]                       if (inherits(cond, "message")) {
[13:21:05.013]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.013]                         if (muffled) 
[13:21:05.013]                           invokeRestart("muffleMessage")
[13:21:05.013]                       }
[13:21:05.013]                       else if (inherits(cond, "warning")) {
[13:21:05.013]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.013]                         if (muffled) 
[13:21:05.013]                           invokeRestart("muffleWarning")
[13:21:05.013]                       }
[13:21:05.013]                       else if (inherits(cond, "condition")) {
[13:21:05.013]                         if (!is.null(pattern)) {
[13:21:05.013]                           computeRestarts <- base::computeRestarts
[13:21:05.013]                           grepl <- base::grepl
[13:21:05.013]                           restarts <- computeRestarts(cond)
[13:21:05.013]                           for (restart in restarts) {
[13:21:05.013]                             name <- restart$name
[13:21:05.013]                             if (is.null(name)) 
[13:21:05.013]                               next
[13:21:05.013]                             if (!grepl(pattern, name)) 
[13:21:05.013]                               next
[13:21:05.013]                             invokeRestart(restart)
[13:21:05.013]                             muffled <- TRUE
[13:21:05.013]                             break
[13:21:05.013]                           }
[13:21:05.013]                         }
[13:21:05.013]                       }
[13:21:05.013]                       invisible(muffled)
[13:21:05.013]                     }
[13:21:05.013]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.013]                   }
[13:21:05.013]                 }
[13:21:05.013]             }
[13:21:05.013]         }))
[13:21:05.013]     }, error = function(ex) {
[13:21:05.013]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.013]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.013]                 ...future.rng), started = ...future.startTime, 
[13:21:05.013]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.013]             version = "1.8"), class = "FutureResult")
[13:21:05.013]     }, finally = {
[13:21:05.013]         if (!identical(...future.workdir, getwd())) 
[13:21:05.013]             setwd(...future.workdir)
[13:21:05.013]         {
[13:21:05.013]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.013]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.013]             }
[13:21:05.013]             base::options(...future.oldOptions)
[13:21:05.013]             if (.Platform$OS.type == "windows") {
[13:21:05.013]                 old_names <- names(...future.oldEnvVars)
[13:21:05.013]                 envs <- base::Sys.getenv()
[13:21:05.013]                 names <- names(envs)
[13:21:05.013]                 common <- intersect(names, old_names)
[13:21:05.013]                 added <- setdiff(names, old_names)
[13:21:05.013]                 removed <- setdiff(old_names, names)
[13:21:05.013]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.013]                   envs[common]]
[13:21:05.013]                 NAMES <- toupper(changed)
[13:21:05.013]                 args <- list()
[13:21:05.013]                 for (kk in seq_along(NAMES)) {
[13:21:05.013]                   name <- changed[[kk]]
[13:21:05.013]                   NAME <- NAMES[[kk]]
[13:21:05.013]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.013]                     next
[13:21:05.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.013]                 }
[13:21:05.013]                 NAMES <- toupper(added)
[13:21:05.013]                 for (kk in seq_along(NAMES)) {
[13:21:05.013]                   name <- added[[kk]]
[13:21:05.013]                   NAME <- NAMES[[kk]]
[13:21:05.013]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.013]                     next
[13:21:05.013]                   args[[name]] <- ""
[13:21:05.013]                 }
[13:21:05.013]                 NAMES <- toupper(removed)
[13:21:05.013]                 for (kk in seq_along(NAMES)) {
[13:21:05.013]                   name <- removed[[kk]]
[13:21:05.013]                   NAME <- NAMES[[kk]]
[13:21:05.013]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.013]                     next
[13:21:05.013]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.013]                 }
[13:21:05.013]                 if (length(args) > 0) 
[13:21:05.013]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.013]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.013]             }
[13:21:05.013]             else {
[13:21:05.013]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.013]             }
[13:21:05.013]             {
[13:21:05.013]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.013]                   0L) {
[13:21:05.013]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.013]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.013]                   base::options(opts)
[13:21:05.013]                 }
[13:21:05.013]                 {
[13:21:05.013]                   {
[13:21:05.013]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.013]                     NULL
[13:21:05.013]                   }
[13:21:05.013]                   options(future.plan = NULL)
[13:21:05.013]                   if (is.na(NA_character_)) 
[13:21:05.013]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.013]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.013]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.013]                   {
[13:21:05.013]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.013]                     if (!future$lazy) 
[13:21:05.013]                       future <- run(future)
[13:21:05.013]                     invisible(future)
[13:21:05.013]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.013]                 }
[13:21:05.013]             }
[13:21:05.013]         }
[13:21:05.013]     })
[13:21:05.013]     if (TRUE) {
[13:21:05.013]         base::sink(type = "output", split = FALSE)
[13:21:05.013]         if (TRUE) {
[13:21:05.013]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.013]         }
[13:21:05.013]         else {
[13:21:05.013]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.013]         }
[13:21:05.013]         base::close(...future.stdout)
[13:21:05.013]         ...future.stdout <- NULL
[13:21:05.013]     }
[13:21:05.013]     ...future.result$conditions <- ...future.conditions
[13:21:05.013]     ...future.result$finished <- base::Sys.time()
[13:21:05.013]     ...future.result
[13:21:05.013] }
[13:21:05.016] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:21:05.016] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:21:05.017] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:21:05.017] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:21:05.017] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:21:05.019] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.019] - Validating connection of MultisessionFuture
[13:21:05.019] - received message: FutureResult
[13:21:05.019] - Received FutureResult
[13:21:05.019] - Erased future from FutureRegistry
[13:21:05.020] result() for ClusterFuture ...
[13:21:05.020] - result already collected: FutureResult
[13:21:05.020] result() for ClusterFuture ... done
[13:21:05.020] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.020] result() for ClusterFuture ...
[13:21:05.020] - result already collected: FutureResult
[13:21:05.020] result() for ClusterFuture ... done
[13:21:05.020] result() for ClusterFuture ...
[13:21:05.021] - result already collected: FutureResult
[13:21:05.021] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[13:21:05.024] getGlobalsAndPackages() ...
[13:21:05.024] Searching for globals...
[13:21:05.025] - globals found: [2] ‘{’, ‘ii’
[13:21:05.025] Searching for globals ... DONE
[13:21:05.026] Resolving globals: FALSE
[13:21:05.026] The total size of the 1 globals is 56 bytes (56 bytes)
[13:21:05.026] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:21:05.027] - globals: [1] ‘ii’
[13:21:05.027] 
[13:21:05.027] getGlobalsAndPackages() ... DONE
[13:21:05.038] Packages needed by the future expression (n = 0): <none>
[13:21:05.038] Packages needed by future strategies (n = 0): <none>
[13:21:05.039] {
[13:21:05.039]     {
[13:21:05.039]         {
[13:21:05.039]             ...future.startTime <- base::Sys.time()
[13:21:05.039]             {
[13:21:05.039]                 {
[13:21:05.039]                   {
[13:21:05.039]                     {
[13:21:05.039]                       base::local({
[13:21:05.039]                         has_future <- base::requireNamespace("future", 
[13:21:05.039]                           quietly = TRUE)
[13:21:05.039]                         if (has_future) {
[13:21:05.039]                           ns <- base::getNamespace("future")
[13:21:05.039]                           version <- ns[[".package"]][["version"]]
[13:21:05.039]                           if (is.null(version)) 
[13:21:05.039]                             version <- utils::packageVersion("future")
[13:21:05.039]                         }
[13:21:05.039]                         else {
[13:21:05.039]                           version <- NULL
[13:21:05.039]                         }
[13:21:05.039]                         if (!has_future || version < "1.8.0") {
[13:21:05.039]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.039]                             "", base::R.version$version.string), 
[13:21:05.039]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.039]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.039]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.039]                               "release", "version")], collapse = " "), 
[13:21:05.039]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.039]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.039]                             info)
[13:21:05.039]                           info <- base::paste(info, collapse = "; ")
[13:21:05.039]                           if (!has_future) {
[13:21:05.039]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.039]                               info)
[13:21:05.039]                           }
[13:21:05.039]                           else {
[13:21:05.039]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.039]                               info, version)
[13:21:05.039]                           }
[13:21:05.039]                           base::stop(msg)
[13:21:05.039]                         }
[13:21:05.039]                       })
[13:21:05.039]                     }
[13:21:05.039]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.039]                     base::options(mc.cores = 1L)
[13:21:05.039]                   }
[13:21:05.039]                   options(future.plan = NULL)
[13:21:05.039]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.039]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.039]                 }
[13:21:05.039]                 ...future.workdir <- getwd()
[13:21:05.039]             }
[13:21:05.039]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.039]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.039]         }
[13:21:05.039]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.039]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.039]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.039]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.039]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.039]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.039]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.039]             base::names(...future.oldOptions))
[13:21:05.039]     }
[13:21:05.039]     if (FALSE) {
[13:21:05.039]     }
[13:21:05.039]     else {
[13:21:05.039]         if (TRUE) {
[13:21:05.039]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.039]                 open = "w")
[13:21:05.039]         }
[13:21:05.039]         else {
[13:21:05.039]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.039]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.039]         }
[13:21:05.039]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.039]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.039]             base::sink(type = "output", split = FALSE)
[13:21:05.039]             base::close(...future.stdout)
[13:21:05.039]         }, add = TRUE)
[13:21:05.039]     }
[13:21:05.039]     ...future.frame <- base::sys.nframe()
[13:21:05.039]     ...future.conditions <- base::list()
[13:21:05.039]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.039]     if (FALSE) {
[13:21:05.039]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.039]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.039]     }
[13:21:05.039]     ...future.result <- base::tryCatch({
[13:21:05.039]         base::withCallingHandlers({
[13:21:05.039]             ...future.value <- base::withVisible(base::local({
[13:21:05.039]                 ...future.makeSendCondition <- local({
[13:21:05.039]                   sendCondition <- NULL
[13:21:05.039]                   function(frame = 1L) {
[13:21:05.039]                     if (is.function(sendCondition)) 
[13:21:05.039]                       return(sendCondition)
[13:21:05.039]                     ns <- getNamespace("parallel")
[13:21:05.039]                     if (exists("sendData", mode = "function", 
[13:21:05.039]                       envir = ns)) {
[13:21:05.039]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.039]                         envir = ns)
[13:21:05.039]                       envir <- sys.frame(frame)
[13:21:05.039]                       master <- NULL
[13:21:05.039]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.039]                         !identical(envir, emptyenv())) {
[13:21:05.039]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.039]                           inherits = FALSE)) {
[13:21:05.039]                           master <- get("master", mode = "list", 
[13:21:05.039]                             envir = envir, inherits = FALSE)
[13:21:05.039]                           if (inherits(master, c("SOCKnode", 
[13:21:05.039]                             "SOCK0node"))) {
[13:21:05.039]                             sendCondition <<- function(cond) {
[13:21:05.039]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.039]                                 success = TRUE)
[13:21:05.039]                               parallel_sendData(master, data)
[13:21:05.039]                             }
[13:21:05.039]                             return(sendCondition)
[13:21:05.039]                           }
[13:21:05.039]                         }
[13:21:05.039]                         frame <- frame + 1L
[13:21:05.039]                         envir <- sys.frame(frame)
[13:21:05.039]                       }
[13:21:05.039]                     }
[13:21:05.039]                     sendCondition <<- function(cond) NULL
[13:21:05.039]                   }
[13:21:05.039]                 })
[13:21:05.039]                 withCallingHandlers({
[13:21:05.039]                   {
[13:21:05.039]                     ii
[13:21:05.039]                   }
[13:21:05.039]                 }, immediateCondition = function(cond) {
[13:21:05.039]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.039]                   sendCondition(cond)
[13:21:05.039]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.039]                   {
[13:21:05.039]                     inherits <- base::inherits
[13:21:05.039]                     invokeRestart <- base::invokeRestart
[13:21:05.039]                     is.null <- base::is.null
[13:21:05.039]                     muffled <- FALSE
[13:21:05.039]                     if (inherits(cond, "message")) {
[13:21:05.039]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.039]                       if (muffled) 
[13:21:05.039]                         invokeRestart("muffleMessage")
[13:21:05.039]                     }
[13:21:05.039]                     else if (inherits(cond, "warning")) {
[13:21:05.039]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.039]                       if (muffled) 
[13:21:05.039]                         invokeRestart("muffleWarning")
[13:21:05.039]                     }
[13:21:05.039]                     else if (inherits(cond, "condition")) {
[13:21:05.039]                       if (!is.null(pattern)) {
[13:21:05.039]                         computeRestarts <- base::computeRestarts
[13:21:05.039]                         grepl <- base::grepl
[13:21:05.039]                         restarts <- computeRestarts(cond)
[13:21:05.039]                         for (restart in restarts) {
[13:21:05.039]                           name <- restart$name
[13:21:05.039]                           if (is.null(name)) 
[13:21:05.039]                             next
[13:21:05.039]                           if (!grepl(pattern, name)) 
[13:21:05.039]                             next
[13:21:05.039]                           invokeRestart(restart)
[13:21:05.039]                           muffled <- TRUE
[13:21:05.039]                           break
[13:21:05.039]                         }
[13:21:05.039]                       }
[13:21:05.039]                     }
[13:21:05.039]                     invisible(muffled)
[13:21:05.039]                   }
[13:21:05.039]                   muffleCondition(cond)
[13:21:05.039]                 })
[13:21:05.039]             }))
[13:21:05.039]             future::FutureResult(value = ...future.value$value, 
[13:21:05.039]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.039]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.039]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.039]                     ...future.globalenv.names))
[13:21:05.039]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.039]         }, condition = base::local({
[13:21:05.039]             c <- base::c
[13:21:05.039]             inherits <- base::inherits
[13:21:05.039]             invokeRestart <- base::invokeRestart
[13:21:05.039]             length <- base::length
[13:21:05.039]             list <- base::list
[13:21:05.039]             seq.int <- base::seq.int
[13:21:05.039]             signalCondition <- base::signalCondition
[13:21:05.039]             sys.calls <- base::sys.calls
[13:21:05.039]             `[[` <- base::`[[`
[13:21:05.039]             `+` <- base::`+`
[13:21:05.039]             `<<-` <- base::`<<-`
[13:21:05.039]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.039]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.039]                   3L)]
[13:21:05.039]             }
[13:21:05.039]             function(cond) {
[13:21:05.039]                 is_error <- inherits(cond, "error")
[13:21:05.039]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.039]                   NULL)
[13:21:05.039]                 if (is_error) {
[13:21:05.039]                   sessionInformation <- function() {
[13:21:05.039]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.039]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.039]                       search = base::search(), system = base::Sys.info())
[13:21:05.039]                   }
[13:21:05.039]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.039]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.039]                     cond$call), session = sessionInformation(), 
[13:21:05.039]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.039]                   signalCondition(cond)
[13:21:05.039]                 }
[13:21:05.039]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.039]                 "immediateCondition"))) {
[13:21:05.039]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.039]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.039]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.039]                   if (TRUE && !signal) {
[13:21:05.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.039]                     {
[13:21:05.039]                       inherits <- base::inherits
[13:21:05.039]                       invokeRestart <- base::invokeRestart
[13:21:05.039]                       is.null <- base::is.null
[13:21:05.039]                       muffled <- FALSE
[13:21:05.039]                       if (inherits(cond, "message")) {
[13:21:05.039]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.039]                         if (muffled) 
[13:21:05.039]                           invokeRestart("muffleMessage")
[13:21:05.039]                       }
[13:21:05.039]                       else if (inherits(cond, "warning")) {
[13:21:05.039]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.039]                         if (muffled) 
[13:21:05.039]                           invokeRestart("muffleWarning")
[13:21:05.039]                       }
[13:21:05.039]                       else if (inherits(cond, "condition")) {
[13:21:05.039]                         if (!is.null(pattern)) {
[13:21:05.039]                           computeRestarts <- base::computeRestarts
[13:21:05.039]                           grepl <- base::grepl
[13:21:05.039]                           restarts <- computeRestarts(cond)
[13:21:05.039]                           for (restart in restarts) {
[13:21:05.039]                             name <- restart$name
[13:21:05.039]                             if (is.null(name)) 
[13:21:05.039]                               next
[13:21:05.039]                             if (!grepl(pattern, name)) 
[13:21:05.039]                               next
[13:21:05.039]                             invokeRestart(restart)
[13:21:05.039]                             muffled <- TRUE
[13:21:05.039]                             break
[13:21:05.039]                           }
[13:21:05.039]                         }
[13:21:05.039]                       }
[13:21:05.039]                       invisible(muffled)
[13:21:05.039]                     }
[13:21:05.039]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.039]                   }
[13:21:05.039]                 }
[13:21:05.039]                 else {
[13:21:05.039]                   if (TRUE) {
[13:21:05.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.039]                     {
[13:21:05.039]                       inherits <- base::inherits
[13:21:05.039]                       invokeRestart <- base::invokeRestart
[13:21:05.039]                       is.null <- base::is.null
[13:21:05.039]                       muffled <- FALSE
[13:21:05.039]                       if (inherits(cond, "message")) {
[13:21:05.039]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.039]                         if (muffled) 
[13:21:05.039]                           invokeRestart("muffleMessage")
[13:21:05.039]                       }
[13:21:05.039]                       else if (inherits(cond, "warning")) {
[13:21:05.039]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.039]                         if (muffled) 
[13:21:05.039]                           invokeRestart("muffleWarning")
[13:21:05.039]                       }
[13:21:05.039]                       else if (inherits(cond, "condition")) {
[13:21:05.039]                         if (!is.null(pattern)) {
[13:21:05.039]                           computeRestarts <- base::computeRestarts
[13:21:05.039]                           grepl <- base::grepl
[13:21:05.039]                           restarts <- computeRestarts(cond)
[13:21:05.039]                           for (restart in restarts) {
[13:21:05.039]                             name <- restart$name
[13:21:05.039]                             if (is.null(name)) 
[13:21:05.039]                               next
[13:21:05.039]                             if (!grepl(pattern, name)) 
[13:21:05.039]                               next
[13:21:05.039]                             invokeRestart(restart)
[13:21:05.039]                             muffled <- TRUE
[13:21:05.039]                             break
[13:21:05.039]                           }
[13:21:05.039]                         }
[13:21:05.039]                       }
[13:21:05.039]                       invisible(muffled)
[13:21:05.039]                     }
[13:21:05.039]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.039]                   }
[13:21:05.039]                 }
[13:21:05.039]             }
[13:21:05.039]         }))
[13:21:05.039]     }, error = function(ex) {
[13:21:05.039]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.039]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.039]                 ...future.rng), started = ...future.startTime, 
[13:21:05.039]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.039]             version = "1.8"), class = "FutureResult")
[13:21:05.039]     }, finally = {
[13:21:05.039]         if (!identical(...future.workdir, getwd())) 
[13:21:05.039]             setwd(...future.workdir)
[13:21:05.039]         {
[13:21:05.039]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.039]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.039]             }
[13:21:05.039]             base::options(...future.oldOptions)
[13:21:05.039]             if (.Platform$OS.type == "windows") {
[13:21:05.039]                 old_names <- names(...future.oldEnvVars)
[13:21:05.039]                 envs <- base::Sys.getenv()
[13:21:05.039]                 names <- names(envs)
[13:21:05.039]                 common <- intersect(names, old_names)
[13:21:05.039]                 added <- setdiff(names, old_names)
[13:21:05.039]                 removed <- setdiff(old_names, names)
[13:21:05.039]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.039]                   envs[common]]
[13:21:05.039]                 NAMES <- toupper(changed)
[13:21:05.039]                 args <- list()
[13:21:05.039]                 for (kk in seq_along(NAMES)) {
[13:21:05.039]                   name <- changed[[kk]]
[13:21:05.039]                   NAME <- NAMES[[kk]]
[13:21:05.039]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.039]                     next
[13:21:05.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.039]                 }
[13:21:05.039]                 NAMES <- toupper(added)
[13:21:05.039]                 for (kk in seq_along(NAMES)) {
[13:21:05.039]                   name <- added[[kk]]
[13:21:05.039]                   NAME <- NAMES[[kk]]
[13:21:05.039]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.039]                     next
[13:21:05.039]                   args[[name]] <- ""
[13:21:05.039]                 }
[13:21:05.039]                 NAMES <- toupper(removed)
[13:21:05.039]                 for (kk in seq_along(NAMES)) {
[13:21:05.039]                   name <- removed[[kk]]
[13:21:05.039]                   NAME <- NAMES[[kk]]
[13:21:05.039]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.039]                     next
[13:21:05.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.039]                 }
[13:21:05.039]                 if (length(args) > 0) 
[13:21:05.039]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.039]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.039]             }
[13:21:05.039]             else {
[13:21:05.039]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.039]             }
[13:21:05.039]             {
[13:21:05.039]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.039]                   0L) {
[13:21:05.039]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.039]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.039]                   base::options(opts)
[13:21:05.039]                 }
[13:21:05.039]                 {
[13:21:05.039]                   {
[13:21:05.039]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.039]                     NULL
[13:21:05.039]                   }
[13:21:05.039]                   options(future.plan = NULL)
[13:21:05.039]                   if (is.na(NA_character_)) 
[13:21:05.039]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.039]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.039]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.039]                   {
[13:21:05.039]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.039]                     if (!future$lazy) 
[13:21:05.039]                       future <- run(future)
[13:21:05.039]                     invisible(future)
[13:21:05.039]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.039]                 }
[13:21:05.039]             }
[13:21:05.039]         }
[13:21:05.039]     })
[13:21:05.039]     if (TRUE) {
[13:21:05.039]         base::sink(type = "output", split = FALSE)
[13:21:05.039]         if (TRUE) {
[13:21:05.039]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.039]         }
[13:21:05.039]         else {
[13:21:05.039]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.039]         }
[13:21:05.039]         base::close(...future.stdout)
[13:21:05.039]         ...future.stdout <- NULL
[13:21:05.039]     }
[13:21:05.039]     ...future.result$conditions <- ...future.conditions
[13:21:05.039]     ...future.result$finished <- base::Sys.time()
[13:21:05.039]     ...future.result
[13:21:05.039] }
[13:21:05.042] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[13:21:05.042] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:21:05.042] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:21:05.042] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[13:21:05.043] MultisessionFuture started
 - Creating multisession future #1 ...
[13:21:05.046] getGlobalsAndPackages() ...
[13:21:05.047] Searching for globals...
[13:21:05.047] - globals found: [2] ‘{’, ‘ii’
[13:21:05.047] Searching for globals ... DONE
[13:21:05.048] Resolving globals: FALSE
[13:21:05.048] The total size of the 1 globals is 56 bytes (56 bytes)
[13:21:05.048] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[13:21:05.049] - globals: [1] ‘ii’
[13:21:05.049] 
[13:21:05.049] getGlobalsAndPackages() ... DONE
[13:21:05.060] Packages needed by the future expression (n = 0): <none>
[13:21:05.061] Packages needed by future strategies (n = 0): <none>
[13:21:05.061] {
[13:21:05.061]     {
[13:21:05.061]         {
[13:21:05.061]             ...future.startTime <- base::Sys.time()
[13:21:05.061]             {
[13:21:05.061]                 {
[13:21:05.061]                   {
[13:21:05.061]                     {
[13:21:05.061]                       base::local({
[13:21:05.061]                         has_future <- base::requireNamespace("future", 
[13:21:05.061]                           quietly = TRUE)
[13:21:05.061]                         if (has_future) {
[13:21:05.061]                           ns <- base::getNamespace("future")
[13:21:05.061]                           version <- ns[[".package"]][["version"]]
[13:21:05.061]                           if (is.null(version)) 
[13:21:05.061]                             version <- utils::packageVersion("future")
[13:21:05.061]                         }
[13:21:05.061]                         else {
[13:21:05.061]                           version <- NULL
[13:21:05.061]                         }
[13:21:05.061]                         if (!has_future || version < "1.8.0") {
[13:21:05.061]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.061]                             "", base::R.version$version.string), 
[13:21:05.061]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.061]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.061]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.061]                               "release", "version")], collapse = " "), 
[13:21:05.061]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.061]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.061]                             info)
[13:21:05.061]                           info <- base::paste(info, collapse = "; ")
[13:21:05.061]                           if (!has_future) {
[13:21:05.061]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.061]                               info)
[13:21:05.061]                           }
[13:21:05.061]                           else {
[13:21:05.061]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.061]                               info, version)
[13:21:05.061]                           }
[13:21:05.061]                           base::stop(msg)
[13:21:05.061]                         }
[13:21:05.061]                       })
[13:21:05.061]                     }
[13:21:05.061]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.061]                     base::options(mc.cores = 1L)
[13:21:05.061]                   }
[13:21:05.061]                   options(future.plan = NULL)
[13:21:05.061]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.061]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.061]                 }
[13:21:05.061]                 ...future.workdir <- getwd()
[13:21:05.061]             }
[13:21:05.061]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.061]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.061]         }
[13:21:05.061]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.061]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.061]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.061]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.061]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.061]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.061]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.061]             base::names(...future.oldOptions))
[13:21:05.061]     }
[13:21:05.061]     if (FALSE) {
[13:21:05.061]     }
[13:21:05.061]     else {
[13:21:05.061]         if (TRUE) {
[13:21:05.061]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.061]                 open = "w")
[13:21:05.061]         }
[13:21:05.061]         else {
[13:21:05.061]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.061]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.061]         }
[13:21:05.061]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.061]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.061]             base::sink(type = "output", split = FALSE)
[13:21:05.061]             base::close(...future.stdout)
[13:21:05.061]         }, add = TRUE)
[13:21:05.061]     }
[13:21:05.061]     ...future.frame <- base::sys.nframe()
[13:21:05.061]     ...future.conditions <- base::list()
[13:21:05.061]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.061]     if (FALSE) {
[13:21:05.061]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.061]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.061]     }
[13:21:05.061]     ...future.result <- base::tryCatch({
[13:21:05.061]         base::withCallingHandlers({
[13:21:05.061]             ...future.value <- base::withVisible(base::local({
[13:21:05.061]                 ...future.makeSendCondition <- local({
[13:21:05.061]                   sendCondition <- NULL
[13:21:05.061]                   function(frame = 1L) {
[13:21:05.061]                     if (is.function(sendCondition)) 
[13:21:05.061]                       return(sendCondition)
[13:21:05.061]                     ns <- getNamespace("parallel")
[13:21:05.061]                     if (exists("sendData", mode = "function", 
[13:21:05.061]                       envir = ns)) {
[13:21:05.061]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.061]                         envir = ns)
[13:21:05.061]                       envir <- sys.frame(frame)
[13:21:05.061]                       master <- NULL
[13:21:05.061]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.061]                         !identical(envir, emptyenv())) {
[13:21:05.061]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.061]                           inherits = FALSE)) {
[13:21:05.061]                           master <- get("master", mode = "list", 
[13:21:05.061]                             envir = envir, inherits = FALSE)
[13:21:05.061]                           if (inherits(master, c("SOCKnode", 
[13:21:05.061]                             "SOCK0node"))) {
[13:21:05.061]                             sendCondition <<- function(cond) {
[13:21:05.061]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.061]                                 success = TRUE)
[13:21:05.061]                               parallel_sendData(master, data)
[13:21:05.061]                             }
[13:21:05.061]                             return(sendCondition)
[13:21:05.061]                           }
[13:21:05.061]                         }
[13:21:05.061]                         frame <- frame + 1L
[13:21:05.061]                         envir <- sys.frame(frame)
[13:21:05.061]                       }
[13:21:05.061]                     }
[13:21:05.061]                     sendCondition <<- function(cond) NULL
[13:21:05.061]                   }
[13:21:05.061]                 })
[13:21:05.061]                 withCallingHandlers({
[13:21:05.061]                   {
[13:21:05.061]                     ii
[13:21:05.061]                   }
[13:21:05.061]                 }, immediateCondition = function(cond) {
[13:21:05.061]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.061]                   sendCondition(cond)
[13:21:05.061]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.061]                   {
[13:21:05.061]                     inherits <- base::inherits
[13:21:05.061]                     invokeRestart <- base::invokeRestart
[13:21:05.061]                     is.null <- base::is.null
[13:21:05.061]                     muffled <- FALSE
[13:21:05.061]                     if (inherits(cond, "message")) {
[13:21:05.061]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.061]                       if (muffled) 
[13:21:05.061]                         invokeRestart("muffleMessage")
[13:21:05.061]                     }
[13:21:05.061]                     else if (inherits(cond, "warning")) {
[13:21:05.061]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.061]                       if (muffled) 
[13:21:05.061]                         invokeRestart("muffleWarning")
[13:21:05.061]                     }
[13:21:05.061]                     else if (inherits(cond, "condition")) {
[13:21:05.061]                       if (!is.null(pattern)) {
[13:21:05.061]                         computeRestarts <- base::computeRestarts
[13:21:05.061]                         grepl <- base::grepl
[13:21:05.061]                         restarts <- computeRestarts(cond)
[13:21:05.061]                         for (restart in restarts) {
[13:21:05.061]                           name <- restart$name
[13:21:05.061]                           if (is.null(name)) 
[13:21:05.061]                             next
[13:21:05.061]                           if (!grepl(pattern, name)) 
[13:21:05.061]                             next
[13:21:05.061]                           invokeRestart(restart)
[13:21:05.061]                           muffled <- TRUE
[13:21:05.061]                           break
[13:21:05.061]                         }
[13:21:05.061]                       }
[13:21:05.061]                     }
[13:21:05.061]                     invisible(muffled)
[13:21:05.061]                   }
[13:21:05.061]                   muffleCondition(cond)
[13:21:05.061]                 })
[13:21:05.061]             }))
[13:21:05.061]             future::FutureResult(value = ...future.value$value, 
[13:21:05.061]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.061]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.061]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.061]                     ...future.globalenv.names))
[13:21:05.061]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.061]         }, condition = base::local({
[13:21:05.061]             c <- base::c
[13:21:05.061]             inherits <- base::inherits
[13:21:05.061]             invokeRestart <- base::invokeRestart
[13:21:05.061]             length <- base::length
[13:21:05.061]             list <- base::list
[13:21:05.061]             seq.int <- base::seq.int
[13:21:05.061]             signalCondition <- base::signalCondition
[13:21:05.061]             sys.calls <- base::sys.calls
[13:21:05.061]             `[[` <- base::`[[`
[13:21:05.061]             `+` <- base::`+`
[13:21:05.061]             `<<-` <- base::`<<-`
[13:21:05.061]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.061]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.061]                   3L)]
[13:21:05.061]             }
[13:21:05.061]             function(cond) {
[13:21:05.061]                 is_error <- inherits(cond, "error")
[13:21:05.061]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.061]                   NULL)
[13:21:05.061]                 if (is_error) {
[13:21:05.061]                   sessionInformation <- function() {
[13:21:05.061]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.061]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.061]                       search = base::search(), system = base::Sys.info())
[13:21:05.061]                   }
[13:21:05.061]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.061]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.061]                     cond$call), session = sessionInformation(), 
[13:21:05.061]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.061]                   signalCondition(cond)
[13:21:05.061]                 }
[13:21:05.061]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.061]                 "immediateCondition"))) {
[13:21:05.061]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.061]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.061]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.061]                   if (TRUE && !signal) {
[13:21:05.061]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.061]                     {
[13:21:05.061]                       inherits <- base::inherits
[13:21:05.061]                       invokeRestart <- base::invokeRestart
[13:21:05.061]                       is.null <- base::is.null
[13:21:05.061]                       muffled <- FALSE
[13:21:05.061]                       if (inherits(cond, "message")) {
[13:21:05.061]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.061]                         if (muffled) 
[13:21:05.061]                           invokeRestart("muffleMessage")
[13:21:05.061]                       }
[13:21:05.061]                       else if (inherits(cond, "warning")) {
[13:21:05.061]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.061]                         if (muffled) 
[13:21:05.061]                           invokeRestart("muffleWarning")
[13:21:05.061]                       }
[13:21:05.061]                       else if (inherits(cond, "condition")) {
[13:21:05.061]                         if (!is.null(pattern)) {
[13:21:05.061]                           computeRestarts <- base::computeRestarts
[13:21:05.061]                           grepl <- base::grepl
[13:21:05.061]                           restarts <- computeRestarts(cond)
[13:21:05.061]                           for (restart in restarts) {
[13:21:05.061]                             name <- restart$name
[13:21:05.061]                             if (is.null(name)) 
[13:21:05.061]                               next
[13:21:05.061]                             if (!grepl(pattern, name)) 
[13:21:05.061]                               next
[13:21:05.061]                             invokeRestart(restart)
[13:21:05.061]                             muffled <- TRUE
[13:21:05.061]                             break
[13:21:05.061]                           }
[13:21:05.061]                         }
[13:21:05.061]                       }
[13:21:05.061]                       invisible(muffled)
[13:21:05.061]                     }
[13:21:05.061]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.061]                   }
[13:21:05.061]                 }
[13:21:05.061]                 else {
[13:21:05.061]                   if (TRUE) {
[13:21:05.061]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.061]                     {
[13:21:05.061]                       inherits <- base::inherits
[13:21:05.061]                       invokeRestart <- base::invokeRestart
[13:21:05.061]                       is.null <- base::is.null
[13:21:05.061]                       muffled <- FALSE
[13:21:05.061]                       if (inherits(cond, "message")) {
[13:21:05.061]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.061]                         if (muffled) 
[13:21:05.061]                           invokeRestart("muffleMessage")
[13:21:05.061]                       }
[13:21:05.061]                       else if (inherits(cond, "warning")) {
[13:21:05.061]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.061]                         if (muffled) 
[13:21:05.061]                           invokeRestart("muffleWarning")
[13:21:05.061]                       }
[13:21:05.061]                       else if (inherits(cond, "condition")) {
[13:21:05.061]                         if (!is.null(pattern)) {
[13:21:05.061]                           computeRestarts <- base::computeRestarts
[13:21:05.061]                           grepl <- base::grepl
[13:21:05.061]                           restarts <- computeRestarts(cond)
[13:21:05.061]                           for (restart in restarts) {
[13:21:05.061]                             name <- restart$name
[13:21:05.061]                             if (is.null(name)) 
[13:21:05.061]                               next
[13:21:05.061]                             if (!grepl(pattern, name)) 
[13:21:05.061]                               next
[13:21:05.061]                             invokeRestart(restart)
[13:21:05.061]                             muffled <- TRUE
[13:21:05.061]                             break
[13:21:05.061]                           }
[13:21:05.061]                         }
[13:21:05.061]                       }
[13:21:05.061]                       invisible(muffled)
[13:21:05.061]                     }
[13:21:05.061]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.061]                   }
[13:21:05.061]                 }
[13:21:05.061]             }
[13:21:05.061]         }))
[13:21:05.061]     }, error = function(ex) {
[13:21:05.061]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.061]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.061]                 ...future.rng), started = ...future.startTime, 
[13:21:05.061]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.061]             version = "1.8"), class = "FutureResult")
[13:21:05.061]     }, finally = {
[13:21:05.061]         if (!identical(...future.workdir, getwd())) 
[13:21:05.061]             setwd(...future.workdir)
[13:21:05.061]         {
[13:21:05.061]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.061]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.061]             }
[13:21:05.061]             base::options(...future.oldOptions)
[13:21:05.061]             if (.Platform$OS.type == "windows") {
[13:21:05.061]                 old_names <- names(...future.oldEnvVars)
[13:21:05.061]                 envs <- base::Sys.getenv()
[13:21:05.061]                 names <- names(envs)
[13:21:05.061]                 common <- intersect(names, old_names)
[13:21:05.061]                 added <- setdiff(names, old_names)
[13:21:05.061]                 removed <- setdiff(old_names, names)
[13:21:05.061]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.061]                   envs[common]]
[13:21:05.061]                 NAMES <- toupper(changed)
[13:21:05.061]                 args <- list()
[13:21:05.061]                 for (kk in seq_along(NAMES)) {
[13:21:05.061]                   name <- changed[[kk]]
[13:21:05.061]                   NAME <- NAMES[[kk]]
[13:21:05.061]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.061]                     next
[13:21:05.061]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.061]                 }
[13:21:05.061]                 NAMES <- toupper(added)
[13:21:05.061]                 for (kk in seq_along(NAMES)) {
[13:21:05.061]                   name <- added[[kk]]
[13:21:05.061]                   NAME <- NAMES[[kk]]
[13:21:05.061]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.061]                     next
[13:21:05.061]                   args[[name]] <- ""
[13:21:05.061]                 }
[13:21:05.061]                 NAMES <- toupper(removed)
[13:21:05.061]                 for (kk in seq_along(NAMES)) {
[13:21:05.061]                   name <- removed[[kk]]
[13:21:05.061]                   NAME <- NAMES[[kk]]
[13:21:05.061]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.061]                     next
[13:21:05.061]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.061]                 }
[13:21:05.061]                 if (length(args) > 0) 
[13:21:05.061]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.061]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.061]             }
[13:21:05.061]             else {
[13:21:05.061]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.061]             }
[13:21:05.061]             {
[13:21:05.061]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.061]                   0L) {
[13:21:05.061]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.061]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.061]                   base::options(opts)
[13:21:05.061]                 }
[13:21:05.061]                 {
[13:21:05.061]                   {
[13:21:05.061]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.061]                     NULL
[13:21:05.061]                   }
[13:21:05.061]                   options(future.plan = NULL)
[13:21:05.061]                   if (is.na(NA_character_)) 
[13:21:05.061]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.061]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.061]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.061]                   {
[13:21:05.061]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.061]                     if (!future$lazy) 
[13:21:05.061]                       future <- run(future)
[13:21:05.061]                     invisible(future)
[13:21:05.061]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.061]                 }
[13:21:05.061]             }
[13:21:05.061]         }
[13:21:05.061]     })
[13:21:05.061]     if (TRUE) {
[13:21:05.061]         base::sink(type = "output", split = FALSE)
[13:21:05.061]         if (TRUE) {
[13:21:05.061]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.061]         }
[13:21:05.061]         else {
[13:21:05.061]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.061]         }
[13:21:05.061]         base::close(...future.stdout)
[13:21:05.061]         ...future.stdout <- NULL
[13:21:05.061]     }
[13:21:05.061]     ...future.result$conditions <- ...future.conditions
[13:21:05.061]     ...future.result$finished <- base::Sys.time()
[13:21:05.061]     ...future.result
[13:21:05.061] }
[13:21:05.132] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[13:21:05.132] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:21:05.133] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:21:05.133] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[13:21:05.134] MultisessionFuture started
 - Resolving 2 multisession futures
[13:21:05.134] result() for ClusterFuture ...
[13:21:05.134] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.134] - Validating connection of MultisessionFuture
[13:21:05.203] - received message: FutureResult
[13:21:05.203] - Received FutureResult
[13:21:05.203] - Erased future from FutureRegistry
[13:21:05.203] result() for ClusterFuture ...
[13:21:05.204] - result already collected: FutureResult
[13:21:05.204] result() for ClusterFuture ... done
[13:21:05.204] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:05.204] result() for ClusterFuture ... done
[13:21:05.204] result() for ClusterFuture ...
[13:21:05.204] - result already collected: FutureResult
[13:21:05.204] result() for ClusterFuture ... done
[13:21:05.204] result() for ClusterFuture ...
[13:21:05.204] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.205] - Validating connection of MultisessionFuture
[13:21:05.205] - received message: FutureResult
[13:21:05.205] - Received FutureResult
[13:21:05.205] - Erased future from FutureRegistry
[13:21:05.205] result() for ClusterFuture ...
[13:21:05.205] - result already collected: FutureResult
[13:21:05.206] result() for ClusterFuture ... done
[13:21:05.206] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:05.206] result() for ClusterFuture ... done
[13:21:05.206] result() for ClusterFuture ...
[13:21:05.206] - result already collected: FutureResult
[13:21:05.206] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[13:21:05.206] getGlobalsAndPackages() ...
[13:21:05.206] Searching for globals...
[13:21:05.207] - globals found: [1] ‘.libPaths’
[13:21:05.207] Searching for globals ... DONE
[13:21:05.207] Resolving globals: FALSE
[13:21:05.208] 
[13:21:05.208] 
[13:21:05.208] getGlobalsAndPackages() ... DONE
[13:21:05.208] run() for ‘Future’ ...
[13:21:05.208] - state: ‘created’
[13:21:05.209] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:21:05.209] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:05.209] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:21:05.209]   - Field: ‘label’
[13:21:05.209]   - Field: ‘local’
[13:21:05.210]   - Field: ‘owner’
[13:21:05.210]   - Field: ‘envir’
[13:21:05.210]   - Field: ‘packages’
[13:21:05.210]   - Field: ‘gc’
[13:21:05.210]   - Field: ‘conditions’
[13:21:05.210]   - Field: ‘expr’
[13:21:05.210]   - Field: ‘uuid’
[13:21:05.210]   - Field: ‘seed’
[13:21:05.210]   - Field: ‘version’
[13:21:05.211]   - Field: ‘result’
[13:21:05.211]   - Field: ‘asynchronous’
[13:21:05.211]   - Field: ‘calls’
[13:21:05.211]   - Field: ‘globals’
[13:21:05.211]   - Field: ‘stdout’
[13:21:05.211]   - Field: ‘earlySignal’
[13:21:05.211]   - Field: ‘lazy’
[13:21:05.211]   - Field: ‘state’
[13:21:05.211] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:21:05.212] - Launch lazy future ...
[13:21:05.212] Packages needed by the future expression (n = 0): <none>
[13:21:05.212] Packages needed by future strategies (n = 0): <none>
[13:21:05.212] {
[13:21:05.212]     {
[13:21:05.212]         {
[13:21:05.212]             ...future.startTime <- base::Sys.time()
[13:21:05.212]             {
[13:21:05.212]                 {
[13:21:05.212]                   {
[13:21:05.212]                     base::local({
[13:21:05.212]                       has_future <- base::requireNamespace("future", 
[13:21:05.212]                         quietly = TRUE)
[13:21:05.212]                       if (has_future) {
[13:21:05.212]                         ns <- base::getNamespace("future")
[13:21:05.212]                         version <- ns[[".package"]][["version"]]
[13:21:05.212]                         if (is.null(version)) 
[13:21:05.212]                           version <- utils::packageVersion("future")
[13:21:05.212]                       }
[13:21:05.212]                       else {
[13:21:05.212]                         version <- NULL
[13:21:05.212]                       }
[13:21:05.212]                       if (!has_future || version < "1.8.0") {
[13:21:05.212]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.212]                           "", base::R.version$version.string), 
[13:21:05.212]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:05.212]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.212]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.212]                             "release", "version")], collapse = " "), 
[13:21:05.212]                           hostname = base::Sys.info()[["nodename"]])
[13:21:05.212]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.212]                           info)
[13:21:05.212]                         info <- base::paste(info, collapse = "; ")
[13:21:05.212]                         if (!has_future) {
[13:21:05.212]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.212]                             info)
[13:21:05.212]                         }
[13:21:05.212]                         else {
[13:21:05.212]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.212]                             info, version)
[13:21:05.212]                         }
[13:21:05.212]                         base::stop(msg)
[13:21:05.212]                       }
[13:21:05.212]                     })
[13:21:05.212]                   }
[13:21:05.212]                   options(future.plan = NULL)
[13:21:05.212]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.212]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.212]                 }
[13:21:05.212]                 ...future.workdir <- getwd()
[13:21:05.212]             }
[13:21:05.212]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.212]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.212]         }
[13:21:05.212]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.212]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.212]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.212]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.212]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.212]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.212]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.212]             base::names(...future.oldOptions))
[13:21:05.212]     }
[13:21:05.212]     if (FALSE) {
[13:21:05.212]     }
[13:21:05.212]     else {
[13:21:05.212]         if (TRUE) {
[13:21:05.212]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.212]                 open = "w")
[13:21:05.212]         }
[13:21:05.212]         else {
[13:21:05.212]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.212]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.212]         }
[13:21:05.212]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.212]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.212]             base::sink(type = "output", split = FALSE)
[13:21:05.212]             base::close(...future.stdout)
[13:21:05.212]         }, add = TRUE)
[13:21:05.212]     }
[13:21:05.212]     ...future.frame <- base::sys.nframe()
[13:21:05.212]     ...future.conditions <- base::list()
[13:21:05.212]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.212]     if (FALSE) {
[13:21:05.212]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.212]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.212]     }
[13:21:05.212]     ...future.result <- base::tryCatch({
[13:21:05.212]         base::withCallingHandlers({
[13:21:05.212]             ...future.value <- base::withVisible(base::local(.libPaths()))
[13:21:05.212]             future::FutureResult(value = ...future.value$value, 
[13:21:05.212]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.212]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.212]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.212]                     ...future.globalenv.names))
[13:21:05.212]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.212]         }, condition = base::local({
[13:21:05.212]             c <- base::c
[13:21:05.212]             inherits <- base::inherits
[13:21:05.212]             invokeRestart <- base::invokeRestart
[13:21:05.212]             length <- base::length
[13:21:05.212]             list <- base::list
[13:21:05.212]             seq.int <- base::seq.int
[13:21:05.212]             signalCondition <- base::signalCondition
[13:21:05.212]             sys.calls <- base::sys.calls
[13:21:05.212]             `[[` <- base::`[[`
[13:21:05.212]             `+` <- base::`+`
[13:21:05.212]             `<<-` <- base::`<<-`
[13:21:05.212]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.212]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.212]                   3L)]
[13:21:05.212]             }
[13:21:05.212]             function(cond) {
[13:21:05.212]                 is_error <- inherits(cond, "error")
[13:21:05.212]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.212]                   NULL)
[13:21:05.212]                 if (is_error) {
[13:21:05.212]                   sessionInformation <- function() {
[13:21:05.212]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.212]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.212]                       search = base::search(), system = base::Sys.info())
[13:21:05.212]                   }
[13:21:05.212]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.212]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.212]                     cond$call), session = sessionInformation(), 
[13:21:05.212]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.212]                   signalCondition(cond)
[13:21:05.212]                 }
[13:21:05.212]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.212]                 "immediateCondition"))) {
[13:21:05.212]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.212]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.212]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.212]                   if (TRUE && !signal) {
[13:21:05.212]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.212]                     {
[13:21:05.212]                       inherits <- base::inherits
[13:21:05.212]                       invokeRestart <- base::invokeRestart
[13:21:05.212]                       is.null <- base::is.null
[13:21:05.212]                       muffled <- FALSE
[13:21:05.212]                       if (inherits(cond, "message")) {
[13:21:05.212]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.212]                         if (muffled) 
[13:21:05.212]                           invokeRestart("muffleMessage")
[13:21:05.212]                       }
[13:21:05.212]                       else if (inherits(cond, "warning")) {
[13:21:05.212]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.212]                         if (muffled) 
[13:21:05.212]                           invokeRestart("muffleWarning")
[13:21:05.212]                       }
[13:21:05.212]                       else if (inherits(cond, "condition")) {
[13:21:05.212]                         if (!is.null(pattern)) {
[13:21:05.212]                           computeRestarts <- base::computeRestarts
[13:21:05.212]                           grepl <- base::grepl
[13:21:05.212]                           restarts <- computeRestarts(cond)
[13:21:05.212]                           for (restart in restarts) {
[13:21:05.212]                             name <- restart$name
[13:21:05.212]                             if (is.null(name)) 
[13:21:05.212]                               next
[13:21:05.212]                             if (!grepl(pattern, name)) 
[13:21:05.212]                               next
[13:21:05.212]                             invokeRestart(restart)
[13:21:05.212]                             muffled <- TRUE
[13:21:05.212]                             break
[13:21:05.212]                           }
[13:21:05.212]                         }
[13:21:05.212]                       }
[13:21:05.212]                       invisible(muffled)
[13:21:05.212]                     }
[13:21:05.212]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.212]                   }
[13:21:05.212]                 }
[13:21:05.212]                 else {
[13:21:05.212]                   if (TRUE) {
[13:21:05.212]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.212]                     {
[13:21:05.212]                       inherits <- base::inherits
[13:21:05.212]                       invokeRestart <- base::invokeRestart
[13:21:05.212]                       is.null <- base::is.null
[13:21:05.212]                       muffled <- FALSE
[13:21:05.212]                       if (inherits(cond, "message")) {
[13:21:05.212]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.212]                         if (muffled) 
[13:21:05.212]                           invokeRestart("muffleMessage")
[13:21:05.212]                       }
[13:21:05.212]                       else if (inherits(cond, "warning")) {
[13:21:05.212]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.212]                         if (muffled) 
[13:21:05.212]                           invokeRestart("muffleWarning")
[13:21:05.212]                       }
[13:21:05.212]                       else if (inherits(cond, "condition")) {
[13:21:05.212]                         if (!is.null(pattern)) {
[13:21:05.212]                           computeRestarts <- base::computeRestarts
[13:21:05.212]                           grepl <- base::grepl
[13:21:05.212]                           restarts <- computeRestarts(cond)
[13:21:05.212]                           for (restart in restarts) {
[13:21:05.212]                             name <- restart$name
[13:21:05.212]                             if (is.null(name)) 
[13:21:05.212]                               next
[13:21:05.212]                             if (!grepl(pattern, name)) 
[13:21:05.212]                               next
[13:21:05.212]                             invokeRestart(restart)
[13:21:05.212]                             muffled <- TRUE
[13:21:05.212]                             break
[13:21:05.212]                           }
[13:21:05.212]                         }
[13:21:05.212]                       }
[13:21:05.212]                       invisible(muffled)
[13:21:05.212]                     }
[13:21:05.212]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.212]                   }
[13:21:05.212]                 }
[13:21:05.212]             }
[13:21:05.212]         }))
[13:21:05.212]     }, error = function(ex) {
[13:21:05.212]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.212]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.212]                 ...future.rng), started = ...future.startTime, 
[13:21:05.212]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.212]             version = "1.8"), class = "FutureResult")
[13:21:05.212]     }, finally = {
[13:21:05.212]         if (!identical(...future.workdir, getwd())) 
[13:21:05.212]             setwd(...future.workdir)
[13:21:05.212]         {
[13:21:05.212]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.212]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.212]             }
[13:21:05.212]             base::options(...future.oldOptions)
[13:21:05.212]             if (.Platform$OS.type == "windows") {
[13:21:05.212]                 old_names <- names(...future.oldEnvVars)
[13:21:05.212]                 envs <- base::Sys.getenv()
[13:21:05.212]                 names <- names(envs)
[13:21:05.212]                 common <- intersect(names, old_names)
[13:21:05.212]                 added <- setdiff(names, old_names)
[13:21:05.212]                 removed <- setdiff(old_names, names)
[13:21:05.212]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.212]                   envs[common]]
[13:21:05.212]                 NAMES <- toupper(changed)
[13:21:05.212]                 args <- list()
[13:21:05.212]                 for (kk in seq_along(NAMES)) {
[13:21:05.212]                   name <- changed[[kk]]
[13:21:05.212]                   NAME <- NAMES[[kk]]
[13:21:05.212]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.212]                     next
[13:21:05.212]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.212]                 }
[13:21:05.212]                 NAMES <- toupper(added)
[13:21:05.212]                 for (kk in seq_along(NAMES)) {
[13:21:05.212]                   name <- added[[kk]]
[13:21:05.212]                   NAME <- NAMES[[kk]]
[13:21:05.212]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.212]                     next
[13:21:05.212]                   args[[name]] <- ""
[13:21:05.212]                 }
[13:21:05.212]                 NAMES <- toupper(removed)
[13:21:05.212]                 for (kk in seq_along(NAMES)) {
[13:21:05.212]                   name <- removed[[kk]]
[13:21:05.212]                   NAME <- NAMES[[kk]]
[13:21:05.212]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.212]                     next
[13:21:05.212]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.212]                 }
[13:21:05.212]                 if (length(args) > 0) 
[13:21:05.212]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.212]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.212]             }
[13:21:05.212]             else {
[13:21:05.212]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.212]             }
[13:21:05.212]             {
[13:21:05.212]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.212]                   0L) {
[13:21:05.212]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.212]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.212]                   base::options(opts)
[13:21:05.212]                 }
[13:21:05.212]                 {
[13:21:05.212]                   {
[13:21:05.212]                     NULL
[13:21:05.212]                     RNGkind("Mersenne-Twister")
[13:21:05.212]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:05.212]                       inherits = FALSE)
[13:21:05.212]                   }
[13:21:05.212]                   options(future.plan = NULL)
[13:21:05.212]                   if (is.na(NA_character_)) 
[13:21:05.212]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.212]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.212]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.212]                   {
[13:21:05.212]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.212]                     if (!future$lazy) 
[13:21:05.212]                       future <- run(future)
[13:21:05.212]                     invisible(future)
[13:21:05.212]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.212]                 }
[13:21:05.212]             }
[13:21:05.212]         }
[13:21:05.212]     })
[13:21:05.212]     if (TRUE) {
[13:21:05.212]         base::sink(type = "output", split = FALSE)
[13:21:05.212]         if (TRUE) {
[13:21:05.212]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.212]         }
[13:21:05.212]         else {
[13:21:05.212]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.212]         }
[13:21:05.212]         base::close(...future.stdout)
[13:21:05.212]         ...future.stdout <- NULL
[13:21:05.212]     }
[13:21:05.212]     ...future.result$conditions <- ...future.conditions
[13:21:05.212]     ...future.result$finished <- base::Sys.time()
[13:21:05.212]     ...future.result
[13:21:05.212] }
[13:21:05.215] plan(): Setting new future strategy stack:
[13:21:05.217] List of future strategies:
[13:21:05.217] 1. sequential:
[13:21:05.217]    - args: function (..., envir = parent.frame())
[13:21:05.217]    - tweaked: FALSE
[13:21:05.217]    - call: NULL
[13:21:05.218] plan(): nbrOfWorkers() = 1
[13:21:05.218] plan(): Setting new future strategy stack:
[13:21:05.219] List of future strategies:
[13:21:05.219] 1. sequential:
[13:21:05.219]    - args: function (..., envir = parent.frame())
[13:21:05.219]    - tweaked: FALSE
[13:21:05.219]    - call: future::plan("sequential")
[13:21:05.219] plan(): nbrOfWorkers() = 1
[13:21:05.219] SequentialFuture started (and completed)
[13:21:05.219] - Launch lazy future ... done
[13:21:05.219] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[13:21:05.224] getGlobalsAndPackages() ...
[13:21:05.224] 
[13:21:05.224] - globals: [0] <none>
[13:21:05.224] getGlobalsAndPackages() ... DONE
[13:21:05.235] Packages needed by the future expression (n = 0): <none>
[13:21:05.235] Packages needed by future strategies (n = 0): <none>
[13:21:05.236] {
[13:21:05.236]     {
[13:21:05.236]         {
[13:21:05.236]             ...future.startTime <- base::Sys.time()
[13:21:05.236]             {
[13:21:05.236]                 {
[13:21:05.236]                   {
[13:21:05.236]                     {
[13:21:05.236]                       base::local({
[13:21:05.236]                         has_future <- base::requireNamespace("future", 
[13:21:05.236]                           quietly = TRUE)
[13:21:05.236]                         if (has_future) {
[13:21:05.236]                           ns <- base::getNamespace("future")
[13:21:05.236]                           version <- ns[[".package"]][["version"]]
[13:21:05.236]                           if (is.null(version)) 
[13:21:05.236]                             version <- utils::packageVersion("future")
[13:21:05.236]                         }
[13:21:05.236]                         else {
[13:21:05.236]                           version <- NULL
[13:21:05.236]                         }
[13:21:05.236]                         if (!has_future || version < "1.8.0") {
[13:21:05.236]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.236]                             "", base::R.version$version.string), 
[13:21:05.236]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.236]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.236]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.236]                               "release", "version")], collapse = " "), 
[13:21:05.236]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.236]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.236]                             info)
[13:21:05.236]                           info <- base::paste(info, collapse = "; ")
[13:21:05.236]                           if (!has_future) {
[13:21:05.236]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.236]                               info)
[13:21:05.236]                           }
[13:21:05.236]                           else {
[13:21:05.236]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.236]                               info, version)
[13:21:05.236]                           }
[13:21:05.236]                           base::stop(msg)
[13:21:05.236]                         }
[13:21:05.236]                       })
[13:21:05.236]                     }
[13:21:05.236]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.236]                     base::options(mc.cores = 1L)
[13:21:05.236]                   }
[13:21:05.236]                   options(future.plan = NULL)
[13:21:05.236]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.236]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.236]                 }
[13:21:05.236]                 ...future.workdir <- getwd()
[13:21:05.236]             }
[13:21:05.236]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.236]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.236]         }
[13:21:05.236]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.236]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.236]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.236]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.236]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.236]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.236]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.236]             base::names(...future.oldOptions))
[13:21:05.236]     }
[13:21:05.236]     if (FALSE) {
[13:21:05.236]     }
[13:21:05.236]     else {
[13:21:05.236]         if (TRUE) {
[13:21:05.236]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.236]                 open = "w")
[13:21:05.236]         }
[13:21:05.236]         else {
[13:21:05.236]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.236]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.236]         }
[13:21:05.236]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.236]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.236]             base::sink(type = "output", split = FALSE)
[13:21:05.236]             base::close(...future.stdout)
[13:21:05.236]         }, add = TRUE)
[13:21:05.236]     }
[13:21:05.236]     ...future.frame <- base::sys.nframe()
[13:21:05.236]     ...future.conditions <- base::list()
[13:21:05.236]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.236]     if (FALSE) {
[13:21:05.236]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.236]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.236]     }
[13:21:05.236]     ...future.result <- base::tryCatch({
[13:21:05.236]         base::withCallingHandlers({
[13:21:05.236]             ...future.value <- base::withVisible(base::local({
[13:21:05.236]                 ...future.makeSendCondition <- local({
[13:21:05.236]                   sendCondition <- NULL
[13:21:05.236]                   function(frame = 1L) {
[13:21:05.236]                     if (is.function(sendCondition)) 
[13:21:05.236]                       return(sendCondition)
[13:21:05.236]                     ns <- getNamespace("parallel")
[13:21:05.236]                     if (exists("sendData", mode = "function", 
[13:21:05.236]                       envir = ns)) {
[13:21:05.236]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.236]                         envir = ns)
[13:21:05.236]                       envir <- sys.frame(frame)
[13:21:05.236]                       master <- NULL
[13:21:05.236]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.236]                         !identical(envir, emptyenv())) {
[13:21:05.236]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.236]                           inherits = FALSE)) {
[13:21:05.236]                           master <- get("master", mode = "list", 
[13:21:05.236]                             envir = envir, inherits = FALSE)
[13:21:05.236]                           if (inherits(master, c("SOCKnode", 
[13:21:05.236]                             "SOCK0node"))) {
[13:21:05.236]                             sendCondition <<- function(cond) {
[13:21:05.236]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.236]                                 success = TRUE)
[13:21:05.236]                               parallel_sendData(master, data)
[13:21:05.236]                             }
[13:21:05.236]                             return(sendCondition)
[13:21:05.236]                           }
[13:21:05.236]                         }
[13:21:05.236]                         frame <- frame + 1L
[13:21:05.236]                         envir <- sys.frame(frame)
[13:21:05.236]                       }
[13:21:05.236]                     }
[13:21:05.236]                     sendCondition <<- function(cond) NULL
[13:21:05.236]                   }
[13:21:05.236]                 })
[13:21:05.236]                 withCallingHandlers({
[13:21:05.236]                   {
[13:21:05.236]                     stop("Whoops!")
[13:21:05.236]                     1
[13:21:05.236]                   }
[13:21:05.236]                 }, immediateCondition = function(cond) {
[13:21:05.236]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.236]                   sendCondition(cond)
[13:21:05.236]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.236]                   {
[13:21:05.236]                     inherits <- base::inherits
[13:21:05.236]                     invokeRestart <- base::invokeRestart
[13:21:05.236]                     is.null <- base::is.null
[13:21:05.236]                     muffled <- FALSE
[13:21:05.236]                     if (inherits(cond, "message")) {
[13:21:05.236]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.236]                       if (muffled) 
[13:21:05.236]                         invokeRestart("muffleMessage")
[13:21:05.236]                     }
[13:21:05.236]                     else if (inherits(cond, "warning")) {
[13:21:05.236]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.236]                       if (muffled) 
[13:21:05.236]                         invokeRestart("muffleWarning")
[13:21:05.236]                     }
[13:21:05.236]                     else if (inherits(cond, "condition")) {
[13:21:05.236]                       if (!is.null(pattern)) {
[13:21:05.236]                         computeRestarts <- base::computeRestarts
[13:21:05.236]                         grepl <- base::grepl
[13:21:05.236]                         restarts <- computeRestarts(cond)
[13:21:05.236]                         for (restart in restarts) {
[13:21:05.236]                           name <- restart$name
[13:21:05.236]                           if (is.null(name)) 
[13:21:05.236]                             next
[13:21:05.236]                           if (!grepl(pattern, name)) 
[13:21:05.236]                             next
[13:21:05.236]                           invokeRestart(restart)
[13:21:05.236]                           muffled <- TRUE
[13:21:05.236]                           break
[13:21:05.236]                         }
[13:21:05.236]                       }
[13:21:05.236]                     }
[13:21:05.236]                     invisible(muffled)
[13:21:05.236]                   }
[13:21:05.236]                   muffleCondition(cond)
[13:21:05.236]                 })
[13:21:05.236]             }))
[13:21:05.236]             future::FutureResult(value = ...future.value$value, 
[13:21:05.236]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.236]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.236]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.236]                     ...future.globalenv.names))
[13:21:05.236]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.236]         }, condition = base::local({
[13:21:05.236]             c <- base::c
[13:21:05.236]             inherits <- base::inherits
[13:21:05.236]             invokeRestart <- base::invokeRestart
[13:21:05.236]             length <- base::length
[13:21:05.236]             list <- base::list
[13:21:05.236]             seq.int <- base::seq.int
[13:21:05.236]             signalCondition <- base::signalCondition
[13:21:05.236]             sys.calls <- base::sys.calls
[13:21:05.236]             `[[` <- base::`[[`
[13:21:05.236]             `+` <- base::`+`
[13:21:05.236]             `<<-` <- base::`<<-`
[13:21:05.236]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.236]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.236]                   3L)]
[13:21:05.236]             }
[13:21:05.236]             function(cond) {
[13:21:05.236]                 is_error <- inherits(cond, "error")
[13:21:05.236]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.236]                   NULL)
[13:21:05.236]                 if (is_error) {
[13:21:05.236]                   sessionInformation <- function() {
[13:21:05.236]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.236]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.236]                       search = base::search(), system = base::Sys.info())
[13:21:05.236]                   }
[13:21:05.236]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.236]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.236]                     cond$call), session = sessionInformation(), 
[13:21:05.236]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.236]                   signalCondition(cond)
[13:21:05.236]                 }
[13:21:05.236]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.236]                 "immediateCondition"))) {
[13:21:05.236]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.236]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.236]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.236]                   if (TRUE && !signal) {
[13:21:05.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.236]                     {
[13:21:05.236]                       inherits <- base::inherits
[13:21:05.236]                       invokeRestart <- base::invokeRestart
[13:21:05.236]                       is.null <- base::is.null
[13:21:05.236]                       muffled <- FALSE
[13:21:05.236]                       if (inherits(cond, "message")) {
[13:21:05.236]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.236]                         if (muffled) 
[13:21:05.236]                           invokeRestart("muffleMessage")
[13:21:05.236]                       }
[13:21:05.236]                       else if (inherits(cond, "warning")) {
[13:21:05.236]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.236]                         if (muffled) 
[13:21:05.236]                           invokeRestart("muffleWarning")
[13:21:05.236]                       }
[13:21:05.236]                       else if (inherits(cond, "condition")) {
[13:21:05.236]                         if (!is.null(pattern)) {
[13:21:05.236]                           computeRestarts <- base::computeRestarts
[13:21:05.236]                           grepl <- base::grepl
[13:21:05.236]                           restarts <- computeRestarts(cond)
[13:21:05.236]                           for (restart in restarts) {
[13:21:05.236]                             name <- restart$name
[13:21:05.236]                             if (is.null(name)) 
[13:21:05.236]                               next
[13:21:05.236]                             if (!grepl(pattern, name)) 
[13:21:05.236]                               next
[13:21:05.236]                             invokeRestart(restart)
[13:21:05.236]                             muffled <- TRUE
[13:21:05.236]                             break
[13:21:05.236]                           }
[13:21:05.236]                         }
[13:21:05.236]                       }
[13:21:05.236]                       invisible(muffled)
[13:21:05.236]                     }
[13:21:05.236]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.236]                   }
[13:21:05.236]                 }
[13:21:05.236]                 else {
[13:21:05.236]                   if (TRUE) {
[13:21:05.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.236]                     {
[13:21:05.236]                       inherits <- base::inherits
[13:21:05.236]                       invokeRestart <- base::invokeRestart
[13:21:05.236]                       is.null <- base::is.null
[13:21:05.236]                       muffled <- FALSE
[13:21:05.236]                       if (inherits(cond, "message")) {
[13:21:05.236]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.236]                         if (muffled) 
[13:21:05.236]                           invokeRestart("muffleMessage")
[13:21:05.236]                       }
[13:21:05.236]                       else if (inherits(cond, "warning")) {
[13:21:05.236]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.236]                         if (muffled) 
[13:21:05.236]                           invokeRestart("muffleWarning")
[13:21:05.236]                       }
[13:21:05.236]                       else if (inherits(cond, "condition")) {
[13:21:05.236]                         if (!is.null(pattern)) {
[13:21:05.236]                           computeRestarts <- base::computeRestarts
[13:21:05.236]                           grepl <- base::grepl
[13:21:05.236]                           restarts <- computeRestarts(cond)
[13:21:05.236]                           for (restart in restarts) {
[13:21:05.236]                             name <- restart$name
[13:21:05.236]                             if (is.null(name)) 
[13:21:05.236]                               next
[13:21:05.236]                             if (!grepl(pattern, name)) 
[13:21:05.236]                               next
[13:21:05.236]                             invokeRestart(restart)
[13:21:05.236]                             muffled <- TRUE
[13:21:05.236]                             break
[13:21:05.236]                           }
[13:21:05.236]                         }
[13:21:05.236]                       }
[13:21:05.236]                       invisible(muffled)
[13:21:05.236]                     }
[13:21:05.236]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.236]                   }
[13:21:05.236]                 }
[13:21:05.236]             }
[13:21:05.236]         }))
[13:21:05.236]     }, error = function(ex) {
[13:21:05.236]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.236]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.236]                 ...future.rng), started = ...future.startTime, 
[13:21:05.236]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.236]             version = "1.8"), class = "FutureResult")
[13:21:05.236]     }, finally = {
[13:21:05.236]         if (!identical(...future.workdir, getwd())) 
[13:21:05.236]             setwd(...future.workdir)
[13:21:05.236]         {
[13:21:05.236]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.236]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.236]             }
[13:21:05.236]             base::options(...future.oldOptions)
[13:21:05.236]             if (.Platform$OS.type == "windows") {
[13:21:05.236]                 old_names <- names(...future.oldEnvVars)
[13:21:05.236]                 envs <- base::Sys.getenv()
[13:21:05.236]                 names <- names(envs)
[13:21:05.236]                 common <- intersect(names, old_names)
[13:21:05.236]                 added <- setdiff(names, old_names)
[13:21:05.236]                 removed <- setdiff(old_names, names)
[13:21:05.236]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.236]                   envs[common]]
[13:21:05.236]                 NAMES <- toupper(changed)
[13:21:05.236]                 args <- list()
[13:21:05.236]                 for (kk in seq_along(NAMES)) {
[13:21:05.236]                   name <- changed[[kk]]
[13:21:05.236]                   NAME <- NAMES[[kk]]
[13:21:05.236]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.236]                     next
[13:21:05.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.236]                 }
[13:21:05.236]                 NAMES <- toupper(added)
[13:21:05.236]                 for (kk in seq_along(NAMES)) {
[13:21:05.236]                   name <- added[[kk]]
[13:21:05.236]                   NAME <- NAMES[[kk]]
[13:21:05.236]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.236]                     next
[13:21:05.236]                   args[[name]] <- ""
[13:21:05.236]                 }
[13:21:05.236]                 NAMES <- toupper(removed)
[13:21:05.236]                 for (kk in seq_along(NAMES)) {
[13:21:05.236]                   name <- removed[[kk]]
[13:21:05.236]                   NAME <- NAMES[[kk]]
[13:21:05.236]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.236]                     next
[13:21:05.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.236]                 }
[13:21:05.236]                 if (length(args) > 0) 
[13:21:05.236]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.236]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.236]             }
[13:21:05.236]             else {
[13:21:05.236]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.236]             }
[13:21:05.236]             {
[13:21:05.236]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.236]                   0L) {
[13:21:05.236]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.236]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.236]                   base::options(opts)
[13:21:05.236]                 }
[13:21:05.236]                 {
[13:21:05.236]                   {
[13:21:05.236]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.236]                     NULL
[13:21:05.236]                   }
[13:21:05.236]                   options(future.plan = NULL)
[13:21:05.236]                   if (is.na(NA_character_)) 
[13:21:05.236]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.236]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.236]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.236]                   {
[13:21:05.236]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.236]                     if (!future$lazy) 
[13:21:05.236]                       future <- run(future)
[13:21:05.236]                     invisible(future)
[13:21:05.236]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.236]                 }
[13:21:05.236]             }
[13:21:05.236]         }
[13:21:05.236]     })
[13:21:05.236]     if (TRUE) {
[13:21:05.236]         base::sink(type = "output", split = FALSE)
[13:21:05.236]         if (TRUE) {
[13:21:05.236]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.236]         }
[13:21:05.236]         else {
[13:21:05.236]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.236]         }
[13:21:05.236]         base::close(...future.stdout)
[13:21:05.236]         ...future.stdout <- NULL
[13:21:05.236]     }
[13:21:05.236]     ...future.result$conditions <- ...future.conditions
[13:21:05.236]     ...future.result$finished <- base::Sys.time()
[13:21:05.236]     ...future.result
[13:21:05.236] }
[13:21:05.239] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:21:05.241] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.241] - Validating connection of MultisessionFuture
[13:21:05.241] - received message: FutureResult
[13:21:05.241] - Received FutureResult
[13:21:05.241] - Erased future from FutureRegistry
[13:21:05.241] result() for ClusterFuture ...
[13:21:05.242] - result already collected: FutureResult
[13:21:05.242] result() for ClusterFuture ... done
[13:21:05.242] signalConditions() ...
[13:21:05.242]  - include = ‘immediateCondition’
[13:21:05.242]  - exclude = 
[13:21:05.242]  - resignal = FALSE
[13:21:05.242]  - Number of conditions: 1
[13:21:05.242] signalConditions() ... done
[13:21:05.242] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.242] result() for ClusterFuture ...
[13:21:05.242] - result already collected: FutureResult
[13:21:05.243] result() for ClusterFuture ... done
[13:21:05.243] result() for ClusterFuture ...
[13:21:05.243] - result already collected: FutureResult
[13:21:05.243] result() for ClusterFuture ... done
[13:21:05.243] signalConditions() ...
[13:21:05.243]  - include = ‘immediateCondition’
[13:21:05.243]  - exclude = 
[13:21:05.243]  - resignal = FALSE
[13:21:05.243]  - Number of conditions: 1
[13:21:05.243] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:21:05.244] result() for ClusterFuture ...
[13:21:05.244] - result already collected: FutureResult
[13:21:05.244] result() for ClusterFuture ... done
[13:21:05.244] result() for ClusterFuture ...
[13:21:05.244] - result already collected: FutureResult
[13:21:05.244] result() for ClusterFuture ... done
[13:21:05.244] signalConditions() ...
[13:21:05.244]  - include = ‘immediateCondition’
[13:21:05.244]  - exclude = 
[13:21:05.244]  - resignal = FALSE
[13:21:05.245]  - Number of conditions: 1
[13:21:05.245] signalConditions() ... done
[13:21:05.245] Future state: ‘finished’
[13:21:05.245] result() for ClusterFuture ...
[13:21:05.245] - result already collected: FutureResult
[13:21:05.245] result() for ClusterFuture ... done
[13:21:05.245] signalConditions() ...
[13:21:05.245]  - include = ‘condition’
[13:21:05.245]  - exclude = ‘immediateCondition’
[13:21:05.245]  - resignal = TRUE
[13:21:05.245]  - Number of conditions: 1
[13:21:05.246]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:21:05.246] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:21:05.246] result() for ClusterFuture ...
[13:21:05.246] - result already collected: FutureResult
[13:21:05.246] result() for ClusterFuture ... done
[13:21:05.247] result() for ClusterFuture ...
[13:21:05.247] - result already collected: FutureResult
[13:21:05.247] result() for ClusterFuture ... done
[13:21:05.247] signalConditions() ...
[13:21:05.247]  - include = ‘immediateCondition’
[13:21:05.247]  - exclude = 
[13:21:05.247]  - resignal = FALSE
[13:21:05.247]  - Number of conditions: 1
[13:21:05.247] signalConditions() ... done
[13:21:05.247] Future state: ‘finished’
[13:21:05.247] result() for ClusterFuture ...
[13:21:05.248] - result already collected: FutureResult
[13:21:05.248] result() for ClusterFuture ... done
[13:21:05.248] signalConditions() ...
[13:21:05.248]  - include = ‘condition’
[13:21:05.248]  - exclude = ‘immediateCondition’
[13:21:05.248]  - resignal = TRUE
[13:21:05.248]  - Number of conditions: 1
[13:21:05.248]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:21:05.248] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[13:21:05.252] getGlobalsAndPackages() ...
[13:21:05.252] 
[13:21:05.252] - globals: [0] <none>
[13:21:05.252] getGlobalsAndPackages() ... DONE
[13:21:05.263] Packages needed by the future expression (n = 0): <none>
[13:21:05.263] Packages needed by future strategies (n = 0): <none>
[13:21:05.264] {
[13:21:05.264]     {
[13:21:05.264]         {
[13:21:05.264]             ...future.startTime <- base::Sys.time()
[13:21:05.264]             {
[13:21:05.264]                 {
[13:21:05.264]                   {
[13:21:05.264]                     {
[13:21:05.264]                       base::local({
[13:21:05.264]                         has_future <- base::requireNamespace("future", 
[13:21:05.264]                           quietly = TRUE)
[13:21:05.264]                         if (has_future) {
[13:21:05.264]                           ns <- base::getNamespace("future")
[13:21:05.264]                           version <- ns[[".package"]][["version"]]
[13:21:05.264]                           if (is.null(version)) 
[13:21:05.264]                             version <- utils::packageVersion("future")
[13:21:05.264]                         }
[13:21:05.264]                         else {
[13:21:05.264]                           version <- NULL
[13:21:05.264]                         }
[13:21:05.264]                         if (!has_future || version < "1.8.0") {
[13:21:05.264]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.264]                             "", base::R.version$version.string), 
[13:21:05.264]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.264]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.264]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.264]                               "release", "version")], collapse = " "), 
[13:21:05.264]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.264]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.264]                             info)
[13:21:05.264]                           info <- base::paste(info, collapse = "; ")
[13:21:05.264]                           if (!has_future) {
[13:21:05.264]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.264]                               info)
[13:21:05.264]                           }
[13:21:05.264]                           else {
[13:21:05.264]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.264]                               info, version)
[13:21:05.264]                           }
[13:21:05.264]                           base::stop(msg)
[13:21:05.264]                         }
[13:21:05.264]                       })
[13:21:05.264]                     }
[13:21:05.264]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.264]                     base::options(mc.cores = 1L)
[13:21:05.264]                   }
[13:21:05.264]                   options(future.plan = NULL)
[13:21:05.264]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.264]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.264]                 }
[13:21:05.264]                 ...future.workdir <- getwd()
[13:21:05.264]             }
[13:21:05.264]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.264]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.264]         }
[13:21:05.264]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.264]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.264]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.264]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.264]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.264]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.264]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.264]             base::names(...future.oldOptions))
[13:21:05.264]     }
[13:21:05.264]     if (FALSE) {
[13:21:05.264]     }
[13:21:05.264]     else {
[13:21:05.264]         if (TRUE) {
[13:21:05.264]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.264]                 open = "w")
[13:21:05.264]         }
[13:21:05.264]         else {
[13:21:05.264]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.264]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.264]         }
[13:21:05.264]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.264]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.264]             base::sink(type = "output", split = FALSE)
[13:21:05.264]             base::close(...future.stdout)
[13:21:05.264]         }, add = TRUE)
[13:21:05.264]     }
[13:21:05.264]     ...future.frame <- base::sys.nframe()
[13:21:05.264]     ...future.conditions <- base::list()
[13:21:05.264]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.264]     if (FALSE) {
[13:21:05.264]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.264]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.264]     }
[13:21:05.264]     ...future.result <- base::tryCatch({
[13:21:05.264]         base::withCallingHandlers({
[13:21:05.264]             ...future.value <- base::withVisible(base::local({
[13:21:05.264]                 ...future.makeSendCondition <- local({
[13:21:05.264]                   sendCondition <- NULL
[13:21:05.264]                   function(frame = 1L) {
[13:21:05.264]                     if (is.function(sendCondition)) 
[13:21:05.264]                       return(sendCondition)
[13:21:05.264]                     ns <- getNamespace("parallel")
[13:21:05.264]                     if (exists("sendData", mode = "function", 
[13:21:05.264]                       envir = ns)) {
[13:21:05.264]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.264]                         envir = ns)
[13:21:05.264]                       envir <- sys.frame(frame)
[13:21:05.264]                       master <- NULL
[13:21:05.264]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.264]                         !identical(envir, emptyenv())) {
[13:21:05.264]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.264]                           inherits = FALSE)) {
[13:21:05.264]                           master <- get("master", mode = "list", 
[13:21:05.264]                             envir = envir, inherits = FALSE)
[13:21:05.264]                           if (inherits(master, c("SOCKnode", 
[13:21:05.264]                             "SOCK0node"))) {
[13:21:05.264]                             sendCondition <<- function(cond) {
[13:21:05.264]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.264]                                 success = TRUE)
[13:21:05.264]                               parallel_sendData(master, data)
[13:21:05.264]                             }
[13:21:05.264]                             return(sendCondition)
[13:21:05.264]                           }
[13:21:05.264]                         }
[13:21:05.264]                         frame <- frame + 1L
[13:21:05.264]                         envir <- sys.frame(frame)
[13:21:05.264]                       }
[13:21:05.264]                     }
[13:21:05.264]                     sendCondition <<- function(cond) NULL
[13:21:05.264]                   }
[13:21:05.264]                 })
[13:21:05.264]                 withCallingHandlers({
[13:21:05.264]                   {
[13:21:05.264]                     stop(structure(list(message = "boom"), class = c("MyError", 
[13:21:05.264]                       "error", "condition")))
[13:21:05.264]                   }
[13:21:05.264]                 }, immediateCondition = function(cond) {
[13:21:05.264]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.264]                   sendCondition(cond)
[13:21:05.264]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.264]                   {
[13:21:05.264]                     inherits <- base::inherits
[13:21:05.264]                     invokeRestart <- base::invokeRestart
[13:21:05.264]                     is.null <- base::is.null
[13:21:05.264]                     muffled <- FALSE
[13:21:05.264]                     if (inherits(cond, "message")) {
[13:21:05.264]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.264]                       if (muffled) 
[13:21:05.264]                         invokeRestart("muffleMessage")
[13:21:05.264]                     }
[13:21:05.264]                     else if (inherits(cond, "warning")) {
[13:21:05.264]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.264]                       if (muffled) 
[13:21:05.264]                         invokeRestart("muffleWarning")
[13:21:05.264]                     }
[13:21:05.264]                     else if (inherits(cond, "condition")) {
[13:21:05.264]                       if (!is.null(pattern)) {
[13:21:05.264]                         computeRestarts <- base::computeRestarts
[13:21:05.264]                         grepl <- base::grepl
[13:21:05.264]                         restarts <- computeRestarts(cond)
[13:21:05.264]                         for (restart in restarts) {
[13:21:05.264]                           name <- restart$name
[13:21:05.264]                           if (is.null(name)) 
[13:21:05.264]                             next
[13:21:05.264]                           if (!grepl(pattern, name)) 
[13:21:05.264]                             next
[13:21:05.264]                           invokeRestart(restart)
[13:21:05.264]                           muffled <- TRUE
[13:21:05.264]                           break
[13:21:05.264]                         }
[13:21:05.264]                       }
[13:21:05.264]                     }
[13:21:05.264]                     invisible(muffled)
[13:21:05.264]                   }
[13:21:05.264]                   muffleCondition(cond)
[13:21:05.264]                 })
[13:21:05.264]             }))
[13:21:05.264]             future::FutureResult(value = ...future.value$value, 
[13:21:05.264]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.264]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.264]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.264]                     ...future.globalenv.names))
[13:21:05.264]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.264]         }, condition = base::local({
[13:21:05.264]             c <- base::c
[13:21:05.264]             inherits <- base::inherits
[13:21:05.264]             invokeRestart <- base::invokeRestart
[13:21:05.264]             length <- base::length
[13:21:05.264]             list <- base::list
[13:21:05.264]             seq.int <- base::seq.int
[13:21:05.264]             signalCondition <- base::signalCondition
[13:21:05.264]             sys.calls <- base::sys.calls
[13:21:05.264]             `[[` <- base::`[[`
[13:21:05.264]             `+` <- base::`+`
[13:21:05.264]             `<<-` <- base::`<<-`
[13:21:05.264]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.264]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.264]                   3L)]
[13:21:05.264]             }
[13:21:05.264]             function(cond) {
[13:21:05.264]                 is_error <- inherits(cond, "error")
[13:21:05.264]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.264]                   NULL)
[13:21:05.264]                 if (is_error) {
[13:21:05.264]                   sessionInformation <- function() {
[13:21:05.264]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.264]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.264]                       search = base::search(), system = base::Sys.info())
[13:21:05.264]                   }
[13:21:05.264]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.264]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.264]                     cond$call), session = sessionInformation(), 
[13:21:05.264]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.264]                   signalCondition(cond)
[13:21:05.264]                 }
[13:21:05.264]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.264]                 "immediateCondition"))) {
[13:21:05.264]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.264]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.264]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.264]                   if (TRUE && !signal) {
[13:21:05.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.264]                     {
[13:21:05.264]                       inherits <- base::inherits
[13:21:05.264]                       invokeRestart <- base::invokeRestart
[13:21:05.264]                       is.null <- base::is.null
[13:21:05.264]                       muffled <- FALSE
[13:21:05.264]                       if (inherits(cond, "message")) {
[13:21:05.264]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.264]                         if (muffled) 
[13:21:05.264]                           invokeRestart("muffleMessage")
[13:21:05.264]                       }
[13:21:05.264]                       else if (inherits(cond, "warning")) {
[13:21:05.264]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.264]                         if (muffled) 
[13:21:05.264]                           invokeRestart("muffleWarning")
[13:21:05.264]                       }
[13:21:05.264]                       else if (inherits(cond, "condition")) {
[13:21:05.264]                         if (!is.null(pattern)) {
[13:21:05.264]                           computeRestarts <- base::computeRestarts
[13:21:05.264]                           grepl <- base::grepl
[13:21:05.264]                           restarts <- computeRestarts(cond)
[13:21:05.264]                           for (restart in restarts) {
[13:21:05.264]                             name <- restart$name
[13:21:05.264]                             if (is.null(name)) 
[13:21:05.264]                               next
[13:21:05.264]                             if (!grepl(pattern, name)) 
[13:21:05.264]                               next
[13:21:05.264]                             invokeRestart(restart)
[13:21:05.264]                             muffled <- TRUE
[13:21:05.264]                             break
[13:21:05.264]                           }
[13:21:05.264]                         }
[13:21:05.264]                       }
[13:21:05.264]                       invisible(muffled)
[13:21:05.264]                     }
[13:21:05.264]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.264]                   }
[13:21:05.264]                 }
[13:21:05.264]                 else {
[13:21:05.264]                   if (TRUE) {
[13:21:05.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.264]                     {
[13:21:05.264]                       inherits <- base::inherits
[13:21:05.264]                       invokeRestart <- base::invokeRestart
[13:21:05.264]                       is.null <- base::is.null
[13:21:05.264]                       muffled <- FALSE
[13:21:05.264]                       if (inherits(cond, "message")) {
[13:21:05.264]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.264]                         if (muffled) 
[13:21:05.264]                           invokeRestart("muffleMessage")
[13:21:05.264]                       }
[13:21:05.264]                       else if (inherits(cond, "warning")) {
[13:21:05.264]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.264]                         if (muffled) 
[13:21:05.264]                           invokeRestart("muffleWarning")
[13:21:05.264]                       }
[13:21:05.264]                       else if (inherits(cond, "condition")) {
[13:21:05.264]                         if (!is.null(pattern)) {
[13:21:05.264]                           computeRestarts <- base::computeRestarts
[13:21:05.264]                           grepl <- base::grepl
[13:21:05.264]                           restarts <- computeRestarts(cond)
[13:21:05.264]                           for (restart in restarts) {
[13:21:05.264]                             name <- restart$name
[13:21:05.264]                             if (is.null(name)) 
[13:21:05.264]                               next
[13:21:05.264]                             if (!grepl(pattern, name)) 
[13:21:05.264]                               next
[13:21:05.264]                             invokeRestart(restart)
[13:21:05.264]                             muffled <- TRUE
[13:21:05.264]                             break
[13:21:05.264]                           }
[13:21:05.264]                         }
[13:21:05.264]                       }
[13:21:05.264]                       invisible(muffled)
[13:21:05.264]                     }
[13:21:05.264]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.264]                   }
[13:21:05.264]                 }
[13:21:05.264]             }
[13:21:05.264]         }))
[13:21:05.264]     }, error = function(ex) {
[13:21:05.264]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.264]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.264]                 ...future.rng), started = ...future.startTime, 
[13:21:05.264]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.264]             version = "1.8"), class = "FutureResult")
[13:21:05.264]     }, finally = {
[13:21:05.264]         if (!identical(...future.workdir, getwd())) 
[13:21:05.264]             setwd(...future.workdir)
[13:21:05.264]         {
[13:21:05.264]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.264]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.264]             }
[13:21:05.264]             base::options(...future.oldOptions)
[13:21:05.264]             if (.Platform$OS.type == "windows") {
[13:21:05.264]                 old_names <- names(...future.oldEnvVars)
[13:21:05.264]                 envs <- base::Sys.getenv()
[13:21:05.264]                 names <- names(envs)
[13:21:05.264]                 common <- intersect(names, old_names)
[13:21:05.264]                 added <- setdiff(names, old_names)
[13:21:05.264]                 removed <- setdiff(old_names, names)
[13:21:05.264]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.264]                   envs[common]]
[13:21:05.264]                 NAMES <- toupper(changed)
[13:21:05.264]                 args <- list()
[13:21:05.264]                 for (kk in seq_along(NAMES)) {
[13:21:05.264]                   name <- changed[[kk]]
[13:21:05.264]                   NAME <- NAMES[[kk]]
[13:21:05.264]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.264]                     next
[13:21:05.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.264]                 }
[13:21:05.264]                 NAMES <- toupper(added)
[13:21:05.264]                 for (kk in seq_along(NAMES)) {
[13:21:05.264]                   name <- added[[kk]]
[13:21:05.264]                   NAME <- NAMES[[kk]]
[13:21:05.264]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.264]                     next
[13:21:05.264]                   args[[name]] <- ""
[13:21:05.264]                 }
[13:21:05.264]                 NAMES <- toupper(removed)
[13:21:05.264]                 for (kk in seq_along(NAMES)) {
[13:21:05.264]                   name <- removed[[kk]]
[13:21:05.264]                   NAME <- NAMES[[kk]]
[13:21:05.264]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.264]                     next
[13:21:05.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.264]                 }
[13:21:05.264]                 if (length(args) > 0) 
[13:21:05.264]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.264]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.264]             }
[13:21:05.264]             else {
[13:21:05.264]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.264]             }
[13:21:05.264]             {
[13:21:05.264]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.264]                   0L) {
[13:21:05.264]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.264]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.264]                   base::options(opts)
[13:21:05.264]                 }
[13:21:05.264]                 {
[13:21:05.264]                   {
[13:21:05.264]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.264]                     NULL
[13:21:05.264]                   }
[13:21:05.264]                   options(future.plan = NULL)
[13:21:05.264]                   if (is.na(NA_character_)) 
[13:21:05.264]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.264]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.264]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.264]                   {
[13:21:05.264]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.264]                     if (!future$lazy) 
[13:21:05.264]                       future <- run(future)
[13:21:05.264]                     invisible(future)
[13:21:05.264]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.264]                 }
[13:21:05.264]             }
[13:21:05.264]         }
[13:21:05.264]     })
[13:21:05.264]     if (TRUE) {
[13:21:05.264]         base::sink(type = "output", split = FALSE)
[13:21:05.264]         if (TRUE) {
[13:21:05.264]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.264]         }
[13:21:05.264]         else {
[13:21:05.264]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.264]         }
[13:21:05.264]         base::close(...future.stdout)
[13:21:05.264]         ...future.stdout <- NULL
[13:21:05.264]     }
[13:21:05.264]     ...future.result$conditions <- ...future.conditions
[13:21:05.264]     ...future.result$finished <- base::Sys.time()
[13:21:05.264]     ...future.result
[13:21:05.264] }
[13:21:05.266] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:21:05.268] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.268] - Validating connection of MultisessionFuture
[13:21:05.269] - received message: FutureResult
[13:21:05.269] - Received FutureResult
[13:21:05.269] - Erased future from FutureRegistry
[13:21:05.269] result() for ClusterFuture ...
[13:21:05.269] - result already collected: FutureResult
[13:21:05.269] result() for ClusterFuture ... done
[13:21:05.269] signalConditions() ...
[13:21:05.269]  - include = ‘immediateCondition’
[13:21:05.269]  - exclude = 
[13:21:05.269]  - resignal = FALSE
[13:21:05.269]  - Number of conditions: 1
[13:21:05.270] signalConditions() ... done
[13:21:05.270] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.270] result() for ClusterFuture ...
[13:21:05.270] - result already collected: FutureResult
[13:21:05.270] result() for ClusterFuture ... done
[13:21:05.270] result() for ClusterFuture ...
[13:21:05.270] - result already collected: FutureResult
[13:21:05.270] result() for ClusterFuture ... done
[13:21:05.270] signalConditions() ...
[13:21:05.270]  - include = ‘immediateCondition’
[13:21:05.270]  - exclude = 
[13:21:05.271]  - resignal = FALSE
[13:21:05.271]  - Number of conditions: 1
[13:21:05.271] signalConditions() ... done
<MyError: boom>
[13:21:05.271] result() for ClusterFuture ...
[13:21:05.271] - result already collected: FutureResult
[13:21:05.271] result() for ClusterFuture ... done
[13:21:05.271] result() for ClusterFuture ...
[13:21:05.271] - result already collected: FutureResult
[13:21:05.271] result() for ClusterFuture ... done
[13:21:05.271] signalConditions() ...
[13:21:05.272]  - include = ‘immediateCondition’
[13:21:05.272]  - exclude = 
[13:21:05.272]  - resignal = FALSE
[13:21:05.272]  - Number of conditions: 1
[13:21:05.272] signalConditions() ... done
[13:21:05.272] Future state: ‘finished’
[13:21:05.272] result() for ClusterFuture ...
[13:21:05.272] - result already collected: FutureResult
[13:21:05.272] result() for ClusterFuture ... done
[13:21:05.272] signalConditions() ...
[13:21:05.272]  - include = ‘condition’
[13:21:05.272]  - exclude = ‘immediateCondition’
[13:21:05.273]  - resignal = TRUE
[13:21:05.273]  - Number of conditions: 1
[13:21:05.273]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[13:21:05.273] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[13:21:05.288] getGlobalsAndPackages() ...
[13:21:05.288] Searching for globals...
[13:21:05.289] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:21:05.289] Searching for globals ... DONE
[13:21:05.289] Resolving globals: FALSE
[13:21:05.290] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[13:21:05.290] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[13:21:05.290] - globals: [1] ‘a’
[13:21:05.290] 
[13:21:05.290] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:21:05.291] Packages needed by the future expression (n = 0): <none>
[13:21:05.291] Packages needed by future strategies (n = 0): <none>
[13:21:05.292] {
[13:21:05.292]     {
[13:21:05.292]         {
[13:21:05.292]             ...future.startTime <- base::Sys.time()
[13:21:05.292]             {
[13:21:05.292]                 {
[13:21:05.292]                   {
[13:21:05.292]                     base::local({
[13:21:05.292]                       has_future <- base::requireNamespace("future", 
[13:21:05.292]                         quietly = TRUE)
[13:21:05.292]                       if (has_future) {
[13:21:05.292]                         ns <- base::getNamespace("future")
[13:21:05.292]                         version <- ns[[".package"]][["version"]]
[13:21:05.292]                         if (is.null(version)) 
[13:21:05.292]                           version <- utils::packageVersion("future")
[13:21:05.292]                       }
[13:21:05.292]                       else {
[13:21:05.292]                         version <- NULL
[13:21:05.292]                       }
[13:21:05.292]                       if (!has_future || version < "1.8.0") {
[13:21:05.292]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.292]                           "", base::R.version$version.string), 
[13:21:05.292]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:05.292]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.292]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.292]                             "release", "version")], collapse = " "), 
[13:21:05.292]                           hostname = base::Sys.info()[["nodename"]])
[13:21:05.292]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.292]                           info)
[13:21:05.292]                         info <- base::paste(info, collapse = "; ")
[13:21:05.292]                         if (!has_future) {
[13:21:05.292]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.292]                             info)
[13:21:05.292]                         }
[13:21:05.292]                         else {
[13:21:05.292]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.292]                             info, version)
[13:21:05.292]                         }
[13:21:05.292]                         base::stop(msg)
[13:21:05.292]                       }
[13:21:05.292]                     })
[13:21:05.292]                   }
[13:21:05.292]                   options(future.plan = NULL)
[13:21:05.292]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.292]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.292]                 }
[13:21:05.292]                 ...future.workdir <- getwd()
[13:21:05.292]             }
[13:21:05.292]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.292]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.292]         }
[13:21:05.292]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.292]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[13:21:05.292]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.292]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.292]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.292]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.292]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.292]             base::names(...future.oldOptions))
[13:21:05.292]     }
[13:21:05.292]     if (FALSE) {
[13:21:05.292]     }
[13:21:05.292]     else {
[13:21:05.292]         if (TRUE) {
[13:21:05.292]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.292]                 open = "w")
[13:21:05.292]         }
[13:21:05.292]         else {
[13:21:05.292]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.292]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.292]         }
[13:21:05.292]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.292]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.292]             base::sink(type = "output", split = FALSE)
[13:21:05.292]             base::close(...future.stdout)
[13:21:05.292]         }, add = TRUE)
[13:21:05.292]     }
[13:21:05.292]     ...future.frame <- base::sys.nframe()
[13:21:05.292]     ...future.conditions <- base::list()
[13:21:05.292]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.292]     if (FALSE) {
[13:21:05.292]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.292]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.292]     }
[13:21:05.292]     ...future.result <- base::tryCatch({
[13:21:05.292]         base::withCallingHandlers({
[13:21:05.292]             ...future.value <- base::withVisible(base::local({
[13:21:05.292]                 sum(a)
[13:21:05.292]             }))
[13:21:05.292]             future::FutureResult(value = ...future.value$value, 
[13:21:05.292]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.292]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.292]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.292]                     ...future.globalenv.names))
[13:21:05.292]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.292]         }, condition = base::local({
[13:21:05.292]             c <- base::c
[13:21:05.292]             inherits <- base::inherits
[13:21:05.292]             invokeRestart <- base::invokeRestart
[13:21:05.292]             length <- base::length
[13:21:05.292]             list <- base::list
[13:21:05.292]             seq.int <- base::seq.int
[13:21:05.292]             signalCondition <- base::signalCondition
[13:21:05.292]             sys.calls <- base::sys.calls
[13:21:05.292]             `[[` <- base::`[[`
[13:21:05.292]             `+` <- base::`+`
[13:21:05.292]             `<<-` <- base::`<<-`
[13:21:05.292]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.292]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.292]                   3L)]
[13:21:05.292]             }
[13:21:05.292]             function(cond) {
[13:21:05.292]                 is_error <- inherits(cond, "error")
[13:21:05.292]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.292]                   NULL)
[13:21:05.292]                 if (is_error) {
[13:21:05.292]                   sessionInformation <- function() {
[13:21:05.292]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.292]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.292]                       search = base::search(), system = base::Sys.info())
[13:21:05.292]                   }
[13:21:05.292]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.292]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.292]                     cond$call), session = sessionInformation(), 
[13:21:05.292]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.292]                   signalCondition(cond)
[13:21:05.292]                 }
[13:21:05.292]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.292]                 "immediateCondition"))) {
[13:21:05.292]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.292]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.292]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.292]                   if (TRUE && !signal) {
[13:21:05.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.292]                     {
[13:21:05.292]                       inherits <- base::inherits
[13:21:05.292]                       invokeRestart <- base::invokeRestart
[13:21:05.292]                       is.null <- base::is.null
[13:21:05.292]                       muffled <- FALSE
[13:21:05.292]                       if (inherits(cond, "message")) {
[13:21:05.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.292]                         if (muffled) 
[13:21:05.292]                           invokeRestart("muffleMessage")
[13:21:05.292]                       }
[13:21:05.292]                       else if (inherits(cond, "warning")) {
[13:21:05.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.292]                         if (muffled) 
[13:21:05.292]                           invokeRestart("muffleWarning")
[13:21:05.292]                       }
[13:21:05.292]                       else if (inherits(cond, "condition")) {
[13:21:05.292]                         if (!is.null(pattern)) {
[13:21:05.292]                           computeRestarts <- base::computeRestarts
[13:21:05.292]                           grepl <- base::grepl
[13:21:05.292]                           restarts <- computeRestarts(cond)
[13:21:05.292]                           for (restart in restarts) {
[13:21:05.292]                             name <- restart$name
[13:21:05.292]                             if (is.null(name)) 
[13:21:05.292]                               next
[13:21:05.292]                             if (!grepl(pattern, name)) 
[13:21:05.292]                               next
[13:21:05.292]                             invokeRestart(restart)
[13:21:05.292]                             muffled <- TRUE
[13:21:05.292]                             break
[13:21:05.292]                           }
[13:21:05.292]                         }
[13:21:05.292]                       }
[13:21:05.292]                       invisible(muffled)
[13:21:05.292]                     }
[13:21:05.292]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.292]                   }
[13:21:05.292]                 }
[13:21:05.292]                 else {
[13:21:05.292]                   if (TRUE) {
[13:21:05.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.292]                     {
[13:21:05.292]                       inherits <- base::inherits
[13:21:05.292]                       invokeRestart <- base::invokeRestart
[13:21:05.292]                       is.null <- base::is.null
[13:21:05.292]                       muffled <- FALSE
[13:21:05.292]                       if (inherits(cond, "message")) {
[13:21:05.292]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.292]                         if (muffled) 
[13:21:05.292]                           invokeRestart("muffleMessage")
[13:21:05.292]                       }
[13:21:05.292]                       else if (inherits(cond, "warning")) {
[13:21:05.292]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.292]                         if (muffled) 
[13:21:05.292]                           invokeRestart("muffleWarning")
[13:21:05.292]                       }
[13:21:05.292]                       else if (inherits(cond, "condition")) {
[13:21:05.292]                         if (!is.null(pattern)) {
[13:21:05.292]                           computeRestarts <- base::computeRestarts
[13:21:05.292]                           grepl <- base::grepl
[13:21:05.292]                           restarts <- computeRestarts(cond)
[13:21:05.292]                           for (restart in restarts) {
[13:21:05.292]                             name <- restart$name
[13:21:05.292]                             if (is.null(name)) 
[13:21:05.292]                               next
[13:21:05.292]                             if (!grepl(pattern, name)) 
[13:21:05.292]                               next
[13:21:05.292]                             invokeRestart(restart)
[13:21:05.292]                             muffled <- TRUE
[13:21:05.292]                             break
[13:21:05.292]                           }
[13:21:05.292]                         }
[13:21:05.292]                       }
[13:21:05.292]                       invisible(muffled)
[13:21:05.292]                     }
[13:21:05.292]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.292]                   }
[13:21:05.292]                 }
[13:21:05.292]             }
[13:21:05.292]         }))
[13:21:05.292]     }, error = function(ex) {
[13:21:05.292]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.292]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.292]                 ...future.rng), started = ...future.startTime, 
[13:21:05.292]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.292]             version = "1.8"), class = "FutureResult")
[13:21:05.292]     }, finally = {
[13:21:05.292]         if (!identical(...future.workdir, getwd())) 
[13:21:05.292]             setwd(...future.workdir)
[13:21:05.292]         {
[13:21:05.292]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.292]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.292]             }
[13:21:05.292]             base::options(...future.oldOptions)
[13:21:05.292]             if (.Platform$OS.type == "windows") {
[13:21:05.292]                 old_names <- names(...future.oldEnvVars)
[13:21:05.292]                 envs <- base::Sys.getenv()
[13:21:05.292]                 names <- names(envs)
[13:21:05.292]                 common <- intersect(names, old_names)
[13:21:05.292]                 added <- setdiff(names, old_names)
[13:21:05.292]                 removed <- setdiff(old_names, names)
[13:21:05.292]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.292]                   envs[common]]
[13:21:05.292]                 NAMES <- toupper(changed)
[13:21:05.292]                 args <- list()
[13:21:05.292]                 for (kk in seq_along(NAMES)) {
[13:21:05.292]                   name <- changed[[kk]]
[13:21:05.292]                   NAME <- NAMES[[kk]]
[13:21:05.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.292]                     next
[13:21:05.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.292]                 }
[13:21:05.292]                 NAMES <- toupper(added)
[13:21:05.292]                 for (kk in seq_along(NAMES)) {
[13:21:05.292]                   name <- added[[kk]]
[13:21:05.292]                   NAME <- NAMES[[kk]]
[13:21:05.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.292]                     next
[13:21:05.292]                   args[[name]] <- ""
[13:21:05.292]                 }
[13:21:05.292]                 NAMES <- toupper(removed)
[13:21:05.292]                 for (kk in seq_along(NAMES)) {
[13:21:05.292]                   name <- removed[[kk]]
[13:21:05.292]                   NAME <- NAMES[[kk]]
[13:21:05.292]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.292]                     next
[13:21:05.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.292]                 }
[13:21:05.292]                 if (length(args) > 0) 
[13:21:05.292]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.292]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.292]             }
[13:21:05.292]             else {
[13:21:05.292]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.292]             }
[13:21:05.292]             {
[13:21:05.292]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.292]                   0L) {
[13:21:05.292]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.292]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.292]                   base::options(opts)
[13:21:05.292]                 }
[13:21:05.292]                 {
[13:21:05.292]                   {
[13:21:05.292]                     NULL
[13:21:05.292]                     RNGkind("Mersenne-Twister")
[13:21:05.292]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:05.292]                       inherits = FALSE)
[13:21:05.292]                   }
[13:21:05.292]                   options(future.plan = NULL)
[13:21:05.292]                   if (is.na(NA_character_)) 
[13:21:05.292]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.292]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.292]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.292]                   {
[13:21:05.292]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.292]                     if (!future$lazy) 
[13:21:05.292]                       future <- run(future)
[13:21:05.292]                     invisible(future)
[13:21:05.292]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.292]                 }
[13:21:05.292]             }
[13:21:05.292]         }
[13:21:05.292]     })
[13:21:05.292]     if (TRUE) {
[13:21:05.292]         base::sink(type = "output", split = FALSE)
[13:21:05.292]         if (TRUE) {
[13:21:05.292]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.292]         }
[13:21:05.292]         else {
[13:21:05.292]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.292]         }
[13:21:05.292]         base::close(...future.stdout)
[13:21:05.292]         ...future.stdout <- NULL
[13:21:05.292]     }
[13:21:05.292]     ...future.result$conditions <- ...future.conditions
[13:21:05.292]     ...future.result$finished <- base::Sys.time()
[13:21:05.292]     ...future.result
[13:21:05.292] }
[13:21:05.293] assign_globals() ...
[13:21:05.294] List of 1
[13:21:05.294]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[13:21:05.294]  - attr(*, "where")=List of 1
[13:21:05.294]   ..$ a:<environment: R_EmptyEnv> 
[13:21:05.294]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:05.294]  - attr(*, "resolved")= logi FALSE
[13:21:05.294]  - attr(*, "total_size")= num 4104
[13:21:05.296] - copied ‘a’ to environment
[13:21:05.296] assign_globals() ... done
[13:21:05.296] plan(): Setting new future strategy stack:
[13:21:05.296] List of future strategies:
[13:21:05.296] 1. sequential:
[13:21:05.296]    - args: function (..., envir = parent.frame())
[13:21:05.296]    - tweaked: FALSE
[13:21:05.296]    - call: NULL
[13:21:05.296] plan(): nbrOfWorkers() = 1
[13:21:05.297] plan(): Setting new future strategy stack:
[13:21:05.297] List of future strategies:
[13:21:05.297] 1. sequential:
[13:21:05.297]    - args: function (..., envir = parent.frame())
[13:21:05.297]    - tweaked: FALSE
[13:21:05.297]    - call: future::plan("sequential")
[13:21:05.298] plan(): nbrOfWorkers() = 1
[13:21:05.298] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[13:21:05.298] getGlobalsAndPackages() ...
[13:21:05.298] Searching for globals...
[13:21:05.299] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:21:05.299] Searching for globals ... DONE
[13:21:05.299] Resolving globals: FALSE
[13:21:05.299] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[13:21:05.300] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[13:21:05.300] getGlobalsAndPackages() ...
[13:21:05.300] Searching for globals...
[13:21:05.301] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:21:05.301] Searching for globals ... DONE
[13:21:05.301] Resolving globals: FALSE
[13:21:05.302] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[13:21:05.302] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[13:21:05.302] - globals: [1] ‘a’
[13:21:05.302] 
[13:21:05.302] getGlobalsAndPackages() ... DONE
[13:21:05.313] Packages needed by the future expression (n = 0): <none>
[13:21:05.313] Packages needed by future strategies (n = 0): <none>
[13:21:05.314] {
[13:21:05.314]     {
[13:21:05.314]         {
[13:21:05.314]             ...future.startTime <- base::Sys.time()
[13:21:05.314]             {
[13:21:05.314]                 {
[13:21:05.314]                   {
[13:21:05.314]                     {
[13:21:05.314]                       base::local({
[13:21:05.314]                         has_future <- base::requireNamespace("future", 
[13:21:05.314]                           quietly = TRUE)
[13:21:05.314]                         if (has_future) {
[13:21:05.314]                           ns <- base::getNamespace("future")
[13:21:05.314]                           version <- ns[[".package"]][["version"]]
[13:21:05.314]                           if (is.null(version)) 
[13:21:05.314]                             version <- utils::packageVersion("future")
[13:21:05.314]                         }
[13:21:05.314]                         else {
[13:21:05.314]                           version <- NULL
[13:21:05.314]                         }
[13:21:05.314]                         if (!has_future || version < "1.8.0") {
[13:21:05.314]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.314]                             "", base::R.version$version.string), 
[13:21:05.314]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.314]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.314]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.314]                               "release", "version")], collapse = " "), 
[13:21:05.314]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.314]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.314]                             info)
[13:21:05.314]                           info <- base::paste(info, collapse = "; ")
[13:21:05.314]                           if (!has_future) {
[13:21:05.314]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.314]                               info)
[13:21:05.314]                           }
[13:21:05.314]                           else {
[13:21:05.314]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.314]                               info, version)
[13:21:05.314]                           }
[13:21:05.314]                           base::stop(msg)
[13:21:05.314]                         }
[13:21:05.314]                       })
[13:21:05.314]                     }
[13:21:05.314]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.314]                     base::options(mc.cores = 1L)
[13:21:05.314]                   }
[13:21:05.314]                   options(future.plan = NULL)
[13:21:05.314]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.314]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.314]                 }
[13:21:05.314]                 ...future.workdir <- getwd()
[13:21:05.314]             }
[13:21:05.314]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.314]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.314]         }
[13:21:05.314]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.314]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[13:21:05.314]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.314]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.314]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.314]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.314]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.314]             base::names(...future.oldOptions))
[13:21:05.314]     }
[13:21:05.314]     if (FALSE) {
[13:21:05.314]     }
[13:21:05.314]     else {
[13:21:05.314]         if (TRUE) {
[13:21:05.314]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.314]                 open = "w")
[13:21:05.314]         }
[13:21:05.314]         else {
[13:21:05.314]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.314]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.314]         }
[13:21:05.314]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.314]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.314]             base::sink(type = "output", split = FALSE)
[13:21:05.314]             base::close(...future.stdout)
[13:21:05.314]         }, add = TRUE)
[13:21:05.314]     }
[13:21:05.314]     ...future.frame <- base::sys.nframe()
[13:21:05.314]     ...future.conditions <- base::list()
[13:21:05.314]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.314]     if (FALSE) {
[13:21:05.314]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.314]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.314]     }
[13:21:05.314]     ...future.result <- base::tryCatch({
[13:21:05.314]         base::withCallingHandlers({
[13:21:05.314]             ...future.value <- base::withVisible(base::local({
[13:21:05.314]                 ...future.makeSendCondition <- local({
[13:21:05.314]                   sendCondition <- NULL
[13:21:05.314]                   function(frame = 1L) {
[13:21:05.314]                     if (is.function(sendCondition)) 
[13:21:05.314]                       return(sendCondition)
[13:21:05.314]                     ns <- getNamespace("parallel")
[13:21:05.314]                     if (exists("sendData", mode = "function", 
[13:21:05.314]                       envir = ns)) {
[13:21:05.314]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.314]                         envir = ns)
[13:21:05.314]                       envir <- sys.frame(frame)
[13:21:05.314]                       master <- NULL
[13:21:05.314]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.314]                         !identical(envir, emptyenv())) {
[13:21:05.314]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.314]                           inherits = FALSE)) {
[13:21:05.314]                           master <- get("master", mode = "list", 
[13:21:05.314]                             envir = envir, inherits = FALSE)
[13:21:05.314]                           if (inherits(master, c("SOCKnode", 
[13:21:05.314]                             "SOCK0node"))) {
[13:21:05.314]                             sendCondition <<- function(cond) {
[13:21:05.314]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.314]                                 success = TRUE)
[13:21:05.314]                               parallel_sendData(master, data)
[13:21:05.314]                             }
[13:21:05.314]                             return(sendCondition)
[13:21:05.314]                           }
[13:21:05.314]                         }
[13:21:05.314]                         frame <- frame + 1L
[13:21:05.314]                         envir <- sys.frame(frame)
[13:21:05.314]                       }
[13:21:05.314]                     }
[13:21:05.314]                     sendCondition <<- function(cond) NULL
[13:21:05.314]                   }
[13:21:05.314]                 })
[13:21:05.314]                 withCallingHandlers({
[13:21:05.314]                   {
[13:21:05.314]                     sum(a)
[13:21:05.314]                   }
[13:21:05.314]                 }, immediateCondition = function(cond) {
[13:21:05.314]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.314]                   sendCondition(cond)
[13:21:05.314]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.314]                   {
[13:21:05.314]                     inherits <- base::inherits
[13:21:05.314]                     invokeRestart <- base::invokeRestart
[13:21:05.314]                     is.null <- base::is.null
[13:21:05.314]                     muffled <- FALSE
[13:21:05.314]                     if (inherits(cond, "message")) {
[13:21:05.314]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.314]                       if (muffled) 
[13:21:05.314]                         invokeRestart("muffleMessage")
[13:21:05.314]                     }
[13:21:05.314]                     else if (inherits(cond, "warning")) {
[13:21:05.314]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.314]                       if (muffled) 
[13:21:05.314]                         invokeRestart("muffleWarning")
[13:21:05.314]                     }
[13:21:05.314]                     else if (inherits(cond, "condition")) {
[13:21:05.314]                       if (!is.null(pattern)) {
[13:21:05.314]                         computeRestarts <- base::computeRestarts
[13:21:05.314]                         grepl <- base::grepl
[13:21:05.314]                         restarts <- computeRestarts(cond)
[13:21:05.314]                         for (restart in restarts) {
[13:21:05.314]                           name <- restart$name
[13:21:05.314]                           if (is.null(name)) 
[13:21:05.314]                             next
[13:21:05.314]                           if (!grepl(pattern, name)) 
[13:21:05.314]                             next
[13:21:05.314]                           invokeRestart(restart)
[13:21:05.314]                           muffled <- TRUE
[13:21:05.314]                           break
[13:21:05.314]                         }
[13:21:05.314]                       }
[13:21:05.314]                     }
[13:21:05.314]                     invisible(muffled)
[13:21:05.314]                   }
[13:21:05.314]                   muffleCondition(cond)
[13:21:05.314]                 })
[13:21:05.314]             }))
[13:21:05.314]             future::FutureResult(value = ...future.value$value, 
[13:21:05.314]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.314]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.314]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.314]                     ...future.globalenv.names))
[13:21:05.314]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.314]         }, condition = base::local({
[13:21:05.314]             c <- base::c
[13:21:05.314]             inherits <- base::inherits
[13:21:05.314]             invokeRestart <- base::invokeRestart
[13:21:05.314]             length <- base::length
[13:21:05.314]             list <- base::list
[13:21:05.314]             seq.int <- base::seq.int
[13:21:05.314]             signalCondition <- base::signalCondition
[13:21:05.314]             sys.calls <- base::sys.calls
[13:21:05.314]             `[[` <- base::`[[`
[13:21:05.314]             `+` <- base::`+`
[13:21:05.314]             `<<-` <- base::`<<-`
[13:21:05.314]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.314]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.314]                   3L)]
[13:21:05.314]             }
[13:21:05.314]             function(cond) {
[13:21:05.314]                 is_error <- inherits(cond, "error")
[13:21:05.314]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.314]                   NULL)
[13:21:05.314]                 if (is_error) {
[13:21:05.314]                   sessionInformation <- function() {
[13:21:05.314]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.314]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.314]                       search = base::search(), system = base::Sys.info())
[13:21:05.314]                   }
[13:21:05.314]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.314]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.314]                     cond$call), session = sessionInformation(), 
[13:21:05.314]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.314]                   signalCondition(cond)
[13:21:05.314]                 }
[13:21:05.314]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.314]                 "immediateCondition"))) {
[13:21:05.314]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.314]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.314]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.314]                   if (TRUE && !signal) {
[13:21:05.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.314]                     {
[13:21:05.314]                       inherits <- base::inherits
[13:21:05.314]                       invokeRestart <- base::invokeRestart
[13:21:05.314]                       is.null <- base::is.null
[13:21:05.314]                       muffled <- FALSE
[13:21:05.314]                       if (inherits(cond, "message")) {
[13:21:05.314]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.314]                         if (muffled) 
[13:21:05.314]                           invokeRestart("muffleMessage")
[13:21:05.314]                       }
[13:21:05.314]                       else if (inherits(cond, "warning")) {
[13:21:05.314]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.314]                         if (muffled) 
[13:21:05.314]                           invokeRestart("muffleWarning")
[13:21:05.314]                       }
[13:21:05.314]                       else if (inherits(cond, "condition")) {
[13:21:05.314]                         if (!is.null(pattern)) {
[13:21:05.314]                           computeRestarts <- base::computeRestarts
[13:21:05.314]                           grepl <- base::grepl
[13:21:05.314]                           restarts <- computeRestarts(cond)
[13:21:05.314]                           for (restart in restarts) {
[13:21:05.314]                             name <- restart$name
[13:21:05.314]                             if (is.null(name)) 
[13:21:05.314]                               next
[13:21:05.314]                             if (!grepl(pattern, name)) 
[13:21:05.314]                               next
[13:21:05.314]                             invokeRestart(restart)
[13:21:05.314]                             muffled <- TRUE
[13:21:05.314]                             break
[13:21:05.314]                           }
[13:21:05.314]                         }
[13:21:05.314]                       }
[13:21:05.314]                       invisible(muffled)
[13:21:05.314]                     }
[13:21:05.314]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.314]                   }
[13:21:05.314]                 }
[13:21:05.314]                 else {
[13:21:05.314]                   if (TRUE) {
[13:21:05.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.314]                     {
[13:21:05.314]                       inherits <- base::inherits
[13:21:05.314]                       invokeRestart <- base::invokeRestart
[13:21:05.314]                       is.null <- base::is.null
[13:21:05.314]                       muffled <- FALSE
[13:21:05.314]                       if (inherits(cond, "message")) {
[13:21:05.314]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.314]                         if (muffled) 
[13:21:05.314]                           invokeRestart("muffleMessage")
[13:21:05.314]                       }
[13:21:05.314]                       else if (inherits(cond, "warning")) {
[13:21:05.314]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.314]                         if (muffled) 
[13:21:05.314]                           invokeRestart("muffleWarning")
[13:21:05.314]                       }
[13:21:05.314]                       else if (inherits(cond, "condition")) {
[13:21:05.314]                         if (!is.null(pattern)) {
[13:21:05.314]                           computeRestarts <- base::computeRestarts
[13:21:05.314]                           grepl <- base::grepl
[13:21:05.314]                           restarts <- computeRestarts(cond)
[13:21:05.314]                           for (restart in restarts) {
[13:21:05.314]                             name <- restart$name
[13:21:05.314]                             if (is.null(name)) 
[13:21:05.314]                               next
[13:21:05.314]                             if (!grepl(pattern, name)) 
[13:21:05.314]                               next
[13:21:05.314]                             invokeRestart(restart)
[13:21:05.314]                             muffled <- TRUE
[13:21:05.314]                             break
[13:21:05.314]                           }
[13:21:05.314]                         }
[13:21:05.314]                       }
[13:21:05.314]                       invisible(muffled)
[13:21:05.314]                     }
[13:21:05.314]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.314]                   }
[13:21:05.314]                 }
[13:21:05.314]             }
[13:21:05.314]         }))
[13:21:05.314]     }, error = function(ex) {
[13:21:05.314]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.314]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.314]                 ...future.rng), started = ...future.startTime, 
[13:21:05.314]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.314]             version = "1.8"), class = "FutureResult")
[13:21:05.314]     }, finally = {
[13:21:05.314]         if (!identical(...future.workdir, getwd())) 
[13:21:05.314]             setwd(...future.workdir)
[13:21:05.314]         {
[13:21:05.314]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.314]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.314]             }
[13:21:05.314]             base::options(...future.oldOptions)
[13:21:05.314]             if (.Platform$OS.type == "windows") {
[13:21:05.314]                 old_names <- names(...future.oldEnvVars)
[13:21:05.314]                 envs <- base::Sys.getenv()
[13:21:05.314]                 names <- names(envs)
[13:21:05.314]                 common <- intersect(names, old_names)
[13:21:05.314]                 added <- setdiff(names, old_names)
[13:21:05.314]                 removed <- setdiff(old_names, names)
[13:21:05.314]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.314]                   envs[common]]
[13:21:05.314]                 NAMES <- toupper(changed)
[13:21:05.314]                 args <- list()
[13:21:05.314]                 for (kk in seq_along(NAMES)) {
[13:21:05.314]                   name <- changed[[kk]]
[13:21:05.314]                   NAME <- NAMES[[kk]]
[13:21:05.314]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.314]                     next
[13:21:05.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.314]                 }
[13:21:05.314]                 NAMES <- toupper(added)
[13:21:05.314]                 for (kk in seq_along(NAMES)) {
[13:21:05.314]                   name <- added[[kk]]
[13:21:05.314]                   NAME <- NAMES[[kk]]
[13:21:05.314]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.314]                     next
[13:21:05.314]                   args[[name]] <- ""
[13:21:05.314]                 }
[13:21:05.314]                 NAMES <- toupper(removed)
[13:21:05.314]                 for (kk in seq_along(NAMES)) {
[13:21:05.314]                   name <- removed[[kk]]
[13:21:05.314]                   NAME <- NAMES[[kk]]
[13:21:05.314]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.314]                     next
[13:21:05.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.314]                 }
[13:21:05.314]                 if (length(args) > 0) 
[13:21:05.314]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.314]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.314]             }
[13:21:05.314]             else {
[13:21:05.314]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.314]             }
[13:21:05.314]             {
[13:21:05.314]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.314]                   0L) {
[13:21:05.314]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.314]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.314]                   base::options(opts)
[13:21:05.314]                 }
[13:21:05.314]                 {
[13:21:05.314]                   {
[13:21:05.314]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.314]                     NULL
[13:21:05.314]                   }
[13:21:05.314]                   options(future.plan = NULL)
[13:21:05.314]                   if (is.na(NA_character_)) 
[13:21:05.314]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.314]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.314]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.314]                   {
[13:21:05.314]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.314]                     if (!future$lazy) 
[13:21:05.314]                       future <- run(future)
[13:21:05.314]                     invisible(future)
[13:21:05.314]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.314]                 }
[13:21:05.314]             }
[13:21:05.314]         }
[13:21:05.314]     })
[13:21:05.314]     if (TRUE) {
[13:21:05.314]         base::sink(type = "output", split = FALSE)
[13:21:05.314]         if (TRUE) {
[13:21:05.314]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.314]         }
[13:21:05.314]         else {
[13:21:05.314]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.314]         }
[13:21:05.314]         base::close(...future.stdout)
[13:21:05.314]         ...future.stdout <- NULL
[13:21:05.314]     }
[13:21:05.314]     ...future.result$conditions <- ...future.conditions
[13:21:05.314]     ...future.result$finished <- base::Sys.time()
[13:21:05.314]     ...future.result
[13:21:05.314] }
[13:21:05.316] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[13:21:05.316] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[13:21:05.317] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[13:21:05.317] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[13:21:05.317] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 7dedc571-99ed-deca-3f23-3456a114c851
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.328] result() for ClusterFuture ...
[13:21:05.329] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.329] - Validating connection of MultisessionFuture
[13:21:05.362] - received message: FutureResult
[13:21:05.362] - Received FutureResult
[13:21:05.362] - Erased future from FutureRegistry
[13:21:05.362] result() for ClusterFuture ...
[13:21:05.362] - result already collected: FutureResult
[13:21:05.362] result() for ClusterFuture ... done
[13:21:05.362] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:05.363] result() for ClusterFuture ... done
[13:21:05.363] result() for ClusterFuture ...
[13:21:05.363] - result already collected: FutureResult
[13:21:05.363] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[13:21:05.363] getGlobalsAndPackages() ...
[13:21:05.363] Searching for globals...
[13:21:05.364] - globals found: [3] ‘{’, ‘sum’, ‘a’
[13:21:05.364] Searching for globals ... DONE
[13:21:05.364] Resolving globals: FALSE
[13:21:05.364] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[13:21:05.365] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[13:21:05.365] getGlobalsAndPackages() ...
[13:21:05.365] Searching for globals...
[13:21:05.366] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[13:21:05.366] Searching for globals ... DONE
[13:21:05.366] Resolving globals: FALSE
[13:21:05.367] The total size of the 2 globals is 112 bytes (112 bytes)
[13:21:05.367] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[13:21:05.367] - globals: [2] ‘a’, ‘b’
[13:21:05.367] 
[13:21:05.367] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[13:21:05.368] Packages needed by the future expression (n = 0): <none>
[13:21:05.368] Packages needed by future strategies (n = 0): <none>
[13:21:05.368] {
[13:21:05.368]     {
[13:21:05.368]         {
[13:21:05.368]             ...future.startTime <- base::Sys.time()
[13:21:05.368]             {
[13:21:05.368]                 {
[13:21:05.368]                   {
[13:21:05.368]                     base::local({
[13:21:05.368]                       has_future <- base::requireNamespace("future", 
[13:21:05.368]                         quietly = TRUE)
[13:21:05.368]                       if (has_future) {
[13:21:05.368]                         ns <- base::getNamespace("future")
[13:21:05.368]                         version <- ns[[".package"]][["version"]]
[13:21:05.368]                         if (is.null(version)) 
[13:21:05.368]                           version <- utils::packageVersion("future")
[13:21:05.368]                       }
[13:21:05.368]                       else {
[13:21:05.368]                         version <- NULL
[13:21:05.368]                       }
[13:21:05.368]                       if (!has_future || version < "1.8.0") {
[13:21:05.368]                         info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.368]                           "", base::R.version$version.string), 
[13:21:05.368]                           platform = base::sprintf("%s (%s-bit)", 
[13:21:05.368]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.368]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.368]                             "release", "version")], collapse = " "), 
[13:21:05.368]                           hostname = base::Sys.info()[["nodename"]])
[13:21:05.368]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.368]                           info)
[13:21:05.368]                         info <- base::paste(info, collapse = "; ")
[13:21:05.368]                         if (!has_future) {
[13:21:05.368]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.368]                             info)
[13:21:05.368]                         }
[13:21:05.368]                         else {
[13:21:05.368]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.368]                             info, version)
[13:21:05.368]                         }
[13:21:05.368]                         base::stop(msg)
[13:21:05.368]                       }
[13:21:05.368]                     })
[13:21:05.368]                   }
[13:21:05.368]                   options(future.plan = NULL)
[13:21:05.368]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.368]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.368]                 }
[13:21:05.368]                 ...future.workdir <- getwd()
[13:21:05.368]             }
[13:21:05.368]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.368]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.368]         }
[13:21:05.368]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.368]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.368]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.368]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.368]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.368]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.368]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.368]             base::names(...future.oldOptions))
[13:21:05.368]     }
[13:21:05.368]     if (FALSE) {
[13:21:05.368]     }
[13:21:05.368]     else {
[13:21:05.368]         if (TRUE) {
[13:21:05.368]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.368]                 open = "w")
[13:21:05.368]         }
[13:21:05.368]         else {
[13:21:05.368]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.368]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.368]         }
[13:21:05.368]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.368]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.368]             base::sink(type = "output", split = FALSE)
[13:21:05.368]             base::close(...future.stdout)
[13:21:05.368]         }, add = TRUE)
[13:21:05.368]     }
[13:21:05.368]     ...future.frame <- base::sys.nframe()
[13:21:05.368]     ...future.conditions <- base::list()
[13:21:05.368]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.368]     if (FALSE) {
[13:21:05.368]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.368]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.368]     }
[13:21:05.368]     ...future.result <- base::tryCatch({
[13:21:05.368]         base::withCallingHandlers({
[13:21:05.368]             ...future.value <- base::withVisible(base::local({
[13:21:05.368]                 a * b
[13:21:05.368]             }))
[13:21:05.368]             future::FutureResult(value = ...future.value$value, 
[13:21:05.368]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.368]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.368]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.368]                     ...future.globalenv.names))
[13:21:05.368]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.368]         }, condition = base::local({
[13:21:05.368]             c <- base::c
[13:21:05.368]             inherits <- base::inherits
[13:21:05.368]             invokeRestart <- base::invokeRestart
[13:21:05.368]             length <- base::length
[13:21:05.368]             list <- base::list
[13:21:05.368]             seq.int <- base::seq.int
[13:21:05.368]             signalCondition <- base::signalCondition
[13:21:05.368]             sys.calls <- base::sys.calls
[13:21:05.368]             `[[` <- base::`[[`
[13:21:05.368]             `+` <- base::`+`
[13:21:05.368]             `<<-` <- base::`<<-`
[13:21:05.368]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.368]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.368]                   3L)]
[13:21:05.368]             }
[13:21:05.368]             function(cond) {
[13:21:05.368]                 is_error <- inherits(cond, "error")
[13:21:05.368]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.368]                   NULL)
[13:21:05.368]                 if (is_error) {
[13:21:05.368]                   sessionInformation <- function() {
[13:21:05.368]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.368]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.368]                       search = base::search(), system = base::Sys.info())
[13:21:05.368]                   }
[13:21:05.368]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.368]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.368]                     cond$call), session = sessionInformation(), 
[13:21:05.368]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.368]                   signalCondition(cond)
[13:21:05.368]                 }
[13:21:05.368]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.368]                 "immediateCondition"))) {
[13:21:05.368]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.368]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.368]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.368]                   if (TRUE && !signal) {
[13:21:05.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.368]                     {
[13:21:05.368]                       inherits <- base::inherits
[13:21:05.368]                       invokeRestart <- base::invokeRestart
[13:21:05.368]                       is.null <- base::is.null
[13:21:05.368]                       muffled <- FALSE
[13:21:05.368]                       if (inherits(cond, "message")) {
[13:21:05.368]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.368]                         if (muffled) 
[13:21:05.368]                           invokeRestart("muffleMessage")
[13:21:05.368]                       }
[13:21:05.368]                       else if (inherits(cond, "warning")) {
[13:21:05.368]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.368]                         if (muffled) 
[13:21:05.368]                           invokeRestart("muffleWarning")
[13:21:05.368]                       }
[13:21:05.368]                       else if (inherits(cond, "condition")) {
[13:21:05.368]                         if (!is.null(pattern)) {
[13:21:05.368]                           computeRestarts <- base::computeRestarts
[13:21:05.368]                           grepl <- base::grepl
[13:21:05.368]                           restarts <- computeRestarts(cond)
[13:21:05.368]                           for (restart in restarts) {
[13:21:05.368]                             name <- restart$name
[13:21:05.368]                             if (is.null(name)) 
[13:21:05.368]                               next
[13:21:05.368]                             if (!grepl(pattern, name)) 
[13:21:05.368]                               next
[13:21:05.368]                             invokeRestart(restart)
[13:21:05.368]                             muffled <- TRUE
[13:21:05.368]                             break
[13:21:05.368]                           }
[13:21:05.368]                         }
[13:21:05.368]                       }
[13:21:05.368]                       invisible(muffled)
[13:21:05.368]                     }
[13:21:05.368]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.368]                   }
[13:21:05.368]                 }
[13:21:05.368]                 else {
[13:21:05.368]                   if (TRUE) {
[13:21:05.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.368]                     {
[13:21:05.368]                       inherits <- base::inherits
[13:21:05.368]                       invokeRestart <- base::invokeRestart
[13:21:05.368]                       is.null <- base::is.null
[13:21:05.368]                       muffled <- FALSE
[13:21:05.368]                       if (inherits(cond, "message")) {
[13:21:05.368]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.368]                         if (muffled) 
[13:21:05.368]                           invokeRestart("muffleMessage")
[13:21:05.368]                       }
[13:21:05.368]                       else if (inherits(cond, "warning")) {
[13:21:05.368]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.368]                         if (muffled) 
[13:21:05.368]                           invokeRestart("muffleWarning")
[13:21:05.368]                       }
[13:21:05.368]                       else if (inherits(cond, "condition")) {
[13:21:05.368]                         if (!is.null(pattern)) {
[13:21:05.368]                           computeRestarts <- base::computeRestarts
[13:21:05.368]                           grepl <- base::grepl
[13:21:05.368]                           restarts <- computeRestarts(cond)
[13:21:05.368]                           for (restart in restarts) {
[13:21:05.368]                             name <- restart$name
[13:21:05.368]                             if (is.null(name)) 
[13:21:05.368]                               next
[13:21:05.368]                             if (!grepl(pattern, name)) 
[13:21:05.368]                               next
[13:21:05.368]                             invokeRestart(restart)
[13:21:05.368]                             muffled <- TRUE
[13:21:05.368]                             break
[13:21:05.368]                           }
[13:21:05.368]                         }
[13:21:05.368]                       }
[13:21:05.368]                       invisible(muffled)
[13:21:05.368]                     }
[13:21:05.368]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.368]                   }
[13:21:05.368]                 }
[13:21:05.368]             }
[13:21:05.368]         }))
[13:21:05.368]     }, error = function(ex) {
[13:21:05.368]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.368]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.368]                 ...future.rng), started = ...future.startTime, 
[13:21:05.368]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.368]             version = "1.8"), class = "FutureResult")
[13:21:05.368]     }, finally = {
[13:21:05.368]         if (!identical(...future.workdir, getwd())) 
[13:21:05.368]             setwd(...future.workdir)
[13:21:05.368]         {
[13:21:05.368]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.368]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.368]             }
[13:21:05.368]             base::options(...future.oldOptions)
[13:21:05.368]             if (.Platform$OS.type == "windows") {
[13:21:05.368]                 old_names <- names(...future.oldEnvVars)
[13:21:05.368]                 envs <- base::Sys.getenv()
[13:21:05.368]                 names <- names(envs)
[13:21:05.368]                 common <- intersect(names, old_names)
[13:21:05.368]                 added <- setdiff(names, old_names)
[13:21:05.368]                 removed <- setdiff(old_names, names)
[13:21:05.368]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.368]                   envs[common]]
[13:21:05.368]                 NAMES <- toupper(changed)
[13:21:05.368]                 args <- list()
[13:21:05.368]                 for (kk in seq_along(NAMES)) {
[13:21:05.368]                   name <- changed[[kk]]
[13:21:05.368]                   NAME <- NAMES[[kk]]
[13:21:05.368]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.368]                     next
[13:21:05.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.368]                 }
[13:21:05.368]                 NAMES <- toupper(added)
[13:21:05.368]                 for (kk in seq_along(NAMES)) {
[13:21:05.368]                   name <- added[[kk]]
[13:21:05.368]                   NAME <- NAMES[[kk]]
[13:21:05.368]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.368]                     next
[13:21:05.368]                   args[[name]] <- ""
[13:21:05.368]                 }
[13:21:05.368]                 NAMES <- toupper(removed)
[13:21:05.368]                 for (kk in seq_along(NAMES)) {
[13:21:05.368]                   name <- removed[[kk]]
[13:21:05.368]                   NAME <- NAMES[[kk]]
[13:21:05.368]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.368]                     next
[13:21:05.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.368]                 }
[13:21:05.368]                 if (length(args) > 0) 
[13:21:05.368]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.368]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.368]             }
[13:21:05.368]             else {
[13:21:05.368]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.368]             }
[13:21:05.368]             {
[13:21:05.368]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.368]                   0L) {
[13:21:05.368]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.368]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.368]                   base::options(opts)
[13:21:05.368]                 }
[13:21:05.368]                 {
[13:21:05.368]                   {
[13:21:05.368]                     NULL
[13:21:05.368]                     RNGkind("Mersenne-Twister")
[13:21:05.368]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:21:05.368]                       inherits = FALSE)
[13:21:05.368]                   }
[13:21:05.368]                   options(future.plan = NULL)
[13:21:05.368]                   if (is.na(NA_character_)) 
[13:21:05.368]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.368]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.368]                   future::plan(list(function (..., envir = parent.frame()) 
[13:21:05.368]                   {
[13:21:05.368]                     future <- SequentialFuture(..., envir = envir)
[13:21:05.368]                     if (!future$lazy) 
[13:21:05.368]                       future <- run(future)
[13:21:05.368]                     invisible(future)
[13:21:05.368]                   }), .cleanup = FALSE, .init = FALSE)
[13:21:05.368]                 }
[13:21:05.368]             }
[13:21:05.368]         }
[13:21:05.368]     })
[13:21:05.368]     if (TRUE) {
[13:21:05.368]         base::sink(type = "output", split = FALSE)
[13:21:05.368]         if (TRUE) {
[13:21:05.368]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.368]         }
[13:21:05.368]         else {
[13:21:05.368]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.368]         }
[13:21:05.368]         base::close(...future.stdout)
[13:21:05.368]         ...future.stdout <- NULL
[13:21:05.368]     }
[13:21:05.368]     ...future.result$conditions <- ...future.conditions
[13:21:05.368]     ...future.result$finished <- base::Sys.time()
[13:21:05.368]     ...future.result
[13:21:05.368] }
[13:21:05.370] assign_globals() ...
[13:21:05.370] List of 2
[13:21:05.370]  $ a: num 2
[13:21:05.370]  $ b: num 3
[13:21:05.370]  - attr(*, "where")=List of 2
[13:21:05.370]   ..$ a:<environment: R_EmptyEnv> 
[13:21:05.370]   ..$ b:<environment: R_EmptyEnv> 
[13:21:05.370]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:21:05.370]  - attr(*, "resolved")= logi FALSE
[13:21:05.370]  - attr(*, "total_size")= num 112
[13:21:05.374] - copied ‘a’ to environment
[13:21:05.375] - copied ‘b’ to environment
[13:21:05.375] assign_globals() ... done
[13:21:05.375] plan(): Setting new future strategy stack:
[13:21:05.375] List of future strategies:
[13:21:05.375] 1. sequential:
[13:21:05.375]    - args: function (..., envir = parent.frame())
[13:21:05.375]    - tweaked: FALSE
[13:21:05.375]    - call: NULL
[13:21:05.375] plan(): nbrOfWorkers() = 1
[13:21:05.376] plan(): Setting new future strategy stack:
[13:21:05.376] List of future strategies:
[13:21:05.376] 1. sequential:
[13:21:05.376]    - args: function (..., envir = parent.frame())
[13:21:05.376]    - tweaked: FALSE
[13:21:05.376]    - call: future::plan("sequential")
[13:21:05.376] plan(): nbrOfWorkers() = 1
[13:21:05.377] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[13:21:05.378] plan(): Setting new future strategy stack:
[13:21:05.378] List of future strategies:
[13:21:05.378] 1. multisession:
[13:21:05.378]    - args: function (..., workers = 2L, envir = parent.frame())
[13:21:05.378]    - tweaked: TRUE
[13:21:05.378]    - call: plan(multisession, workers = 2L)
[13:21:05.390] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:05.390] multisession:
[13:21:05.390] - args: function (..., workers = 2L, envir = parent.frame())
[13:21:05.390] - tweaked: TRUE
[13:21:05.390] - call: plan(multisession, workers = 2L)
[13:21:05.391] getGlobalsAndPackages() ...
[13:21:05.391] Not searching for globals
[13:21:05.391] - globals: [0] <none>
[13:21:05.391] getGlobalsAndPackages() ... DONE
[13:21:05.391] [local output] makeClusterPSOCK() ...
[13:21:05.392] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:05.392] [local output] Base port: 11340
[13:21:05.392] [local output] Getting setup options for 2 cluster nodes ...
[13:21:05.392] [local output]  - Node 1 of 2 ...
[13:21:05.393] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:05.393] [local output] Rscript port: 11340

[13:21:05.394] [local output]  - Node 2 of 2 ...
[13:21:05.394] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:05.394] [local output] Rscript port: 11340

[13:21:05.395] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:05.395] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:05.395] [local output] Setting up PSOCK nodes in parallel
[13:21:05.395] List of 36
[13:21:05.395]  $ worker          : chr "localhost"
[13:21:05.395]   ..- attr(*, "localhost")= logi TRUE
[13:21:05.395]  $ master          : chr "localhost"
[13:21:05.395]  $ port            : int 11340
[13:21:05.395]  $ connectTimeout  : num 120
[13:21:05.395]  $ timeout         : num 2592000
[13:21:05.395]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:05.395]  $ homogeneous     : logi TRUE
[13:21:05.395]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:05.395]  $ rscript_envs    : NULL
[13:21:05.395]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:05.395]  $ rscript_startup : NULL
[13:21:05.395]  $ rscript_sh      : chr "sh"
[13:21:05.395]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:05.395]  $ methods         : logi TRUE
[13:21:05.395]  $ socketOptions   : chr "no-delay"
[13:21:05.395]  $ useXDR          : logi FALSE
[13:21:05.395]  $ outfile         : chr "/dev/null"
[13:21:05.395]  $ renice          : int NA
[13:21:05.395]  $ rshcmd          : NULL
[13:21:05.395]  $ user            : chr(0) 
[13:21:05.395]  $ revtunnel       : logi FALSE
[13:21:05.395]  $ rshlogfile      : NULL
[13:21:05.395]  $ rshopts         : chr(0) 
[13:21:05.395]  $ rank            : int 1
[13:21:05.395]  $ manual          : logi FALSE
[13:21:05.395]  $ dryrun          : logi FALSE
[13:21:05.395]  $ quiet           : logi FALSE
[13:21:05.395]  $ setup_strategy  : chr "parallel"
[13:21:05.395]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:05.395]  $ pidfile         : chr "/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df75b02cda.pid"
[13:21:05.395]  $ rshcmd_label    : NULL
[13:21:05.395]  $ rsh_call        : NULL
[13:21:05.395]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:05.395]  $ localMachine    : logi TRUE
[13:21:05.395]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:05.395]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:05.395]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:05.395]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:05.395]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:05.395]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:05.395]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:05.395]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:05.395]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:05.395]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:05.395]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:05.395]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:05.395]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:05.395]  $ arguments       :List of 28
[13:21:05.395]   ..$ worker          : chr "localhost"
[13:21:05.395]   ..$ master          : NULL
[13:21:05.395]   ..$ port            : int 11340
[13:21:05.395]   ..$ connectTimeout  : num 120
[13:21:05.395]   ..$ timeout         : num 2592000
[13:21:05.395]   ..$ rscript         : NULL
[13:21:05.395]   ..$ homogeneous     : NULL
[13:21:05.395]   ..$ rscript_args    : NULL
[13:21:05.395]   ..$ rscript_envs    : NULL
[13:21:05.395]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:05.395]   ..$ rscript_startup : NULL
[13:21:05.395]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:05.395]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:05.395]   ..$ methods         : logi TRUE
[13:21:05.395]   ..$ socketOptions   : chr "no-delay"
[13:21:05.395]   ..$ useXDR          : logi FALSE
[13:21:05.395]   ..$ outfile         : chr "/dev/null"
[13:21:05.395]   ..$ renice          : int NA
[13:21:05.395]   ..$ rshcmd          : NULL
[13:21:05.395]   ..$ user            : NULL
[13:21:05.395]   ..$ revtunnel       : logi NA
[13:21:05.395]   ..$ rshlogfile      : NULL
[13:21:05.395]   ..$ rshopts         : NULL
[13:21:05.395]   ..$ rank            : int 1
[13:21:05.395]   ..$ manual          : logi FALSE
[13:21:05.395]   ..$ dryrun          : logi FALSE
[13:21:05.395]   ..$ quiet           : logi FALSE
[13:21:05.395]   ..$ setup_strategy  : chr "parallel"
[13:21:05.395]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:05.412] [local output] System call to launch all workers:
[13:21:05.412] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df75b02cda.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11340 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:05.412] [local output] Starting PSOCK main server
[13:21:05.414] [local output] Workers launched
[13:21:05.414] [local output] Waiting for workers to connect back
[13:21:05.414]  - [local output] 0 workers out of 2 ready
[13:21:05.622]  - [local output] 0 workers out of 2 ready
[13:21:05.623]  - [local output] 1 workers out of 2 ready
[13:21:05.664]  - [local output] 1 workers out of 2 ready
[13:21:05.664]  - [local output] 2 workers out of 2 ready
[13:21:05.664] [local output] Launching of workers completed
[13:21:05.664] [local output] Collecting session information from workers
[13:21:05.665] [local output]  - Worker #1 of 2
[13:21:05.666] [local output]  - Worker #2 of 2
[13:21:05.666] [local output] makeClusterPSOCK() ... done
[13:21:05.677] Packages needed by the future expression (n = 0): <none>
[13:21:05.677] Packages needed by future strategies (n = 0): <none>
[13:21:05.677] {
[13:21:05.677]     {
[13:21:05.677]         {
[13:21:05.677]             ...future.startTime <- base::Sys.time()
[13:21:05.677]             {
[13:21:05.677]                 {
[13:21:05.677]                   {
[13:21:05.677]                     {
[13:21:05.677]                       base::local({
[13:21:05.677]                         has_future <- base::requireNamespace("future", 
[13:21:05.677]                           quietly = TRUE)
[13:21:05.677]                         if (has_future) {
[13:21:05.677]                           ns <- base::getNamespace("future")
[13:21:05.677]                           version <- ns[[".package"]][["version"]]
[13:21:05.677]                           if (is.null(version)) 
[13:21:05.677]                             version <- utils::packageVersion("future")
[13:21:05.677]                         }
[13:21:05.677]                         else {
[13:21:05.677]                           version <- NULL
[13:21:05.677]                         }
[13:21:05.677]                         if (!has_future || version < "1.8.0") {
[13:21:05.677]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.677]                             "", base::R.version$version.string), 
[13:21:05.677]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.677]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.677]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.677]                               "release", "version")], collapse = " "), 
[13:21:05.677]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.677]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.677]                             info)
[13:21:05.677]                           info <- base::paste(info, collapse = "; ")
[13:21:05.677]                           if (!has_future) {
[13:21:05.677]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.677]                               info)
[13:21:05.677]                           }
[13:21:05.677]                           else {
[13:21:05.677]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.677]                               info, version)
[13:21:05.677]                           }
[13:21:05.677]                           base::stop(msg)
[13:21:05.677]                         }
[13:21:05.677]                       })
[13:21:05.677]                     }
[13:21:05.677]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.677]                     base::options(mc.cores = 1L)
[13:21:05.677]                   }
[13:21:05.677]                   options(future.plan = NULL)
[13:21:05.677]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.677]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.677]                 }
[13:21:05.677]                 ...future.workdir <- getwd()
[13:21:05.677]             }
[13:21:05.677]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.677]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.677]         }
[13:21:05.677]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.677]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.677]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.677]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.677]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.677]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.677]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.677]             base::names(...future.oldOptions))
[13:21:05.677]     }
[13:21:05.677]     if (FALSE) {
[13:21:05.677]     }
[13:21:05.677]     else {
[13:21:05.677]         if (TRUE) {
[13:21:05.677]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.677]                 open = "w")
[13:21:05.677]         }
[13:21:05.677]         else {
[13:21:05.677]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.677]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.677]         }
[13:21:05.677]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.677]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.677]             base::sink(type = "output", split = FALSE)
[13:21:05.677]             base::close(...future.stdout)
[13:21:05.677]         }, add = TRUE)
[13:21:05.677]     }
[13:21:05.677]     ...future.frame <- base::sys.nframe()
[13:21:05.677]     ...future.conditions <- base::list()
[13:21:05.677]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.677]     if (FALSE) {
[13:21:05.677]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.677]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.677]     }
[13:21:05.677]     ...future.result <- base::tryCatch({
[13:21:05.677]         base::withCallingHandlers({
[13:21:05.677]             ...future.value <- base::withVisible(base::local({
[13:21:05.677]                 ...future.makeSendCondition <- local({
[13:21:05.677]                   sendCondition <- NULL
[13:21:05.677]                   function(frame = 1L) {
[13:21:05.677]                     if (is.function(sendCondition)) 
[13:21:05.677]                       return(sendCondition)
[13:21:05.677]                     ns <- getNamespace("parallel")
[13:21:05.677]                     if (exists("sendData", mode = "function", 
[13:21:05.677]                       envir = ns)) {
[13:21:05.677]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.677]                         envir = ns)
[13:21:05.677]                       envir <- sys.frame(frame)
[13:21:05.677]                       master <- NULL
[13:21:05.677]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.677]                         !identical(envir, emptyenv())) {
[13:21:05.677]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.677]                           inherits = FALSE)) {
[13:21:05.677]                           master <- get("master", mode = "list", 
[13:21:05.677]                             envir = envir, inherits = FALSE)
[13:21:05.677]                           if (inherits(master, c("SOCKnode", 
[13:21:05.677]                             "SOCK0node"))) {
[13:21:05.677]                             sendCondition <<- function(cond) {
[13:21:05.677]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.677]                                 success = TRUE)
[13:21:05.677]                               parallel_sendData(master, data)
[13:21:05.677]                             }
[13:21:05.677]                             return(sendCondition)
[13:21:05.677]                           }
[13:21:05.677]                         }
[13:21:05.677]                         frame <- frame + 1L
[13:21:05.677]                         envir <- sys.frame(frame)
[13:21:05.677]                       }
[13:21:05.677]                     }
[13:21:05.677]                     sendCondition <<- function(cond) NULL
[13:21:05.677]                   }
[13:21:05.677]                 })
[13:21:05.677]                 withCallingHandlers({
[13:21:05.677]                   NA
[13:21:05.677]                 }, immediateCondition = function(cond) {
[13:21:05.677]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.677]                   sendCondition(cond)
[13:21:05.677]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.677]                   {
[13:21:05.677]                     inherits <- base::inherits
[13:21:05.677]                     invokeRestart <- base::invokeRestart
[13:21:05.677]                     is.null <- base::is.null
[13:21:05.677]                     muffled <- FALSE
[13:21:05.677]                     if (inherits(cond, "message")) {
[13:21:05.677]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.677]                       if (muffled) 
[13:21:05.677]                         invokeRestart("muffleMessage")
[13:21:05.677]                     }
[13:21:05.677]                     else if (inherits(cond, "warning")) {
[13:21:05.677]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.677]                       if (muffled) 
[13:21:05.677]                         invokeRestart("muffleWarning")
[13:21:05.677]                     }
[13:21:05.677]                     else if (inherits(cond, "condition")) {
[13:21:05.677]                       if (!is.null(pattern)) {
[13:21:05.677]                         computeRestarts <- base::computeRestarts
[13:21:05.677]                         grepl <- base::grepl
[13:21:05.677]                         restarts <- computeRestarts(cond)
[13:21:05.677]                         for (restart in restarts) {
[13:21:05.677]                           name <- restart$name
[13:21:05.677]                           if (is.null(name)) 
[13:21:05.677]                             next
[13:21:05.677]                           if (!grepl(pattern, name)) 
[13:21:05.677]                             next
[13:21:05.677]                           invokeRestart(restart)
[13:21:05.677]                           muffled <- TRUE
[13:21:05.677]                           break
[13:21:05.677]                         }
[13:21:05.677]                       }
[13:21:05.677]                     }
[13:21:05.677]                     invisible(muffled)
[13:21:05.677]                   }
[13:21:05.677]                   muffleCondition(cond)
[13:21:05.677]                 })
[13:21:05.677]             }))
[13:21:05.677]             future::FutureResult(value = ...future.value$value, 
[13:21:05.677]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.677]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.677]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.677]                     ...future.globalenv.names))
[13:21:05.677]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.677]         }, condition = base::local({
[13:21:05.677]             c <- base::c
[13:21:05.677]             inherits <- base::inherits
[13:21:05.677]             invokeRestart <- base::invokeRestart
[13:21:05.677]             length <- base::length
[13:21:05.677]             list <- base::list
[13:21:05.677]             seq.int <- base::seq.int
[13:21:05.677]             signalCondition <- base::signalCondition
[13:21:05.677]             sys.calls <- base::sys.calls
[13:21:05.677]             `[[` <- base::`[[`
[13:21:05.677]             `+` <- base::`+`
[13:21:05.677]             `<<-` <- base::`<<-`
[13:21:05.677]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.677]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.677]                   3L)]
[13:21:05.677]             }
[13:21:05.677]             function(cond) {
[13:21:05.677]                 is_error <- inherits(cond, "error")
[13:21:05.677]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.677]                   NULL)
[13:21:05.677]                 if (is_error) {
[13:21:05.677]                   sessionInformation <- function() {
[13:21:05.677]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.677]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.677]                       search = base::search(), system = base::Sys.info())
[13:21:05.677]                   }
[13:21:05.677]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.677]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.677]                     cond$call), session = sessionInformation(), 
[13:21:05.677]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.677]                   signalCondition(cond)
[13:21:05.677]                 }
[13:21:05.677]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.677]                 "immediateCondition"))) {
[13:21:05.677]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.677]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.677]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.677]                   if (TRUE && !signal) {
[13:21:05.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.677]                     {
[13:21:05.677]                       inherits <- base::inherits
[13:21:05.677]                       invokeRestart <- base::invokeRestart
[13:21:05.677]                       is.null <- base::is.null
[13:21:05.677]                       muffled <- FALSE
[13:21:05.677]                       if (inherits(cond, "message")) {
[13:21:05.677]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.677]                         if (muffled) 
[13:21:05.677]                           invokeRestart("muffleMessage")
[13:21:05.677]                       }
[13:21:05.677]                       else if (inherits(cond, "warning")) {
[13:21:05.677]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.677]                         if (muffled) 
[13:21:05.677]                           invokeRestart("muffleWarning")
[13:21:05.677]                       }
[13:21:05.677]                       else if (inherits(cond, "condition")) {
[13:21:05.677]                         if (!is.null(pattern)) {
[13:21:05.677]                           computeRestarts <- base::computeRestarts
[13:21:05.677]                           grepl <- base::grepl
[13:21:05.677]                           restarts <- computeRestarts(cond)
[13:21:05.677]                           for (restart in restarts) {
[13:21:05.677]                             name <- restart$name
[13:21:05.677]                             if (is.null(name)) 
[13:21:05.677]                               next
[13:21:05.677]                             if (!grepl(pattern, name)) 
[13:21:05.677]                               next
[13:21:05.677]                             invokeRestart(restart)
[13:21:05.677]                             muffled <- TRUE
[13:21:05.677]                             break
[13:21:05.677]                           }
[13:21:05.677]                         }
[13:21:05.677]                       }
[13:21:05.677]                       invisible(muffled)
[13:21:05.677]                     }
[13:21:05.677]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.677]                   }
[13:21:05.677]                 }
[13:21:05.677]                 else {
[13:21:05.677]                   if (TRUE) {
[13:21:05.677]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.677]                     {
[13:21:05.677]                       inherits <- base::inherits
[13:21:05.677]                       invokeRestart <- base::invokeRestart
[13:21:05.677]                       is.null <- base::is.null
[13:21:05.677]                       muffled <- FALSE
[13:21:05.677]                       if (inherits(cond, "message")) {
[13:21:05.677]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.677]                         if (muffled) 
[13:21:05.677]                           invokeRestart("muffleMessage")
[13:21:05.677]                       }
[13:21:05.677]                       else if (inherits(cond, "warning")) {
[13:21:05.677]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.677]                         if (muffled) 
[13:21:05.677]                           invokeRestart("muffleWarning")
[13:21:05.677]                       }
[13:21:05.677]                       else if (inherits(cond, "condition")) {
[13:21:05.677]                         if (!is.null(pattern)) {
[13:21:05.677]                           computeRestarts <- base::computeRestarts
[13:21:05.677]                           grepl <- base::grepl
[13:21:05.677]                           restarts <- computeRestarts(cond)
[13:21:05.677]                           for (restart in restarts) {
[13:21:05.677]                             name <- restart$name
[13:21:05.677]                             if (is.null(name)) 
[13:21:05.677]                               next
[13:21:05.677]                             if (!grepl(pattern, name)) 
[13:21:05.677]                               next
[13:21:05.677]                             invokeRestart(restart)
[13:21:05.677]                             muffled <- TRUE
[13:21:05.677]                             break
[13:21:05.677]                           }
[13:21:05.677]                         }
[13:21:05.677]                       }
[13:21:05.677]                       invisible(muffled)
[13:21:05.677]                     }
[13:21:05.677]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.677]                   }
[13:21:05.677]                 }
[13:21:05.677]             }
[13:21:05.677]         }))
[13:21:05.677]     }, error = function(ex) {
[13:21:05.677]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.677]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.677]                 ...future.rng), started = ...future.startTime, 
[13:21:05.677]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.677]             version = "1.8"), class = "FutureResult")
[13:21:05.677]     }, finally = {
[13:21:05.677]         if (!identical(...future.workdir, getwd())) 
[13:21:05.677]             setwd(...future.workdir)
[13:21:05.677]         {
[13:21:05.677]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.677]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.677]             }
[13:21:05.677]             base::options(...future.oldOptions)
[13:21:05.677]             if (.Platform$OS.type == "windows") {
[13:21:05.677]                 old_names <- names(...future.oldEnvVars)
[13:21:05.677]                 envs <- base::Sys.getenv()
[13:21:05.677]                 names <- names(envs)
[13:21:05.677]                 common <- intersect(names, old_names)
[13:21:05.677]                 added <- setdiff(names, old_names)
[13:21:05.677]                 removed <- setdiff(old_names, names)
[13:21:05.677]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.677]                   envs[common]]
[13:21:05.677]                 NAMES <- toupper(changed)
[13:21:05.677]                 args <- list()
[13:21:05.677]                 for (kk in seq_along(NAMES)) {
[13:21:05.677]                   name <- changed[[kk]]
[13:21:05.677]                   NAME <- NAMES[[kk]]
[13:21:05.677]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.677]                     next
[13:21:05.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.677]                 }
[13:21:05.677]                 NAMES <- toupper(added)
[13:21:05.677]                 for (kk in seq_along(NAMES)) {
[13:21:05.677]                   name <- added[[kk]]
[13:21:05.677]                   NAME <- NAMES[[kk]]
[13:21:05.677]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.677]                     next
[13:21:05.677]                   args[[name]] <- ""
[13:21:05.677]                 }
[13:21:05.677]                 NAMES <- toupper(removed)
[13:21:05.677]                 for (kk in seq_along(NAMES)) {
[13:21:05.677]                   name <- removed[[kk]]
[13:21:05.677]                   NAME <- NAMES[[kk]]
[13:21:05.677]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.677]                     next
[13:21:05.677]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.677]                 }
[13:21:05.677]                 if (length(args) > 0) 
[13:21:05.677]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.677]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.677]             }
[13:21:05.677]             else {
[13:21:05.677]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.677]             }
[13:21:05.677]             {
[13:21:05.677]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.677]                   0L) {
[13:21:05.677]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.677]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.677]                   base::options(opts)
[13:21:05.677]                 }
[13:21:05.677]                 {
[13:21:05.677]                   {
[13:21:05.677]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.677]                     NULL
[13:21:05.677]                   }
[13:21:05.677]                   options(future.plan = NULL)
[13:21:05.677]                   if (is.na(NA_character_)) 
[13:21:05.677]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.677]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.677]                   future::plan(list(function (..., workers = 2L, 
[13:21:05.677]                     envir = parent.frame()) 
[13:21:05.677]                   strategy(..., workers = workers, envir = envir)), 
[13:21:05.677]                     .cleanup = FALSE, .init = FALSE)
[13:21:05.677]                 }
[13:21:05.677]             }
[13:21:05.677]         }
[13:21:05.677]     })
[13:21:05.677]     if (TRUE) {
[13:21:05.677]         base::sink(type = "output", split = FALSE)
[13:21:05.677]         if (TRUE) {
[13:21:05.677]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.677]         }
[13:21:05.677]         else {
[13:21:05.677]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.677]         }
[13:21:05.677]         base::close(...future.stdout)
[13:21:05.677]         ...future.stdout <- NULL
[13:21:05.677]     }
[13:21:05.677]     ...future.result$conditions <- ...future.conditions
[13:21:05.677]     ...future.result$finished <- base::Sys.time()
[13:21:05.677]     ...future.result
[13:21:05.677] }
[13:21:05.748] MultisessionFuture started
[13:21:05.749] result() for ClusterFuture ...
[13:21:05.749] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.749] - Validating connection of MultisessionFuture
[13:21:05.774] - received message: FutureResult
[13:21:05.774] - Received FutureResult
[13:21:05.774] - Erased future from FutureRegistry
[13:21:05.775] result() for ClusterFuture ...
[13:21:05.775] - result already collected: FutureResult
[13:21:05.775] result() for ClusterFuture ... done
[13:21:05.775] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:05.775] result() for ClusterFuture ... done
[13:21:05.775] result() for ClusterFuture ...
[13:21:05.775] - result already collected: FutureResult
[13:21:05.775] result() for ClusterFuture ... done
[13:21:05.775] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:05.776] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[13:21:05.776] getGlobalsAndPackages() ...
[13:21:05.776] Searching for globals...
[13:21:05.777] - globals found: [2] ‘{’, ‘gc’
[13:21:05.777] Searching for globals ... DONE
[13:21:05.777] Resolving globals: FALSE
[13:21:05.777] 
[13:21:05.777] 
[13:21:05.778] getGlobalsAndPackages() ... DONE
[13:21:05.778] run() for ‘Future’ ...
[13:21:05.778] - state: ‘created’
[13:21:05.778] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:05.789] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.789] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:05.789]   - Field: ‘node’
[13:21:05.790]   - Field: ‘label’
[13:21:05.790]   - Field: ‘local’
[13:21:05.790]   - Field: ‘owner’
[13:21:05.790]   - Field: ‘envir’
[13:21:05.790]   - Field: ‘workers’
[13:21:05.790]   - Field: ‘packages’
[13:21:05.790]   - Field: ‘gc’
[13:21:05.790]   - Field: ‘conditions’
[13:21:05.790]   - Field: ‘persistent’
[13:21:05.790]   - Field: ‘expr’
[13:21:05.790]   - Field: ‘uuid’
[13:21:05.791]   - Field: ‘seed’
[13:21:05.791]   - Field: ‘version’
[13:21:05.791]   - Field: ‘result’
[13:21:05.791]   - Field: ‘asynchronous’
[13:21:05.791]   - Field: ‘calls’
[13:21:05.791]   - Field: ‘globals’
[13:21:05.791]   - Field: ‘stdout’
[13:21:05.791]   - Field: ‘earlySignal’
[13:21:05.791]   - Field: ‘lazy’
[13:21:05.791]   - Field: ‘state’
[13:21:05.791] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:05.792] - Launch lazy future ...
[13:21:05.792] Packages needed by the future expression (n = 0): <none>
[13:21:05.792] Packages needed by future strategies (n = 0): <none>
[13:21:05.792] {
[13:21:05.792]     {
[13:21:05.792]         {
[13:21:05.792]             ...future.startTime <- base::Sys.time()
[13:21:05.792]             {
[13:21:05.792]                 {
[13:21:05.792]                   {
[13:21:05.792]                     {
[13:21:05.792]                       base::local({
[13:21:05.792]                         has_future <- base::requireNamespace("future", 
[13:21:05.792]                           quietly = TRUE)
[13:21:05.792]                         if (has_future) {
[13:21:05.792]                           ns <- base::getNamespace("future")
[13:21:05.792]                           version <- ns[[".package"]][["version"]]
[13:21:05.792]                           if (is.null(version)) 
[13:21:05.792]                             version <- utils::packageVersion("future")
[13:21:05.792]                         }
[13:21:05.792]                         else {
[13:21:05.792]                           version <- NULL
[13:21:05.792]                         }
[13:21:05.792]                         if (!has_future || version < "1.8.0") {
[13:21:05.792]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.792]                             "", base::R.version$version.string), 
[13:21:05.792]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.792]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.792]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.792]                               "release", "version")], collapse = " "), 
[13:21:05.792]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.792]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.792]                             info)
[13:21:05.792]                           info <- base::paste(info, collapse = "; ")
[13:21:05.792]                           if (!has_future) {
[13:21:05.792]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.792]                               info)
[13:21:05.792]                           }
[13:21:05.792]                           else {
[13:21:05.792]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.792]                               info, version)
[13:21:05.792]                           }
[13:21:05.792]                           base::stop(msg)
[13:21:05.792]                         }
[13:21:05.792]                       })
[13:21:05.792]                     }
[13:21:05.792]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.792]                     base::options(mc.cores = 1L)
[13:21:05.792]                   }
[13:21:05.792]                   options(future.plan = NULL)
[13:21:05.792]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.792]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.792]                 }
[13:21:05.792]                 ...future.workdir <- getwd()
[13:21:05.792]             }
[13:21:05.792]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.792]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.792]         }
[13:21:05.792]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.792]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.792]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.792]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.792]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.792]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.792]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.792]             base::names(...future.oldOptions))
[13:21:05.792]     }
[13:21:05.792]     if (FALSE) {
[13:21:05.792]     }
[13:21:05.792]     else {
[13:21:05.792]         if (TRUE) {
[13:21:05.792]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.792]                 open = "w")
[13:21:05.792]         }
[13:21:05.792]         else {
[13:21:05.792]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.792]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.792]         }
[13:21:05.792]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.792]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.792]             base::sink(type = "output", split = FALSE)
[13:21:05.792]             base::close(...future.stdout)
[13:21:05.792]         }, add = TRUE)
[13:21:05.792]     }
[13:21:05.792]     ...future.frame <- base::sys.nframe()
[13:21:05.792]     ...future.conditions <- base::list()
[13:21:05.792]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.792]     if (FALSE) {
[13:21:05.792]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.792]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.792]     }
[13:21:05.792]     ...future.result <- base::tryCatch({
[13:21:05.792]         base::withCallingHandlers({
[13:21:05.792]             ...future.value <- base::withVisible(base::local({
[13:21:05.792]                 ...future.makeSendCondition <- local({
[13:21:05.792]                   sendCondition <- NULL
[13:21:05.792]                   function(frame = 1L) {
[13:21:05.792]                     if (is.function(sendCondition)) 
[13:21:05.792]                       return(sendCondition)
[13:21:05.792]                     ns <- getNamespace("parallel")
[13:21:05.792]                     if (exists("sendData", mode = "function", 
[13:21:05.792]                       envir = ns)) {
[13:21:05.792]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.792]                         envir = ns)
[13:21:05.792]                       envir <- sys.frame(frame)
[13:21:05.792]                       master <- NULL
[13:21:05.792]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.792]                         !identical(envir, emptyenv())) {
[13:21:05.792]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.792]                           inherits = FALSE)) {
[13:21:05.792]                           master <- get("master", mode = "list", 
[13:21:05.792]                             envir = envir, inherits = FALSE)
[13:21:05.792]                           if (inherits(master, c("SOCKnode", 
[13:21:05.792]                             "SOCK0node"))) {
[13:21:05.792]                             sendCondition <<- function(cond) {
[13:21:05.792]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.792]                                 success = TRUE)
[13:21:05.792]                               parallel_sendData(master, data)
[13:21:05.792]                             }
[13:21:05.792]                             return(sendCondition)
[13:21:05.792]                           }
[13:21:05.792]                         }
[13:21:05.792]                         frame <- frame + 1L
[13:21:05.792]                         envir <- sys.frame(frame)
[13:21:05.792]                       }
[13:21:05.792]                     }
[13:21:05.792]                     sendCondition <<- function(cond) NULL
[13:21:05.792]                   }
[13:21:05.792]                 })
[13:21:05.792]                 withCallingHandlers({
[13:21:05.792]                   {
[13:21:05.792]                     gc()
[13:21:05.792]                   }
[13:21:05.792]                 }, immediateCondition = function(cond) {
[13:21:05.792]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.792]                   sendCondition(cond)
[13:21:05.792]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.792]                   {
[13:21:05.792]                     inherits <- base::inherits
[13:21:05.792]                     invokeRestart <- base::invokeRestart
[13:21:05.792]                     is.null <- base::is.null
[13:21:05.792]                     muffled <- FALSE
[13:21:05.792]                     if (inherits(cond, "message")) {
[13:21:05.792]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.792]                       if (muffled) 
[13:21:05.792]                         invokeRestart("muffleMessage")
[13:21:05.792]                     }
[13:21:05.792]                     else if (inherits(cond, "warning")) {
[13:21:05.792]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.792]                       if (muffled) 
[13:21:05.792]                         invokeRestart("muffleWarning")
[13:21:05.792]                     }
[13:21:05.792]                     else if (inherits(cond, "condition")) {
[13:21:05.792]                       if (!is.null(pattern)) {
[13:21:05.792]                         computeRestarts <- base::computeRestarts
[13:21:05.792]                         grepl <- base::grepl
[13:21:05.792]                         restarts <- computeRestarts(cond)
[13:21:05.792]                         for (restart in restarts) {
[13:21:05.792]                           name <- restart$name
[13:21:05.792]                           if (is.null(name)) 
[13:21:05.792]                             next
[13:21:05.792]                           if (!grepl(pattern, name)) 
[13:21:05.792]                             next
[13:21:05.792]                           invokeRestart(restart)
[13:21:05.792]                           muffled <- TRUE
[13:21:05.792]                           break
[13:21:05.792]                         }
[13:21:05.792]                       }
[13:21:05.792]                     }
[13:21:05.792]                     invisible(muffled)
[13:21:05.792]                   }
[13:21:05.792]                   muffleCondition(cond)
[13:21:05.792]                 })
[13:21:05.792]             }))
[13:21:05.792]             future::FutureResult(value = ...future.value$value, 
[13:21:05.792]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.792]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.792]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.792]                     ...future.globalenv.names))
[13:21:05.792]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.792]         }, condition = base::local({
[13:21:05.792]             c <- base::c
[13:21:05.792]             inherits <- base::inherits
[13:21:05.792]             invokeRestart <- base::invokeRestart
[13:21:05.792]             length <- base::length
[13:21:05.792]             list <- base::list
[13:21:05.792]             seq.int <- base::seq.int
[13:21:05.792]             signalCondition <- base::signalCondition
[13:21:05.792]             sys.calls <- base::sys.calls
[13:21:05.792]             `[[` <- base::`[[`
[13:21:05.792]             `+` <- base::`+`
[13:21:05.792]             `<<-` <- base::`<<-`
[13:21:05.792]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.792]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.792]                   3L)]
[13:21:05.792]             }
[13:21:05.792]             function(cond) {
[13:21:05.792]                 is_error <- inherits(cond, "error")
[13:21:05.792]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.792]                   NULL)
[13:21:05.792]                 if (is_error) {
[13:21:05.792]                   sessionInformation <- function() {
[13:21:05.792]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.792]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.792]                       search = base::search(), system = base::Sys.info())
[13:21:05.792]                   }
[13:21:05.792]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.792]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.792]                     cond$call), session = sessionInformation(), 
[13:21:05.792]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.792]                   signalCondition(cond)
[13:21:05.792]                 }
[13:21:05.792]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.792]                 "immediateCondition"))) {
[13:21:05.792]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.792]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.792]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.792]                   if (TRUE && !signal) {
[13:21:05.792]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.792]                     {
[13:21:05.792]                       inherits <- base::inherits
[13:21:05.792]                       invokeRestart <- base::invokeRestart
[13:21:05.792]                       is.null <- base::is.null
[13:21:05.792]                       muffled <- FALSE
[13:21:05.792]                       if (inherits(cond, "message")) {
[13:21:05.792]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.792]                         if (muffled) 
[13:21:05.792]                           invokeRestart("muffleMessage")
[13:21:05.792]                       }
[13:21:05.792]                       else if (inherits(cond, "warning")) {
[13:21:05.792]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.792]                         if (muffled) 
[13:21:05.792]                           invokeRestart("muffleWarning")
[13:21:05.792]                       }
[13:21:05.792]                       else if (inherits(cond, "condition")) {
[13:21:05.792]                         if (!is.null(pattern)) {
[13:21:05.792]                           computeRestarts <- base::computeRestarts
[13:21:05.792]                           grepl <- base::grepl
[13:21:05.792]                           restarts <- computeRestarts(cond)
[13:21:05.792]                           for (restart in restarts) {
[13:21:05.792]                             name <- restart$name
[13:21:05.792]                             if (is.null(name)) 
[13:21:05.792]                               next
[13:21:05.792]                             if (!grepl(pattern, name)) 
[13:21:05.792]                               next
[13:21:05.792]                             invokeRestart(restart)
[13:21:05.792]                             muffled <- TRUE
[13:21:05.792]                             break
[13:21:05.792]                           }
[13:21:05.792]                         }
[13:21:05.792]                       }
[13:21:05.792]                       invisible(muffled)
[13:21:05.792]                     }
[13:21:05.792]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.792]                   }
[13:21:05.792]                 }
[13:21:05.792]                 else {
[13:21:05.792]                   if (TRUE) {
[13:21:05.792]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.792]                     {
[13:21:05.792]                       inherits <- base::inherits
[13:21:05.792]                       invokeRestart <- base::invokeRestart
[13:21:05.792]                       is.null <- base::is.null
[13:21:05.792]                       muffled <- FALSE
[13:21:05.792]                       if (inherits(cond, "message")) {
[13:21:05.792]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.792]                         if (muffled) 
[13:21:05.792]                           invokeRestart("muffleMessage")
[13:21:05.792]                       }
[13:21:05.792]                       else if (inherits(cond, "warning")) {
[13:21:05.792]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.792]                         if (muffled) 
[13:21:05.792]                           invokeRestart("muffleWarning")
[13:21:05.792]                       }
[13:21:05.792]                       else if (inherits(cond, "condition")) {
[13:21:05.792]                         if (!is.null(pattern)) {
[13:21:05.792]                           computeRestarts <- base::computeRestarts
[13:21:05.792]                           grepl <- base::grepl
[13:21:05.792]                           restarts <- computeRestarts(cond)
[13:21:05.792]                           for (restart in restarts) {
[13:21:05.792]                             name <- restart$name
[13:21:05.792]                             if (is.null(name)) 
[13:21:05.792]                               next
[13:21:05.792]                             if (!grepl(pattern, name)) 
[13:21:05.792]                               next
[13:21:05.792]                             invokeRestart(restart)
[13:21:05.792]                             muffled <- TRUE
[13:21:05.792]                             break
[13:21:05.792]                           }
[13:21:05.792]                         }
[13:21:05.792]                       }
[13:21:05.792]                       invisible(muffled)
[13:21:05.792]                     }
[13:21:05.792]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.792]                   }
[13:21:05.792]                 }
[13:21:05.792]             }
[13:21:05.792]         }))
[13:21:05.792]     }, error = function(ex) {
[13:21:05.792]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.792]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.792]                 ...future.rng), started = ...future.startTime, 
[13:21:05.792]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.792]             version = "1.8"), class = "FutureResult")
[13:21:05.792]     }, finally = {
[13:21:05.792]         if (!identical(...future.workdir, getwd())) 
[13:21:05.792]             setwd(...future.workdir)
[13:21:05.792]         {
[13:21:05.792]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.792]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.792]             }
[13:21:05.792]             base::options(...future.oldOptions)
[13:21:05.792]             if (.Platform$OS.type == "windows") {
[13:21:05.792]                 old_names <- names(...future.oldEnvVars)
[13:21:05.792]                 envs <- base::Sys.getenv()
[13:21:05.792]                 names <- names(envs)
[13:21:05.792]                 common <- intersect(names, old_names)
[13:21:05.792]                 added <- setdiff(names, old_names)
[13:21:05.792]                 removed <- setdiff(old_names, names)
[13:21:05.792]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.792]                   envs[common]]
[13:21:05.792]                 NAMES <- toupper(changed)
[13:21:05.792]                 args <- list()
[13:21:05.792]                 for (kk in seq_along(NAMES)) {
[13:21:05.792]                   name <- changed[[kk]]
[13:21:05.792]                   NAME <- NAMES[[kk]]
[13:21:05.792]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.792]                     next
[13:21:05.792]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.792]                 }
[13:21:05.792]                 NAMES <- toupper(added)
[13:21:05.792]                 for (kk in seq_along(NAMES)) {
[13:21:05.792]                   name <- added[[kk]]
[13:21:05.792]                   NAME <- NAMES[[kk]]
[13:21:05.792]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.792]                     next
[13:21:05.792]                   args[[name]] <- ""
[13:21:05.792]                 }
[13:21:05.792]                 NAMES <- toupper(removed)
[13:21:05.792]                 for (kk in seq_along(NAMES)) {
[13:21:05.792]                   name <- removed[[kk]]
[13:21:05.792]                   NAME <- NAMES[[kk]]
[13:21:05.792]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.792]                     next
[13:21:05.792]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.792]                 }
[13:21:05.792]                 if (length(args) > 0) 
[13:21:05.792]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.792]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.792]             }
[13:21:05.792]             else {
[13:21:05.792]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.792]             }
[13:21:05.792]             {
[13:21:05.792]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.792]                   0L) {
[13:21:05.792]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.792]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.792]                   base::options(opts)
[13:21:05.792]                 }
[13:21:05.792]                 {
[13:21:05.792]                   {
[13:21:05.792]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.792]                     NULL
[13:21:05.792]                   }
[13:21:05.792]                   options(future.plan = NULL)
[13:21:05.792]                   if (is.na(NA_character_)) 
[13:21:05.792]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.792]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.792]                   future::plan(list(function (..., workers = 2L, 
[13:21:05.792]                     envir = parent.frame()) 
[13:21:05.792]                   strategy(..., workers = workers, envir = envir)), 
[13:21:05.792]                     .cleanup = FALSE, .init = FALSE)
[13:21:05.792]                 }
[13:21:05.792]             }
[13:21:05.792]         }
[13:21:05.792]     })
[13:21:05.792]     if (TRUE) {
[13:21:05.792]         base::sink(type = "output", split = FALSE)
[13:21:05.792]         if (TRUE) {
[13:21:05.792]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.792]         }
[13:21:05.792]         else {
[13:21:05.792]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.792]         }
[13:21:05.792]         base::close(...future.stdout)
[13:21:05.792]         ...future.stdout <- NULL
[13:21:05.792]     }
[13:21:05.792]     ...future.result$conditions <- ...future.conditions
[13:21:05.792]     ...future.result$finished <- base::Sys.time()
[13:21:05.792]     ...future.result
[13:21:05.792] }
[13:21:05.795] MultisessionFuture started
[13:21:05.796] - Launch lazy future ... done
[13:21:05.796] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:21:05.796] result() for ClusterFuture ...
[13:21:05.796] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.796] - Validating connection of MultisessionFuture
[13:21:05.861] - received message: FutureResult
[13:21:05.861] - Received FutureResult
[13:21:05.861] - Erased future from FutureRegistry
[13:21:05.861] result() for ClusterFuture ...
[13:21:05.861] - result already collected: FutureResult
[13:21:05.861] result() for ClusterFuture ... done
[13:21:05.862] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:05.862] result() for ClusterFuture ... done
[13:21:05.862] result() for ClusterFuture ...
[13:21:05.862] - result already collected: FutureResult
[13:21:05.862] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395195 21.2     836944 44.7   664120 35.5
Vcells 704995  5.4    8388608 64.0  1814288 13.9
> 
> f <- future({ integer(10e6) })
[13:21:05.862] getGlobalsAndPackages() ...
[13:21:05.862] Searching for globals...
[13:21:05.863] - globals found: [2] ‘{’, ‘integer’
[13:21:05.863] Searching for globals ... DONE
[13:21:05.863] Resolving globals: FALSE
[13:21:05.864] 
[13:21:05.864] 
[13:21:05.864] getGlobalsAndPackages() ... DONE
[13:21:05.864] run() for ‘Future’ ...
[13:21:05.864] - state: ‘created’
[13:21:05.864] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:05.875] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.876] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:05.876]   - Field: ‘node’
[13:21:05.876]   - Field: ‘label’
[13:21:05.876]   - Field: ‘local’
[13:21:05.876]   - Field: ‘owner’
[13:21:05.876]   - Field: ‘envir’
[13:21:05.876]   - Field: ‘workers’
[13:21:05.876]   - Field: ‘packages’
[13:21:05.876]   - Field: ‘gc’
[13:21:05.876]   - Field: ‘conditions’
[13:21:05.877]   - Field: ‘persistent’
[13:21:05.877]   - Field: ‘expr’
[13:21:05.877]   - Field: ‘uuid’
[13:21:05.877]   - Field: ‘seed’
[13:21:05.877]   - Field: ‘version’
[13:21:05.877]   - Field: ‘result’
[13:21:05.877]   - Field: ‘asynchronous’
[13:21:05.877]   - Field: ‘calls’
[13:21:05.879]   - Field: ‘globals’
[13:21:05.879]   - Field: ‘stdout’
[13:21:05.879]   - Field: ‘earlySignal’
[13:21:05.880]   - Field: ‘lazy’
[13:21:05.880]   - Field: ‘state’
[13:21:05.880] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:05.880] - Launch lazy future ...
[13:21:05.880] Packages needed by the future expression (n = 0): <none>
[13:21:05.880] Packages needed by future strategies (n = 0): <none>
[13:21:05.881] {
[13:21:05.881]     {
[13:21:05.881]         {
[13:21:05.881]             ...future.startTime <- base::Sys.time()
[13:21:05.881]             {
[13:21:05.881]                 {
[13:21:05.881]                   {
[13:21:05.881]                     {
[13:21:05.881]                       base::local({
[13:21:05.881]                         has_future <- base::requireNamespace("future", 
[13:21:05.881]                           quietly = TRUE)
[13:21:05.881]                         if (has_future) {
[13:21:05.881]                           ns <- base::getNamespace("future")
[13:21:05.881]                           version <- ns[[".package"]][["version"]]
[13:21:05.881]                           if (is.null(version)) 
[13:21:05.881]                             version <- utils::packageVersion("future")
[13:21:05.881]                         }
[13:21:05.881]                         else {
[13:21:05.881]                           version <- NULL
[13:21:05.881]                         }
[13:21:05.881]                         if (!has_future || version < "1.8.0") {
[13:21:05.881]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.881]                             "", base::R.version$version.string), 
[13:21:05.881]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.881]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.881]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.881]                               "release", "version")], collapse = " "), 
[13:21:05.881]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.881]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.881]                             info)
[13:21:05.881]                           info <- base::paste(info, collapse = "; ")
[13:21:05.881]                           if (!has_future) {
[13:21:05.881]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.881]                               info)
[13:21:05.881]                           }
[13:21:05.881]                           else {
[13:21:05.881]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.881]                               info, version)
[13:21:05.881]                           }
[13:21:05.881]                           base::stop(msg)
[13:21:05.881]                         }
[13:21:05.881]                       })
[13:21:05.881]                     }
[13:21:05.881]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.881]                     base::options(mc.cores = 1L)
[13:21:05.881]                   }
[13:21:05.881]                   options(future.plan = NULL)
[13:21:05.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.881]                 }
[13:21:05.881]                 ...future.workdir <- getwd()
[13:21:05.881]             }
[13:21:05.881]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.881]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.881]         }
[13:21:05.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.881]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.881]             base::names(...future.oldOptions))
[13:21:05.881]     }
[13:21:05.881]     if (FALSE) {
[13:21:05.881]     }
[13:21:05.881]     else {
[13:21:05.881]         if (TRUE) {
[13:21:05.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.881]                 open = "w")
[13:21:05.881]         }
[13:21:05.881]         else {
[13:21:05.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.881]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.881]         }
[13:21:05.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.881]             base::sink(type = "output", split = FALSE)
[13:21:05.881]             base::close(...future.stdout)
[13:21:05.881]         }, add = TRUE)
[13:21:05.881]     }
[13:21:05.881]     ...future.frame <- base::sys.nframe()
[13:21:05.881]     ...future.conditions <- base::list()
[13:21:05.881]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.881]     if (FALSE) {
[13:21:05.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.881]     }
[13:21:05.881]     ...future.result <- base::tryCatch({
[13:21:05.881]         base::withCallingHandlers({
[13:21:05.881]             ...future.value <- base::withVisible(base::local({
[13:21:05.881]                 ...future.makeSendCondition <- local({
[13:21:05.881]                   sendCondition <- NULL
[13:21:05.881]                   function(frame = 1L) {
[13:21:05.881]                     if (is.function(sendCondition)) 
[13:21:05.881]                       return(sendCondition)
[13:21:05.881]                     ns <- getNamespace("parallel")
[13:21:05.881]                     if (exists("sendData", mode = "function", 
[13:21:05.881]                       envir = ns)) {
[13:21:05.881]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.881]                         envir = ns)
[13:21:05.881]                       envir <- sys.frame(frame)
[13:21:05.881]                       master <- NULL
[13:21:05.881]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.881]                         !identical(envir, emptyenv())) {
[13:21:05.881]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.881]                           inherits = FALSE)) {
[13:21:05.881]                           master <- get("master", mode = "list", 
[13:21:05.881]                             envir = envir, inherits = FALSE)
[13:21:05.881]                           if (inherits(master, c("SOCKnode", 
[13:21:05.881]                             "SOCK0node"))) {
[13:21:05.881]                             sendCondition <<- function(cond) {
[13:21:05.881]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.881]                                 success = TRUE)
[13:21:05.881]                               parallel_sendData(master, data)
[13:21:05.881]                             }
[13:21:05.881]                             return(sendCondition)
[13:21:05.881]                           }
[13:21:05.881]                         }
[13:21:05.881]                         frame <- frame + 1L
[13:21:05.881]                         envir <- sys.frame(frame)
[13:21:05.881]                       }
[13:21:05.881]                     }
[13:21:05.881]                     sendCondition <<- function(cond) NULL
[13:21:05.881]                   }
[13:21:05.881]                 })
[13:21:05.881]                 withCallingHandlers({
[13:21:05.881]                   {
[13:21:05.881]                     integer(1e+07)
[13:21:05.881]                   }
[13:21:05.881]                 }, immediateCondition = function(cond) {
[13:21:05.881]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.881]                   sendCondition(cond)
[13:21:05.881]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.881]                   {
[13:21:05.881]                     inherits <- base::inherits
[13:21:05.881]                     invokeRestart <- base::invokeRestart
[13:21:05.881]                     is.null <- base::is.null
[13:21:05.881]                     muffled <- FALSE
[13:21:05.881]                     if (inherits(cond, "message")) {
[13:21:05.881]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.881]                       if (muffled) 
[13:21:05.881]                         invokeRestart("muffleMessage")
[13:21:05.881]                     }
[13:21:05.881]                     else if (inherits(cond, "warning")) {
[13:21:05.881]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.881]                       if (muffled) 
[13:21:05.881]                         invokeRestart("muffleWarning")
[13:21:05.881]                     }
[13:21:05.881]                     else if (inherits(cond, "condition")) {
[13:21:05.881]                       if (!is.null(pattern)) {
[13:21:05.881]                         computeRestarts <- base::computeRestarts
[13:21:05.881]                         grepl <- base::grepl
[13:21:05.881]                         restarts <- computeRestarts(cond)
[13:21:05.881]                         for (restart in restarts) {
[13:21:05.881]                           name <- restart$name
[13:21:05.881]                           if (is.null(name)) 
[13:21:05.881]                             next
[13:21:05.881]                           if (!grepl(pattern, name)) 
[13:21:05.881]                             next
[13:21:05.881]                           invokeRestart(restart)
[13:21:05.881]                           muffled <- TRUE
[13:21:05.881]                           break
[13:21:05.881]                         }
[13:21:05.881]                       }
[13:21:05.881]                     }
[13:21:05.881]                     invisible(muffled)
[13:21:05.881]                   }
[13:21:05.881]                   muffleCondition(cond)
[13:21:05.881]                 })
[13:21:05.881]             }))
[13:21:05.881]             future::FutureResult(value = ...future.value$value, 
[13:21:05.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.881]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.881]                     ...future.globalenv.names))
[13:21:05.881]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.881]         }, condition = base::local({
[13:21:05.881]             c <- base::c
[13:21:05.881]             inherits <- base::inherits
[13:21:05.881]             invokeRestart <- base::invokeRestart
[13:21:05.881]             length <- base::length
[13:21:05.881]             list <- base::list
[13:21:05.881]             seq.int <- base::seq.int
[13:21:05.881]             signalCondition <- base::signalCondition
[13:21:05.881]             sys.calls <- base::sys.calls
[13:21:05.881]             `[[` <- base::`[[`
[13:21:05.881]             `+` <- base::`+`
[13:21:05.881]             `<<-` <- base::`<<-`
[13:21:05.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.881]                   3L)]
[13:21:05.881]             }
[13:21:05.881]             function(cond) {
[13:21:05.881]                 is_error <- inherits(cond, "error")
[13:21:05.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.881]                   NULL)
[13:21:05.881]                 if (is_error) {
[13:21:05.881]                   sessionInformation <- function() {
[13:21:05.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.881]                       search = base::search(), system = base::Sys.info())
[13:21:05.881]                   }
[13:21:05.881]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.881]                     cond$call), session = sessionInformation(), 
[13:21:05.881]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.881]                   signalCondition(cond)
[13:21:05.881]                 }
[13:21:05.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.881]                 "immediateCondition"))) {
[13:21:05.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.881]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.881]                   if (TRUE && !signal) {
[13:21:05.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.881]                     {
[13:21:05.881]                       inherits <- base::inherits
[13:21:05.881]                       invokeRestart <- base::invokeRestart
[13:21:05.881]                       is.null <- base::is.null
[13:21:05.881]                       muffled <- FALSE
[13:21:05.881]                       if (inherits(cond, "message")) {
[13:21:05.881]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.881]                         if (muffled) 
[13:21:05.881]                           invokeRestart("muffleMessage")
[13:21:05.881]                       }
[13:21:05.881]                       else if (inherits(cond, "warning")) {
[13:21:05.881]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.881]                         if (muffled) 
[13:21:05.881]                           invokeRestart("muffleWarning")
[13:21:05.881]                       }
[13:21:05.881]                       else if (inherits(cond, "condition")) {
[13:21:05.881]                         if (!is.null(pattern)) {
[13:21:05.881]                           computeRestarts <- base::computeRestarts
[13:21:05.881]                           grepl <- base::grepl
[13:21:05.881]                           restarts <- computeRestarts(cond)
[13:21:05.881]                           for (restart in restarts) {
[13:21:05.881]                             name <- restart$name
[13:21:05.881]                             if (is.null(name)) 
[13:21:05.881]                               next
[13:21:05.881]                             if (!grepl(pattern, name)) 
[13:21:05.881]                               next
[13:21:05.881]                             invokeRestart(restart)
[13:21:05.881]                             muffled <- TRUE
[13:21:05.881]                             break
[13:21:05.881]                           }
[13:21:05.881]                         }
[13:21:05.881]                       }
[13:21:05.881]                       invisible(muffled)
[13:21:05.881]                     }
[13:21:05.881]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.881]                   }
[13:21:05.881]                 }
[13:21:05.881]                 else {
[13:21:05.881]                   if (TRUE) {
[13:21:05.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.881]                     {
[13:21:05.881]                       inherits <- base::inherits
[13:21:05.881]                       invokeRestart <- base::invokeRestart
[13:21:05.881]                       is.null <- base::is.null
[13:21:05.881]                       muffled <- FALSE
[13:21:05.881]                       if (inherits(cond, "message")) {
[13:21:05.881]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.881]                         if (muffled) 
[13:21:05.881]                           invokeRestart("muffleMessage")
[13:21:05.881]                       }
[13:21:05.881]                       else if (inherits(cond, "warning")) {
[13:21:05.881]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.881]                         if (muffled) 
[13:21:05.881]                           invokeRestart("muffleWarning")
[13:21:05.881]                       }
[13:21:05.881]                       else if (inherits(cond, "condition")) {
[13:21:05.881]                         if (!is.null(pattern)) {
[13:21:05.881]                           computeRestarts <- base::computeRestarts
[13:21:05.881]                           grepl <- base::grepl
[13:21:05.881]                           restarts <- computeRestarts(cond)
[13:21:05.881]                           for (restart in restarts) {
[13:21:05.881]                             name <- restart$name
[13:21:05.881]                             if (is.null(name)) 
[13:21:05.881]                               next
[13:21:05.881]                             if (!grepl(pattern, name)) 
[13:21:05.881]                               next
[13:21:05.881]                             invokeRestart(restart)
[13:21:05.881]                             muffled <- TRUE
[13:21:05.881]                             break
[13:21:05.881]                           }
[13:21:05.881]                         }
[13:21:05.881]                       }
[13:21:05.881]                       invisible(muffled)
[13:21:05.881]                     }
[13:21:05.881]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.881]                   }
[13:21:05.881]                 }
[13:21:05.881]             }
[13:21:05.881]         }))
[13:21:05.881]     }, error = function(ex) {
[13:21:05.881]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.881]                 ...future.rng), started = ...future.startTime, 
[13:21:05.881]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.881]             version = "1.8"), class = "FutureResult")
[13:21:05.881]     }, finally = {
[13:21:05.881]         if (!identical(...future.workdir, getwd())) 
[13:21:05.881]             setwd(...future.workdir)
[13:21:05.881]         {
[13:21:05.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.881]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.881]             }
[13:21:05.881]             base::options(...future.oldOptions)
[13:21:05.881]             if (.Platform$OS.type == "windows") {
[13:21:05.881]                 old_names <- names(...future.oldEnvVars)
[13:21:05.881]                 envs <- base::Sys.getenv()
[13:21:05.881]                 names <- names(envs)
[13:21:05.881]                 common <- intersect(names, old_names)
[13:21:05.881]                 added <- setdiff(names, old_names)
[13:21:05.881]                 removed <- setdiff(old_names, names)
[13:21:05.881]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.881]                   envs[common]]
[13:21:05.881]                 NAMES <- toupper(changed)
[13:21:05.881]                 args <- list()
[13:21:05.881]                 for (kk in seq_along(NAMES)) {
[13:21:05.881]                   name <- changed[[kk]]
[13:21:05.881]                   NAME <- NAMES[[kk]]
[13:21:05.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.881]                     next
[13:21:05.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.881]                 }
[13:21:05.881]                 NAMES <- toupper(added)
[13:21:05.881]                 for (kk in seq_along(NAMES)) {
[13:21:05.881]                   name <- added[[kk]]
[13:21:05.881]                   NAME <- NAMES[[kk]]
[13:21:05.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.881]                     next
[13:21:05.881]                   args[[name]] <- ""
[13:21:05.881]                 }
[13:21:05.881]                 NAMES <- toupper(removed)
[13:21:05.881]                 for (kk in seq_along(NAMES)) {
[13:21:05.881]                   name <- removed[[kk]]
[13:21:05.881]                   NAME <- NAMES[[kk]]
[13:21:05.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.881]                     next
[13:21:05.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.881]                 }
[13:21:05.881]                 if (length(args) > 0) 
[13:21:05.881]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.881]             }
[13:21:05.881]             else {
[13:21:05.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.881]             }
[13:21:05.881]             {
[13:21:05.881]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.881]                   0L) {
[13:21:05.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.881]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.881]                   base::options(opts)
[13:21:05.881]                 }
[13:21:05.881]                 {
[13:21:05.881]                   {
[13:21:05.881]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.881]                     NULL
[13:21:05.881]                   }
[13:21:05.881]                   options(future.plan = NULL)
[13:21:05.881]                   if (is.na(NA_character_)) 
[13:21:05.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.881]                   future::plan(list(function (..., workers = 2L, 
[13:21:05.881]                     envir = parent.frame()) 
[13:21:05.881]                   strategy(..., workers = workers, envir = envir)), 
[13:21:05.881]                     .cleanup = FALSE, .init = FALSE)
[13:21:05.881]                 }
[13:21:05.881]             }
[13:21:05.881]         }
[13:21:05.881]     })
[13:21:05.881]     if (TRUE) {
[13:21:05.881]         base::sink(type = "output", split = FALSE)
[13:21:05.881]         if (TRUE) {
[13:21:05.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.881]         }
[13:21:05.881]         else {
[13:21:05.881]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.881]         }
[13:21:05.881]         base::close(...future.stdout)
[13:21:05.881]         ...future.stdout <- NULL
[13:21:05.881]     }
[13:21:05.881]     ...future.result$conditions <- ...future.conditions
[13:21:05.881]     ...future.result$finished <- base::Sys.time()
[13:21:05.881]     ...future.result
[13:21:05.881] }
[13:21:05.884] MultisessionFuture started
[13:21:05.884] - Launch lazy future ... done
[13:21:05.884] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:21:05.884] result() for ClusterFuture ...
[13:21:05.884] receiveMessageFromWorker() for ClusterFuture ...
[13:21:05.884] - Validating connection of MultisessionFuture
[13:21:05.978] - received message: FutureResult
[13:21:05.978] - Received FutureResult
[13:21:05.978] - Erased future from FutureRegistry
[13:21:05.978] result() for ClusterFuture ...
[13:21:05.978] - result already collected: FutureResult
[13:21:05.978] result() for ClusterFuture ... done
[13:21:05.978] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:05.979] result() for ClusterFuture ... done
[13:21:05.979] result() for ClusterFuture ...
[13:21:05.979] - result already collected: FutureResult
[13:21:05.979] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[13:21:05.979] getGlobalsAndPackages() ...
[13:21:05.979] Searching for globals...
[13:21:05.980] - globals found: [2] ‘{’, ‘gc’
[13:21:05.980] Searching for globals ... DONE
[13:21:05.981] Resolving globals: FALSE
[13:21:05.981] 
[13:21:05.981] 
[13:21:05.981] getGlobalsAndPackages() ... DONE
[13:21:05.981] run() for ‘Future’ ...
[13:21:05.981] - state: ‘created’
[13:21:05.982] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:05.994] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:05.994] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:05.994]   - Field: ‘node’
[13:21:05.994]   - Field: ‘label’
[13:21:05.994]   - Field: ‘local’
[13:21:05.994]   - Field: ‘owner’
[13:21:05.994]   - Field: ‘envir’
[13:21:05.994]   - Field: ‘workers’
[13:21:05.994]   - Field: ‘packages’
[13:21:05.994]   - Field: ‘gc’
[13:21:05.995]   - Field: ‘conditions’
[13:21:05.995]   - Field: ‘persistent’
[13:21:05.995]   - Field: ‘expr’
[13:21:05.995]   - Field: ‘uuid’
[13:21:05.995]   - Field: ‘seed’
[13:21:05.995]   - Field: ‘version’
[13:21:05.995]   - Field: ‘result’
[13:21:05.995]   - Field: ‘asynchronous’
[13:21:05.995]   - Field: ‘calls’
[13:21:05.995]   - Field: ‘globals’
[13:21:05.995]   - Field: ‘stdout’
[13:21:05.996]   - Field: ‘earlySignal’
[13:21:05.996]   - Field: ‘lazy’
[13:21:05.996]   - Field: ‘state’
[13:21:05.996] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:05.996] - Launch lazy future ...
[13:21:05.996] Packages needed by the future expression (n = 0): <none>
[13:21:05.996] Packages needed by future strategies (n = 0): <none>
[13:21:05.997] {
[13:21:05.997]     {
[13:21:05.997]         {
[13:21:05.997]             ...future.startTime <- base::Sys.time()
[13:21:05.997]             {
[13:21:05.997]                 {
[13:21:05.997]                   {
[13:21:05.997]                     {
[13:21:05.997]                       base::local({
[13:21:05.997]                         has_future <- base::requireNamespace("future", 
[13:21:05.997]                           quietly = TRUE)
[13:21:05.997]                         if (has_future) {
[13:21:05.997]                           ns <- base::getNamespace("future")
[13:21:05.997]                           version <- ns[[".package"]][["version"]]
[13:21:05.997]                           if (is.null(version)) 
[13:21:05.997]                             version <- utils::packageVersion("future")
[13:21:05.997]                         }
[13:21:05.997]                         else {
[13:21:05.997]                           version <- NULL
[13:21:05.997]                         }
[13:21:05.997]                         if (!has_future || version < "1.8.0") {
[13:21:05.997]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:05.997]                             "", base::R.version$version.string), 
[13:21:05.997]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:05.997]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:05.997]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:05.997]                               "release", "version")], collapse = " "), 
[13:21:05.997]                             hostname = base::Sys.info()[["nodename"]])
[13:21:05.997]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:05.997]                             info)
[13:21:05.997]                           info <- base::paste(info, collapse = "; ")
[13:21:05.997]                           if (!has_future) {
[13:21:05.997]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:05.997]                               info)
[13:21:05.997]                           }
[13:21:05.997]                           else {
[13:21:05.997]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:05.997]                               info, version)
[13:21:05.997]                           }
[13:21:05.997]                           base::stop(msg)
[13:21:05.997]                         }
[13:21:05.997]                       })
[13:21:05.997]                     }
[13:21:05.997]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:05.997]                     base::options(mc.cores = 1L)
[13:21:05.997]                   }
[13:21:05.997]                   options(future.plan = NULL)
[13:21:05.997]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.997]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:05.997]                 }
[13:21:05.997]                 ...future.workdir <- getwd()
[13:21:05.997]             }
[13:21:05.997]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:05.997]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:05.997]         }
[13:21:05.997]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:05.997]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:05.997]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:05.997]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:05.997]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:05.997]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:05.997]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:05.997]             base::names(...future.oldOptions))
[13:21:05.997]     }
[13:21:05.997]     if (FALSE) {
[13:21:05.997]     }
[13:21:05.997]     else {
[13:21:05.997]         if (TRUE) {
[13:21:05.997]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:05.997]                 open = "w")
[13:21:05.997]         }
[13:21:05.997]         else {
[13:21:05.997]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:05.997]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:05.997]         }
[13:21:05.997]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:05.997]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:05.997]             base::sink(type = "output", split = FALSE)
[13:21:05.997]             base::close(...future.stdout)
[13:21:05.997]         }, add = TRUE)
[13:21:05.997]     }
[13:21:05.997]     ...future.frame <- base::sys.nframe()
[13:21:05.997]     ...future.conditions <- base::list()
[13:21:05.997]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:05.997]     if (FALSE) {
[13:21:05.997]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:05.997]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:05.997]     }
[13:21:05.997]     ...future.result <- base::tryCatch({
[13:21:05.997]         base::withCallingHandlers({
[13:21:05.997]             ...future.value <- base::withVisible(base::local({
[13:21:05.997]                 ...future.makeSendCondition <- local({
[13:21:05.997]                   sendCondition <- NULL
[13:21:05.997]                   function(frame = 1L) {
[13:21:05.997]                     if (is.function(sendCondition)) 
[13:21:05.997]                       return(sendCondition)
[13:21:05.997]                     ns <- getNamespace("parallel")
[13:21:05.997]                     if (exists("sendData", mode = "function", 
[13:21:05.997]                       envir = ns)) {
[13:21:05.997]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:05.997]                         envir = ns)
[13:21:05.997]                       envir <- sys.frame(frame)
[13:21:05.997]                       master <- NULL
[13:21:05.997]                       while (!identical(envir, .GlobalEnv) && 
[13:21:05.997]                         !identical(envir, emptyenv())) {
[13:21:05.997]                         if (exists("master", mode = "list", envir = envir, 
[13:21:05.997]                           inherits = FALSE)) {
[13:21:05.997]                           master <- get("master", mode = "list", 
[13:21:05.997]                             envir = envir, inherits = FALSE)
[13:21:05.997]                           if (inherits(master, c("SOCKnode", 
[13:21:05.997]                             "SOCK0node"))) {
[13:21:05.997]                             sendCondition <<- function(cond) {
[13:21:05.997]                               data <- list(type = "VALUE", value = cond, 
[13:21:05.997]                                 success = TRUE)
[13:21:05.997]                               parallel_sendData(master, data)
[13:21:05.997]                             }
[13:21:05.997]                             return(sendCondition)
[13:21:05.997]                           }
[13:21:05.997]                         }
[13:21:05.997]                         frame <- frame + 1L
[13:21:05.997]                         envir <- sys.frame(frame)
[13:21:05.997]                       }
[13:21:05.997]                     }
[13:21:05.997]                     sendCondition <<- function(cond) NULL
[13:21:05.997]                   }
[13:21:05.997]                 })
[13:21:05.997]                 withCallingHandlers({
[13:21:05.997]                   {
[13:21:05.997]                     gc()
[13:21:05.997]                   }
[13:21:05.997]                 }, immediateCondition = function(cond) {
[13:21:05.997]                   sendCondition <- ...future.makeSendCondition()
[13:21:05.997]                   sendCondition(cond)
[13:21:05.997]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.997]                   {
[13:21:05.997]                     inherits <- base::inherits
[13:21:05.997]                     invokeRestart <- base::invokeRestart
[13:21:05.997]                     is.null <- base::is.null
[13:21:05.997]                     muffled <- FALSE
[13:21:05.997]                     if (inherits(cond, "message")) {
[13:21:05.997]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:05.997]                       if (muffled) 
[13:21:05.997]                         invokeRestart("muffleMessage")
[13:21:05.997]                     }
[13:21:05.997]                     else if (inherits(cond, "warning")) {
[13:21:05.997]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:05.997]                       if (muffled) 
[13:21:05.997]                         invokeRestart("muffleWarning")
[13:21:05.997]                     }
[13:21:05.997]                     else if (inherits(cond, "condition")) {
[13:21:05.997]                       if (!is.null(pattern)) {
[13:21:05.997]                         computeRestarts <- base::computeRestarts
[13:21:05.997]                         grepl <- base::grepl
[13:21:05.997]                         restarts <- computeRestarts(cond)
[13:21:05.997]                         for (restart in restarts) {
[13:21:05.997]                           name <- restart$name
[13:21:05.997]                           if (is.null(name)) 
[13:21:05.997]                             next
[13:21:05.997]                           if (!grepl(pattern, name)) 
[13:21:05.997]                             next
[13:21:05.997]                           invokeRestart(restart)
[13:21:05.997]                           muffled <- TRUE
[13:21:05.997]                           break
[13:21:05.997]                         }
[13:21:05.997]                       }
[13:21:05.997]                     }
[13:21:05.997]                     invisible(muffled)
[13:21:05.997]                   }
[13:21:05.997]                   muffleCondition(cond)
[13:21:05.997]                 })
[13:21:05.997]             }))
[13:21:05.997]             future::FutureResult(value = ...future.value$value, 
[13:21:05.997]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.997]                   ...future.rng), globalenv = if (FALSE) 
[13:21:05.997]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:05.997]                     ...future.globalenv.names))
[13:21:05.997]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:05.997]         }, condition = base::local({
[13:21:05.997]             c <- base::c
[13:21:05.997]             inherits <- base::inherits
[13:21:05.997]             invokeRestart <- base::invokeRestart
[13:21:05.997]             length <- base::length
[13:21:05.997]             list <- base::list
[13:21:05.997]             seq.int <- base::seq.int
[13:21:05.997]             signalCondition <- base::signalCondition
[13:21:05.997]             sys.calls <- base::sys.calls
[13:21:05.997]             `[[` <- base::`[[`
[13:21:05.997]             `+` <- base::`+`
[13:21:05.997]             `<<-` <- base::`<<-`
[13:21:05.997]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:05.997]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:05.997]                   3L)]
[13:21:05.997]             }
[13:21:05.997]             function(cond) {
[13:21:05.997]                 is_error <- inherits(cond, "error")
[13:21:05.997]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:05.997]                   NULL)
[13:21:05.997]                 if (is_error) {
[13:21:05.997]                   sessionInformation <- function() {
[13:21:05.997]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:05.997]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:05.997]                       search = base::search(), system = base::Sys.info())
[13:21:05.997]                   }
[13:21:05.997]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.997]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:05.997]                     cond$call), session = sessionInformation(), 
[13:21:05.997]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:05.997]                   signalCondition(cond)
[13:21:05.997]                 }
[13:21:05.997]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:05.997]                 "immediateCondition"))) {
[13:21:05.997]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:05.997]                   ...future.conditions[[length(...future.conditions) + 
[13:21:05.997]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:05.997]                   if (TRUE && !signal) {
[13:21:05.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.997]                     {
[13:21:05.997]                       inherits <- base::inherits
[13:21:05.997]                       invokeRestart <- base::invokeRestart
[13:21:05.997]                       is.null <- base::is.null
[13:21:05.997]                       muffled <- FALSE
[13:21:05.997]                       if (inherits(cond, "message")) {
[13:21:05.997]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.997]                         if (muffled) 
[13:21:05.997]                           invokeRestart("muffleMessage")
[13:21:05.997]                       }
[13:21:05.997]                       else if (inherits(cond, "warning")) {
[13:21:05.997]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.997]                         if (muffled) 
[13:21:05.997]                           invokeRestart("muffleWarning")
[13:21:05.997]                       }
[13:21:05.997]                       else if (inherits(cond, "condition")) {
[13:21:05.997]                         if (!is.null(pattern)) {
[13:21:05.997]                           computeRestarts <- base::computeRestarts
[13:21:05.997]                           grepl <- base::grepl
[13:21:05.997]                           restarts <- computeRestarts(cond)
[13:21:05.997]                           for (restart in restarts) {
[13:21:05.997]                             name <- restart$name
[13:21:05.997]                             if (is.null(name)) 
[13:21:05.997]                               next
[13:21:05.997]                             if (!grepl(pattern, name)) 
[13:21:05.997]                               next
[13:21:05.997]                             invokeRestart(restart)
[13:21:05.997]                             muffled <- TRUE
[13:21:05.997]                             break
[13:21:05.997]                           }
[13:21:05.997]                         }
[13:21:05.997]                       }
[13:21:05.997]                       invisible(muffled)
[13:21:05.997]                     }
[13:21:05.997]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.997]                   }
[13:21:05.997]                 }
[13:21:05.997]                 else {
[13:21:05.997]                   if (TRUE) {
[13:21:05.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:05.997]                     {
[13:21:05.997]                       inherits <- base::inherits
[13:21:05.997]                       invokeRestart <- base::invokeRestart
[13:21:05.997]                       is.null <- base::is.null
[13:21:05.997]                       muffled <- FALSE
[13:21:05.997]                       if (inherits(cond, "message")) {
[13:21:05.997]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:05.997]                         if (muffled) 
[13:21:05.997]                           invokeRestart("muffleMessage")
[13:21:05.997]                       }
[13:21:05.997]                       else if (inherits(cond, "warning")) {
[13:21:05.997]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:05.997]                         if (muffled) 
[13:21:05.997]                           invokeRestart("muffleWarning")
[13:21:05.997]                       }
[13:21:05.997]                       else if (inherits(cond, "condition")) {
[13:21:05.997]                         if (!is.null(pattern)) {
[13:21:05.997]                           computeRestarts <- base::computeRestarts
[13:21:05.997]                           grepl <- base::grepl
[13:21:05.997]                           restarts <- computeRestarts(cond)
[13:21:05.997]                           for (restart in restarts) {
[13:21:05.997]                             name <- restart$name
[13:21:05.997]                             if (is.null(name)) 
[13:21:05.997]                               next
[13:21:05.997]                             if (!grepl(pattern, name)) 
[13:21:05.997]                               next
[13:21:05.997]                             invokeRestart(restart)
[13:21:05.997]                             muffled <- TRUE
[13:21:05.997]                             break
[13:21:05.997]                           }
[13:21:05.997]                         }
[13:21:05.997]                       }
[13:21:05.997]                       invisible(muffled)
[13:21:05.997]                     }
[13:21:05.997]                     muffleCondition(cond, pattern = "^muffle")
[13:21:05.997]                   }
[13:21:05.997]                 }
[13:21:05.997]             }
[13:21:05.997]         }))
[13:21:05.997]     }, error = function(ex) {
[13:21:05.997]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:05.997]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:05.997]                 ...future.rng), started = ...future.startTime, 
[13:21:05.997]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:05.997]             version = "1.8"), class = "FutureResult")
[13:21:05.997]     }, finally = {
[13:21:05.997]         if (!identical(...future.workdir, getwd())) 
[13:21:05.997]             setwd(...future.workdir)
[13:21:05.997]         {
[13:21:05.997]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:05.997]                 ...future.oldOptions$nwarnings <- NULL
[13:21:05.997]             }
[13:21:05.997]             base::options(...future.oldOptions)
[13:21:05.997]             if (.Platform$OS.type == "windows") {
[13:21:05.997]                 old_names <- names(...future.oldEnvVars)
[13:21:05.997]                 envs <- base::Sys.getenv()
[13:21:05.997]                 names <- names(envs)
[13:21:05.997]                 common <- intersect(names, old_names)
[13:21:05.997]                 added <- setdiff(names, old_names)
[13:21:05.997]                 removed <- setdiff(old_names, names)
[13:21:05.997]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:05.997]                   envs[common]]
[13:21:05.997]                 NAMES <- toupper(changed)
[13:21:05.997]                 args <- list()
[13:21:05.997]                 for (kk in seq_along(NAMES)) {
[13:21:05.997]                   name <- changed[[kk]]
[13:21:05.997]                   NAME <- NAMES[[kk]]
[13:21:05.997]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.997]                     next
[13:21:05.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.997]                 }
[13:21:05.997]                 NAMES <- toupper(added)
[13:21:05.997]                 for (kk in seq_along(NAMES)) {
[13:21:05.997]                   name <- added[[kk]]
[13:21:05.997]                   NAME <- NAMES[[kk]]
[13:21:05.997]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.997]                     next
[13:21:05.997]                   args[[name]] <- ""
[13:21:05.997]                 }
[13:21:05.997]                 NAMES <- toupper(removed)
[13:21:05.997]                 for (kk in seq_along(NAMES)) {
[13:21:05.997]                   name <- removed[[kk]]
[13:21:05.997]                   NAME <- NAMES[[kk]]
[13:21:05.997]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:05.997]                     next
[13:21:05.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:05.997]                 }
[13:21:05.997]                 if (length(args) > 0) 
[13:21:05.997]                   base::do.call(base::Sys.setenv, args = args)
[13:21:05.997]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:05.997]             }
[13:21:05.997]             else {
[13:21:05.997]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:05.997]             }
[13:21:05.997]             {
[13:21:05.997]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:05.997]                   0L) {
[13:21:05.997]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:05.997]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:05.997]                   base::options(opts)
[13:21:05.997]                 }
[13:21:05.997]                 {
[13:21:05.997]                   {
[13:21:05.997]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:05.997]                     NULL
[13:21:05.997]                   }
[13:21:05.997]                   options(future.plan = NULL)
[13:21:05.997]                   if (is.na(NA_character_)) 
[13:21:05.997]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:05.997]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:05.997]                   future::plan(list(function (..., workers = 2L, 
[13:21:05.997]                     envir = parent.frame()) 
[13:21:05.997]                   strategy(..., workers = workers, envir = envir)), 
[13:21:05.997]                     .cleanup = FALSE, .init = FALSE)
[13:21:05.997]                 }
[13:21:05.997]             }
[13:21:05.997]         }
[13:21:05.997]     })
[13:21:05.997]     if (TRUE) {
[13:21:05.997]         base::sink(type = "output", split = FALSE)
[13:21:05.997]         if (TRUE) {
[13:21:05.997]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:05.997]         }
[13:21:05.997]         else {
[13:21:05.997]             ...future.result["stdout"] <- base::list(NULL)
[13:21:05.997]         }
[13:21:05.997]         base::close(...future.stdout)
[13:21:05.997]         ...future.stdout <- NULL
[13:21:05.997]     }
[13:21:05.997]     ...future.result$conditions <- ...future.conditions
[13:21:05.997]     ...future.result$finished <- base::Sys.time()
[13:21:05.997]     ...future.result
[13:21:05.997] }
[13:21:06.000] MultisessionFuture started
[13:21:06.000] - Launch lazy future ... done
[13:21:06.000] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:21:06.000] result() for ClusterFuture ...
[13:21:06.000] receiveMessageFromWorker() for ClusterFuture ...
[13:21:06.000] - Validating connection of MultisessionFuture
[13:21:06.066] - received message: FutureResult
[13:21:06.066] - Received FutureResult
[13:21:06.066] - Erased future from FutureRegistry
[13:21:06.066] result() for ClusterFuture ...
[13:21:06.066] - result already collected: FutureResult
[13:21:06.066] result() for ClusterFuture ... done
[13:21:06.066] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:06.066] result() for ClusterFuture ... done
[13:21:06.066] result() for ClusterFuture ...
[13:21:06.067] - result already collected: FutureResult
[13:21:06.067] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395199 21.2     836944 44.7   664120 35.5
Vcells 705000  5.4    8388608 64.0  5728340 43.8
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[13:21:06.067] getGlobalsAndPackages() ...
[13:21:06.067] Searching for globals...
[13:21:06.068] - globals found: [2] ‘{’, ‘integer’
[13:21:06.068] Searching for globals ... DONE
[13:21:06.068] Resolving globals: FALSE
[13:21:06.068] 
[13:21:06.069] 
[13:21:06.069] getGlobalsAndPackages() ... DONE
[13:21:06.069] run() for ‘Future’ ...
[13:21:06.069] - state: ‘created’
[13:21:06.069] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.080] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.080] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:06.080]   - Field: ‘node’
[13:21:06.081]   - Field: ‘label’
[13:21:06.081]   - Field: ‘local’
[13:21:06.081]   - Field: ‘owner’
[13:21:06.081]   - Field: ‘envir’
[13:21:06.081]   - Field: ‘workers’
[13:21:06.081]   - Field: ‘packages’
[13:21:06.081]   - Field: ‘gc’
[13:21:06.081]   - Field: ‘conditions’
[13:21:06.081]   - Field: ‘persistent’
[13:21:06.081]   - Field: ‘expr’
[13:21:06.081]   - Field: ‘uuid’
[13:21:06.082]   - Field: ‘seed’
[13:21:06.082]   - Field: ‘version’
[13:21:06.082]   - Field: ‘result’
[13:21:06.082]   - Field: ‘asynchronous’
[13:21:06.082]   - Field: ‘calls’
[13:21:06.082]   - Field: ‘globals’
[13:21:06.082]   - Field: ‘stdout’
[13:21:06.082]   - Field: ‘earlySignal’
[13:21:06.082]   - Field: ‘lazy’
[13:21:06.082]   - Field: ‘state’
[13:21:06.082] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:06.083] - Launch lazy future ...
[13:21:06.083] Packages needed by the future expression (n = 0): <none>
[13:21:06.083] Packages needed by future strategies (n = 0): <none>
[13:21:06.083] {
[13:21:06.083]     {
[13:21:06.083]         {
[13:21:06.083]             ...future.startTime <- base::Sys.time()
[13:21:06.083]             {
[13:21:06.083]                 {
[13:21:06.083]                   {
[13:21:06.083]                     {
[13:21:06.083]                       base::local({
[13:21:06.083]                         has_future <- base::requireNamespace("future", 
[13:21:06.083]                           quietly = TRUE)
[13:21:06.083]                         if (has_future) {
[13:21:06.083]                           ns <- base::getNamespace("future")
[13:21:06.083]                           version <- ns[[".package"]][["version"]]
[13:21:06.083]                           if (is.null(version)) 
[13:21:06.083]                             version <- utils::packageVersion("future")
[13:21:06.083]                         }
[13:21:06.083]                         else {
[13:21:06.083]                           version <- NULL
[13:21:06.083]                         }
[13:21:06.083]                         if (!has_future || version < "1.8.0") {
[13:21:06.083]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.083]                             "", base::R.version$version.string), 
[13:21:06.083]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.083]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.083]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.083]                               "release", "version")], collapse = " "), 
[13:21:06.083]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.083]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.083]                             info)
[13:21:06.083]                           info <- base::paste(info, collapse = "; ")
[13:21:06.083]                           if (!has_future) {
[13:21:06.083]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.083]                               info)
[13:21:06.083]                           }
[13:21:06.083]                           else {
[13:21:06.083]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.083]                               info, version)
[13:21:06.083]                           }
[13:21:06.083]                           base::stop(msg)
[13:21:06.083]                         }
[13:21:06.083]                       })
[13:21:06.083]                     }
[13:21:06.083]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.083]                     base::options(mc.cores = 1L)
[13:21:06.083]                   }
[13:21:06.083]                   options(future.plan = NULL)
[13:21:06.083]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.083]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.083]                 }
[13:21:06.083]                 ...future.workdir <- getwd()
[13:21:06.083]             }
[13:21:06.083]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.083]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.083]         }
[13:21:06.083]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.083]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.083]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.083]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.083]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.083]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.083]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.083]             base::names(...future.oldOptions))
[13:21:06.083]     }
[13:21:06.083]     if (FALSE) {
[13:21:06.083]     }
[13:21:06.083]     else {
[13:21:06.083]         if (TRUE) {
[13:21:06.083]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.083]                 open = "w")
[13:21:06.083]         }
[13:21:06.083]         else {
[13:21:06.083]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.083]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.083]         }
[13:21:06.083]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.083]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.083]             base::sink(type = "output", split = FALSE)
[13:21:06.083]             base::close(...future.stdout)
[13:21:06.083]         }, add = TRUE)
[13:21:06.083]     }
[13:21:06.083]     ...future.frame <- base::sys.nframe()
[13:21:06.083]     ...future.conditions <- base::list()
[13:21:06.083]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.083]     if (FALSE) {
[13:21:06.083]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.083]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.083]     }
[13:21:06.083]     ...future.result <- base::tryCatch({
[13:21:06.083]         base::withCallingHandlers({
[13:21:06.083]             ...future.value <- base::withVisible(base::local({
[13:21:06.083]                 ...future.makeSendCondition <- local({
[13:21:06.083]                   sendCondition <- NULL
[13:21:06.083]                   function(frame = 1L) {
[13:21:06.083]                     if (is.function(sendCondition)) 
[13:21:06.083]                       return(sendCondition)
[13:21:06.083]                     ns <- getNamespace("parallel")
[13:21:06.083]                     if (exists("sendData", mode = "function", 
[13:21:06.083]                       envir = ns)) {
[13:21:06.083]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:06.083]                         envir = ns)
[13:21:06.083]                       envir <- sys.frame(frame)
[13:21:06.083]                       master <- NULL
[13:21:06.083]                       while (!identical(envir, .GlobalEnv) && 
[13:21:06.083]                         !identical(envir, emptyenv())) {
[13:21:06.083]                         if (exists("master", mode = "list", envir = envir, 
[13:21:06.083]                           inherits = FALSE)) {
[13:21:06.083]                           master <- get("master", mode = "list", 
[13:21:06.083]                             envir = envir, inherits = FALSE)
[13:21:06.083]                           if (inherits(master, c("SOCKnode", 
[13:21:06.083]                             "SOCK0node"))) {
[13:21:06.083]                             sendCondition <<- function(cond) {
[13:21:06.083]                               data <- list(type = "VALUE", value = cond, 
[13:21:06.083]                                 success = TRUE)
[13:21:06.083]                               parallel_sendData(master, data)
[13:21:06.083]                             }
[13:21:06.083]                             return(sendCondition)
[13:21:06.083]                           }
[13:21:06.083]                         }
[13:21:06.083]                         frame <- frame + 1L
[13:21:06.083]                         envir <- sys.frame(frame)
[13:21:06.083]                       }
[13:21:06.083]                     }
[13:21:06.083]                     sendCondition <<- function(cond) NULL
[13:21:06.083]                   }
[13:21:06.083]                 })
[13:21:06.083]                 withCallingHandlers({
[13:21:06.083]                   {
[13:21:06.083]                     integer(1e+07)
[13:21:06.083]                   }
[13:21:06.083]                 }, immediateCondition = function(cond) {
[13:21:06.083]                   sendCondition <- ...future.makeSendCondition()
[13:21:06.083]                   sendCondition(cond)
[13:21:06.083]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.083]                   {
[13:21:06.083]                     inherits <- base::inherits
[13:21:06.083]                     invokeRestart <- base::invokeRestart
[13:21:06.083]                     is.null <- base::is.null
[13:21:06.083]                     muffled <- FALSE
[13:21:06.083]                     if (inherits(cond, "message")) {
[13:21:06.083]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.083]                       if (muffled) 
[13:21:06.083]                         invokeRestart("muffleMessage")
[13:21:06.083]                     }
[13:21:06.083]                     else if (inherits(cond, "warning")) {
[13:21:06.083]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.083]                       if (muffled) 
[13:21:06.083]                         invokeRestart("muffleWarning")
[13:21:06.083]                     }
[13:21:06.083]                     else if (inherits(cond, "condition")) {
[13:21:06.083]                       if (!is.null(pattern)) {
[13:21:06.083]                         computeRestarts <- base::computeRestarts
[13:21:06.083]                         grepl <- base::grepl
[13:21:06.083]                         restarts <- computeRestarts(cond)
[13:21:06.083]                         for (restart in restarts) {
[13:21:06.083]                           name <- restart$name
[13:21:06.083]                           if (is.null(name)) 
[13:21:06.083]                             next
[13:21:06.083]                           if (!grepl(pattern, name)) 
[13:21:06.083]                             next
[13:21:06.083]                           invokeRestart(restart)
[13:21:06.083]                           muffled <- TRUE
[13:21:06.083]                           break
[13:21:06.083]                         }
[13:21:06.083]                       }
[13:21:06.083]                     }
[13:21:06.083]                     invisible(muffled)
[13:21:06.083]                   }
[13:21:06.083]                   muffleCondition(cond)
[13:21:06.083]                 })
[13:21:06.083]             }))
[13:21:06.083]             future::FutureResult(value = ...future.value$value, 
[13:21:06.083]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.083]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.083]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.083]                     ...future.globalenv.names))
[13:21:06.083]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.083]         }, condition = base::local({
[13:21:06.083]             c <- base::c
[13:21:06.083]             inherits <- base::inherits
[13:21:06.083]             invokeRestart <- base::invokeRestart
[13:21:06.083]             length <- base::length
[13:21:06.083]             list <- base::list
[13:21:06.083]             seq.int <- base::seq.int
[13:21:06.083]             signalCondition <- base::signalCondition
[13:21:06.083]             sys.calls <- base::sys.calls
[13:21:06.083]             `[[` <- base::`[[`
[13:21:06.083]             `+` <- base::`+`
[13:21:06.083]             `<<-` <- base::`<<-`
[13:21:06.083]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.083]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.083]                   3L)]
[13:21:06.083]             }
[13:21:06.083]             function(cond) {
[13:21:06.083]                 is_error <- inherits(cond, "error")
[13:21:06.083]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.083]                   NULL)
[13:21:06.083]                 if (is_error) {
[13:21:06.083]                   sessionInformation <- function() {
[13:21:06.083]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.083]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.083]                       search = base::search(), system = base::Sys.info())
[13:21:06.083]                   }
[13:21:06.083]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.083]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.083]                     cond$call), session = sessionInformation(), 
[13:21:06.083]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.083]                   signalCondition(cond)
[13:21:06.083]                 }
[13:21:06.083]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.083]                 "immediateCondition"))) {
[13:21:06.083]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.083]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.083]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.083]                   if (TRUE && !signal) {
[13:21:06.083]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.083]                     {
[13:21:06.083]                       inherits <- base::inherits
[13:21:06.083]                       invokeRestart <- base::invokeRestart
[13:21:06.083]                       is.null <- base::is.null
[13:21:06.083]                       muffled <- FALSE
[13:21:06.083]                       if (inherits(cond, "message")) {
[13:21:06.083]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.083]                         if (muffled) 
[13:21:06.083]                           invokeRestart("muffleMessage")
[13:21:06.083]                       }
[13:21:06.083]                       else if (inherits(cond, "warning")) {
[13:21:06.083]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.083]                         if (muffled) 
[13:21:06.083]                           invokeRestart("muffleWarning")
[13:21:06.083]                       }
[13:21:06.083]                       else if (inherits(cond, "condition")) {
[13:21:06.083]                         if (!is.null(pattern)) {
[13:21:06.083]                           computeRestarts <- base::computeRestarts
[13:21:06.083]                           grepl <- base::grepl
[13:21:06.083]                           restarts <- computeRestarts(cond)
[13:21:06.083]                           for (restart in restarts) {
[13:21:06.083]                             name <- restart$name
[13:21:06.083]                             if (is.null(name)) 
[13:21:06.083]                               next
[13:21:06.083]                             if (!grepl(pattern, name)) 
[13:21:06.083]                               next
[13:21:06.083]                             invokeRestart(restart)
[13:21:06.083]                             muffled <- TRUE
[13:21:06.083]                             break
[13:21:06.083]                           }
[13:21:06.083]                         }
[13:21:06.083]                       }
[13:21:06.083]                       invisible(muffled)
[13:21:06.083]                     }
[13:21:06.083]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.083]                   }
[13:21:06.083]                 }
[13:21:06.083]                 else {
[13:21:06.083]                   if (TRUE) {
[13:21:06.083]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.083]                     {
[13:21:06.083]                       inherits <- base::inherits
[13:21:06.083]                       invokeRestart <- base::invokeRestart
[13:21:06.083]                       is.null <- base::is.null
[13:21:06.083]                       muffled <- FALSE
[13:21:06.083]                       if (inherits(cond, "message")) {
[13:21:06.083]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.083]                         if (muffled) 
[13:21:06.083]                           invokeRestart("muffleMessage")
[13:21:06.083]                       }
[13:21:06.083]                       else if (inherits(cond, "warning")) {
[13:21:06.083]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.083]                         if (muffled) 
[13:21:06.083]                           invokeRestart("muffleWarning")
[13:21:06.083]                       }
[13:21:06.083]                       else if (inherits(cond, "condition")) {
[13:21:06.083]                         if (!is.null(pattern)) {
[13:21:06.083]                           computeRestarts <- base::computeRestarts
[13:21:06.083]                           grepl <- base::grepl
[13:21:06.083]                           restarts <- computeRestarts(cond)
[13:21:06.083]                           for (restart in restarts) {
[13:21:06.083]                             name <- restart$name
[13:21:06.083]                             if (is.null(name)) 
[13:21:06.083]                               next
[13:21:06.083]                             if (!grepl(pattern, name)) 
[13:21:06.083]                               next
[13:21:06.083]                             invokeRestart(restart)
[13:21:06.083]                             muffled <- TRUE
[13:21:06.083]                             break
[13:21:06.083]                           }
[13:21:06.083]                         }
[13:21:06.083]                       }
[13:21:06.083]                       invisible(muffled)
[13:21:06.083]                     }
[13:21:06.083]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.083]                   }
[13:21:06.083]                 }
[13:21:06.083]             }
[13:21:06.083]         }))
[13:21:06.083]     }, error = function(ex) {
[13:21:06.083]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.083]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.083]                 ...future.rng), started = ...future.startTime, 
[13:21:06.083]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.083]             version = "1.8"), class = "FutureResult")
[13:21:06.083]     }, finally = {
[13:21:06.083]         if (!identical(...future.workdir, getwd())) 
[13:21:06.083]             setwd(...future.workdir)
[13:21:06.083]         {
[13:21:06.083]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.083]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.083]             }
[13:21:06.083]             base::options(...future.oldOptions)
[13:21:06.083]             if (.Platform$OS.type == "windows") {
[13:21:06.083]                 old_names <- names(...future.oldEnvVars)
[13:21:06.083]                 envs <- base::Sys.getenv()
[13:21:06.083]                 names <- names(envs)
[13:21:06.083]                 common <- intersect(names, old_names)
[13:21:06.083]                 added <- setdiff(names, old_names)
[13:21:06.083]                 removed <- setdiff(old_names, names)
[13:21:06.083]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.083]                   envs[common]]
[13:21:06.083]                 NAMES <- toupper(changed)
[13:21:06.083]                 args <- list()
[13:21:06.083]                 for (kk in seq_along(NAMES)) {
[13:21:06.083]                   name <- changed[[kk]]
[13:21:06.083]                   NAME <- NAMES[[kk]]
[13:21:06.083]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.083]                     next
[13:21:06.083]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.083]                 }
[13:21:06.083]                 NAMES <- toupper(added)
[13:21:06.083]                 for (kk in seq_along(NAMES)) {
[13:21:06.083]                   name <- added[[kk]]
[13:21:06.083]                   NAME <- NAMES[[kk]]
[13:21:06.083]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.083]                     next
[13:21:06.083]                   args[[name]] <- ""
[13:21:06.083]                 }
[13:21:06.083]                 NAMES <- toupper(removed)
[13:21:06.083]                 for (kk in seq_along(NAMES)) {
[13:21:06.083]                   name <- removed[[kk]]
[13:21:06.083]                   NAME <- NAMES[[kk]]
[13:21:06.083]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.083]                     next
[13:21:06.083]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.083]                 }
[13:21:06.083]                 if (length(args) > 0) 
[13:21:06.083]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.083]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.083]             }
[13:21:06.083]             else {
[13:21:06.083]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.083]             }
[13:21:06.083]             {
[13:21:06.083]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.083]                   0L) {
[13:21:06.083]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.083]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.083]                   base::options(opts)
[13:21:06.083]                 }
[13:21:06.083]                 {
[13:21:06.083]                   {
[13:21:06.083]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.083]                     NULL
[13:21:06.083]                   }
[13:21:06.083]                   options(future.plan = NULL)
[13:21:06.083]                   if (is.na(NA_character_)) 
[13:21:06.083]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.083]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.083]                   future::plan(list(function (..., workers = 2L, 
[13:21:06.083]                     envir = parent.frame()) 
[13:21:06.083]                   strategy(..., workers = workers, envir = envir)), 
[13:21:06.083]                     .cleanup = FALSE, .init = FALSE)
[13:21:06.083]                 }
[13:21:06.083]             }
[13:21:06.083]         }
[13:21:06.083]     })
[13:21:06.083]     if (TRUE) {
[13:21:06.083]         base::sink(type = "output", split = FALSE)
[13:21:06.083]         if (TRUE) {
[13:21:06.083]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.083]         }
[13:21:06.083]         else {
[13:21:06.083]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.083]         }
[13:21:06.083]         base::close(...future.stdout)
[13:21:06.083]         ...future.stdout <- NULL
[13:21:06.083]     }
[13:21:06.083]     ...future.result$conditions <- ...future.conditions
[13:21:06.083]     ...future.result$finished <- base::Sys.time()
[13:21:06.083]     ...future.result
[13:21:06.083] }
[13:21:06.086] MultisessionFuture started
[13:21:06.087] - Launch lazy future ... done
[13:21:06.087] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:21:06.087] result() for ClusterFuture ...
[13:21:06.087] receiveMessageFromWorker() for ClusterFuture ...
[13:21:06.087] - Validating connection of MultisessionFuture
[13:21:06.186] - received message: FutureResult
[13:21:06.186] - Received FutureResult
[13:21:06.186] - Erased future from FutureRegistry
[13:21:06.186] result() for ClusterFuture ...
[13:21:06.186] - result already collected: FutureResult
[13:21:06.187] result() for ClusterFuture ... done
[13:21:06.187] - Garbage collecting worker ...
[13:21:06.417] - Garbage collecting worker ... done
[13:21:06.418] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:06.418] result() for ClusterFuture ... done
[13:21:06.418] result() for ClusterFuture ...
[13:21:06.418] - result already collected: FutureResult
[13:21:06.418] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[13:21:06.419] getGlobalsAndPackages() ...
[13:21:06.419] Searching for globals...
[13:21:06.420] - globals found: [2] ‘{’, ‘gc’
[13:21:06.420] Searching for globals ... DONE
[13:21:06.420] Resolving globals: FALSE
[13:21:06.420] 
[13:21:06.420] 
[13:21:06.420] getGlobalsAndPackages() ... DONE
[13:21:06.421] run() for ‘Future’ ...
[13:21:06.421] - state: ‘created’
[13:21:06.421] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.432] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.432] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:06.432]   - Field: ‘node’
[13:21:06.432]   - Field: ‘label’
[13:21:06.432]   - Field: ‘local’
[13:21:06.432]   - Field: ‘owner’
[13:21:06.433]   - Field: ‘envir’
[13:21:06.433]   - Field: ‘workers’
[13:21:06.433]   - Field: ‘packages’
[13:21:06.433]   - Field: ‘gc’
[13:21:06.433]   - Field: ‘conditions’
[13:21:06.433]   - Field: ‘persistent’
[13:21:06.433]   - Field: ‘expr’
[13:21:06.433]   - Field: ‘uuid’
[13:21:06.433]   - Field: ‘seed’
[13:21:06.433]   - Field: ‘version’
[13:21:06.433]   - Field: ‘result’
[13:21:06.434]   - Field: ‘asynchronous’
[13:21:06.434]   - Field: ‘calls’
[13:21:06.434]   - Field: ‘globals’
[13:21:06.434]   - Field: ‘stdout’
[13:21:06.434]   - Field: ‘earlySignal’
[13:21:06.434]   - Field: ‘lazy’
[13:21:06.434]   - Field: ‘state’
[13:21:06.434] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:06.434] - Launch lazy future ...
[13:21:06.435] Packages needed by the future expression (n = 0): <none>
[13:21:06.435] Packages needed by future strategies (n = 0): <none>
[13:21:06.435] {
[13:21:06.435]     {
[13:21:06.435]         {
[13:21:06.435]             ...future.startTime <- base::Sys.time()
[13:21:06.435]             {
[13:21:06.435]                 {
[13:21:06.435]                   {
[13:21:06.435]                     {
[13:21:06.435]                       base::local({
[13:21:06.435]                         has_future <- base::requireNamespace("future", 
[13:21:06.435]                           quietly = TRUE)
[13:21:06.435]                         if (has_future) {
[13:21:06.435]                           ns <- base::getNamespace("future")
[13:21:06.435]                           version <- ns[[".package"]][["version"]]
[13:21:06.435]                           if (is.null(version)) 
[13:21:06.435]                             version <- utils::packageVersion("future")
[13:21:06.435]                         }
[13:21:06.435]                         else {
[13:21:06.435]                           version <- NULL
[13:21:06.435]                         }
[13:21:06.435]                         if (!has_future || version < "1.8.0") {
[13:21:06.435]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.435]                             "", base::R.version$version.string), 
[13:21:06.435]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.435]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.435]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.435]                               "release", "version")], collapse = " "), 
[13:21:06.435]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.435]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.435]                             info)
[13:21:06.435]                           info <- base::paste(info, collapse = "; ")
[13:21:06.435]                           if (!has_future) {
[13:21:06.435]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.435]                               info)
[13:21:06.435]                           }
[13:21:06.435]                           else {
[13:21:06.435]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.435]                               info, version)
[13:21:06.435]                           }
[13:21:06.435]                           base::stop(msg)
[13:21:06.435]                         }
[13:21:06.435]                       })
[13:21:06.435]                     }
[13:21:06.435]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.435]                     base::options(mc.cores = 1L)
[13:21:06.435]                   }
[13:21:06.435]                   options(future.plan = NULL)
[13:21:06.435]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.435]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.435]                 }
[13:21:06.435]                 ...future.workdir <- getwd()
[13:21:06.435]             }
[13:21:06.435]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.435]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.435]         }
[13:21:06.435]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.435]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.435]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.435]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.435]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.435]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.435]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.435]             base::names(...future.oldOptions))
[13:21:06.435]     }
[13:21:06.435]     if (FALSE) {
[13:21:06.435]     }
[13:21:06.435]     else {
[13:21:06.435]         if (TRUE) {
[13:21:06.435]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.435]                 open = "w")
[13:21:06.435]         }
[13:21:06.435]         else {
[13:21:06.435]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.435]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.435]         }
[13:21:06.435]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.435]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.435]             base::sink(type = "output", split = FALSE)
[13:21:06.435]             base::close(...future.stdout)
[13:21:06.435]         }, add = TRUE)
[13:21:06.435]     }
[13:21:06.435]     ...future.frame <- base::sys.nframe()
[13:21:06.435]     ...future.conditions <- base::list()
[13:21:06.435]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.435]     if (FALSE) {
[13:21:06.435]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.435]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.435]     }
[13:21:06.435]     ...future.result <- base::tryCatch({
[13:21:06.435]         base::withCallingHandlers({
[13:21:06.435]             ...future.value <- base::withVisible(base::local({
[13:21:06.435]                 ...future.makeSendCondition <- local({
[13:21:06.435]                   sendCondition <- NULL
[13:21:06.435]                   function(frame = 1L) {
[13:21:06.435]                     if (is.function(sendCondition)) 
[13:21:06.435]                       return(sendCondition)
[13:21:06.435]                     ns <- getNamespace("parallel")
[13:21:06.435]                     if (exists("sendData", mode = "function", 
[13:21:06.435]                       envir = ns)) {
[13:21:06.435]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:06.435]                         envir = ns)
[13:21:06.435]                       envir <- sys.frame(frame)
[13:21:06.435]                       master <- NULL
[13:21:06.435]                       while (!identical(envir, .GlobalEnv) && 
[13:21:06.435]                         !identical(envir, emptyenv())) {
[13:21:06.435]                         if (exists("master", mode = "list", envir = envir, 
[13:21:06.435]                           inherits = FALSE)) {
[13:21:06.435]                           master <- get("master", mode = "list", 
[13:21:06.435]                             envir = envir, inherits = FALSE)
[13:21:06.435]                           if (inherits(master, c("SOCKnode", 
[13:21:06.435]                             "SOCK0node"))) {
[13:21:06.435]                             sendCondition <<- function(cond) {
[13:21:06.435]                               data <- list(type = "VALUE", value = cond, 
[13:21:06.435]                                 success = TRUE)
[13:21:06.435]                               parallel_sendData(master, data)
[13:21:06.435]                             }
[13:21:06.435]                             return(sendCondition)
[13:21:06.435]                           }
[13:21:06.435]                         }
[13:21:06.435]                         frame <- frame + 1L
[13:21:06.435]                         envir <- sys.frame(frame)
[13:21:06.435]                       }
[13:21:06.435]                     }
[13:21:06.435]                     sendCondition <<- function(cond) NULL
[13:21:06.435]                   }
[13:21:06.435]                 })
[13:21:06.435]                 withCallingHandlers({
[13:21:06.435]                   {
[13:21:06.435]                     gc()
[13:21:06.435]                   }
[13:21:06.435]                 }, immediateCondition = function(cond) {
[13:21:06.435]                   sendCondition <- ...future.makeSendCondition()
[13:21:06.435]                   sendCondition(cond)
[13:21:06.435]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.435]                   {
[13:21:06.435]                     inherits <- base::inherits
[13:21:06.435]                     invokeRestart <- base::invokeRestart
[13:21:06.435]                     is.null <- base::is.null
[13:21:06.435]                     muffled <- FALSE
[13:21:06.435]                     if (inherits(cond, "message")) {
[13:21:06.435]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.435]                       if (muffled) 
[13:21:06.435]                         invokeRestart("muffleMessage")
[13:21:06.435]                     }
[13:21:06.435]                     else if (inherits(cond, "warning")) {
[13:21:06.435]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.435]                       if (muffled) 
[13:21:06.435]                         invokeRestart("muffleWarning")
[13:21:06.435]                     }
[13:21:06.435]                     else if (inherits(cond, "condition")) {
[13:21:06.435]                       if (!is.null(pattern)) {
[13:21:06.435]                         computeRestarts <- base::computeRestarts
[13:21:06.435]                         grepl <- base::grepl
[13:21:06.435]                         restarts <- computeRestarts(cond)
[13:21:06.435]                         for (restart in restarts) {
[13:21:06.435]                           name <- restart$name
[13:21:06.435]                           if (is.null(name)) 
[13:21:06.435]                             next
[13:21:06.435]                           if (!grepl(pattern, name)) 
[13:21:06.435]                             next
[13:21:06.435]                           invokeRestart(restart)
[13:21:06.435]                           muffled <- TRUE
[13:21:06.435]                           break
[13:21:06.435]                         }
[13:21:06.435]                       }
[13:21:06.435]                     }
[13:21:06.435]                     invisible(muffled)
[13:21:06.435]                   }
[13:21:06.435]                   muffleCondition(cond)
[13:21:06.435]                 })
[13:21:06.435]             }))
[13:21:06.435]             future::FutureResult(value = ...future.value$value, 
[13:21:06.435]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.435]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.435]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.435]                     ...future.globalenv.names))
[13:21:06.435]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.435]         }, condition = base::local({
[13:21:06.435]             c <- base::c
[13:21:06.435]             inherits <- base::inherits
[13:21:06.435]             invokeRestart <- base::invokeRestart
[13:21:06.435]             length <- base::length
[13:21:06.435]             list <- base::list
[13:21:06.435]             seq.int <- base::seq.int
[13:21:06.435]             signalCondition <- base::signalCondition
[13:21:06.435]             sys.calls <- base::sys.calls
[13:21:06.435]             `[[` <- base::`[[`
[13:21:06.435]             `+` <- base::`+`
[13:21:06.435]             `<<-` <- base::`<<-`
[13:21:06.435]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.435]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.435]                   3L)]
[13:21:06.435]             }
[13:21:06.435]             function(cond) {
[13:21:06.435]                 is_error <- inherits(cond, "error")
[13:21:06.435]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.435]                   NULL)
[13:21:06.435]                 if (is_error) {
[13:21:06.435]                   sessionInformation <- function() {
[13:21:06.435]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.435]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.435]                       search = base::search(), system = base::Sys.info())
[13:21:06.435]                   }
[13:21:06.435]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.435]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.435]                     cond$call), session = sessionInformation(), 
[13:21:06.435]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.435]                   signalCondition(cond)
[13:21:06.435]                 }
[13:21:06.435]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.435]                 "immediateCondition"))) {
[13:21:06.435]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.435]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.435]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.435]                   if (TRUE && !signal) {
[13:21:06.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.435]                     {
[13:21:06.435]                       inherits <- base::inherits
[13:21:06.435]                       invokeRestart <- base::invokeRestart
[13:21:06.435]                       is.null <- base::is.null
[13:21:06.435]                       muffled <- FALSE
[13:21:06.435]                       if (inherits(cond, "message")) {
[13:21:06.435]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.435]                         if (muffled) 
[13:21:06.435]                           invokeRestart("muffleMessage")
[13:21:06.435]                       }
[13:21:06.435]                       else if (inherits(cond, "warning")) {
[13:21:06.435]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.435]                         if (muffled) 
[13:21:06.435]                           invokeRestart("muffleWarning")
[13:21:06.435]                       }
[13:21:06.435]                       else if (inherits(cond, "condition")) {
[13:21:06.435]                         if (!is.null(pattern)) {
[13:21:06.435]                           computeRestarts <- base::computeRestarts
[13:21:06.435]                           grepl <- base::grepl
[13:21:06.435]                           restarts <- computeRestarts(cond)
[13:21:06.435]                           for (restart in restarts) {
[13:21:06.435]                             name <- restart$name
[13:21:06.435]                             if (is.null(name)) 
[13:21:06.435]                               next
[13:21:06.435]                             if (!grepl(pattern, name)) 
[13:21:06.435]                               next
[13:21:06.435]                             invokeRestart(restart)
[13:21:06.435]                             muffled <- TRUE
[13:21:06.435]                             break
[13:21:06.435]                           }
[13:21:06.435]                         }
[13:21:06.435]                       }
[13:21:06.435]                       invisible(muffled)
[13:21:06.435]                     }
[13:21:06.435]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.435]                   }
[13:21:06.435]                 }
[13:21:06.435]                 else {
[13:21:06.435]                   if (TRUE) {
[13:21:06.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.435]                     {
[13:21:06.435]                       inherits <- base::inherits
[13:21:06.435]                       invokeRestart <- base::invokeRestart
[13:21:06.435]                       is.null <- base::is.null
[13:21:06.435]                       muffled <- FALSE
[13:21:06.435]                       if (inherits(cond, "message")) {
[13:21:06.435]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.435]                         if (muffled) 
[13:21:06.435]                           invokeRestart("muffleMessage")
[13:21:06.435]                       }
[13:21:06.435]                       else if (inherits(cond, "warning")) {
[13:21:06.435]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.435]                         if (muffled) 
[13:21:06.435]                           invokeRestart("muffleWarning")
[13:21:06.435]                       }
[13:21:06.435]                       else if (inherits(cond, "condition")) {
[13:21:06.435]                         if (!is.null(pattern)) {
[13:21:06.435]                           computeRestarts <- base::computeRestarts
[13:21:06.435]                           grepl <- base::grepl
[13:21:06.435]                           restarts <- computeRestarts(cond)
[13:21:06.435]                           for (restart in restarts) {
[13:21:06.435]                             name <- restart$name
[13:21:06.435]                             if (is.null(name)) 
[13:21:06.435]                               next
[13:21:06.435]                             if (!grepl(pattern, name)) 
[13:21:06.435]                               next
[13:21:06.435]                             invokeRestart(restart)
[13:21:06.435]                             muffled <- TRUE
[13:21:06.435]                             break
[13:21:06.435]                           }
[13:21:06.435]                         }
[13:21:06.435]                       }
[13:21:06.435]                       invisible(muffled)
[13:21:06.435]                     }
[13:21:06.435]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.435]                   }
[13:21:06.435]                 }
[13:21:06.435]             }
[13:21:06.435]         }))
[13:21:06.435]     }, error = function(ex) {
[13:21:06.435]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.435]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.435]                 ...future.rng), started = ...future.startTime, 
[13:21:06.435]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.435]             version = "1.8"), class = "FutureResult")
[13:21:06.435]     }, finally = {
[13:21:06.435]         if (!identical(...future.workdir, getwd())) 
[13:21:06.435]             setwd(...future.workdir)
[13:21:06.435]         {
[13:21:06.435]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.435]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.435]             }
[13:21:06.435]             base::options(...future.oldOptions)
[13:21:06.435]             if (.Platform$OS.type == "windows") {
[13:21:06.435]                 old_names <- names(...future.oldEnvVars)
[13:21:06.435]                 envs <- base::Sys.getenv()
[13:21:06.435]                 names <- names(envs)
[13:21:06.435]                 common <- intersect(names, old_names)
[13:21:06.435]                 added <- setdiff(names, old_names)
[13:21:06.435]                 removed <- setdiff(old_names, names)
[13:21:06.435]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.435]                   envs[common]]
[13:21:06.435]                 NAMES <- toupper(changed)
[13:21:06.435]                 args <- list()
[13:21:06.435]                 for (kk in seq_along(NAMES)) {
[13:21:06.435]                   name <- changed[[kk]]
[13:21:06.435]                   NAME <- NAMES[[kk]]
[13:21:06.435]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.435]                     next
[13:21:06.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.435]                 }
[13:21:06.435]                 NAMES <- toupper(added)
[13:21:06.435]                 for (kk in seq_along(NAMES)) {
[13:21:06.435]                   name <- added[[kk]]
[13:21:06.435]                   NAME <- NAMES[[kk]]
[13:21:06.435]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.435]                     next
[13:21:06.435]                   args[[name]] <- ""
[13:21:06.435]                 }
[13:21:06.435]                 NAMES <- toupper(removed)
[13:21:06.435]                 for (kk in seq_along(NAMES)) {
[13:21:06.435]                   name <- removed[[kk]]
[13:21:06.435]                   NAME <- NAMES[[kk]]
[13:21:06.435]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.435]                     next
[13:21:06.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.435]                 }
[13:21:06.435]                 if (length(args) > 0) 
[13:21:06.435]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.435]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.435]             }
[13:21:06.435]             else {
[13:21:06.435]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.435]             }
[13:21:06.435]             {
[13:21:06.435]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.435]                   0L) {
[13:21:06.435]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.435]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.435]                   base::options(opts)
[13:21:06.435]                 }
[13:21:06.435]                 {
[13:21:06.435]                   {
[13:21:06.435]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.435]                     NULL
[13:21:06.435]                   }
[13:21:06.435]                   options(future.plan = NULL)
[13:21:06.435]                   if (is.na(NA_character_)) 
[13:21:06.435]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.435]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.435]                   future::plan(list(function (..., workers = 2L, 
[13:21:06.435]                     envir = parent.frame()) 
[13:21:06.435]                   strategy(..., workers = workers, envir = envir)), 
[13:21:06.435]                     .cleanup = FALSE, .init = FALSE)
[13:21:06.435]                 }
[13:21:06.435]             }
[13:21:06.435]         }
[13:21:06.435]     })
[13:21:06.435]     if (TRUE) {
[13:21:06.435]         base::sink(type = "output", split = FALSE)
[13:21:06.435]         if (TRUE) {
[13:21:06.435]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.435]         }
[13:21:06.435]         else {
[13:21:06.435]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.435]         }
[13:21:06.435]         base::close(...future.stdout)
[13:21:06.435]         ...future.stdout <- NULL
[13:21:06.435]     }
[13:21:06.435]     ...future.result$conditions <- ...future.conditions
[13:21:06.435]     ...future.result$finished <- base::Sys.time()
[13:21:06.435]     ...future.result
[13:21:06.435] }
[13:21:06.438] MultisessionFuture started
[13:21:06.438] - Launch lazy future ... done
[13:21:06.438] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[13:21:06.438] result() for ClusterFuture ...
[13:21:06.439] receiveMessageFromWorker() for ClusterFuture ...
[13:21:06.439] - Validating connection of MultisessionFuture
[13:21:06.505] - received message: FutureResult
[13:21:06.506] - Received FutureResult
[13:21:06.506] - Erased future from FutureRegistry
[13:21:06.506] result() for ClusterFuture ...
[13:21:06.506] - result already collected: FutureResult
[13:21:06.506] result() for ClusterFuture ... done
[13:21:06.506] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:06.506] result() for ClusterFuture ... done
[13:21:06.506] result() for ClusterFuture ...
[13:21:06.507] - result already collected: FutureResult
[13:21:06.507] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 395340 21.2     836944  44.7   664120  35.5
Vcells 705085  5.4   13458040 102.7 15781491 120.5
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[13:21:06.507] plan(): Setting new future strategy stack:
[13:21:06.507] List of future strategies:
[13:21:06.507] 1. multisession:
[13:21:06.507]    - args: function (..., workers = 2L, envir = parent.frame())
[13:21:06.507]    - tweaked: TRUE
[13:21:06.507]    - call: plan(multisession, workers = 2L)
[13:21:06.508] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:21:06.508] multisession:
[13:21:06.508] - args: function (..., workers = 2L, envir = parent.frame())
[13:21:06.508] - tweaked: TRUE
[13:21:06.508] - call: plan(multisession, workers = 2L)
[13:21:06.509] getGlobalsAndPackages() ...
[13:21:06.509] Not searching for globals
[13:21:06.509] - globals: [0] <none>
[13:21:06.509] getGlobalsAndPackages() ... DONE
[13:21:06.510] [local output] makeClusterPSOCK() ...
[13:21:06.510] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:21:06.511] [local output] Base port: 11507
[13:21:06.511] [local output] Getting setup options for 2 cluster nodes ...
[13:21:06.511] [local output]  - Node 1 of 2 ...
[13:21:06.512] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:06.513] [local output] Rscript port: 11507

[13:21:06.513] [local output]  - Node 2 of 2 ...
[13:21:06.514] [local output] localMachine=TRUE => revtunnel=FALSE

[13:21:06.514] [local output] Rscript port: 11507

[13:21:06.515] [local output] Getting setup options for 2 cluster nodes ... done
[13:21:06.515] [local output]  - Parallel setup requested for some PSOCK nodes
[13:21:06.515] [local output] Setting up PSOCK nodes in parallel
[13:21:06.515] List of 36
[13:21:06.515]  $ worker          : chr "localhost"
[13:21:06.515]   ..- attr(*, "localhost")= logi TRUE
[13:21:06.515]  $ master          : chr "localhost"
[13:21:06.515]  $ port            : int 11507
[13:21:06.515]  $ connectTimeout  : num 120
[13:21:06.515]  $ timeout         : num 2592000
[13:21:06.515]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:21:06.515]  $ homogeneous     : logi TRUE
[13:21:06.515]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:21:06.515]  $ rscript_envs    : NULL
[13:21:06.515]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:06.515]  $ rscript_startup : NULL
[13:21:06.515]  $ rscript_sh      : chr "sh"
[13:21:06.515]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:06.515]  $ methods         : logi TRUE
[13:21:06.515]  $ socketOptions   : chr "no-delay"
[13:21:06.515]  $ useXDR          : logi FALSE
[13:21:06.515]  $ outfile         : chr "/dev/null"
[13:21:06.515]  $ renice          : int NA
[13:21:06.515]  $ rshcmd          : NULL
[13:21:06.515]  $ user            : chr(0) 
[13:21:06.515]  $ revtunnel       : logi FALSE
[13:21:06.515]  $ rshlogfile      : NULL
[13:21:06.515]  $ rshopts         : chr(0) 
[13:21:06.515]  $ rank            : int 1
[13:21:06.515]  $ manual          : logi FALSE
[13:21:06.515]  $ dryrun          : logi FALSE
[13:21:06.515]  $ quiet           : logi FALSE
[13:21:06.515]  $ setup_strategy  : chr "parallel"
[13:21:06.515]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:06.515]  $ pidfile         : chr "/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df71f7df1c.pid"
[13:21:06.515]  $ rshcmd_label    : NULL
[13:21:06.515]  $ rsh_call        : NULL
[13:21:06.515]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:21:06.515]  $ localMachine    : logi TRUE
[13:21:06.515]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:21:06.515]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:21:06.515]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:21:06.515]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:21:06.515]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:21:06.515]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:21:06.515]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:21:06.515]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:21:06.515]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:21:06.515]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:21:06.515]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:21:06.515]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:21:06.515]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:21:06.515]  $ arguments       :List of 28
[13:21:06.515]   ..$ worker          : chr "localhost"
[13:21:06.515]   ..$ master          : NULL
[13:21:06.515]   ..$ port            : int 11507
[13:21:06.515]   ..$ connectTimeout  : num 120
[13:21:06.515]   ..$ timeout         : num 2592000
[13:21:06.515]   ..$ rscript         : NULL
[13:21:06.515]   ..$ homogeneous     : NULL
[13:21:06.515]   ..$ rscript_args    : NULL
[13:21:06.515]   ..$ rscript_envs    : NULL
[13:21:06.515]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:21:06.515]   ..$ rscript_startup : NULL
[13:21:06.515]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:21:06.515]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:21:06.515]   ..$ methods         : logi TRUE
[13:21:06.515]   ..$ socketOptions   : chr "no-delay"
[13:21:06.515]   ..$ useXDR          : logi FALSE
[13:21:06.515]   ..$ outfile         : chr "/dev/null"
[13:21:06.515]   ..$ renice          : int NA
[13:21:06.515]   ..$ rshcmd          : NULL
[13:21:06.515]   ..$ user            : NULL
[13:21:06.515]   ..$ revtunnel       : logi NA
[13:21:06.515]   ..$ rshlogfile      : NULL
[13:21:06.515]   ..$ rshopts         : NULL
[13:21:06.515]   ..$ rank            : int 1
[13:21:06.515]   ..$ manual          : logi FALSE
[13:21:06.515]   ..$ dryrun          : logi FALSE
[13:21:06.515]   ..$ quiet           : logi FALSE
[13:21:06.515]   ..$ setup_strategy  : chr "parallel"
[13:21:06.515]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:21:06.534] [local output] System call to launch all workers:
[13:21:06.534] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDSozLZ/worker.rank=1.parallelly.parent=88287.158df71f7df1c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11507 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:21:06.535] [local output] Starting PSOCK main server
[13:21:06.536] [local output] Workers launched
[13:21:06.536] [local output] Waiting for workers to connect back
[13:21:06.536]  - [local output] 0 workers out of 2 ready
[13:21:06.776]  - [local output] 0 workers out of 2 ready
[13:21:06.777]  - [local output] 1 workers out of 2 ready
[13:21:06.787]  - [local output] 1 workers out of 2 ready
[13:21:06.787]  - [local output] 2 workers out of 2 ready
[13:21:06.787] [local output] Launching of workers completed
[13:21:06.787] [local output] Collecting session information from workers
[13:21:06.788] [local output]  - Worker #1 of 2
[13:21:06.788] [local output]  - Worker #2 of 2
[13:21:06.789] [local output] makeClusterPSOCK() ... done
[13:21:06.800] Packages needed by the future expression (n = 0): <none>
[13:21:06.800] Packages needed by future strategies (n = 0): <none>
[13:21:06.800] {
[13:21:06.800]     {
[13:21:06.800]         {
[13:21:06.800]             ...future.startTime <- base::Sys.time()
[13:21:06.800]             {
[13:21:06.800]                 {
[13:21:06.800]                   {
[13:21:06.800]                     {
[13:21:06.800]                       base::local({
[13:21:06.800]                         has_future <- base::requireNamespace("future", 
[13:21:06.800]                           quietly = TRUE)
[13:21:06.800]                         if (has_future) {
[13:21:06.800]                           ns <- base::getNamespace("future")
[13:21:06.800]                           version <- ns[[".package"]][["version"]]
[13:21:06.800]                           if (is.null(version)) 
[13:21:06.800]                             version <- utils::packageVersion("future")
[13:21:06.800]                         }
[13:21:06.800]                         else {
[13:21:06.800]                           version <- NULL
[13:21:06.800]                         }
[13:21:06.800]                         if (!has_future || version < "1.8.0") {
[13:21:06.800]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.800]                             "", base::R.version$version.string), 
[13:21:06.800]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.800]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.800]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.800]                               "release", "version")], collapse = " "), 
[13:21:06.800]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.800]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.800]                             info)
[13:21:06.800]                           info <- base::paste(info, collapse = "; ")
[13:21:06.800]                           if (!has_future) {
[13:21:06.800]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.800]                               info)
[13:21:06.800]                           }
[13:21:06.800]                           else {
[13:21:06.800]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.800]                               info, version)
[13:21:06.800]                           }
[13:21:06.800]                           base::stop(msg)
[13:21:06.800]                         }
[13:21:06.800]                       })
[13:21:06.800]                     }
[13:21:06.800]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.800]                     base::options(mc.cores = 1L)
[13:21:06.800]                   }
[13:21:06.800]                   options(future.plan = NULL)
[13:21:06.800]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.800]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.800]                 }
[13:21:06.800]                 ...future.workdir <- getwd()
[13:21:06.800]             }
[13:21:06.800]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.800]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.800]         }
[13:21:06.800]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.800]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.800]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.800]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.800]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.800]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.800]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.800]             base::names(...future.oldOptions))
[13:21:06.800]     }
[13:21:06.800]     if (FALSE) {
[13:21:06.800]     }
[13:21:06.800]     else {
[13:21:06.800]         if (TRUE) {
[13:21:06.800]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.800]                 open = "w")
[13:21:06.800]         }
[13:21:06.800]         else {
[13:21:06.800]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.800]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.800]         }
[13:21:06.800]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.800]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.800]             base::sink(type = "output", split = FALSE)
[13:21:06.800]             base::close(...future.stdout)
[13:21:06.800]         }, add = TRUE)
[13:21:06.800]     }
[13:21:06.800]     ...future.frame <- base::sys.nframe()
[13:21:06.800]     ...future.conditions <- base::list()
[13:21:06.800]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.800]     if (FALSE) {
[13:21:06.800]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.800]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.800]     }
[13:21:06.800]     ...future.result <- base::tryCatch({
[13:21:06.800]         base::withCallingHandlers({
[13:21:06.800]             ...future.value <- base::withVisible(base::local({
[13:21:06.800]                 ...future.makeSendCondition <- local({
[13:21:06.800]                   sendCondition <- NULL
[13:21:06.800]                   function(frame = 1L) {
[13:21:06.800]                     if (is.function(sendCondition)) 
[13:21:06.800]                       return(sendCondition)
[13:21:06.800]                     ns <- getNamespace("parallel")
[13:21:06.800]                     if (exists("sendData", mode = "function", 
[13:21:06.800]                       envir = ns)) {
[13:21:06.800]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:06.800]                         envir = ns)
[13:21:06.800]                       envir <- sys.frame(frame)
[13:21:06.800]                       master <- NULL
[13:21:06.800]                       while (!identical(envir, .GlobalEnv) && 
[13:21:06.800]                         !identical(envir, emptyenv())) {
[13:21:06.800]                         if (exists("master", mode = "list", envir = envir, 
[13:21:06.800]                           inherits = FALSE)) {
[13:21:06.800]                           master <- get("master", mode = "list", 
[13:21:06.800]                             envir = envir, inherits = FALSE)
[13:21:06.800]                           if (inherits(master, c("SOCKnode", 
[13:21:06.800]                             "SOCK0node"))) {
[13:21:06.800]                             sendCondition <<- function(cond) {
[13:21:06.800]                               data <- list(type = "VALUE", value = cond, 
[13:21:06.800]                                 success = TRUE)
[13:21:06.800]                               parallel_sendData(master, data)
[13:21:06.800]                             }
[13:21:06.800]                             return(sendCondition)
[13:21:06.800]                           }
[13:21:06.800]                         }
[13:21:06.800]                         frame <- frame + 1L
[13:21:06.800]                         envir <- sys.frame(frame)
[13:21:06.800]                       }
[13:21:06.800]                     }
[13:21:06.800]                     sendCondition <<- function(cond) NULL
[13:21:06.800]                   }
[13:21:06.800]                 })
[13:21:06.800]                 withCallingHandlers({
[13:21:06.800]                   NA
[13:21:06.800]                 }, immediateCondition = function(cond) {
[13:21:06.800]                   sendCondition <- ...future.makeSendCondition()
[13:21:06.800]                   sendCondition(cond)
[13:21:06.800]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.800]                   {
[13:21:06.800]                     inherits <- base::inherits
[13:21:06.800]                     invokeRestart <- base::invokeRestart
[13:21:06.800]                     is.null <- base::is.null
[13:21:06.800]                     muffled <- FALSE
[13:21:06.800]                     if (inherits(cond, "message")) {
[13:21:06.800]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.800]                       if (muffled) 
[13:21:06.800]                         invokeRestart("muffleMessage")
[13:21:06.800]                     }
[13:21:06.800]                     else if (inherits(cond, "warning")) {
[13:21:06.800]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.800]                       if (muffled) 
[13:21:06.800]                         invokeRestart("muffleWarning")
[13:21:06.800]                     }
[13:21:06.800]                     else if (inherits(cond, "condition")) {
[13:21:06.800]                       if (!is.null(pattern)) {
[13:21:06.800]                         computeRestarts <- base::computeRestarts
[13:21:06.800]                         grepl <- base::grepl
[13:21:06.800]                         restarts <- computeRestarts(cond)
[13:21:06.800]                         for (restart in restarts) {
[13:21:06.800]                           name <- restart$name
[13:21:06.800]                           if (is.null(name)) 
[13:21:06.800]                             next
[13:21:06.800]                           if (!grepl(pattern, name)) 
[13:21:06.800]                             next
[13:21:06.800]                           invokeRestart(restart)
[13:21:06.800]                           muffled <- TRUE
[13:21:06.800]                           break
[13:21:06.800]                         }
[13:21:06.800]                       }
[13:21:06.800]                     }
[13:21:06.800]                     invisible(muffled)
[13:21:06.800]                   }
[13:21:06.800]                   muffleCondition(cond)
[13:21:06.800]                 })
[13:21:06.800]             }))
[13:21:06.800]             future::FutureResult(value = ...future.value$value, 
[13:21:06.800]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.800]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.800]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.800]                     ...future.globalenv.names))
[13:21:06.800]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.800]         }, condition = base::local({
[13:21:06.800]             c <- base::c
[13:21:06.800]             inherits <- base::inherits
[13:21:06.800]             invokeRestart <- base::invokeRestart
[13:21:06.800]             length <- base::length
[13:21:06.800]             list <- base::list
[13:21:06.800]             seq.int <- base::seq.int
[13:21:06.800]             signalCondition <- base::signalCondition
[13:21:06.800]             sys.calls <- base::sys.calls
[13:21:06.800]             `[[` <- base::`[[`
[13:21:06.800]             `+` <- base::`+`
[13:21:06.800]             `<<-` <- base::`<<-`
[13:21:06.800]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.800]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.800]                   3L)]
[13:21:06.800]             }
[13:21:06.800]             function(cond) {
[13:21:06.800]                 is_error <- inherits(cond, "error")
[13:21:06.800]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.800]                   NULL)
[13:21:06.800]                 if (is_error) {
[13:21:06.800]                   sessionInformation <- function() {
[13:21:06.800]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.800]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.800]                       search = base::search(), system = base::Sys.info())
[13:21:06.800]                   }
[13:21:06.800]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.800]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.800]                     cond$call), session = sessionInformation(), 
[13:21:06.800]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.800]                   signalCondition(cond)
[13:21:06.800]                 }
[13:21:06.800]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.800]                 "immediateCondition"))) {
[13:21:06.800]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.800]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.800]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.800]                   if (TRUE && !signal) {
[13:21:06.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.800]                     {
[13:21:06.800]                       inherits <- base::inherits
[13:21:06.800]                       invokeRestart <- base::invokeRestart
[13:21:06.800]                       is.null <- base::is.null
[13:21:06.800]                       muffled <- FALSE
[13:21:06.800]                       if (inherits(cond, "message")) {
[13:21:06.800]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.800]                         if (muffled) 
[13:21:06.800]                           invokeRestart("muffleMessage")
[13:21:06.800]                       }
[13:21:06.800]                       else if (inherits(cond, "warning")) {
[13:21:06.800]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.800]                         if (muffled) 
[13:21:06.800]                           invokeRestart("muffleWarning")
[13:21:06.800]                       }
[13:21:06.800]                       else if (inherits(cond, "condition")) {
[13:21:06.800]                         if (!is.null(pattern)) {
[13:21:06.800]                           computeRestarts <- base::computeRestarts
[13:21:06.800]                           grepl <- base::grepl
[13:21:06.800]                           restarts <- computeRestarts(cond)
[13:21:06.800]                           for (restart in restarts) {
[13:21:06.800]                             name <- restart$name
[13:21:06.800]                             if (is.null(name)) 
[13:21:06.800]                               next
[13:21:06.800]                             if (!grepl(pattern, name)) 
[13:21:06.800]                               next
[13:21:06.800]                             invokeRestart(restart)
[13:21:06.800]                             muffled <- TRUE
[13:21:06.800]                             break
[13:21:06.800]                           }
[13:21:06.800]                         }
[13:21:06.800]                       }
[13:21:06.800]                       invisible(muffled)
[13:21:06.800]                     }
[13:21:06.800]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.800]                   }
[13:21:06.800]                 }
[13:21:06.800]                 else {
[13:21:06.800]                   if (TRUE) {
[13:21:06.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.800]                     {
[13:21:06.800]                       inherits <- base::inherits
[13:21:06.800]                       invokeRestart <- base::invokeRestart
[13:21:06.800]                       is.null <- base::is.null
[13:21:06.800]                       muffled <- FALSE
[13:21:06.800]                       if (inherits(cond, "message")) {
[13:21:06.800]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.800]                         if (muffled) 
[13:21:06.800]                           invokeRestart("muffleMessage")
[13:21:06.800]                       }
[13:21:06.800]                       else if (inherits(cond, "warning")) {
[13:21:06.800]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.800]                         if (muffled) 
[13:21:06.800]                           invokeRestart("muffleWarning")
[13:21:06.800]                       }
[13:21:06.800]                       else if (inherits(cond, "condition")) {
[13:21:06.800]                         if (!is.null(pattern)) {
[13:21:06.800]                           computeRestarts <- base::computeRestarts
[13:21:06.800]                           grepl <- base::grepl
[13:21:06.800]                           restarts <- computeRestarts(cond)
[13:21:06.800]                           for (restart in restarts) {
[13:21:06.800]                             name <- restart$name
[13:21:06.800]                             if (is.null(name)) 
[13:21:06.800]                               next
[13:21:06.800]                             if (!grepl(pattern, name)) 
[13:21:06.800]                               next
[13:21:06.800]                             invokeRestart(restart)
[13:21:06.800]                             muffled <- TRUE
[13:21:06.800]                             break
[13:21:06.800]                           }
[13:21:06.800]                         }
[13:21:06.800]                       }
[13:21:06.800]                       invisible(muffled)
[13:21:06.800]                     }
[13:21:06.800]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.800]                   }
[13:21:06.800]                 }
[13:21:06.800]             }
[13:21:06.800]         }))
[13:21:06.800]     }, error = function(ex) {
[13:21:06.800]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.800]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.800]                 ...future.rng), started = ...future.startTime, 
[13:21:06.800]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.800]             version = "1.8"), class = "FutureResult")
[13:21:06.800]     }, finally = {
[13:21:06.800]         if (!identical(...future.workdir, getwd())) 
[13:21:06.800]             setwd(...future.workdir)
[13:21:06.800]         {
[13:21:06.800]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.800]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.800]             }
[13:21:06.800]             base::options(...future.oldOptions)
[13:21:06.800]             if (.Platform$OS.type == "windows") {
[13:21:06.800]                 old_names <- names(...future.oldEnvVars)
[13:21:06.800]                 envs <- base::Sys.getenv()
[13:21:06.800]                 names <- names(envs)
[13:21:06.800]                 common <- intersect(names, old_names)
[13:21:06.800]                 added <- setdiff(names, old_names)
[13:21:06.800]                 removed <- setdiff(old_names, names)
[13:21:06.800]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.800]                   envs[common]]
[13:21:06.800]                 NAMES <- toupper(changed)
[13:21:06.800]                 args <- list()
[13:21:06.800]                 for (kk in seq_along(NAMES)) {
[13:21:06.800]                   name <- changed[[kk]]
[13:21:06.800]                   NAME <- NAMES[[kk]]
[13:21:06.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.800]                     next
[13:21:06.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.800]                 }
[13:21:06.800]                 NAMES <- toupper(added)
[13:21:06.800]                 for (kk in seq_along(NAMES)) {
[13:21:06.800]                   name <- added[[kk]]
[13:21:06.800]                   NAME <- NAMES[[kk]]
[13:21:06.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.800]                     next
[13:21:06.800]                   args[[name]] <- ""
[13:21:06.800]                 }
[13:21:06.800]                 NAMES <- toupper(removed)
[13:21:06.800]                 for (kk in seq_along(NAMES)) {
[13:21:06.800]                   name <- removed[[kk]]
[13:21:06.800]                   NAME <- NAMES[[kk]]
[13:21:06.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.800]                     next
[13:21:06.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.800]                 }
[13:21:06.800]                 if (length(args) > 0) 
[13:21:06.800]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.800]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.800]             }
[13:21:06.800]             else {
[13:21:06.800]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.800]             }
[13:21:06.800]             {
[13:21:06.800]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.800]                   0L) {
[13:21:06.800]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.800]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.800]                   base::options(opts)
[13:21:06.800]                 }
[13:21:06.800]                 {
[13:21:06.800]                   {
[13:21:06.800]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.800]                     NULL
[13:21:06.800]                   }
[13:21:06.800]                   options(future.plan = NULL)
[13:21:06.800]                   if (is.na(NA_character_)) 
[13:21:06.800]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.800]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.800]                   future::plan(list(function (..., workers = 2L, 
[13:21:06.800]                     envir = parent.frame()) 
[13:21:06.800]                   strategy(..., workers = workers, envir = envir)), 
[13:21:06.800]                     .cleanup = FALSE, .init = FALSE)
[13:21:06.800]                 }
[13:21:06.800]             }
[13:21:06.800]         }
[13:21:06.800]     })
[13:21:06.800]     if (TRUE) {
[13:21:06.800]         base::sink(type = "output", split = FALSE)
[13:21:06.800]         if (TRUE) {
[13:21:06.800]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.800]         }
[13:21:06.800]         else {
[13:21:06.800]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.800]         }
[13:21:06.800]         base::close(...future.stdout)
[13:21:06.800]         ...future.stdout <- NULL
[13:21:06.800]     }
[13:21:06.800]     ...future.result$conditions <- ...future.conditions
[13:21:06.800]     ...future.result$finished <- base::Sys.time()
[13:21:06.800]     ...future.result
[13:21:06.800] }
[13:21:06.872] MultisessionFuture started
[13:21:06.872] result() for ClusterFuture ...
[13:21:06.872] receiveMessageFromWorker() for ClusterFuture ...
[13:21:06.872] - Validating connection of MultisessionFuture
[13:21:06.897] - received message: FutureResult
[13:21:06.897] - Received FutureResult
[13:21:06.897] - Erased future from FutureRegistry
[13:21:06.898] result() for ClusterFuture ...
[13:21:06.898] - result already collected: FutureResult
[13:21:06.898] result() for ClusterFuture ... done
[13:21:06.898] receiveMessageFromWorker() for ClusterFuture ... done
[13:21:06.898] result() for ClusterFuture ... done
[13:21:06.898] result() for ClusterFuture ...
[13:21:06.898] - result already collected: FutureResult
[13:21:06.898] result() for ClusterFuture ... done
[13:21:06.898] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:21:06.899] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[13:21:06.899] getGlobalsAndPackages() ...
[13:21:06.899] Searching for globals...
[13:21:06.899] 
[13:21:06.899] Searching for globals ... DONE
[13:21:06.899] - globals: [0] <none>
[13:21:06.900] getGlobalsAndPackages() ... DONE
[13:21:06.900] run() for ‘Future’ ...
[13:21:06.900] - state: ‘created’
[13:21:06.900] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:21:06.911] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:21:06.911] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:21:06.911]   - Field: ‘node’
[13:21:06.911]   - Field: ‘label’
[13:21:06.912]   - Field: ‘local’
[13:21:06.912]   - Field: ‘owner’
[13:21:06.912]   - Field: ‘envir’
[13:21:06.912]   - Field: ‘workers’
[13:21:06.912]   - Field: ‘packages’
[13:21:06.912]   - Field: ‘gc’
[13:21:06.912]   - Field: ‘conditions’
[13:21:06.912]   - Field: ‘persistent’
[13:21:06.912]   - Field: ‘expr’
[13:21:06.912]   - Field: ‘uuid’
[13:21:06.912]   - Field: ‘seed’
[13:21:06.913]   - Field: ‘version’
[13:21:06.913]   - Field: ‘result’
[13:21:06.913]   - Field: ‘asynchronous’
[13:21:06.913]   - Field: ‘calls’
[13:21:06.913]   - Field: ‘globals’
[13:21:06.913]   - Field: ‘stdout’
[13:21:06.913]   - Field: ‘earlySignal’
[13:21:06.913]   - Field: ‘lazy’
[13:21:06.913]   - Field: ‘state’
[13:21:06.913] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:21:06.913] - Launch lazy future ...
[13:21:06.914] Packages needed by the future expression (n = 0): <none>
[13:21:06.914] Packages needed by future strategies (n = 0): <none>
[13:21:06.914] {
[13:21:06.914]     {
[13:21:06.914]         {
[13:21:06.914]             ...future.startTime <- base::Sys.time()
[13:21:06.914]             {
[13:21:06.914]                 {
[13:21:06.914]                   {
[13:21:06.914]                     {
[13:21:06.914]                       base::local({
[13:21:06.914]                         has_future <- base::requireNamespace("future", 
[13:21:06.914]                           quietly = TRUE)
[13:21:06.914]                         if (has_future) {
[13:21:06.914]                           ns <- base::getNamespace("future")
[13:21:06.914]                           version <- ns[[".package"]][["version"]]
[13:21:06.914]                           if (is.null(version)) 
[13:21:06.914]                             version <- utils::packageVersion("future")
[13:21:06.914]                         }
[13:21:06.914]                         else {
[13:21:06.914]                           version <- NULL
[13:21:06.914]                         }
[13:21:06.914]                         if (!has_future || version < "1.8.0") {
[13:21:06.914]                           info <- base::c(r_version = base::gsub("R version ", 
[13:21:06.914]                             "", base::R.version$version.string), 
[13:21:06.914]                             platform = base::sprintf("%s (%s-bit)", 
[13:21:06.914]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:21:06.914]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:21:06.914]                               "release", "version")], collapse = " "), 
[13:21:06.914]                             hostname = base::Sys.info()[["nodename"]])
[13:21:06.914]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:21:06.914]                             info)
[13:21:06.914]                           info <- base::paste(info, collapse = "; ")
[13:21:06.914]                           if (!has_future) {
[13:21:06.914]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:21:06.914]                               info)
[13:21:06.914]                           }
[13:21:06.914]                           else {
[13:21:06.914]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:21:06.914]                               info, version)
[13:21:06.914]                           }
[13:21:06.914]                           base::stop(msg)
[13:21:06.914]                         }
[13:21:06.914]                       })
[13:21:06.914]                     }
[13:21:06.914]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:21:06.914]                     base::options(mc.cores = 1L)
[13:21:06.914]                   }
[13:21:06.914]                   options(future.plan = NULL)
[13:21:06.914]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.914]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:21:06.914]                 }
[13:21:06.914]                 ...future.workdir <- getwd()
[13:21:06.914]             }
[13:21:06.914]             ...future.oldOptions <- base::as.list(base::.Options)
[13:21:06.914]             ...future.oldEnvVars <- base::Sys.getenv()
[13:21:06.914]         }
[13:21:06.914]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:21:06.914]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:21:06.914]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:21:06.914]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:21:06.914]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:21:06.914]             future.stdout.windows.reencode = NULL, width = 80L)
[13:21:06.914]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:21:06.914]             base::names(...future.oldOptions))
[13:21:06.914]     }
[13:21:06.914]     if (FALSE) {
[13:21:06.914]     }
[13:21:06.914]     else {
[13:21:06.914]         if (TRUE) {
[13:21:06.914]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:21:06.914]                 open = "w")
[13:21:06.914]         }
[13:21:06.914]         else {
[13:21:06.914]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:21:06.914]                 windows = "NUL", "/dev/null"), open = "w")
[13:21:06.914]         }
[13:21:06.914]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:21:06.914]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:21:06.914]             base::sink(type = "output", split = FALSE)
[13:21:06.914]             base::close(...future.stdout)
[13:21:06.914]         }, add = TRUE)
[13:21:06.914]     }
[13:21:06.914]     ...future.frame <- base::sys.nframe()
[13:21:06.914]     ...future.conditions <- base::list()
[13:21:06.914]     ...future.rng <- base::globalenv()$.Random.seed
[13:21:06.914]     if (FALSE) {
[13:21:06.914]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:21:06.914]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:21:06.914]     }
[13:21:06.914]     ...future.result <- base::tryCatch({
[13:21:06.914]         base::withCallingHandlers({
[13:21:06.914]             ...future.value <- base::withVisible(base::local({
[13:21:06.914]                 ...future.makeSendCondition <- local({
[13:21:06.914]                   sendCondition <- NULL
[13:21:06.914]                   function(frame = 1L) {
[13:21:06.914]                     if (is.function(sendCondition)) 
[13:21:06.914]                       return(sendCondition)
[13:21:06.914]                     ns <- getNamespace("parallel")
[13:21:06.914]                     if (exists("sendData", mode = "function", 
[13:21:06.914]                       envir = ns)) {
[13:21:06.914]                       parallel_sendData <- get("sendData", mode = "function", 
[13:21:06.914]                         envir = ns)
[13:21:06.914]                       envir <- sys.frame(frame)
[13:21:06.914]                       master <- NULL
[13:21:06.914]                       while (!identical(envir, .GlobalEnv) && 
[13:21:06.914]                         !identical(envir, emptyenv())) {
[13:21:06.914]                         if (exists("master", mode = "list", envir = envir, 
[13:21:06.914]                           inherits = FALSE)) {
[13:21:06.914]                           master <- get("master", mode = "list", 
[13:21:06.914]                             envir = envir, inherits = FALSE)
[13:21:06.914]                           if (inherits(master, c("SOCKnode", 
[13:21:06.914]                             "SOCK0node"))) {
[13:21:06.914]                             sendCondition <<- function(cond) {
[13:21:06.914]                               data <- list(type = "VALUE", value = cond, 
[13:21:06.914]                                 success = TRUE)
[13:21:06.914]                               parallel_sendData(master, data)
[13:21:06.914]                             }
[13:21:06.914]                             return(sendCondition)
[13:21:06.914]                           }
[13:21:06.914]                         }
[13:21:06.914]                         frame <- frame + 1L
[13:21:06.914]                         envir <- sys.frame(frame)
[13:21:06.914]                       }
[13:21:06.914]                     }
[13:21:06.914]                     sendCondition <<- function(cond) NULL
[13:21:06.914]                   }
[13:21:06.914]                 })
[13:21:06.914]                 withCallingHandlers({
[13:21:06.914]                   1L
[13:21:06.914]                 }, immediateCondition = function(cond) {
[13:21:06.914]                   sendCondition <- ...future.makeSendCondition()
[13:21:06.914]                   sendCondition(cond)
[13:21:06.914]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.914]                   {
[13:21:06.914]                     inherits <- base::inherits
[13:21:06.914]                     invokeRestart <- base::invokeRestart
[13:21:06.914]                     is.null <- base::is.null
[13:21:06.914]                     muffled <- FALSE
[13:21:06.914]                     if (inherits(cond, "message")) {
[13:21:06.914]                       muffled <- grepl(pattern, "muffleMessage")
[13:21:06.914]                       if (muffled) 
[13:21:06.914]                         invokeRestart("muffleMessage")
[13:21:06.914]                     }
[13:21:06.914]                     else if (inherits(cond, "warning")) {
[13:21:06.914]                       muffled <- grepl(pattern, "muffleWarning")
[13:21:06.914]                       if (muffled) 
[13:21:06.914]                         invokeRestart("muffleWarning")
[13:21:06.914]                     }
[13:21:06.914]                     else if (inherits(cond, "condition")) {
[13:21:06.914]                       if (!is.null(pattern)) {
[13:21:06.914]                         computeRestarts <- base::computeRestarts
[13:21:06.914]                         grepl <- base::grepl
[13:21:06.914]                         restarts <- computeRestarts(cond)
[13:21:06.914]                         for (restart in restarts) {
[13:21:06.914]                           name <- restart$name
[13:21:06.914]                           if (is.null(name)) 
[13:21:06.914]                             next
[13:21:06.914]                           if (!grepl(pattern, name)) 
[13:21:06.914]                             next
[13:21:06.914]                           invokeRestart(restart)
[13:21:06.914]                           muffled <- TRUE
[13:21:06.914]                           break
[13:21:06.914]                         }
[13:21:06.914]                       }
[13:21:06.914]                     }
[13:21:06.914]                     invisible(muffled)
[13:21:06.914]                   }
[13:21:06.914]                   muffleCondition(cond)
[13:21:06.914]                 })
[13:21:06.914]             }))
[13:21:06.914]             future::FutureResult(value = ...future.value$value, 
[13:21:06.914]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.914]                   ...future.rng), globalenv = if (FALSE) 
[13:21:06.914]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:21:06.914]                     ...future.globalenv.names))
[13:21:06.914]                 else NULL, started = ...future.startTime, version = "1.8")
[13:21:06.914]         }, condition = base::local({
[13:21:06.914]             c <- base::c
[13:21:06.914]             inherits <- base::inherits
[13:21:06.914]             invokeRestart <- base::invokeRestart
[13:21:06.914]             length <- base::length
[13:21:06.914]             list <- base::list
[13:21:06.914]             seq.int <- base::seq.int
[13:21:06.914]             signalCondition <- base::signalCondition
[13:21:06.914]             sys.calls <- base::sys.calls
[13:21:06.914]             `[[` <- base::`[[`
[13:21:06.914]             `+` <- base::`+`
[13:21:06.914]             `<<-` <- base::`<<-`
[13:21:06.914]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:21:06.914]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:21:06.914]                   3L)]
[13:21:06.914]             }
[13:21:06.914]             function(cond) {
[13:21:06.914]                 is_error <- inherits(cond, "error")
[13:21:06.914]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:21:06.914]                   NULL)
[13:21:06.914]                 if (is_error) {
[13:21:06.914]                   sessionInformation <- function() {
[13:21:06.914]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:21:06.914]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:21:06.914]                       search = base::search(), system = base::Sys.info())
[13:21:06.914]                   }
[13:21:06.914]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.914]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:21:06.914]                     cond$call), session = sessionInformation(), 
[13:21:06.914]                     timestamp = base::Sys.time(), signaled = 0L)
[13:21:06.914]                   signalCondition(cond)
[13:21:06.914]                 }
[13:21:06.914]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:21:06.914]                 "immediateCondition"))) {
[13:21:06.914]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:21:06.914]                   ...future.conditions[[length(...future.conditions) + 
[13:21:06.914]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:21:06.914]                   if (TRUE && !signal) {
[13:21:06.914]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.914]                     {
[13:21:06.914]                       inherits <- base::inherits
[13:21:06.914]                       invokeRestart <- base::invokeRestart
[13:21:06.914]                       is.null <- base::is.null
[13:21:06.914]                       muffled <- FALSE
[13:21:06.914]                       if (inherits(cond, "message")) {
[13:21:06.914]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.914]                         if (muffled) 
[13:21:06.914]                           invokeRestart("muffleMessage")
[13:21:06.914]                       }
[13:21:06.914]                       else if (inherits(cond, "warning")) {
[13:21:06.914]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.914]                         if (muffled) 
[13:21:06.914]                           invokeRestart("muffleWarning")
[13:21:06.914]                       }
[13:21:06.914]                       else if (inherits(cond, "condition")) {
[13:21:06.914]                         if (!is.null(pattern)) {
[13:21:06.914]                           computeRestarts <- base::computeRestarts
[13:21:06.914]                           grepl <- base::grepl
[13:21:06.914]                           restarts <- computeRestarts(cond)
[13:21:06.914]                           for (restart in restarts) {
[13:21:06.914]                             name <- restart$name
[13:21:06.914]                             if (is.null(name)) 
[13:21:06.914]                               next
[13:21:06.914]                             if (!grepl(pattern, name)) 
[13:21:06.914]                               next
[13:21:06.914]                             invokeRestart(restart)
[13:21:06.914]                             muffled <- TRUE
[13:21:06.914]                             break
[13:21:06.914]                           }
[13:21:06.914]                         }
[13:21:06.914]                       }
[13:21:06.914]                       invisible(muffled)
[13:21:06.914]                     }
[13:21:06.914]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.914]                   }
[13:21:06.914]                 }
[13:21:06.914]                 else {
[13:21:06.914]                   if (TRUE) {
[13:21:06.914]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:21:06.914]                     {
[13:21:06.914]                       inherits <- base::inherits
[13:21:06.914]                       invokeRestart <- base::invokeRestart
[13:21:06.914]                       is.null <- base::is.null
[13:21:06.914]                       muffled <- FALSE
[13:21:06.914]                       if (inherits(cond, "message")) {
[13:21:06.914]                         muffled <- grepl(pattern, "muffleMessage")
[13:21:06.914]                         if (muffled) 
[13:21:06.914]                           invokeRestart("muffleMessage")
[13:21:06.914]                       }
[13:21:06.914]                       else if (inherits(cond, "warning")) {
[13:21:06.914]                         muffled <- grepl(pattern, "muffleWarning")
[13:21:06.914]                         if (muffled) 
[13:21:06.914]                           invokeRestart("muffleWarning")
[13:21:06.914]                       }
[13:21:06.914]                       else if (inherits(cond, "condition")) {
[13:21:06.914]                         if (!is.null(pattern)) {
[13:21:06.914]                           computeRestarts <- base::computeRestarts
[13:21:06.914]                           grepl <- base::grepl
[13:21:06.914]                           restarts <- computeRestarts(cond)
[13:21:06.914]                           for (restart in restarts) {
[13:21:06.914]                             name <- restart$name
[13:21:06.914]                             if (is.null(name)) 
[13:21:06.914]                               next
[13:21:06.914]                             if (!grepl(pattern, name)) 
[13:21:06.914]                               next
[13:21:06.914]                             invokeRestart(restart)
[13:21:06.914]                             muffled <- TRUE
[13:21:06.914]                             break
[13:21:06.914]                           }
[13:21:06.914]                         }
[13:21:06.914]                       }
[13:21:06.914]                       invisible(muffled)
[13:21:06.914]                     }
[13:21:06.914]                     muffleCondition(cond, pattern = "^muffle")
[13:21:06.914]                   }
[13:21:06.914]                 }
[13:21:06.914]             }
[13:21:06.914]         }))
[13:21:06.914]     }, error = function(ex) {
[13:21:06.914]         base::structure(base::list(value = NULL, visible = NULL, 
[13:21:06.914]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:21:06.914]                 ...future.rng), started = ...future.startTime, 
[13:21:06.914]             finished = Sys.time(), session_uuid = NA_character_, 
[13:21:06.914]             version = "1.8"), class = "FutureResult")
[13:21:06.914]     }, finally = {
[13:21:06.914]         if (!identical(...future.workdir, getwd())) 
[13:21:06.914]             setwd(...future.workdir)
[13:21:06.914]         {
[13:21:06.914]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:21:06.914]                 ...future.oldOptions$nwarnings <- NULL
[13:21:06.914]             }
[13:21:06.914]             base::options(...future.oldOptions)
[13:21:06.914]             if (.Platform$OS.type == "windows") {
[13:21:06.914]                 old_names <- names(...future.oldEnvVars)
[13:21:06.914]                 envs <- base::Sys.getenv()
[13:21:06.914]                 names <- names(envs)
[13:21:06.914]                 common <- intersect(names, old_names)
[13:21:06.914]                 added <- setdiff(names, old_names)
[13:21:06.914]                 removed <- setdiff(old_names, names)
[13:21:06.914]                 changed <- common[...future.oldEnvVars[common] != 
[13:21:06.914]                   envs[common]]
[13:21:06.914]                 NAMES <- toupper(changed)
[13:21:06.914]                 args <- list()
[13:21:06.914]                 for (kk in seq_along(NAMES)) {
[13:21:06.914]                   name <- changed[[kk]]
[13:21:06.914]                   NAME <- NAMES[[kk]]
[13:21:06.914]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.914]                     next
[13:21:06.914]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.914]                 }
[13:21:06.914]                 NAMES <- toupper(added)
[13:21:06.914]                 for (kk in seq_along(NAMES)) {
[13:21:06.914]                   name <- added[[kk]]
[13:21:06.914]                   NAME <- NAMES[[kk]]
[13:21:06.914]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.914]                     next
[13:21:06.914]                   args[[name]] <- ""
[13:21:06.914]                 }
[13:21:06.914]                 NAMES <- toupper(removed)
[13:21:06.914]                 for (kk in seq_along(NAMES)) {
[13:21:06.914]                   name <- removed[[kk]]
[13:21:06.914]                   NAME <- NAMES[[kk]]
[13:21:06.914]                   if (name != NAME && is.element(NAME, old_names)) 
[13:21:06.914]                     next
[13:21:06.914]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:21:06.914]                 }
[13:21:06.914]                 if (length(args) > 0) 
[13:21:06.914]                   base::do.call(base::Sys.setenv, args = args)
[13:21:06.914]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:21:06.914]             }
[13:21:06.914]             else {
[13:21:06.914]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:21:06.914]             }
[13:21:06.914]             {
[13:21:06.914]                 if (base::length(...future.futureOptionsAdded) > 
[13:21:06.914]                   0L) {
[13:21:06.914]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:21:06.914]                   base::names(opts) <- ...future.futureOptionsAdded
[13:21:06.914]                   base::options(opts)
[13:21:06.914]                 }
[13:21:06.914]                 {
[13:21:06.914]                   {
[13:21:06.914]                     base::options(mc.cores = ...future.mc.cores.old)
[13:21:06.914]                     NULL
[13:21:06.914]                   }
[13:21:06.914]                   options(future.plan = NULL)
[13:21:06.914]                   if (is.na(NA_character_)) 
[13:21:06.914]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:21:06.914]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:21:06.914]                   future::plan(list(function (..., workers = 2L, 
[13:21:06.914]                     envir = parent.frame()) 
[13:21:06.914]                   strategy(..., workers = workers, envir = envir)), 
[13:21:06.914]                     .cleanup = FALSE, .init = FALSE)
[13:21:06.914]                 }
[13:21:06.914]             }
[13:21:06.914]         }
[13:21:06.914]     })
[13:21:06.914]     if (TRUE) {
[13:21:06.914]         base::sink(type = "output", split = FALSE)
[13:21:06.914]         if (TRUE) {
[13:21:06.914]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:21:06.914]         }
[13:21:06.914]         else {
[13:21:06.914]             ...future.result["stdout"] <- base::list(NULL)
[13:21:06.914]         }
[13:21:06.914]         base::close(...future.stdout)
[13:21:06.914]         ...future.stdout <- NULL
[13:21:06.914]     }
[13:21:06.914]     ...future.result$conditions <- ...future.conditions
[13:21:06.914]     ...future.result$finished <- base::Sys.time()
[13:21:06.914]     ...future.result
[13:21:06.914] }
[13:21:06.917] MultisessionFuture started
[13:21:06.917] - Launch lazy future ... done
[13:21:06.918] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[13:21:06.918] plan(): Setting new future strategy stack:
[13:21:06.918] List of future strategies:
[13:21:06.918] 1. sequential:
[13:21:06.918]    - args: function (..., envir = parent.frame())
[13:21:06.918]    - tweaked: FALSE
[13:21:06.918]    - call: plan(sequential)
[13:21:06.919] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[13:21:06.920] plan(): Setting new future strategy stack:
[13:21:06.920] List of future strategies:
[13:21:06.920] 1. FutureStrategy:
[13:21:06.920]    - args: function (..., envir = parent.frame())
[13:21:06.920]    - tweaked: FALSE
[13:21:06.920]    - call: future::plan(oplan)
[13:21:06.921] plan(): nbrOfWorkers() = 1
> 
