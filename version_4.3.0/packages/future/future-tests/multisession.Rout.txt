
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:58.421] plan(): Setting new future strategy stack:
[17:42:58.421] List of future strategies:
[17:42:58.421] 1. sequential:
[17:42:58.421]    - args: function (..., envir = parent.frame())
[17:42:58.421]    - tweaked: FALSE
[17:42:58.421]    - call: future::plan("sequential")
[17:42:58.435] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** multisession() ...")
*** multisession() ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   ## No global variables
+   f <- multisession({
+     42L
+   })
+   print(f)
+   stopifnot(inherits(f, "ClusterFuture") || (inherits(f, "SequentialFuture") && f$lazy))
+ 
+   print(resolved(f))
+   y <- value(f)
+   print(y)
+   stopifnot(y == 42L)
+ 
+ 
+   ## A global variable
+   a <- 0
+   f <- multisession({
+     b <- 3
+     c <- 2
+     a * b * c
+   }, globals = TRUE)
+   print(f)
+ 
+ 
+   ## A multisession future is evaluated in a separate
+   ## R session process.  Changing the value of a global
+   ## variable should not affect the result of the
+   ## future.
+   a <- 7  ## Make sure globals are frozen
+   v <- value(f)
+   print(v)
+   stopifnot(v == 0)
+ 
+ 
+   message("*** multisession() with globals and blocking")
+   x <- listenv()
+   for (ii in 2:1) {
+     message(sprintf(" - Creating multisession future #%d ...", ii))
+     x[[ii]] <- multisession({ ii }, globals = TRUE)
+   }
+   message(sprintf(" - Resolving %d multisession futures", length(x)))
+   v <- sapply(x, FUN = value)
+   stopifnot(all(v == 1:2))
+ 
+ 
+   message("*** multisession() - workers inherit .libPaths()")
+ 
+   libs <- value(future(.libPaths()))
+   str(list(
+     main = .libPaths(),
+     workers = libs
+   ))
+   stopifnot(identical(libs, .libPaths()))
+ 
+   message("*** multisession() and errors")
+   f <- multisession({
+     stop("Whoops!")
+     1
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "simpleError"))
+ 
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Error is repeated
+   res <- try(value(f), silent = TRUE)
+   print(res)
+   stopifnot(inherits(res, "try-error"))
+ 
+   ## Custom error class
+   f <- multisession({
+     stop(structure(list(message = "boom"),
+                    class = c("MyError", "error", "condition")))
+   })
+   print(f)
+   v <- value(f, signal = FALSE)
+   print(v)
+   stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+ 
+   ## Make sure error is signaled
+   res <- tryCatch(value(f), error = identity)
+   stopifnot(inherits(res, "error"))
+ 
+   ## Issue #200: Custom condition class attributes are lost
+   ## https://github.com/HenrikBengtsson/Wishlist-for-R/issues/57
+   ## stopifnot(inherits(res, "MyError"))    
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
[17:42:58.487] getGlobalsAndPackages() ...
[17:42:58.487] Searching for globals...
[17:42:58.490] - globals found: [1] ‘{’
[17:42:58.491] Searching for globals ... DONE
[17:42:58.491] Resolving globals: FALSE
[17:42:58.491] 
[17:42:58.491] 
[17:42:58.491] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:58.493] Packages needed by the future expression (n = 0): <none>
[17:42:58.493] Packages needed by future strategies (n = 0): <none>
[17:42:58.494] {
[17:42:58.494]     {
[17:42:58.494]         {
[17:42:58.494]             ...future.startTime <- base::Sys.time()
[17:42:58.494]             {
[17:42:58.494]                 {
[17:42:58.494]                   {
[17:42:58.494]                     base::local({
[17:42:58.494]                       has_future <- base::requireNamespace("future", 
[17:42:58.494]                         quietly = TRUE)
[17:42:58.494]                       if (has_future) {
[17:42:58.494]                         ns <- base::getNamespace("future")
[17:42:58.494]                         version <- ns[[".package"]][["version"]]
[17:42:58.494]                         if (is.null(version)) 
[17:42:58.494]                           version <- utils::packageVersion("future")
[17:42:58.494]                       }
[17:42:58.494]                       else {
[17:42:58.494]                         version <- NULL
[17:42:58.494]                       }
[17:42:58.494]                       if (!has_future || version < "1.8.0") {
[17:42:58.494]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.494]                           "", base::R.version$version.string), 
[17:42:58.494]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.494]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.494]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.494]                             "release", "version")], collapse = " "), 
[17:42:58.494]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.494]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.494]                           info)
[17:42:58.494]                         info <- base::paste(info, collapse = "; ")
[17:42:58.494]                         if (!has_future) {
[17:42:58.494]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.494]                             info)
[17:42:58.494]                         }
[17:42:58.494]                         else {
[17:42:58.494]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.494]                             info, version)
[17:42:58.494]                         }
[17:42:58.494]                         base::stop(msg)
[17:42:58.494]                       }
[17:42:58.494]                     })
[17:42:58.494]                   }
[17:42:58.494]                   options(future.plan = NULL)
[17:42:58.494]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.494]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.494]                 }
[17:42:58.494]                 ...future.workdir <- getwd()
[17:42:58.494]             }
[17:42:58.494]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.494]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.494]         }
[17:42:58.494]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.494]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.494]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.494]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.494]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.494]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.494]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.494]             base::names(...future.oldOptions))
[17:42:58.494]     }
[17:42:58.494]     if (FALSE) {
[17:42:58.494]     }
[17:42:58.494]     else {
[17:42:58.494]         if (TRUE) {
[17:42:58.494]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.494]                 open = "w")
[17:42:58.494]         }
[17:42:58.494]         else {
[17:42:58.494]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.494]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.494]         }
[17:42:58.494]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.494]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.494]             base::sink(type = "output", split = FALSE)
[17:42:58.494]             base::close(...future.stdout)
[17:42:58.494]         }, add = TRUE)
[17:42:58.494]     }
[17:42:58.494]     ...future.frame <- base::sys.nframe()
[17:42:58.494]     ...future.conditions <- base::list()
[17:42:58.494]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.494]     if (FALSE) {
[17:42:58.494]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.494]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.494]     }
[17:42:58.494]     ...future.result <- base::tryCatch({
[17:42:58.494]         base::withCallingHandlers({
[17:42:58.494]             ...future.value <- base::withVisible(base::local({
[17:42:58.494]                 42L
[17:42:58.494]             }))
[17:42:58.494]             future::FutureResult(value = ...future.value$value, 
[17:42:58.494]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.494]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.494]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.494]                     ...future.globalenv.names))
[17:42:58.494]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.494]         }, condition = base::local({
[17:42:58.494]             c <- base::c
[17:42:58.494]             inherits <- base::inherits
[17:42:58.494]             invokeRestart <- base::invokeRestart
[17:42:58.494]             length <- base::length
[17:42:58.494]             list <- base::list
[17:42:58.494]             seq.int <- base::seq.int
[17:42:58.494]             signalCondition <- base::signalCondition
[17:42:58.494]             sys.calls <- base::sys.calls
[17:42:58.494]             `[[` <- base::`[[`
[17:42:58.494]             `+` <- base::`+`
[17:42:58.494]             `<<-` <- base::`<<-`
[17:42:58.494]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.494]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.494]                   3L)]
[17:42:58.494]             }
[17:42:58.494]             function(cond) {
[17:42:58.494]                 is_error <- inherits(cond, "error")
[17:42:58.494]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.494]                   NULL)
[17:42:58.494]                 if (is_error) {
[17:42:58.494]                   sessionInformation <- function() {
[17:42:58.494]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.494]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.494]                       search = base::search(), system = base::Sys.info())
[17:42:58.494]                   }
[17:42:58.494]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.494]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.494]                     cond$call), session = sessionInformation(), 
[17:42:58.494]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.494]                   signalCondition(cond)
[17:42:58.494]                 }
[17:42:58.494]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.494]                 "immediateCondition"))) {
[17:42:58.494]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.494]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.494]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.494]                   if (TRUE && !signal) {
[17:42:58.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.494]                     {
[17:42:58.494]                       inherits <- base::inherits
[17:42:58.494]                       invokeRestart <- base::invokeRestart
[17:42:58.494]                       is.null <- base::is.null
[17:42:58.494]                       muffled <- FALSE
[17:42:58.494]                       if (inherits(cond, "message")) {
[17:42:58.494]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.494]                         if (muffled) 
[17:42:58.494]                           invokeRestart("muffleMessage")
[17:42:58.494]                       }
[17:42:58.494]                       else if (inherits(cond, "warning")) {
[17:42:58.494]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.494]                         if (muffled) 
[17:42:58.494]                           invokeRestart("muffleWarning")
[17:42:58.494]                       }
[17:42:58.494]                       else if (inherits(cond, "condition")) {
[17:42:58.494]                         if (!is.null(pattern)) {
[17:42:58.494]                           computeRestarts <- base::computeRestarts
[17:42:58.494]                           grepl <- base::grepl
[17:42:58.494]                           restarts <- computeRestarts(cond)
[17:42:58.494]                           for (restart in restarts) {
[17:42:58.494]                             name <- restart$name
[17:42:58.494]                             if (is.null(name)) 
[17:42:58.494]                               next
[17:42:58.494]                             if (!grepl(pattern, name)) 
[17:42:58.494]                               next
[17:42:58.494]                             invokeRestart(restart)
[17:42:58.494]                             muffled <- TRUE
[17:42:58.494]                             break
[17:42:58.494]                           }
[17:42:58.494]                         }
[17:42:58.494]                       }
[17:42:58.494]                       invisible(muffled)
[17:42:58.494]                     }
[17:42:58.494]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.494]                   }
[17:42:58.494]                 }
[17:42:58.494]                 else {
[17:42:58.494]                   if (TRUE) {
[17:42:58.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.494]                     {
[17:42:58.494]                       inherits <- base::inherits
[17:42:58.494]                       invokeRestart <- base::invokeRestart
[17:42:58.494]                       is.null <- base::is.null
[17:42:58.494]                       muffled <- FALSE
[17:42:58.494]                       if (inherits(cond, "message")) {
[17:42:58.494]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.494]                         if (muffled) 
[17:42:58.494]                           invokeRestart("muffleMessage")
[17:42:58.494]                       }
[17:42:58.494]                       else if (inherits(cond, "warning")) {
[17:42:58.494]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.494]                         if (muffled) 
[17:42:58.494]                           invokeRestart("muffleWarning")
[17:42:58.494]                       }
[17:42:58.494]                       else if (inherits(cond, "condition")) {
[17:42:58.494]                         if (!is.null(pattern)) {
[17:42:58.494]                           computeRestarts <- base::computeRestarts
[17:42:58.494]                           grepl <- base::grepl
[17:42:58.494]                           restarts <- computeRestarts(cond)
[17:42:58.494]                           for (restart in restarts) {
[17:42:58.494]                             name <- restart$name
[17:42:58.494]                             if (is.null(name)) 
[17:42:58.494]                               next
[17:42:58.494]                             if (!grepl(pattern, name)) 
[17:42:58.494]                               next
[17:42:58.494]                             invokeRestart(restart)
[17:42:58.494]                             muffled <- TRUE
[17:42:58.494]                             break
[17:42:58.494]                           }
[17:42:58.494]                         }
[17:42:58.494]                       }
[17:42:58.494]                       invisible(muffled)
[17:42:58.494]                     }
[17:42:58.494]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.494]                   }
[17:42:58.494]                 }
[17:42:58.494]             }
[17:42:58.494]         }))
[17:42:58.494]     }, error = function(ex) {
[17:42:58.494]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.494]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.494]                 ...future.rng), started = ...future.startTime, 
[17:42:58.494]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.494]             version = "1.8"), class = "FutureResult")
[17:42:58.494]     }, finally = {
[17:42:58.494]         if (!identical(...future.workdir, getwd())) 
[17:42:58.494]             setwd(...future.workdir)
[17:42:58.494]         {
[17:42:58.494]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.494]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.494]             }
[17:42:58.494]             base::options(...future.oldOptions)
[17:42:58.494]             if (.Platform$OS.type == "windows") {
[17:42:58.494]                 old_names <- names(...future.oldEnvVars)
[17:42:58.494]                 envs <- base::Sys.getenv()
[17:42:58.494]                 names <- names(envs)
[17:42:58.494]                 common <- intersect(names, old_names)
[17:42:58.494]                 added <- setdiff(names, old_names)
[17:42:58.494]                 removed <- setdiff(old_names, names)
[17:42:58.494]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.494]                   envs[common]]
[17:42:58.494]                 NAMES <- toupper(changed)
[17:42:58.494]                 args <- list()
[17:42:58.494]                 for (kk in seq_along(NAMES)) {
[17:42:58.494]                   name <- changed[[kk]]
[17:42:58.494]                   NAME <- NAMES[[kk]]
[17:42:58.494]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.494]                     next
[17:42:58.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.494]                 }
[17:42:58.494]                 NAMES <- toupper(added)
[17:42:58.494]                 for (kk in seq_along(NAMES)) {
[17:42:58.494]                   name <- added[[kk]]
[17:42:58.494]                   NAME <- NAMES[[kk]]
[17:42:58.494]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.494]                     next
[17:42:58.494]                   args[[name]] <- ""
[17:42:58.494]                 }
[17:42:58.494]                 NAMES <- toupper(removed)
[17:42:58.494]                 for (kk in seq_along(NAMES)) {
[17:42:58.494]                   name <- removed[[kk]]
[17:42:58.494]                   NAME <- NAMES[[kk]]
[17:42:58.494]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.494]                     next
[17:42:58.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.494]                 }
[17:42:58.494]                 if (length(args) > 0) 
[17:42:58.494]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.494]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.494]             }
[17:42:58.494]             else {
[17:42:58.494]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.494]             }
[17:42:58.494]             {
[17:42:58.494]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.494]                   0L) {
[17:42:58.494]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.494]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.494]                   base::options(opts)
[17:42:58.494]                 }
[17:42:58.494]                 {
[17:42:58.494]                   {
[17:42:58.494]                     NULL
[17:42:58.494]                     RNGkind("Mersenne-Twister")
[17:42:58.494]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.494]                       inherits = FALSE)
[17:42:58.494]                   }
[17:42:58.494]                   options(future.plan = NULL)
[17:42:58.494]                   if (is.na(NA_character_)) 
[17:42:58.494]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.494]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.494]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.494]                   {
[17:42:58.494]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.494]                     if (!future$lazy) 
[17:42:58.494]                       future <- run(future)
[17:42:58.494]                     invisible(future)
[17:42:58.494]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.494]                 }
[17:42:58.494]             }
[17:42:58.494]         }
[17:42:58.494]     })
[17:42:58.494]     if (TRUE) {
[17:42:58.494]         base::sink(type = "output", split = FALSE)
[17:42:58.494]         if (TRUE) {
[17:42:58.494]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.494]         }
[17:42:58.494]         else {
[17:42:58.494]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.494]         }
[17:42:58.494]         base::close(...future.stdout)
[17:42:58.494]         ...future.stdout <- NULL
[17:42:58.494]     }
[17:42:58.494]     ...future.result$conditions <- ...future.conditions
[17:42:58.494]     ...future.result$finished <- base::Sys.time()
[17:42:58.494]     ...future.result
[17:42:58.494] }
[17:42:58.496] plan(): Setting new future strategy stack:
[17:42:58.496] List of future strategies:
[17:42:58.496] 1. sequential:
[17:42:58.496]    - args: function (..., envir = parent.frame())
[17:42:58.496]    - tweaked: FALSE
[17:42:58.496]    - call: NULL
[17:42:58.497] plan(): nbrOfWorkers() = 1
[17:42:58.498] plan(): Setting new future strategy stack:
[17:42:58.498] List of future strategies:
[17:42:58.498] 1. sequential:
[17:42:58.498]    - args: function (..., envir = parent.frame())
[17:42:58.498]    - tweaked: FALSE
[17:42:58.498]    - call: future::plan("sequential")
[17:42:58.500] plan(): nbrOfWorkers() = 1
[17:42:58.500] SequentialFuture started (and completed)
[17:42:58.501] resolved() for ‘SequentialFuture’ ...
[17:42:58.501] - state: ‘finished’
[17:42:58.501] - run: TRUE
[17:42:58.501] - result: ‘FutureResult’
[17:42:58.501] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
[17:42:58.505] getGlobalsAndPackages() ...
[17:42:58.505] Searching for globals...
[17:42:58.510] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:42:58.510] Searching for globals ... DONE
[17:42:58.510] Resolving globals: FALSE
[17:42:58.511] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:58.512] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:58.512] - globals: [1] ‘a’
[17:42:58.512] 
[17:42:58.512] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:58.513] Packages needed by the future expression (n = 0): <none>
[17:42:58.513] Packages needed by future strategies (n = 0): <none>
[17:42:58.514] {
[17:42:58.514]     {
[17:42:58.514]         {
[17:42:58.514]             ...future.startTime <- base::Sys.time()
[17:42:58.514]             {
[17:42:58.514]                 {
[17:42:58.514]                   {
[17:42:58.514]                     base::local({
[17:42:58.514]                       has_future <- base::requireNamespace("future", 
[17:42:58.514]                         quietly = TRUE)
[17:42:58.514]                       if (has_future) {
[17:42:58.514]                         ns <- base::getNamespace("future")
[17:42:58.514]                         version <- ns[[".package"]][["version"]]
[17:42:58.514]                         if (is.null(version)) 
[17:42:58.514]                           version <- utils::packageVersion("future")
[17:42:58.514]                       }
[17:42:58.514]                       else {
[17:42:58.514]                         version <- NULL
[17:42:58.514]                       }
[17:42:58.514]                       if (!has_future || version < "1.8.0") {
[17:42:58.514]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.514]                           "", base::R.version$version.string), 
[17:42:58.514]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.514]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.514]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.514]                             "release", "version")], collapse = " "), 
[17:42:58.514]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.514]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.514]                           info)
[17:42:58.514]                         info <- base::paste(info, collapse = "; ")
[17:42:58.514]                         if (!has_future) {
[17:42:58.514]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.514]                             info)
[17:42:58.514]                         }
[17:42:58.514]                         else {
[17:42:58.514]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.514]                             info, version)
[17:42:58.514]                         }
[17:42:58.514]                         base::stop(msg)
[17:42:58.514]                       }
[17:42:58.514]                     })
[17:42:58.514]                   }
[17:42:58.514]                   options(future.plan = NULL)
[17:42:58.514]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.514]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.514]                 }
[17:42:58.514]                 ...future.workdir <- getwd()
[17:42:58.514]             }
[17:42:58.514]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.514]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.514]         }
[17:42:58.514]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.514]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.514]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.514]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.514]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.514]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.514]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.514]             base::names(...future.oldOptions))
[17:42:58.514]     }
[17:42:58.514]     if (FALSE) {
[17:42:58.514]     }
[17:42:58.514]     else {
[17:42:58.514]         if (TRUE) {
[17:42:58.514]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.514]                 open = "w")
[17:42:58.514]         }
[17:42:58.514]         else {
[17:42:58.514]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.514]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.514]         }
[17:42:58.514]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.514]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.514]             base::sink(type = "output", split = FALSE)
[17:42:58.514]             base::close(...future.stdout)
[17:42:58.514]         }, add = TRUE)
[17:42:58.514]     }
[17:42:58.514]     ...future.frame <- base::sys.nframe()
[17:42:58.514]     ...future.conditions <- base::list()
[17:42:58.514]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.514]     if (FALSE) {
[17:42:58.514]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.514]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.514]     }
[17:42:58.514]     ...future.result <- base::tryCatch({
[17:42:58.514]         base::withCallingHandlers({
[17:42:58.514]             ...future.value <- base::withVisible(base::local({
[17:42:58.514]                 b <- 3
[17:42:58.514]                 c <- 2
[17:42:58.514]                 a * b * c
[17:42:58.514]             }))
[17:42:58.514]             future::FutureResult(value = ...future.value$value, 
[17:42:58.514]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.514]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.514]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.514]                     ...future.globalenv.names))
[17:42:58.514]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.514]         }, condition = base::local({
[17:42:58.514]             c <- base::c
[17:42:58.514]             inherits <- base::inherits
[17:42:58.514]             invokeRestart <- base::invokeRestart
[17:42:58.514]             length <- base::length
[17:42:58.514]             list <- base::list
[17:42:58.514]             seq.int <- base::seq.int
[17:42:58.514]             signalCondition <- base::signalCondition
[17:42:58.514]             sys.calls <- base::sys.calls
[17:42:58.514]             `[[` <- base::`[[`
[17:42:58.514]             `+` <- base::`+`
[17:42:58.514]             `<<-` <- base::`<<-`
[17:42:58.514]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.514]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.514]                   3L)]
[17:42:58.514]             }
[17:42:58.514]             function(cond) {
[17:42:58.514]                 is_error <- inherits(cond, "error")
[17:42:58.514]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.514]                   NULL)
[17:42:58.514]                 if (is_error) {
[17:42:58.514]                   sessionInformation <- function() {
[17:42:58.514]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.514]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.514]                       search = base::search(), system = base::Sys.info())
[17:42:58.514]                   }
[17:42:58.514]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.514]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.514]                     cond$call), session = sessionInformation(), 
[17:42:58.514]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.514]                   signalCondition(cond)
[17:42:58.514]                 }
[17:42:58.514]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.514]                 "immediateCondition"))) {
[17:42:58.514]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.514]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.514]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.514]                   if (TRUE && !signal) {
[17:42:58.514]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.514]                     {
[17:42:58.514]                       inherits <- base::inherits
[17:42:58.514]                       invokeRestart <- base::invokeRestart
[17:42:58.514]                       is.null <- base::is.null
[17:42:58.514]                       muffled <- FALSE
[17:42:58.514]                       if (inherits(cond, "message")) {
[17:42:58.514]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.514]                         if (muffled) 
[17:42:58.514]                           invokeRestart("muffleMessage")
[17:42:58.514]                       }
[17:42:58.514]                       else if (inherits(cond, "warning")) {
[17:42:58.514]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.514]                         if (muffled) 
[17:42:58.514]                           invokeRestart("muffleWarning")
[17:42:58.514]                       }
[17:42:58.514]                       else if (inherits(cond, "condition")) {
[17:42:58.514]                         if (!is.null(pattern)) {
[17:42:58.514]                           computeRestarts <- base::computeRestarts
[17:42:58.514]                           grepl <- base::grepl
[17:42:58.514]                           restarts <- computeRestarts(cond)
[17:42:58.514]                           for (restart in restarts) {
[17:42:58.514]                             name <- restart$name
[17:42:58.514]                             if (is.null(name)) 
[17:42:58.514]                               next
[17:42:58.514]                             if (!grepl(pattern, name)) 
[17:42:58.514]                               next
[17:42:58.514]                             invokeRestart(restart)
[17:42:58.514]                             muffled <- TRUE
[17:42:58.514]                             break
[17:42:58.514]                           }
[17:42:58.514]                         }
[17:42:58.514]                       }
[17:42:58.514]                       invisible(muffled)
[17:42:58.514]                     }
[17:42:58.514]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.514]                   }
[17:42:58.514]                 }
[17:42:58.514]                 else {
[17:42:58.514]                   if (TRUE) {
[17:42:58.514]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.514]                     {
[17:42:58.514]                       inherits <- base::inherits
[17:42:58.514]                       invokeRestart <- base::invokeRestart
[17:42:58.514]                       is.null <- base::is.null
[17:42:58.514]                       muffled <- FALSE
[17:42:58.514]                       if (inherits(cond, "message")) {
[17:42:58.514]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.514]                         if (muffled) 
[17:42:58.514]                           invokeRestart("muffleMessage")
[17:42:58.514]                       }
[17:42:58.514]                       else if (inherits(cond, "warning")) {
[17:42:58.514]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.514]                         if (muffled) 
[17:42:58.514]                           invokeRestart("muffleWarning")
[17:42:58.514]                       }
[17:42:58.514]                       else if (inherits(cond, "condition")) {
[17:42:58.514]                         if (!is.null(pattern)) {
[17:42:58.514]                           computeRestarts <- base::computeRestarts
[17:42:58.514]                           grepl <- base::grepl
[17:42:58.514]                           restarts <- computeRestarts(cond)
[17:42:58.514]                           for (restart in restarts) {
[17:42:58.514]                             name <- restart$name
[17:42:58.514]                             if (is.null(name)) 
[17:42:58.514]                               next
[17:42:58.514]                             if (!grepl(pattern, name)) 
[17:42:58.514]                               next
[17:42:58.514]                             invokeRestart(restart)
[17:42:58.514]                             muffled <- TRUE
[17:42:58.514]                             break
[17:42:58.514]                           }
[17:42:58.514]                         }
[17:42:58.514]                       }
[17:42:58.514]                       invisible(muffled)
[17:42:58.514]                     }
[17:42:58.514]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.514]                   }
[17:42:58.514]                 }
[17:42:58.514]             }
[17:42:58.514]         }))
[17:42:58.514]     }, error = function(ex) {
[17:42:58.514]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.514]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.514]                 ...future.rng), started = ...future.startTime, 
[17:42:58.514]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.514]             version = "1.8"), class = "FutureResult")
[17:42:58.514]     }, finally = {
[17:42:58.514]         if (!identical(...future.workdir, getwd())) 
[17:42:58.514]             setwd(...future.workdir)
[17:42:58.514]         {
[17:42:58.514]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.514]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.514]             }
[17:42:58.514]             base::options(...future.oldOptions)
[17:42:58.514]             if (.Platform$OS.type == "windows") {
[17:42:58.514]                 old_names <- names(...future.oldEnvVars)
[17:42:58.514]                 envs <- base::Sys.getenv()
[17:42:58.514]                 names <- names(envs)
[17:42:58.514]                 common <- intersect(names, old_names)
[17:42:58.514]                 added <- setdiff(names, old_names)
[17:42:58.514]                 removed <- setdiff(old_names, names)
[17:42:58.514]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.514]                   envs[common]]
[17:42:58.514]                 NAMES <- toupper(changed)
[17:42:58.514]                 args <- list()
[17:42:58.514]                 for (kk in seq_along(NAMES)) {
[17:42:58.514]                   name <- changed[[kk]]
[17:42:58.514]                   NAME <- NAMES[[kk]]
[17:42:58.514]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.514]                     next
[17:42:58.514]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.514]                 }
[17:42:58.514]                 NAMES <- toupper(added)
[17:42:58.514]                 for (kk in seq_along(NAMES)) {
[17:42:58.514]                   name <- added[[kk]]
[17:42:58.514]                   NAME <- NAMES[[kk]]
[17:42:58.514]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.514]                     next
[17:42:58.514]                   args[[name]] <- ""
[17:42:58.514]                 }
[17:42:58.514]                 NAMES <- toupper(removed)
[17:42:58.514]                 for (kk in seq_along(NAMES)) {
[17:42:58.514]                   name <- removed[[kk]]
[17:42:58.514]                   NAME <- NAMES[[kk]]
[17:42:58.514]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.514]                     next
[17:42:58.514]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.514]                 }
[17:42:58.514]                 if (length(args) > 0) 
[17:42:58.514]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.514]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.514]             }
[17:42:58.514]             else {
[17:42:58.514]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.514]             }
[17:42:58.514]             {
[17:42:58.514]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.514]                   0L) {
[17:42:58.514]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.514]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.514]                   base::options(opts)
[17:42:58.514]                 }
[17:42:58.514]                 {
[17:42:58.514]                   {
[17:42:58.514]                     NULL
[17:42:58.514]                     RNGkind("Mersenne-Twister")
[17:42:58.514]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.514]                       inherits = FALSE)
[17:42:58.514]                   }
[17:42:58.514]                   options(future.plan = NULL)
[17:42:58.514]                   if (is.na(NA_character_)) 
[17:42:58.514]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.514]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.514]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.514]                   {
[17:42:58.514]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.514]                     if (!future$lazy) 
[17:42:58.514]                       future <- run(future)
[17:42:58.514]                     invisible(future)
[17:42:58.514]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.514]                 }
[17:42:58.514]             }
[17:42:58.514]         }
[17:42:58.514]     })
[17:42:58.514]     if (TRUE) {
[17:42:58.514]         base::sink(type = "output", split = FALSE)
[17:42:58.514]         if (TRUE) {
[17:42:58.514]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.514]         }
[17:42:58.514]         else {
[17:42:58.514]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.514]         }
[17:42:58.514]         base::close(...future.stdout)
[17:42:58.514]         ...future.stdout <- NULL
[17:42:58.514]     }
[17:42:58.514]     ...future.result$conditions <- ...future.conditions
[17:42:58.514]     ...future.result$finished <- base::Sys.time()
[17:42:58.514]     ...future.result
[17:42:58.514] }
[17:42:58.515] assign_globals() ...
[17:42:58.516] List of 1
[17:42:58.516]  $ a: num 0
[17:42:58.516]  - attr(*, "where")=List of 1
[17:42:58.516]   ..$ a:<environment: R_EmptyEnv> 
[17:42:58.516]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:58.516]  - attr(*, "resolved")= logi FALSE
[17:42:58.516]  - attr(*, "total_size")= num 56
[17:42:58.520] - copied ‘a’ to environment
[17:42:58.520] assign_globals() ... done
[17:42:58.521] plan(): Setting new future strategy stack:
[17:42:58.521] List of future strategies:
[17:42:58.521] 1. sequential:
[17:42:58.521]    - args: function (..., envir = parent.frame())
[17:42:58.521]    - tweaked: FALSE
[17:42:58.521]    - call: NULL
[17:42:58.521] plan(): nbrOfWorkers() = 1
[17:42:58.522] plan(): Setting new future strategy stack:
[17:42:58.522] List of future strategies:
[17:42:58.522] 1. sequential:
[17:42:58.522]    - args: function (..., envir = parent.frame())
[17:42:58.522]    - tweaked: FALSE
[17:42:58.522]    - call: future::plan("sequential")
[17:42:58.522] plan(): nbrOfWorkers() = 1
[17:42:58.522] SequentialFuture started (and completed)
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[17:42:58.526] getGlobalsAndPackages() ...
[17:42:58.526] Searching for globals...
[17:42:58.527] - globals found: [2] ‘{’, ‘ii’
[17:42:58.528] Searching for globals ... DONE
[17:42:58.528] Resolving globals: FALSE
[17:42:58.528] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:58.528] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:42:58.529] - globals: [1] ‘ii’
[17:42:58.529] 
[17:42:58.529] getGlobalsAndPackages() ... DONE
 - Creating multisession future #1 ...
[17:42:58.533] getGlobalsAndPackages() ...
[17:42:58.533] Searching for globals...
[17:42:58.534] - globals found: [2] ‘{’, ‘ii’
[17:42:58.534] Searching for globals ... DONE
[17:42:58.534] Resolving globals: FALSE
[17:42:58.534] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:58.535] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:42:58.535] - globals: [1] ‘ii’
[17:42:58.535] 
[17:42:58.535] getGlobalsAndPackages() ... DONE
 - Resolving 2 multisession futures
[17:42:58.536] Packages needed by the future expression (n = 0): <none>
[17:42:58.536] Packages needed by future strategies (n = 0): <none>
[17:42:58.536] {
[17:42:58.536]     {
[17:42:58.536]         {
[17:42:58.536]             ...future.startTime <- base::Sys.time()
[17:42:58.536]             {
[17:42:58.536]                 {
[17:42:58.536]                   {
[17:42:58.536]                     base::local({
[17:42:58.536]                       has_future <- base::requireNamespace("future", 
[17:42:58.536]                         quietly = TRUE)
[17:42:58.536]                       if (has_future) {
[17:42:58.536]                         ns <- base::getNamespace("future")
[17:42:58.536]                         version <- ns[[".package"]][["version"]]
[17:42:58.536]                         if (is.null(version)) 
[17:42:58.536]                           version <- utils::packageVersion("future")
[17:42:58.536]                       }
[17:42:58.536]                       else {
[17:42:58.536]                         version <- NULL
[17:42:58.536]                       }
[17:42:58.536]                       if (!has_future || version < "1.8.0") {
[17:42:58.536]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.536]                           "", base::R.version$version.string), 
[17:42:58.536]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.536]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.536]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.536]                             "release", "version")], collapse = " "), 
[17:42:58.536]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.536]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.536]                           info)
[17:42:58.536]                         info <- base::paste(info, collapse = "; ")
[17:42:58.536]                         if (!has_future) {
[17:42:58.536]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.536]                             info)
[17:42:58.536]                         }
[17:42:58.536]                         else {
[17:42:58.536]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.536]                             info, version)
[17:42:58.536]                         }
[17:42:58.536]                         base::stop(msg)
[17:42:58.536]                       }
[17:42:58.536]                     })
[17:42:58.536]                   }
[17:42:58.536]                   options(future.plan = NULL)
[17:42:58.536]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.536]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.536]                 }
[17:42:58.536]                 ...future.workdir <- getwd()
[17:42:58.536]             }
[17:42:58.536]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.536]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.536]         }
[17:42:58.536]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.536]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.536]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.536]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.536]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.536]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.536]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.536]             base::names(...future.oldOptions))
[17:42:58.536]     }
[17:42:58.536]     if (FALSE) {
[17:42:58.536]     }
[17:42:58.536]     else {
[17:42:58.536]         if (TRUE) {
[17:42:58.536]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.536]                 open = "w")
[17:42:58.536]         }
[17:42:58.536]         else {
[17:42:58.536]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.536]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.536]         }
[17:42:58.536]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.536]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.536]             base::sink(type = "output", split = FALSE)
[17:42:58.536]             base::close(...future.stdout)
[17:42:58.536]         }, add = TRUE)
[17:42:58.536]     }
[17:42:58.536]     ...future.frame <- base::sys.nframe()
[17:42:58.536]     ...future.conditions <- base::list()
[17:42:58.536]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.536]     if (FALSE) {
[17:42:58.536]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.536]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.536]     }
[17:42:58.536]     ...future.result <- base::tryCatch({
[17:42:58.536]         base::withCallingHandlers({
[17:42:58.536]             ...future.value <- base::withVisible(base::local({
[17:42:58.536]                 ii
[17:42:58.536]             }))
[17:42:58.536]             future::FutureResult(value = ...future.value$value, 
[17:42:58.536]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.536]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.536]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.536]                     ...future.globalenv.names))
[17:42:58.536]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.536]         }, condition = base::local({
[17:42:58.536]             c <- base::c
[17:42:58.536]             inherits <- base::inherits
[17:42:58.536]             invokeRestart <- base::invokeRestart
[17:42:58.536]             length <- base::length
[17:42:58.536]             list <- base::list
[17:42:58.536]             seq.int <- base::seq.int
[17:42:58.536]             signalCondition <- base::signalCondition
[17:42:58.536]             sys.calls <- base::sys.calls
[17:42:58.536]             `[[` <- base::`[[`
[17:42:58.536]             `+` <- base::`+`
[17:42:58.536]             `<<-` <- base::`<<-`
[17:42:58.536]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.536]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.536]                   3L)]
[17:42:58.536]             }
[17:42:58.536]             function(cond) {
[17:42:58.536]                 is_error <- inherits(cond, "error")
[17:42:58.536]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.536]                   NULL)
[17:42:58.536]                 if (is_error) {
[17:42:58.536]                   sessionInformation <- function() {
[17:42:58.536]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.536]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.536]                       search = base::search(), system = base::Sys.info())
[17:42:58.536]                   }
[17:42:58.536]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.536]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.536]                     cond$call), session = sessionInformation(), 
[17:42:58.536]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.536]                   signalCondition(cond)
[17:42:58.536]                 }
[17:42:58.536]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.536]                 "immediateCondition"))) {
[17:42:58.536]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.536]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.536]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.536]                   if (TRUE && !signal) {
[17:42:58.536]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.536]                     {
[17:42:58.536]                       inherits <- base::inherits
[17:42:58.536]                       invokeRestart <- base::invokeRestart
[17:42:58.536]                       is.null <- base::is.null
[17:42:58.536]                       muffled <- FALSE
[17:42:58.536]                       if (inherits(cond, "message")) {
[17:42:58.536]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.536]                         if (muffled) 
[17:42:58.536]                           invokeRestart("muffleMessage")
[17:42:58.536]                       }
[17:42:58.536]                       else if (inherits(cond, "warning")) {
[17:42:58.536]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.536]                         if (muffled) 
[17:42:58.536]                           invokeRestart("muffleWarning")
[17:42:58.536]                       }
[17:42:58.536]                       else if (inherits(cond, "condition")) {
[17:42:58.536]                         if (!is.null(pattern)) {
[17:42:58.536]                           computeRestarts <- base::computeRestarts
[17:42:58.536]                           grepl <- base::grepl
[17:42:58.536]                           restarts <- computeRestarts(cond)
[17:42:58.536]                           for (restart in restarts) {
[17:42:58.536]                             name <- restart$name
[17:42:58.536]                             if (is.null(name)) 
[17:42:58.536]                               next
[17:42:58.536]                             if (!grepl(pattern, name)) 
[17:42:58.536]                               next
[17:42:58.536]                             invokeRestart(restart)
[17:42:58.536]                             muffled <- TRUE
[17:42:58.536]                             break
[17:42:58.536]                           }
[17:42:58.536]                         }
[17:42:58.536]                       }
[17:42:58.536]                       invisible(muffled)
[17:42:58.536]                     }
[17:42:58.536]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.536]                   }
[17:42:58.536]                 }
[17:42:58.536]                 else {
[17:42:58.536]                   if (TRUE) {
[17:42:58.536]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.536]                     {
[17:42:58.536]                       inherits <- base::inherits
[17:42:58.536]                       invokeRestart <- base::invokeRestart
[17:42:58.536]                       is.null <- base::is.null
[17:42:58.536]                       muffled <- FALSE
[17:42:58.536]                       if (inherits(cond, "message")) {
[17:42:58.536]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.536]                         if (muffled) 
[17:42:58.536]                           invokeRestart("muffleMessage")
[17:42:58.536]                       }
[17:42:58.536]                       else if (inherits(cond, "warning")) {
[17:42:58.536]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.536]                         if (muffled) 
[17:42:58.536]                           invokeRestart("muffleWarning")
[17:42:58.536]                       }
[17:42:58.536]                       else if (inherits(cond, "condition")) {
[17:42:58.536]                         if (!is.null(pattern)) {
[17:42:58.536]                           computeRestarts <- base::computeRestarts
[17:42:58.536]                           grepl <- base::grepl
[17:42:58.536]                           restarts <- computeRestarts(cond)
[17:42:58.536]                           for (restart in restarts) {
[17:42:58.536]                             name <- restart$name
[17:42:58.536]                             if (is.null(name)) 
[17:42:58.536]                               next
[17:42:58.536]                             if (!grepl(pattern, name)) 
[17:42:58.536]                               next
[17:42:58.536]                             invokeRestart(restart)
[17:42:58.536]                             muffled <- TRUE
[17:42:58.536]                             break
[17:42:58.536]                           }
[17:42:58.536]                         }
[17:42:58.536]                       }
[17:42:58.536]                       invisible(muffled)
[17:42:58.536]                     }
[17:42:58.536]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.536]                   }
[17:42:58.536]                 }
[17:42:58.536]             }
[17:42:58.536]         }))
[17:42:58.536]     }, error = function(ex) {
[17:42:58.536]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.536]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.536]                 ...future.rng), started = ...future.startTime, 
[17:42:58.536]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.536]             version = "1.8"), class = "FutureResult")
[17:42:58.536]     }, finally = {
[17:42:58.536]         if (!identical(...future.workdir, getwd())) 
[17:42:58.536]             setwd(...future.workdir)
[17:42:58.536]         {
[17:42:58.536]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.536]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.536]             }
[17:42:58.536]             base::options(...future.oldOptions)
[17:42:58.536]             if (.Platform$OS.type == "windows") {
[17:42:58.536]                 old_names <- names(...future.oldEnvVars)
[17:42:58.536]                 envs <- base::Sys.getenv()
[17:42:58.536]                 names <- names(envs)
[17:42:58.536]                 common <- intersect(names, old_names)
[17:42:58.536]                 added <- setdiff(names, old_names)
[17:42:58.536]                 removed <- setdiff(old_names, names)
[17:42:58.536]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.536]                   envs[common]]
[17:42:58.536]                 NAMES <- toupper(changed)
[17:42:58.536]                 args <- list()
[17:42:58.536]                 for (kk in seq_along(NAMES)) {
[17:42:58.536]                   name <- changed[[kk]]
[17:42:58.536]                   NAME <- NAMES[[kk]]
[17:42:58.536]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.536]                     next
[17:42:58.536]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.536]                 }
[17:42:58.536]                 NAMES <- toupper(added)
[17:42:58.536]                 for (kk in seq_along(NAMES)) {
[17:42:58.536]                   name <- added[[kk]]
[17:42:58.536]                   NAME <- NAMES[[kk]]
[17:42:58.536]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.536]                     next
[17:42:58.536]                   args[[name]] <- ""
[17:42:58.536]                 }
[17:42:58.536]                 NAMES <- toupper(removed)
[17:42:58.536]                 for (kk in seq_along(NAMES)) {
[17:42:58.536]                   name <- removed[[kk]]
[17:42:58.536]                   NAME <- NAMES[[kk]]
[17:42:58.536]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.536]                     next
[17:42:58.536]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.536]                 }
[17:42:58.536]                 if (length(args) > 0) 
[17:42:58.536]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.536]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.536]             }
[17:42:58.536]             else {
[17:42:58.536]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.536]             }
[17:42:58.536]             {
[17:42:58.536]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.536]                   0L) {
[17:42:58.536]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.536]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.536]                   base::options(opts)
[17:42:58.536]                 }
[17:42:58.536]                 {
[17:42:58.536]                   {
[17:42:58.536]                     NULL
[17:42:58.536]                     RNGkind("Mersenne-Twister")
[17:42:58.536]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.536]                       inherits = FALSE)
[17:42:58.536]                   }
[17:42:58.536]                   options(future.plan = NULL)
[17:42:58.536]                   if (is.na(NA_character_)) 
[17:42:58.536]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.536]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.536]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.536]                   {
[17:42:58.536]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.536]                     if (!future$lazy) 
[17:42:58.536]                       future <- run(future)
[17:42:58.536]                     invisible(future)
[17:42:58.536]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.536]                 }
[17:42:58.536]             }
[17:42:58.536]         }
[17:42:58.536]     })
[17:42:58.536]     if (TRUE) {
[17:42:58.536]         base::sink(type = "output", split = FALSE)
[17:42:58.536]         if (TRUE) {
[17:42:58.536]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.536]         }
[17:42:58.536]         else {
[17:42:58.536]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.536]         }
[17:42:58.536]         base::close(...future.stdout)
[17:42:58.536]         ...future.stdout <- NULL
[17:42:58.536]     }
[17:42:58.536]     ...future.result$conditions <- ...future.conditions
[17:42:58.536]     ...future.result$finished <- base::Sys.time()
[17:42:58.536]     ...future.result
[17:42:58.536] }
[17:42:58.538] assign_globals() ...
[17:42:58.538] List of 1
[17:42:58.538]  $ ii: int 1
[17:42:58.538]  - attr(*, "where")=List of 1
[17:42:58.538]   ..$ ii:<environment: R_EmptyEnv> 
[17:42:58.538]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:58.538]  - attr(*, "resolved")= logi FALSE
[17:42:58.538]  - attr(*, "total_size")= num 56
[17:42:58.541] - copied ‘ii’ to environment
[17:42:58.541] assign_globals() ... done
[17:42:58.541] plan(): Setting new future strategy stack:
[17:42:58.541] List of future strategies:
[17:42:58.541] 1. sequential:
[17:42:58.541]    - args: function (..., envir = parent.frame())
[17:42:58.541]    - tweaked: FALSE
[17:42:58.541]    - call: NULL
[17:42:58.542] plan(): nbrOfWorkers() = 1
[17:42:58.542] plan(): Setting new future strategy stack:
[17:42:58.543] List of future strategies:
[17:42:58.543] 1. sequential:
[17:42:58.543]    - args: function (..., envir = parent.frame())
[17:42:58.543]    - tweaked: FALSE
[17:42:58.543]    - call: future::plan("sequential")
[17:42:58.543] plan(): nbrOfWorkers() = 1
[17:42:58.546] SequentialFuture started (and completed)
[17:42:58.546] Packages needed by the future expression (n = 0): <none>
[17:42:58.546] Packages needed by future strategies (n = 0): <none>
[17:42:58.546] {
[17:42:58.546]     {
[17:42:58.546]         {
[17:42:58.546]             ...future.startTime <- base::Sys.time()
[17:42:58.546]             {
[17:42:58.546]                 {
[17:42:58.546]                   {
[17:42:58.546]                     base::local({
[17:42:58.546]                       has_future <- base::requireNamespace("future", 
[17:42:58.546]                         quietly = TRUE)
[17:42:58.546]                       if (has_future) {
[17:42:58.546]                         ns <- base::getNamespace("future")
[17:42:58.546]                         version <- ns[[".package"]][["version"]]
[17:42:58.546]                         if (is.null(version)) 
[17:42:58.546]                           version <- utils::packageVersion("future")
[17:42:58.546]                       }
[17:42:58.546]                       else {
[17:42:58.546]                         version <- NULL
[17:42:58.546]                       }
[17:42:58.546]                       if (!has_future || version < "1.8.0") {
[17:42:58.546]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.546]                           "", base::R.version$version.string), 
[17:42:58.546]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.546]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.546]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.546]                             "release", "version")], collapse = " "), 
[17:42:58.546]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.546]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.546]                           info)
[17:42:58.546]                         info <- base::paste(info, collapse = "; ")
[17:42:58.546]                         if (!has_future) {
[17:42:58.546]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.546]                             info)
[17:42:58.546]                         }
[17:42:58.546]                         else {
[17:42:58.546]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.546]                             info, version)
[17:42:58.546]                         }
[17:42:58.546]                         base::stop(msg)
[17:42:58.546]                       }
[17:42:58.546]                     })
[17:42:58.546]                   }
[17:42:58.546]                   options(future.plan = NULL)
[17:42:58.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.546]                 }
[17:42:58.546]                 ...future.workdir <- getwd()
[17:42:58.546]             }
[17:42:58.546]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.546]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.546]         }
[17:42:58.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.546]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.546]             base::names(...future.oldOptions))
[17:42:58.546]     }
[17:42:58.546]     if (FALSE) {
[17:42:58.546]     }
[17:42:58.546]     else {
[17:42:58.546]         if (TRUE) {
[17:42:58.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.546]                 open = "w")
[17:42:58.546]         }
[17:42:58.546]         else {
[17:42:58.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.546]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.546]         }
[17:42:58.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.546]             base::sink(type = "output", split = FALSE)
[17:42:58.546]             base::close(...future.stdout)
[17:42:58.546]         }, add = TRUE)
[17:42:58.546]     }
[17:42:58.546]     ...future.frame <- base::sys.nframe()
[17:42:58.546]     ...future.conditions <- base::list()
[17:42:58.546]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.546]     if (FALSE) {
[17:42:58.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.546]     }
[17:42:58.546]     ...future.result <- base::tryCatch({
[17:42:58.546]         base::withCallingHandlers({
[17:42:58.546]             ...future.value <- base::withVisible(base::local({
[17:42:58.546]                 ii
[17:42:58.546]             }))
[17:42:58.546]             future::FutureResult(value = ...future.value$value, 
[17:42:58.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.546]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.546]                     ...future.globalenv.names))
[17:42:58.546]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.546]         }, condition = base::local({
[17:42:58.546]             c <- base::c
[17:42:58.546]             inherits <- base::inherits
[17:42:58.546]             invokeRestart <- base::invokeRestart
[17:42:58.546]             length <- base::length
[17:42:58.546]             list <- base::list
[17:42:58.546]             seq.int <- base::seq.int
[17:42:58.546]             signalCondition <- base::signalCondition
[17:42:58.546]             sys.calls <- base::sys.calls
[17:42:58.546]             `[[` <- base::`[[`
[17:42:58.546]             `+` <- base::`+`
[17:42:58.546]             `<<-` <- base::`<<-`
[17:42:58.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.546]                   3L)]
[17:42:58.546]             }
[17:42:58.546]             function(cond) {
[17:42:58.546]                 is_error <- inherits(cond, "error")
[17:42:58.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.546]                   NULL)
[17:42:58.546]                 if (is_error) {
[17:42:58.546]                   sessionInformation <- function() {
[17:42:58.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.546]                       search = base::search(), system = base::Sys.info())
[17:42:58.546]                   }
[17:42:58.546]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.546]                     cond$call), session = sessionInformation(), 
[17:42:58.546]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.546]                   signalCondition(cond)
[17:42:58.546]                 }
[17:42:58.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.546]                 "immediateCondition"))) {
[17:42:58.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.546]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.546]                   if (TRUE && !signal) {
[17:42:58.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.546]                     {
[17:42:58.546]                       inherits <- base::inherits
[17:42:58.546]                       invokeRestart <- base::invokeRestart
[17:42:58.546]                       is.null <- base::is.null
[17:42:58.546]                       muffled <- FALSE
[17:42:58.546]                       if (inherits(cond, "message")) {
[17:42:58.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.546]                         if (muffled) 
[17:42:58.546]                           invokeRestart("muffleMessage")
[17:42:58.546]                       }
[17:42:58.546]                       else if (inherits(cond, "warning")) {
[17:42:58.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.546]                         if (muffled) 
[17:42:58.546]                           invokeRestart("muffleWarning")
[17:42:58.546]                       }
[17:42:58.546]                       else if (inherits(cond, "condition")) {
[17:42:58.546]                         if (!is.null(pattern)) {
[17:42:58.546]                           computeRestarts <- base::computeRestarts
[17:42:58.546]                           grepl <- base::grepl
[17:42:58.546]                           restarts <- computeRestarts(cond)
[17:42:58.546]                           for (restart in restarts) {
[17:42:58.546]                             name <- restart$name
[17:42:58.546]                             if (is.null(name)) 
[17:42:58.546]                               next
[17:42:58.546]                             if (!grepl(pattern, name)) 
[17:42:58.546]                               next
[17:42:58.546]                             invokeRestart(restart)
[17:42:58.546]                             muffled <- TRUE
[17:42:58.546]                             break
[17:42:58.546]                           }
[17:42:58.546]                         }
[17:42:58.546]                       }
[17:42:58.546]                       invisible(muffled)
[17:42:58.546]                     }
[17:42:58.546]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.546]                   }
[17:42:58.546]                 }
[17:42:58.546]                 else {
[17:42:58.546]                   if (TRUE) {
[17:42:58.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.546]                     {
[17:42:58.546]                       inherits <- base::inherits
[17:42:58.546]                       invokeRestart <- base::invokeRestart
[17:42:58.546]                       is.null <- base::is.null
[17:42:58.546]                       muffled <- FALSE
[17:42:58.546]                       if (inherits(cond, "message")) {
[17:42:58.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.546]                         if (muffled) 
[17:42:58.546]                           invokeRestart("muffleMessage")
[17:42:58.546]                       }
[17:42:58.546]                       else if (inherits(cond, "warning")) {
[17:42:58.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.546]                         if (muffled) 
[17:42:58.546]                           invokeRestart("muffleWarning")
[17:42:58.546]                       }
[17:42:58.546]                       else if (inherits(cond, "condition")) {
[17:42:58.546]                         if (!is.null(pattern)) {
[17:42:58.546]                           computeRestarts <- base::computeRestarts
[17:42:58.546]                           grepl <- base::grepl
[17:42:58.546]                           restarts <- computeRestarts(cond)
[17:42:58.546]                           for (restart in restarts) {
[17:42:58.546]                             name <- restart$name
[17:42:58.546]                             if (is.null(name)) 
[17:42:58.546]                               next
[17:42:58.546]                             if (!grepl(pattern, name)) 
[17:42:58.546]                               next
[17:42:58.546]                             invokeRestart(restart)
[17:42:58.546]                             muffled <- TRUE
[17:42:58.546]                             break
[17:42:58.546]                           }
[17:42:58.546]                         }
[17:42:58.546]                       }
[17:42:58.546]                       invisible(muffled)
[17:42:58.546]                     }
[17:42:58.546]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.546]                   }
[17:42:58.546]                 }
[17:42:58.546]             }
[17:42:58.546]         }))
[17:42:58.546]     }, error = function(ex) {
[17:42:58.546]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.546]                 ...future.rng), started = ...future.startTime, 
[17:42:58.546]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.546]             version = "1.8"), class = "FutureResult")
[17:42:58.546]     }, finally = {
[17:42:58.546]         if (!identical(...future.workdir, getwd())) 
[17:42:58.546]             setwd(...future.workdir)
[17:42:58.546]         {
[17:42:58.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.546]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.546]             }
[17:42:58.546]             base::options(...future.oldOptions)
[17:42:58.546]             if (.Platform$OS.type == "windows") {
[17:42:58.546]                 old_names <- names(...future.oldEnvVars)
[17:42:58.546]                 envs <- base::Sys.getenv()
[17:42:58.546]                 names <- names(envs)
[17:42:58.546]                 common <- intersect(names, old_names)
[17:42:58.546]                 added <- setdiff(names, old_names)
[17:42:58.546]                 removed <- setdiff(old_names, names)
[17:42:58.546]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.546]                   envs[common]]
[17:42:58.546]                 NAMES <- toupper(changed)
[17:42:58.546]                 args <- list()
[17:42:58.546]                 for (kk in seq_along(NAMES)) {
[17:42:58.546]                   name <- changed[[kk]]
[17:42:58.546]                   NAME <- NAMES[[kk]]
[17:42:58.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.546]                     next
[17:42:58.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.546]                 }
[17:42:58.546]                 NAMES <- toupper(added)
[17:42:58.546]                 for (kk in seq_along(NAMES)) {
[17:42:58.546]                   name <- added[[kk]]
[17:42:58.546]                   NAME <- NAMES[[kk]]
[17:42:58.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.546]                     next
[17:42:58.546]                   args[[name]] <- ""
[17:42:58.546]                 }
[17:42:58.546]                 NAMES <- toupper(removed)
[17:42:58.546]                 for (kk in seq_along(NAMES)) {
[17:42:58.546]                   name <- removed[[kk]]
[17:42:58.546]                   NAME <- NAMES[[kk]]
[17:42:58.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.546]                     next
[17:42:58.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.546]                 }
[17:42:58.546]                 if (length(args) > 0) 
[17:42:58.546]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.546]             }
[17:42:58.546]             else {
[17:42:58.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.546]             }
[17:42:58.546]             {
[17:42:58.546]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.546]                   0L) {
[17:42:58.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.546]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.546]                   base::options(opts)
[17:42:58.546]                 }
[17:42:58.546]                 {
[17:42:58.546]                   {
[17:42:58.546]                     NULL
[17:42:58.546]                     RNGkind("Mersenne-Twister")
[17:42:58.546]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.546]                       inherits = FALSE)
[17:42:58.546]                   }
[17:42:58.546]                   options(future.plan = NULL)
[17:42:58.546]                   if (is.na(NA_character_)) 
[17:42:58.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.546]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.546]                   {
[17:42:58.546]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.546]                     if (!future$lazy) 
[17:42:58.546]                       future <- run(future)
[17:42:58.546]                     invisible(future)
[17:42:58.546]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.546]                 }
[17:42:58.546]             }
[17:42:58.546]         }
[17:42:58.546]     })
[17:42:58.546]     if (TRUE) {
[17:42:58.546]         base::sink(type = "output", split = FALSE)
[17:42:58.546]         if (TRUE) {
[17:42:58.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.546]         }
[17:42:58.546]         else {
[17:42:58.546]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.546]         }
[17:42:58.546]         base::close(...future.stdout)
[17:42:58.546]         ...future.stdout <- NULL
[17:42:58.546]     }
[17:42:58.546]     ...future.result$conditions <- ...future.conditions
[17:42:58.546]     ...future.result$finished <- base::Sys.time()
[17:42:58.546]     ...future.result
[17:42:58.546] }
[17:42:58.548] assign_globals() ...
[17:42:58.548] List of 1
[17:42:58.548]  $ ii: int 2
[17:42:58.548]  - attr(*, "where")=List of 1
[17:42:58.548]   ..$ ii:<environment: R_EmptyEnv> 
[17:42:58.548]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:58.548]  - attr(*, "resolved")= logi FALSE
[17:42:58.548]  - attr(*, "total_size")= num 56
[17:42:58.550] - copied ‘ii’ to environment
[17:42:58.551] assign_globals() ... done
[17:42:58.551] plan(): Setting new future strategy stack:
[17:42:58.551] List of future strategies:
[17:42:58.551] 1. sequential:
[17:42:58.551]    - args: function (..., envir = parent.frame())
[17:42:58.551]    - tweaked: FALSE
[17:42:58.551]    - call: NULL
[17:42:58.551] plan(): nbrOfWorkers() = 1
[17:42:58.552] plan(): Setting new future strategy stack:
[17:42:58.552] List of future strategies:
[17:42:58.552] 1. sequential:
[17:42:58.552]    - args: function (..., envir = parent.frame())
[17:42:58.552]    - tweaked: FALSE
[17:42:58.552]    - call: future::plan("sequential")
[17:42:58.553] plan(): nbrOfWorkers() = 1
[17:42:58.553] SequentialFuture started (and completed)
*** multisession() - workers inherit .libPaths()
[17:42:58.553] getGlobalsAndPackages() ...
[17:42:58.553] Searching for globals...
[17:42:58.554] - globals found: [1] ‘.libPaths’
[17:42:58.554] Searching for globals ... DONE
[17:42:58.554] Resolving globals: FALSE
[17:42:58.554] 
[17:42:58.554] 
[17:42:58.554] getGlobalsAndPackages() ... DONE
[17:42:58.555] run() for ‘Future’ ...
[17:42:58.555] - state: ‘created’
[17:42:58.555] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:58.555] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:58.555] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:58.556]   - Field: ‘label’
[17:42:58.556]   - Field: ‘local’
[17:42:58.556]   - Field: ‘owner’
[17:42:58.556]   - Field: ‘envir’
[17:42:58.556]   - Field: ‘packages’
[17:42:58.556]   - Field: ‘gc’
[17:42:58.556]   - Field: ‘conditions’
[17:42:58.556]   - Field: ‘expr’
[17:42:58.556]   - Field: ‘uuid’
[17:42:58.556]   - Field: ‘seed’
[17:42:58.557]   - Field: ‘version’
[17:42:58.557]   - Field: ‘result’
[17:42:58.557]   - Field: ‘asynchronous’
[17:42:58.557]   - Field: ‘calls’
[17:42:58.557]   - Field: ‘globals’
[17:42:58.557]   - Field: ‘stdout’
[17:42:58.557]   - Field: ‘earlySignal’
[17:42:58.557]   - Field: ‘lazy’
[17:42:58.557]   - Field: ‘state’
[17:42:58.557] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:58.557] - Launch lazy future ...
[17:42:58.558] Packages needed by the future expression (n = 0): <none>
[17:42:58.558] Packages needed by future strategies (n = 0): <none>
[17:42:58.558] {
[17:42:58.558]     {
[17:42:58.558]         {
[17:42:58.558]             ...future.startTime <- base::Sys.time()
[17:42:58.558]             {
[17:42:58.558]                 {
[17:42:58.558]                   {
[17:42:58.558]                     base::local({
[17:42:58.558]                       has_future <- base::requireNamespace("future", 
[17:42:58.558]                         quietly = TRUE)
[17:42:58.558]                       if (has_future) {
[17:42:58.558]                         ns <- base::getNamespace("future")
[17:42:58.558]                         version <- ns[[".package"]][["version"]]
[17:42:58.558]                         if (is.null(version)) 
[17:42:58.558]                           version <- utils::packageVersion("future")
[17:42:58.558]                       }
[17:42:58.558]                       else {
[17:42:58.558]                         version <- NULL
[17:42:58.558]                       }
[17:42:58.558]                       if (!has_future || version < "1.8.0") {
[17:42:58.558]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.558]                           "", base::R.version$version.string), 
[17:42:58.558]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.558]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.558]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.558]                             "release", "version")], collapse = " "), 
[17:42:58.558]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.558]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.558]                           info)
[17:42:58.558]                         info <- base::paste(info, collapse = "; ")
[17:42:58.558]                         if (!has_future) {
[17:42:58.558]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.558]                             info)
[17:42:58.558]                         }
[17:42:58.558]                         else {
[17:42:58.558]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.558]                             info, version)
[17:42:58.558]                         }
[17:42:58.558]                         base::stop(msg)
[17:42:58.558]                       }
[17:42:58.558]                     })
[17:42:58.558]                   }
[17:42:58.558]                   options(future.plan = NULL)
[17:42:58.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.558]                 }
[17:42:58.558]                 ...future.workdir <- getwd()
[17:42:58.558]             }
[17:42:58.558]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.558]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.558]         }
[17:42:58.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.558]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.558]             base::names(...future.oldOptions))
[17:42:58.558]     }
[17:42:58.558]     if (FALSE) {
[17:42:58.558]     }
[17:42:58.558]     else {
[17:42:58.558]         if (TRUE) {
[17:42:58.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.558]                 open = "w")
[17:42:58.558]         }
[17:42:58.558]         else {
[17:42:58.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.558]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.558]         }
[17:42:58.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.558]             base::sink(type = "output", split = FALSE)
[17:42:58.558]             base::close(...future.stdout)
[17:42:58.558]         }, add = TRUE)
[17:42:58.558]     }
[17:42:58.558]     ...future.frame <- base::sys.nframe()
[17:42:58.558]     ...future.conditions <- base::list()
[17:42:58.558]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.558]     if (FALSE) {
[17:42:58.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.558]     }
[17:42:58.558]     ...future.result <- base::tryCatch({
[17:42:58.558]         base::withCallingHandlers({
[17:42:58.558]             ...future.value <- base::withVisible(base::local(.libPaths()))
[17:42:58.558]             future::FutureResult(value = ...future.value$value, 
[17:42:58.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.558]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.558]                     ...future.globalenv.names))
[17:42:58.558]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.558]         }, condition = base::local({
[17:42:58.558]             c <- base::c
[17:42:58.558]             inherits <- base::inherits
[17:42:58.558]             invokeRestart <- base::invokeRestart
[17:42:58.558]             length <- base::length
[17:42:58.558]             list <- base::list
[17:42:58.558]             seq.int <- base::seq.int
[17:42:58.558]             signalCondition <- base::signalCondition
[17:42:58.558]             sys.calls <- base::sys.calls
[17:42:58.558]             `[[` <- base::`[[`
[17:42:58.558]             `+` <- base::`+`
[17:42:58.558]             `<<-` <- base::`<<-`
[17:42:58.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.558]                   3L)]
[17:42:58.558]             }
[17:42:58.558]             function(cond) {
[17:42:58.558]                 is_error <- inherits(cond, "error")
[17:42:58.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.558]                   NULL)
[17:42:58.558]                 if (is_error) {
[17:42:58.558]                   sessionInformation <- function() {
[17:42:58.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.558]                       search = base::search(), system = base::Sys.info())
[17:42:58.558]                   }
[17:42:58.558]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.558]                     cond$call), session = sessionInformation(), 
[17:42:58.558]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.558]                   signalCondition(cond)
[17:42:58.558]                 }
[17:42:58.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.558]                 "immediateCondition"))) {
[17:42:58.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.558]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.558]                   if (TRUE && !signal) {
[17:42:58.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.558]                     {
[17:42:58.558]                       inherits <- base::inherits
[17:42:58.558]                       invokeRestart <- base::invokeRestart
[17:42:58.558]                       is.null <- base::is.null
[17:42:58.558]                       muffled <- FALSE
[17:42:58.558]                       if (inherits(cond, "message")) {
[17:42:58.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.558]                         if (muffled) 
[17:42:58.558]                           invokeRestart("muffleMessage")
[17:42:58.558]                       }
[17:42:58.558]                       else if (inherits(cond, "warning")) {
[17:42:58.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.558]                         if (muffled) 
[17:42:58.558]                           invokeRestart("muffleWarning")
[17:42:58.558]                       }
[17:42:58.558]                       else if (inherits(cond, "condition")) {
[17:42:58.558]                         if (!is.null(pattern)) {
[17:42:58.558]                           computeRestarts <- base::computeRestarts
[17:42:58.558]                           grepl <- base::grepl
[17:42:58.558]                           restarts <- computeRestarts(cond)
[17:42:58.558]                           for (restart in restarts) {
[17:42:58.558]                             name <- restart$name
[17:42:58.558]                             if (is.null(name)) 
[17:42:58.558]                               next
[17:42:58.558]                             if (!grepl(pattern, name)) 
[17:42:58.558]                               next
[17:42:58.558]                             invokeRestart(restart)
[17:42:58.558]                             muffled <- TRUE
[17:42:58.558]                             break
[17:42:58.558]                           }
[17:42:58.558]                         }
[17:42:58.558]                       }
[17:42:58.558]                       invisible(muffled)
[17:42:58.558]                     }
[17:42:58.558]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.558]                   }
[17:42:58.558]                 }
[17:42:58.558]                 else {
[17:42:58.558]                   if (TRUE) {
[17:42:58.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.558]                     {
[17:42:58.558]                       inherits <- base::inherits
[17:42:58.558]                       invokeRestart <- base::invokeRestart
[17:42:58.558]                       is.null <- base::is.null
[17:42:58.558]                       muffled <- FALSE
[17:42:58.558]                       if (inherits(cond, "message")) {
[17:42:58.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.558]                         if (muffled) 
[17:42:58.558]                           invokeRestart("muffleMessage")
[17:42:58.558]                       }
[17:42:58.558]                       else if (inherits(cond, "warning")) {
[17:42:58.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.558]                         if (muffled) 
[17:42:58.558]                           invokeRestart("muffleWarning")
[17:42:58.558]                       }
[17:42:58.558]                       else if (inherits(cond, "condition")) {
[17:42:58.558]                         if (!is.null(pattern)) {
[17:42:58.558]                           computeRestarts <- base::computeRestarts
[17:42:58.558]                           grepl <- base::grepl
[17:42:58.558]                           restarts <- computeRestarts(cond)
[17:42:58.558]                           for (restart in restarts) {
[17:42:58.558]                             name <- restart$name
[17:42:58.558]                             if (is.null(name)) 
[17:42:58.558]                               next
[17:42:58.558]                             if (!grepl(pattern, name)) 
[17:42:58.558]                               next
[17:42:58.558]                             invokeRestart(restart)
[17:42:58.558]                             muffled <- TRUE
[17:42:58.558]                             break
[17:42:58.558]                           }
[17:42:58.558]                         }
[17:42:58.558]                       }
[17:42:58.558]                       invisible(muffled)
[17:42:58.558]                     }
[17:42:58.558]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.558]                   }
[17:42:58.558]                 }
[17:42:58.558]             }
[17:42:58.558]         }))
[17:42:58.558]     }, error = function(ex) {
[17:42:58.558]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.558]                 ...future.rng), started = ...future.startTime, 
[17:42:58.558]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.558]             version = "1.8"), class = "FutureResult")
[17:42:58.558]     }, finally = {
[17:42:58.558]         if (!identical(...future.workdir, getwd())) 
[17:42:58.558]             setwd(...future.workdir)
[17:42:58.558]         {
[17:42:58.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.558]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.558]             }
[17:42:58.558]             base::options(...future.oldOptions)
[17:42:58.558]             if (.Platform$OS.type == "windows") {
[17:42:58.558]                 old_names <- names(...future.oldEnvVars)
[17:42:58.558]                 envs <- base::Sys.getenv()
[17:42:58.558]                 names <- names(envs)
[17:42:58.558]                 common <- intersect(names, old_names)
[17:42:58.558]                 added <- setdiff(names, old_names)
[17:42:58.558]                 removed <- setdiff(old_names, names)
[17:42:58.558]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.558]                   envs[common]]
[17:42:58.558]                 NAMES <- toupper(changed)
[17:42:58.558]                 args <- list()
[17:42:58.558]                 for (kk in seq_along(NAMES)) {
[17:42:58.558]                   name <- changed[[kk]]
[17:42:58.558]                   NAME <- NAMES[[kk]]
[17:42:58.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.558]                     next
[17:42:58.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.558]                 }
[17:42:58.558]                 NAMES <- toupper(added)
[17:42:58.558]                 for (kk in seq_along(NAMES)) {
[17:42:58.558]                   name <- added[[kk]]
[17:42:58.558]                   NAME <- NAMES[[kk]]
[17:42:58.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.558]                     next
[17:42:58.558]                   args[[name]] <- ""
[17:42:58.558]                 }
[17:42:58.558]                 NAMES <- toupper(removed)
[17:42:58.558]                 for (kk in seq_along(NAMES)) {
[17:42:58.558]                   name <- removed[[kk]]
[17:42:58.558]                   NAME <- NAMES[[kk]]
[17:42:58.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.558]                     next
[17:42:58.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.558]                 }
[17:42:58.558]                 if (length(args) > 0) 
[17:42:58.558]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.558]             }
[17:42:58.558]             else {
[17:42:58.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.558]             }
[17:42:58.558]             {
[17:42:58.558]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.558]                   0L) {
[17:42:58.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.558]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.558]                   base::options(opts)
[17:42:58.558]                 }
[17:42:58.558]                 {
[17:42:58.558]                   {
[17:42:58.558]                     NULL
[17:42:58.558]                     RNGkind("Mersenne-Twister")
[17:42:58.558]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.558]                       inherits = FALSE)
[17:42:58.558]                   }
[17:42:58.558]                   options(future.plan = NULL)
[17:42:58.558]                   if (is.na(NA_character_)) 
[17:42:58.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.558]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.558]                   {
[17:42:58.558]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.558]                     if (!future$lazy) 
[17:42:58.558]                       future <- run(future)
[17:42:58.558]                     invisible(future)
[17:42:58.558]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.558]                 }
[17:42:58.558]             }
[17:42:58.558]         }
[17:42:58.558]     })
[17:42:58.558]     if (TRUE) {
[17:42:58.558]         base::sink(type = "output", split = FALSE)
[17:42:58.558]         if (TRUE) {
[17:42:58.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.558]         }
[17:42:58.558]         else {
[17:42:58.558]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.558]         }
[17:42:58.558]         base::close(...future.stdout)
[17:42:58.558]         ...future.stdout <- NULL
[17:42:58.558]     }
[17:42:58.558]     ...future.result$conditions <- ...future.conditions
[17:42:58.558]     ...future.result$finished <- base::Sys.time()
[17:42:58.558]     ...future.result
[17:42:58.558] }
[17:42:58.560] plan(): Setting new future strategy stack:
[17:42:58.560] List of future strategies:
[17:42:58.560] 1. sequential:
[17:42:58.560]    - args: function (..., envir = parent.frame())
[17:42:58.560]    - tweaked: FALSE
[17:42:58.560]    - call: NULL
[17:42:58.560] plan(): nbrOfWorkers() = 1
[17:42:58.561] plan(): Setting new future strategy stack:
[17:42:58.561] List of future strategies:
[17:42:58.561] 1. sequential:
[17:42:58.561]    - args: function (..., envir = parent.frame())
[17:42:58.561]    - tweaked: FALSE
[17:42:58.561]    - call: future::plan("sequential")
[17:42:58.562] plan(): nbrOfWorkers() = 1
[17:42:58.562] SequentialFuture started (and completed)
[17:42:58.562] - Launch lazy future ... done
[17:42:58.562] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[17:42:58.566] getGlobalsAndPackages() ...
[17:42:58.567] Searching for globals...
[17:42:58.568] - globals found: [2] ‘{’, ‘stop’
[17:42:58.568] Searching for globals ... DONE
[17:42:58.568] Resolving globals: FALSE
[17:42:58.568] 
[17:42:58.569] 
[17:42:58.569] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:58.569] Packages needed by the future expression (n = 0): <none>
[17:42:58.570] Packages needed by future strategies (n = 0): <none>
[17:42:58.570] {
[17:42:58.570]     {
[17:42:58.570]         {
[17:42:58.570]             ...future.startTime <- base::Sys.time()
[17:42:58.570]             {
[17:42:58.570]                 {
[17:42:58.570]                   {
[17:42:58.570]                     base::local({
[17:42:58.570]                       has_future <- base::requireNamespace("future", 
[17:42:58.570]                         quietly = TRUE)
[17:42:58.570]                       if (has_future) {
[17:42:58.570]                         ns <- base::getNamespace("future")
[17:42:58.570]                         version <- ns[[".package"]][["version"]]
[17:42:58.570]                         if (is.null(version)) 
[17:42:58.570]                           version <- utils::packageVersion("future")
[17:42:58.570]                       }
[17:42:58.570]                       else {
[17:42:58.570]                         version <- NULL
[17:42:58.570]                       }
[17:42:58.570]                       if (!has_future || version < "1.8.0") {
[17:42:58.570]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.570]                           "", base::R.version$version.string), 
[17:42:58.570]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.570]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.570]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.570]                             "release", "version")], collapse = " "), 
[17:42:58.570]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.570]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.570]                           info)
[17:42:58.570]                         info <- base::paste(info, collapse = "; ")
[17:42:58.570]                         if (!has_future) {
[17:42:58.570]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.570]                             info)
[17:42:58.570]                         }
[17:42:58.570]                         else {
[17:42:58.570]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.570]                             info, version)
[17:42:58.570]                         }
[17:42:58.570]                         base::stop(msg)
[17:42:58.570]                       }
[17:42:58.570]                     })
[17:42:58.570]                   }
[17:42:58.570]                   options(future.plan = NULL)
[17:42:58.570]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.570]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.570]                 }
[17:42:58.570]                 ...future.workdir <- getwd()
[17:42:58.570]             }
[17:42:58.570]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.570]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.570]         }
[17:42:58.570]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.570]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.570]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.570]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.570]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.570]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.570]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.570]             base::names(...future.oldOptions))
[17:42:58.570]     }
[17:42:58.570]     if (FALSE) {
[17:42:58.570]     }
[17:42:58.570]     else {
[17:42:58.570]         if (TRUE) {
[17:42:58.570]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.570]                 open = "w")
[17:42:58.570]         }
[17:42:58.570]         else {
[17:42:58.570]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.570]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.570]         }
[17:42:58.570]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.570]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.570]             base::sink(type = "output", split = FALSE)
[17:42:58.570]             base::close(...future.stdout)
[17:42:58.570]         }, add = TRUE)
[17:42:58.570]     }
[17:42:58.570]     ...future.frame <- base::sys.nframe()
[17:42:58.570]     ...future.conditions <- base::list()
[17:42:58.570]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.570]     if (FALSE) {
[17:42:58.570]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.570]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.570]     }
[17:42:58.570]     ...future.result <- base::tryCatch({
[17:42:58.570]         base::withCallingHandlers({
[17:42:58.570]             ...future.value <- base::withVisible(base::local({
[17:42:58.570]                 stop("Whoops!")
[17:42:58.570]                 1
[17:42:58.570]             }))
[17:42:58.570]             future::FutureResult(value = ...future.value$value, 
[17:42:58.570]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.570]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.570]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.570]                     ...future.globalenv.names))
[17:42:58.570]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.570]         }, condition = base::local({
[17:42:58.570]             c <- base::c
[17:42:58.570]             inherits <- base::inherits
[17:42:58.570]             invokeRestart <- base::invokeRestart
[17:42:58.570]             length <- base::length
[17:42:58.570]             list <- base::list
[17:42:58.570]             seq.int <- base::seq.int
[17:42:58.570]             signalCondition <- base::signalCondition
[17:42:58.570]             sys.calls <- base::sys.calls
[17:42:58.570]             `[[` <- base::`[[`
[17:42:58.570]             `+` <- base::`+`
[17:42:58.570]             `<<-` <- base::`<<-`
[17:42:58.570]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.570]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.570]                   3L)]
[17:42:58.570]             }
[17:42:58.570]             function(cond) {
[17:42:58.570]                 is_error <- inherits(cond, "error")
[17:42:58.570]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.570]                   NULL)
[17:42:58.570]                 if (is_error) {
[17:42:58.570]                   sessionInformation <- function() {
[17:42:58.570]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.570]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.570]                       search = base::search(), system = base::Sys.info())
[17:42:58.570]                   }
[17:42:58.570]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.570]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.570]                     cond$call), session = sessionInformation(), 
[17:42:58.570]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.570]                   signalCondition(cond)
[17:42:58.570]                 }
[17:42:58.570]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.570]                 "immediateCondition"))) {
[17:42:58.570]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.570]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.570]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.570]                   if (TRUE && !signal) {
[17:42:58.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.570]                     {
[17:42:58.570]                       inherits <- base::inherits
[17:42:58.570]                       invokeRestart <- base::invokeRestart
[17:42:58.570]                       is.null <- base::is.null
[17:42:58.570]                       muffled <- FALSE
[17:42:58.570]                       if (inherits(cond, "message")) {
[17:42:58.570]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.570]                         if (muffled) 
[17:42:58.570]                           invokeRestart("muffleMessage")
[17:42:58.570]                       }
[17:42:58.570]                       else if (inherits(cond, "warning")) {
[17:42:58.570]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.570]                         if (muffled) 
[17:42:58.570]                           invokeRestart("muffleWarning")
[17:42:58.570]                       }
[17:42:58.570]                       else if (inherits(cond, "condition")) {
[17:42:58.570]                         if (!is.null(pattern)) {
[17:42:58.570]                           computeRestarts <- base::computeRestarts
[17:42:58.570]                           grepl <- base::grepl
[17:42:58.570]                           restarts <- computeRestarts(cond)
[17:42:58.570]                           for (restart in restarts) {
[17:42:58.570]                             name <- restart$name
[17:42:58.570]                             if (is.null(name)) 
[17:42:58.570]                               next
[17:42:58.570]                             if (!grepl(pattern, name)) 
[17:42:58.570]                               next
[17:42:58.570]                             invokeRestart(restart)
[17:42:58.570]                             muffled <- TRUE
[17:42:58.570]                             break
[17:42:58.570]                           }
[17:42:58.570]                         }
[17:42:58.570]                       }
[17:42:58.570]                       invisible(muffled)
[17:42:58.570]                     }
[17:42:58.570]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.570]                   }
[17:42:58.570]                 }
[17:42:58.570]                 else {
[17:42:58.570]                   if (TRUE) {
[17:42:58.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.570]                     {
[17:42:58.570]                       inherits <- base::inherits
[17:42:58.570]                       invokeRestart <- base::invokeRestart
[17:42:58.570]                       is.null <- base::is.null
[17:42:58.570]                       muffled <- FALSE
[17:42:58.570]                       if (inherits(cond, "message")) {
[17:42:58.570]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.570]                         if (muffled) 
[17:42:58.570]                           invokeRestart("muffleMessage")
[17:42:58.570]                       }
[17:42:58.570]                       else if (inherits(cond, "warning")) {
[17:42:58.570]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.570]                         if (muffled) 
[17:42:58.570]                           invokeRestart("muffleWarning")
[17:42:58.570]                       }
[17:42:58.570]                       else if (inherits(cond, "condition")) {
[17:42:58.570]                         if (!is.null(pattern)) {
[17:42:58.570]                           computeRestarts <- base::computeRestarts
[17:42:58.570]                           grepl <- base::grepl
[17:42:58.570]                           restarts <- computeRestarts(cond)
[17:42:58.570]                           for (restart in restarts) {
[17:42:58.570]                             name <- restart$name
[17:42:58.570]                             if (is.null(name)) 
[17:42:58.570]                               next
[17:42:58.570]                             if (!grepl(pattern, name)) 
[17:42:58.570]                               next
[17:42:58.570]                             invokeRestart(restart)
[17:42:58.570]                             muffled <- TRUE
[17:42:58.570]                             break
[17:42:58.570]                           }
[17:42:58.570]                         }
[17:42:58.570]                       }
[17:42:58.570]                       invisible(muffled)
[17:42:58.570]                     }
[17:42:58.570]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.570]                   }
[17:42:58.570]                 }
[17:42:58.570]             }
[17:42:58.570]         }))
[17:42:58.570]     }, error = function(ex) {
[17:42:58.570]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.570]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.570]                 ...future.rng), started = ...future.startTime, 
[17:42:58.570]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.570]             version = "1.8"), class = "FutureResult")
[17:42:58.570]     }, finally = {
[17:42:58.570]         if (!identical(...future.workdir, getwd())) 
[17:42:58.570]             setwd(...future.workdir)
[17:42:58.570]         {
[17:42:58.570]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.570]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.570]             }
[17:42:58.570]             base::options(...future.oldOptions)
[17:42:58.570]             if (.Platform$OS.type == "windows") {
[17:42:58.570]                 old_names <- names(...future.oldEnvVars)
[17:42:58.570]                 envs <- base::Sys.getenv()
[17:42:58.570]                 names <- names(envs)
[17:42:58.570]                 common <- intersect(names, old_names)
[17:42:58.570]                 added <- setdiff(names, old_names)
[17:42:58.570]                 removed <- setdiff(old_names, names)
[17:42:58.570]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.570]                   envs[common]]
[17:42:58.570]                 NAMES <- toupper(changed)
[17:42:58.570]                 args <- list()
[17:42:58.570]                 for (kk in seq_along(NAMES)) {
[17:42:58.570]                   name <- changed[[kk]]
[17:42:58.570]                   NAME <- NAMES[[kk]]
[17:42:58.570]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.570]                     next
[17:42:58.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.570]                 }
[17:42:58.570]                 NAMES <- toupper(added)
[17:42:58.570]                 for (kk in seq_along(NAMES)) {
[17:42:58.570]                   name <- added[[kk]]
[17:42:58.570]                   NAME <- NAMES[[kk]]
[17:42:58.570]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.570]                     next
[17:42:58.570]                   args[[name]] <- ""
[17:42:58.570]                 }
[17:42:58.570]                 NAMES <- toupper(removed)
[17:42:58.570]                 for (kk in seq_along(NAMES)) {
[17:42:58.570]                   name <- removed[[kk]]
[17:42:58.570]                   NAME <- NAMES[[kk]]
[17:42:58.570]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.570]                     next
[17:42:58.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.570]                 }
[17:42:58.570]                 if (length(args) > 0) 
[17:42:58.570]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.570]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.570]             }
[17:42:58.570]             else {
[17:42:58.570]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.570]             }
[17:42:58.570]             {
[17:42:58.570]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.570]                   0L) {
[17:42:58.570]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.570]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.570]                   base::options(opts)
[17:42:58.570]                 }
[17:42:58.570]                 {
[17:42:58.570]                   {
[17:42:58.570]                     NULL
[17:42:58.570]                     RNGkind("Mersenne-Twister")
[17:42:58.570]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.570]                       inherits = FALSE)
[17:42:58.570]                   }
[17:42:58.570]                   options(future.plan = NULL)
[17:42:58.570]                   if (is.na(NA_character_)) 
[17:42:58.570]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.570]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.570]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.570]                   {
[17:42:58.570]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.570]                     if (!future$lazy) 
[17:42:58.570]                       future <- run(future)
[17:42:58.570]                     invisible(future)
[17:42:58.570]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.570]                 }
[17:42:58.570]             }
[17:42:58.570]         }
[17:42:58.570]     })
[17:42:58.570]     if (TRUE) {
[17:42:58.570]         base::sink(type = "output", split = FALSE)
[17:42:58.570]         if (TRUE) {
[17:42:58.570]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.570]         }
[17:42:58.570]         else {
[17:42:58.570]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.570]         }
[17:42:58.570]         base::close(...future.stdout)
[17:42:58.570]         ...future.stdout <- NULL
[17:42:58.570]     }
[17:42:58.570]     ...future.result$conditions <- ...future.conditions
[17:42:58.570]     ...future.result$finished <- base::Sys.time()
[17:42:58.570]     ...future.result
[17:42:58.570] }
[17:42:58.572] plan(): Setting new future strategy stack:
[17:42:58.572] List of future strategies:
[17:42:58.572] 1. sequential:
[17:42:58.572]    - args: function (..., envir = parent.frame())
[17:42:58.572]    - tweaked: FALSE
[17:42:58.572]    - call: NULL
[17:42:58.572] plan(): nbrOfWorkers() = 1
[17:42:58.573] plan(): Setting new future strategy stack:
[17:42:58.574] List of future strategies:
[17:42:58.574] 1. sequential:
[17:42:58.574]    - args: function (..., envir = parent.frame())
[17:42:58.574]    - tweaked: FALSE
[17:42:58.574]    - call: future::plan("sequential")
[17:42:58.574] plan(): nbrOfWorkers() = 1
[17:42:58.574] SequentialFuture started (and completed)
[17:42:58.574] signalConditions() ...
[17:42:58.575]  - include = ‘immediateCondition’
[17:42:58.575]  - exclude = 
[17:42:58.575]  - resignal = FALSE
[17:42:58.575]  - Number of conditions: 1
[17:42:58.575] signalConditions() ... done
[17:42:58.575] signalConditions() ...
[17:42:58.575]  - include = ‘immediateCondition’
[17:42:58.575]  - exclude = 
[17:42:58.575]  - resignal = FALSE
[17:42:58.575]  - Number of conditions: 1
[17:42:58.576] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:42:58.576] signalConditions() ...
[17:42:58.576]  - include = ‘immediateCondition’
[17:42:58.576]  - exclude = 
[17:42:58.576]  - resignal = FALSE
[17:42:58.576]  - Number of conditions: 1
[17:42:58.576] signalConditions() ... done
[17:42:58.576] Future state: ‘finished’
[17:42:58.577] signalConditions() ...
[17:42:58.577]  - include = ‘condition’
[17:42:58.577]  - exclude = ‘immediateCondition’
[17:42:58.577]  - resignal = TRUE
[17:42:58.577]  - Number of conditions: 1
[17:42:58.577]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:42:58.577] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:42:58.577] signalConditions() ...
[17:42:58.578]  - include = ‘immediateCondition’
[17:42:58.578]  - exclude = 
[17:42:58.578]  - resignal = FALSE
[17:42:58.578]  - Number of conditions: 1
[17:42:58.578] signalConditions() ... done
[17:42:58.578] Future state: ‘finished’
[17:42:58.578] signalConditions() ...
[17:42:58.578]  - include = ‘condition’
[17:42:58.578]  - exclude = ‘immediateCondition’
[17:42:58.578]  - resignal = TRUE
[17:42:58.578]  - Number of conditions: 1
[17:42:58.579]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:42:58.579] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:42:58.583] getGlobalsAndPackages() ...
[17:42:58.583] Searching for globals...
[17:42:58.586] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:42:58.586] Searching for globals ... DONE
[17:42:58.586] Resolving globals: FALSE
[17:42:58.586] 
[17:42:58.586] 
[17:42:58.587] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:58.587] Packages needed by the future expression (n = 0): <none>
[17:42:58.587] Packages needed by future strategies (n = 0): <none>
[17:42:58.588] {
[17:42:58.588]     {
[17:42:58.588]         {
[17:42:58.588]             ...future.startTime <- base::Sys.time()
[17:42:58.588]             {
[17:42:58.588]                 {
[17:42:58.588]                   {
[17:42:58.588]                     base::local({
[17:42:58.588]                       has_future <- base::requireNamespace("future", 
[17:42:58.588]                         quietly = TRUE)
[17:42:58.588]                       if (has_future) {
[17:42:58.588]                         ns <- base::getNamespace("future")
[17:42:58.588]                         version <- ns[[".package"]][["version"]]
[17:42:58.588]                         if (is.null(version)) 
[17:42:58.588]                           version <- utils::packageVersion("future")
[17:42:58.588]                       }
[17:42:58.588]                       else {
[17:42:58.588]                         version <- NULL
[17:42:58.588]                       }
[17:42:58.588]                       if (!has_future || version < "1.8.0") {
[17:42:58.588]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:58.588]                           "", base::R.version$version.string), 
[17:42:58.588]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:58.588]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:58.588]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:58.588]                             "release", "version")], collapse = " "), 
[17:42:58.588]                           hostname = base::Sys.info()[["nodename"]])
[17:42:58.588]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:58.588]                           info)
[17:42:58.588]                         info <- base::paste(info, collapse = "; ")
[17:42:58.588]                         if (!has_future) {
[17:42:58.588]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:58.588]                             info)
[17:42:58.588]                         }
[17:42:58.588]                         else {
[17:42:58.588]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:58.588]                             info, version)
[17:42:58.588]                         }
[17:42:58.588]                         base::stop(msg)
[17:42:58.588]                       }
[17:42:58.588]                     })
[17:42:58.588]                   }
[17:42:58.588]                   options(future.plan = NULL)
[17:42:58.588]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.588]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:58.588]                 }
[17:42:58.588]                 ...future.workdir <- getwd()
[17:42:58.588]             }
[17:42:58.588]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:58.588]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:58.588]         }
[17:42:58.588]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:58.588]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:58.588]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:58.588]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:58.588]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:58.588]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:58.588]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:58.588]             base::names(...future.oldOptions))
[17:42:58.588]     }
[17:42:58.588]     if (FALSE) {
[17:42:58.588]     }
[17:42:58.588]     else {
[17:42:58.588]         if (TRUE) {
[17:42:58.588]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:58.588]                 open = "w")
[17:42:58.588]         }
[17:42:58.588]         else {
[17:42:58.588]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:58.588]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:58.588]         }
[17:42:58.588]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:58.588]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:58.588]             base::sink(type = "output", split = FALSE)
[17:42:58.588]             base::close(...future.stdout)
[17:42:58.588]         }, add = TRUE)
[17:42:58.588]     }
[17:42:58.588]     ...future.frame <- base::sys.nframe()
[17:42:58.588]     ...future.conditions <- base::list()
[17:42:58.588]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:58.588]     if (FALSE) {
[17:42:58.588]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:58.588]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:58.588]     }
[17:42:58.588]     ...future.result <- base::tryCatch({
[17:42:58.588]         base::withCallingHandlers({
[17:42:58.588]             ...future.value <- base::withVisible(base::local({
[17:42:58.588]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:42:58.588]                   "error", "condition")))
[17:42:58.588]             }))
[17:42:58.588]             future::FutureResult(value = ...future.value$value, 
[17:42:58.588]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.588]                   ...future.rng), globalenv = if (FALSE) 
[17:42:58.588]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:58.588]                     ...future.globalenv.names))
[17:42:58.588]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:58.588]         }, condition = base::local({
[17:42:58.588]             c <- base::c
[17:42:58.588]             inherits <- base::inherits
[17:42:58.588]             invokeRestart <- base::invokeRestart
[17:42:58.588]             length <- base::length
[17:42:58.588]             list <- base::list
[17:42:58.588]             seq.int <- base::seq.int
[17:42:58.588]             signalCondition <- base::signalCondition
[17:42:58.588]             sys.calls <- base::sys.calls
[17:42:58.588]             `[[` <- base::`[[`
[17:42:58.588]             `+` <- base::`+`
[17:42:58.588]             `<<-` <- base::`<<-`
[17:42:58.588]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:58.588]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:58.588]                   3L)]
[17:42:58.588]             }
[17:42:58.588]             function(cond) {
[17:42:58.588]                 is_error <- inherits(cond, "error")
[17:42:58.588]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:58.588]                   NULL)
[17:42:58.588]                 if (is_error) {
[17:42:58.588]                   sessionInformation <- function() {
[17:42:58.588]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:58.588]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:58.588]                       search = base::search(), system = base::Sys.info())
[17:42:58.588]                   }
[17:42:58.588]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.588]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:58.588]                     cond$call), session = sessionInformation(), 
[17:42:58.588]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:58.588]                   signalCondition(cond)
[17:42:58.588]                 }
[17:42:58.588]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:58.588]                 "immediateCondition"))) {
[17:42:58.588]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:58.588]                   ...future.conditions[[length(...future.conditions) + 
[17:42:58.588]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:58.588]                   if (TRUE && !signal) {
[17:42:58.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.588]                     {
[17:42:58.588]                       inherits <- base::inherits
[17:42:58.588]                       invokeRestart <- base::invokeRestart
[17:42:58.588]                       is.null <- base::is.null
[17:42:58.588]                       muffled <- FALSE
[17:42:58.588]                       if (inherits(cond, "message")) {
[17:42:58.588]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.588]                         if (muffled) 
[17:42:58.588]                           invokeRestart("muffleMessage")
[17:42:58.588]                       }
[17:42:58.588]                       else if (inherits(cond, "warning")) {
[17:42:58.588]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.588]                         if (muffled) 
[17:42:58.588]                           invokeRestart("muffleWarning")
[17:42:58.588]                       }
[17:42:58.588]                       else if (inherits(cond, "condition")) {
[17:42:58.588]                         if (!is.null(pattern)) {
[17:42:58.588]                           computeRestarts <- base::computeRestarts
[17:42:58.588]                           grepl <- base::grepl
[17:42:58.588]                           restarts <- computeRestarts(cond)
[17:42:58.588]                           for (restart in restarts) {
[17:42:58.588]                             name <- restart$name
[17:42:58.588]                             if (is.null(name)) 
[17:42:58.588]                               next
[17:42:58.588]                             if (!grepl(pattern, name)) 
[17:42:58.588]                               next
[17:42:58.588]                             invokeRestart(restart)
[17:42:58.588]                             muffled <- TRUE
[17:42:58.588]                             break
[17:42:58.588]                           }
[17:42:58.588]                         }
[17:42:58.588]                       }
[17:42:58.588]                       invisible(muffled)
[17:42:58.588]                     }
[17:42:58.588]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.588]                   }
[17:42:58.588]                 }
[17:42:58.588]                 else {
[17:42:58.588]                   if (TRUE) {
[17:42:58.588]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:58.588]                     {
[17:42:58.588]                       inherits <- base::inherits
[17:42:58.588]                       invokeRestart <- base::invokeRestart
[17:42:58.588]                       is.null <- base::is.null
[17:42:58.588]                       muffled <- FALSE
[17:42:58.588]                       if (inherits(cond, "message")) {
[17:42:58.588]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:58.588]                         if (muffled) 
[17:42:58.588]                           invokeRestart("muffleMessage")
[17:42:58.588]                       }
[17:42:58.588]                       else if (inherits(cond, "warning")) {
[17:42:58.588]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:58.588]                         if (muffled) 
[17:42:58.588]                           invokeRestart("muffleWarning")
[17:42:58.588]                       }
[17:42:58.588]                       else if (inherits(cond, "condition")) {
[17:42:58.588]                         if (!is.null(pattern)) {
[17:42:58.588]                           computeRestarts <- base::computeRestarts
[17:42:58.588]                           grepl <- base::grepl
[17:42:58.588]                           restarts <- computeRestarts(cond)
[17:42:58.588]                           for (restart in restarts) {
[17:42:58.588]                             name <- restart$name
[17:42:58.588]                             if (is.null(name)) 
[17:42:58.588]                               next
[17:42:58.588]                             if (!grepl(pattern, name)) 
[17:42:58.588]                               next
[17:42:58.588]                             invokeRestart(restart)
[17:42:58.588]                             muffled <- TRUE
[17:42:58.588]                             break
[17:42:58.588]                           }
[17:42:58.588]                         }
[17:42:58.588]                       }
[17:42:58.588]                       invisible(muffled)
[17:42:58.588]                     }
[17:42:58.588]                     muffleCondition(cond, pattern = "^muffle")
[17:42:58.588]                   }
[17:42:58.588]                 }
[17:42:58.588]             }
[17:42:58.588]         }))
[17:42:58.588]     }, error = function(ex) {
[17:42:58.588]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:58.588]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:58.588]                 ...future.rng), started = ...future.startTime, 
[17:42:58.588]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:58.588]             version = "1.8"), class = "FutureResult")
[17:42:58.588]     }, finally = {
[17:42:58.588]         if (!identical(...future.workdir, getwd())) 
[17:42:58.588]             setwd(...future.workdir)
[17:42:58.588]         {
[17:42:58.588]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:58.588]                 ...future.oldOptions$nwarnings <- NULL
[17:42:58.588]             }
[17:42:58.588]             base::options(...future.oldOptions)
[17:42:58.588]             if (.Platform$OS.type == "windows") {
[17:42:58.588]                 old_names <- names(...future.oldEnvVars)
[17:42:58.588]                 envs <- base::Sys.getenv()
[17:42:58.588]                 names <- names(envs)
[17:42:58.588]                 common <- intersect(names, old_names)
[17:42:58.588]                 added <- setdiff(names, old_names)
[17:42:58.588]                 removed <- setdiff(old_names, names)
[17:42:58.588]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:58.588]                   envs[common]]
[17:42:58.588]                 NAMES <- toupper(changed)
[17:42:58.588]                 args <- list()
[17:42:58.588]                 for (kk in seq_along(NAMES)) {
[17:42:58.588]                   name <- changed[[kk]]
[17:42:58.588]                   NAME <- NAMES[[kk]]
[17:42:58.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.588]                     next
[17:42:58.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.588]                 }
[17:42:58.588]                 NAMES <- toupper(added)
[17:42:58.588]                 for (kk in seq_along(NAMES)) {
[17:42:58.588]                   name <- added[[kk]]
[17:42:58.588]                   NAME <- NAMES[[kk]]
[17:42:58.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.588]                     next
[17:42:58.588]                   args[[name]] <- ""
[17:42:58.588]                 }
[17:42:58.588]                 NAMES <- toupper(removed)
[17:42:58.588]                 for (kk in seq_along(NAMES)) {
[17:42:58.588]                   name <- removed[[kk]]
[17:42:58.588]                   NAME <- NAMES[[kk]]
[17:42:58.588]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:58.588]                     next
[17:42:58.588]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:58.588]                 }
[17:42:58.588]                 if (length(args) > 0) 
[17:42:58.588]                   base::do.call(base::Sys.setenv, args = args)
[17:42:58.588]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:58.588]             }
[17:42:58.588]             else {
[17:42:58.588]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:58.588]             }
[17:42:58.588]             {
[17:42:58.588]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:58.588]                   0L) {
[17:42:58.588]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:58.588]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:58.588]                   base::options(opts)
[17:42:58.588]                 }
[17:42:58.588]                 {
[17:42:58.588]                   {
[17:42:58.588]                     NULL
[17:42:58.588]                     RNGkind("Mersenne-Twister")
[17:42:58.588]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:58.588]                       inherits = FALSE)
[17:42:58.588]                   }
[17:42:58.588]                   options(future.plan = NULL)
[17:42:58.588]                   if (is.na(NA_character_)) 
[17:42:58.588]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:58.588]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:58.588]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:58.588]                   {
[17:42:58.588]                     future <- SequentialFuture(..., envir = envir)
[17:42:58.588]                     if (!future$lazy) 
[17:42:58.588]                       future <- run(future)
[17:42:58.588]                     invisible(future)
[17:42:58.588]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:58.588]                 }
[17:42:58.588]             }
[17:42:58.588]         }
[17:42:58.588]     })
[17:42:58.588]     if (TRUE) {
[17:42:58.588]         base::sink(type = "output", split = FALSE)
[17:42:58.588]         if (TRUE) {
[17:42:58.588]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:58.588]         }
[17:42:58.588]         else {
[17:42:58.588]             ...future.result["stdout"] <- base::list(NULL)
[17:42:58.588]         }
[17:42:58.588]         base::close(...future.stdout)
[17:42:58.588]         ...future.stdout <- NULL
[17:42:58.588]     }
[17:42:58.588]     ...future.result$conditions <- ...future.conditions
[17:42:58.588]     ...future.result$finished <- base::Sys.time()
[17:42:58.588]     ...future.result
[17:42:58.588] }
[17:42:58.590] plan(): Setting new future strategy stack:
[17:42:58.590] List of future strategies:
[17:42:58.590] 1. sequential:
[17:42:58.590]    - args: function (..., envir = parent.frame())
[17:42:58.590]    - tweaked: FALSE
[17:42:58.590]    - call: NULL
[17:42:58.590] plan(): nbrOfWorkers() = 1
[17:42:58.591] plan(): Setting new future strategy stack:
[17:42:58.591] List of future strategies:
[17:42:58.591] 1. sequential:
[17:42:58.591]    - args: function (..., envir = parent.frame())
[17:42:58.591]    - tweaked: FALSE
[17:42:58.591]    - call: future::plan("sequential")
[17:42:58.592] plan(): nbrOfWorkers() = 1
[17:42:58.592] SequentialFuture started (and completed)
[17:42:58.592] signalConditions() ...
[17:42:58.592]  - include = ‘immediateCondition’
[17:42:58.592]  - exclude = 
[17:42:58.592]  - resignal = FALSE
[17:42:58.592]  - Number of conditions: 1
[17:42:58.592] signalConditions() ... done
[17:42:58.592] signalConditions() ...
[17:42:58.592]  - include = ‘immediateCondition’
[17:42:58.593]  - exclude = 
[17:42:58.593]  - resignal = FALSE
[17:42:58.593]  - Number of conditions: 1
[17:42:58.593] signalConditions() ... done
<MyError: boom>
[17:42:58.593] signalConditions() ...
[17:42:58.593]  - include = ‘immediateCondition’
[17:42:58.593]  - exclude = 
[17:42:58.593]  - resignal = FALSE
[17:42:58.593]  - Number of conditions: 1
[17:42:58.593] signalConditions() ... done
[17:42:58.594] Future state: ‘finished’
[17:42:58.594] signalConditions() ...
[17:42:58.594]  - include = ‘condition’
[17:42:58.594]  - exclude = ‘immediateCondition’
[17:42:58.594]  - resignal = TRUE
[17:42:58.594]  - Number of conditions: 1
[17:42:58.594]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:42:58.594] signalConditions() ... done
Testing with 1 cores ... DONE
Testing with 2 cores ...
[17:42:58.600] getGlobalsAndPackages() ...
[17:42:58.600] 
[17:42:58.600] - globals: [0] <none>
[17:42:58.600] getGlobalsAndPackages() ... DONE
[17:42:58.600] [local output] makeClusterPSOCK() ...
[17:42:58.633] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:58.639] [local output] Base port: 11592
[17:42:58.639] [local output] Getting setup options for 2 cluster nodes ...
[17:42:58.639] [local output]  - Node 1 of 2 ...
[17:42:58.639] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:58.640] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded4c8c8bd9.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded4c8c8bd9.pid")'’
[17:42:58.832] - Possible to infer worker's PID: TRUE
[17:42:58.832] [local output] Rscript port: 11592

[17:42:58.832] [local output]  - Node 2 of 2 ...
[17:42:58.833] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:58.833] [local output] Rscript port: 11592

[17:42:58.834] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:58.834] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:58.834] [local output] Setting up PSOCK nodes in parallel
[17:42:58.835] List of 36
[17:42:58.835]  $ worker          : chr "localhost"
[17:42:58.835]   ..- attr(*, "localhost")= logi TRUE
[17:42:58.835]  $ master          : chr "localhost"
[17:42:58.835]  $ port            : int 11592
[17:42:58.835]  $ connectTimeout  : num 120
[17:42:58.835]  $ timeout         : num 2592000
[17:42:58.835]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:58.835]  $ homogeneous     : logi TRUE
[17:42:58.835]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:58.835]  $ rscript_envs    : NULL
[17:42:58.835]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:58.835]  $ rscript_startup : NULL
[17:42:58.835]  $ rscript_sh      : chr "sh"
[17:42:58.835]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:58.835]  $ methods         : logi TRUE
[17:42:58.835]  $ socketOptions   : chr "no-delay"
[17:42:58.835]  $ useXDR          : logi FALSE
[17:42:58.835]  $ outfile         : chr "/dev/null"
[17:42:58.835]  $ renice          : int NA
[17:42:58.835]  $ rshcmd          : NULL
[17:42:58.835]  $ user            : chr(0) 
[17:42:58.835]  $ revtunnel       : logi FALSE
[17:42:58.835]  $ rshlogfile      : NULL
[17:42:58.835]  $ rshopts         : chr(0) 
[17:42:58.835]  $ rank            : int 1
[17:42:58.835]  $ manual          : logi FALSE
[17:42:58.835]  $ dryrun          : logi FALSE
[17:42:58.835]  $ quiet           : logi FALSE
[17:42:58.835]  $ setup_strategy  : chr "parallel"
[17:42:58.835]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:58.835]  $ pidfile         : chr "/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded4c8c8bd9.pid"
[17:42:58.835]  $ rshcmd_label    : NULL
[17:42:58.835]  $ rsh_call        : NULL
[17:42:58.835]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:58.835]  $ localMachine    : logi TRUE
[17:42:58.835]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:58.835]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:58.835]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:58.835]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:58.835]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:58.835]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:58.835]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:58.835]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:58.835]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:58.835]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:58.835]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:58.835]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:58.835]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:58.835]  $ arguments       :List of 28
[17:42:58.835]   ..$ worker          : chr "localhost"
[17:42:58.835]   ..$ master          : NULL
[17:42:58.835]   ..$ port            : int 11592
[17:42:58.835]   ..$ connectTimeout  : num 120
[17:42:58.835]   ..$ timeout         : num 2592000
[17:42:58.835]   ..$ rscript         : NULL
[17:42:58.835]   ..$ homogeneous     : NULL
[17:42:58.835]   ..$ rscript_args    : NULL
[17:42:58.835]   ..$ rscript_envs    : NULL
[17:42:58.835]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:58.835]   ..$ rscript_startup : NULL
[17:42:58.835]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:58.835]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:58.835]   ..$ methods         : logi TRUE
[17:42:58.835]   ..$ socketOptions   : chr "no-delay"
[17:42:58.835]   ..$ useXDR          : logi FALSE
[17:42:58.835]   ..$ outfile         : chr "/dev/null"
[17:42:58.835]   ..$ renice          : int NA
[17:42:58.835]   ..$ rshcmd          : NULL
[17:42:58.835]   ..$ user            : NULL
[17:42:58.835]   ..$ revtunnel       : logi NA
[17:42:58.835]   ..$ rshlogfile      : NULL
[17:42:58.835]   ..$ rshopts         : NULL
[17:42:58.835]   ..$ rank            : int 1
[17:42:58.835]   ..$ manual          : logi FALSE
[17:42:58.835]   ..$ dryrun          : logi FALSE
[17:42:58.835]   ..$ quiet           : logi FALSE
[17:42:58.835]   ..$ setup_strategy  : chr "parallel"
[17:42:58.835]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:58.851] [local output] System call to launch all workers:
[17:42:58.851] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded4c8c8bd9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11592 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:58.851] [local output] Starting PSOCK main server
[17:42:58.853] [local output] Workers launched
[17:42:58.853] [local output] Waiting for workers to connect back
[17:42:58.853]  - [local output] 0 workers out of 2 ready
[17:42:59.102]  - [local output] 0 workers out of 2 ready
[17:42:59.102]  - [local output] 1 workers out of 2 ready
[17:42:59.102]  - [local output] 2 workers out of 2 ready
[17:42:59.103] [local output] Launching of workers completed
[17:42:59.103] [local output] Collecting session information from workers
[17:42:59.104] [local output]  - Worker #1 of 2
[17:42:59.104] [local output]  - Worker #2 of 2
[17:42:59.104] [local output] makeClusterPSOCK() ... done
[17:42:59.117] Packages needed by the future expression (n = 0): <none>
[17:42:59.117] Packages needed by future strategies (n = 0): <none>
[17:42:59.117] {
[17:42:59.117]     {
[17:42:59.117]         {
[17:42:59.117]             ...future.startTime <- base::Sys.time()
[17:42:59.117]             {
[17:42:59.117]                 {
[17:42:59.117]                   {
[17:42:59.117]                     {
[17:42:59.117]                       base::local({
[17:42:59.117]                         has_future <- base::requireNamespace("future", 
[17:42:59.117]                           quietly = TRUE)
[17:42:59.117]                         if (has_future) {
[17:42:59.117]                           ns <- base::getNamespace("future")
[17:42:59.117]                           version <- ns[[".package"]][["version"]]
[17:42:59.117]                           if (is.null(version)) 
[17:42:59.117]                             version <- utils::packageVersion("future")
[17:42:59.117]                         }
[17:42:59.117]                         else {
[17:42:59.117]                           version <- NULL
[17:42:59.117]                         }
[17:42:59.117]                         if (!has_future || version < "1.8.0") {
[17:42:59.117]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.117]                             "", base::R.version$version.string), 
[17:42:59.117]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.117]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.117]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.117]                               "release", "version")], collapse = " "), 
[17:42:59.117]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.117]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.117]                             info)
[17:42:59.117]                           info <- base::paste(info, collapse = "; ")
[17:42:59.117]                           if (!has_future) {
[17:42:59.117]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.117]                               info)
[17:42:59.117]                           }
[17:42:59.117]                           else {
[17:42:59.117]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.117]                               info, version)
[17:42:59.117]                           }
[17:42:59.117]                           base::stop(msg)
[17:42:59.117]                         }
[17:42:59.117]                       })
[17:42:59.117]                     }
[17:42:59.117]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.117]                     base::options(mc.cores = 1L)
[17:42:59.117]                   }
[17:42:59.117]                   options(future.plan = NULL)
[17:42:59.117]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.117]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.117]                 }
[17:42:59.117]                 ...future.workdir <- getwd()
[17:42:59.117]             }
[17:42:59.117]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.117]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.117]         }
[17:42:59.117]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.117]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.117]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.117]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.117]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.117]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.117]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.117]             base::names(...future.oldOptions))
[17:42:59.117]     }
[17:42:59.117]     if (FALSE) {
[17:42:59.117]     }
[17:42:59.117]     else {
[17:42:59.117]         if (TRUE) {
[17:42:59.117]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.117]                 open = "w")
[17:42:59.117]         }
[17:42:59.117]         else {
[17:42:59.117]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.117]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.117]         }
[17:42:59.117]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.117]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.117]             base::sink(type = "output", split = FALSE)
[17:42:59.117]             base::close(...future.stdout)
[17:42:59.117]         }, add = TRUE)
[17:42:59.117]     }
[17:42:59.117]     ...future.frame <- base::sys.nframe()
[17:42:59.117]     ...future.conditions <- base::list()
[17:42:59.117]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.117]     if (FALSE) {
[17:42:59.117]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.117]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.117]     }
[17:42:59.117]     ...future.result <- base::tryCatch({
[17:42:59.117]         base::withCallingHandlers({
[17:42:59.117]             ...future.value <- base::withVisible(base::local({
[17:42:59.117]                 ...future.makeSendCondition <- local({
[17:42:59.117]                   sendCondition <- NULL
[17:42:59.117]                   function(frame = 1L) {
[17:42:59.117]                     if (is.function(sendCondition)) 
[17:42:59.117]                       return(sendCondition)
[17:42:59.117]                     ns <- getNamespace("parallel")
[17:42:59.117]                     if (exists("sendData", mode = "function", 
[17:42:59.117]                       envir = ns)) {
[17:42:59.117]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.117]                         envir = ns)
[17:42:59.117]                       envir <- sys.frame(frame)
[17:42:59.117]                       master <- NULL
[17:42:59.117]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.117]                         !identical(envir, emptyenv())) {
[17:42:59.117]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.117]                           inherits = FALSE)) {
[17:42:59.117]                           master <- get("master", mode = "list", 
[17:42:59.117]                             envir = envir, inherits = FALSE)
[17:42:59.117]                           if (inherits(master, c("SOCKnode", 
[17:42:59.117]                             "SOCK0node"))) {
[17:42:59.117]                             sendCondition <<- function(cond) {
[17:42:59.117]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.117]                                 success = TRUE)
[17:42:59.117]                               parallel_sendData(master, data)
[17:42:59.117]                             }
[17:42:59.117]                             return(sendCondition)
[17:42:59.117]                           }
[17:42:59.117]                         }
[17:42:59.117]                         frame <- frame + 1L
[17:42:59.117]                         envir <- sys.frame(frame)
[17:42:59.117]                       }
[17:42:59.117]                     }
[17:42:59.117]                     sendCondition <<- function(cond) NULL
[17:42:59.117]                   }
[17:42:59.117]                 })
[17:42:59.117]                 withCallingHandlers({
[17:42:59.117]                   {
[17:42:59.117]                     42L
[17:42:59.117]                   }
[17:42:59.117]                 }, immediateCondition = function(cond) {
[17:42:59.117]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.117]                   sendCondition(cond)
[17:42:59.117]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.117]                   {
[17:42:59.117]                     inherits <- base::inherits
[17:42:59.117]                     invokeRestart <- base::invokeRestart
[17:42:59.117]                     is.null <- base::is.null
[17:42:59.117]                     muffled <- FALSE
[17:42:59.117]                     if (inherits(cond, "message")) {
[17:42:59.117]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.117]                       if (muffled) 
[17:42:59.117]                         invokeRestart("muffleMessage")
[17:42:59.117]                     }
[17:42:59.117]                     else if (inherits(cond, "warning")) {
[17:42:59.117]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.117]                       if (muffled) 
[17:42:59.117]                         invokeRestart("muffleWarning")
[17:42:59.117]                     }
[17:42:59.117]                     else if (inherits(cond, "condition")) {
[17:42:59.117]                       if (!is.null(pattern)) {
[17:42:59.117]                         computeRestarts <- base::computeRestarts
[17:42:59.117]                         grepl <- base::grepl
[17:42:59.117]                         restarts <- computeRestarts(cond)
[17:42:59.117]                         for (restart in restarts) {
[17:42:59.117]                           name <- restart$name
[17:42:59.117]                           if (is.null(name)) 
[17:42:59.117]                             next
[17:42:59.117]                           if (!grepl(pattern, name)) 
[17:42:59.117]                             next
[17:42:59.117]                           invokeRestart(restart)
[17:42:59.117]                           muffled <- TRUE
[17:42:59.117]                           break
[17:42:59.117]                         }
[17:42:59.117]                       }
[17:42:59.117]                     }
[17:42:59.117]                     invisible(muffled)
[17:42:59.117]                   }
[17:42:59.117]                   muffleCondition(cond)
[17:42:59.117]                 })
[17:42:59.117]             }))
[17:42:59.117]             future::FutureResult(value = ...future.value$value, 
[17:42:59.117]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.117]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.117]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.117]                     ...future.globalenv.names))
[17:42:59.117]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.117]         }, condition = base::local({
[17:42:59.117]             c <- base::c
[17:42:59.117]             inherits <- base::inherits
[17:42:59.117]             invokeRestart <- base::invokeRestart
[17:42:59.117]             length <- base::length
[17:42:59.117]             list <- base::list
[17:42:59.117]             seq.int <- base::seq.int
[17:42:59.117]             signalCondition <- base::signalCondition
[17:42:59.117]             sys.calls <- base::sys.calls
[17:42:59.117]             `[[` <- base::`[[`
[17:42:59.117]             `+` <- base::`+`
[17:42:59.117]             `<<-` <- base::`<<-`
[17:42:59.117]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.117]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.117]                   3L)]
[17:42:59.117]             }
[17:42:59.117]             function(cond) {
[17:42:59.117]                 is_error <- inherits(cond, "error")
[17:42:59.117]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.117]                   NULL)
[17:42:59.117]                 if (is_error) {
[17:42:59.117]                   sessionInformation <- function() {
[17:42:59.117]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.117]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.117]                       search = base::search(), system = base::Sys.info())
[17:42:59.117]                   }
[17:42:59.117]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.117]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.117]                     cond$call), session = sessionInformation(), 
[17:42:59.117]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.117]                   signalCondition(cond)
[17:42:59.117]                 }
[17:42:59.117]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.117]                 "immediateCondition"))) {
[17:42:59.117]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.117]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.117]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.117]                   if (TRUE && !signal) {
[17:42:59.117]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.117]                     {
[17:42:59.117]                       inherits <- base::inherits
[17:42:59.117]                       invokeRestart <- base::invokeRestart
[17:42:59.117]                       is.null <- base::is.null
[17:42:59.117]                       muffled <- FALSE
[17:42:59.117]                       if (inherits(cond, "message")) {
[17:42:59.117]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.117]                         if (muffled) 
[17:42:59.117]                           invokeRestart("muffleMessage")
[17:42:59.117]                       }
[17:42:59.117]                       else if (inherits(cond, "warning")) {
[17:42:59.117]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.117]                         if (muffled) 
[17:42:59.117]                           invokeRestart("muffleWarning")
[17:42:59.117]                       }
[17:42:59.117]                       else if (inherits(cond, "condition")) {
[17:42:59.117]                         if (!is.null(pattern)) {
[17:42:59.117]                           computeRestarts <- base::computeRestarts
[17:42:59.117]                           grepl <- base::grepl
[17:42:59.117]                           restarts <- computeRestarts(cond)
[17:42:59.117]                           for (restart in restarts) {
[17:42:59.117]                             name <- restart$name
[17:42:59.117]                             if (is.null(name)) 
[17:42:59.117]                               next
[17:42:59.117]                             if (!grepl(pattern, name)) 
[17:42:59.117]                               next
[17:42:59.117]                             invokeRestart(restart)
[17:42:59.117]                             muffled <- TRUE
[17:42:59.117]                             break
[17:42:59.117]                           }
[17:42:59.117]                         }
[17:42:59.117]                       }
[17:42:59.117]                       invisible(muffled)
[17:42:59.117]                     }
[17:42:59.117]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.117]                   }
[17:42:59.117]                 }
[17:42:59.117]                 else {
[17:42:59.117]                   if (TRUE) {
[17:42:59.117]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.117]                     {
[17:42:59.117]                       inherits <- base::inherits
[17:42:59.117]                       invokeRestart <- base::invokeRestart
[17:42:59.117]                       is.null <- base::is.null
[17:42:59.117]                       muffled <- FALSE
[17:42:59.117]                       if (inherits(cond, "message")) {
[17:42:59.117]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.117]                         if (muffled) 
[17:42:59.117]                           invokeRestart("muffleMessage")
[17:42:59.117]                       }
[17:42:59.117]                       else if (inherits(cond, "warning")) {
[17:42:59.117]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.117]                         if (muffled) 
[17:42:59.117]                           invokeRestart("muffleWarning")
[17:42:59.117]                       }
[17:42:59.117]                       else if (inherits(cond, "condition")) {
[17:42:59.117]                         if (!is.null(pattern)) {
[17:42:59.117]                           computeRestarts <- base::computeRestarts
[17:42:59.117]                           grepl <- base::grepl
[17:42:59.117]                           restarts <- computeRestarts(cond)
[17:42:59.117]                           for (restart in restarts) {
[17:42:59.117]                             name <- restart$name
[17:42:59.117]                             if (is.null(name)) 
[17:42:59.117]                               next
[17:42:59.117]                             if (!grepl(pattern, name)) 
[17:42:59.117]                               next
[17:42:59.117]                             invokeRestart(restart)
[17:42:59.117]                             muffled <- TRUE
[17:42:59.117]                             break
[17:42:59.117]                           }
[17:42:59.117]                         }
[17:42:59.117]                       }
[17:42:59.117]                       invisible(muffled)
[17:42:59.117]                     }
[17:42:59.117]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.117]                   }
[17:42:59.117]                 }
[17:42:59.117]             }
[17:42:59.117]         }))
[17:42:59.117]     }, error = function(ex) {
[17:42:59.117]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.117]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.117]                 ...future.rng), started = ...future.startTime, 
[17:42:59.117]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.117]             version = "1.8"), class = "FutureResult")
[17:42:59.117]     }, finally = {
[17:42:59.117]         if (!identical(...future.workdir, getwd())) 
[17:42:59.117]             setwd(...future.workdir)
[17:42:59.117]         {
[17:42:59.117]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.117]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.117]             }
[17:42:59.117]             base::options(...future.oldOptions)
[17:42:59.117]             if (.Platform$OS.type == "windows") {
[17:42:59.117]                 old_names <- names(...future.oldEnvVars)
[17:42:59.117]                 envs <- base::Sys.getenv()
[17:42:59.117]                 names <- names(envs)
[17:42:59.117]                 common <- intersect(names, old_names)
[17:42:59.117]                 added <- setdiff(names, old_names)
[17:42:59.117]                 removed <- setdiff(old_names, names)
[17:42:59.117]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.117]                   envs[common]]
[17:42:59.117]                 NAMES <- toupper(changed)
[17:42:59.117]                 args <- list()
[17:42:59.117]                 for (kk in seq_along(NAMES)) {
[17:42:59.117]                   name <- changed[[kk]]
[17:42:59.117]                   NAME <- NAMES[[kk]]
[17:42:59.117]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.117]                     next
[17:42:59.117]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.117]                 }
[17:42:59.117]                 NAMES <- toupper(added)
[17:42:59.117]                 for (kk in seq_along(NAMES)) {
[17:42:59.117]                   name <- added[[kk]]
[17:42:59.117]                   NAME <- NAMES[[kk]]
[17:42:59.117]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.117]                     next
[17:42:59.117]                   args[[name]] <- ""
[17:42:59.117]                 }
[17:42:59.117]                 NAMES <- toupper(removed)
[17:42:59.117]                 for (kk in seq_along(NAMES)) {
[17:42:59.117]                   name <- removed[[kk]]
[17:42:59.117]                   NAME <- NAMES[[kk]]
[17:42:59.117]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.117]                     next
[17:42:59.117]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.117]                 }
[17:42:59.117]                 if (length(args) > 0) 
[17:42:59.117]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.117]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.117]             }
[17:42:59.117]             else {
[17:42:59.117]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.117]             }
[17:42:59.117]             {
[17:42:59.117]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.117]                   0L) {
[17:42:59.117]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.117]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.117]                   base::options(opts)
[17:42:59.117]                 }
[17:42:59.117]                 {
[17:42:59.117]                   {
[17:42:59.117]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.117]                     NULL
[17:42:59.117]                   }
[17:42:59.117]                   options(future.plan = NULL)
[17:42:59.117]                   if (is.na(NA_character_)) 
[17:42:59.117]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.117]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.117]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.117]                   {
[17:42:59.117]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.117]                     if (!future$lazy) 
[17:42:59.117]                       future <- run(future)
[17:42:59.117]                     invisible(future)
[17:42:59.117]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.117]                 }
[17:42:59.117]             }
[17:42:59.117]         }
[17:42:59.117]     })
[17:42:59.117]     if (TRUE) {
[17:42:59.117]         base::sink(type = "output", split = FALSE)
[17:42:59.117]         if (TRUE) {
[17:42:59.117]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.117]         }
[17:42:59.117]         else {
[17:42:59.117]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.117]         }
[17:42:59.117]         base::close(...future.stdout)
[17:42:59.117]         ...future.stdout <- NULL
[17:42:59.117]     }
[17:42:59.117]     ...future.result$conditions <- ...future.conditions
[17:42:59.117]     ...future.result$finished <- base::Sys.time()
[17:42:59.117]     ...future.result
[17:42:59.117] }
[17:42:59.190] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[1] FALSE
[17:42:59.212] result() for ClusterFuture ...
[17:42:59.213] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.213] - Validating connection of MultisessionFuture
[17:42:59.216] - received message: FutureResult
[17:42:59.216] - Received FutureResult
[17:42:59.219] - Erased future from FutureRegistry
[17:42:59.219] result() for ClusterFuture ...
[17:42:59.220] - result already collected: FutureResult
[17:42:59.220] result() for ClusterFuture ... done
[17:42:59.220] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:59.220] result() for ClusterFuture ... done
[17:42:59.220] result() for ClusterFuture ...
[17:42:59.220] - result already collected: FutureResult
[17:42:59.220] result() for ClusterFuture ... done
[1] 42
[17:42:59.224] getGlobalsAndPackages() ...
[17:42:59.224] Searching for globals...
[17:42:59.227] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:42:59.227] Searching for globals ... DONE
[17:42:59.227] Resolving globals: FALSE
[17:42:59.228] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:59.228] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:42:59.228] - globals: [1] ‘a’
[17:42:59.228] 
[17:42:59.228] getGlobalsAndPackages() ... DONE
[17:42:59.240] Packages needed by the future expression (n = 0): <none>
[17:42:59.240] Packages needed by future strategies (n = 0): <none>
[17:42:59.241] {
[17:42:59.241]     {
[17:42:59.241]         {
[17:42:59.241]             ...future.startTime <- base::Sys.time()
[17:42:59.241]             {
[17:42:59.241]                 {
[17:42:59.241]                   {
[17:42:59.241]                     {
[17:42:59.241]                       base::local({
[17:42:59.241]                         has_future <- base::requireNamespace("future", 
[17:42:59.241]                           quietly = TRUE)
[17:42:59.241]                         if (has_future) {
[17:42:59.241]                           ns <- base::getNamespace("future")
[17:42:59.241]                           version <- ns[[".package"]][["version"]]
[17:42:59.241]                           if (is.null(version)) 
[17:42:59.241]                             version <- utils::packageVersion("future")
[17:42:59.241]                         }
[17:42:59.241]                         else {
[17:42:59.241]                           version <- NULL
[17:42:59.241]                         }
[17:42:59.241]                         if (!has_future || version < "1.8.0") {
[17:42:59.241]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.241]                             "", base::R.version$version.string), 
[17:42:59.241]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.241]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.241]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.241]                               "release", "version")], collapse = " "), 
[17:42:59.241]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.241]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.241]                             info)
[17:42:59.241]                           info <- base::paste(info, collapse = "; ")
[17:42:59.241]                           if (!has_future) {
[17:42:59.241]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.241]                               info)
[17:42:59.241]                           }
[17:42:59.241]                           else {
[17:42:59.241]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.241]                               info, version)
[17:42:59.241]                           }
[17:42:59.241]                           base::stop(msg)
[17:42:59.241]                         }
[17:42:59.241]                       })
[17:42:59.241]                     }
[17:42:59.241]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.241]                     base::options(mc.cores = 1L)
[17:42:59.241]                   }
[17:42:59.241]                   options(future.plan = NULL)
[17:42:59.241]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.241]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.241]                 }
[17:42:59.241]                 ...future.workdir <- getwd()
[17:42:59.241]             }
[17:42:59.241]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.241]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.241]         }
[17:42:59.241]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.241]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.241]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.241]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.241]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.241]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.241]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.241]             base::names(...future.oldOptions))
[17:42:59.241]     }
[17:42:59.241]     if (FALSE) {
[17:42:59.241]     }
[17:42:59.241]     else {
[17:42:59.241]         if (TRUE) {
[17:42:59.241]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.241]                 open = "w")
[17:42:59.241]         }
[17:42:59.241]         else {
[17:42:59.241]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.241]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.241]         }
[17:42:59.241]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.241]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.241]             base::sink(type = "output", split = FALSE)
[17:42:59.241]             base::close(...future.stdout)
[17:42:59.241]         }, add = TRUE)
[17:42:59.241]     }
[17:42:59.241]     ...future.frame <- base::sys.nframe()
[17:42:59.241]     ...future.conditions <- base::list()
[17:42:59.241]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.241]     if (FALSE) {
[17:42:59.241]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.241]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.241]     }
[17:42:59.241]     ...future.result <- base::tryCatch({
[17:42:59.241]         base::withCallingHandlers({
[17:42:59.241]             ...future.value <- base::withVisible(base::local({
[17:42:59.241]                 ...future.makeSendCondition <- local({
[17:42:59.241]                   sendCondition <- NULL
[17:42:59.241]                   function(frame = 1L) {
[17:42:59.241]                     if (is.function(sendCondition)) 
[17:42:59.241]                       return(sendCondition)
[17:42:59.241]                     ns <- getNamespace("parallel")
[17:42:59.241]                     if (exists("sendData", mode = "function", 
[17:42:59.241]                       envir = ns)) {
[17:42:59.241]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.241]                         envir = ns)
[17:42:59.241]                       envir <- sys.frame(frame)
[17:42:59.241]                       master <- NULL
[17:42:59.241]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.241]                         !identical(envir, emptyenv())) {
[17:42:59.241]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.241]                           inherits = FALSE)) {
[17:42:59.241]                           master <- get("master", mode = "list", 
[17:42:59.241]                             envir = envir, inherits = FALSE)
[17:42:59.241]                           if (inherits(master, c("SOCKnode", 
[17:42:59.241]                             "SOCK0node"))) {
[17:42:59.241]                             sendCondition <<- function(cond) {
[17:42:59.241]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.241]                                 success = TRUE)
[17:42:59.241]                               parallel_sendData(master, data)
[17:42:59.241]                             }
[17:42:59.241]                             return(sendCondition)
[17:42:59.241]                           }
[17:42:59.241]                         }
[17:42:59.241]                         frame <- frame + 1L
[17:42:59.241]                         envir <- sys.frame(frame)
[17:42:59.241]                       }
[17:42:59.241]                     }
[17:42:59.241]                     sendCondition <<- function(cond) NULL
[17:42:59.241]                   }
[17:42:59.241]                 })
[17:42:59.241]                 withCallingHandlers({
[17:42:59.241]                   {
[17:42:59.241]                     b <- 3
[17:42:59.241]                     c <- 2
[17:42:59.241]                     a * b * c
[17:42:59.241]                   }
[17:42:59.241]                 }, immediateCondition = function(cond) {
[17:42:59.241]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.241]                   sendCondition(cond)
[17:42:59.241]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.241]                   {
[17:42:59.241]                     inherits <- base::inherits
[17:42:59.241]                     invokeRestart <- base::invokeRestart
[17:42:59.241]                     is.null <- base::is.null
[17:42:59.241]                     muffled <- FALSE
[17:42:59.241]                     if (inherits(cond, "message")) {
[17:42:59.241]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.241]                       if (muffled) 
[17:42:59.241]                         invokeRestart("muffleMessage")
[17:42:59.241]                     }
[17:42:59.241]                     else if (inherits(cond, "warning")) {
[17:42:59.241]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.241]                       if (muffled) 
[17:42:59.241]                         invokeRestart("muffleWarning")
[17:42:59.241]                     }
[17:42:59.241]                     else if (inherits(cond, "condition")) {
[17:42:59.241]                       if (!is.null(pattern)) {
[17:42:59.241]                         computeRestarts <- base::computeRestarts
[17:42:59.241]                         grepl <- base::grepl
[17:42:59.241]                         restarts <- computeRestarts(cond)
[17:42:59.241]                         for (restart in restarts) {
[17:42:59.241]                           name <- restart$name
[17:42:59.241]                           if (is.null(name)) 
[17:42:59.241]                             next
[17:42:59.241]                           if (!grepl(pattern, name)) 
[17:42:59.241]                             next
[17:42:59.241]                           invokeRestart(restart)
[17:42:59.241]                           muffled <- TRUE
[17:42:59.241]                           break
[17:42:59.241]                         }
[17:42:59.241]                       }
[17:42:59.241]                     }
[17:42:59.241]                     invisible(muffled)
[17:42:59.241]                   }
[17:42:59.241]                   muffleCondition(cond)
[17:42:59.241]                 })
[17:42:59.241]             }))
[17:42:59.241]             future::FutureResult(value = ...future.value$value, 
[17:42:59.241]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.241]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.241]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.241]                     ...future.globalenv.names))
[17:42:59.241]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.241]         }, condition = base::local({
[17:42:59.241]             c <- base::c
[17:42:59.241]             inherits <- base::inherits
[17:42:59.241]             invokeRestart <- base::invokeRestart
[17:42:59.241]             length <- base::length
[17:42:59.241]             list <- base::list
[17:42:59.241]             seq.int <- base::seq.int
[17:42:59.241]             signalCondition <- base::signalCondition
[17:42:59.241]             sys.calls <- base::sys.calls
[17:42:59.241]             `[[` <- base::`[[`
[17:42:59.241]             `+` <- base::`+`
[17:42:59.241]             `<<-` <- base::`<<-`
[17:42:59.241]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.241]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.241]                   3L)]
[17:42:59.241]             }
[17:42:59.241]             function(cond) {
[17:42:59.241]                 is_error <- inherits(cond, "error")
[17:42:59.241]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.241]                   NULL)
[17:42:59.241]                 if (is_error) {
[17:42:59.241]                   sessionInformation <- function() {
[17:42:59.241]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.241]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.241]                       search = base::search(), system = base::Sys.info())
[17:42:59.241]                   }
[17:42:59.241]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.241]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.241]                     cond$call), session = sessionInformation(), 
[17:42:59.241]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.241]                   signalCondition(cond)
[17:42:59.241]                 }
[17:42:59.241]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.241]                 "immediateCondition"))) {
[17:42:59.241]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.241]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.241]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.241]                   if (TRUE && !signal) {
[17:42:59.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.241]                     {
[17:42:59.241]                       inherits <- base::inherits
[17:42:59.241]                       invokeRestart <- base::invokeRestart
[17:42:59.241]                       is.null <- base::is.null
[17:42:59.241]                       muffled <- FALSE
[17:42:59.241]                       if (inherits(cond, "message")) {
[17:42:59.241]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.241]                         if (muffled) 
[17:42:59.241]                           invokeRestart("muffleMessage")
[17:42:59.241]                       }
[17:42:59.241]                       else if (inherits(cond, "warning")) {
[17:42:59.241]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.241]                         if (muffled) 
[17:42:59.241]                           invokeRestart("muffleWarning")
[17:42:59.241]                       }
[17:42:59.241]                       else if (inherits(cond, "condition")) {
[17:42:59.241]                         if (!is.null(pattern)) {
[17:42:59.241]                           computeRestarts <- base::computeRestarts
[17:42:59.241]                           grepl <- base::grepl
[17:42:59.241]                           restarts <- computeRestarts(cond)
[17:42:59.241]                           for (restart in restarts) {
[17:42:59.241]                             name <- restart$name
[17:42:59.241]                             if (is.null(name)) 
[17:42:59.241]                               next
[17:42:59.241]                             if (!grepl(pattern, name)) 
[17:42:59.241]                               next
[17:42:59.241]                             invokeRestart(restart)
[17:42:59.241]                             muffled <- TRUE
[17:42:59.241]                             break
[17:42:59.241]                           }
[17:42:59.241]                         }
[17:42:59.241]                       }
[17:42:59.241]                       invisible(muffled)
[17:42:59.241]                     }
[17:42:59.241]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.241]                   }
[17:42:59.241]                 }
[17:42:59.241]                 else {
[17:42:59.241]                   if (TRUE) {
[17:42:59.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.241]                     {
[17:42:59.241]                       inherits <- base::inherits
[17:42:59.241]                       invokeRestart <- base::invokeRestart
[17:42:59.241]                       is.null <- base::is.null
[17:42:59.241]                       muffled <- FALSE
[17:42:59.241]                       if (inherits(cond, "message")) {
[17:42:59.241]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.241]                         if (muffled) 
[17:42:59.241]                           invokeRestart("muffleMessage")
[17:42:59.241]                       }
[17:42:59.241]                       else if (inherits(cond, "warning")) {
[17:42:59.241]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.241]                         if (muffled) 
[17:42:59.241]                           invokeRestart("muffleWarning")
[17:42:59.241]                       }
[17:42:59.241]                       else if (inherits(cond, "condition")) {
[17:42:59.241]                         if (!is.null(pattern)) {
[17:42:59.241]                           computeRestarts <- base::computeRestarts
[17:42:59.241]                           grepl <- base::grepl
[17:42:59.241]                           restarts <- computeRestarts(cond)
[17:42:59.241]                           for (restart in restarts) {
[17:42:59.241]                             name <- restart$name
[17:42:59.241]                             if (is.null(name)) 
[17:42:59.241]                               next
[17:42:59.241]                             if (!grepl(pattern, name)) 
[17:42:59.241]                               next
[17:42:59.241]                             invokeRestart(restart)
[17:42:59.241]                             muffled <- TRUE
[17:42:59.241]                             break
[17:42:59.241]                           }
[17:42:59.241]                         }
[17:42:59.241]                       }
[17:42:59.241]                       invisible(muffled)
[17:42:59.241]                     }
[17:42:59.241]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.241]                   }
[17:42:59.241]                 }
[17:42:59.241]             }
[17:42:59.241]         }))
[17:42:59.241]     }, error = function(ex) {
[17:42:59.241]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.241]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.241]                 ...future.rng), started = ...future.startTime, 
[17:42:59.241]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.241]             version = "1.8"), class = "FutureResult")
[17:42:59.241]     }, finally = {
[17:42:59.241]         if (!identical(...future.workdir, getwd())) 
[17:42:59.241]             setwd(...future.workdir)
[17:42:59.241]         {
[17:42:59.241]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.241]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.241]             }
[17:42:59.241]             base::options(...future.oldOptions)
[17:42:59.241]             if (.Platform$OS.type == "windows") {
[17:42:59.241]                 old_names <- names(...future.oldEnvVars)
[17:42:59.241]                 envs <- base::Sys.getenv()
[17:42:59.241]                 names <- names(envs)
[17:42:59.241]                 common <- intersect(names, old_names)
[17:42:59.241]                 added <- setdiff(names, old_names)
[17:42:59.241]                 removed <- setdiff(old_names, names)
[17:42:59.241]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.241]                   envs[common]]
[17:42:59.241]                 NAMES <- toupper(changed)
[17:42:59.241]                 args <- list()
[17:42:59.241]                 for (kk in seq_along(NAMES)) {
[17:42:59.241]                   name <- changed[[kk]]
[17:42:59.241]                   NAME <- NAMES[[kk]]
[17:42:59.241]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.241]                     next
[17:42:59.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.241]                 }
[17:42:59.241]                 NAMES <- toupper(added)
[17:42:59.241]                 for (kk in seq_along(NAMES)) {
[17:42:59.241]                   name <- added[[kk]]
[17:42:59.241]                   NAME <- NAMES[[kk]]
[17:42:59.241]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.241]                     next
[17:42:59.241]                   args[[name]] <- ""
[17:42:59.241]                 }
[17:42:59.241]                 NAMES <- toupper(removed)
[17:42:59.241]                 for (kk in seq_along(NAMES)) {
[17:42:59.241]                   name <- removed[[kk]]
[17:42:59.241]                   NAME <- NAMES[[kk]]
[17:42:59.241]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.241]                     next
[17:42:59.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.241]                 }
[17:42:59.241]                 if (length(args) > 0) 
[17:42:59.241]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.241]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.241]             }
[17:42:59.241]             else {
[17:42:59.241]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.241]             }
[17:42:59.241]             {
[17:42:59.241]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.241]                   0L) {
[17:42:59.241]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.241]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.241]                   base::options(opts)
[17:42:59.241]                 }
[17:42:59.241]                 {
[17:42:59.241]                   {
[17:42:59.241]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.241]                     NULL
[17:42:59.241]                   }
[17:42:59.241]                   options(future.plan = NULL)
[17:42:59.241]                   if (is.na(NA_character_)) 
[17:42:59.241]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.241]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.241]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.241]                   {
[17:42:59.241]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.241]                     if (!future$lazy) 
[17:42:59.241]                       future <- run(future)
[17:42:59.241]                     invisible(future)
[17:42:59.241]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.241]                 }
[17:42:59.241]             }
[17:42:59.241]         }
[17:42:59.241]     })
[17:42:59.241]     if (TRUE) {
[17:42:59.241]         base::sink(type = "output", split = FALSE)
[17:42:59.241]         if (TRUE) {
[17:42:59.241]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.241]         }
[17:42:59.241]         else {
[17:42:59.241]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.241]         }
[17:42:59.241]         base::close(...future.stdout)
[17:42:59.241]         ...future.stdout <- NULL
[17:42:59.241]     }
[17:42:59.241]     ...future.result$conditions <- ...future.conditions
[17:42:59.241]     ...future.result$finished <- base::Sys.time()
[17:42:59.241]     ...future.result
[17:42:59.241] }
[17:42:59.244] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:59.244] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:42:59.245] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:42:59.245] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:59.245] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:59.247] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.247] - Validating connection of MultisessionFuture
[17:42:59.248] - received message: FutureResult
[17:42:59.248] - Received FutureResult
[17:42:59.248] - Erased future from FutureRegistry
[17:42:59.248] result() for ClusterFuture ...
[17:42:59.248] - result already collected: FutureResult
[17:42:59.248] result() for ClusterFuture ... done
[17:42:59.248] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:59.249] result() for ClusterFuture ...
[17:42:59.249] - result already collected: FutureResult
[17:42:59.249] result() for ClusterFuture ... done
[17:42:59.249] result() for ClusterFuture ...
[17:42:59.249] - result already collected: FutureResult
[17:42:59.249] result() for ClusterFuture ... done
[1] 0
*** multisession() with globals and blocking
 - Creating multisession future #2 ...
[17:42:59.254] getGlobalsAndPackages() ...
[17:42:59.254] Searching for globals...
[17:42:59.255] - globals found: [2] ‘{’, ‘ii’
[17:42:59.255] Searching for globals ... DONE
[17:42:59.255] Resolving globals: FALSE
[17:42:59.256] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:59.256] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:42:59.256] - globals: [1] ‘ii’
[17:42:59.256] 
[17:42:59.256] getGlobalsAndPackages() ... DONE
[17:42:59.268] Packages needed by the future expression (n = 0): <none>
[17:42:59.268] Packages needed by future strategies (n = 0): <none>
[17:42:59.269] {
[17:42:59.269]     {
[17:42:59.269]         {
[17:42:59.269]             ...future.startTime <- base::Sys.time()
[17:42:59.269]             {
[17:42:59.269]                 {
[17:42:59.269]                   {
[17:42:59.269]                     {
[17:42:59.269]                       base::local({
[17:42:59.269]                         has_future <- base::requireNamespace("future", 
[17:42:59.269]                           quietly = TRUE)
[17:42:59.269]                         if (has_future) {
[17:42:59.269]                           ns <- base::getNamespace("future")
[17:42:59.269]                           version <- ns[[".package"]][["version"]]
[17:42:59.269]                           if (is.null(version)) 
[17:42:59.269]                             version <- utils::packageVersion("future")
[17:42:59.269]                         }
[17:42:59.269]                         else {
[17:42:59.269]                           version <- NULL
[17:42:59.269]                         }
[17:42:59.269]                         if (!has_future || version < "1.8.0") {
[17:42:59.269]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.269]                             "", base::R.version$version.string), 
[17:42:59.269]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.269]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.269]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.269]                               "release", "version")], collapse = " "), 
[17:42:59.269]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.269]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.269]                             info)
[17:42:59.269]                           info <- base::paste(info, collapse = "; ")
[17:42:59.269]                           if (!has_future) {
[17:42:59.269]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.269]                               info)
[17:42:59.269]                           }
[17:42:59.269]                           else {
[17:42:59.269]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.269]                               info, version)
[17:42:59.269]                           }
[17:42:59.269]                           base::stop(msg)
[17:42:59.269]                         }
[17:42:59.269]                       })
[17:42:59.269]                     }
[17:42:59.269]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.269]                     base::options(mc.cores = 1L)
[17:42:59.269]                   }
[17:42:59.269]                   options(future.plan = NULL)
[17:42:59.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.269]                 }
[17:42:59.269]                 ...future.workdir <- getwd()
[17:42:59.269]             }
[17:42:59.269]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.269]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.269]         }
[17:42:59.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.269]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.269]             base::names(...future.oldOptions))
[17:42:59.269]     }
[17:42:59.269]     if (FALSE) {
[17:42:59.269]     }
[17:42:59.269]     else {
[17:42:59.269]         if (TRUE) {
[17:42:59.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.269]                 open = "w")
[17:42:59.269]         }
[17:42:59.269]         else {
[17:42:59.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.269]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.269]         }
[17:42:59.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.269]             base::sink(type = "output", split = FALSE)
[17:42:59.269]             base::close(...future.stdout)
[17:42:59.269]         }, add = TRUE)
[17:42:59.269]     }
[17:42:59.269]     ...future.frame <- base::sys.nframe()
[17:42:59.269]     ...future.conditions <- base::list()
[17:42:59.269]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.269]     if (FALSE) {
[17:42:59.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.269]     }
[17:42:59.269]     ...future.result <- base::tryCatch({
[17:42:59.269]         base::withCallingHandlers({
[17:42:59.269]             ...future.value <- base::withVisible(base::local({
[17:42:59.269]                 ...future.makeSendCondition <- local({
[17:42:59.269]                   sendCondition <- NULL
[17:42:59.269]                   function(frame = 1L) {
[17:42:59.269]                     if (is.function(sendCondition)) 
[17:42:59.269]                       return(sendCondition)
[17:42:59.269]                     ns <- getNamespace("parallel")
[17:42:59.269]                     if (exists("sendData", mode = "function", 
[17:42:59.269]                       envir = ns)) {
[17:42:59.269]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.269]                         envir = ns)
[17:42:59.269]                       envir <- sys.frame(frame)
[17:42:59.269]                       master <- NULL
[17:42:59.269]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.269]                         !identical(envir, emptyenv())) {
[17:42:59.269]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.269]                           inherits = FALSE)) {
[17:42:59.269]                           master <- get("master", mode = "list", 
[17:42:59.269]                             envir = envir, inherits = FALSE)
[17:42:59.269]                           if (inherits(master, c("SOCKnode", 
[17:42:59.269]                             "SOCK0node"))) {
[17:42:59.269]                             sendCondition <<- function(cond) {
[17:42:59.269]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.269]                                 success = TRUE)
[17:42:59.269]                               parallel_sendData(master, data)
[17:42:59.269]                             }
[17:42:59.269]                             return(sendCondition)
[17:42:59.269]                           }
[17:42:59.269]                         }
[17:42:59.269]                         frame <- frame + 1L
[17:42:59.269]                         envir <- sys.frame(frame)
[17:42:59.269]                       }
[17:42:59.269]                     }
[17:42:59.269]                     sendCondition <<- function(cond) NULL
[17:42:59.269]                   }
[17:42:59.269]                 })
[17:42:59.269]                 withCallingHandlers({
[17:42:59.269]                   {
[17:42:59.269]                     ii
[17:42:59.269]                   }
[17:42:59.269]                 }, immediateCondition = function(cond) {
[17:42:59.269]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.269]                   sendCondition(cond)
[17:42:59.269]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.269]                   {
[17:42:59.269]                     inherits <- base::inherits
[17:42:59.269]                     invokeRestart <- base::invokeRestart
[17:42:59.269]                     is.null <- base::is.null
[17:42:59.269]                     muffled <- FALSE
[17:42:59.269]                     if (inherits(cond, "message")) {
[17:42:59.269]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.269]                       if (muffled) 
[17:42:59.269]                         invokeRestart("muffleMessage")
[17:42:59.269]                     }
[17:42:59.269]                     else if (inherits(cond, "warning")) {
[17:42:59.269]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.269]                       if (muffled) 
[17:42:59.269]                         invokeRestart("muffleWarning")
[17:42:59.269]                     }
[17:42:59.269]                     else if (inherits(cond, "condition")) {
[17:42:59.269]                       if (!is.null(pattern)) {
[17:42:59.269]                         computeRestarts <- base::computeRestarts
[17:42:59.269]                         grepl <- base::grepl
[17:42:59.269]                         restarts <- computeRestarts(cond)
[17:42:59.269]                         for (restart in restarts) {
[17:42:59.269]                           name <- restart$name
[17:42:59.269]                           if (is.null(name)) 
[17:42:59.269]                             next
[17:42:59.269]                           if (!grepl(pattern, name)) 
[17:42:59.269]                             next
[17:42:59.269]                           invokeRestart(restart)
[17:42:59.269]                           muffled <- TRUE
[17:42:59.269]                           break
[17:42:59.269]                         }
[17:42:59.269]                       }
[17:42:59.269]                     }
[17:42:59.269]                     invisible(muffled)
[17:42:59.269]                   }
[17:42:59.269]                   muffleCondition(cond)
[17:42:59.269]                 })
[17:42:59.269]             }))
[17:42:59.269]             future::FutureResult(value = ...future.value$value, 
[17:42:59.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.269]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.269]                     ...future.globalenv.names))
[17:42:59.269]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.269]         }, condition = base::local({
[17:42:59.269]             c <- base::c
[17:42:59.269]             inherits <- base::inherits
[17:42:59.269]             invokeRestart <- base::invokeRestart
[17:42:59.269]             length <- base::length
[17:42:59.269]             list <- base::list
[17:42:59.269]             seq.int <- base::seq.int
[17:42:59.269]             signalCondition <- base::signalCondition
[17:42:59.269]             sys.calls <- base::sys.calls
[17:42:59.269]             `[[` <- base::`[[`
[17:42:59.269]             `+` <- base::`+`
[17:42:59.269]             `<<-` <- base::`<<-`
[17:42:59.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.269]                   3L)]
[17:42:59.269]             }
[17:42:59.269]             function(cond) {
[17:42:59.269]                 is_error <- inherits(cond, "error")
[17:42:59.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.269]                   NULL)
[17:42:59.269]                 if (is_error) {
[17:42:59.269]                   sessionInformation <- function() {
[17:42:59.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.269]                       search = base::search(), system = base::Sys.info())
[17:42:59.269]                   }
[17:42:59.269]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.269]                     cond$call), session = sessionInformation(), 
[17:42:59.269]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.269]                   signalCondition(cond)
[17:42:59.269]                 }
[17:42:59.269]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.269]                 "immediateCondition"))) {
[17:42:59.269]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.269]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.269]                   if (TRUE && !signal) {
[17:42:59.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.269]                     {
[17:42:59.269]                       inherits <- base::inherits
[17:42:59.269]                       invokeRestart <- base::invokeRestart
[17:42:59.269]                       is.null <- base::is.null
[17:42:59.269]                       muffled <- FALSE
[17:42:59.269]                       if (inherits(cond, "message")) {
[17:42:59.269]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.269]                         if (muffled) 
[17:42:59.269]                           invokeRestart("muffleMessage")
[17:42:59.269]                       }
[17:42:59.269]                       else if (inherits(cond, "warning")) {
[17:42:59.269]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.269]                         if (muffled) 
[17:42:59.269]                           invokeRestart("muffleWarning")
[17:42:59.269]                       }
[17:42:59.269]                       else if (inherits(cond, "condition")) {
[17:42:59.269]                         if (!is.null(pattern)) {
[17:42:59.269]                           computeRestarts <- base::computeRestarts
[17:42:59.269]                           grepl <- base::grepl
[17:42:59.269]                           restarts <- computeRestarts(cond)
[17:42:59.269]                           for (restart in restarts) {
[17:42:59.269]                             name <- restart$name
[17:42:59.269]                             if (is.null(name)) 
[17:42:59.269]                               next
[17:42:59.269]                             if (!grepl(pattern, name)) 
[17:42:59.269]                               next
[17:42:59.269]                             invokeRestart(restart)
[17:42:59.269]                             muffled <- TRUE
[17:42:59.269]                             break
[17:42:59.269]                           }
[17:42:59.269]                         }
[17:42:59.269]                       }
[17:42:59.269]                       invisible(muffled)
[17:42:59.269]                     }
[17:42:59.269]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.269]                   }
[17:42:59.269]                 }
[17:42:59.269]                 else {
[17:42:59.269]                   if (TRUE) {
[17:42:59.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.269]                     {
[17:42:59.269]                       inherits <- base::inherits
[17:42:59.269]                       invokeRestart <- base::invokeRestart
[17:42:59.269]                       is.null <- base::is.null
[17:42:59.269]                       muffled <- FALSE
[17:42:59.269]                       if (inherits(cond, "message")) {
[17:42:59.269]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.269]                         if (muffled) 
[17:42:59.269]                           invokeRestart("muffleMessage")
[17:42:59.269]                       }
[17:42:59.269]                       else if (inherits(cond, "warning")) {
[17:42:59.269]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.269]                         if (muffled) 
[17:42:59.269]                           invokeRestart("muffleWarning")
[17:42:59.269]                       }
[17:42:59.269]                       else if (inherits(cond, "condition")) {
[17:42:59.269]                         if (!is.null(pattern)) {
[17:42:59.269]                           computeRestarts <- base::computeRestarts
[17:42:59.269]                           grepl <- base::grepl
[17:42:59.269]                           restarts <- computeRestarts(cond)
[17:42:59.269]                           for (restart in restarts) {
[17:42:59.269]                             name <- restart$name
[17:42:59.269]                             if (is.null(name)) 
[17:42:59.269]                               next
[17:42:59.269]                             if (!grepl(pattern, name)) 
[17:42:59.269]                               next
[17:42:59.269]                             invokeRestart(restart)
[17:42:59.269]                             muffled <- TRUE
[17:42:59.269]                             break
[17:42:59.269]                           }
[17:42:59.269]                         }
[17:42:59.269]                       }
[17:42:59.269]                       invisible(muffled)
[17:42:59.269]                     }
[17:42:59.269]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.269]                   }
[17:42:59.269]                 }
[17:42:59.269]             }
[17:42:59.269]         }))
[17:42:59.269]     }, error = function(ex) {
[17:42:59.269]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.269]                 ...future.rng), started = ...future.startTime, 
[17:42:59.269]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.269]             version = "1.8"), class = "FutureResult")
[17:42:59.269]     }, finally = {
[17:42:59.269]         if (!identical(...future.workdir, getwd())) 
[17:42:59.269]             setwd(...future.workdir)
[17:42:59.269]         {
[17:42:59.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.269]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.269]             }
[17:42:59.269]             base::options(...future.oldOptions)
[17:42:59.269]             if (.Platform$OS.type == "windows") {
[17:42:59.269]                 old_names <- names(...future.oldEnvVars)
[17:42:59.269]                 envs <- base::Sys.getenv()
[17:42:59.269]                 names <- names(envs)
[17:42:59.269]                 common <- intersect(names, old_names)
[17:42:59.269]                 added <- setdiff(names, old_names)
[17:42:59.269]                 removed <- setdiff(old_names, names)
[17:42:59.269]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.269]                   envs[common]]
[17:42:59.269]                 NAMES <- toupper(changed)
[17:42:59.269]                 args <- list()
[17:42:59.269]                 for (kk in seq_along(NAMES)) {
[17:42:59.269]                   name <- changed[[kk]]
[17:42:59.269]                   NAME <- NAMES[[kk]]
[17:42:59.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.269]                     next
[17:42:59.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.269]                 }
[17:42:59.269]                 NAMES <- toupper(added)
[17:42:59.269]                 for (kk in seq_along(NAMES)) {
[17:42:59.269]                   name <- added[[kk]]
[17:42:59.269]                   NAME <- NAMES[[kk]]
[17:42:59.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.269]                     next
[17:42:59.269]                   args[[name]] <- ""
[17:42:59.269]                 }
[17:42:59.269]                 NAMES <- toupper(removed)
[17:42:59.269]                 for (kk in seq_along(NAMES)) {
[17:42:59.269]                   name <- removed[[kk]]
[17:42:59.269]                   NAME <- NAMES[[kk]]
[17:42:59.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.269]                     next
[17:42:59.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.269]                 }
[17:42:59.269]                 if (length(args) > 0) 
[17:42:59.269]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.269]             }
[17:42:59.269]             else {
[17:42:59.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.269]             }
[17:42:59.269]             {
[17:42:59.269]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.269]                   0L) {
[17:42:59.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.269]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.269]                   base::options(opts)
[17:42:59.269]                 }
[17:42:59.269]                 {
[17:42:59.269]                   {
[17:42:59.269]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.269]                     NULL
[17:42:59.269]                   }
[17:42:59.269]                   options(future.plan = NULL)
[17:42:59.269]                   if (is.na(NA_character_)) 
[17:42:59.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.269]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.269]                   {
[17:42:59.269]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.269]                     if (!future$lazy) 
[17:42:59.269]                       future <- run(future)
[17:42:59.269]                     invisible(future)
[17:42:59.269]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.269]                 }
[17:42:59.269]             }
[17:42:59.269]         }
[17:42:59.269]     })
[17:42:59.269]     if (TRUE) {
[17:42:59.269]         base::sink(type = "output", split = FALSE)
[17:42:59.269]         if (TRUE) {
[17:42:59.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.269]         }
[17:42:59.269]         else {
[17:42:59.269]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.269]         }
[17:42:59.269]         base::close(...future.stdout)
[17:42:59.269]         ...future.stdout <- NULL
[17:42:59.269]     }
[17:42:59.269]     ...future.result$conditions <- ...future.conditions
[17:42:59.269]     ...future.result$finished <- base::Sys.time()
[17:42:59.269]     ...future.result
[17:42:59.269] }
[17:42:59.272] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:42:59.272] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[17:42:59.273] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[17:42:59.273] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:42:59.273] MultisessionFuture started
 - Creating multisession future #1 ...
[17:42:59.277] getGlobalsAndPackages() ...
[17:42:59.278] Searching for globals...
[17:42:59.279] - globals found: [2] ‘{’, ‘ii’
[17:42:59.279] Searching for globals ... DONE
[17:42:59.279] Resolving globals: FALSE
[17:42:59.279] The total size of the 1 globals is 56 bytes (56 bytes)
[17:42:59.280] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:42:59.280] - globals: [1] ‘ii’
[17:42:59.280] 
[17:42:59.280] getGlobalsAndPackages() ... DONE
[17:42:59.292] Packages needed by the future expression (n = 0): <none>
[17:42:59.292] Packages needed by future strategies (n = 0): <none>
[17:42:59.293] {
[17:42:59.293]     {
[17:42:59.293]         {
[17:42:59.293]             ...future.startTime <- base::Sys.time()
[17:42:59.293]             {
[17:42:59.293]                 {
[17:42:59.293]                   {
[17:42:59.293]                     {
[17:42:59.293]                       base::local({
[17:42:59.293]                         has_future <- base::requireNamespace("future", 
[17:42:59.293]                           quietly = TRUE)
[17:42:59.293]                         if (has_future) {
[17:42:59.293]                           ns <- base::getNamespace("future")
[17:42:59.293]                           version <- ns[[".package"]][["version"]]
[17:42:59.293]                           if (is.null(version)) 
[17:42:59.293]                             version <- utils::packageVersion("future")
[17:42:59.293]                         }
[17:42:59.293]                         else {
[17:42:59.293]                           version <- NULL
[17:42:59.293]                         }
[17:42:59.293]                         if (!has_future || version < "1.8.0") {
[17:42:59.293]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.293]                             "", base::R.version$version.string), 
[17:42:59.293]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.293]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.293]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.293]                               "release", "version")], collapse = " "), 
[17:42:59.293]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.293]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.293]                             info)
[17:42:59.293]                           info <- base::paste(info, collapse = "; ")
[17:42:59.293]                           if (!has_future) {
[17:42:59.293]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.293]                               info)
[17:42:59.293]                           }
[17:42:59.293]                           else {
[17:42:59.293]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.293]                               info, version)
[17:42:59.293]                           }
[17:42:59.293]                           base::stop(msg)
[17:42:59.293]                         }
[17:42:59.293]                       })
[17:42:59.293]                     }
[17:42:59.293]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.293]                     base::options(mc.cores = 1L)
[17:42:59.293]                   }
[17:42:59.293]                   options(future.plan = NULL)
[17:42:59.293]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.293]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.293]                 }
[17:42:59.293]                 ...future.workdir <- getwd()
[17:42:59.293]             }
[17:42:59.293]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.293]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.293]         }
[17:42:59.293]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.293]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.293]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.293]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.293]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.293]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.293]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.293]             base::names(...future.oldOptions))
[17:42:59.293]     }
[17:42:59.293]     if (FALSE) {
[17:42:59.293]     }
[17:42:59.293]     else {
[17:42:59.293]         if (TRUE) {
[17:42:59.293]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.293]                 open = "w")
[17:42:59.293]         }
[17:42:59.293]         else {
[17:42:59.293]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.293]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.293]         }
[17:42:59.293]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.293]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.293]             base::sink(type = "output", split = FALSE)
[17:42:59.293]             base::close(...future.stdout)
[17:42:59.293]         }, add = TRUE)
[17:42:59.293]     }
[17:42:59.293]     ...future.frame <- base::sys.nframe()
[17:42:59.293]     ...future.conditions <- base::list()
[17:42:59.293]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.293]     if (FALSE) {
[17:42:59.293]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.293]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.293]     }
[17:42:59.293]     ...future.result <- base::tryCatch({
[17:42:59.293]         base::withCallingHandlers({
[17:42:59.293]             ...future.value <- base::withVisible(base::local({
[17:42:59.293]                 ...future.makeSendCondition <- local({
[17:42:59.293]                   sendCondition <- NULL
[17:42:59.293]                   function(frame = 1L) {
[17:42:59.293]                     if (is.function(sendCondition)) 
[17:42:59.293]                       return(sendCondition)
[17:42:59.293]                     ns <- getNamespace("parallel")
[17:42:59.293]                     if (exists("sendData", mode = "function", 
[17:42:59.293]                       envir = ns)) {
[17:42:59.293]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.293]                         envir = ns)
[17:42:59.293]                       envir <- sys.frame(frame)
[17:42:59.293]                       master <- NULL
[17:42:59.293]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.293]                         !identical(envir, emptyenv())) {
[17:42:59.293]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.293]                           inherits = FALSE)) {
[17:42:59.293]                           master <- get("master", mode = "list", 
[17:42:59.293]                             envir = envir, inherits = FALSE)
[17:42:59.293]                           if (inherits(master, c("SOCKnode", 
[17:42:59.293]                             "SOCK0node"))) {
[17:42:59.293]                             sendCondition <<- function(cond) {
[17:42:59.293]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.293]                                 success = TRUE)
[17:42:59.293]                               parallel_sendData(master, data)
[17:42:59.293]                             }
[17:42:59.293]                             return(sendCondition)
[17:42:59.293]                           }
[17:42:59.293]                         }
[17:42:59.293]                         frame <- frame + 1L
[17:42:59.293]                         envir <- sys.frame(frame)
[17:42:59.293]                       }
[17:42:59.293]                     }
[17:42:59.293]                     sendCondition <<- function(cond) NULL
[17:42:59.293]                   }
[17:42:59.293]                 })
[17:42:59.293]                 withCallingHandlers({
[17:42:59.293]                   {
[17:42:59.293]                     ii
[17:42:59.293]                   }
[17:42:59.293]                 }, immediateCondition = function(cond) {
[17:42:59.293]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.293]                   sendCondition(cond)
[17:42:59.293]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.293]                   {
[17:42:59.293]                     inherits <- base::inherits
[17:42:59.293]                     invokeRestart <- base::invokeRestart
[17:42:59.293]                     is.null <- base::is.null
[17:42:59.293]                     muffled <- FALSE
[17:42:59.293]                     if (inherits(cond, "message")) {
[17:42:59.293]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.293]                       if (muffled) 
[17:42:59.293]                         invokeRestart("muffleMessage")
[17:42:59.293]                     }
[17:42:59.293]                     else if (inherits(cond, "warning")) {
[17:42:59.293]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.293]                       if (muffled) 
[17:42:59.293]                         invokeRestart("muffleWarning")
[17:42:59.293]                     }
[17:42:59.293]                     else if (inherits(cond, "condition")) {
[17:42:59.293]                       if (!is.null(pattern)) {
[17:42:59.293]                         computeRestarts <- base::computeRestarts
[17:42:59.293]                         grepl <- base::grepl
[17:42:59.293]                         restarts <- computeRestarts(cond)
[17:42:59.293]                         for (restart in restarts) {
[17:42:59.293]                           name <- restart$name
[17:42:59.293]                           if (is.null(name)) 
[17:42:59.293]                             next
[17:42:59.293]                           if (!grepl(pattern, name)) 
[17:42:59.293]                             next
[17:42:59.293]                           invokeRestart(restart)
[17:42:59.293]                           muffled <- TRUE
[17:42:59.293]                           break
[17:42:59.293]                         }
[17:42:59.293]                       }
[17:42:59.293]                     }
[17:42:59.293]                     invisible(muffled)
[17:42:59.293]                   }
[17:42:59.293]                   muffleCondition(cond)
[17:42:59.293]                 })
[17:42:59.293]             }))
[17:42:59.293]             future::FutureResult(value = ...future.value$value, 
[17:42:59.293]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.293]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.293]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.293]                     ...future.globalenv.names))
[17:42:59.293]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.293]         }, condition = base::local({
[17:42:59.293]             c <- base::c
[17:42:59.293]             inherits <- base::inherits
[17:42:59.293]             invokeRestart <- base::invokeRestart
[17:42:59.293]             length <- base::length
[17:42:59.293]             list <- base::list
[17:42:59.293]             seq.int <- base::seq.int
[17:42:59.293]             signalCondition <- base::signalCondition
[17:42:59.293]             sys.calls <- base::sys.calls
[17:42:59.293]             `[[` <- base::`[[`
[17:42:59.293]             `+` <- base::`+`
[17:42:59.293]             `<<-` <- base::`<<-`
[17:42:59.293]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.293]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.293]                   3L)]
[17:42:59.293]             }
[17:42:59.293]             function(cond) {
[17:42:59.293]                 is_error <- inherits(cond, "error")
[17:42:59.293]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.293]                   NULL)
[17:42:59.293]                 if (is_error) {
[17:42:59.293]                   sessionInformation <- function() {
[17:42:59.293]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.293]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.293]                       search = base::search(), system = base::Sys.info())
[17:42:59.293]                   }
[17:42:59.293]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.293]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.293]                     cond$call), session = sessionInformation(), 
[17:42:59.293]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.293]                   signalCondition(cond)
[17:42:59.293]                 }
[17:42:59.293]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.293]                 "immediateCondition"))) {
[17:42:59.293]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.293]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.293]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.293]                   if (TRUE && !signal) {
[17:42:59.293]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.293]                     {
[17:42:59.293]                       inherits <- base::inherits
[17:42:59.293]                       invokeRestart <- base::invokeRestart
[17:42:59.293]                       is.null <- base::is.null
[17:42:59.293]                       muffled <- FALSE
[17:42:59.293]                       if (inherits(cond, "message")) {
[17:42:59.293]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.293]                         if (muffled) 
[17:42:59.293]                           invokeRestart("muffleMessage")
[17:42:59.293]                       }
[17:42:59.293]                       else if (inherits(cond, "warning")) {
[17:42:59.293]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.293]                         if (muffled) 
[17:42:59.293]                           invokeRestart("muffleWarning")
[17:42:59.293]                       }
[17:42:59.293]                       else if (inherits(cond, "condition")) {
[17:42:59.293]                         if (!is.null(pattern)) {
[17:42:59.293]                           computeRestarts <- base::computeRestarts
[17:42:59.293]                           grepl <- base::grepl
[17:42:59.293]                           restarts <- computeRestarts(cond)
[17:42:59.293]                           for (restart in restarts) {
[17:42:59.293]                             name <- restart$name
[17:42:59.293]                             if (is.null(name)) 
[17:42:59.293]                               next
[17:42:59.293]                             if (!grepl(pattern, name)) 
[17:42:59.293]                               next
[17:42:59.293]                             invokeRestart(restart)
[17:42:59.293]                             muffled <- TRUE
[17:42:59.293]                             break
[17:42:59.293]                           }
[17:42:59.293]                         }
[17:42:59.293]                       }
[17:42:59.293]                       invisible(muffled)
[17:42:59.293]                     }
[17:42:59.293]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.293]                   }
[17:42:59.293]                 }
[17:42:59.293]                 else {
[17:42:59.293]                   if (TRUE) {
[17:42:59.293]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.293]                     {
[17:42:59.293]                       inherits <- base::inherits
[17:42:59.293]                       invokeRestart <- base::invokeRestart
[17:42:59.293]                       is.null <- base::is.null
[17:42:59.293]                       muffled <- FALSE
[17:42:59.293]                       if (inherits(cond, "message")) {
[17:42:59.293]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.293]                         if (muffled) 
[17:42:59.293]                           invokeRestart("muffleMessage")
[17:42:59.293]                       }
[17:42:59.293]                       else if (inherits(cond, "warning")) {
[17:42:59.293]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.293]                         if (muffled) 
[17:42:59.293]                           invokeRestart("muffleWarning")
[17:42:59.293]                       }
[17:42:59.293]                       else if (inherits(cond, "condition")) {
[17:42:59.293]                         if (!is.null(pattern)) {
[17:42:59.293]                           computeRestarts <- base::computeRestarts
[17:42:59.293]                           grepl <- base::grepl
[17:42:59.293]                           restarts <- computeRestarts(cond)
[17:42:59.293]                           for (restart in restarts) {
[17:42:59.293]                             name <- restart$name
[17:42:59.293]                             if (is.null(name)) 
[17:42:59.293]                               next
[17:42:59.293]                             if (!grepl(pattern, name)) 
[17:42:59.293]                               next
[17:42:59.293]                             invokeRestart(restart)
[17:42:59.293]                             muffled <- TRUE
[17:42:59.293]                             break
[17:42:59.293]                           }
[17:42:59.293]                         }
[17:42:59.293]                       }
[17:42:59.293]                       invisible(muffled)
[17:42:59.293]                     }
[17:42:59.293]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.293]                   }
[17:42:59.293]                 }
[17:42:59.293]             }
[17:42:59.293]         }))
[17:42:59.293]     }, error = function(ex) {
[17:42:59.293]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.293]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.293]                 ...future.rng), started = ...future.startTime, 
[17:42:59.293]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.293]             version = "1.8"), class = "FutureResult")
[17:42:59.293]     }, finally = {
[17:42:59.293]         if (!identical(...future.workdir, getwd())) 
[17:42:59.293]             setwd(...future.workdir)
[17:42:59.293]         {
[17:42:59.293]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.293]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.293]             }
[17:42:59.293]             base::options(...future.oldOptions)
[17:42:59.293]             if (.Platform$OS.type == "windows") {
[17:42:59.293]                 old_names <- names(...future.oldEnvVars)
[17:42:59.293]                 envs <- base::Sys.getenv()
[17:42:59.293]                 names <- names(envs)
[17:42:59.293]                 common <- intersect(names, old_names)
[17:42:59.293]                 added <- setdiff(names, old_names)
[17:42:59.293]                 removed <- setdiff(old_names, names)
[17:42:59.293]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.293]                   envs[common]]
[17:42:59.293]                 NAMES <- toupper(changed)
[17:42:59.293]                 args <- list()
[17:42:59.293]                 for (kk in seq_along(NAMES)) {
[17:42:59.293]                   name <- changed[[kk]]
[17:42:59.293]                   NAME <- NAMES[[kk]]
[17:42:59.293]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.293]                     next
[17:42:59.293]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.293]                 }
[17:42:59.293]                 NAMES <- toupper(added)
[17:42:59.293]                 for (kk in seq_along(NAMES)) {
[17:42:59.293]                   name <- added[[kk]]
[17:42:59.293]                   NAME <- NAMES[[kk]]
[17:42:59.293]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.293]                     next
[17:42:59.293]                   args[[name]] <- ""
[17:42:59.293]                 }
[17:42:59.293]                 NAMES <- toupper(removed)
[17:42:59.293]                 for (kk in seq_along(NAMES)) {
[17:42:59.293]                   name <- removed[[kk]]
[17:42:59.293]                   NAME <- NAMES[[kk]]
[17:42:59.293]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.293]                     next
[17:42:59.293]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.293]                 }
[17:42:59.293]                 if (length(args) > 0) 
[17:42:59.293]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.293]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.293]             }
[17:42:59.293]             else {
[17:42:59.293]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.293]             }
[17:42:59.293]             {
[17:42:59.293]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.293]                   0L) {
[17:42:59.293]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.293]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.293]                   base::options(opts)
[17:42:59.293]                 }
[17:42:59.293]                 {
[17:42:59.293]                   {
[17:42:59.293]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.293]                     NULL
[17:42:59.293]                   }
[17:42:59.293]                   options(future.plan = NULL)
[17:42:59.293]                   if (is.na(NA_character_)) 
[17:42:59.293]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.293]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.293]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.293]                   {
[17:42:59.293]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.293]                     if (!future$lazy) 
[17:42:59.293]                       future <- run(future)
[17:42:59.293]                     invisible(future)
[17:42:59.293]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.293]                 }
[17:42:59.293]             }
[17:42:59.293]         }
[17:42:59.293]     })
[17:42:59.293]     if (TRUE) {
[17:42:59.293]         base::sink(type = "output", split = FALSE)
[17:42:59.293]         if (TRUE) {
[17:42:59.293]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.293]         }
[17:42:59.293]         else {
[17:42:59.293]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.293]         }
[17:42:59.293]         base::close(...future.stdout)
[17:42:59.293]         ...future.stdout <- NULL
[17:42:59.293]     }
[17:42:59.293]     ...future.result$conditions <- ...future.conditions
[17:42:59.293]     ...future.result$finished <- base::Sys.time()
[17:42:59.293]     ...future.result
[17:42:59.293] }
[17:42:59.366] Exporting 1 global objects (56 bytes) to cluster node #2 ...
[17:42:59.366] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[17:42:59.366] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[17:42:59.367] Exporting 1 global objects (56 bytes) to cluster node #2 ... DONE
[17:42:59.367] MultisessionFuture started
 - Resolving 2 multisession futures
[17:42:59.368] result() for ClusterFuture ...
[17:42:59.368] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.368] - Validating connection of MultisessionFuture
[17:42:59.438] - received message: FutureResult
[17:42:59.438] - Received FutureResult
[17:42:59.438] - Erased future from FutureRegistry
[17:42:59.439] result() for ClusterFuture ...
[17:42:59.439] - result already collected: FutureResult
[17:42:59.439] result() for ClusterFuture ... done
[17:42:59.439] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:59.439] result() for ClusterFuture ... done
[17:42:59.439] result() for ClusterFuture ...
[17:42:59.439] - result already collected: FutureResult
[17:42:59.439] result() for ClusterFuture ... done
[17:42:59.440] result() for ClusterFuture ...
[17:42:59.440] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.440] - Validating connection of MultisessionFuture
[17:42:59.440] - received message: FutureResult
[17:42:59.440] - Received FutureResult
[17:42:59.440] - Erased future from FutureRegistry
[17:42:59.441] result() for ClusterFuture ...
[17:42:59.441] - result already collected: FutureResult
[17:42:59.441] result() for ClusterFuture ... done
[17:42:59.441] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:59.441] result() for ClusterFuture ... done
[17:42:59.441] result() for ClusterFuture ...
[17:42:59.441] - result already collected: FutureResult
[17:42:59.441] result() for ClusterFuture ... done
*** multisession() - workers inherit .libPaths()
[17:42:59.442] getGlobalsAndPackages() ...
[17:42:59.442] Searching for globals...
[17:42:59.442] - globals found: [1] ‘.libPaths’
[17:42:59.443] Searching for globals ... DONE
[17:42:59.443] Resolving globals: FALSE
[17:42:59.443] 
[17:42:59.443] 
[17:42:59.443] getGlobalsAndPackages() ... DONE
[17:42:59.444] run() for ‘Future’ ...
[17:42:59.444] - state: ‘created’
[17:42:59.444] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:59.444] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:59.444] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:59.445]   - Field: ‘label’
[17:42:59.445]   - Field: ‘local’
[17:42:59.445]   - Field: ‘owner’
[17:42:59.445]   - Field: ‘envir’
[17:42:59.445]   - Field: ‘packages’
[17:42:59.445]   - Field: ‘gc’
[17:42:59.445]   - Field: ‘conditions’
[17:42:59.445]   - Field: ‘expr’
[17:42:59.445]   - Field: ‘uuid’
[17:42:59.446]   - Field: ‘seed’
[17:42:59.446]   - Field: ‘version’
[17:42:59.446]   - Field: ‘result’
[17:42:59.446]   - Field: ‘asynchronous’
[17:42:59.446]   - Field: ‘calls’
[17:42:59.446]   - Field: ‘globals’
[17:42:59.446]   - Field: ‘stdout’
[17:42:59.446]   - Field: ‘earlySignal’
[17:42:59.447]   - Field: ‘lazy’
[17:42:59.447]   - Field: ‘state’
[17:42:59.447] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:59.447] - Launch lazy future ...
[17:42:59.447] Packages needed by the future expression (n = 0): <none>
[17:42:59.447] Packages needed by future strategies (n = 0): <none>
[17:42:59.448] {
[17:42:59.448]     {
[17:42:59.448]         {
[17:42:59.448]             ...future.startTime <- base::Sys.time()
[17:42:59.448]             {
[17:42:59.448]                 {
[17:42:59.448]                   {
[17:42:59.448]                     base::local({
[17:42:59.448]                       has_future <- base::requireNamespace("future", 
[17:42:59.448]                         quietly = TRUE)
[17:42:59.448]                       if (has_future) {
[17:42:59.448]                         ns <- base::getNamespace("future")
[17:42:59.448]                         version <- ns[[".package"]][["version"]]
[17:42:59.448]                         if (is.null(version)) 
[17:42:59.448]                           version <- utils::packageVersion("future")
[17:42:59.448]                       }
[17:42:59.448]                       else {
[17:42:59.448]                         version <- NULL
[17:42:59.448]                       }
[17:42:59.448]                       if (!has_future || version < "1.8.0") {
[17:42:59.448]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.448]                           "", base::R.version$version.string), 
[17:42:59.448]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:59.448]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.448]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.448]                             "release", "version")], collapse = " "), 
[17:42:59.448]                           hostname = base::Sys.info()[["nodename"]])
[17:42:59.448]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.448]                           info)
[17:42:59.448]                         info <- base::paste(info, collapse = "; ")
[17:42:59.448]                         if (!has_future) {
[17:42:59.448]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.448]                             info)
[17:42:59.448]                         }
[17:42:59.448]                         else {
[17:42:59.448]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.448]                             info, version)
[17:42:59.448]                         }
[17:42:59.448]                         base::stop(msg)
[17:42:59.448]                       }
[17:42:59.448]                     })
[17:42:59.448]                   }
[17:42:59.448]                   options(future.plan = NULL)
[17:42:59.448]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.448]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.448]                 }
[17:42:59.448]                 ...future.workdir <- getwd()
[17:42:59.448]             }
[17:42:59.448]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.448]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.448]         }
[17:42:59.448]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.448]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.448]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.448]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.448]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.448]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.448]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.448]             base::names(...future.oldOptions))
[17:42:59.448]     }
[17:42:59.448]     if (FALSE) {
[17:42:59.448]     }
[17:42:59.448]     else {
[17:42:59.448]         if (TRUE) {
[17:42:59.448]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.448]                 open = "w")
[17:42:59.448]         }
[17:42:59.448]         else {
[17:42:59.448]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.448]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.448]         }
[17:42:59.448]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.448]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.448]             base::sink(type = "output", split = FALSE)
[17:42:59.448]             base::close(...future.stdout)
[17:42:59.448]         }, add = TRUE)
[17:42:59.448]     }
[17:42:59.448]     ...future.frame <- base::sys.nframe()
[17:42:59.448]     ...future.conditions <- base::list()
[17:42:59.448]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.448]     if (FALSE) {
[17:42:59.448]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.448]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.448]     }
[17:42:59.448]     ...future.result <- base::tryCatch({
[17:42:59.448]         base::withCallingHandlers({
[17:42:59.448]             ...future.value <- base::withVisible(base::local(.libPaths()))
[17:42:59.448]             future::FutureResult(value = ...future.value$value, 
[17:42:59.448]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.448]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.448]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.448]                     ...future.globalenv.names))
[17:42:59.448]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.448]         }, condition = base::local({
[17:42:59.448]             c <- base::c
[17:42:59.448]             inherits <- base::inherits
[17:42:59.448]             invokeRestart <- base::invokeRestart
[17:42:59.448]             length <- base::length
[17:42:59.448]             list <- base::list
[17:42:59.448]             seq.int <- base::seq.int
[17:42:59.448]             signalCondition <- base::signalCondition
[17:42:59.448]             sys.calls <- base::sys.calls
[17:42:59.448]             `[[` <- base::`[[`
[17:42:59.448]             `+` <- base::`+`
[17:42:59.448]             `<<-` <- base::`<<-`
[17:42:59.448]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.448]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.448]                   3L)]
[17:42:59.448]             }
[17:42:59.448]             function(cond) {
[17:42:59.448]                 is_error <- inherits(cond, "error")
[17:42:59.448]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.448]                   NULL)
[17:42:59.448]                 if (is_error) {
[17:42:59.448]                   sessionInformation <- function() {
[17:42:59.448]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.448]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.448]                       search = base::search(), system = base::Sys.info())
[17:42:59.448]                   }
[17:42:59.448]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.448]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.448]                     cond$call), session = sessionInformation(), 
[17:42:59.448]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.448]                   signalCondition(cond)
[17:42:59.448]                 }
[17:42:59.448]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.448]                 "immediateCondition"))) {
[17:42:59.448]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.448]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.448]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.448]                   if (TRUE && !signal) {
[17:42:59.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.448]                     {
[17:42:59.448]                       inherits <- base::inherits
[17:42:59.448]                       invokeRestart <- base::invokeRestart
[17:42:59.448]                       is.null <- base::is.null
[17:42:59.448]                       muffled <- FALSE
[17:42:59.448]                       if (inherits(cond, "message")) {
[17:42:59.448]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.448]                         if (muffled) 
[17:42:59.448]                           invokeRestart("muffleMessage")
[17:42:59.448]                       }
[17:42:59.448]                       else if (inherits(cond, "warning")) {
[17:42:59.448]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.448]                         if (muffled) 
[17:42:59.448]                           invokeRestart("muffleWarning")
[17:42:59.448]                       }
[17:42:59.448]                       else if (inherits(cond, "condition")) {
[17:42:59.448]                         if (!is.null(pattern)) {
[17:42:59.448]                           computeRestarts <- base::computeRestarts
[17:42:59.448]                           grepl <- base::grepl
[17:42:59.448]                           restarts <- computeRestarts(cond)
[17:42:59.448]                           for (restart in restarts) {
[17:42:59.448]                             name <- restart$name
[17:42:59.448]                             if (is.null(name)) 
[17:42:59.448]                               next
[17:42:59.448]                             if (!grepl(pattern, name)) 
[17:42:59.448]                               next
[17:42:59.448]                             invokeRestart(restart)
[17:42:59.448]                             muffled <- TRUE
[17:42:59.448]                             break
[17:42:59.448]                           }
[17:42:59.448]                         }
[17:42:59.448]                       }
[17:42:59.448]                       invisible(muffled)
[17:42:59.448]                     }
[17:42:59.448]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.448]                   }
[17:42:59.448]                 }
[17:42:59.448]                 else {
[17:42:59.448]                   if (TRUE) {
[17:42:59.448]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.448]                     {
[17:42:59.448]                       inherits <- base::inherits
[17:42:59.448]                       invokeRestart <- base::invokeRestart
[17:42:59.448]                       is.null <- base::is.null
[17:42:59.448]                       muffled <- FALSE
[17:42:59.448]                       if (inherits(cond, "message")) {
[17:42:59.448]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.448]                         if (muffled) 
[17:42:59.448]                           invokeRestart("muffleMessage")
[17:42:59.448]                       }
[17:42:59.448]                       else if (inherits(cond, "warning")) {
[17:42:59.448]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.448]                         if (muffled) 
[17:42:59.448]                           invokeRestart("muffleWarning")
[17:42:59.448]                       }
[17:42:59.448]                       else if (inherits(cond, "condition")) {
[17:42:59.448]                         if (!is.null(pattern)) {
[17:42:59.448]                           computeRestarts <- base::computeRestarts
[17:42:59.448]                           grepl <- base::grepl
[17:42:59.448]                           restarts <- computeRestarts(cond)
[17:42:59.448]                           for (restart in restarts) {
[17:42:59.448]                             name <- restart$name
[17:42:59.448]                             if (is.null(name)) 
[17:42:59.448]                               next
[17:42:59.448]                             if (!grepl(pattern, name)) 
[17:42:59.448]                               next
[17:42:59.448]                             invokeRestart(restart)
[17:42:59.448]                             muffled <- TRUE
[17:42:59.448]                             break
[17:42:59.448]                           }
[17:42:59.448]                         }
[17:42:59.448]                       }
[17:42:59.448]                       invisible(muffled)
[17:42:59.448]                     }
[17:42:59.448]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.448]                   }
[17:42:59.448]                 }
[17:42:59.448]             }
[17:42:59.448]         }))
[17:42:59.448]     }, error = function(ex) {
[17:42:59.448]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.448]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.448]                 ...future.rng), started = ...future.startTime, 
[17:42:59.448]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.448]             version = "1.8"), class = "FutureResult")
[17:42:59.448]     }, finally = {
[17:42:59.448]         if (!identical(...future.workdir, getwd())) 
[17:42:59.448]             setwd(...future.workdir)
[17:42:59.448]         {
[17:42:59.448]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.448]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.448]             }
[17:42:59.448]             base::options(...future.oldOptions)
[17:42:59.448]             if (.Platform$OS.type == "windows") {
[17:42:59.448]                 old_names <- names(...future.oldEnvVars)
[17:42:59.448]                 envs <- base::Sys.getenv()
[17:42:59.448]                 names <- names(envs)
[17:42:59.448]                 common <- intersect(names, old_names)
[17:42:59.448]                 added <- setdiff(names, old_names)
[17:42:59.448]                 removed <- setdiff(old_names, names)
[17:42:59.448]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.448]                   envs[common]]
[17:42:59.448]                 NAMES <- toupper(changed)
[17:42:59.448]                 args <- list()
[17:42:59.448]                 for (kk in seq_along(NAMES)) {
[17:42:59.448]                   name <- changed[[kk]]
[17:42:59.448]                   NAME <- NAMES[[kk]]
[17:42:59.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.448]                     next
[17:42:59.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.448]                 }
[17:42:59.448]                 NAMES <- toupper(added)
[17:42:59.448]                 for (kk in seq_along(NAMES)) {
[17:42:59.448]                   name <- added[[kk]]
[17:42:59.448]                   NAME <- NAMES[[kk]]
[17:42:59.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.448]                     next
[17:42:59.448]                   args[[name]] <- ""
[17:42:59.448]                 }
[17:42:59.448]                 NAMES <- toupper(removed)
[17:42:59.448]                 for (kk in seq_along(NAMES)) {
[17:42:59.448]                   name <- removed[[kk]]
[17:42:59.448]                   NAME <- NAMES[[kk]]
[17:42:59.448]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.448]                     next
[17:42:59.448]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.448]                 }
[17:42:59.448]                 if (length(args) > 0) 
[17:42:59.448]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.448]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.448]             }
[17:42:59.448]             else {
[17:42:59.448]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.448]             }
[17:42:59.448]             {
[17:42:59.448]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.448]                   0L) {
[17:42:59.448]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.448]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.448]                   base::options(opts)
[17:42:59.448]                 }
[17:42:59.448]                 {
[17:42:59.448]                   {
[17:42:59.448]                     NULL
[17:42:59.448]                     RNGkind("Mersenne-Twister")
[17:42:59.448]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:59.448]                       inherits = FALSE)
[17:42:59.448]                   }
[17:42:59.448]                   options(future.plan = NULL)
[17:42:59.448]                   if (is.na(NA_character_)) 
[17:42:59.448]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.448]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.448]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.448]                   {
[17:42:59.448]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.448]                     if (!future$lazy) 
[17:42:59.448]                       future <- run(future)
[17:42:59.448]                     invisible(future)
[17:42:59.448]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.448]                 }
[17:42:59.448]             }
[17:42:59.448]         }
[17:42:59.448]     })
[17:42:59.448]     if (TRUE) {
[17:42:59.448]         base::sink(type = "output", split = FALSE)
[17:42:59.448]         if (TRUE) {
[17:42:59.448]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.448]         }
[17:42:59.448]         else {
[17:42:59.448]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.448]         }
[17:42:59.448]         base::close(...future.stdout)
[17:42:59.448]         ...future.stdout <- NULL
[17:42:59.448]     }
[17:42:59.448]     ...future.result$conditions <- ...future.conditions
[17:42:59.448]     ...future.result$finished <- base::Sys.time()
[17:42:59.448]     ...future.result
[17:42:59.448] }
[17:42:59.450] plan(): Setting new future strategy stack:
[17:42:59.453] List of future strategies:
[17:42:59.453] 1. sequential:
[17:42:59.453]    - args: function (..., envir = parent.frame())
[17:42:59.453]    - tweaked: FALSE
[17:42:59.453]    - call: NULL
[17:42:59.453] plan(): nbrOfWorkers() = 1
[17:42:59.454] plan(): Setting new future strategy stack:
[17:42:59.454] List of future strategies:
[17:42:59.454] 1. sequential:
[17:42:59.454]    - args: function (..., envir = parent.frame())
[17:42:59.454]    - tweaked: FALSE
[17:42:59.454]    - call: future::plan("sequential")
[17:42:59.454] plan(): nbrOfWorkers() = 1
[17:42:59.454] SequentialFuture started (and completed)
[17:42:59.454] - Launch lazy future ... done
[17:42:59.455] run() for ‘SequentialFuture’ ... done
List of 2
 $ main   : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
 $ workers: chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
*** multisession() and errors
[17:42:59.459] getGlobalsAndPackages() ...
[17:42:59.460] 
[17:42:59.460] - globals: [0] <none>
[17:42:59.460] getGlobalsAndPackages() ... DONE
[17:42:59.471] Packages needed by the future expression (n = 0): <none>
[17:42:59.472] Packages needed by future strategies (n = 0): <none>
[17:42:59.472] {
[17:42:59.472]     {
[17:42:59.472]         {
[17:42:59.472]             ...future.startTime <- base::Sys.time()
[17:42:59.472]             {
[17:42:59.472]                 {
[17:42:59.472]                   {
[17:42:59.472]                     {
[17:42:59.472]                       base::local({
[17:42:59.472]                         has_future <- base::requireNamespace("future", 
[17:42:59.472]                           quietly = TRUE)
[17:42:59.472]                         if (has_future) {
[17:42:59.472]                           ns <- base::getNamespace("future")
[17:42:59.472]                           version <- ns[[".package"]][["version"]]
[17:42:59.472]                           if (is.null(version)) 
[17:42:59.472]                             version <- utils::packageVersion("future")
[17:42:59.472]                         }
[17:42:59.472]                         else {
[17:42:59.472]                           version <- NULL
[17:42:59.472]                         }
[17:42:59.472]                         if (!has_future || version < "1.8.0") {
[17:42:59.472]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.472]                             "", base::R.version$version.string), 
[17:42:59.472]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.472]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.472]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.472]                               "release", "version")], collapse = " "), 
[17:42:59.472]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.472]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.472]                             info)
[17:42:59.472]                           info <- base::paste(info, collapse = "; ")
[17:42:59.472]                           if (!has_future) {
[17:42:59.472]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.472]                               info)
[17:42:59.472]                           }
[17:42:59.472]                           else {
[17:42:59.472]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.472]                               info, version)
[17:42:59.472]                           }
[17:42:59.472]                           base::stop(msg)
[17:42:59.472]                         }
[17:42:59.472]                       })
[17:42:59.472]                     }
[17:42:59.472]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.472]                     base::options(mc.cores = 1L)
[17:42:59.472]                   }
[17:42:59.472]                   options(future.plan = NULL)
[17:42:59.472]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.472]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.472]                 }
[17:42:59.472]                 ...future.workdir <- getwd()
[17:42:59.472]             }
[17:42:59.472]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.472]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.472]         }
[17:42:59.472]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.472]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.472]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.472]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.472]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.472]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.472]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.472]             base::names(...future.oldOptions))
[17:42:59.472]     }
[17:42:59.472]     if (FALSE) {
[17:42:59.472]     }
[17:42:59.472]     else {
[17:42:59.472]         if (TRUE) {
[17:42:59.472]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.472]                 open = "w")
[17:42:59.472]         }
[17:42:59.472]         else {
[17:42:59.472]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.472]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.472]         }
[17:42:59.472]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.472]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.472]             base::sink(type = "output", split = FALSE)
[17:42:59.472]             base::close(...future.stdout)
[17:42:59.472]         }, add = TRUE)
[17:42:59.472]     }
[17:42:59.472]     ...future.frame <- base::sys.nframe()
[17:42:59.472]     ...future.conditions <- base::list()
[17:42:59.472]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.472]     if (FALSE) {
[17:42:59.472]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.472]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.472]     }
[17:42:59.472]     ...future.result <- base::tryCatch({
[17:42:59.472]         base::withCallingHandlers({
[17:42:59.472]             ...future.value <- base::withVisible(base::local({
[17:42:59.472]                 ...future.makeSendCondition <- local({
[17:42:59.472]                   sendCondition <- NULL
[17:42:59.472]                   function(frame = 1L) {
[17:42:59.472]                     if (is.function(sendCondition)) 
[17:42:59.472]                       return(sendCondition)
[17:42:59.472]                     ns <- getNamespace("parallel")
[17:42:59.472]                     if (exists("sendData", mode = "function", 
[17:42:59.472]                       envir = ns)) {
[17:42:59.472]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.472]                         envir = ns)
[17:42:59.472]                       envir <- sys.frame(frame)
[17:42:59.472]                       master <- NULL
[17:42:59.472]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.472]                         !identical(envir, emptyenv())) {
[17:42:59.472]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.472]                           inherits = FALSE)) {
[17:42:59.472]                           master <- get("master", mode = "list", 
[17:42:59.472]                             envir = envir, inherits = FALSE)
[17:42:59.472]                           if (inherits(master, c("SOCKnode", 
[17:42:59.472]                             "SOCK0node"))) {
[17:42:59.472]                             sendCondition <<- function(cond) {
[17:42:59.472]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.472]                                 success = TRUE)
[17:42:59.472]                               parallel_sendData(master, data)
[17:42:59.472]                             }
[17:42:59.472]                             return(sendCondition)
[17:42:59.472]                           }
[17:42:59.472]                         }
[17:42:59.472]                         frame <- frame + 1L
[17:42:59.472]                         envir <- sys.frame(frame)
[17:42:59.472]                       }
[17:42:59.472]                     }
[17:42:59.472]                     sendCondition <<- function(cond) NULL
[17:42:59.472]                   }
[17:42:59.472]                 })
[17:42:59.472]                 withCallingHandlers({
[17:42:59.472]                   {
[17:42:59.472]                     stop("Whoops!")
[17:42:59.472]                     1
[17:42:59.472]                   }
[17:42:59.472]                 }, immediateCondition = function(cond) {
[17:42:59.472]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.472]                   sendCondition(cond)
[17:42:59.472]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.472]                   {
[17:42:59.472]                     inherits <- base::inherits
[17:42:59.472]                     invokeRestart <- base::invokeRestart
[17:42:59.472]                     is.null <- base::is.null
[17:42:59.472]                     muffled <- FALSE
[17:42:59.472]                     if (inherits(cond, "message")) {
[17:42:59.472]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.472]                       if (muffled) 
[17:42:59.472]                         invokeRestart("muffleMessage")
[17:42:59.472]                     }
[17:42:59.472]                     else if (inherits(cond, "warning")) {
[17:42:59.472]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.472]                       if (muffled) 
[17:42:59.472]                         invokeRestart("muffleWarning")
[17:42:59.472]                     }
[17:42:59.472]                     else if (inherits(cond, "condition")) {
[17:42:59.472]                       if (!is.null(pattern)) {
[17:42:59.472]                         computeRestarts <- base::computeRestarts
[17:42:59.472]                         grepl <- base::grepl
[17:42:59.472]                         restarts <- computeRestarts(cond)
[17:42:59.472]                         for (restart in restarts) {
[17:42:59.472]                           name <- restart$name
[17:42:59.472]                           if (is.null(name)) 
[17:42:59.472]                             next
[17:42:59.472]                           if (!grepl(pattern, name)) 
[17:42:59.472]                             next
[17:42:59.472]                           invokeRestart(restart)
[17:42:59.472]                           muffled <- TRUE
[17:42:59.472]                           break
[17:42:59.472]                         }
[17:42:59.472]                       }
[17:42:59.472]                     }
[17:42:59.472]                     invisible(muffled)
[17:42:59.472]                   }
[17:42:59.472]                   muffleCondition(cond)
[17:42:59.472]                 })
[17:42:59.472]             }))
[17:42:59.472]             future::FutureResult(value = ...future.value$value, 
[17:42:59.472]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.472]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.472]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.472]                     ...future.globalenv.names))
[17:42:59.472]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.472]         }, condition = base::local({
[17:42:59.472]             c <- base::c
[17:42:59.472]             inherits <- base::inherits
[17:42:59.472]             invokeRestart <- base::invokeRestart
[17:42:59.472]             length <- base::length
[17:42:59.472]             list <- base::list
[17:42:59.472]             seq.int <- base::seq.int
[17:42:59.472]             signalCondition <- base::signalCondition
[17:42:59.472]             sys.calls <- base::sys.calls
[17:42:59.472]             `[[` <- base::`[[`
[17:42:59.472]             `+` <- base::`+`
[17:42:59.472]             `<<-` <- base::`<<-`
[17:42:59.472]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.472]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.472]                   3L)]
[17:42:59.472]             }
[17:42:59.472]             function(cond) {
[17:42:59.472]                 is_error <- inherits(cond, "error")
[17:42:59.472]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.472]                   NULL)
[17:42:59.472]                 if (is_error) {
[17:42:59.472]                   sessionInformation <- function() {
[17:42:59.472]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.472]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.472]                       search = base::search(), system = base::Sys.info())
[17:42:59.472]                   }
[17:42:59.472]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.472]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.472]                     cond$call), session = sessionInformation(), 
[17:42:59.472]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.472]                   signalCondition(cond)
[17:42:59.472]                 }
[17:42:59.472]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.472]                 "immediateCondition"))) {
[17:42:59.472]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.472]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.472]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.472]                   if (TRUE && !signal) {
[17:42:59.472]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.472]                     {
[17:42:59.472]                       inherits <- base::inherits
[17:42:59.472]                       invokeRestart <- base::invokeRestart
[17:42:59.472]                       is.null <- base::is.null
[17:42:59.472]                       muffled <- FALSE
[17:42:59.472]                       if (inherits(cond, "message")) {
[17:42:59.472]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.472]                         if (muffled) 
[17:42:59.472]                           invokeRestart("muffleMessage")
[17:42:59.472]                       }
[17:42:59.472]                       else if (inherits(cond, "warning")) {
[17:42:59.472]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.472]                         if (muffled) 
[17:42:59.472]                           invokeRestart("muffleWarning")
[17:42:59.472]                       }
[17:42:59.472]                       else if (inherits(cond, "condition")) {
[17:42:59.472]                         if (!is.null(pattern)) {
[17:42:59.472]                           computeRestarts <- base::computeRestarts
[17:42:59.472]                           grepl <- base::grepl
[17:42:59.472]                           restarts <- computeRestarts(cond)
[17:42:59.472]                           for (restart in restarts) {
[17:42:59.472]                             name <- restart$name
[17:42:59.472]                             if (is.null(name)) 
[17:42:59.472]                               next
[17:42:59.472]                             if (!grepl(pattern, name)) 
[17:42:59.472]                               next
[17:42:59.472]                             invokeRestart(restart)
[17:42:59.472]                             muffled <- TRUE
[17:42:59.472]                             break
[17:42:59.472]                           }
[17:42:59.472]                         }
[17:42:59.472]                       }
[17:42:59.472]                       invisible(muffled)
[17:42:59.472]                     }
[17:42:59.472]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.472]                   }
[17:42:59.472]                 }
[17:42:59.472]                 else {
[17:42:59.472]                   if (TRUE) {
[17:42:59.472]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.472]                     {
[17:42:59.472]                       inherits <- base::inherits
[17:42:59.472]                       invokeRestart <- base::invokeRestart
[17:42:59.472]                       is.null <- base::is.null
[17:42:59.472]                       muffled <- FALSE
[17:42:59.472]                       if (inherits(cond, "message")) {
[17:42:59.472]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.472]                         if (muffled) 
[17:42:59.472]                           invokeRestart("muffleMessage")
[17:42:59.472]                       }
[17:42:59.472]                       else if (inherits(cond, "warning")) {
[17:42:59.472]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.472]                         if (muffled) 
[17:42:59.472]                           invokeRestart("muffleWarning")
[17:42:59.472]                       }
[17:42:59.472]                       else if (inherits(cond, "condition")) {
[17:42:59.472]                         if (!is.null(pattern)) {
[17:42:59.472]                           computeRestarts <- base::computeRestarts
[17:42:59.472]                           grepl <- base::grepl
[17:42:59.472]                           restarts <- computeRestarts(cond)
[17:42:59.472]                           for (restart in restarts) {
[17:42:59.472]                             name <- restart$name
[17:42:59.472]                             if (is.null(name)) 
[17:42:59.472]                               next
[17:42:59.472]                             if (!grepl(pattern, name)) 
[17:42:59.472]                               next
[17:42:59.472]                             invokeRestart(restart)
[17:42:59.472]                             muffled <- TRUE
[17:42:59.472]                             break
[17:42:59.472]                           }
[17:42:59.472]                         }
[17:42:59.472]                       }
[17:42:59.472]                       invisible(muffled)
[17:42:59.472]                     }
[17:42:59.472]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.472]                   }
[17:42:59.472]                 }
[17:42:59.472]             }
[17:42:59.472]         }))
[17:42:59.472]     }, error = function(ex) {
[17:42:59.472]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.472]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.472]                 ...future.rng), started = ...future.startTime, 
[17:42:59.472]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.472]             version = "1.8"), class = "FutureResult")
[17:42:59.472]     }, finally = {
[17:42:59.472]         if (!identical(...future.workdir, getwd())) 
[17:42:59.472]             setwd(...future.workdir)
[17:42:59.472]         {
[17:42:59.472]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.472]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.472]             }
[17:42:59.472]             base::options(...future.oldOptions)
[17:42:59.472]             if (.Platform$OS.type == "windows") {
[17:42:59.472]                 old_names <- names(...future.oldEnvVars)
[17:42:59.472]                 envs <- base::Sys.getenv()
[17:42:59.472]                 names <- names(envs)
[17:42:59.472]                 common <- intersect(names, old_names)
[17:42:59.472]                 added <- setdiff(names, old_names)
[17:42:59.472]                 removed <- setdiff(old_names, names)
[17:42:59.472]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.472]                   envs[common]]
[17:42:59.472]                 NAMES <- toupper(changed)
[17:42:59.472]                 args <- list()
[17:42:59.472]                 for (kk in seq_along(NAMES)) {
[17:42:59.472]                   name <- changed[[kk]]
[17:42:59.472]                   NAME <- NAMES[[kk]]
[17:42:59.472]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.472]                     next
[17:42:59.472]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.472]                 }
[17:42:59.472]                 NAMES <- toupper(added)
[17:42:59.472]                 for (kk in seq_along(NAMES)) {
[17:42:59.472]                   name <- added[[kk]]
[17:42:59.472]                   NAME <- NAMES[[kk]]
[17:42:59.472]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.472]                     next
[17:42:59.472]                   args[[name]] <- ""
[17:42:59.472]                 }
[17:42:59.472]                 NAMES <- toupper(removed)
[17:42:59.472]                 for (kk in seq_along(NAMES)) {
[17:42:59.472]                   name <- removed[[kk]]
[17:42:59.472]                   NAME <- NAMES[[kk]]
[17:42:59.472]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.472]                     next
[17:42:59.472]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.472]                 }
[17:42:59.472]                 if (length(args) > 0) 
[17:42:59.472]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.472]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.472]             }
[17:42:59.472]             else {
[17:42:59.472]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.472]             }
[17:42:59.472]             {
[17:42:59.472]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.472]                   0L) {
[17:42:59.472]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.472]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.472]                   base::options(opts)
[17:42:59.472]                 }
[17:42:59.472]                 {
[17:42:59.472]                   {
[17:42:59.472]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.472]                     NULL
[17:42:59.472]                   }
[17:42:59.472]                   options(future.plan = NULL)
[17:42:59.472]                   if (is.na(NA_character_)) 
[17:42:59.472]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.472]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.472]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.472]                   {
[17:42:59.472]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.472]                     if (!future$lazy) 
[17:42:59.472]                       future <- run(future)
[17:42:59.472]                     invisible(future)
[17:42:59.472]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.472]                 }
[17:42:59.472]             }
[17:42:59.472]         }
[17:42:59.472]     })
[17:42:59.472]     if (TRUE) {
[17:42:59.472]         base::sink(type = "output", split = FALSE)
[17:42:59.472]         if (TRUE) {
[17:42:59.472]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.472]         }
[17:42:59.472]         else {
[17:42:59.472]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.472]         }
[17:42:59.472]         base::close(...future.stdout)
[17:42:59.472]         ...future.stdout <- NULL
[17:42:59.472]     }
[17:42:59.472]     ...future.result$conditions <- ...future.conditions
[17:42:59.472]     ...future.result$finished <- base::Sys.time()
[17:42:59.472]     ...future.result
[17:42:59.472] }
[17:42:59.475] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:59.486] result() for ClusterFuture ...
[17:42:59.487] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.487] - Validating connection of MultisessionFuture
[17:42:59.521] - received message: FutureResult
[17:42:59.522] - Received FutureResult
[17:42:59.522] - Erased future from FutureRegistry
[17:42:59.522] result() for ClusterFuture ...
[17:42:59.522] - result already collected: FutureResult
[17:42:59.522] result() for ClusterFuture ... done
[17:42:59.522] signalConditions() ...
[17:42:59.522]  - include = ‘immediateCondition’
[17:42:59.522]  - exclude = 
[17:42:59.522]  - resignal = FALSE
[17:42:59.522]  - Number of conditions: 1
[17:42:59.523] signalConditions() ... done
[17:42:59.523] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:59.523] result() for ClusterFuture ... done
[17:42:59.523] result() for ClusterFuture ...
[17:42:59.523] - result already collected: FutureResult
[17:42:59.523] result() for ClusterFuture ... done
[17:42:59.523] signalConditions() ...
[17:42:59.523]  - include = ‘immediateCondition’
[17:42:59.523]  - exclude = 
[17:42:59.523]  - resignal = FALSE
[17:42:59.524]  - Number of conditions: 1
[17:42:59.524] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:42:59.524] result() for ClusterFuture ...
[17:42:59.525] - result already collected: FutureResult
[17:42:59.525] result() for ClusterFuture ... done
[17:42:59.525] result() for ClusterFuture ...
[17:42:59.525] - result already collected: FutureResult
[17:42:59.525] result() for ClusterFuture ... done
[17:42:59.525] signalConditions() ...
[17:42:59.525]  - include = ‘immediateCondition’
[17:42:59.525]  - exclude = 
[17:42:59.525]  - resignal = FALSE
[17:42:59.525]  - Number of conditions: 1
[17:42:59.525] signalConditions() ... done
[17:42:59.526] Future state: ‘finished’
[17:42:59.526] result() for ClusterFuture ...
[17:42:59.526] - result already collected: FutureResult
[17:42:59.526] result() for ClusterFuture ... done
[17:42:59.526] signalConditions() ...
[17:42:59.526]  - include = ‘condition’
[17:42:59.526]  - exclude = ‘immediateCondition’
[17:42:59.526]  - resignal = TRUE
[17:42:59.526]  - Number of conditions: 1
[17:42:59.526]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:42:59.526] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:42:59.527] result() for ClusterFuture ...
[17:42:59.527] - result already collected: FutureResult
[17:42:59.527] result() for ClusterFuture ... done
[17:42:59.527] result() for ClusterFuture ...
[17:42:59.527] - result already collected: FutureResult
[17:42:59.527] result() for ClusterFuture ... done
[17:42:59.528] signalConditions() ...
[17:42:59.528]  - include = ‘immediateCondition’
[17:42:59.528]  - exclude = 
[17:42:59.528]  - resignal = FALSE
[17:42:59.528]  - Number of conditions: 1
[17:42:59.528] signalConditions() ... done
[17:42:59.528] Future state: ‘finished’
[17:42:59.528] result() for ClusterFuture ...
[17:42:59.528] - result already collected: FutureResult
[17:42:59.528] result() for ClusterFuture ... done
[17:42:59.528] signalConditions() ...
[17:42:59.528]  - include = ‘condition’
[17:42:59.529]  - exclude = ‘immediateCondition’
[17:42:59.529]  - resignal = TRUE
[17:42:59.529]  - Number of conditions: 1
[17:42:59.529]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:42:59.529] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:42:59.533] getGlobalsAndPackages() ...
[17:42:59.533] 
[17:42:59.533] - globals: [0] <none>
[17:42:59.533] getGlobalsAndPackages() ... DONE
[17:42:59.545] Packages needed by the future expression (n = 0): <none>
[17:42:59.545] Packages needed by future strategies (n = 0): <none>
[17:42:59.546] {
[17:42:59.546]     {
[17:42:59.546]         {
[17:42:59.546]             ...future.startTime <- base::Sys.time()
[17:42:59.546]             {
[17:42:59.546]                 {
[17:42:59.546]                   {
[17:42:59.546]                     {
[17:42:59.546]                       base::local({
[17:42:59.546]                         has_future <- base::requireNamespace("future", 
[17:42:59.546]                           quietly = TRUE)
[17:42:59.546]                         if (has_future) {
[17:42:59.546]                           ns <- base::getNamespace("future")
[17:42:59.546]                           version <- ns[[".package"]][["version"]]
[17:42:59.546]                           if (is.null(version)) 
[17:42:59.546]                             version <- utils::packageVersion("future")
[17:42:59.546]                         }
[17:42:59.546]                         else {
[17:42:59.546]                           version <- NULL
[17:42:59.546]                         }
[17:42:59.546]                         if (!has_future || version < "1.8.0") {
[17:42:59.546]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.546]                             "", base::R.version$version.string), 
[17:42:59.546]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.546]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.546]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.546]                               "release", "version")], collapse = " "), 
[17:42:59.546]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.546]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.546]                             info)
[17:42:59.546]                           info <- base::paste(info, collapse = "; ")
[17:42:59.546]                           if (!has_future) {
[17:42:59.546]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.546]                               info)
[17:42:59.546]                           }
[17:42:59.546]                           else {
[17:42:59.546]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.546]                               info, version)
[17:42:59.546]                           }
[17:42:59.546]                           base::stop(msg)
[17:42:59.546]                         }
[17:42:59.546]                       })
[17:42:59.546]                     }
[17:42:59.546]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.546]                     base::options(mc.cores = 1L)
[17:42:59.546]                   }
[17:42:59.546]                   options(future.plan = NULL)
[17:42:59.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.546]                 }
[17:42:59.546]                 ...future.workdir <- getwd()
[17:42:59.546]             }
[17:42:59.546]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.546]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.546]         }
[17:42:59.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.546]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.546]             base::names(...future.oldOptions))
[17:42:59.546]     }
[17:42:59.546]     if (FALSE) {
[17:42:59.546]     }
[17:42:59.546]     else {
[17:42:59.546]         if (TRUE) {
[17:42:59.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.546]                 open = "w")
[17:42:59.546]         }
[17:42:59.546]         else {
[17:42:59.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.546]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.546]         }
[17:42:59.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.546]             base::sink(type = "output", split = FALSE)
[17:42:59.546]             base::close(...future.stdout)
[17:42:59.546]         }, add = TRUE)
[17:42:59.546]     }
[17:42:59.546]     ...future.frame <- base::sys.nframe()
[17:42:59.546]     ...future.conditions <- base::list()
[17:42:59.546]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.546]     if (FALSE) {
[17:42:59.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.546]     }
[17:42:59.546]     ...future.result <- base::tryCatch({
[17:42:59.546]         base::withCallingHandlers({
[17:42:59.546]             ...future.value <- base::withVisible(base::local({
[17:42:59.546]                 ...future.makeSendCondition <- local({
[17:42:59.546]                   sendCondition <- NULL
[17:42:59.546]                   function(frame = 1L) {
[17:42:59.546]                     if (is.function(sendCondition)) 
[17:42:59.546]                       return(sendCondition)
[17:42:59.546]                     ns <- getNamespace("parallel")
[17:42:59.546]                     if (exists("sendData", mode = "function", 
[17:42:59.546]                       envir = ns)) {
[17:42:59.546]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.546]                         envir = ns)
[17:42:59.546]                       envir <- sys.frame(frame)
[17:42:59.546]                       master <- NULL
[17:42:59.546]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.546]                         !identical(envir, emptyenv())) {
[17:42:59.546]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.546]                           inherits = FALSE)) {
[17:42:59.546]                           master <- get("master", mode = "list", 
[17:42:59.546]                             envir = envir, inherits = FALSE)
[17:42:59.546]                           if (inherits(master, c("SOCKnode", 
[17:42:59.546]                             "SOCK0node"))) {
[17:42:59.546]                             sendCondition <<- function(cond) {
[17:42:59.546]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.546]                                 success = TRUE)
[17:42:59.546]                               parallel_sendData(master, data)
[17:42:59.546]                             }
[17:42:59.546]                             return(sendCondition)
[17:42:59.546]                           }
[17:42:59.546]                         }
[17:42:59.546]                         frame <- frame + 1L
[17:42:59.546]                         envir <- sys.frame(frame)
[17:42:59.546]                       }
[17:42:59.546]                     }
[17:42:59.546]                     sendCondition <<- function(cond) NULL
[17:42:59.546]                   }
[17:42:59.546]                 })
[17:42:59.546]                 withCallingHandlers({
[17:42:59.546]                   {
[17:42:59.546]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:42:59.546]                       "error", "condition")))
[17:42:59.546]                   }
[17:42:59.546]                 }, immediateCondition = function(cond) {
[17:42:59.546]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.546]                   sendCondition(cond)
[17:42:59.546]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.546]                   {
[17:42:59.546]                     inherits <- base::inherits
[17:42:59.546]                     invokeRestart <- base::invokeRestart
[17:42:59.546]                     is.null <- base::is.null
[17:42:59.546]                     muffled <- FALSE
[17:42:59.546]                     if (inherits(cond, "message")) {
[17:42:59.546]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.546]                       if (muffled) 
[17:42:59.546]                         invokeRestart("muffleMessage")
[17:42:59.546]                     }
[17:42:59.546]                     else if (inherits(cond, "warning")) {
[17:42:59.546]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.546]                       if (muffled) 
[17:42:59.546]                         invokeRestart("muffleWarning")
[17:42:59.546]                     }
[17:42:59.546]                     else if (inherits(cond, "condition")) {
[17:42:59.546]                       if (!is.null(pattern)) {
[17:42:59.546]                         computeRestarts <- base::computeRestarts
[17:42:59.546]                         grepl <- base::grepl
[17:42:59.546]                         restarts <- computeRestarts(cond)
[17:42:59.546]                         for (restart in restarts) {
[17:42:59.546]                           name <- restart$name
[17:42:59.546]                           if (is.null(name)) 
[17:42:59.546]                             next
[17:42:59.546]                           if (!grepl(pattern, name)) 
[17:42:59.546]                             next
[17:42:59.546]                           invokeRestart(restart)
[17:42:59.546]                           muffled <- TRUE
[17:42:59.546]                           break
[17:42:59.546]                         }
[17:42:59.546]                       }
[17:42:59.546]                     }
[17:42:59.546]                     invisible(muffled)
[17:42:59.546]                   }
[17:42:59.546]                   muffleCondition(cond)
[17:42:59.546]                 })
[17:42:59.546]             }))
[17:42:59.546]             future::FutureResult(value = ...future.value$value, 
[17:42:59.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.546]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.546]                     ...future.globalenv.names))
[17:42:59.546]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.546]         }, condition = base::local({
[17:42:59.546]             c <- base::c
[17:42:59.546]             inherits <- base::inherits
[17:42:59.546]             invokeRestart <- base::invokeRestart
[17:42:59.546]             length <- base::length
[17:42:59.546]             list <- base::list
[17:42:59.546]             seq.int <- base::seq.int
[17:42:59.546]             signalCondition <- base::signalCondition
[17:42:59.546]             sys.calls <- base::sys.calls
[17:42:59.546]             `[[` <- base::`[[`
[17:42:59.546]             `+` <- base::`+`
[17:42:59.546]             `<<-` <- base::`<<-`
[17:42:59.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.546]                   3L)]
[17:42:59.546]             }
[17:42:59.546]             function(cond) {
[17:42:59.546]                 is_error <- inherits(cond, "error")
[17:42:59.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.546]                   NULL)
[17:42:59.546]                 if (is_error) {
[17:42:59.546]                   sessionInformation <- function() {
[17:42:59.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.546]                       search = base::search(), system = base::Sys.info())
[17:42:59.546]                   }
[17:42:59.546]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.546]                     cond$call), session = sessionInformation(), 
[17:42:59.546]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.546]                   signalCondition(cond)
[17:42:59.546]                 }
[17:42:59.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.546]                 "immediateCondition"))) {
[17:42:59.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.546]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.546]                   if (TRUE && !signal) {
[17:42:59.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.546]                     {
[17:42:59.546]                       inherits <- base::inherits
[17:42:59.546]                       invokeRestart <- base::invokeRestart
[17:42:59.546]                       is.null <- base::is.null
[17:42:59.546]                       muffled <- FALSE
[17:42:59.546]                       if (inherits(cond, "message")) {
[17:42:59.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.546]                         if (muffled) 
[17:42:59.546]                           invokeRestart("muffleMessage")
[17:42:59.546]                       }
[17:42:59.546]                       else if (inherits(cond, "warning")) {
[17:42:59.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.546]                         if (muffled) 
[17:42:59.546]                           invokeRestart("muffleWarning")
[17:42:59.546]                       }
[17:42:59.546]                       else if (inherits(cond, "condition")) {
[17:42:59.546]                         if (!is.null(pattern)) {
[17:42:59.546]                           computeRestarts <- base::computeRestarts
[17:42:59.546]                           grepl <- base::grepl
[17:42:59.546]                           restarts <- computeRestarts(cond)
[17:42:59.546]                           for (restart in restarts) {
[17:42:59.546]                             name <- restart$name
[17:42:59.546]                             if (is.null(name)) 
[17:42:59.546]                               next
[17:42:59.546]                             if (!grepl(pattern, name)) 
[17:42:59.546]                               next
[17:42:59.546]                             invokeRestart(restart)
[17:42:59.546]                             muffled <- TRUE
[17:42:59.546]                             break
[17:42:59.546]                           }
[17:42:59.546]                         }
[17:42:59.546]                       }
[17:42:59.546]                       invisible(muffled)
[17:42:59.546]                     }
[17:42:59.546]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.546]                   }
[17:42:59.546]                 }
[17:42:59.546]                 else {
[17:42:59.546]                   if (TRUE) {
[17:42:59.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.546]                     {
[17:42:59.546]                       inherits <- base::inherits
[17:42:59.546]                       invokeRestart <- base::invokeRestart
[17:42:59.546]                       is.null <- base::is.null
[17:42:59.546]                       muffled <- FALSE
[17:42:59.546]                       if (inherits(cond, "message")) {
[17:42:59.546]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.546]                         if (muffled) 
[17:42:59.546]                           invokeRestart("muffleMessage")
[17:42:59.546]                       }
[17:42:59.546]                       else if (inherits(cond, "warning")) {
[17:42:59.546]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.546]                         if (muffled) 
[17:42:59.546]                           invokeRestart("muffleWarning")
[17:42:59.546]                       }
[17:42:59.546]                       else if (inherits(cond, "condition")) {
[17:42:59.546]                         if (!is.null(pattern)) {
[17:42:59.546]                           computeRestarts <- base::computeRestarts
[17:42:59.546]                           grepl <- base::grepl
[17:42:59.546]                           restarts <- computeRestarts(cond)
[17:42:59.546]                           for (restart in restarts) {
[17:42:59.546]                             name <- restart$name
[17:42:59.546]                             if (is.null(name)) 
[17:42:59.546]                               next
[17:42:59.546]                             if (!grepl(pattern, name)) 
[17:42:59.546]                               next
[17:42:59.546]                             invokeRestart(restart)
[17:42:59.546]                             muffled <- TRUE
[17:42:59.546]                             break
[17:42:59.546]                           }
[17:42:59.546]                         }
[17:42:59.546]                       }
[17:42:59.546]                       invisible(muffled)
[17:42:59.546]                     }
[17:42:59.546]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.546]                   }
[17:42:59.546]                 }
[17:42:59.546]             }
[17:42:59.546]         }))
[17:42:59.546]     }, error = function(ex) {
[17:42:59.546]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.546]                 ...future.rng), started = ...future.startTime, 
[17:42:59.546]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.546]             version = "1.8"), class = "FutureResult")
[17:42:59.546]     }, finally = {
[17:42:59.546]         if (!identical(...future.workdir, getwd())) 
[17:42:59.546]             setwd(...future.workdir)
[17:42:59.546]         {
[17:42:59.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.546]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.546]             }
[17:42:59.546]             base::options(...future.oldOptions)
[17:42:59.546]             if (.Platform$OS.type == "windows") {
[17:42:59.546]                 old_names <- names(...future.oldEnvVars)
[17:42:59.546]                 envs <- base::Sys.getenv()
[17:42:59.546]                 names <- names(envs)
[17:42:59.546]                 common <- intersect(names, old_names)
[17:42:59.546]                 added <- setdiff(names, old_names)
[17:42:59.546]                 removed <- setdiff(old_names, names)
[17:42:59.546]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.546]                   envs[common]]
[17:42:59.546]                 NAMES <- toupper(changed)
[17:42:59.546]                 args <- list()
[17:42:59.546]                 for (kk in seq_along(NAMES)) {
[17:42:59.546]                   name <- changed[[kk]]
[17:42:59.546]                   NAME <- NAMES[[kk]]
[17:42:59.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.546]                     next
[17:42:59.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.546]                 }
[17:42:59.546]                 NAMES <- toupper(added)
[17:42:59.546]                 for (kk in seq_along(NAMES)) {
[17:42:59.546]                   name <- added[[kk]]
[17:42:59.546]                   NAME <- NAMES[[kk]]
[17:42:59.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.546]                     next
[17:42:59.546]                   args[[name]] <- ""
[17:42:59.546]                 }
[17:42:59.546]                 NAMES <- toupper(removed)
[17:42:59.546]                 for (kk in seq_along(NAMES)) {
[17:42:59.546]                   name <- removed[[kk]]
[17:42:59.546]                   NAME <- NAMES[[kk]]
[17:42:59.546]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.546]                     next
[17:42:59.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.546]                 }
[17:42:59.546]                 if (length(args) > 0) 
[17:42:59.546]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.546]             }
[17:42:59.546]             else {
[17:42:59.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.546]             }
[17:42:59.546]             {
[17:42:59.546]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.546]                   0L) {
[17:42:59.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.546]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.546]                   base::options(opts)
[17:42:59.546]                 }
[17:42:59.546]                 {
[17:42:59.546]                   {
[17:42:59.546]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.546]                     NULL
[17:42:59.546]                   }
[17:42:59.546]                   options(future.plan = NULL)
[17:42:59.546]                   if (is.na(NA_character_)) 
[17:42:59.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.546]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.546]                   {
[17:42:59.546]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.546]                     if (!future$lazy) 
[17:42:59.546]                       future <- run(future)
[17:42:59.546]                     invisible(future)
[17:42:59.546]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.546]                 }
[17:42:59.546]             }
[17:42:59.546]         }
[17:42:59.546]     })
[17:42:59.546]     if (TRUE) {
[17:42:59.546]         base::sink(type = "output", split = FALSE)
[17:42:59.546]         if (TRUE) {
[17:42:59.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.546]         }
[17:42:59.546]         else {
[17:42:59.546]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.546]         }
[17:42:59.546]         base::close(...future.stdout)
[17:42:59.546]         ...future.stdout <- NULL
[17:42:59.546]     }
[17:42:59.546]     ...future.result$conditions <- ...future.conditions
[17:42:59.546]     ...future.result$finished <- base::Sys.time()
[17:42:59.546]     ...future.result
[17:42:59.546] }
[17:42:59.549] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:42:59.551] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.551] - Validating connection of MultisessionFuture
[17:42:59.551] - received message: FutureResult
[17:42:59.552] - Received FutureResult
[17:42:59.552] - Erased future from FutureRegistry
[17:42:59.552] result() for ClusterFuture ...
[17:42:59.552] - result already collected: FutureResult
[17:42:59.552] result() for ClusterFuture ... done
[17:42:59.552] signalConditions() ...
[17:42:59.552]  - include = ‘immediateCondition’
[17:42:59.552]  - exclude = 
[17:42:59.552]  - resignal = FALSE
[17:42:59.552]  - Number of conditions: 1
[17:42:59.553] signalConditions() ... done
[17:42:59.553] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:59.553] result() for ClusterFuture ...
[17:42:59.553] - result already collected: FutureResult
[17:42:59.553] result() for ClusterFuture ... done
[17:42:59.553] result() for ClusterFuture ...
[17:42:59.553] - result already collected: FutureResult
[17:42:59.553] result() for ClusterFuture ... done
[17:42:59.553] signalConditions() ...
[17:42:59.553]  - include = ‘immediateCondition’
[17:42:59.554]  - exclude = 
[17:42:59.554]  - resignal = FALSE
[17:42:59.554]  - Number of conditions: 1
[17:42:59.554] signalConditions() ... done
<MyError: boom>
[17:42:59.554] result() for ClusterFuture ...
[17:42:59.554] - result already collected: FutureResult
[17:42:59.554] result() for ClusterFuture ... done
[17:42:59.554] result() for ClusterFuture ...
[17:42:59.554] - result already collected: FutureResult
[17:42:59.554] result() for ClusterFuture ... done
[17:42:59.555] signalConditions() ...
[17:42:59.555]  - include = ‘immediateCondition’
[17:42:59.555]  - exclude = 
[17:42:59.555]  - resignal = FALSE
[17:42:59.555]  - Number of conditions: 1
[17:42:59.555] signalConditions() ... done
[17:42:59.555] Future state: ‘finished’
[17:42:59.555] result() for ClusterFuture ...
[17:42:59.555] - result already collected: FutureResult
[17:42:59.555] result() for ClusterFuture ... done
[17:42:59.556] signalConditions() ...
[17:42:59.556]  - include = ‘condition’
[17:42:59.556]  - exclude = ‘immediateCondition’
[17:42:59.556]  - resignal = TRUE
[17:42:59.556]  - Number of conditions: 1
[17:42:59.556]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:42:59.556] signalConditions() ... done
Testing with 2 cores ... DONE
> 
> 
> message("*** multisession() - too large globals ...")
*** multisession() - too large globals ...
> ooptsT <- options(future.globals.maxSize = object.size(1:1014))
> 
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 4104 bytes
> 
> for (workers in unique(c(1L, availableCores()))) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message("Max number of sessions: ", workers)
+ 
+   ## A large object
+   a <- 1:1014
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   f <- multisession({ sum(a) }, globals = TRUE, workers = workers)
+   print(f)
+   rm(list = "a")
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+ 
+   ## A too large object
+   a <- 1:1015
+   yTruth <- sum(a)
+   size <- object.size(a)
+   cat(sprintf("a: %g bytes\n", size))
+   res <- try(f <- multisession({ sum(a) }, globals = TRUE, workers = workers), silent = TRUE)
+   rm(list = "a")
+   stopifnot(inherits(res, "try-error"))
+ } ## for (workers in ...)
Max number of sessions: 1
a: 4104 bytes
[17:42:59.573] getGlobalsAndPackages() ...
[17:42:59.573] Searching for globals...
[17:42:59.574] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:42:59.574] Searching for globals ... DONE
[17:42:59.574] Resolving globals: FALSE
[17:42:59.575] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[17:42:59.575] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[17:42:59.575] - globals: [1] ‘a’
[17:42:59.575] 
[17:42:59.575] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: TRUE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:59.576] Packages needed by the future expression (n = 0): <none>
[17:42:59.576] Packages needed by future strategies (n = 0): <none>
[17:42:59.577] {
[17:42:59.577]     {
[17:42:59.577]         {
[17:42:59.577]             ...future.startTime <- base::Sys.time()
[17:42:59.577]             {
[17:42:59.577]                 {
[17:42:59.577]                   {
[17:42:59.577]                     base::local({
[17:42:59.577]                       has_future <- base::requireNamespace("future", 
[17:42:59.577]                         quietly = TRUE)
[17:42:59.577]                       if (has_future) {
[17:42:59.577]                         ns <- base::getNamespace("future")
[17:42:59.577]                         version <- ns[[".package"]][["version"]]
[17:42:59.577]                         if (is.null(version)) 
[17:42:59.577]                           version <- utils::packageVersion("future")
[17:42:59.577]                       }
[17:42:59.577]                       else {
[17:42:59.577]                         version <- NULL
[17:42:59.577]                       }
[17:42:59.577]                       if (!has_future || version < "1.8.0") {
[17:42:59.577]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.577]                           "", base::R.version$version.string), 
[17:42:59.577]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:59.577]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.577]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.577]                             "release", "version")], collapse = " "), 
[17:42:59.577]                           hostname = base::Sys.info()[["nodename"]])
[17:42:59.577]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.577]                           info)
[17:42:59.577]                         info <- base::paste(info, collapse = "; ")
[17:42:59.577]                         if (!has_future) {
[17:42:59.577]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.577]                             info)
[17:42:59.577]                         }
[17:42:59.577]                         else {
[17:42:59.577]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.577]                             info, version)
[17:42:59.577]                         }
[17:42:59.577]                         base::stop(msg)
[17:42:59.577]                       }
[17:42:59.577]                     })
[17:42:59.577]                   }
[17:42:59.577]                   options(future.plan = NULL)
[17:42:59.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.577]                 }
[17:42:59.577]                 ...future.workdir <- getwd()
[17:42:59.577]             }
[17:42:59.577]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.577]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.577]         }
[17:42:59.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.577]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[17:42:59.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.577]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.577]             base::names(...future.oldOptions))
[17:42:59.577]     }
[17:42:59.577]     if (FALSE) {
[17:42:59.577]     }
[17:42:59.577]     else {
[17:42:59.577]         if (TRUE) {
[17:42:59.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.577]                 open = "w")
[17:42:59.577]         }
[17:42:59.577]         else {
[17:42:59.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.577]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.577]         }
[17:42:59.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.577]             base::sink(type = "output", split = FALSE)
[17:42:59.577]             base::close(...future.stdout)
[17:42:59.577]         }, add = TRUE)
[17:42:59.577]     }
[17:42:59.577]     ...future.frame <- base::sys.nframe()
[17:42:59.577]     ...future.conditions <- base::list()
[17:42:59.577]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.577]     if (FALSE) {
[17:42:59.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.577]     }
[17:42:59.577]     ...future.result <- base::tryCatch({
[17:42:59.577]         base::withCallingHandlers({
[17:42:59.577]             ...future.value <- base::withVisible(base::local({
[17:42:59.577]                 sum(a)
[17:42:59.577]             }))
[17:42:59.577]             future::FutureResult(value = ...future.value$value, 
[17:42:59.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.577]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.577]                     ...future.globalenv.names))
[17:42:59.577]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.577]         }, condition = base::local({
[17:42:59.577]             c <- base::c
[17:42:59.577]             inherits <- base::inherits
[17:42:59.577]             invokeRestart <- base::invokeRestart
[17:42:59.577]             length <- base::length
[17:42:59.577]             list <- base::list
[17:42:59.577]             seq.int <- base::seq.int
[17:42:59.577]             signalCondition <- base::signalCondition
[17:42:59.577]             sys.calls <- base::sys.calls
[17:42:59.577]             `[[` <- base::`[[`
[17:42:59.577]             `+` <- base::`+`
[17:42:59.577]             `<<-` <- base::`<<-`
[17:42:59.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.577]                   3L)]
[17:42:59.577]             }
[17:42:59.577]             function(cond) {
[17:42:59.577]                 is_error <- inherits(cond, "error")
[17:42:59.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.577]                   NULL)
[17:42:59.577]                 if (is_error) {
[17:42:59.577]                   sessionInformation <- function() {
[17:42:59.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.577]                       search = base::search(), system = base::Sys.info())
[17:42:59.577]                   }
[17:42:59.577]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.577]                     cond$call), session = sessionInformation(), 
[17:42:59.577]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.577]                   signalCondition(cond)
[17:42:59.577]                 }
[17:42:59.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.577]                 "immediateCondition"))) {
[17:42:59.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.577]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.577]                   if (TRUE && !signal) {
[17:42:59.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.577]                     {
[17:42:59.577]                       inherits <- base::inherits
[17:42:59.577]                       invokeRestart <- base::invokeRestart
[17:42:59.577]                       is.null <- base::is.null
[17:42:59.577]                       muffled <- FALSE
[17:42:59.577]                       if (inherits(cond, "message")) {
[17:42:59.577]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.577]                         if (muffled) 
[17:42:59.577]                           invokeRestart("muffleMessage")
[17:42:59.577]                       }
[17:42:59.577]                       else if (inherits(cond, "warning")) {
[17:42:59.577]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.577]                         if (muffled) 
[17:42:59.577]                           invokeRestart("muffleWarning")
[17:42:59.577]                       }
[17:42:59.577]                       else if (inherits(cond, "condition")) {
[17:42:59.577]                         if (!is.null(pattern)) {
[17:42:59.577]                           computeRestarts <- base::computeRestarts
[17:42:59.577]                           grepl <- base::grepl
[17:42:59.577]                           restarts <- computeRestarts(cond)
[17:42:59.577]                           for (restart in restarts) {
[17:42:59.577]                             name <- restart$name
[17:42:59.577]                             if (is.null(name)) 
[17:42:59.577]                               next
[17:42:59.577]                             if (!grepl(pattern, name)) 
[17:42:59.577]                               next
[17:42:59.577]                             invokeRestart(restart)
[17:42:59.577]                             muffled <- TRUE
[17:42:59.577]                             break
[17:42:59.577]                           }
[17:42:59.577]                         }
[17:42:59.577]                       }
[17:42:59.577]                       invisible(muffled)
[17:42:59.577]                     }
[17:42:59.577]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.577]                   }
[17:42:59.577]                 }
[17:42:59.577]                 else {
[17:42:59.577]                   if (TRUE) {
[17:42:59.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.577]                     {
[17:42:59.577]                       inherits <- base::inherits
[17:42:59.577]                       invokeRestart <- base::invokeRestart
[17:42:59.577]                       is.null <- base::is.null
[17:42:59.577]                       muffled <- FALSE
[17:42:59.577]                       if (inherits(cond, "message")) {
[17:42:59.577]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.577]                         if (muffled) 
[17:42:59.577]                           invokeRestart("muffleMessage")
[17:42:59.577]                       }
[17:42:59.577]                       else if (inherits(cond, "warning")) {
[17:42:59.577]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.577]                         if (muffled) 
[17:42:59.577]                           invokeRestart("muffleWarning")
[17:42:59.577]                       }
[17:42:59.577]                       else if (inherits(cond, "condition")) {
[17:42:59.577]                         if (!is.null(pattern)) {
[17:42:59.577]                           computeRestarts <- base::computeRestarts
[17:42:59.577]                           grepl <- base::grepl
[17:42:59.577]                           restarts <- computeRestarts(cond)
[17:42:59.577]                           for (restart in restarts) {
[17:42:59.577]                             name <- restart$name
[17:42:59.577]                             if (is.null(name)) 
[17:42:59.577]                               next
[17:42:59.577]                             if (!grepl(pattern, name)) 
[17:42:59.577]                               next
[17:42:59.577]                             invokeRestart(restart)
[17:42:59.577]                             muffled <- TRUE
[17:42:59.577]                             break
[17:42:59.577]                           }
[17:42:59.577]                         }
[17:42:59.577]                       }
[17:42:59.577]                       invisible(muffled)
[17:42:59.577]                     }
[17:42:59.577]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.577]                   }
[17:42:59.577]                 }
[17:42:59.577]             }
[17:42:59.577]         }))
[17:42:59.577]     }, error = function(ex) {
[17:42:59.577]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.577]                 ...future.rng), started = ...future.startTime, 
[17:42:59.577]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.577]             version = "1.8"), class = "FutureResult")
[17:42:59.577]     }, finally = {
[17:42:59.577]         if (!identical(...future.workdir, getwd())) 
[17:42:59.577]             setwd(...future.workdir)
[17:42:59.577]         {
[17:42:59.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.577]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.577]             }
[17:42:59.577]             base::options(...future.oldOptions)
[17:42:59.577]             if (.Platform$OS.type == "windows") {
[17:42:59.577]                 old_names <- names(...future.oldEnvVars)
[17:42:59.577]                 envs <- base::Sys.getenv()
[17:42:59.577]                 names <- names(envs)
[17:42:59.577]                 common <- intersect(names, old_names)
[17:42:59.577]                 added <- setdiff(names, old_names)
[17:42:59.577]                 removed <- setdiff(old_names, names)
[17:42:59.577]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.577]                   envs[common]]
[17:42:59.577]                 NAMES <- toupper(changed)
[17:42:59.577]                 args <- list()
[17:42:59.577]                 for (kk in seq_along(NAMES)) {
[17:42:59.577]                   name <- changed[[kk]]
[17:42:59.577]                   NAME <- NAMES[[kk]]
[17:42:59.577]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.577]                     next
[17:42:59.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.577]                 }
[17:42:59.577]                 NAMES <- toupper(added)
[17:42:59.577]                 for (kk in seq_along(NAMES)) {
[17:42:59.577]                   name <- added[[kk]]
[17:42:59.577]                   NAME <- NAMES[[kk]]
[17:42:59.577]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.577]                     next
[17:42:59.577]                   args[[name]] <- ""
[17:42:59.577]                 }
[17:42:59.577]                 NAMES <- toupper(removed)
[17:42:59.577]                 for (kk in seq_along(NAMES)) {
[17:42:59.577]                   name <- removed[[kk]]
[17:42:59.577]                   NAME <- NAMES[[kk]]
[17:42:59.577]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.577]                     next
[17:42:59.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.577]                 }
[17:42:59.577]                 if (length(args) > 0) 
[17:42:59.577]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.577]             }
[17:42:59.577]             else {
[17:42:59.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.577]             }
[17:42:59.577]             {
[17:42:59.577]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.577]                   0L) {
[17:42:59.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.577]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.577]                   base::options(opts)
[17:42:59.577]                 }
[17:42:59.577]                 {
[17:42:59.577]                   {
[17:42:59.577]                     NULL
[17:42:59.577]                     RNGkind("Mersenne-Twister")
[17:42:59.577]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:59.577]                       inherits = FALSE)
[17:42:59.577]                   }
[17:42:59.577]                   options(future.plan = NULL)
[17:42:59.577]                   if (is.na(NA_character_)) 
[17:42:59.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.577]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.577]                   {
[17:42:59.577]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.577]                     if (!future$lazy) 
[17:42:59.577]                       future <- run(future)
[17:42:59.577]                     invisible(future)
[17:42:59.577]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.577]                 }
[17:42:59.577]             }
[17:42:59.577]         }
[17:42:59.577]     })
[17:42:59.577]     if (TRUE) {
[17:42:59.577]         base::sink(type = "output", split = FALSE)
[17:42:59.577]         if (TRUE) {
[17:42:59.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.577]         }
[17:42:59.577]         else {
[17:42:59.577]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.577]         }
[17:42:59.577]         base::close(...future.stdout)
[17:42:59.577]         ...future.stdout <- NULL
[17:42:59.577]     }
[17:42:59.577]     ...future.result$conditions <- ...future.conditions
[17:42:59.577]     ...future.result$finished <- base::Sys.time()
[17:42:59.577]     ...future.result
[17:42:59.577] }
[17:42:59.579] assign_globals() ...
[17:42:59.579] List of 1
[17:42:59.579]  $ a: int [1:1014] 1 2 3 4 5 6 7 8 9 10 ...
[17:42:59.579]  - attr(*, "where")=List of 1
[17:42:59.579]   ..$ a:<environment: R_EmptyEnv> 
[17:42:59.579]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:59.579]  - attr(*, "resolved")= logi FALSE
[17:42:59.579]  - attr(*, "total_size")= num 4104
[17:42:59.581] - copied ‘a’ to environment
[17:42:59.581] assign_globals() ... done
[17:42:59.581] plan(): Setting new future strategy stack:
[17:42:59.581] List of future strategies:
[17:42:59.581] 1. sequential:
[17:42:59.581]    - args: function (..., envir = parent.frame())
[17:42:59.581]    - tweaked: FALSE
[17:42:59.581]    - call: NULL
[17:42:59.582] plan(): nbrOfWorkers() = 1
[17:42:59.583] plan(): Setting new future strategy stack:
[17:42:59.583] List of future strategies:
[17:42:59.583] 1. sequential:
[17:42:59.583]    - args: function (..., envir = parent.frame())
[17:42:59.583]    - tweaked: FALSE
[17:42:59.583]    - call: future::plan("sequential")
[17:42:59.583] plan(): nbrOfWorkers() = 1
[17:42:59.583] SequentialFuture started (and completed)
[1] 514605
a: 4112 bytes
[17:42:59.584] getGlobalsAndPackages() ...
[17:42:59.584] Searching for globals...
[17:42:59.584] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:42:59.585] Searching for globals ... DONE
[17:42:59.585] Resolving globals: FALSE
[17:42:59.585] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[17:42:59.585] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
Max number of sessions: 2
a: 4104 bytes
[17:42:59.586] getGlobalsAndPackages() ...
[17:42:59.586] Searching for globals...
[17:42:59.587] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:42:59.587] Searching for globals ... DONE
[17:42:59.587] Resolving globals: FALSE
[17:42:59.587] The total size of the 1 globals is 4.01 KiB (4104 bytes)
[17:42:59.588] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.01 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.01 KiB of class ‘numeric’)
[17:42:59.588] - globals: [1] ‘a’
[17:42:59.588] 
[17:42:59.588] getGlobalsAndPackages() ... DONE
[17:42:59.599] Packages needed by the future expression (n = 0): <none>
[17:42:59.599] Packages needed by future strategies (n = 0): <none>
[17:42:59.600] {
[17:42:59.600]     {
[17:42:59.600]         {
[17:42:59.600]             ...future.startTime <- base::Sys.time()
[17:42:59.600]             {
[17:42:59.600]                 {
[17:42:59.600]                   {
[17:42:59.600]                     {
[17:42:59.600]                       base::local({
[17:42:59.600]                         has_future <- base::requireNamespace("future", 
[17:42:59.600]                           quietly = TRUE)
[17:42:59.600]                         if (has_future) {
[17:42:59.600]                           ns <- base::getNamespace("future")
[17:42:59.600]                           version <- ns[[".package"]][["version"]]
[17:42:59.600]                           if (is.null(version)) 
[17:42:59.600]                             version <- utils::packageVersion("future")
[17:42:59.600]                         }
[17:42:59.600]                         else {
[17:42:59.600]                           version <- NULL
[17:42:59.600]                         }
[17:42:59.600]                         if (!has_future || version < "1.8.0") {
[17:42:59.600]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.600]                             "", base::R.version$version.string), 
[17:42:59.600]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.600]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.600]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.600]                               "release", "version")], collapse = " "), 
[17:42:59.600]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.600]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.600]                             info)
[17:42:59.600]                           info <- base::paste(info, collapse = "; ")
[17:42:59.600]                           if (!has_future) {
[17:42:59.600]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.600]                               info)
[17:42:59.600]                           }
[17:42:59.600]                           else {
[17:42:59.600]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.600]                               info, version)
[17:42:59.600]                           }
[17:42:59.600]                           base::stop(msg)
[17:42:59.600]                         }
[17:42:59.600]                       })
[17:42:59.600]                     }
[17:42:59.600]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.600]                     base::options(mc.cores = 1L)
[17:42:59.600]                   }
[17:42:59.600]                   options(future.plan = NULL)
[17:42:59.600]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.600]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.600]                 }
[17:42:59.600]                 ...future.workdir <- getwd()
[17:42:59.600]             }
[17:42:59.600]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.600]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.600]         }
[17:42:59.600]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.600]             future.globals.maxSize = 4104, future.globals.method = NULL, 
[17:42:59.600]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.600]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.600]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.600]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.600]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.600]             base::names(...future.oldOptions))
[17:42:59.600]     }
[17:42:59.600]     if (FALSE) {
[17:42:59.600]     }
[17:42:59.600]     else {
[17:42:59.600]         if (TRUE) {
[17:42:59.600]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.600]                 open = "w")
[17:42:59.600]         }
[17:42:59.600]         else {
[17:42:59.600]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.600]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.600]         }
[17:42:59.600]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.600]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.600]             base::sink(type = "output", split = FALSE)
[17:42:59.600]             base::close(...future.stdout)
[17:42:59.600]         }, add = TRUE)
[17:42:59.600]     }
[17:42:59.600]     ...future.frame <- base::sys.nframe()
[17:42:59.600]     ...future.conditions <- base::list()
[17:42:59.600]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.600]     if (FALSE) {
[17:42:59.600]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.600]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.600]     }
[17:42:59.600]     ...future.result <- base::tryCatch({
[17:42:59.600]         base::withCallingHandlers({
[17:42:59.600]             ...future.value <- base::withVisible(base::local({
[17:42:59.600]                 ...future.makeSendCondition <- local({
[17:42:59.600]                   sendCondition <- NULL
[17:42:59.600]                   function(frame = 1L) {
[17:42:59.600]                     if (is.function(sendCondition)) 
[17:42:59.600]                       return(sendCondition)
[17:42:59.600]                     ns <- getNamespace("parallel")
[17:42:59.600]                     if (exists("sendData", mode = "function", 
[17:42:59.600]                       envir = ns)) {
[17:42:59.600]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.600]                         envir = ns)
[17:42:59.600]                       envir <- sys.frame(frame)
[17:42:59.600]                       master <- NULL
[17:42:59.600]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.600]                         !identical(envir, emptyenv())) {
[17:42:59.600]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.600]                           inherits = FALSE)) {
[17:42:59.600]                           master <- get("master", mode = "list", 
[17:42:59.600]                             envir = envir, inherits = FALSE)
[17:42:59.600]                           if (inherits(master, c("SOCKnode", 
[17:42:59.600]                             "SOCK0node"))) {
[17:42:59.600]                             sendCondition <<- function(cond) {
[17:42:59.600]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.600]                                 success = TRUE)
[17:42:59.600]                               parallel_sendData(master, data)
[17:42:59.600]                             }
[17:42:59.600]                             return(sendCondition)
[17:42:59.600]                           }
[17:42:59.600]                         }
[17:42:59.600]                         frame <- frame + 1L
[17:42:59.600]                         envir <- sys.frame(frame)
[17:42:59.600]                       }
[17:42:59.600]                     }
[17:42:59.600]                     sendCondition <<- function(cond) NULL
[17:42:59.600]                   }
[17:42:59.600]                 })
[17:42:59.600]                 withCallingHandlers({
[17:42:59.600]                   {
[17:42:59.600]                     sum(a)
[17:42:59.600]                   }
[17:42:59.600]                 }, immediateCondition = function(cond) {
[17:42:59.600]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.600]                   sendCondition(cond)
[17:42:59.600]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.600]                   {
[17:42:59.600]                     inherits <- base::inherits
[17:42:59.600]                     invokeRestart <- base::invokeRestart
[17:42:59.600]                     is.null <- base::is.null
[17:42:59.600]                     muffled <- FALSE
[17:42:59.600]                     if (inherits(cond, "message")) {
[17:42:59.600]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.600]                       if (muffled) 
[17:42:59.600]                         invokeRestart("muffleMessage")
[17:42:59.600]                     }
[17:42:59.600]                     else if (inherits(cond, "warning")) {
[17:42:59.600]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.600]                       if (muffled) 
[17:42:59.600]                         invokeRestart("muffleWarning")
[17:42:59.600]                     }
[17:42:59.600]                     else if (inherits(cond, "condition")) {
[17:42:59.600]                       if (!is.null(pattern)) {
[17:42:59.600]                         computeRestarts <- base::computeRestarts
[17:42:59.600]                         grepl <- base::grepl
[17:42:59.600]                         restarts <- computeRestarts(cond)
[17:42:59.600]                         for (restart in restarts) {
[17:42:59.600]                           name <- restart$name
[17:42:59.600]                           if (is.null(name)) 
[17:42:59.600]                             next
[17:42:59.600]                           if (!grepl(pattern, name)) 
[17:42:59.600]                             next
[17:42:59.600]                           invokeRestart(restart)
[17:42:59.600]                           muffled <- TRUE
[17:42:59.600]                           break
[17:42:59.600]                         }
[17:42:59.600]                       }
[17:42:59.600]                     }
[17:42:59.600]                     invisible(muffled)
[17:42:59.600]                   }
[17:42:59.600]                   muffleCondition(cond)
[17:42:59.600]                 })
[17:42:59.600]             }))
[17:42:59.600]             future::FutureResult(value = ...future.value$value, 
[17:42:59.600]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.600]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.600]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.600]                     ...future.globalenv.names))
[17:42:59.600]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.600]         }, condition = base::local({
[17:42:59.600]             c <- base::c
[17:42:59.600]             inherits <- base::inherits
[17:42:59.600]             invokeRestart <- base::invokeRestart
[17:42:59.600]             length <- base::length
[17:42:59.600]             list <- base::list
[17:42:59.600]             seq.int <- base::seq.int
[17:42:59.600]             signalCondition <- base::signalCondition
[17:42:59.600]             sys.calls <- base::sys.calls
[17:42:59.600]             `[[` <- base::`[[`
[17:42:59.600]             `+` <- base::`+`
[17:42:59.600]             `<<-` <- base::`<<-`
[17:42:59.600]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.600]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.600]                   3L)]
[17:42:59.600]             }
[17:42:59.600]             function(cond) {
[17:42:59.600]                 is_error <- inherits(cond, "error")
[17:42:59.600]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.600]                   NULL)
[17:42:59.600]                 if (is_error) {
[17:42:59.600]                   sessionInformation <- function() {
[17:42:59.600]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.600]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.600]                       search = base::search(), system = base::Sys.info())
[17:42:59.600]                   }
[17:42:59.600]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.600]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.600]                     cond$call), session = sessionInformation(), 
[17:42:59.600]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.600]                   signalCondition(cond)
[17:42:59.600]                 }
[17:42:59.600]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.600]                 "immediateCondition"))) {
[17:42:59.600]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.600]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.600]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.600]                   if (TRUE && !signal) {
[17:42:59.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.600]                     {
[17:42:59.600]                       inherits <- base::inherits
[17:42:59.600]                       invokeRestart <- base::invokeRestart
[17:42:59.600]                       is.null <- base::is.null
[17:42:59.600]                       muffled <- FALSE
[17:42:59.600]                       if (inherits(cond, "message")) {
[17:42:59.600]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.600]                         if (muffled) 
[17:42:59.600]                           invokeRestart("muffleMessage")
[17:42:59.600]                       }
[17:42:59.600]                       else if (inherits(cond, "warning")) {
[17:42:59.600]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.600]                         if (muffled) 
[17:42:59.600]                           invokeRestart("muffleWarning")
[17:42:59.600]                       }
[17:42:59.600]                       else if (inherits(cond, "condition")) {
[17:42:59.600]                         if (!is.null(pattern)) {
[17:42:59.600]                           computeRestarts <- base::computeRestarts
[17:42:59.600]                           grepl <- base::grepl
[17:42:59.600]                           restarts <- computeRestarts(cond)
[17:42:59.600]                           for (restart in restarts) {
[17:42:59.600]                             name <- restart$name
[17:42:59.600]                             if (is.null(name)) 
[17:42:59.600]                               next
[17:42:59.600]                             if (!grepl(pattern, name)) 
[17:42:59.600]                               next
[17:42:59.600]                             invokeRestart(restart)
[17:42:59.600]                             muffled <- TRUE
[17:42:59.600]                             break
[17:42:59.600]                           }
[17:42:59.600]                         }
[17:42:59.600]                       }
[17:42:59.600]                       invisible(muffled)
[17:42:59.600]                     }
[17:42:59.600]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.600]                   }
[17:42:59.600]                 }
[17:42:59.600]                 else {
[17:42:59.600]                   if (TRUE) {
[17:42:59.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.600]                     {
[17:42:59.600]                       inherits <- base::inherits
[17:42:59.600]                       invokeRestart <- base::invokeRestart
[17:42:59.600]                       is.null <- base::is.null
[17:42:59.600]                       muffled <- FALSE
[17:42:59.600]                       if (inherits(cond, "message")) {
[17:42:59.600]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.600]                         if (muffled) 
[17:42:59.600]                           invokeRestart("muffleMessage")
[17:42:59.600]                       }
[17:42:59.600]                       else if (inherits(cond, "warning")) {
[17:42:59.600]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.600]                         if (muffled) 
[17:42:59.600]                           invokeRestart("muffleWarning")
[17:42:59.600]                       }
[17:42:59.600]                       else if (inherits(cond, "condition")) {
[17:42:59.600]                         if (!is.null(pattern)) {
[17:42:59.600]                           computeRestarts <- base::computeRestarts
[17:42:59.600]                           grepl <- base::grepl
[17:42:59.600]                           restarts <- computeRestarts(cond)
[17:42:59.600]                           for (restart in restarts) {
[17:42:59.600]                             name <- restart$name
[17:42:59.600]                             if (is.null(name)) 
[17:42:59.600]                               next
[17:42:59.600]                             if (!grepl(pattern, name)) 
[17:42:59.600]                               next
[17:42:59.600]                             invokeRestart(restart)
[17:42:59.600]                             muffled <- TRUE
[17:42:59.600]                             break
[17:42:59.600]                           }
[17:42:59.600]                         }
[17:42:59.600]                       }
[17:42:59.600]                       invisible(muffled)
[17:42:59.600]                     }
[17:42:59.600]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.600]                   }
[17:42:59.600]                 }
[17:42:59.600]             }
[17:42:59.600]         }))
[17:42:59.600]     }, error = function(ex) {
[17:42:59.600]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.600]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.600]                 ...future.rng), started = ...future.startTime, 
[17:42:59.600]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.600]             version = "1.8"), class = "FutureResult")
[17:42:59.600]     }, finally = {
[17:42:59.600]         if (!identical(...future.workdir, getwd())) 
[17:42:59.600]             setwd(...future.workdir)
[17:42:59.600]         {
[17:42:59.600]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.600]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.600]             }
[17:42:59.600]             base::options(...future.oldOptions)
[17:42:59.600]             if (.Platform$OS.type == "windows") {
[17:42:59.600]                 old_names <- names(...future.oldEnvVars)
[17:42:59.600]                 envs <- base::Sys.getenv()
[17:42:59.600]                 names <- names(envs)
[17:42:59.600]                 common <- intersect(names, old_names)
[17:42:59.600]                 added <- setdiff(names, old_names)
[17:42:59.600]                 removed <- setdiff(old_names, names)
[17:42:59.600]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.600]                   envs[common]]
[17:42:59.600]                 NAMES <- toupper(changed)
[17:42:59.600]                 args <- list()
[17:42:59.600]                 for (kk in seq_along(NAMES)) {
[17:42:59.600]                   name <- changed[[kk]]
[17:42:59.600]                   NAME <- NAMES[[kk]]
[17:42:59.600]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.600]                     next
[17:42:59.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.600]                 }
[17:42:59.600]                 NAMES <- toupper(added)
[17:42:59.600]                 for (kk in seq_along(NAMES)) {
[17:42:59.600]                   name <- added[[kk]]
[17:42:59.600]                   NAME <- NAMES[[kk]]
[17:42:59.600]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.600]                     next
[17:42:59.600]                   args[[name]] <- ""
[17:42:59.600]                 }
[17:42:59.600]                 NAMES <- toupper(removed)
[17:42:59.600]                 for (kk in seq_along(NAMES)) {
[17:42:59.600]                   name <- removed[[kk]]
[17:42:59.600]                   NAME <- NAMES[[kk]]
[17:42:59.600]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.600]                     next
[17:42:59.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.600]                 }
[17:42:59.600]                 if (length(args) > 0) 
[17:42:59.600]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.600]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.600]             }
[17:42:59.600]             else {
[17:42:59.600]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.600]             }
[17:42:59.600]             {
[17:42:59.600]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.600]                   0L) {
[17:42:59.600]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.600]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.600]                   base::options(opts)
[17:42:59.600]                 }
[17:42:59.600]                 {
[17:42:59.600]                   {
[17:42:59.600]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.600]                     NULL
[17:42:59.600]                   }
[17:42:59.600]                   options(future.plan = NULL)
[17:42:59.600]                   if (is.na(NA_character_)) 
[17:42:59.600]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.600]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.600]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.600]                   {
[17:42:59.600]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.600]                     if (!future$lazy) 
[17:42:59.600]                       future <- run(future)
[17:42:59.600]                     invisible(future)
[17:42:59.600]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.600]                 }
[17:42:59.600]             }
[17:42:59.600]         }
[17:42:59.600]     })
[17:42:59.600]     if (TRUE) {
[17:42:59.600]         base::sink(type = "output", split = FALSE)
[17:42:59.600]         if (TRUE) {
[17:42:59.600]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.600]         }
[17:42:59.600]         else {
[17:42:59.600]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.600]         }
[17:42:59.600]         base::close(...future.stdout)
[17:42:59.600]         ...future.stdout <- NULL
[17:42:59.600]     }
[17:42:59.600]     ...future.result$conditions <- ...future.conditions
[17:42:59.600]     ...future.result$finished <- base::Sys.time()
[17:42:59.600]     ...future.result
[17:42:59.600] }
[17:42:59.603] Exporting 1 global objects (4.01 KiB) to cluster node #1 ...
[17:42:59.603] Exporting ‘a’ (4.01 KiB) to cluster node #1 ...
[17:42:59.603] Exporting ‘a’ (4.01 KiB) to cluster node #1 ... DONE
[17:42:59.603] Exporting 1 global objects (4.01 KiB) to cluster node #1 ... DONE
[17:42:59.604] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    sum(a)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 4.01 KiB (integer ‘a’ of 4.01 KiB)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0d6dc205-5c5b-8d11-c32f-8e20c432abaa
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:42:59.615] result() for ClusterFuture ...
[17:42:59.615] receiveMessageFromWorker() for ClusterFuture ...
[17:42:59.616] - Validating connection of MultisessionFuture
[17:42:59.649] - received message: FutureResult
[17:42:59.649] - Received FutureResult
[17:42:59.649] - Erased future from FutureRegistry
[17:42:59.649] result() for ClusterFuture ...
[17:42:59.649] - result already collected: FutureResult
[17:42:59.649] result() for ClusterFuture ... done
[17:42:59.649] receiveMessageFromWorker() for ClusterFuture ... done
[17:42:59.650] result() for ClusterFuture ... done
[17:42:59.650] result() for ClusterFuture ...
[17:42:59.650] - result already collected: FutureResult
[17:42:59.650] result() for ClusterFuture ... done
[1] 514605
a: 4112 bytes
[17:42:59.650] getGlobalsAndPackages() ...
[17:42:59.650] Searching for globals...
[17:42:59.651] - globals found: [3] ‘{’, ‘sum’, ‘a’
[17:42:59.651] Searching for globals ... DONE
[17:42:59.652] Resolving globals: FALSE
[17:42:59.652] The total size of the 1 globals is 4.02 KiB (4112 bytes)
[17:42:59.652] The total size of the 1 globals exported for future expression (‘{; sum(a); }’) is 4.02 KiB.. This exceeds the maximum allowed size of 4.01 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (4.02 KiB of class ‘numeric’)
> 
> ## Undo options changed in this test
> options(ooptsT)
> 
> message("*** multisession() - too large globals ... DONE")
*** multisession() - too large globals ... DONE
> 
> message("*** multisession(..., workers = 1L) ...")
*** multisession(..., workers = 1L) ...
> 
> a <- 2
> b <- 3
> yTruth <- a * b
> 
> f <- multisession({ a * b }, globals = TRUE, workers = 1L)
[17:42:59.653] getGlobalsAndPackages() ...
[17:42:59.653] Searching for globals...
[17:42:59.654] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:42:59.654] Searching for globals ... DONE
[17:42:59.654] Resolving globals: FALSE
[17:42:59.654] The total size of the 2 globals is 112 bytes (112 bytes)
[17:42:59.655] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:42:59.655] - globals: [2] ‘a’, ‘b’
[17:42:59.655] 
[17:42:59.655] getGlobalsAndPackages() ... DONE
> rm(list = c("a", "b"))
> 
> v <- value(f)
[17:42:59.656] Packages needed by the future expression (n = 0): <none>
[17:42:59.656] Packages needed by future strategies (n = 0): <none>
[17:42:59.656] {
[17:42:59.656]     {
[17:42:59.656]         {
[17:42:59.656]             ...future.startTime <- base::Sys.time()
[17:42:59.656]             {
[17:42:59.656]                 {
[17:42:59.656]                   {
[17:42:59.656]                     base::local({
[17:42:59.656]                       has_future <- base::requireNamespace("future", 
[17:42:59.656]                         quietly = TRUE)
[17:42:59.656]                       if (has_future) {
[17:42:59.656]                         ns <- base::getNamespace("future")
[17:42:59.656]                         version <- ns[[".package"]][["version"]]
[17:42:59.656]                         if (is.null(version)) 
[17:42:59.656]                           version <- utils::packageVersion("future")
[17:42:59.656]                       }
[17:42:59.656]                       else {
[17:42:59.656]                         version <- NULL
[17:42:59.656]                       }
[17:42:59.656]                       if (!has_future || version < "1.8.0") {
[17:42:59.656]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.656]                           "", base::R.version$version.string), 
[17:42:59.656]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:59.656]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.656]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.656]                             "release", "version")], collapse = " "), 
[17:42:59.656]                           hostname = base::Sys.info()[["nodename"]])
[17:42:59.656]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.656]                           info)
[17:42:59.656]                         info <- base::paste(info, collapse = "; ")
[17:42:59.656]                         if (!has_future) {
[17:42:59.656]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.656]                             info)
[17:42:59.656]                         }
[17:42:59.656]                         else {
[17:42:59.656]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.656]                             info, version)
[17:42:59.656]                         }
[17:42:59.656]                         base::stop(msg)
[17:42:59.656]                       }
[17:42:59.656]                     })
[17:42:59.656]                   }
[17:42:59.656]                   options(future.plan = NULL)
[17:42:59.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.656]                 }
[17:42:59.656]                 ...future.workdir <- getwd()
[17:42:59.656]             }
[17:42:59.656]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.656]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.656]         }
[17:42:59.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.656]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.656]             base::names(...future.oldOptions))
[17:42:59.656]     }
[17:42:59.656]     if (FALSE) {
[17:42:59.656]     }
[17:42:59.656]     else {
[17:42:59.656]         if (TRUE) {
[17:42:59.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.656]                 open = "w")
[17:42:59.656]         }
[17:42:59.656]         else {
[17:42:59.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.656]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.656]         }
[17:42:59.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.656]             base::sink(type = "output", split = FALSE)
[17:42:59.656]             base::close(...future.stdout)
[17:42:59.656]         }, add = TRUE)
[17:42:59.656]     }
[17:42:59.656]     ...future.frame <- base::sys.nframe()
[17:42:59.656]     ...future.conditions <- base::list()
[17:42:59.656]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.656]     if (FALSE) {
[17:42:59.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.656]     }
[17:42:59.656]     ...future.result <- base::tryCatch({
[17:42:59.656]         base::withCallingHandlers({
[17:42:59.656]             ...future.value <- base::withVisible(base::local({
[17:42:59.656]                 a * b
[17:42:59.656]             }))
[17:42:59.656]             future::FutureResult(value = ...future.value$value, 
[17:42:59.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.656]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.656]                     ...future.globalenv.names))
[17:42:59.656]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.656]         }, condition = base::local({
[17:42:59.656]             c <- base::c
[17:42:59.656]             inherits <- base::inherits
[17:42:59.656]             invokeRestart <- base::invokeRestart
[17:42:59.656]             length <- base::length
[17:42:59.656]             list <- base::list
[17:42:59.656]             seq.int <- base::seq.int
[17:42:59.656]             signalCondition <- base::signalCondition
[17:42:59.656]             sys.calls <- base::sys.calls
[17:42:59.656]             `[[` <- base::`[[`
[17:42:59.656]             `+` <- base::`+`
[17:42:59.656]             `<<-` <- base::`<<-`
[17:42:59.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.656]                   3L)]
[17:42:59.656]             }
[17:42:59.656]             function(cond) {
[17:42:59.656]                 is_error <- inherits(cond, "error")
[17:42:59.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.656]                   NULL)
[17:42:59.656]                 if (is_error) {
[17:42:59.656]                   sessionInformation <- function() {
[17:42:59.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.656]                       search = base::search(), system = base::Sys.info())
[17:42:59.656]                   }
[17:42:59.656]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.656]                     cond$call), session = sessionInformation(), 
[17:42:59.656]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.656]                   signalCondition(cond)
[17:42:59.656]                 }
[17:42:59.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.656]                 "immediateCondition"))) {
[17:42:59.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.656]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.656]                   if (TRUE && !signal) {
[17:42:59.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.656]                     {
[17:42:59.656]                       inherits <- base::inherits
[17:42:59.656]                       invokeRestart <- base::invokeRestart
[17:42:59.656]                       is.null <- base::is.null
[17:42:59.656]                       muffled <- FALSE
[17:42:59.656]                       if (inherits(cond, "message")) {
[17:42:59.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.656]                         if (muffled) 
[17:42:59.656]                           invokeRestart("muffleMessage")
[17:42:59.656]                       }
[17:42:59.656]                       else if (inherits(cond, "warning")) {
[17:42:59.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.656]                         if (muffled) 
[17:42:59.656]                           invokeRestart("muffleWarning")
[17:42:59.656]                       }
[17:42:59.656]                       else if (inherits(cond, "condition")) {
[17:42:59.656]                         if (!is.null(pattern)) {
[17:42:59.656]                           computeRestarts <- base::computeRestarts
[17:42:59.656]                           grepl <- base::grepl
[17:42:59.656]                           restarts <- computeRestarts(cond)
[17:42:59.656]                           for (restart in restarts) {
[17:42:59.656]                             name <- restart$name
[17:42:59.656]                             if (is.null(name)) 
[17:42:59.656]                               next
[17:42:59.656]                             if (!grepl(pattern, name)) 
[17:42:59.656]                               next
[17:42:59.656]                             invokeRestart(restart)
[17:42:59.656]                             muffled <- TRUE
[17:42:59.656]                             break
[17:42:59.656]                           }
[17:42:59.656]                         }
[17:42:59.656]                       }
[17:42:59.656]                       invisible(muffled)
[17:42:59.656]                     }
[17:42:59.656]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.656]                   }
[17:42:59.656]                 }
[17:42:59.656]                 else {
[17:42:59.656]                   if (TRUE) {
[17:42:59.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.656]                     {
[17:42:59.656]                       inherits <- base::inherits
[17:42:59.656]                       invokeRestart <- base::invokeRestart
[17:42:59.656]                       is.null <- base::is.null
[17:42:59.656]                       muffled <- FALSE
[17:42:59.656]                       if (inherits(cond, "message")) {
[17:42:59.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.656]                         if (muffled) 
[17:42:59.656]                           invokeRestart("muffleMessage")
[17:42:59.656]                       }
[17:42:59.656]                       else if (inherits(cond, "warning")) {
[17:42:59.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.656]                         if (muffled) 
[17:42:59.656]                           invokeRestart("muffleWarning")
[17:42:59.656]                       }
[17:42:59.656]                       else if (inherits(cond, "condition")) {
[17:42:59.656]                         if (!is.null(pattern)) {
[17:42:59.656]                           computeRestarts <- base::computeRestarts
[17:42:59.656]                           grepl <- base::grepl
[17:42:59.656]                           restarts <- computeRestarts(cond)
[17:42:59.656]                           for (restart in restarts) {
[17:42:59.656]                             name <- restart$name
[17:42:59.656]                             if (is.null(name)) 
[17:42:59.656]                               next
[17:42:59.656]                             if (!grepl(pattern, name)) 
[17:42:59.656]                               next
[17:42:59.656]                             invokeRestart(restart)
[17:42:59.656]                             muffled <- TRUE
[17:42:59.656]                             break
[17:42:59.656]                           }
[17:42:59.656]                         }
[17:42:59.656]                       }
[17:42:59.656]                       invisible(muffled)
[17:42:59.656]                     }
[17:42:59.656]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.656]                   }
[17:42:59.656]                 }
[17:42:59.656]             }
[17:42:59.656]         }))
[17:42:59.656]     }, error = function(ex) {
[17:42:59.656]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.656]                 ...future.rng), started = ...future.startTime, 
[17:42:59.656]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.656]             version = "1.8"), class = "FutureResult")
[17:42:59.656]     }, finally = {
[17:42:59.656]         if (!identical(...future.workdir, getwd())) 
[17:42:59.656]             setwd(...future.workdir)
[17:42:59.656]         {
[17:42:59.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.656]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.656]             }
[17:42:59.656]             base::options(...future.oldOptions)
[17:42:59.656]             if (.Platform$OS.type == "windows") {
[17:42:59.656]                 old_names <- names(...future.oldEnvVars)
[17:42:59.656]                 envs <- base::Sys.getenv()
[17:42:59.656]                 names <- names(envs)
[17:42:59.656]                 common <- intersect(names, old_names)
[17:42:59.656]                 added <- setdiff(names, old_names)
[17:42:59.656]                 removed <- setdiff(old_names, names)
[17:42:59.656]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.656]                   envs[common]]
[17:42:59.656]                 NAMES <- toupper(changed)
[17:42:59.656]                 args <- list()
[17:42:59.656]                 for (kk in seq_along(NAMES)) {
[17:42:59.656]                   name <- changed[[kk]]
[17:42:59.656]                   NAME <- NAMES[[kk]]
[17:42:59.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.656]                     next
[17:42:59.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.656]                 }
[17:42:59.656]                 NAMES <- toupper(added)
[17:42:59.656]                 for (kk in seq_along(NAMES)) {
[17:42:59.656]                   name <- added[[kk]]
[17:42:59.656]                   NAME <- NAMES[[kk]]
[17:42:59.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.656]                     next
[17:42:59.656]                   args[[name]] <- ""
[17:42:59.656]                 }
[17:42:59.656]                 NAMES <- toupper(removed)
[17:42:59.656]                 for (kk in seq_along(NAMES)) {
[17:42:59.656]                   name <- removed[[kk]]
[17:42:59.656]                   NAME <- NAMES[[kk]]
[17:42:59.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.656]                     next
[17:42:59.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.656]                 }
[17:42:59.656]                 if (length(args) > 0) 
[17:42:59.656]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.656]             }
[17:42:59.656]             else {
[17:42:59.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.656]             }
[17:42:59.656]             {
[17:42:59.656]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.656]                   0L) {
[17:42:59.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.656]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.656]                   base::options(opts)
[17:42:59.656]                 }
[17:42:59.656]                 {
[17:42:59.656]                   {
[17:42:59.656]                     NULL
[17:42:59.656]                     RNGkind("Mersenne-Twister")
[17:42:59.656]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:59.656]                       inherits = FALSE)
[17:42:59.656]                   }
[17:42:59.656]                   options(future.plan = NULL)
[17:42:59.656]                   if (is.na(NA_character_)) 
[17:42:59.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.656]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:59.656]                   {
[17:42:59.656]                     future <- SequentialFuture(..., envir = envir)
[17:42:59.656]                     if (!future$lazy) 
[17:42:59.656]                       future <- run(future)
[17:42:59.656]                     invisible(future)
[17:42:59.656]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:59.656]                 }
[17:42:59.656]             }
[17:42:59.656]         }
[17:42:59.656]     })
[17:42:59.656]     if (TRUE) {
[17:42:59.656]         base::sink(type = "output", split = FALSE)
[17:42:59.656]         if (TRUE) {
[17:42:59.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.656]         }
[17:42:59.656]         else {
[17:42:59.656]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.656]         }
[17:42:59.656]         base::close(...future.stdout)
[17:42:59.656]         ...future.stdout <- NULL
[17:42:59.656]     }
[17:42:59.656]     ...future.result$conditions <- ...future.conditions
[17:42:59.656]     ...future.result$finished <- base::Sys.time()
[17:42:59.656]     ...future.result
[17:42:59.656] }
[17:42:59.658] assign_globals() ...
[17:42:59.658] List of 2
[17:42:59.658]  $ a: num 2
[17:42:59.658]  $ b: num 3
[17:42:59.658]  - attr(*, "where")=List of 2
[17:42:59.658]   ..$ a:<environment: R_EmptyEnv> 
[17:42:59.658]   ..$ b:<environment: R_EmptyEnv> 
[17:42:59.658]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:42:59.658]  - attr(*, "resolved")= logi FALSE
[17:42:59.658]  - attr(*, "total_size")= num 112
[17:42:59.663] - copied ‘a’ to environment
[17:42:59.663] - copied ‘b’ to environment
[17:42:59.663] assign_globals() ... done
[17:42:59.663] plan(): Setting new future strategy stack:
[17:42:59.663] List of future strategies:
[17:42:59.663] 1. sequential:
[17:42:59.663]    - args: function (..., envir = parent.frame())
[17:42:59.663]    - tweaked: FALSE
[17:42:59.663]    - call: NULL
[17:42:59.664] plan(): nbrOfWorkers() = 1
[17:42:59.664] plan(): Setting new future strategy stack:
[17:42:59.665] List of future strategies:
[17:42:59.665] 1. sequential:
[17:42:59.665]    - args: function (..., envir = parent.frame())
[17:42:59.665]    - tweaked: FALSE
[17:42:59.665]    - call: future::plan("sequential")
[17:42:59.665] plan(): nbrOfWorkers() = 1
[17:42:59.665] SequentialFuture started (and completed)
> print(v)
[1] 6
> stopifnot(v == yTruth)
> 
> message("*** multisession(..., workers = 1L) ... DONE")
*** multisession(..., workers = 1L) ... DONE
> 
> message("*** multisession(..., gc = TRUE) ...")
*** multisession(..., gc = TRUE) ...
> plan(multisession, workers = 2L)
[17:42:59.666] plan(): Setting new future strategy stack:
[17:42:59.666] List of future strategies:
[17:42:59.666] 1. multisession:
[17:42:59.666]    - args: function (..., workers = 2L, envir = parent.frame())
[17:42:59.666]    - tweaked: TRUE
[17:42:59.666]    - call: plan(multisession, workers = 2L)
[17:42:59.679] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:42:59.679] multisession:
[17:42:59.679] - args: function (..., workers = 2L, envir = parent.frame())
[17:42:59.679] - tweaked: TRUE
[17:42:59.679] - call: plan(multisession, workers = 2L)
[17:42:59.680] getGlobalsAndPackages() ...
[17:42:59.680] Not searching for globals
[17:42:59.680] - globals: [0] <none>
[17:42:59.680] getGlobalsAndPackages() ... DONE
[17:42:59.681] [local output] makeClusterPSOCK() ...
[17:42:59.681] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:42:59.682] [local output] Base port: 11767
[17:42:59.682] [local output] Getting setup options for 2 cluster nodes ...
[17:42:59.682] [local output]  - Node 1 of 2 ...
[17:42:59.682] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:59.683] [local output] Rscript port: 11767

[17:42:59.683] [local output]  - Node 2 of 2 ...
[17:42:59.684] [local output] localMachine=TRUE => revtunnel=FALSE

[17:42:59.684] [local output] Rscript port: 11767

[17:42:59.685] [local output] Getting setup options for 2 cluster nodes ... done
[17:42:59.685] [local output]  - Parallel setup requested for some PSOCK nodes
[17:42:59.685] [local output] Setting up PSOCK nodes in parallel
[17:42:59.685] List of 36
[17:42:59.685]  $ worker          : chr "localhost"
[17:42:59.685]   ..- attr(*, "localhost")= logi TRUE
[17:42:59.685]  $ master          : chr "localhost"
[17:42:59.685]  $ port            : int 11767
[17:42:59.685]  $ connectTimeout  : num 120
[17:42:59.685]  $ timeout         : num 2592000
[17:42:59.685]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:42:59.685]  $ homogeneous     : logi TRUE
[17:42:59.685]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:42:59.685]  $ rscript_envs    : NULL
[17:42:59.685]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:59.685]  $ rscript_startup : NULL
[17:42:59.685]  $ rscript_sh      : chr "sh"
[17:42:59.685]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:59.685]  $ methods         : logi TRUE
[17:42:59.685]  $ socketOptions   : chr "no-delay"
[17:42:59.685]  $ useXDR          : logi FALSE
[17:42:59.685]  $ outfile         : chr "/dev/null"
[17:42:59.685]  $ renice          : int NA
[17:42:59.685]  $ rshcmd          : NULL
[17:42:59.685]  $ user            : chr(0) 
[17:42:59.685]  $ revtunnel       : logi FALSE
[17:42:59.685]  $ rshlogfile      : NULL
[17:42:59.685]  $ rshopts         : chr(0) 
[17:42:59.685]  $ rank            : int 1
[17:42:59.685]  $ manual          : logi FALSE
[17:42:59.685]  $ dryrun          : logi FALSE
[17:42:59.685]  $ quiet           : logi FALSE
[17:42:59.685]  $ setup_strategy  : chr "parallel"
[17:42:59.685]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:59.685]  $ pidfile         : chr "/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded597996ac.pid"
[17:42:59.685]  $ rshcmd_label    : NULL
[17:42:59.685]  $ rsh_call        : NULL
[17:42:59.685]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:42:59.685]  $ localMachine    : logi TRUE
[17:42:59.685]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:42:59.685]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:42:59.685]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:42:59.685]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:42:59.685]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:42:59.685]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:42:59.685]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:42:59.685]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:42:59.685]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:42:59.685]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:42:59.685]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:42:59.685]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:42:59.685]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:42:59.685]  $ arguments       :List of 28
[17:42:59.685]   ..$ worker          : chr "localhost"
[17:42:59.685]   ..$ master          : NULL
[17:42:59.685]   ..$ port            : int 11767
[17:42:59.685]   ..$ connectTimeout  : num 120
[17:42:59.685]   ..$ timeout         : num 2592000
[17:42:59.685]   ..$ rscript         : NULL
[17:42:59.685]   ..$ homogeneous     : NULL
[17:42:59.685]   ..$ rscript_args    : NULL
[17:42:59.685]   ..$ rscript_envs    : NULL
[17:42:59.685]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:42:59.685]   ..$ rscript_startup : NULL
[17:42:59.685]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:42:59.685]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:42:59.685]   ..$ methods         : logi TRUE
[17:42:59.685]   ..$ socketOptions   : chr "no-delay"
[17:42:59.685]   ..$ useXDR          : logi FALSE
[17:42:59.685]   ..$ outfile         : chr "/dev/null"
[17:42:59.685]   ..$ renice          : int NA
[17:42:59.685]   ..$ rshcmd          : NULL
[17:42:59.685]   ..$ user            : NULL
[17:42:59.685]   ..$ revtunnel       : logi NA
[17:42:59.685]   ..$ rshlogfile      : NULL
[17:42:59.685]   ..$ rshopts         : NULL
[17:42:59.685]   ..$ rank            : int 1
[17:42:59.685]   ..$ manual          : logi FALSE
[17:42:59.685]   ..$ dryrun          : logi FALSE
[17:42:59.685]   ..$ quiet           : logi FALSE
[17:42:59.685]   ..$ setup_strategy  : chr "parallel"
[17:42:59.685]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:42:59.702] [local output] System call to launch all workers:
[17:42:59.702] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded597996ac.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11767 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:42:59.702] [local output] Starting PSOCK main server
[17:42:59.703] [local output] Workers launched
[17:42:59.704] [local output] Waiting for workers to connect back
[17:42:59.704]  - [local output] 0 workers out of 2 ready
[17:42:59.952]  - [local output] 0 workers out of 2 ready
[17:42:59.952]  - [local output] 1 workers out of 2 ready
[17:42:59.952]  - [local output] 2 workers out of 2 ready
[17:42:59.953] [local output] Launching of workers completed
[17:42:59.953] [local output] Collecting session information from workers
[17:42:59.953] [local output]  - Worker #1 of 2
[17:42:59.954] [local output]  - Worker #2 of 2
[17:42:59.954] [local output] makeClusterPSOCK() ... done
[17:42:59.965] Packages needed by the future expression (n = 0): <none>
[17:42:59.965] Packages needed by future strategies (n = 0): <none>
[17:42:59.966] {
[17:42:59.966]     {
[17:42:59.966]         {
[17:42:59.966]             ...future.startTime <- base::Sys.time()
[17:42:59.966]             {
[17:42:59.966]                 {
[17:42:59.966]                   {
[17:42:59.966]                     {
[17:42:59.966]                       base::local({
[17:42:59.966]                         has_future <- base::requireNamespace("future", 
[17:42:59.966]                           quietly = TRUE)
[17:42:59.966]                         if (has_future) {
[17:42:59.966]                           ns <- base::getNamespace("future")
[17:42:59.966]                           version <- ns[[".package"]][["version"]]
[17:42:59.966]                           if (is.null(version)) 
[17:42:59.966]                             version <- utils::packageVersion("future")
[17:42:59.966]                         }
[17:42:59.966]                         else {
[17:42:59.966]                           version <- NULL
[17:42:59.966]                         }
[17:42:59.966]                         if (!has_future || version < "1.8.0") {
[17:42:59.966]                           info <- base::c(r_version = base::gsub("R version ", 
[17:42:59.966]                             "", base::R.version$version.string), 
[17:42:59.966]                             platform = base::sprintf("%s (%s-bit)", 
[17:42:59.966]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:59.966]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:59.966]                               "release", "version")], collapse = " "), 
[17:42:59.966]                             hostname = base::Sys.info()[["nodename"]])
[17:42:59.966]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:42:59.966]                             info)
[17:42:59.966]                           info <- base::paste(info, collapse = "; ")
[17:42:59.966]                           if (!has_future) {
[17:42:59.966]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:59.966]                               info)
[17:42:59.966]                           }
[17:42:59.966]                           else {
[17:42:59.966]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:59.966]                               info, version)
[17:42:59.966]                           }
[17:42:59.966]                           base::stop(msg)
[17:42:59.966]                         }
[17:42:59.966]                       })
[17:42:59.966]                     }
[17:42:59.966]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:42:59.966]                     base::options(mc.cores = 1L)
[17:42:59.966]                   }
[17:42:59.966]                   options(future.plan = NULL)
[17:42:59.966]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.966]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:59.966]                 }
[17:42:59.966]                 ...future.workdir <- getwd()
[17:42:59.966]             }
[17:42:59.966]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:59.966]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:59.966]         }
[17:42:59.966]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:59.966]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:59.966]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:59.966]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:59.966]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:59.966]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:59.966]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:59.966]             base::names(...future.oldOptions))
[17:42:59.966]     }
[17:42:59.966]     if (FALSE) {
[17:42:59.966]     }
[17:42:59.966]     else {
[17:42:59.966]         if (TRUE) {
[17:42:59.966]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:59.966]                 open = "w")
[17:42:59.966]         }
[17:42:59.966]         else {
[17:42:59.966]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:59.966]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:59.966]         }
[17:42:59.966]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:59.966]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:59.966]             base::sink(type = "output", split = FALSE)
[17:42:59.966]             base::close(...future.stdout)
[17:42:59.966]         }, add = TRUE)
[17:42:59.966]     }
[17:42:59.966]     ...future.frame <- base::sys.nframe()
[17:42:59.966]     ...future.conditions <- base::list()
[17:42:59.966]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:59.966]     if (FALSE) {
[17:42:59.966]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:59.966]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:59.966]     }
[17:42:59.966]     ...future.result <- base::tryCatch({
[17:42:59.966]         base::withCallingHandlers({
[17:42:59.966]             ...future.value <- base::withVisible(base::local({
[17:42:59.966]                 ...future.makeSendCondition <- local({
[17:42:59.966]                   sendCondition <- NULL
[17:42:59.966]                   function(frame = 1L) {
[17:42:59.966]                     if (is.function(sendCondition)) 
[17:42:59.966]                       return(sendCondition)
[17:42:59.966]                     ns <- getNamespace("parallel")
[17:42:59.966]                     if (exists("sendData", mode = "function", 
[17:42:59.966]                       envir = ns)) {
[17:42:59.966]                       parallel_sendData <- get("sendData", mode = "function", 
[17:42:59.966]                         envir = ns)
[17:42:59.966]                       envir <- sys.frame(frame)
[17:42:59.966]                       master <- NULL
[17:42:59.966]                       while (!identical(envir, .GlobalEnv) && 
[17:42:59.966]                         !identical(envir, emptyenv())) {
[17:42:59.966]                         if (exists("master", mode = "list", envir = envir, 
[17:42:59.966]                           inherits = FALSE)) {
[17:42:59.966]                           master <- get("master", mode = "list", 
[17:42:59.966]                             envir = envir, inherits = FALSE)
[17:42:59.966]                           if (inherits(master, c("SOCKnode", 
[17:42:59.966]                             "SOCK0node"))) {
[17:42:59.966]                             sendCondition <<- function(cond) {
[17:42:59.966]                               data <- list(type = "VALUE", value = cond, 
[17:42:59.966]                                 success = TRUE)
[17:42:59.966]                               parallel_sendData(master, data)
[17:42:59.966]                             }
[17:42:59.966]                             return(sendCondition)
[17:42:59.966]                           }
[17:42:59.966]                         }
[17:42:59.966]                         frame <- frame + 1L
[17:42:59.966]                         envir <- sys.frame(frame)
[17:42:59.966]                       }
[17:42:59.966]                     }
[17:42:59.966]                     sendCondition <<- function(cond) NULL
[17:42:59.966]                   }
[17:42:59.966]                 })
[17:42:59.966]                 withCallingHandlers({
[17:42:59.966]                   NA
[17:42:59.966]                 }, immediateCondition = function(cond) {
[17:42:59.966]                   sendCondition <- ...future.makeSendCondition()
[17:42:59.966]                   sendCondition(cond)
[17:42:59.966]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.966]                   {
[17:42:59.966]                     inherits <- base::inherits
[17:42:59.966]                     invokeRestart <- base::invokeRestart
[17:42:59.966]                     is.null <- base::is.null
[17:42:59.966]                     muffled <- FALSE
[17:42:59.966]                     if (inherits(cond, "message")) {
[17:42:59.966]                       muffled <- grepl(pattern, "muffleMessage")
[17:42:59.966]                       if (muffled) 
[17:42:59.966]                         invokeRestart("muffleMessage")
[17:42:59.966]                     }
[17:42:59.966]                     else if (inherits(cond, "warning")) {
[17:42:59.966]                       muffled <- grepl(pattern, "muffleWarning")
[17:42:59.966]                       if (muffled) 
[17:42:59.966]                         invokeRestart("muffleWarning")
[17:42:59.966]                     }
[17:42:59.966]                     else if (inherits(cond, "condition")) {
[17:42:59.966]                       if (!is.null(pattern)) {
[17:42:59.966]                         computeRestarts <- base::computeRestarts
[17:42:59.966]                         grepl <- base::grepl
[17:42:59.966]                         restarts <- computeRestarts(cond)
[17:42:59.966]                         for (restart in restarts) {
[17:42:59.966]                           name <- restart$name
[17:42:59.966]                           if (is.null(name)) 
[17:42:59.966]                             next
[17:42:59.966]                           if (!grepl(pattern, name)) 
[17:42:59.966]                             next
[17:42:59.966]                           invokeRestart(restart)
[17:42:59.966]                           muffled <- TRUE
[17:42:59.966]                           break
[17:42:59.966]                         }
[17:42:59.966]                       }
[17:42:59.966]                     }
[17:42:59.966]                     invisible(muffled)
[17:42:59.966]                   }
[17:42:59.966]                   muffleCondition(cond)
[17:42:59.966]                 })
[17:42:59.966]             }))
[17:42:59.966]             future::FutureResult(value = ...future.value$value, 
[17:42:59.966]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.966]                   ...future.rng), globalenv = if (FALSE) 
[17:42:59.966]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:59.966]                     ...future.globalenv.names))
[17:42:59.966]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:59.966]         }, condition = base::local({
[17:42:59.966]             c <- base::c
[17:42:59.966]             inherits <- base::inherits
[17:42:59.966]             invokeRestart <- base::invokeRestart
[17:42:59.966]             length <- base::length
[17:42:59.966]             list <- base::list
[17:42:59.966]             seq.int <- base::seq.int
[17:42:59.966]             signalCondition <- base::signalCondition
[17:42:59.966]             sys.calls <- base::sys.calls
[17:42:59.966]             `[[` <- base::`[[`
[17:42:59.966]             `+` <- base::`+`
[17:42:59.966]             `<<-` <- base::`<<-`
[17:42:59.966]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:59.966]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:59.966]                   3L)]
[17:42:59.966]             }
[17:42:59.966]             function(cond) {
[17:42:59.966]                 is_error <- inherits(cond, "error")
[17:42:59.966]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:59.966]                   NULL)
[17:42:59.966]                 if (is_error) {
[17:42:59.966]                   sessionInformation <- function() {
[17:42:59.966]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:59.966]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:59.966]                       search = base::search(), system = base::Sys.info())
[17:42:59.966]                   }
[17:42:59.966]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.966]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:59.966]                     cond$call), session = sessionInformation(), 
[17:42:59.966]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:59.966]                   signalCondition(cond)
[17:42:59.966]                 }
[17:42:59.966]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:59.966]                 "immediateCondition"))) {
[17:42:59.966]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:59.966]                   ...future.conditions[[length(...future.conditions) + 
[17:42:59.966]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:59.966]                   if (TRUE && !signal) {
[17:42:59.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.966]                     {
[17:42:59.966]                       inherits <- base::inherits
[17:42:59.966]                       invokeRestart <- base::invokeRestart
[17:42:59.966]                       is.null <- base::is.null
[17:42:59.966]                       muffled <- FALSE
[17:42:59.966]                       if (inherits(cond, "message")) {
[17:42:59.966]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.966]                         if (muffled) 
[17:42:59.966]                           invokeRestart("muffleMessage")
[17:42:59.966]                       }
[17:42:59.966]                       else if (inherits(cond, "warning")) {
[17:42:59.966]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.966]                         if (muffled) 
[17:42:59.966]                           invokeRestart("muffleWarning")
[17:42:59.966]                       }
[17:42:59.966]                       else if (inherits(cond, "condition")) {
[17:42:59.966]                         if (!is.null(pattern)) {
[17:42:59.966]                           computeRestarts <- base::computeRestarts
[17:42:59.966]                           grepl <- base::grepl
[17:42:59.966]                           restarts <- computeRestarts(cond)
[17:42:59.966]                           for (restart in restarts) {
[17:42:59.966]                             name <- restart$name
[17:42:59.966]                             if (is.null(name)) 
[17:42:59.966]                               next
[17:42:59.966]                             if (!grepl(pattern, name)) 
[17:42:59.966]                               next
[17:42:59.966]                             invokeRestart(restart)
[17:42:59.966]                             muffled <- TRUE
[17:42:59.966]                             break
[17:42:59.966]                           }
[17:42:59.966]                         }
[17:42:59.966]                       }
[17:42:59.966]                       invisible(muffled)
[17:42:59.966]                     }
[17:42:59.966]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.966]                   }
[17:42:59.966]                 }
[17:42:59.966]                 else {
[17:42:59.966]                   if (TRUE) {
[17:42:59.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:59.966]                     {
[17:42:59.966]                       inherits <- base::inherits
[17:42:59.966]                       invokeRestart <- base::invokeRestart
[17:42:59.966]                       is.null <- base::is.null
[17:42:59.966]                       muffled <- FALSE
[17:42:59.966]                       if (inherits(cond, "message")) {
[17:42:59.966]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:59.966]                         if (muffled) 
[17:42:59.966]                           invokeRestart("muffleMessage")
[17:42:59.966]                       }
[17:42:59.966]                       else if (inherits(cond, "warning")) {
[17:42:59.966]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:59.966]                         if (muffled) 
[17:42:59.966]                           invokeRestart("muffleWarning")
[17:42:59.966]                       }
[17:42:59.966]                       else if (inherits(cond, "condition")) {
[17:42:59.966]                         if (!is.null(pattern)) {
[17:42:59.966]                           computeRestarts <- base::computeRestarts
[17:42:59.966]                           grepl <- base::grepl
[17:42:59.966]                           restarts <- computeRestarts(cond)
[17:42:59.966]                           for (restart in restarts) {
[17:42:59.966]                             name <- restart$name
[17:42:59.966]                             if (is.null(name)) 
[17:42:59.966]                               next
[17:42:59.966]                             if (!grepl(pattern, name)) 
[17:42:59.966]                               next
[17:42:59.966]                             invokeRestart(restart)
[17:42:59.966]                             muffled <- TRUE
[17:42:59.966]                             break
[17:42:59.966]                           }
[17:42:59.966]                         }
[17:42:59.966]                       }
[17:42:59.966]                       invisible(muffled)
[17:42:59.966]                     }
[17:42:59.966]                     muffleCondition(cond, pattern = "^muffle")
[17:42:59.966]                   }
[17:42:59.966]                 }
[17:42:59.966]             }
[17:42:59.966]         }))
[17:42:59.966]     }, error = function(ex) {
[17:42:59.966]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:59.966]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:59.966]                 ...future.rng), started = ...future.startTime, 
[17:42:59.966]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:59.966]             version = "1.8"), class = "FutureResult")
[17:42:59.966]     }, finally = {
[17:42:59.966]         if (!identical(...future.workdir, getwd())) 
[17:42:59.966]             setwd(...future.workdir)
[17:42:59.966]         {
[17:42:59.966]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:59.966]                 ...future.oldOptions$nwarnings <- NULL
[17:42:59.966]             }
[17:42:59.966]             base::options(...future.oldOptions)
[17:42:59.966]             if (.Platform$OS.type == "windows") {
[17:42:59.966]                 old_names <- names(...future.oldEnvVars)
[17:42:59.966]                 envs <- base::Sys.getenv()
[17:42:59.966]                 names <- names(envs)
[17:42:59.966]                 common <- intersect(names, old_names)
[17:42:59.966]                 added <- setdiff(names, old_names)
[17:42:59.966]                 removed <- setdiff(old_names, names)
[17:42:59.966]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:59.966]                   envs[common]]
[17:42:59.966]                 NAMES <- toupper(changed)
[17:42:59.966]                 args <- list()
[17:42:59.966]                 for (kk in seq_along(NAMES)) {
[17:42:59.966]                   name <- changed[[kk]]
[17:42:59.966]                   NAME <- NAMES[[kk]]
[17:42:59.966]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.966]                     next
[17:42:59.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.966]                 }
[17:42:59.966]                 NAMES <- toupper(added)
[17:42:59.966]                 for (kk in seq_along(NAMES)) {
[17:42:59.966]                   name <- added[[kk]]
[17:42:59.966]                   NAME <- NAMES[[kk]]
[17:42:59.966]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.966]                     next
[17:42:59.966]                   args[[name]] <- ""
[17:42:59.966]                 }
[17:42:59.966]                 NAMES <- toupper(removed)
[17:42:59.966]                 for (kk in seq_along(NAMES)) {
[17:42:59.966]                   name <- removed[[kk]]
[17:42:59.966]                   NAME <- NAMES[[kk]]
[17:42:59.966]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:59.966]                     next
[17:42:59.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:59.966]                 }
[17:42:59.966]                 if (length(args) > 0) 
[17:42:59.966]                   base::do.call(base::Sys.setenv, args = args)
[17:42:59.966]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:59.966]             }
[17:42:59.966]             else {
[17:42:59.966]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:59.966]             }
[17:42:59.966]             {
[17:42:59.966]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:59.966]                   0L) {
[17:42:59.966]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:59.966]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:59.966]                   base::options(opts)
[17:42:59.966]                 }
[17:42:59.966]                 {
[17:42:59.966]                   {
[17:42:59.966]                     base::options(mc.cores = ...future.mc.cores.old)
[17:42:59.966]                     NULL
[17:42:59.966]                   }
[17:42:59.966]                   options(future.plan = NULL)
[17:42:59.966]                   if (is.na(NA_character_)) 
[17:42:59.966]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:59.966]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:59.966]                   future::plan(list(function (..., workers = 2L, 
[17:42:59.966]                     envir = parent.frame()) 
[17:42:59.966]                   strategy(..., workers = workers, envir = envir)), 
[17:42:59.966]                     .cleanup = FALSE, .init = FALSE)
[17:42:59.966]                 }
[17:42:59.966]             }
[17:42:59.966]         }
[17:42:59.966]     })
[17:42:59.966]     if (TRUE) {
[17:42:59.966]         base::sink(type = "output", split = FALSE)
[17:42:59.966]         if (TRUE) {
[17:42:59.966]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:59.966]         }
[17:42:59.966]         else {
[17:42:59.966]             ...future.result["stdout"] <- base::list(NULL)
[17:42:59.966]         }
[17:42:59.966]         base::close(...future.stdout)
[17:42:59.966]         ...future.stdout <- NULL
[17:42:59.966]     }
[17:42:59.966]     ...future.result$conditions <- ...future.conditions
[17:42:59.966]     ...future.result$finished <- base::Sys.time()
[17:42:59.966]     ...future.result
[17:42:59.966] }
[17:43:00.038] MultisessionFuture started
[17:43:00.039] result() for ClusterFuture ...
[17:43:00.039] receiveMessageFromWorker() for ClusterFuture ...
[17:43:00.039] - Validating connection of MultisessionFuture
[17:43:00.065] - received message: FutureResult
[17:43:00.065] - Received FutureResult
[17:43:00.065] - Erased future from FutureRegistry
[17:43:00.065] result() for ClusterFuture ...
[17:43:00.065] - result already collected: FutureResult
[17:43:00.065] result() for ClusterFuture ... done
[17:43:00.065] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:00.065] result() for ClusterFuture ... done
[17:43:00.066] result() for ClusterFuture ...
[17:43:00.066] - result already collected: FutureResult
[17:43:00.066] result() for ClusterFuture ... done
[17:43:00.066] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:43:00.066] plan(): nbrOfWorkers() = 2
> 
> f <- future({ gc() })
[17:43:00.066] getGlobalsAndPackages() ...
[17:43:00.066] Searching for globals...
[17:43:00.067] - globals found: [2] ‘{’, ‘gc’
[17:43:00.068] Searching for globals ... DONE
[17:43:00.068] Resolving globals: FALSE
[17:43:00.068] 
[17:43:00.068] 
[17:43:00.068] getGlobalsAndPackages() ... DONE
[17:43:00.068] run() for ‘Future’ ...
[17:43:00.069] - state: ‘created’
[17:43:00.069] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:43:00.080] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:43:00.080] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:43:00.081]   - Field: ‘node’
[17:43:00.081]   - Field: ‘label’
[17:43:00.081]   - Field: ‘local’
[17:43:00.081]   - Field: ‘owner’
[17:43:00.081]   - Field: ‘envir’
[17:43:00.081]   - Field: ‘workers’
[17:43:00.081]   - Field: ‘packages’
[17:43:00.081]   - Field: ‘gc’
[17:43:00.081]   - Field: ‘conditions’
[17:43:00.081]   - Field: ‘persistent’
[17:43:00.081]   - Field: ‘expr’
[17:43:00.082]   - Field: ‘uuid’
[17:43:00.082]   - Field: ‘seed’
[17:43:00.082]   - Field: ‘version’
[17:43:00.082]   - Field: ‘result’
[17:43:00.082]   - Field: ‘asynchronous’
[17:43:00.082]   - Field: ‘calls’
[17:43:00.082]   - Field: ‘globals’
[17:43:00.082]   - Field: ‘stdout’
[17:43:00.082]   - Field: ‘earlySignal’
[17:43:00.082]   - Field: ‘lazy’
[17:43:00.082]   - Field: ‘state’
[17:43:00.083] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:43:00.083] - Launch lazy future ...
[17:43:00.083] Packages needed by the future expression (n = 0): <none>
[17:43:00.083] Packages needed by future strategies (n = 0): <none>
[17:43:00.084] {
[17:43:00.084]     {
[17:43:00.084]         {
[17:43:00.084]             ...future.startTime <- base::Sys.time()
[17:43:00.084]             {
[17:43:00.084]                 {
[17:43:00.084]                   {
[17:43:00.084]                     {
[17:43:00.084]                       base::local({
[17:43:00.084]                         has_future <- base::requireNamespace("future", 
[17:43:00.084]                           quietly = TRUE)
[17:43:00.084]                         if (has_future) {
[17:43:00.084]                           ns <- base::getNamespace("future")
[17:43:00.084]                           version <- ns[[".package"]][["version"]]
[17:43:00.084]                           if (is.null(version)) 
[17:43:00.084]                             version <- utils::packageVersion("future")
[17:43:00.084]                         }
[17:43:00.084]                         else {
[17:43:00.084]                           version <- NULL
[17:43:00.084]                         }
[17:43:00.084]                         if (!has_future || version < "1.8.0") {
[17:43:00.084]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:00.084]                             "", base::R.version$version.string), 
[17:43:00.084]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:00.084]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:00.084]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:00.084]                               "release", "version")], collapse = " "), 
[17:43:00.084]                             hostname = base::Sys.info()[["nodename"]])
[17:43:00.084]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:00.084]                             info)
[17:43:00.084]                           info <- base::paste(info, collapse = "; ")
[17:43:00.084]                           if (!has_future) {
[17:43:00.084]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:00.084]                               info)
[17:43:00.084]                           }
[17:43:00.084]                           else {
[17:43:00.084]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:00.084]                               info, version)
[17:43:00.084]                           }
[17:43:00.084]                           base::stop(msg)
[17:43:00.084]                         }
[17:43:00.084]                       })
[17:43:00.084]                     }
[17:43:00.084]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:00.084]                     base::options(mc.cores = 1L)
[17:43:00.084]                   }
[17:43:00.084]                   options(future.plan = NULL)
[17:43:00.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:00.084]                 }
[17:43:00.084]                 ...future.workdir <- getwd()
[17:43:00.084]             }
[17:43:00.084]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:00.084]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:00.084]         }
[17:43:00.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:00.084]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:00.084]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:00.084]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:00.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:00.084]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:00.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:00.084]             base::names(...future.oldOptions))
[17:43:00.084]     }
[17:43:00.084]     if (FALSE) {
[17:43:00.084]     }
[17:43:00.084]     else {
[17:43:00.084]         if (TRUE) {
[17:43:00.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:00.084]                 open = "w")
[17:43:00.084]         }
[17:43:00.084]         else {
[17:43:00.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:00.084]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:00.084]         }
[17:43:00.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:00.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:00.084]             base::sink(type = "output", split = FALSE)
[17:43:00.084]             base::close(...future.stdout)
[17:43:00.084]         }, add = TRUE)
[17:43:00.084]     }
[17:43:00.084]     ...future.frame <- base::sys.nframe()
[17:43:00.084]     ...future.conditions <- base::list()
[17:43:00.084]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:00.084]     if (FALSE) {
[17:43:00.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:00.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:00.084]     }
[17:43:00.084]     ...future.result <- base::tryCatch({
[17:43:00.084]         base::withCallingHandlers({
[17:43:00.084]             ...future.value <- base::withVisible(base::local({
[17:43:00.084]                 ...future.makeSendCondition <- local({
[17:43:00.084]                   sendCondition <- NULL
[17:43:00.084]                   function(frame = 1L) {
[17:43:00.084]                     if (is.function(sendCondition)) 
[17:43:00.084]                       return(sendCondition)
[17:43:00.084]                     ns <- getNamespace("parallel")
[17:43:00.084]                     if (exists("sendData", mode = "function", 
[17:43:00.084]                       envir = ns)) {
[17:43:00.084]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:00.084]                         envir = ns)
[17:43:00.084]                       envir <- sys.frame(frame)
[17:43:00.084]                       master <- NULL
[17:43:00.084]                       while (!identical(envir, .GlobalEnv) && 
[17:43:00.084]                         !identical(envir, emptyenv())) {
[17:43:00.084]                         if (exists("master", mode = "list", envir = envir, 
[17:43:00.084]                           inherits = FALSE)) {
[17:43:00.084]                           master <- get("master", mode = "list", 
[17:43:00.084]                             envir = envir, inherits = FALSE)
[17:43:00.084]                           if (inherits(master, c("SOCKnode", 
[17:43:00.084]                             "SOCK0node"))) {
[17:43:00.084]                             sendCondition <<- function(cond) {
[17:43:00.084]                               data <- list(type = "VALUE", value = cond, 
[17:43:00.084]                                 success = TRUE)
[17:43:00.084]                               parallel_sendData(master, data)
[17:43:00.084]                             }
[17:43:00.084]                             return(sendCondition)
[17:43:00.084]                           }
[17:43:00.084]                         }
[17:43:00.084]                         frame <- frame + 1L
[17:43:00.084]                         envir <- sys.frame(frame)
[17:43:00.084]                       }
[17:43:00.084]                     }
[17:43:00.084]                     sendCondition <<- function(cond) NULL
[17:43:00.084]                   }
[17:43:00.084]                 })
[17:43:00.084]                 withCallingHandlers({
[17:43:00.084]                   {
[17:43:00.084]                     gc()
[17:43:00.084]                   }
[17:43:00.084]                 }, immediateCondition = function(cond) {
[17:43:00.084]                   sendCondition <- ...future.makeSendCondition()
[17:43:00.084]                   sendCondition(cond)
[17:43:00.084]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.084]                   {
[17:43:00.084]                     inherits <- base::inherits
[17:43:00.084]                     invokeRestart <- base::invokeRestart
[17:43:00.084]                     is.null <- base::is.null
[17:43:00.084]                     muffled <- FALSE
[17:43:00.084]                     if (inherits(cond, "message")) {
[17:43:00.084]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:00.084]                       if (muffled) 
[17:43:00.084]                         invokeRestart("muffleMessage")
[17:43:00.084]                     }
[17:43:00.084]                     else if (inherits(cond, "warning")) {
[17:43:00.084]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:00.084]                       if (muffled) 
[17:43:00.084]                         invokeRestart("muffleWarning")
[17:43:00.084]                     }
[17:43:00.084]                     else if (inherits(cond, "condition")) {
[17:43:00.084]                       if (!is.null(pattern)) {
[17:43:00.084]                         computeRestarts <- base::computeRestarts
[17:43:00.084]                         grepl <- base::grepl
[17:43:00.084]                         restarts <- computeRestarts(cond)
[17:43:00.084]                         for (restart in restarts) {
[17:43:00.084]                           name <- restart$name
[17:43:00.084]                           if (is.null(name)) 
[17:43:00.084]                             next
[17:43:00.084]                           if (!grepl(pattern, name)) 
[17:43:00.084]                             next
[17:43:00.084]                           invokeRestart(restart)
[17:43:00.084]                           muffled <- TRUE
[17:43:00.084]                           break
[17:43:00.084]                         }
[17:43:00.084]                       }
[17:43:00.084]                     }
[17:43:00.084]                     invisible(muffled)
[17:43:00.084]                   }
[17:43:00.084]                   muffleCondition(cond)
[17:43:00.084]                 })
[17:43:00.084]             }))
[17:43:00.084]             future::FutureResult(value = ...future.value$value, 
[17:43:00.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.084]                   ...future.rng), globalenv = if (FALSE) 
[17:43:00.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:00.084]                     ...future.globalenv.names))
[17:43:00.084]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:00.084]         }, condition = base::local({
[17:43:00.084]             c <- base::c
[17:43:00.084]             inherits <- base::inherits
[17:43:00.084]             invokeRestart <- base::invokeRestart
[17:43:00.084]             length <- base::length
[17:43:00.084]             list <- base::list
[17:43:00.084]             seq.int <- base::seq.int
[17:43:00.084]             signalCondition <- base::signalCondition
[17:43:00.084]             sys.calls <- base::sys.calls
[17:43:00.084]             `[[` <- base::`[[`
[17:43:00.084]             `+` <- base::`+`
[17:43:00.084]             `<<-` <- base::`<<-`
[17:43:00.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:00.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:00.084]                   3L)]
[17:43:00.084]             }
[17:43:00.084]             function(cond) {
[17:43:00.084]                 is_error <- inherits(cond, "error")
[17:43:00.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:00.084]                   NULL)
[17:43:00.084]                 if (is_error) {
[17:43:00.084]                   sessionInformation <- function() {
[17:43:00.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:00.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:00.084]                       search = base::search(), system = base::Sys.info())
[17:43:00.084]                   }
[17:43:00.084]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:00.084]                     cond$call), session = sessionInformation(), 
[17:43:00.084]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:00.084]                   signalCondition(cond)
[17:43:00.084]                 }
[17:43:00.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:00.084]                 "immediateCondition"))) {
[17:43:00.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:00.084]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:00.084]                   if (TRUE && !signal) {
[17:43:00.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.084]                     {
[17:43:00.084]                       inherits <- base::inherits
[17:43:00.084]                       invokeRestart <- base::invokeRestart
[17:43:00.084]                       is.null <- base::is.null
[17:43:00.084]                       muffled <- FALSE
[17:43:00.084]                       if (inherits(cond, "message")) {
[17:43:00.084]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.084]                         if (muffled) 
[17:43:00.084]                           invokeRestart("muffleMessage")
[17:43:00.084]                       }
[17:43:00.084]                       else if (inherits(cond, "warning")) {
[17:43:00.084]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.084]                         if (muffled) 
[17:43:00.084]                           invokeRestart("muffleWarning")
[17:43:00.084]                       }
[17:43:00.084]                       else if (inherits(cond, "condition")) {
[17:43:00.084]                         if (!is.null(pattern)) {
[17:43:00.084]                           computeRestarts <- base::computeRestarts
[17:43:00.084]                           grepl <- base::grepl
[17:43:00.084]                           restarts <- computeRestarts(cond)
[17:43:00.084]                           for (restart in restarts) {
[17:43:00.084]                             name <- restart$name
[17:43:00.084]                             if (is.null(name)) 
[17:43:00.084]                               next
[17:43:00.084]                             if (!grepl(pattern, name)) 
[17:43:00.084]                               next
[17:43:00.084]                             invokeRestart(restart)
[17:43:00.084]                             muffled <- TRUE
[17:43:00.084]                             break
[17:43:00.084]                           }
[17:43:00.084]                         }
[17:43:00.084]                       }
[17:43:00.084]                       invisible(muffled)
[17:43:00.084]                     }
[17:43:00.084]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.084]                   }
[17:43:00.084]                 }
[17:43:00.084]                 else {
[17:43:00.084]                   if (TRUE) {
[17:43:00.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.084]                     {
[17:43:00.084]                       inherits <- base::inherits
[17:43:00.084]                       invokeRestart <- base::invokeRestart
[17:43:00.084]                       is.null <- base::is.null
[17:43:00.084]                       muffled <- FALSE
[17:43:00.084]                       if (inherits(cond, "message")) {
[17:43:00.084]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.084]                         if (muffled) 
[17:43:00.084]                           invokeRestart("muffleMessage")
[17:43:00.084]                       }
[17:43:00.084]                       else if (inherits(cond, "warning")) {
[17:43:00.084]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.084]                         if (muffled) 
[17:43:00.084]                           invokeRestart("muffleWarning")
[17:43:00.084]                       }
[17:43:00.084]                       else if (inherits(cond, "condition")) {
[17:43:00.084]                         if (!is.null(pattern)) {
[17:43:00.084]                           computeRestarts <- base::computeRestarts
[17:43:00.084]                           grepl <- base::grepl
[17:43:00.084]                           restarts <- computeRestarts(cond)
[17:43:00.084]                           for (restart in restarts) {
[17:43:00.084]                             name <- restart$name
[17:43:00.084]                             if (is.null(name)) 
[17:43:00.084]                               next
[17:43:00.084]                             if (!grepl(pattern, name)) 
[17:43:00.084]                               next
[17:43:00.084]                             invokeRestart(restart)
[17:43:00.084]                             muffled <- TRUE
[17:43:00.084]                             break
[17:43:00.084]                           }
[17:43:00.084]                         }
[17:43:00.084]                       }
[17:43:00.084]                       invisible(muffled)
[17:43:00.084]                     }
[17:43:00.084]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.084]                   }
[17:43:00.084]                 }
[17:43:00.084]             }
[17:43:00.084]         }))
[17:43:00.084]     }, error = function(ex) {
[17:43:00.084]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:00.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.084]                 ...future.rng), started = ...future.startTime, 
[17:43:00.084]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:00.084]             version = "1.8"), class = "FutureResult")
[17:43:00.084]     }, finally = {
[17:43:00.084]         if (!identical(...future.workdir, getwd())) 
[17:43:00.084]             setwd(...future.workdir)
[17:43:00.084]         {
[17:43:00.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:00.084]                 ...future.oldOptions$nwarnings <- NULL
[17:43:00.084]             }
[17:43:00.084]             base::options(...future.oldOptions)
[17:43:00.084]             if (.Platform$OS.type == "windows") {
[17:43:00.084]                 old_names <- names(...future.oldEnvVars)
[17:43:00.084]                 envs <- base::Sys.getenv()
[17:43:00.084]                 names <- names(envs)
[17:43:00.084]                 common <- intersect(names, old_names)
[17:43:00.084]                 added <- setdiff(names, old_names)
[17:43:00.084]                 removed <- setdiff(old_names, names)
[17:43:00.084]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:00.084]                   envs[common]]
[17:43:00.084]                 NAMES <- toupper(changed)
[17:43:00.084]                 args <- list()
[17:43:00.084]                 for (kk in seq_along(NAMES)) {
[17:43:00.084]                   name <- changed[[kk]]
[17:43:00.084]                   NAME <- NAMES[[kk]]
[17:43:00.084]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.084]                     next
[17:43:00.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.084]                 }
[17:43:00.084]                 NAMES <- toupper(added)
[17:43:00.084]                 for (kk in seq_along(NAMES)) {
[17:43:00.084]                   name <- added[[kk]]
[17:43:00.084]                   NAME <- NAMES[[kk]]
[17:43:00.084]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.084]                     next
[17:43:00.084]                   args[[name]] <- ""
[17:43:00.084]                 }
[17:43:00.084]                 NAMES <- toupper(removed)
[17:43:00.084]                 for (kk in seq_along(NAMES)) {
[17:43:00.084]                   name <- removed[[kk]]
[17:43:00.084]                   NAME <- NAMES[[kk]]
[17:43:00.084]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.084]                     next
[17:43:00.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.084]                 }
[17:43:00.084]                 if (length(args) > 0) 
[17:43:00.084]                   base::do.call(base::Sys.setenv, args = args)
[17:43:00.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:00.084]             }
[17:43:00.084]             else {
[17:43:00.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:00.084]             }
[17:43:00.084]             {
[17:43:00.084]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:00.084]                   0L) {
[17:43:00.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:00.084]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:00.084]                   base::options(opts)
[17:43:00.084]                 }
[17:43:00.084]                 {
[17:43:00.084]                   {
[17:43:00.084]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:00.084]                     NULL
[17:43:00.084]                   }
[17:43:00.084]                   options(future.plan = NULL)
[17:43:00.084]                   if (is.na(NA_character_)) 
[17:43:00.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:00.084]                   future::plan(list(function (..., workers = 2L, 
[17:43:00.084]                     envir = parent.frame()) 
[17:43:00.084]                   strategy(..., workers = workers, envir = envir)), 
[17:43:00.084]                     .cleanup = FALSE, .init = FALSE)
[17:43:00.084]                 }
[17:43:00.084]             }
[17:43:00.084]         }
[17:43:00.084]     })
[17:43:00.084]     if (TRUE) {
[17:43:00.084]         base::sink(type = "output", split = FALSE)
[17:43:00.084]         if (TRUE) {
[17:43:00.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:00.084]         }
[17:43:00.084]         else {
[17:43:00.084]             ...future.result["stdout"] <- base::list(NULL)
[17:43:00.084]         }
[17:43:00.084]         base::close(...future.stdout)
[17:43:00.084]         ...future.stdout <- NULL
[17:43:00.084]     }
[17:43:00.084]     ...future.result$conditions <- ...future.conditions
[17:43:00.084]     ...future.result$finished <- base::Sys.time()
[17:43:00.084]     ...future.result
[17:43:00.084] }
[17:43:00.087] MultisessionFuture started
[17:43:00.087] - Launch lazy future ... done
[17:43:00.087] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:43:00.087] result() for ClusterFuture ...
[17:43:00.087] receiveMessageFromWorker() for ClusterFuture ...
[17:43:00.088] - Validating connection of MultisessionFuture
[17:43:00.154] - received message: FutureResult
[17:43:00.154] - Received FutureResult
[17:43:00.154] - Erased future from FutureRegistry
[17:43:00.155] result() for ClusterFuture ...
[17:43:00.155] - result already collected: FutureResult
[17:43:00.155] result() for ClusterFuture ... done
[17:43:00.155] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:00.155] result() for ClusterFuture ... done
[17:43:00.155] result() for ClusterFuture ...
[17:43:00.155] - result already collected: FutureResult
[17:43:00.155] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395191 21.2     836944 44.7   664120 35.5
Vcells 704987  5.4    8388608 64.0  1814288 13.9
> 
> f <- future({ integer(10e6) })
[17:43:00.156] getGlobalsAndPackages() ...
[17:43:00.156] Searching for globals...
[17:43:00.156] - globals found: [2] ‘{’, ‘integer’
[17:43:00.157] Searching for globals ... DONE
[17:43:00.157] Resolving globals: FALSE
[17:43:00.157] 
[17:43:00.157] 
[17:43:00.157] getGlobalsAndPackages() ... DONE
[17:43:00.157] run() for ‘Future’ ...
[17:43:00.158] - state: ‘created’
[17:43:00.158] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:43:00.169] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:43:00.169] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:43:00.169]   - Field: ‘node’
[17:43:00.169]   - Field: ‘label’
[17:43:00.169]   - Field: ‘local’
[17:43:00.169]   - Field: ‘owner’
[17:43:00.170]   - Field: ‘envir’
[17:43:00.170]   - Field: ‘workers’
[17:43:00.170]   - Field: ‘packages’
[17:43:00.170]   - Field: ‘gc’
[17:43:00.170]   - Field: ‘conditions’
[17:43:00.170]   - Field: ‘persistent’
[17:43:00.170]   - Field: ‘expr’
[17:43:00.170]   - Field: ‘uuid’
[17:43:00.170]   - Field: ‘seed’
[17:43:00.170]   - Field: ‘version’
[17:43:00.170]   - Field: ‘result’
[17:43:00.171]   - Field: ‘asynchronous’
[17:43:00.171]   - Field: ‘calls’
[17:43:00.171]   - Field: ‘globals’
[17:43:00.171]   - Field: ‘stdout’
[17:43:00.173]   - Field: ‘earlySignal’
[17:43:00.173]   - Field: ‘lazy’
[17:43:00.173]   - Field: ‘state’
[17:43:00.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:43:00.173] - Launch lazy future ...
[17:43:00.174] Packages needed by the future expression (n = 0): <none>
[17:43:00.174] Packages needed by future strategies (n = 0): <none>
[17:43:00.174] {
[17:43:00.174]     {
[17:43:00.174]         {
[17:43:00.174]             ...future.startTime <- base::Sys.time()
[17:43:00.174]             {
[17:43:00.174]                 {
[17:43:00.174]                   {
[17:43:00.174]                     {
[17:43:00.174]                       base::local({
[17:43:00.174]                         has_future <- base::requireNamespace("future", 
[17:43:00.174]                           quietly = TRUE)
[17:43:00.174]                         if (has_future) {
[17:43:00.174]                           ns <- base::getNamespace("future")
[17:43:00.174]                           version <- ns[[".package"]][["version"]]
[17:43:00.174]                           if (is.null(version)) 
[17:43:00.174]                             version <- utils::packageVersion("future")
[17:43:00.174]                         }
[17:43:00.174]                         else {
[17:43:00.174]                           version <- NULL
[17:43:00.174]                         }
[17:43:00.174]                         if (!has_future || version < "1.8.0") {
[17:43:00.174]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:00.174]                             "", base::R.version$version.string), 
[17:43:00.174]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:00.174]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:00.174]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:00.174]                               "release", "version")], collapse = " "), 
[17:43:00.174]                             hostname = base::Sys.info()[["nodename"]])
[17:43:00.174]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:00.174]                             info)
[17:43:00.174]                           info <- base::paste(info, collapse = "; ")
[17:43:00.174]                           if (!has_future) {
[17:43:00.174]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:00.174]                               info)
[17:43:00.174]                           }
[17:43:00.174]                           else {
[17:43:00.174]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:00.174]                               info, version)
[17:43:00.174]                           }
[17:43:00.174]                           base::stop(msg)
[17:43:00.174]                         }
[17:43:00.174]                       })
[17:43:00.174]                     }
[17:43:00.174]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:00.174]                     base::options(mc.cores = 1L)
[17:43:00.174]                   }
[17:43:00.174]                   options(future.plan = NULL)
[17:43:00.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:00.174]                 }
[17:43:00.174]                 ...future.workdir <- getwd()
[17:43:00.174]             }
[17:43:00.174]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:00.174]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:00.174]         }
[17:43:00.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:00.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:00.174]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:00.174]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:00.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:00.174]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:00.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:00.174]             base::names(...future.oldOptions))
[17:43:00.174]     }
[17:43:00.174]     if (FALSE) {
[17:43:00.174]     }
[17:43:00.174]     else {
[17:43:00.174]         if (TRUE) {
[17:43:00.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:00.174]                 open = "w")
[17:43:00.174]         }
[17:43:00.174]         else {
[17:43:00.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:00.174]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:00.174]         }
[17:43:00.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:00.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:00.174]             base::sink(type = "output", split = FALSE)
[17:43:00.174]             base::close(...future.stdout)
[17:43:00.174]         }, add = TRUE)
[17:43:00.174]     }
[17:43:00.174]     ...future.frame <- base::sys.nframe()
[17:43:00.174]     ...future.conditions <- base::list()
[17:43:00.174]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:00.174]     if (FALSE) {
[17:43:00.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:00.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:00.174]     }
[17:43:00.174]     ...future.result <- base::tryCatch({
[17:43:00.174]         base::withCallingHandlers({
[17:43:00.174]             ...future.value <- base::withVisible(base::local({
[17:43:00.174]                 ...future.makeSendCondition <- local({
[17:43:00.174]                   sendCondition <- NULL
[17:43:00.174]                   function(frame = 1L) {
[17:43:00.174]                     if (is.function(sendCondition)) 
[17:43:00.174]                       return(sendCondition)
[17:43:00.174]                     ns <- getNamespace("parallel")
[17:43:00.174]                     if (exists("sendData", mode = "function", 
[17:43:00.174]                       envir = ns)) {
[17:43:00.174]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:00.174]                         envir = ns)
[17:43:00.174]                       envir <- sys.frame(frame)
[17:43:00.174]                       master <- NULL
[17:43:00.174]                       while (!identical(envir, .GlobalEnv) && 
[17:43:00.174]                         !identical(envir, emptyenv())) {
[17:43:00.174]                         if (exists("master", mode = "list", envir = envir, 
[17:43:00.174]                           inherits = FALSE)) {
[17:43:00.174]                           master <- get("master", mode = "list", 
[17:43:00.174]                             envir = envir, inherits = FALSE)
[17:43:00.174]                           if (inherits(master, c("SOCKnode", 
[17:43:00.174]                             "SOCK0node"))) {
[17:43:00.174]                             sendCondition <<- function(cond) {
[17:43:00.174]                               data <- list(type = "VALUE", value = cond, 
[17:43:00.174]                                 success = TRUE)
[17:43:00.174]                               parallel_sendData(master, data)
[17:43:00.174]                             }
[17:43:00.174]                             return(sendCondition)
[17:43:00.174]                           }
[17:43:00.174]                         }
[17:43:00.174]                         frame <- frame + 1L
[17:43:00.174]                         envir <- sys.frame(frame)
[17:43:00.174]                       }
[17:43:00.174]                     }
[17:43:00.174]                     sendCondition <<- function(cond) NULL
[17:43:00.174]                   }
[17:43:00.174]                 })
[17:43:00.174]                 withCallingHandlers({
[17:43:00.174]                   {
[17:43:00.174]                     integer(1e+07)
[17:43:00.174]                   }
[17:43:00.174]                 }, immediateCondition = function(cond) {
[17:43:00.174]                   sendCondition <- ...future.makeSendCondition()
[17:43:00.174]                   sendCondition(cond)
[17:43:00.174]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.174]                   {
[17:43:00.174]                     inherits <- base::inherits
[17:43:00.174]                     invokeRestart <- base::invokeRestart
[17:43:00.174]                     is.null <- base::is.null
[17:43:00.174]                     muffled <- FALSE
[17:43:00.174]                     if (inherits(cond, "message")) {
[17:43:00.174]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:00.174]                       if (muffled) 
[17:43:00.174]                         invokeRestart("muffleMessage")
[17:43:00.174]                     }
[17:43:00.174]                     else if (inherits(cond, "warning")) {
[17:43:00.174]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:00.174]                       if (muffled) 
[17:43:00.174]                         invokeRestart("muffleWarning")
[17:43:00.174]                     }
[17:43:00.174]                     else if (inherits(cond, "condition")) {
[17:43:00.174]                       if (!is.null(pattern)) {
[17:43:00.174]                         computeRestarts <- base::computeRestarts
[17:43:00.174]                         grepl <- base::grepl
[17:43:00.174]                         restarts <- computeRestarts(cond)
[17:43:00.174]                         for (restart in restarts) {
[17:43:00.174]                           name <- restart$name
[17:43:00.174]                           if (is.null(name)) 
[17:43:00.174]                             next
[17:43:00.174]                           if (!grepl(pattern, name)) 
[17:43:00.174]                             next
[17:43:00.174]                           invokeRestart(restart)
[17:43:00.174]                           muffled <- TRUE
[17:43:00.174]                           break
[17:43:00.174]                         }
[17:43:00.174]                       }
[17:43:00.174]                     }
[17:43:00.174]                     invisible(muffled)
[17:43:00.174]                   }
[17:43:00.174]                   muffleCondition(cond)
[17:43:00.174]                 })
[17:43:00.174]             }))
[17:43:00.174]             future::FutureResult(value = ...future.value$value, 
[17:43:00.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.174]                   ...future.rng), globalenv = if (FALSE) 
[17:43:00.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:00.174]                     ...future.globalenv.names))
[17:43:00.174]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:00.174]         }, condition = base::local({
[17:43:00.174]             c <- base::c
[17:43:00.174]             inherits <- base::inherits
[17:43:00.174]             invokeRestart <- base::invokeRestart
[17:43:00.174]             length <- base::length
[17:43:00.174]             list <- base::list
[17:43:00.174]             seq.int <- base::seq.int
[17:43:00.174]             signalCondition <- base::signalCondition
[17:43:00.174]             sys.calls <- base::sys.calls
[17:43:00.174]             `[[` <- base::`[[`
[17:43:00.174]             `+` <- base::`+`
[17:43:00.174]             `<<-` <- base::`<<-`
[17:43:00.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:00.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:00.174]                   3L)]
[17:43:00.174]             }
[17:43:00.174]             function(cond) {
[17:43:00.174]                 is_error <- inherits(cond, "error")
[17:43:00.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:00.174]                   NULL)
[17:43:00.174]                 if (is_error) {
[17:43:00.174]                   sessionInformation <- function() {
[17:43:00.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:00.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:00.174]                       search = base::search(), system = base::Sys.info())
[17:43:00.174]                   }
[17:43:00.174]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:00.174]                     cond$call), session = sessionInformation(), 
[17:43:00.174]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:00.174]                   signalCondition(cond)
[17:43:00.174]                 }
[17:43:00.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:00.174]                 "immediateCondition"))) {
[17:43:00.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:00.174]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:00.174]                   if (TRUE && !signal) {
[17:43:00.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.174]                     {
[17:43:00.174]                       inherits <- base::inherits
[17:43:00.174]                       invokeRestart <- base::invokeRestart
[17:43:00.174]                       is.null <- base::is.null
[17:43:00.174]                       muffled <- FALSE
[17:43:00.174]                       if (inherits(cond, "message")) {
[17:43:00.174]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.174]                         if (muffled) 
[17:43:00.174]                           invokeRestart("muffleMessage")
[17:43:00.174]                       }
[17:43:00.174]                       else if (inherits(cond, "warning")) {
[17:43:00.174]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.174]                         if (muffled) 
[17:43:00.174]                           invokeRestart("muffleWarning")
[17:43:00.174]                       }
[17:43:00.174]                       else if (inherits(cond, "condition")) {
[17:43:00.174]                         if (!is.null(pattern)) {
[17:43:00.174]                           computeRestarts <- base::computeRestarts
[17:43:00.174]                           grepl <- base::grepl
[17:43:00.174]                           restarts <- computeRestarts(cond)
[17:43:00.174]                           for (restart in restarts) {
[17:43:00.174]                             name <- restart$name
[17:43:00.174]                             if (is.null(name)) 
[17:43:00.174]                               next
[17:43:00.174]                             if (!grepl(pattern, name)) 
[17:43:00.174]                               next
[17:43:00.174]                             invokeRestart(restart)
[17:43:00.174]                             muffled <- TRUE
[17:43:00.174]                             break
[17:43:00.174]                           }
[17:43:00.174]                         }
[17:43:00.174]                       }
[17:43:00.174]                       invisible(muffled)
[17:43:00.174]                     }
[17:43:00.174]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.174]                   }
[17:43:00.174]                 }
[17:43:00.174]                 else {
[17:43:00.174]                   if (TRUE) {
[17:43:00.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.174]                     {
[17:43:00.174]                       inherits <- base::inherits
[17:43:00.174]                       invokeRestart <- base::invokeRestart
[17:43:00.174]                       is.null <- base::is.null
[17:43:00.174]                       muffled <- FALSE
[17:43:00.174]                       if (inherits(cond, "message")) {
[17:43:00.174]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.174]                         if (muffled) 
[17:43:00.174]                           invokeRestart("muffleMessage")
[17:43:00.174]                       }
[17:43:00.174]                       else if (inherits(cond, "warning")) {
[17:43:00.174]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.174]                         if (muffled) 
[17:43:00.174]                           invokeRestart("muffleWarning")
[17:43:00.174]                       }
[17:43:00.174]                       else if (inherits(cond, "condition")) {
[17:43:00.174]                         if (!is.null(pattern)) {
[17:43:00.174]                           computeRestarts <- base::computeRestarts
[17:43:00.174]                           grepl <- base::grepl
[17:43:00.174]                           restarts <- computeRestarts(cond)
[17:43:00.174]                           for (restart in restarts) {
[17:43:00.174]                             name <- restart$name
[17:43:00.174]                             if (is.null(name)) 
[17:43:00.174]                               next
[17:43:00.174]                             if (!grepl(pattern, name)) 
[17:43:00.174]                               next
[17:43:00.174]                             invokeRestart(restart)
[17:43:00.174]                             muffled <- TRUE
[17:43:00.174]                             break
[17:43:00.174]                           }
[17:43:00.174]                         }
[17:43:00.174]                       }
[17:43:00.174]                       invisible(muffled)
[17:43:00.174]                     }
[17:43:00.174]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.174]                   }
[17:43:00.174]                 }
[17:43:00.174]             }
[17:43:00.174]         }))
[17:43:00.174]     }, error = function(ex) {
[17:43:00.174]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:00.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.174]                 ...future.rng), started = ...future.startTime, 
[17:43:00.174]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:00.174]             version = "1.8"), class = "FutureResult")
[17:43:00.174]     }, finally = {
[17:43:00.174]         if (!identical(...future.workdir, getwd())) 
[17:43:00.174]             setwd(...future.workdir)
[17:43:00.174]         {
[17:43:00.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:00.174]                 ...future.oldOptions$nwarnings <- NULL
[17:43:00.174]             }
[17:43:00.174]             base::options(...future.oldOptions)
[17:43:00.174]             if (.Platform$OS.type == "windows") {
[17:43:00.174]                 old_names <- names(...future.oldEnvVars)
[17:43:00.174]                 envs <- base::Sys.getenv()
[17:43:00.174]                 names <- names(envs)
[17:43:00.174]                 common <- intersect(names, old_names)
[17:43:00.174]                 added <- setdiff(names, old_names)
[17:43:00.174]                 removed <- setdiff(old_names, names)
[17:43:00.174]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:00.174]                   envs[common]]
[17:43:00.174]                 NAMES <- toupper(changed)
[17:43:00.174]                 args <- list()
[17:43:00.174]                 for (kk in seq_along(NAMES)) {
[17:43:00.174]                   name <- changed[[kk]]
[17:43:00.174]                   NAME <- NAMES[[kk]]
[17:43:00.174]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.174]                     next
[17:43:00.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.174]                 }
[17:43:00.174]                 NAMES <- toupper(added)
[17:43:00.174]                 for (kk in seq_along(NAMES)) {
[17:43:00.174]                   name <- added[[kk]]
[17:43:00.174]                   NAME <- NAMES[[kk]]
[17:43:00.174]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.174]                     next
[17:43:00.174]                   args[[name]] <- ""
[17:43:00.174]                 }
[17:43:00.174]                 NAMES <- toupper(removed)
[17:43:00.174]                 for (kk in seq_along(NAMES)) {
[17:43:00.174]                   name <- removed[[kk]]
[17:43:00.174]                   NAME <- NAMES[[kk]]
[17:43:00.174]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.174]                     next
[17:43:00.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.174]                 }
[17:43:00.174]                 if (length(args) > 0) 
[17:43:00.174]                   base::do.call(base::Sys.setenv, args = args)
[17:43:00.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:00.174]             }
[17:43:00.174]             else {
[17:43:00.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:00.174]             }
[17:43:00.174]             {
[17:43:00.174]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:00.174]                   0L) {
[17:43:00.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:00.174]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:00.174]                   base::options(opts)
[17:43:00.174]                 }
[17:43:00.174]                 {
[17:43:00.174]                   {
[17:43:00.174]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:00.174]                     NULL
[17:43:00.174]                   }
[17:43:00.174]                   options(future.plan = NULL)
[17:43:00.174]                   if (is.na(NA_character_)) 
[17:43:00.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:00.174]                   future::plan(list(function (..., workers = 2L, 
[17:43:00.174]                     envir = parent.frame()) 
[17:43:00.174]                   strategy(..., workers = workers, envir = envir)), 
[17:43:00.174]                     .cleanup = FALSE, .init = FALSE)
[17:43:00.174]                 }
[17:43:00.174]             }
[17:43:00.174]         }
[17:43:00.174]     })
[17:43:00.174]     if (TRUE) {
[17:43:00.174]         base::sink(type = "output", split = FALSE)
[17:43:00.174]         if (TRUE) {
[17:43:00.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:00.174]         }
[17:43:00.174]         else {
[17:43:00.174]             ...future.result["stdout"] <- base::list(NULL)
[17:43:00.174]         }
[17:43:00.174]         base::close(...future.stdout)
[17:43:00.174]         ...future.stdout <- NULL
[17:43:00.174]     }
[17:43:00.174]     ...future.result$conditions <- ...future.conditions
[17:43:00.174]     ...future.result$finished <- base::Sys.time()
[17:43:00.174]     ...future.result
[17:43:00.174] }
[17:43:00.177] MultisessionFuture started
[17:43:00.177] - Launch lazy future ... done
[17:43:00.177] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:43:00.178] result() for ClusterFuture ...
[17:43:00.178] receiveMessageFromWorker() for ClusterFuture ...
[17:43:00.178] - Validating connection of MultisessionFuture
[17:43:00.273] - received message: FutureResult
[17:43:00.273] - Received FutureResult
[17:43:00.273] - Erased future from FutureRegistry
[17:43:00.274] result() for ClusterFuture ...
[17:43:00.274] - result already collected: FutureResult
[17:43:00.274] result() for ClusterFuture ... done
[17:43:00.274] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:00.274] result() for ClusterFuture ... done
[17:43:00.274] result() for ClusterFuture ...
[17:43:00.274] - result already collected: FutureResult
[17:43:00.274] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[17:43:00.275] getGlobalsAndPackages() ...
[17:43:00.275] Searching for globals...
[17:43:00.276] - globals found: [2] ‘{’, ‘gc’
[17:43:00.276] Searching for globals ... DONE
[17:43:00.276] Resolving globals: FALSE
[17:43:00.276] 
[17:43:00.276] 
[17:43:00.277] getGlobalsAndPackages() ... DONE
[17:43:00.277] run() for ‘Future’ ...
[17:43:00.277] - state: ‘created’
[17:43:00.277] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:43:00.288] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:43:00.288] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:43:00.288]   - Field: ‘node’
[17:43:00.288]   - Field: ‘label’
[17:43:00.288]   - Field: ‘local’
[17:43:00.288]   - Field: ‘owner’
[17:43:00.289]   - Field: ‘envir’
[17:43:00.289]   - Field: ‘workers’
[17:43:00.289]   - Field: ‘packages’
[17:43:00.289]   - Field: ‘gc’
[17:43:00.289]   - Field: ‘conditions’
[17:43:00.289]   - Field: ‘persistent’
[17:43:00.289]   - Field: ‘expr’
[17:43:00.289]   - Field: ‘uuid’
[17:43:00.289]   - Field: ‘seed’
[17:43:00.289]   - Field: ‘version’
[17:43:00.289]   - Field: ‘result’
[17:43:00.290]   - Field: ‘asynchronous’
[17:43:00.290]   - Field: ‘calls’
[17:43:00.290]   - Field: ‘globals’
[17:43:00.290]   - Field: ‘stdout’
[17:43:00.290]   - Field: ‘earlySignal’
[17:43:00.290]   - Field: ‘lazy’
[17:43:00.290]   - Field: ‘state’
[17:43:00.290] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:43:00.290] - Launch lazy future ...
[17:43:00.290] Packages needed by the future expression (n = 0): <none>
[17:43:00.291] Packages needed by future strategies (n = 0): <none>
[17:43:00.291] {
[17:43:00.291]     {
[17:43:00.291]         {
[17:43:00.291]             ...future.startTime <- base::Sys.time()
[17:43:00.291]             {
[17:43:00.291]                 {
[17:43:00.291]                   {
[17:43:00.291]                     {
[17:43:00.291]                       base::local({
[17:43:00.291]                         has_future <- base::requireNamespace("future", 
[17:43:00.291]                           quietly = TRUE)
[17:43:00.291]                         if (has_future) {
[17:43:00.291]                           ns <- base::getNamespace("future")
[17:43:00.291]                           version <- ns[[".package"]][["version"]]
[17:43:00.291]                           if (is.null(version)) 
[17:43:00.291]                             version <- utils::packageVersion("future")
[17:43:00.291]                         }
[17:43:00.291]                         else {
[17:43:00.291]                           version <- NULL
[17:43:00.291]                         }
[17:43:00.291]                         if (!has_future || version < "1.8.0") {
[17:43:00.291]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:00.291]                             "", base::R.version$version.string), 
[17:43:00.291]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:00.291]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:00.291]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:00.291]                               "release", "version")], collapse = " "), 
[17:43:00.291]                             hostname = base::Sys.info()[["nodename"]])
[17:43:00.291]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:00.291]                             info)
[17:43:00.291]                           info <- base::paste(info, collapse = "; ")
[17:43:00.291]                           if (!has_future) {
[17:43:00.291]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:00.291]                               info)
[17:43:00.291]                           }
[17:43:00.291]                           else {
[17:43:00.291]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:00.291]                               info, version)
[17:43:00.291]                           }
[17:43:00.291]                           base::stop(msg)
[17:43:00.291]                         }
[17:43:00.291]                       })
[17:43:00.291]                     }
[17:43:00.291]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:00.291]                     base::options(mc.cores = 1L)
[17:43:00.291]                   }
[17:43:00.291]                   options(future.plan = NULL)
[17:43:00.291]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.291]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:00.291]                 }
[17:43:00.291]                 ...future.workdir <- getwd()
[17:43:00.291]             }
[17:43:00.291]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:00.291]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:00.291]         }
[17:43:00.291]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:00.291]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:00.291]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:00.291]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:00.291]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:00.291]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:00.291]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:00.291]             base::names(...future.oldOptions))
[17:43:00.291]     }
[17:43:00.291]     if (FALSE) {
[17:43:00.291]     }
[17:43:00.291]     else {
[17:43:00.291]         if (TRUE) {
[17:43:00.291]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:00.291]                 open = "w")
[17:43:00.291]         }
[17:43:00.291]         else {
[17:43:00.291]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:00.291]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:00.291]         }
[17:43:00.291]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:00.291]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:00.291]             base::sink(type = "output", split = FALSE)
[17:43:00.291]             base::close(...future.stdout)
[17:43:00.291]         }, add = TRUE)
[17:43:00.291]     }
[17:43:00.291]     ...future.frame <- base::sys.nframe()
[17:43:00.291]     ...future.conditions <- base::list()
[17:43:00.291]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:00.291]     if (FALSE) {
[17:43:00.291]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:00.291]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:00.291]     }
[17:43:00.291]     ...future.result <- base::tryCatch({
[17:43:00.291]         base::withCallingHandlers({
[17:43:00.291]             ...future.value <- base::withVisible(base::local({
[17:43:00.291]                 ...future.makeSendCondition <- local({
[17:43:00.291]                   sendCondition <- NULL
[17:43:00.291]                   function(frame = 1L) {
[17:43:00.291]                     if (is.function(sendCondition)) 
[17:43:00.291]                       return(sendCondition)
[17:43:00.291]                     ns <- getNamespace("parallel")
[17:43:00.291]                     if (exists("sendData", mode = "function", 
[17:43:00.291]                       envir = ns)) {
[17:43:00.291]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:00.291]                         envir = ns)
[17:43:00.291]                       envir <- sys.frame(frame)
[17:43:00.291]                       master <- NULL
[17:43:00.291]                       while (!identical(envir, .GlobalEnv) && 
[17:43:00.291]                         !identical(envir, emptyenv())) {
[17:43:00.291]                         if (exists("master", mode = "list", envir = envir, 
[17:43:00.291]                           inherits = FALSE)) {
[17:43:00.291]                           master <- get("master", mode = "list", 
[17:43:00.291]                             envir = envir, inherits = FALSE)
[17:43:00.291]                           if (inherits(master, c("SOCKnode", 
[17:43:00.291]                             "SOCK0node"))) {
[17:43:00.291]                             sendCondition <<- function(cond) {
[17:43:00.291]                               data <- list(type = "VALUE", value = cond, 
[17:43:00.291]                                 success = TRUE)
[17:43:00.291]                               parallel_sendData(master, data)
[17:43:00.291]                             }
[17:43:00.291]                             return(sendCondition)
[17:43:00.291]                           }
[17:43:00.291]                         }
[17:43:00.291]                         frame <- frame + 1L
[17:43:00.291]                         envir <- sys.frame(frame)
[17:43:00.291]                       }
[17:43:00.291]                     }
[17:43:00.291]                     sendCondition <<- function(cond) NULL
[17:43:00.291]                   }
[17:43:00.291]                 })
[17:43:00.291]                 withCallingHandlers({
[17:43:00.291]                   {
[17:43:00.291]                     gc()
[17:43:00.291]                   }
[17:43:00.291]                 }, immediateCondition = function(cond) {
[17:43:00.291]                   sendCondition <- ...future.makeSendCondition()
[17:43:00.291]                   sendCondition(cond)
[17:43:00.291]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.291]                   {
[17:43:00.291]                     inherits <- base::inherits
[17:43:00.291]                     invokeRestart <- base::invokeRestart
[17:43:00.291]                     is.null <- base::is.null
[17:43:00.291]                     muffled <- FALSE
[17:43:00.291]                     if (inherits(cond, "message")) {
[17:43:00.291]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:00.291]                       if (muffled) 
[17:43:00.291]                         invokeRestart("muffleMessage")
[17:43:00.291]                     }
[17:43:00.291]                     else if (inherits(cond, "warning")) {
[17:43:00.291]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:00.291]                       if (muffled) 
[17:43:00.291]                         invokeRestart("muffleWarning")
[17:43:00.291]                     }
[17:43:00.291]                     else if (inherits(cond, "condition")) {
[17:43:00.291]                       if (!is.null(pattern)) {
[17:43:00.291]                         computeRestarts <- base::computeRestarts
[17:43:00.291]                         grepl <- base::grepl
[17:43:00.291]                         restarts <- computeRestarts(cond)
[17:43:00.291]                         for (restart in restarts) {
[17:43:00.291]                           name <- restart$name
[17:43:00.291]                           if (is.null(name)) 
[17:43:00.291]                             next
[17:43:00.291]                           if (!grepl(pattern, name)) 
[17:43:00.291]                             next
[17:43:00.291]                           invokeRestart(restart)
[17:43:00.291]                           muffled <- TRUE
[17:43:00.291]                           break
[17:43:00.291]                         }
[17:43:00.291]                       }
[17:43:00.291]                     }
[17:43:00.291]                     invisible(muffled)
[17:43:00.291]                   }
[17:43:00.291]                   muffleCondition(cond)
[17:43:00.291]                 })
[17:43:00.291]             }))
[17:43:00.291]             future::FutureResult(value = ...future.value$value, 
[17:43:00.291]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.291]                   ...future.rng), globalenv = if (FALSE) 
[17:43:00.291]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:00.291]                     ...future.globalenv.names))
[17:43:00.291]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:00.291]         }, condition = base::local({
[17:43:00.291]             c <- base::c
[17:43:00.291]             inherits <- base::inherits
[17:43:00.291]             invokeRestart <- base::invokeRestart
[17:43:00.291]             length <- base::length
[17:43:00.291]             list <- base::list
[17:43:00.291]             seq.int <- base::seq.int
[17:43:00.291]             signalCondition <- base::signalCondition
[17:43:00.291]             sys.calls <- base::sys.calls
[17:43:00.291]             `[[` <- base::`[[`
[17:43:00.291]             `+` <- base::`+`
[17:43:00.291]             `<<-` <- base::`<<-`
[17:43:00.291]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:00.291]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:00.291]                   3L)]
[17:43:00.291]             }
[17:43:00.291]             function(cond) {
[17:43:00.291]                 is_error <- inherits(cond, "error")
[17:43:00.291]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:00.291]                   NULL)
[17:43:00.291]                 if (is_error) {
[17:43:00.291]                   sessionInformation <- function() {
[17:43:00.291]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:00.291]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:00.291]                       search = base::search(), system = base::Sys.info())
[17:43:00.291]                   }
[17:43:00.291]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.291]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:00.291]                     cond$call), session = sessionInformation(), 
[17:43:00.291]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:00.291]                   signalCondition(cond)
[17:43:00.291]                 }
[17:43:00.291]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:00.291]                 "immediateCondition"))) {
[17:43:00.291]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:00.291]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.291]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:00.291]                   if (TRUE && !signal) {
[17:43:00.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.291]                     {
[17:43:00.291]                       inherits <- base::inherits
[17:43:00.291]                       invokeRestart <- base::invokeRestart
[17:43:00.291]                       is.null <- base::is.null
[17:43:00.291]                       muffled <- FALSE
[17:43:00.291]                       if (inherits(cond, "message")) {
[17:43:00.291]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.291]                         if (muffled) 
[17:43:00.291]                           invokeRestart("muffleMessage")
[17:43:00.291]                       }
[17:43:00.291]                       else if (inherits(cond, "warning")) {
[17:43:00.291]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.291]                         if (muffled) 
[17:43:00.291]                           invokeRestart("muffleWarning")
[17:43:00.291]                       }
[17:43:00.291]                       else if (inherits(cond, "condition")) {
[17:43:00.291]                         if (!is.null(pattern)) {
[17:43:00.291]                           computeRestarts <- base::computeRestarts
[17:43:00.291]                           grepl <- base::grepl
[17:43:00.291]                           restarts <- computeRestarts(cond)
[17:43:00.291]                           for (restart in restarts) {
[17:43:00.291]                             name <- restart$name
[17:43:00.291]                             if (is.null(name)) 
[17:43:00.291]                               next
[17:43:00.291]                             if (!grepl(pattern, name)) 
[17:43:00.291]                               next
[17:43:00.291]                             invokeRestart(restart)
[17:43:00.291]                             muffled <- TRUE
[17:43:00.291]                             break
[17:43:00.291]                           }
[17:43:00.291]                         }
[17:43:00.291]                       }
[17:43:00.291]                       invisible(muffled)
[17:43:00.291]                     }
[17:43:00.291]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.291]                   }
[17:43:00.291]                 }
[17:43:00.291]                 else {
[17:43:00.291]                   if (TRUE) {
[17:43:00.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.291]                     {
[17:43:00.291]                       inherits <- base::inherits
[17:43:00.291]                       invokeRestart <- base::invokeRestart
[17:43:00.291]                       is.null <- base::is.null
[17:43:00.291]                       muffled <- FALSE
[17:43:00.291]                       if (inherits(cond, "message")) {
[17:43:00.291]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.291]                         if (muffled) 
[17:43:00.291]                           invokeRestart("muffleMessage")
[17:43:00.291]                       }
[17:43:00.291]                       else if (inherits(cond, "warning")) {
[17:43:00.291]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.291]                         if (muffled) 
[17:43:00.291]                           invokeRestart("muffleWarning")
[17:43:00.291]                       }
[17:43:00.291]                       else if (inherits(cond, "condition")) {
[17:43:00.291]                         if (!is.null(pattern)) {
[17:43:00.291]                           computeRestarts <- base::computeRestarts
[17:43:00.291]                           grepl <- base::grepl
[17:43:00.291]                           restarts <- computeRestarts(cond)
[17:43:00.291]                           for (restart in restarts) {
[17:43:00.291]                             name <- restart$name
[17:43:00.291]                             if (is.null(name)) 
[17:43:00.291]                               next
[17:43:00.291]                             if (!grepl(pattern, name)) 
[17:43:00.291]                               next
[17:43:00.291]                             invokeRestart(restart)
[17:43:00.291]                             muffled <- TRUE
[17:43:00.291]                             break
[17:43:00.291]                           }
[17:43:00.291]                         }
[17:43:00.291]                       }
[17:43:00.291]                       invisible(muffled)
[17:43:00.291]                     }
[17:43:00.291]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.291]                   }
[17:43:00.291]                 }
[17:43:00.291]             }
[17:43:00.291]         }))
[17:43:00.291]     }, error = function(ex) {
[17:43:00.291]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:00.291]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.291]                 ...future.rng), started = ...future.startTime, 
[17:43:00.291]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:00.291]             version = "1.8"), class = "FutureResult")
[17:43:00.291]     }, finally = {
[17:43:00.291]         if (!identical(...future.workdir, getwd())) 
[17:43:00.291]             setwd(...future.workdir)
[17:43:00.291]         {
[17:43:00.291]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:00.291]                 ...future.oldOptions$nwarnings <- NULL
[17:43:00.291]             }
[17:43:00.291]             base::options(...future.oldOptions)
[17:43:00.291]             if (.Platform$OS.type == "windows") {
[17:43:00.291]                 old_names <- names(...future.oldEnvVars)
[17:43:00.291]                 envs <- base::Sys.getenv()
[17:43:00.291]                 names <- names(envs)
[17:43:00.291]                 common <- intersect(names, old_names)
[17:43:00.291]                 added <- setdiff(names, old_names)
[17:43:00.291]                 removed <- setdiff(old_names, names)
[17:43:00.291]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:00.291]                   envs[common]]
[17:43:00.291]                 NAMES <- toupper(changed)
[17:43:00.291]                 args <- list()
[17:43:00.291]                 for (kk in seq_along(NAMES)) {
[17:43:00.291]                   name <- changed[[kk]]
[17:43:00.291]                   NAME <- NAMES[[kk]]
[17:43:00.291]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.291]                     next
[17:43:00.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.291]                 }
[17:43:00.291]                 NAMES <- toupper(added)
[17:43:00.291]                 for (kk in seq_along(NAMES)) {
[17:43:00.291]                   name <- added[[kk]]
[17:43:00.291]                   NAME <- NAMES[[kk]]
[17:43:00.291]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.291]                     next
[17:43:00.291]                   args[[name]] <- ""
[17:43:00.291]                 }
[17:43:00.291]                 NAMES <- toupper(removed)
[17:43:00.291]                 for (kk in seq_along(NAMES)) {
[17:43:00.291]                   name <- removed[[kk]]
[17:43:00.291]                   NAME <- NAMES[[kk]]
[17:43:00.291]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.291]                     next
[17:43:00.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.291]                 }
[17:43:00.291]                 if (length(args) > 0) 
[17:43:00.291]                   base::do.call(base::Sys.setenv, args = args)
[17:43:00.291]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:00.291]             }
[17:43:00.291]             else {
[17:43:00.291]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:00.291]             }
[17:43:00.291]             {
[17:43:00.291]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:00.291]                   0L) {
[17:43:00.291]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:00.291]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:00.291]                   base::options(opts)
[17:43:00.291]                 }
[17:43:00.291]                 {
[17:43:00.291]                   {
[17:43:00.291]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:00.291]                     NULL
[17:43:00.291]                   }
[17:43:00.291]                   options(future.plan = NULL)
[17:43:00.291]                   if (is.na(NA_character_)) 
[17:43:00.291]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.291]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:00.291]                   future::plan(list(function (..., workers = 2L, 
[17:43:00.291]                     envir = parent.frame()) 
[17:43:00.291]                   strategy(..., workers = workers, envir = envir)), 
[17:43:00.291]                     .cleanup = FALSE, .init = FALSE)
[17:43:00.291]                 }
[17:43:00.291]             }
[17:43:00.291]         }
[17:43:00.291]     })
[17:43:00.291]     if (TRUE) {
[17:43:00.291]         base::sink(type = "output", split = FALSE)
[17:43:00.291]         if (TRUE) {
[17:43:00.291]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:00.291]         }
[17:43:00.291]         else {
[17:43:00.291]             ...future.result["stdout"] <- base::list(NULL)
[17:43:00.291]         }
[17:43:00.291]         base::close(...future.stdout)
[17:43:00.291]         ...future.stdout <- NULL
[17:43:00.291]     }
[17:43:00.291]     ...future.result$conditions <- ...future.conditions
[17:43:00.291]     ...future.result$finished <- base::Sys.time()
[17:43:00.291]     ...future.result
[17:43:00.291] }
[17:43:00.294] MultisessionFuture started
[17:43:00.294] - Launch lazy future ... done
[17:43:00.294] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:43:00.294] result() for ClusterFuture ...
[17:43:00.295] receiveMessageFromWorker() for ClusterFuture ...
[17:43:00.295] - Validating connection of MultisessionFuture
[17:43:00.362] - received message: FutureResult
[17:43:00.362] - Received FutureResult
[17:43:00.362] - Erased future from FutureRegistry
[17:43:00.362] result() for ClusterFuture ...
[17:43:00.362] - result already collected: FutureResult
[17:43:00.362] result() for ClusterFuture ... done
[17:43:00.362] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:00.363] result() for ClusterFuture ... done
[17:43:00.363] result() for ClusterFuture ...
[17:43:00.363] - result already collected: FutureResult
[17:43:00.363] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 395195 21.2     836944 44.7   664120 35.5
Vcells 704992  5.4    8388608 64.0  5728300 43.8
> 
> f <- future({ integer(10e6) }, gc = TRUE)
[17:43:00.363] getGlobalsAndPackages() ...
[17:43:00.363] Searching for globals...
[17:43:00.364] - globals found: [2] ‘{’, ‘integer’
[17:43:00.364] Searching for globals ... DONE
[17:43:00.364] Resolving globals: FALSE
[17:43:00.365] 
[17:43:00.365] 
[17:43:00.365] getGlobalsAndPackages() ... DONE
[17:43:00.365] run() for ‘Future’ ...
[17:43:00.365] - state: ‘created’
[17:43:00.365] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:43:00.377] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:43:00.377] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:43:00.377]   - Field: ‘node’
[17:43:00.377]   - Field: ‘label’
[17:43:00.377]   - Field: ‘local’
[17:43:00.377]   - Field: ‘owner’
[17:43:00.377]   - Field: ‘envir’
[17:43:00.378]   - Field: ‘workers’
[17:43:00.378]   - Field: ‘packages’
[17:43:00.378]   - Field: ‘gc’
[17:43:00.378]   - Field: ‘conditions’
[17:43:00.378]   - Field: ‘persistent’
[17:43:00.378]   - Field: ‘expr’
[17:43:00.378]   - Field: ‘uuid’
[17:43:00.378]   - Field: ‘seed’
[17:43:00.378]   - Field: ‘version’
[17:43:00.378]   - Field: ‘result’
[17:43:00.378]   - Field: ‘asynchronous’
[17:43:00.379]   - Field: ‘calls’
[17:43:00.379]   - Field: ‘globals’
[17:43:00.379]   - Field: ‘stdout’
[17:43:00.379]   - Field: ‘earlySignal’
[17:43:00.379]   - Field: ‘lazy’
[17:43:00.379]   - Field: ‘state’
[17:43:00.379] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:43:00.379] - Launch lazy future ...
[17:43:00.380] Packages needed by the future expression (n = 0): <none>
[17:43:00.380] Packages needed by future strategies (n = 0): <none>
[17:43:00.380] {
[17:43:00.380]     {
[17:43:00.380]         {
[17:43:00.380]             ...future.startTime <- base::Sys.time()
[17:43:00.380]             {
[17:43:00.380]                 {
[17:43:00.380]                   {
[17:43:00.380]                     {
[17:43:00.380]                       base::local({
[17:43:00.380]                         has_future <- base::requireNamespace("future", 
[17:43:00.380]                           quietly = TRUE)
[17:43:00.380]                         if (has_future) {
[17:43:00.380]                           ns <- base::getNamespace("future")
[17:43:00.380]                           version <- ns[[".package"]][["version"]]
[17:43:00.380]                           if (is.null(version)) 
[17:43:00.380]                             version <- utils::packageVersion("future")
[17:43:00.380]                         }
[17:43:00.380]                         else {
[17:43:00.380]                           version <- NULL
[17:43:00.380]                         }
[17:43:00.380]                         if (!has_future || version < "1.8.0") {
[17:43:00.380]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:00.380]                             "", base::R.version$version.string), 
[17:43:00.380]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:00.380]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:00.380]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:00.380]                               "release", "version")], collapse = " "), 
[17:43:00.380]                             hostname = base::Sys.info()[["nodename"]])
[17:43:00.380]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:00.380]                             info)
[17:43:00.380]                           info <- base::paste(info, collapse = "; ")
[17:43:00.380]                           if (!has_future) {
[17:43:00.380]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:00.380]                               info)
[17:43:00.380]                           }
[17:43:00.380]                           else {
[17:43:00.380]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:00.380]                               info, version)
[17:43:00.380]                           }
[17:43:00.380]                           base::stop(msg)
[17:43:00.380]                         }
[17:43:00.380]                       })
[17:43:00.380]                     }
[17:43:00.380]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:00.380]                     base::options(mc.cores = 1L)
[17:43:00.380]                   }
[17:43:00.380]                   options(future.plan = NULL)
[17:43:00.380]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.380]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:00.380]                 }
[17:43:00.380]                 ...future.workdir <- getwd()
[17:43:00.380]             }
[17:43:00.380]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:00.380]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:00.380]         }
[17:43:00.380]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:00.380]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:00.380]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:00.380]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:00.380]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:00.380]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:00.380]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:00.380]             base::names(...future.oldOptions))
[17:43:00.380]     }
[17:43:00.380]     if (FALSE) {
[17:43:00.380]     }
[17:43:00.380]     else {
[17:43:00.380]         if (TRUE) {
[17:43:00.380]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:00.380]                 open = "w")
[17:43:00.380]         }
[17:43:00.380]         else {
[17:43:00.380]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:00.380]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:00.380]         }
[17:43:00.380]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:00.380]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:00.380]             base::sink(type = "output", split = FALSE)
[17:43:00.380]             base::close(...future.stdout)
[17:43:00.380]         }, add = TRUE)
[17:43:00.380]     }
[17:43:00.380]     ...future.frame <- base::sys.nframe()
[17:43:00.380]     ...future.conditions <- base::list()
[17:43:00.380]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:00.380]     if (FALSE) {
[17:43:00.380]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:00.380]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:00.380]     }
[17:43:00.380]     ...future.result <- base::tryCatch({
[17:43:00.380]         base::withCallingHandlers({
[17:43:00.380]             ...future.value <- base::withVisible(base::local({
[17:43:00.380]                 ...future.makeSendCondition <- local({
[17:43:00.380]                   sendCondition <- NULL
[17:43:00.380]                   function(frame = 1L) {
[17:43:00.380]                     if (is.function(sendCondition)) 
[17:43:00.380]                       return(sendCondition)
[17:43:00.380]                     ns <- getNamespace("parallel")
[17:43:00.380]                     if (exists("sendData", mode = "function", 
[17:43:00.380]                       envir = ns)) {
[17:43:00.380]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:00.380]                         envir = ns)
[17:43:00.380]                       envir <- sys.frame(frame)
[17:43:00.380]                       master <- NULL
[17:43:00.380]                       while (!identical(envir, .GlobalEnv) && 
[17:43:00.380]                         !identical(envir, emptyenv())) {
[17:43:00.380]                         if (exists("master", mode = "list", envir = envir, 
[17:43:00.380]                           inherits = FALSE)) {
[17:43:00.380]                           master <- get("master", mode = "list", 
[17:43:00.380]                             envir = envir, inherits = FALSE)
[17:43:00.380]                           if (inherits(master, c("SOCKnode", 
[17:43:00.380]                             "SOCK0node"))) {
[17:43:00.380]                             sendCondition <<- function(cond) {
[17:43:00.380]                               data <- list(type = "VALUE", value = cond, 
[17:43:00.380]                                 success = TRUE)
[17:43:00.380]                               parallel_sendData(master, data)
[17:43:00.380]                             }
[17:43:00.380]                             return(sendCondition)
[17:43:00.380]                           }
[17:43:00.380]                         }
[17:43:00.380]                         frame <- frame + 1L
[17:43:00.380]                         envir <- sys.frame(frame)
[17:43:00.380]                       }
[17:43:00.380]                     }
[17:43:00.380]                     sendCondition <<- function(cond) NULL
[17:43:00.380]                   }
[17:43:00.380]                 })
[17:43:00.380]                 withCallingHandlers({
[17:43:00.380]                   {
[17:43:00.380]                     integer(1e+07)
[17:43:00.380]                   }
[17:43:00.380]                 }, immediateCondition = function(cond) {
[17:43:00.380]                   sendCondition <- ...future.makeSendCondition()
[17:43:00.380]                   sendCondition(cond)
[17:43:00.380]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.380]                   {
[17:43:00.380]                     inherits <- base::inherits
[17:43:00.380]                     invokeRestart <- base::invokeRestart
[17:43:00.380]                     is.null <- base::is.null
[17:43:00.380]                     muffled <- FALSE
[17:43:00.380]                     if (inherits(cond, "message")) {
[17:43:00.380]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:00.380]                       if (muffled) 
[17:43:00.380]                         invokeRestart("muffleMessage")
[17:43:00.380]                     }
[17:43:00.380]                     else if (inherits(cond, "warning")) {
[17:43:00.380]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:00.380]                       if (muffled) 
[17:43:00.380]                         invokeRestart("muffleWarning")
[17:43:00.380]                     }
[17:43:00.380]                     else if (inherits(cond, "condition")) {
[17:43:00.380]                       if (!is.null(pattern)) {
[17:43:00.380]                         computeRestarts <- base::computeRestarts
[17:43:00.380]                         grepl <- base::grepl
[17:43:00.380]                         restarts <- computeRestarts(cond)
[17:43:00.380]                         for (restart in restarts) {
[17:43:00.380]                           name <- restart$name
[17:43:00.380]                           if (is.null(name)) 
[17:43:00.380]                             next
[17:43:00.380]                           if (!grepl(pattern, name)) 
[17:43:00.380]                             next
[17:43:00.380]                           invokeRestart(restart)
[17:43:00.380]                           muffled <- TRUE
[17:43:00.380]                           break
[17:43:00.380]                         }
[17:43:00.380]                       }
[17:43:00.380]                     }
[17:43:00.380]                     invisible(muffled)
[17:43:00.380]                   }
[17:43:00.380]                   muffleCondition(cond)
[17:43:00.380]                 })
[17:43:00.380]             }))
[17:43:00.380]             future::FutureResult(value = ...future.value$value, 
[17:43:00.380]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.380]                   ...future.rng), globalenv = if (FALSE) 
[17:43:00.380]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:00.380]                     ...future.globalenv.names))
[17:43:00.380]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:00.380]         }, condition = base::local({
[17:43:00.380]             c <- base::c
[17:43:00.380]             inherits <- base::inherits
[17:43:00.380]             invokeRestart <- base::invokeRestart
[17:43:00.380]             length <- base::length
[17:43:00.380]             list <- base::list
[17:43:00.380]             seq.int <- base::seq.int
[17:43:00.380]             signalCondition <- base::signalCondition
[17:43:00.380]             sys.calls <- base::sys.calls
[17:43:00.380]             `[[` <- base::`[[`
[17:43:00.380]             `+` <- base::`+`
[17:43:00.380]             `<<-` <- base::`<<-`
[17:43:00.380]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:00.380]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:00.380]                   3L)]
[17:43:00.380]             }
[17:43:00.380]             function(cond) {
[17:43:00.380]                 is_error <- inherits(cond, "error")
[17:43:00.380]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:00.380]                   NULL)
[17:43:00.380]                 if (is_error) {
[17:43:00.380]                   sessionInformation <- function() {
[17:43:00.380]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:00.380]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:00.380]                       search = base::search(), system = base::Sys.info())
[17:43:00.380]                   }
[17:43:00.380]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.380]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:00.380]                     cond$call), session = sessionInformation(), 
[17:43:00.380]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:00.380]                   signalCondition(cond)
[17:43:00.380]                 }
[17:43:00.380]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:00.380]                 "immediateCondition"))) {
[17:43:00.380]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:00.380]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.380]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:00.380]                   if (TRUE && !signal) {
[17:43:00.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.380]                     {
[17:43:00.380]                       inherits <- base::inherits
[17:43:00.380]                       invokeRestart <- base::invokeRestart
[17:43:00.380]                       is.null <- base::is.null
[17:43:00.380]                       muffled <- FALSE
[17:43:00.380]                       if (inherits(cond, "message")) {
[17:43:00.380]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.380]                         if (muffled) 
[17:43:00.380]                           invokeRestart("muffleMessage")
[17:43:00.380]                       }
[17:43:00.380]                       else if (inherits(cond, "warning")) {
[17:43:00.380]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.380]                         if (muffled) 
[17:43:00.380]                           invokeRestart("muffleWarning")
[17:43:00.380]                       }
[17:43:00.380]                       else if (inherits(cond, "condition")) {
[17:43:00.380]                         if (!is.null(pattern)) {
[17:43:00.380]                           computeRestarts <- base::computeRestarts
[17:43:00.380]                           grepl <- base::grepl
[17:43:00.380]                           restarts <- computeRestarts(cond)
[17:43:00.380]                           for (restart in restarts) {
[17:43:00.380]                             name <- restart$name
[17:43:00.380]                             if (is.null(name)) 
[17:43:00.380]                               next
[17:43:00.380]                             if (!grepl(pattern, name)) 
[17:43:00.380]                               next
[17:43:00.380]                             invokeRestart(restart)
[17:43:00.380]                             muffled <- TRUE
[17:43:00.380]                             break
[17:43:00.380]                           }
[17:43:00.380]                         }
[17:43:00.380]                       }
[17:43:00.380]                       invisible(muffled)
[17:43:00.380]                     }
[17:43:00.380]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.380]                   }
[17:43:00.380]                 }
[17:43:00.380]                 else {
[17:43:00.380]                   if (TRUE) {
[17:43:00.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.380]                     {
[17:43:00.380]                       inherits <- base::inherits
[17:43:00.380]                       invokeRestart <- base::invokeRestart
[17:43:00.380]                       is.null <- base::is.null
[17:43:00.380]                       muffled <- FALSE
[17:43:00.380]                       if (inherits(cond, "message")) {
[17:43:00.380]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.380]                         if (muffled) 
[17:43:00.380]                           invokeRestart("muffleMessage")
[17:43:00.380]                       }
[17:43:00.380]                       else if (inherits(cond, "warning")) {
[17:43:00.380]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.380]                         if (muffled) 
[17:43:00.380]                           invokeRestart("muffleWarning")
[17:43:00.380]                       }
[17:43:00.380]                       else if (inherits(cond, "condition")) {
[17:43:00.380]                         if (!is.null(pattern)) {
[17:43:00.380]                           computeRestarts <- base::computeRestarts
[17:43:00.380]                           grepl <- base::grepl
[17:43:00.380]                           restarts <- computeRestarts(cond)
[17:43:00.380]                           for (restart in restarts) {
[17:43:00.380]                             name <- restart$name
[17:43:00.380]                             if (is.null(name)) 
[17:43:00.380]                               next
[17:43:00.380]                             if (!grepl(pattern, name)) 
[17:43:00.380]                               next
[17:43:00.380]                             invokeRestart(restart)
[17:43:00.380]                             muffled <- TRUE
[17:43:00.380]                             break
[17:43:00.380]                           }
[17:43:00.380]                         }
[17:43:00.380]                       }
[17:43:00.380]                       invisible(muffled)
[17:43:00.380]                     }
[17:43:00.380]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.380]                   }
[17:43:00.380]                 }
[17:43:00.380]             }
[17:43:00.380]         }))
[17:43:00.380]     }, error = function(ex) {
[17:43:00.380]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:00.380]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.380]                 ...future.rng), started = ...future.startTime, 
[17:43:00.380]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:00.380]             version = "1.8"), class = "FutureResult")
[17:43:00.380]     }, finally = {
[17:43:00.380]         if (!identical(...future.workdir, getwd())) 
[17:43:00.380]             setwd(...future.workdir)
[17:43:00.380]         {
[17:43:00.380]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:00.380]                 ...future.oldOptions$nwarnings <- NULL
[17:43:00.380]             }
[17:43:00.380]             base::options(...future.oldOptions)
[17:43:00.380]             if (.Platform$OS.type == "windows") {
[17:43:00.380]                 old_names <- names(...future.oldEnvVars)
[17:43:00.380]                 envs <- base::Sys.getenv()
[17:43:00.380]                 names <- names(envs)
[17:43:00.380]                 common <- intersect(names, old_names)
[17:43:00.380]                 added <- setdiff(names, old_names)
[17:43:00.380]                 removed <- setdiff(old_names, names)
[17:43:00.380]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:00.380]                   envs[common]]
[17:43:00.380]                 NAMES <- toupper(changed)
[17:43:00.380]                 args <- list()
[17:43:00.380]                 for (kk in seq_along(NAMES)) {
[17:43:00.380]                   name <- changed[[kk]]
[17:43:00.380]                   NAME <- NAMES[[kk]]
[17:43:00.380]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.380]                     next
[17:43:00.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.380]                 }
[17:43:00.380]                 NAMES <- toupper(added)
[17:43:00.380]                 for (kk in seq_along(NAMES)) {
[17:43:00.380]                   name <- added[[kk]]
[17:43:00.380]                   NAME <- NAMES[[kk]]
[17:43:00.380]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.380]                     next
[17:43:00.380]                   args[[name]] <- ""
[17:43:00.380]                 }
[17:43:00.380]                 NAMES <- toupper(removed)
[17:43:00.380]                 for (kk in seq_along(NAMES)) {
[17:43:00.380]                   name <- removed[[kk]]
[17:43:00.380]                   NAME <- NAMES[[kk]]
[17:43:00.380]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.380]                     next
[17:43:00.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.380]                 }
[17:43:00.380]                 if (length(args) > 0) 
[17:43:00.380]                   base::do.call(base::Sys.setenv, args = args)
[17:43:00.380]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:00.380]             }
[17:43:00.380]             else {
[17:43:00.380]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:00.380]             }
[17:43:00.380]             {
[17:43:00.380]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:00.380]                   0L) {
[17:43:00.380]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:00.380]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:00.380]                   base::options(opts)
[17:43:00.380]                 }
[17:43:00.380]                 {
[17:43:00.380]                   {
[17:43:00.380]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:00.380]                     NULL
[17:43:00.380]                   }
[17:43:00.380]                   options(future.plan = NULL)
[17:43:00.380]                   if (is.na(NA_character_)) 
[17:43:00.380]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.380]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:00.380]                   future::plan(list(function (..., workers = 2L, 
[17:43:00.380]                     envir = parent.frame()) 
[17:43:00.380]                   strategy(..., workers = workers, envir = envir)), 
[17:43:00.380]                     .cleanup = FALSE, .init = FALSE)
[17:43:00.380]                 }
[17:43:00.380]             }
[17:43:00.380]         }
[17:43:00.380]     })
[17:43:00.380]     if (TRUE) {
[17:43:00.380]         base::sink(type = "output", split = FALSE)
[17:43:00.380]         if (TRUE) {
[17:43:00.380]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:00.380]         }
[17:43:00.380]         else {
[17:43:00.380]             ...future.result["stdout"] <- base::list(NULL)
[17:43:00.380]         }
[17:43:00.380]         base::close(...future.stdout)
[17:43:00.380]         ...future.stdout <- NULL
[17:43:00.380]     }
[17:43:00.380]     ...future.result$conditions <- ...future.conditions
[17:43:00.380]     ...future.result$finished <- base::Sys.time()
[17:43:00.380]     ...future.result
[17:43:00.380] }
[17:43:00.383] MultisessionFuture started
[17:43:00.383] - Launch lazy future ... done
[17:43:00.383] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:43:00.384] result() for ClusterFuture ...
[17:43:00.384] receiveMessageFromWorker() for ClusterFuture ...
[17:43:00.384] - Validating connection of MultisessionFuture
[17:43:00.486] - received message: FutureResult
[17:43:00.486] - Received FutureResult
[17:43:00.487] - Erased future from FutureRegistry
[17:43:00.487] result() for ClusterFuture ...
[17:43:00.487] - result already collected: FutureResult
[17:43:00.487] result() for ClusterFuture ... done
[17:43:00.487] - Garbage collecting worker ...
[17:43:00.726] - Garbage collecting worker ... done
[17:43:00.726] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:00.726] result() for ClusterFuture ... done
[17:43:00.726] result() for ClusterFuture ...
[17:43:00.726] - result already collected: FutureResult
[17:43:00.727] result() for ClusterFuture ... done
> str(v)
 int [1:10000000] 0 0 0 0 0 0 0 0 0 0 ...
> 
> f <- future({ gc() })
[17:43:00.727] getGlobalsAndPackages() ...
[17:43:00.727] Searching for globals...
[17:43:00.728] - globals found: [2] ‘{’, ‘gc’
[17:43:00.728] Searching for globals ... DONE
[17:43:00.728] Resolving globals: FALSE
[17:43:00.729] 
[17:43:00.729] 
[17:43:00.729] getGlobalsAndPackages() ... DONE
[17:43:00.729] run() for ‘Future’ ...
[17:43:00.729] - state: ‘created’
[17:43:00.729] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:43:00.741] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:43:00.741] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:43:00.741]   - Field: ‘node’
[17:43:00.741]   - Field: ‘label’
[17:43:00.741]   - Field: ‘local’
[17:43:00.741]   - Field: ‘owner’
[17:43:00.741]   - Field: ‘envir’
[17:43:00.741]   - Field: ‘workers’
[17:43:00.742]   - Field: ‘packages’
[17:43:00.742]   - Field: ‘gc’
[17:43:00.742]   - Field: ‘conditions’
[17:43:00.742]   - Field: ‘persistent’
[17:43:00.742]   - Field: ‘expr’
[17:43:00.742]   - Field: ‘uuid’
[17:43:00.742]   - Field: ‘seed’
[17:43:00.742]   - Field: ‘version’
[17:43:00.742]   - Field: ‘result’
[17:43:00.742]   - Field: ‘asynchronous’
[17:43:00.742]   - Field: ‘calls’
[17:43:00.742]   - Field: ‘globals’
[17:43:00.743]   - Field: ‘stdout’
[17:43:00.743]   - Field: ‘earlySignal’
[17:43:00.743]   - Field: ‘lazy’
[17:43:00.743]   - Field: ‘state’
[17:43:00.743] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:43:00.743] - Launch lazy future ...
[17:43:00.743] Packages needed by the future expression (n = 0): <none>
[17:43:00.744] Packages needed by future strategies (n = 0): <none>
[17:43:00.744] {
[17:43:00.744]     {
[17:43:00.744]         {
[17:43:00.744]             ...future.startTime <- base::Sys.time()
[17:43:00.744]             {
[17:43:00.744]                 {
[17:43:00.744]                   {
[17:43:00.744]                     {
[17:43:00.744]                       base::local({
[17:43:00.744]                         has_future <- base::requireNamespace("future", 
[17:43:00.744]                           quietly = TRUE)
[17:43:00.744]                         if (has_future) {
[17:43:00.744]                           ns <- base::getNamespace("future")
[17:43:00.744]                           version <- ns[[".package"]][["version"]]
[17:43:00.744]                           if (is.null(version)) 
[17:43:00.744]                             version <- utils::packageVersion("future")
[17:43:00.744]                         }
[17:43:00.744]                         else {
[17:43:00.744]                           version <- NULL
[17:43:00.744]                         }
[17:43:00.744]                         if (!has_future || version < "1.8.0") {
[17:43:00.744]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:00.744]                             "", base::R.version$version.string), 
[17:43:00.744]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:00.744]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:00.744]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:00.744]                               "release", "version")], collapse = " "), 
[17:43:00.744]                             hostname = base::Sys.info()[["nodename"]])
[17:43:00.744]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:00.744]                             info)
[17:43:00.744]                           info <- base::paste(info, collapse = "; ")
[17:43:00.744]                           if (!has_future) {
[17:43:00.744]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:00.744]                               info)
[17:43:00.744]                           }
[17:43:00.744]                           else {
[17:43:00.744]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:00.744]                               info, version)
[17:43:00.744]                           }
[17:43:00.744]                           base::stop(msg)
[17:43:00.744]                         }
[17:43:00.744]                       })
[17:43:00.744]                     }
[17:43:00.744]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:00.744]                     base::options(mc.cores = 1L)
[17:43:00.744]                   }
[17:43:00.744]                   options(future.plan = NULL)
[17:43:00.744]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.744]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:00.744]                 }
[17:43:00.744]                 ...future.workdir <- getwd()
[17:43:00.744]             }
[17:43:00.744]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:00.744]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:00.744]         }
[17:43:00.744]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:00.744]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:00.744]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:00.744]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:00.744]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:00.744]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:00.744]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:00.744]             base::names(...future.oldOptions))
[17:43:00.744]     }
[17:43:00.744]     if (FALSE) {
[17:43:00.744]     }
[17:43:00.744]     else {
[17:43:00.744]         if (TRUE) {
[17:43:00.744]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:00.744]                 open = "w")
[17:43:00.744]         }
[17:43:00.744]         else {
[17:43:00.744]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:00.744]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:00.744]         }
[17:43:00.744]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:00.744]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:00.744]             base::sink(type = "output", split = FALSE)
[17:43:00.744]             base::close(...future.stdout)
[17:43:00.744]         }, add = TRUE)
[17:43:00.744]     }
[17:43:00.744]     ...future.frame <- base::sys.nframe()
[17:43:00.744]     ...future.conditions <- base::list()
[17:43:00.744]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:00.744]     if (FALSE) {
[17:43:00.744]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:00.744]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:00.744]     }
[17:43:00.744]     ...future.result <- base::tryCatch({
[17:43:00.744]         base::withCallingHandlers({
[17:43:00.744]             ...future.value <- base::withVisible(base::local({
[17:43:00.744]                 ...future.makeSendCondition <- local({
[17:43:00.744]                   sendCondition <- NULL
[17:43:00.744]                   function(frame = 1L) {
[17:43:00.744]                     if (is.function(sendCondition)) 
[17:43:00.744]                       return(sendCondition)
[17:43:00.744]                     ns <- getNamespace("parallel")
[17:43:00.744]                     if (exists("sendData", mode = "function", 
[17:43:00.744]                       envir = ns)) {
[17:43:00.744]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:00.744]                         envir = ns)
[17:43:00.744]                       envir <- sys.frame(frame)
[17:43:00.744]                       master <- NULL
[17:43:00.744]                       while (!identical(envir, .GlobalEnv) && 
[17:43:00.744]                         !identical(envir, emptyenv())) {
[17:43:00.744]                         if (exists("master", mode = "list", envir = envir, 
[17:43:00.744]                           inherits = FALSE)) {
[17:43:00.744]                           master <- get("master", mode = "list", 
[17:43:00.744]                             envir = envir, inherits = FALSE)
[17:43:00.744]                           if (inherits(master, c("SOCKnode", 
[17:43:00.744]                             "SOCK0node"))) {
[17:43:00.744]                             sendCondition <<- function(cond) {
[17:43:00.744]                               data <- list(type = "VALUE", value = cond, 
[17:43:00.744]                                 success = TRUE)
[17:43:00.744]                               parallel_sendData(master, data)
[17:43:00.744]                             }
[17:43:00.744]                             return(sendCondition)
[17:43:00.744]                           }
[17:43:00.744]                         }
[17:43:00.744]                         frame <- frame + 1L
[17:43:00.744]                         envir <- sys.frame(frame)
[17:43:00.744]                       }
[17:43:00.744]                     }
[17:43:00.744]                     sendCondition <<- function(cond) NULL
[17:43:00.744]                   }
[17:43:00.744]                 })
[17:43:00.744]                 withCallingHandlers({
[17:43:00.744]                   {
[17:43:00.744]                     gc()
[17:43:00.744]                   }
[17:43:00.744]                 }, immediateCondition = function(cond) {
[17:43:00.744]                   sendCondition <- ...future.makeSendCondition()
[17:43:00.744]                   sendCondition(cond)
[17:43:00.744]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.744]                   {
[17:43:00.744]                     inherits <- base::inherits
[17:43:00.744]                     invokeRestart <- base::invokeRestart
[17:43:00.744]                     is.null <- base::is.null
[17:43:00.744]                     muffled <- FALSE
[17:43:00.744]                     if (inherits(cond, "message")) {
[17:43:00.744]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:00.744]                       if (muffled) 
[17:43:00.744]                         invokeRestart("muffleMessage")
[17:43:00.744]                     }
[17:43:00.744]                     else if (inherits(cond, "warning")) {
[17:43:00.744]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:00.744]                       if (muffled) 
[17:43:00.744]                         invokeRestart("muffleWarning")
[17:43:00.744]                     }
[17:43:00.744]                     else if (inherits(cond, "condition")) {
[17:43:00.744]                       if (!is.null(pattern)) {
[17:43:00.744]                         computeRestarts <- base::computeRestarts
[17:43:00.744]                         grepl <- base::grepl
[17:43:00.744]                         restarts <- computeRestarts(cond)
[17:43:00.744]                         for (restart in restarts) {
[17:43:00.744]                           name <- restart$name
[17:43:00.744]                           if (is.null(name)) 
[17:43:00.744]                             next
[17:43:00.744]                           if (!grepl(pattern, name)) 
[17:43:00.744]                             next
[17:43:00.744]                           invokeRestart(restart)
[17:43:00.744]                           muffled <- TRUE
[17:43:00.744]                           break
[17:43:00.744]                         }
[17:43:00.744]                       }
[17:43:00.744]                     }
[17:43:00.744]                     invisible(muffled)
[17:43:00.744]                   }
[17:43:00.744]                   muffleCondition(cond)
[17:43:00.744]                 })
[17:43:00.744]             }))
[17:43:00.744]             future::FutureResult(value = ...future.value$value, 
[17:43:00.744]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.744]                   ...future.rng), globalenv = if (FALSE) 
[17:43:00.744]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:00.744]                     ...future.globalenv.names))
[17:43:00.744]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:00.744]         }, condition = base::local({
[17:43:00.744]             c <- base::c
[17:43:00.744]             inherits <- base::inherits
[17:43:00.744]             invokeRestart <- base::invokeRestart
[17:43:00.744]             length <- base::length
[17:43:00.744]             list <- base::list
[17:43:00.744]             seq.int <- base::seq.int
[17:43:00.744]             signalCondition <- base::signalCondition
[17:43:00.744]             sys.calls <- base::sys.calls
[17:43:00.744]             `[[` <- base::`[[`
[17:43:00.744]             `+` <- base::`+`
[17:43:00.744]             `<<-` <- base::`<<-`
[17:43:00.744]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:00.744]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:00.744]                   3L)]
[17:43:00.744]             }
[17:43:00.744]             function(cond) {
[17:43:00.744]                 is_error <- inherits(cond, "error")
[17:43:00.744]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:00.744]                   NULL)
[17:43:00.744]                 if (is_error) {
[17:43:00.744]                   sessionInformation <- function() {
[17:43:00.744]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:00.744]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:00.744]                       search = base::search(), system = base::Sys.info())
[17:43:00.744]                   }
[17:43:00.744]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.744]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:00.744]                     cond$call), session = sessionInformation(), 
[17:43:00.744]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:00.744]                   signalCondition(cond)
[17:43:00.744]                 }
[17:43:00.744]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:00.744]                 "immediateCondition"))) {
[17:43:00.744]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:00.744]                   ...future.conditions[[length(...future.conditions) + 
[17:43:00.744]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:00.744]                   if (TRUE && !signal) {
[17:43:00.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.744]                     {
[17:43:00.744]                       inherits <- base::inherits
[17:43:00.744]                       invokeRestart <- base::invokeRestart
[17:43:00.744]                       is.null <- base::is.null
[17:43:00.744]                       muffled <- FALSE
[17:43:00.744]                       if (inherits(cond, "message")) {
[17:43:00.744]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.744]                         if (muffled) 
[17:43:00.744]                           invokeRestart("muffleMessage")
[17:43:00.744]                       }
[17:43:00.744]                       else if (inherits(cond, "warning")) {
[17:43:00.744]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.744]                         if (muffled) 
[17:43:00.744]                           invokeRestart("muffleWarning")
[17:43:00.744]                       }
[17:43:00.744]                       else if (inherits(cond, "condition")) {
[17:43:00.744]                         if (!is.null(pattern)) {
[17:43:00.744]                           computeRestarts <- base::computeRestarts
[17:43:00.744]                           grepl <- base::grepl
[17:43:00.744]                           restarts <- computeRestarts(cond)
[17:43:00.744]                           for (restart in restarts) {
[17:43:00.744]                             name <- restart$name
[17:43:00.744]                             if (is.null(name)) 
[17:43:00.744]                               next
[17:43:00.744]                             if (!grepl(pattern, name)) 
[17:43:00.744]                               next
[17:43:00.744]                             invokeRestart(restart)
[17:43:00.744]                             muffled <- TRUE
[17:43:00.744]                             break
[17:43:00.744]                           }
[17:43:00.744]                         }
[17:43:00.744]                       }
[17:43:00.744]                       invisible(muffled)
[17:43:00.744]                     }
[17:43:00.744]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.744]                   }
[17:43:00.744]                 }
[17:43:00.744]                 else {
[17:43:00.744]                   if (TRUE) {
[17:43:00.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:00.744]                     {
[17:43:00.744]                       inherits <- base::inherits
[17:43:00.744]                       invokeRestart <- base::invokeRestart
[17:43:00.744]                       is.null <- base::is.null
[17:43:00.744]                       muffled <- FALSE
[17:43:00.744]                       if (inherits(cond, "message")) {
[17:43:00.744]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:00.744]                         if (muffled) 
[17:43:00.744]                           invokeRestart("muffleMessage")
[17:43:00.744]                       }
[17:43:00.744]                       else if (inherits(cond, "warning")) {
[17:43:00.744]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:00.744]                         if (muffled) 
[17:43:00.744]                           invokeRestart("muffleWarning")
[17:43:00.744]                       }
[17:43:00.744]                       else if (inherits(cond, "condition")) {
[17:43:00.744]                         if (!is.null(pattern)) {
[17:43:00.744]                           computeRestarts <- base::computeRestarts
[17:43:00.744]                           grepl <- base::grepl
[17:43:00.744]                           restarts <- computeRestarts(cond)
[17:43:00.744]                           for (restart in restarts) {
[17:43:00.744]                             name <- restart$name
[17:43:00.744]                             if (is.null(name)) 
[17:43:00.744]                               next
[17:43:00.744]                             if (!grepl(pattern, name)) 
[17:43:00.744]                               next
[17:43:00.744]                             invokeRestart(restart)
[17:43:00.744]                             muffled <- TRUE
[17:43:00.744]                             break
[17:43:00.744]                           }
[17:43:00.744]                         }
[17:43:00.744]                       }
[17:43:00.744]                       invisible(muffled)
[17:43:00.744]                     }
[17:43:00.744]                     muffleCondition(cond, pattern = "^muffle")
[17:43:00.744]                   }
[17:43:00.744]                 }
[17:43:00.744]             }
[17:43:00.744]         }))
[17:43:00.744]     }, error = function(ex) {
[17:43:00.744]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:00.744]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:00.744]                 ...future.rng), started = ...future.startTime, 
[17:43:00.744]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:00.744]             version = "1.8"), class = "FutureResult")
[17:43:00.744]     }, finally = {
[17:43:00.744]         if (!identical(...future.workdir, getwd())) 
[17:43:00.744]             setwd(...future.workdir)
[17:43:00.744]         {
[17:43:00.744]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:00.744]                 ...future.oldOptions$nwarnings <- NULL
[17:43:00.744]             }
[17:43:00.744]             base::options(...future.oldOptions)
[17:43:00.744]             if (.Platform$OS.type == "windows") {
[17:43:00.744]                 old_names <- names(...future.oldEnvVars)
[17:43:00.744]                 envs <- base::Sys.getenv()
[17:43:00.744]                 names <- names(envs)
[17:43:00.744]                 common <- intersect(names, old_names)
[17:43:00.744]                 added <- setdiff(names, old_names)
[17:43:00.744]                 removed <- setdiff(old_names, names)
[17:43:00.744]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:00.744]                   envs[common]]
[17:43:00.744]                 NAMES <- toupper(changed)
[17:43:00.744]                 args <- list()
[17:43:00.744]                 for (kk in seq_along(NAMES)) {
[17:43:00.744]                   name <- changed[[kk]]
[17:43:00.744]                   NAME <- NAMES[[kk]]
[17:43:00.744]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.744]                     next
[17:43:00.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.744]                 }
[17:43:00.744]                 NAMES <- toupper(added)
[17:43:00.744]                 for (kk in seq_along(NAMES)) {
[17:43:00.744]                   name <- added[[kk]]
[17:43:00.744]                   NAME <- NAMES[[kk]]
[17:43:00.744]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.744]                     next
[17:43:00.744]                   args[[name]] <- ""
[17:43:00.744]                 }
[17:43:00.744]                 NAMES <- toupper(removed)
[17:43:00.744]                 for (kk in seq_along(NAMES)) {
[17:43:00.744]                   name <- removed[[kk]]
[17:43:00.744]                   NAME <- NAMES[[kk]]
[17:43:00.744]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:00.744]                     next
[17:43:00.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:00.744]                 }
[17:43:00.744]                 if (length(args) > 0) 
[17:43:00.744]                   base::do.call(base::Sys.setenv, args = args)
[17:43:00.744]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:00.744]             }
[17:43:00.744]             else {
[17:43:00.744]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:00.744]             }
[17:43:00.744]             {
[17:43:00.744]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:00.744]                   0L) {
[17:43:00.744]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:00.744]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:00.744]                   base::options(opts)
[17:43:00.744]                 }
[17:43:00.744]                 {
[17:43:00.744]                   {
[17:43:00.744]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:00.744]                     NULL
[17:43:00.744]                   }
[17:43:00.744]                   options(future.plan = NULL)
[17:43:00.744]                   if (is.na(NA_character_)) 
[17:43:00.744]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:00.744]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:00.744]                   future::plan(list(function (..., workers = 2L, 
[17:43:00.744]                     envir = parent.frame()) 
[17:43:00.744]                   strategy(..., workers = workers, envir = envir)), 
[17:43:00.744]                     .cleanup = FALSE, .init = FALSE)
[17:43:00.744]                 }
[17:43:00.744]             }
[17:43:00.744]         }
[17:43:00.744]     })
[17:43:00.744]     if (TRUE) {
[17:43:00.744]         base::sink(type = "output", split = FALSE)
[17:43:00.744]         if (TRUE) {
[17:43:00.744]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:00.744]         }
[17:43:00.744]         else {
[17:43:00.744]             ...future.result["stdout"] <- base::list(NULL)
[17:43:00.744]         }
[17:43:00.744]         base::close(...future.stdout)
[17:43:00.744]         ...future.stdout <- NULL
[17:43:00.744]     }
[17:43:00.744]     ...future.result$conditions <- ...future.conditions
[17:43:00.744]     ...future.result$finished <- base::Sys.time()
[17:43:00.744]     ...future.result
[17:43:00.744] }
[17:43:00.747] MultisessionFuture started
[17:43:00.747] - Launch lazy future ... done
[17:43:00.747] run() for ‘MultisessionFuture’ ... done
> v <- value(f)
[17:43:00.747] result() for ClusterFuture ...
[17:43:00.747] receiveMessageFromWorker() for ClusterFuture ...
[17:43:00.748] - Validating connection of MultisessionFuture
[17:43:00.813] - received message: FutureResult
[17:43:00.814] - Received FutureResult
[17:43:00.814] - Erased future from FutureRegistry
[17:43:00.814] result() for ClusterFuture ...
[17:43:00.814] - result already collected: FutureResult
[17:43:00.814] result() for ClusterFuture ... done
[17:43:00.814] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:00.814] result() for ClusterFuture ... done
[17:43:00.814] result() for ClusterFuture ...
[17:43:00.814] - result already collected: FutureResult
[17:43:00.814] result() for ClusterFuture ... done
> print(v)
         used (Mb) gc trigger  (Mb) max used  (Mb)
Ncells 395336 21.2     836944  44.7   664120  35.5
Vcells 705077  5.4   13458036 102.7 15781487 120.5
> 
> message("*** multisession(..., gc = TRUE) ... TRUE")
*** multisession(..., gc = TRUE) ... TRUE
> 
> 
> message("*** multisession(...) - stopping with plan() change ...")
*** multisession(...) - stopping with plan() change ...
>   
> plan(multisession, workers = 2L)
[17:43:00.815] plan(): Setting new future strategy stack:
[17:43:00.815] List of future strategies:
[17:43:00.815] 1. multisession:
[17:43:00.815]    - args: function (..., workers = 2L, envir = parent.frame())
[17:43:00.815]    - tweaked: TRUE
[17:43:00.815]    - call: plan(multisession, workers = 2L)
[17:43:00.816] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:43:00.816] multisession:
[17:43:00.816] - args: function (..., workers = 2L, envir = parent.frame())
[17:43:00.816] - tweaked: TRUE
[17:43:00.816] - call: plan(multisession, workers = 2L)
[17:43:00.817] getGlobalsAndPackages() ...
[17:43:00.817] Not searching for globals
[17:43:00.817] - globals: [0] <none>
[17:43:00.817] getGlobalsAndPackages() ... DONE
[17:43:00.818] [local output] makeClusterPSOCK() ...
[17:43:00.818] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:43:00.819] [local output] Base port: 11556
[17:43:00.819] [local output] Getting setup options for 2 cluster nodes ...
[17:43:00.819] [local output]  - Node 1 of 2 ...
[17:43:00.820] [local output] localMachine=TRUE => revtunnel=FALSE

[17:43:00.821] [local output] Rscript port: 11556

[17:43:00.821] [local output]  - Node 2 of 2 ...
[17:43:00.822] [local output] localMachine=TRUE => revtunnel=FALSE

[17:43:00.823] [local output] Rscript port: 11556

[17:43:00.823] [local output] Getting setup options for 2 cluster nodes ... done
[17:43:00.823] [local output]  - Parallel setup requested for some PSOCK nodes
[17:43:00.824] [local output] Setting up PSOCK nodes in parallel
[17:43:00.824] List of 36
[17:43:00.824]  $ worker          : chr "localhost"
[17:43:00.824]   ..- attr(*, "localhost")= logi TRUE
[17:43:00.824]  $ master          : chr "localhost"
[17:43:00.824]  $ port            : int 11556
[17:43:00.824]  $ connectTimeout  : num 120
[17:43:00.824]  $ timeout         : num 2592000
[17:43:00.824]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:43:00.824]  $ homogeneous     : logi TRUE
[17:43:00.824]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:43:00.824]  $ rscript_envs    : NULL
[17:43:00.824]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:43:00.824]  $ rscript_startup : NULL
[17:43:00.824]  $ rscript_sh      : chr "sh"
[17:43:00.824]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:43:00.824]  $ methods         : logi TRUE
[17:43:00.824]  $ socketOptions   : chr "no-delay"
[17:43:00.824]  $ useXDR          : logi FALSE
[17:43:00.824]  $ outfile         : chr "/dev/null"
[17:43:00.824]  $ renice          : int NA
[17:43:00.824]  $ rshcmd          : NULL
[17:43:00.824]  $ user            : chr(0) 
[17:43:00.824]  $ revtunnel       : logi FALSE
[17:43:00.824]  $ rshlogfile      : NULL
[17:43:00.824]  $ rshopts         : chr(0) 
[17:43:00.824]  $ rank            : int 1
[17:43:00.824]  $ manual          : logi FALSE
[17:43:00.824]  $ dryrun          : logi FALSE
[17:43:00.824]  $ quiet           : logi FALSE
[17:43:00.824]  $ setup_strategy  : chr "parallel"
[17:43:00.824]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:43:00.824]  $ pidfile         : chr "/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded22738f0f.pid"
[17:43:00.824]  $ rshcmd_label    : NULL
[17:43:00.824]  $ rsh_call        : NULL
[17:43:00.824]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:43:00.824]  $ localMachine    : logi TRUE
[17:43:00.824]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:43:00.824]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:43:00.824]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:43:00.824]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:43:00.824]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:43:00.824]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:43:00.824]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:43:00.824]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:43:00.824]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:43:00.824]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:43:00.824]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:43:00.824]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:43:00.824]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:43:00.824]  $ arguments       :List of 28
[17:43:00.824]   ..$ worker          : chr "localhost"
[17:43:00.824]   ..$ master          : NULL
[17:43:00.824]   ..$ port            : int 11556
[17:43:00.824]   ..$ connectTimeout  : num 120
[17:43:00.824]   ..$ timeout         : num 2592000
[17:43:00.824]   ..$ rscript         : NULL
[17:43:00.824]   ..$ homogeneous     : NULL
[17:43:00.824]   ..$ rscript_args    : NULL
[17:43:00.824]   ..$ rscript_envs    : NULL
[17:43:00.824]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:43:00.824]   ..$ rscript_startup : NULL
[17:43:00.824]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:43:00.824]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:43:00.824]   ..$ methods         : logi TRUE
[17:43:00.824]   ..$ socketOptions   : chr "no-delay"
[17:43:00.824]   ..$ useXDR          : logi FALSE
[17:43:00.824]   ..$ outfile         : chr "/dev/null"
[17:43:00.824]   ..$ renice          : int NA
[17:43:00.824]   ..$ rshcmd          : NULL
[17:43:00.824]   ..$ user            : NULL
[17:43:00.824]   ..$ revtunnel       : logi NA
[17:43:00.824]   ..$ rshlogfile      : NULL
[17:43:00.824]   ..$ rshopts         : NULL
[17:43:00.824]   ..$ rank            : int 1
[17:43:00.824]   ..$ manual          : logi FALSE
[17:43:00.824]   ..$ dryrun          : logi FALSE
[17:43:00.824]   ..$ quiet           : logi FALSE
[17:43:00.824]   ..$ setup_strategy  : chr "parallel"
[17:43:00.824]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:43:00.846] [local output] System call to launch all workers:
[17:43:00.846] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8tFhiy/worker.rank=1.parallelly.parent=48621.bded22738f0f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11556 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:43:00.846] [local output] Starting PSOCK main server
[17:43:00.848] [local output] Workers launched
[17:43:00.848] [local output] Waiting for workers to connect back
[17:43:00.848]  - [local output] 0 workers out of 2 ready
[17:43:01.090]  - [local output] 0 workers out of 2 ready
[17:43:01.091]  - [local output] 1 workers out of 2 ready
[17:43:01.100]  - [local output] 1 workers out of 2 ready
[17:43:01.101]  - [local output] 2 workers out of 2 ready
[17:43:01.101] [local output] Launching of workers completed
[17:43:01.101] [local output] Collecting session information from workers
[17:43:01.102] [local output]  - Worker #1 of 2
[17:43:01.102] [local output]  - Worker #2 of 2
[17:43:01.102] [local output] makeClusterPSOCK() ... done
[17:43:01.114] Packages needed by the future expression (n = 0): <none>
[17:43:01.114] Packages needed by future strategies (n = 0): <none>
[17:43:01.114] {
[17:43:01.114]     {
[17:43:01.114]         {
[17:43:01.114]             ...future.startTime <- base::Sys.time()
[17:43:01.114]             {
[17:43:01.114]                 {
[17:43:01.114]                   {
[17:43:01.114]                     {
[17:43:01.114]                       base::local({
[17:43:01.114]                         has_future <- base::requireNamespace("future", 
[17:43:01.114]                           quietly = TRUE)
[17:43:01.114]                         if (has_future) {
[17:43:01.114]                           ns <- base::getNamespace("future")
[17:43:01.114]                           version <- ns[[".package"]][["version"]]
[17:43:01.114]                           if (is.null(version)) 
[17:43:01.114]                             version <- utils::packageVersion("future")
[17:43:01.114]                         }
[17:43:01.114]                         else {
[17:43:01.114]                           version <- NULL
[17:43:01.114]                         }
[17:43:01.114]                         if (!has_future || version < "1.8.0") {
[17:43:01.114]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:01.114]                             "", base::R.version$version.string), 
[17:43:01.114]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:01.114]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:01.114]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:01.114]                               "release", "version")], collapse = " "), 
[17:43:01.114]                             hostname = base::Sys.info()[["nodename"]])
[17:43:01.114]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:01.114]                             info)
[17:43:01.114]                           info <- base::paste(info, collapse = "; ")
[17:43:01.114]                           if (!has_future) {
[17:43:01.114]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:01.114]                               info)
[17:43:01.114]                           }
[17:43:01.114]                           else {
[17:43:01.114]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:01.114]                               info, version)
[17:43:01.114]                           }
[17:43:01.114]                           base::stop(msg)
[17:43:01.114]                         }
[17:43:01.114]                       })
[17:43:01.114]                     }
[17:43:01.114]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:01.114]                     base::options(mc.cores = 1L)
[17:43:01.114]                   }
[17:43:01.114]                   options(future.plan = NULL)
[17:43:01.114]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:01.114]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:01.114]                 }
[17:43:01.114]                 ...future.workdir <- getwd()
[17:43:01.114]             }
[17:43:01.114]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:01.114]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:01.114]         }
[17:43:01.114]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:01.114]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:01.114]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:01.114]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:01.114]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:01.114]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:01.114]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:01.114]             base::names(...future.oldOptions))
[17:43:01.114]     }
[17:43:01.114]     if (FALSE) {
[17:43:01.114]     }
[17:43:01.114]     else {
[17:43:01.114]         if (TRUE) {
[17:43:01.114]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:01.114]                 open = "w")
[17:43:01.114]         }
[17:43:01.114]         else {
[17:43:01.114]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:01.114]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:01.114]         }
[17:43:01.114]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:01.114]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:01.114]             base::sink(type = "output", split = FALSE)
[17:43:01.114]             base::close(...future.stdout)
[17:43:01.114]         }, add = TRUE)
[17:43:01.114]     }
[17:43:01.114]     ...future.frame <- base::sys.nframe()
[17:43:01.114]     ...future.conditions <- base::list()
[17:43:01.114]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:01.114]     if (FALSE) {
[17:43:01.114]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:01.114]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:01.114]     }
[17:43:01.114]     ...future.result <- base::tryCatch({
[17:43:01.114]         base::withCallingHandlers({
[17:43:01.114]             ...future.value <- base::withVisible(base::local({
[17:43:01.114]                 ...future.makeSendCondition <- local({
[17:43:01.114]                   sendCondition <- NULL
[17:43:01.114]                   function(frame = 1L) {
[17:43:01.114]                     if (is.function(sendCondition)) 
[17:43:01.114]                       return(sendCondition)
[17:43:01.114]                     ns <- getNamespace("parallel")
[17:43:01.114]                     if (exists("sendData", mode = "function", 
[17:43:01.114]                       envir = ns)) {
[17:43:01.114]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:01.114]                         envir = ns)
[17:43:01.114]                       envir <- sys.frame(frame)
[17:43:01.114]                       master <- NULL
[17:43:01.114]                       while (!identical(envir, .GlobalEnv) && 
[17:43:01.114]                         !identical(envir, emptyenv())) {
[17:43:01.114]                         if (exists("master", mode = "list", envir = envir, 
[17:43:01.114]                           inherits = FALSE)) {
[17:43:01.114]                           master <- get("master", mode = "list", 
[17:43:01.114]                             envir = envir, inherits = FALSE)
[17:43:01.114]                           if (inherits(master, c("SOCKnode", 
[17:43:01.114]                             "SOCK0node"))) {
[17:43:01.114]                             sendCondition <<- function(cond) {
[17:43:01.114]                               data <- list(type = "VALUE", value = cond, 
[17:43:01.114]                                 success = TRUE)
[17:43:01.114]                               parallel_sendData(master, data)
[17:43:01.114]                             }
[17:43:01.114]                             return(sendCondition)
[17:43:01.114]                           }
[17:43:01.114]                         }
[17:43:01.114]                         frame <- frame + 1L
[17:43:01.114]                         envir <- sys.frame(frame)
[17:43:01.114]                       }
[17:43:01.114]                     }
[17:43:01.114]                     sendCondition <<- function(cond) NULL
[17:43:01.114]                   }
[17:43:01.114]                 })
[17:43:01.114]                 withCallingHandlers({
[17:43:01.114]                   NA
[17:43:01.114]                 }, immediateCondition = function(cond) {
[17:43:01.114]                   sendCondition <- ...future.makeSendCondition()
[17:43:01.114]                   sendCondition(cond)
[17:43:01.114]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:01.114]                   {
[17:43:01.114]                     inherits <- base::inherits
[17:43:01.114]                     invokeRestart <- base::invokeRestart
[17:43:01.114]                     is.null <- base::is.null
[17:43:01.114]                     muffled <- FALSE
[17:43:01.114]                     if (inherits(cond, "message")) {
[17:43:01.114]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:01.114]                       if (muffled) 
[17:43:01.114]                         invokeRestart("muffleMessage")
[17:43:01.114]                     }
[17:43:01.114]                     else if (inherits(cond, "warning")) {
[17:43:01.114]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:01.114]                       if (muffled) 
[17:43:01.114]                         invokeRestart("muffleWarning")
[17:43:01.114]                     }
[17:43:01.114]                     else if (inherits(cond, "condition")) {
[17:43:01.114]                       if (!is.null(pattern)) {
[17:43:01.114]                         computeRestarts <- base::computeRestarts
[17:43:01.114]                         grepl <- base::grepl
[17:43:01.114]                         restarts <- computeRestarts(cond)
[17:43:01.114]                         for (restart in restarts) {
[17:43:01.114]                           name <- restart$name
[17:43:01.114]                           if (is.null(name)) 
[17:43:01.114]                             next
[17:43:01.114]                           if (!grepl(pattern, name)) 
[17:43:01.114]                             next
[17:43:01.114]                           invokeRestart(restart)
[17:43:01.114]                           muffled <- TRUE
[17:43:01.114]                           break
[17:43:01.114]                         }
[17:43:01.114]                       }
[17:43:01.114]                     }
[17:43:01.114]                     invisible(muffled)
[17:43:01.114]                   }
[17:43:01.114]                   muffleCondition(cond)
[17:43:01.114]                 })
[17:43:01.114]             }))
[17:43:01.114]             future::FutureResult(value = ...future.value$value, 
[17:43:01.114]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:01.114]                   ...future.rng), globalenv = if (FALSE) 
[17:43:01.114]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:01.114]                     ...future.globalenv.names))
[17:43:01.114]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:01.114]         }, condition = base::local({
[17:43:01.114]             c <- base::c
[17:43:01.114]             inherits <- base::inherits
[17:43:01.114]             invokeRestart <- base::invokeRestart
[17:43:01.114]             length <- base::length
[17:43:01.114]             list <- base::list
[17:43:01.114]             seq.int <- base::seq.int
[17:43:01.114]             signalCondition <- base::signalCondition
[17:43:01.114]             sys.calls <- base::sys.calls
[17:43:01.114]             `[[` <- base::`[[`
[17:43:01.114]             `+` <- base::`+`
[17:43:01.114]             `<<-` <- base::`<<-`
[17:43:01.114]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:01.114]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:01.114]                   3L)]
[17:43:01.114]             }
[17:43:01.114]             function(cond) {
[17:43:01.114]                 is_error <- inherits(cond, "error")
[17:43:01.114]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:01.114]                   NULL)
[17:43:01.114]                 if (is_error) {
[17:43:01.114]                   sessionInformation <- function() {
[17:43:01.114]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:01.114]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:01.114]                       search = base::search(), system = base::Sys.info())
[17:43:01.114]                   }
[17:43:01.114]                   ...future.conditions[[length(...future.conditions) + 
[17:43:01.114]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:01.114]                     cond$call), session = sessionInformation(), 
[17:43:01.114]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:01.114]                   signalCondition(cond)
[17:43:01.114]                 }
[17:43:01.114]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:01.114]                 "immediateCondition"))) {
[17:43:01.114]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:01.114]                   ...future.conditions[[length(...future.conditions) + 
[17:43:01.114]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:01.114]                   if (TRUE && !signal) {
[17:43:01.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:01.114]                     {
[17:43:01.114]                       inherits <- base::inherits
[17:43:01.114]                       invokeRestart <- base::invokeRestart
[17:43:01.114]                       is.null <- base::is.null
[17:43:01.114]                       muffled <- FALSE
[17:43:01.114]                       if (inherits(cond, "message")) {
[17:43:01.114]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:01.114]                         if (muffled) 
[17:43:01.114]                           invokeRestart("muffleMessage")
[17:43:01.114]                       }
[17:43:01.114]                       else if (inherits(cond, "warning")) {
[17:43:01.114]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:01.114]                         if (muffled) 
[17:43:01.114]                           invokeRestart("muffleWarning")
[17:43:01.114]                       }
[17:43:01.114]                       else if (inherits(cond, "condition")) {
[17:43:01.114]                         if (!is.null(pattern)) {
[17:43:01.114]                           computeRestarts <- base::computeRestarts
[17:43:01.114]                           grepl <- base::grepl
[17:43:01.114]                           restarts <- computeRestarts(cond)
[17:43:01.114]                           for (restart in restarts) {
[17:43:01.114]                             name <- restart$name
[17:43:01.114]                             if (is.null(name)) 
[17:43:01.114]                               next
[17:43:01.114]                             if (!grepl(pattern, name)) 
[17:43:01.114]                               next
[17:43:01.114]                             invokeRestart(restart)
[17:43:01.114]                             muffled <- TRUE
[17:43:01.114]                             break
[17:43:01.114]                           }
[17:43:01.114]                         }
[17:43:01.114]                       }
[17:43:01.114]                       invisible(muffled)
[17:43:01.114]                     }
[17:43:01.114]                     muffleCondition(cond, pattern = "^muffle")
[17:43:01.114]                   }
[17:43:01.114]                 }
[17:43:01.114]                 else {
[17:43:01.114]                   if (TRUE) {
[17:43:01.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:01.114]                     {
[17:43:01.114]                       inherits <- base::inherits
[17:43:01.114]                       invokeRestart <- base::invokeRestart
[17:43:01.114]                       is.null <- base::is.null
[17:43:01.114]                       muffled <- FALSE
[17:43:01.114]                       if (inherits(cond, "message")) {
[17:43:01.114]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:01.114]                         if (muffled) 
[17:43:01.114]                           invokeRestart("muffleMessage")
[17:43:01.114]                       }
[17:43:01.114]                       else if (inherits(cond, "warning")) {
[17:43:01.114]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:01.114]                         if (muffled) 
[17:43:01.114]                           invokeRestart("muffleWarning")
[17:43:01.114]                       }
[17:43:01.114]                       else if (inherits(cond, "condition")) {
[17:43:01.114]                         if (!is.null(pattern)) {
[17:43:01.114]                           computeRestarts <- base::computeRestarts
[17:43:01.114]                           grepl <- base::grepl
[17:43:01.114]                           restarts <- computeRestarts(cond)
[17:43:01.114]                           for (restart in restarts) {
[17:43:01.114]                             name <- restart$name
[17:43:01.114]                             if (is.null(name)) 
[17:43:01.114]                               next
[17:43:01.114]                             if (!grepl(pattern, name)) 
[17:43:01.114]                               next
[17:43:01.114]                             invokeRestart(restart)
[17:43:01.114]                             muffled <- TRUE
[17:43:01.114]                             break
[17:43:01.114]                           }
[17:43:01.114]                         }
[17:43:01.114]                       }
[17:43:01.114]                       invisible(muffled)
[17:43:01.114]                     }
[17:43:01.114]                     muffleCondition(cond, pattern = "^muffle")
[17:43:01.114]                   }
[17:43:01.114]                 }
[17:43:01.114]             }
[17:43:01.114]         }))
[17:43:01.114]     }, error = function(ex) {
[17:43:01.114]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:01.114]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:01.114]                 ...future.rng), started = ...future.startTime, 
[17:43:01.114]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:01.114]             version = "1.8"), class = "FutureResult")
[17:43:01.114]     }, finally = {
[17:43:01.114]         if (!identical(...future.workdir, getwd())) 
[17:43:01.114]             setwd(...future.workdir)
[17:43:01.114]         {
[17:43:01.114]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:01.114]                 ...future.oldOptions$nwarnings <- NULL
[17:43:01.114]             }
[17:43:01.114]             base::options(...future.oldOptions)
[17:43:01.114]             if (.Platform$OS.type == "windows") {
[17:43:01.114]                 old_names <- names(...future.oldEnvVars)
[17:43:01.114]                 envs <- base::Sys.getenv()
[17:43:01.114]                 names <- names(envs)
[17:43:01.114]                 common <- intersect(names, old_names)
[17:43:01.114]                 added <- setdiff(names, old_names)
[17:43:01.114]                 removed <- setdiff(old_names, names)
[17:43:01.114]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:01.114]                   envs[common]]
[17:43:01.114]                 NAMES <- toupper(changed)
[17:43:01.114]                 args <- list()
[17:43:01.114]                 for (kk in seq_along(NAMES)) {
[17:43:01.114]                   name <- changed[[kk]]
[17:43:01.114]                   NAME <- NAMES[[kk]]
[17:43:01.114]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:01.114]                     next
[17:43:01.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:01.114]                 }
[17:43:01.114]                 NAMES <- toupper(added)
[17:43:01.114]                 for (kk in seq_along(NAMES)) {
[17:43:01.114]                   name <- added[[kk]]
[17:43:01.114]                   NAME <- NAMES[[kk]]
[17:43:01.114]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:01.114]                     next
[17:43:01.114]                   args[[name]] <- ""
[17:43:01.114]                 }
[17:43:01.114]                 NAMES <- toupper(removed)
[17:43:01.114]                 for (kk in seq_along(NAMES)) {
[17:43:01.114]                   name <- removed[[kk]]
[17:43:01.114]                   NAME <- NAMES[[kk]]
[17:43:01.114]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:01.114]                     next
[17:43:01.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:01.114]                 }
[17:43:01.114]                 if (length(args) > 0) 
[17:43:01.114]                   base::do.call(base::Sys.setenv, args = args)
[17:43:01.114]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:01.114]             }
[17:43:01.114]             else {
[17:43:01.114]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:01.114]             }
[17:43:01.114]             {
[17:43:01.114]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:01.114]                   0L) {
[17:43:01.114]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:01.114]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:01.114]                   base::options(opts)
[17:43:01.114]                 }
[17:43:01.114]                 {
[17:43:01.114]                   {
[17:43:01.114]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:01.114]                     NULL
[17:43:01.114]                   }
[17:43:01.114]                   options(future.plan = NULL)
[17:43:01.114]                   if (is.na(NA_character_)) 
[17:43:01.114]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:01.114]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:01.114]                   future::plan(list(function (..., workers = 2L, 
[17:43:01.114]                     envir = parent.frame()) 
[17:43:01.114]                   strategy(..., workers = workers, envir = envir)), 
[17:43:01.114]                     .cleanup = FALSE, .init = FALSE)
[17:43:01.114]                 }
[17:43:01.114]             }
[17:43:01.114]         }
[17:43:01.114]     })
[17:43:01.114]     if (TRUE) {
[17:43:01.114]         base::sink(type = "output", split = FALSE)
[17:43:01.114]         if (TRUE) {
[17:43:01.114]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:01.114]         }
[17:43:01.114]         else {
[17:43:01.114]             ...future.result["stdout"] <- base::list(NULL)
[17:43:01.114]         }
[17:43:01.114]         base::close(...future.stdout)
[17:43:01.114]         ...future.stdout <- NULL
[17:43:01.114]     }
[17:43:01.114]     ...future.result$conditions <- ...future.conditions
[17:43:01.114]     ...future.result$finished <- base::Sys.time()
[17:43:01.114]     ...future.result
[17:43:01.114] }
[17:43:01.186] MultisessionFuture started
[17:43:01.186] result() for ClusterFuture ...
[17:43:01.186] receiveMessageFromWorker() for ClusterFuture ...
[17:43:01.186] - Validating connection of MultisessionFuture
[17:43:01.210] - received message: FutureResult
[17:43:01.211] - Received FutureResult
[17:43:01.211] - Erased future from FutureRegistry
[17:43:01.211] result() for ClusterFuture ...
[17:43:01.211] - result already collected: FutureResult
[17:43:01.211] result() for ClusterFuture ... done
[17:43:01.211] receiveMessageFromWorker() for ClusterFuture ... done
[17:43:01.211] result() for ClusterFuture ... done
[17:43:01.212] result() for ClusterFuture ...
[17:43:01.212] - result already collected: FutureResult
[17:43:01.212] result() for ClusterFuture ... done
[17:43:01.212] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:43:01.212] plan(): nbrOfWorkers() = 2
> f <- future(1L)
[17:43:01.212] getGlobalsAndPackages() ...
[17:43:01.212] Searching for globals...
[17:43:01.213] 
[17:43:01.213] Searching for globals ... DONE
[17:43:01.213] - globals: [0] <none>
[17:43:01.213] getGlobalsAndPackages() ... DONE
[17:43:01.213] run() for ‘Future’ ...
[17:43:01.213] - state: ‘created’
[17:43:01.213] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:43:01.224] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:43:01.225] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:43:01.225]   - Field: ‘node’
[17:43:01.225]   - Field: ‘label’
[17:43:01.225]   - Field: ‘local’
[17:43:01.225]   - Field: ‘owner’
[17:43:01.225]   - Field: ‘envir’
[17:43:01.225]   - Field: ‘workers’
[17:43:01.225]   - Field: ‘packages’
[17:43:01.225]   - Field: ‘gc’
[17:43:01.225]   - Field: ‘conditions’
[17:43:01.226]   - Field: ‘persistent’
[17:43:01.226]   - Field: ‘expr’
[17:43:01.226]   - Field: ‘uuid’
[17:43:01.226]   - Field: ‘seed’
[17:43:01.226]   - Field: ‘version’
[17:43:01.226]   - Field: ‘result’
[17:43:01.226]   - Field: ‘asynchronous’
[17:43:01.226]   - Field: ‘calls’
[17:43:01.226]   - Field: ‘globals’
[17:43:01.226]   - Field: ‘stdout’
[17:43:01.226]   - Field: ‘earlySignal’
[17:43:01.227]   - Field: ‘lazy’
[17:43:01.227]   - Field: ‘state’
[17:43:01.227] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:43:01.227] - Launch lazy future ...
[17:43:01.227] Packages needed by the future expression (n = 0): <none>
[17:43:01.227] Packages needed by future strategies (n = 0): <none>
[17:43:01.228] {
[17:43:01.228]     {
[17:43:01.228]         {
[17:43:01.228]             ...future.startTime <- base::Sys.time()
[17:43:01.228]             {
[17:43:01.228]                 {
[17:43:01.228]                   {
[17:43:01.228]                     {
[17:43:01.228]                       base::local({
[17:43:01.228]                         has_future <- base::requireNamespace("future", 
[17:43:01.228]                           quietly = TRUE)
[17:43:01.228]                         if (has_future) {
[17:43:01.228]                           ns <- base::getNamespace("future")
[17:43:01.228]                           version <- ns[[".package"]][["version"]]
[17:43:01.228]                           if (is.null(version)) 
[17:43:01.228]                             version <- utils::packageVersion("future")
[17:43:01.228]                         }
[17:43:01.228]                         else {
[17:43:01.228]                           version <- NULL
[17:43:01.228]                         }
[17:43:01.228]                         if (!has_future || version < "1.8.0") {
[17:43:01.228]                           info <- base::c(r_version = base::gsub("R version ", 
[17:43:01.228]                             "", base::R.version$version.string), 
[17:43:01.228]                             platform = base::sprintf("%s (%s-bit)", 
[17:43:01.228]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:43:01.228]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:43:01.228]                               "release", "version")], collapse = " "), 
[17:43:01.228]                             hostname = base::Sys.info()[["nodename"]])
[17:43:01.228]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:43:01.228]                             info)
[17:43:01.228]                           info <- base::paste(info, collapse = "; ")
[17:43:01.228]                           if (!has_future) {
[17:43:01.228]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:43:01.228]                               info)
[17:43:01.228]                           }
[17:43:01.228]                           else {
[17:43:01.228]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:43:01.228]                               info, version)
[17:43:01.228]                           }
[17:43:01.228]                           base::stop(msg)
[17:43:01.228]                         }
[17:43:01.228]                       })
[17:43:01.228]                     }
[17:43:01.228]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:43:01.228]                     base::options(mc.cores = 1L)
[17:43:01.228]                   }
[17:43:01.228]                   options(future.plan = NULL)
[17:43:01.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:43:01.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:43:01.228]                 }
[17:43:01.228]                 ...future.workdir <- getwd()
[17:43:01.228]             }
[17:43:01.228]             ...future.oldOptions <- base::as.list(base::.Options)
[17:43:01.228]             ...future.oldEnvVars <- base::Sys.getenv()
[17:43:01.228]         }
[17:43:01.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:43:01.228]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:43:01.228]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:43:01.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:43:01.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:43:01.228]             future.stdout.windows.reencode = NULL, width = 80L)
[17:43:01.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:43:01.228]             base::names(...future.oldOptions))
[17:43:01.228]     }
[17:43:01.228]     if (FALSE) {
[17:43:01.228]     }
[17:43:01.228]     else {
[17:43:01.228]         if (TRUE) {
[17:43:01.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:43:01.228]                 open = "w")
[17:43:01.228]         }
[17:43:01.228]         else {
[17:43:01.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:43:01.228]                 windows = "NUL", "/dev/null"), open = "w")
[17:43:01.228]         }
[17:43:01.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:43:01.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:43:01.228]             base::sink(type = "output", split = FALSE)
[17:43:01.228]             base::close(...future.stdout)
[17:43:01.228]         }, add = TRUE)
[17:43:01.228]     }
[17:43:01.228]     ...future.frame <- base::sys.nframe()
[17:43:01.228]     ...future.conditions <- base::list()
[17:43:01.228]     ...future.rng <- base::globalenv()$.Random.seed
[17:43:01.228]     if (FALSE) {
[17:43:01.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:43:01.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:43:01.228]     }
[17:43:01.228]     ...future.result <- base::tryCatch({
[17:43:01.228]         base::withCallingHandlers({
[17:43:01.228]             ...future.value <- base::withVisible(base::local({
[17:43:01.228]                 ...future.makeSendCondition <- local({
[17:43:01.228]                   sendCondition <- NULL
[17:43:01.228]                   function(frame = 1L) {
[17:43:01.228]                     if (is.function(sendCondition)) 
[17:43:01.228]                       return(sendCondition)
[17:43:01.228]                     ns <- getNamespace("parallel")
[17:43:01.228]                     if (exists("sendData", mode = "function", 
[17:43:01.228]                       envir = ns)) {
[17:43:01.228]                       parallel_sendData <- get("sendData", mode = "function", 
[17:43:01.228]                         envir = ns)
[17:43:01.228]                       envir <- sys.frame(frame)
[17:43:01.228]                       master <- NULL
[17:43:01.228]                       while (!identical(envir, .GlobalEnv) && 
[17:43:01.228]                         !identical(envir, emptyenv())) {
[17:43:01.228]                         if (exists("master", mode = "list", envir = envir, 
[17:43:01.228]                           inherits = FALSE)) {
[17:43:01.228]                           master <- get("master", mode = "list", 
[17:43:01.228]                             envir = envir, inherits = FALSE)
[17:43:01.228]                           if (inherits(master, c("SOCKnode", 
[17:43:01.228]                             "SOCK0node"))) {
[17:43:01.228]                             sendCondition <<- function(cond) {
[17:43:01.228]                               data <- list(type = "VALUE", value = cond, 
[17:43:01.228]                                 success = TRUE)
[17:43:01.228]                               parallel_sendData(master, data)
[17:43:01.228]                             }
[17:43:01.228]                             return(sendCondition)
[17:43:01.228]                           }
[17:43:01.228]                         }
[17:43:01.228]                         frame <- frame + 1L
[17:43:01.228]                         envir <- sys.frame(frame)
[17:43:01.228]                       }
[17:43:01.228]                     }
[17:43:01.228]                     sendCondition <<- function(cond) NULL
[17:43:01.228]                   }
[17:43:01.228]                 })
[17:43:01.228]                 withCallingHandlers({
[17:43:01.228]                   1L
[17:43:01.228]                 }, immediateCondition = function(cond) {
[17:43:01.228]                   sendCondition <- ...future.makeSendCondition()
[17:43:01.228]                   sendCondition(cond)
[17:43:01.228]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:01.228]                   {
[17:43:01.228]                     inherits <- base::inherits
[17:43:01.228]                     invokeRestart <- base::invokeRestart
[17:43:01.228]                     is.null <- base::is.null
[17:43:01.228]                     muffled <- FALSE
[17:43:01.228]                     if (inherits(cond, "message")) {
[17:43:01.228]                       muffled <- grepl(pattern, "muffleMessage")
[17:43:01.228]                       if (muffled) 
[17:43:01.228]                         invokeRestart("muffleMessage")
[17:43:01.228]                     }
[17:43:01.228]                     else if (inherits(cond, "warning")) {
[17:43:01.228]                       muffled <- grepl(pattern, "muffleWarning")
[17:43:01.228]                       if (muffled) 
[17:43:01.228]                         invokeRestart("muffleWarning")
[17:43:01.228]                     }
[17:43:01.228]                     else if (inherits(cond, "condition")) {
[17:43:01.228]                       if (!is.null(pattern)) {
[17:43:01.228]                         computeRestarts <- base::computeRestarts
[17:43:01.228]                         grepl <- base::grepl
[17:43:01.228]                         restarts <- computeRestarts(cond)
[17:43:01.228]                         for (restart in restarts) {
[17:43:01.228]                           name <- restart$name
[17:43:01.228]                           if (is.null(name)) 
[17:43:01.228]                             next
[17:43:01.228]                           if (!grepl(pattern, name)) 
[17:43:01.228]                             next
[17:43:01.228]                           invokeRestart(restart)
[17:43:01.228]                           muffled <- TRUE
[17:43:01.228]                           break
[17:43:01.228]                         }
[17:43:01.228]                       }
[17:43:01.228]                     }
[17:43:01.228]                     invisible(muffled)
[17:43:01.228]                   }
[17:43:01.228]                   muffleCondition(cond)
[17:43:01.228]                 })
[17:43:01.228]             }))
[17:43:01.228]             future::FutureResult(value = ...future.value$value, 
[17:43:01.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:01.228]                   ...future.rng), globalenv = if (FALSE) 
[17:43:01.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:43:01.228]                     ...future.globalenv.names))
[17:43:01.228]                 else NULL, started = ...future.startTime, version = "1.8")
[17:43:01.228]         }, condition = base::local({
[17:43:01.228]             c <- base::c
[17:43:01.228]             inherits <- base::inherits
[17:43:01.228]             invokeRestart <- base::invokeRestart
[17:43:01.228]             length <- base::length
[17:43:01.228]             list <- base::list
[17:43:01.228]             seq.int <- base::seq.int
[17:43:01.228]             signalCondition <- base::signalCondition
[17:43:01.228]             sys.calls <- base::sys.calls
[17:43:01.228]             `[[` <- base::`[[`
[17:43:01.228]             `+` <- base::`+`
[17:43:01.228]             `<<-` <- base::`<<-`
[17:43:01.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:43:01.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:43:01.228]                   3L)]
[17:43:01.228]             }
[17:43:01.228]             function(cond) {
[17:43:01.228]                 is_error <- inherits(cond, "error")
[17:43:01.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:43:01.228]                   NULL)
[17:43:01.228]                 if (is_error) {
[17:43:01.228]                   sessionInformation <- function() {
[17:43:01.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:43:01.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:43:01.228]                       search = base::search(), system = base::Sys.info())
[17:43:01.228]                   }
[17:43:01.228]                   ...future.conditions[[length(...future.conditions) + 
[17:43:01.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:43:01.228]                     cond$call), session = sessionInformation(), 
[17:43:01.228]                     timestamp = base::Sys.time(), signaled = 0L)
[17:43:01.228]                   signalCondition(cond)
[17:43:01.228]                 }
[17:43:01.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:43:01.228]                 "immediateCondition"))) {
[17:43:01.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:43:01.228]                   ...future.conditions[[length(...future.conditions) + 
[17:43:01.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:43:01.228]                   if (TRUE && !signal) {
[17:43:01.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:01.228]                     {
[17:43:01.228]                       inherits <- base::inherits
[17:43:01.228]                       invokeRestart <- base::invokeRestart
[17:43:01.228]                       is.null <- base::is.null
[17:43:01.228]                       muffled <- FALSE
[17:43:01.228]                       if (inherits(cond, "message")) {
[17:43:01.228]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:01.228]                         if (muffled) 
[17:43:01.228]                           invokeRestart("muffleMessage")
[17:43:01.228]                       }
[17:43:01.228]                       else if (inherits(cond, "warning")) {
[17:43:01.228]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:01.228]                         if (muffled) 
[17:43:01.228]                           invokeRestart("muffleWarning")
[17:43:01.228]                       }
[17:43:01.228]                       else if (inherits(cond, "condition")) {
[17:43:01.228]                         if (!is.null(pattern)) {
[17:43:01.228]                           computeRestarts <- base::computeRestarts
[17:43:01.228]                           grepl <- base::grepl
[17:43:01.228]                           restarts <- computeRestarts(cond)
[17:43:01.228]                           for (restart in restarts) {
[17:43:01.228]                             name <- restart$name
[17:43:01.228]                             if (is.null(name)) 
[17:43:01.228]                               next
[17:43:01.228]                             if (!grepl(pattern, name)) 
[17:43:01.228]                               next
[17:43:01.228]                             invokeRestart(restart)
[17:43:01.228]                             muffled <- TRUE
[17:43:01.228]                             break
[17:43:01.228]                           }
[17:43:01.228]                         }
[17:43:01.228]                       }
[17:43:01.228]                       invisible(muffled)
[17:43:01.228]                     }
[17:43:01.228]                     muffleCondition(cond, pattern = "^muffle")
[17:43:01.228]                   }
[17:43:01.228]                 }
[17:43:01.228]                 else {
[17:43:01.228]                   if (TRUE) {
[17:43:01.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:43:01.228]                     {
[17:43:01.228]                       inherits <- base::inherits
[17:43:01.228]                       invokeRestart <- base::invokeRestart
[17:43:01.228]                       is.null <- base::is.null
[17:43:01.228]                       muffled <- FALSE
[17:43:01.228]                       if (inherits(cond, "message")) {
[17:43:01.228]                         muffled <- grepl(pattern, "muffleMessage")
[17:43:01.228]                         if (muffled) 
[17:43:01.228]                           invokeRestart("muffleMessage")
[17:43:01.228]                       }
[17:43:01.228]                       else if (inherits(cond, "warning")) {
[17:43:01.228]                         muffled <- grepl(pattern, "muffleWarning")
[17:43:01.228]                         if (muffled) 
[17:43:01.228]                           invokeRestart("muffleWarning")
[17:43:01.228]                       }
[17:43:01.228]                       else if (inherits(cond, "condition")) {
[17:43:01.228]                         if (!is.null(pattern)) {
[17:43:01.228]                           computeRestarts <- base::computeRestarts
[17:43:01.228]                           grepl <- base::grepl
[17:43:01.228]                           restarts <- computeRestarts(cond)
[17:43:01.228]                           for (restart in restarts) {
[17:43:01.228]                             name <- restart$name
[17:43:01.228]                             if (is.null(name)) 
[17:43:01.228]                               next
[17:43:01.228]                             if (!grepl(pattern, name)) 
[17:43:01.228]                               next
[17:43:01.228]                             invokeRestart(restart)
[17:43:01.228]                             muffled <- TRUE
[17:43:01.228]                             break
[17:43:01.228]                           }
[17:43:01.228]                         }
[17:43:01.228]                       }
[17:43:01.228]                       invisible(muffled)
[17:43:01.228]                     }
[17:43:01.228]                     muffleCondition(cond, pattern = "^muffle")
[17:43:01.228]                   }
[17:43:01.228]                 }
[17:43:01.228]             }
[17:43:01.228]         }))
[17:43:01.228]     }, error = function(ex) {
[17:43:01.228]         base::structure(base::list(value = NULL, visible = NULL, 
[17:43:01.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:43:01.228]                 ...future.rng), started = ...future.startTime, 
[17:43:01.228]             finished = Sys.time(), session_uuid = NA_character_, 
[17:43:01.228]             version = "1.8"), class = "FutureResult")
[17:43:01.228]     }, finally = {
[17:43:01.228]         if (!identical(...future.workdir, getwd())) 
[17:43:01.228]             setwd(...future.workdir)
[17:43:01.228]         {
[17:43:01.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:43:01.228]                 ...future.oldOptions$nwarnings <- NULL
[17:43:01.228]             }
[17:43:01.228]             base::options(...future.oldOptions)
[17:43:01.228]             if (.Platform$OS.type == "windows") {
[17:43:01.228]                 old_names <- names(...future.oldEnvVars)
[17:43:01.228]                 envs <- base::Sys.getenv()
[17:43:01.228]                 names <- names(envs)
[17:43:01.228]                 common <- intersect(names, old_names)
[17:43:01.228]                 added <- setdiff(names, old_names)
[17:43:01.228]                 removed <- setdiff(old_names, names)
[17:43:01.228]                 changed <- common[...future.oldEnvVars[common] != 
[17:43:01.228]                   envs[common]]
[17:43:01.228]                 NAMES <- toupper(changed)
[17:43:01.228]                 args <- list()
[17:43:01.228]                 for (kk in seq_along(NAMES)) {
[17:43:01.228]                   name <- changed[[kk]]
[17:43:01.228]                   NAME <- NAMES[[kk]]
[17:43:01.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:01.228]                     next
[17:43:01.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:01.228]                 }
[17:43:01.228]                 NAMES <- toupper(added)
[17:43:01.228]                 for (kk in seq_along(NAMES)) {
[17:43:01.228]                   name <- added[[kk]]
[17:43:01.228]                   NAME <- NAMES[[kk]]
[17:43:01.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:01.228]                     next
[17:43:01.228]                   args[[name]] <- ""
[17:43:01.228]                 }
[17:43:01.228]                 NAMES <- toupper(removed)
[17:43:01.228]                 for (kk in seq_along(NAMES)) {
[17:43:01.228]                   name <- removed[[kk]]
[17:43:01.228]                   NAME <- NAMES[[kk]]
[17:43:01.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:43:01.228]                     next
[17:43:01.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:43:01.228]                 }
[17:43:01.228]                 if (length(args) > 0) 
[17:43:01.228]                   base::do.call(base::Sys.setenv, args = args)
[17:43:01.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:43:01.228]             }
[17:43:01.228]             else {
[17:43:01.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:43:01.228]             }
[17:43:01.228]             {
[17:43:01.228]                 if (base::length(...future.futureOptionsAdded) > 
[17:43:01.228]                   0L) {
[17:43:01.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:43:01.228]                   base::names(opts) <- ...future.futureOptionsAdded
[17:43:01.228]                   base::options(opts)
[17:43:01.228]                 }
[17:43:01.228]                 {
[17:43:01.228]                   {
[17:43:01.228]                     base::options(mc.cores = ...future.mc.cores.old)
[17:43:01.228]                     NULL
[17:43:01.228]                   }
[17:43:01.228]                   options(future.plan = NULL)
[17:43:01.228]                   if (is.na(NA_character_)) 
[17:43:01.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:43:01.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:43:01.228]                   future::plan(list(function (..., workers = 2L, 
[17:43:01.228]                     envir = parent.frame()) 
[17:43:01.228]                   strategy(..., workers = workers, envir = envir)), 
[17:43:01.228]                     .cleanup = FALSE, .init = FALSE)
[17:43:01.228]                 }
[17:43:01.228]             }
[17:43:01.228]         }
[17:43:01.228]     })
[17:43:01.228]     if (TRUE) {
[17:43:01.228]         base::sink(type = "output", split = FALSE)
[17:43:01.228]         if (TRUE) {
[17:43:01.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:43:01.228]         }
[17:43:01.228]         else {
[17:43:01.228]             ...future.result["stdout"] <- base::list(NULL)
[17:43:01.228]         }
[17:43:01.228]         base::close(...future.stdout)
[17:43:01.228]         ...future.stdout <- NULL
[17:43:01.228]     }
[17:43:01.228]     ...future.result$conditions <- ...future.conditions
[17:43:01.228]     ...future.result$finished <- base::Sys.time()
[17:43:01.228]     ...future.result
[17:43:01.228] }
[17:43:01.231] MultisessionFuture started
[17:43:01.231] - Launch lazy future ... done
[17:43:01.231] run() for ‘MultisessionFuture’ ... done
> cl <- ClusterRegistry("get")
> stopifnot(inherits(cl, "cluster"), length(cl) >= 1L)
> 
> plan(sequential)
[17:43:01.231] plan(): Setting new future strategy stack:
[17:43:01.231] List of future strategies:
[17:43:01.231] 1. sequential:
[17:43:01.231]    - args: function (..., envir = parent.frame())
[17:43:01.231]    - tweaked: FALSE
[17:43:01.231]    - call: plan(sequential)
[17:43:01.232] plan(): nbrOfWorkers() = 1
> cl <- ClusterRegistry("get")
> stopifnot(is.null(cl), length(cl) == 0L)
>   
> message("*** multisession(...) - stopping with plan() change ... DONE")
*** multisession(...) - stopping with plan() change ... DONE
> 
> message("*** multisession() ... DONE")
*** multisession() ... DONE
> 
> source("incl/end.R")
[17:43:01.233] plan(): Setting new future strategy stack:
[17:43:01.233] List of future strategies:
[17:43:01.233] 1. FutureStrategy:
[17:43:01.233]    - args: function (..., envir = parent.frame())
[17:43:01.233]    - tweaked: FALSE
[17:43:01.233]    - call: future::plan(oplan)
[17:43:01.234] plan(): nbrOfWorkers() = 1
> 
