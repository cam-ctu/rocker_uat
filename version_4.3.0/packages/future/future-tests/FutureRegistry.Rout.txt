
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:20:24.383] plan(): Setting new future strategy stack:
[13:20:24.383] List of future strategies:
[13:20:24.383] 1. sequential:
[13:20:24.383]    - args: function (..., envir = parent.frame())
[13:20:24.383]    - tweaked: FALSE
[13:20:24.383]    - call: future::plan("sequential")
[13:20:24.397] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'list') ...
list()
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'add') ...
[13:20:24.432] getGlobalsAndPackages() ...
[13:20:24.432] Searching for globals...
[13:20:24.435] - globals found: [1] ‘{’
[13:20:24.435] Searching for globals ... DONE
[13:20:24.436] Resolving globals: FALSE
[13:20:24.436] 
[13:20:24.436] 
[13:20:24.436] getGlobalsAndPackages() ... DONE
[13:20:24.437] run() for ‘Future’ ...
[13:20:24.437] - state: ‘created’
[13:20:24.437] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.438] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.438] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.438]   - Field: ‘label’
[13:20:24.438]   - Field: ‘local’
[13:20:24.438]   - Field: ‘owner’
[13:20:24.438]   - Field: ‘envir’
[13:20:24.438]   - Field: ‘packages’
[13:20:24.438]   - Field: ‘gc’
[13:20:24.439]   - Field: ‘conditions’
[13:20:24.439]   - Field: ‘expr’
[13:20:24.439]   - Field: ‘uuid’
[13:20:24.439]   - Field: ‘seed’
[13:20:24.439]   - Field: ‘version’
[13:20:24.439]   - Field: ‘result’
[13:20:24.439]   - Field: ‘asynchronous’
[13:20:24.439]   - Field: ‘calls’
[13:20:24.439]   - Field: ‘globals’
[13:20:24.439]   - Field: ‘stdout’
[13:20:24.439]   - Field: ‘earlySignal’
[13:20:24.440]   - Field: ‘lazy’
[13:20:24.440]   - Field: ‘state’
[13:20:24.440] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.440] - Launch lazy future ...
[13:20:24.441] Packages needed by the future expression (n = 0): <none>
[13:20:24.441] Packages needed by future strategies (n = 0): <none>
[13:20:24.442] {
[13:20:24.442]     {
[13:20:24.442]         {
[13:20:24.442]             ...future.startTime <- base::Sys.time()
[13:20:24.442]             {
[13:20:24.442]                 {
[13:20:24.442]                   {
[13:20:24.442]                     base::local({
[13:20:24.442]                       has_future <- base::requireNamespace("future", 
[13:20:24.442]                         quietly = TRUE)
[13:20:24.442]                       if (has_future) {
[13:20:24.442]                         ns <- base::getNamespace("future")
[13:20:24.442]                         version <- ns[[".package"]][["version"]]
[13:20:24.442]                         if (is.null(version)) 
[13:20:24.442]                           version <- utils::packageVersion("future")
[13:20:24.442]                       }
[13:20:24.442]                       else {
[13:20:24.442]                         version <- NULL
[13:20:24.442]                       }
[13:20:24.442]                       if (!has_future || version < "1.8.0") {
[13:20:24.442]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.442]                           "", base::R.version$version.string), 
[13:20:24.442]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.442]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.442]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.442]                             "release", "version")], collapse = " "), 
[13:20:24.442]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.442]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.442]                           info)
[13:20:24.442]                         info <- base::paste(info, collapse = "; ")
[13:20:24.442]                         if (!has_future) {
[13:20:24.442]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.442]                             info)
[13:20:24.442]                         }
[13:20:24.442]                         else {
[13:20:24.442]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.442]                             info, version)
[13:20:24.442]                         }
[13:20:24.442]                         base::stop(msg)
[13:20:24.442]                       }
[13:20:24.442]                     })
[13:20:24.442]                   }
[13:20:24.442]                   options(future.plan = NULL)
[13:20:24.442]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.442]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.442]                 }
[13:20:24.442]                 ...future.workdir <- getwd()
[13:20:24.442]             }
[13:20:24.442]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.442]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.442]         }
[13:20:24.442]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.442]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.442]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.442]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.442]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.442]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.442]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.442]             base::names(...future.oldOptions))
[13:20:24.442]     }
[13:20:24.442]     if (FALSE) {
[13:20:24.442]     }
[13:20:24.442]     else {
[13:20:24.442]         if (TRUE) {
[13:20:24.442]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.442]                 open = "w")
[13:20:24.442]         }
[13:20:24.442]         else {
[13:20:24.442]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.442]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.442]         }
[13:20:24.442]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.442]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.442]             base::sink(type = "output", split = FALSE)
[13:20:24.442]             base::close(...future.stdout)
[13:20:24.442]         }, add = TRUE)
[13:20:24.442]     }
[13:20:24.442]     ...future.frame <- base::sys.nframe()
[13:20:24.442]     ...future.conditions <- base::list()
[13:20:24.442]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.442]     if (FALSE) {
[13:20:24.442]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.442]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.442]     }
[13:20:24.442]     ...future.result <- base::tryCatch({
[13:20:24.442]         base::withCallingHandlers({
[13:20:24.442]             ...future.value <- base::withVisible(base::local({
[13:20:24.442]                 1
[13:20:24.442]             }))
[13:20:24.442]             future::FutureResult(value = ...future.value$value, 
[13:20:24.442]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.442]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.442]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.442]                     ...future.globalenv.names))
[13:20:24.442]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.442]         }, condition = base::local({
[13:20:24.442]             c <- base::c
[13:20:24.442]             inherits <- base::inherits
[13:20:24.442]             invokeRestart <- base::invokeRestart
[13:20:24.442]             length <- base::length
[13:20:24.442]             list <- base::list
[13:20:24.442]             seq.int <- base::seq.int
[13:20:24.442]             signalCondition <- base::signalCondition
[13:20:24.442]             sys.calls <- base::sys.calls
[13:20:24.442]             `[[` <- base::`[[`
[13:20:24.442]             `+` <- base::`+`
[13:20:24.442]             `<<-` <- base::`<<-`
[13:20:24.442]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.442]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.442]                   3L)]
[13:20:24.442]             }
[13:20:24.442]             function(cond) {
[13:20:24.442]                 is_error <- inherits(cond, "error")
[13:20:24.442]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.442]                   NULL)
[13:20:24.442]                 if (is_error) {
[13:20:24.442]                   sessionInformation <- function() {
[13:20:24.442]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.442]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.442]                       search = base::search(), system = base::Sys.info())
[13:20:24.442]                   }
[13:20:24.442]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.442]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.442]                     cond$call), session = sessionInformation(), 
[13:20:24.442]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.442]                   signalCondition(cond)
[13:20:24.442]                 }
[13:20:24.442]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.442]                 "immediateCondition"))) {
[13:20:24.442]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.442]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.442]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.442]                   if (TRUE && !signal) {
[13:20:24.442]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.442]                     {
[13:20:24.442]                       inherits <- base::inherits
[13:20:24.442]                       invokeRestart <- base::invokeRestart
[13:20:24.442]                       is.null <- base::is.null
[13:20:24.442]                       muffled <- FALSE
[13:20:24.442]                       if (inherits(cond, "message")) {
[13:20:24.442]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.442]                         if (muffled) 
[13:20:24.442]                           invokeRestart("muffleMessage")
[13:20:24.442]                       }
[13:20:24.442]                       else if (inherits(cond, "warning")) {
[13:20:24.442]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.442]                         if (muffled) 
[13:20:24.442]                           invokeRestart("muffleWarning")
[13:20:24.442]                       }
[13:20:24.442]                       else if (inherits(cond, "condition")) {
[13:20:24.442]                         if (!is.null(pattern)) {
[13:20:24.442]                           computeRestarts <- base::computeRestarts
[13:20:24.442]                           grepl <- base::grepl
[13:20:24.442]                           restarts <- computeRestarts(cond)
[13:20:24.442]                           for (restart in restarts) {
[13:20:24.442]                             name <- restart$name
[13:20:24.442]                             if (is.null(name)) 
[13:20:24.442]                               next
[13:20:24.442]                             if (!grepl(pattern, name)) 
[13:20:24.442]                               next
[13:20:24.442]                             invokeRestart(restart)
[13:20:24.442]                             muffled <- TRUE
[13:20:24.442]                             break
[13:20:24.442]                           }
[13:20:24.442]                         }
[13:20:24.442]                       }
[13:20:24.442]                       invisible(muffled)
[13:20:24.442]                     }
[13:20:24.442]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.442]                   }
[13:20:24.442]                 }
[13:20:24.442]                 else {
[13:20:24.442]                   if (TRUE) {
[13:20:24.442]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.442]                     {
[13:20:24.442]                       inherits <- base::inherits
[13:20:24.442]                       invokeRestart <- base::invokeRestart
[13:20:24.442]                       is.null <- base::is.null
[13:20:24.442]                       muffled <- FALSE
[13:20:24.442]                       if (inherits(cond, "message")) {
[13:20:24.442]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.442]                         if (muffled) 
[13:20:24.442]                           invokeRestart("muffleMessage")
[13:20:24.442]                       }
[13:20:24.442]                       else if (inherits(cond, "warning")) {
[13:20:24.442]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.442]                         if (muffled) 
[13:20:24.442]                           invokeRestart("muffleWarning")
[13:20:24.442]                       }
[13:20:24.442]                       else if (inherits(cond, "condition")) {
[13:20:24.442]                         if (!is.null(pattern)) {
[13:20:24.442]                           computeRestarts <- base::computeRestarts
[13:20:24.442]                           grepl <- base::grepl
[13:20:24.442]                           restarts <- computeRestarts(cond)
[13:20:24.442]                           for (restart in restarts) {
[13:20:24.442]                             name <- restart$name
[13:20:24.442]                             if (is.null(name)) 
[13:20:24.442]                               next
[13:20:24.442]                             if (!grepl(pattern, name)) 
[13:20:24.442]                               next
[13:20:24.442]                             invokeRestart(restart)
[13:20:24.442]                             muffled <- TRUE
[13:20:24.442]                             break
[13:20:24.442]                           }
[13:20:24.442]                         }
[13:20:24.442]                       }
[13:20:24.442]                       invisible(muffled)
[13:20:24.442]                     }
[13:20:24.442]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.442]                   }
[13:20:24.442]                 }
[13:20:24.442]             }
[13:20:24.442]         }))
[13:20:24.442]     }, error = function(ex) {
[13:20:24.442]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.442]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.442]                 ...future.rng), started = ...future.startTime, 
[13:20:24.442]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.442]             version = "1.8"), class = "FutureResult")
[13:20:24.442]     }, finally = {
[13:20:24.442]         if (!identical(...future.workdir, getwd())) 
[13:20:24.442]             setwd(...future.workdir)
[13:20:24.442]         {
[13:20:24.442]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.442]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.442]             }
[13:20:24.442]             base::options(...future.oldOptions)
[13:20:24.442]             if (.Platform$OS.type == "windows") {
[13:20:24.442]                 old_names <- names(...future.oldEnvVars)
[13:20:24.442]                 envs <- base::Sys.getenv()
[13:20:24.442]                 names <- names(envs)
[13:20:24.442]                 common <- intersect(names, old_names)
[13:20:24.442]                 added <- setdiff(names, old_names)
[13:20:24.442]                 removed <- setdiff(old_names, names)
[13:20:24.442]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.442]                   envs[common]]
[13:20:24.442]                 NAMES <- toupper(changed)
[13:20:24.442]                 args <- list()
[13:20:24.442]                 for (kk in seq_along(NAMES)) {
[13:20:24.442]                   name <- changed[[kk]]
[13:20:24.442]                   NAME <- NAMES[[kk]]
[13:20:24.442]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.442]                     next
[13:20:24.442]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.442]                 }
[13:20:24.442]                 NAMES <- toupper(added)
[13:20:24.442]                 for (kk in seq_along(NAMES)) {
[13:20:24.442]                   name <- added[[kk]]
[13:20:24.442]                   NAME <- NAMES[[kk]]
[13:20:24.442]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.442]                     next
[13:20:24.442]                   args[[name]] <- ""
[13:20:24.442]                 }
[13:20:24.442]                 NAMES <- toupper(removed)
[13:20:24.442]                 for (kk in seq_along(NAMES)) {
[13:20:24.442]                   name <- removed[[kk]]
[13:20:24.442]                   NAME <- NAMES[[kk]]
[13:20:24.442]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.442]                     next
[13:20:24.442]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.442]                 }
[13:20:24.442]                 if (length(args) > 0) 
[13:20:24.442]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.442]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.442]             }
[13:20:24.442]             else {
[13:20:24.442]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.442]             }
[13:20:24.442]             {
[13:20:24.442]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.442]                   0L) {
[13:20:24.442]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.442]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.442]                   base::options(opts)
[13:20:24.442]                 }
[13:20:24.442]                 {
[13:20:24.442]                   {
[13:20:24.442]                     NULL
[13:20:24.442]                     RNGkind("Mersenne-Twister")
[13:20:24.442]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.442]                       inherits = FALSE)
[13:20:24.442]                   }
[13:20:24.442]                   options(future.plan = NULL)
[13:20:24.442]                   if (is.na(NA_character_)) 
[13:20:24.442]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.442]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.442]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.442]                   {
[13:20:24.442]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.442]                     if (!future$lazy) 
[13:20:24.442]                       future <- run(future)
[13:20:24.442]                     invisible(future)
[13:20:24.442]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.442]                 }
[13:20:24.442]             }
[13:20:24.442]         }
[13:20:24.442]     })
[13:20:24.442]     if (TRUE) {
[13:20:24.442]         base::sink(type = "output", split = FALSE)
[13:20:24.442]         if (TRUE) {
[13:20:24.442]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.442]         }
[13:20:24.442]         else {
[13:20:24.442]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.442]         }
[13:20:24.442]         base::close(...future.stdout)
[13:20:24.442]         ...future.stdout <- NULL
[13:20:24.442]     }
[13:20:24.442]     ...future.result$conditions <- ...future.conditions
[13:20:24.442]     ...future.result$finished <- base::Sys.time()
[13:20:24.442]     ...future.result
[13:20:24.442] }
[13:20:24.443] plan(): Setting new future strategy stack:
[13:20:24.444] List of future strategies:
[13:20:24.444] 1. sequential:
[13:20:24.444]    - args: function (..., envir = parent.frame())
[13:20:24.444]    - tweaked: FALSE
[13:20:24.444]    - call: NULL
[13:20:24.444] plan(): nbrOfWorkers() = 1
[13:20:24.445] plan(): Setting new future strategy stack:
[13:20:24.445] List of future strategies:
[13:20:24.445] 1. sequential:
[13:20:24.445]    - args: function (..., envir = parent.frame())
[13:20:24.445]    - tweaked: FALSE
[13:20:24.445]    - call: future::plan("sequential")
[13:20:24.446] plan(): nbrOfWorkers() = 1
[13:20:24.446] SequentialFuture started (and completed)
[13:20:24.446] - Launch lazy future ... done
[13:20:24.446] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'remove') ...
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'list') ...
list()
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'add') ...
[13:20:24.451] getGlobalsAndPackages() ...
[13:20:24.451] Searching for globals...
[13:20:24.451] - globals found: [1] ‘{’
[13:20:24.451] Searching for globals ... DONE
[13:20:24.451] Resolving globals: FALSE
[13:20:24.452] 
[13:20:24.452] 
[13:20:24.452] getGlobalsAndPackages() ... DONE
[13:20:24.452] run() for ‘Future’ ...
[13:20:24.452] - state: ‘created’
[13:20:24.452] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.453] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.453] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.453]   - Field: ‘label’
[13:20:24.453]   - Field: ‘local’
[13:20:24.453]   - Field: ‘owner’
[13:20:24.453]   - Field: ‘envir’
[13:20:24.453]   - Field: ‘packages’
[13:20:24.453]   - Field: ‘gc’
[13:20:24.454]   - Field: ‘conditions’
[13:20:24.454]   - Field: ‘expr’
[13:20:24.454]   - Field: ‘uuid’
[13:20:24.454]   - Field: ‘seed’
[13:20:24.454]   - Field: ‘version’
[13:20:24.454]   - Field: ‘result’
[13:20:24.454]   - Field: ‘asynchronous’
[13:20:24.454]   - Field: ‘calls’
[13:20:24.454]   - Field: ‘globals’
[13:20:24.454]   - Field: ‘stdout’
[13:20:24.454]   - Field: ‘earlySignal’
[13:20:24.455]   - Field: ‘lazy’
[13:20:24.455]   - Field: ‘state’
[13:20:24.455] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.455] - Launch lazy future ...
[13:20:24.455] Packages needed by the future expression (n = 0): <none>
[13:20:24.455] Packages needed by future strategies (n = 0): <none>
[13:20:24.456] {
[13:20:24.456]     {
[13:20:24.456]         {
[13:20:24.456]             ...future.startTime <- base::Sys.time()
[13:20:24.456]             {
[13:20:24.456]                 {
[13:20:24.456]                   {
[13:20:24.456]                     base::local({
[13:20:24.456]                       has_future <- base::requireNamespace("future", 
[13:20:24.456]                         quietly = TRUE)
[13:20:24.456]                       if (has_future) {
[13:20:24.456]                         ns <- base::getNamespace("future")
[13:20:24.456]                         version <- ns[[".package"]][["version"]]
[13:20:24.456]                         if (is.null(version)) 
[13:20:24.456]                           version <- utils::packageVersion("future")
[13:20:24.456]                       }
[13:20:24.456]                       else {
[13:20:24.456]                         version <- NULL
[13:20:24.456]                       }
[13:20:24.456]                       if (!has_future || version < "1.8.0") {
[13:20:24.456]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.456]                           "", base::R.version$version.string), 
[13:20:24.456]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.456]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.456]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.456]                             "release", "version")], collapse = " "), 
[13:20:24.456]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.456]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.456]                           info)
[13:20:24.456]                         info <- base::paste(info, collapse = "; ")
[13:20:24.456]                         if (!has_future) {
[13:20:24.456]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.456]                             info)
[13:20:24.456]                         }
[13:20:24.456]                         else {
[13:20:24.456]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.456]                             info, version)
[13:20:24.456]                         }
[13:20:24.456]                         base::stop(msg)
[13:20:24.456]                       }
[13:20:24.456]                     })
[13:20:24.456]                   }
[13:20:24.456]                   options(future.plan = NULL)
[13:20:24.456]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.456]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.456]                 }
[13:20:24.456]                 ...future.workdir <- getwd()
[13:20:24.456]             }
[13:20:24.456]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.456]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.456]         }
[13:20:24.456]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.456]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.456]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.456]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.456]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.456]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.456]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.456]             base::names(...future.oldOptions))
[13:20:24.456]     }
[13:20:24.456]     if (FALSE) {
[13:20:24.456]     }
[13:20:24.456]     else {
[13:20:24.456]         if (TRUE) {
[13:20:24.456]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.456]                 open = "w")
[13:20:24.456]         }
[13:20:24.456]         else {
[13:20:24.456]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.456]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.456]         }
[13:20:24.456]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.456]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.456]             base::sink(type = "output", split = FALSE)
[13:20:24.456]             base::close(...future.stdout)
[13:20:24.456]         }, add = TRUE)
[13:20:24.456]     }
[13:20:24.456]     ...future.frame <- base::sys.nframe()
[13:20:24.456]     ...future.conditions <- base::list()
[13:20:24.456]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.456]     if (FALSE) {
[13:20:24.456]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.456]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.456]     }
[13:20:24.456]     ...future.result <- base::tryCatch({
[13:20:24.456]         base::withCallingHandlers({
[13:20:24.456]             ...future.value <- base::withVisible(base::local({
[13:20:24.456]                 2
[13:20:24.456]             }))
[13:20:24.456]             future::FutureResult(value = ...future.value$value, 
[13:20:24.456]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.456]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.456]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.456]                     ...future.globalenv.names))
[13:20:24.456]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.456]         }, condition = base::local({
[13:20:24.456]             c <- base::c
[13:20:24.456]             inherits <- base::inherits
[13:20:24.456]             invokeRestart <- base::invokeRestart
[13:20:24.456]             length <- base::length
[13:20:24.456]             list <- base::list
[13:20:24.456]             seq.int <- base::seq.int
[13:20:24.456]             signalCondition <- base::signalCondition
[13:20:24.456]             sys.calls <- base::sys.calls
[13:20:24.456]             `[[` <- base::`[[`
[13:20:24.456]             `+` <- base::`+`
[13:20:24.456]             `<<-` <- base::`<<-`
[13:20:24.456]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.456]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.456]                   3L)]
[13:20:24.456]             }
[13:20:24.456]             function(cond) {
[13:20:24.456]                 is_error <- inherits(cond, "error")
[13:20:24.456]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.456]                   NULL)
[13:20:24.456]                 if (is_error) {
[13:20:24.456]                   sessionInformation <- function() {
[13:20:24.456]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.456]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.456]                       search = base::search(), system = base::Sys.info())
[13:20:24.456]                   }
[13:20:24.456]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.456]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.456]                     cond$call), session = sessionInformation(), 
[13:20:24.456]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.456]                   signalCondition(cond)
[13:20:24.456]                 }
[13:20:24.456]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.456]                 "immediateCondition"))) {
[13:20:24.456]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.456]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.456]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.456]                   if (TRUE && !signal) {
[13:20:24.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.456]                     {
[13:20:24.456]                       inherits <- base::inherits
[13:20:24.456]                       invokeRestart <- base::invokeRestart
[13:20:24.456]                       is.null <- base::is.null
[13:20:24.456]                       muffled <- FALSE
[13:20:24.456]                       if (inherits(cond, "message")) {
[13:20:24.456]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.456]                         if (muffled) 
[13:20:24.456]                           invokeRestart("muffleMessage")
[13:20:24.456]                       }
[13:20:24.456]                       else if (inherits(cond, "warning")) {
[13:20:24.456]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.456]                         if (muffled) 
[13:20:24.456]                           invokeRestart("muffleWarning")
[13:20:24.456]                       }
[13:20:24.456]                       else if (inherits(cond, "condition")) {
[13:20:24.456]                         if (!is.null(pattern)) {
[13:20:24.456]                           computeRestarts <- base::computeRestarts
[13:20:24.456]                           grepl <- base::grepl
[13:20:24.456]                           restarts <- computeRestarts(cond)
[13:20:24.456]                           for (restart in restarts) {
[13:20:24.456]                             name <- restart$name
[13:20:24.456]                             if (is.null(name)) 
[13:20:24.456]                               next
[13:20:24.456]                             if (!grepl(pattern, name)) 
[13:20:24.456]                               next
[13:20:24.456]                             invokeRestart(restart)
[13:20:24.456]                             muffled <- TRUE
[13:20:24.456]                             break
[13:20:24.456]                           }
[13:20:24.456]                         }
[13:20:24.456]                       }
[13:20:24.456]                       invisible(muffled)
[13:20:24.456]                     }
[13:20:24.456]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.456]                   }
[13:20:24.456]                 }
[13:20:24.456]                 else {
[13:20:24.456]                   if (TRUE) {
[13:20:24.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.456]                     {
[13:20:24.456]                       inherits <- base::inherits
[13:20:24.456]                       invokeRestart <- base::invokeRestart
[13:20:24.456]                       is.null <- base::is.null
[13:20:24.456]                       muffled <- FALSE
[13:20:24.456]                       if (inherits(cond, "message")) {
[13:20:24.456]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.456]                         if (muffled) 
[13:20:24.456]                           invokeRestart("muffleMessage")
[13:20:24.456]                       }
[13:20:24.456]                       else if (inherits(cond, "warning")) {
[13:20:24.456]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.456]                         if (muffled) 
[13:20:24.456]                           invokeRestart("muffleWarning")
[13:20:24.456]                       }
[13:20:24.456]                       else if (inherits(cond, "condition")) {
[13:20:24.456]                         if (!is.null(pattern)) {
[13:20:24.456]                           computeRestarts <- base::computeRestarts
[13:20:24.456]                           grepl <- base::grepl
[13:20:24.456]                           restarts <- computeRestarts(cond)
[13:20:24.456]                           for (restart in restarts) {
[13:20:24.456]                             name <- restart$name
[13:20:24.456]                             if (is.null(name)) 
[13:20:24.456]                               next
[13:20:24.456]                             if (!grepl(pattern, name)) 
[13:20:24.456]                               next
[13:20:24.456]                             invokeRestart(restart)
[13:20:24.456]                             muffled <- TRUE
[13:20:24.456]                             break
[13:20:24.456]                           }
[13:20:24.456]                         }
[13:20:24.456]                       }
[13:20:24.456]                       invisible(muffled)
[13:20:24.456]                     }
[13:20:24.456]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.456]                   }
[13:20:24.456]                 }
[13:20:24.456]             }
[13:20:24.456]         }))
[13:20:24.456]     }, error = function(ex) {
[13:20:24.456]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.456]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.456]                 ...future.rng), started = ...future.startTime, 
[13:20:24.456]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.456]             version = "1.8"), class = "FutureResult")
[13:20:24.456]     }, finally = {
[13:20:24.456]         if (!identical(...future.workdir, getwd())) 
[13:20:24.456]             setwd(...future.workdir)
[13:20:24.456]         {
[13:20:24.456]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.456]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.456]             }
[13:20:24.456]             base::options(...future.oldOptions)
[13:20:24.456]             if (.Platform$OS.type == "windows") {
[13:20:24.456]                 old_names <- names(...future.oldEnvVars)
[13:20:24.456]                 envs <- base::Sys.getenv()
[13:20:24.456]                 names <- names(envs)
[13:20:24.456]                 common <- intersect(names, old_names)
[13:20:24.456]                 added <- setdiff(names, old_names)
[13:20:24.456]                 removed <- setdiff(old_names, names)
[13:20:24.456]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.456]                   envs[common]]
[13:20:24.456]                 NAMES <- toupper(changed)
[13:20:24.456]                 args <- list()
[13:20:24.456]                 for (kk in seq_along(NAMES)) {
[13:20:24.456]                   name <- changed[[kk]]
[13:20:24.456]                   NAME <- NAMES[[kk]]
[13:20:24.456]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.456]                     next
[13:20:24.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.456]                 }
[13:20:24.456]                 NAMES <- toupper(added)
[13:20:24.456]                 for (kk in seq_along(NAMES)) {
[13:20:24.456]                   name <- added[[kk]]
[13:20:24.456]                   NAME <- NAMES[[kk]]
[13:20:24.456]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.456]                     next
[13:20:24.456]                   args[[name]] <- ""
[13:20:24.456]                 }
[13:20:24.456]                 NAMES <- toupper(removed)
[13:20:24.456]                 for (kk in seq_along(NAMES)) {
[13:20:24.456]                   name <- removed[[kk]]
[13:20:24.456]                   NAME <- NAMES[[kk]]
[13:20:24.456]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.456]                     next
[13:20:24.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.456]                 }
[13:20:24.456]                 if (length(args) > 0) 
[13:20:24.456]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.456]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.456]             }
[13:20:24.456]             else {
[13:20:24.456]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.456]             }
[13:20:24.456]             {
[13:20:24.456]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.456]                   0L) {
[13:20:24.456]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.456]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.456]                   base::options(opts)
[13:20:24.456]                 }
[13:20:24.456]                 {
[13:20:24.456]                   {
[13:20:24.456]                     NULL
[13:20:24.456]                     RNGkind("Mersenne-Twister")
[13:20:24.456]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.456]                       inherits = FALSE)
[13:20:24.456]                   }
[13:20:24.456]                   options(future.plan = NULL)
[13:20:24.456]                   if (is.na(NA_character_)) 
[13:20:24.456]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.456]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.456]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.456]                   {
[13:20:24.456]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.456]                     if (!future$lazy) 
[13:20:24.456]                       future <- run(future)
[13:20:24.456]                     invisible(future)
[13:20:24.456]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.456]                 }
[13:20:24.456]             }
[13:20:24.456]         }
[13:20:24.456]     })
[13:20:24.456]     if (TRUE) {
[13:20:24.456]         base::sink(type = "output", split = FALSE)
[13:20:24.456]         if (TRUE) {
[13:20:24.456]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.456]         }
[13:20:24.456]         else {
[13:20:24.456]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.456]         }
[13:20:24.456]         base::close(...future.stdout)
[13:20:24.456]         ...future.stdout <- NULL
[13:20:24.456]     }
[13:20:24.456]     ...future.result$conditions <- ...future.conditions
[13:20:24.456]     ...future.result$finished <- base::Sys.time()
[13:20:24.456]     ...future.result
[13:20:24.456] }
[13:20:24.457] plan(): Setting new future strategy stack:
[13:20:24.458] List of future strategies:
[13:20:24.458] 1. sequential:
[13:20:24.458]    - args: function (..., envir = parent.frame())
[13:20:24.458]    - tweaked: FALSE
[13:20:24.458]    - call: NULL
[13:20:24.458] plan(): nbrOfWorkers() = 1
[13:20:24.459] plan(): Setting new future strategy stack:
[13:20:24.459] List of future strategies:
[13:20:24.459] 1. sequential:
[13:20:24.459]    - args: function (..., envir = parent.frame())
[13:20:24.459]    - tweaked: FALSE
[13:20:24.459]    - call: future::plan("sequential")
[13:20:24.459] plan(): nbrOfWorkers() = 1
[13:20:24.459] SequentialFuture started (and completed)
[13:20:24.459] - Launch lazy future ... done
[13:20:24.460] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'collect-first') ...
[13:20:24.463] resolved() for ‘SequentialFuture’ ...
[13:20:24.463] - state: ‘finished’
[13:20:24.463] - run: FALSE
[13:20:24.463] - result: ‘FutureResult’
[13:20:24.463] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'add') ...
[13:20:24.464] getGlobalsAndPackages() ...
[13:20:24.464] Searching for globals...
[13:20:24.465] - globals found: [1] ‘{’
[13:20:24.465] Searching for globals ... DONE
[13:20:24.465] Resolving globals: FALSE
[13:20:24.465] 
[13:20:24.465] 
[13:20:24.465] getGlobalsAndPackages() ... DONE
[13:20:24.466] run() for ‘Future’ ...
[13:20:24.466] - state: ‘created’
[13:20:24.466] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.466] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.466] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.466]   - Field: ‘label’
[13:20:24.466]   - Field: ‘local’
[13:20:24.466]   - Field: ‘owner’
[13:20:24.467]   - Field: ‘envir’
[13:20:24.467]   - Field: ‘packages’
[13:20:24.467]   - Field: ‘gc’
[13:20:24.467]   - Field: ‘conditions’
[13:20:24.467]   - Field: ‘expr’
[13:20:24.467]   - Field: ‘uuid’
[13:20:24.467]   - Field: ‘seed’
[13:20:24.467]   - Field: ‘version’
[13:20:24.467]   - Field: ‘result’
[13:20:24.467]   - Field: ‘asynchronous’
[13:20:24.468]   - Field: ‘calls’
[13:20:24.468]   - Field: ‘globals’
[13:20:24.468]   - Field: ‘stdout’
[13:20:24.468]   - Field: ‘earlySignal’
[13:20:24.468]   - Field: ‘lazy’
[13:20:24.468]   - Field: ‘state’
[13:20:24.468] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.468] - Launch lazy future ...
[13:20:24.468] Packages needed by the future expression (n = 0): <none>
[13:20:24.468] Packages needed by future strategies (n = 0): <none>
[13:20:24.469] {
[13:20:24.469]     {
[13:20:24.469]         {
[13:20:24.469]             ...future.startTime <- base::Sys.time()
[13:20:24.469]             {
[13:20:24.469]                 {
[13:20:24.469]                   {
[13:20:24.469]                     base::local({
[13:20:24.469]                       has_future <- base::requireNamespace("future", 
[13:20:24.469]                         quietly = TRUE)
[13:20:24.469]                       if (has_future) {
[13:20:24.469]                         ns <- base::getNamespace("future")
[13:20:24.469]                         version <- ns[[".package"]][["version"]]
[13:20:24.469]                         if (is.null(version)) 
[13:20:24.469]                           version <- utils::packageVersion("future")
[13:20:24.469]                       }
[13:20:24.469]                       else {
[13:20:24.469]                         version <- NULL
[13:20:24.469]                       }
[13:20:24.469]                       if (!has_future || version < "1.8.0") {
[13:20:24.469]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.469]                           "", base::R.version$version.string), 
[13:20:24.469]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.469]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.469]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.469]                             "release", "version")], collapse = " "), 
[13:20:24.469]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.469]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.469]                           info)
[13:20:24.469]                         info <- base::paste(info, collapse = "; ")
[13:20:24.469]                         if (!has_future) {
[13:20:24.469]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.469]                             info)
[13:20:24.469]                         }
[13:20:24.469]                         else {
[13:20:24.469]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.469]                             info, version)
[13:20:24.469]                         }
[13:20:24.469]                         base::stop(msg)
[13:20:24.469]                       }
[13:20:24.469]                     })
[13:20:24.469]                   }
[13:20:24.469]                   options(future.plan = NULL)
[13:20:24.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.469]                 }
[13:20:24.469]                 ...future.workdir <- getwd()
[13:20:24.469]             }
[13:20:24.469]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.469]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.469]         }
[13:20:24.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.469]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.469]             base::names(...future.oldOptions))
[13:20:24.469]     }
[13:20:24.469]     if (FALSE) {
[13:20:24.469]     }
[13:20:24.469]     else {
[13:20:24.469]         if (TRUE) {
[13:20:24.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.469]                 open = "w")
[13:20:24.469]         }
[13:20:24.469]         else {
[13:20:24.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.469]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.469]         }
[13:20:24.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.469]             base::sink(type = "output", split = FALSE)
[13:20:24.469]             base::close(...future.stdout)
[13:20:24.469]         }, add = TRUE)
[13:20:24.469]     }
[13:20:24.469]     ...future.frame <- base::sys.nframe()
[13:20:24.469]     ...future.conditions <- base::list()
[13:20:24.469]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.469]     if (FALSE) {
[13:20:24.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.469]     }
[13:20:24.469]     ...future.result <- base::tryCatch({
[13:20:24.469]         base::withCallingHandlers({
[13:20:24.469]             ...future.value <- base::withVisible(base::local({
[13:20:24.469]                 2
[13:20:24.469]             }))
[13:20:24.469]             future::FutureResult(value = ...future.value$value, 
[13:20:24.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.469]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.469]                     ...future.globalenv.names))
[13:20:24.469]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.469]         }, condition = base::local({
[13:20:24.469]             c <- base::c
[13:20:24.469]             inherits <- base::inherits
[13:20:24.469]             invokeRestart <- base::invokeRestart
[13:20:24.469]             length <- base::length
[13:20:24.469]             list <- base::list
[13:20:24.469]             seq.int <- base::seq.int
[13:20:24.469]             signalCondition <- base::signalCondition
[13:20:24.469]             sys.calls <- base::sys.calls
[13:20:24.469]             `[[` <- base::`[[`
[13:20:24.469]             `+` <- base::`+`
[13:20:24.469]             `<<-` <- base::`<<-`
[13:20:24.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.469]                   3L)]
[13:20:24.469]             }
[13:20:24.469]             function(cond) {
[13:20:24.469]                 is_error <- inherits(cond, "error")
[13:20:24.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.469]                   NULL)
[13:20:24.469]                 if (is_error) {
[13:20:24.469]                   sessionInformation <- function() {
[13:20:24.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.469]                       search = base::search(), system = base::Sys.info())
[13:20:24.469]                   }
[13:20:24.469]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.469]                     cond$call), session = sessionInformation(), 
[13:20:24.469]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.469]                   signalCondition(cond)
[13:20:24.469]                 }
[13:20:24.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.469]                 "immediateCondition"))) {
[13:20:24.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.469]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.469]                   if (TRUE && !signal) {
[13:20:24.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.469]                     {
[13:20:24.469]                       inherits <- base::inherits
[13:20:24.469]                       invokeRestart <- base::invokeRestart
[13:20:24.469]                       is.null <- base::is.null
[13:20:24.469]                       muffled <- FALSE
[13:20:24.469]                       if (inherits(cond, "message")) {
[13:20:24.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.469]                         if (muffled) 
[13:20:24.469]                           invokeRestart("muffleMessage")
[13:20:24.469]                       }
[13:20:24.469]                       else if (inherits(cond, "warning")) {
[13:20:24.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.469]                         if (muffled) 
[13:20:24.469]                           invokeRestart("muffleWarning")
[13:20:24.469]                       }
[13:20:24.469]                       else if (inherits(cond, "condition")) {
[13:20:24.469]                         if (!is.null(pattern)) {
[13:20:24.469]                           computeRestarts <- base::computeRestarts
[13:20:24.469]                           grepl <- base::grepl
[13:20:24.469]                           restarts <- computeRestarts(cond)
[13:20:24.469]                           for (restart in restarts) {
[13:20:24.469]                             name <- restart$name
[13:20:24.469]                             if (is.null(name)) 
[13:20:24.469]                               next
[13:20:24.469]                             if (!grepl(pattern, name)) 
[13:20:24.469]                               next
[13:20:24.469]                             invokeRestart(restart)
[13:20:24.469]                             muffled <- TRUE
[13:20:24.469]                             break
[13:20:24.469]                           }
[13:20:24.469]                         }
[13:20:24.469]                       }
[13:20:24.469]                       invisible(muffled)
[13:20:24.469]                     }
[13:20:24.469]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.469]                   }
[13:20:24.469]                 }
[13:20:24.469]                 else {
[13:20:24.469]                   if (TRUE) {
[13:20:24.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.469]                     {
[13:20:24.469]                       inherits <- base::inherits
[13:20:24.469]                       invokeRestart <- base::invokeRestart
[13:20:24.469]                       is.null <- base::is.null
[13:20:24.469]                       muffled <- FALSE
[13:20:24.469]                       if (inherits(cond, "message")) {
[13:20:24.469]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.469]                         if (muffled) 
[13:20:24.469]                           invokeRestart("muffleMessage")
[13:20:24.469]                       }
[13:20:24.469]                       else if (inherits(cond, "warning")) {
[13:20:24.469]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.469]                         if (muffled) 
[13:20:24.469]                           invokeRestart("muffleWarning")
[13:20:24.469]                       }
[13:20:24.469]                       else if (inherits(cond, "condition")) {
[13:20:24.469]                         if (!is.null(pattern)) {
[13:20:24.469]                           computeRestarts <- base::computeRestarts
[13:20:24.469]                           grepl <- base::grepl
[13:20:24.469]                           restarts <- computeRestarts(cond)
[13:20:24.469]                           for (restart in restarts) {
[13:20:24.469]                             name <- restart$name
[13:20:24.469]                             if (is.null(name)) 
[13:20:24.469]                               next
[13:20:24.469]                             if (!grepl(pattern, name)) 
[13:20:24.469]                               next
[13:20:24.469]                             invokeRestart(restart)
[13:20:24.469]                             muffled <- TRUE
[13:20:24.469]                             break
[13:20:24.469]                           }
[13:20:24.469]                         }
[13:20:24.469]                       }
[13:20:24.469]                       invisible(muffled)
[13:20:24.469]                     }
[13:20:24.469]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.469]                   }
[13:20:24.469]                 }
[13:20:24.469]             }
[13:20:24.469]         }))
[13:20:24.469]     }, error = function(ex) {
[13:20:24.469]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.469]                 ...future.rng), started = ...future.startTime, 
[13:20:24.469]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.469]             version = "1.8"), class = "FutureResult")
[13:20:24.469]     }, finally = {
[13:20:24.469]         if (!identical(...future.workdir, getwd())) 
[13:20:24.469]             setwd(...future.workdir)
[13:20:24.469]         {
[13:20:24.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.469]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.469]             }
[13:20:24.469]             base::options(...future.oldOptions)
[13:20:24.469]             if (.Platform$OS.type == "windows") {
[13:20:24.469]                 old_names <- names(...future.oldEnvVars)
[13:20:24.469]                 envs <- base::Sys.getenv()
[13:20:24.469]                 names <- names(envs)
[13:20:24.469]                 common <- intersect(names, old_names)
[13:20:24.469]                 added <- setdiff(names, old_names)
[13:20:24.469]                 removed <- setdiff(old_names, names)
[13:20:24.469]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.469]                   envs[common]]
[13:20:24.469]                 NAMES <- toupper(changed)
[13:20:24.469]                 args <- list()
[13:20:24.469]                 for (kk in seq_along(NAMES)) {
[13:20:24.469]                   name <- changed[[kk]]
[13:20:24.469]                   NAME <- NAMES[[kk]]
[13:20:24.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.469]                     next
[13:20:24.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.469]                 }
[13:20:24.469]                 NAMES <- toupper(added)
[13:20:24.469]                 for (kk in seq_along(NAMES)) {
[13:20:24.469]                   name <- added[[kk]]
[13:20:24.469]                   NAME <- NAMES[[kk]]
[13:20:24.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.469]                     next
[13:20:24.469]                   args[[name]] <- ""
[13:20:24.469]                 }
[13:20:24.469]                 NAMES <- toupper(removed)
[13:20:24.469]                 for (kk in seq_along(NAMES)) {
[13:20:24.469]                   name <- removed[[kk]]
[13:20:24.469]                   NAME <- NAMES[[kk]]
[13:20:24.469]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.469]                     next
[13:20:24.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.469]                 }
[13:20:24.469]                 if (length(args) > 0) 
[13:20:24.469]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.469]             }
[13:20:24.469]             else {
[13:20:24.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.469]             }
[13:20:24.469]             {
[13:20:24.469]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.469]                   0L) {
[13:20:24.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.469]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.469]                   base::options(opts)
[13:20:24.469]                 }
[13:20:24.469]                 {
[13:20:24.469]                   {
[13:20:24.469]                     NULL
[13:20:24.469]                     RNGkind("Mersenne-Twister")
[13:20:24.469]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.469]                       inherits = FALSE)
[13:20:24.469]                   }
[13:20:24.469]                   options(future.plan = NULL)
[13:20:24.469]                   if (is.na(NA_character_)) 
[13:20:24.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.469]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.469]                   {
[13:20:24.469]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.469]                     if (!future$lazy) 
[13:20:24.469]                       future <- run(future)
[13:20:24.469]                     invisible(future)
[13:20:24.469]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.469]                 }
[13:20:24.469]             }
[13:20:24.469]         }
[13:20:24.469]     })
[13:20:24.469]     if (TRUE) {
[13:20:24.469]         base::sink(type = "output", split = FALSE)
[13:20:24.469]         if (TRUE) {
[13:20:24.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.469]         }
[13:20:24.469]         else {
[13:20:24.469]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.469]         }
[13:20:24.469]         base::close(...future.stdout)
[13:20:24.469]         ...future.stdout <- NULL
[13:20:24.469]     }
[13:20:24.469]     ...future.result$conditions <- ...future.conditions
[13:20:24.469]     ...future.result$finished <- base::Sys.time()
[13:20:24.469]     ...future.result
[13:20:24.469] }
[13:20:24.471] plan(): Setting new future strategy stack:
[13:20:24.471] List of future strategies:
[13:20:24.471] 1. sequential:
[13:20:24.471]    - args: function (..., envir = parent.frame())
[13:20:24.471]    - tweaked: FALSE
[13:20:24.471]    - call: NULL
[13:20:24.471] plan(): nbrOfWorkers() = 1
[13:20:24.472] plan(): Setting new future strategy stack:
[13:20:24.472] List of future strategies:
[13:20:24.472] 1. sequential:
[13:20:24.472]    - args: function (..., envir = parent.frame())
[13:20:24.472]    - tweaked: FALSE
[13:20:24.472]    - call: future::plan("sequential")
[13:20:24.472] plan(): nbrOfWorkers() = 1
[13:20:24.472] SequentialFuture started (and completed)
[13:20:24.473] - Launch lazy future ... done
[13:20:24.473] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'reset') ...
*** FutureRegistry('multicore-71844787-37c5-4353-62d4-67e8625a75f6', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[13:20:24.473] getGlobalsAndPackages() ...
[13:20:24.474] Searching for globals...
[13:20:24.474] - globals found: [1] ‘{’
[13:20:24.474] Searching for globals ... DONE
[13:20:24.474] Resolving globals: FALSE
[13:20:24.475] 
[13:20:24.475] 
[13:20:24.475] getGlobalsAndPackages() ... DONE
[13:20:24.475] run() for ‘Future’ ...
[13:20:24.475] - state: ‘created’
[13:20:24.475] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.475] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.476] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.476]   - Field: ‘label’
[13:20:24.476]   - Field: ‘local’
[13:20:24.476]   - Field: ‘owner’
[13:20:24.476]   - Field: ‘envir’
[13:20:24.476]   - Field: ‘packages’
[13:20:24.476]   - Field: ‘gc’
[13:20:24.476]   - Field: ‘conditions’
[13:20:24.476]   - Field: ‘expr’
[13:20:24.476]   - Field: ‘uuid’
[13:20:24.476]   - Field: ‘seed’
[13:20:24.477]   - Field: ‘version’
[13:20:24.477]   - Field: ‘result’
[13:20:24.477]   - Field: ‘asynchronous’
[13:20:24.477]   - Field: ‘calls’
[13:20:24.477]   - Field: ‘globals’
[13:20:24.477]   - Field: ‘stdout’
[13:20:24.477]   - Field: ‘earlySignal’
[13:20:24.477]   - Field: ‘lazy’
[13:20:24.477]   - Field: ‘state’
[13:20:24.477] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.478] - Launch lazy future ...
[13:20:24.478] Packages needed by the future expression (n = 0): <none>
[13:20:24.478] Packages needed by future strategies (n = 0): <none>
[13:20:24.478] {
[13:20:24.478]     {
[13:20:24.478]         {
[13:20:24.478]             ...future.startTime <- base::Sys.time()
[13:20:24.478]             {
[13:20:24.478]                 {
[13:20:24.478]                   {
[13:20:24.478]                     base::local({
[13:20:24.478]                       has_future <- base::requireNamespace("future", 
[13:20:24.478]                         quietly = TRUE)
[13:20:24.478]                       if (has_future) {
[13:20:24.478]                         ns <- base::getNamespace("future")
[13:20:24.478]                         version <- ns[[".package"]][["version"]]
[13:20:24.478]                         if (is.null(version)) 
[13:20:24.478]                           version <- utils::packageVersion("future")
[13:20:24.478]                       }
[13:20:24.478]                       else {
[13:20:24.478]                         version <- NULL
[13:20:24.478]                       }
[13:20:24.478]                       if (!has_future || version < "1.8.0") {
[13:20:24.478]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.478]                           "", base::R.version$version.string), 
[13:20:24.478]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.478]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.478]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.478]                             "release", "version")], collapse = " "), 
[13:20:24.478]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.478]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.478]                           info)
[13:20:24.478]                         info <- base::paste(info, collapse = "; ")
[13:20:24.478]                         if (!has_future) {
[13:20:24.478]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.478]                             info)
[13:20:24.478]                         }
[13:20:24.478]                         else {
[13:20:24.478]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.478]                             info, version)
[13:20:24.478]                         }
[13:20:24.478]                         base::stop(msg)
[13:20:24.478]                       }
[13:20:24.478]                     })
[13:20:24.478]                   }
[13:20:24.478]                   options(future.plan = NULL)
[13:20:24.478]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.478]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.478]                 }
[13:20:24.478]                 ...future.workdir <- getwd()
[13:20:24.478]             }
[13:20:24.478]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.478]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.478]         }
[13:20:24.478]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.478]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.478]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.478]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.478]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.478]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.478]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.478]             base::names(...future.oldOptions))
[13:20:24.478]     }
[13:20:24.478]     if (FALSE) {
[13:20:24.478]     }
[13:20:24.478]     else {
[13:20:24.478]         if (TRUE) {
[13:20:24.478]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.478]                 open = "w")
[13:20:24.478]         }
[13:20:24.478]         else {
[13:20:24.478]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.478]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.478]         }
[13:20:24.478]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.478]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.478]             base::sink(type = "output", split = FALSE)
[13:20:24.478]             base::close(...future.stdout)
[13:20:24.478]         }, add = TRUE)
[13:20:24.478]     }
[13:20:24.478]     ...future.frame <- base::sys.nframe()
[13:20:24.478]     ...future.conditions <- base::list()
[13:20:24.478]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.478]     if (FALSE) {
[13:20:24.478]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.478]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.478]     }
[13:20:24.478]     ...future.result <- base::tryCatch({
[13:20:24.478]         base::withCallingHandlers({
[13:20:24.478]             ...future.value <- base::withVisible(base::local({
[13:20:24.478]                 1
[13:20:24.478]             }))
[13:20:24.478]             future::FutureResult(value = ...future.value$value, 
[13:20:24.478]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.478]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.478]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.478]                     ...future.globalenv.names))
[13:20:24.478]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.478]         }, condition = base::local({
[13:20:24.478]             c <- base::c
[13:20:24.478]             inherits <- base::inherits
[13:20:24.478]             invokeRestart <- base::invokeRestart
[13:20:24.478]             length <- base::length
[13:20:24.478]             list <- base::list
[13:20:24.478]             seq.int <- base::seq.int
[13:20:24.478]             signalCondition <- base::signalCondition
[13:20:24.478]             sys.calls <- base::sys.calls
[13:20:24.478]             `[[` <- base::`[[`
[13:20:24.478]             `+` <- base::`+`
[13:20:24.478]             `<<-` <- base::`<<-`
[13:20:24.478]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.478]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.478]                   3L)]
[13:20:24.478]             }
[13:20:24.478]             function(cond) {
[13:20:24.478]                 is_error <- inherits(cond, "error")
[13:20:24.478]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.478]                   NULL)
[13:20:24.478]                 if (is_error) {
[13:20:24.478]                   sessionInformation <- function() {
[13:20:24.478]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.478]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.478]                       search = base::search(), system = base::Sys.info())
[13:20:24.478]                   }
[13:20:24.478]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.478]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.478]                     cond$call), session = sessionInformation(), 
[13:20:24.478]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.478]                   signalCondition(cond)
[13:20:24.478]                 }
[13:20:24.478]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.478]                 "immediateCondition"))) {
[13:20:24.478]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.478]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.478]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.478]                   if (TRUE && !signal) {
[13:20:24.478]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.478]                     {
[13:20:24.478]                       inherits <- base::inherits
[13:20:24.478]                       invokeRestart <- base::invokeRestart
[13:20:24.478]                       is.null <- base::is.null
[13:20:24.478]                       muffled <- FALSE
[13:20:24.478]                       if (inherits(cond, "message")) {
[13:20:24.478]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.478]                         if (muffled) 
[13:20:24.478]                           invokeRestart("muffleMessage")
[13:20:24.478]                       }
[13:20:24.478]                       else if (inherits(cond, "warning")) {
[13:20:24.478]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.478]                         if (muffled) 
[13:20:24.478]                           invokeRestart("muffleWarning")
[13:20:24.478]                       }
[13:20:24.478]                       else if (inherits(cond, "condition")) {
[13:20:24.478]                         if (!is.null(pattern)) {
[13:20:24.478]                           computeRestarts <- base::computeRestarts
[13:20:24.478]                           grepl <- base::grepl
[13:20:24.478]                           restarts <- computeRestarts(cond)
[13:20:24.478]                           for (restart in restarts) {
[13:20:24.478]                             name <- restart$name
[13:20:24.478]                             if (is.null(name)) 
[13:20:24.478]                               next
[13:20:24.478]                             if (!grepl(pattern, name)) 
[13:20:24.478]                               next
[13:20:24.478]                             invokeRestart(restart)
[13:20:24.478]                             muffled <- TRUE
[13:20:24.478]                             break
[13:20:24.478]                           }
[13:20:24.478]                         }
[13:20:24.478]                       }
[13:20:24.478]                       invisible(muffled)
[13:20:24.478]                     }
[13:20:24.478]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.478]                   }
[13:20:24.478]                 }
[13:20:24.478]                 else {
[13:20:24.478]                   if (TRUE) {
[13:20:24.478]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.478]                     {
[13:20:24.478]                       inherits <- base::inherits
[13:20:24.478]                       invokeRestart <- base::invokeRestart
[13:20:24.478]                       is.null <- base::is.null
[13:20:24.478]                       muffled <- FALSE
[13:20:24.478]                       if (inherits(cond, "message")) {
[13:20:24.478]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.478]                         if (muffled) 
[13:20:24.478]                           invokeRestart("muffleMessage")
[13:20:24.478]                       }
[13:20:24.478]                       else if (inherits(cond, "warning")) {
[13:20:24.478]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.478]                         if (muffled) 
[13:20:24.478]                           invokeRestart("muffleWarning")
[13:20:24.478]                       }
[13:20:24.478]                       else if (inherits(cond, "condition")) {
[13:20:24.478]                         if (!is.null(pattern)) {
[13:20:24.478]                           computeRestarts <- base::computeRestarts
[13:20:24.478]                           grepl <- base::grepl
[13:20:24.478]                           restarts <- computeRestarts(cond)
[13:20:24.478]                           for (restart in restarts) {
[13:20:24.478]                             name <- restart$name
[13:20:24.478]                             if (is.null(name)) 
[13:20:24.478]                               next
[13:20:24.478]                             if (!grepl(pattern, name)) 
[13:20:24.478]                               next
[13:20:24.478]                             invokeRestart(restart)
[13:20:24.478]                             muffled <- TRUE
[13:20:24.478]                             break
[13:20:24.478]                           }
[13:20:24.478]                         }
[13:20:24.478]                       }
[13:20:24.478]                       invisible(muffled)
[13:20:24.478]                     }
[13:20:24.478]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.478]                   }
[13:20:24.478]                 }
[13:20:24.478]             }
[13:20:24.478]         }))
[13:20:24.478]     }, error = function(ex) {
[13:20:24.478]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.478]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.478]                 ...future.rng), started = ...future.startTime, 
[13:20:24.478]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.478]             version = "1.8"), class = "FutureResult")
[13:20:24.478]     }, finally = {
[13:20:24.478]         if (!identical(...future.workdir, getwd())) 
[13:20:24.478]             setwd(...future.workdir)
[13:20:24.478]         {
[13:20:24.478]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.478]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.478]             }
[13:20:24.478]             base::options(...future.oldOptions)
[13:20:24.478]             if (.Platform$OS.type == "windows") {
[13:20:24.478]                 old_names <- names(...future.oldEnvVars)
[13:20:24.478]                 envs <- base::Sys.getenv()
[13:20:24.478]                 names <- names(envs)
[13:20:24.478]                 common <- intersect(names, old_names)
[13:20:24.478]                 added <- setdiff(names, old_names)
[13:20:24.478]                 removed <- setdiff(old_names, names)
[13:20:24.478]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.478]                   envs[common]]
[13:20:24.478]                 NAMES <- toupper(changed)
[13:20:24.478]                 args <- list()
[13:20:24.478]                 for (kk in seq_along(NAMES)) {
[13:20:24.478]                   name <- changed[[kk]]
[13:20:24.478]                   NAME <- NAMES[[kk]]
[13:20:24.478]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.478]                     next
[13:20:24.478]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.478]                 }
[13:20:24.478]                 NAMES <- toupper(added)
[13:20:24.478]                 for (kk in seq_along(NAMES)) {
[13:20:24.478]                   name <- added[[kk]]
[13:20:24.478]                   NAME <- NAMES[[kk]]
[13:20:24.478]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.478]                     next
[13:20:24.478]                   args[[name]] <- ""
[13:20:24.478]                 }
[13:20:24.478]                 NAMES <- toupper(removed)
[13:20:24.478]                 for (kk in seq_along(NAMES)) {
[13:20:24.478]                   name <- removed[[kk]]
[13:20:24.478]                   NAME <- NAMES[[kk]]
[13:20:24.478]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.478]                     next
[13:20:24.478]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.478]                 }
[13:20:24.478]                 if (length(args) > 0) 
[13:20:24.478]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.478]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.478]             }
[13:20:24.478]             else {
[13:20:24.478]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.478]             }
[13:20:24.478]             {
[13:20:24.478]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.478]                   0L) {
[13:20:24.478]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.478]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.478]                   base::options(opts)
[13:20:24.478]                 }
[13:20:24.478]                 {
[13:20:24.478]                   {
[13:20:24.478]                     NULL
[13:20:24.478]                     RNGkind("Mersenne-Twister")
[13:20:24.478]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.478]                       inherits = FALSE)
[13:20:24.478]                   }
[13:20:24.478]                   options(future.plan = NULL)
[13:20:24.478]                   if (is.na(NA_character_)) 
[13:20:24.478]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.478]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.478]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.478]                   {
[13:20:24.478]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.478]                     if (!future$lazy) 
[13:20:24.478]                       future <- run(future)
[13:20:24.478]                     invisible(future)
[13:20:24.478]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.478]                 }
[13:20:24.478]             }
[13:20:24.478]         }
[13:20:24.478]     })
[13:20:24.478]     if (TRUE) {
[13:20:24.478]         base::sink(type = "output", split = FALSE)
[13:20:24.478]         if (TRUE) {
[13:20:24.478]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.478]         }
[13:20:24.478]         else {
[13:20:24.478]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.478]         }
[13:20:24.478]         base::close(...future.stdout)
[13:20:24.478]         ...future.stdout <- NULL
[13:20:24.478]     }
[13:20:24.478]     ...future.result$conditions <- ...future.conditions
[13:20:24.478]     ...future.result$finished <- base::Sys.time()
[13:20:24.478]     ...future.result
[13:20:24.478] }
[13:20:24.480] plan(): Setting new future strategy stack:
[13:20:24.480] List of future strategies:
[13:20:24.480] 1. sequential:
[13:20:24.480]    - args: function (..., envir = parent.frame())
[13:20:24.480]    - tweaked: FALSE
[13:20:24.480]    - call: NULL
[13:20:24.480] plan(): nbrOfWorkers() = 1
[13:20:24.481] plan(): Setting new future strategy stack:
[13:20:24.481] List of future strategies:
[13:20:24.481] 1. sequential:
[13:20:24.481]    - args: function (..., envir = parent.frame())
[13:20:24.481]    - tweaked: FALSE
[13:20:24.481]    - call: future::plan("sequential")
[13:20:24.482] plan(): nbrOfWorkers() = 1
[13:20:24.482] SequentialFuture started (and completed)
[13:20:24.482] - Launch lazy future ... done
[13:20:24.482] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[13:20:24.483] getGlobalsAndPackages() ...
[13:20:24.483] Searching for globals...
[13:20:24.484] - globals found: [1] ‘{’
[13:20:24.484] Searching for globals ... DONE
[13:20:24.484] Resolving globals: FALSE
[13:20:24.484] 
[13:20:24.485] 
[13:20:24.485] getGlobalsAndPackages() ... DONE
[13:20:24.485] run() for ‘Future’ ...
[13:20:24.485] - state: ‘created’
[13:20:24.485] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.485] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.486] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.486]   - Field: ‘label’
[13:20:24.486]   - Field: ‘local’
[13:20:24.486]   - Field: ‘owner’
[13:20:24.486]   - Field: ‘envir’
[13:20:24.486]   - Field: ‘packages’
[13:20:24.486]   - Field: ‘gc’
[13:20:24.486]   - Field: ‘conditions’
[13:20:24.486]   - Field: ‘expr’
[13:20:24.486]   - Field: ‘uuid’
[13:20:24.486]   - Field: ‘seed’
[13:20:24.487]   - Field: ‘version’
[13:20:24.487]   - Field: ‘result’
[13:20:24.487]   - Field: ‘asynchronous’
[13:20:24.487]   - Field: ‘calls’
[13:20:24.487]   - Field: ‘globals’
[13:20:24.487]   - Field: ‘stdout’
[13:20:24.487]   - Field: ‘earlySignal’
[13:20:24.487]   - Field: ‘lazy’
[13:20:24.487]   - Field: ‘state’
[13:20:24.487] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.488] - Launch lazy future ...
[13:20:24.488] Packages needed by the future expression (n = 0): <none>
[13:20:24.488] Packages needed by future strategies (n = 0): <none>
[13:20:24.488] {
[13:20:24.488]     {
[13:20:24.488]         {
[13:20:24.488]             ...future.startTime <- base::Sys.time()
[13:20:24.488]             {
[13:20:24.488]                 {
[13:20:24.488]                   {
[13:20:24.488]                     base::local({
[13:20:24.488]                       has_future <- base::requireNamespace("future", 
[13:20:24.488]                         quietly = TRUE)
[13:20:24.488]                       if (has_future) {
[13:20:24.488]                         ns <- base::getNamespace("future")
[13:20:24.488]                         version <- ns[[".package"]][["version"]]
[13:20:24.488]                         if (is.null(version)) 
[13:20:24.488]                           version <- utils::packageVersion("future")
[13:20:24.488]                       }
[13:20:24.488]                       else {
[13:20:24.488]                         version <- NULL
[13:20:24.488]                       }
[13:20:24.488]                       if (!has_future || version < "1.8.0") {
[13:20:24.488]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.488]                           "", base::R.version$version.string), 
[13:20:24.488]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.488]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.488]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.488]                             "release", "version")], collapse = " "), 
[13:20:24.488]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.488]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.488]                           info)
[13:20:24.488]                         info <- base::paste(info, collapse = "; ")
[13:20:24.488]                         if (!has_future) {
[13:20:24.488]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.488]                             info)
[13:20:24.488]                         }
[13:20:24.488]                         else {
[13:20:24.488]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.488]                             info, version)
[13:20:24.488]                         }
[13:20:24.488]                         base::stop(msg)
[13:20:24.488]                       }
[13:20:24.488]                     })
[13:20:24.488]                   }
[13:20:24.488]                   options(future.plan = NULL)
[13:20:24.488]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.488]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.488]                 }
[13:20:24.488]                 ...future.workdir <- getwd()
[13:20:24.488]             }
[13:20:24.488]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.488]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.488]         }
[13:20:24.488]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.488]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.488]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.488]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.488]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.488]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.488]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.488]             base::names(...future.oldOptions))
[13:20:24.488]     }
[13:20:24.488]     if (FALSE) {
[13:20:24.488]     }
[13:20:24.488]     else {
[13:20:24.488]         if (TRUE) {
[13:20:24.488]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.488]                 open = "w")
[13:20:24.488]         }
[13:20:24.488]         else {
[13:20:24.488]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.488]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.488]         }
[13:20:24.488]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.488]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.488]             base::sink(type = "output", split = FALSE)
[13:20:24.488]             base::close(...future.stdout)
[13:20:24.488]         }, add = TRUE)
[13:20:24.488]     }
[13:20:24.488]     ...future.frame <- base::sys.nframe()
[13:20:24.488]     ...future.conditions <- base::list()
[13:20:24.488]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.488]     if (FALSE) {
[13:20:24.488]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.488]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.488]     }
[13:20:24.488]     ...future.result <- base::tryCatch({
[13:20:24.488]         base::withCallingHandlers({
[13:20:24.488]             ...future.value <- base::withVisible(base::local({
[13:20:24.488]                 2
[13:20:24.488]             }))
[13:20:24.488]             future::FutureResult(value = ...future.value$value, 
[13:20:24.488]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.488]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.488]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.488]                     ...future.globalenv.names))
[13:20:24.488]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.488]         }, condition = base::local({
[13:20:24.488]             c <- base::c
[13:20:24.488]             inherits <- base::inherits
[13:20:24.488]             invokeRestart <- base::invokeRestart
[13:20:24.488]             length <- base::length
[13:20:24.488]             list <- base::list
[13:20:24.488]             seq.int <- base::seq.int
[13:20:24.488]             signalCondition <- base::signalCondition
[13:20:24.488]             sys.calls <- base::sys.calls
[13:20:24.488]             `[[` <- base::`[[`
[13:20:24.488]             `+` <- base::`+`
[13:20:24.488]             `<<-` <- base::`<<-`
[13:20:24.488]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.488]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.488]                   3L)]
[13:20:24.488]             }
[13:20:24.488]             function(cond) {
[13:20:24.488]                 is_error <- inherits(cond, "error")
[13:20:24.488]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.488]                   NULL)
[13:20:24.488]                 if (is_error) {
[13:20:24.488]                   sessionInformation <- function() {
[13:20:24.488]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.488]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.488]                       search = base::search(), system = base::Sys.info())
[13:20:24.488]                   }
[13:20:24.488]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.488]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.488]                     cond$call), session = sessionInformation(), 
[13:20:24.488]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.488]                   signalCondition(cond)
[13:20:24.488]                 }
[13:20:24.488]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.488]                 "immediateCondition"))) {
[13:20:24.488]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.488]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.488]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.488]                   if (TRUE && !signal) {
[13:20:24.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.488]                     {
[13:20:24.488]                       inherits <- base::inherits
[13:20:24.488]                       invokeRestart <- base::invokeRestart
[13:20:24.488]                       is.null <- base::is.null
[13:20:24.488]                       muffled <- FALSE
[13:20:24.488]                       if (inherits(cond, "message")) {
[13:20:24.488]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.488]                         if (muffled) 
[13:20:24.488]                           invokeRestart("muffleMessage")
[13:20:24.488]                       }
[13:20:24.488]                       else if (inherits(cond, "warning")) {
[13:20:24.488]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.488]                         if (muffled) 
[13:20:24.488]                           invokeRestart("muffleWarning")
[13:20:24.488]                       }
[13:20:24.488]                       else if (inherits(cond, "condition")) {
[13:20:24.488]                         if (!is.null(pattern)) {
[13:20:24.488]                           computeRestarts <- base::computeRestarts
[13:20:24.488]                           grepl <- base::grepl
[13:20:24.488]                           restarts <- computeRestarts(cond)
[13:20:24.488]                           for (restart in restarts) {
[13:20:24.488]                             name <- restart$name
[13:20:24.488]                             if (is.null(name)) 
[13:20:24.488]                               next
[13:20:24.488]                             if (!grepl(pattern, name)) 
[13:20:24.488]                               next
[13:20:24.488]                             invokeRestart(restart)
[13:20:24.488]                             muffled <- TRUE
[13:20:24.488]                             break
[13:20:24.488]                           }
[13:20:24.488]                         }
[13:20:24.488]                       }
[13:20:24.488]                       invisible(muffled)
[13:20:24.488]                     }
[13:20:24.488]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.488]                   }
[13:20:24.488]                 }
[13:20:24.488]                 else {
[13:20:24.488]                   if (TRUE) {
[13:20:24.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.488]                     {
[13:20:24.488]                       inherits <- base::inherits
[13:20:24.488]                       invokeRestart <- base::invokeRestart
[13:20:24.488]                       is.null <- base::is.null
[13:20:24.488]                       muffled <- FALSE
[13:20:24.488]                       if (inherits(cond, "message")) {
[13:20:24.488]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.488]                         if (muffled) 
[13:20:24.488]                           invokeRestart("muffleMessage")
[13:20:24.488]                       }
[13:20:24.488]                       else if (inherits(cond, "warning")) {
[13:20:24.488]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.488]                         if (muffled) 
[13:20:24.488]                           invokeRestart("muffleWarning")
[13:20:24.488]                       }
[13:20:24.488]                       else if (inherits(cond, "condition")) {
[13:20:24.488]                         if (!is.null(pattern)) {
[13:20:24.488]                           computeRestarts <- base::computeRestarts
[13:20:24.488]                           grepl <- base::grepl
[13:20:24.488]                           restarts <- computeRestarts(cond)
[13:20:24.488]                           for (restart in restarts) {
[13:20:24.488]                             name <- restart$name
[13:20:24.488]                             if (is.null(name)) 
[13:20:24.488]                               next
[13:20:24.488]                             if (!grepl(pattern, name)) 
[13:20:24.488]                               next
[13:20:24.488]                             invokeRestart(restart)
[13:20:24.488]                             muffled <- TRUE
[13:20:24.488]                             break
[13:20:24.488]                           }
[13:20:24.488]                         }
[13:20:24.488]                       }
[13:20:24.488]                       invisible(muffled)
[13:20:24.488]                     }
[13:20:24.488]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.488]                   }
[13:20:24.488]                 }
[13:20:24.488]             }
[13:20:24.488]         }))
[13:20:24.488]     }, error = function(ex) {
[13:20:24.488]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.488]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.488]                 ...future.rng), started = ...future.startTime, 
[13:20:24.488]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.488]             version = "1.8"), class = "FutureResult")
[13:20:24.488]     }, finally = {
[13:20:24.488]         if (!identical(...future.workdir, getwd())) 
[13:20:24.488]             setwd(...future.workdir)
[13:20:24.488]         {
[13:20:24.488]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.488]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.488]             }
[13:20:24.488]             base::options(...future.oldOptions)
[13:20:24.488]             if (.Platform$OS.type == "windows") {
[13:20:24.488]                 old_names <- names(...future.oldEnvVars)
[13:20:24.488]                 envs <- base::Sys.getenv()
[13:20:24.488]                 names <- names(envs)
[13:20:24.488]                 common <- intersect(names, old_names)
[13:20:24.488]                 added <- setdiff(names, old_names)
[13:20:24.488]                 removed <- setdiff(old_names, names)
[13:20:24.488]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.488]                   envs[common]]
[13:20:24.488]                 NAMES <- toupper(changed)
[13:20:24.488]                 args <- list()
[13:20:24.488]                 for (kk in seq_along(NAMES)) {
[13:20:24.488]                   name <- changed[[kk]]
[13:20:24.488]                   NAME <- NAMES[[kk]]
[13:20:24.488]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.488]                     next
[13:20:24.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.488]                 }
[13:20:24.488]                 NAMES <- toupper(added)
[13:20:24.488]                 for (kk in seq_along(NAMES)) {
[13:20:24.488]                   name <- added[[kk]]
[13:20:24.488]                   NAME <- NAMES[[kk]]
[13:20:24.488]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.488]                     next
[13:20:24.488]                   args[[name]] <- ""
[13:20:24.488]                 }
[13:20:24.488]                 NAMES <- toupper(removed)
[13:20:24.488]                 for (kk in seq_along(NAMES)) {
[13:20:24.488]                   name <- removed[[kk]]
[13:20:24.488]                   NAME <- NAMES[[kk]]
[13:20:24.488]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.488]                     next
[13:20:24.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.488]                 }
[13:20:24.488]                 if (length(args) > 0) 
[13:20:24.488]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.488]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.488]             }
[13:20:24.488]             else {
[13:20:24.488]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.488]             }
[13:20:24.488]             {
[13:20:24.488]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.488]                   0L) {
[13:20:24.488]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.488]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.488]                   base::options(opts)
[13:20:24.488]                 }
[13:20:24.488]                 {
[13:20:24.488]                   {
[13:20:24.488]                     NULL
[13:20:24.488]                     RNGkind("Mersenne-Twister")
[13:20:24.488]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.488]                       inherits = FALSE)
[13:20:24.488]                   }
[13:20:24.488]                   options(future.plan = NULL)
[13:20:24.488]                   if (is.na(NA_character_)) 
[13:20:24.488]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.488]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.488]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.488]                   {
[13:20:24.488]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.488]                     if (!future$lazy) 
[13:20:24.488]                       future <- run(future)
[13:20:24.488]                     invisible(future)
[13:20:24.488]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.488]                 }
[13:20:24.488]             }
[13:20:24.488]         }
[13:20:24.488]     })
[13:20:24.488]     if (TRUE) {
[13:20:24.488]         base::sink(type = "output", split = FALSE)
[13:20:24.488]         if (TRUE) {
[13:20:24.488]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.488]         }
[13:20:24.488]         else {
[13:20:24.488]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.488]         }
[13:20:24.488]         base::close(...future.stdout)
[13:20:24.488]         ...future.stdout <- NULL
[13:20:24.488]     }
[13:20:24.488]     ...future.result$conditions <- ...future.conditions
[13:20:24.488]     ...future.result$finished <- base::Sys.time()
[13:20:24.488]     ...future.result
[13:20:24.488] }
[13:20:24.490] plan(): Setting new future strategy stack:
[13:20:24.490] List of future strategies:
[13:20:24.490] 1. sequential:
[13:20:24.490]    - args: function (..., envir = parent.frame())
[13:20:24.490]    - tweaked: FALSE
[13:20:24.490]    - call: NULL
[13:20:24.490] plan(): nbrOfWorkers() = 1
[13:20:24.491] plan(): Setting new future strategy stack:
[13:20:24.491] List of future strategies:
[13:20:24.491] 1. sequential:
[13:20:24.491]    - args: function (..., envir = parent.frame())
[13:20:24.491]    - tweaked: FALSE
[13:20:24.491]    - call: future::plan("sequential")
[13:20:24.492] plan(): nbrOfWorkers() = 1
[13:20:24.492] SequentialFuture started (and completed)
[13:20:24.492] - Launch lazy future ... done
[13:20:24.492] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[13:20:24.503] resolved() for ‘SequentialFuture’ ...
[13:20:24.503] - state: ‘finished’
[13:20:24.503] - run: FALSE
[13:20:24.503] - result: ‘FutureResult’
[13:20:24.503] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[13:20:24.504] getGlobalsAndPackages() ...
[13:20:24.504] Searching for globals...
[13:20:24.504] - globals found: [1] ‘{’
[13:20:24.504] Searching for globals ... DONE
[13:20:24.504] Resolving globals: FALSE
[13:20:24.505] 
[13:20:24.505] 
[13:20:24.505] getGlobalsAndPackages() ... DONE
[13:20:24.505] run() for ‘Future’ ...
[13:20:24.505] - state: ‘created’
[13:20:24.505] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.506] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.506] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.506]   - Field: ‘label’
[13:20:24.506]   - Field: ‘local’
[13:20:24.506]   - Field: ‘owner’
[13:20:24.506]   - Field: ‘envir’
[13:20:24.506]   - Field: ‘packages’
[13:20:24.506]   - Field: ‘gc’
[13:20:24.506]   - Field: ‘conditions’
[13:20:24.507]   - Field: ‘expr’
[13:20:24.507]   - Field: ‘uuid’
[13:20:24.507]   - Field: ‘seed’
[13:20:24.507]   - Field: ‘version’
[13:20:24.507]   - Field: ‘result’
[13:20:24.507]   - Field: ‘asynchronous’
[13:20:24.507]   - Field: ‘calls’
[13:20:24.507]   - Field: ‘globals’
[13:20:24.507]   - Field: ‘stdout’
[13:20:24.507]   - Field: ‘earlySignal’
[13:20:24.507]   - Field: ‘lazy’
[13:20:24.508]   - Field: ‘state’
[13:20:24.508] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.508] - Launch lazy future ...
[13:20:24.508] Packages needed by the future expression (n = 0): <none>
[13:20:24.508] Packages needed by future strategies (n = 0): <none>
[13:20:24.508] {
[13:20:24.508]     {
[13:20:24.508]         {
[13:20:24.508]             ...future.startTime <- base::Sys.time()
[13:20:24.508]             {
[13:20:24.508]                 {
[13:20:24.508]                   {
[13:20:24.508]                     base::local({
[13:20:24.508]                       has_future <- base::requireNamespace("future", 
[13:20:24.508]                         quietly = TRUE)
[13:20:24.508]                       if (has_future) {
[13:20:24.508]                         ns <- base::getNamespace("future")
[13:20:24.508]                         version <- ns[[".package"]][["version"]]
[13:20:24.508]                         if (is.null(version)) 
[13:20:24.508]                           version <- utils::packageVersion("future")
[13:20:24.508]                       }
[13:20:24.508]                       else {
[13:20:24.508]                         version <- NULL
[13:20:24.508]                       }
[13:20:24.508]                       if (!has_future || version < "1.8.0") {
[13:20:24.508]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.508]                           "", base::R.version$version.string), 
[13:20:24.508]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.508]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.508]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.508]                             "release", "version")], collapse = " "), 
[13:20:24.508]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.508]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.508]                           info)
[13:20:24.508]                         info <- base::paste(info, collapse = "; ")
[13:20:24.508]                         if (!has_future) {
[13:20:24.508]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.508]                             info)
[13:20:24.508]                         }
[13:20:24.508]                         else {
[13:20:24.508]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.508]                             info, version)
[13:20:24.508]                         }
[13:20:24.508]                         base::stop(msg)
[13:20:24.508]                       }
[13:20:24.508]                     })
[13:20:24.508]                   }
[13:20:24.508]                   options(future.plan = NULL)
[13:20:24.508]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.508]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.508]                 }
[13:20:24.508]                 ...future.workdir <- getwd()
[13:20:24.508]             }
[13:20:24.508]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.508]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.508]         }
[13:20:24.508]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.508]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.508]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.508]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.508]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.508]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.508]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.508]             base::names(...future.oldOptions))
[13:20:24.508]     }
[13:20:24.508]     if (FALSE) {
[13:20:24.508]     }
[13:20:24.508]     else {
[13:20:24.508]         if (TRUE) {
[13:20:24.508]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.508]                 open = "w")
[13:20:24.508]         }
[13:20:24.508]         else {
[13:20:24.508]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.508]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.508]         }
[13:20:24.508]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.508]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.508]             base::sink(type = "output", split = FALSE)
[13:20:24.508]             base::close(...future.stdout)
[13:20:24.508]         }, add = TRUE)
[13:20:24.508]     }
[13:20:24.508]     ...future.frame <- base::sys.nframe()
[13:20:24.508]     ...future.conditions <- base::list()
[13:20:24.508]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.508]     if (FALSE) {
[13:20:24.508]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.508]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.508]     }
[13:20:24.508]     ...future.result <- base::tryCatch({
[13:20:24.508]         base::withCallingHandlers({
[13:20:24.508]             ...future.value <- base::withVisible(base::local({
[13:20:24.508]                 2
[13:20:24.508]             }))
[13:20:24.508]             future::FutureResult(value = ...future.value$value, 
[13:20:24.508]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.508]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.508]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.508]                     ...future.globalenv.names))
[13:20:24.508]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.508]         }, condition = base::local({
[13:20:24.508]             c <- base::c
[13:20:24.508]             inherits <- base::inherits
[13:20:24.508]             invokeRestart <- base::invokeRestart
[13:20:24.508]             length <- base::length
[13:20:24.508]             list <- base::list
[13:20:24.508]             seq.int <- base::seq.int
[13:20:24.508]             signalCondition <- base::signalCondition
[13:20:24.508]             sys.calls <- base::sys.calls
[13:20:24.508]             `[[` <- base::`[[`
[13:20:24.508]             `+` <- base::`+`
[13:20:24.508]             `<<-` <- base::`<<-`
[13:20:24.508]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.508]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.508]                   3L)]
[13:20:24.508]             }
[13:20:24.508]             function(cond) {
[13:20:24.508]                 is_error <- inherits(cond, "error")
[13:20:24.508]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.508]                   NULL)
[13:20:24.508]                 if (is_error) {
[13:20:24.508]                   sessionInformation <- function() {
[13:20:24.508]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.508]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.508]                       search = base::search(), system = base::Sys.info())
[13:20:24.508]                   }
[13:20:24.508]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.508]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.508]                     cond$call), session = sessionInformation(), 
[13:20:24.508]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.508]                   signalCondition(cond)
[13:20:24.508]                 }
[13:20:24.508]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.508]                 "immediateCondition"))) {
[13:20:24.508]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.508]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.508]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.508]                   if (TRUE && !signal) {
[13:20:24.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.508]                     {
[13:20:24.508]                       inherits <- base::inherits
[13:20:24.508]                       invokeRestart <- base::invokeRestart
[13:20:24.508]                       is.null <- base::is.null
[13:20:24.508]                       muffled <- FALSE
[13:20:24.508]                       if (inherits(cond, "message")) {
[13:20:24.508]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.508]                         if (muffled) 
[13:20:24.508]                           invokeRestart("muffleMessage")
[13:20:24.508]                       }
[13:20:24.508]                       else if (inherits(cond, "warning")) {
[13:20:24.508]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.508]                         if (muffled) 
[13:20:24.508]                           invokeRestart("muffleWarning")
[13:20:24.508]                       }
[13:20:24.508]                       else if (inherits(cond, "condition")) {
[13:20:24.508]                         if (!is.null(pattern)) {
[13:20:24.508]                           computeRestarts <- base::computeRestarts
[13:20:24.508]                           grepl <- base::grepl
[13:20:24.508]                           restarts <- computeRestarts(cond)
[13:20:24.508]                           for (restart in restarts) {
[13:20:24.508]                             name <- restart$name
[13:20:24.508]                             if (is.null(name)) 
[13:20:24.508]                               next
[13:20:24.508]                             if (!grepl(pattern, name)) 
[13:20:24.508]                               next
[13:20:24.508]                             invokeRestart(restart)
[13:20:24.508]                             muffled <- TRUE
[13:20:24.508]                             break
[13:20:24.508]                           }
[13:20:24.508]                         }
[13:20:24.508]                       }
[13:20:24.508]                       invisible(muffled)
[13:20:24.508]                     }
[13:20:24.508]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.508]                   }
[13:20:24.508]                 }
[13:20:24.508]                 else {
[13:20:24.508]                   if (TRUE) {
[13:20:24.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.508]                     {
[13:20:24.508]                       inherits <- base::inherits
[13:20:24.508]                       invokeRestart <- base::invokeRestart
[13:20:24.508]                       is.null <- base::is.null
[13:20:24.508]                       muffled <- FALSE
[13:20:24.508]                       if (inherits(cond, "message")) {
[13:20:24.508]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.508]                         if (muffled) 
[13:20:24.508]                           invokeRestart("muffleMessage")
[13:20:24.508]                       }
[13:20:24.508]                       else if (inherits(cond, "warning")) {
[13:20:24.508]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.508]                         if (muffled) 
[13:20:24.508]                           invokeRestart("muffleWarning")
[13:20:24.508]                       }
[13:20:24.508]                       else if (inherits(cond, "condition")) {
[13:20:24.508]                         if (!is.null(pattern)) {
[13:20:24.508]                           computeRestarts <- base::computeRestarts
[13:20:24.508]                           grepl <- base::grepl
[13:20:24.508]                           restarts <- computeRestarts(cond)
[13:20:24.508]                           for (restart in restarts) {
[13:20:24.508]                             name <- restart$name
[13:20:24.508]                             if (is.null(name)) 
[13:20:24.508]                               next
[13:20:24.508]                             if (!grepl(pattern, name)) 
[13:20:24.508]                               next
[13:20:24.508]                             invokeRestart(restart)
[13:20:24.508]                             muffled <- TRUE
[13:20:24.508]                             break
[13:20:24.508]                           }
[13:20:24.508]                         }
[13:20:24.508]                       }
[13:20:24.508]                       invisible(muffled)
[13:20:24.508]                     }
[13:20:24.508]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.508]                   }
[13:20:24.508]                 }
[13:20:24.508]             }
[13:20:24.508]         }))
[13:20:24.508]     }, error = function(ex) {
[13:20:24.508]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.508]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.508]                 ...future.rng), started = ...future.startTime, 
[13:20:24.508]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.508]             version = "1.8"), class = "FutureResult")
[13:20:24.508]     }, finally = {
[13:20:24.508]         if (!identical(...future.workdir, getwd())) 
[13:20:24.508]             setwd(...future.workdir)
[13:20:24.508]         {
[13:20:24.508]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.508]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.508]             }
[13:20:24.508]             base::options(...future.oldOptions)
[13:20:24.508]             if (.Platform$OS.type == "windows") {
[13:20:24.508]                 old_names <- names(...future.oldEnvVars)
[13:20:24.508]                 envs <- base::Sys.getenv()
[13:20:24.508]                 names <- names(envs)
[13:20:24.508]                 common <- intersect(names, old_names)
[13:20:24.508]                 added <- setdiff(names, old_names)
[13:20:24.508]                 removed <- setdiff(old_names, names)
[13:20:24.508]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.508]                   envs[common]]
[13:20:24.508]                 NAMES <- toupper(changed)
[13:20:24.508]                 args <- list()
[13:20:24.508]                 for (kk in seq_along(NAMES)) {
[13:20:24.508]                   name <- changed[[kk]]
[13:20:24.508]                   NAME <- NAMES[[kk]]
[13:20:24.508]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.508]                     next
[13:20:24.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.508]                 }
[13:20:24.508]                 NAMES <- toupper(added)
[13:20:24.508]                 for (kk in seq_along(NAMES)) {
[13:20:24.508]                   name <- added[[kk]]
[13:20:24.508]                   NAME <- NAMES[[kk]]
[13:20:24.508]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.508]                     next
[13:20:24.508]                   args[[name]] <- ""
[13:20:24.508]                 }
[13:20:24.508]                 NAMES <- toupper(removed)
[13:20:24.508]                 for (kk in seq_along(NAMES)) {
[13:20:24.508]                   name <- removed[[kk]]
[13:20:24.508]                   NAME <- NAMES[[kk]]
[13:20:24.508]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.508]                     next
[13:20:24.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.508]                 }
[13:20:24.508]                 if (length(args) > 0) 
[13:20:24.508]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.508]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.508]             }
[13:20:24.508]             else {
[13:20:24.508]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.508]             }
[13:20:24.508]             {
[13:20:24.508]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.508]                   0L) {
[13:20:24.508]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.508]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.508]                   base::options(opts)
[13:20:24.508]                 }
[13:20:24.508]                 {
[13:20:24.508]                   {
[13:20:24.508]                     NULL
[13:20:24.508]                     RNGkind("Mersenne-Twister")
[13:20:24.508]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.508]                       inherits = FALSE)
[13:20:24.508]                   }
[13:20:24.508]                   options(future.plan = NULL)
[13:20:24.508]                   if (is.na(NA_character_)) 
[13:20:24.508]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.508]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.508]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.508]                   {
[13:20:24.508]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.508]                     if (!future$lazy) 
[13:20:24.508]                       future <- run(future)
[13:20:24.508]                     invisible(future)
[13:20:24.508]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.508]                 }
[13:20:24.508]             }
[13:20:24.508]         }
[13:20:24.508]     })
[13:20:24.508]     if (TRUE) {
[13:20:24.508]         base::sink(type = "output", split = FALSE)
[13:20:24.508]         if (TRUE) {
[13:20:24.508]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.508]         }
[13:20:24.508]         else {
[13:20:24.508]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.508]         }
[13:20:24.508]         base::close(...future.stdout)
[13:20:24.508]         ...future.stdout <- NULL
[13:20:24.508]     }
[13:20:24.508]     ...future.result$conditions <- ...future.conditions
[13:20:24.508]     ...future.result$finished <- base::Sys.time()
[13:20:24.508]     ...future.result
[13:20:24.508] }
[13:20:24.510] plan(): Setting new future strategy stack:
[13:20:24.510] List of future strategies:
[13:20:24.510] 1. sequential:
[13:20:24.510]    - args: function (..., envir = parent.frame())
[13:20:24.510]    - tweaked: FALSE
[13:20:24.510]    - call: NULL
[13:20:24.511] plan(): nbrOfWorkers() = 1
[13:20:24.511] plan(): Setting new future strategy stack:
[13:20:24.511] List of future strategies:
[13:20:24.511] 1. sequential:
[13:20:24.511]    - args: function (..., envir = parent.frame())
[13:20:24.511]    - tweaked: FALSE
[13:20:24.511]    - call: future::plan("sequential")
[13:20:24.512] plan(): nbrOfWorkers() = 1
[13:20:24.512] SequentialFuture started (and completed)
[13:20:24.512] - Launch lazy future ... done
[13:20:24.512] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[13:20:24.513] getGlobalsAndPackages() ...
[13:20:24.513] Searching for globals...
[13:20:24.514] 
[13:20:24.514] Searching for globals ... DONE
[13:20:24.514] - globals: [0] <none>
[13:20:24.514] getGlobalsAndPackages() ... DONE
[13:20:24.514] run() for ‘Future’ ...
[13:20:24.514] - state: ‘created’
[13:20:24.514] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:20:24.515] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:20:24.515] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:20:24.515]   - Field: ‘label’
[13:20:24.515]   - Field: ‘local’
[13:20:24.515]   - Field: ‘owner’
[13:20:24.515]   - Field: ‘envir’
[13:20:24.515]   - Field: ‘packages’
[13:20:24.515]   - Field: ‘gc’
[13:20:24.515]   - Field: ‘conditions’
[13:20:24.515]   - Field: ‘expr’
[13:20:24.515]   - Field: ‘uuid’
[13:20:24.516]   - Field: ‘seed’
[13:20:24.516]   - Field: ‘version’
[13:20:24.516]   - Field: ‘result’
[13:20:24.516]   - Field: ‘asynchronous’
[13:20:24.516]   - Field: ‘calls’
[13:20:24.516]   - Field: ‘globals’
[13:20:24.516]   - Field: ‘stdout’
[13:20:24.516]   - Field: ‘earlySignal’
[13:20:24.516]   - Field: ‘lazy’
[13:20:24.516]   - Field: ‘state’
[13:20:24.516] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:20:24.517] - Launch lazy future ...
[13:20:24.517] Packages needed by the future expression (n = 0): <none>
[13:20:24.517] Packages needed by future strategies (n = 0): <none>
[13:20:24.517] {
[13:20:24.517]     {
[13:20:24.517]         {
[13:20:24.517]             ...future.startTime <- base::Sys.time()
[13:20:24.517]             {
[13:20:24.517]                 {
[13:20:24.517]                   {
[13:20:24.517]                     base::local({
[13:20:24.517]                       has_future <- base::requireNamespace("future", 
[13:20:24.517]                         quietly = TRUE)
[13:20:24.517]                       if (has_future) {
[13:20:24.517]                         ns <- base::getNamespace("future")
[13:20:24.517]                         version <- ns[[".package"]][["version"]]
[13:20:24.517]                         if (is.null(version)) 
[13:20:24.517]                           version <- utils::packageVersion("future")
[13:20:24.517]                       }
[13:20:24.517]                       else {
[13:20:24.517]                         version <- NULL
[13:20:24.517]                       }
[13:20:24.517]                       if (!has_future || version < "1.8.0") {
[13:20:24.517]                         info <- base::c(r_version = base::gsub("R version ", 
[13:20:24.517]                           "", base::R.version$version.string), 
[13:20:24.517]                           platform = base::sprintf("%s (%s-bit)", 
[13:20:24.517]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:20:24.517]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:20:24.517]                             "release", "version")], collapse = " "), 
[13:20:24.517]                           hostname = base::Sys.info()[["nodename"]])
[13:20:24.517]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:20:24.517]                           info)
[13:20:24.517]                         info <- base::paste(info, collapse = "; ")
[13:20:24.517]                         if (!has_future) {
[13:20:24.517]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:20:24.517]                             info)
[13:20:24.517]                         }
[13:20:24.517]                         else {
[13:20:24.517]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:20:24.517]                             info, version)
[13:20:24.517]                         }
[13:20:24.517]                         base::stop(msg)
[13:20:24.517]                       }
[13:20:24.517]                     })
[13:20:24.517]                   }
[13:20:24.517]                   options(future.plan = NULL)
[13:20:24.517]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.517]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:20:24.517]                 }
[13:20:24.517]                 ...future.workdir <- getwd()
[13:20:24.517]             }
[13:20:24.517]             ...future.oldOptions <- base::as.list(base::.Options)
[13:20:24.517]             ...future.oldEnvVars <- base::Sys.getenv()
[13:20:24.517]         }
[13:20:24.517]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:20:24.517]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:20:24.517]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:20:24.517]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:20:24.517]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:20:24.517]             future.stdout.windows.reencode = NULL, width = 80L)
[13:20:24.517]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:20:24.517]             base::names(...future.oldOptions))
[13:20:24.517]     }
[13:20:24.517]     if (FALSE) {
[13:20:24.517]     }
[13:20:24.517]     else {
[13:20:24.517]         if (TRUE) {
[13:20:24.517]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:20:24.517]                 open = "w")
[13:20:24.517]         }
[13:20:24.517]         else {
[13:20:24.517]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:20:24.517]                 windows = "NUL", "/dev/null"), open = "w")
[13:20:24.517]         }
[13:20:24.517]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:20:24.517]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:20:24.517]             base::sink(type = "output", split = FALSE)
[13:20:24.517]             base::close(...future.stdout)
[13:20:24.517]         }, add = TRUE)
[13:20:24.517]     }
[13:20:24.517]     ...future.frame <- base::sys.nframe()
[13:20:24.517]     ...future.conditions <- base::list()
[13:20:24.517]     ...future.rng <- base::globalenv()$.Random.seed
[13:20:24.517]     if (FALSE) {
[13:20:24.517]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:20:24.517]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:20:24.517]     }
[13:20:24.517]     ...future.result <- base::tryCatch({
[13:20:24.517]         base::withCallingHandlers({
[13:20:24.517]             ...future.value <- base::withVisible(base::local(1))
[13:20:24.517]             future::FutureResult(value = ...future.value$value, 
[13:20:24.517]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.517]                   ...future.rng), globalenv = if (FALSE) 
[13:20:24.517]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:20:24.517]                     ...future.globalenv.names))
[13:20:24.517]                 else NULL, started = ...future.startTime, version = "1.8")
[13:20:24.517]         }, condition = base::local({
[13:20:24.517]             c <- base::c
[13:20:24.517]             inherits <- base::inherits
[13:20:24.517]             invokeRestart <- base::invokeRestart
[13:20:24.517]             length <- base::length
[13:20:24.517]             list <- base::list
[13:20:24.517]             seq.int <- base::seq.int
[13:20:24.517]             signalCondition <- base::signalCondition
[13:20:24.517]             sys.calls <- base::sys.calls
[13:20:24.517]             `[[` <- base::`[[`
[13:20:24.517]             `+` <- base::`+`
[13:20:24.517]             `<<-` <- base::`<<-`
[13:20:24.517]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:20:24.517]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:20:24.517]                   3L)]
[13:20:24.517]             }
[13:20:24.517]             function(cond) {
[13:20:24.517]                 is_error <- inherits(cond, "error")
[13:20:24.517]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:20:24.517]                   NULL)
[13:20:24.517]                 if (is_error) {
[13:20:24.517]                   sessionInformation <- function() {
[13:20:24.517]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:20:24.517]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:20:24.517]                       search = base::search(), system = base::Sys.info())
[13:20:24.517]                   }
[13:20:24.517]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.517]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:20:24.517]                     cond$call), session = sessionInformation(), 
[13:20:24.517]                     timestamp = base::Sys.time(), signaled = 0L)
[13:20:24.517]                   signalCondition(cond)
[13:20:24.517]                 }
[13:20:24.517]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:20:24.517]                 "immediateCondition"))) {
[13:20:24.517]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:20:24.517]                   ...future.conditions[[length(...future.conditions) + 
[13:20:24.517]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:20:24.517]                   if (TRUE && !signal) {
[13:20:24.517]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.517]                     {
[13:20:24.517]                       inherits <- base::inherits
[13:20:24.517]                       invokeRestart <- base::invokeRestart
[13:20:24.517]                       is.null <- base::is.null
[13:20:24.517]                       muffled <- FALSE
[13:20:24.517]                       if (inherits(cond, "message")) {
[13:20:24.517]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.517]                         if (muffled) 
[13:20:24.517]                           invokeRestart("muffleMessage")
[13:20:24.517]                       }
[13:20:24.517]                       else if (inherits(cond, "warning")) {
[13:20:24.517]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.517]                         if (muffled) 
[13:20:24.517]                           invokeRestart("muffleWarning")
[13:20:24.517]                       }
[13:20:24.517]                       else if (inherits(cond, "condition")) {
[13:20:24.517]                         if (!is.null(pattern)) {
[13:20:24.517]                           computeRestarts <- base::computeRestarts
[13:20:24.517]                           grepl <- base::grepl
[13:20:24.517]                           restarts <- computeRestarts(cond)
[13:20:24.517]                           for (restart in restarts) {
[13:20:24.517]                             name <- restart$name
[13:20:24.517]                             if (is.null(name)) 
[13:20:24.517]                               next
[13:20:24.517]                             if (!grepl(pattern, name)) 
[13:20:24.517]                               next
[13:20:24.517]                             invokeRestart(restart)
[13:20:24.517]                             muffled <- TRUE
[13:20:24.517]                             break
[13:20:24.517]                           }
[13:20:24.517]                         }
[13:20:24.517]                       }
[13:20:24.517]                       invisible(muffled)
[13:20:24.517]                     }
[13:20:24.517]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.517]                   }
[13:20:24.517]                 }
[13:20:24.517]                 else {
[13:20:24.517]                   if (TRUE) {
[13:20:24.517]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:20:24.517]                     {
[13:20:24.517]                       inherits <- base::inherits
[13:20:24.517]                       invokeRestart <- base::invokeRestart
[13:20:24.517]                       is.null <- base::is.null
[13:20:24.517]                       muffled <- FALSE
[13:20:24.517]                       if (inherits(cond, "message")) {
[13:20:24.517]                         muffled <- grepl(pattern, "muffleMessage")
[13:20:24.517]                         if (muffled) 
[13:20:24.517]                           invokeRestart("muffleMessage")
[13:20:24.517]                       }
[13:20:24.517]                       else if (inherits(cond, "warning")) {
[13:20:24.517]                         muffled <- grepl(pattern, "muffleWarning")
[13:20:24.517]                         if (muffled) 
[13:20:24.517]                           invokeRestart("muffleWarning")
[13:20:24.517]                       }
[13:20:24.517]                       else if (inherits(cond, "condition")) {
[13:20:24.517]                         if (!is.null(pattern)) {
[13:20:24.517]                           computeRestarts <- base::computeRestarts
[13:20:24.517]                           grepl <- base::grepl
[13:20:24.517]                           restarts <- computeRestarts(cond)
[13:20:24.517]                           for (restart in restarts) {
[13:20:24.517]                             name <- restart$name
[13:20:24.517]                             if (is.null(name)) 
[13:20:24.517]                               next
[13:20:24.517]                             if (!grepl(pattern, name)) 
[13:20:24.517]                               next
[13:20:24.517]                             invokeRestart(restart)
[13:20:24.517]                             muffled <- TRUE
[13:20:24.517]                             break
[13:20:24.517]                           }
[13:20:24.517]                         }
[13:20:24.517]                       }
[13:20:24.517]                       invisible(muffled)
[13:20:24.517]                     }
[13:20:24.517]                     muffleCondition(cond, pattern = "^muffle")
[13:20:24.517]                   }
[13:20:24.517]                 }
[13:20:24.517]             }
[13:20:24.517]         }))
[13:20:24.517]     }, error = function(ex) {
[13:20:24.517]         base::structure(base::list(value = NULL, visible = NULL, 
[13:20:24.517]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:20:24.517]                 ...future.rng), started = ...future.startTime, 
[13:20:24.517]             finished = Sys.time(), session_uuid = NA_character_, 
[13:20:24.517]             version = "1.8"), class = "FutureResult")
[13:20:24.517]     }, finally = {
[13:20:24.517]         if (!identical(...future.workdir, getwd())) 
[13:20:24.517]             setwd(...future.workdir)
[13:20:24.517]         {
[13:20:24.517]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:20:24.517]                 ...future.oldOptions$nwarnings <- NULL
[13:20:24.517]             }
[13:20:24.517]             base::options(...future.oldOptions)
[13:20:24.517]             if (.Platform$OS.type == "windows") {
[13:20:24.517]                 old_names <- names(...future.oldEnvVars)
[13:20:24.517]                 envs <- base::Sys.getenv()
[13:20:24.517]                 names <- names(envs)
[13:20:24.517]                 common <- intersect(names, old_names)
[13:20:24.517]                 added <- setdiff(names, old_names)
[13:20:24.517]                 removed <- setdiff(old_names, names)
[13:20:24.517]                 changed <- common[...future.oldEnvVars[common] != 
[13:20:24.517]                   envs[common]]
[13:20:24.517]                 NAMES <- toupper(changed)
[13:20:24.517]                 args <- list()
[13:20:24.517]                 for (kk in seq_along(NAMES)) {
[13:20:24.517]                   name <- changed[[kk]]
[13:20:24.517]                   NAME <- NAMES[[kk]]
[13:20:24.517]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.517]                     next
[13:20:24.517]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.517]                 }
[13:20:24.517]                 NAMES <- toupper(added)
[13:20:24.517]                 for (kk in seq_along(NAMES)) {
[13:20:24.517]                   name <- added[[kk]]
[13:20:24.517]                   NAME <- NAMES[[kk]]
[13:20:24.517]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.517]                     next
[13:20:24.517]                   args[[name]] <- ""
[13:20:24.517]                 }
[13:20:24.517]                 NAMES <- toupper(removed)
[13:20:24.517]                 for (kk in seq_along(NAMES)) {
[13:20:24.517]                   name <- removed[[kk]]
[13:20:24.517]                   NAME <- NAMES[[kk]]
[13:20:24.517]                   if (name != NAME && is.element(NAME, old_names)) 
[13:20:24.517]                     next
[13:20:24.517]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:20:24.517]                 }
[13:20:24.517]                 if (length(args) > 0) 
[13:20:24.517]                   base::do.call(base::Sys.setenv, args = args)
[13:20:24.517]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:20:24.517]             }
[13:20:24.517]             else {
[13:20:24.517]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:20:24.517]             }
[13:20:24.517]             {
[13:20:24.517]                 if (base::length(...future.futureOptionsAdded) > 
[13:20:24.517]                   0L) {
[13:20:24.517]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:20:24.517]                   base::names(opts) <- ...future.futureOptionsAdded
[13:20:24.517]                   base::options(opts)
[13:20:24.517]                 }
[13:20:24.517]                 {
[13:20:24.517]                   {
[13:20:24.517]                     NULL
[13:20:24.517]                     RNGkind("Mersenne-Twister")
[13:20:24.517]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:20:24.517]                       inherits = FALSE)
[13:20:24.517]                   }
[13:20:24.517]                   options(future.plan = NULL)
[13:20:24.517]                   if (is.na(NA_character_)) 
[13:20:24.517]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:20:24.517]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:20:24.517]                   future::plan(list(function (..., envir = parent.frame()) 
[13:20:24.517]                   {
[13:20:24.517]                     future <- SequentialFuture(..., envir = envir)
[13:20:24.517]                     if (!future$lazy) 
[13:20:24.517]                       future <- run(future)
[13:20:24.517]                     invisible(future)
[13:20:24.517]                   }), .cleanup = FALSE, .init = FALSE)
[13:20:24.517]                 }
[13:20:24.517]             }
[13:20:24.517]         }
[13:20:24.517]     })
[13:20:24.517]     if (TRUE) {
[13:20:24.517]         base::sink(type = "output", split = FALSE)
[13:20:24.517]         if (TRUE) {
[13:20:24.517]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:20:24.517]         }
[13:20:24.517]         else {
[13:20:24.517]             ...future.result["stdout"] <- base::list(NULL)
[13:20:24.517]         }
[13:20:24.517]         base::close(...future.stdout)
[13:20:24.517]         ...future.stdout <- NULL
[13:20:24.517]     }
[13:20:24.517]     ...future.result$conditions <- ...future.conditions
[13:20:24.517]     ...future.result$finished <- base::Sys.time()
[13:20:24.517]     ...future.result
[13:20:24.517] }
[13:20:24.519] plan(): Setting new future strategy stack:
[13:20:24.519] List of future strategies:
[13:20:24.519] 1. sequential:
[13:20:24.519]    - args: function (..., envir = parent.frame())
[13:20:24.519]    - tweaked: FALSE
[13:20:24.519]    - call: NULL
[13:20:24.519] plan(): nbrOfWorkers() = 1
[13:20:24.520] plan(): Setting new future strategy stack:
[13:20:24.520] List of future strategies:
[13:20:24.520] 1. sequential:
[13:20:24.520]    - args: function (..., envir = parent.frame())
[13:20:24.520]    - tweaked: FALSE
[13:20:24.520]    - call: future::plan("sequential")
[13:20:24.521] plan(): nbrOfWorkers() = 1
[13:20:24.521] SequentialFuture started (and completed)
[13:20:24.521] - Launch lazy future ... done
[13:20:24.521] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 71844787-37c5-4353-62d4-67e8625a75f6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[13:20:24.522] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[13:20:24.522] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[13:20:24.523] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[13:20:24.523] plan(): Setting new future strategy stack:
[13:20:24.523] List of future strategies:
[13:20:24.523] 1. FutureStrategy:
[13:20:24.523]    - args: function (..., envir = parent.frame())
[13:20:24.523]    - tweaked: FALSE
[13:20:24.523]    - call: future::plan(oplan)
[13:20:24.537] plan(): nbrOfWorkers() = 1
> 
