
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:12:25.758] plan(): Setting new future strategy stack:
[16:12:25.759] List of future strategies:
[16:12:25.759] 1. sequential:
[16:12:25.759]    - args: function (..., envir = parent.frame())
[16:12:25.759]    - tweaked: FALSE
[16:12:25.759]    - call: future::plan("sequential")
[16:12:25.771] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'list') ...
list()
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'add') ...
[16:12:25.805] getGlobalsAndPackages() ...
[16:12:25.805] Searching for globals...
[16:12:25.809] - globals found: [1] ‘{’
[16:12:25.809] Searching for globals ... DONE
[16:12:25.809] Resolving globals: FALSE
[16:12:25.809] 
[16:12:25.809] 
[16:12:25.809] getGlobalsAndPackages() ... DONE
[16:12:25.810] run() for ‘Future’ ...
[16:12:25.810] - state: ‘created’
[16:12:25.810] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.811] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.811] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.811]   - Field: ‘label’
[16:12:25.811]   - Field: ‘local’
[16:12:25.811]   - Field: ‘owner’
[16:12:25.811]   - Field: ‘envir’
[16:12:25.811]   - Field: ‘packages’
[16:12:25.811]   - Field: ‘gc’
[16:12:25.812]   - Field: ‘conditions’
[16:12:25.812]   - Field: ‘expr’
[16:12:25.812]   - Field: ‘uuid’
[16:12:25.812]   - Field: ‘seed’
[16:12:25.812]   - Field: ‘version’
[16:12:25.812]   - Field: ‘result’
[16:12:25.812]   - Field: ‘asynchronous’
[16:12:25.812]   - Field: ‘calls’
[16:12:25.812]   - Field: ‘globals’
[16:12:25.812]   - Field: ‘stdout’
[16:12:25.812]   - Field: ‘earlySignal’
[16:12:25.813]   - Field: ‘lazy’
[16:12:25.813]   - Field: ‘state’
[16:12:25.813] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.813] - Launch lazy future ...
[16:12:25.814] Packages needed by the future expression (n = 0): <none>
[16:12:25.814] Packages needed by future strategies (n = 0): <none>
[16:12:25.815] {
[16:12:25.815]     {
[16:12:25.815]         {
[16:12:25.815]             ...future.startTime <- base::Sys.time()
[16:12:25.815]             {
[16:12:25.815]                 {
[16:12:25.815]                   {
[16:12:25.815]                     base::local({
[16:12:25.815]                       has_future <- base::requireNamespace("future", 
[16:12:25.815]                         quietly = TRUE)
[16:12:25.815]                       if (has_future) {
[16:12:25.815]                         ns <- base::getNamespace("future")
[16:12:25.815]                         version <- ns[[".package"]][["version"]]
[16:12:25.815]                         if (is.null(version)) 
[16:12:25.815]                           version <- utils::packageVersion("future")
[16:12:25.815]                       }
[16:12:25.815]                       else {
[16:12:25.815]                         version <- NULL
[16:12:25.815]                       }
[16:12:25.815]                       if (!has_future || version < "1.8.0") {
[16:12:25.815]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.815]                           "", base::R.version$version.string), 
[16:12:25.815]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.815]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.815]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.815]                             "release", "version")], collapse = " "), 
[16:12:25.815]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.815]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.815]                           info)
[16:12:25.815]                         info <- base::paste(info, collapse = "; ")
[16:12:25.815]                         if (!has_future) {
[16:12:25.815]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.815]                             info)
[16:12:25.815]                         }
[16:12:25.815]                         else {
[16:12:25.815]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.815]                             info, version)
[16:12:25.815]                         }
[16:12:25.815]                         base::stop(msg)
[16:12:25.815]                       }
[16:12:25.815]                     })
[16:12:25.815]                   }
[16:12:25.815]                   options(future.plan = NULL)
[16:12:25.815]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.815]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.815]                 }
[16:12:25.815]                 ...future.workdir <- getwd()
[16:12:25.815]             }
[16:12:25.815]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.815]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.815]         }
[16:12:25.815]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.815]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.815]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.815]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.815]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.815]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.815]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.815]             base::names(...future.oldOptions))
[16:12:25.815]     }
[16:12:25.815]     if (FALSE) {
[16:12:25.815]     }
[16:12:25.815]     else {
[16:12:25.815]         if (TRUE) {
[16:12:25.815]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.815]                 open = "w")
[16:12:25.815]         }
[16:12:25.815]         else {
[16:12:25.815]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.815]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.815]         }
[16:12:25.815]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.815]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.815]             base::sink(type = "output", split = FALSE)
[16:12:25.815]             base::close(...future.stdout)
[16:12:25.815]         }, add = TRUE)
[16:12:25.815]     }
[16:12:25.815]     ...future.frame <- base::sys.nframe()
[16:12:25.815]     ...future.conditions <- base::list()
[16:12:25.815]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.815]     if (FALSE) {
[16:12:25.815]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.815]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.815]     }
[16:12:25.815]     ...future.result <- base::tryCatch({
[16:12:25.815]         base::withCallingHandlers({
[16:12:25.815]             ...future.value <- base::withVisible(base::local({
[16:12:25.815]                 1
[16:12:25.815]             }))
[16:12:25.815]             future::FutureResult(value = ...future.value$value, 
[16:12:25.815]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.815]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.815]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.815]                     ...future.globalenv.names))
[16:12:25.815]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.815]         }, condition = base::local({
[16:12:25.815]             c <- base::c
[16:12:25.815]             inherits <- base::inherits
[16:12:25.815]             invokeRestart <- base::invokeRestart
[16:12:25.815]             length <- base::length
[16:12:25.815]             list <- base::list
[16:12:25.815]             seq.int <- base::seq.int
[16:12:25.815]             signalCondition <- base::signalCondition
[16:12:25.815]             sys.calls <- base::sys.calls
[16:12:25.815]             `[[` <- base::`[[`
[16:12:25.815]             `+` <- base::`+`
[16:12:25.815]             `<<-` <- base::`<<-`
[16:12:25.815]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.815]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.815]                   3L)]
[16:12:25.815]             }
[16:12:25.815]             function(cond) {
[16:12:25.815]                 is_error <- inherits(cond, "error")
[16:12:25.815]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.815]                   NULL)
[16:12:25.815]                 if (is_error) {
[16:12:25.815]                   sessionInformation <- function() {
[16:12:25.815]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.815]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.815]                       search = base::search(), system = base::Sys.info())
[16:12:25.815]                   }
[16:12:25.815]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.815]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.815]                     cond$call), session = sessionInformation(), 
[16:12:25.815]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.815]                   signalCondition(cond)
[16:12:25.815]                 }
[16:12:25.815]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.815]                 "immediateCondition"))) {
[16:12:25.815]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.815]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.815]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.815]                   if (TRUE && !signal) {
[16:12:25.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.815]                     {
[16:12:25.815]                       inherits <- base::inherits
[16:12:25.815]                       invokeRestart <- base::invokeRestart
[16:12:25.815]                       is.null <- base::is.null
[16:12:25.815]                       muffled <- FALSE
[16:12:25.815]                       if (inherits(cond, "message")) {
[16:12:25.815]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.815]                         if (muffled) 
[16:12:25.815]                           invokeRestart("muffleMessage")
[16:12:25.815]                       }
[16:12:25.815]                       else if (inherits(cond, "warning")) {
[16:12:25.815]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.815]                         if (muffled) 
[16:12:25.815]                           invokeRestart("muffleWarning")
[16:12:25.815]                       }
[16:12:25.815]                       else if (inherits(cond, "condition")) {
[16:12:25.815]                         if (!is.null(pattern)) {
[16:12:25.815]                           computeRestarts <- base::computeRestarts
[16:12:25.815]                           grepl <- base::grepl
[16:12:25.815]                           restarts <- computeRestarts(cond)
[16:12:25.815]                           for (restart in restarts) {
[16:12:25.815]                             name <- restart$name
[16:12:25.815]                             if (is.null(name)) 
[16:12:25.815]                               next
[16:12:25.815]                             if (!grepl(pattern, name)) 
[16:12:25.815]                               next
[16:12:25.815]                             invokeRestart(restart)
[16:12:25.815]                             muffled <- TRUE
[16:12:25.815]                             break
[16:12:25.815]                           }
[16:12:25.815]                         }
[16:12:25.815]                       }
[16:12:25.815]                       invisible(muffled)
[16:12:25.815]                     }
[16:12:25.815]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.815]                   }
[16:12:25.815]                 }
[16:12:25.815]                 else {
[16:12:25.815]                   if (TRUE) {
[16:12:25.815]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.815]                     {
[16:12:25.815]                       inherits <- base::inherits
[16:12:25.815]                       invokeRestart <- base::invokeRestart
[16:12:25.815]                       is.null <- base::is.null
[16:12:25.815]                       muffled <- FALSE
[16:12:25.815]                       if (inherits(cond, "message")) {
[16:12:25.815]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.815]                         if (muffled) 
[16:12:25.815]                           invokeRestart("muffleMessage")
[16:12:25.815]                       }
[16:12:25.815]                       else if (inherits(cond, "warning")) {
[16:12:25.815]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.815]                         if (muffled) 
[16:12:25.815]                           invokeRestart("muffleWarning")
[16:12:25.815]                       }
[16:12:25.815]                       else if (inherits(cond, "condition")) {
[16:12:25.815]                         if (!is.null(pattern)) {
[16:12:25.815]                           computeRestarts <- base::computeRestarts
[16:12:25.815]                           grepl <- base::grepl
[16:12:25.815]                           restarts <- computeRestarts(cond)
[16:12:25.815]                           for (restart in restarts) {
[16:12:25.815]                             name <- restart$name
[16:12:25.815]                             if (is.null(name)) 
[16:12:25.815]                               next
[16:12:25.815]                             if (!grepl(pattern, name)) 
[16:12:25.815]                               next
[16:12:25.815]                             invokeRestart(restart)
[16:12:25.815]                             muffled <- TRUE
[16:12:25.815]                             break
[16:12:25.815]                           }
[16:12:25.815]                         }
[16:12:25.815]                       }
[16:12:25.815]                       invisible(muffled)
[16:12:25.815]                     }
[16:12:25.815]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.815]                   }
[16:12:25.815]                 }
[16:12:25.815]             }
[16:12:25.815]         }))
[16:12:25.815]     }, error = function(ex) {
[16:12:25.815]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.815]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.815]                 ...future.rng), started = ...future.startTime, 
[16:12:25.815]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.815]             version = "1.8"), class = "FutureResult")
[16:12:25.815]     }, finally = {
[16:12:25.815]         if (!identical(...future.workdir, getwd())) 
[16:12:25.815]             setwd(...future.workdir)
[16:12:25.815]         {
[16:12:25.815]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.815]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.815]             }
[16:12:25.815]             base::options(...future.oldOptions)
[16:12:25.815]             if (.Platform$OS.type == "windows") {
[16:12:25.815]                 old_names <- names(...future.oldEnvVars)
[16:12:25.815]                 envs <- base::Sys.getenv()
[16:12:25.815]                 names <- names(envs)
[16:12:25.815]                 common <- intersect(names, old_names)
[16:12:25.815]                 added <- setdiff(names, old_names)
[16:12:25.815]                 removed <- setdiff(old_names, names)
[16:12:25.815]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.815]                   envs[common]]
[16:12:25.815]                 NAMES <- toupper(changed)
[16:12:25.815]                 args <- list()
[16:12:25.815]                 for (kk in seq_along(NAMES)) {
[16:12:25.815]                   name <- changed[[kk]]
[16:12:25.815]                   NAME <- NAMES[[kk]]
[16:12:25.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.815]                     next
[16:12:25.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.815]                 }
[16:12:25.815]                 NAMES <- toupper(added)
[16:12:25.815]                 for (kk in seq_along(NAMES)) {
[16:12:25.815]                   name <- added[[kk]]
[16:12:25.815]                   NAME <- NAMES[[kk]]
[16:12:25.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.815]                     next
[16:12:25.815]                   args[[name]] <- ""
[16:12:25.815]                 }
[16:12:25.815]                 NAMES <- toupper(removed)
[16:12:25.815]                 for (kk in seq_along(NAMES)) {
[16:12:25.815]                   name <- removed[[kk]]
[16:12:25.815]                   NAME <- NAMES[[kk]]
[16:12:25.815]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.815]                     next
[16:12:25.815]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.815]                 }
[16:12:25.815]                 if (length(args) > 0) 
[16:12:25.815]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.815]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.815]             }
[16:12:25.815]             else {
[16:12:25.815]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.815]             }
[16:12:25.815]             {
[16:12:25.815]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.815]                   0L) {
[16:12:25.815]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.815]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.815]                   base::options(opts)
[16:12:25.815]                 }
[16:12:25.815]                 {
[16:12:25.815]                   {
[16:12:25.815]                     NULL
[16:12:25.815]                     RNGkind("Mersenne-Twister")
[16:12:25.815]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.815]                       inherits = FALSE)
[16:12:25.815]                   }
[16:12:25.815]                   options(future.plan = NULL)
[16:12:25.815]                   if (is.na(NA_character_)) 
[16:12:25.815]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.815]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.815]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.815]                   {
[16:12:25.815]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.815]                     if (!future$lazy) 
[16:12:25.815]                       future <- run(future)
[16:12:25.815]                     invisible(future)
[16:12:25.815]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.815]                 }
[16:12:25.815]             }
[16:12:25.815]         }
[16:12:25.815]     })
[16:12:25.815]     if (TRUE) {
[16:12:25.815]         base::sink(type = "output", split = FALSE)
[16:12:25.815]         if (TRUE) {
[16:12:25.815]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.815]         }
[16:12:25.815]         else {
[16:12:25.815]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.815]         }
[16:12:25.815]         base::close(...future.stdout)
[16:12:25.815]         ...future.stdout <- NULL
[16:12:25.815]     }
[16:12:25.815]     ...future.result$conditions <- ...future.conditions
[16:12:25.815]     ...future.result$finished <- base::Sys.time()
[16:12:25.815]     ...future.result
[16:12:25.815] }
[16:12:25.816] plan(): Setting new future strategy stack:
[16:12:25.817] List of future strategies:
[16:12:25.817] 1. sequential:
[16:12:25.817]    - args: function (..., envir = parent.frame())
[16:12:25.817]    - tweaked: FALSE
[16:12:25.817]    - call: NULL
[16:12:25.817] plan(): nbrOfWorkers() = 1
[16:12:25.818] plan(): Setting new future strategy stack:
[16:12:25.818] List of future strategies:
[16:12:25.818] 1. sequential:
[16:12:25.818]    - args: function (..., envir = parent.frame())
[16:12:25.818]    - tweaked: FALSE
[16:12:25.818]    - call: future::plan("sequential")
[16:12:25.818] plan(): nbrOfWorkers() = 1
[16:12:25.819] SequentialFuture started (and completed)
[16:12:25.819] - Launch lazy future ... done
[16:12:25.819] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'remove') ...
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'list') ...
list()
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'add') ...
[16:12:25.823] getGlobalsAndPackages() ...
[16:12:25.823] Searching for globals...
[16:12:25.824] - globals found: [1] ‘{’
[16:12:25.824] Searching for globals ... DONE
[16:12:25.824] Resolving globals: FALSE
[16:12:25.824] 
[16:12:25.824] 
[16:12:25.824] getGlobalsAndPackages() ... DONE
[16:12:25.824] run() for ‘Future’ ...
[16:12:25.825] - state: ‘created’
[16:12:25.825] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.825] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.825] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.825]   - Field: ‘label’
[16:12:25.825]   - Field: ‘local’
[16:12:25.825]   - Field: ‘owner’
[16:12:25.825]   - Field: ‘envir’
[16:12:25.825]   - Field: ‘packages’
[16:12:25.826]   - Field: ‘gc’
[16:12:25.826]   - Field: ‘conditions’
[16:12:25.826]   - Field: ‘expr’
[16:12:25.826]   - Field: ‘uuid’
[16:12:25.826]   - Field: ‘seed’
[16:12:25.826]   - Field: ‘version’
[16:12:25.826]   - Field: ‘result’
[16:12:25.826]   - Field: ‘asynchronous’
[16:12:25.826]   - Field: ‘calls’
[16:12:25.826]   - Field: ‘globals’
[16:12:25.826]   - Field: ‘stdout’
[16:12:25.827]   - Field: ‘earlySignal’
[16:12:25.827]   - Field: ‘lazy’
[16:12:25.827]   - Field: ‘state’
[16:12:25.827] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.827] - Launch lazy future ...
[16:12:25.827] Packages needed by the future expression (n = 0): <none>
[16:12:25.827] Packages needed by future strategies (n = 0): <none>
[16:12:25.828] {
[16:12:25.828]     {
[16:12:25.828]         {
[16:12:25.828]             ...future.startTime <- base::Sys.time()
[16:12:25.828]             {
[16:12:25.828]                 {
[16:12:25.828]                   {
[16:12:25.828]                     base::local({
[16:12:25.828]                       has_future <- base::requireNamespace("future", 
[16:12:25.828]                         quietly = TRUE)
[16:12:25.828]                       if (has_future) {
[16:12:25.828]                         ns <- base::getNamespace("future")
[16:12:25.828]                         version <- ns[[".package"]][["version"]]
[16:12:25.828]                         if (is.null(version)) 
[16:12:25.828]                           version <- utils::packageVersion("future")
[16:12:25.828]                       }
[16:12:25.828]                       else {
[16:12:25.828]                         version <- NULL
[16:12:25.828]                       }
[16:12:25.828]                       if (!has_future || version < "1.8.0") {
[16:12:25.828]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.828]                           "", base::R.version$version.string), 
[16:12:25.828]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.828]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.828]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.828]                             "release", "version")], collapse = " "), 
[16:12:25.828]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.828]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.828]                           info)
[16:12:25.828]                         info <- base::paste(info, collapse = "; ")
[16:12:25.828]                         if (!has_future) {
[16:12:25.828]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.828]                             info)
[16:12:25.828]                         }
[16:12:25.828]                         else {
[16:12:25.828]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.828]                             info, version)
[16:12:25.828]                         }
[16:12:25.828]                         base::stop(msg)
[16:12:25.828]                       }
[16:12:25.828]                     })
[16:12:25.828]                   }
[16:12:25.828]                   options(future.plan = NULL)
[16:12:25.828]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.828]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.828]                 }
[16:12:25.828]                 ...future.workdir <- getwd()
[16:12:25.828]             }
[16:12:25.828]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.828]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.828]         }
[16:12:25.828]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.828]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.828]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.828]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.828]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.828]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.828]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.828]             base::names(...future.oldOptions))
[16:12:25.828]     }
[16:12:25.828]     if (FALSE) {
[16:12:25.828]     }
[16:12:25.828]     else {
[16:12:25.828]         if (TRUE) {
[16:12:25.828]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.828]                 open = "w")
[16:12:25.828]         }
[16:12:25.828]         else {
[16:12:25.828]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.828]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.828]         }
[16:12:25.828]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.828]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.828]             base::sink(type = "output", split = FALSE)
[16:12:25.828]             base::close(...future.stdout)
[16:12:25.828]         }, add = TRUE)
[16:12:25.828]     }
[16:12:25.828]     ...future.frame <- base::sys.nframe()
[16:12:25.828]     ...future.conditions <- base::list()
[16:12:25.828]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.828]     if (FALSE) {
[16:12:25.828]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.828]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.828]     }
[16:12:25.828]     ...future.result <- base::tryCatch({
[16:12:25.828]         base::withCallingHandlers({
[16:12:25.828]             ...future.value <- base::withVisible(base::local({
[16:12:25.828]                 2
[16:12:25.828]             }))
[16:12:25.828]             future::FutureResult(value = ...future.value$value, 
[16:12:25.828]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.828]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.828]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.828]                     ...future.globalenv.names))
[16:12:25.828]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.828]         }, condition = base::local({
[16:12:25.828]             c <- base::c
[16:12:25.828]             inherits <- base::inherits
[16:12:25.828]             invokeRestart <- base::invokeRestart
[16:12:25.828]             length <- base::length
[16:12:25.828]             list <- base::list
[16:12:25.828]             seq.int <- base::seq.int
[16:12:25.828]             signalCondition <- base::signalCondition
[16:12:25.828]             sys.calls <- base::sys.calls
[16:12:25.828]             `[[` <- base::`[[`
[16:12:25.828]             `+` <- base::`+`
[16:12:25.828]             `<<-` <- base::`<<-`
[16:12:25.828]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.828]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.828]                   3L)]
[16:12:25.828]             }
[16:12:25.828]             function(cond) {
[16:12:25.828]                 is_error <- inherits(cond, "error")
[16:12:25.828]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.828]                   NULL)
[16:12:25.828]                 if (is_error) {
[16:12:25.828]                   sessionInformation <- function() {
[16:12:25.828]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.828]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.828]                       search = base::search(), system = base::Sys.info())
[16:12:25.828]                   }
[16:12:25.828]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.828]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.828]                     cond$call), session = sessionInformation(), 
[16:12:25.828]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.828]                   signalCondition(cond)
[16:12:25.828]                 }
[16:12:25.828]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.828]                 "immediateCondition"))) {
[16:12:25.828]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.828]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.828]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.828]                   if (TRUE && !signal) {
[16:12:25.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.828]                     {
[16:12:25.828]                       inherits <- base::inherits
[16:12:25.828]                       invokeRestart <- base::invokeRestart
[16:12:25.828]                       is.null <- base::is.null
[16:12:25.828]                       muffled <- FALSE
[16:12:25.828]                       if (inherits(cond, "message")) {
[16:12:25.828]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.828]                         if (muffled) 
[16:12:25.828]                           invokeRestart("muffleMessage")
[16:12:25.828]                       }
[16:12:25.828]                       else if (inherits(cond, "warning")) {
[16:12:25.828]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.828]                         if (muffled) 
[16:12:25.828]                           invokeRestart("muffleWarning")
[16:12:25.828]                       }
[16:12:25.828]                       else if (inherits(cond, "condition")) {
[16:12:25.828]                         if (!is.null(pattern)) {
[16:12:25.828]                           computeRestarts <- base::computeRestarts
[16:12:25.828]                           grepl <- base::grepl
[16:12:25.828]                           restarts <- computeRestarts(cond)
[16:12:25.828]                           for (restart in restarts) {
[16:12:25.828]                             name <- restart$name
[16:12:25.828]                             if (is.null(name)) 
[16:12:25.828]                               next
[16:12:25.828]                             if (!grepl(pattern, name)) 
[16:12:25.828]                               next
[16:12:25.828]                             invokeRestart(restart)
[16:12:25.828]                             muffled <- TRUE
[16:12:25.828]                             break
[16:12:25.828]                           }
[16:12:25.828]                         }
[16:12:25.828]                       }
[16:12:25.828]                       invisible(muffled)
[16:12:25.828]                     }
[16:12:25.828]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.828]                   }
[16:12:25.828]                 }
[16:12:25.828]                 else {
[16:12:25.828]                   if (TRUE) {
[16:12:25.828]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.828]                     {
[16:12:25.828]                       inherits <- base::inherits
[16:12:25.828]                       invokeRestart <- base::invokeRestart
[16:12:25.828]                       is.null <- base::is.null
[16:12:25.828]                       muffled <- FALSE
[16:12:25.828]                       if (inherits(cond, "message")) {
[16:12:25.828]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.828]                         if (muffled) 
[16:12:25.828]                           invokeRestart("muffleMessage")
[16:12:25.828]                       }
[16:12:25.828]                       else if (inherits(cond, "warning")) {
[16:12:25.828]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.828]                         if (muffled) 
[16:12:25.828]                           invokeRestart("muffleWarning")
[16:12:25.828]                       }
[16:12:25.828]                       else if (inherits(cond, "condition")) {
[16:12:25.828]                         if (!is.null(pattern)) {
[16:12:25.828]                           computeRestarts <- base::computeRestarts
[16:12:25.828]                           grepl <- base::grepl
[16:12:25.828]                           restarts <- computeRestarts(cond)
[16:12:25.828]                           for (restart in restarts) {
[16:12:25.828]                             name <- restart$name
[16:12:25.828]                             if (is.null(name)) 
[16:12:25.828]                               next
[16:12:25.828]                             if (!grepl(pattern, name)) 
[16:12:25.828]                               next
[16:12:25.828]                             invokeRestart(restart)
[16:12:25.828]                             muffled <- TRUE
[16:12:25.828]                             break
[16:12:25.828]                           }
[16:12:25.828]                         }
[16:12:25.828]                       }
[16:12:25.828]                       invisible(muffled)
[16:12:25.828]                     }
[16:12:25.828]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.828]                   }
[16:12:25.828]                 }
[16:12:25.828]             }
[16:12:25.828]         }))
[16:12:25.828]     }, error = function(ex) {
[16:12:25.828]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.828]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.828]                 ...future.rng), started = ...future.startTime, 
[16:12:25.828]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.828]             version = "1.8"), class = "FutureResult")
[16:12:25.828]     }, finally = {
[16:12:25.828]         if (!identical(...future.workdir, getwd())) 
[16:12:25.828]             setwd(...future.workdir)
[16:12:25.828]         {
[16:12:25.828]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.828]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.828]             }
[16:12:25.828]             base::options(...future.oldOptions)
[16:12:25.828]             if (.Platform$OS.type == "windows") {
[16:12:25.828]                 old_names <- names(...future.oldEnvVars)
[16:12:25.828]                 envs <- base::Sys.getenv()
[16:12:25.828]                 names <- names(envs)
[16:12:25.828]                 common <- intersect(names, old_names)
[16:12:25.828]                 added <- setdiff(names, old_names)
[16:12:25.828]                 removed <- setdiff(old_names, names)
[16:12:25.828]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.828]                   envs[common]]
[16:12:25.828]                 NAMES <- toupper(changed)
[16:12:25.828]                 args <- list()
[16:12:25.828]                 for (kk in seq_along(NAMES)) {
[16:12:25.828]                   name <- changed[[kk]]
[16:12:25.828]                   NAME <- NAMES[[kk]]
[16:12:25.828]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.828]                     next
[16:12:25.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.828]                 }
[16:12:25.828]                 NAMES <- toupper(added)
[16:12:25.828]                 for (kk in seq_along(NAMES)) {
[16:12:25.828]                   name <- added[[kk]]
[16:12:25.828]                   NAME <- NAMES[[kk]]
[16:12:25.828]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.828]                     next
[16:12:25.828]                   args[[name]] <- ""
[16:12:25.828]                 }
[16:12:25.828]                 NAMES <- toupper(removed)
[16:12:25.828]                 for (kk in seq_along(NAMES)) {
[16:12:25.828]                   name <- removed[[kk]]
[16:12:25.828]                   NAME <- NAMES[[kk]]
[16:12:25.828]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.828]                     next
[16:12:25.828]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.828]                 }
[16:12:25.828]                 if (length(args) > 0) 
[16:12:25.828]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.828]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.828]             }
[16:12:25.828]             else {
[16:12:25.828]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.828]             }
[16:12:25.828]             {
[16:12:25.828]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.828]                   0L) {
[16:12:25.828]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.828]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.828]                   base::options(opts)
[16:12:25.828]                 }
[16:12:25.828]                 {
[16:12:25.828]                   {
[16:12:25.828]                     NULL
[16:12:25.828]                     RNGkind("Mersenne-Twister")
[16:12:25.828]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.828]                       inherits = FALSE)
[16:12:25.828]                   }
[16:12:25.828]                   options(future.plan = NULL)
[16:12:25.828]                   if (is.na(NA_character_)) 
[16:12:25.828]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.828]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.828]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.828]                   {
[16:12:25.828]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.828]                     if (!future$lazy) 
[16:12:25.828]                       future <- run(future)
[16:12:25.828]                     invisible(future)
[16:12:25.828]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.828]                 }
[16:12:25.828]             }
[16:12:25.828]         }
[16:12:25.828]     })
[16:12:25.828]     if (TRUE) {
[16:12:25.828]         base::sink(type = "output", split = FALSE)
[16:12:25.828]         if (TRUE) {
[16:12:25.828]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.828]         }
[16:12:25.828]         else {
[16:12:25.828]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.828]         }
[16:12:25.828]         base::close(...future.stdout)
[16:12:25.828]         ...future.stdout <- NULL
[16:12:25.828]     }
[16:12:25.828]     ...future.result$conditions <- ...future.conditions
[16:12:25.828]     ...future.result$finished <- base::Sys.time()
[16:12:25.828]     ...future.result
[16:12:25.828] }
[16:12:25.829] plan(): Setting new future strategy stack:
[16:12:25.829] List of future strategies:
[16:12:25.829] 1. sequential:
[16:12:25.829]    - args: function (..., envir = parent.frame())
[16:12:25.829]    - tweaked: FALSE
[16:12:25.829]    - call: NULL
[16:12:25.830] plan(): nbrOfWorkers() = 1
[16:12:25.830] plan(): Setting new future strategy stack:
[16:12:25.830] List of future strategies:
[16:12:25.830] 1. sequential:
[16:12:25.830]    - args: function (..., envir = parent.frame())
[16:12:25.830]    - tweaked: FALSE
[16:12:25.830]    - call: future::plan("sequential")
[16:12:25.831] plan(): nbrOfWorkers() = 1
[16:12:25.831] SequentialFuture started (and completed)
[16:12:25.831] - Launch lazy future ... done
[16:12:25.831] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'collect-first') ...
[16:12:25.834] resolved() for ‘SequentialFuture’ ...
[16:12:25.834] - state: ‘finished’
[16:12:25.834] - run: FALSE
[16:12:25.834] - result: ‘FutureResult’
[16:12:25.834] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'add') ...
[16:12:25.835] getGlobalsAndPackages() ...
[16:12:25.835] Searching for globals...
[16:12:25.835] - globals found: [1] ‘{’
[16:12:25.835] Searching for globals ... DONE
[16:12:25.836] Resolving globals: FALSE
[16:12:25.836] 
[16:12:25.836] 
[16:12:25.836] getGlobalsAndPackages() ... DONE
[16:12:25.836] run() for ‘Future’ ...
[16:12:25.836] - state: ‘created’
[16:12:25.836] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.837] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.837] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.837]   - Field: ‘label’
[16:12:25.837]   - Field: ‘local’
[16:12:25.837]   - Field: ‘owner’
[16:12:25.837]   - Field: ‘envir’
[16:12:25.837]   - Field: ‘packages’
[16:12:25.837]   - Field: ‘gc’
[16:12:25.837]   - Field: ‘conditions’
[16:12:25.838]   - Field: ‘expr’
[16:12:25.838]   - Field: ‘uuid’
[16:12:25.838]   - Field: ‘seed’
[16:12:25.838]   - Field: ‘version’
[16:12:25.838]   - Field: ‘result’
[16:12:25.838]   - Field: ‘asynchronous’
[16:12:25.838]   - Field: ‘calls’
[16:12:25.838]   - Field: ‘globals’
[16:12:25.838]   - Field: ‘stdout’
[16:12:25.838]   - Field: ‘earlySignal’
[16:12:25.839]   - Field: ‘lazy’
[16:12:25.839]   - Field: ‘state’
[16:12:25.839] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.839] - Launch lazy future ...
[16:12:25.839] Packages needed by the future expression (n = 0): <none>
[16:12:25.839] Packages needed by future strategies (n = 0): <none>
[16:12:25.839] {
[16:12:25.839]     {
[16:12:25.839]         {
[16:12:25.839]             ...future.startTime <- base::Sys.time()
[16:12:25.839]             {
[16:12:25.839]                 {
[16:12:25.839]                   {
[16:12:25.839]                     base::local({
[16:12:25.839]                       has_future <- base::requireNamespace("future", 
[16:12:25.839]                         quietly = TRUE)
[16:12:25.839]                       if (has_future) {
[16:12:25.839]                         ns <- base::getNamespace("future")
[16:12:25.839]                         version <- ns[[".package"]][["version"]]
[16:12:25.839]                         if (is.null(version)) 
[16:12:25.839]                           version <- utils::packageVersion("future")
[16:12:25.839]                       }
[16:12:25.839]                       else {
[16:12:25.839]                         version <- NULL
[16:12:25.839]                       }
[16:12:25.839]                       if (!has_future || version < "1.8.0") {
[16:12:25.839]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.839]                           "", base::R.version$version.string), 
[16:12:25.839]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.839]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.839]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.839]                             "release", "version")], collapse = " "), 
[16:12:25.839]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.839]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.839]                           info)
[16:12:25.839]                         info <- base::paste(info, collapse = "; ")
[16:12:25.839]                         if (!has_future) {
[16:12:25.839]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.839]                             info)
[16:12:25.839]                         }
[16:12:25.839]                         else {
[16:12:25.839]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.839]                             info, version)
[16:12:25.839]                         }
[16:12:25.839]                         base::stop(msg)
[16:12:25.839]                       }
[16:12:25.839]                     })
[16:12:25.839]                   }
[16:12:25.839]                   options(future.plan = NULL)
[16:12:25.839]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.839]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.839]                 }
[16:12:25.839]                 ...future.workdir <- getwd()
[16:12:25.839]             }
[16:12:25.839]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.839]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.839]         }
[16:12:25.839]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.839]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.839]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.839]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.839]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.839]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.839]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.839]             base::names(...future.oldOptions))
[16:12:25.839]     }
[16:12:25.839]     if (FALSE) {
[16:12:25.839]     }
[16:12:25.839]     else {
[16:12:25.839]         if (TRUE) {
[16:12:25.839]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.839]                 open = "w")
[16:12:25.839]         }
[16:12:25.839]         else {
[16:12:25.839]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.839]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.839]         }
[16:12:25.839]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.839]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.839]             base::sink(type = "output", split = FALSE)
[16:12:25.839]             base::close(...future.stdout)
[16:12:25.839]         }, add = TRUE)
[16:12:25.839]     }
[16:12:25.839]     ...future.frame <- base::sys.nframe()
[16:12:25.839]     ...future.conditions <- base::list()
[16:12:25.839]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.839]     if (FALSE) {
[16:12:25.839]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.839]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.839]     }
[16:12:25.839]     ...future.result <- base::tryCatch({
[16:12:25.839]         base::withCallingHandlers({
[16:12:25.839]             ...future.value <- base::withVisible(base::local({
[16:12:25.839]                 2
[16:12:25.839]             }))
[16:12:25.839]             future::FutureResult(value = ...future.value$value, 
[16:12:25.839]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.839]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.839]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.839]                     ...future.globalenv.names))
[16:12:25.839]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.839]         }, condition = base::local({
[16:12:25.839]             c <- base::c
[16:12:25.839]             inherits <- base::inherits
[16:12:25.839]             invokeRestart <- base::invokeRestart
[16:12:25.839]             length <- base::length
[16:12:25.839]             list <- base::list
[16:12:25.839]             seq.int <- base::seq.int
[16:12:25.839]             signalCondition <- base::signalCondition
[16:12:25.839]             sys.calls <- base::sys.calls
[16:12:25.839]             `[[` <- base::`[[`
[16:12:25.839]             `+` <- base::`+`
[16:12:25.839]             `<<-` <- base::`<<-`
[16:12:25.839]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.839]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.839]                   3L)]
[16:12:25.839]             }
[16:12:25.839]             function(cond) {
[16:12:25.839]                 is_error <- inherits(cond, "error")
[16:12:25.839]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.839]                   NULL)
[16:12:25.839]                 if (is_error) {
[16:12:25.839]                   sessionInformation <- function() {
[16:12:25.839]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.839]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.839]                       search = base::search(), system = base::Sys.info())
[16:12:25.839]                   }
[16:12:25.839]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.839]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.839]                     cond$call), session = sessionInformation(), 
[16:12:25.839]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.839]                   signalCondition(cond)
[16:12:25.839]                 }
[16:12:25.839]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.839]                 "immediateCondition"))) {
[16:12:25.839]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.839]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.839]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.839]                   if (TRUE && !signal) {
[16:12:25.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.839]                     {
[16:12:25.839]                       inherits <- base::inherits
[16:12:25.839]                       invokeRestart <- base::invokeRestart
[16:12:25.839]                       is.null <- base::is.null
[16:12:25.839]                       muffled <- FALSE
[16:12:25.839]                       if (inherits(cond, "message")) {
[16:12:25.839]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.839]                         if (muffled) 
[16:12:25.839]                           invokeRestart("muffleMessage")
[16:12:25.839]                       }
[16:12:25.839]                       else if (inherits(cond, "warning")) {
[16:12:25.839]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.839]                         if (muffled) 
[16:12:25.839]                           invokeRestart("muffleWarning")
[16:12:25.839]                       }
[16:12:25.839]                       else if (inherits(cond, "condition")) {
[16:12:25.839]                         if (!is.null(pattern)) {
[16:12:25.839]                           computeRestarts <- base::computeRestarts
[16:12:25.839]                           grepl <- base::grepl
[16:12:25.839]                           restarts <- computeRestarts(cond)
[16:12:25.839]                           for (restart in restarts) {
[16:12:25.839]                             name <- restart$name
[16:12:25.839]                             if (is.null(name)) 
[16:12:25.839]                               next
[16:12:25.839]                             if (!grepl(pattern, name)) 
[16:12:25.839]                               next
[16:12:25.839]                             invokeRestart(restart)
[16:12:25.839]                             muffled <- TRUE
[16:12:25.839]                             break
[16:12:25.839]                           }
[16:12:25.839]                         }
[16:12:25.839]                       }
[16:12:25.839]                       invisible(muffled)
[16:12:25.839]                     }
[16:12:25.839]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.839]                   }
[16:12:25.839]                 }
[16:12:25.839]                 else {
[16:12:25.839]                   if (TRUE) {
[16:12:25.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.839]                     {
[16:12:25.839]                       inherits <- base::inherits
[16:12:25.839]                       invokeRestart <- base::invokeRestart
[16:12:25.839]                       is.null <- base::is.null
[16:12:25.839]                       muffled <- FALSE
[16:12:25.839]                       if (inherits(cond, "message")) {
[16:12:25.839]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.839]                         if (muffled) 
[16:12:25.839]                           invokeRestart("muffleMessage")
[16:12:25.839]                       }
[16:12:25.839]                       else if (inherits(cond, "warning")) {
[16:12:25.839]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.839]                         if (muffled) 
[16:12:25.839]                           invokeRestart("muffleWarning")
[16:12:25.839]                       }
[16:12:25.839]                       else if (inherits(cond, "condition")) {
[16:12:25.839]                         if (!is.null(pattern)) {
[16:12:25.839]                           computeRestarts <- base::computeRestarts
[16:12:25.839]                           grepl <- base::grepl
[16:12:25.839]                           restarts <- computeRestarts(cond)
[16:12:25.839]                           for (restart in restarts) {
[16:12:25.839]                             name <- restart$name
[16:12:25.839]                             if (is.null(name)) 
[16:12:25.839]                               next
[16:12:25.839]                             if (!grepl(pattern, name)) 
[16:12:25.839]                               next
[16:12:25.839]                             invokeRestart(restart)
[16:12:25.839]                             muffled <- TRUE
[16:12:25.839]                             break
[16:12:25.839]                           }
[16:12:25.839]                         }
[16:12:25.839]                       }
[16:12:25.839]                       invisible(muffled)
[16:12:25.839]                     }
[16:12:25.839]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.839]                   }
[16:12:25.839]                 }
[16:12:25.839]             }
[16:12:25.839]         }))
[16:12:25.839]     }, error = function(ex) {
[16:12:25.839]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.839]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.839]                 ...future.rng), started = ...future.startTime, 
[16:12:25.839]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.839]             version = "1.8"), class = "FutureResult")
[16:12:25.839]     }, finally = {
[16:12:25.839]         if (!identical(...future.workdir, getwd())) 
[16:12:25.839]             setwd(...future.workdir)
[16:12:25.839]         {
[16:12:25.839]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.839]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.839]             }
[16:12:25.839]             base::options(...future.oldOptions)
[16:12:25.839]             if (.Platform$OS.type == "windows") {
[16:12:25.839]                 old_names <- names(...future.oldEnvVars)
[16:12:25.839]                 envs <- base::Sys.getenv()
[16:12:25.839]                 names <- names(envs)
[16:12:25.839]                 common <- intersect(names, old_names)
[16:12:25.839]                 added <- setdiff(names, old_names)
[16:12:25.839]                 removed <- setdiff(old_names, names)
[16:12:25.839]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.839]                   envs[common]]
[16:12:25.839]                 NAMES <- toupper(changed)
[16:12:25.839]                 args <- list()
[16:12:25.839]                 for (kk in seq_along(NAMES)) {
[16:12:25.839]                   name <- changed[[kk]]
[16:12:25.839]                   NAME <- NAMES[[kk]]
[16:12:25.839]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.839]                     next
[16:12:25.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.839]                 }
[16:12:25.839]                 NAMES <- toupper(added)
[16:12:25.839]                 for (kk in seq_along(NAMES)) {
[16:12:25.839]                   name <- added[[kk]]
[16:12:25.839]                   NAME <- NAMES[[kk]]
[16:12:25.839]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.839]                     next
[16:12:25.839]                   args[[name]] <- ""
[16:12:25.839]                 }
[16:12:25.839]                 NAMES <- toupper(removed)
[16:12:25.839]                 for (kk in seq_along(NAMES)) {
[16:12:25.839]                   name <- removed[[kk]]
[16:12:25.839]                   NAME <- NAMES[[kk]]
[16:12:25.839]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.839]                     next
[16:12:25.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.839]                 }
[16:12:25.839]                 if (length(args) > 0) 
[16:12:25.839]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.839]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.839]             }
[16:12:25.839]             else {
[16:12:25.839]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.839]             }
[16:12:25.839]             {
[16:12:25.839]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.839]                   0L) {
[16:12:25.839]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.839]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.839]                   base::options(opts)
[16:12:25.839]                 }
[16:12:25.839]                 {
[16:12:25.839]                   {
[16:12:25.839]                     NULL
[16:12:25.839]                     RNGkind("Mersenne-Twister")
[16:12:25.839]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.839]                       inherits = FALSE)
[16:12:25.839]                   }
[16:12:25.839]                   options(future.plan = NULL)
[16:12:25.839]                   if (is.na(NA_character_)) 
[16:12:25.839]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.839]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.839]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.839]                   {
[16:12:25.839]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.839]                     if (!future$lazy) 
[16:12:25.839]                       future <- run(future)
[16:12:25.839]                     invisible(future)
[16:12:25.839]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.839]                 }
[16:12:25.839]             }
[16:12:25.839]         }
[16:12:25.839]     })
[16:12:25.839]     if (TRUE) {
[16:12:25.839]         base::sink(type = "output", split = FALSE)
[16:12:25.839]         if (TRUE) {
[16:12:25.839]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.839]         }
[16:12:25.839]         else {
[16:12:25.839]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.839]         }
[16:12:25.839]         base::close(...future.stdout)
[16:12:25.839]         ...future.stdout <- NULL
[16:12:25.839]     }
[16:12:25.839]     ...future.result$conditions <- ...future.conditions
[16:12:25.839]     ...future.result$finished <- base::Sys.time()
[16:12:25.839]     ...future.result
[16:12:25.839] }
[16:12:25.841] plan(): Setting new future strategy stack:
[16:12:25.841] List of future strategies:
[16:12:25.841] 1. sequential:
[16:12:25.841]    - args: function (..., envir = parent.frame())
[16:12:25.841]    - tweaked: FALSE
[16:12:25.841]    - call: NULL
[16:12:25.842] plan(): nbrOfWorkers() = 1
[16:12:25.842] plan(): Setting new future strategy stack:
[16:12:25.842] List of future strategies:
[16:12:25.842] 1. sequential:
[16:12:25.842]    - args: function (..., envir = parent.frame())
[16:12:25.842]    - tweaked: FALSE
[16:12:25.842]    - call: future::plan("sequential")
[16:12:25.843] plan(): nbrOfWorkers() = 1
[16:12:25.843] SequentialFuture started (and completed)
[16:12:25.843] - Launch lazy future ... done
[16:12:25.843] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'reset') ...
*** FutureRegistry('multicore-b7b6aafa-3fc2-e0aa-f227-d9309d9f98af', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[16:12:25.844] getGlobalsAndPackages() ...
[16:12:25.844] Searching for globals...
[16:12:25.844] - globals found: [1] ‘{’
[16:12:25.845] Searching for globals ... DONE
[16:12:25.845] Resolving globals: FALSE
[16:12:25.845] 
[16:12:25.845] 
[16:12:25.845] getGlobalsAndPackages() ... DONE
[16:12:25.845] run() for ‘Future’ ...
[16:12:25.845] - state: ‘created’
[16:12:25.845] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.846] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.846] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.846]   - Field: ‘label’
[16:12:25.846]   - Field: ‘local’
[16:12:25.846]   - Field: ‘owner’
[16:12:25.846]   - Field: ‘envir’
[16:12:25.846]   - Field: ‘packages’
[16:12:25.846]   - Field: ‘gc’
[16:12:25.846]   - Field: ‘conditions’
[16:12:25.847]   - Field: ‘expr’
[16:12:25.847]   - Field: ‘uuid’
[16:12:25.847]   - Field: ‘seed’
[16:12:25.847]   - Field: ‘version’
[16:12:25.847]   - Field: ‘result’
[16:12:25.847]   - Field: ‘asynchronous’
[16:12:25.847]   - Field: ‘calls’
[16:12:25.847]   - Field: ‘globals’
[16:12:25.847]   - Field: ‘stdout’
[16:12:25.847]   - Field: ‘earlySignal’
[16:12:25.847]   - Field: ‘lazy’
[16:12:25.848]   - Field: ‘state’
[16:12:25.848] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.848] - Launch lazy future ...
[16:12:25.848] Packages needed by the future expression (n = 0): <none>
[16:12:25.848] Packages needed by future strategies (n = 0): <none>
[16:12:25.848] {
[16:12:25.848]     {
[16:12:25.848]         {
[16:12:25.848]             ...future.startTime <- base::Sys.time()
[16:12:25.848]             {
[16:12:25.848]                 {
[16:12:25.848]                   {
[16:12:25.848]                     base::local({
[16:12:25.848]                       has_future <- base::requireNamespace("future", 
[16:12:25.848]                         quietly = TRUE)
[16:12:25.848]                       if (has_future) {
[16:12:25.848]                         ns <- base::getNamespace("future")
[16:12:25.848]                         version <- ns[[".package"]][["version"]]
[16:12:25.848]                         if (is.null(version)) 
[16:12:25.848]                           version <- utils::packageVersion("future")
[16:12:25.848]                       }
[16:12:25.848]                       else {
[16:12:25.848]                         version <- NULL
[16:12:25.848]                       }
[16:12:25.848]                       if (!has_future || version < "1.8.0") {
[16:12:25.848]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.848]                           "", base::R.version$version.string), 
[16:12:25.848]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.848]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.848]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.848]                             "release", "version")], collapse = " "), 
[16:12:25.848]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.848]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.848]                           info)
[16:12:25.848]                         info <- base::paste(info, collapse = "; ")
[16:12:25.848]                         if (!has_future) {
[16:12:25.848]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.848]                             info)
[16:12:25.848]                         }
[16:12:25.848]                         else {
[16:12:25.848]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.848]                             info, version)
[16:12:25.848]                         }
[16:12:25.848]                         base::stop(msg)
[16:12:25.848]                       }
[16:12:25.848]                     })
[16:12:25.848]                   }
[16:12:25.848]                   options(future.plan = NULL)
[16:12:25.848]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.848]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.848]                 }
[16:12:25.848]                 ...future.workdir <- getwd()
[16:12:25.848]             }
[16:12:25.848]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.848]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.848]         }
[16:12:25.848]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.848]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.848]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.848]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.848]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.848]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.848]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.848]             base::names(...future.oldOptions))
[16:12:25.848]     }
[16:12:25.848]     if (FALSE) {
[16:12:25.848]     }
[16:12:25.848]     else {
[16:12:25.848]         if (TRUE) {
[16:12:25.848]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.848]                 open = "w")
[16:12:25.848]         }
[16:12:25.848]         else {
[16:12:25.848]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.848]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.848]         }
[16:12:25.848]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.848]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.848]             base::sink(type = "output", split = FALSE)
[16:12:25.848]             base::close(...future.stdout)
[16:12:25.848]         }, add = TRUE)
[16:12:25.848]     }
[16:12:25.848]     ...future.frame <- base::sys.nframe()
[16:12:25.848]     ...future.conditions <- base::list()
[16:12:25.848]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.848]     if (FALSE) {
[16:12:25.848]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.848]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.848]     }
[16:12:25.848]     ...future.result <- base::tryCatch({
[16:12:25.848]         base::withCallingHandlers({
[16:12:25.848]             ...future.value <- base::withVisible(base::local({
[16:12:25.848]                 1
[16:12:25.848]             }))
[16:12:25.848]             future::FutureResult(value = ...future.value$value, 
[16:12:25.848]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.848]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.848]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.848]                     ...future.globalenv.names))
[16:12:25.848]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.848]         }, condition = base::local({
[16:12:25.848]             c <- base::c
[16:12:25.848]             inherits <- base::inherits
[16:12:25.848]             invokeRestart <- base::invokeRestart
[16:12:25.848]             length <- base::length
[16:12:25.848]             list <- base::list
[16:12:25.848]             seq.int <- base::seq.int
[16:12:25.848]             signalCondition <- base::signalCondition
[16:12:25.848]             sys.calls <- base::sys.calls
[16:12:25.848]             `[[` <- base::`[[`
[16:12:25.848]             `+` <- base::`+`
[16:12:25.848]             `<<-` <- base::`<<-`
[16:12:25.848]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.848]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.848]                   3L)]
[16:12:25.848]             }
[16:12:25.848]             function(cond) {
[16:12:25.848]                 is_error <- inherits(cond, "error")
[16:12:25.848]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.848]                   NULL)
[16:12:25.848]                 if (is_error) {
[16:12:25.848]                   sessionInformation <- function() {
[16:12:25.848]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.848]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.848]                       search = base::search(), system = base::Sys.info())
[16:12:25.848]                   }
[16:12:25.848]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.848]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.848]                     cond$call), session = sessionInformation(), 
[16:12:25.848]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.848]                   signalCondition(cond)
[16:12:25.848]                 }
[16:12:25.848]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.848]                 "immediateCondition"))) {
[16:12:25.848]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.848]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.848]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.848]                   if (TRUE && !signal) {
[16:12:25.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.848]                     {
[16:12:25.848]                       inherits <- base::inherits
[16:12:25.848]                       invokeRestart <- base::invokeRestart
[16:12:25.848]                       is.null <- base::is.null
[16:12:25.848]                       muffled <- FALSE
[16:12:25.848]                       if (inherits(cond, "message")) {
[16:12:25.848]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.848]                         if (muffled) 
[16:12:25.848]                           invokeRestart("muffleMessage")
[16:12:25.848]                       }
[16:12:25.848]                       else if (inherits(cond, "warning")) {
[16:12:25.848]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.848]                         if (muffled) 
[16:12:25.848]                           invokeRestart("muffleWarning")
[16:12:25.848]                       }
[16:12:25.848]                       else if (inherits(cond, "condition")) {
[16:12:25.848]                         if (!is.null(pattern)) {
[16:12:25.848]                           computeRestarts <- base::computeRestarts
[16:12:25.848]                           grepl <- base::grepl
[16:12:25.848]                           restarts <- computeRestarts(cond)
[16:12:25.848]                           for (restart in restarts) {
[16:12:25.848]                             name <- restart$name
[16:12:25.848]                             if (is.null(name)) 
[16:12:25.848]                               next
[16:12:25.848]                             if (!grepl(pattern, name)) 
[16:12:25.848]                               next
[16:12:25.848]                             invokeRestart(restart)
[16:12:25.848]                             muffled <- TRUE
[16:12:25.848]                             break
[16:12:25.848]                           }
[16:12:25.848]                         }
[16:12:25.848]                       }
[16:12:25.848]                       invisible(muffled)
[16:12:25.848]                     }
[16:12:25.848]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.848]                   }
[16:12:25.848]                 }
[16:12:25.848]                 else {
[16:12:25.848]                   if (TRUE) {
[16:12:25.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.848]                     {
[16:12:25.848]                       inherits <- base::inherits
[16:12:25.848]                       invokeRestart <- base::invokeRestart
[16:12:25.848]                       is.null <- base::is.null
[16:12:25.848]                       muffled <- FALSE
[16:12:25.848]                       if (inherits(cond, "message")) {
[16:12:25.848]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.848]                         if (muffled) 
[16:12:25.848]                           invokeRestart("muffleMessage")
[16:12:25.848]                       }
[16:12:25.848]                       else if (inherits(cond, "warning")) {
[16:12:25.848]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.848]                         if (muffled) 
[16:12:25.848]                           invokeRestart("muffleWarning")
[16:12:25.848]                       }
[16:12:25.848]                       else if (inherits(cond, "condition")) {
[16:12:25.848]                         if (!is.null(pattern)) {
[16:12:25.848]                           computeRestarts <- base::computeRestarts
[16:12:25.848]                           grepl <- base::grepl
[16:12:25.848]                           restarts <- computeRestarts(cond)
[16:12:25.848]                           for (restart in restarts) {
[16:12:25.848]                             name <- restart$name
[16:12:25.848]                             if (is.null(name)) 
[16:12:25.848]                               next
[16:12:25.848]                             if (!grepl(pattern, name)) 
[16:12:25.848]                               next
[16:12:25.848]                             invokeRestart(restart)
[16:12:25.848]                             muffled <- TRUE
[16:12:25.848]                             break
[16:12:25.848]                           }
[16:12:25.848]                         }
[16:12:25.848]                       }
[16:12:25.848]                       invisible(muffled)
[16:12:25.848]                     }
[16:12:25.848]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.848]                   }
[16:12:25.848]                 }
[16:12:25.848]             }
[16:12:25.848]         }))
[16:12:25.848]     }, error = function(ex) {
[16:12:25.848]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.848]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.848]                 ...future.rng), started = ...future.startTime, 
[16:12:25.848]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.848]             version = "1.8"), class = "FutureResult")
[16:12:25.848]     }, finally = {
[16:12:25.848]         if (!identical(...future.workdir, getwd())) 
[16:12:25.848]             setwd(...future.workdir)
[16:12:25.848]         {
[16:12:25.848]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.848]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.848]             }
[16:12:25.848]             base::options(...future.oldOptions)
[16:12:25.848]             if (.Platform$OS.type == "windows") {
[16:12:25.848]                 old_names <- names(...future.oldEnvVars)
[16:12:25.848]                 envs <- base::Sys.getenv()
[16:12:25.848]                 names <- names(envs)
[16:12:25.848]                 common <- intersect(names, old_names)
[16:12:25.848]                 added <- setdiff(names, old_names)
[16:12:25.848]                 removed <- setdiff(old_names, names)
[16:12:25.848]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.848]                   envs[common]]
[16:12:25.848]                 NAMES <- toupper(changed)
[16:12:25.848]                 args <- list()
[16:12:25.848]                 for (kk in seq_along(NAMES)) {
[16:12:25.848]                   name <- changed[[kk]]
[16:12:25.848]                   NAME <- NAMES[[kk]]
[16:12:25.848]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.848]                     next
[16:12:25.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.848]                 }
[16:12:25.848]                 NAMES <- toupper(added)
[16:12:25.848]                 for (kk in seq_along(NAMES)) {
[16:12:25.848]                   name <- added[[kk]]
[16:12:25.848]                   NAME <- NAMES[[kk]]
[16:12:25.848]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.848]                     next
[16:12:25.848]                   args[[name]] <- ""
[16:12:25.848]                 }
[16:12:25.848]                 NAMES <- toupper(removed)
[16:12:25.848]                 for (kk in seq_along(NAMES)) {
[16:12:25.848]                   name <- removed[[kk]]
[16:12:25.848]                   NAME <- NAMES[[kk]]
[16:12:25.848]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.848]                     next
[16:12:25.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.848]                 }
[16:12:25.848]                 if (length(args) > 0) 
[16:12:25.848]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.848]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.848]             }
[16:12:25.848]             else {
[16:12:25.848]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.848]             }
[16:12:25.848]             {
[16:12:25.848]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.848]                   0L) {
[16:12:25.848]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.848]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.848]                   base::options(opts)
[16:12:25.848]                 }
[16:12:25.848]                 {
[16:12:25.848]                   {
[16:12:25.848]                     NULL
[16:12:25.848]                     RNGkind("Mersenne-Twister")
[16:12:25.848]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.848]                       inherits = FALSE)
[16:12:25.848]                   }
[16:12:25.848]                   options(future.plan = NULL)
[16:12:25.848]                   if (is.na(NA_character_)) 
[16:12:25.848]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.848]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.848]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.848]                   {
[16:12:25.848]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.848]                     if (!future$lazy) 
[16:12:25.848]                       future <- run(future)
[16:12:25.848]                     invisible(future)
[16:12:25.848]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.848]                 }
[16:12:25.848]             }
[16:12:25.848]         }
[16:12:25.848]     })
[16:12:25.848]     if (TRUE) {
[16:12:25.848]         base::sink(type = "output", split = FALSE)
[16:12:25.848]         if (TRUE) {
[16:12:25.848]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.848]         }
[16:12:25.848]         else {
[16:12:25.848]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.848]         }
[16:12:25.848]         base::close(...future.stdout)
[16:12:25.848]         ...future.stdout <- NULL
[16:12:25.848]     }
[16:12:25.848]     ...future.result$conditions <- ...future.conditions
[16:12:25.848]     ...future.result$finished <- base::Sys.time()
[16:12:25.848]     ...future.result
[16:12:25.848] }
[16:12:25.850] plan(): Setting new future strategy stack:
[16:12:25.850] List of future strategies:
[16:12:25.850] 1. sequential:
[16:12:25.850]    - args: function (..., envir = parent.frame())
[16:12:25.850]    - tweaked: FALSE
[16:12:25.850]    - call: NULL
[16:12:25.850] plan(): nbrOfWorkers() = 1
[16:12:25.851] plan(): Setting new future strategy stack:
[16:12:25.851] List of future strategies:
[16:12:25.851] 1. sequential:
[16:12:25.851]    - args: function (..., envir = parent.frame())
[16:12:25.851]    - tweaked: FALSE
[16:12:25.851]    - call: future::plan("sequential")
[16:12:25.852] plan(): nbrOfWorkers() = 1
[16:12:25.852] SequentialFuture started (and completed)
[16:12:25.852] - Launch lazy future ... done
[16:12:25.852] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[16:12:25.853] getGlobalsAndPackages() ...
[16:12:25.853] Searching for globals...
[16:12:25.854] - globals found: [1] ‘{’
[16:12:25.854] Searching for globals ... DONE
[16:12:25.854] Resolving globals: FALSE
[16:12:25.854] 
[16:12:25.854] 
[16:12:25.854] getGlobalsAndPackages() ... DONE
[16:12:25.854] run() for ‘Future’ ...
[16:12:25.855] - state: ‘created’
[16:12:25.855] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.855] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.855] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.855]   - Field: ‘label’
[16:12:25.855]   - Field: ‘local’
[16:12:25.855]   - Field: ‘owner’
[16:12:25.855]   - Field: ‘envir’
[16:12:25.856]   - Field: ‘packages’
[16:12:25.856]   - Field: ‘gc’
[16:12:25.856]   - Field: ‘conditions’
[16:12:25.856]   - Field: ‘expr’
[16:12:25.856]   - Field: ‘uuid’
[16:12:25.856]   - Field: ‘seed’
[16:12:25.856]   - Field: ‘version’
[16:12:25.856]   - Field: ‘result’
[16:12:25.856]   - Field: ‘asynchronous’
[16:12:25.856]   - Field: ‘calls’
[16:12:25.856]   - Field: ‘globals’
[16:12:25.857]   - Field: ‘stdout’
[16:12:25.857]   - Field: ‘earlySignal’
[16:12:25.857]   - Field: ‘lazy’
[16:12:25.857]   - Field: ‘state’
[16:12:25.857] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.857] - Launch lazy future ...
[16:12:25.857] Packages needed by the future expression (n = 0): <none>
[16:12:25.857] Packages needed by future strategies (n = 0): <none>
[16:12:25.858] {
[16:12:25.858]     {
[16:12:25.858]         {
[16:12:25.858]             ...future.startTime <- base::Sys.time()
[16:12:25.858]             {
[16:12:25.858]                 {
[16:12:25.858]                   {
[16:12:25.858]                     base::local({
[16:12:25.858]                       has_future <- base::requireNamespace("future", 
[16:12:25.858]                         quietly = TRUE)
[16:12:25.858]                       if (has_future) {
[16:12:25.858]                         ns <- base::getNamespace("future")
[16:12:25.858]                         version <- ns[[".package"]][["version"]]
[16:12:25.858]                         if (is.null(version)) 
[16:12:25.858]                           version <- utils::packageVersion("future")
[16:12:25.858]                       }
[16:12:25.858]                       else {
[16:12:25.858]                         version <- NULL
[16:12:25.858]                       }
[16:12:25.858]                       if (!has_future || version < "1.8.0") {
[16:12:25.858]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.858]                           "", base::R.version$version.string), 
[16:12:25.858]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.858]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.858]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.858]                             "release", "version")], collapse = " "), 
[16:12:25.858]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.858]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.858]                           info)
[16:12:25.858]                         info <- base::paste(info, collapse = "; ")
[16:12:25.858]                         if (!has_future) {
[16:12:25.858]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.858]                             info)
[16:12:25.858]                         }
[16:12:25.858]                         else {
[16:12:25.858]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.858]                             info, version)
[16:12:25.858]                         }
[16:12:25.858]                         base::stop(msg)
[16:12:25.858]                       }
[16:12:25.858]                     })
[16:12:25.858]                   }
[16:12:25.858]                   options(future.plan = NULL)
[16:12:25.858]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.858]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.858]                 }
[16:12:25.858]                 ...future.workdir <- getwd()
[16:12:25.858]             }
[16:12:25.858]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.858]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.858]         }
[16:12:25.858]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.858]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.858]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.858]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.858]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.858]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.858]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.858]             base::names(...future.oldOptions))
[16:12:25.858]     }
[16:12:25.858]     if (FALSE) {
[16:12:25.858]     }
[16:12:25.858]     else {
[16:12:25.858]         if (TRUE) {
[16:12:25.858]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.858]                 open = "w")
[16:12:25.858]         }
[16:12:25.858]         else {
[16:12:25.858]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.858]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.858]         }
[16:12:25.858]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.858]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.858]             base::sink(type = "output", split = FALSE)
[16:12:25.858]             base::close(...future.stdout)
[16:12:25.858]         }, add = TRUE)
[16:12:25.858]     }
[16:12:25.858]     ...future.frame <- base::sys.nframe()
[16:12:25.858]     ...future.conditions <- base::list()
[16:12:25.858]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.858]     if (FALSE) {
[16:12:25.858]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.858]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.858]     }
[16:12:25.858]     ...future.result <- base::tryCatch({
[16:12:25.858]         base::withCallingHandlers({
[16:12:25.858]             ...future.value <- base::withVisible(base::local({
[16:12:25.858]                 2
[16:12:25.858]             }))
[16:12:25.858]             future::FutureResult(value = ...future.value$value, 
[16:12:25.858]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.858]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.858]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.858]                     ...future.globalenv.names))
[16:12:25.858]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.858]         }, condition = base::local({
[16:12:25.858]             c <- base::c
[16:12:25.858]             inherits <- base::inherits
[16:12:25.858]             invokeRestart <- base::invokeRestart
[16:12:25.858]             length <- base::length
[16:12:25.858]             list <- base::list
[16:12:25.858]             seq.int <- base::seq.int
[16:12:25.858]             signalCondition <- base::signalCondition
[16:12:25.858]             sys.calls <- base::sys.calls
[16:12:25.858]             `[[` <- base::`[[`
[16:12:25.858]             `+` <- base::`+`
[16:12:25.858]             `<<-` <- base::`<<-`
[16:12:25.858]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.858]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.858]                   3L)]
[16:12:25.858]             }
[16:12:25.858]             function(cond) {
[16:12:25.858]                 is_error <- inherits(cond, "error")
[16:12:25.858]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.858]                   NULL)
[16:12:25.858]                 if (is_error) {
[16:12:25.858]                   sessionInformation <- function() {
[16:12:25.858]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.858]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.858]                       search = base::search(), system = base::Sys.info())
[16:12:25.858]                   }
[16:12:25.858]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.858]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.858]                     cond$call), session = sessionInformation(), 
[16:12:25.858]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.858]                   signalCondition(cond)
[16:12:25.858]                 }
[16:12:25.858]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.858]                 "immediateCondition"))) {
[16:12:25.858]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.858]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.858]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.858]                   if (TRUE && !signal) {
[16:12:25.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.858]                     {
[16:12:25.858]                       inherits <- base::inherits
[16:12:25.858]                       invokeRestart <- base::invokeRestart
[16:12:25.858]                       is.null <- base::is.null
[16:12:25.858]                       muffled <- FALSE
[16:12:25.858]                       if (inherits(cond, "message")) {
[16:12:25.858]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.858]                         if (muffled) 
[16:12:25.858]                           invokeRestart("muffleMessage")
[16:12:25.858]                       }
[16:12:25.858]                       else if (inherits(cond, "warning")) {
[16:12:25.858]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.858]                         if (muffled) 
[16:12:25.858]                           invokeRestart("muffleWarning")
[16:12:25.858]                       }
[16:12:25.858]                       else if (inherits(cond, "condition")) {
[16:12:25.858]                         if (!is.null(pattern)) {
[16:12:25.858]                           computeRestarts <- base::computeRestarts
[16:12:25.858]                           grepl <- base::grepl
[16:12:25.858]                           restarts <- computeRestarts(cond)
[16:12:25.858]                           for (restart in restarts) {
[16:12:25.858]                             name <- restart$name
[16:12:25.858]                             if (is.null(name)) 
[16:12:25.858]                               next
[16:12:25.858]                             if (!grepl(pattern, name)) 
[16:12:25.858]                               next
[16:12:25.858]                             invokeRestart(restart)
[16:12:25.858]                             muffled <- TRUE
[16:12:25.858]                             break
[16:12:25.858]                           }
[16:12:25.858]                         }
[16:12:25.858]                       }
[16:12:25.858]                       invisible(muffled)
[16:12:25.858]                     }
[16:12:25.858]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.858]                   }
[16:12:25.858]                 }
[16:12:25.858]                 else {
[16:12:25.858]                   if (TRUE) {
[16:12:25.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.858]                     {
[16:12:25.858]                       inherits <- base::inherits
[16:12:25.858]                       invokeRestart <- base::invokeRestart
[16:12:25.858]                       is.null <- base::is.null
[16:12:25.858]                       muffled <- FALSE
[16:12:25.858]                       if (inherits(cond, "message")) {
[16:12:25.858]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.858]                         if (muffled) 
[16:12:25.858]                           invokeRestart("muffleMessage")
[16:12:25.858]                       }
[16:12:25.858]                       else if (inherits(cond, "warning")) {
[16:12:25.858]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.858]                         if (muffled) 
[16:12:25.858]                           invokeRestart("muffleWarning")
[16:12:25.858]                       }
[16:12:25.858]                       else if (inherits(cond, "condition")) {
[16:12:25.858]                         if (!is.null(pattern)) {
[16:12:25.858]                           computeRestarts <- base::computeRestarts
[16:12:25.858]                           grepl <- base::grepl
[16:12:25.858]                           restarts <- computeRestarts(cond)
[16:12:25.858]                           for (restart in restarts) {
[16:12:25.858]                             name <- restart$name
[16:12:25.858]                             if (is.null(name)) 
[16:12:25.858]                               next
[16:12:25.858]                             if (!grepl(pattern, name)) 
[16:12:25.858]                               next
[16:12:25.858]                             invokeRestart(restart)
[16:12:25.858]                             muffled <- TRUE
[16:12:25.858]                             break
[16:12:25.858]                           }
[16:12:25.858]                         }
[16:12:25.858]                       }
[16:12:25.858]                       invisible(muffled)
[16:12:25.858]                     }
[16:12:25.858]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.858]                   }
[16:12:25.858]                 }
[16:12:25.858]             }
[16:12:25.858]         }))
[16:12:25.858]     }, error = function(ex) {
[16:12:25.858]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.858]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.858]                 ...future.rng), started = ...future.startTime, 
[16:12:25.858]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.858]             version = "1.8"), class = "FutureResult")
[16:12:25.858]     }, finally = {
[16:12:25.858]         if (!identical(...future.workdir, getwd())) 
[16:12:25.858]             setwd(...future.workdir)
[16:12:25.858]         {
[16:12:25.858]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.858]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.858]             }
[16:12:25.858]             base::options(...future.oldOptions)
[16:12:25.858]             if (.Platform$OS.type == "windows") {
[16:12:25.858]                 old_names <- names(...future.oldEnvVars)
[16:12:25.858]                 envs <- base::Sys.getenv()
[16:12:25.858]                 names <- names(envs)
[16:12:25.858]                 common <- intersect(names, old_names)
[16:12:25.858]                 added <- setdiff(names, old_names)
[16:12:25.858]                 removed <- setdiff(old_names, names)
[16:12:25.858]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.858]                   envs[common]]
[16:12:25.858]                 NAMES <- toupper(changed)
[16:12:25.858]                 args <- list()
[16:12:25.858]                 for (kk in seq_along(NAMES)) {
[16:12:25.858]                   name <- changed[[kk]]
[16:12:25.858]                   NAME <- NAMES[[kk]]
[16:12:25.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.858]                     next
[16:12:25.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.858]                 }
[16:12:25.858]                 NAMES <- toupper(added)
[16:12:25.858]                 for (kk in seq_along(NAMES)) {
[16:12:25.858]                   name <- added[[kk]]
[16:12:25.858]                   NAME <- NAMES[[kk]]
[16:12:25.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.858]                     next
[16:12:25.858]                   args[[name]] <- ""
[16:12:25.858]                 }
[16:12:25.858]                 NAMES <- toupper(removed)
[16:12:25.858]                 for (kk in seq_along(NAMES)) {
[16:12:25.858]                   name <- removed[[kk]]
[16:12:25.858]                   NAME <- NAMES[[kk]]
[16:12:25.858]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.858]                     next
[16:12:25.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.858]                 }
[16:12:25.858]                 if (length(args) > 0) 
[16:12:25.858]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.858]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.858]             }
[16:12:25.858]             else {
[16:12:25.858]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.858]             }
[16:12:25.858]             {
[16:12:25.858]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.858]                   0L) {
[16:12:25.858]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.858]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.858]                   base::options(opts)
[16:12:25.858]                 }
[16:12:25.858]                 {
[16:12:25.858]                   {
[16:12:25.858]                     NULL
[16:12:25.858]                     RNGkind("Mersenne-Twister")
[16:12:25.858]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.858]                       inherits = FALSE)
[16:12:25.858]                   }
[16:12:25.858]                   options(future.plan = NULL)
[16:12:25.858]                   if (is.na(NA_character_)) 
[16:12:25.858]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.858]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.858]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.858]                   {
[16:12:25.858]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.858]                     if (!future$lazy) 
[16:12:25.858]                       future <- run(future)
[16:12:25.858]                     invisible(future)
[16:12:25.858]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.858]                 }
[16:12:25.858]             }
[16:12:25.858]         }
[16:12:25.858]     })
[16:12:25.858]     if (TRUE) {
[16:12:25.858]         base::sink(type = "output", split = FALSE)
[16:12:25.858]         if (TRUE) {
[16:12:25.858]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.858]         }
[16:12:25.858]         else {
[16:12:25.858]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.858]         }
[16:12:25.858]         base::close(...future.stdout)
[16:12:25.858]         ...future.stdout <- NULL
[16:12:25.858]     }
[16:12:25.858]     ...future.result$conditions <- ...future.conditions
[16:12:25.858]     ...future.result$finished <- base::Sys.time()
[16:12:25.858]     ...future.result
[16:12:25.858] }
[16:12:25.859] plan(): Setting new future strategy stack:
[16:12:25.859] List of future strategies:
[16:12:25.859] 1. sequential:
[16:12:25.859]    - args: function (..., envir = parent.frame())
[16:12:25.859]    - tweaked: FALSE
[16:12:25.859]    - call: NULL
[16:12:25.860] plan(): nbrOfWorkers() = 1
[16:12:25.860] plan(): Setting new future strategy stack:
[16:12:25.861] List of future strategies:
[16:12:25.861] 1. sequential:
[16:12:25.861]    - args: function (..., envir = parent.frame())
[16:12:25.861]    - tweaked: FALSE
[16:12:25.861]    - call: future::plan("sequential")
[16:12:25.861] plan(): nbrOfWorkers() = 1
[16:12:25.861] SequentialFuture started (and completed)
[16:12:25.861] - Launch lazy future ... done
[16:12:25.861] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[16:12:25.871] resolved() for ‘SequentialFuture’ ...
[16:12:25.871] - state: ‘finished’
[16:12:25.871] - run: FALSE
[16:12:25.871] - result: ‘FutureResult’
[16:12:25.871] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[16:12:25.872] getGlobalsAndPackages() ...
[16:12:25.872] Searching for globals...
[16:12:25.872] - globals found: [1] ‘{’
[16:12:25.872] Searching for globals ... DONE
[16:12:25.872] Resolving globals: FALSE
[16:12:25.873] 
[16:12:25.873] 
[16:12:25.873] getGlobalsAndPackages() ... DONE
[16:12:25.873] run() for ‘Future’ ...
[16:12:25.873] - state: ‘created’
[16:12:25.873] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.874] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.874] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.874]   - Field: ‘label’
[16:12:25.874]   - Field: ‘local’
[16:12:25.874]   - Field: ‘owner’
[16:12:25.874]   - Field: ‘envir’
[16:12:25.874]   - Field: ‘packages’
[16:12:25.874]   - Field: ‘gc’
[16:12:25.874]   - Field: ‘conditions’
[16:12:25.874]   - Field: ‘expr’
[16:12:25.874]   - Field: ‘uuid’
[16:12:25.875]   - Field: ‘seed’
[16:12:25.875]   - Field: ‘version’
[16:12:25.875]   - Field: ‘result’
[16:12:25.875]   - Field: ‘asynchronous’
[16:12:25.875]   - Field: ‘calls’
[16:12:25.875]   - Field: ‘globals’
[16:12:25.875]   - Field: ‘stdout’
[16:12:25.875]   - Field: ‘earlySignal’
[16:12:25.875]   - Field: ‘lazy’
[16:12:25.875]   - Field: ‘state’
[16:12:25.875] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.876] - Launch lazy future ...
[16:12:25.876] Packages needed by the future expression (n = 0): <none>
[16:12:25.876] Packages needed by future strategies (n = 0): <none>
[16:12:25.876] {
[16:12:25.876]     {
[16:12:25.876]         {
[16:12:25.876]             ...future.startTime <- base::Sys.time()
[16:12:25.876]             {
[16:12:25.876]                 {
[16:12:25.876]                   {
[16:12:25.876]                     base::local({
[16:12:25.876]                       has_future <- base::requireNamespace("future", 
[16:12:25.876]                         quietly = TRUE)
[16:12:25.876]                       if (has_future) {
[16:12:25.876]                         ns <- base::getNamespace("future")
[16:12:25.876]                         version <- ns[[".package"]][["version"]]
[16:12:25.876]                         if (is.null(version)) 
[16:12:25.876]                           version <- utils::packageVersion("future")
[16:12:25.876]                       }
[16:12:25.876]                       else {
[16:12:25.876]                         version <- NULL
[16:12:25.876]                       }
[16:12:25.876]                       if (!has_future || version < "1.8.0") {
[16:12:25.876]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.876]                           "", base::R.version$version.string), 
[16:12:25.876]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.876]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.876]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.876]                             "release", "version")], collapse = " "), 
[16:12:25.876]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.876]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.876]                           info)
[16:12:25.876]                         info <- base::paste(info, collapse = "; ")
[16:12:25.876]                         if (!has_future) {
[16:12:25.876]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.876]                             info)
[16:12:25.876]                         }
[16:12:25.876]                         else {
[16:12:25.876]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.876]                             info, version)
[16:12:25.876]                         }
[16:12:25.876]                         base::stop(msg)
[16:12:25.876]                       }
[16:12:25.876]                     })
[16:12:25.876]                   }
[16:12:25.876]                   options(future.plan = NULL)
[16:12:25.876]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.876]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.876]                 }
[16:12:25.876]                 ...future.workdir <- getwd()
[16:12:25.876]             }
[16:12:25.876]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.876]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.876]         }
[16:12:25.876]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.876]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.876]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.876]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.876]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.876]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.876]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.876]             base::names(...future.oldOptions))
[16:12:25.876]     }
[16:12:25.876]     if (FALSE) {
[16:12:25.876]     }
[16:12:25.876]     else {
[16:12:25.876]         if (TRUE) {
[16:12:25.876]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.876]                 open = "w")
[16:12:25.876]         }
[16:12:25.876]         else {
[16:12:25.876]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.876]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.876]         }
[16:12:25.876]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.876]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.876]             base::sink(type = "output", split = FALSE)
[16:12:25.876]             base::close(...future.stdout)
[16:12:25.876]         }, add = TRUE)
[16:12:25.876]     }
[16:12:25.876]     ...future.frame <- base::sys.nframe()
[16:12:25.876]     ...future.conditions <- base::list()
[16:12:25.876]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.876]     if (FALSE) {
[16:12:25.876]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.876]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.876]     }
[16:12:25.876]     ...future.result <- base::tryCatch({
[16:12:25.876]         base::withCallingHandlers({
[16:12:25.876]             ...future.value <- base::withVisible(base::local({
[16:12:25.876]                 2
[16:12:25.876]             }))
[16:12:25.876]             future::FutureResult(value = ...future.value$value, 
[16:12:25.876]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.876]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.876]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.876]                     ...future.globalenv.names))
[16:12:25.876]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.876]         }, condition = base::local({
[16:12:25.876]             c <- base::c
[16:12:25.876]             inherits <- base::inherits
[16:12:25.876]             invokeRestart <- base::invokeRestart
[16:12:25.876]             length <- base::length
[16:12:25.876]             list <- base::list
[16:12:25.876]             seq.int <- base::seq.int
[16:12:25.876]             signalCondition <- base::signalCondition
[16:12:25.876]             sys.calls <- base::sys.calls
[16:12:25.876]             `[[` <- base::`[[`
[16:12:25.876]             `+` <- base::`+`
[16:12:25.876]             `<<-` <- base::`<<-`
[16:12:25.876]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.876]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.876]                   3L)]
[16:12:25.876]             }
[16:12:25.876]             function(cond) {
[16:12:25.876]                 is_error <- inherits(cond, "error")
[16:12:25.876]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.876]                   NULL)
[16:12:25.876]                 if (is_error) {
[16:12:25.876]                   sessionInformation <- function() {
[16:12:25.876]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.876]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.876]                       search = base::search(), system = base::Sys.info())
[16:12:25.876]                   }
[16:12:25.876]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.876]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.876]                     cond$call), session = sessionInformation(), 
[16:12:25.876]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.876]                   signalCondition(cond)
[16:12:25.876]                 }
[16:12:25.876]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.876]                 "immediateCondition"))) {
[16:12:25.876]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.876]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.876]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.876]                   if (TRUE && !signal) {
[16:12:25.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.876]                     {
[16:12:25.876]                       inherits <- base::inherits
[16:12:25.876]                       invokeRestart <- base::invokeRestart
[16:12:25.876]                       is.null <- base::is.null
[16:12:25.876]                       muffled <- FALSE
[16:12:25.876]                       if (inherits(cond, "message")) {
[16:12:25.876]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.876]                         if (muffled) 
[16:12:25.876]                           invokeRestart("muffleMessage")
[16:12:25.876]                       }
[16:12:25.876]                       else if (inherits(cond, "warning")) {
[16:12:25.876]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.876]                         if (muffled) 
[16:12:25.876]                           invokeRestart("muffleWarning")
[16:12:25.876]                       }
[16:12:25.876]                       else if (inherits(cond, "condition")) {
[16:12:25.876]                         if (!is.null(pattern)) {
[16:12:25.876]                           computeRestarts <- base::computeRestarts
[16:12:25.876]                           grepl <- base::grepl
[16:12:25.876]                           restarts <- computeRestarts(cond)
[16:12:25.876]                           for (restart in restarts) {
[16:12:25.876]                             name <- restart$name
[16:12:25.876]                             if (is.null(name)) 
[16:12:25.876]                               next
[16:12:25.876]                             if (!grepl(pattern, name)) 
[16:12:25.876]                               next
[16:12:25.876]                             invokeRestart(restart)
[16:12:25.876]                             muffled <- TRUE
[16:12:25.876]                             break
[16:12:25.876]                           }
[16:12:25.876]                         }
[16:12:25.876]                       }
[16:12:25.876]                       invisible(muffled)
[16:12:25.876]                     }
[16:12:25.876]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.876]                   }
[16:12:25.876]                 }
[16:12:25.876]                 else {
[16:12:25.876]                   if (TRUE) {
[16:12:25.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.876]                     {
[16:12:25.876]                       inherits <- base::inherits
[16:12:25.876]                       invokeRestart <- base::invokeRestart
[16:12:25.876]                       is.null <- base::is.null
[16:12:25.876]                       muffled <- FALSE
[16:12:25.876]                       if (inherits(cond, "message")) {
[16:12:25.876]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.876]                         if (muffled) 
[16:12:25.876]                           invokeRestart("muffleMessage")
[16:12:25.876]                       }
[16:12:25.876]                       else if (inherits(cond, "warning")) {
[16:12:25.876]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.876]                         if (muffled) 
[16:12:25.876]                           invokeRestart("muffleWarning")
[16:12:25.876]                       }
[16:12:25.876]                       else if (inherits(cond, "condition")) {
[16:12:25.876]                         if (!is.null(pattern)) {
[16:12:25.876]                           computeRestarts <- base::computeRestarts
[16:12:25.876]                           grepl <- base::grepl
[16:12:25.876]                           restarts <- computeRestarts(cond)
[16:12:25.876]                           for (restart in restarts) {
[16:12:25.876]                             name <- restart$name
[16:12:25.876]                             if (is.null(name)) 
[16:12:25.876]                               next
[16:12:25.876]                             if (!grepl(pattern, name)) 
[16:12:25.876]                               next
[16:12:25.876]                             invokeRestart(restart)
[16:12:25.876]                             muffled <- TRUE
[16:12:25.876]                             break
[16:12:25.876]                           }
[16:12:25.876]                         }
[16:12:25.876]                       }
[16:12:25.876]                       invisible(muffled)
[16:12:25.876]                     }
[16:12:25.876]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.876]                   }
[16:12:25.876]                 }
[16:12:25.876]             }
[16:12:25.876]         }))
[16:12:25.876]     }, error = function(ex) {
[16:12:25.876]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.876]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.876]                 ...future.rng), started = ...future.startTime, 
[16:12:25.876]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.876]             version = "1.8"), class = "FutureResult")
[16:12:25.876]     }, finally = {
[16:12:25.876]         if (!identical(...future.workdir, getwd())) 
[16:12:25.876]             setwd(...future.workdir)
[16:12:25.876]         {
[16:12:25.876]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.876]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.876]             }
[16:12:25.876]             base::options(...future.oldOptions)
[16:12:25.876]             if (.Platform$OS.type == "windows") {
[16:12:25.876]                 old_names <- names(...future.oldEnvVars)
[16:12:25.876]                 envs <- base::Sys.getenv()
[16:12:25.876]                 names <- names(envs)
[16:12:25.876]                 common <- intersect(names, old_names)
[16:12:25.876]                 added <- setdiff(names, old_names)
[16:12:25.876]                 removed <- setdiff(old_names, names)
[16:12:25.876]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.876]                   envs[common]]
[16:12:25.876]                 NAMES <- toupper(changed)
[16:12:25.876]                 args <- list()
[16:12:25.876]                 for (kk in seq_along(NAMES)) {
[16:12:25.876]                   name <- changed[[kk]]
[16:12:25.876]                   NAME <- NAMES[[kk]]
[16:12:25.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.876]                     next
[16:12:25.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.876]                 }
[16:12:25.876]                 NAMES <- toupper(added)
[16:12:25.876]                 for (kk in seq_along(NAMES)) {
[16:12:25.876]                   name <- added[[kk]]
[16:12:25.876]                   NAME <- NAMES[[kk]]
[16:12:25.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.876]                     next
[16:12:25.876]                   args[[name]] <- ""
[16:12:25.876]                 }
[16:12:25.876]                 NAMES <- toupper(removed)
[16:12:25.876]                 for (kk in seq_along(NAMES)) {
[16:12:25.876]                   name <- removed[[kk]]
[16:12:25.876]                   NAME <- NAMES[[kk]]
[16:12:25.876]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.876]                     next
[16:12:25.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.876]                 }
[16:12:25.876]                 if (length(args) > 0) 
[16:12:25.876]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.876]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.876]             }
[16:12:25.876]             else {
[16:12:25.876]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.876]             }
[16:12:25.876]             {
[16:12:25.876]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.876]                   0L) {
[16:12:25.876]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.876]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.876]                   base::options(opts)
[16:12:25.876]                 }
[16:12:25.876]                 {
[16:12:25.876]                   {
[16:12:25.876]                     NULL
[16:12:25.876]                     RNGkind("Mersenne-Twister")
[16:12:25.876]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.876]                       inherits = FALSE)
[16:12:25.876]                   }
[16:12:25.876]                   options(future.plan = NULL)
[16:12:25.876]                   if (is.na(NA_character_)) 
[16:12:25.876]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.876]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.876]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.876]                   {
[16:12:25.876]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.876]                     if (!future$lazy) 
[16:12:25.876]                       future <- run(future)
[16:12:25.876]                     invisible(future)
[16:12:25.876]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.876]                 }
[16:12:25.876]             }
[16:12:25.876]         }
[16:12:25.876]     })
[16:12:25.876]     if (TRUE) {
[16:12:25.876]         base::sink(type = "output", split = FALSE)
[16:12:25.876]         if (TRUE) {
[16:12:25.876]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.876]         }
[16:12:25.876]         else {
[16:12:25.876]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.876]         }
[16:12:25.876]         base::close(...future.stdout)
[16:12:25.876]         ...future.stdout <- NULL
[16:12:25.876]     }
[16:12:25.876]     ...future.result$conditions <- ...future.conditions
[16:12:25.876]     ...future.result$finished <- base::Sys.time()
[16:12:25.876]     ...future.result
[16:12:25.876] }
[16:12:25.878] plan(): Setting new future strategy stack:
[16:12:25.878] List of future strategies:
[16:12:25.878] 1. sequential:
[16:12:25.878]    - args: function (..., envir = parent.frame())
[16:12:25.878]    - tweaked: FALSE
[16:12:25.878]    - call: NULL
[16:12:25.878] plan(): nbrOfWorkers() = 1
[16:12:25.879] plan(): Setting new future strategy stack:
[16:12:25.879] List of future strategies:
[16:12:25.879] 1. sequential:
[16:12:25.879]    - args: function (..., envir = parent.frame())
[16:12:25.879]    - tweaked: FALSE
[16:12:25.879]    - call: future::plan("sequential")
[16:12:25.879] plan(): nbrOfWorkers() = 1
[16:12:25.880] SequentialFuture started (and completed)
[16:12:25.880] - Launch lazy future ... done
[16:12:25.880] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[16:12:25.881] getGlobalsAndPackages() ...
[16:12:25.881] Searching for globals...
[16:12:25.881] 
[16:12:25.881] Searching for globals ... DONE
[16:12:25.881] - globals: [0] <none>
[16:12:25.881] getGlobalsAndPackages() ... DONE
[16:12:25.881] run() for ‘Future’ ...
[16:12:25.882] - state: ‘created’
[16:12:25.882] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:12:25.882] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:12:25.882] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:12:25.882]   - Field: ‘label’
[16:12:25.882]   - Field: ‘local’
[16:12:25.882]   - Field: ‘owner’
[16:12:25.882]   - Field: ‘envir’
[16:12:25.883]   - Field: ‘packages’
[16:12:25.883]   - Field: ‘gc’
[16:12:25.883]   - Field: ‘conditions’
[16:12:25.883]   - Field: ‘expr’
[16:12:25.883]   - Field: ‘uuid’
[16:12:25.883]   - Field: ‘seed’
[16:12:25.883]   - Field: ‘version’
[16:12:25.883]   - Field: ‘result’
[16:12:25.883]   - Field: ‘asynchronous’
[16:12:25.883]   - Field: ‘calls’
[16:12:25.883]   - Field: ‘globals’
[16:12:25.883]   - Field: ‘stdout’
[16:12:25.884]   - Field: ‘earlySignal’
[16:12:25.884]   - Field: ‘lazy’
[16:12:25.884]   - Field: ‘state’
[16:12:25.884] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:12:25.884] - Launch lazy future ...
[16:12:25.884] Packages needed by the future expression (n = 0): <none>
[16:12:25.884] Packages needed by future strategies (n = 0): <none>
[16:12:25.885] {
[16:12:25.885]     {
[16:12:25.885]         {
[16:12:25.885]             ...future.startTime <- base::Sys.time()
[16:12:25.885]             {
[16:12:25.885]                 {
[16:12:25.885]                   {
[16:12:25.885]                     base::local({
[16:12:25.885]                       has_future <- base::requireNamespace("future", 
[16:12:25.885]                         quietly = TRUE)
[16:12:25.885]                       if (has_future) {
[16:12:25.885]                         ns <- base::getNamespace("future")
[16:12:25.885]                         version <- ns[[".package"]][["version"]]
[16:12:25.885]                         if (is.null(version)) 
[16:12:25.885]                           version <- utils::packageVersion("future")
[16:12:25.885]                       }
[16:12:25.885]                       else {
[16:12:25.885]                         version <- NULL
[16:12:25.885]                       }
[16:12:25.885]                       if (!has_future || version < "1.8.0") {
[16:12:25.885]                         info <- base::c(r_version = base::gsub("R version ", 
[16:12:25.885]                           "", base::R.version$version.string), 
[16:12:25.885]                           platform = base::sprintf("%s (%s-bit)", 
[16:12:25.885]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:12:25.885]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:12:25.885]                             "release", "version")], collapse = " "), 
[16:12:25.885]                           hostname = base::Sys.info()[["nodename"]])
[16:12:25.885]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:12:25.885]                           info)
[16:12:25.885]                         info <- base::paste(info, collapse = "; ")
[16:12:25.885]                         if (!has_future) {
[16:12:25.885]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:12:25.885]                             info)
[16:12:25.885]                         }
[16:12:25.885]                         else {
[16:12:25.885]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:12:25.885]                             info, version)
[16:12:25.885]                         }
[16:12:25.885]                         base::stop(msg)
[16:12:25.885]                       }
[16:12:25.885]                     })
[16:12:25.885]                   }
[16:12:25.885]                   options(future.plan = NULL)
[16:12:25.885]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.885]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:12:25.885]                 }
[16:12:25.885]                 ...future.workdir <- getwd()
[16:12:25.885]             }
[16:12:25.885]             ...future.oldOptions <- base::as.list(base::.Options)
[16:12:25.885]             ...future.oldEnvVars <- base::Sys.getenv()
[16:12:25.885]         }
[16:12:25.885]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:12:25.885]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:12:25.885]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:12:25.885]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:12:25.885]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:12:25.885]             future.stdout.windows.reencode = NULL, width = 80L)
[16:12:25.885]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:12:25.885]             base::names(...future.oldOptions))
[16:12:25.885]     }
[16:12:25.885]     if (FALSE) {
[16:12:25.885]     }
[16:12:25.885]     else {
[16:12:25.885]         if (TRUE) {
[16:12:25.885]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:12:25.885]                 open = "w")
[16:12:25.885]         }
[16:12:25.885]         else {
[16:12:25.885]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:12:25.885]                 windows = "NUL", "/dev/null"), open = "w")
[16:12:25.885]         }
[16:12:25.885]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:12:25.885]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:12:25.885]             base::sink(type = "output", split = FALSE)
[16:12:25.885]             base::close(...future.stdout)
[16:12:25.885]         }, add = TRUE)
[16:12:25.885]     }
[16:12:25.885]     ...future.frame <- base::sys.nframe()
[16:12:25.885]     ...future.conditions <- base::list()
[16:12:25.885]     ...future.rng <- base::globalenv()$.Random.seed
[16:12:25.885]     if (FALSE) {
[16:12:25.885]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:12:25.885]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:12:25.885]     }
[16:12:25.885]     ...future.result <- base::tryCatch({
[16:12:25.885]         base::withCallingHandlers({
[16:12:25.885]             ...future.value <- base::withVisible(base::local(1))
[16:12:25.885]             future::FutureResult(value = ...future.value$value, 
[16:12:25.885]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.885]                   ...future.rng), globalenv = if (FALSE) 
[16:12:25.885]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:12:25.885]                     ...future.globalenv.names))
[16:12:25.885]                 else NULL, started = ...future.startTime, version = "1.8")
[16:12:25.885]         }, condition = base::local({
[16:12:25.885]             c <- base::c
[16:12:25.885]             inherits <- base::inherits
[16:12:25.885]             invokeRestart <- base::invokeRestart
[16:12:25.885]             length <- base::length
[16:12:25.885]             list <- base::list
[16:12:25.885]             seq.int <- base::seq.int
[16:12:25.885]             signalCondition <- base::signalCondition
[16:12:25.885]             sys.calls <- base::sys.calls
[16:12:25.885]             `[[` <- base::`[[`
[16:12:25.885]             `+` <- base::`+`
[16:12:25.885]             `<<-` <- base::`<<-`
[16:12:25.885]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:12:25.885]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:12:25.885]                   3L)]
[16:12:25.885]             }
[16:12:25.885]             function(cond) {
[16:12:25.885]                 is_error <- inherits(cond, "error")
[16:12:25.885]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:12:25.885]                   NULL)
[16:12:25.885]                 if (is_error) {
[16:12:25.885]                   sessionInformation <- function() {
[16:12:25.885]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:12:25.885]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:12:25.885]                       search = base::search(), system = base::Sys.info())
[16:12:25.885]                   }
[16:12:25.885]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.885]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:12:25.885]                     cond$call), session = sessionInformation(), 
[16:12:25.885]                     timestamp = base::Sys.time(), signaled = 0L)
[16:12:25.885]                   signalCondition(cond)
[16:12:25.885]                 }
[16:12:25.885]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:12:25.885]                 "immediateCondition"))) {
[16:12:25.885]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:12:25.885]                   ...future.conditions[[length(...future.conditions) + 
[16:12:25.885]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:12:25.885]                   if (TRUE && !signal) {
[16:12:25.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.885]                     {
[16:12:25.885]                       inherits <- base::inherits
[16:12:25.885]                       invokeRestart <- base::invokeRestart
[16:12:25.885]                       is.null <- base::is.null
[16:12:25.885]                       muffled <- FALSE
[16:12:25.885]                       if (inherits(cond, "message")) {
[16:12:25.885]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.885]                         if (muffled) 
[16:12:25.885]                           invokeRestart("muffleMessage")
[16:12:25.885]                       }
[16:12:25.885]                       else if (inherits(cond, "warning")) {
[16:12:25.885]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.885]                         if (muffled) 
[16:12:25.885]                           invokeRestart("muffleWarning")
[16:12:25.885]                       }
[16:12:25.885]                       else if (inherits(cond, "condition")) {
[16:12:25.885]                         if (!is.null(pattern)) {
[16:12:25.885]                           computeRestarts <- base::computeRestarts
[16:12:25.885]                           grepl <- base::grepl
[16:12:25.885]                           restarts <- computeRestarts(cond)
[16:12:25.885]                           for (restart in restarts) {
[16:12:25.885]                             name <- restart$name
[16:12:25.885]                             if (is.null(name)) 
[16:12:25.885]                               next
[16:12:25.885]                             if (!grepl(pattern, name)) 
[16:12:25.885]                               next
[16:12:25.885]                             invokeRestart(restart)
[16:12:25.885]                             muffled <- TRUE
[16:12:25.885]                             break
[16:12:25.885]                           }
[16:12:25.885]                         }
[16:12:25.885]                       }
[16:12:25.885]                       invisible(muffled)
[16:12:25.885]                     }
[16:12:25.885]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.885]                   }
[16:12:25.885]                 }
[16:12:25.885]                 else {
[16:12:25.885]                   if (TRUE) {
[16:12:25.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:12:25.885]                     {
[16:12:25.885]                       inherits <- base::inherits
[16:12:25.885]                       invokeRestart <- base::invokeRestart
[16:12:25.885]                       is.null <- base::is.null
[16:12:25.885]                       muffled <- FALSE
[16:12:25.885]                       if (inherits(cond, "message")) {
[16:12:25.885]                         muffled <- grepl(pattern, "muffleMessage")
[16:12:25.885]                         if (muffled) 
[16:12:25.885]                           invokeRestart("muffleMessage")
[16:12:25.885]                       }
[16:12:25.885]                       else if (inherits(cond, "warning")) {
[16:12:25.885]                         muffled <- grepl(pattern, "muffleWarning")
[16:12:25.885]                         if (muffled) 
[16:12:25.885]                           invokeRestart("muffleWarning")
[16:12:25.885]                       }
[16:12:25.885]                       else if (inherits(cond, "condition")) {
[16:12:25.885]                         if (!is.null(pattern)) {
[16:12:25.885]                           computeRestarts <- base::computeRestarts
[16:12:25.885]                           grepl <- base::grepl
[16:12:25.885]                           restarts <- computeRestarts(cond)
[16:12:25.885]                           for (restart in restarts) {
[16:12:25.885]                             name <- restart$name
[16:12:25.885]                             if (is.null(name)) 
[16:12:25.885]                               next
[16:12:25.885]                             if (!grepl(pattern, name)) 
[16:12:25.885]                               next
[16:12:25.885]                             invokeRestart(restart)
[16:12:25.885]                             muffled <- TRUE
[16:12:25.885]                             break
[16:12:25.885]                           }
[16:12:25.885]                         }
[16:12:25.885]                       }
[16:12:25.885]                       invisible(muffled)
[16:12:25.885]                     }
[16:12:25.885]                     muffleCondition(cond, pattern = "^muffle")
[16:12:25.885]                   }
[16:12:25.885]                 }
[16:12:25.885]             }
[16:12:25.885]         }))
[16:12:25.885]     }, error = function(ex) {
[16:12:25.885]         base::structure(base::list(value = NULL, visible = NULL, 
[16:12:25.885]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:12:25.885]                 ...future.rng), started = ...future.startTime, 
[16:12:25.885]             finished = Sys.time(), session_uuid = NA_character_, 
[16:12:25.885]             version = "1.8"), class = "FutureResult")
[16:12:25.885]     }, finally = {
[16:12:25.885]         if (!identical(...future.workdir, getwd())) 
[16:12:25.885]             setwd(...future.workdir)
[16:12:25.885]         {
[16:12:25.885]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:12:25.885]                 ...future.oldOptions$nwarnings <- NULL
[16:12:25.885]             }
[16:12:25.885]             base::options(...future.oldOptions)
[16:12:25.885]             if (.Platform$OS.type == "windows") {
[16:12:25.885]                 old_names <- names(...future.oldEnvVars)
[16:12:25.885]                 envs <- base::Sys.getenv()
[16:12:25.885]                 names <- names(envs)
[16:12:25.885]                 common <- intersect(names, old_names)
[16:12:25.885]                 added <- setdiff(names, old_names)
[16:12:25.885]                 removed <- setdiff(old_names, names)
[16:12:25.885]                 changed <- common[...future.oldEnvVars[common] != 
[16:12:25.885]                   envs[common]]
[16:12:25.885]                 NAMES <- toupper(changed)
[16:12:25.885]                 args <- list()
[16:12:25.885]                 for (kk in seq_along(NAMES)) {
[16:12:25.885]                   name <- changed[[kk]]
[16:12:25.885]                   NAME <- NAMES[[kk]]
[16:12:25.885]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.885]                     next
[16:12:25.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.885]                 }
[16:12:25.885]                 NAMES <- toupper(added)
[16:12:25.885]                 for (kk in seq_along(NAMES)) {
[16:12:25.885]                   name <- added[[kk]]
[16:12:25.885]                   NAME <- NAMES[[kk]]
[16:12:25.885]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.885]                     next
[16:12:25.885]                   args[[name]] <- ""
[16:12:25.885]                 }
[16:12:25.885]                 NAMES <- toupper(removed)
[16:12:25.885]                 for (kk in seq_along(NAMES)) {
[16:12:25.885]                   name <- removed[[kk]]
[16:12:25.885]                   NAME <- NAMES[[kk]]
[16:12:25.885]                   if (name != NAME && is.element(NAME, old_names)) 
[16:12:25.885]                     next
[16:12:25.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:12:25.885]                 }
[16:12:25.885]                 if (length(args) > 0) 
[16:12:25.885]                   base::do.call(base::Sys.setenv, args = args)
[16:12:25.885]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:12:25.885]             }
[16:12:25.885]             else {
[16:12:25.885]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:12:25.885]             }
[16:12:25.885]             {
[16:12:25.885]                 if (base::length(...future.futureOptionsAdded) > 
[16:12:25.885]                   0L) {
[16:12:25.885]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:12:25.885]                   base::names(opts) <- ...future.futureOptionsAdded
[16:12:25.885]                   base::options(opts)
[16:12:25.885]                 }
[16:12:25.885]                 {
[16:12:25.885]                   {
[16:12:25.885]                     NULL
[16:12:25.885]                     RNGkind("Mersenne-Twister")
[16:12:25.885]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:12:25.885]                       inherits = FALSE)
[16:12:25.885]                   }
[16:12:25.885]                   options(future.plan = NULL)
[16:12:25.885]                   if (is.na(NA_character_)) 
[16:12:25.885]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:12:25.885]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:12:25.885]                   future::plan(list(function (..., envir = parent.frame()) 
[16:12:25.885]                   {
[16:12:25.885]                     future <- SequentialFuture(..., envir = envir)
[16:12:25.885]                     if (!future$lazy) 
[16:12:25.885]                       future <- run(future)
[16:12:25.885]                     invisible(future)
[16:12:25.885]                   }), .cleanup = FALSE, .init = FALSE)
[16:12:25.885]                 }
[16:12:25.885]             }
[16:12:25.885]         }
[16:12:25.885]     })
[16:12:25.885]     if (TRUE) {
[16:12:25.885]         base::sink(type = "output", split = FALSE)
[16:12:25.885]         if (TRUE) {
[16:12:25.885]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:12:25.885]         }
[16:12:25.885]         else {
[16:12:25.885]             ...future.result["stdout"] <- base::list(NULL)
[16:12:25.885]         }
[16:12:25.885]         base::close(...future.stdout)
[16:12:25.885]         ...future.stdout <- NULL
[16:12:25.885]     }
[16:12:25.885]     ...future.result$conditions <- ...future.conditions
[16:12:25.885]     ...future.result$finished <- base::Sys.time()
[16:12:25.885]     ...future.result
[16:12:25.885] }
[16:12:25.886] plan(): Setting new future strategy stack:
[16:12:25.886] List of future strategies:
[16:12:25.886] 1. sequential:
[16:12:25.886]    - args: function (..., envir = parent.frame())
[16:12:25.886]    - tweaked: FALSE
[16:12:25.886]    - call: NULL
[16:12:25.887] plan(): nbrOfWorkers() = 1
[16:12:25.887] plan(): Setting new future strategy stack:
[16:12:25.887] List of future strategies:
[16:12:25.887] 1. sequential:
[16:12:25.887]    - args: function (..., envir = parent.frame())
[16:12:25.887]    - tweaked: FALSE
[16:12:25.887]    - call: future::plan("sequential")
[16:12:25.888] plan(): nbrOfWorkers() = 1
[16:12:25.888] SequentialFuture started (and completed)
[16:12:25.888] - Launch lazy future ... done
[16:12:25.888] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b7b6aafa-3fc2-e0aa-f227-d9309d9f98af
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[16:12:25.889] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[16:12:25.889] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[16:12:25.890] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[16:12:25.890] plan(): Setting new future strategy stack:
[16:12:25.890] List of future strategies:
[16:12:25.890] 1. FutureStrategy:
[16:12:25.890]    - args: function (..., envir = parent.frame())
[16:12:25.890]    - tweaked: FALSE
[16:12:25.890]    - call: future::plan(oplan)
[16:12:25.902] plan(): nbrOfWorkers() = 1
> 
