
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:42:18.530] plan(): Setting new future strategy stack:
[17:42:18.530] List of future strategies:
[17:42:18.530] 1. sequential:
[17:42:18.530]    - args: function (..., envir = parent.frame())
[17:42:18.530]    - tweaked: FALSE
[17:42:18.530]    - call: future::plan("sequential")
[17:42:18.544] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'list') ...
list()
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'add') ...
[17:42:18.580] getGlobalsAndPackages() ...
[17:42:18.580] Searching for globals...
[17:42:18.583] - globals found: [1] ‘{’
[17:42:18.583] Searching for globals ... DONE
[17:42:18.583] Resolving globals: FALSE
[17:42:18.584] 
[17:42:18.584] 
[17:42:18.584] getGlobalsAndPackages() ... DONE
[17:42:18.585] run() for ‘Future’ ...
[17:42:18.585] - state: ‘created’
[17:42:18.585] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.585] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.586] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.586]   - Field: ‘label’
[17:42:18.586]   - Field: ‘local’
[17:42:18.586]   - Field: ‘owner’
[17:42:18.586]   - Field: ‘envir’
[17:42:18.586]   - Field: ‘packages’
[17:42:18.586]   - Field: ‘gc’
[17:42:18.586]   - Field: ‘conditions’
[17:42:18.586]   - Field: ‘expr’
[17:42:18.586]   - Field: ‘uuid’
[17:42:18.587]   - Field: ‘seed’
[17:42:18.587]   - Field: ‘version’
[17:42:18.587]   - Field: ‘result’
[17:42:18.587]   - Field: ‘asynchronous’
[17:42:18.587]   - Field: ‘calls’
[17:42:18.587]   - Field: ‘globals’
[17:42:18.587]   - Field: ‘stdout’
[17:42:18.587]   - Field: ‘earlySignal’
[17:42:18.587]   - Field: ‘lazy’
[17:42:18.587]   - Field: ‘state’
[17:42:18.588] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.588] - Launch lazy future ...
[17:42:18.588] Packages needed by the future expression (n = 0): <none>
[17:42:18.589] Packages needed by future strategies (n = 0): <none>
[17:42:18.589] {
[17:42:18.589]     {
[17:42:18.589]         {
[17:42:18.589]             ...future.startTime <- base::Sys.time()
[17:42:18.589]             {
[17:42:18.589]                 {
[17:42:18.589]                   {
[17:42:18.589]                     base::local({
[17:42:18.589]                       has_future <- base::requireNamespace("future", 
[17:42:18.589]                         quietly = TRUE)
[17:42:18.589]                       if (has_future) {
[17:42:18.589]                         ns <- base::getNamespace("future")
[17:42:18.589]                         version <- ns[[".package"]][["version"]]
[17:42:18.589]                         if (is.null(version)) 
[17:42:18.589]                           version <- utils::packageVersion("future")
[17:42:18.589]                       }
[17:42:18.589]                       else {
[17:42:18.589]                         version <- NULL
[17:42:18.589]                       }
[17:42:18.589]                       if (!has_future || version < "1.8.0") {
[17:42:18.589]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.589]                           "", base::R.version$version.string), 
[17:42:18.589]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.589]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.589]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.589]                             "release", "version")], collapse = " "), 
[17:42:18.589]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.589]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.589]                           info)
[17:42:18.589]                         info <- base::paste(info, collapse = "; ")
[17:42:18.589]                         if (!has_future) {
[17:42:18.589]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.589]                             info)
[17:42:18.589]                         }
[17:42:18.589]                         else {
[17:42:18.589]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.589]                             info, version)
[17:42:18.589]                         }
[17:42:18.589]                         base::stop(msg)
[17:42:18.589]                       }
[17:42:18.589]                     })
[17:42:18.589]                   }
[17:42:18.589]                   options(future.plan = NULL)
[17:42:18.589]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.589]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.589]                 }
[17:42:18.589]                 ...future.workdir <- getwd()
[17:42:18.589]             }
[17:42:18.589]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.589]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.589]         }
[17:42:18.589]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.589]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.589]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.589]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.589]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.589]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.589]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.589]             base::names(...future.oldOptions))
[17:42:18.589]     }
[17:42:18.589]     if (FALSE) {
[17:42:18.589]     }
[17:42:18.589]     else {
[17:42:18.589]         if (TRUE) {
[17:42:18.589]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.589]                 open = "w")
[17:42:18.589]         }
[17:42:18.589]         else {
[17:42:18.589]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.589]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.589]         }
[17:42:18.589]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.589]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.589]             base::sink(type = "output", split = FALSE)
[17:42:18.589]             base::close(...future.stdout)
[17:42:18.589]         }, add = TRUE)
[17:42:18.589]     }
[17:42:18.589]     ...future.frame <- base::sys.nframe()
[17:42:18.589]     ...future.conditions <- base::list()
[17:42:18.589]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.589]     if (FALSE) {
[17:42:18.589]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.589]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.589]     }
[17:42:18.589]     ...future.result <- base::tryCatch({
[17:42:18.589]         base::withCallingHandlers({
[17:42:18.589]             ...future.value <- base::withVisible(base::local({
[17:42:18.589]                 1
[17:42:18.589]             }))
[17:42:18.589]             future::FutureResult(value = ...future.value$value, 
[17:42:18.589]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.589]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.589]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.589]                     ...future.globalenv.names))
[17:42:18.589]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.589]         }, condition = base::local({
[17:42:18.589]             c <- base::c
[17:42:18.589]             inherits <- base::inherits
[17:42:18.589]             invokeRestart <- base::invokeRestart
[17:42:18.589]             length <- base::length
[17:42:18.589]             list <- base::list
[17:42:18.589]             seq.int <- base::seq.int
[17:42:18.589]             signalCondition <- base::signalCondition
[17:42:18.589]             sys.calls <- base::sys.calls
[17:42:18.589]             `[[` <- base::`[[`
[17:42:18.589]             `+` <- base::`+`
[17:42:18.589]             `<<-` <- base::`<<-`
[17:42:18.589]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.589]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.589]                   3L)]
[17:42:18.589]             }
[17:42:18.589]             function(cond) {
[17:42:18.589]                 is_error <- inherits(cond, "error")
[17:42:18.589]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.589]                   NULL)
[17:42:18.589]                 if (is_error) {
[17:42:18.589]                   sessionInformation <- function() {
[17:42:18.589]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.589]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.589]                       search = base::search(), system = base::Sys.info())
[17:42:18.589]                   }
[17:42:18.589]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.589]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.589]                     cond$call), session = sessionInformation(), 
[17:42:18.589]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.589]                   signalCondition(cond)
[17:42:18.589]                 }
[17:42:18.589]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.589]                 "immediateCondition"))) {
[17:42:18.589]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.589]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.589]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.589]                   if (TRUE && !signal) {
[17:42:18.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.589]                     {
[17:42:18.589]                       inherits <- base::inherits
[17:42:18.589]                       invokeRestart <- base::invokeRestart
[17:42:18.589]                       is.null <- base::is.null
[17:42:18.589]                       muffled <- FALSE
[17:42:18.589]                       if (inherits(cond, "message")) {
[17:42:18.589]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.589]                         if (muffled) 
[17:42:18.589]                           invokeRestart("muffleMessage")
[17:42:18.589]                       }
[17:42:18.589]                       else if (inherits(cond, "warning")) {
[17:42:18.589]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.589]                         if (muffled) 
[17:42:18.589]                           invokeRestart("muffleWarning")
[17:42:18.589]                       }
[17:42:18.589]                       else if (inherits(cond, "condition")) {
[17:42:18.589]                         if (!is.null(pattern)) {
[17:42:18.589]                           computeRestarts <- base::computeRestarts
[17:42:18.589]                           grepl <- base::grepl
[17:42:18.589]                           restarts <- computeRestarts(cond)
[17:42:18.589]                           for (restart in restarts) {
[17:42:18.589]                             name <- restart$name
[17:42:18.589]                             if (is.null(name)) 
[17:42:18.589]                               next
[17:42:18.589]                             if (!grepl(pattern, name)) 
[17:42:18.589]                               next
[17:42:18.589]                             invokeRestart(restart)
[17:42:18.589]                             muffled <- TRUE
[17:42:18.589]                             break
[17:42:18.589]                           }
[17:42:18.589]                         }
[17:42:18.589]                       }
[17:42:18.589]                       invisible(muffled)
[17:42:18.589]                     }
[17:42:18.589]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.589]                   }
[17:42:18.589]                 }
[17:42:18.589]                 else {
[17:42:18.589]                   if (TRUE) {
[17:42:18.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.589]                     {
[17:42:18.589]                       inherits <- base::inherits
[17:42:18.589]                       invokeRestart <- base::invokeRestart
[17:42:18.589]                       is.null <- base::is.null
[17:42:18.589]                       muffled <- FALSE
[17:42:18.589]                       if (inherits(cond, "message")) {
[17:42:18.589]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.589]                         if (muffled) 
[17:42:18.589]                           invokeRestart("muffleMessage")
[17:42:18.589]                       }
[17:42:18.589]                       else if (inherits(cond, "warning")) {
[17:42:18.589]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.589]                         if (muffled) 
[17:42:18.589]                           invokeRestart("muffleWarning")
[17:42:18.589]                       }
[17:42:18.589]                       else if (inherits(cond, "condition")) {
[17:42:18.589]                         if (!is.null(pattern)) {
[17:42:18.589]                           computeRestarts <- base::computeRestarts
[17:42:18.589]                           grepl <- base::grepl
[17:42:18.589]                           restarts <- computeRestarts(cond)
[17:42:18.589]                           for (restart in restarts) {
[17:42:18.589]                             name <- restart$name
[17:42:18.589]                             if (is.null(name)) 
[17:42:18.589]                               next
[17:42:18.589]                             if (!grepl(pattern, name)) 
[17:42:18.589]                               next
[17:42:18.589]                             invokeRestart(restart)
[17:42:18.589]                             muffled <- TRUE
[17:42:18.589]                             break
[17:42:18.589]                           }
[17:42:18.589]                         }
[17:42:18.589]                       }
[17:42:18.589]                       invisible(muffled)
[17:42:18.589]                     }
[17:42:18.589]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.589]                   }
[17:42:18.589]                 }
[17:42:18.589]             }
[17:42:18.589]         }))
[17:42:18.589]     }, error = function(ex) {
[17:42:18.589]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.589]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.589]                 ...future.rng), started = ...future.startTime, 
[17:42:18.589]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.589]             version = "1.8"), class = "FutureResult")
[17:42:18.589]     }, finally = {
[17:42:18.589]         if (!identical(...future.workdir, getwd())) 
[17:42:18.589]             setwd(...future.workdir)
[17:42:18.589]         {
[17:42:18.589]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.589]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.589]             }
[17:42:18.589]             base::options(...future.oldOptions)
[17:42:18.589]             if (.Platform$OS.type == "windows") {
[17:42:18.589]                 old_names <- names(...future.oldEnvVars)
[17:42:18.589]                 envs <- base::Sys.getenv()
[17:42:18.589]                 names <- names(envs)
[17:42:18.589]                 common <- intersect(names, old_names)
[17:42:18.589]                 added <- setdiff(names, old_names)
[17:42:18.589]                 removed <- setdiff(old_names, names)
[17:42:18.589]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.589]                   envs[common]]
[17:42:18.589]                 NAMES <- toupper(changed)
[17:42:18.589]                 args <- list()
[17:42:18.589]                 for (kk in seq_along(NAMES)) {
[17:42:18.589]                   name <- changed[[kk]]
[17:42:18.589]                   NAME <- NAMES[[kk]]
[17:42:18.589]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.589]                     next
[17:42:18.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.589]                 }
[17:42:18.589]                 NAMES <- toupper(added)
[17:42:18.589]                 for (kk in seq_along(NAMES)) {
[17:42:18.589]                   name <- added[[kk]]
[17:42:18.589]                   NAME <- NAMES[[kk]]
[17:42:18.589]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.589]                     next
[17:42:18.589]                   args[[name]] <- ""
[17:42:18.589]                 }
[17:42:18.589]                 NAMES <- toupper(removed)
[17:42:18.589]                 for (kk in seq_along(NAMES)) {
[17:42:18.589]                   name <- removed[[kk]]
[17:42:18.589]                   NAME <- NAMES[[kk]]
[17:42:18.589]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.589]                     next
[17:42:18.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.589]                 }
[17:42:18.589]                 if (length(args) > 0) 
[17:42:18.589]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.589]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.589]             }
[17:42:18.589]             else {
[17:42:18.589]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.589]             }
[17:42:18.589]             {
[17:42:18.589]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.589]                   0L) {
[17:42:18.589]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.589]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.589]                   base::options(opts)
[17:42:18.589]                 }
[17:42:18.589]                 {
[17:42:18.589]                   {
[17:42:18.589]                     NULL
[17:42:18.589]                     RNGkind("Mersenne-Twister")
[17:42:18.589]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.589]                       inherits = FALSE)
[17:42:18.589]                   }
[17:42:18.589]                   options(future.plan = NULL)
[17:42:18.589]                   if (is.na(NA_character_)) 
[17:42:18.589]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.589]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.589]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.589]                   {
[17:42:18.589]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.589]                     if (!future$lazy) 
[17:42:18.589]                       future <- run(future)
[17:42:18.589]                     invisible(future)
[17:42:18.589]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.589]                 }
[17:42:18.589]             }
[17:42:18.589]         }
[17:42:18.589]     })
[17:42:18.589]     if (TRUE) {
[17:42:18.589]         base::sink(type = "output", split = FALSE)
[17:42:18.589]         if (TRUE) {
[17:42:18.589]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.589]         }
[17:42:18.589]         else {
[17:42:18.589]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.589]         }
[17:42:18.589]         base::close(...future.stdout)
[17:42:18.589]         ...future.stdout <- NULL
[17:42:18.589]     }
[17:42:18.589]     ...future.result$conditions <- ...future.conditions
[17:42:18.589]     ...future.result$finished <- base::Sys.time()
[17:42:18.589]     ...future.result
[17:42:18.589] }
[17:42:18.591] plan(): Setting new future strategy stack:
[17:42:18.591] List of future strategies:
[17:42:18.591] 1. sequential:
[17:42:18.591]    - args: function (..., envir = parent.frame())
[17:42:18.591]    - tweaked: FALSE
[17:42:18.591]    - call: NULL
[17:42:18.592] plan(): nbrOfWorkers() = 1
[17:42:18.593] plan(): Setting new future strategy stack:
[17:42:18.593] List of future strategies:
[17:42:18.593] 1. sequential:
[17:42:18.593]    - args: function (..., envir = parent.frame())
[17:42:18.593]    - tweaked: FALSE
[17:42:18.593]    - call: future::plan("sequential")
[17:42:18.593] plan(): nbrOfWorkers() = 1
[17:42:18.594] SequentialFuture started (and completed)
[17:42:18.594] - Launch lazy future ... done
[17:42:18.594] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'remove') ...
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'list') ...
list()
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'add') ...
[17:42:18.598] getGlobalsAndPackages() ...
[17:42:18.598] Searching for globals...
[17:42:18.599] - globals found: [1] ‘{’
[17:42:18.599] Searching for globals ... DONE
[17:42:18.599] Resolving globals: FALSE
[17:42:18.599] 
[17:42:18.599] 
[17:42:18.600] getGlobalsAndPackages() ... DONE
[17:42:18.600] run() for ‘Future’ ...
[17:42:18.600] - state: ‘created’
[17:42:18.600] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.600] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.600] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.600]   - Field: ‘label’
[17:42:18.601]   - Field: ‘local’
[17:42:18.601]   - Field: ‘owner’
[17:42:18.601]   - Field: ‘envir’
[17:42:18.601]   - Field: ‘packages’
[17:42:18.601]   - Field: ‘gc’
[17:42:18.601]   - Field: ‘conditions’
[17:42:18.601]   - Field: ‘expr’
[17:42:18.601]   - Field: ‘uuid’
[17:42:18.602]   - Field: ‘seed’
[17:42:18.602]   - Field: ‘version’
[17:42:18.602]   - Field: ‘result’
[17:42:18.602]   - Field: ‘asynchronous’
[17:42:18.602]   - Field: ‘calls’
[17:42:18.602]   - Field: ‘globals’
[17:42:18.602]   - Field: ‘stdout’
[17:42:18.602]   - Field: ‘earlySignal’
[17:42:18.602]   - Field: ‘lazy’
[17:42:18.602]   - Field: ‘state’
[17:42:18.603] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.603] - Launch lazy future ...
[17:42:18.603] Packages needed by the future expression (n = 0): <none>
[17:42:18.603] Packages needed by future strategies (n = 0): <none>
[17:42:18.603] {
[17:42:18.603]     {
[17:42:18.603]         {
[17:42:18.603]             ...future.startTime <- base::Sys.time()
[17:42:18.603]             {
[17:42:18.603]                 {
[17:42:18.603]                   {
[17:42:18.603]                     base::local({
[17:42:18.603]                       has_future <- base::requireNamespace("future", 
[17:42:18.603]                         quietly = TRUE)
[17:42:18.603]                       if (has_future) {
[17:42:18.603]                         ns <- base::getNamespace("future")
[17:42:18.603]                         version <- ns[[".package"]][["version"]]
[17:42:18.603]                         if (is.null(version)) 
[17:42:18.603]                           version <- utils::packageVersion("future")
[17:42:18.603]                       }
[17:42:18.603]                       else {
[17:42:18.603]                         version <- NULL
[17:42:18.603]                       }
[17:42:18.603]                       if (!has_future || version < "1.8.0") {
[17:42:18.603]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.603]                           "", base::R.version$version.string), 
[17:42:18.603]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.603]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.603]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.603]                             "release", "version")], collapse = " "), 
[17:42:18.603]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.603]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.603]                           info)
[17:42:18.603]                         info <- base::paste(info, collapse = "; ")
[17:42:18.603]                         if (!has_future) {
[17:42:18.603]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.603]                             info)
[17:42:18.603]                         }
[17:42:18.603]                         else {
[17:42:18.603]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.603]                             info, version)
[17:42:18.603]                         }
[17:42:18.603]                         base::stop(msg)
[17:42:18.603]                       }
[17:42:18.603]                     })
[17:42:18.603]                   }
[17:42:18.603]                   options(future.plan = NULL)
[17:42:18.603]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.603]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.603]                 }
[17:42:18.603]                 ...future.workdir <- getwd()
[17:42:18.603]             }
[17:42:18.603]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.603]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.603]         }
[17:42:18.603]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.603]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.603]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.603]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.603]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.603]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.603]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.603]             base::names(...future.oldOptions))
[17:42:18.603]     }
[17:42:18.603]     if (FALSE) {
[17:42:18.603]     }
[17:42:18.603]     else {
[17:42:18.603]         if (TRUE) {
[17:42:18.603]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.603]                 open = "w")
[17:42:18.603]         }
[17:42:18.603]         else {
[17:42:18.603]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.603]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.603]         }
[17:42:18.603]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.603]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.603]             base::sink(type = "output", split = FALSE)
[17:42:18.603]             base::close(...future.stdout)
[17:42:18.603]         }, add = TRUE)
[17:42:18.603]     }
[17:42:18.603]     ...future.frame <- base::sys.nframe()
[17:42:18.603]     ...future.conditions <- base::list()
[17:42:18.603]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.603]     if (FALSE) {
[17:42:18.603]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.603]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.603]     }
[17:42:18.603]     ...future.result <- base::tryCatch({
[17:42:18.603]         base::withCallingHandlers({
[17:42:18.603]             ...future.value <- base::withVisible(base::local({
[17:42:18.603]                 2
[17:42:18.603]             }))
[17:42:18.603]             future::FutureResult(value = ...future.value$value, 
[17:42:18.603]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.603]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.603]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.603]                     ...future.globalenv.names))
[17:42:18.603]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.603]         }, condition = base::local({
[17:42:18.603]             c <- base::c
[17:42:18.603]             inherits <- base::inherits
[17:42:18.603]             invokeRestart <- base::invokeRestart
[17:42:18.603]             length <- base::length
[17:42:18.603]             list <- base::list
[17:42:18.603]             seq.int <- base::seq.int
[17:42:18.603]             signalCondition <- base::signalCondition
[17:42:18.603]             sys.calls <- base::sys.calls
[17:42:18.603]             `[[` <- base::`[[`
[17:42:18.603]             `+` <- base::`+`
[17:42:18.603]             `<<-` <- base::`<<-`
[17:42:18.603]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.603]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.603]                   3L)]
[17:42:18.603]             }
[17:42:18.603]             function(cond) {
[17:42:18.603]                 is_error <- inherits(cond, "error")
[17:42:18.603]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.603]                   NULL)
[17:42:18.603]                 if (is_error) {
[17:42:18.603]                   sessionInformation <- function() {
[17:42:18.603]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.603]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.603]                       search = base::search(), system = base::Sys.info())
[17:42:18.603]                   }
[17:42:18.603]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.603]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.603]                     cond$call), session = sessionInformation(), 
[17:42:18.603]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.603]                   signalCondition(cond)
[17:42:18.603]                 }
[17:42:18.603]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.603]                 "immediateCondition"))) {
[17:42:18.603]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.603]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.603]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.603]                   if (TRUE && !signal) {
[17:42:18.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.603]                     {
[17:42:18.603]                       inherits <- base::inherits
[17:42:18.603]                       invokeRestart <- base::invokeRestart
[17:42:18.603]                       is.null <- base::is.null
[17:42:18.603]                       muffled <- FALSE
[17:42:18.603]                       if (inherits(cond, "message")) {
[17:42:18.603]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.603]                         if (muffled) 
[17:42:18.603]                           invokeRestart("muffleMessage")
[17:42:18.603]                       }
[17:42:18.603]                       else if (inherits(cond, "warning")) {
[17:42:18.603]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.603]                         if (muffled) 
[17:42:18.603]                           invokeRestart("muffleWarning")
[17:42:18.603]                       }
[17:42:18.603]                       else if (inherits(cond, "condition")) {
[17:42:18.603]                         if (!is.null(pattern)) {
[17:42:18.603]                           computeRestarts <- base::computeRestarts
[17:42:18.603]                           grepl <- base::grepl
[17:42:18.603]                           restarts <- computeRestarts(cond)
[17:42:18.603]                           for (restart in restarts) {
[17:42:18.603]                             name <- restart$name
[17:42:18.603]                             if (is.null(name)) 
[17:42:18.603]                               next
[17:42:18.603]                             if (!grepl(pattern, name)) 
[17:42:18.603]                               next
[17:42:18.603]                             invokeRestart(restart)
[17:42:18.603]                             muffled <- TRUE
[17:42:18.603]                             break
[17:42:18.603]                           }
[17:42:18.603]                         }
[17:42:18.603]                       }
[17:42:18.603]                       invisible(muffled)
[17:42:18.603]                     }
[17:42:18.603]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.603]                   }
[17:42:18.603]                 }
[17:42:18.603]                 else {
[17:42:18.603]                   if (TRUE) {
[17:42:18.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.603]                     {
[17:42:18.603]                       inherits <- base::inherits
[17:42:18.603]                       invokeRestart <- base::invokeRestart
[17:42:18.603]                       is.null <- base::is.null
[17:42:18.603]                       muffled <- FALSE
[17:42:18.603]                       if (inherits(cond, "message")) {
[17:42:18.603]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.603]                         if (muffled) 
[17:42:18.603]                           invokeRestart("muffleMessage")
[17:42:18.603]                       }
[17:42:18.603]                       else if (inherits(cond, "warning")) {
[17:42:18.603]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.603]                         if (muffled) 
[17:42:18.603]                           invokeRestart("muffleWarning")
[17:42:18.603]                       }
[17:42:18.603]                       else if (inherits(cond, "condition")) {
[17:42:18.603]                         if (!is.null(pattern)) {
[17:42:18.603]                           computeRestarts <- base::computeRestarts
[17:42:18.603]                           grepl <- base::grepl
[17:42:18.603]                           restarts <- computeRestarts(cond)
[17:42:18.603]                           for (restart in restarts) {
[17:42:18.603]                             name <- restart$name
[17:42:18.603]                             if (is.null(name)) 
[17:42:18.603]                               next
[17:42:18.603]                             if (!grepl(pattern, name)) 
[17:42:18.603]                               next
[17:42:18.603]                             invokeRestart(restart)
[17:42:18.603]                             muffled <- TRUE
[17:42:18.603]                             break
[17:42:18.603]                           }
[17:42:18.603]                         }
[17:42:18.603]                       }
[17:42:18.603]                       invisible(muffled)
[17:42:18.603]                     }
[17:42:18.603]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.603]                   }
[17:42:18.603]                 }
[17:42:18.603]             }
[17:42:18.603]         }))
[17:42:18.603]     }, error = function(ex) {
[17:42:18.603]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.603]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.603]                 ...future.rng), started = ...future.startTime, 
[17:42:18.603]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.603]             version = "1.8"), class = "FutureResult")
[17:42:18.603]     }, finally = {
[17:42:18.603]         if (!identical(...future.workdir, getwd())) 
[17:42:18.603]             setwd(...future.workdir)
[17:42:18.603]         {
[17:42:18.603]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.603]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.603]             }
[17:42:18.603]             base::options(...future.oldOptions)
[17:42:18.603]             if (.Platform$OS.type == "windows") {
[17:42:18.603]                 old_names <- names(...future.oldEnvVars)
[17:42:18.603]                 envs <- base::Sys.getenv()
[17:42:18.603]                 names <- names(envs)
[17:42:18.603]                 common <- intersect(names, old_names)
[17:42:18.603]                 added <- setdiff(names, old_names)
[17:42:18.603]                 removed <- setdiff(old_names, names)
[17:42:18.603]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.603]                   envs[common]]
[17:42:18.603]                 NAMES <- toupper(changed)
[17:42:18.603]                 args <- list()
[17:42:18.603]                 for (kk in seq_along(NAMES)) {
[17:42:18.603]                   name <- changed[[kk]]
[17:42:18.603]                   NAME <- NAMES[[kk]]
[17:42:18.603]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.603]                     next
[17:42:18.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.603]                 }
[17:42:18.603]                 NAMES <- toupper(added)
[17:42:18.603]                 for (kk in seq_along(NAMES)) {
[17:42:18.603]                   name <- added[[kk]]
[17:42:18.603]                   NAME <- NAMES[[kk]]
[17:42:18.603]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.603]                     next
[17:42:18.603]                   args[[name]] <- ""
[17:42:18.603]                 }
[17:42:18.603]                 NAMES <- toupper(removed)
[17:42:18.603]                 for (kk in seq_along(NAMES)) {
[17:42:18.603]                   name <- removed[[kk]]
[17:42:18.603]                   NAME <- NAMES[[kk]]
[17:42:18.603]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.603]                     next
[17:42:18.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.603]                 }
[17:42:18.603]                 if (length(args) > 0) 
[17:42:18.603]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.603]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.603]             }
[17:42:18.603]             else {
[17:42:18.603]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.603]             }
[17:42:18.603]             {
[17:42:18.603]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.603]                   0L) {
[17:42:18.603]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.603]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.603]                   base::options(opts)
[17:42:18.603]                 }
[17:42:18.603]                 {
[17:42:18.603]                   {
[17:42:18.603]                     NULL
[17:42:18.603]                     RNGkind("Mersenne-Twister")
[17:42:18.603]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.603]                       inherits = FALSE)
[17:42:18.603]                   }
[17:42:18.603]                   options(future.plan = NULL)
[17:42:18.603]                   if (is.na(NA_character_)) 
[17:42:18.603]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.603]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.603]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.603]                   {
[17:42:18.603]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.603]                     if (!future$lazy) 
[17:42:18.603]                       future <- run(future)
[17:42:18.603]                     invisible(future)
[17:42:18.603]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.603]                 }
[17:42:18.603]             }
[17:42:18.603]         }
[17:42:18.603]     })
[17:42:18.603]     if (TRUE) {
[17:42:18.603]         base::sink(type = "output", split = FALSE)
[17:42:18.603]         if (TRUE) {
[17:42:18.603]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.603]         }
[17:42:18.603]         else {
[17:42:18.603]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.603]         }
[17:42:18.603]         base::close(...future.stdout)
[17:42:18.603]         ...future.stdout <- NULL
[17:42:18.603]     }
[17:42:18.603]     ...future.result$conditions <- ...future.conditions
[17:42:18.603]     ...future.result$finished <- base::Sys.time()
[17:42:18.603]     ...future.result
[17:42:18.603] }
[17:42:18.605] plan(): Setting new future strategy stack:
[17:42:18.605] List of future strategies:
[17:42:18.605] 1. sequential:
[17:42:18.605]    - args: function (..., envir = parent.frame())
[17:42:18.605]    - tweaked: FALSE
[17:42:18.605]    - call: NULL
[17:42:18.606] plan(): nbrOfWorkers() = 1
[17:42:18.606] plan(): Setting new future strategy stack:
[17:42:18.606] List of future strategies:
[17:42:18.606] 1. sequential:
[17:42:18.606]    - args: function (..., envir = parent.frame())
[17:42:18.606]    - tweaked: FALSE
[17:42:18.606]    - call: future::plan("sequential")
[17:42:18.607] plan(): nbrOfWorkers() = 1
[17:42:18.607] SequentialFuture started (and completed)
[17:42:18.607] - Launch lazy future ... done
[17:42:18.607] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'collect-first') ...
[17:42:18.611] resolved() for ‘SequentialFuture’ ...
[17:42:18.611] - state: ‘finished’
[17:42:18.611] - run: FALSE
[17:42:18.611] - result: ‘FutureResult’
[17:42:18.611] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'add') ...
[17:42:18.612] getGlobalsAndPackages() ...
[17:42:18.612] Searching for globals...
[17:42:18.612] - globals found: [1] ‘{’
[17:42:18.612] Searching for globals ... DONE
[17:42:18.612] Resolving globals: FALSE
[17:42:18.613] 
[17:42:18.613] 
[17:42:18.613] getGlobalsAndPackages() ... DONE
[17:42:18.613] run() for ‘Future’ ...
[17:42:18.613] - state: ‘created’
[17:42:18.613] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.614] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.614] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.614]   - Field: ‘label’
[17:42:18.614]   - Field: ‘local’
[17:42:18.614]   - Field: ‘owner’
[17:42:18.614]   - Field: ‘envir’
[17:42:18.614]   - Field: ‘packages’
[17:42:18.614]   - Field: ‘gc’
[17:42:18.614]   - Field: ‘conditions’
[17:42:18.615]   - Field: ‘expr’
[17:42:18.615]   - Field: ‘uuid’
[17:42:18.615]   - Field: ‘seed’
[17:42:18.615]   - Field: ‘version’
[17:42:18.615]   - Field: ‘result’
[17:42:18.615]   - Field: ‘asynchronous’
[17:42:18.615]   - Field: ‘calls’
[17:42:18.615]   - Field: ‘globals’
[17:42:18.615]   - Field: ‘stdout’
[17:42:18.615]   - Field: ‘earlySignal’
[17:42:18.616]   - Field: ‘lazy’
[17:42:18.616]   - Field: ‘state’
[17:42:18.616] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.616] - Launch lazy future ...
[17:42:18.616] Packages needed by the future expression (n = 0): <none>
[17:42:18.616] Packages needed by future strategies (n = 0): <none>
[17:42:18.616] {
[17:42:18.616]     {
[17:42:18.616]         {
[17:42:18.616]             ...future.startTime <- base::Sys.time()
[17:42:18.616]             {
[17:42:18.616]                 {
[17:42:18.616]                   {
[17:42:18.616]                     base::local({
[17:42:18.616]                       has_future <- base::requireNamespace("future", 
[17:42:18.616]                         quietly = TRUE)
[17:42:18.616]                       if (has_future) {
[17:42:18.616]                         ns <- base::getNamespace("future")
[17:42:18.616]                         version <- ns[[".package"]][["version"]]
[17:42:18.616]                         if (is.null(version)) 
[17:42:18.616]                           version <- utils::packageVersion("future")
[17:42:18.616]                       }
[17:42:18.616]                       else {
[17:42:18.616]                         version <- NULL
[17:42:18.616]                       }
[17:42:18.616]                       if (!has_future || version < "1.8.0") {
[17:42:18.616]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.616]                           "", base::R.version$version.string), 
[17:42:18.616]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.616]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.616]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.616]                             "release", "version")], collapse = " "), 
[17:42:18.616]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.616]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.616]                           info)
[17:42:18.616]                         info <- base::paste(info, collapse = "; ")
[17:42:18.616]                         if (!has_future) {
[17:42:18.616]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.616]                             info)
[17:42:18.616]                         }
[17:42:18.616]                         else {
[17:42:18.616]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.616]                             info, version)
[17:42:18.616]                         }
[17:42:18.616]                         base::stop(msg)
[17:42:18.616]                       }
[17:42:18.616]                     })
[17:42:18.616]                   }
[17:42:18.616]                   options(future.plan = NULL)
[17:42:18.616]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.616]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.616]                 }
[17:42:18.616]                 ...future.workdir <- getwd()
[17:42:18.616]             }
[17:42:18.616]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.616]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.616]         }
[17:42:18.616]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.616]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.616]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.616]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.616]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.616]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.616]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.616]             base::names(...future.oldOptions))
[17:42:18.616]     }
[17:42:18.616]     if (FALSE) {
[17:42:18.616]     }
[17:42:18.616]     else {
[17:42:18.616]         if (TRUE) {
[17:42:18.616]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.616]                 open = "w")
[17:42:18.616]         }
[17:42:18.616]         else {
[17:42:18.616]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.616]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.616]         }
[17:42:18.616]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.616]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.616]             base::sink(type = "output", split = FALSE)
[17:42:18.616]             base::close(...future.stdout)
[17:42:18.616]         }, add = TRUE)
[17:42:18.616]     }
[17:42:18.616]     ...future.frame <- base::sys.nframe()
[17:42:18.616]     ...future.conditions <- base::list()
[17:42:18.616]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.616]     if (FALSE) {
[17:42:18.616]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.616]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.616]     }
[17:42:18.616]     ...future.result <- base::tryCatch({
[17:42:18.616]         base::withCallingHandlers({
[17:42:18.616]             ...future.value <- base::withVisible(base::local({
[17:42:18.616]                 2
[17:42:18.616]             }))
[17:42:18.616]             future::FutureResult(value = ...future.value$value, 
[17:42:18.616]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.616]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.616]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.616]                     ...future.globalenv.names))
[17:42:18.616]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.616]         }, condition = base::local({
[17:42:18.616]             c <- base::c
[17:42:18.616]             inherits <- base::inherits
[17:42:18.616]             invokeRestart <- base::invokeRestart
[17:42:18.616]             length <- base::length
[17:42:18.616]             list <- base::list
[17:42:18.616]             seq.int <- base::seq.int
[17:42:18.616]             signalCondition <- base::signalCondition
[17:42:18.616]             sys.calls <- base::sys.calls
[17:42:18.616]             `[[` <- base::`[[`
[17:42:18.616]             `+` <- base::`+`
[17:42:18.616]             `<<-` <- base::`<<-`
[17:42:18.616]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.616]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.616]                   3L)]
[17:42:18.616]             }
[17:42:18.616]             function(cond) {
[17:42:18.616]                 is_error <- inherits(cond, "error")
[17:42:18.616]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.616]                   NULL)
[17:42:18.616]                 if (is_error) {
[17:42:18.616]                   sessionInformation <- function() {
[17:42:18.616]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.616]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.616]                       search = base::search(), system = base::Sys.info())
[17:42:18.616]                   }
[17:42:18.616]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.616]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.616]                     cond$call), session = sessionInformation(), 
[17:42:18.616]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.616]                   signalCondition(cond)
[17:42:18.616]                 }
[17:42:18.616]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.616]                 "immediateCondition"))) {
[17:42:18.616]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.616]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.616]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.616]                   if (TRUE && !signal) {
[17:42:18.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.616]                     {
[17:42:18.616]                       inherits <- base::inherits
[17:42:18.616]                       invokeRestart <- base::invokeRestart
[17:42:18.616]                       is.null <- base::is.null
[17:42:18.616]                       muffled <- FALSE
[17:42:18.616]                       if (inherits(cond, "message")) {
[17:42:18.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.616]                         if (muffled) 
[17:42:18.616]                           invokeRestart("muffleMessage")
[17:42:18.616]                       }
[17:42:18.616]                       else if (inherits(cond, "warning")) {
[17:42:18.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.616]                         if (muffled) 
[17:42:18.616]                           invokeRestart("muffleWarning")
[17:42:18.616]                       }
[17:42:18.616]                       else if (inherits(cond, "condition")) {
[17:42:18.616]                         if (!is.null(pattern)) {
[17:42:18.616]                           computeRestarts <- base::computeRestarts
[17:42:18.616]                           grepl <- base::grepl
[17:42:18.616]                           restarts <- computeRestarts(cond)
[17:42:18.616]                           for (restart in restarts) {
[17:42:18.616]                             name <- restart$name
[17:42:18.616]                             if (is.null(name)) 
[17:42:18.616]                               next
[17:42:18.616]                             if (!grepl(pattern, name)) 
[17:42:18.616]                               next
[17:42:18.616]                             invokeRestart(restart)
[17:42:18.616]                             muffled <- TRUE
[17:42:18.616]                             break
[17:42:18.616]                           }
[17:42:18.616]                         }
[17:42:18.616]                       }
[17:42:18.616]                       invisible(muffled)
[17:42:18.616]                     }
[17:42:18.616]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.616]                   }
[17:42:18.616]                 }
[17:42:18.616]                 else {
[17:42:18.616]                   if (TRUE) {
[17:42:18.616]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.616]                     {
[17:42:18.616]                       inherits <- base::inherits
[17:42:18.616]                       invokeRestart <- base::invokeRestart
[17:42:18.616]                       is.null <- base::is.null
[17:42:18.616]                       muffled <- FALSE
[17:42:18.616]                       if (inherits(cond, "message")) {
[17:42:18.616]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.616]                         if (muffled) 
[17:42:18.616]                           invokeRestart("muffleMessage")
[17:42:18.616]                       }
[17:42:18.616]                       else if (inherits(cond, "warning")) {
[17:42:18.616]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.616]                         if (muffled) 
[17:42:18.616]                           invokeRestart("muffleWarning")
[17:42:18.616]                       }
[17:42:18.616]                       else if (inherits(cond, "condition")) {
[17:42:18.616]                         if (!is.null(pattern)) {
[17:42:18.616]                           computeRestarts <- base::computeRestarts
[17:42:18.616]                           grepl <- base::grepl
[17:42:18.616]                           restarts <- computeRestarts(cond)
[17:42:18.616]                           for (restart in restarts) {
[17:42:18.616]                             name <- restart$name
[17:42:18.616]                             if (is.null(name)) 
[17:42:18.616]                               next
[17:42:18.616]                             if (!grepl(pattern, name)) 
[17:42:18.616]                               next
[17:42:18.616]                             invokeRestart(restart)
[17:42:18.616]                             muffled <- TRUE
[17:42:18.616]                             break
[17:42:18.616]                           }
[17:42:18.616]                         }
[17:42:18.616]                       }
[17:42:18.616]                       invisible(muffled)
[17:42:18.616]                     }
[17:42:18.616]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.616]                   }
[17:42:18.616]                 }
[17:42:18.616]             }
[17:42:18.616]         }))
[17:42:18.616]     }, error = function(ex) {
[17:42:18.616]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.616]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.616]                 ...future.rng), started = ...future.startTime, 
[17:42:18.616]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.616]             version = "1.8"), class = "FutureResult")
[17:42:18.616]     }, finally = {
[17:42:18.616]         if (!identical(...future.workdir, getwd())) 
[17:42:18.616]             setwd(...future.workdir)
[17:42:18.616]         {
[17:42:18.616]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.616]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.616]             }
[17:42:18.616]             base::options(...future.oldOptions)
[17:42:18.616]             if (.Platform$OS.type == "windows") {
[17:42:18.616]                 old_names <- names(...future.oldEnvVars)
[17:42:18.616]                 envs <- base::Sys.getenv()
[17:42:18.616]                 names <- names(envs)
[17:42:18.616]                 common <- intersect(names, old_names)
[17:42:18.616]                 added <- setdiff(names, old_names)
[17:42:18.616]                 removed <- setdiff(old_names, names)
[17:42:18.616]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.616]                   envs[common]]
[17:42:18.616]                 NAMES <- toupper(changed)
[17:42:18.616]                 args <- list()
[17:42:18.616]                 for (kk in seq_along(NAMES)) {
[17:42:18.616]                   name <- changed[[kk]]
[17:42:18.616]                   NAME <- NAMES[[kk]]
[17:42:18.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.616]                     next
[17:42:18.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.616]                 }
[17:42:18.616]                 NAMES <- toupper(added)
[17:42:18.616]                 for (kk in seq_along(NAMES)) {
[17:42:18.616]                   name <- added[[kk]]
[17:42:18.616]                   NAME <- NAMES[[kk]]
[17:42:18.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.616]                     next
[17:42:18.616]                   args[[name]] <- ""
[17:42:18.616]                 }
[17:42:18.616]                 NAMES <- toupper(removed)
[17:42:18.616]                 for (kk in seq_along(NAMES)) {
[17:42:18.616]                   name <- removed[[kk]]
[17:42:18.616]                   NAME <- NAMES[[kk]]
[17:42:18.616]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.616]                     next
[17:42:18.616]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.616]                 }
[17:42:18.616]                 if (length(args) > 0) 
[17:42:18.616]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.616]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.616]             }
[17:42:18.616]             else {
[17:42:18.616]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.616]             }
[17:42:18.616]             {
[17:42:18.616]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.616]                   0L) {
[17:42:18.616]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.616]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.616]                   base::options(opts)
[17:42:18.616]                 }
[17:42:18.616]                 {
[17:42:18.616]                   {
[17:42:18.616]                     NULL
[17:42:18.616]                     RNGkind("Mersenne-Twister")
[17:42:18.616]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.616]                       inherits = FALSE)
[17:42:18.616]                   }
[17:42:18.616]                   options(future.plan = NULL)
[17:42:18.616]                   if (is.na(NA_character_)) 
[17:42:18.616]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.616]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.616]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.616]                   {
[17:42:18.616]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.616]                     if (!future$lazy) 
[17:42:18.616]                       future <- run(future)
[17:42:18.616]                     invisible(future)
[17:42:18.616]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.616]                 }
[17:42:18.616]             }
[17:42:18.616]         }
[17:42:18.616]     })
[17:42:18.616]     if (TRUE) {
[17:42:18.616]         base::sink(type = "output", split = FALSE)
[17:42:18.616]         if (TRUE) {
[17:42:18.616]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.616]         }
[17:42:18.616]         else {
[17:42:18.616]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.616]         }
[17:42:18.616]         base::close(...future.stdout)
[17:42:18.616]         ...future.stdout <- NULL
[17:42:18.616]     }
[17:42:18.616]     ...future.result$conditions <- ...future.conditions
[17:42:18.616]     ...future.result$finished <- base::Sys.time()
[17:42:18.616]     ...future.result
[17:42:18.616] }
[17:42:18.618] plan(): Setting new future strategy stack:
[17:42:18.618] List of future strategies:
[17:42:18.618] 1. sequential:
[17:42:18.618]    - args: function (..., envir = parent.frame())
[17:42:18.618]    - tweaked: FALSE
[17:42:18.618]    - call: NULL
[17:42:18.619] plan(): nbrOfWorkers() = 1
[17:42:18.619] plan(): Setting new future strategy stack:
[17:42:18.619] List of future strategies:
[17:42:18.619] 1. sequential:
[17:42:18.619]    - args: function (..., envir = parent.frame())
[17:42:18.619]    - tweaked: FALSE
[17:42:18.619]    - call: future::plan("sequential")
[17:42:18.620] plan(): nbrOfWorkers() = 1
[17:42:18.620] SequentialFuture started (and completed)
[17:42:18.620] - Launch lazy future ... done
[17:42:18.620] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'reset') ...
*** FutureRegistry('multicore-8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:42:18.621] getGlobalsAndPackages() ...
[17:42:18.621] Searching for globals...
[17:42:18.622] - globals found: [1] ‘{’
[17:42:18.622] Searching for globals ... DONE
[17:42:18.622] Resolving globals: FALSE
[17:42:18.622] 
[17:42:18.622] 
[17:42:18.622] getGlobalsAndPackages() ... DONE
[17:42:18.623] run() for ‘Future’ ...
[17:42:18.623] - state: ‘created’
[17:42:18.623] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.623] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.623] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.623]   - Field: ‘label’
[17:42:18.623]   - Field: ‘local’
[17:42:18.623]   - Field: ‘owner’
[17:42:18.624]   - Field: ‘envir’
[17:42:18.624]   - Field: ‘packages’
[17:42:18.624]   - Field: ‘gc’
[17:42:18.624]   - Field: ‘conditions’
[17:42:18.624]   - Field: ‘expr’
[17:42:18.624]   - Field: ‘uuid’
[17:42:18.624]   - Field: ‘seed’
[17:42:18.624]   - Field: ‘version’
[17:42:18.624]   - Field: ‘result’
[17:42:18.624]   - Field: ‘asynchronous’
[17:42:18.624]   - Field: ‘calls’
[17:42:18.625]   - Field: ‘globals’
[17:42:18.625]   - Field: ‘stdout’
[17:42:18.625]   - Field: ‘earlySignal’
[17:42:18.625]   - Field: ‘lazy’
[17:42:18.625]   - Field: ‘state’
[17:42:18.625] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.625] - Launch lazy future ...
[17:42:18.625] Packages needed by the future expression (n = 0): <none>
[17:42:18.625] Packages needed by future strategies (n = 0): <none>
[17:42:18.626] {
[17:42:18.626]     {
[17:42:18.626]         {
[17:42:18.626]             ...future.startTime <- base::Sys.time()
[17:42:18.626]             {
[17:42:18.626]                 {
[17:42:18.626]                   {
[17:42:18.626]                     base::local({
[17:42:18.626]                       has_future <- base::requireNamespace("future", 
[17:42:18.626]                         quietly = TRUE)
[17:42:18.626]                       if (has_future) {
[17:42:18.626]                         ns <- base::getNamespace("future")
[17:42:18.626]                         version <- ns[[".package"]][["version"]]
[17:42:18.626]                         if (is.null(version)) 
[17:42:18.626]                           version <- utils::packageVersion("future")
[17:42:18.626]                       }
[17:42:18.626]                       else {
[17:42:18.626]                         version <- NULL
[17:42:18.626]                       }
[17:42:18.626]                       if (!has_future || version < "1.8.0") {
[17:42:18.626]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.626]                           "", base::R.version$version.string), 
[17:42:18.626]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.626]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.626]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.626]                             "release", "version")], collapse = " "), 
[17:42:18.626]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.626]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.626]                           info)
[17:42:18.626]                         info <- base::paste(info, collapse = "; ")
[17:42:18.626]                         if (!has_future) {
[17:42:18.626]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.626]                             info)
[17:42:18.626]                         }
[17:42:18.626]                         else {
[17:42:18.626]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.626]                             info, version)
[17:42:18.626]                         }
[17:42:18.626]                         base::stop(msg)
[17:42:18.626]                       }
[17:42:18.626]                     })
[17:42:18.626]                   }
[17:42:18.626]                   options(future.plan = NULL)
[17:42:18.626]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.626]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.626]                 }
[17:42:18.626]                 ...future.workdir <- getwd()
[17:42:18.626]             }
[17:42:18.626]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.626]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.626]         }
[17:42:18.626]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.626]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.626]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.626]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.626]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.626]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.626]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.626]             base::names(...future.oldOptions))
[17:42:18.626]     }
[17:42:18.626]     if (FALSE) {
[17:42:18.626]     }
[17:42:18.626]     else {
[17:42:18.626]         if (TRUE) {
[17:42:18.626]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.626]                 open = "w")
[17:42:18.626]         }
[17:42:18.626]         else {
[17:42:18.626]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.626]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.626]         }
[17:42:18.626]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.626]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.626]             base::sink(type = "output", split = FALSE)
[17:42:18.626]             base::close(...future.stdout)
[17:42:18.626]         }, add = TRUE)
[17:42:18.626]     }
[17:42:18.626]     ...future.frame <- base::sys.nframe()
[17:42:18.626]     ...future.conditions <- base::list()
[17:42:18.626]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.626]     if (FALSE) {
[17:42:18.626]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.626]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.626]     }
[17:42:18.626]     ...future.result <- base::tryCatch({
[17:42:18.626]         base::withCallingHandlers({
[17:42:18.626]             ...future.value <- base::withVisible(base::local({
[17:42:18.626]                 1
[17:42:18.626]             }))
[17:42:18.626]             future::FutureResult(value = ...future.value$value, 
[17:42:18.626]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.626]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.626]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.626]                     ...future.globalenv.names))
[17:42:18.626]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.626]         }, condition = base::local({
[17:42:18.626]             c <- base::c
[17:42:18.626]             inherits <- base::inherits
[17:42:18.626]             invokeRestart <- base::invokeRestart
[17:42:18.626]             length <- base::length
[17:42:18.626]             list <- base::list
[17:42:18.626]             seq.int <- base::seq.int
[17:42:18.626]             signalCondition <- base::signalCondition
[17:42:18.626]             sys.calls <- base::sys.calls
[17:42:18.626]             `[[` <- base::`[[`
[17:42:18.626]             `+` <- base::`+`
[17:42:18.626]             `<<-` <- base::`<<-`
[17:42:18.626]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.626]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.626]                   3L)]
[17:42:18.626]             }
[17:42:18.626]             function(cond) {
[17:42:18.626]                 is_error <- inherits(cond, "error")
[17:42:18.626]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.626]                   NULL)
[17:42:18.626]                 if (is_error) {
[17:42:18.626]                   sessionInformation <- function() {
[17:42:18.626]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.626]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.626]                       search = base::search(), system = base::Sys.info())
[17:42:18.626]                   }
[17:42:18.626]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.626]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.626]                     cond$call), session = sessionInformation(), 
[17:42:18.626]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.626]                   signalCondition(cond)
[17:42:18.626]                 }
[17:42:18.626]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.626]                 "immediateCondition"))) {
[17:42:18.626]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.626]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.626]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.626]                   if (TRUE && !signal) {
[17:42:18.626]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.626]                     {
[17:42:18.626]                       inherits <- base::inherits
[17:42:18.626]                       invokeRestart <- base::invokeRestart
[17:42:18.626]                       is.null <- base::is.null
[17:42:18.626]                       muffled <- FALSE
[17:42:18.626]                       if (inherits(cond, "message")) {
[17:42:18.626]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.626]                         if (muffled) 
[17:42:18.626]                           invokeRestart("muffleMessage")
[17:42:18.626]                       }
[17:42:18.626]                       else if (inherits(cond, "warning")) {
[17:42:18.626]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.626]                         if (muffled) 
[17:42:18.626]                           invokeRestart("muffleWarning")
[17:42:18.626]                       }
[17:42:18.626]                       else if (inherits(cond, "condition")) {
[17:42:18.626]                         if (!is.null(pattern)) {
[17:42:18.626]                           computeRestarts <- base::computeRestarts
[17:42:18.626]                           grepl <- base::grepl
[17:42:18.626]                           restarts <- computeRestarts(cond)
[17:42:18.626]                           for (restart in restarts) {
[17:42:18.626]                             name <- restart$name
[17:42:18.626]                             if (is.null(name)) 
[17:42:18.626]                               next
[17:42:18.626]                             if (!grepl(pattern, name)) 
[17:42:18.626]                               next
[17:42:18.626]                             invokeRestart(restart)
[17:42:18.626]                             muffled <- TRUE
[17:42:18.626]                             break
[17:42:18.626]                           }
[17:42:18.626]                         }
[17:42:18.626]                       }
[17:42:18.626]                       invisible(muffled)
[17:42:18.626]                     }
[17:42:18.626]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.626]                   }
[17:42:18.626]                 }
[17:42:18.626]                 else {
[17:42:18.626]                   if (TRUE) {
[17:42:18.626]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.626]                     {
[17:42:18.626]                       inherits <- base::inherits
[17:42:18.626]                       invokeRestart <- base::invokeRestart
[17:42:18.626]                       is.null <- base::is.null
[17:42:18.626]                       muffled <- FALSE
[17:42:18.626]                       if (inherits(cond, "message")) {
[17:42:18.626]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.626]                         if (muffled) 
[17:42:18.626]                           invokeRestart("muffleMessage")
[17:42:18.626]                       }
[17:42:18.626]                       else if (inherits(cond, "warning")) {
[17:42:18.626]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.626]                         if (muffled) 
[17:42:18.626]                           invokeRestart("muffleWarning")
[17:42:18.626]                       }
[17:42:18.626]                       else if (inherits(cond, "condition")) {
[17:42:18.626]                         if (!is.null(pattern)) {
[17:42:18.626]                           computeRestarts <- base::computeRestarts
[17:42:18.626]                           grepl <- base::grepl
[17:42:18.626]                           restarts <- computeRestarts(cond)
[17:42:18.626]                           for (restart in restarts) {
[17:42:18.626]                             name <- restart$name
[17:42:18.626]                             if (is.null(name)) 
[17:42:18.626]                               next
[17:42:18.626]                             if (!grepl(pattern, name)) 
[17:42:18.626]                               next
[17:42:18.626]                             invokeRestart(restart)
[17:42:18.626]                             muffled <- TRUE
[17:42:18.626]                             break
[17:42:18.626]                           }
[17:42:18.626]                         }
[17:42:18.626]                       }
[17:42:18.626]                       invisible(muffled)
[17:42:18.626]                     }
[17:42:18.626]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.626]                   }
[17:42:18.626]                 }
[17:42:18.626]             }
[17:42:18.626]         }))
[17:42:18.626]     }, error = function(ex) {
[17:42:18.626]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.626]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.626]                 ...future.rng), started = ...future.startTime, 
[17:42:18.626]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.626]             version = "1.8"), class = "FutureResult")
[17:42:18.626]     }, finally = {
[17:42:18.626]         if (!identical(...future.workdir, getwd())) 
[17:42:18.626]             setwd(...future.workdir)
[17:42:18.626]         {
[17:42:18.626]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.626]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.626]             }
[17:42:18.626]             base::options(...future.oldOptions)
[17:42:18.626]             if (.Platform$OS.type == "windows") {
[17:42:18.626]                 old_names <- names(...future.oldEnvVars)
[17:42:18.626]                 envs <- base::Sys.getenv()
[17:42:18.626]                 names <- names(envs)
[17:42:18.626]                 common <- intersect(names, old_names)
[17:42:18.626]                 added <- setdiff(names, old_names)
[17:42:18.626]                 removed <- setdiff(old_names, names)
[17:42:18.626]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.626]                   envs[common]]
[17:42:18.626]                 NAMES <- toupper(changed)
[17:42:18.626]                 args <- list()
[17:42:18.626]                 for (kk in seq_along(NAMES)) {
[17:42:18.626]                   name <- changed[[kk]]
[17:42:18.626]                   NAME <- NAMES[[kk]]
[17:42:18.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.626]                     next
[17:42:18.626]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.626]                 }
[17:42:18.626]                 NAMES <- toupper(added)
[17:42:18.626]                 for (kk in seq_along(NAMES)) {
[17:42:18.626]                   name <- added[[kk]]
[17:42:18.626]                   NAME <- NAMES[[kk]]
[17:42:18.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.626]                     next
[17:42:18.626]                   args[[name]] <- ""
[17:42:18.626]                 }
[17:42:18.626]                 NAMES <- toupper(removed)
[17:42:18.626]                 for (kk in seq_along(NAMES)) {
[17:42:18.626]                   name <- removed[[kk]]
[17:42:18.626]                   NAME <- NAMES[[kk]]
[17:42:18.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.626]                     next
[17:42:18.626]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.626]                 }
[17:42:18.626]                 if (length(args) > 0) 
[17:42:18.626]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.626]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.626]             }
[17:42:18.626]             else {
[17:42:18.626]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.626]             }
[17:42:18.626]             {
[17:42:18.626]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.626]                   0L) {
[17:42:18.626]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.626]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.626]                   base::options(opts)
[17:42:18.626]                 }
[17:42:18.626]                 {
[17:42:18.626]                   {
[17:42:18.626]                     NULL
[17:42:18.626]                     RNGkind("Mersenne-Twister")
[17:42:18.626]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.626]                       inherits = FALSE)
[17:42:18.626]                   }
[17:42:18.626]                   options(future.plan = NULL)
[17:42:18.626]                   if (is.na(NA_character_)) 
[17:42:18.626]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.626]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.626]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.626]                   {
[17:42:18.626]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.626]                     if (!future$lazy) 
[17:42:18.626]                       future <- run(future)
[17:42:18.626]                     invisible(future)
[17:42:18.626]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.626]                 }
[17:42:18.626]             }
[17:42:18.626]         }
[17:42:18.626]     })
[17:42:18.626]     if (TRUE) {
[17:42:18.626]         base::sink(type = "output", split = FALSE)
[17:42:18.626]         if (TRUE) {
[17:42:18.626]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.626]         }
[17:42:18.626]         else {
[17:42:18.626]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.626]         }
[17:42:18.626]         base::close(...future.stdout)
[17:42:18.626]         ...future.stdout <- NULL
[17:42:18.626]     }
[17:42:18.626]     ...future.result$conditions <- ...future.conditions
[17:42:18.626]     ...future.result$finished <- base::Sys.time()
[17:42:18.626]     ...future.result
[17:42:18.626] }
[17:42:18.628] plan(): Setting new future strategy stack:
[17:42:18.628] List of future strategies:
[17:42:18.628] 1. sequential:
[17:42:18.628]    - args: function (..., envir = parent.frame())
[17:42:18.628]    - tweaked: FALSE
[17:42:18.628]    - call: NULL
[17:42:18.628] plan(): nbrOfWorkers() = 1
[17:42:18.629] plan(): Setting new future strategy stack:
[17:42:18.629] List of future strategies:
[17:42:18.629] 1. sequential:
[17:42:18.629]    - args: function (..., envir = parent.frame())
[17:42:18.629]    - tweaked: FALSE
[17:42:18.629]    - call: future::plan("sequential")
[17:42:18.629] plan(): nbrOfWorkers() = 1
[17:42:18.629] SequentialFuture started (and completed)
[17:42:18.630] - Launch lazy future ... done
[17:42:18.630] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[17:42:18.631] getGlobalsAndPackages() ...
[17:42:18.631] Searching for globals...
[17:42:18.631] - globals found: [1] ‘{’
[17:42:18.632] Searching for globals ... DONE
[17:42:18.632] Resolving globals: FALSE
[17:42:18.632] 
[17:42:18.632] 
[17:42:18.632] getGlobalsAndPackages() ... DONE
[17:42:18.632] run() for ‘Future’ ...
[17:42:18.632] - state: ‘created’
[17:42:18.633] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.633] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.633] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.633]   - Field: ‘label’
[17:42:18.633]   - Field: ‘local’
[17:42:18.633]   - Field: ‘owner’
[17:42:18.633]   - Field: ‘envir’
[17:42:18.633]   - Field: ‘packages’
[17:42:18.633]   - Field: ‘gc’
[17:42:18.634]   - Field: ‘conditions’
[17:42:18.634]   - Field: ‘expr’
[17:42:18.634]   - Field: ‘uuid’
[17:42:18.634]   - Field: ‘seed’
[17:42:18.634]   - Field: ‘version’
[17:42:18.634]   - Field: ‘result’
[17:42:18.634]   - Field: ‘asynchronous’
[17:42:18.634]   - Field: ‘calls’
[17:42:18.634]   - Field: ‘globals’
[17:42:18.634]   - Field: ‘stdout’
[17:42:18.635]   - Field: ‘earlySignal’
[17:42:18.635]   - Field: ‘lazy’
[17:42:18.635]   - Field: ‘state’
[17:42:18.635] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.635] - Launch lazy future ...
[17:42:18.635] Packages needed by the future expression (n = 0): <none>
[17:42:18.635] Packages needed by future strategies (n = 0): <none>
[17:42:18.636] {
[17:42:18.636]     {
[17:42:18.636]         {
[17:42:18.636]             ...future.startTime <- base::Sys.time()
[17:42:18.636]             {
[17:42:18.636]                 {
[17:42:18.636]                   {
[17:42:18.636]                     base::local({
[17:42:18.636]                       has_future <- base::requireNamespace("future", 
[17:42:18.636]                         quietly = TRUE)
[17:42:18.636]                       if (has_future) {
[17:42:18.636]                         ns <- base::getNamespace("future")
[17:42:18.636]                         version <- ns[[".package"]][["version"]]
[17:42:18.636]                         if (is.null(version)) 
[17:42:18.636]                           version <- utils::packageVersion("future")
[17:42:18.636]                       }
[17:42:18.636]                       else {
[17:42:18.636]                         version <- NULL
[17:42:18.636]                       }
[17:42:18.636]                       if (!has_future || version < "1.8.0") {
[17:42:18.636]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.636]                           "", base::R.version$version.string), 
[17:42:18.636]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.636]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.636]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.636]                             "release", "version")], collapse = " "), 
[17:42:18.636]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.636]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.636]                           info)
[17:42:18.636]                         info <- base::paste(info, collapse = "; ")
[17:42:18.636]                         if (!has_future) {
[17:42:18.636]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.636]                             info)
[17:42:18.636]                         }
[17:42:18.636]                         else {
[17:42:18.636]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.636]                             info, version)
[17:42:18.636]                         }
[17:42:18.636]                         base::stop(msg)
[17:42:18.636]                       }
[17:42:18.636]                     })
[17:42:18.636]                   }
[17:42:18.636]                   options(future.plan = NULL)
[17:42:18.636]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.636]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.636]                 }
[17:42:18.636]                 ...future.workdir <- getwd()
[17:42:18.636]             }
[17:42:18.636]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.636]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.636]         }
[17:42:18.636]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.636]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.636]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.636]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.636]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.636]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.636]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.636]             base::names(...future.oldOptions))
[17:42:18.636]     }
[17:42:18.636]     if (FALSE) {
[17:42:18.636]     }
[17:42:18.636]     else {
[17:42:18.636]         if (TRUE) {
[17:42:18.636]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.636]                 open = "w")
[17:42:18.636]         }
[17:42:18.636]         else {
[17:42:18.636]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.636]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.636]         }
[17:42:18.636]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.636]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.636]             base::sink(type = "output", split = FALSE)
[17:42:18.636]             base::close(...future.stdout)
[17:42:18.636]         }, add = TRUE)
[17:42:18.636]     }
[17:42:18.636]     ...future.frame <- base::sys.nframe()
[17:42:18.636]     ...future.conditions <- base::list()
[17:42:18.636]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.636]     if (FALSE) {
[17:42:18.636]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.636]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.636]     }
[17:42:18.636]     ...future.result <- base::tryCatch({
[17:42:18.636]         base::withCallingHandlers({
[17:42:18.636]             ...future.value <- base::withVisible(base::local({
[17:42:18.636]                 2
[17:42:18.636]             }))
[17:42:18.636]             future::FutureResult(value = ...future.value$value, 
[17:42:18.636]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.636]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.636]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.636]                     ...future.globalenv.names))
[17:42:18.636]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.636]         }, condition = base::local({
[17:42:18.636]             c <- base::c
[17:42:18.636]             inherits <- base::inherits
[17:42:18.636]             invokeRestart <- base::invokeRestart
[17:42:18.636]             length <- base::length
[17:42:18.636]             list <- base::list
[17:42:18.636]             seq.int <- base::seq.int
[17:42:18.636]             signalCondition <- base::signalCondition
[17:42:18.636]             sys.calls <- base::sys.calls
[17:42:18.636]             `[[` <- base::`[[`
[17:42:18.636]             `+` <- base::`+`
[17:42:18.636]             `<<-` <- base::`<<-`
[17:42:18.636]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.636]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.636]                   3L)]
[17:42:18.636]             }
[17:42:18.636]             function(cond) {
[17:42:18.636]                 is_error <- inherits(cond, "error")
[17:42:18.636]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.636]                   NULL)
[17:42:18.636]                 if (is_error) {
[17:42:18.636]                   sessionInformation <- function() {
[17:42:18.636]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.636]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.636]                       search = base::search(), system = base::Sys.info())
[17:42:18.636]                   }
[17:42:18.636]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.636]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.636]                     cond$call), session = sessionInformation(), 
[17:42:18.636]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.636]                   signalCondition(cond)
[17:42:18.636]                 }
[17:42:18.636]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.636]                 "immediateCondition"))) {
[17:42:18.636]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.636]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.636]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.636]                   if (TRUE && !signal) {
[17:42:18.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.636]                     {
[17:42:18.636]                       inherits <- base::inherits
[17:42:18.636]                       invokeRestart <- base::invokeRestart
[17:42:18.636]                       is.null <- base::is.null
[17:42:18.636]                       muffled <- FALSE
[17:42:18.636]                       if (inherits(cond, "message")) {
[17:42:18.636]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.636]                         if (muffled) 
[17:42:18.636]                           invokeRestart("muffleMessage")
[17:42:18.636]                       }
[17:42:18.636]                       else if (inherits(cond, "warning")) {
[17:42:18.636]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.636]                         if (muffled) 
[17:42:18.636]                           invokeRestart("muffleWarning")
[17:42:18.636]                       }
[17:42:18.636]                       else if (inherits(cond, "condition")) {
[17:42:18.636]                         if (!is.null(pattern)) {
[17:42:18.636]                           computeRestarts <- base::computeRestarts
[17:42:18.636]                           grepl <- base::grepl
[17:42:18.636]                           restarts <- computeRestarts(cond)
[17:42:18.636]                           for (restart in restarts) {
[17:42:18.636]                             name <- restart$name
[17:42:18.636]                             if (is.null(name)) 
[17:42:18.636]                               next
[17:42:18.636]                             if (!grepl(pattern, name)) 
[17:42:18.636]                               next
[17:42:18.636]                             invokeRestart(restart)
[17:42:18.636]                             muffled <- TRUE
[17:42:18.636]                             break
[17:42:18.636]                           }
[17:42:18.636]                         }
[17:42:18.636]                       }
[17:42:18.636]                       invisible(muffled)
[17:42:18.636]                     }
[17:42:18.636]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.636]                   }
[17:42:18.636]                 }
[17:42:18.636]                 else {
[17:42:18.636]                   if (TRUE) {
[17:42:18.636]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.636]                     {
[17:42:18.636]                       inherits <- base::inherits
[17:42:18.636]                       invokeRestart <- base::invokeRestart
[17:42:18.636]                       is.null <- base::is.null
[17:42:18.636]                       muffled <- FALSE
[17:42:18.636]                       if (inherits(cond, "message")) {
[17:42:18.636]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.636]                         if (muffled) 
[17:42:18.636]                           invokeRestart("muffleMessage")
[17:42:18.636]                       }
[17:42:18.636]                       else if (inherits(cond, "warning")) {
[17:42:18.636]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.636]                         if (muffled) 
[17:42:18.636]                           invokeRestart("muffleWarning")
[17:42:18.636]                       }
[17:42:18.636]                       else if (inherits(cond, "condition")) {
[17:42:18.636]                         if (!is.null(pattern)) {
[17:42:18.636]                           computeRestarts <- base::computeRestarts
[17:42:18.636]                           grepl <- base::grepl
[17:42:18.636]                           restarts <- computeRestarts(cond)
[17:42:18.636]                           for (restart in restarts) {
[17:42:18.636]                             name <- restart$name
[17:42:18.636]                             if (is.null(name)) 
[17:42:18.636]                               next
[17:42:18.636]                             if (!grepl(pattern, name)) 
[17:42:18.636]                               next
[17:42:18.636]                             invokeRestart(restart)
[17:42:18.636]                             muffled <- TRUE
[17:42:18.636]                             break
[17:42:18.636]                           }
[17:42:18.636]                         }
[17:42:18.636]                       }
[17:42:18.636]                       invisible(muffled)
[17:42:18.636]                     }
[17:42:18.636]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.636]                   }
[17:42:18.636]                 }
[17:42:18.636]             }
[17:42:18.636]         }))
[17:42:18.636]     }, error = function(ex) {
[17:42:18.636]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.636]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.636]                 ...future.rng), started = ...future.startTime, 
[17:42:18.636]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.636]             version = "1.8"), class = "FutureResult")
[17:42:18.636]     }, finally = {
[17:42:18.636]         if (!identical(...future.workdir, getwd())) 
[17:42:18.636]             setwd(...future.workdir)
[17:42:18.636]         {
[17:42:18.636]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.636]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.636]             }
[17:42:18.636]             base::options(...future.oldOptions)
[17:42:18.636]             if (.Platform$OS.type == "windows") {
[17:42:18.636]                 old_names <- names(...future.oldEnvVars)
[17:42:18.636]                 envs <- base::Sys.getenv()
[17:42:18.636]                 names <- names(envs)
[17:42:18.636]                 common <- intersect(names, old_names)
[17:42:18.636]                 added <- setdiff(names, old_names)
[17:42:18.636]                 removed <- setdiff(old_names, names)
[17:42:18.636]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.636]                   envs[common]]
[17:42:18.636]                 NAMES <- toupper(changed)
[17:42:18.636]                 args <- list()
[17:42:18.636]                 for (kk in seq_along(NAMES)) {
[17:42:18.636]                   name <- changed[[kk]]
[17:42:18.636]                   NAME <- NAMES[[kk]]
[17:42:18.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.636]                     next
[17:42:18.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.636]                 }
[17:42:18.636]                 NAMES <- toupper(added)
[17:42:18.636]                 for (kk in seq_along(NAMES)) {
[17:42:18.636]                   name <- added[[kk]]
[17:42:18.636]                   NAME <- NAMES[[kk]]
[17:42:18.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.636]                     next
[17:42:18.636]                   args[[name]] <- ""
[17:42:18.636]                 }
[17:42:18.636]                 NAMES <- toupper(removed)
[17:42:18.636]                 for (kk in seq_along(NAMES)) {
[17:42:18.636]                   name <- removed[[kk]]
[17:42:18.636]                   NAME <- NAMES[[kk]]
[17:42:18.636]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.636]                     next
[17:42:18.636]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.636]                 }
[17:42:18.636]                 if (length(args) > 0) 
[17:42:18.636]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.636]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.636]             }
[17:42:18.636]             else {
[17:42:18.636]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.636]             }
[17:42:18.636]             {
[17:42:18.636]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.636]                   0L) {
[17:42:18.636]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.636]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.636]                   base::options(opts)
[17:42:18.636]                 }
[17:42:18.636]                 {
[17:42:18.636]                   {
[17:42:18.636]                     NULL
[17:42:18.636]                     RNGkind("Mersenne-Twister")
[17:42:18.636]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.636]                       inherits = FALSE)
[17:42:18.636]                   }
[17:42:18.636]                   options(future.plan = NULL)
[17:42:18.636]                   if (is.na(NA_character_)) 
[17:42:18.636]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.636]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.636]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.636]                   {
[17:42:18.636]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.636]                     if (!future$lazy) 
[17:42:18.636]                       future <- run(future)
[17:42:18.636]                     invisible(future)
[17:42:18.636]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.636]                 }
[17:42:18.636]             }
[17:42:18.636]         }
[17:42:18.636]     })
[17:42:18.636]     if (TRUE) {
[17:42:18.636]         base::sink(type = "output", split = FALSE)
[17:42:18.636]         if (TRUE) {
[17:42:18.636]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.636]         }
[17:42:18.636]         else {
[17:42:18.636]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.636]         }
[17:42:18.636]         base::close(...future.stdout)
[17:42:18.636]         ...future.stdout <- NULL
[17:42:18.636]     }
[17:42:18.636]     ...future.result$conditions <- ...future.conditions
[17:42:18.636]     ...future.result$finished <- base::Sys.time()
[17:42:18.636]     ...future.result
[17:42:18.636] }
[17:42:18.638] plan(): Setting new future strategy stack:
[17:42:18.638] List of future strategies:
[17:42:18.638] 1. sequential:
[17:42:18.638]    - args: function (..., envir = parent.frame())
[17:42:18.638]    - tweaked: FALSE
[17:42:18.638]    - call: NULL
[17:42:18.638] plan(): nbrOfWorkers() = 1
[17:42:18.639] plan(): Setting new future strategy stack:
[17:42:18.639] List of future strategies:
[17:42:18.639] 1. sequential:
[17:42:18.639]    - args: function (..., envir = parent.frame())
[17:42:18.639]    - tweaked: FALSE
[17:42:18.639]    - call: future::plan("sequential")
[17:42:18.640] plan(): nbrOfWorkers() = 1
[17:42:18.640] SequentialFuture started (and completed)
[17:42:18.640] - Launch lazy future ... done
[17:42:18.640] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[17:42:18.651] resolved() for ‘SequentialFuture’ ...
[17:42:18.651] - state: ‘finished’
[17:42:18.651] - run: FALSE
[17:42:18.651] - result: ‘FutureResult’
[17:42:18.652] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[17:42:18.652] getGlobalsAndPackages() ...
[17:42:18.652] Searching for globals...
[17:42:18.653] - globals found: [1] ‘{’
[17:42:18.653] Searching for globals ... DONE
[17:42:18.653] Resolving globals: FALSE
[17:42:18.653] 
[17:42:18.653] 
[17:42:18.653] getGlobalsAndPackages() ... DONE
[17:42:18.654] run() for ‘Future’ ...
[17:42:18.654] - state: ‘created’
[17:42:18.654] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.654] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.654] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.654]   - Field: ‘label’
[17:42:18.654]   - Field: ‘local’
[17:42:18.654]   - Field: ‘owner’
[17:42:18.655]   - Field: ‘envir’
[17:42:18.655]   - Field: ‘packages’
[17:42:18.655]   - Field: ‘gc’
[17:42:18.655]   - Field: ‘conditions’
[17:42:18.655]   - Field: ‘expr’
[17:42:18.655]   - Field: ‘uuid’
[17:42:18.655]   - Field: ‘seed’
[17:42:18.655]   - Field: ‘version’
[17:42:18.655]   - Field: ‘result’
[17:42:18.655]   - Field: ‘asynchronous’
[17:42:18.656]   - Field: ‘calls’
[17:42:18.656]   - Field: ‘globals’
[17:42:18.656]   - Field: ‘stdout’
[17:42:18.656]   - Field: ‘earlySignal’
[17:42:18.656]   - Field: ‘lazy’
[17:42:18.656]   - Field: ‘state’
[17:42:18.656] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.656] - Launch lazy future ...
[17:42:18.656] Packages needed by the future expression (n = 0): <none>
[17:42:18.656] Packages needed by future strategies (n = 0): <none>
[17:42:18.657] {
[17:42:18.657]     {
[17:42:18.657]         {
[17:42:18.657]             ...future.startTime <- base::Sys.time()
[17:42:18.657]             {
[17:42:18.657]                 {
[17:42:18.657]                   {
[17:42:18.657]                     base::local({
[17:42:18.657]                       has_future <- base::requireNamespace("future", 
[17:42:18.657]                         quietly = TRUE)
[17:42:18.657]                       if (has_future) {
[17:42:18.657]                         ns <- base::getNamespace("future")
[17:42:18.657]                         version <- ns[[".package"]][["version"]]
[17:42:18.657]                         if (is.null(version)) 
[17:42:18.657]                           version <- utils::packageVersion("future")
[17:42:18.657]                       }
[17:42:18.657]                       else {
[17:42:18.657]                         version <- NULL
[17:42:18.657]                       }
[17:42:18.657]                       if (!has_future || version < "1.8.0") {
[17:42:18.657]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.657]                           "", base::R.version$version.string), 
[17:42:18.657]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.657]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.657]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.657]                             "release", "version")], collapse = " "), 
[17:42:18.657]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.657]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.657]                           info)
[17:42:18.657]                         info <- base::paste(info, collapse = "; ")
[17:42:18.657]                         if (!has_future) {
[17:42:18.657]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.657]                             info)
[17:42:18.657]                         }
[17:42:18.657]                         else {
[17:42:18.657]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.657]                             info, version)
[17:42:18.657]                         }
[17:42:18.657]                         base::stop(msg)
[17:42:18.657]                       }
[17:42:18.657]                     })
[17:42:18.657]                   }
[17:42:18.657]                   options(future.plan = NULL)
[17:42:18.657]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.657]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.657]                 }
[17:42:18.657]                 ...future.workdir <- getwd()
[17:42:18.657]             }
[17:42:18.657]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.657]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.657]         }
[17:42:18.657]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.657]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.657]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.657]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.657]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.657]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.657]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.657]             base::names(...future.oldOptions))
[17:42:18.657]     }
[17:42:18.657]     if (FALSE) {
[17:42:18.657]     }
[17:42:18.657]     else {
[17:42:18.657]         if (TRUE) {
[17:42:18.657]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.657]                 open = "w")
[17:42:18.657]         }
[17:42:18.657]         else {
[17:42:18.657]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.657]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.657]         }
[17:42:18.657]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.657]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.657]             base::sink(type = "output", split = FALSE)
[17:42:18.657]             base::close(...future.stdout)
[17:42:18.657]         }, add = TRUE)
[17:42:18.657]     }
[17:42:18.657]     ...future.frame <- base::sys.nframe()
[17:42:18.657]     ...future.conditions <- base::list()
[17:42:18.657]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.657]     if (FALSE) {
[17:42:18.657]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.657]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.657]     }
[17:42:18.657]     ...future.result <- base::tryCatch({
[17:42:18.657]         base::withCallingHandlers({
[17:42:18.657]             ...future.value <- base::withVisible(base::local({
[17:42:18.657]                 2
[17:42:18.657]             }))
[17:42:18.657]             future::FutureResult(value = ...future.value$value, 
[17:42:18.657]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.657]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.657]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.657]                     ...future.globalenv.names))
[17:42:18.657]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.657]         }, condition = base::local({
[17:42:18.657]             c <- base::c
[17:42:18.657]             inherits <- base::inherits
[17:42:18.657]             invokeRestart <- base::invokeRestart
[17:42:18.657]             length <- base::length
[17:42:18.657]             list <- base::list
[17:42:18.657]             seq.int <- base::seq.int
[17:42:18.657]             signalCondition <- base::signalCondition
[17:42:18.657]             sys.calls <- base::sys.calls
[17:42:18.657]             `[[` <- base::`[[`
[17:42:18.657]             `+` <- base::`+`
[17:42:18.657]             `<<-` <- base::`<<-`
[17:42:18.657]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.657]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.657]                   3L)]
[17:42:18.657]             }
[17:42:18.657]             function(cond) {
[17:42:18.657]                 is_error <- inherits(cond, "error")
[17:42:18.657]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.657]                   NULL)
[17:42:18.657]                 if (is_error) {
[17:42:18.657]                   sessionInformation <- function() {
[17:42:18.657]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.657]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.657]                       search = base::search(), system = base::Sys.info())
[17:42:18.657]                   }
[17:42:18.657]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.657]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.657]                     cond$call), session = sessionInformation(), 
[17:42:18.657]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.657]                   signalCondition(cond)
[17:42:18.657]                 }
[17:42:18.657]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.657]                 "immediateCondition"))) {
[17:42:18.657]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.657]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.657]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.657]                   if (TRUE && !signal) {
[17:42:18.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.657]                     {
[17:42:18.657]                       inherits <- base::inherits
[17:42:18.657]                       invokeRestart <- base::invokeRestart
[17:42:18.657]                       is.null <- base::is.null
[17:42:18.657]                       muffled <- FALSE
[17:42:18.657]                       if (inherits(cond, "message")) {
[17:42:18.657]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.657]                         if (muffled) 
[17:42:18.657]                           invokeRestart("muffleMessage")
[17:42:18.657]                       }
[17:42:18.657]                       else if (inherits(cond, "warning")) {
[17:42:18.657]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.657]                         if (muffled) 
[17:42:18.657]                           invokeRestart("muffleWarning")
[17:42:18.657]                       }
[17:42:18.657]                       else if (inherits(cond, "condition")) {
[17:42:18.657]                         if (!is.null(pattern)) {
[17:42:18.657]                           computeRestarts <- base::computeRestarts
[17:42:18.657]                           grepl <- base::grepl
[17:42:18.657]                           restarts <- computeRestarts(cond)
[17:42:18.657]                           for (restart in restarts) {
[17:42:18.657]                             name <- restart$name
[17:42:18.657]                             if (is.null(name)) 
[17:42:18.657]                               next
[17:42:18.657]                             if (!grepl(pattern, name)) 
[17:42:18.657]                               next
[17:42:18.657]                             invokeRestart(restart)
[17:42:18.657]                             muffled <- TRUE
[17:42:18.657]                             break
[17:42:18.657]                           }
[17:42:18.657]                         }
[17:42:18.657]                       }
[17:42:18.657]                       invisible(muffled)
[17:42:18.657]                     }
[17:42:18.657]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.657]                   }
[17:42:18.657]                 }
[17:42:18.657]                 else {
[17:42:18.657]                   if (TRUE) {
[17:42:18.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.657]                     {
[17:42:18.657]                       inherits <- base::inherits
[17:42:18.657]                       invokeRestart <- base::invokeRestart
[17:42:18.657]                       is.null <- base::is.null
[17:42:18.657]                       muffled <- FALSE
[17:42:18.657]                       if (inherits(cond, "message")) {
[17:42:18.657]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.657]                         if (muffled) 
[17:42:18.657]                           invokeRestart("muffleMessage")
[17:42:18.657]                       }
[17:42:18.657]                       else if (inherits(cond, "warning")) {
[17:42:18.657]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.657]                         if (muffled) 
[17:42:18.657]                           invokeRestart("muffleWarning")
[17:42:18.657]                       }
[17:42:18.657]                       else if (inherits(cond, "condition")) {
[17:42:18.657]                         if (!is.null(pattern)) {
[17:42:18.657]                           computeRestarts <- base::computeRestarts
[17:42:18.657]                           grepl <- base::grepl
[17:42:18.657]                           restarts <- computeRestarts(cond)
[17:42:18.657]                           for (restart in restarts) {
[17:42:18.657]                             name <- restart$name
[17:42:18.657]                             if (is.null(name)) 
[17:42:18.657]                               next
[17:42:18.657]                             if (!grepl(pattern, name)) 
[17:42:18.657]                               next
[17:42:18.657]                             invokeRestart(restart)
[17:42:18.657]                             muffled <- TRUE
[17:42:18.657]                             break
[17:42:18.657]                           }
[17:42:18.657]                         }
[17:42:18.657]                       }
[17:42:18.657]                       invisible(muffled)
[17:42:18.657]                     }
[17:42:18.657]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.657]                   }
[17:42:18.657]                 }
[17:42:18.657]             }
[17:42:18.657]         }))
[17:42:18.657]     }, error = function(ex) {
[17:42:18.657]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.657]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.657]                 ...future.rng), started = ...future.startTime, 
[17:42:18.657]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.657]             version = "1.8"), class = "FutureResult")
[17:42:18.657]     }, finally = {
[17:42:18.657]         if (!identical(...future.workdir, getwd())) 
[17:42:18.657]             setwd(...future.workdir)
[17:42:18.657]         {
[17:42:18.657]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.657]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.657]             }
[17:42:18.657]             base::options(...future.oldOptions)
[17:42:18.657]             if (.Platform$OS.type == "windows") {
[17:42:18.657]                 old_names <- names(...future.oldEnvVars)
[17:42:18.657]                 envs <- base::Sys.getenv()
[17:42:18.657]                 names <- names(envs)
[17:42:18.657]                 common <- intersect(names, old_names)
[17:42:18.657]                 added <- setdiff(names, old_names)
[17:42:18.657]                 removed <- setdiff(old_names, names)
[17:42:18.657]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.657]                   envs[common]]
[17:42:18.657]                 NAMES <- toupper(changed)
[17:42:18.657]                 args <- list()
[17:42:18.657]                 for (kk in seq_along(NAMES)) {
[17:42:18.657]                   name <- changed[[kk]]
[17:42:18.657]                   NAME <- NAMES[[kk]]
[17:42:18.657]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.657]                     next
[17:42:18.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.657]                 }
[17:42:18.657]                 NAMES <- toupper(added)
[17:42:18.657]                 for (kk in seq_along(NAMES)) {
[17:42:18.657]                   name <- added[[kk]]
[17:42:18.657]                   NAME <- NAMES[[kk]]
[17:42:18.657]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.657]                     next
[17:42:18.657]                   args[[name]] <- ""
[17:42:18.657]                 }
[17:42:18.657]                 NAMES <- toupper(removed)
[17:42:18.657]                 for (kk in seq_along(NAMES)) {
[17:42:18.657]                   name <- removed[[kk]]
[17:42:18.657]                   NAME <- NAMES[[kk]]
[17:42:18.657]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.657]                     next
[17:42:18.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.657]                 }
[17:42:18.657]                 if (length(args) > 0) 
[17:42:18.657]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.657]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.657]             }
[17:42:18.657]             else {
[17:42:18.657]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.657]             }
[17:42:18.657]             {
[17:42:18.657]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.657]                   0L) {
[17:42:18.657]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.657]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.657]                   base::options(opts)
[17:42:18.657]                 }
[17:42:18.657]                 {
[17:42:18.657]                   {
[17:42:18.657]                     NULL
[17:42:18.657]                     RNGkind("Mersenne-Twister")
[17:42:18.657]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.657]                       inherits = FALSE)
[17:42:18.657]                   }
[17:42:18.657]                   options(future.plan = NULL)
[17:42:18.657]                   if (is.na(NA_character_)) 
[17:42:18.657]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.657]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.657]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.657]                   {
[17:42:18.657]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.657]                     if (!future$lazy) 
[17:42:18.657]                       future <- run(future)
[17:42:18.657]                     invisible(future)
[17:42:18.657]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.657]                 }
[17:42:18.657]             }
[17:42:18.657]         }
[17:42:18.657]     })
[17:42:18.657]     if (TRUE) {
[17:42:18.657]         base::sink(type = "output", split = FALSE)
[17:42:18.657]         if (TRUE) {
[17:42:18.657]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.657]         }
[17:42:18.657]         else {
[17:42:18.657]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.657]         }
[17:42:18.657]         base::close(...future.stdout)
[17:42:18.657]         ...future.stdout <- NULL
[17:42:18.657]     }
[17:42:18.657]     ...future.result$conditions <- ...future.conditions
[17:42:18.657]     ...future.result$finished <- base::Sys.time()
[17:42:18.657]     ...future.result
[17:42:18.657] }
[17:42:18.659] plan(): Setting new future strategy stack:
[17:42:18.659] List of future strategies:
[17:42:18.659] 1. sequential:
[17:42:18.659]    - args: function (..., envir = parent.frame())
[17:42:18.659]    - tweaked: FALSE
[17:42:18.659]    - call: NULL
[17:42:18.659] plan(): nbrOfWorkers() = 1
[17:42:18.660] plan(): Setting new future strategy stack:
[17:42:18.660] List of future strategies:
[17:42:18.660] 1. sequential:
[17:42:18.660]    - args: function (..., envir = parent.frame())
[17:42:18.660]    - tweaked: FALSE
[17:42:18.660]    - call: future::plan("sequential")
[17:42:18.660] plan(): nbrOfWorkers() = 1
[17:42:18.660] SequentialFuture started (and completed)
[17:42:18.661] - Launch lazy future ... done
[17:42:18.661] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[17:42:18.662] getGlobalsAndPackages() ...
[17:42:18.662] Searching for globals...
[17:42:18.662] 
[17:42:18.662] Searching for globals ... DONE
[17:42:18.662] - globals: [0] <none>
[17:42:18.662] getGlobalsAndPackages() ... DONE
[17:42:18.662] run() for ‘Future’ ...
[17:42:18.663] - state: ‘created’
[17:42:18.663] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:42:18.663] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:42:18.663] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:42:18.663]   - Field: ‘label’
[17:42:18.663]   - Field: ‘local’
[17:42:18.663]   - Field: ‘owner’
[17:42:18.663]   - Field: ‘envir’
[17:42:18.664]   - Field: ‘packages’
[17:42:18.664]   - Field: ‘gc’
[17:42:18.664]   - Field: ‘conditions’
[17:42:18.664]   - Field: ‘expr’
[17:42:18.664]   - Field: ‘uuid’
[17:42:18.664]   - Field: ‘seed’
[17:42:18.664]   - Field: ‘version’
[17:42:18.664]   - Field: ‘result’
[17:42:18.664]   - Field: ‘asynchronous’
[17:42:18.664]   - Field: ‘calls’
[17:42:18.664]   - Field: ‘globals’
[17:42:18.665]   - Field: ‘stdout’
[17:42:18.665]   - Field: ‘earlySignal’
[17:42:18.665]   - Field: ‘lazy’
[17:42:18.665]   - Field: ‘state’
[17:42:18.665] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:42:18.665] - Launch lazy future ...
[17:42:18.665] Packages needed by the future expression (n = 0): <none>
[17:42:18.665] Packages needed by future strategies (n = 0): <none>
[17:42:18.666] {
[17:42:18.666]     {
[17:42:18.666]         {
[17:42:18.666]             ...future.startTime <- base::Sys.time()
[17:42:18.666]             {
[17:42:18.666]                 {
[17:42:18.666]                   {
[17:42:18.666]                     base::local({
[17:42:18.666]                       has_future <- base::requireNamespace("future", 
[17:42:18.666]                         quietly = TRUE)
[17:42:18.666]                       if (has_future) {
[17:42:18.666]                         ns <- base::getNamespace("future")
[17:42:18.666]                         version <- ns[[".package"]][["version"]]
[17:42:18.666]                         if (is.null(version)) 
[17:42:18.666]                           version <- utils::packageVersion("future")
[17:42:18.666]                       }
[17:42:18.666]                       else {
[17:42:18.666]                         version <- NULL
[17:42:18.666]                       }
[17:42:18.666]                       if (!has_future || version < "1.8.0") {
[17:42:18.666]                         info <- base::c(r_version = base::gsub("R version ", 
[17:42:18.666]                           "", base::R.version$version.string), 
[17:42:18.666]                           platform = base::sprintf("%s (%s-bit)", 
[17:42:18.666]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:42:18.666]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:42:18.666]                             "release", "version")], collapse = " "), 
[17:42:18.666]                           hostname = base::Sys.info()[["nodename"]])
[17:42:18.666]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:42:18.666]                           info)
[17:42:18.666]                         info <- base::paste(info, collapse = "; ")
[17:42:18.666]                         if (!has_future) {
[17:42:18.666]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:42:18.666]                             info)
[17:42:18.666]                         }
[17:42:18.666]                         else {
[17:42:18.666]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:42:18.666]                             info, version)
[17:42:18.666]                         }
[17:42:18.666]                         base::stop(msg)
[17:42:18.666]                       }
[17:42:18.666]                     })
[17:42:18.666]                   }
[17:42:18.666]                   options(future.plan = NULL)
[17:42:18.666]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.666]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:42:18.666]                 }
[17:42:18.666]                 ...future.workdir <- getwd()
[17:42:18.666]             }
[17:42:18.666]             ...future.oldOptions <- base::as.list(base::.Options)
[17:42:18.666]             ...future.oldEnvVars <- base::Sys.getenv()
[17:42:18.666]         }
[17:42:18.666]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:42:18.666]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:42:18.666]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:42:18.666]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:42:18.666]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:42:18.666]             future.stdout.windows.reencode = NULL, width = 80L)
[17:42:18.666]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:42:18.666]             base::names(...future.oldOptions))
[17:42:18.666]     }
[17:42:18.666]     if (FALSE) {
[17:42:18.666]     }
[17:42:18.666]     else {
[17:42:18.666]         if (TRUE) {
[17:42:18.666]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:42:18.666]                 open = "w")
[17:42:18.666]         }
[17:42:18.666]         else {
[17:42:18.666]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:42:18.666]                 windows = "NUL", "/dev/null"), open = "w")
[17:42:18.666]         }
[17:42:18.666]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:42:18.666]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:42:18.666]             base::sink(type = "output", split = FALSE)
[17:42:18.666]             base::close(...future.stdout)
[17:42:18.666]         }, add = TRUE)
[17:42:18.666]     }
[17:42:18.666]     ...future.frame <- base::sys.nframe()
[17:42:18.666]     ...future.conditions <- base::list()
[17:42:18.666]     ...future.rng <- base::globalenv()$.Random.seed
[17:42:18.666]     if (FALSE) {
[17:42:18.666]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:42:18.666]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:42:18.666]     }
[17:42:18.666]     ...future.result <- base::tryCatch({
[17:42:18.666]         base::withCallingHandlers({
[17:42:18.666]             ...future.value <- base::withVisible(base::local(1))
[17:42:18.666]             future::FutureResult(value = ...future.value$value, 
[17:42:18.666]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.666]                   ...future.rng), globalenv = if (FALSE) 
[17:42:18.666]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:42:18.666]                     ...future.globalenv.names))
[17:42:18.666]                 else NULL, started = ...future.startTime, version = "1.8")
[17:42:18.666]         }, condition = base::local({
[17:42:18.666]             c <- base::c
[17:42:18.666]             inherits <- base::inherits
[17:42:18.666]             invokeRestart <- base::invokeRestart
[17:42:18.666]             length <- base::length
[17:42:18.666]             list <- base::list
[17:42:18.666]             seq.int <- base::seq.int
[17:42:18.666]             signalCondition <- base::signalCondition
[17:42:18.666]             sys.calls <- base::sys.calls
[17:42:18.666]             `[[` <- base::`[[`
[17:42:18.666]             `+` <- base::`+`
[17:42:18.666]             `<<-` <- base::`<<-`
[17:42:18.666]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:42:18.666]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:42:18.666]                   3L)]
[17:42:18.666]             }
[17:42:18.666]             function(cond) {
[17:42:18.666]                 is_error <- inherits(cond, "error")
[17:42:18.666]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:42:18.666]                   NULL)
[17:42:18.666]                 if (is_error) {
[17:42:18.666]                   sessionInformation <- function() {
[17:42:18.666]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:42:18.666]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:42:18.666]                       search = base::search(), system = base::Sys.info())
[17:42:18.666]                   }
[17:42:18.666]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.666]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:42:18.666]                     cond$call), session = sessionInformation(), 
[17:42:18.666]                     timestamp = base::Sys.time(), signaled = 0L)
[17:42:18.666]                   signalCondition(cond)
[17:42:18.666]                 }
[17:42:18.666]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:42:18.666]                 "immediateCondition"))) {
[17:42:18.666]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:42:18.666]                   ...future.conditions[[length(...future.conditions) + 
[17:42:18.666]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:42:18.666]                   if (TRUE && !signal) {
[17:42:18.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.666]                     {
[17:42:18.666]                       inherits <- base::inherits
[17:42:18.666]                       invokeRestart <- base::invokeRestart
[17:42:18.666]                       is.null <- base::is.null
[17:42:18.666]                       muffled <- FALSE
[17:42:18.666]                       if (inherits(cond, "message")) {
[17:42:18.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.666]                         if (muffled) 
[17:42:18.666]                           invokeRestart("muffleMessage")
[17:42:18.666]                       }
[17:42:18.666]                       else if (inherits(cond, "warning")) {
[17:42:18.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.666]                         if (muffled) 
[17:42:18.666]                           invokeRestart("muffleWarning")
[17:42:18.666]                       }
[17:42:18.666]                       else if (inherits(cond, "condition")) {
[17:42:18.666]                         if (!is.null(pattern)) {
[17:42:18.666]                           computeRestarts <- base::computeRestarts
[17:42:18.666]                           grepl <- base::grepl
[17:42:18.666]                           restarts <- computeRestarts(cond)
[17:42:18.666]                           for (restart in restarts) {
[17:42:18.666]                             name <- restart$name
[17:42:18.666]                             if (is.null(name)) 
[17:42:18.666]                               next
[17:42:18.666]                             if (!grepl(pattern, name)) 
[17:42:18.666]                               next
[17:42:18.666]                             invokeRestart(restart)
[17:42:18.666]                             muffled <- TRUE
[17:42:18.666]                             break
[17:42:18.666]                           }
[17:42:18.666]                         }
[17:42:18.666]                       }
[17:42:18.666]                       invisible(muffled)
[17:42:18.666]                     }
[17:42:18.666]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.666]                   }
[17:42:18.666]                 }
[17:42:18.666]                 else {
[17:42:18.666]                   if (TRUE) {
[17:42:18.666]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:42:18.666]                     {
[17:42:18.666]                       inherits <- base::inherits
[17:42:18.666]                       invokeRestart <- base::invokeRestart
[17:42:18.666]                       is.null <- base::is.null
[17:42:18.666]                       muffled <- FALSE
[17:42:18.666]                       if (inherits(cond, "message")) {
[17:42:18.666]                         muffled <- grepl(pattern, "muffleMessage")
[17:42:18.666]                         if (muffled) 
[17:42:18.666]                           invokeRestart("muffleMessage")
[17:42:18.666]                       }
[17:42:18.666]                       else if (inherits(cond, "warning")) {
[17:42:18.666]                         muffled <- grepl(pattern, "muffleWarning")
[17:42:18.666]                         if (muffled) 
[17:42:18.666]                           invokeRestart("muffleWarning")
[17:42:18.666]                       }
[17:42:18.666]                       else if (inherits(cond, "condition")) {
[17:42:18.666]                         if (!is.null(pattern)) {
[17:42:18.666]                           computeRestarts <- base::computeRestarts
[17:42:18.666]                           grepl <- base::grepl
[17:42:18.666]                           restarts <- computeRestarts(cond)
[17:42:18.666]                           for (restart in restarts) {
[17:42:18.666]                             name <- restart$name
[17:42:18.666]                             if (is.null(name)) 
[17:42:18.666]                               next
[17:42:18.666]                             if (!grepl(pattern, name)) 
[17:42:18.666]                               next
[17:42:18.666]                             invokeRestart(restart)
[17:42:18.666]                             muffled <- TRUE
[17:42:18.666]                             break
[17:42:18.666]                           }
[17:42:18.666]                         }
[17:42:18.666]                       }
[17:42:18.666]                       invisible(muffled)
[17:42:18.666]                     }
[17:42:18.666]                     muffleCondition(cond, pattern = "^muffle")
[17:42:18.666]                   }
[17:42:18.666]                 }
[17:42:18.666]             }
[17:42:18.666]         }))
[17:42:18.666]     }, error = function(ex) {
[17:42:18.666]         base::structure(base::list(value = NULL, visible = NULL, 
[17:42:18.666]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:42:18.666]                 ...future.rng), started = ...future.startTime, 
[17:42:18.666]             finished = Sys.time(), session_uuid = NA_character_, 
[17:42:18.666]             version = "1.8"), class = "FutureResult")
[17:42:18.666]     }, finally = {
[17:42:18.666]         if (!identical(...future.workdir, getwd())) 
[17:42:18.666]             setwd(...future.workdir)
[17:42:18.666]         {
[17:42:18.666]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:42:18.666]                 ...future.oldOptions$nwarnings <- NULL
[17:42:18.666]             }
[17:42:18.666]             base::options(...future.oldOptions)
[17:42:18.666]             if (.Platform$OS.type == "windows") {
[17:42:18.666]                 old_names <- names(...future.oldEnvVars)
[17:42:18.666]                 envs <- base::Sys.getenv()
[17:42:18.666]                 names <- names(envs)
[17:42:18.666]                 common <- intersect(names, old_names)
[17:42:18.666]                 added <- setdiff(names, old_names)
[17:42:18.666]                 removed <- setdiff(old_names, names)
[17:42:18.666]                 changed <- common[...future.oldEnvVars[common] != 
[17:42:18.666]                   envs[common]]
[17:42:18.666]                 NAMES <- toupper(changed)
[17:42:18.666]                 args <- list()
[17:42:18.666]                 for (kk in seq_along(NAMES)) {
[17:42:18.666]                   name <- changed[[kk]]
[17:42:18.666]                   NAME <- NAMES[[kk]]
[17:42:18.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.666]                     next
[17:42:18.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.666]                 }
[17:42:18.666]                 NAMES <- toupper(added)
[17:42:18.666]                 for (kk in seq_along(NAMES)) {
[17:42:18.666]                   name <- added[[kk]]
[17:42:18.666]                   NAME <- NAMES[[kk]]
[17:42:18.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.666]                     next
[17:42:18.666]                   args[[name]] <- ""
[17:42:18.666]                 }
[17:42:18.666]                 NAMES <- toupper(removed)
[17:42:18.666]                 for (kk in seq_along(NAMES)) {
[17:42:18.666]                   name <- removed[[kk]]
[17:42:18.666]                   NAME <- NAMES[[kk]]
[17:42:18.666]                   if (name != NAME && is.element(NAME, old_names)) 
[17:42:18.666]                     next
[17:42:18.666]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:42:18.666]                 }
[17:42:18.666]                 if (length(args) > 0) 
[17:42:18.666]                   base::do.call(base::Sys.setenv, args = args)
[17:42:18.666]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:42:18.666]             }
[17:42:18.666]             else {
[17:42:18.666]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:42:18.666]             }
[17:42:18.666]             {
[17:42:18.666]                 if (base::length(...future.futureOptionsAdded) > 
[17:42:18.666]                   0L) {
[17:42:18.666]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:42:18.666]                   base::names(opts) <- ...future.futureOptionsAdded
[17:42:18.666]                   base::options(opts)
[17:42:18.666]                 }
[17:42:18.666]                 {
[17:42:18.666]                   {
[17:42:18.666]                     NULL
[17:42:18.666]                     RNGkind("Mersenne-Twister")
[17:42:18.666]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:42:18.666]                       inherits = FALSE)
[17:42:18.666]                   }
[17:42:18.666]                   options(future.plan = NULL)
[17:42:18.666]                   if (is.na(NA_character_)) 
[17:42:18.666]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:42:18.666]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:42:18.666]                   future::plan(list(function (..., envir = parent.frame()) 
[17:42:18.666]                   {
[17:42:18.666]                     future <- SequentialFuture(..., envir = envir)
[17:42:18.666]                     if (!future$lazy) 
[17:42:18.666]                       future <- run(future)
[17:42:18.666]                     invisible(future)
[17:42:18.666]                   }), .cleanup = FALSE, .init = FALSE)
[17:42:18.666]                 }
[17:42:18.666]             }
[17:42:18.666]         }
[17:42:18.666]     })
[17:42:18.666]     if (TRUE) {
[17:42:18.666]         base::sink(type = "output", split = FALSE)
[17:42:18.666]         if (TRUE) {
[17:42:18.666]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:42:18.666]         }
[17:42:18.666]         else {
[17:42:18.666]             ...future.result["stdout"] <- base::list(NULL)
[17:42:18.666]         }
[17:42:18.666]         base::close(...future.stdout)
[17:42:18.666]         ...future.stdout <- NULL
[17:42:18.666]     }
[17:42:18.666]     ...future.result$conditions <- ...future.conditions
[17:42:18.666]     ...future.result$finished <- base::Sys.time()
[17:42:18.666]     ...future.result
[17:42:18.666] }
[17:42:18.667] plan(): Setting new future strategy stack:
[17:42:18.668] List of future strategies:
[17:42:18.668] 1. sequential:
[17:42:18.668]    - args: function (..., envir = parent.frame())
[17:42:18.668]    - tweaked: FALSE
[17:42:18.668]    - call: NULL
[17:42:18.668] plan(): nbrOfWorkers() = 1
[17:42:18.669] plan(): Setting new future strategy stack:
[17:42:18.669] List of future strategies:
[17:42:18.669] 1. sequential:
[17:42:18.669]    - args: function (..., envir = parent.frame())
[17:42:18.669]    - tweaked: FALSE
[17:42:18.669]    - call: future::plan("sequential")
[17:42:18.669] plan(): nbrOfWorkers() = 1
[17:42:18.669] SequentialFuture started (and completed)
[17:42:18.669] - Launch lazy future ... done
[17:42:18.670] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8c19cb8d-bf9a-d9d0-cf62-2aa56b5d372a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[17:42:18.670] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[17:42:18.671] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[17:42:18.671] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[17:42:18.672] plan(): Setting new future strategy stack:
[17:42:18.672] List of future strategies:
[17:42:18.672] 1. FutureStrategy:
[17:42:18.672]    - args: function (..., envir = parent.frame())
[17:42:18.672]    - tweaked: FALSE
[17:42:18.672]    - call: future::plan(oplan)
[17:42:18.685] plan(): nbrOfWorkers() = 1
> 
