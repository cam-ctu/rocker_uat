
R version 4.3.0 (2023-04-21) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:44:23.466] plan(): Setting new future strategy stack:
[17:44:23.466] List of future strategies:
[17:44:23.466] 1. sequential:
[17:44:23.466]    - args: function (..., envir = parent.frame())
[17:44:23.466]    - tweaked: FALSE
[17:44:23.466]    - call: future::plan("sequential")
[17:44:23.479] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[17:44:23.525] plan(): Setting new future strategy stack:
[17:44:23.525] List of future strategies:
[17:44:23.525] 1. sequential:
[17:44:23.525]    - args: function (..., envir = parent.frame())
[17:44:23.525]    - tweaked: FALSE
[17:44:23.525]    - call: plan(strategy)
[17:44:23.538] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[17:44:23.538] getGlobalsAndPackages() ...
[17:44:23.539] Searching for globals...
[17:44:23.547] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.547] Searching for globals ... DONE
[17:44:23.547] Resolving globals: FALSE
[17:44:23.548] 
[17:44:23.548] - packages: [1] ‘utils’
[17:44:23.548] getGlobalsAndPackages() ... DONE
[17:44:23.549] run() for ‘Future’ ...
[17:44:23.549] - state: ‘created’
[17:44:23.549] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.550] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.550] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.550]   - Field: ‘label’
[17:44:23.550]   - Field: ‘local’
[17:44:23.550]   - Field: ‘owner’
[17:44:23.550]   - Field: ‘envir’
[17:44:23.550]   - Field: ‘packages’
[17:44:23.550]   - Field: ‘gc’
[17:44:23.550]   - Field: ‘conditions’
[17:44:23.551]   - Field: ‘expr’
[17:44:23.551]   - Field: ‘uuid’
[17:44:23.551]   - Field: ‘seed’
[17:44:23.551]   - Field: ‘version’
[17:44:23.551]   - Field: ‘result’
[17:44:23.551]   - Field: ‘asynchronous’
[17:44:23.551]   - Field: ‘calls’
[17:44:23.551]   - Field: ‘globals’
[17:44:23.551]   - Field: ‘stdout’
[17:44:23.551]   - Field: ‘earlySignal’
[17:44:23.552]   - Field: ‘lazy’
[17:44:23.552]   - Field: ‘state’
[17:44:23.552] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.552] - Launch lazy future ...
[17:44:23.553] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.553] Packages needed by future strategies (n = 0): <none>
[17:44:23.554] {
[17:44:23.554]     {
[17:44:23.554]         {
[17:44:23.554]             ...future.startTime <- base::Sys.time()
[17:44:23.554]             {
[17:44:23.554]                 {
[17:44:23.554]                   {
[17:44:23.554]                     {
[17:44:23.554]                       base::local({
[17:44:23.554]                         has_future <- base::requireNamespace("future", 
[17:44:23.554]                           quietly = TRUE)
[17:44:23.554]                         if (has_future) {
[17:44:23.554]                           ns <- base::getNamespace("future")
[17:44:23.554]                           version <- ns[[".package"]][["version"]]
[17:44:23.554]                           if (is.null(version)) 
[17:44:23.554]                             version <- utils::packageVersion("future")
[17:44:23.554]                         }
[17:44:23.554]                         else {
[17:44:23.554]                           version <- NULL
[17:44:23.554]                         }
[17:44:23.554]                         if (!has_future || version < "1.8.0") {
[17:44:23.554]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.554]                             "", base::R.version$version.string), 
[17:44:23.554]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.554]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.554]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.554]                               "release", "version")], collapse = " "), 
[17:44:23.554]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.554]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.554]                             info)
[17:44:23.554]                           info <- base::paste(info, collapse = "; ")
[17:44:23.554]                           if (!has_future) {
[17:44:23.554]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.554]                               info)
[17:44:23.554]                           }
[17:44:23.554]                           else {
[17:44:23.554]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.554]                               info, version)
[17:44:23.554]                           }
[17:44:23.554]                           base::stop(msg)
[17:44:23.554]                         }
[17:44:23.554]                       })
[17:44:23.554]                     }
[17:44:23.554]                     base::local({
[17:44:23.554]                       for (pkg in "utils") {
[17:44:23.554]                         base::loadNamespace(pkg)
[17:44:23.554]                         base::library(pkg, character.only = TRUE)
[17:44:23.554]                       }
[17:44:23.554]                     })
[17:44:23.554]                   }
[17:44:23.554]                   options(future.plan = NULL)
[17:44:23.554]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.554]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.554]                 }
[17:44:23.554]                 ...future.workdir <- getwd()
[17:44:23.554]             }
[17:44:23.554]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.554]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.554]         }
[17:44:23.554]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.554]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.554]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.554]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.554]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.554]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.554]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.554]             base::names(...future.oldOptions))
[17:44:23.554]     }
[17:44:23.554]     if (FALSE) {
[17:44:23.554]     }
[17:44:23.554]     else {
[17:44:23.554]         if (TRUE) {
[17:44:23.554]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.554]                 open = "w")
[17:44:23.554]         }
[17:44:23.554]         else {
[17:44:23.554]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.554]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.554]         }
[17:44:23.554]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.554]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.554]             base::sink(type = "output", split = FALSE)
[17:44:23.554]             base::close(...future.stdout)
[17:44:23.554]         }, add = TRUE)
[17:44:23.554]     }
[17:44:23.554]     ...future.frame <- base::sys.nframe()
[17:44:23.554]     ...future.conditions <- base::list()
[17:44:23.554]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.554]     if (FALSE) {
[17:44:23.554]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.554]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.554]     }
[17:44:23.554]     ...future.result <- base::tryCatch({
[17:44:23.554]         base::withCallingHandlers({
[17:44:23.554]             ...future.value <- base::withVisible(base::local({
[17:44:23.554]                 print(1:50)
[17:44:23.554]                 str(1:50)
[17:44:23.554]                 cat(letters, sep = "-")
[17:44:23.554]                 cat(1:6, collapse = "\n")
[17:44:23.554]                 write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.554]                 42L
[17:44:23.554]             }))
[17:44:23.554]             future::FutureResult(value = ...future.value$value, 
[17:44:23.554]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.554]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.554]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.554]                     ...future.globalenv.names))
[17:44:23.554]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.554]         }, condition = base::local({
[17:44:23.554]             c <- base::c
[17:44:23.554]             inherits <- base::inherits
[17:44:23.554]             invokeRestart <- base::invokeRestart
[17:44:23.554]             length <- base::length
[17:44:23.554]             list <- base::list
[17:44:23.554]             seq.int <- base::seq.int
[17:44:23.554]             signalCondition <- base::signalCondition
[17:44:23.554]             sys.calls <- base::sys.calls
[17:44:23.554]             `[[` <- base::`[[`
[17:44:23.554]             `+` <- base::`+`
[17:44:23.554]             `<<-` <- base::`<<-`
[17:44:23.554]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.554]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.554]                   3L)]
[17:44:23.554]             }
[17:44:23.554]             function(cond) {
[17:44:23.554]                 is_error <- inherits(cond, "error")
[17:44:23.554]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.554]                   NULL)
[17:44:23.554]                 if (is_error) {
[17:44:23.554]                   sessionInformation <- function() {
[17:44:23.554]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.554]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.554]                       search = base::search(), system = base::Sys.info())
[17:44:23.554]                   }
[17:44:23.554]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.554]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.554]                     cond$call), session = sessionInformation(), 
[17:44:23.554]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.554]                   signalCondition(cond)
[17:44:23.554]                 }
[17:44:23.554]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.554]                 "immediateCondition"))) {
[17:44:23.554]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.554]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.554]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.554]                   if (TRUE && !signal) {
[17:44:23.554]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.554]                     {
[17:44:23.554]                       inherits <- base::inherits
[17:44:23.554]                       invokeRestart <- base::invokeRestart
[17:44:23.554]                       is.null <- base::is.null
[17:44:23.554]                       muffled <- FALSE
[17:44:23.554]                       if (inherits(cond, "message")) {
[17:44:23.554]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.554]                         if (muffled) 
[17:44:23.554]                           invokeRestart("muffleMessage")
[17:44:23.554]                       }
[17:44:23.554]                       else if (inherits(cond, "warning")) {
[17:44:23.554]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.554]                         if (muffled) 
[17:44:23.554]                           invokeRestart("muffleWarning")
[17:44:23.554]                       }
[17:44:23.554]                       else if (inherits(cond, "condition")) {
[17:44:23.554]                         if (!is.null(pattern)) {
[17:44:23.554]                           computeRestarts <- base::computeRestarts
[17:44:23.554]                           grepl <- base::grepl
[17:44:23.554]                           restarts <- computeRestarts(cond)
[17:44:23.554]                           for (restart in restarts) {
[17:44:23.554]                             name <- restart$name
[17:44:23.554]                             if (is.null(name)) 
[17:44:23.554]                               next
[17:44:23.554]                             if (!grepl(pattern, name)) 
[17:44:23.554]                               next
[17:44:23.554]                             invokeRestart(restart)
[17:44:23.554]                             muffled <- TRUE
[17:44:23.554]                             break
[17:44:23.554]                           }
[17:44:23.554]                         }
[17:44:23.554]                       }
[17:44:23.554]                       invisible(muffled)
[17:44:23.554]                     }
[17:44:23.554]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.554]                   }
[17:44:23.554]                 }
[17:44:23.554]                 else {
[17:44:23.554]                   if (TRUE) {
[17:44:23.554]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.554]                     {
[17:44:23.554]                       inherits <- base::inherits
[17:44:23.554]                       invokeRestart <- base::invokeRestart
[17:44:23.554]                       is.null <- base::is.null
[17:44:23.554]                       muffled <- FALSE
[17:44:23.554]                       if (inherits(cond, "message")) {
[17:44:23.554]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.554]                         if (muffled) 
[17:44:23.554]                           invokeRestart("muffleMessage")
[17:44:23.554]                       }
[17:44:23.554]                       else if (inherits(cond, "warning")) {
[17:44:23.554]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.554]                         if (muffled) 
[17:44:23.554]                           invokeRestart("muffleWarning")
[17:44:23.554]                       }
[17:44:23.554]                       else if (inherits(cond, "condition")) {
[17:44:23.554]                         if (!is.null(pattern)) {
[17:44:23.554]                           computeRestarts <- base::computeRestarts
[17:44:23.554]                           grepl <- base::grepl
[17:44:23.554]                           restarts <- computeRestarts(cond)
[17:44:23.554]                           for (restart in restarts) {
[17:44:23.554]                             name <- restart$name
[17:44:23.554]                             if (is.null(name)) 
[17:44:23.554]                               next
[17:44:23.554]                             if (!grepl(pattern, name)) 
[17:44:23.554]                               next
[17:44:23.554]                             invokeRestart(restart)
[17:44:23.554]                             muffled <- TRUE
[17:44:23.554]                             break
[17:44:23.554]                           }
[17:44:23.554]                         }
[17:44:23.554]                       }
[17:44:23.554]                       invisible(muffled)
[17:44:23.554]                     }
[17:44:23.554]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.554]                   }
[17:44:23.554]                 }
[17:44:23.554]             }
[17:44:23.554]         }))
[17:44:23.554]     }, error = function(ex) {
[17:44:23.554]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.554]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.554]                 ...future.rng), started = ...future.startTime, 
[17:44:23.554]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.554]             version = "1.8"), class = "FutureResult")
[17:44:23.554]     }, finally = {
[17:44:23.554]         if (!identical(...future.workdir, getwd())) 
[17:44:23.554]             setwd(...future.workdir)
[17:44:23.554]         {
[17:44:23.554]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.554]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.554]             }
[17:44:23.554]             base::options(...future.oldOptions)
[17:44:23.554]             if (.Platform$OS.type == "windows") {
[17:44:23.554]                 old_names <- names(...future.oldEnvVars)
[17:44:23.554]                 envs <- base::Sys.getenv()
[17:44:23.554]                 names <- names(envs)
[17:44:23.554]                 common <- intersect(names, old_names)
[17:44:23.554]                 added <- setdiff(names, old_names)
[17:44:23.554]                 removed <- setdiff(old_names, names)
[17:44:23.554]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.554]                   envs[common]]
[17:44:23.554]                 NAMES <- toupper(changed)
[17:44:23.554]                 args <- list()
[17:44:23.554]                 for (kk in seq_along(NAMES)) {
[17:44:23.554]                   name <- changed[[kk]]
[17:44:23.554]                   NAME <- NAMES[[kk]]
[17:44:23.554]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.554]                     next
[17:44:23.554]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.554]                 }
[17:44:23.554]                 NAMES <- toupper(added)
[17:44:23.554]                 for (kk in seq_along(NAMES)) {
[17:44:23.554]                   name <- added[[kk]]
[17:44:23.554]                   NAME <- NAMES[[kk]]
[17:44:23.554]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.554]                     next
[17:44:23.554]                   args[[name]] <- ""
[17:44:23.554]                 }
[17:44:23.554]                 NAMES <- toupper(removed)
[17:44:23.554]                 for (kk in seq_along(NAMES)) {
[17:44:23.554]                   name <- removed[[kk]]
[17:44:23.554]                   NAME <- NAMES[[kk]]
[17:44:23.554]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.554]                     next
[17:44:23.554]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.554]                 }
[17:44:23.554]                 if (length(args) > 0) 
[17:44:23.554]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.554]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.554]             }
[17:44:23.554]             else {
[17:44:23.554]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.554]             }
[17:44:23.554]             {
[17:44:23.554]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.554]                   0L) {
[17:44:23.554]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.554]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.554]                   base::options(opts)
[17:44:23.554]                 }
[17:44:23.554]                 {
[17:44:23.554]                   {
[17:44:23.554]                     NULL
[17:44:23.554]                     RNGkind("Mersenne-Twister")
[17:44:23.554]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.554]                       inherits = FALSE)
[17:44:23.554]                   }
[17:44:23.554]                   options(future.plan = NULL)
[17:44:23.554]                   if (is.na(NA_character_)) 
[17:44:23.554]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.554]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.554]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.554]                   {
[17:44:23.554]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.554]                     if (!future$lazy) 
[17:44:23.554]                       future <- run(future)
[17:44:23.554]                     invisible(future)
[17:44:23.554]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.554]                 }
[17:44:23.554]             }
[17:44:23.554]         }
[17:44:23.554]     })
[17:44:23.554]     if (TRUE) {
[17:44:23.554]         base::sink(type = "output", split = FALSE)
[17:44:23.554]         if (TRUE) {
[17:44:23.554]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.554]         }
[17:44:23.554]         else {
[17:44:23.554]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.554]         }
[17:44:23.554]         base::close(...future.stdout)
[17:44:23.554]         ...future.stdout <- NULL
[17:44:23.554]     }
[17:44:23.554]     ...future.result$conditions <- ...future.conditions
[17:44:23.554]     ...future.result$finished <- base::Sys.time()
[17:44:23.554]     ...future.result
[17:44:23.554] }
[17:44:23.556] plan(): Setting new future strategy stack:
[17:44:23.556] List of future strategies:
[17:44:23.556] 1. sequential:
[17:44:23.556]    - args: function (..., envir = parent.frame())
[17:44:23.556]    - tweaked: FALSE
[17:44:23.556]    - call: NULL
[17:44:23.556] plan(): nbrOfWorkers() = 1
[17:44:23.558] plan(): Setting new future strategy stack:
[17:44:23.558] List of future strategies:
[17:44:23.558] 1. sequential:
[17:44:23.558]    - args: function (..., envir = parent.frame())
[17:44:23.558]    - tweaked: FALSE
[17:44:23.558]    - call: plan(strategy)
[17:44:23.559] plan(): nbrOfWorkers() = 1
[17:44:23.559] SequentialFuture started (and completed)
[17:44:23.559] - Launch lazy future ... done
[17:44:23.559] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ session_uuid: chr "007d6ee1-2321-4626-191d-5aefd0faf814"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53760
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:23"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.003176212 secs (started 2024-12-19 17:44:23.555998)
version: 1.8
[17:44:23.572] getGlobalsAndPackages() ...
[17:44:23.573] Searching for globals...
[17:44:23.575] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.576] Searching for globals ... DONE
[17:44:23.576] Resolving globals: FALSE
[17:44:23.576] 
[17:44:23.576] - packages: [1] ‘utils’
[17:44:23.576] getGlobalsAndPackages() ... DONE
[17:44:23.577] run() for ‘Future’ ...
[17:44:23.577] - state: ‘created’
[17:44:23.577] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.577] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.577] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.578]   - Field: ‘label’
[17:44:23.578]   - Field: ‘local’
[17:44:23.578]   - Field: ‘owner’
[17:44:23.578]   - Field: ‘envir’
[17:44:23.578]   - Field: ‘packages’
[17:44:23.578]   - Field: ‘gc’
[17:44:23.578]   - Field: ‘conditions’
[17:44:23.578]   - Field: ‘expr’
[17:44:23.578]   - Field: ‘uuid’
[17:44:23.578]   - Field: ‘seed’
[17:44:23.578]   - Field: ‘version’
[17:44:23.579]   - Field: ‘result’
[17:44:23.579]   - Field: ‘asynchronous’
[17:44:23.579]   - Field: ‘calls’
[17:44:23.579]   - Field: ‘globals’
[17:44:23.579]   - Field: ‘stdout’
[17:44:23.579]   - Field: ‘earlySignal’
[17:44:23.579]   - Field: ‘lazy’
[17:44:23.579]   - Field: ‘state’
[17:44:23.579] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.579] - Launch lazy future ...
[17:44:23.580] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.580] Packages needed by future strategies (n = 0): <none>
[17:44:23.580] {
[17:44:23.580]     {
[17:44:23.580]         {
[17:44:23.580]             ...future.startTime <- base::Sys.time()
[17:44:23.580]             {
[17:44:23.580]                 {
[17:44:23.580]                   {
[17:44:23.580]                     {
[17:44:23.580]                       base::local({
[17:44:23.580]                         has_future <- base::requireNamespace("future", 
[17:44:23.580]                           quietly = TRUE)
[17:44:23.580]                         if (has_future) {
[17:44:23.580]                           ns <- base::getNamespace("future")
[17:44:23.580]                           version <- ns[[".package"]][["version"]]
[17:44:23.580]                           if (is.null(version)) 
[17:44:23.580]                             version <- utils::packageVersion("future")
[17:44:23.580]                         }
[17:44:23.580]                         else {
[17:44:23.580]                           version <- NULL
[17:44:23.580]                         }
[17:44:23.580]                         if (!has_future || version < "1.8.0") {
[17:44:23.580]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.580]                             "", base::R.version$version.string), 
[17:44:23.580]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.580]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.580]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.580]                               "release", "version")], collapse = " "), 
[17:44:23.580]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.580]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.580]                             info)
[17:44:23.580]                           info <- base::paste(info, collapse = "; ")
[17:44:23.580]                           if (!has_future) {
[17:44:23.580]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.580]                               info)
[17:44:23.580]                           }
[17:44:23.580]                           else {
[17:44:23.580]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.580]                               info, version)
[17:44:23.580]                           }
[17:44:23.580]                           base::stop(msg)
[17:44:23.580]                         }
[17:44:23.580]                       })
[17:44:23.580]                     }
[17:44:23.580]                     base::local({
[17:44:23.580]                       for (pkg in "utils") {
[17:44:23.580]                         base::loadNamespace(pkg)
[17:44:23.580]                         base::library(pkg, character.only = TRUE)
[17:44:23.580]                       }
[17:44:23.580]                     })
[17:44:23.580]                   }
[17:44:23.580]                   options(future.plan = NULL)
[17:44:23.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.580]                 }
[17:44:23.580]                 ...future.workdir <- getwd()
[17:44:23.580]             }
[17:44:23.580]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.580]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.580]         }
[17:44:23.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.580]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.580]             base::names(...future.oldOptions))
[17:44:23.580]     }
[17:44:23.580]     if (FALSE) {
[17:44:23.580]     }
[17:44:23.580]     else {
[17:44:23.580]         if (TRUE) {
[17:44:23.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.580]                 open = "w")
[17:44:23.580]         }
[17:44:23.580]         else {
[17:44:23.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.580]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.580]         }
[17:44:23.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.580]             base::sink(type = "output", split = FALSE)
[17:44:23.580]             base::close(...future.stdout)
[17:44:23.580]         }, add = TRUE)
[17:44:23.580]     }
[17:44:23.580]     ...future.frame <- base::sys.nframe()
[17:44:23.580]     ...future.conditions <- base::list()
[17:44:23.580]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.580]     if (FALSE) {
[17:44:23.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.580]     }
[17:44:23.580]     ...future.result <- base::tryCatch({
[17:44:23.580]         base::withCallingHandlers({
[17:44:23.580]             ...future.value <- base::withVisible(base::local({
[17:44:23.580]                 print(1:50)
[17:44:23.580]                 str(1:50)
[17:44:23.580]                 cat(letters, sep = "-")
[17:44:23.580]                 cat(1:6, collapse = "\n")
[17:44:23.580]                 write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.580]                 42L
[17:44:23.580]             }))
[17:44:23.580]             future::FutureResult(value = ...future.value$value, 
[17:44:23.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.580]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.580]                     ...future.globalenv.names))
[17:44:23.580]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.580]         }, condition = base::local({
[17:44:23.580]             c <- base::c
[17:44:23.580]             inherits <- base::inherits
[17:44:23.580]             invokeRestart <- base::invokeRestart
[17:44:23.580]             length <- base::length
[17:44:23.580]             list <- base::list
[17:44:23.580]             seq.int <- base::seq.int
[17:44:23.580]             signalCondition <- base::signalCondition
[17:44:23.580]             sys.calls <- base::sys.calls
[17:44:23.580]             `[[` <- base::`[[`
[17:44:23.580]             `+` <- base::`+`
[17:44:23.580]             `<<-` <- base::`<<-`
[17:44:23.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.580]                   3L)]
[17:44:23.580]             }
[17:44:23.580]             function(cond) {
[17:44:23.580]                 is_error <- inherits(cond, "error")
[17:44:23.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.580]                   NULL)
[17:44:23.580]                 if (is_error) {
[17:44:23.580]                   sessionInformation <- function() {
[17:44:23.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.580]                       search = base::search(), system = base::Sys.info())
[17:44:23.580]                   }
[17:44:23.580]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.580]                     cond$call), session = sessionInformation(), 
[17:44:23.580]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.580]                   signalCondition(cond)
[17:44:23.580]                 }
[17:44:23.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.580]                 "immediateCondition"))) {
[17:44:23.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.580]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.580]                   if (TRUE && !signal) {
[17:44:23.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.580]                     {
[17:44:23.580]                       inherits <- base::inherits
[17:44:23.580]                       invokeRestart <- base::invokeRestart
[17:44:23.580]                       is.null <- base::is.null
[17:44:23.580]                       muffled <- FALSE
[17:44:23.580]                       if (inherits(cond, "message")) {
[17:44:23.580]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.580]                         if (muffled) 
[17:44:23.580]                           invokeRestart("muffleMessage")
[17:44:23.580]                       }
[17:44:23.580]                       else if (inherits(cond, "warning")) {
[17:44:23.580]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.580]                         if (muffled) 
[17:44:23.580]                           invokeRestart("muffleWarning")
[17:44:23.580]                       }
[17:44:23.580]                       else if (inherits(cond, "condition")) {
[17:44:23.580]                         if (!is.null(pattern)) {
[17:44:23.580]                           computeRestarts <- base::computeRestarts
[17:44:23.580]                           grepl <- base::grepl
[17:44:23.580]                           restarts <- computeRestarts(cond)
[17:44:23.580]                           for (restart in restarts) {
[17:44:23.580]                             name <- restart$name
[17:44:23.580]                             if (is.null(name)) 
[17:44:23.580]                               next
[17:44:23.580]                             if (!grepl(pattern, name)) 
[17:44:23.580]                               next
[17:44:23.580]                             invokeRestart(restart)
[17:44:23.580]                             muffled <- TRUE
[17:44:23.580]                             break
[17:44:23.580]                           }
[17:44:23.580]                         }
[17:44:23.580]                       }
[17:44:23.580]                       invisible(muffled)
[17:44:23.580]                     }
[17:44:23.580]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.580]                   }
[17:44:23.580]                 }
[17:44:23.580]                 else {
[17:44:23.580]                   if (TRUE) {
[17:44:23.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.580]                     {
[17:44:23.580]                       inherits <- base::inherits
[17:44:23.580]                       invokeRestart <- base::invokeRestart
[17:44:23.580]                       is.null <- base::is.null
[17:44:23.580]                       muffled <- FALSE
[17:44:23.580]                       if (inherits(cond, "message")) {
[17:44:23.580]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.580]                         if (muffled) 
[17:44:23.580]                           invokeRestart("muffleMessage")
[17:44:23.580]                       }
[17:44:23.580]                       else if (inherits(cond, "warning")) {
[17:44:23.580]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.580]                         if (muffled) 
[17:44:23.580]                           invokeRestart("muffleWarning")
[17:44:23.580]                       }
[17:44:23.580]                       else if (inherits(cond, "condition")) {
[17:44:23.580]                         if (!is.null(pattern)) {
[17:44:23.580]                           computeRestarts <- base::computeRestarts
[17:44:23.580]                           grepl <- base::grepl
[17:44:23.580]                           restarts <- computeRestarts(cond)
[17:44:23.580]                           for (restart in restarts) {
[17:44:23.580]                             name <- restart$name
[17:44:23.580]                             if (is.null(name)) 
[17:44:23.580]                               next
[17:44:23.580]                             if (!grepl(pattern, name)) 
[17:44:23.580]                               next
[17:44:23.580]                             invokeRestart(restart)
[17:44:23.580]                             muffled <- TRUE
[17:44:23.580]                             break
[17:44:23.580]                           }
[17:44:23.580]                         }
[17:44:23.580]                       }
[17:44:23.580]                       invisible(muffled)
[17:44:23.580]                     }
[17:44:23.580]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.580]                   }
[17:44:23.580]                 }
[17:44:23.580]             }
[17:44:23.580]         }))
[17:44:23.580]     }, error = function(ex) {
[17:44:23.580]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.580]                 ...future.rng), started = ...future.startTime, 
[17:44:23.580]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.580]             version = "1.8"), class = "FutureResult")
[17:44:23.580]     }, finally = {
[17:44:23.580]         if (!identical(...future.workdir, getwd())) 
[17:44:23.580]             setwd(...future.workdir)
[17:44:23.580]         {
[17:44:23.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.580]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.580]             }
[17:44:23.580]             base::options(...future.oldOptions)
[17:44:23.580]             if (.Platform$OS.type == "windows") {
[17:44:23.580]                 old_names <- names(...future.oldEnvVars)
[17:44:23.580]                 envs <- base::Sys.getenv()
[17:44:23.580]                 names <- names(envs)
[17:44:23.580]                 common <- intersect(names, old_names)
[17:44:23.580]                 added <- setdiff(names, old_names)
[17:44:23.580]                 removed <- setdiff(old_names, names)
[17:44:23.580]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.580]                   envs[common]]
[17:44:23.580]                 NAMES <- toupper(changed)
[17:44:23.580]                 args <- list()
[17:44:23.580]                 for (kk in seq_along(NAMES)) {
[17:44:23.580]                   name <- changed[[kk]]
[17:44:23.580]                   NAME <- NAMES[[kk]]
[17:44:23.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.580]                     next
[17:44:23.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.580]                 }
[17:44:23.580]                 NAMES <- toupper(added)
[17:44:23.580]                 for (kk in seq_along(NAMES)) {
[17:44:23.580]                   name <- added[[kk]]
[17:44:23.580]                   NAME <- NAMES[[kk]]
[17:44:23.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.580]                     next
[17:44:23.580]                   args[[name]] <- ""
[17:44:23.580]                 }
[17:44:23.580]                 NAMES <- toupper(removed)
[17:44:23.580]                 for (kk in seq_along(NAMES)) {
[17:44:23.580]                   name <- removed[[kk]]
[17:44:23.580]                   NAME <- NAMES[[kk]]
[17:44:23.580]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.580]                     next
[17:44:23.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.580]                 }
[17:44:23.580]                 if (length(args) > 0) 
[17:44:23.580]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.580]             }
[17:44:23.580]             else {
[17:44:23.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.580]             }
[17:44:23.580]             {
[17:44:23.580]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.580]                   0L) {
[17:44:23.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.580]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.580]                   base::options(opts)
[17:44:23.580]                 }
[17:44:23.580]                 {
[17:44:23.580]                   {
[17:44:23.580]                     NULL
[17:44:23.580]                     RNGkind("Mersenne-Twister")
[17:44:23.580]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.580]                       inherits = FALSE)
[17:44:23.580]                   }
[17:44:23.580]                   options(future.plan = NULL)
[17:44:23.580]                   if (is.na(NA_character_)) 
[17:44:23.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.580]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.580]                   {
[17:44:23.580]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.580]                     if (!future$lazy) 
[17:44:23.580]                       future <- run(future)
[17:44:23.580]                     invisible(future)
[17:44:23.580]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.580]                 }
[17:44:23.580]             }
[17:44:23.580]         }
[17:44:23.580]     })
[17:44:23.580]     if (TRUE) {
[17:44:23.580]         base::sink(type = "output", split = FALSE)
[17:44:23.580]         if (TRUE) {
[17:44:23.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.580]         }
[17:44:23.580]         else {
[17:44:23.580]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.580]         }
[17:44:23.580]         base::close(...future.stdout)
[17:44:23.580]         ...future.stdout <- NULL
[17:44:23.580]     }
[17:44:23.580]     ...future.result$conditions <- ...future.conditions
[17:44:23.580]     ...future.result$finished <- base::Sys.time()
[17:44:23.580]     ...future.result
[17:44:23.580] }
[17:44:23.582] plan(): Setting new future strategy stack:
[17:44:23.582] List of future strategies:
[17:44:23.582] 1. sequential:
[17:44:23.582]    - args: function (..., envir = parent.frame())
[17:44:23.582]    - tweaked: FALSE
[17:44:23.582]    - call: NULL
[17:44:23.583] plan(): nbrOfWorkers() = 1
[17:44:23.584] plan(): Setting new future strategy stack:
[17:44:23.584] List of future strategies:
[17:44:23.584] 1. sequential:
[17:44:23.584]    - args: function (..., envir = parent.frame())
[17:44:23.584]    - tweaked: FALSE
[17:44:23.584]    - call: plan(strategy)
[17:44:23.585] plan(): nbrOfWorkers() = 1
[17:44:23.585] SequentialFuture started (and completed)
[17:44:23.585] - Launch lazy future ... done
[17:44:23.585] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[17:44:23.586] getGlobalsAndPackages() ...
[17:44:23.586] Searching for globals...
[17:44:23.586] - globals found: [1] ‘print’
[17:44:23.586] Searching for globals ... DONE
[17:44:23.586] Resolving globals: FALSE
[17:44:23.587] 
[17:44:23.587] 
[17:44:23.587] getGlobalsAndPackages() ... DONE
[17:44:23.587] run() for ‘Future’ ...
[17:44:23.587] - state: ‘created’
[17:44:23.587] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.588] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.588] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.588]   - Field: ‘label’
[17:44:23.588]   - Field: ‘local’
[17:44:23.588]   - Field: ‘owner’
[17:44:23.588]   - Field: ‘envir’
[17:44:23.588]   - Field: ‘packages’
[17:44:23.588]   - Field: ‘gc’
[17:44:23.588]   - Field: ‘conditions’
[17:44:23.588]   - Field: ‘expr’
[17:44:23.589]   - Field: ‘uuid’
[17:44:23.589]   - Field: ‘seed’
[17:44:23.589]   - Field: ‘version’
[17:44:23.589]   - Field: ‘result’
[17:44:23.589]   - Field: ‘asynchronous’
[17:44:23.589]   - Field: ‘calls’
[17:44:23.589]   - Field: ‘globals’
[17:44:23.589]   - Field: ‘stdout’
[17:44:23.589]   - Field: ‘earlySignal’
[17:44:23.589]   - Field: ‘lazy’
[17:44:23.589]   - Field: ‘state’
[17:44:23.590] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.590] - Launch lazy future ...
[17:44:23.590] Packages needed by the future expression (n = 0): <none>
[17:44:23.590] Packages needed by future strategies (n = 0): <none>
[17:44:23.590] {
[17:44:23.590]     {
[17:44:23.590]         {
[17:44:23.590]             ...future.startTime <- base::Sys.time()
[17:44:23.590]             {
[17:44:23.590]                 {
[17:44:23.590]                   {
[17:44:23.590]                     base::local({
[17:44:23.590]                       has_future <- base::requireNamespace("future", 
[17:44:23.590]                         quietly = TRUE)
[17:44:23.590]                       if (has_future) {
[17:44:23.590]                         ns <- base::getNamespace("future")
[17:44:23.590]                         version <- ns[[".package"]][["version"]]
[17:44:23.590]                         if (is.null(version)) 
[17:44:23.590]                           version <- utils::packageVersion("future")
[17:44:23.590]                       }
[17:44:23.590]                       else {
[17:44:23.590]                         version <- NULL
[17:44:23.590]                       }
[17:44:23.590]                       if (!has_future || version < "1.8.0") {
[17:44:23.590]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.590]                           "", base::R.version$version.string), 
[17:44:23.590]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:23.590]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.590]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.590]                             "release", "version")], collapse = " "), 
[17:44:23.590]                           hostname = base::Sys.info()[["nodename"]])
[17:44:23.590]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.590]                           info)
[17:44:23.590]                         info <- base::paste(info, collapse = "; ")
[17:44:23.590]                         if (!has_future) {
[17:44:23.590]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.590]                             info)
[17:44:23.590]                         }
[17:44:23.590]                         else {
[17:44:23.590]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.590]                             info, version)
[17:44:23.590]                         }
[17:44:23.590]                         base::stop(msg)
[17:44:23.590]                       }
[17:44:23.590]                     })
[17:44:23.590]                   }
[17:44:23.590]                   options(future.plan = NULL)
[17:44:23.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.590]                 }
[17:44:23.590]                 ...future.workdir <- getwd()
[17:44:23.590]             }
[17:44:23.590]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.590]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.590]         }
[17:44:23.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.590]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.590]             base::names(...future.oldOptions))
[17:44:23.590]     }
[17:44:23.590]     if (FALSE) {
[17:44:23.590]     }
[17:44:23.590]     else {
[17:44:23.590]         if (TRUE) {
[17:44:23.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.590]                 open = "w")
[17:44:23.590]         }
[17:44:23.590]         else {
[17:44:23.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.590]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.590]         }
[17:44:23.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.590]             base::sink(type = "output", split = FALSE)
[17:44:23.590]             base::close(...future.stdout)
[17:44:23.590]         }, add = TRUE)
[17:44:23.590]     }
[17:44:23.590]     ...future.frame <- base::sys.nframe()
[17:44:23.590]     ...future.conditions <- base::list()
[17:44:23.590]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.590]     if (FALSE) {
[17:44:23.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.590]     }
[17:44:23.590]     ...future.result <- base::tryCatch({
[17:44:23.590]         base::withCallingHandlers({
[17:44:23.590]             ...future.value <- base::withVisible(base::local(print(42)))
[17:44:23.590]             future::FutureResult(value = ...future.value$value, 
[17:44:23.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.590]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.590]                     ...future.globalenv.names))
[17:44:23.590]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.590]         }, condition = base::local({
[17:44:23.590]             c <- base::c
[17:44:23.590]             inherits <- base::inherits
[17:44:23.590]             invokeRestart <- base::invokeRestart
[17:44:23.590]             length <- base::length
[17:44:23.590]             list <- base::list
[17:44:23.590]             seq.int <- base::seq.int
[17:44:23.590]             signalCondition <- base::signalCondition
[17:44:23.590]             sys.calls <- base::sys.calls
[17:44:23.590]             `[[` <- base::`[[`
[17:44:23.590]             `+` <- base::`+`
[17:44:23.590]             `<<-` <- base::`<<-`
[17:44:23.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.590]                   3L)]
[17:44:23.590]             }
[17:44:23.590]             function(cond) {
[17:44:23.590]                 is_error <- inherits(cond, "error")
[17:44:23.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.590]                   NULL)
[17:44:23.590]                 if (is_error) {
[17:44:23.590]                   sessionInformation <- function() {
[17:44:23.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.590]                       search = base::search(), system = base::Sys.info())
[17:44:23.590]                   }
[17:44:23.590]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.590]                     cond$call), session = sessionInformation(), 
[17:44:23.590]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.590]                   signalCondition(cond)
[17:44:23.590]                 }
[17:44:23.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.590]                 "immediateCondition"))) {
[17:44:23.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.590]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.590]                   if (TRUE && !signal) {
[17:44:23.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.590]                     {
[17:44:23.590]                       inherits <- base::inherits
[17:44:23.590]                       invokeRestart <- base::invokeRestart
[17:44:23.590]                       is.null <- base::is.null
[17:44:23.590]                       muffled <- FALSE
[17:44:23.590]                       if (inherits(cond, "message")) {
[17:44:23.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.590]                         if (muffled) 
[17:44:23.590]                           invokeRestart("muffleMessage")
[17:44:23.590]                       }
[17:44:23.590]                       else if (inherits(cond, "warning")) {
[17:44:23.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.590]                         if (muffled) 
[17:44:23.590]                           invokeRestart("muffleWarning")
[17:44:23.590]                       }
[17:44:23.590]                       else if (inherits(cond, "condition")) {
[17:44:23.590]                         if (!is.null(pattern)) {
[17:44:23.590]                           computeRestarts <- base::computeRestarts
[17:44:23.590]                           grepl <- base::grepl
[17:44:23.590]                           restarts <- computeRestarts(cond)
[17:44:23.590]                           for (restart in restarts) {
[17:44:23.590]                             name <- restart$name
[17:44:23.590]                             if (is.null(name)) 
[17:44:23.590]                               next
[17:44:23.590]                             if (!grepl(pattern, name)) 
[17:44:23.590]                               next
[17:44:23.590]                             invokeRestart(restart)
[17:44:23.590]                             muffled <- TRUE
[17:44:23.590]                             break
[17:44:23.590]                           }
[17:44:23.590]                         }
[17:44:23.590]                       }
[17:44:23.590]                       invisible(muffled)
[17:44:23.590]                     }
[17:44:23.590]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.590]                   }
[17:44:23.590]                 }
[17:44:23.590]                 else {
[17:44:23.590]                   if (TRUE) {
[17:44:23.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.590]                     {
[17:44:23.590]                       inherits <- base::inherits
[17:44:23.590]                       invokeRestart <- base::invokeRestart
[17:44:23.590]                       is.null <- base::is.null
[17:44:23.590]                       muffled <- FALSE
[17:44:23.590]                       if (inherits(cond, "message")) {
[17:44:23.590]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.590]                         if (muffled) 
[17:44:23.590]                           invokeRestart("muffleMessage")
[17:44:23.590]                       }
[17:44:23.590]                       else if (inherits(cond, "warning")) {
[17:44:23.590]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.590]                         if (muffled) 
[17:44:23.590]                           invokeRestart("muffleWarning")
[17:44:23.590]                       }
[17:44:23.590]                       else if (inherits(cond, "condition")) {
[17:44:23.590]                         if (!is.null(pattern)) {
[17:44:23.590]                           computeRestarts <- base::computeRestarts
[17:44:23.590]                           grepl <- base::grepl
[17:44:23.590]                           restarts <- computeRestarts(cond)
[17:44:23.590]                           for (restart in restarts) {
[17:44:23.590]                             name <- restart$name
[17:44:23.590]                             if (is.null(name)) 
[17:44:23.590]                               next
[17:44:23.590]                             if (!grepl(pattern, name)) 
[17:44:23.590]                               next
[17:44:23.590]                             invokeRestart(restart)
[17:44:23.590]                             muffled <- TRUE
[17:44:23.590]                             break
[17:44:23.590]                           }
[17:44:23.590]                         }
[17:44:23.590]                       }
[17:44:23.590]                       invisible(muffled)
[17:44:23.590]                     }
[17:44:23.590]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.590]                   }
[17:44:23.590]                 }
[17:44:23.590]             }
[17:44:23.590]         }))
[17:44:23.590]     }, error = function(ex) {
[17:44:23.590]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.590]                 ...future.rng), started = ...future.startTime, 
[17:44:23.590]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.590]             version = "1.8"), class = "FutureResult")
[17:44:23.590]     }, finally = {
[17:44:23.590]         if (!identical(...future.workdir, getwd())) 
[17:44:23.590]             setwd(...future.workdir)
[17:44:23.590]         {
[17:44:23.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.590]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.590]             }
[17:44:23.590]             base::options(...future.oldOptions)
[17:44:23.590]             if (.Platform$OS.type == "windows") {
[17:44:23.590]                 old_names <- names(...future.oldEnvVars)
[17:44:23.590]                 envs <- base::Sys.getenv()
[17:44:23.590]                 names <- names(envs)
[17:44:23.590]                 common <- intersect(names, old_names)
[17:44:23.590]                 added <- setdiff(names, old_names)
[17:44:23.590]                 removed <- setdiff(old_names, names)
[17:44:23.590]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.590]                   envs[common]]
[17:44:23.590]                 NAMES <- toupper(changed)
[17:44:23.590]                 args <- list()
[17:44:23.590]                 for (kk in seq_along(NAMES)) {
[17:44:23.590]                   name <- changed[[kk]]
[17:44:23.590]                   NAME <- NAMES[[kk]]
[17:44:23.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.590]                     next
[17:44:23.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.590]                 }
[17:44:23.590]                 NAMES <- toupper(added)
[17:44:23.590]                 for (kk in seq_along(NAMES)) {
[17:44:23.590]                   name <- added[[kk]]
[17:44:23.590]                   NAME <- NAMES[[kk]]
[17:44:23.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.590]                     next
[17:44:23.590]                   args[[name]] <- ""
[17:44:23.590]                 }
[17:44:23.590]                 NAMES <- toupper(removed)
[17:44:23.590]                 for (kk in seq_along(NAMES)) {
[17:44:23.590]                   name <- removed[[kk]]
[17:44:23.590]                   NAME <- NAMES[[kk]]
[17:44:23.590]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.590]                     next
[17:44:23.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.590]                 }
[17:44:23.590]                 if (length(args) > 0) 
[17:44:23.590]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.590]             }
[17:44:23.590]             else {
[17:44:23.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.590]             }
[17:44:23.590]             {
[17:44:23.590]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.590]                   0L) {
[17:44:23.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.590]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.590]                   base::options(opts)
[17:44:23.590]                 }
[17:44:23.590]                 {
[17:44:23.590]                   {
[17:44:23.590]                     NULL
[17:44:23.590]                     RNGkind("Mersenne-Twister")
[17:44:23.590]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.590]                       inherits = FALSE)
[17:44:23.590]                   }
[17:44:23.590]                   options(future.plan = NULL)
[17:44:23.590]                   if (is.na(NA_character_)) 
[17:44:23.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.590]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.590]                   {
[17:44:23.590]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.590]                     if (!future$lazy) 
[17:44:23.590]                       future <- run(future)
[17:44:23.590]                     invisible(future)
[17:44:23.590]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.590]                 }
[17:44:23.590]             }
[17:44:23.590]         }
[17:44:23.590]     })
[17:44:23.590]     if (TRUE) {
[17:44:23.590]         base::sink(type = "output", split = FALSE)
[17:44:23.590]         if (TRUE) {
[17:44:23.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.590]         }
[17:44:23.590]         else {
[17:44:23.590]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.590]         }
[17:44:23.590]         base::close(...future.stdout)
[17:44:23.590]         ...future.stdout <- NULL
[17:44:23.590]     }
[17:44:23.590]     ...future.result$conditions <- ...future.conditions
[17:44:23.590]     ...future.result$finished <- base::Sys.time()
[17:44:23.590]     ...future.result
[17:44:23.590] }
[17:44:23.592] plan(): Setting new future strategy stack:
[17:44:23.592] List of future strategies:
[17:44:23.592] 1. sequential:
[17:44:23.592]    - args: function (..., envir = parent.frame())
[17:44:23.592]    - tweaked: FALSE
[17:44:23.592]    - call: NULL
[17:44:23.593] plan(): nbrOfWorkers() = 1
[17:44:23.593] plan(): Setting new future strategy stack:
[17:44:23.593] List of future strategies:
[17:44:23.593] 1. sequential:
[17:44:23.593]    - args: function (..., envir = parent.frame())
[17:44:23.593]    - tweaked: FALSE
[17:44:23.593]    - call: plan(strategy)
[17:44:23.594] plan(): nbrOfWorkers() = 1
[17:44:23.594] SequentialFuture started (and completed)
[17:44:23.594] - Launch lazy future ... done
[17:44:23.594] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[17:44:23.594] getGlobalsAndPackages() ...
[17:44:23.595] Searching for globals...
[17:44:23.599] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.599] Searching for globals ... DONE
[17:44:23.599] Resolving globals: FALSE
[17:44:23.600] 
[17:44:23.600] - packages: [1] ‘utils’
[17:44:23.600] getGlobalsAndPackages() ... DONE
[17:44:23.600] run() for ‘Future’ ...
[17:44:23.601] - state: ‘created’
[17:44:23.601] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.601] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.601] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.601]   - Field: ‘label’
[17:44:23.601]   - Field: ‘local’
[17:44:23.601]   - Field: ‘owner’
[17:44:23.602]   - Field: ‘envir’
[17:44:23.602]   - Field: ‘packages’
[17:44:23.602]   - Field: ‘gc’
[17:44:23.602]   - Field: ‘conditions’
[17:44:23.602]   - Field: ‘expr’
[17:44:23.602]   - Field: ‘uuid’
[17:44:23.602]   - Field: ‘seed’
[17:44:23.602]   - Field: ‘version’
[17:44:23.602]   - Field: ‘result’
[17:44:23.602]   - Field: ‘asynchronous’
[17:44:23.603]   - Field: ‘calls’
[17:44:23.603]   - Field: ‘globals’
[17:44:23.603]   - Field: ‘stdout’
[17:44:23.603]   - Field: ‘earlySignal’
[17:44:23.603]   - Field: ‘lazy’
[17:44:23.603]   - Field: ‘state’
[17:44:23.603] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.603] - Launch lazy future ...
[17:44:23.603] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.604] Packages needed by future strategies (n = 0): <none>
[17:44:23.604] {
[17:44:23.604]     {
[17:44:23.604]         {
[17:44:23.604]             ...future.startTime <- base::Sys.time()
[17:44:23.604]             {
[17:44:23.604]                 {
[17:44:23.604]                   {
[17:44:23.604]                     {
[17:44:23.604]                       base::local({
[17:44:23.604]                         has_future <- base::requireNamespace("future", 
[17:44:23.604]                           quietly = TRUE)
[17:44:23.604]                         if (has_future) {
[17:44:23.604]                           ns <- base::getNamespace("future")
[17:44:23.604]                           version <- ns[[".package"]][["version"]]
[17:44:23.604]                           if (is.null(version)) 
[17:44:23.604]                             version <- utils::packageVersion("future")
[17:44:23.604]                         }
[17:44:23.604]                         else {
[17:44:23.604]                           version <- NULL
[17:44:23.604]                         }
[17:44:23.604]                         if (!has_future || version < "1.8.0") {
[17:44:23.604]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.604]                             "", base::R.version$version.string), 
[17:44:23.604]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.604]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.604]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.604]                               "release", "version")], collapse = " "), 
[17:44:23.604]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.604]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.604]                             info)
[17:44:23.604]                           info <- base::paste(info, collapse = "; ")
[17:44:23.604]                           if (!has_future) {
[17:44:23.604]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.604]                               info)
[17:44:23.604]                           }
[17:44:23.604]                           else {
[17:44:23.604]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.604]                               info, version)
[17:44:23.604]                           }
[17:44:23.604]                           base::stop(msg)
[17:44:23.604]                         }
[17:44:23.604]                       })
[17:44:23.604]                     }
[17:44:23.604]                     base::local({
[17:44:23.604]                       for (pkg in "utils") {
[17:44:23.604]                         base::loadNamespace(pkg)
[17:44:23.604]                         base::library(pkg, character.only = TRUE)
[17:44:23.604]                       }
[17:44:23.604]                     })
[17:44:23.604]                   }
[17:44:23.604]                   options(future.plan = NULL)
[17:44:23.604]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.604]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.604]                 }
[17:44:23.604]                 ...future.workdir <- getwd()
[17:44:23.604]             }
[17:44:23.604]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.604]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.604]         }
[17:44:23.604]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.604]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.604]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.604]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.604]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.604]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.604]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.604]             base::names(...future.oldOptions))
[17:44:23.604]     }
[17:44:23.604]     if (FALSE) {
[17:44:23.604]     }
[17:44:23.604]     else {
[17:44:23.604]         if (FALSE) {
[17:44:23.604]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.604]                 open = "w")
[17:44:23.604]         }
[17:44:23.604]         else {
[17:44:23.604]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.604]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.604]         }
[17:44:23.604]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.604]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.604]             base::sink(type = "output", split = FALSE)
[17:44:23.604]             base::close(...future.stdout)
[17:44:23.604]         }, add = TRUE)
[17:44:23.604]     }
[17:44:23.604]     ...future.frame <- base::sys.nframe()
[17:44:23.604]     ...future.conditions <- base::list()
[17:44:23.604]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.604]     if (FALSE) {
[17:44:23.604]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.604]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.604]     }
[17:44:23.604]     ...future.result <- base::tryCatch({
[17:44:23.604]         base::withCallingHandlers({
[17:44:23.604]             ...future.value <- base::withVisible(base::local({
[17:44:23.604]                 print(1:50)
[17:44:23.604]                 str(1:50)
[17:44:23.604]                 cat(letters, sep = "-")
[17:44:23.604]                 cat(1:6, collapse = "\n")
[17:44:23.604]                 write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.604]                 42L
[17:44:23.604]             }))
[17:44:23.604]             future::FutureResult(value = ...future.value$value, 
[17:44:23.604]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.604]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.604]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.604]                     ...future.globalenv.names))
[17:44:23.604]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.604]         }, condition = base::local({
[17:44:23.604]             c <- base::c
[17:44:23.604]             inherits <- base::inherits
[17:44:23.604]             invokeRestart <- base::invokeRestart
[17:44:23.604]             length <- base::length
[17:44:23.604]             list <- base::list
[17:44:23.604]             seq.int <- base::seq.int
[17:44:23.604]             signalCondition <- base::signalCondition
[17:44:23.604]             sys.calls <- base::sys.calls
[17:44:23.604]             `[[` <- base::`[[`
[17:44:23.604]             `+` <- base::`+`
[17:44:23.604]             `<<-` <- base::`<<-`
[17:44:23.604]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.604]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.604]                   3L)]
[17:44:23.604]             }
[17:44:23.604]             function(cond) {
[17:44:23.604]                 is_error <- inherits(cond, "error")
[17:44:23.604]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.604]                   NULL)
[17:44:23.604]                 if (is_error) {
[17:44:23.604]                   sessionInformation <- function() {
[17:44:23.604]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.604]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.604]                       search = base::search(), system = base::Sys.info())
[17:44:23.604]                   }
[17:44:23.604]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.604]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.604]                     cond$call), session = sessionInformation(), 
[17:44:23.604]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.604]                   signalCondition(cond)
[17:44:23.604]                 }
[17:44:23.604]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.604]                 "immediateCondition"))) {
[17:44:23.604]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.604]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.604]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.604]                   if (TRUE && !signal) {
[17:44:23.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.604]                     {
[17:44:23.604]                       inherits <- base::inherits
[17:44:23.604]                       invokeRestart <- base::invokeRestart
[17:44:23.604]                       is.null <- base::is.null
[17:44:23.604]                       muffled <- FALSE
[17:44:23.604]                       if (inherits(cond, "message")) {
[17:44:23.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.604]                         if (muffled) 
[17:44:23.604]                           invokeRestart("muffleMessage")
[17:44:23.604]                       }
[17:44:23.604]                       else if (inherits(cond, "warning")) {
[17:44:23.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.604]                         if (muffled) 
[17:44:23.604]                           invokeRestart("muffleWarning")
[17:44:23.604]                       }
[17:44:23.604]                       else if (inherits(cond, "condition")) {
[17:44:23.604]                         if (!is.null(pattern)) {
[17:44:23.604]                           computeRestarts <- base::computeRestarts
[17:44:23.604]                           grepl <- base::grepl
[17:44:23.604]                           restarts <- computeRestarts(cond)
[17:44:23.604]                           for (restart in restarts) {
[17:44:23.604]                             name <- restart$name
[17:44:23.604]                             if (is.null(name)) 
[17:44:23.604]                               next
[17:44:23.604]                             if (!grepl(pattern, name)) 
[17:44:23.604]                               next
[17:44:23.604]                             invokeRestart(restart)
[17:44:23.604]                             muffled <- TRUE
[17:44:23.604]                             break
[17:44:23.604]                           }
[17:44:23.604]                         }
[17:44:23.604]                       }
[17:44:23.604]                       invisible(muffled)
[17:44:23.604]                     }
[17:44:23.604]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.604]                   }
[17:44:23.604]                 }
[17:44:23.604]                 else {
[17:44:23.604]                   if (TRUE) {
[17:44:23.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.604]                     {
[17:44:23.604]                       inherits <- base::inherits
[17:44:23.604]                       invokeRestart <- base::invokeRestart
[17:44:23.604]                       is.null <- base::is.null
[17:44:23.604]                       muffled <- FALSE
[17:44:23.604]                       if (inherits(cond, "message")) {
[17:44:23.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.604]                         if (muffled) 
[17:44:23.604]                           invokeRestart("muffleMessage")
[17:44:23.604]                       }
[17:44:23.604]                       else if (inherits(cond, "warning")) {
[17:44:23.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.604]                         if (muffled) 
[17:44:23.604]                           invokeRestart("muffleWarning")
[17:44:23.604]                       }
[17:44:23.604]                       else if (inherits(cond, "condition")) {
[17:44:23.604]                         if (!is.null(pattern)) {
[17:44:23.604]                           computeRestarts <- base::computeRestarts
[17:44:23.604]                           grepl <- base::grepl
[17:44:23.604]                           restarts <- computeRestarts(cond)
[17:44:23.604]                           for (restart in restarts) {
[17:44:23.604]                             name <- restart$name
[17:44:23.604]                             if (is.null(name)) 
[17:44:23.604]                               next
[17:44:23.604]                             if (!grepl(pattern, name)) 
[17:44:23.604]                               next
[17:44:23.604]                             invokeRestart(restart)
[17:44:23.604]                             muffled <- TRUE
[17:44:23.604]                             break
[17:44:23.604]                           }
[17:44:23.604]                         }
[17:44:23.604]                       }
[17:44:23.604]                       invisible(muffled)
[17:44:23.604]                     }
[17:44:23.604]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.604]                   }
[17:44:23.604]                 }
[17:44:23.604]             }
[17:44:23.604]         }))
[17:44:23.604]     }, error = function(ex) {
[17:44:23.604]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.604]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.604]                 ...future.rng), started = ...future.startTime, 
[17:44:23.604]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.604]             version = "1.8"), class = "FutureResult")
[17:44:23.604]     }, finally = {
[17:44:23.604]         if (!identical(...future.workdir, getwd())) 
[17:44:23.604]             setwd(...future.workdir)
[17:44:23.604]         {
[17:44:23.604]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.604]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.604]             }
[17:44:23.604]             base::options(...future.oldOptions)
[17:44:23.604]             if (.Platform$OS.type == "windows") {
[17:44:23.604]                 old_names <- names(...future.oldEnvVars)
[17:44:23.604]                 envs <- base::Sys.getenv()
[17:44:23.604]                 names <- names(envs)
[17:44:23.604]                 common <- intersect(names, old_names)
[17:44:23.604]                 added <- setdiff(names, old_names)
[17:44:23.604]                 removed <- setdiff(old_names, names)
[17:44:23.604]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.604]                   envs[common]]
[17:44:23.604]                 NAMES <- toupper(changed)
[17:44:23.604]                 args <- list()
[17:44:23.604]                 for (kk in seq_along(NAMES)) {
[17:44:23.604]                   name <- changed[[kk]]
[17:44:23.604]                   NAME <- NAMES[[kk]]
[17:44:23.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.604]                     next
[17:44:23.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.604]                 }
[17:44:23.604]                 NAMES <- toupper(added)
[17:44:23.604]                 for (kk in seq_along(NAMES)) {
[17:44:23.604]                   name <- added[[kk]]
[17:44:23.604]                   NAME <- NAMES[[kk]]
[17:44:23.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.604]                     next
[17:44:23.604]                   args[[name]] <- ""
[17:44:23.604]                 }
[17:44:23.604]                 NAMES <- toupper(removed)
[17:44:23.604]                 for (kk in seq_along(NAMES)) {
[17:44:23.604]                   name <- removed[[kk]]
[17:44:23.604]                   NAME <- NAMES[[kk]]
[17:44:23.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.604]                     next
[17:44:23.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.604]                 }
[17:44:23.604]                 if (length(args) > 0) 
[17:44:23.604]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.604]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.604]             }
[17:44:23.604]             else {
[17:44:23.604]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.604]             }
[17:44:23.604]             {
[17:44:23.604]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.604]                   0L) {
[17:44:23.604]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.604]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.604]                   base::options(opts)
[17:44:23.604]                 }
[17:44:23.604]                 {
[17:44:23.604]                   {
[17:44:23.604]                     NULL
[17:44:23.604]                     RNGkind("Mersenne-Twister")
[17:44:23.604]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.604]                       inherits = FALSE)
[17:44:23.604]                   }
[17:44:23.604]                   options(future.plan = NULL)
[17:44:23.604]                   if (is.na(NA_character_)) 
[17:44:23.604]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.604]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.604]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.604]                   {
[17:44:23.604]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.604]                     if (!future$lazy) 
[17:44:23.604]                       future <- run(future)
[17:44:23.604]                     invisible(future)
[17:44:23.604]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.604]                 }
[17:44:23.604]             }
[17:44:23.604]         }
[17:44:23.604]     })
[17:44:23.604]     if (TRUE) {
[17:44:23.604]         base::sink(type = "output", split = FALSE)
[17:44:23.604]         if (FALSE) {
[17:44:23.604]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.604]         }
[17:44:23.604]         else {
[17:44:23.604]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.604]         }
[17:44:23.604]         base::close(...future.stdout)
[17:44:23.604]         ...future.stdout <- NULL
[17:44:23.604]     }
[17:44:23.604]     ...future.result$conditions <- ...future.conditions
[17:44:23.604]     ...future.result$finished <- base::Sys.time()
[17:44:23.604]     ...future.result
[17:44:23.604] }
[17:44:23.606] plan(): Setting new future strategy stack:
[17:44:23.606] List of future strategies:
[17:44:23.606] 1. sequential:
[17:44:23.606]    - args: function (..., envir = parent.frame())
[17:44:23.606]    - tweaked: FALSE
[17:44:23.606]    - call: NULL
[17:44:23.607] plan(): nbrOfWorkers() = 1
[17:44:23.609] plan(): Setting new future strategy stack:
[17:44:23.609] List of future strategies:
[17:44:23.609] 1. sequential:
[17:44:23.609]    - args: function (..., envir = parent.frame())
[17:44:23.609]    - tweaked: FALSE
[17:44:23.609]    - call: plan(strategy)
[17:44:23.609] plan(): nbrOfWorkers() = 1
[17:44:23.609] SequentialFuture started (and completed)
[17:44:23.609] - Launch lazy future ... done
[17:44:23.609] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ session_uuid: chr "007d6ee1-2321-4626-191d-5aefd0faf814"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53760
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:23"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:23.617] getGlobalsAndPackages() ...
[17:44:23.618] Searching for globals...
[17:44:23.620] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.621] Searching for globals ... DONE
[17:44:23.621] Resolving globals: FALSE
[17:44:23.621] 
[17:44:23.621] - packages: [1] ‘utils’
[17:44:23.621] getGlobalsAndPackages() ... DONE
[17:44:23.622] run() for ‘Future’ ...
[17:44:23.622] - state: ‘created’
[17:44:23.622] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.622] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.622] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.622]   - Field: ‘label’
[17:44:23.623]   - Field: ‘local’
[17:44:23.623]   - Field: ‘owner’
[17:44:23.623]   - Field: ‘envir’
[17:44:23.623]   - Field: ‘packages’
[17:44:23.625]   - Field: ‘gc’
[17:44:23.625]   - Field: ‘conditions’
[17:44:23.625]   - Field: ‘expr’
[17:44:23.625]   - Field: ‘uuid’
[17:44:23.625]   - Field: ‘seed’
[17:44:23.625]   - Field: ‘version’
[17:44:23.625]   - Field: ‘result’
[17:44:23.625]   - Field: ‘asynchronous’
[17:44:23.626]   - Field: ‘calls’
[17:44:23.626]   - Field: ‘globals’
[17:44:23.626]   - Field: ‘stdout’
[17:44:23.626]   - Field: ‘earlySignal’
[17:44:23.626]   - Field: ‘lazy’
[17:44:23.626]   - Field: ‘state’
[17:44:23.626] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.626] - Launch lazy future ...
[17:44:23.626] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.627] Packages needed by future strategies (n = 0): <none>
[17:44:23.627] {
[17:44:23.627]     {
[17:44:23.627]         {
[17:44:23.627]             ...future.startTime <- base::Sys.time()
[17:44:23.627]             {
[17:44:23.627]                 {
[17:44:23.627]                   {
[17:44:23.627]                     {
[17:44:23.627]                       base::local({
[17:44:23.627]                         has_future <- base::requireNamespace("future", 
[17:44:23.627]                           quietly = TRUE)
[17:44:23.627]                         if (has_future) {
[17:44:23.627]                           ns <- base::getNamespace("future")
[17:44:23.627]                           version <- ns[[".package"]][["version"]]
[17:44:23.627]                           if (is.null(version)) 
[17:44:23.627]                             version <- utils::packageVersion("future")
[17:44:23.627]                         }
[17:44:23.627]                         else {
[17:44:23.627]                           version <- NULL
[17:44:23.627]                         }
[17:44:23.627]                         if (!has_future || version < "1.8.0") {
[17:44:23.627]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.627]                             "", base::R.version$version.string), 
[17:44:23.627]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.627]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.627]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.627]                               "release", "version")], collapse = " "), 
[17:44:23.627]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.627]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.627]                             info)
[17:44:23.627]                           info <- base::paste(info, collapse = "; ")
[17:44:23.627]                           if (!has_future) {
[17:44:23.627]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.627]                               info)
[17:44:23.627]                           }
[17:44:23.627]                           else {
[17:44:23.627]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.627]                               info, version)
[17:44:23.627]                           }
[17:44:23.627]                           base::stop(msg)
[17:44:23.627]                         }
[17:44:23.627]                       })
[17:44:23.627]                     }
[17:44:23.627]                     base::local({
[17:44:23.627]                       for (pkg in "utils") {
[17:44:23.627]                         base::loadNamespace(pkg)
[17:44:23.627]                         base::library(pkg, character.only = TRUE)
[17:44:23.627]                       }
[17:44:23.627]                     })
[17:44:23.627]                   }
[17:44:23.627]                   options(future.plan = NULL)
[17:44:23.627]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.627]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.627]                 }
[17:44:23.627]                 ...future.workdir <- getwd()
[17:44:23.627]             }
[17:44:23.627]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.627]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.627]         }
[17:44:23.627]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.627]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.627]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.627]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.627]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.627]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.627]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.627]             base::names(...future.oldOptions))
[17:44:23.627]     }
[17:44:23.627]     if (FALSE) {
[17:44:23.627]     }
[17:44:23.627]     else {
[17:44:23.627]         if (FALSE) {
[17:44:23.627]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.627]                 open = "w")
[17:44:23.627]         }
[17:44:23.627]         else {
[17:44:23.627]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.627]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.627]         }
[17:44:23.627]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.627]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.627]             base::sink(type = "output", split = FALSE)
[17:44:23.627]             base::close(...future.stdout)
[17:44:23.627]         }, add = TRUE)
[17:44:23.627]     }
[17:44:23.627]     ...future.frame <- base::sys.nframe()
[17:44:23.627]     ...future.conditions <- base::list()
[17:44:23.627]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.627]     if (FALSE) {
[17:44:23.627]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.627]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.627]     }
[17:44:23.627]     ...future.result <- base::tryCatch({
[17:44:23.627]         base::withCallingHandlers({
[17:44:23.627]             ...future.value <- base::withVisible(base::local({
[17:44:23.627]                 print(1:50)
[17:44:23.627]                 str(1:50)
[17:44:23.627]                 cat(letters, sep = "-")
[17:44:23.627]                 cat(1:6, collapse = "\n")
[17:44:23.627]                 write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.627]                 42L
[17:44:23.627]             }))
[17:44:23.627]             future::FutureResult(value = ...future.value$value, 
[17:44:23.627]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.627]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.627]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.627]                     ...future.globalenv.names))
[17:44:23.627]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.627]         }, condition = base::local({
[17:44:23.627]             c <- base::c
[17:44:23.627]             inherits <- base::inherits
[17:44:23.627]             invokeRestart <- base::invokeRestart
[17:44:23.627]             length <- base::length
[17:44:23.627]             list <- base::list
[17:44:23.627]             seq.int <- base::seq.int
[17:44:23.627]             signalCondition <- base::signalCondition
[17:44:23.627]             sys.calls <- base::sys.calls
[17:44:23.627]             `[[` <- base::`[[`
[17:44:23.627]             `+` <- base::`+`
[17:44:23.627]             `<<-` <- base::`<<-`
[17:44:23.627]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.627]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.627]                   3L)]
[17:44:23.627]             }
[17:44:23.627]             function(cond) {
[17:44:23.627]                 is_error <- inherits(cond, "error")
[17:44:23.627]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.627]                   NULL)
[17:44:23.627]                 if (is_error) {
[17:44:23.627]                   sessionInformation <- function() {
[17:44:23.627]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.627]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.627]                       search = base::search(), system = base::Sys.info())
[17:44:23.627]                   }
[17:44:23.627]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.627]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.627]                     cond$call), session = sessionInformation(), 
[17:44:23.627]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.627]                   signalCondition(cond)
[17:44:23.627]                 }
[17:44:23.627]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.627]                 "immediateCondition"))) {
[17:44:23.627]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.627]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.627]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.627]                   if (TRUE && !signal) {
[17:44:23.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.627]                     {
[17:44:23.627]                       inherits <- base::inherits
[17:44:23.627]                       invokeRestart <- base::invokeRestart
[17:44:23.627]                       is.null <- base::is.null
[17:44:23.627]                       muffled <- FALSE
[17:44:23.627]                       if (inherits(cond, "message")) {
[17:44:23.627]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.627]                         if (muffled) 
[17:44:23.627]                           invokeRestart("muffleMessage")
[17:44:23.627]                       }
[17:44:23.627]                       else if (inherits(cond, "warning")) {
[17:44:23.627]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.627]                         if (muffled) 
[17:44:23.627]                           invokeRestart("muffleWarning")
[17:44:23.627]                       }
[17:44:23.627]                       else if (inherits(cond, "condition")) {
[17:44:23.627]                         if (!is.null(pattern)) {
[17:44:23.627]                           computeRestarts <- base::computeRestarts
[17:44:23.627]                           grepl <- base::grepl
[17:44:23.627]                           restarts <- computeRestarts(cond)
[17:44:23.627]                           for (restart in restarts) {
[17:44:23.627]                             name <- restart$name
[17:44:23.627]                             if (is.null(name)) 
[17:44:23.627]                               next
[17:44:23.627]                             if (!grepl(pattern, name)) 
[17:44:23.627]                               next
[17:44:23.627]                             invokeRestart(restart)
[17:44:23.627]                             muffled <- TRUE
[17:44:23.627]                             break
[17:44:23.627]                           }
[17:44:23.627]                         }
[17:44:23.627]                       }
[17:44:23.627]                       invisible(muffled)
[17:44:23.627]                     }
[17:44:23.627]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.627]                   }
[17:44:23.627]                 }
[17:44:23.627]                 else {
[17:44:23.627]                   if (TRUE) {
[17:44:23.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.627]                     {
[17:44:23.627]                       inherits <- base::inherits
[17:44:23.627]                       invokeRestart <- base::invokeRestart
[17:44:23.627]                       is.null <- base::is.null
[17:44:23.627]                       muffled <- FALSE
[17:44:23.627]                       if (inherits(cond, "message")) {
[17:44:23.627]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.627]                         if (muffled) 
[17:44:23.627]                           invokeRestart("muffleMessage")
[17:44:23.627]                       }
[17:44:23.627]                       else if (inherits(cond, "warning")) {
[17:44:23.627]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.627]                         if (muffled) 
[17:44:23.627]                           invokeRestart("muffleWarning")
[17:44:23.627]                       }
[17:44:23.627]                       else if (inherits(cond, "condition")) {
[17:44:23.627]                         if (!is.null(pattern)) {
[17:44:23.627]                           computeRestarts <- base::computeRestarts
[17:44:23.627]                           grepl <- base::grepl
[17:44:23.627]                           restarts <- computeRestarts(cond)
[17:44:23.627]                           for (restart in restarts) {
[17:44:23.627]                             name <- restart$name
[17:44:23.627]                             if (is.null(name)) 
[17:44:23.627]                               next
[17:44:23.627]                             if (!grepl(pattern, name)) 
[17:44:23.627]                               next
[17:44:23.627]                             invokeRestart(restart)
[17:44:23.627]                             muffled <- TRUE
[17:44:23.627]                             break
[17:44:23.627]                           }
[17:44:23.627]                         }
[17:44:23.627]                       }
[17:44:23.627]                       invisible(muffled)
[17:44:23.627]                     }
[17:44:23.627]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.627]                   }
[17:44:23.627]                 }
[17:44:23.627]             }
[17:44:23.627]         }))
[17:44:23.627]     }, error = function(ex) {
[17:44:23.627]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.627]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.627]                 ...future.rng), started = ...future.startTime, 
[17:44:23.627]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.627]             version = "1.8"), class = "FutureResult")
[17:44:23.627]     }, finally = {
[17:44:23.627]         if (!identical(...future.workdir, getwd())) 
[17:44:23.627]             setwd(...future.workdir)
[17:44:23.627]         {
[17:44:23.627]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.627]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.627]             }
[17:44:23.627]             base::options(...future.oldOptions)
[17:44:23.627]             if (.Platform$OS.type == "windows") {
[17:44:23.627]                 old_names <- names(...future.oldEnvVars)
[17:44:23.627]                 envs <- base::Sys.getenv()
[17:44:23.627]                 names <- names(envs)
[17:44:23.627]                 common <- intersect(names, old_names)
[17:44:23.627]                 added <- setdiff(names, old_names)
[17:44:23.627]                 removed <- setdiff(old_names, names)
[17:44:23.627]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.627]                   envs[common]]
[17:44:23.627]                 NAMES <- toupper(changed)
[17:44:23.627]                 args <- list()
[17:44:23.627]                 for (kk in seq_along(NAMES)) {
[17:44:23.627]                   name <- changed[[kk]]
[17:44:23.627]                   NAME <- NAMES[[kk]]
[17:44:23.627]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.627]                     next
[17:44:23.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.627]                 }
[17:44:23.627]                 NAMES <- toupper(added)
[17:44:23.627]                 for (kk in seq_along(NAMES)) {
[17:44:23.627]                   name <- added[[kk]]
[17:44:23.627]                   NAME <- NAMES[[kk]]
[17:44:23.627]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.627]                     next
[17:44:23.627]                   args[[name]] <- ""
[17:44:23.627]                 }
[17:44:23.627]                 NAMES <- toupper(removed)
[17:44:23.627]                 for (kk in seq_along(NAMES)) {
[17:44:23.627]                   name <- removed[[kk]]
[17:44:23.627]                   NAME <- NAMES[[kk]]
[17:44:23.627]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.627]                     next
[17:44:23.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.627]                 }
[17:44:23.627]                 if (length(args) > 0) 
[17:44:23.627]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.627]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.627]             }
[17:44:23.627]             else {
[17:44:23.627]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.627]             }
[17:44:23.627]             {
[17:44:23.627]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.627]                   0L) {
[17:44:23.627]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.627]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.627]                   base::options(opts)
[17:44:23.627]                 }
[17:44:23.627]                 {
[17:44:23.627]                   {
[17:44:23.627]                     NULL
[17:44:23.627]                     RNGkind("Mersenne-Twister")
[17:44:23.627]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.627]                       inherits = FALSE)
[17:44:23.627]                   }
[17:44:23.627]                   options(future.plan = NULL)
[17:44:23.627]                   if (is.na(NA_character_)) 
[17:44:23.627]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.627]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.627]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.627]                   {
[17:44:23.627]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.627]                     if (!future$lazy) 
[17:44:23.627]                       future <- run(future)
[17:44:23.627]                     invisible(future)
[17:44:23.627]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.627]                 }
[17:44:23.627]             }
[17:44:23.627]         }
[17:44:23.627]     })
[17:44:23.627]     if (TRUE) {
[17:44:23.627]         base::sink(type = "output", split = FALSE)
[17:44:23.627]         if (FALSE) {
[17:44:23.627]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.627]         }
[17:44:23.627]         else {
[17:44:23.627]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.627]         }
[17:44:23.627]         base::close(...future.stdout)
[17:44:23.627]         ...future.stdout <- NULL
[17:44:23.627]     }
[17:44:23.627]     ...future.result$conditions <- ...future.conditions
[17:44:23.627]     ...future.result$finished <- base::Sys.time()
[17:44:23.627]     ...future.result
[17:44:23.627] }
[17:44:23.629] plan(): Setting new future strategy stack:
[17:44:23.629] List of future strategies:
[17:44:23.629] 1. sequential:
[17:44:23.629]    - args: function (..., envir = parent.frame())
[17:44:23.629]    - tweaked: FALSE
[17:44:23.629]    - call: NULL
[17:44:23.630] plan(): nbrOfWorkers() = 1
[17:44:23.631] plan(): Setting new future strategy stack:
[17:44:23.631] List of future strategies:
[17:44:23.631] 1. sequential:
[17:44:23.631]    - args: function (..., envir = parent.frame())
[17:44:23.631]    - tweaked: FALSE
[17:44:23.631]    - call: plan(strategy)
[17:44:23.631] plan(): nbrOfWorkers() = 1
[17:44:23.632] SequentialFuture started (and completed)
[17:44:23.632] - Launch lazy future ... done
[17:44:23.632] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[17:44:23.632] getGlobalsAndPackages() ...
[17:44:23.632] Searching for globals...
[17:44:23.633] - globals found: [1] ‘print’
[17:44:23.633] Searching for globals ... DONE
[17:44:23.633] Resolving globals: FALSE
[17:44:23.633] 
[17:44:23.633] 
[17:44:23.634] getGlobalsAndPackages() ... DONE
[17:44:23.634] run() for ‘Future’ ...
[17:44:23.634] - state: ‘created’
[17:44:23.634] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.634] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.635]   - Field: ‘label’
[17:44:23.635]   - Field: ‘local’
[17:44:23.635]   - Field: ‘owner’
[17:44:23.635]   - Field: ‘envir’
[17:44:23.635]   - Field: ‘packages’
[17:44:23.635]   - Field: ‘gc’
[17:44:23.635]   - Field: ‘conditions’
[17:44:23.635]   - Field: ‘expr’
[17:44:23.635]   - Field: ‘uuid’
[17:44:23.636]   - Field: ‘seed’
[17:44:23.636]   - Field: ‘version’
[17:44:23.636]   - Field: ‘result’
[17:44:23.636]   - Field: ‘asynchronous’
[17:44:23.636]   - Field: ‘calls’
[17:44:23.636]   - Field: ‘globals’
[17:44:23.636]   - Field: ‘stdout’
[17:44:23.636]   - Field: ‘earlySignal’
[17:44:23.636]   - Field: ‘lazy’
[17:44:23.637]   - Field: ‘state’
[17:44:23.637] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.637] - Launch lazy future ...
[17:44:23.637] Packages needed by the future expression (n = 0): <none>
[17:44:23.637] Packages needed by future strategies (n = 0): <none>
[17:44:23.638] {
[17:44:23.638]     {
[17:44:23.638]         {
[17:44:23.638]             ...future.startTime <- base::Sys.time()
[17:44:23.638]             {
[17:44:23.638]                 {
[17:44:23.638]                   {
[17:44:23.638]                     base::local({
[17:44:23.638]                       has_future <- base::requireNamespace("future", 
[17:44:23.638]                         quietly = TRUE)
[17:44:23.638]                       if (has_future) {
[17:44:23.638]                         ns <- base::getNamespace("future")
[17:44:23.638]                         version <- ns[[".package"]][["version"]]
[17:44:23.638]                         if (is.null(version)) 
[17:44:23.638]                           version <- utils::packageVersion("future")
[17:44:23.638]                       }
[17:44:23.638]                       else {
[17:44:23.638]                         version <- NULL
[17:44:23.638]                       }
[17:44:23.638]                       if (!has_future || version < "1.8.0") {
[17:44:23.638]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.638]                           "", base::R.version$version.string), 
[17:44:23.638]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:23.638]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.638]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.638]                             "release", "version")], collapse = " "), 
[17:44:23.638]                           hostname = base::Sys.info()[["nodename"]])
[17:44:23.638]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.638]                           info)
[17:44:23.638]                         info <- base::paste(info, collapse = "; ")
[17:44:23.638]                         if (!has_future) {
[17:44:23.638]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.638]                             info)
[17:44:23.638]                         }
[17:44:23.638]                         else {
[17:44:23.638]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.638]                             info, version)
[17:44:23.638]                         }
[17:44:23.638]                         base::stop(msg)
[17:44:23.638]                       }
[17:44:23.638]                     })
[17:44:23.638]                   }
[17:44:23.638]                   options(future.plan = NULL)
[17:44:23.638]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.638]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.638]                 }
[17:44:23.638]                 ...future.workdir <- getwd()
[17:44:23.638]             }
[17:44:23.638]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.638]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.638]         }
[17:44:23.638]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.638]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.638]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.638]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.638]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.638]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.638]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.638]             base::names(...future.oldOptions))
[17:44:23.638]     }
[17:44:23.638]     if (FALSE) {
[17:44:23.638]     }
[17:44:23.638]     else {
[17:44:23.638]         if (TRUE) {
[17:44:23.638]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.638]                 open = "w")
[17:44:23.638]         }
[17:44:23.638]         else {
[17:44:23.638]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.638]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.638]         }
[17:44:23.638]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.638]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.638]             base::sink(type = "output", split = FALSE)
[17:44:23.638]             base::close(...future.stdout)
[17:44:23.638]         }, add = TRUE)
[17:44:23.638]     }
[17:44:23.638]     ...future.frame <- base::sys.nframe()
[17:44:23.638]     ...future.conditions <- base::list()
[17:44:23.638]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.638]     if (FALSE) {
[17:44:23.638]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.638]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.638]     }
[17:44:23.638]     ...future.result <- base::tryCatch({
[17:44:23.638]         base::withCallingHandlers({
[17:44:23.638]             ...future.value <- base::withVisible(base::local(print(42)))
[17:44:23.638]             future::FutureResult(value = ...future.value$value, 
[17:44:23.638]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.638]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.638]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.638]                     ...future.globalenv.names))
[17:44:23.638]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.638]         }, condition = base::local({
[17:44:23.638]             c <- base::c
[17:44:23.638]             inherits <- base::inherits
[17:44:23.638]             invokeRestart <- base::invokeRestart
[17:44:23.638]             length <- base::length
[17:44:23.638]             list <- base::list
[17:44:23.638]             seq.int <- base::seq.int
[17:44:23.638]             signalCondition <- base::signalCondition
[17:44:23.638]             sys.calls <- base::sys.calls
[17:44:23.638]             `[[` <- base::`[[`
[17:44:23.638]             `+` <- base::`+`
[17:44:23.638]             `<<-` <- base::`<<-`
[17:44:23.638]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.638]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.638]                   3L)]
[17:44:23.638]             }
[17:44:23.638]             function(cond) {
[17:44:23.638]                 is_error <- inherits(cond, "error")
[17:44:23.638]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.638]                   NULL)
[17:44:23.638]                 if (is_error) {
[17:44:23.638]                   sessionInformation <- function() {
[17:44:23.638]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.638]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.638]                       search = base::search(), system = base::Sys.info())
[17:44:23.638]                   }
[17:44:23.638]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.638]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.638]                     cond$call), session = sessionInformation(), 
[17:44:23.638]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.638]                   signalCondition(cond)
[17:44:23.638]                 }
[17:44:23.638]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.638]                 "immediateCondition"))) {
[17:44:23.638]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.638]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.638]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.638]                   if (TRUE && !signal) {
[17:44:23.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.638]                     {
[17:44:23.638]                       inherits <- base::inherits
[17:44:23.638]                       invokeRestart <- base::invokeRestart
[17:44:23.638]                       is.null <- base::is.null
[17:44:23.638]                       muffled <- FALSE
[17:44:23.638]                       if (inherits(cond, "message")) {
[17:44:23.638]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.638]                         if (muffled) 
[17:44:23.638]                           invokeRestart("muffleMessage")
[17:44:23.638]                       }
[17:44:23.638]                       else if (inherits(cond, "warning")) {
[17:44:23.638]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.638]                         if (muffled) 
[17:44:23.638]                           invokeRestart("muffleWarning")
[17:44:23.638]                       }
[17:44:23.638]                       else if (inherits(cond, "condition")) {
[17:44:23.638]                         if (!is.null(pattern)) {
[17:44:23.638]                           computeRestarts <- base::computeRestarts
[17:44:23.638]                           grepl <- base::grepl
[17:44:23.638]                           restarts <- computeRestarts(cond)
[17:44:23.638]                           for (restart in restarts) {
[17:44:23.638]                             name <- restart$name
[17:44:23.638]                             if (is.null(name)) 
[17:44:23.638]                               next
[17:44:23.638]                             if (!grepl(pattern, name)) 
[17:44:23.638]                               next
[17:44:23.638]                             invokeRestart(restart)
[17:44:23.638]                             muffled <- TRUE
[17:44:23.638]                             break
[17:44:23.638]                           }
[17:44:23.638]                         }
[17:44:23.638]                       }
[17:44:23.638]                       invisible(muffled)
[17:44:23.638]                     }
[17:44:23.638]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.638]                   }
[17:44:23.638]                 }
[17:44:23.638]                 else {
[17:44:23.638]                   if (TRUE) {
[17:44:23.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.638]                     {
[17:44:23.638]                       inherits <- base::inherits
[17:44:23.638]                       invokeRestart <- base::invokeRestart
[17:44:23.638]                       is.null <- base::is.null
[17:44:23.638]                       muffled <- FALSE
[17:44:23.638]                       if (inherits(cond, "message")) {
[17:44:23.638]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.638]                         if (muffled) 
[17:44:23.638]                           invokeRestart("muffleMessage")
[17:44:23.638]                       }
[17:44:23.638]                       else if (inherits(cond, "warning")) {
[17:44:23.638]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.638]                         if (muffled) 
[17:44:23.638]                           invokeRestart("muffleWarning")
[17:44:23.638]                       }
[17:44:23.638]                       else if (inherits(cond, "condition")) {
[17:44:23.638]                         if (!is.null(pattern)) {
[17:44:23.638]                           computeRestarts <- base::computeRestarts
[17:44:23.638]                           grepl <- base::grepl
[17:44:23.638]                           restarts <- computeRestarts(cond)
[17:44:23.638]                           for (restart in restarts) {
[17:44:23.638]                             name <- restart$name
[17:44:23.638]                             if (is.null(name)) 
[17:44:23.638]                               next
[17:44:23.638]                             if (!grepl(pattern, name)) 
[17:44:23.638]                               next
[17:44:23.638]                             invokeRestart(restart)
[17:44:23.638]                             muffled <- TRUE
[17:44:23.638]                             break
[17:44:23.638]                           }
[17:44:23.638]                         }
[17:44:23.638]                       }
[17:44:23.638]                       invisible(muffled)
[17:44:23.638]                     }
[17:44:23.638]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.638]                   }
[17:44:23.638]                 }
[17:44:23.638]             }
[17:44:23.638]         }))
[17:44:23.638]     }, error = function(ex) {
[17:44:23.638]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.638]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.638]                 ...future.rng), started = ...future.startTime, 
[17:44:23.638]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.638]             version = "1.8"), class = "FutureResult")
[17:44:23.638]     }, finally = {
[17:44:23.638]         if (!identical(...future.workdir, getwd())) 
[17:44:23.638]             setwd(...future.workdir)
[17:44:23.638]         {
[17:44:23.638]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.638]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.638]             }
[17:44:23.638]             base::options(...future.oldOptions)
[17:44:23.638]             if (.Platform$OS.type == "windows") {
[17:44:23.638]                 old_names <- names(...future.oldEnvVars)
[17:44:23.638]                 envs <- base::Sys.getenv()
[17:44:23.638]                 names <- names(envs)
[17:44:23.638]                 common <- intersect(names, old_names)
[17:44:23.638]                 added <- setdiff(names, old_names)
[17:44:23.638]                 removed <- setdiff(old_names, names)
[17:44:23.638]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.638]                   envs[common]]
[17:44:23.638]                 NAMES <- toupper(changed)
[17:44:23.638]                 args <- list()
[17:44:23.638]                 for (kk in seq_along(NAMES)) {
[17:44:23.638]                   name <- changed[[kk]]
[17:44:23.638]                   NAME <- NAMES[[kk]]
[17:44:23.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.638]                     next
[17:44:23.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.638]                 }
[17:44:23.638]                 NAMES <- toupper(added)
[17:44:23.638]                 for (kk in seq_along(NAMES)) {
[17:44:23.638]                   name <- added[[kk]]
[17:44:23.638]                   NAME <- NAMES[[kk]]
[17:44:23.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.638]                     next
[17:44:23.638]                   args[[name]] <- ""
[17:44:23.638]                 }
[17:44:23.638]                 NAMES <- toupper(removed)
[17:44:23.638]                 for (kk in seq_along(NAMES)) {
[17:44:23.638]                   name <- removed[[kk]]
[17:44:23.638]                   NAME <- NAMES[[kk]]
[17:44:23.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.638]                     next
[17:44:23.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.638]                 }
[17:44:23.638]                 if (length(args) > 0) 
[17:44:23.638]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.638]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.638]             }
[17:44:23.638]             else {
[17:44:23.638]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.638]             }
[17:44:23.638]             {
[17:44:23.638]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.638]                   0L) {
[17:44:23.638]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.638]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.638]                   base::options(opts)
[17:44:23.638]                 }
[17:44:23.638]                 {
[17:44:23.638]                   {
[17:44:23.638]                     NULL
[17:44:23.638]                     RNGkind("Mersenne-Twister")
[17:44:23.638]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.638]                       inherits = FALSE)
[17:44:23.638]                   }
[17:44:23.638]                   options(future.plan = NULL)
[17:44:23.638]                   if (is.na(NA_character_)) 
[17:44:23.638]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.638]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.638]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.638]                   {
[17:44:23.638]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.638]                     if (!future$lazy) 
[17:44:23.638]                       future <- run(future)
[17:44:23.638]                     invisible(future)
[17:44:23.638]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.638]                 }
[17:44:23.638]             }
[17:44:23.638]         }
[17:44:23.638]     })
[17:44:23.638]     if (TRUE) {
[17:44:23.638]         base::sink(type = "output", split = FALSE)
[17:44:23.638]         if (TRUE) {
[17:44:23.638]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.638]         }
[17:44:23.638]         else {
[17:44:23.638]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.638]         }
[17:44:23.638]         base::close(...future.stdout)
[17:44:23.638]         ...future.stdout <- NULL
[17:44:23.638]     }
[17:44:23.638]     ...future.result$conditions <- ...future.conditions
[17:44:23.638]     ...future.result$finished <- base::Sys.time()
[17:44:23.638]     ...future.result
[17:44:23.638] }
[17:44:23.639] plan(): Setting new future strategy stack:
[17:44:23.640] List of future strategies:
[17:44:23.640] 1. sequential:
[17:44:23.640]    - args: function (..., envir = parent.frame())
[17:44:23.640]    - tweaked: FALSE
[17:44:23.640]    - call: NULL
[17:44:23.640] plan(): nbrOfWorkers() = 1
[17:44:23.641] plan(): Setting new future strategy stack:
[17:44:23.641] List of future strategies:
[17:44:23.641] 1. sequential:
[17:44:23.641]    - args: function (..., envir = parent.frame())
[17:44:23.641]    - tweaked: FALSE
[17:44:23.641]    - call: plan(strategy)
[17:44:23.641] plan(): nbrOfWorkers() = 1
[17:44:23.641] SequentialFuture started (and completed)
[17:44:23.642] - Launch lazy future ... done
[17:44:23.642] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[17:44:23.642] getGlobalsAndPackages() ...
[17:44:23.642] Searching for globals...
[17:44:23.645] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.645] Searching for globals ... DONE
[17:44:23.645] Resolving globals: FALSE
[17:44:23.646] 
[17:44:23.646] - packages: [1] ‘utils’
[17:44:23.646] getGlobalsAndPackages() ... DONE
[17:44:23.646] run() for ‘Future’ ...
[17:44:23.646] - state: ‘created’
[17:44:23.646] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.647] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.647] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.647]   - Field: ‘label’
[17:44:23.647]   - Field: ‘local’
[17:44:23.647]   - Field: ‘owner’
[17:44:23.647]   - Field: ‘envir’
[17:44:23.647]   - Field: ‘packages’
[17:44:23.648]   - Field: ‘gc’
[17:44:23.648]   - Field: ‘conditions’
[17:44:23.648]   - Field: ‘expr’
[17:44:23.648]   - Field: ‘uuid’
[17:44:23.648]   - Field: ‘seed’
[17:44:23.648]   - Field: ‘version’
[17:44:23.648]   - Field: ‘result’
[17:44:23.648]   - Field: ‘asynchronous’
[17:44:23.648]   - Field: ‘calls’
[17:44:23.648]   - Field: ‘globals’
[17:44:23.648]   - Field: ‘stdout’
[17:44:23.649]   - Field: ‘earlySignal’
[17:44:23.649]   - Field: ‘lazy’
[17:44:23.649]   - Field: ‘state’
[17:44:23.649] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.649] - Launch lazy future ...
[17:44:23.649] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.649] Packages needed by future strategies (n = 0): <none>
[17:44:23.650] {
[17:44:23.650]     {
[17:44:23.650]         {
[17:44:23.650]             ...future.startTime <- base::Sys.time()
[17:44:23.650]             {
[17:44:23.650]                 {
[17:44:23.650]                   {
[17:44:23.650]                     {
[17:44:23.650]                       base::local({
[17:44:23.650]                         has_future <- base::requireNamespace("future", 
[17:44:23.650]                           quietly = TRUE)
[17:44:23.650]                         if (has_future) {
[17:44:23.650]                           ns <- base::getNamespace("future")
[17:44:23.650]                           version <- ns[[".package"]][["version"]]
[17:44:23.650]                           if (is.null(version)) 
[17:44:23.650]                             version <- utils::packageVersion("future")
[17:44:23.650]                         }
[17:44:23.650]                         else {
[17:44:23.650]                           version <- NULL
[17:44:23.650]                         }
[17:44:23.650]                         if (!has_future || version < "1.8.0") {
[17:44:23.650]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.650]                             "", base::R.version$version.string), 
[17:44:23.650]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.650]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.650]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.650]                               "release", "version")], collapse = " "), 
[17:44:23.650]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.650]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.650]                             info)
[17:44:23.650]                           info <- base::paste(info, collapse = "; ")
[17:44:23.650]                           if (!has_future) {
[17:44:23.650]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.650]                               info)
[17:44:23.650]                           }
[17:44:23.650]                           else {
[17:44:23.650]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.650]                               info, version)
[17:44:23.650]                           }
[17:44:23.650]                           base::stop(msg)
[17:44:23.650]                         }
[17:44:23.650]                       })
[17:44:23.650]                     }
[17:44:23.650]                     base::local({
[17:44:23.650]                       for (pkg in "utils") {
[17:44:23.650]                         base::loadNamespace(pkg)
[17:44:23.650]                         base::library(pkg, character.only = TRUE)
[17:44:23.650]                       }
[17:44:23.650]                     })
[17:44:23.650]                   }
[17:44:23.650]                   options(future.plan = NULL)
[17:44:23.650]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.650]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.650]                 }
[17:44:23.650]                 ...future.workdir <- getwd()
[17:44:23.650]             }
[17:44:23.650]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.650]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.650]         }
[17:44:23.650]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.650]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.650]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.650]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.650]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.650]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.650]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.650]             base::names(...future.oldOptions))
[17:44:23.650]     }
[17:44:23.650]     if (TRUE) {
[17:44:23.650]     }
[17:44:23.650]     else {
[17:44:23.650]         if (NA) {
[17:44:23.650]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.650]                 open = "w")
[17:44:23.650]         }
[17:44:23.650]         else {
[17:44:23.650]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.650]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.650]         }
[17:44:23.650]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.650]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.650]             base::sink(type = "output", split = FALSE)
[17:44:23.650]             base::close(...future.stdout)
[17:44:23.650]         }, add = TRUE)
[17:44:23.650]     }
[17:44:23.650]     ...future.frame <- base::sys.nframe()
[17:44:23.650]     ...future.conditions <- base::list()
[17:44:23.650]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.650]     if (FALSE) {
[17:44:23.650]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.650]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.650]     }
[17:44:23.650]     ...future.result <- base::tryCatch({
[17:44:23.650]         base::withCallingHandlers({
[17:44:23.650]             ...future.value <- base::withVisible(base::local({
[17:44:23.650]                 print(1:50)
[17:44:23.650]                 str(1:50)
[17:44:23.650]                 cat(letters, sep = "-")
[17:44:23.650]                 cat(1:6, collapse = "\n")
[17:44:23.650]                 write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.650]                 42L
[17:44:23.650]             }))
[17:44:23.650]             future::FutureResult(value = ...future.value$value, 
[17:44:23.650]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.650]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.650]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.650]                     ...future.globalenv.names))
[17:44:23.650]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.650]         }, condition = base::local({
[17:44:23.650]             c <- base::c
[17:44:23.650]             inherits <- base::inherits
[17:44:23.650]             invokeRestart <- base::invokeRestart
[17:44:23.650]             length <- base::length
[17:44:23.650]             list <- base::list
[17:44:23.650]             seq.int <- base::seq.int
[17:44:23.650]             signalCondition <- base::signalCondition
[17:44:23.650]             sys.calls <- base::sys.calls
[17:44:23.650]             `[[` <- base::`[[`
[17:44:23.650]             `+` <- base::`+`
[17:44:23.650]             `<<-` <- base::`<<-`
[17:44:23.650]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.650]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.650]                   3L)]
[17:44:23.650]             }
[17:44:23.650]             function(cond) {
[17:44:23.650]                 is_error <- inherits(cond, "error")
[17:44:23.650]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.650]                   NULL)
[17:44:23.650]                 if (is_error) {
[17:44:23.650]                   sessionInformation <- function() {
[17:44:23.650]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.650]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.650]                       search = base::search(), system = base::Sys.info())
[17:44:23.650]                   }
[17:44:23.650]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.650]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.650]                     cond$call), session = sessionInformation(), 
[17:44:23.650]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.650]                   signalCondition(cond)
[17:44:23.650]                 }
[17:44:23.650]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.650]                 "immediateCondition"))) {
[17:44:23.650]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.650]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.650]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.650]                   if (TRUE && !signal) {
[17:44:23.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.650]                     {
[17:44:23.650]                       inherits <- base::inherits
[17:44:23.650]                       invokeRestart <- base::invokeRestart
[17:44:23.650]                       is.null <- base::is.null
[17:44:23.650]                       muffled <- FALSE
[17:44:23.650]                       if (inherits(cond, "message")) {
[17:44:23.650]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.650]                         if (muffled) 
[17:44:23.650]                           invokeRestart("muffleMessage")
[17:44:23.650]                       }
[17:44:23.650]                       else if (inherits(cond, "warning")) {
[17:44:23.650]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.650]                         if (muffled) 
[17:44:23.650]                           invokeRestart("muffleWarning")
[17:44:23.650]                       }
[17:44:23.650]                       else if (inherits(cond, "condition")) {
[17:44:23.650]                         if (!is.null(pattern)) {
[17:44:23.650]                           computeRestarts <- base::computeRestarts
[17:44:23.650]                           grepl <- base::grepl
[17:44:23.650]                           restarts <- computeRestarts(cond)
[17:44:23.650]                           for (restart in restarts) {
[17:44:23.650]                             name <- restart$name
[17:44:23.650]                             if (is.null(name)) 
[17:44:23.650]                               next
[17:44:23.650]                             if (!grepl(pattern, name)) 
[17:44:23.650]                               next
[17:44:23.650]                             invokeRestart(restart)
[17:44:23.650]                             muffled <- TRUE
[17:44:23.650]                             break
[17:44:23.650]                           }
[17:44:23.650]                         }
[17:44:23.650]                       }
[17:44:23.650]                       invisible(muffled)
[17:44:23.650]                     }
[17:44:23.650]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.650]                   }
[17:44:23.650]                 }
[17:44:23.650]                 else {
[17:44:23.650]                   if (TRUE) {
[17:44:23.650]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.650]                     {
[17:44:23.650]                       inherits <- base::inherits
[17:44:23.650]                       invokeRestart <- base::invokeRestart
[17:44:23.650]                       is.null <- base::is.null
[17:44:23.650]                       muffled <- FALSE
[17:44:23.650]                       if (inherits(cond, "message")) {
[17:44:23.650]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.650]                         if (muffled) 
[17:44:23.650]                           invokeRestart("muffleMessage")
[17:44:23.650]                       }
[17:44:23.650]                       else if (inherits(cond, "warning")) {
[17:44:23.650]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.650]                         if (muffled) 
[17:44:23.650]                           invokeRestart("muffleWarning")
[17:44:23.650]                       }
[17:44:23.650]                       else if (inherits(cond, "condition")) {
[17:44:23.650]                         if (!is.null(pattern)) {
[17:44:23.650]                           computeRestarts <- base::computeRestarts
[17:44:23.650]                           grepl <- base::grepl
[17:44:23.650]                           restarts <- computeRestarts(cond)
[17:44:23.650]                           for (restart in restarts) {
[17:44:23.650]                             name <- restart$name
[17:44:23.650]                             if (is.null(name)) 
[17:44:23.650]                               next
[17:44:23.650]                             if (!grepl(pattern, name)) 
[17:44:23.650]                               next
[17:44:23.650]                             invokeRestart(restart)
[17:44:23.650]                             muffled <- TRUE
[17:44:23.650]                             break
[17:44:23.650]                           }
[17:44:23.650]                         }
[17:44:23.650]                       }
[17:44:23.650]                       invisible(muffled)
[17:44:23.650]                     }
[17:44:23.650]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.650]                   }
[17:44:23.650]                 }
[17:44:23.650]             }
[17:44:23.650]         }))
[17:44:23.650]     }, error = function(ex) {
[17:44:23.650]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.650]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.650]                 ...future.rng), started = ...future.startTime, 
[17:44:23.650]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.650]             version = "1.8"), class = "FutureResult")
[17:44:23.650]     }, finally = {
[17:44:23.650]         if (!identical(...future.workdir, getwd())) 
[17:44:23.650]             setwd(...future.workdir)
[17:44:23.650]         {
[17:44:23.650]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.650]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.650]             }
[17:44:23.650]             base::options(...future.oldOptions)
[17:44:23.650]             if (.Platform$OS.type == "windows") {
[17:44:23.650]                 old_names <- names(...future.oldEnvVars)
[17:44:23.650]                 envs <- base::Sys.getenv()
[17:44:23.650]                 names <- names(envs)
[17:44:23.650]                 common <- intersect(names, old_names)
[17:44:23.650]                 added <- setdiff(names, old_names)
[17:44:23.650]                 removed <- setdiff(old_names, names)
[17:44:23.650]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.650]                   envs[common]]
[17:44:23.650]                 NAMES <- toupper(changed)
[17:44:23.650]                 args <- list()
[17:44:23.650]                 for (kk in seq_along(NAMES)) {
[17:44:23.650]                   name <- changed[[kk]]
[17:44:23.650]                   NAME <- NAMES[[kk]]
[17:44:23.650]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.650]                     next
[17:44:23.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.650]                 }
[17:44:23.650]                 NAMES <- toupper(added)
[17:44:23.650]                 for (kk in seq_along(NAMES)) {
[17:44:23.650]                   name <- added[[kk]]
[17:44:23.650]                   NAME <- NAMES[[kk]]
[17:44:23.650]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.650]                     next
[17:44:23.650]                   args[[name]] <- ""
[17:44:23.650]                 }
[17:44:23.650]                 NAMES <- toupper(removed)
[17:44:23.650]                 for (kk in seq_along(NAMES)) {
[17:44:23.650]                   name <- removed[[kk]]
[17:44:23.650]                   NAME <- NAMES[[kk]]
[17:44:23.650]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.650]                     next
[17:44:23.650]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.650]                 }
[17:44:23.650]                 if (length(args) > 0) 
[17:44:23.650]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.650]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.650]             }
[17:44:23.650]             else {
[17:44:23.650]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.650]             }
[17:44:23.650]             {
[17:44:23.650]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.650]                   0L) {
[17:44:23.650]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.650]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.650]                   base::options(opts)
[17:44:23.650]                 }
[17:44:23.650]                 {
[17:44:23.650]                   {
[17:44:23.650]                     NULL
[17:44:23.650]                     RNGkind("Mersenne-Twister")
[17:44:23.650]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.650]                       inherits = FALSE)
[17:44:23.650]                   }
[17:44:23.650]                   options(future.plan = NULL)
[17:44:23.650]                   if (is.na(NA_character_)) 
[17:44:23.650]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.650]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.650]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.650]                   {
[17:44:23.650]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.650]                     if (!future$lazy) 
[17:44:23.650]                       future <- run(future)
[17:44:23.650]                     invisible(future)
[17:44:23.650]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.650]                 }
[17:44:23.650]             }
[17:44:23.650]         }
[17:44:23.650]     })
[17:44:23.650]     if (FALSE) {
[17:44:23.650]         base::sink(type = "output", split = FALSE)
[17:44:23.650]         if (NA) {
[17:44:23.650]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.650]         }
[17:44:23.650]         else {
[17:44:23.650]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.650]         }
[17:44:23.650]         base::close(...future.stdout)
[17:44:23.650]         ...future.stdout <- NULL
[17:44:23.650]     }
[17:44:23.650]     ...future.result$conditions <- ...future.conditions
[17:44:23.650]     ...future.result$finished <- base::Sys.time()
[17:44:23.650]     ...future.result
[17:44:23.650] }
[17:44:23.652] plan(): Setting new future strategy stack:
[17:44:23.652] List of future strategies:
[17:44:23.652] 1. sequential:
[17:44:23.652]    - args: function (..., envir = parent.frame())
[17:44:23.652]    - tweaked: FALSE
[17:44:23.652]    - call: NULL
[17:44:23.652] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[17:44:23.654] plan(): Setting new future strategy stack:
[17:44:23.654] List of future strategies:
[17:44:23.654] 1. sequential:
[17:44:23.654]    - args: function (..., envir = parent.frame())
[17:44:23.654]    - tweaked: FALSE
[17:44:23.654]    - call: plan(strategy)
[17:44:23.654] plan(): nbrOfWorkers() = 1
[17:44:23.654] SequentialFuture started (and completed)
[17:44:23.655] - Launch lazy future ... done
[17:44:23.655] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ session_uuid: chr "007d6ee1-2321-4626-191d-5aefd0faf814"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53760
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:23"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:23.664] getGlobalsAndPackages() ...
[17:44:23.665] Searching for globals...
[17:44:23.667] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.668] Searching for globals ... DONE
[17:44:23.668] Resolving globals: FALSE
[17:44:23.668] 
[17:44:23.668] - packages: [1] ‘utils’
[17:44:23.668] getGlobalsAndPackages() ... DONE
[17:44:23.669] run() for ‘Future’ ...
[17:44:23.669] - state: ‘created’
[17:44:23.669] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.669] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.669] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.669]   - Field: ‘label’
[17:44:23.669]   - Field: ‘local’
[17:44:23.670]   - Field: ‘owner’
[17:44:23.670]   - Field: ‘envir’
[17:44:23.670]   - Field: ‘packages’
[17:44:23.670]   - Field: ‘gc’
[17:44:23.670]   - Field: ‘conditions’
[17:44:23.670]   - Field: ‘expr’
[17:44:23.670]   - Field: ‘uuid’
[17:44:23.670]   - Field: ‘seed’
[17:44:23.670]   - Field: ‘version’
[17:44:23.670]   - Field: ‘result’
[17:44:23.670]   - Field: ‘asynchronous’
[17:44:23.671]   - Field: ‘calls’
[17:44:23.671]   - Field: ‘globals’
[17:44:23.671]   - Field: ‘stdout’
[17:44:23.671]   - Field: ‘earlySignal’
[17:44:23.671]   - Field: ‘lazy’
[17:44:23.671]   - Field: ‘state’
[17:44:23.671] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.671] - Launch lazy future ...
[17:44:23.671] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.672] Packages needed by future strategies (n = 0): <none>
[17:44:23.672] {
[17:44:23.672]     {
[17:44:23.672]         {
[17:44:23.672]             ...future.startTime <- base::Sys.time()
[17:44:23.672]             {
[17:44:23.672]                 {
[17:44:23.672]                   {
[17:44:23.672]                     {
[17:44:23.672]                       base::local({
[17:44:23.672]                         has_future <- base::requireNamespace("future", 
[17:44:23.672]                           quietly = TRUE)
[17:44:23.672]                         if (has_future) {
[17:44:23.672]                           ns <- base::getNamespace("future")
[17:44:23.672]                           version <- ns[[".package"]][["version"]]
[17:44:23.672]                           if (is.null(version)) 
[17:44:23.672]                             version <- utils::packageVersion("future")
[17:44:23.672]                         }
[17:44:23.672]                         else {
[17:44:23.672]                           version <- NULL
[17:44:23.672]                         }
[17:44:23.672]                         if (!has_future || version < "1.8.0") {
[17:44:23.672]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.672]                             "", base::R.version$version.string), 
[17:44:23.672]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.672]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.672]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.672]                               "release", "version")], collapse = " "), 
[17:44:23.672]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.672]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.672]                             info)
[17:44:23.672]                           info <- base::paste(info, collapse = "; ")
[17:44:23.672]                           if (!has_future) {
[17:44:23.672]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.672]                               info)
[17:44:23.672]                           }
[17:44:23.672]                           else {
[17:44:23.672]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.672]                               info, version)
[17:44:23.672]                           }
[17:44:23.672]                           base::stop(msg)
[17:44:23.672]                         }
[17:44:23.672]                       })
[17:44:23.672]                     }
[17:44:23.672]                     base::local({
[17:44:23.672]                       for (pkg in "utils") {
[17:44:23.672]                         base::loadNamespace(pkg)
[17:44:23.672]                         base::library(pkg, character.only = TRUE)
[17:44:23.672]                       }
[17:44:23.672]                     })
[17:44:23.672]                   }
[17:44:23.672]                   options(future.plan = NULL)
[17:44:23.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.672]                 }
[17:44:23.672]                 ...future.workdir <- getwd()
[17:44:23.672]             }
[17:44:23.672]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.672]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.672]         }
[17:44:23.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.672]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.672]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.672]             base::names(...future.oldOptions))
[17:44:23.672]     }
[17:44:23.672]     if (TRUE) {
[17:44:23.672]     }
[17:44:23.672]     else {
[17:44:23.672]         if (NA) {
[17:44:23.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.672]                 open = "w")
[17:44:23.672]         }
[17:44:23.672]         else {
[17:44:23.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.672]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.672]         }
[17:44:23.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.672]             base::sink(type = "output", split = FALSE)
[17:44:23.672]             base::close(...future.stdout)
[17:44:23.672]         }, add = TRUE)
[17:44:23.672]     }
[17:44:23.672]     ...future.frame <- base::sys.nframe()
[17:44:23.672]     ...future.conditions <- base::list()
[17:44:23.672]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.672]     if (FALSE) {
[17:44:23.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.672]     }
[17:44:23.672]     ...future.result <- base::tryCatch({
[17:44:23.672]         base::withCallingHandlers({
[17:44:23.672]             ...future.value <- base::withVisible(base::local({
[17:44:23.672]                 print(1:50)
[17:44:23.672]                 str(1:50)
[17:44:23.672]                 cat(letters, sep = "-")
[17:44:23.672]                 cat(1:6, collapse = "\n")
[17:44:23.672]                 write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.672]                 42L
[17:44:23.672]             }))
[17:44:23.672]             future::FutureResult(value = ...future.value$value, 
[17:44:23.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.672]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.672]                     ...future.globalenv.names))
[17:44:23.672]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.672]         }, condition = base::local({
[17:44:23.672]             c <- base::c
[17:44:23.672]             inherits <- base::inherits
[17:44:23.672]             invokeRestart <- base::invokeRestart
[17:44:23.672]             length <- base::length
[17:44:23.672]             list <- base::list
[17:44:23.672]             seq.int <- base::seq.int
[17:44:23.672]             signalCondition <- base::signalCondition
[17:44:23.672]             sys.calls <- base::sys.calls
[17:44:23.672]             `[[` <- base::`[[`
[17:44:23.672]             `+` <- base::`+`
[17:44:23.672]             `<<-` <- base::`<<-`
[17:44:23.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.672]                   3L)]
[17:44:23.672]             }
[17:44:23.672]             function(cond) {
[17:44:23.672]                 is_error <- inherits(cond, "error")
[17:44:23.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.672]                   NULL)
[17:44:23.672]                 if (is_error) {
[17:44:23.672]                   sessionInformation <- function() {
[17:44:23.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.672]                       search = base::search(), system = base::Sys.info())
[17:44:23.672]                   }
[17:44:23.672]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.672]                     cond$call), session = sessionInformation(), 
[17:44:23.672]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.672]                   signalCondition(cond)
[17:44:23.672]                 }
[17:44:23.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.672]                 "immediateCondition"))) {
[17:44:23.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.672]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.672]                   if (TRUE && !signal) {
[17:44:23.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.672]                     {
[17:44:23.672]                       inherits <- base::inherits
[17:44:23.672]                       invokeRestart <- base::invokeRestart
[17:44:23.672]                       is.null <- base::is.null
[17:44:23.672]                       muffled <- FALSE
[17:44:23.672]                       if (inherits(cond, "message")) {
[17:44:23.672]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.672]                         if (muffled) 
[17:44:23.672]                           invokeRestart("muffleMessage")
[17:44:23.672]                       }
[17:44:23.672]                       else if (inherits(cond, "warning")) {
[17:44:23.672]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.672]                         if (muffled) 
[17:44:23.672]                           invokeRestart("muffleWarning")
[17:44:23.672]                       }
[17:44:23.672]                       else if (inherits(cond, "condition")) {
[17:44:23.672]                         if (!is.null(pattern)) {
[17:44:23.672]                           computeRestarts <- base::computeRestarts
[17:44:23.672]                           grepl <- base::grepl
[17:44:23.672]                           restarts <- computeRestarts(cond)
[17:44:23.672]                           for (restart in restarts) {
[17:44:23.672]                             name <- restart$name
[17:44:23.672]                             if (is.null(name)) 
[17:44:23.672]                               next
[17:44:23.672]                             if (!grepl(pattern, name)) 
[17:44:23.672]                               next
[17:44:23.672]                             invokeRestart(restart)
[17:44:23.672]                             muffled <- TRUE
[17:44:23.672]                             break
[17:44:23.672]                           }
[17:44:23.672]                         }
[17:44:23.672]                       }
[17:44:23.672]                       invisible(muffled)
[17:44:23.672]                     }
[17:44:23.672]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.672]                   }
[17:44:23.672]                 }
[17:44:23.672]                 else {
[17:44:23.672]                   if (TRUE) {
[17:44:23.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.672]                     {
[17:44:23.672]                       inherits <- base::inherits
[17:44:23.672]                       invokeRestart <- base::invokeRestart
[17:44:23.672]                       is.null <- base::is.null
[17:44:23.672]                       muffled <- FALSE
[17:44:23.672]                       if (inherits(cond, "message")) {
[17:44:23.672]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.672]                         if (muffled) 
[17:44:23.672]                           invokeRestart("muffleMessage")
[17:44:23.672]                       }
[17:44:23.672]                       else if (inherits(cond, "warning")) {
[17:44:23.672]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.672]                         if (muffled) 
[17:44:23.672]                           invokeRestart("muffleWarning")
[17:44:23.672]                       }
[17:44:23.672]                       else if (inherits(cond, "condition")) {
[17:44:23.672]                         if (!is.null(pattern)) {
[17:44:23.672]                           computeRestarts <- base::computeRestarts
[17:44:23.672]                           grepl <- base::grepl
[17:44:23.672]                           restarts <- computeRestarts(cond)
[17:44:23.672]                           for (restart in restarts) {
[17:44:23.672]                             name <- restart$name
[17:44:23.672]                             if (is.null(name)) 
[17:44:23.672]                               next
[17:44:23.672]                             if (!grepl(pattern, name)) 
[17:44:23.672]                               next
[17:44:23.672]                             invokeRestart(restart)
[17:44:23.672]                             muffled <- TRUE
[17:44:23.672]                             break
[17:44:23.672]                           }
[17:44:23.672]                         }
[17:44:23.672]                       }
[17:44:23.672]                       invisible(muffled)
[17:44:23.672]                     }
[17:44:23.672]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.672]                   }
[17:44:23.672]                 }
[17:44:23.672]             }
[17:44:23.672]         }))
[17:44:23.672]     }, error = function(ex) {
[17:44:23.672]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.672]                 ...future.rng), started = ...future.startTime, 
[17:44:23.672]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.672]             version = "1.8"), class = "FutureResult")
[17:44:23.672]     }, finally = {
[17:44:23.672]         if (!identical(...future.workdir, getwd())) 
[17:44:23.672]             setwd(...future.workdir)
[17:44:23.672]         {
[17:44:23.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.672]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.672]             }
[17:44:23.672]             base::options(...future.oldOptions)
[17:44:23.672]             if (.Platform$OS.type == "windows") {
[17:44:23.672]                 old_names <- names(...future.oldEnvVars)
[17:44:23.672]                 envs <- base::Sys.getenv()
[17:44:23.672]                 names <- names(envs)
[17:44:23.672]                 common <- intersect(names, old_names)
[17:44:23.672]                 added <- setdiff(names, old_names)
[17:44:23.672]                 removed <- setdiff(old_names, names)
[17:44:23.672]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.672]                   envs[common]]
[17:44:23.672]                 NAMES <- toupper(changed)
[17:44:23.672]                 args <- list()
[17:44:23.672]                 for (kk in seq_along(NAMES)) {
[17:44:23.672]                   name <- changed[[kk]]
[17:44:23.672]                   NAME <- NAMES[[kk]]
[17:44:23.672]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.672]                     next
[17:44:23.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.672]                 }
[17:44:23.672]                 NAMES <- toupper(added)
[17:44:23.672]                 for (kk in seq_along(NAMES)) {
[17:44:23.672]                   name <- added[[kk]]
[17:44:23.672]                   NAME <- NAMES[[kk]]
[17:44:23.672]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.672]                     next
[17:44:23.672]                   args[[name]] <- ""
[17:44:23.672]                 }
[17:44:23.672]                 NAMES <- toupper(removed)
[17:44:23.672]                 for (kk in seq_along(NAMES)) {
[17:44:23.672]                   name <- removed[[kk]]
[17:44:23.672]                   NAME <- NAMES[[kk]]
[17:44:23.672]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.672]                     next
[17:44:23.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.672]                 }
[17:44:23.672]                 if (length(args) > 0) 
[17:44:23.672]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.672]             }
[17:44:23.672]             else {
[17:44:23.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.672]             }
[17:44:23.672]             {
[17:44:23.672]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.672]                   0L) {
[17:44:23.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.672]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.672]                   base::options(opts)
[17:44:23.672]                 }
[17:44:23.672]                 {
[17:44:23.672]                   {
[17:44:23.672]                     NULL
[17:44:23.672]                     RNGkind("Mersenne-Twister")
[17:44:23.672]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.672]                       inherits = FALSE)
[17:44:23.672]                   }
[17:44:23.672]                   options(future.plan = NULL)
[17:44:23.672]                   if (is.na(NA_character_)) 
[17:44:23.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.672]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.672]                   {
[17:44:23.672]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.672]                     if (!future$lazy) 
[17:44:23.672]                       future <- run(future)
[17:44:23.672]                     invisible(future)
[17:44:23.672]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.672]                 }
[17:44:23.672]             }
[17:44:23.672]         }
[17:44:23.672]     })
[17:44:23.672]     if (FALSE) {
[17:44:23.672]         base::sink(type = "output", split = FALSE)
[17:44:23.672]         if (NA) {
[17:44:23.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.672]         }
[17:44:23.672]         else {
[17:44:23.672]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.672]         }
[17:44:23.672]         base::close(...future.stdout)
[17:44:23.672]         ...future.stdout <- NULL
[17:44:23.672]     }
[17:44:23.672]     ...future.result$conditions <- ...future.conditions
[17:44:23.672]     ...future.result$finished <- base::Sys.time()
[17:44:23.672]     ...future.result
[17:44:23.672] }
[17:44:23.674] plan(): Setting new future strategy stack:
[17:44:23.674] List of future strategies:
[17:44:23.674] 1. sequential:
[17:44:23.674]    - args: function (..., envir = parent.frame())
[17:44:23.674]    - tweaked: FALSE
[17:44:23.674]    - call: NULL
[17:44:23.675] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[17:44:23.676] plan(): Setting new future strategy stack:
[17:44:23.676] List of future strategies:
[17:44:23.676] 1. sequential:
[17:44:23.676]    - args: function (..., envir = parent.frame())
[17:44:23.676]    - tweaked: FALSE
[17:44:23.676]    - call: plan(strategy)
[17:44:23.677] plan(): nbrOfWorkers() = 1
[17:44:23.677] SequentialFuture started (and completed)
[17:44:23.677] - Launch lazy future ... done
[17:44:23.677] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[17:44:23.678] getGlobalsAndPackages() ...
[17:44:23.678] Searching for globals...
[17:44:23.678] - globals found: [1] ‘print’
[17:44:23.678] Searching for globals ... DONE
[17:44:23.678] Resolving globals: FALSE
[17:44:23.679] 
[17:44:23.679] 
[17:44:23.679] getGlobalsAndPackages() ... DONE
[17:44:23.679] run() for ‘Future’ ...
[17:44:23.679] - state: ‘created’
[17:44:23.679] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:44:23.680] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:44:23.680] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:44:23.680]   - Field: ‘label’
[17:44:23.680]   - Field: ‘local’
[17:44:23.680]   - Field: ‘owner’
[17:44:23.680]   - Field: ‘envir’
[17:44:23.680]   - Field: ‘packages’
[17:44:23.680]   - Field: ‘gc’
[17:44:23.680]   - Field: ‘conditions’
[17:44:23.680]   - Field: ‘expr’
[17:44:23.681]   - Field: ‘uuid’
[17:44:23.681]   - Field: ‘seed’
[17:44:23.681]   - Field: ‘version’
[17:44:23.681]   - Field: ‘result’
[17:44:23.681]   - Field: ‘asynchronous’
[17:44:23.681]   - Field: ‘calls’
[17:44:23.681]   - Field: ‘globals’
[17:44:23.681]   - Field: ‘stdout’
[17:44:23.681]   - Field: ‘earlySignal’
[17:44:23.681]   - Field: ‘lazy’
[17:44:23.681]   - Field: ‘state’
[17:44:23.682] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:44:23.683] - Launch lazy future ...
[17:44:23.684] Packages needed by the future expression (n = 0): <none>
[17:44:23.684] Packages needed by future strategies (n = 0): <none>
[17:44:23.684] {
[17:44:23.684]     {
[17:44:23.684]         {
[17:44:23.684]             ...future.startTime <- base::Sys.time()
[17:44:23.684]             {
[17:44:23.684]                 {
[17:44:23.684]                   {
[17:44:23.684]                     base::local({
[17:44:23.684]                       has_future <- base::requireNamespace("future", 
[17:44:23.684]                         quietly = TRUE)
[17:44:23.684]                       if (has_future) {
[17:44:23.684]                         ns <- base::getNamespace("future")
[17:44:23.684]                         version <- ns[[".package"]][["version"]]
[17:44:23.684]                         if (is.null(version)) 
[17:44:23.684]                           version <- utils::packageVersion("future")
[17:44:23.684]                       }
[17:44:23.684]                       else {
[17:44:23.684]                         version <- NULL
[17:44:23.684]                       }
[17:44:23.684]                       if (!has_future || version < "1.8.0") {
[17:44:23.684]                         info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.684]                           "", base::R.version$version.string), 
[17:44:23.684]                           platform = base::sprintf("%s (%s-bit)", 
[17:44:23.684]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.684]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.684]                             "release", "version")], collapse = " "), 
[17:44:23.684]                           hostname = base::Sys.info()[["nodename"]])
[17:44:23.684]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.684]                           info)
[17:44:23.684]                         info <- base::paste(info, collapse = "; ")
[17:44:23.684]                         if (!has_future) {
[17:44:23.684]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.684]                             info)
[17:44:23.684]                         }
[17:44:23.684]                         else {
[17:44:23.684]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.684]                             info, version)
[17:44:23.684]                         }
[17:44:23.684]                         base::stop(msg)
[17:44:23.684]                       }
[17:44:23.684]                     })
[17:44:23.684]                   }
[17:44:23.684]                   options(future.plan = NULL)
[17:44:23.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.684]                 }
[17:44:23.684]                 ...future.workdir <- getwd()
[17:44:23.684]             }
[17:44:23.684]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.684]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.684]         }
[17:44:23.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.684]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.684]             base::names(...future.oldOptions))
[17:44:23.684]     }
[17:44:23.684]     if (FALSE) {
[17:44:23.684]     }
[17:44:23.684]     else {
[17:44:23.684]         if (TRUE) {
[17:44:23.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.684]                 open = "w")
[17:44:23.684]         }
[17:44:23.684]         else {
[17:44:23.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.684]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.684]         }
[17:44:23.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.684]             base::sink(type = "output", split = FALSE)
[17:44:23.684]             base::close(...future.stdout)
[17:44:23.684]         }, add = TRUE)
[17:44:23.684]     }
[17:44:23.684]     ...future.frame <- base::sys.nframe()
[17:44:23.684]     ...future.conditions <- base::list()
[17:44:23.684]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.684]     if (FALSE) {
[17:44:23.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.684]     }
[17:44:23.684]     ...future.result <- base::tryCatch({
[17:44:23.684]         base::withCallingHandlers({
[17:44:23.684]             ...future.value <- base::withVisible(base::local(print(42)))
[17:44:23.684]             future::FutureResult(value = ...future.value$value, 
[17:44:23.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.684]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.684]                     ...future.globalenv.names))
[17:44:23.684]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.684]         }, condition = base::local({
[17:44:23.684]             c <- base::c
[17:44:23.684]             inherits <- base::inherits
[17:44:23.684]             invokeRestart <- base::invokeRestart
[17:44:23.684]             length <- base::length
[17:44:23.684]             list <- base::list
[17:44:23.684]             seq.int <- base::seq.int
[17:44:23.684]             signalCondition <- base::signalCondition
[17:44:23.684]             sys.calls <- base::sys.calls
[17:44:23.684]             `[[` <- base::`[[`
[17:44:23.684]             `+` <- base::`+`
[17:44:23.684]             `<<-` <- base::`<<-`
[17:44:23.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.684]                   3L)]
[17:44:23.684]             }
[17:44:23.684]             function(cond) {
[17:44:23.684]                 is_error <- inherits(cond, "error")
[17:44:23.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.684]                   NULL)
[17:44:23.684]                 if (is_error) {
[17:44:23.684]                   sessionInformation <- function() {
[17:44:23.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.684]                       search = base::search(), system = base::Sys.info())
[17:44:23.684]                   }
[17:44:23.684]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.684]                     cond$call), session = sessionInformation(), 
[17:44:23.684]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.684]                   signalCondition(cond)
[17:44:23.684]                 }
[17:44:23.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.684]                 "immediateCondition"))) {
[17:44:23.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.684]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.684]                   if (TRUE && !signal) {
[17:44:23.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.684]                     {
[17:44:23.684]                       inherits <- base::inherits
[17:44:23.684]                       invokeRestart <- base::invokeRestart
[17:44:23.684]                       is.null <- base::is.null
[17:44:23.684]                       muffled <- FALSE
[17:44:23.684]                       if (inherits(cond, "message")) {
[17:44:23.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.684]                         if (muffled) 
[17:44:23.684]                           invokeRestart("muffleMessage")
[17:44:23.684]                       }
[17:44:23.684]                       else if (inherits(cond, "warning")) {
[17:44:23.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.684]                         if (muffled) 
[17:44:23.684]                           invokeRestart("muffleWarning")
[17:44:23.684]                       }
[17:44:23.684]                       else if (inherits(cond, "condition")) {
[17:44:23.684]                         if (!is.null(pattern)) {
[17:44:23.684]                           computeRestarts <- base::computeRestarts
[17:44:23.684]                           grepl <- base::grepl
[17:44:23.684]                           restarts <- computeRestarts(cond)
[17:44:23.684]                           for (restart in restarts) {
[17:44:23.684]                             name <- restart$name
[17:44:23.684]                             if (is.null(name)) 
[17:44:23.684]                               next
[17:44:23.684]                             if (!grepl(pattern, name)) 
[17:44:23.684]                               next
[17:44:23.684]                             invokeRestart(restart)
[17:44:23.684]                             muffled <- TRUE
[17:44:23.684]                             break
[17:44:23.684]                           }
[17:44:23.684]                         }
[17:44:23.684]                       }
[17:44:23.684]                       invisible(muffled)
[17:44:23.684]                     }
[17:44:23.684]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.684]                   }
[17:44:23.684]                 }
[17:44:23.684]                 else {
[17:44:23.684]                   if (TRUE) {
[17:44:23.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.684]                     {
[17:44:23.684]                       inherits <- base::inherits
[17:44:23.684]                       invokeRestart <- base::invokeRestart
[17:44:23.684]                       is.null <- base::is.null
[17:44:23.684]                       muffled <- FALSE
[17:44:23.684]                       if (inherits(cond, "message")) {
[17:44:23.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.684]                         if (muffled) 
[17:44:23.684]                           invokeRestart("muffleMessage")
[17:44:23.684]                       }
[17:44:23.684]                       else if (inherits(cond, "warning")) {
[17:44:23.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.684]                         if (muffled) 
[17:44:23.684]                           invokeRestart("muffleWarning")
[17:44:23.684]                       }
[17:44:23.684]                       else if (inherits(cond, "condition")) {
[17:44:23.684]                         if (!is.null(pattern)) {
[17:44:23.684]                           computeRestarts <- base::computeRestarts
[17:44:23.684]                           grepl <- base::grepl
[17:44:23.684]                           restarts <- computeRestarts(cond)
[17:44:23.684]                           for (restart in restarts) {
[17:44:23.684]                             name <- restart$name
[17:44:23.684]                             if (is.null(name)) 
[17:44:23.684]                               next
[17:44:23.684]                             if (!grepl(pattern, name)) 
[17:44:23.684]                               next
[17:44:23.684]                             invokeRestart(restart)
[17:44:23.684]                             muffled <- TRUE
[17:44:23.684]                             break
[17:44:23.684]                           }
[17:44:23.684]                         }
[17:44:23.684]                       }
[17:44:23.684]                       invisible(muffled)
[17:44:23.684]                     }
[17:44:23.684]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.684]                   }
[17:44:23.684]                 }
[17:44:23.684]             }
[17:44:23.684]         }))
[17:44:23.684]     }, error = function(ex) {
[17:44:23.684]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.684]                 ...future.rng), started = ...future.startTime, 
[17:44:23.684]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.684]             version = "1.8"), class = "FutureResult")
[17:44:23.684]     }, finally = {
[17:44:23.684]         if (!identical(...future.workdir, getwd())) 
[17:44:23.684]             setwd(...future.workdir)
[17:44:23.684]         {
[17:44:23.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.684]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.684]             }
[17:44:23.684]             base::options(...future.oldOptions)
[17:44:23.684]             if (.Platform$OS.type == "windows") {
[17:44:23.684]                 old_names <- names(...future.oldEnvVars)
[17:44:23.684]                 envs <- base::Sys.getenv()
[17:44:23.684]                 names <- names(envs)
[17:44:23.684]                 common <- intersect(names, old_names)
[17:44:23.684]                 added <- setdiff(names, old_names)
[17:44:23.684]                 removed <- setdiff(old_names, names)
[17:44:23.684]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.684]                   envs[common]]
[17:44:23.684]                 NAMES <- toupper(changed)
[17:44:23.684]                 args <- list()
[17:44:23.684]                 for (kk in seq_along(NAMES)) {
[17:44:23.684]                   name <- changed[[kk]]
[17:44:23.684]                   NAME <- NAMES[[kk]]
[17:44:23.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.684]                     next
[17:44:23.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.684]                 }
[17:44:23.684]                 NAMES <- toupper(added)
[17:44:23.684]                 for (kk in seq_along(NAMES)) {
[17:44:23.684]                   name <- added[[kk]]
[17:44:23.684]                   NAME <- NAMES[[kk]]
[17:44:23.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.684]                     next
[17:44:23.684]                   args[[name]] <- ""
[17:44:23.684]                 }
[17:44:23.684]                 NAMES <- toupper(removed)
[17:44:23.684]                 for (kk in seq_along(NAMES)) {
[17:44:23.684]                   name <- removed[[kk]]
[17:44:23.684]                   NAME <- NAMES[[kk]]
[17:44:23.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.684]                     next
[17:44:23.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.684]                 }
[17:44:23.684]                 if (length(args) > 0) 
[17:44:23.684]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.684]             }
[17:44:23.684]             else {
[17:44:23.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.684]             }
[17:44:23.684]             {
[17:44:23.684]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.684]                   0L) {
[17:44:23.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.684]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.684]                   base::options(opts)
[17:44:23.684]                 }
[17:44:23.684]                 {
[17:44:23.684]                   {
[17:44:23.684]                     NULL
[17:44:23.684]                     RNGkind("Mersenne-Twister")
[17:44:23.684]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:44:23.684]                       inherits = FALSE)
[17:44:23.684]                   }
[17:44:23.684]                   options(future.plan = NULL)
[17:44:23.684]                   if (is.na(NA_character_)) 
[17:44:23.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.684]                   future::plan(list(function (..., envir = parent.frame()) 
[17:44:23.684]                   {
[17:44:23.684]                     future <- SequentialFuture(..., envir = envir)
[17:44:23.684]                     if (!future$lazy) 
[17:44:23.684]                       future <- run(future)
[17:44:23.684]                     invisible(future)
[17:44:23.684]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.684]                 }
[17:44:23.684]             }
[17:44:23.684]         }
[17:44:23.684]     })
[17:44:23.684]     if (TRUE) {
[17:44:23.684]         base::sink(type = "output", split = FALSE)
[17:44:23.684]         if (TRUE) {
[17:44:23.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.684]         }
[17:44:23.684]         else {
[17:44:23.684]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.684]         }
[17:44:23.684]         base::close(...future.stdout)
[17:44:23.684]         ...future.stdout <- NULL
[17:44:23.684]     }
[17:44:23.684]     ...future.result$conditions <- ...future.conditions
[17:44:23.684]     ...future.result$finished <- base::Sys.time()
[17:44:23.684]     ...future.result
[17:44:23.684] }
[17:44:23.686] plan(): Setting new future strategy stack:
[17:44:23.686] List of future strategies:
[17:44:23.686] 1. sequential:
[17:44:23.686]    - args: function (..., envir = parent.frame())
[17:44:23.686]    - tweaked: FALSE
[17:44:23.686]    - call: NULL
[17:44:23.686] plan(): nbrOfWorkers() = 1
[17:44:23.687] plan(): Setting new future strategy stack:
[17:44:23.687] List of future strategies:
[17:44:23.687] 1. sequential:
[17:44:23.687]    - args: function (..., envir = parent.frame())
[17:44:23.687]    - tweaked: FALSE
[17:44:23.687]    - call: plan(strategy)
[17:44:23.688] plan(): nbrOfWorkers() = 1
[17:44:23.688] SequentialFuture started (and completed)
[17:44:23.688] - Launch lazy future ... done
[17:44:23.688] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[17:44:23.694] plan(): Setting new future strategy stack:
[17:44:23.694] List of future strategies:
[17:44:23.694] 1. multicore:
[17:44:23.694]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.694]    - tweaked: FALSE
[17:44:23.694]    - call: plan(strategy)
[17:44:23.698] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[17:44:23.699] getGlobalsAndPackages() ...
[17:44:23.699] Searching for globals...
[17:44:23.702] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.702] Searching for globals ... DONE
[17:44:23.702] Resolving globals: FALSE
[17:44:23.702] 
[17:44:23.703] - packages: [1] ‘utils’
[17:44:23.703] getGlobalsAndPackages() ... DONE
[17:44:23.703] run() for ‘Future’ ...
[17:44:23.703] - state: ‘created’
[17:44:23.703] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.707] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.707] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.707]   - Field: ‘label’
[17:44:23.707]   - Field: ‘local’
[17:44:23.708]   - Field: ‘owner’
[17:44:23.708]   - Field: ‘envir’
[17:44:23.708]   - Field: ‘workers’
[17:44:23.708]   - Field: ‘packages’
[17:44:23.708]   - Field: ‘gc’
[17:44:23.708]   - Field: ‘job’
[17:44:23.708]   - Field: ‘conditions’
[17:44:23.708]   - Field: ‘expr’
[17:44:23.708]   - Field: ‘uuid’
[17:44:23.708]   - Field: ‘seed’
[17:44:23.709]   - Field: ‘version’
[17:44:23.709]   - Field: ‘result’
[17:44:23.709]   - Field: ‘asynchronous’
[17:44:23.709]   - Field: ‘calls’
[17:44:23.709]   - Field: ‘globals’
[17:44:23.709]   - Field: ‘stdout’
[17:44:23.709]   - Field: ‘earlySignal’
[17:44:23.709]   - Field: ‘lazy’
[17:44:23.709]   - Field: ‘state’
[17:44:23.709] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.709] - Launch lazy future ...
[17:44:23.711] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.711] Packages needed by future strategies (n = 0): <none>
[17:44:23.711] {
[17:44:23.711]     {
[17:44:23.711]         {
[17:44:23.711]             ...future.startTime <- base::Sys.time()
[17:44:23.711]             {
[17:44:23.711]                 {
[17:44:23.711]                   {
[17:44:23.711]                     {
[17:44:23.711]                       {
[17:44:23.711]                         base::local({
[17:44:23.711]                           has_future <- base::requireNamespace("future", 
[17:44:23.711]                             quietly = TRUE)
[17:44:23.711]                           if (has_future) {
[17:44:23.711]                             ns <- base::getNamespace("future")
[17:44:23.711]                             version <- ns[[".package"]][["version"]]
[17:44:23.711]                             if (is.null(version)) 
[17:44:23.711]                               version <- utils::packageVersion("future")
[17:44:23.711]                           }
[17:44:23.711]                           else {
[17:44:23.711]                             version <- NULL
[17:44:23.711]                           }
[17:44:23.711]                           if (!has_future || version < "1.8.0") {
[17:44:23.711]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.711]                               "", base::R.version$version.string), 
[17:44:23.711]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:23.711]                                 base::R.version$platform, 8 * 
[17:44:23.711]                                   base::.Machine$sizeof.pointer), 
[17:44:23.711]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.711]                                 "release", "version")], collapse = " "), 
[17:44:23.711]                               hostname = base::Sys.info()[["nodename"]])
[17:44:23.711]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.711]                               info)
[17:44:23.711]                             info <- base::paste(info, collapse = "; ")
[17:44:23.711]                             if (!has_future) {
[17:44:23.711]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.711]                                 info)
[17:44:23.711]                             }
[17:44:23.711]                             else {
[17:44:23.711]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.711]                                 info, version)
[17:44:23.711]                             }
[17:44:23.711]                             base::stop(msg)
[17:44:23.711]                           }
[17:44:23.711]                         })
[17:44:23.711]                       }
[17:44:23.711]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.711]                       base::options(mc.cores = 1L)
[17:44:23.711]                     }
[17:44:23.711]                     base::local({
[17:44:23.711]                       for (pkg in "utils") {
[17:44:23.711]                         base::loadNamespace(pkg)
[17:44:23.711]                         base::library(pkg, character.only = TRUE)
[17:44:23.711]                       }
[17:44:23.711]                     })
[17:44:23.711]                   }
[17:44:23.711]                   options(future.plan = NULL)
[17:44:23.711]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.711]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.711]                 }
[17:44:23.711]                 ...future.workdir <- getwd()
[17:44:23.711]             }
[17:44:23.711]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.711]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.711]         }
[17:44:23.711]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.711]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.711]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.711]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.711]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.711]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.711]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.711]             base::names(...future.oldOptions))
[17:44:23.711]     }
[17:44:23.711]     if (FALSE) {
[17:44:23.711]     }
[17:44:23.711]     else {
[17:44:23.711]         if (TRUE) {
[17:44:23.711]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.711]                 open = "w")
[17:44:23.711]         }
[17:44:23.711]         else {
[17:44:23.711]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.711]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.711]         }
[17:44:23.711]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.711]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.711]             base::sink(type = "output", split = FALSE)
[17:44:23.711]             base::close(...future.stdout)
[17:44:23.711]         }, add = TRUE)
[17:44:23.711]     }
[17:44:23.711]     ...future.frame <- base::sys.nframe()
[17:44:23.711]     ...future.conditions <- base::list()
[17:44:23.711]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.711]     if (FALSE) {
[17:44:23.711]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.711]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.711]     }
[17:44:23.711]     ...future.result <- base::tryCatch({
[17:44:23.711]         base::withCallingHandlers({
[17:44:23.711]             ...future.value <- base::withVisible(base::local({
[17:44:23.711]                 withCallingHandlers({
[17:44:23.711]                   {
[17:44:23.711]                     print(1:50)
[17:44:23.711]                     str(1:50)
[17:44:23.711]                     cat(letters, sep = "-")
[17:44:23.711]                     cat(1:6, collapse = "\n")
[17:44:23.711]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.711]                     42L
[17:44:23.711]                   }
[17:44:23.711]                 }, immediateCondition = function(cond) {
[17:44:23.711]                   save_rds <- function (object, pathname, ...) 
[17:44:23.711]                   {
[17:44:23.711]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.711]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.711]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.711]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.711]                         fi_tmp[["mtime"]])
[17:44:23.711]                     }
[17:44:23.711]                     tryCatch({
[17:44:23.711]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.711]                     }, error = function(ex) {
[17:44:23.711]                       msg <- conditionMessage(ex)
[17:44:23.711]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.711]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.711]                         fi_tmp[["mtime"]], msg)
[17:44:23.711]                       ex$message <- msg
[17:44:23.711]                       stop(ex)
[17:44:23.711]                     })
[17:44:23.711]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.711]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.711]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.711]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.711]                       fi <- file.info(pathname)
[17:44:23.711]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.711]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.711]                         fi[["size"]], fi[["mtime"]])
[17:44:23.711]                       stop(msg)
[17:44:23.711]                     }
[17:44:23.711]                     invisible(pathname)
[17:44:23.711]                   }
[17:44:23.711]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.711]                     rootPath = tempdir()) 
[17:44:23.711]                   {
[17:44:23.711]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.711]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.711]                       tmpdir = path, fileext = ".rds")
[17:44:23.711]                     save_rds(obj, file)
[17:44:23.711]                   }
[17:44:23.711]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.711]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.711]                   {
[17:44:23.711]                     inherits <- base::inherits
[17:44:23.711]                     invokeRestart <- base::invokeRestart
[17:44:23.711]                     is.null <- base::is.null
[17:44:23.711]                     muffled <- FALSE
[17:44:23.711]                     if (inherits(cond, "message")) {
[17:44:23.711]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.711]                       if (muffled) 
[17:44:23.711]                         invokeRestart("muffleMessage")
[17:44:23.711]                     }
[17:44:23.711]                     else if (inherits(cond, "warning")) {
[17:44:23.711]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.711]                       if (muffled) 
[17:44:23.711]                         invokeRestart("muffleWarning")
[17:44:23.711]                     }
[17:44:23.711]                     else if (inherits(cond, "condition")) {
[17:44:23.711]                       if (!is.null(pattern)) {
[17:44:23.711]                         computeRestarts <- base::computeRestarts
[17:44:23.711]                         grepl <- base::grepl
[17:44:23.711]                         restarts <- computeRestarts(cond)
[17:44:23.711]                         for (restart in restarts) {
[17:44:23.711]                           name <- restart$name
[17:44:23.711]                           if (is.null(name)) 
[17:44:23.711]                             next
[17:44:23.711]                           if (!grepl(pattern, name)) 
[17:44:23.711]                             next
[17:44:23.711]                           invokeRestart(restart)
[17:44:23.711]                           muffled <- TRUE
[17:44:23.711]                           break
[17:44:23.711]                         }
[17:44:23.711]                       }
[17:44:23.711]                     }
[17:44:23.711]                     invisible(muffled)
[17:44:23.711]                   }
[17:44:23.711]                   muffleCondition(cond)
[17:44:23.711]                 })
[17:44:23.711]             }))
[17:44:23.711]             future::FutureResult(value = ...future.value$value, 
[17:44:23.711]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.711]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.711]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.711]                     ...future.globalenv.names))
[17:44:23.711]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.711]         }, condition = base::local({
[17:44:23.711]             c <- base::c
[17:44:23.711]             inherits <- base::inherits
[17:44:23.711]             invokeRestart <- base::invokeRestart
[17:44:23.711]             length <- base::length
[17:44:23.711]             list <- base::list
[17:44:23.711]             seq.int <- base::seq.int
[17:44:23.711]             signalCondition <- base::signalCondition
[17:44:23.711]             sys.calls <- base::sys.calls
[17:44:23.711]             `[[` <- base::`[[`
[17:44:23.711]             `+` <- base::`+`
[17:44:23.711]             `<<-` <- base::`<<-`
[17:44:23.711]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.711]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.711]                   3L)]
[17:44:23.711]             }
[17:44:23.711]             function(cond) {
[17:44:23.711]                 is_error <- inherits(cond, "error")
[17:44:23.711]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.711]                   NULL)
[17:44:23.711]                 if (is_error) {
[17:44:23.711]                   sessionInformation <- function() {
[17:44:23.711]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.711]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.711]                       search = base::search(), system = base::Sys.info())
[17:44:23.711]                   }
[17:44:23.711]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.711]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.711]                     cond$call), session = sessionInformation(), 
[17:44:23.711]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.711]                   signalCondition(cond)
[17:44:23.711]                 }
[17:44:23.711]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.711]                 "immediateCondition"))) {
[17:44:23.711]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.711]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.711]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.711]                   if (TRUE && !signal) {
[17:44:23.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.711]                     {
[17:44:23.711]                       inherits <- base::inherits
[17:44:23.711]                       invokeRestart <- base::invokeRestart
[17:44:23.711]                       is.null <- base::is.null
[17:44:23.711]                       muffled <- FALSE
[17:44:23.711]                       if (inherits(cond, "message")) {
[17:44:23.711]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.711]                         if (muffled) 
[17:44:23.711]                           invokeRestart("muffleMessage")
[17:44:23.711]                       }
[17:44:23.711]                       else if (inherits(cond, "warning")) {
[17:44:23.711]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.711]                         if (muffled) 
[17:44:23.711]                           invokeRestart("muffleWarning")
[17:44:23.711]                       }
[17:44:23.711]                       else if (inherits(cond, "condition")) {
[17:44:23.711]                         if (!is.null(pattern)) {
[17:44:23.711]                           computeRestarts <- base::computeRestarts
[17:44:23.711]                           grepl <- base::grepl
[17:44:23.711]                           restarts <- computeRestarts(cond)
[17:44:23.711]                           for (restart in restarts) {
[17:44:23.711]                             name <- restart$name
[17:44:23.711]                             if (is.null(name)) 
[17:44:23.711]                               next
[17:44:23.711]                             if (!grepl(pattern, name)) 
[17:44:23.711]                               next
[17:44:23.711]                             invokeRestart(restart)
[17:44:23.711]                             muffled <- TRUE
[17:44:23.711]                             break
[17:44:23.711]                           }
[17:44:23.711]                         }
[17:44:23.711]                       }
[17:44:23.711]                       invisible(muffled)
[17:44:23.711]                     }
[17:44:23.711]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.711]                   }
[17:44:23.711]                 }
[17:44:23.711]                 else {
[17:44:23.711]                   if (TRUE) {
[17:44:23.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.711]                     {
[17:44:23.711]                       inherits <- base::inherits
[17:44:23.711]                       invokeRestart <- base::invokeRestart
[17:44:23.711]                       is.null <- base::is.null
[17:44:23.711]                       muffled <- FALSE
[17:44:23.711]                       if (inherits(cond, "message")) {
[17:44:23.711]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.711]                         if (muffled) 
[17:44:23.711]                           invokeRestart("muffleMessage")
[17:44:23.711]                       }
[17:44:23.711]                       else if (inherits(cond, "warning")) {
[17:44:23.711]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.711]                         if (muffled) 
[17:44:23.711]                           invokeRestart("muffleWarning")
[17:44:23.711]                       }
[17:44:23.711]                       else if (inherits(cond, "condition")) {
[17:44:23.711]                         if (!is.null(pattern)) {
[17:44:23.711]                           computeRestarts <- base::computeRestarts
[17:44:23.711]                           grepl <- base::grepl
[17:44:23.711]                           restarts <- computeRestarts(cond)
[17:44:23.711]                           for (restart in restarts) {
[17:44:23.711]                             name <- restart$name
[17:44:23.711]                             if (is.null(name)) 
[17:44:23.711]                               next
[17:44:23.711]                             if (!grepl(pattern, name)) 
[17:44:23.711]                               next
[17:44:23.711]                             invokeRestart(restart)
[17:44:23.711]                             muffled <- TRUE
[17:44:23.711]                             break
[17:44:23.711]                           }
[17:44:23.711]                         }
[17:44:23.711]                       }
[17:44:23.711]                       invisible(muffled)
[17:44:23.711]                     }
[17:44:23.711]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.711]                   }
[17:44:23.711]                 }
[17:44:23.711]             }
[17:44:23.711]         }))
[17:44:23.711]     }, error = function(ex) {
[17:44:23.711]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.711]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.711]                 ...future.rng), started = ...future.startTime, 
[17:44:23.711]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.711]             version = "1.8"), class = "FutureResult")
[17:44:23.711]     }, finally = {
[17:44:23.711]         if (!identical(...future.workdir, getwd())) 
[17:44:23.711]             setwd(...future.workdir)
[17:44:23.711]         {
[17:44:23.711]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.711]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.711]             }
[17:44:23.711]             base::options(...future.oldOptions)
[17:44:23.711]             if (.Platform$OS.type == "windows") {
[17:44:23.711]                 old_names <- names(...future.oldEnvVars)
[17:44:23.711]                 envs <- base::Sys.getenv()
[17:44:23.711]                 names <- names(envs)
[17:44:23.711]                 common <- intersect(names, old_names)
[17:44:23.711]                 added <- setdiff(names, old_names)
[17:44:23.711]                 removed <- setdiff(old_names, names)
[17:44:23.711]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.711]                   envs[common]]
[17:44:23.711]                 NAMES <- toupper(changed)
[17:44:23.711]                 args <- list()
[17:44:23.711]                 for (kk in seq_along(NAMES)) {
[17:44:23.711]                   name <- changed[[kk]]
[17:44:23.711]                   NAME <- NAMES[[kk]]
[17:44:23.711]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.711]                     next
[17:44:23.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.711]                 }
[17:44:23.711]                 NAMES <- toupper(added)
[17:44:23.711]                 for (kk in seq_along(NAMES)) {
[17:44:23.711]                   name <- added[[kk]]
[17:44:23.711]                   NAME <- NAMES[[kk]]
[17:44:23.711]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.711]                     next
[17:44:23.711]                   args[[name]] <- ""
[17:44:23.711]                 }
[17:44:23.711]                 NAMES <- toupper(removed)
[17:44:23.711]                 for (kk in seq_along(NAMES)) {
[17:44:23.711]                   name <- removed[[kk]]
[17:44:23.711]                   NAME <- NAMES[[kk]]
[17:44:23.711]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.711]                     next
[17:44:23.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.711]                 }
[17:44:23.711]                 if (length(args) > 0) 
[17:44:23.711]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.711]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.711]             }
[17:44:23.711]             else {
[17:44:23.711]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.711]             }
[17:44:23.711]             {
[17:44:23.711]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.711]                   0L) {
[17:44:23.711]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.711]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.711]                   base::options(opts)
[17:44:23.711]                 }
[17:44:23.711]                 {
[17:44:23.711]                   {
[17:44:23.711]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.711]                     NULL
[17:44:23.711]                   }
[17:44:23.711]                   options(future.plan = NULL)
[17:44:23.711]                   if (is.na(NA_character_)) 
[17:44:23.711]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.711]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.711]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.711]                     envir = parent.frame()) 
[17:44:23.711]                   {
[17:44:23.711]                     default_workers <- missing(workers)
[17:44:23.711]                     if (is.function(workers)) 
[17:44:23.711]                       workers <- workers()
[17:44:23.711]                     workers <- structure(as.integer(workers), 
[17:44:23.711]                       class = class(workers))
[17:44:23.711]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.711]                       1L)
[17:44:23.711]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.711]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.711]                       if (default_workers) 
[17:44:23.711]                         supportsMulticore(warn = TRUE)
[17:44:23.711]                       return(sequential(..., envir = envir))
[17:44:23.711]                     }
[17:44:23.711]                     oopts <- options(mc.cores = workers)
[17:44:23.711]                     on.exit(options(oopts))
[17:44:23.711]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.711]                       envir = envir)
[17:44:23.711]                     if (!future$lazy) 
[17:44:23.711]                       future <- run(future)
[17:44:23.711]                     invisible(future)
[17:44:23.711]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.711]                 }
[17:44:23.711]             }
[17:44:23.711]         }
[17:44:23.711]     })
[17:44:23.711]     if (TRUE) {
[17:44:23.711]         base::sink(type = "output", split = FALSE)
[17:44:23.711]         if (TRUE) {
[17:44:23.711]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.711]         }
[17:44:23.711]         else {
[17:44:23.711]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.711]         }
[17:44:23.711]         base::close(...future.stdout)
[17:44:23.711]         ...future.stdout <- NULL
[17:44:23.711]     }
[17:44:23.711]     ...future.result$conditions <- ...future.conditions
[17:44:23.711]     ...future.result$finished <- base::Sys.time()
[17:44:23.711]     ...future.result
[17:44:23.711] }
[17:44:23.714] requestCore(): workers = 2
[17:44:23.717] MulticoreFuture started
[17:44:23.717] - Launch lazy future ... done
[17:44:23.717] run() for ‘MulticoreFuture’ ... done
[17:44:23.718] plan(): Setting new future strategy stack:
[17:44:23.718] List of future strategies:
[17:44:23.718] 1. sequential:
[17:44:23.718]    - args: function (..., envir = parent.frame())
[17:44:23.718]    - tweaked: FALSE
[17:44:23.718]    - call: NULL
[17:44:23.724] plan(): nbrOfWorkers() = 1
[17:44:23.727] plan(): Setting new future strategy stack:
[17:44:23.727] List of future strategies:
[17:44:23.727] 1. multicore:
[17:44:23.727]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.727]    - tweaked: FALSE
[17:44:23.727]    - call: plan(strategy)
[17:44:23.733] plan(): nbrOfWorkers() = 2
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ session_uuid: chr "5c2879ac-1d4d-dd45-6daf-5951002ab70c"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53784
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:23"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.01609421 secs (started 2024-12-19 17:44:23.717203)
version: 1.8
[17:44:23.748] getGlobalsAndPackages() ...
[17:44:23.748] Searching for globals...
[17:44:23.751] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.752] Searching for globals ... DONE
[17:44:23.752] Resolving globals: FALSE
[17:44:23.752] 
[17:44:23.752] - packages: [1] ‘utils’
[17:44:23.753] getGlobalsAndPackages() ... DONE
[17:44:23.753] run() for ‘Future’ ...
[17:44:23.753] - state: ‘created’
[17:44:23.753] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.757] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.757] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.757]   - Field: ‘label’
[17:44:23.758]   - Field: ‘local’
[17:44:23.758]   - Field: ‘owner’
[17:44:23.758]   - Field: ‘envir’
[17:44:23.758]   - Field: ‘workers’
[17:44:23.758]   - Field: ‘packages’
[17:44:23.758]   - Field: ‘gc’
[17:44:23.758]   - Field: ‘job’
[17:44:23.758]   - Field: ‘conditions’
[17:44:23.758]   - Field: ‘expr’
[17:44:23.758]   - Field: ‘uuid’
[17:44:23.759]   - Field: ‘seed’
[17:44:23.759]   - Field: ‘version’
[17:44:23.759]   - Field: ‘result’
[17:44:23.759]   - Field: ‘asynchronous’
[17:44:23.759]   - Field: ‘calls’
[17:44:23.759]   - Field: ‘globals’
[17:44:23.759]   - Field: ‘stdout’
[17:44:23.759]   - Field: ‘earlySignal’
[17:44:23.760]   - Field: ‘lazy’
[17:44:23.760]   - Field: ‘state’
[17:44:23.760] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.760] - Launch lazy future ...
[17:44:23.760] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.760] Packages needed by future strategies (n = 0): <none>
[17:44:23.761] {
[17:44:23.761]     {
[17:44:23.761]         {
[17:44:23.761]             ...future.startTime <- base::Sys.time()
[17:44:23.761]             {
[17:44:23.761]                 {
[17:44:23.761]                   {
[17:44:23.761]                     {
[17:44:23.761]                       {
[17:44:23.761]                         base::local({
[17:44:23.761]                           has_future <- base::requireNamespace("future", 
[17:44:23.761]                             quietly = TRUE)
[17:44:23.761]                           if (has_future) {
[17:44:23.761]                             ns <- base::getNamespace("future")
[17:44:23.761]                             version <- ns[[".package"]][["version"]]
[17:44:23.761]                             if (is.null(version)) 
[17:44:23.761]                               version <- utils::packageVersion("future")
[17:44:23.761]                           }
[17:44:23.761]                           else {
[17:44:23.761]                             version <- NULL
[17:44:23.761]                           }
[17:44:23.761]                           if (!has_future || version < "1.8.0") {
[17:44:23.761]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.761]                               "", base::R.version$version.string), 
[17:44:23.761]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:23.761]                                 base::R.version$platform, 8 * 
[17:44:23.761]                                   base::.Machine$sizeof.pointer), 
[17:44:23.761]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.761]                                 "release", "version")], collapse = " "), 
[17:44:23.761]                               hostname = base::Sys.info()[["nodename"]])
[17:44:23.761]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.761]                               info)
[17:44:23.761]                             info <- base::paste(info, collapse = "; ")
[17:44:23.761]                             if (!has_future) {
[17:44:23.761]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.761]                                 info)
[17:44:23.761]                             }
[17:44:23.761]                             else {
[17:44:23.761]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.761]                                 info, version)
[17:44:23.761]                             }
[17:44:23.761]                             base::stop(msg)
[17:44:23.761]                           }
[17:44:23.761]                         })
[17:44:23.761]                       }
[17:44:23.761]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.761]                       base::options(mc.cores = 1L)
[17:44:23.761]                     }
[17:44:23.761]                     base::local({
[17:44:23.761]                       for (pkg in "utils") {
[17:44:23.761]                         base::loadNamespace(pkg)
[17:44:23.761]                         base::library(pkg, character.only = TRUE)
[17:44:23.761]                       }
[17:44:23.761]                     })
[17:44:23.761]                   }
[17:44:23.761]                   options(future.plan = NULL)
[17:44:23.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.761]                 }
[17:44:23.761]                 ...future.workdir <- getwd()
[17:44:23.761]             }
[17:44:23.761]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.761]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.761]         }
[17:44:23.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.761]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.761]             base::names(...future.oldOptions))
[17:44:23.761]     }
[17:44:23.761]     if (FALSE) {
[17:44:23.761]     }
[17:44:23.761]     else {
[17:44:23.761]         if (TRUE) {
[17:44:23.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.761]                 open = "w")
[17:44:23.761]         }
[17:44:23.761]         else {
[17:44:23.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.761]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.761]         }
[17:44:23.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.761]             base::sink(type = "output", split = FALSE)
[17:44:23.761]             base::close(...future.stdout)
[17:44:23.761]         }, add = TRUE)
[17:44:23.761]     }
[17:44:23.761]     ...future.frame <- base::sys.nframe()
[17:44:23.761]     ...future.conditions <- base::list()
[17:44:23.761]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.761]     if (FALSE) {
[17:44:23.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.761]     }
[17:44:23.761]     ...future.result <- base::tryCatch({
[17:44:23.761]         base::withCallingHandlers({
[17:44:23.761]             ...future.value <- base::withVisible(base::local({
[17:44:23.761]                 withCallingHandlers({
[17:44:23.761]                   {
[17:44:23.761]                     print(1:50)
[17:44:23.761]                     str(1:50)
[17:44:23.761]                     cat(letters, sep = "-")
[17:44:23.761]                     cat(1:6, collapse = "\n")
[17:44:23.761]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.761]                     42L
[17:44:23.761]                   }
[17:44:23.761]                 }, immediateCondition = function(cond) {
[17:44:23.761]                   save_rds <- function (object, pathname, ...) 
[17:44:23.761]                   {
[17:44:23.761]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.761]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.761]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.761]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.761]                         fi_tmp[["mtime"]])
[17:44:23.761]                     }
[17:44:23.761]                     tryCatch({
[17:44:23.761]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.761]                     }, error = function(ex) {
[17:44:23.761]                       msg <- conditionMessage(ex)
[17:44:23.761]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.761]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.761]                         fi_tmp[["mtime"]], msg)
[17:44:23.761]                       ex$message <- msg
[17:44:23.761]                       stop(ex)
[17:44:23.761]                     })
[17:44:23.761]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.761]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.761]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.761]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.761]                       fi <- file.info(pathname)
[17:44:23.761]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.761]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.761]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.761]                         fi[["size"]], fi[["mtime"]])
[17:44:23.761]                       stop(msg)
[17:44:23.761]                     }
[17:44:23.761]                     invisible(pathname)
[17:44:23.761]                   }
[17:44:23.761]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.761]                     rootPath = tempdir()) 
[17:44:23.761]                   {
[17:44:23.761]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.761]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.761]                       tmpdir = path, fileext = ".rds")
[17:44:23.761]                     save_rds(obj, file)
[17:44:23.761]                   }
[17:44:23.761]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.761]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.761]                   {
[17:44:23.761]                     inherits <- base::inherits
[17:44:23.761]                     invokeRestart <- base::invokeRestart
[17:44:23.761]                     is.null <- base::is.null
[17:44:23.761]                     muffled <- FALSE
[17:44:23.761]                     if (inherits(cond, "message")) {
[17:44:23.761]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.761]                       if (muffled) 
[17:44:23.761]                         invokeRestart("muffleMessage")
[17:44:23.761]                     }
[17:44:23.761]                     else if (inherits(cond, "warning")) {
[17:44:23.761]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.761]                       if (muffled) 
[17:44:23.761]                         invokeRestart("muffleWarning")
[17:44:23.761]                     }
[17:44:23.761]                     else if (inherits(cond, "condition")) {
[17:44:23.761]                       if (!is.null(pattern)) {
[17:44:23.761]                         computeRestarts <- base::computeRestarts
[17:44:23.761]                         grepl <- base::grepl
[17:44:23.761]                         restarts <- computeRestarts(cond)
[17:44:23.761]                         for (restart in restarts) {
[17:44:23.761]                           name <- restart$name
[17:44:23.761]                           if (is.null(name)) 
[17:44:23.761]                             next
[17:44:23.761]                           if (!grepl(pattern, name)) 
[17:44:23.761]                             next
[17:44:23.761]                           invokeRestart(restart)
[17:44:23.761]                           muffled <- TRUE
[17:44:23.761]                           break
[17:44:23.761]                         }
[17:44:23.761]                       }
[17:44:23.761]                     }
[17:44:23.761]                     invisible(muffled)
[17:44:23.761]                   }
[17:44:23.761]                   muffleCondition(cond)
[17:44:23.761]                 })
[17:44:23.761]             }))
[17:44:23.761]             future::FutureResult(value = ...future.value$value, 
[17:44:23.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.761]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.761]                     ...future.globalenv.names))
[17:44:23.761]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.761]         }, condition = base::local({
[17:44:23.761]             c <- base::c
[17:44:23.761]             inherits <- base::inherits
[17:44:23.761]             invokeRestart <- base::invokeRestart
[17:44:23.761]             length <- base::length
[17:44:23.761]             list <- base::list
[17:44:23.761]             seq.int <- base::seq.int
[17:44:23.761]             signalCondition <- base::signalCondition
[17:44:23.761]             sys.calls <- base::sys.calls
[17:44:23.761]             `[[` <- base::`[[`
[17:44:23.761]             `+` <- base::`+`
[17:44:23.761]             `<<-` <- base::`<<-`
[17:44:23.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.761]                   3L)]
[17:44:23.761]             }
[17:44:23.761]             function(cond) {
[17:44:23.761]                 is_error <- inherits(cond, "error")
[17:44:23.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.761]                   NULL)
[17:44:23.761]                 if (is_error) {
[17:44:23.761]                   sessionInformation <- function() {
[17:44:23.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.761]                       search = base::search(), system = base::Sys.info())
[17:44:23.761]                   }
[17:44:23.761]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.761]                     cond$call), session = sessionInformation(), 
[17:44:23.761]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.761]                   signalCondition(cond)
[17:44:23.761]                 }
[17:44:23.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.761]                 "immediateCondition"))) {
[17:44:23.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.761]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.761]                   if (TRUE && !signal) {
[17:44:23.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.761]                     {
[17:44:23.761]                       inherits <- base::inherits
[17:44:23.761]                       invokeRestart <- base::invokeRestart
[17:44:23.761]                       is.null <- base::is.null
[17:44:23.761]                       muffled <- FALSE
[17:44:23.761]                       if (inherits(cond, "message")) {
[17:44:23.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.761]                         if (muffled) 
[17:44:23.761]                           invokeRestart("muffleMessage")
[17:44:23.761]                       }
[17:44:23.761]                       else if (inherits(cond, "warning")) {
[17:44:23.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.761]                         if (muffled) 
[17:44:23.761]                           invokeRestart("muffleWarning")
[17:44:23.761]                       }
[17:44:23.761]                       else if (inherits(cond, "condition")) {
[17:44:23.761]                         if (!is.null(pattern)) {
[17:44:23.761]                           computeRestarts <- base::computeRestarts
[17:44:23.761]                           grepl <- base::grepl
[17:44:23.761]                           restarts <- computeRestarts(cond)
[17:44:23.761]                           for (restart in restarts) {
[17:44:23.761]                             name <- restart$name
[17:44:23.761]                             if (is.null(name)) 
[17:44:23.761]                               next
[17:44:23.761]                             if (!grepl(pattern, name)) 
[17:44:23.761]                               next
[17:44:23.761]                             invokeRestart(restart)
[17:44:23.761]                             muffled <- TRUE
[17:44:23.761]                             break
[17:44:23.761]                           }
[17:44:23.761]                         }
[17:44:23.761]                       }
[17:44:23.761]                       invisible(muffled)
[17:44:23.761]                     }
[17:44:23.761]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.761]                   }
[17:44:23.761]                 }
[17:44:23.761]                 else {
[17:44:23.761]                   if (TRUE) {
[17:44:23.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.761]                     {
[17:44:23.761]                       inherits <- base::inherits
[17:44:23.761]                       invokeRestart <- base::invokeRestart
[17:44:23.761]                       is.null <- base::is.null
[17:44:23.761]                       muffled <- FALSE
[17:44:23.761]                       if (inherits(cond, "message")) {
[17:44:23.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.761]                         if (muffled) 
[17:44:23.761]                           invokeRestart("muffleMessage")
[17:44:23.761]                       }
[17:44:23.761]                       else if (inherits(cond, "warning")) {
[17:44:23.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.761]                         if (muffled) 
[17:44:23.761]                           invokeRestart("muffleWarning")
[17:44:23.761]                       }
[17:44:23.761]                       else if (inherits(cond, "condition")) {
[17:44:23.761]                         if (!is.null(pattern)) {
[17:44:23.761]                           computeRestarts <- base::computeRestarts
[17:44:23.761]                           grepl <- base::grepl
[17:44:23.761]                           restarts <- computeRestarts(cond)
[17:44:23.761]                           for (restart in restarts) {
[17:44:23.761]                             name <- restart$name
[17:44:23.761]                             if (is.null(name)) 
[17:44:23.761]                               next
[17:44:23.761]                             if (!grepl(pattern, name)) 
[17:44:23.761]                               next
[17:44:23.761]                             invokeRestart(restart)
[17:44:23.761]                             muffled <- TRUE
[17:44:23.761]                             break
[17:44:23.761]                           }
[17:44:23.761]                         }
[17:44:23.761]                       }
[17:44:23.761]                       invisible(muffled)
[17:44:23.761]                     }
[17:44:23.761]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.761]                   }
[17:44:23.761]                 }
[17:44:23.761]             }
[17:44:23.761]         }))
[17:44:23.761]     }, error = function(ex) {
[17:44:23.761]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.761]                 ...future.rng), started = ...future.startTime, 
[17:44:23.761]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.761]             version = "1.8"), class = "FutureResult")
[17:44:23.761]     }, finally = {
[17:44:23.761]         if (!identical(...future.workdir, getwd())) 
[17:44:23.761]             setwd(...future.workdir)
[17:44:23.761]         {
[17:44:23.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.761]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.761]             }
[17:44:23.761]             base::options(...future.oldOptions)
[17:44:23.761]             if (.Platform$OS.type == "windows") {
[17:44:23.761]                 old_names <- names(...future.oldEnvVars)
[17:44:23.761]                 envs <- base::Sys.getenv()
[17:44:23.761]                 names <- names(envs)
[17:44:23.761]                 common <- intersect(names, old_names)
[17:44:23.761]                 added <- setdiff(names, old_names)
[17:44:23.761]                 removed <- setdiff(old_names, names)
[17:44:23.761]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.761]                   envs[common]]
[17:44:23.761]                 NAMES <- toupper(changed)
[17:44:23.761]                 args <- list()
[17:44:23.761]                 for (kk in seq_along(NAMES)) {
[17:44:23.761]                   name <- changed[[kk]]
[17:44:23.761]                   NAME <- NAMES[[kk]]
[17:44:23.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.761]                     next
[17:44:23.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.761]                 }
[17:44:23.761]                 NAMES <- toupper(added)
[17:44:23.761]                 for (kk in seq_along(NAMES)) {
[17:44:23.761]                   name <- added[[kk]]
[17:44:23.761]                   NAME <- NAMES[[kk]]
[17:44:23.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.761]                     next
[17:44:23.761]                   args[[name]] <- ""
[17:44:23.761]                 }
[17:44:23.761]                 NAMES <- toupper(removed)
[17:44:23.761]                 for (kk in seq_along(NAMES)) {
[17:44:23.761]                   name <- removed[[kk]]
[17:44:23.761]                   NAME <- NAMES[[kk]]
[17:44:23.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.761]                     next
[17:44:23.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.761]                 }
[17:44:23.761]                 if (length(args) > 0) 
[17:44:23.761]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.761]             }
[17:44:23.761]             else {
[17:44:23.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.761]             }
[17:44:23.761]             {
[17:44:23.761]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.761]                   0L) {
[17:44:23.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.761]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.761]                   base::options(opts)
[17:44:23.761]                 }
[17:44:23.761]                 {
[17:44:23.761]                   {
[17:44:23.761]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.761]                     NULL
[17:44:23.761]                   }
[17:44:23.761]                   options(future.plan = NULL)
[17:44:23.761]                   if (is.na(NA_character_)) 
[17:44:23.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.761]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.761]                     envir = parent.frame()) 
[17:44:23.761]                   {
[17:44:23.761]                     default_workers <- missing(workers)
[17:44:23.761]                     if (is.function(workers)) 
[17:44:23.761]                       workers <- workers()
[17:44:23.761]                     workers <- structure(as.integer(workers), 
[17:44:23.761]                       class = class(workers))
[17:44:23.761]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.761]                       1L)
[17:44:23.761]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.761]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.761]                       if (default_workers) 
[17:44:23.761]                         supportsMulticore(warn = TRUE)
[17:44:23.761]                       return(sequential(..., envir = envir))
[17:44:23.761]                     }
[17:44:23.761]                     oopts <- options(mc.cores = workers)
[17:44:23.761]                     on.exit(options(oopts))
[17:44:23.761]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.761]                       envir = envir)
[17:44:23.761]                     if (!future$lazy) 
[17:44:23.761]                       future <- run(future)
[17:44:23.761]                     invisible(future)
[17:44:23.761]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.761]                 }
[17:44:23.761]             }
[17:44:23.761]         }
[17:44:23.761]     })
[17:44:23.761]     if (TRUE) {
[17:44:23.761]         base::sink(type = "output", split = FALSE)
[17:44:23.761]         if (TRUE) {
[17:44:23.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.761]         }
[17:44:23.761]         else {
[17:44:23.761]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.761]         }
[17:44:23.761]         base::close(...future.stdout)
[17:44:23.761]         ...future.stdout <- NULL
[17:44:23.761]     }
[17:44:23.761]     ...future.result$conditions <- ...future.conditions
[17:44:23.761]     ...future.result$finished <- base::Sys.time()
[17:44:23.761]     ...future.result
[17:44:23.761] }
[17:44:23.763] requestCore(): workers = 2
[17:44:23.765] MulticoreFuture started
[17:44:23.766] - Launch lazy future ... done
[17:44:23.766] run() for ‘MulticoreFuture’ ... done
[17:44:23.767] plan(): Setting new future strategy stack:
[17:44:23.767] List of future strategies:
[17:44:23.767] 1. sequential:
[17:44:23.767]    - args: function (..., envir = parent.frame())
[17:44:23.767]    - tweaked: FALSE
[17:44:23.767]    - call: NULL
[17:44:23.768] plan(): nbrOfWorkers() = 1
[17:44:23.777] plan(): Setting new future strategy stack:
[17:44:23.777] List of future strategies:
[17:44:23.777] 1. multicore:
[17:44:23.777]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.777]    - tweaked: FALSE
[17:44:23.777]    - call: plan(strategy)
[17:44:23.783] plan(): nbrOfWorkers() = 2
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[17:44:23.784] getGlobalsAndPackages() ...
[17:44:23.785] Searching for globals...
[17:44:23.788] - globals found: [1] ‘print’
[17:44:23.788] Searching for globals ... DONE
[17:44:23.788] Resolving globals: FALSE
[17:44:23.789] 
[17:44:23.789] 
[17:44:23.789] getGlobalsAndPackages() ... DONE
[17:44:23.790] run() for ‘Future’ ...
[17:44:23.790] - state: ‘created’
[17:44:23.790] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.794] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.794] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.794]   - Field: ‘label’
[17:44:23.795]   - Field: ‘local’
[17:44:23.795]   - Field: ‘owner’
[17:44:23.795]   - Field: ‘envir’
[17:44:23.795]   - Field: ‘workers’
[17:44:23.795]   - Field: ‘packages’
[17:44:23.795]   - Field: ‘gc’
[17:44:23.795]   - Field: ‘job’
[17:44:23.795]   - Field: ‘conditions’
[17:44:23.796]   - Field: ‘expr’
[17:44:23.796]   - Field: ‘uuid’
[17:44:23.796]   - Field: ‘seed’
[17:44:23.796]   - Field: ‘version’
[17:44:23.796]   - Field: ‘result’
[17:44:23.796]   - Field: ‘asynchronous’
[17:44:23.796]   - Field: ‘calls’
[17:44:23.796]   - Field: ‘globals’
[17:44:23.797]   - Field: ‘stdout’
[17:44:23.797]   - Field: ‘earlySignal’
[17:44:23.797]   - Field: ‘lazy’
[17:44:23.797]   - Field: ‘state’
[17:44:23.797] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.797] - Launch lazy future ...
[17:44:23.797] Packages needed by the future expression (n = 0): <none>
[17:44:23.798] Packages needed by future strategies (n = 0): <none>
[17:44:23.798] {
[17:44:23.798]     {
[17:44:23.798]         {
[17:44:23.798]             ...future.startTime <- base::Sys.time()
[17:44:23.798]             {
[17:44:23.798]                 {
[17:44:23.798]                   {
[17:44:23.798]                     {
[17:44:23.798]                       base::local({
[17:44:23.798]                         has_future <- base::requireNamespace("future", 
[17:44:23.798]                           quietly = TRUE)
[17:44:23.798]                         if (has_future) {
[17:44:23.798]                           ns <- base::getNamespace("future")
[17:44:23.798]                           version <- ns[[".package"]][["version"]]
[17:44:23.798]                           if (is.null(version)) 
[17:44:23.798]                             version <- utils::packageVersion("future")
[17:44:23.798]                         }
[17:44:23.798]                         else {
[17:44:23.798]                           version <- NULL
[17:44:23.798]                         }
[17:44:23.798]                         if (!has_future || version < "1.8.0") {
[17:44:23.798]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.798]                             "", base::R.version$version.string), 
[17:44:23.798]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.798]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.798]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.798]                               "release", "version")], collapse = " "), 
[17:44:23.798]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.798]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.798]                             info)
[17:44:23.798]                           info <- base::paste(info, collapse = "; ")
[17:44:23.798]                           if (!has_future) {
[17:44:23.798]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.798]                               info)
[17:44:23.798]                           }
[17:44:23.798]                           else {
[17:44:23.798]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.798]                               info, version)
[17:44:23.798]                           }
[17:44:23.798]                           base::stop(msg)
[17:44:23.798]                         }
[17:44:23.798]                       })
[17:44:23.798]                     }
[17:44:23.798]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.798]                     base::options(mc.cores = 1L)
[17:44:23.798]                   }
[17:44:23.798]                   options(future.plan = NULL)
[17:44:23.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.798]                 }
[17:44:23.798]                 ...future.workdir <- getwd()
[17:44:23.798]             }
[17:44:23.798]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.798]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.798]         }
[17:44:23.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.798]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.798]             base::names(...future.oldOptions))
[17:44:23.798]     }
[17:44:23.798]     if (FALSE) {
[17:44:23.798]     }
[17:44:23.798]     else {
[17:44:23.798]         if (TRUE) {
[17:44:23.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.798]                 open = "w")
[17:44:23.798]         }
[17:44:23.798]         else {
[17:44:23.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.798]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.798]         }
[17:44:23.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.798]             base::sink(type = "output", split = FALSE)
[17:44:23.798]             base::close(...future.stdout)
[17:44:23.798]         }, add = TRUE)
[17:44:23.798]     }
[17:44:23.798]     ...future.frame <- base::sys.nframe()
[17:44:23.798]     ...future.conditions <- base::list()
[17:44:23.798]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.798]     if (FALSE) {
[17:44:23.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.798]     }
[17:44:23.798]     ...future.result <- base::tryCatch({
[17:44:23.798]         base::withCallingHandlers({
[17:44:23.798]             ...future.value <- base::withVisible(base::local({
[17:44:23.798]                 withCallingHandlers({
[17:44:23.798]                   print(42)
[17:44:23.798]                 }, immediateCondition = function(cond) {
[17:44:23.798]                   save_rds <- function (object, pathname, ...) 
[17:44:23.798]                   {
[17:44:23.798]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.798]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.798]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.798]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.798]                         fi_tmp[["mtime"]])
[17:44:23.798]                     }
[17:44:23.798]                     tryCatch({
[17:44:23.798]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.798]                     }, error = function(ex) {
[17:44:23.798]                       msg <- conditionMessage(ex)
[17:44:23.798]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.798]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.798]                         fi_tmp[["mtime"]], msg)
[17:44:23.798]                       ex$message <- msg
[17:44:23.798]                       stop(ex)
[17:44:23.798]                     })
[17:44:23.798]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.798]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.798]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.798]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.798]                       fi <- file.info(pathname)
[17:44:23.798]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.798]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.798]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.798]                         fi[["size"]], fi[["mtime"]])
[17:44:23.798]                       stop(msg)
[17:44:23.798]                     }
[17:44:23.798]                     invisible(pathname)
[17:44:23.798]                   }
[17:44:23.798]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.798]                     rootPath = tempdir()) 
[17:44:23.798]                   {
[17:44:23.798]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.798]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.798]                       tmpdir = path, fileext = ".rds")
[17:44:23.798]                     save_rds(obj, file)
[17:44:23.798]                   }
[17:44:23.798]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.798]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.798]                   {
[17:44:23.798]                     inherits <- base::inherits
[17:44:23.798]                     invokeRestart <- base::invokeRestart
[17:44:23.798]                     is.null <- base::is.null
[17:44:23.798]                     muffled <- FALSE
[17:44:23.798]                     if (inherits(cond, "message")) {
[17:44:23.798]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.798]                       if (muffled) 
[17:44:23.798]                         invokeRestart("muffleMessage")
[17:44:23.798]                     }
[17:44:23.798]                     else if (inherits(cond, "warning")) {
[17:44:23.798]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.798]                       if (muffled) 
[17:44:23.798]                         invokeRestart("muffleWarning")
[17:44:23.798]                     }
[17:44:23.798]                     else if (inherits(cond, "condition")) {
[17:44:23.798]                       if (!is.null(pattern)) {
[17:44:23.798]                         computeRestarts <- base::computeRestarts
[17:44:23.798]                         grepl <- base::grepl
[17:44:23.798]                         restarts <- computeRestarts(cond)
[17:44:23.798]                         for (restart in restarts) {
[17:44:23.798]                           name <- restart$name
[17:44:23.798]                           if (is.null(name)) 
[17:44:23.798]                             next
[17:44:23.798]                           if (!grepl(pattern, name)) 
[17:44:23.798]                             next
[17:44:23.798]                           invokeRestart(restart)
[17:44:23.798]                           muffled <- TRUE
[17:44:23.798]                           break
[17:44:23.798]                         }
[17:44:23.798]                       }
[17:44:23.798]                     }
[17:44:23.798]                     invisible(muffled)
[17:44:23.798]                   }
[17:44:23.798]                   muffleCondition(cond)
[17:44:23.798]                 })
[17:44:23.798]             }))
[17:44:23.798]             future::FutureResult(value = ...future.value$value, 
[17:44:23.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.798]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.798]                     ...future.globalenv.names))
[17:44:23.798]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.798]         }, condition = base::local({
[17:44:23.798]             c <- base::c
[17:44:23.798]             inherits <- base::inherits
[17:44:23.798]             invokeRestart <- base::invokeRestart
[17:44:23.798]             length <- base::length
[17:44:23.798]             list <- base::list
[17:44:23.798]             seq.int <- base::seq.int
[17:44:23.798]             signalCondition <- base::signalCondition
[17:44:23.798]             sys.calls <- base::sys.calls
[17:44:23.798]             `[[` <- base::`[[`
[17:44:23.798]             `+` <- base::`+`
[17:44:23.798]             `<<-` <- base::`<<-`
[17:44:23.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.798]                   3L)]
[17:44:23.798]             }
[17:44:23.798]             function(cond) {
[17:44:23.798]                 is_error <- inherits(cond, "error")
[17:44:23.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.798]                   NULL)
[17:44:23.798]                 if (is_error) {
[17:44:23.798]                   sessionInformation <- function() {
[17:44:23.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.798]                       search = base::search(), system = base::Sys.info())
[17:44:23.798]                   }
[17:44:23.798]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.798]                     cond$call), session = sessionInformation(), 
[17:44:23.798]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.798]                   signalCondition(cond)
[17:44:23.798]                 }
[17:44:23.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.798]                 "immediateCondition"))) {
[17:44:23.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.798]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.798]                   if (TRUE && !signal) {
[17:44:23.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.798]                     {
[17:44:23.798]                       inherits <- base::inherits
[17:44:23.798]                       invokeRestart <- base::invokeRestart
[17:44:23.798]                       is.null <- base::is.null
[17:44:23.798]                       muffled <- FALSE
[17:44:23.798]                       if (inherits(cond, "message")) {
[17:44:23.798]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.798]                         if (muffled) 
[17:44:23.798]                           invokeRestart("muffleMessage")
[17:44:23.798]                       }
[17:44:23.798]                       else if (inherits(cond, "warning")) {
[17:44:23.798]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.798]                         if (muffled) 
[17:44:23.798]                           invokeRestart("muffleWarning")
[17:44:23.798]                       }
[17:44:23.798]                       else if (inherits(cond, "condition")) {
[17:44:23.798]                         if (!is.null(pattern)) {
[17:44:23.798]                           computeRestarts <- base::computeRestarts
[17:44:23.798]                           grepl <- base::grepl
[17:44:23.798]                           restarts <- computeRestarts(cond)
[17:44:23.798]                           for (restart in restarts) {
[17:44:23.798]                             name <- restart$name
[17:44:23.798]                             if (is.null(name)) 
[17:44:23.798]                               next
[17:44:23.798]                             if (!grepl(pattern, name)) 
[17:44:23.798]                               next
[17:44:23.798]                             invokeRestart(restart)
[17:44:23.798]                             muffled <- TRUE
[17:44:23.798]                             break
[17:44:23.798]                           }
[17:44:23.798]                         }
[17:44:23.798]                       }
[17:44:23.798]                       invisible(muffled)
[17:44:23.798]                     }
[17:44:23.798]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.798]                   }
[17:44:23.798]                 }
[17:44:23.798]                 else {
[17:44:23.798]                   if (TRUE) {
[17:44:23.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.798]                     {
[17:44:23.798]                       inherits <- base::inherits
[17:44:23.798]                       invokeRestart <- base::invokeRestart
[17:44:23.798]                       is.null <- base::is.null
[17:44:23.798]                       muffled <- FALSE
[17:44:23.798]                       if (inherits(cond, "message")) {
[17:44:23.798]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.798]                         if (muffled) 
[17:44:23.798]                           invokeRestart("muffleMessage")
[17:44:23.798]                       }
[17:44:23.798]                       else if (inherits(cond, "warning")) {
[17:44:23.798]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.798]                         if (muffled) 
[17:44:23.798]                           invokeRestart("muffleWarning")
[17:44:23.798]                       }
[17:44:23.798]                       else if (inherits(cond, "condition")) {
[17:44:23.798]                         if (!is.null(pattern)) {
[17:44:23.798]                           computeRestarts <- base::computeRestarts
[17:44:23.798]                           grepl <- base::grepl
[17:44:23.798]                           restarts <- computeRestarts(cond)
[17:44:23.798]                           for (restart in restarts) {
[17:44:23.798]                             name <- restart$name
[17:44:23.798]                             if (is.null(name)) 
[17:44:23.798]                               next
[17:44:23.798]                             if (!grepl(pattern, name)) 
[17:44:23.798]                               next
[17:44:23.798]                             invokeRestart(restart)
[17:44:23.798]                             muffled <- TRUE
[17:44:23.798]                             break
[17:44:23.798]                           }
[17:44:23.798]                         }
[17:44:23.798]                       }
[17:44:23.798]                       invisible(muffled)
[17:44:23.798]                     }
[17:44:23.798]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.798]                   }
[17:44:23.798]                 }
[17:44:23.798]             }
[17:44:23.798]         }))
[17:44:23.798]     }, error = function(ex) {
[17:44:23.798]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.798]                 ...future.rng), started = ...future.startTime, 
[17:44:23.798]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.798]             version = "1.8"), class = "FutureResult")
[17:44:23.798]     }, finally = {
[17:44:23.798]         if (!identical(...future.workdir, getwd())) 
[17:44:23.798]             setwd(...future.workdir)
[17:44:23.798]         {
[17:44:23.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.798]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.798]             }
[17:44:23.798]             base::options(...future.oldOptions)
[17:44:23.798]             if (.Platform$OS.type == "windows") {
[17:44:23.798]                 old_names <- names(...future.oldEnvVars)
[17:44:23.798]                 envs <- base::Sys.getenv()
[17:44:23.798]                 names <- names(envs)
[17:44:23.798]                 common <- intersect(names, old_names)
[17:44:23.798]                 added <- setdiff(names, old_names)
[17:44:23.798]                 removed <- setdiff(old_names, names)
[17:44:23.798]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.798]                   envs[common]]
[17:44:23.798]                 NAMES <- toupper(changed)
[17:44:23.798]                 args <- list()
[17:44:23.798]                 for (kk in seq_along(NAMES)) {
[17:44:23.798]                   name <- changed[[kk]]
[17:44:23.798]                   NAME <- NAMES[[kk]]
[17:44:23.798]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.798]                     next
[17:44:23.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.798]                 }
[17:44:23.798]                 NAMES <- toupper(added)
[17:44:23.798]                 for (kk in seq_along(NAMES)) {
[17:44:23.798]                   name <- added[[kk]]
[17:44:23.798]                   NAME <- NAMES[[kk]]
[17:44:23.798]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.798]                     next
[17:44:23.798]                   args[[name]] <- ""
[17:44:23.798]                 }
[17:44:23.798]                 NAMES <- toupper(removed)
[17:44:23.798]                 for (kk in seq_along(NAMES)) {
[17:44:23.798]                   name <- removed[[kk]]
[17:44:23.798]                   NAME <- NAMES[[kk]]
[17:44:23.798]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.798]                     next
[17:44:23.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.798]                 }
[17:44:23.798]                 if (length(args) > 0) 
[17:44:23.798]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.798]             }
[17:44:23.798]             else {
[17:44:23.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.798]             }
[17:44:23.798]             {
[17:44:23.798]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.798]                   0L) {
[17:44:23.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.798]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.798]                   base::options(opts)
[17:44:23.798]                 }
[17:44:23.798]                 {
[17:44:23.798]                   {
[17:44:23.798]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.798]                     NULL
[17:44:23.798]                   }
[17:44:23.798]                   options(future.plan = NULL)
[17:44:23.798]                   if (is.na(NA_character_)) 
[17:44:23.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.798]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.798]                     envir = parent.frame()) 
[17:44:23.798]                   {
[17:44:23.798]                     default_workers <- missing(workers)
[17:44:23.798]                     if (is.function(workers)) 
[17:44:23.798]                       workers <- workers()
[17:44:23.798]                     workers <- structure(as.integer(workers), 
[17:44:23.798]                       class = class(workers))
[17:44:23.798]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.798]                       1L)
[17:44:23.798]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.798]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.798]                       if (default_workers) 
[17:44:23.798]                         supportsMulticore(warn = TRUE)
[17:44:23.798]                       return(sequential(..., envir = envir))
[17:44:23.798]                     }
[17:44:23.798]                     oopts <- options(mc.cores = workers)
[17:44:23.798]                     on.exit(options(oopts))
[17:44:23.798]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.798]                       envir = envir)
[17:44:23.798]                     if (!future$lazy) 
[17:44:23.798]                       future <- run(future)
[17:44:23.798]                     invisible(future)
[17:44:23.798]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.798]                 }
[17:44:23.798]             }
[17:44:23.798]         }
[17:44:23.798]     })
[17:44:23.798]     if (TRUE) {
[17:44:23.798]         base::sink(type = "output", split = FALSE)
[17:44:23.798]         if (TRUE) {
[17:44:23.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.798]         }
[17:44:23.798]         else {
[17:44:23.798]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.798]         }
[17:44:23.798]         base::close(...future.stdout)
[17:44:23.798]         ...future.stdout <- NULL
[17:44:23.798]     }
[17:44:23.798]     ...future.result$conditions <- ...future.conditions
[17:44:23.798]     ...future.result$finished <- base::Sys.time()
[17:44:23.798]     ...future.result
[17:44:23.798] }
[17:44:23.801] requestCore(): workers = 2
[17:44:23.803] MulticoreFuture started
[17:44:23.803] - Launch lazy future ... done
[17:44:23.803] run() for ‘MulticoreFuture’ ... done
[17:44:23.804] plan(): Setting new future strategy stack:
[17:44:23.804] List of future strategies:
[17:44:23.804] 1. sequential:
[17:44:23.804]    - args: function (..., envir = parent.frame())
[17:44:23.804]    - tweaked: FALSE
[17:44:23.804]    - call: NULL
[17:44:23.805] plan(): nbrOfWorkers() = 1
[17:44:23.807] plan(): Setting new future strategy stack:
[17:44:23.808] List of future strategies:
[17:44:23.808] 1. multicore:
[17:44:23.808]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.808]    - tweaked: FALSE
[17:44:23.808]    - call: plan(strategy)
[17:44:23.813] plan(): nbrOfWorkers() = 2
[1] 42
- stdout = FALSE
[17:44:23.814] getGlobalsAndPackages() ...
[17:44:23.815] Searching for globals...
[17:44:23.819] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.819] Searching for globals ... DONE
[17:44:23.819] Resolving globals: FALSE
[17:44:23.820] 
[17:44:23.820] - packages: [1] ‘utils’
[17:44:23.820] getGlobalsAndPackages() ... DONE
[17:44:23.820] run() for ‘Future’ ...
[17:44:23.820] - state: ‘created’
[17:44:23.821] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.825] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.825] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.825]   - Field: ‘label’
[17:44:23.825]   - Field: ‘local’
[17:44:23.825]   - Field: ‘owner’
[17:44:23.825]   - Field: ‘envir’
[17:44:23.825]   - Field: ‘workers’
[17:44:23.826]   - Field: ‘packages’
[17:44:23.826]   - Field: ‘gc’
[17:44:23.826]   - Field: ‘job’
[17:44:23.826]   - Field: ‘conditions’
[17:44:23.826]   - Field: ‘expr’
[17:44:23.826]   - Field: ‘uuid’
[17:44:23.826]   - Field: ‘seed’
[17:44:23.826]   - Field: ‘version’
[17:44:23.826]   - Field: ‘result’
[17:44:23.827]   - Field: ‘asynchronous’
[17:44:23.827]   - Field: ‘calls’
[17:44:23.827]   - Field: ‘globals’
[17:44:23.827]   - Field: ‘stdout’
[17:44:23.827]   - Field: ‘earlySignal’
[17:44:23.827]   - Field: ‘lazy’
[17:44:23.827]   - Field: ‘state’
[17:44:23.827] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.828] - Launch lazy future ...
[17:44:23.828] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.828] Packages needed by future strategies (n = 0): <none>
[17:44:23.829] {
[17:44:23.829]     {
[17:44:23.829]         {
[17:44:23.829]             ...future.startTime <- base::Sys.time()
[17:44:23.829]             {
[17:44:23.829]                 {
[17:44:23.829]                   {
[17:44:23.829]                     {
[17:44:23.829]                       {
[17:44:23.829]                         base::local({
[17:44:23.829]                           has_future <- base::requireNamespace("future", 
[17:44:23.829]                             quietly = TRUE)
[17:44:23.829]                           if (has_future) {
[17:44:23.829]                             ns <- base::getNamespace("future")
[17:44:23.829]                             version <- ns[[".package"]][["version"]]
[17:44:23.829]                             if (is.null(version)) 
[17:44:23.829]                               version <- utils::packageVersion("future")
[17:44:23.829]                           }
[17:44:23.829]                           else {
[17:44:23.829]                             version <- NULL
[17:44:23.829]                           }
[17:44:23.829]                           if (!has_future || version < "1.8.0") {
[17:44:23.829]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.829]                               "", base::R.version$version.string), 
[17:44:23.829]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:23.829]                                 base::R.version$platform, 8 * 
[17:44:23.829]                                   base::.Machine$sizeof.pointer), 
[17:44:23.829]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.829]                                 "release", "version")], collapse = " "), 
[17:44:23.829]                               hostname = base::Sys.info()[["nodename"]])
[17:44:23.829]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.829]                               info)
[17:44:23.829]                             info <- base::paste(info, collapse = "; ")
[17:44:23.829]                             if (!has_future) {
[17:44:23.829]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.829]                                 info)
[17:44:23.829]                             }
[17:44:23.829]                             else {
[17:44:23.829]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.829]                                 info, version)
[17:44:23.829]                             }
[17:44:23.829]                             base::stop(msg)
[17:44:23.829]                           }
[17:44:23.829]                         })
[17:44:23.829]                       }
[17:44:23.829]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.829]                       base::options(mc.cores = 1L)
[17:44:23.829]                     }
[17:44:23.829]                     base::local({
[17:44:23.829]                       for (pkg in "utils") {
[17:44:23.829]                         base::loadNamespace(pkg)
[17:44:23.829]                         base::library(pkg, character.only = TRUE)
[17:44:23.829]                       }
[17:44:23.829]                     })
[17:44:23.829]                   }
[17:44:23.829]                   options(future.plan = NULL)
[17:44:23.829]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.829]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.829]                 }
[17:44:23.829]                 ...future.workdir <- getwd()
[17:44:23.829]             }
[17:44:23.829]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.829]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.829]         }
[17:44:23.829]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.829]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.829]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.829]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.829]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.829]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.829]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.829]             base::names(...future.oldOptions))
[17:44:23.829]     }
[17:44:23.829]     if (FALSE) {
[17:44:23.829]     }
[17:44:23.829]     else {
[17:44:23.829]         if (FALSE) {
[17:44:23.829]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.829]                 open = "w")
[17:44:23.829]         }
[17:44:23.829]         else {
[17:44:23.829]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.829]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.829]         }
[17:44:23.829]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.829]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.829]             base::sink(type = "output", split = FALSE)
[17:44:23.829]             base::close(...future.stdout)
[17:44:23.829]         }, add = TRUE)
[17:44:23.829]     }
[17:44:23.829]     ...future.frame <- base::sys.nframe()
[17:44:23.829]     ...future.conditions <- base::list()
[17:44:23.829]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.829]     if (FALSE) {
[17:44:23.829]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.829]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.829]     }
[17:44:23.829]     ...future.result <- base::tryCatch({
[17:44:23.829]         base::withCallingHandlers({
[17:44:23.829]             ...future.value <- base::withVisible(base::local({
[17:44:23.829]                 withCallingHandlers({
[17:44:23.829]                   {
[17:44:23.829]                     print(1:50)
[17:44:23.829]                     str(1:50)
[17:44:23.829]                     cat(letters, sep = "-")
[17:44:23.829]                     cat(1:6, collapse = "\n")
[17:44:23.829]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.829]                     42L
[17:44:23.829]                   }
[17:44:23.829]                 }, immediateCondition = function(cond) {
[17:44:23.829]                   save_rds <- function (object, pathname, ...) 
[17:44:23.829]                   {
[17:44:23.829]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.829]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.829]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.829]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.829]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.829]                         fi_tmp[["mtime"]])
[17:44:23.829]                     }
[17:44:23.829]                     tryCatch({
[17:44:23.829]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.829]                     }, error = function(ex) {
[17:44:23.829]                       msg <- conditionMessage(ex)
[17:44:23.829]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.829]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.829]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.829]                         fi_tmp[["mtime"]], msg)
[17:44:23.829]                       ex$message <- msg
[17:44:23.829]                       stop(ex)
[17:44:23.829]                     })
[17:44:23.829]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.829]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.829]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.829]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.829]                       fi <- file.info(pathname)
[17:44:23.829]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.829]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.829]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.829]                         fi[["size"]], fi[["mtime"]])
[17:44:23.829]                       stop(msg)
[17:44:23.829]                     }
[17:44:23.829]                     invisible(pathname)
[17:44:23.829]                   }
[17:44:23.829]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.829]                     rootPath = tempdir()) 
[17:44:23.829]                   {
[17:44:23.829]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.829]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.829]                       tmpdir = path, fileext = ".rds")
[17:44:23.829]                     save_rds(obj, file)
[17:44:23.829]                   }
[17:44:23.829]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.829]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.829]                   {
[17:44:23.829]                     inherits <- base::inherits
[17:44:23.829]                     invokeRestart <- base::invokeRestart
[17:44:23.829]                     is.null <- base::is.null
[17:44:23.829]                     muffled <- FALSE
[17:44:23.829]                     if (inherits(cond, "message")) {
[17:44:23.829]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.829]                       if (muffled) 
[17:44:23.829]                         invokeRestart("muffleMessage")
[17:44:23.829]                     }
[17:44:23.829]                     else if (inherits(cond, "warning")) {
[17:44:23.829]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.829]                       if (muffled) 
[17:44:23.829]                         invokeRestart("muffleWarning")
[17:44:23.829]                     }
[17:44:23.829]                     else if (inherits(cond, "condition")) {
[17:44:23.829]                       if (!is.null(pattern)) {
[17:44:23.829]                         computeRestarts <- base::computeRestarts
[17:44:23.829]                         grepl <- base::grepl
[17:44:23.829]                         restarts <- computeRestarts(cond)
[17:44:23.829]                         for (restart in restarts) {
[17:44:23.829]                           name <- restart$name
[17:44:23.829]                           if (is.null(name)) 
[17:44:23.829]                             next
[17:44:23.829]                           if (!grepl(pattern, name)) 
[17:44:23.829]                             next
[17:44:23.829]                           invokeRestart(restart)
[17:44:23.829]                           muffled <- TRUE
[17:44:23.829]                           break
[17:44:23.829]                         }
[17:44:23.829]                       }
[17:44:23.829]                     }
[17:44:23.829]                     invisible(muffled)
[17:44:23.829]                   }
[17:44:23.829]                   muffleCondition(cond)
[17:44:23.829]                 })
[17:44:23.829]             }))
[17:44:23.829]             future::FutureResult(value = ...future.value$value, 
[17:44:23.829]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.829]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.829]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.829]                     ...future.globalenv.names))
[17:44:23.829]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.829]         }, condition = base::local({
[17:44:23.829]             c <- base::c
[17:44:23.829]             inherits <- base::inherits
[17:44:23.829]             invokeRestart <- base::invokeRestart
[17:44:23.829]             length <- base::length
[17:44:23.829]             list <- base::list
[17:44:23.829]             seq.int <- base::seq.int
[17:44:23.829]             signalCondition <- base::signalCondition
[17:44:23.829]             sys.calls <- base::sys.calls
[17:44:23.829]             `[[` <- base::`[[`
[17:44:23.829]             `+` <- base::`+`
[17:44:23.829]             `<<-` <- base::`<<-`
[17:44:23.829]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.829]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.829]                   3L)]
[17:44:23.829]             }
[17:44:23.829]             function(cond) {
[17:44:23.829]                 is_error <- inherits(cond, "error")
[17:44:23.829]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.829]                   NULL)
[17:44:23.829]                 if (is_error) {
[17:44:23.829]                   sessionInformation <- function() {
[17:44:23.829]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.829]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.829]                       search = base::search(), system = base::Sys.info())
[17:44:23.829]                   }
[17:44:23.829]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.829]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.829]                     cond$call), session = sessionInformation(), 
[17:44:23.829]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.829]                   signalCondition(cond)
[17:44:23.829]                 }
[17:44:23.829]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.829]                 "immediateCondition"))) {
[17:44:23.829]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.829]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.829]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.829]                   if (TRUE && !signal) {
[17:44:23.829]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.829]                     {
[17:44:23.829]                       inherits <- base::inherits
[17:44:23.829]                       invokeRestart <- base::invokeRestart
[17:44:23.829]                       is.null <- base::is.null
[17:44:23.829]                       muffled <- FALSE
[17:44:23.829]                       if (inherits(cond, "message")) {
[17:44:23.829]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.829]                         if (muffled) 
[17:44:23.829]                           invokeRestart("muffleMessage")
[17:44:23.829]                       }
[17:44:23.829]                       else if (inherits(cond, "warning")) {
[17:44:23.829]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.829]                         if (muffled) 
[17:44:23.829]                           invokeRestart("muffleWarning")
[17:44:23.829]                       }
[17:44:23.829]                       else if (inherits(cond, "condition")) {
[17:44:23.829]                         if (!is.null(pattern)) {
[17:44:23.829]                           computeRestarts <- base::computeRestarts
[17:44:23.829]                           grepl <- base::grepl
[17:44:23.829]                           restarts <- computeRestarts(cond)
[17:44:23.829]                           for (restart in restarts) {
[17:44:23.829]                             name <- restart$name
[17:44:23.829]                             if (is.null(name)) 
[17:44:23.829]                               next
[17:44:23.829]                             if (!grepl(pattern, name)) 
[17:44:23.829]                               next
[17:44:23.829]                             invokeRestart(restart)
[17:44:23.829]                             muffled <- TRUE
[17:44:23.829]                             break
[17:44:23.829]                           }
[17:44:23.829]                         }
[17:44:23.829]                       }
[17:44:23.829]                       invisible(muffled)
[17:44:23.829]                     }
[17:44:23.829]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.829]                   }
[17:44:23.829]                 }
[17:44:23.829]                 else {
[17:44:23.829]                   if (TRUE) {
[17:44:23.829]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.829]                     {
[17:44:23.829]                       inherits <- base::inherits
[17:44:23.829]                       invokeRestart <- base::invokeRestart
[17:44:23.829]                       is.null <- base::is.null
[17:44:23.829]                       muffled <- FALSE
[17:44:23.829]                       if (inherits(cond, "message")) {
[17:44:23.829]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.829]                         if (muffled) 
[17:44:23.829]                           invokeRestart("muffleMessage")
[17:44:23.829]                       }
[17:44:23.829]                       else if (inherits(cond, "warning")) {
[17:44:23.829]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.829]                         if (muffled) 
[17:44:23.829]                           invokeRestart("muffleWarning")
[17:44:23.829]                       }
[17:44:23.829]                       else if (inherits(cond, "condition")) {
[17:44:23.829]                         if (!is.null(pattern)) {
[17:44:23.829]                           computeRestarts <- base::computeRestarts
[17:44:23.829]                           grepl <- base::grepl
[17:44:23.829]                           restarts <- computeRestarts(cond)
[17:44:23.829]                           for (restart in restarts) {
[17:44:23.829]                             name <- restart$name
[17:44:23.829]                             if (is.null(name)) 
[17:44:23.829]                               next
[17:44:23.829]                             if (!grepl(pattern, name)) 
[17:44:23.829]                               next
[17:44:23.829]                             invokeRestart(restart)
[17:44:23.829]                             muffled <- TRUE
[17:44:23.829]                             break
[17:44:23.829]                           }
[17:44:23.829]                         }
[17:44:23.829]                       }
[17:44:23.829]                       invisible(muffled)
[17:44:23.829]                     }
[17:44:23.829]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.829]                   }
[17:44:23.829]                 }
[17:44:23.829]             }
[17:44:23.829]         }))
[17:44:23.829]     }, error = function(ex) {
[17:44:23.829]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.829]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.829]                 ...future.rng), started = ...future.startTime, 
[17:44:23.829]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.829]             version = "1.8"), class = "FutureResult")
[17:44:23.829]     }, finally = {
[17:44:23.829]         if (!identical(...future.workdir, getwd())) 
[17:44:23.829]             setwd(...future.workdir)
[17:44:23.829]         {
[17:44:23.829]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.829]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.829]             }
[17:44:23.829]             base::options(...future.oldOptions)
[17:44:23.829]             if (.Platform$OS.type == "windows") {
[17:44:23.829]                 old_names <- names(...future.oldEnvVars)
[17:44:23.829]                 envs <- base::Sys.getenv()
[17:44:23.829]                 names <- names(envs)
[17:44:23.829]                 common <- intersect(names, old_names)
[17:44:23.829]                 added <- setdiff(names, old_names)
[17:44:23.829]                 removed <- setdiff(old_names, names)
[17:44:23.829]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.829]                   envs[common]]
[17:44:23.829]                 NAMES <- toupper(changed)
[17:44:23.829]                 args <- list()
[17:44:23.829]                 for (kk in seq_along(NAMES)) {
[17:44:23.829]                   name <- changed[[kk]]
[17:44:23.829]                   NAME <- NAMES[[kk]]
[17:44:23.829]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.829]                     next
[17:44:23.829]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.829]                 }
[17:44:23.829]                 NAMES <- toupper(added)
[17:44:23.829]                 for (kk in seq_along(NAMES)) {
[17:44:23.829]                   name <- added[[kk]]
[17:44:23.829]                   NAME <- NAMES[[kk]]
[17:44:23.829]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.829]                     next
[17:44:23.829]                   args[[name]] <- ""
[17:44:23.829]                 }
[17:44:23.829]                 NAMES <- toupper(removed)
[17:44:23.829]                 for (kk in seq_along(NAMES)) {
[17:44:23.829]                   name <- removed[[kk]]
[17:44:23.829]                   NAME <- NAMES[[kk]]
[17:44:23.829]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.829]                     next
[17:44:23.829]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.829]                 }
[17:44:23.829]                 if (length(args) > 0) 
[17:44:23.829]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.829]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.829]             }
[17:44:23.829]             else {
[17:44:23.829]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.829]             }
[17:44:23.829]             {
[17:44:23.829]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.829]                   0L) {
[17:44:23.829]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.829]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.829]                   base::options(opts)
[17:44:23.829]                 }
[17:44:23.829]                 {
[17:44:23.829]                   {
[17:44:23.829]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.829]                     NULL
[17:44:23.829]                   }
[17:44:23.829]                   options(future.plan = NULL)
[17:44:23.829]                   if (is.na(NA_character_)) 
[17:44:23.829]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.829]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.829]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.829]                     envir = parent.frame()) 
[17:44:23.829]                   {
[17:44:23.829]                     default_workers <- missing(workers)
[17:44:23.829]                     if (is.function(workers)) 
[17:44:23.829]                       workers <- workers()
[17:44:23.829]                     workers <- structure(as.integer(workers), 
[17:44:23.829]                       class = class(workers))
[17:44:23.829]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.829]                       1L)
[17:44:23.829]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.829]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.829]                       if (default_workers) 
[17:44:23.829]                         supportsMulticore(warn = TRUE)
[17:44:23.829]                       return(sequential(..., envir = envir))
[17:44:23.829]                     }
[17:44:23.829]                     oopts <- options(mc.cores = workers)
[17:44:23.829]                     on.exit(options(oopts))
[17:44:23.829]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.829]                       envir = envir)
[17:44:23.829]                     if (!future$lazy) 
[17:44:23.829]                       future <- run(future)
[17:44:23.829]                     invisible(future)
[17:44:23.829]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.829]                 }
[17:44:23.829]             }
[17:44:23.829]         }
[17:44:23.829]     })
[17:44:23.829]     if (TRUE) {
[17:44:23.829]         base::sink(type = "output", split = FALSE)
[17:44:23.829]         if (FALSE) {
[17:44:23.829]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.829]         }
[17:44:23.829]         else {
[17:44:23.829]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.829]         }
[17:44:23.829]         base::close(...future.stdout)
[17:44:23.829]         ...future.stdout <- NULL
[17:44:23.829]     }
[17:44:23.829]     ...future.result$conditions <- ...future.conditions
[17:44:23.829]     ...future.result$finished <- base::Sys.time()
[17:44:23.829]     ...future.result
[17:44:23.829] }
[17:44:23.832] requestCore(): workers = 2
[17:44:23.833] MulticoreFuture started
[17:44:23.834] - Launch lazy future ... done
[17:44:23.834] run() for ‘MulticoreFuture’ ... done
[17:44:23.835] plan(): Setting new future strategy stack:
[17:44:23.835] List of future strategies:
[17:44:23.835] 1. sequential:
[17:44:23.835]    - args: function (..., envir = parent.frame())
[17:44:23.835]    - tweaked: FALSE
[17:44:23.835]    - call: NULL
[17:44:23.836] plan(): nbrOfWorkers() = 1
[17:44:23.840] plan(): Setting new future strategy stack:
[17:44:23.840] List of future strategies:
[17:44:23.840] 1. multicore:
[17:44:23.840]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.840]    - tweaked: FALSE
[17:44:23.840]    - call: plan(strategy)
[17:44:23.845] plan(): nbrOfWorkers() = 2
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ session_uuid: chr "1ad96518-1208-662f-1112-2f0caa7ced7c"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53799
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:23"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:23.859] getGlobalsAndPackages() ...
[17:44:23.859] Searching for globals...
[17:44:23.863] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.863] Searching for globals ... DONE
[17:44:23.863] Resolving globals: FALSE
[17:44:23.864] 
[17:44:23.864] - packages: [1] ‘utils’
[17:44:23.864] getGlobalsAndPackages() ... DONE
[17:44:23.864] run() for ‘Future’ ...
[17:44:23.864] - state: ‘created’
[17:44:23.865] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.869] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.869] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.869]   - Field: ‘label’
[17:44:23.869]   - Field: ‘local’
[17:44:23.870]   - Field: ‘owner’
[17:44:23.870]   - Field: ‘envir’
[17:44:23.870]   - Field: ‘workers’
[17:44:23.870]   - Field: ‘packages’
[17:44:23.870]   - Field: ‘gc’
[17:44:23.870]   - Field: ‘job’
[17:44:23.870]   - Field: ‘conditions’
[17:44:23.871]   - Field: ‘expr’
[17:44:23.871]   - Field: ‘uuid’
[17:44:23.871]   - Field: ‘seed’
[17:44:23.871]   - Field: ‘version’
[17:44:23.871]   - Field: ‘result’
[17:44:23.871]   - Field: ‘asynchronous’
[17:44:23.871]   - Field: ‘calls’
[17:44:23.871]   - Field: ‘globals’
[17:44:23.871]   - Field: ‘stdout’
[17:44:23.872]   - Field: ‘earlySignal’
[17:44:23.872]   - Field: ‘lazy’
[17:44:23.872]   - Field: ‘state’
[17:44:23.872] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.872] - Launch lazy future ...
[17:44:23.872] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.873] Packages needed by future strategies (n = 0): <none>
[17:44:23.873] {
[17:44:23.873]     {
[17:44:23.873]         {
[17:44:23.873]             ...future.startTime <- base::Sys.time()
[17:44:23.873]             {
[17:44:23.873]                 {
[17:44:23.873]                   {
[17:44:23.873]                     {
[17:44:23.873]                       {
[17:44:23.873]                         base::local({
[17:44:23.873]                           has_future <- base::requireNamespace("future", 
[17:44:23.873]                             quietly = TRUE)
[17:44:23.873]                           if (has_future) {
[17:44:23.873]                             ns <- base::getNamespace("future")
[17:44:23.873]                             version <- ns[[".package"]][["version"]]
[17:44:23.873]                             if (is.null(version)) 
[17:44:23.873]                               version <- utils::packageVersion("future")
[17:44:23.873]                           }
[17:44:23.873]                           else {
[17:44:23.873]                             version <- NULL
[17:44:23.873]                           }
[17:44:23.873]                           if (!has_future || version < "1.8.0") {
[17:44:23.873]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.873]                               "", base::R.version$version.string), 
[17:44:23.873]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:23.873]                                 base::R.version$platform, 8 * 
[17:44:23.873]                                   base::.Machine$sizeof.pointer), 
[17:44:23.873]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.873]                                 "release", "version")], collapse = " "), 
[17:44:23.873]                               hostname = base::Sys.info()[["nodename"]])
[17:44:23.873]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.873]                               info)
[17:44:23.873]                             info <- base::paste(info, collapse = "; ")
[17:44:23.873]                             if (!has_future) {
[17:44:23.873]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.873]                                 info)
[17:44:23.873]                             }
[17:44:23.873]                             else {
[17:44:23.873]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.873]                                 info, version)
[17:44:23.873]                             }
[17:44:23.873]                             base::stop(msg)
[17:44:23.873]                           }
[17:44:23.873]                         })
[17:44:23.873]                       }
[17:44:23.873]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.873]                       base::options(mc.cores = 1L)
[17:44:23.873]                     }
[17:44:23.873]                     base::local({
[17:44:23.873]                       for (pkg in "utils") {
[17:44:23.873]                         base::loadNamespace(pkg)
[17:44:23.873]                         base::library(pkg, character.only = TRUE)
[17:44:23.873]                       }
[17:44:23.873]                     })
[17:44:23.873]                   }
[17:44:23.873]                   options(future.plan = NULL)
[17:44:23.873]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.873]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.873]                 }
[17:44:23.873]                 ...future.workdir <- getwd()
[17:44:23.873]             }
[17:44:23.873]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.873]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.873]         }
[17:44:23.873]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.873]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.873]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.873]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.873]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.873]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.873]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.873]             base::names(...future.oldOptions))
[17:44:23.873]     }
[17:44:23.873]     if (FALSE) {
[17:44:23.873]     }
[17:44:23.873]     else {
[17:44:23.873]         if (FALSE) {
[17:44:23.873]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.873]                 open = "w")
[17:44:23.873]         }
[17:44:23.873]         else {
[17:44:23.873]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.873]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.873]         }
[17:44:23.873]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.873]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.873]             base::sink(type = "output", split = FALSE)
[17:44:23.873]             base::close(...future.stdout)
[17:44:23.873]         }, add = TRUE)
[17:44:23.873]     }
[17:44:23.873]     ...future.frame <- base::sys.nframe()
[17:44:23.873]     ...future.conditions <- base::list()
[17:44:23.873]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.873]     if (FALSE) {
[17:44:23.873]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.873]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.873]     }
[17:44:23.873]     ...future.result <- base::tryCatch({
[17:44:23.873]         base::withCallingHandlers({
[17:44:23.873]             ...future.value <- base::withVisible(base::local({
[17:44:23.873]                 withCallingHandlers({
[17:44:23.873]                   {
[17:44:23.873]                     print(1:50)
[17:44:23.873]                     str(1:50)
[17:44:23.873]                     cat(letters, sep = "-")
[17:44:23.873]                     cat(1:6, collapse = "\n")
[17:44:23.873]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.873]                     42L
[17:44:23.873]                   }
[17:44:23.873]                 }, immediateCondition = function(cond) {
[17:44:23.873]                   save_rds <- function (object, pathname, ...) 
[17:44:23.873]                   {
[17:44:23.873]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.873]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.873]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.873]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.873]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.873]                         fi_tmp[["mtime"]])
[17:44:23.873]                     }
[17:44:23.873]                     tryCatch({
[17:44:23.873]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.873]                     }, error = function(ex) {
[17:44:23.873]                       msg <- conditionMessage(ex)
[17:44:23.873]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.873]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.873]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.873]                         fi_tmp[["mtime"]], msg)
[17:44:23.873]                       ex$message <- msg
[17:44:23.873]                       stop(ex)
[17:44:23.873]                     })
[17:44:23.873]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.873]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.873]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.873]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.873]                       fi <- file.info(pathname)
[17:44:23.873]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.873]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.873]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.873]                         fi[["size"]], fi[["mtime"]])
[17:44:23.873]                       stop(msg)
[17:44:23.873]                     }
[17:44:23.873]                     invisible(pathname)
[17:44:23.873]                   }
[17:44:23.873]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.873]                     rootPath = tempdir()) 
[17:44:23.873]                   {
[17:44:23.873]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.873]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.873]                       tmpdir = path, fileext = ".rds")
[17:44:23.873]                     save_rds(obj, file)
[17:44:23.873]                   }
[17:44:23.873]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.873]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.873]                   {
[17:44:23.873]                     inherits <- base::inherits
[17:44:23.873]                     invokeRestart <- base::invokeRestart
[17:44:23.873]                     is.null <- base::is.null
[17:44:23.873]                     muffled <- FALSE
[17:44:23.873]                     if (inherits(cond, "message")) {
[17:44:23.873]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.873]                       if (muffled) 
[17:44:23.873]                         invokeRestart("muffleMessage")
[17:44:23.873]                     }
[17:44:23.873]                     else if (inherits(cond, "warning")) {
[17:44:23.873]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.873]                       if (muffled) 
[17:44:23.873]                         invokeRestart("muffleWarning")
[17:44:23.873]                     }
[17:44:23.873]                     else if (inherits(cond, "condition")) {
[17:44:23.873]                       if (!is.null(pattern)) {
[17:44:23.873]                         computeRestarts <- base::computeRestarts
[17:44:23.873]                         grepl <- base::grepl
[17:44:23.873]                         restarts <- computeRestarts(cond)
[17:44:23.873]                         for (restart in restarts) {
[17:44:23.873]                           name <- restart$name
[17:44:23.873]                           if (is.null(name)) 
[17:44:23.873]                             next
[17:44:23.873]                           if (!grepl(pattern, name)) 
[17:44:23.873]                             next
[17:44:23.873]                           invokeRestart(restart)
[17:44:23.873]                           muffled <- TRUE
[17:44:23.873]                           break
[17:44:23.873]                         }
[17:44:23.873]                       }
[17:44:23.873]                     }
[17:44:23.873]                     invisible(muffled)
[17:44:23.873]                   }
[17:44:23.873]                   muffleCondition(cond)
[17:44:23.873]                 })
[17:44:23.873]             }))
[17:44:23.873]             future::FutureResult(value = ...future.value$value, 
[17:44:23.873]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.873]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.873]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.873]                     ...future.globalenv.names))
[17:44:23.873]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.873]         }, condition = base::local({
[17:44:23.873]             c <- base::c
[17:44:23.873]             inherits <- base::inherits
[17:44:23.873]             invokeRestart <- base::invokeRestart
[17:44:23.873]             length <- base::length
[17:44:23.873]             list <- base::list
[17:44:23.873]             seq.int <- base::seq.int
[17:44:23.873]             signalCondition <- base::signalCondition
[17:44:23.873]             sys.calls <- base::sys.calls
[17:44:23.873]             `[[` <- base::`[[`
[17:44:23.873]             `+` <- base::`+`
[17:44:23.873]             `<<-` <- base::`<<-`
[17:44:23.873]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.873]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.873]                   3L)]
[17:44:23.873]             }
[17:44:23.873]             function(cond) {
[17:44:23.873]                 is_error <- inherits(cond, "error")
[17:44:23.873]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.873]                   NULL)
[17:44:23.873]                 if (is_error) {
[17:44:23.873]                   sessionInformation <- function() {
[17:44:23.873]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.873]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.873]                       search = base::search(), system = base::Sys.info())
[17:44:23.873]                   }
[17:44:23.873]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.873]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.873]                     cond$call), session = sessionInformation(), 
[17:44:23.873]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.873]                   signalCondition(cond)
[17:44:23.873]                 }
[17:44:23.873]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.873]                 "immediateCondition"))) {
[17:44:23.873]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.873]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.873]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.873]                   if (TRUE && !signal) {
[17:44:23.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.873]                     {
[17:44:23.873]                       inherits <- base::inherits
[17:44:23.873]                       invokeRestart <- base::invokeRestart
[17:44:23.873]                       is.null <- base::is.null
[17:44:23.873]                       muffled <- FALSE
[17:44:23.873]                       if (inherits(cond, "message")) {
[17:44:23.873]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.873]                         if (muffled) 
[17:44:23.873]                           invokeRestart("muffleMessage")
[17:44:23.873]                       }
[17:44:23.873]                       else if (inherits(cond, "warning")) {
[17:44:23.873]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.873]                         if (muffled) 
[17:44:23.873]                           invokeRestart("muffleWarning")
[17:44:23.873]                       }
[17:44:23.873]                       else if (inherits(cond, "condition")) {
[17:44:23.873]                         if (!is.null(pattern)) {
[17:44:23.873]                           computeRestarts <- base::computeRestarts
[17:44:23.873]                           grepl <- base::grepl
[17:44:23.873]                           restarts <- computeRestarts(cond)
[17:44:23.873]                           for (restart in restarts) {
[17:44:23.873]                             name <- restart$name
[17:44:23.873]                             if (is.null(name)) 
[17:44:23.873]                               next
[17:44:23.873]                             if (!grepl(pattern, name)) 
[17:44:23.873]                               next
[17:44:23.873]                             invokeRestart(restart)
[17:44:23.873]                             muffled <- TRUE
[17:44:23.873]                             break
[17:44:23.873]                           }
[17:44:23.873]                         }
[17:44:23.873]                       }
[17:44:23.873]                       invisible(muffled)
[17:44:23.873]                     }
[17:44:23.873]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.873]                   }
[17:44:23.873]                 }
[17:44:23.873]                 else {
[17:44:23.873]                   if (TRUE) {
[17:44:23.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.873]                     {
[17:44:23.873]                       inherits <- base::inherits
[17:44:23.873]                       invokeRestart <- base::invokeRestart
[17:44:23.873]                       is.null <- base::is.null
[17:44:23.873]                       muffled <- FALSE
[17:44:23.873]                       if (inherits(cond, "message")) {
[17:44:23.873]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.873]                         if (muffled) 
[17:44:23.873]                           invokeRestart("muffleMessage")
[17:44:23.873]                       }
[17:44:23.873]                       else if (inherits(cond, "warning")) {
[17:44:23.873]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.873]                         if (muffled) 
[17:44:23.873]                           invokeRestart("muffleWarning")
[17:44:23.873]                       }
[17:44:23.873]                       else if (inherits(cond, "condition")) {
[17:44:23.873]                         if (!is.null(pattern)) {
[17:44:23.873]                           computeRestarts <- base::computeRestarts
[17:44:23.873]                           grepl <- base::grepl
[17:44:23.873]                           restarts <- computeRestarts(cond)
[17:44:23.873]                           for (restart in restarts) {
[17:44:23.873]                             name <- restart$name
[17:44:23.873]                             if (is.null(name)) 
[17:44:23.873]                               next
[17:44:23.873]                             if (!grepl(pattern, name)) 
[17:44:23.873]                               next
[17:44:23.873]                             invokeRestart(restart)
[17:44:23.873]                             muffled <- TRUE
[17:44:23.873]                             break
[17:44:23.873]                           }
[17:44:23.873]                         }
[17:44:23.873]                       }
[17:44:23.873]                       invisible(muffled)
[17:44:23.873]                     }
[17:44:23.873]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.873]                   }
[17:44:23.873]                 }
[17:44:23.873]             }
[17:44:23.873]         }))
[17:44:23.873]     }, error = function(ex) {
[17:44:23.873]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.873]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.873]                 ...future.rng), started = ...future.startTime, 
[17:44:23.873]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.873]             version = "1.8"), class = "FutureResult")
[17:44:23.873]     }, finally = {
[17:44:23.873]         if (!identical(...future.workdir, getwd())) 
[17:44:23.873]             setwd(...future.workdir)
[17:44:23.873]         {
[17:44:23.873]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.873]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.873]             }
[17:44:23.873]             base::options(...future.oldOptions)
[17:44:23.873]             if (.Platform$OS.type == "windows") {
[17:44:23.873]                 old_names <- names(...future.oldEnvVars)
[17:44:23.873]                 envs <- base::Sys.getenv()
[17:44:23.873]                 names <- names(envs)
[17:44:23.873]                 common <- intersect(names, old_names)
[17:44:23.873]                 added <- setdiff(names, old_names)
[17:44:23.873]                 removed <- setdiff(old_names, names)
[17:44:23.873]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.873]                   envs[common]]
[17:44:23.873]                 NAMES <- toupper(changed)
[17:44:23.873]                 args <- list()
[17:44:23.873]                 for (kk in seq_along(NAMES)) {
[17:44:23.873]                   name <- changed[[kk]]
[17:44:23.873]                   NAME <- NAMES[[kk]]
[17:44:23.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.873]                     next
[17:44:23.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.873]                 }
[17:44:23.873]                 NAMES <- toupper(added)
[17:44:23.873]                 for (kk in seq_along(NAMES)) {
[17:44:23.873]                   name <- added[[kk]]
[17:44:23.873]                   NAME <- NAMES[[kk]]
[17:44:23.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.873]                     next
[17:44:23.873]                   args[[name]] <- ""
[17:44:23.873]                 }
[17:44:23.873]                 NAMES <- toupper(removed)
[17:44:23.873]                 for (kk in seq_along(NAMES)) {
[17:44:23.873]                   name <- removed[[kk]]
[17:44:23.873]                   NAME <- NAMES[[kk]]
[17:44:23.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.873]                     next
[17:44:23.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.873]                 }
[17:44:23.873]                 if (length(args) > 0) 
[17:44:23.873]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.873]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.873]             }
[17:44:23.873]             else {
[17:44:23.873]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.873]             }
[17:44:23.873]             {
[17:44:23.873]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.873]                   0L) {
[17:44:23.873]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.873]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.873]                   base::options(opts)
[17:44:23.873]                 }
[17:44:23.873]                 {
[17:44:23.873]                   {
[17:44:23.873]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.873]                     NULL
[17:44:23.873]                   }
[17:44:23.873]                   options(future.plan = NULL)
[17:44:23.873]                   if (is.na(NA_character_)) 
[17:44:23.873]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.873]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.873]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.873]                     envir = parent.frame()) 
[17:44:23.873]                   {
[17:44:23.873]                     default_workers <- missing(workers)
[17:44:23.873]                     if (is.function(workers)) 
[17:44:23.873]                       workers <- workers()
[17:44:23.873]                     workers <- structure(as.integer(workers), 
[17:44:23.873]                       class = class(workers))
[17:44:23.873]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.873]                       1L)
[17:44:23.873]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.873]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.873]                       if (default_workers) 
[17:44:23.873]                         supportsMulticore(warn = TRUE)
[17:44:23.873]                       return(sequential(..., envir = envir))
[17:44:23.873]                     }
[17:44:23.873]                     oopts <- options(mc.cores = workers)
[17:44:23.873]                     on.exit(options(oopts))
[17:44:23.873]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.873]                       envir = envir)
[17:44:23.873]                     if (!future$lazy) 
[17:44:23.873]                       future <- run(future)
[17:44:23.873]                     invisible(future)
[17:44:23.873]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.873]                 }
[17:44:23.873]             }
[17:44:23.873]         }
[17:44:23.873]     })
[17:44:23.873]     if (TRUE) {
[17:44:23.873]         base::sink(type = "output", split = FALSE)
[17:44:23.873]         if (FALSE) {
[17:44:23.873]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.873]         }
[17:44:23.873]         else {
[17:44:23.873]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.873]         }
[17:44:23.873]         base::close(...future.stdout)
[17:44:23.873]         ...future.stdout <- NULL
[17:44:23.873]     }
[17:44:23.873]     ...future.result$conditions <- ...future.conditions
[17:44:23.873]     ...future.result$finished <- base::Sys.time()
[17:44:23.873]     ...future.result
[17:44:23.873] }
[17:44:23.876] requestCore(): workers = 2
[17:44:23.878] MulticoreFuture started
[17:44:23.878] - Launch lazy future ... done
[17:44:23.878] run() for ‘MulticoreFuture’ ... done
[17:44:23.879] plan(): Setting new future strategy stack:
[17:44:23.880] List of future strategies:
[17:44:23.880] 1. sequential:
[17:44:23.880]    - args: function (..., envir = parent.frame())
[17:44:23.880]    - tweaked: FALSE
[17:44:23.880]    - call: NULL
[17:44:23.880] plan(): nbrOfWorkers() = 1
[17:44:23.884] plan(): Setting new future strategy stack:
[17:44:23.884] List of future strategies:
[17:44:23.884] 1. multicore:
[17:44:23.884]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.884]    - tweaked: FALSE
[17:44:23.884]    - call: plan(strategy)
[17:44:23.889] plan(): nbrOfWorkers() = 2
- stdout = structure(TRUE, drop = TRUE)
[17:44:23.890] getGlobalsAndPackages() ...
[17:44:23.891] Searching for globals...
[17:44:23.891] - globals found: [1] ‘print’
[17:44:23.892] Searching for globals ... DONE
[17:44:23.892] Resolving globals: FALSE
[17:44:23.892] 
[17:44:23.892] 
[17:44:23.892] getGlobalsAndPackages() ... DONE
[17:44:23.893] run() for ‘Future’ ...
[17:44:23.893] - state: ‘created’
[17:44:23.893] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.898] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.898] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.898]   - Field: ‘label’
[17:44:23.898]   - Field: ‘local’
[17:44:23.898]   - Field: ‘owner’
[17:44:23.898]   - Field: ‘envir’
[17:44:23.898]   - Field: ‘workers’
[17:44:23.898]   - Field: ‘packages’
[17:44:23.899]   - Field: ‘gc’
[17:44:23.899]   - Field: ‘job’
[17:44:23.899]   - Field: ‘conditions’
[17:44:23.899]   - Field: ‘expr’
[17:44:23.899]   - Field: ‘uuid’
[17:44:23.899]   - Field: ‘seed’
[17:44:23.899]   - Field: ‘version’
[17:44:23.899]   - Field: ‘result’
[17:44:23.900]   - Field: ‘asynchronous’
[17:44:23.900]   - Field: ‘calls’
[17:44:23.900]   - Field: ‘globals’
[17:44:23.900]   - Field: ‘stdout’
[17:44:23.900]   - Field: ‘earlySignal’
[17:44:23.900]   - Field: ‘lazy’
[17:44:23.900]   - Field: ‘state’
[17:44:23.900] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.900] - Launch lazy future ...
[17:44:23.901] Packages needed by the future expression (n = 0): <none>
[17:44:23.901] Packages needed by future strategies (n = 0): <none>
[17:44:23.902] {
[17:44:23.902]     {
[17:44:23.902]         {
[17:44:23.902]             ...future.startTime <- base::Sys.time()
[17:44:23.902]             {
[17:44:23.902]                 {
[17:44:23.902]                   {
[17:44:23.902]                     {
[17:44:23.902]                       base::local({
[17:44:23.902]                         has_future <- base::requireNamespace("future", 
[17:44:23.902]                           quietly = TRUE)
[17:44:23.902]                         if (has_future) {
[17:44:23.902]                           ns <- base::getNamespace("future")
[17:44:23.902]                           version <- ns[[".package"]][["version"]]
[17:44:23.902]                           if (is.null(version)) 
[17:44:23.902]                             version <- utils::packageVersion("future")
[17:44:23.902]                         }
[17:44:23.902]                         else {
[17:44:23.902]                           version <- NULL
[17:44:23.902]                         }
[17:44:23.902]                         if (!has_future || version < "1.8.0") {
[17:44:23.902]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.902]                             "", base::R.version$version.string), 
[17:44:23.902]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:23.902]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:23.902]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.902]                               "release", "version")], collapse = " "), 
[17:44:23.902]                             hostname = base::Sys.info()[["nodename"]])
[17:44:23.902]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.902]                             info)
[17:44:23.902]                           info <- base::paste(info, collapse = "; ")
[17:44:23.902]                           if (!has_future) {
[17:44:23.902]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.902]                               info)
[17:44:23.902]                           }
[17:44:23.902]                           else {
[17:44:23.902]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.902]                               info, version)
[17:44:23.902]                           }
[17:44:23.902]                           base::stop(msg)
[17:44:23.902]                         }
[17:44:23.902]                       })
[17:44:23.902]                     }
[17:44:23.902]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.902]                     base::options(mc.cores = 1L)
[17:44:23.902]                   }
[17:44:23.902]                   options(future.plan = NULL)
[17:44:23.902]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.902]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.902]                 }
[17:44:23.902]                 ...future.workdir <- getwd()
[17:44:23.902]             }
[17:44:23.902]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.902]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.902]         }
[17:44:23.902]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.902]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.902]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.902]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.902]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.902]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.902]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.902]             base::names(...future.oldOptions))
[17:44:23.902]     }
[17:44:23.902]     if (FALSE) {
[17:44:23.902]     }
[17:44:23.902]     else {
[17:44:23.902]         if (TRUE) {
[17:44:23.902]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.902]                 open = "w")
[17:44:23.902]         }
[17:44:23.902]         else {
[17:44:23.902]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.902]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.902]         }
[17:44:23.902]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.902]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.902]             base::sink(type = "output", split = FALSE)
[17:44:23.902]             base::close(...future.stdout)
[17:44:23.902]         }, add = TRUE)
[17:44:23.902]     }
[17:44:23.902]     ...future.frame <- base::sys.nframe()
[17:44:23.902]     ...future.conditions <- base::list()
[17:44:23.902]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.902]     if (FALSE) {
[17:44:23.902]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.902]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.902]     }
[17:44:23.902]     ...future.result <- base::tryCatch({
[17:44:23.902]         base::withCallingHandlers({
[17:44:23.902]             ...future.value <- base::withVisible(base::local({
[17:44:23.902]                 withCallingHandlers({
[17:44:23.902]                   print(42)
[17:44:23.902]                 }, immediateCondition = function(cond) {
[17:44:23.902]                   save_rds <- function (object, pathname, ...) 
[17:44:23.902]                   {
[17:44:23.902]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.902]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.902]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.902]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.902]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.902]                         fi_tmp[["mtime"]])
[17:44:23.902]                     }
[17:44:23.902]                     tryCatch({
[17:44:23.902]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.902]                     }, error = function(ex) {
[17:44:23.902]                       msg <- conditionMessage(ex)
[17:44:23.902]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.902]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.902]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.902]                         fi_tmp[["mtime"]], msg)
[17:44:23.902]                       ex$message <- msg
[17:44:23.902]                       stop(ex)
[17:44:23.902]                     })
[17:44:23.902]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.902]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.902]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.902]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.902]                       fi <- file.info(pathname)
[17:44:23.902]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.902]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.902]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.902]                         fi[["size"]], fi[["mtime"]])
[17:44:23.902]                       stop(msg)
[17:44:23.902]                     }
[17:44:23.902]                     invisible(pathname)
[17:44:23.902]                   }
[17:44:23.902]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.902]                     rootPath = tempdir()) 
[17:44:23.902]                   {
[17:44:23.902]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.902]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.902]                       tmpdir = path, fileext = ".rds")
[17:44:23.902]                     save_rds(obj, file)
[17:44:23.902]                   }
[17:44:23.902]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.902]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.902]                   {
[17:44:23.902]                     inherits <- base::inherits
[17:44:23.902]                     invokeRestart <- base::invokeRestart
[17:44:23.902]                     is.null <- base::is.null
[17:44:23.902]                     muffled <- FALSE
[17:44:23.902]                     if (inherits(cond, "message")) {
[17:44:23.902]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.902]                       if (muffled) 
[17:44:23.902]                         invokeRestart("muffleMessage")
[17:44:23.902]                     }
[17:44:23.902]                     else if (inherits(cond, "warning")) {
[17:44:23.902]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.902]                       if (muffled) 
[17:44:23.902]                         invokeRestart("muffleWarning")
[17:44:23.902]                     }
[17:44:23.902]                     else if (inherits(cond, "condition")) {
[17:44:23.902]                       if (!is.null(pattern)) {
[17:44:23.902]                         computeRestarts <- base::computeRestarts
[17:44:23.902]                         grepl <- base::grepl
[17:44:23.902]                         restarts <- computeRestarts(cond)
[17:44:23.902]                         for (restart in restarts) {
[17:44:23.902]                           name <- restart$name
[17:44:23.902]                           if (is.null(name)) 
[17:44:23.902]                             next
[17:44:23.902]                           if (!grepl(pattern, name)) 
[17:44:23.902]                             next
[17:44:23.902]                           invokeRestart(restart)
[17:44:23.902]                           muffled <- TRUE
[17:44:23.902]                           break
[17:44:23.902]                         }
[17:44:23.902]                       }
[17:44:23.902]                     }
[17:44:23.902]                     invisible(muffled)
[17:44:23.902]                   }
[17:44:23.902]                   muffleCondition(cond)
[17:44:23.902]                 })
[17:44:23.902]             }))
[17:44:23.902]             future::FutureResult(value = ...future.value$value, 
[17:44:23.902]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.902]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.902]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.902]                     ...future.globalenv.names))
[17:44:23.902]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.902]         }, condition = base::local({
[17:44:23.902]             c <- base::c
[17:44:23.902]             inherits <- base::inherits
[17:44:23.902]             invokeRestart <- base::invokeRestart
[17:44:23.902]             length <- base::length
[17:44:23.902]             list <- base::list
[17:44:23.902]             seq.int <- base::seq.int
[17:44:23.902]             signalCondition <- base::signalCondition
[17:44:23.902]             sys.calls <- base::sys.calls
[17:44:23.902]             `[[` <- base::`[[`
[17:44:23.902]             `+` <- base::`+`
[17:44:23.902]             `<<-` <- base::`<<-`
[17:44:23.902]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.902]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.902]                   3L)]
[17:44:23.902]             }
[17:44:23.902]             function(cond) {
[17:44:23.902]                 is_error <- inherits(cond, "error")
[17:44:23.902]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.902]                   NULL)
[17:44:23.902]                 if (is_error) {
[17:44:23.902]                   sessionInformation <- function() {
[17:44:23.902]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.902]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.902]                       search = base::search(), system = base::Sys.info())
[17:44:23.902]                   }
[17:44:23.902]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.902]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.902]                     cond$call), session = sessionInformation(), 
[17:44:23.902]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.902]                   signalCondition(cond)
[17:44:23.902]                 }
[17:44:23.902]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.902]                 "immediateCondition"))) {
[17:44:23.902]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.902]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.902]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.902]                   if (TRUE && !signal) {
[17:44:23.902]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.902]                     {
[17:44:23.902]                       inherits <- base::inherits
[17:44:23.902]                       invokeRestart <- base::invokeRestart
[17:44:23.902]                       is.null <- base::is.null
[17:44:23.902]                       muffled <- FALSE
[17:44:23.902]                       if (inherits(cond, "message")) {
[17:44:23.902]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.902]                         if (muffled) 
[17:44:23.902]                           invokeRestart("muffleMessage")
[17:44:23.902]                       }
[17:44:23.902]                       else if (inherits(cond, "warning")) {
[17:44:23.902]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.902]                         if (muffled) 
[17:44:23.902]                           invokeRestart("muffleWarning")
[17:44:23.902]                       }
[17:44:23.902]                       else if (inherits(cond, "condition")) {
[17:44:23.902]                         if (!is.null(pattern)) {
[17:44:23.902]                           computeRestarts <- base::computeRestarts
[17:44:23.902]                           grepl <- base::grepl
[17:44:23.902]                           restarts <- computeRestarts(cond)
[17:44:23.902]                           for (restart in restarts) {
[17:44:23.902]                             name <- restart$name
[17:44:23.902]                             if (is.null(name)) 
[17:44:23.902]                               next
[17:44:23.902]                             if (!grepl(pattern, name)) 
[17:44:23.902]                               next
[17:44:23.902]                             invokeRestart(restart)
[17:44:23.902]                             muffled <- TRUE
[17:44:23.902]                             break
[17:44:23.902]                           }
[17:44:23.902]                         }
[17:44:23.902]                       }
[17:44:23.902]                       invisible(muffled)
[17:44:23.902]                     }
[17:44:23.902]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.902]                   }
[17:44:23.902]                 }
[17:44:23.902]                 else {
[17:44:23.902]                   if (TRUE) {
[17:44:23.902]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.902]                     {
[17:44:23.902]                       inherits <- base::inherits
[17:44:23.902]                       invokeRestart <- base::invokeRestart
[17:44:23.902]                       is.null <- base::is.null
[17:44:23.902]                       muffled <- FALSE
[17:44:23.902]                       if (inherits(cond, "message")) {
[17:44:23.902]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.902]                         if (muffled) 
[17:44:23.902]                           invokeRestart("muffleMessage")
[17:44:23.902]                       }
[17:44:23.902]                       else if (inherits(cond, "warning")) {
[17:44:23.902]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.902]                         if (muffled) 
[17:44:23.902]                           invokeRestart("muffleWarning")
[17:44:23.902]                       }
[17:44:23.902]                       else if (inherits(cond, "condition")) {
[17:44:23.902]                         if (!is.null(pattern)) {
[17:44:23.902]                           computeRestarts <- base::computeRestarts
[17:44:23.902]                           grepl <- base::grepl
[17:44:23.902]                           restarts <- computeRestarts(cond)
[17:44:23.902]                           for (restart in restarts) {
[17:44:23.902]                             name <- restart$name
[17:44:23.902]                             if (is.null(name)) 
[17:44:23.902]                               next
[17:44:23.902]                             if (!grepl(pattern, name)) 
[17:44:23.902]                               next
[17:44:23.902]                             invokeRestart(restart)
[17:44:23.902]                             muffled <- TRUE
[17:44:23.902]                             break
[17:44:23.902]                           }
[17:44:23.902]                         }
[17:44:23.902]                       }
[17:44:23.902]                       invisible(muffled)
[17:44:23.902]                     }
[17:44:23.902]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.902]                   }
[17:44:23.902]                 }
[17:44:23.902]             }
[17:44:23.902]         }))
[17:44:23.902]     }, error = function(ex) {
[17:44:23.902]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.902]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.902]                 ...future.rng), started = ...future.startTime, 
[17:44:23.902]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.902]             version = "1.8"), class = "FutureResult")
[17:44:23.902]     }, finally = {
[17:44:23.902]         if (!identical(...future.workdir, getwd())) 
[17:44:23.902]             setwd(...future.workdir)
[17:44:23.902]         {
[17:44:23.902]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.902]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.902]             }
[17:44:23.902]             base::options(...future.oldOptions)
[17:44:23.902]             if (.Platform$OS.type == "windows") {
[17:44:23.902]                 old_names <- names(...future.oldEnvVars)
[17:44:23.902]                 envs <- base::Sys.getenv()
[17:44:23.902]                 names <- names(envs)
[17:44:23.902]                 common <- intersect(names, old_names)
[17:44:23.902]                 added <- setdiff(names, old_names)
[17:44:23.902]                 removed <- setdiff(old_names, names)
[17:44:23.902]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.902]                   envs[common]]
[17:44:23.902]                 NAMES <- toupper(changed)
[17:44:23.902]                 args <- list()
[17:44:23.902]                 for (kk in seq_along(NAMES)) {
[17:44:23.902]                   name <- changed[[kk]]
[17:44:23.902]                   NAME <- NAMES[[kk]]
[17:44:23.902]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.902]                     next
[17:44:23.902]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.902]                 }
[17:44:23.902]                 NAMES <- toupper(added)
[17:44:23.902]                 for (kk in seq_along(NAMES)) {
[17:44:23.902]                   name <- added[[kk]]
[17:44:23.902]                   NAME <- NAMES[[kk]]
[17:44:23.902]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.902]                     next
[17:44:23.902]                   args[[name]] <- ""
[17:44:23.902]                 }
[17:44:23.902]                 NAMES <- toupper(removed)
[17:44:23.902]                 for (kk in seq_along(NAMES)) {
[17:44:23.902]                   name <- removed[[kk]]
[17:44:23.902]                   NAME <- NAMES[[kk]]
[17:44:23.902]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.902]                     next
[17:44:23.902]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.902]                 }
[17:44:23.902]                 if (length(args) > 0) 
[17:44:23.902]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.902]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.902]             }
[17:44:23.902]             else {
[17:44:23.902]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.902]             }
[17:44:23.902]             {
[17:44:23.902]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.902]                   0L) {
[17:44:23.902]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.902]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.902]                   base::options(opts)
[17:44:23.902]                 }
[17:44:23.902]                 {
[17:44:23.902]                   {
[17:44:23.902]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.902]                     NULL
[17:44:23.902]                   }
[17:44:23.902]                   options(future.plan = NULL)
[17:44:23.902]                   if (is.na(NA_character_)) 
[17:44:23.902]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.902]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.902]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.902]                     envir = parent.frame()) 
[17:44:23.902]                   {
[17:44:23.902]                     default_workers <- missing(workers)
[17:44:23.902]                     if (is.function(workers)) 
[17:44:23.902]                       workers <- workers()
[17:44:23.902]                     workers <- structure(as.integer(workers), 
[17:44:23.902]                       class = class(workers))
[17:44:23.902]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.902]                       1L)
[17:44:23.902]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.902]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.902]                       if (default_workers) 
[17:44:23.902]                         supportsMulticore(warn = TRUE)
[17:44:23.902]                       return(sequential(..., envir = envir))
[17:44:23.902]                     }
[17:44:23.902]                     oopts <- options(mc.cores = workers)
[17:44:23.902]                     on.exit(options(oopts))
[17:44:23.902]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.902]                       envir = envir)
[17:44:23.902]                     if (!future$lazy) 
[17:44:23.902]                       future <- run(future)
[17:44:23.902]                     invisible(future)
[17:44:23.902]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.902]                 }
[17:44:23.902]             }
[17:44:23.902]         }
[17:44:23.902]     })
[17:44:23.902]     if (TRUE) {
[17:44:23.902]         base::sink(type = "output", split = FALSE)
[17:44:23.902]         if (TRUE) {
[17:44:23.902]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.902]         }
[17:44:23.902]         else {
[17:44:23.902]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.902]         }
[17:44:23.902]         base::close(...future.stdout)
[17:44:23.902]         ...future.stdout <- NULL
[17:44:23.902]     }
[17:44:23.902]     ...future.result$conditions <- ...future.conditions
[17:44:23.902]     ...future.result$finished <- base::Sys.time()
[17:44:23.902]     ...future.result
[17:44:23.902] }
[17:44:23.904] requestCore(): workers = 2
[17:44:23.907] MulticoreFuture started
[17:44:23.907] - Launch lazy future ... done
[17:44:23.907] run() for ‘MulticoreFuture’ ... done
[17:44:23.908] plan(): Setting new future strategy stack:
[17:44:23.908] List of future strategies:
[17:44:23.908] 1. sequential:
[17:44:23.908]    - args: function (..., envir = parent.frame())
[17:44:23.908]    - tweaked: FALSE
[17:44:23.908]    - call: NULL
[17:44:23.909] plan(): nbrOfWorkers() = 1
[17:44:23.911] plan(): Setting new future strategy stack:
[17:44:23.911] List of future strategies:
[17:44:23.911] 1. multicore:
[17:44:23.911]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.911]    - tweaked: FALSE
[17:44:23.911]    - call: plan(strategy)
[17:44:23.921] plan(): nbrOfWorkers() = 2
[1] 42
- stdout = NA
[17:44:23.923] getGlobalsAndPackages() ...
[17:44:23.923] Searching for globals...
[17:44:23.930] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.930] Searching for globals ... DONE
[17:44:23.931] Resolving globals: FALSE
[17:44:23.931] 
[17:44:23.931] - packages: [1] ‘utils’
[17:44:23.932] getGlobalsAndPackages() ... DONE
[17:44:23.932] run() for ‘Future’ ...
[17:44:23.932] - state: ‘created’
[17:44:23.932] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.937] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.937] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.937]   - Field: ‘label’
[17:44:23.938]   - Field: ‘local’
[17:44:23.938]   - Field: ‘owner’
[17:44:23.938]   - Field: ‘envir’
[17:44:23.938]   - Field: ‘workers’
[17:44:23.938]   - Field: ‘packages’
[17:44:23.938]   - Field: ‘gc’
[17:44:23.938]   - Field: ‘job’
[17:44:23.938]   - Field: ‘conditions’
[17:44:23.939]   - Field: ‘expr’
[17:44:23.939]   - Field: ‘uuid’
[17:44:23.939]   - Field: ‘seed’
[17:44:23.939]   - Field: ‘version’
[17:44:23.939]   - Field: ‘result’
[17:44:23.939]   - Field: ‘asynchronous’
[17:44:23.940]   - Field: ‘calls’
[17:44:23.940]   - Field: ‘globals’
[17:44:23.940]   - Field: ‘stdout’
[17:44:23.940]   - Field: ‘earlySignal’
[17:44:23.940]   - Field: ‘lazy’
[17:44:23.940]   - Field: ‘state’
[17:44:23.940] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.940] - Launch lazy future ...
[17:44:23.941] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.941] Packages needed by future strategies (n = 0): <none>
[17:44:23.942] {
[17:44:23.942]     {
[17:44:23.942]         {
[17:44:23.942]             ...future.startTime <- base::Sys.time()
[17:44:23.942]             {
[17:44:23.942]                 {
[17:44:23.942]                   {
[17:44:23.942]                     {
[17:44:23.942]                       {
[17:44:23.942]                         base::local({
[17:44:23.942]                           has_future <- base::requireNamespace("future", 
[17:44:23.942]                             quietly = TRUE)
[17:44:23.942]                           if (has_future) {
[17:44:23.942]                             ns <- base::getNamespace("future")
[17:44:23.942]                             version <- ns[[".package"]][["version"]]
[17:44:23.942]                             if (is.null(version)) 
[17:44:23.942]                               version <- utils::packageVersion("future")
[17:44:23.942]                           }
[17:44:23.942]                           else {
[17:44:23.942]                             version <- NULL
[17:44:23.942]                           }
[17:44:23.942]                           if (!has_future || version < "1.8.0") {
[17:44:23.942]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.942]                               "", base::R.version$version.string), 
[17:44:23.942]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:23.942]                                 base::R.version$platform, 8 * 
[17:44:23.942]                                   base::.Machine$sizeof.pointer), 
[17:44:23.942]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.942]                                 "release", "version")], collapse = " "), 
[17:44:23.942]                               hostname = base::Sys.info()[["nodename"]])
[17:44:23.942]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.942]                               info)
[17:44:23.942]                             info <- base::paste(info, collapse = "; ")
[17:44:23.942]                             if (!has_future) {
[17:44:23.942]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.942]                                 info)
[17:44:23.942]                             }
[17:44:23.942]                             else {
[17:44:23.942]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.942]                                 info, version)
[17:44:23.942]                             }
[17:44:23.942]                             base::stop(msg)
[17:44:23.942]                           }
[17:44:23.942]                         })
[17:44:23.942]                       }
[17:44:23.942]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.942]                       base::options(mc.cores = 1L)
[17:44:23.942]                     }
[17:44:23.942]                     base::local({
[17:44:23.942]                       for (pkg in "utils") {
[17:44:23.942]                         base::loadNamespace(pkg)
[17:44:23.942]                         base::library(pkg, character.only = TRUE)
[17:44:23.942]                       }
[17:44:23.942]                     })
[17:44:23.942]                   }
[17:44:23.942]                   options(future.plan = NULL)
[17:44:23.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.942]                 }
[17:44:23.942]                 ...future.workdir <- getwd()
[17:44:23.942]             }
[17:44:23.942]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.942]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.942]         }
[17:44:23.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.942]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.942]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.942]             base::names(...future.oldOptions))
[17:44:23.942]     }
[17:44:23.942]     if (TRUE) {
[17:44:23.942]     }
[17:44:23.942]     else {
[17:44:23.942]         if (NA) {
[17:44:23.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.942]                 open = "w")
[17:44:23.942]         }
[17:44:23.942]         else {
[17:44:23.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.942]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.942]         }
[17:44:23.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.942]             base::sink(type = "output", split = FALSE)
[17:44:23.942]             base::close(...future.stdout)
[17:44:23.942]         }, add = TRUE)
[17:44:23.942]     }
[17:44:23.942]     ...future.frame <- base::sys.nframe()
[17:44:23.942]     ...future.conditions <- base::list()
[17:44:23.942]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.942]     if (FALSE) {
[17:44:23.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.942]     }
[17:44:23.942]     ...future.result <- base::tryCatch({
[17:44:23.942]         base::withCallingHandlers({
[17:44:23.942]             ...future.value <- base::withVisible(base::local({
[17:44:23.942]                 withCallingHandlers({
[17:44:23.942]                   {
[17:44:23.942]                     print(1:50)
[17:44:23.942]                     str(1:50)
[17:44:23.942]                     cat(letters, sep = "-")
[17:44:23.942]                     cat(1:6, collapse = "\n")
[17:44:23.942]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.942]                     42L
[17:44:23.942]                   }
[17:44:23.942]                 }, immediateCondition = function(cond) {
[17:44:23.942]                   save_rds <- function (object, pathname, ...) 
[17:44:23.942]                   {
[17:44:23.942]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.942]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.942]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.942]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.942]                         fi_tmp[["mtime"]])
[17:44:23.942]                     }
[17:44:23.942]                     tryCatch({
[17:44:23.942]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.942]                     }, error = function(ex) {
[17:44:23.942]                       msg <- conditionMessage(ex)
[17:44:23.942]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.942]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.942]                         fi_tmp[["mtime"]], msg)
[17:44:23.942]                       ex$message <- msg
[17:44:23.942]                       stop(ex)
[17:44:23.942]                     })
[17:44:23.942]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.942]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.942]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.942]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.942]                       fi <- file.info(pathname)
[17:44:23.942]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.942]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.942]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.942]                         fi[["size"]], fi[["mtime"]])
[17:44:23.942]                       stop(msg)
[17:44:23.942]                     }
[17:44:23.942]                     invisible(pathname)
[17:44:23.942]                   }
[17:44:23.942]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.942]                     rootPath = tempdir()) 
[17:44:23.942]                   {
[17:44:23.942]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.942]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.942]                       tmpdir = path, fileext = ".rds")
[17:44:23.942]                     save_rds(obj, file)
[17:44:23.942]                   }
[17:44:23.942]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.942]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.942]                   {
[17:44:23.942]                     inherits <- base::inherits
[17:44:23.942]                     invokeRestart <- base::invokeRestart
[17:44:23.942]                     is.null <- base::is.null
[17:44:23.942]                     muffled <- FALSE
[17:44:23.942]                     if (inherits(cond, "message")) {
[17:44:23.942]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.942]                       if (muffled) 
[17:44:23.942]                         invokeRestart("muffleMessage")
[17:44:23.942]                     }
[17:44:23.942]                     else if (inherits(cond, "warning")) {
[17:44:23.942]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.942]                       if (muffled) 
[17:44:23.942]                         invokeRestart("muffleWarning")
[17:44:23.942]                     }
[17:44:23.942]                     else if (inherits(cond, "condition")) {
[17:44:23.942]                       if (!is.null(pattern)) {
[17:44:23.942]                         computeRestarts <- base::computeRestarts
[17:44:23.942]                         grepl <- base::grepl
[17:44:23.942]                         restarts <- computeRestarts(cond)
[17:44:23.942]                         for (restart in restarts) {
[17:44:23.942]                           name <- restart$name
[17:44:23.942]                           if (is.null(name)) 
[17:44:23.942]                             next
[17:44:23.942]                           if (!grepl(pattern, name)) 
[17:44:23.942]                             next
[17:44:23.942]                           invokeRestart(restart)
[17:44:23.942]                           muffled <- TRUE
[17:44:23.942]                           break
[17:44:23.942]                         }
[17:44:23.942]                       }
[17:44:23.942]                     }
[17:44:23.942]                     invisible(muffled)
[17:44:23.942]                   }
[17:44:23.942]                   muffleCondition(cond)
[17:44:23.942]                 })
[17:44:23.942]             }))
[17:44:23.942]             future::FutureResult(value = ...future.value$value, 
[17:44:23.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.942]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.942]                     ...future.globalenv.names))
[17:44:23.942]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.942]         }, condition = base::local({
[17:44:23.942]             c <- base::c
[17:44:23.942]             inherits <- base::inherits
[17:44:23.942]             invokeRestart <- base::invokeRestart
[17:44:23.942]             length <- base::length
[17:44:23.942]             list <- base::list
[17:44:23.942]             seq.int <- base::seq.int
[17:44:23.942]             signalCondition <- base::signalCondition
[17:44:23.942]             sys.calls <- base::sys.calls
[17:44:23.942]             `[[` <- base::`[[`
[17:44:23.942]             `+` <- base::`+`
[17:44:23.942]             `<<-` <- base::`<<-`
[17:44:23.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.942]                   3L)]
[17:44:23.942]             }
[17:44:23.942]             function(cond) {
[17:44:23.942]                 is_error <- inherits(cond, "error")
[17:44:23.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.942]                   NULL)
[17:44:23.942]                 if (is_error) {
[17:44:23.942]                   sessionInformation <- function() {
[17:44:23.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.942]                       search = base::search(), system = base::Sys.info())
[17:44:23.942]                   }
[17:44:23.942]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.942]                     cond$call), session = sessionInformation(), 
[17:44:23.942]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.942]                   signalCondition(cond)
[17:44:23.942]                 }
[17:44:23.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.942]                 "immediateCondition"))) {
[17:44:23.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.942]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.942]                   if (TRUE && !signal) {
[17:44:23.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.942]                     {
[17:44:23.942]                       inherits <- base::inherits
[17:44:23.942]                       invokeRestart <- base::invokeRestart
[17:44:23.942]                       is.null <- base::is.null
[17:44:23.942]                       muffled <- FALSE
[17:44:23.942]                       if (inherits(cond, "message")) {
[17:44:23.942]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.942]                         if (muffled) 
[17:44:23.942]                           invokeRestart("muffleMessage")
[17:44:23.942]                       }
[17:44:23.942]                       else if (inherits(cond, "warning")) {
[17:44:23.942]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.942]                         if (muffled) 
[17:44:23.942]                           invokeRestart("muffleWarning")
[17:44:23.942]                       }
[17:44:23.942]                       else if (inherits(cond, "condition")) {
[17:44:23.942]                         if (!is.null(pattern)) {
[17:44:23.942]                           computeRestarts <- base::computeRestarts
[17:44:23.942]                           grepl <- base::grepl
[17:44:23.942]                           restarts <- computeRestarts(cond)
[17:44:23.942]                           for (restart in restarts) {
[17:44:23.942]                             name <- restart$name
[17:44:23.942]                             if (is.null(name)) 
[17:44:23.942]                               next
[17:44:23.942]                             if (!grepl(pattern, name)) 
[17:44:23.942]                               next
[17:44:23.942]                             invokeRestart(restart)
[17:44:23.942]                             muffled <- TRUE
[17:44:23.942]                             break
[17:44:23.942]                           }
[17:44:23.942]                         }
[17:44:23.942]                       }
[17:44:23.942]                       invisible(muffled)
[17:44:23.942]                     }
[17:44:23.942]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.942]                   }
[17:44:23.942]                 }
[17:44:23.942]                 else {
[17:44:23.942]                   if (TRUE) {
[17:44:23.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.942]                     {
[17:44:23.942]                       inherits <- base::inherits
[17:44:23.942]                       invokeRestart <- base::invokeRestart
[17:44:23.942]                       is.null <- base::is.null
[17:44:23.942]                       muffled <- FALSE
[17:44:23.942]                       if (inherits(cond, "message")) {
[17:44:23.942]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.942]                         if (muffled) 
[17:44:23.942]                           invokeRestart("muffleMessage")
[17:44:23.942]                       }
[17:44:23.942]                       else if (inherits(cond, "warning")) {
[17:44:23.942]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.942]                         if (muffled) 
[17:44:23.942]                           invokeRestart("muffleWarning")
[17:44:23.942]                       }
[17:44:23.942]                       else if (inherits(cond, "condition")) {
[17:44:23.942]                         if (!is.null(pattern)) {
[17:44:23.942]                           computeRestarts <- base::computeRestarts
[17:44:23.942]                           grepl <- base::grepl
[17:44:23.942]                           restarts <- computeRestarts(cond)
[17:44:23.942]                           for (restart in restarts) {
[17:44:23.942]                             name <- restart$name
[17:44:23.942]                             if (is.null(name)) 
[17:44:23.942]                               next
[17:44:23.942]                             if (!grepl(pattern, name)) 
[17:44:23.942]                               next
[17:44:23.942]                             invokeRestart(restart)
[17:44:23.942]                             muffled <- TRUE
[17:44:23.942]                             break
[17:44:23.942]                           }
[17:44:23.942]                         }
[17:44:23.942]                       }
[17:44:23.942]                       invisible(muffled)
[17:44:23.942]                     }
[17:44:23.942]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.942]                   }
[17:44:23.942]                 }
[17:44:23.942]             }
[17:44:23.942]         }))
[17:44:23.942]     }, error = function(ex) {
[17:44:23.942]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.942]                 ...future.rng), started = ...future.startTime, 
[17:44:23.942]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.942]             version = "1.8"), class = "FutureResult")
[17:44:23.942]     }, finally = {
[17:44:23.942]         if (!identical(...future.workdir, getwd())) 
[17:44:23.942]             setwd(...future.workdir)
[17:44:23.942]         {
[17:44:23.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.942]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.942]             }
[17:44:23.942]             base::options(...future.oldOptions)
[17:44:23.942]             if (.Platform$OS.type == "windows") {
[17:44:23.942]                 old_names <- names(...future.oldEnvVars)
[17:44:23.942]                 envs <- base::Sys.getenv()
[17:44:23.942]                 names <- names(envs)
[17:44:23.942]                 common <- intersect(names, old_names)
[17:44:23.942]                 added <- setdiff(names, old_names)
[17:44:23.942]                 removed <- setdiff(old_names, names)
[17:44:23.942]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.942]                   envs[common]]
[17:44:23.942]                 NAMES <- toupper(changed)
[17:44:23.942]                 args <- list()
[17:44:23.942]                 for (kk in seq_along(NAMES)) {
[17:44:23.942]                   name <- changed[[kk]]
[17:44:23.942]                   NAME <- NAMES[[kk]]
[17:44:23.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.942]                     next
[17:44:23.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.942]                 }
[17:44:23.942]                 NAMES <- toupper(added)
[17:44:23.942]                 for (kk in seq_along(NAMES)) {
[17:44:23.942]                   name <- added[[kk]]
[17:44:23.942]                   NAME <- NAMES[[kk]]
[17:44:23.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.942]                     next
[17:44:23.942]                   args[[name]] <- ""
[17:44:23.942]                 }
[17:44:23.942]                 NAMES <- toupper(removed)
[17:44:23.942]                 for (kk in seq_along(NAMES)) {
[17:44:23.942]                   name <- removed[[kk]]
[17:44:23.942]                   NAME <- NAMES[[kk]]
[17:44:23.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.942]                     next
[17:44:23.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.942]                 }
[17:44:23.942]                 if (length(args) > 0) 
[17:44:23.942]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.942]             }
[17:44:23.942]             else {
[17:44:23.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.942]             }
[17:44:23.942]             {
[17:44:23.942]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.942]                   0L) {
[17:44:23.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.942]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.942]                   base::options(opts)
[17:44:23.942]                 }
[17:44:23.942]                 {
[17:44:23.942]                   {
[17:44:23.942]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.942]                     NULL
[17:44:23.942]                   }
[17:44:23.942]                   options(future.plan = NULL)
[17:44:23.942]                   if (is.na(NA_character_)) 
[17:44:23.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.942]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.942]                     envir = parent.frame()) 
[17:44:23.942]                   {
[17:44:23.942]                     default_workers <- missing(workers)
[17:44:23.942]                     if (is.function(workers)) 
[17:44:23.942]                       workers <- workers()
[17:44:23.942]                     workers <- structure(as.integer(workers), 
[17:44:23.942]                       class = class(workers))
[17:44:23.942]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.942]                       1L)
[17:44:23.942]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.942]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.942]                       if (default_workers) 
[17:44:23.942]                         supportsMulticore(warn = TRUE)
[17:44:23.942]                       return(sequential(..., envir = envir))
[17:44:23.942]                     }
[17:44:23.942]                     oopts <- options(mc.cores = workers)
[17:44:23.942]                     on.exit(options(oopts))
[17:44:23.942]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.942]                       envir = envir)
[17:44:23.942]                     if (!future$lazy) 
[17:44:23.942]                       future <- run(future)
[17:44:23.942]                     invisible(future)
[17:44:23.942]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.942]                 }
[17:44:23.942]             }
[17:44:23.942]         }
[17:44:23.942]     })
[17:44:23.942]     if (FALSE) {
[17:44:23.942]         base::sink(type = "output", split = FALSE)
[17:44:23.942]         if (NA) {
[17:44:23.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.942]         }
[17:44:23.942]         else {
[17:44:23.942]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.942]         }
[17:44:23.942]         base::close(...future.stdout)
[17:44:23.942]         ...future.stdout <- NULL
[17:44:23.942]     }
[17:44:23.942]     ...future.result$conditions <- ...future.conditions
[17:44:23.942]     ...future.result$finished <- base::Sys.time()
[17:44:23.942]     ...future.result
[17:44:23.942] }
[17:44:23.944] requestCore(): workers = 2
[17:44:23.946] MulticoreFuture started
[17:44:23.947] - Launch lazy future ... done
[17:44:23.947] run() for ‘MulticoreFuture’ ... done
[17:44:23.948] plan(): Setting new future strategy stack:
[17:44:23.948] List of future strategies:
[17:44:23.948] 1. sequential:
[17:44:23.948]    - args: function (..., envir = parent.frame())
[17:44:23.948]    - tweaked: FALSE
[17:44:23.948]    - call: NULL
[17:44:23.949] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[17:44:23.953] plan(): Setting new future strategy stack:
[17:44:23.953] List of future strategies:
[17:44:23.953] 1. multicore:
[17:44:23.953]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.953]    - tweaked: FALSE
[17:44:23.953]    - call: plan(strategy)
[17:44:23.958] plan(): nbrOfWorkers() = 2
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:23"
 $ session_uuid: chr "415eede8-e92f-7b0f-6f82-5b7e10918c1b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53814
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:23"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:23.969] getGlobalsAndPackages() ...
[17:44:23.969] Searching for globals...
[17:44:23.975] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:23.976] Searching for globals ... DONE
[17:44:23.976] Resolving globals: FALSE
[17:44:23.976] 
[17:44:23.977] - packages: [1] ‘utils’
[17:44:23.977] getGlobalsAndPackages() ... DONE
[17:44:23.977] run() for ‘Future’ ...
[17:44:23.977] - state: ‘created’
[17:44:23.978] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:23.982] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:23.982] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:23.982]   - Field: ‘label’
[17:44:23.982]   - Field: ‘local’
[17:44:23.982]   - Field: ‘owner’
[17:44:23.983]   - Field: ‘envir’
[17:44:23.983]   - Field: ‘workers’
[17:44:23.983]   - Field: ‘packages’
[17:44:23.983]   - Field: ‘gc’
[17:44:23.983]   - Field: ‘job’
[17:44:23.983]   - Field: ‘conditions’
[17:44:23.983]   - Field: ‘expr’
[17:44:23.983]   - Field: ‘uuid’
[17:44:23.984]   - Field: ‘seed’
[17:44:23.984]   - Field: ‘version’
[17:44:23.984]   - Field: ‘result’
[17:44:23.984]   - Field: ‘asynchronous’
[17:44:23.984]   - Field: ‘calls’
[17:44:23.984]   - Field: ‘globals’
[17:44:23.984]   - Field: ‘stdout’
[17:44:23.984]   - Field: ‘earlySignal’
[17:44:23.984]   - Field: ‘lazy’
[17:44:23.985]   - Field: ‘state’
[17:44:23.985] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:23.985] - Launch lazy future ...
[17:44:23.985] Packages needed by the future expression (n = 1): ‘utils’
[17:44:23.985] Packages needed by future strategies (n = 0): <none>
[17:44:23.986] {
[17:44:23.986]     {
[17:44:23.986]         {
[17:44:23.986]             ...future.startTime <- base::Sys.time()
[17:44:23.986]             {
[17:44:23.986]                 {
[17:44:23.986]                   {
[17:44:23.986]                     {
[17:44:23.986]                       {
[17:44:23.986]                         base::local({
[17:44:23.986]                           has_future <- base::requireNamespace("future", 
[17:44:23.986]                             quietly = TRUE)
[17:44:23.986]                           if (has_future) {
[17:44:23.986]                             ns <- base::getNamespace("future")
[17:44:23.986]                             version <- ns[[".package"]][["version"]]
[17:44:23.986]                             if (is.null(version)) 
[17:44:23.986]                               version <- utils::packageVersion("future")
[17:44:23.986]                           }
[17:44:23.986]                           else {
[17:44:23.986]                             version <- NULL
[17:44:23.986]                           }
[17:44:23.986]                           if (!has_future || version < "1.8.0") {
[17:44:23.986]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:23.986]                               "", base::R.version$version.string), 
[17:44:23.986]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:23.986]                                 base::R.version$platform, 8 * 
[17:44:23.986]                                   base::.Machine$sizeof.pointer), 
[17:44:23.986]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:23.986]                                 "release", "version")], collapse = " "), 
[17:44:23.986]                               hostname = base::Sys.info()[["nodename"]])
[17:44:23.986]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:23.986]                               info)
[17:44:23.986]                             info <- base::paste(info, collapse = "; ")
[17:44:23.986]                             if (!has_future) {
[17:44:23.986]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:23.986]                                 info)
[17:44:23.986]                             }
[17:44:23.986]                             else {
[17:44:23.986]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:23.986]                                 info, version)
[17:44:23.986]                             }
[17:44:23.986]                             base::stop(msg)
[17:44:23.986]                           }
[17:44:23.986]                         })
[17:44:23.986]                       }
[17:44:23.986]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:23.986]                       base::options(mc.cores = 1L)
[17:44:23.986]                     }
[17:44:23.986]                     base::local({
[17:44:23.986]                       for (pkg in "utils") {
[17:44:23.986]                         base::loadNamespace(pkg)
[17:44:23.986]                         base::library(pkg, character.only = TRUE)
[17:44:23.986]                       }
[17:44:23.986]                     })
[17:44:23.986]                   }
[17:44:23.986]                   options(future.plan = NULL)
[17:44:23.986]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.986]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:23.986]                 }
[17:44:23.986]                 ...future.workdir <- getwd()
[17:44:23.986]             }
[17:44:23.986]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:23.986]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:23.986]         }
[17:44:23.986]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:23.986]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:23.986]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:23.986]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:23.986]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:23.986]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:23.986]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:23.986]             base::names(...future.oldOptions))
[17:44:23.986]     }
[17:44:23.986]     if (TRUE) {
[17:44:23.986]     }
[17:44:23.986]     else {
[17:44:23.986]         if (NA) {
[17:44:23.986]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:23.986]                 open = "w")
[17:44:23.986]         }
[17:44:23.986]         else {
[17:44:23.986]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:23.986]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:23.986]         }
[17:44:23.986]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:23.986]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:23.986]             base::sink(type = "output", split = FALSE)
[17:44:23.986]             base::close(...future.stdout)
[17:44:23.986]         }, add = TRUE)
[17:44:23.986]     }
[17:44:23.986]     ...future.frame <- base::sys.nframe()
[17:44:23.986]     ...future.conditions <- base::list()
[17:44:23.986]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:23.986]     if (FALSE) {
[17:44:23.986]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:23.986]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:23.986]     }
[17:44:23.986]     ...future.result <- base::tryCatch({
[17:44:23.986]         base::withCallingHandlers({
[17:44:23.986]             ...future.value <- base::withVisible(base::local({
[17:44:23.986]                 withCallingHandlers({
[17:44:23.986]                   {
[17:44:23.986]                     print(1:50)
[17:44:23.986]                     str(1:50)
[17:44:23.986]                     cat(letters, sep = "-")
[17:44:23.986]                     cat(1:6, collapse = "\n")
[17:44:23.986]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:23.986]                     42L
[17:44:23.986]                   }
[17:44:23.986]                 }, immediateCondition = function(cond) {
[17:44:23.986]                   save_rds <- function (object, pathname, ...) 
[17:44:23.986]                   {
[17:44:23.986]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:23.986]                     if (file_test("-f", pathname_tmp)) {
[17:44:23.986]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.986]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:23.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.986]                         fi_tmp[["mtime"]])
[17:44:23.986]                     }
[17:44:23.986]                     tryCatch({
[17:44:23.986]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:23.986]                     }, error = function(ex) {
[17:44:23.986]                       msg <- conditionMessage(ex)
[17:44:23.986]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.986]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:23.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.986]                         fi_tmp[["mtime"]], msg)
[17:44:23.986]                       ex$message <- msg
[17:44:23.986]                       stop(ex)
[17:44:23.986]                     })
[17:44:23.986]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:23.986]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:23.986]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:23.986]                       fi_tmp <- file.info(pathname_tmp)
[17:44:23.986]                       fi <- file.info(pathname)
[17:44:23.986]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:23.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:23.986]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:23.986]                         fi[["size"]], fi[["mtime"]])
[17:44:23.986]                       stop(msg)
[17:44:23.986]                     }
[17:44:23.986]                     invisible(pathname)
[17:44:23.986]                   }
[17:44:23.986]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:23.986]                     rootPath = tempdir()) 
[17:44:23.986]                   {
[17:44:23.986]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:23.986]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:23.986]                       tmpdir = path, fileext = ".rds")
[17:44:23.986]                     save_rds(obj, file)
[17:44:23.986]                   }
[17:44:23.986]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:23.986]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.986]                   {
[17:44:23.986]                     inherits <- base::inherits
[17:44:23.986]                     invokeRestart <- base::invokeRestart
[17:44:23.986]                     is.null <- base::is.null
[17:44:23.986]                     muffled <- FALSE
[17:44:23.986]                     if (inherits(cond, "message")) {
[17:44:23.986]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:23.986]                       if (muffled) 
[17:44:23.986]                         invokeRestart("muffleMessage")
[17:44:23.986]                     }
[17:44:23.986]                     else if (inherits(cond, "warning")) {
[17:44:23.986]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:23.986]                       if (muffled) 
[17:44:23.986]                         invokeRestart("muffleWarning")
[17:44:23.986]                     }
[17:44:23.986]                     else if (inherits(cond, "condition")) {
[17:44:23.986]                       if (!is.null(pattern)) {
[17:44:23.986]                         computeRestarts <- base::computeRestarts
[17:44:23.986]                         grepl <- base::grepl
[17:44:23.986]                         restarts <- computeRestarts(cond)
[17:44:23.986]                         for (restart in restarts) {
[17:44:23.986]                           name <- restart$name
[17:44:23.986]                           if (is.null(name)) 
[17:44:23.986]                             next
[17:44:23.986]                           if (!grepl(pattern, name)) 
[17:44:23.986]                             next
[17:44:23.986]                           invokeRestart(restart)
[17:44:23.986]                           muffled <- TRUE
[17:44:23.986]                           break
[17:44:23.986]                         }
[17:44:23.986]                       }
[17:44:23.986]                     }
[17:44:23.986]                     invisible(muffled)
[17:44:23.986]                   }
[17:44:23.986]                   muffleCondition(cond)
[17:44:23.986]                 })
[17:44:23.986]             }))
[17:44:23.986]             future::FutureResult(value = ...future.value$value, 
[17:44:23.986]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.986]                   ...future.rng), globalenv = if (FALSE) 
[17:44:23.986]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:23.986]                     ...future.globalenv.names))
[17:44:23.986]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:23.986]         }, condition = base::local({
[17:44:23.986]             c <- base::c
[17:44:23.986]             inherits <- base::inherits
[17:44:23.986]             invokeRestart <- base::invokeRestart
[17:44:23.986]             length <- base::length
[17:44:23.986]             list <- base::list
[17:44:23.986]             seq.int <- base::seq.int
[17:44:23.986]             signalCondition <- base::signalCondition
[17:44:23.986]             sys.calls <- base::sys.calls
[17:44:23.986]             `[[` <- base::`[[`
[17:44:23.986]             `+` <- base::`+`
[17:44:23.986]             `<<-` <- base::`<<-`
[17:44:23.986]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:23.986]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:23.986]                   3L)]
[17:44:23.986]             }
[17:44:23.986]             function(cond) {
[17:44:23.986]                 is_error <- inherits(cond, "error")
[17:44:23.986]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:23.986]                   NULL)
[17:44:23.986]                 if (is_error) {
[17:44:23.986]                   sessionInformation <- function() {
[17:44:23.986]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:23.986]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:23.986]                       search = base::search(), system = base::Sys.info())
[17:44:23.986]                   }
[17:44:23.986]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.986]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:23.986]                     cond$call), session = sessionInformation(), 
[17:44:23.986]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:23.986]                   signalCondition(cond)
[17:44:23.986]                 }
[17:44:23.986]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:23.986]                 "immediateCondition"))) {
[17:44:23.986]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:23.986]                   ...future.conditions[[length(...future.conditions) + 
[17:44:23.986]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:23.986]                   if (TRUE && !signal) {
[17:44:23.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.986]                     {
[17:44:23.986]                       inherits <- base::inherits
[17:44:23.986]                       invokeRestart <- base::invokeRestart
[17:44:23.986]                       is.null <- base::is.null
[17:44:23.986]                       muffled <- FALSE
[17:44:23.986]                       if (inherits(cond, "message")) {
[17:44:23.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.986]                         if (muffled) 
[17:44:23.986]                           invokeRestart("muffleMessage")
[17:44:23.986]                       }
[17:44:23.986]                       else if (inherits(cond, "warning")) {
[17:44:23.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.986]                         if (muffled) 
[17:44:23.986]                           invokeRestart("muffleWarning")
[17:44:23.986]                       }
[17:44:23.986]                       else if (inherits(cond, "condition")) {
[17:44:23.986]                         if (!is.null(pattern)) {
[17:44:23.986]                           computeRestarts <- base::computeRestarts
[17:44:23.986]                           grepl <- base::grepl
[17:44:23.986]                           restarts <- computeRestarts(cond)
[17:44:23.986]                           for (restart in restarts) {
[17:44:23.986]                             name <- restart$name
[17:44:23.986]                             if (is.null(name)) 
[17:44:23.986]                               next
[17:44:23.986]                             if (!grepl(pattern, name)) 
[17:44:23.986]                               next
[17:44:23.986]                             invokeRestart(restart)
[17:44:23.986]                             muffled <- TRUE
[17:44:23.986]                             break
[17:44:23.986]                           }
[17:44:23.986]                         }
[17:44:23.986]                       }
[17:44:23.986]                       invisible(muffled)
[17:44:23.986]                     }
[17:44:23.986]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.986]                   }
[17:44:23.986]                 }
[17:44:23.986]                 else {
[17:44:23.986]                   if (TRUE) {
[17:44:23.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:23.986]                     {
[17:44:23.986]                       inherits <- base::inherits
[17:44:23.986]                       invokeRestart <- base::invokeRestart
[17:44:23.986]                       is.null <- base::is.null
[17:44:23.986]                       muffled <- FALSE
[17:44:23.986]                       if (inherits(cond, "message")) {
[17:44:23.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:23.986]                         if (muffled) 
[17:44:23.986]                           invokeRestart("muffleMessage")
[17:44:23.986]                       }
[17:44:23.986]                       else if (inherits(cond, "warning")) {
[17:44:23.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:23.986]                         if (muffled) 
[17:44:23.986]                           invokeRestart("muffleWarning")
[17:44:23.986]                       }
[17:44:23.986]                       else if (inherits(cond, "condition")) {
[17:44:23.986]                         if (!is.null(pattern)) {
[17:44:23.986]                           computeRestarts <- base::computeRestarts
[17:44:23.986]                           grepl <- base::grepl
[17:44:23.986]                           restarts <- computeRestarts(cond)
[17:44:23.986]                           for (restart in restarts) {
[17:44:23.986]                             name <- restart$name
[17:44:23.986]                             if (is.null(name)) 
[17:44:23.986]                               next
[17:44:23.986]                             if (!grepl(pattern, name)) 
[17:44:23.986]                               next
[17:44:23.986]                             invokeRestart(restart)
[17:44:23.986]                             muffled <- TRUE
[17:44:23.986]                             break
[17:44:23.986]                           }
[17:44:23.986]                         }
[17:44:23.986]                       }
[17:44:23.986]                       invisible(muffled)
[17:44:23.986]                     }
[17:44:23.986]                     muffleCondition(cond, pattern = "^muffle")
[17:44:23.986]                   }
[17:44:23.986]                 }
[17:44:23.986]             }
[17:44:23.986]         }))
[17:44:23.986]     }, error = function(ex) {
[17:44:23.986]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:23.986]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:23.986]                 ...future.rng), started = ...future.startTime, 
[17:44:23.986]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:23.986]             version = "1.8"), class = "FutureResult")
[17:44:23.986]     }, finally = {
[17:44:23.986]         if (!identical(...future.workdir, getwd())) 
[17:44:23.986]             setwd(...future.workdir)
[17:44:23.986]         {
[17:44:23.986]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:23.986]                 ...future.oldOptions$nwarnings <- NULL
[17:44:23.986]             }
[17:44:23.986]             base::options(...future.oldOptions)
[17:44:23.986]             if (.Platform$OS.type == "windows") {
[17:44:23.986]                 old_names <- names(...future.oldEnvVars)
[17:44:23.986]                 envs <- base::Sys.getenv()
[17:44:23.986]                 names <- names(envs)
[17:44:23.986]                 common <- intersect(names, old_names)
[17:44:23.986]                 added <- setdiff(names, old_names)
[17:44:23.986]                 removed <- setdiff(old_names, names)
[17:44:23.986]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:23.986]                   envs[common]]
[17:44:23.986]                 NAMES <- toupper(changed)
[17:44:23.986]                 args <- list()
[17:44:23.986]                 for (kk in seq_along(NAMES)) {
[17:44:23.986]                   name <- changed[[kk]]
[17:44:23.986]                   NAME <- NAMES[[kk]]
[17:44:23.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.986]                     next
[17:44:23.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.986]                 }
[17:44:23.986]                 NAMES <- toupper(added)
[17:44:23.986]                 for (kk in seq_along(NAMES)) {
[17:44:23.986]                   name <- added[[kk]]
[17:44:23.986]                   NAME <- NAMES[[kk]]
[17:44:23.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.986]                     next
[17:44:23.986]                   args[[name]] <- ""
[17:44:23.986]                 }
[17:44:23.986]                 NAMES <- toupper(removed)
[17:44:23.986]                 for (kk in seq_along(NAMES)) {
[17:44:23.986]                   name <- removed[[kk]]
[17:44:23.986]                   NAME <- NAMES[[kk]]
[17:44:23.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:23.986]                     next
[17:44:23.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:23.986]                 }
[17:44:23.986]                 if (length(args) > 0) 
[17:44:23.986]                   base::do.call(base::Sys.setenv, args = args)
[17:44:23.986]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:23.986]             }
[17:44:23.986]             else {
[17:44:23.986]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:23.986]             }
[17:44:23.986]             {
[17:44:23.986]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:23.986]                   0L) {
[17:44:23.986]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:23.986]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:23.986]                   base::options(opts)
[17:44:23.986]                 }
[17:44:23.986]                 {
[17:44:23.986]                   {
[17:44:23.986]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:23.986]                     NULL
[17:44:23.986]                   }
[17:44:23.986]                   options(future.plan = NULL)
[17:44:23.986]                   if (is.na(NA_character_)) 
[17:44:23.986]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:23.986]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:23.986]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:23.986]                     envir = parent.frame()) 
[17:44:23.986]                   {
[17:44:23.986]                     default_workers <- missing(workers)
[17:44:23.986]                     if (is.function(workers)) 
[17:44:23.986]                       workers <- workers()
[17:44:23.986]                     workers <- structure(as.integer(workers), 
[17:44:23.986]                       class = class(workers))
[17:44:23.986]                     stop_if_not(is.finite(workers), workers >= 
[17:44:23.986]                       1L)
[17:44:23.986]                     if ((workers == 1L && !inherits(workers, 
[17:44:23.986]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:23.986]                       if (default_workers) 
[17:44:23.986]                         supportsMulticore(warn = TRUE)
[17:44:23.986]                       return(sequential(..., envir = envir))
[17:44:23.986]                     }
[17:44:23.986]                     oopts <- options(mc.cores = workers)
[17:44:23.986]                     on.exit(options(oopts))
[17:44:23.986]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:23.986]                       envir = envir)
[17:44:23.986]                     if (!future$lazy) 
[17:44:23.986]                       future <- run(future)
[17:44:23.986]                     invisible(future)
[17:44:23.986]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:23.986]                 }
[17:44:23.986]             }
[17:44:23.986]         }
[17:44:23.986]     })
[17:44:23.986]     if (FALSE) {
[17:44:23.986]         base::sink(type = "output", split = FALSE)
[17:44:23.986]         if (NA) {
[17:44:23.986]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:23.986]         }
[17:44:23.986]         else {
[17:44:23.986]             ...future.result["stdout"] <- base::list(NULL)
[17:44:23.986]         }
[17:44:23.986]         base::close(...future.stdout)
[17:44:23.986]         ...future.stdout <- NULL
[17:44:23.986]     }
[17:44:23.986]     ...future.result$conditions <- ...future.conditions
[17:44:23.986]     ...future.result$finished <- base::Sys.time()
[17:44:23.986]     ...future.result
[17:44:23.986] }
[17:44:23.989] requestCore(): workers = 2
[17:44:23.991] MulticoreFuture started
[17:44:23.991] - Launch lazy future ... done
[17:44:23.991] run() for ‘MulticoreFuture’ ... done
[17:44:23.992] plan(): Setting new future strategy stack:
[17:44:23.993] List of future strategies:
[17:44:23.993] 1. sequential:
[17:44:23.993]    - args: function (..., envir = parent.frame())
[17:44:23.993]    - tweaked: FALSE
[17:44:23.993]    - call: NULL
[17:44:23.993] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[17:44:23.997] plan(): Setting new future strategy stack:
[17:44:23.997] List of future strategies:
[17:44:23.997] 1. multicore:
[17:44:23.997]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:23.997]    - tweaked: FALSE
[17:44:23.997]    - call: plan(strategy)
[17:44:24.002] plan(): nbrOfWorkers() = 2
- stdout = structure(TRUE, drop = TRUE)
[17:44:24.003] getGlobalsAndPackages() ...
[17:44:24.003] Searching for globals...
[17:44:24.004] - globals found: [1] ‘print’
[17:44:24.004] Searching for globals ... DONE
[17:44:24.004] Resolving globals: FALSE
[17:44:24.005] 
[17:44:24.005] 
[17:44:24.005] getGlobalsAndPackages() ... DONE
[17:44:24.005] run() for ‘Future’ ...
[17:44:24.005] - state: ‘created’
[17:44:24.006] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:44:24.010] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:24.010] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:44:24.010]   - Field: ‘label’
[17:44:24.010]   - Field: ‘local’
[17:44:24.010]   - Field: ‘owner’
[17:44:24.010]   - Field: ‘envir’
[17:44:24.011]   - Field: ‘workers’
[17:44:24.011]   - Field: ‘packages’
[17:44:24.011]   - Field: ‘gc’
[17:44:24.011]   - Field: ‘job’
[17:44:24.011]   - Field: ‘conditions’
[17:44:24.011]   - Field: ‘expr’
[17:44:24.011]   - Field: ‘uuid’
[17:44:24.011]   - Field: ‘seed’
[17:44:24.012]   - Field: ‘version’
[17:44:24.012]   - Field: ‘result’
[17:44:24.012]   - Field: ‘asynchronous’
[17:44:24.012]   - Field: ‘calls’
[17:44:24.012]   - Field: ‘globals’
[17:44:24.012]   - Field: ‘stdout’
[17:44:24.012]   - Field: ‘earlySignal’
[17:44:24.012]   - Field: ‘lazy’
[17:44:24.012]   - Field: ‘state’
[17:44:24.013] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:44:24.013] - Launch lazy future ...
[17:44:24.013] Packages needed by the future expression (n = 0): <none>
[17:44:24.013] Packages needed by future strategies (n = 0): <none>
[17:44:24.014] {
[17:44:24.014]     {
[17:44:24.014]         {
[17:44:24.014]             ...future.startTime <- base::Sys.time()
[17:44:24.014]             {
[17:44:24.014]                 {
[17:44:24.014]                   {
[17:44:24.014]                     {
[17:44:24.014]                       base::local({
[17:44:24.014]                         has_future <- base::requireNamespace("future", 
[17:44:24.014]                           quietly = TRUE)
[17:44:24.014]                         if (has_future) {
[17:44:24.014]                           ns <- base::getNamespace("future")
[17:44:24.014]                           version <- ns[[".package"]][["version"]]
[17:44:24.014]                           if (is.null(version)) 
[17:44:24.014]                             version <- utils::packageVersion("future")
[17:44:24.014]                         }
[17:44:24.014]                         else {
[17:44:24.014]                           version <- NULL
[17:44:24.014]                         }
[17:44:24.014]                         if (!has_future || version < "1.8.0") {
[17:44:24.014]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:24.014]                             "", base::R.version$version.string), 
[17:44:24.014]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:24.014]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:24.014]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:24.014]                               "release", "version")], collapse = " "), 
[17:44:24.014]                             hostname = base::Sys.info()[["nodename"]])
[17:44:24.014]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:24.014]                             info)
[17:44:24.014]                           info <- base::paste(info, collapse = "; ")
[17:44:24.014]                           if (!has_future) {
[17:44:24.014]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:24.014]                               info)
[17:44:24.014]                           }
[17:44:24.014]                           else {
[17:44:24.014]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:24.014]                               info, version)
[17:44:24.014]                           }
[17:44:24.014]                           base::stop(msg)
[17:44:24.014]                         }
[17:44:24.014]                       })
[17:44:24.014]                     }
[17:44:24.014]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:24.014]                     base::options(mc.cores = 1L)
[17:44:24.014]                   }
[17:44:24.014]                   options(future.plan = NULL)
[17:44:24.014]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.014]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:24.014]                 }
[17:44:24.014]                 ...future.workdir <- getwd()
[17:44:24.014]             }
[17:44:24.014]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:24.014]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:24.014]         }
[17:44:24.014]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:24.014]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:24.014]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:24.014]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:24.014]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:24.014]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:24.014]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:24.014]             base::names(...future.oldOptions))
[17:44:24.014]     }
[17:44:24.014]     if (FALSE) {
[17:44:24.014]     }
[17:44:24.014]     else {
[17:44:24.014]         if (TRUE) {
[17:44:24.014]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:24.014]                 open = "w")
[17:44:24.014]         }
[17:44:24.014]         else {
[17:44:24.014]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:24.014]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:24.014]         }
[17:44:24.014]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:24.014]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:24.014]             base::sink(type = "output", split = FALSE)
[17:44:24.014]             base::close(...future.stdout)
[17:44:24.014]         }, add = TRUE)
[17:44:24.014]     }
[17:44:24.014]     ...future.frame <- base::sys.nframe()
[17:44:24.014]     ...future.conditions <- base::list()
[17:44:24.014]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:24.014]     if (FALSE) {
[17:44:24.014]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:24.014]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:24.014]     }
[17:44:24.014]     ...future.result <- base::tryCatch({
[17:44:24.014]         base::withCallingHandlers({
[17:44:24.014]             ...future.value <- base::withVisible(base::local({
[17:44:24.014]                 withCallingHandlers({
[17:44:24.014]                   print(42)
[17:44:24.014]                 }, immediateCondition = function(cond) {
[17:44:24.014]                   save_rds <- function (object, pathname, ...) 
[17:44:24.014]                   {
[17:44:24.014]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:44:24.014]                     if (file_test("-f", pathname_tmp)) {
[17:44:24.014]                       fi_tmp <- file.info(pathname_tmp)
[17:44:24.014]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:44:24.014]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:24.014]                         fi_tmp[["mtime"]])
[17:44:24.014]                     }
[17:44:24.014]                     tryCatch({
[17:44:24.014]                       saveRDS(object, file = pathname_tmp, ...)
[17:44:24.014]                     }, error = function(ex) {
[17:44:24.014]                       msg <- conditionMessage(ex)
[17:44:24.014]                       fi_tmp <- file.info(pathname_tmp)
[17:44:24.014]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:44:24.014]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:24.014]                         fi_tmp[["mtime"]], msg)
[17:44:24.014]                       ex$message <- msg
[17:44:24.014]                       stop(ex)
[17:44:24.014]                     })
[17:44:24.014]                     stopifnot(file_test("-f", pathname_tmp))
[17:44:24.014]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:44:24.014]                     if (!res || file_test("-f", pathname_tmp)) {
[17:44:24.014]                       fi_tmp <- file.info(pathname_tmp)
[17:44:24.014]                       fi <- file.info(pathname)
[17:44:24.014]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:44:24.014]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:44:24.014]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:44:24.014]                         fi[["size"]], fi[["mtime"]])
[17:44:24.014]                       stop(msg)
[17:44:24.014]                     }
[17:44:24.014]                     invisible(pathname)
[17:44:24.014]                   }
[17:44:24.014]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:44:24.014]                     rootPath = tempdir()) 
[17:44:24.014]                   {
[17:44:24.014]                     obj <- list(time = Sys.time(), condition = cond)
[17:44:24.014]                     file <- tempfile(pattern = class(cond)[1], 
[17:44:24.014]                       tmpdir = path, fileext = ".rds")
[17:44:24.014]                     save_rds(obj, file)
[17:44:24.014]                   }
[17:44:24.014]                   saveImmediateCondition(cond, path = "/tmp/RtmpYQFqtH/.future/immediateConditions")
[17:44:24.014]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.014]                   {
[17:44:24.014]                     inherits <- base::inherits
[17:44:24.014]                     invokeRestart <- base::invokeRestart
[17:44:24.014]                     is.null <- base::is.null
[17:44:24.014]                     muffled <- FALSE
[17:44:24.014]                     if (inherits(cond, "message")) {
[17:44:24.014]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:24.014]                       if (muffled) 
[17:44:24.014]                         invokeRestart("muffleMessage")
[17:44:24.014]                     }
[17:44:24.014]                     else if (inherits(cond, "warning")) {
[17:44:24.014]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:24.014]                       if (muffled) 
[17:44:24.014]                         invokeRestart("muffleWarning")
[17:44:24.014]                     }
[17:44:24.014]                     else if (inherits(cond, "condition")) {
[17:44:24.014]                       if (!is.null(pattern)) {
[17:44:24.014]                         computeRestarts <- base::computeRestarts
[17:44:24.014]                         grepl <- base::grepl
[17:44:24.014]                         restarts <- computeRestarts(cond)
[17:44:24.014]                         for (restart in restarts) {
[17:44:24.014]                           name <- restart$name
[17:44:24.014]                           if (is.null(name)) 
[17:44:24.014]                             next
[17:44:24.014]                           if (!grepl(pattern, name)) 
[17:44:24.014]                             next
[17:44:24.014]                           invokeRestart(restart)
[17:44:24.014]                           muffled <- TRUE
[17:44:24.014]                           break
[17:44:24.014]                         }
[17:44:24.014]                       }
[17:44:24.014]                     }
[17:44:24.014]                     invisible(muffled)
[17:44:24.014]                   }
[17:44:24.014]                   muffleCondition(cond)
[17:44:24.014]                 })
[17:44:24.014]             }))
[17:44:24.014]             future::FutureResult(value = ...future.value$value, 
[17:44:24.014]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.014]                   ...future.rng), globalenv = if (FALSE) 
[17:44:24.014]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:24.014]                     ...future.globalenv.names))
[17:44:24.014]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:24.014]         }, condition = base::local({
[17:44:24.014]             c <- base::c
[17:44:24.014]             inherits <- base::inherits
[17:44:24.014]             invokeRestart <- base::invokeRestart
[17:44:24.014]             length <- base::length
[17:44:24.014]             list <- base::list
[17:44:24.014]             seq.int <- base::seq.int
[17:44:24.014]             signalCondition <- base::signalCondition
[17:44:24.014]             sys.calls <- base::sys.calls
[17:44:24.014]             `[[` <- base::`[[`
[17:44:24.014]             `+` <- base::`+`
[17:44:24.014]             `<<-` <- base::`<<-`
[17:44:24.014]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:24.014]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:24.014]                   3L)]
[17:44:24.014]             }
[17:44:24.014]             function(cond) {
[17:44:24.014]                 is_error <- inherits(cond, "error")
[17:44:24.014]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:24.014]                   NULL)
[17:44:24.014]                 if (is_error) {
[17:44:24.014]                   sessionInformation <- function() {
[17:44:24.014]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:24.014]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:24.014]                       search = base::search(), system = base::Sys.info())
[17:44:24.014]                   }
[17:44:24.014]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.014]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:24.014]                     cond$call), session = sessionInformation(), 
[17:44:24.014]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:24.014]                   signalCondition(cond)
[17:44:24.014]                 }
[17:44:24.014]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:24.014]                 "immediateCondition"))) {
[17:44:24.014]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:24.014]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.014]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:24.014]                   if (TRUE && !signal) {
[17:44:24.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.014]                     {
[17:44:24.014]                       inherits <- base::inherits
[17:44:24.014]                       invokeRestart <- base::invokeRestart
[17:44:24.014]                       is.null <- base::is.null
[17:44:24.014]                       muffled <- FALSE
[17:44:24.014]                       if (inherits(cond, "message")) {
[17:44:24.014]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.014]                         if (muffled) 
[17:44:24.014]                           invokeRestart("muffleMessage")
[17:44:24.014]                       }
[17:44:24.014]                       else if (inherits(cond, "warning")) {
[17:44:24.014]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.014]                         if (muffled) 
[17:44:24.014]                           invokeRestart("muffleWarning")
[17:44:24.014]                       }
[17:44:24.014]                       else if (inherits(cond, "condition")) {
[17:44:24.014]                         if (!is.null(pattern)) {
[17:44:24.014]                           computeRestarts <- base::computeRestarts
[17:44:24.014]                           grepl <- base::grepl
[17:44:24.014]                           restarts <- computeRestarts(cond)
[17:44:24.014]                           for (restart in restarts) {
[17:44:24.014]                             name <- restart$name
[17:44:24.014]                             if (is.null(name)) 
[17:44:24.014]                               next
[17:44:24.014]                             if (!grepl(pattern, name)) 
[17:44:24.014]                               next
[17:44:24.014]                             invokeRestart(restart)
[17:44:24.014]                             muffled <- TRUE
[17:44:24.014]                             break
[17:44:24.014]                           }
[17:44:24.014]                         }
[17:44:24.014]                       }
[17:44:24.014]                       invisible(muffled)
[17:44:24.014]                     }
[17:44:24.014]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.014]                   }
[17:44:24.014]                 }
[17:44:24.014]                 else {
[17:44:24.014]                   if (TRUE) {
[17:44:24.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.014]                     {
[17:44:24.014]                       inherits <- base::inherits
[17:44:24.014]                       invokeRestart <- base::invokeRestart
[17:44:24.014]                       is.null <- base::is.null
[17:44:24.014]                       muffled <- FALSE
[17:44:24.014]                       if (inherits(cond, "message")) {
[17:44:24.014]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.014]                         if (muffled) 
[17:44:24.014]                           invokeRestart("muffleMessage")
[17:44:24.014]                       }
[17:44:24.014]                       else if (inherits(cond, "warning")) {
[17:44:24.014]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.014]                         if (muffled) 
[17:44:24.014]                           invokeRestart("muffleWarning")
[17:44:24.014]                       }
[17:44:24.014]                       else if (inherits(cond, "condition")) {
[17:44:24.014]                         if (!is.null(pattern)) {
[17:44:24.014]                           computeRestarts <- base::computeRestarts
[17:44:24.014]                           grepl <- base::grepl
[17:44:24.014]                           restarts <- computeRestarts(cond)
[17:44:24.014]                           for (restart in restarts) {
[17:44:24.014]                             name <- restart$name
[17:44:24.014]                             if (is.null(name)) 
[17:44:24.014]                               next
[17:44:24.014]                             if (!grepl(pattern, name)) 
[17:44:24.014]                               next
[17:44:24.014]                             invokeRestart(restart)
[17:44:24.014]                             muffled <- TRUE
[17:44:24.014]                             break
[17:44:24.014]                           }
[17:44:24.014]                         }
[17:44:24.014]                       }
[17:44:24.014]                       invisible(muffled)
[17:44:24.014]                     }
[17:44:24.014]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.014]                   }
[17:44:24.014]                 }
[17:44:24.014]             }
[17:44:24.014]         }))
[17:44:24.014]     }, error = function(ex) {
[17:44:24.014]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:24.014]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.014]                 ...future.rng), started = ...future.startTime, 
[17:44:24.014]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:24.014]             version = "1.8"), class = "FutureResult")
[17:44:24.014]     }, finally = {
[17:44:24.014]         if (!identical(...future.workdir, getwd())) 
[17:44:24.014]             setwd(...future.workdir)
[17:44:24.014]         {
[17:44:24.014]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:24.014]                 ...future.oldOptions$nwarnings <- NULL
[17:44:24.014]             }
[17:44:24.014]             base::options(...future.oldOptions)
[17:44:24.014]             if (.Platform$OS.type == "windows") {
[17:44:24.014]                 old_names <- names(...future.oldEnvVars)
[17:44:24.014]                 envs <- base::Sys.getenv()
[17:44:24.014]                 names <- names(envs)
[17:44:24.014]                 common <- intersect(names, old_names)
[17:44:24.014]                 added <- setdiff(names, old_names)
[17:44:24.014]                 removed <- setdiff(old_names, names)
[17:44:24.014]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:24.014]                   envs[common]]
[17:44:24.014]                 NAMES <- toupper(changed)
[17:44:24.014]                 args <- list()
[17:44:24.014]                 for (kk in seq_along(NAMES)) {
[17:44:24.014]                   name <- changed[[kk]]
[17:44:24.014]                   NAME <- NAMES[[kk]]
[17:44:24.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.014]                     next
[17:44:24.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.014]                 }
[17:44:24.014]                 NAMES <- toupper(added)
[17:44:24.014]                 for (kk in seq_along(NAMES)) {
[17:44:24.014]                   name <- added[[kk]]
[17:44:24.014]                   NAME <- NAMES[[kk]]
[17:44:24.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.014]                     next
[17:44:24.014]                   args[[name]] <- ""
[17:44:24.014]                 }
[17:44:24.014]                 NAMES <- toupper(removed)
[17:44:24.014]                 for (kk in seq_along(NAMES)) {
[17:44:24.014]                   name <- removed[[kk]]
[17:44:24.014]                   NAME <- NAMES[[kk]]
[17:44:24.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.014]                     next
[17:44:24.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.014]                 }
[17:44:24.014]                 if (length(args) > 0) 
[17:44:24.014]                   base::do.call(base::Sys.setenv, args = args)
[17:44:24.014]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:24.014]             }
[17:44:24.014]             else {
[17:44:24.014]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:24.014]             }
[17:44:24.014]             {
[17:44:24.014]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:24.014]                   0L) {
[17:44:24.014]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:24.014]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:24.014]                   base::options(opts)
[17:44:24.014]                 }
[17:44:24.014]                 {
[17:44:24.014]                   {
[17:44:24.014]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:24.014]                     NULL
[17:44:24.014]                   }
[17:44:24.014]                   options(future.plan = NULL)
[17:44:24.014]                   if (is.na(NA_character_)) 
[17:44:24.014]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.014]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:24.014]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:44:24.014]                     envir = parent.frame()) 
[17:44:24.014]                   {
[17:44:24.014]                     default_workers <- missing(workers)
[17:44:24.014]                     if (is.function(workers)) 
[17:44:24.014]                       workers <- workers()
[17:44:24.014]                     workers <- structure(as.integer(workers), 
[17:44:24.014]                       class = class(workers))
[17:44:24.014]                     stop_if_not(is.finite(workers), workers >= 
[17:44:24.014]                       1L)
[17:44:24.014]                     if ((workers == 1L && !inherits(workers, 
[17:44:24.014]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:44:24.014]                       if (default_workers) 
[17:44:24.014]                         supportsMulticore(warn = TRUE)
[17:44:24.014]                       return(sequential(..., envir = envir))
[17:44:24.014]                     }
[17:44:24.014]                     oopts <- options(mc.cores = workers)
[17:44:24.014]                     on.exit(options(oopts))
[17:44:24.014]                     future <- MulticoreFuture(..., workers = workers, 
[17:44:24.014]                       envir = envir)
[17:44:24.014]                     if (!future$lazy) 
[17:44:24.014]                       future <- run(future)
[17:44:24.014]                     invisible(future)
[17:44:24.014]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:24.014]                 }
[17:44:24.014]             }
[17:44:24.014]         }
[17:44:24.014]     })
[17:44:24.014]     if (TRUE) {
[17:44:24.014]         base::sink(type = "output", split = FALSE)
[17:44:24.014]         if (TRUE) {
[17:44:24.014]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:24.014]         }
[17:44:24.014]         else {
[17:44:24.014]             ...future.result["stdout"] <- base::list(NULL)
[17:44:24.014]         }
[17:44:24.014]         base::close(...future.stdout)
[17:44:24.014]         ...future.stdout <- NULL
[17:44:24.014]     }
[17:44:24.014]     ...future.result$conditions <- ...future.conditions
[17:44:24.014]     ...future.result$finished <- base::Sys.time()
[17:44:24.014]     ...future.result
[17:44:24.014] }
[17:44:24.017] requestCore(): workers = 2
[17:44:24.019] MulticoreFuture started
[17:44:24.019] - Launch lazy future ... done
[17:44:24.019] run() for ‘MulticoreFuture’ ... done
[17:44:24.020] plan(): Setting new future strategy stack:
[17:44:24.020] List of future strategies:
[17:44:24.020] 1. sequential:
[17:44:24.020]    - args: function (..., envir = parent.frame())
[17:44:24.020]    - tweaked: FALSE
[17:44:24.020]    - call: NULL
[17:44:24.021] plan(): nbrOfWorkers() = 1
[17:44:24.023] plan(): Setting new future strategy stack:
[17:44:24.023] List of future strategies:
[17:44:24.023] 1. multicore:
[17:44:24.023]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:44:24.023]    - tweaked: FALSE
[17:44:24.023]    - call: plan(strategy)
[17:44:24.028] plan(): nbrOfWorkers() = 2
[1] 42
multicore ... done
multisession ...
[17:44:24.030] plan(): Setting new future strategy stack:
[17:44:24.030] List of future strategies:
[17:44:24.030] 1. multisession:
[17:44:24.030]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:24.030]    - tweaked: FALSE
[17:44:24.030]    - call: plan(strategy)
[17:44:24.031] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:44:24.031] multisession:
[17:44:24.031] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:44:24.031] - tweaked: FALSE
[17:44:24.031] - call: plan(strategy)
[17:44:24.038] getGlobalsAndPackages() ...
[17:44:24.038] Not searching for globals
[17:44:24.039] - globals: [0] <none>
[17:44:24.039] getGlobalsAndPackages() ... DONE
[17:44:24.039] [local output] makeClusterPSOCK() ...
[17:44:24.083] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:44:24.089] [local output] Base port: 11673
[17:44:24.089] [local output] Getting setup options for 2 cluster nodes ...
[17:44:24.089] [local output]  - Node 1 of 2 ...
[17:44:24.089] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:24.090] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYQFqtH/worker.rank=1.parallelly.parent=53760.d2006f068b26.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpYQFqtH/worker.rank=1.parallelly.parent=53760.d2006f068b26.pid")'’
[17:44:24.284] - Possible to infer worker's PID: TRUE
[17:44:24.284] [local output] Rscript port: 11673

[17:44:24.284] [local output]  - Node 2 of 2 ...
[17:44:24.285] [local output] localMachine=TRUE => revtunnel=FALSE

[17:44:24.285] [local output] Rscript port: 11673

[17:44:24.285] [local output] Getting setup options for 2 cluster nodes ... done
[17:44:24.286] [local output]  - Parallel setup requested for some PSOCK nodes
[17:44:24.286] [local output] Setting up PSOCK nodes in parallel
[17:44:24.286] List of 36
[17:44:24.286]  $ worker          : chr "localhost"
[17:44:24.286]   ..- attr(*, "localhost")= logi TRUE
[17:44:24.286]  $ master          : chr "localhost"
[17:44:24.286]  $ port            : int 11673
[17:44:24.286]  $ connectTimeout  : num 120
[17:44:24.286]  $ timeout         : num 2592000
[17:44:24.286]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:44:24.286]  $ homogeneous     : logi TRUE
[17:44:24.286]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:44:24.286]  $ rscript_envs    : NULL
[17:44:24.286]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:24.286]  $ rscript_startup : NULL
[17:44:24.286]  $ rscript_sh      : chr "sh"
[17:44:24.286]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:24.286]  $ methods         : logi TRUE
[17:44:24.286]  $ socketOptions   : chr "no-delay"
[17:44:24.286]  $ useXDR          : logi FALSE
[17:44:24.286]  $ outfile         : chr "/dev/null"
[17:44:24.286]  $ renice          : int NA
[17:44:24.286]  $ rshcmd          : NULL
[17:44:24.286]  $ user            : chr(0) 
[17:44:24.286]  $ revtunnel       : logi FALSE
[17:44:24.286]  $ rshlogfile      : NULL
[17:44:24.286]  $ rshopts         : chr(0) 
[17:44:24.286]  $ rank            : int 1
[17:44:24.286]  $ manual          : logi FALSE
[17:44:24.286]  $ dryrun          : logi FALSE
[17:44:24.286]  $ quiet           : logi FALSE
[17:44:24.286]  $ setup_strategy  : chr "parallel"
[17:44:24.286]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:24.286]  $ pidfile         : chr "/tmp/RtmpYQFqtH/worker.rank=1.parallelly.parent=53760.d2006f068b26.pid"
[17:44:24.286]  $ rshcmd_label    : NULL
[17:44:24.286]  $ rsh_call        : NULL
[17:44:24.286]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:44:24.286]  $ localMachine    : logi TRUE
[17:44:24.286]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:44:24.286]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:44:24.286]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:44:24.286]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:44:24.286]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:44:24.286]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:44:24.286]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:44:24.286]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:44:24.286]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:44:24.286]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:44:24.286]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:44:24.286]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:44:24.286]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:44:24.286]  $ arguments       :List of 28
[17:44:24.286]   ..$ worker          : chr "localhost"
[17:44:24.286]   ..$ master          : NULL
[17:44:24.286]   ..$ port            : int 11673
[17:44:24.286]   ..$ connectTimeout  : num 120
[17:44:24.286]   ..$ timeout         : num 2592000
[17:44:24.286]   ..$ rscript         : NULL
[17:44:24.286]   ..$ homogeneous     : NULL
[17:44:24.286]   ..$ rscript_args    : NULL
[17:44:24.286]   ..$ rscript_envs    : NULL
[17:44:24.286]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:44:24.286]   ..$ rscript_startup : NULL
[17:44:24.286]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:44:24.286]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:44:24.286]   ..$ methods         : logi TRUE
[17:44:24.286]   ..$ socketOptions   : chr "no-delay"
[17:44:24.286]   ..$ useXDR          : logi FALSE
[17:44:24.286]   ..$ outfile         : chr "/dev/null"
[17:44:24.286]   ..$ renice          : int NA
[17:44:24.286]   ..$ rshcmd          : NULL
[17:44:24.286]   ..$ user            : NULL
[17:44:24.286]   ..$ revtunnel       : logi NA
[17:44:24.286]   ..$ rshlogfile      : NULL
[17:44:24.286]   ..$ rshopts         : NULL
[17:44:24.286]   ..$ rank            : int 1
[17:44:24.286]   ..$ manual          : logi FALSE
[17:44:24.286]   ..$ dryrun          : logi FALSE
[17:44:24.286]   ..$ quiet           : logi FALSE
[17:44:24.286]   ..$ setup_strategy  : chr "parallel"
[17:44:24.286]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:44:24.303] [local output] System call to launch all workers:
[17:44:24.303] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpYQFqtH/worker.rank=1.parallelly.parent=53760.d2006f068b26.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11673 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:44:24.303] [local output] Starting PSOCK main server
[17:44:24.304] [local output] Workers launched
[17:44:24.305] [local output] Waiting for workers to connect back
[17:44:24.305]  - [local output] 0 workers out of 2 ready
[17:44:24.552]  - [local output] 0 workers out of 2 ready
[17:44:24.552]  - [local output] 1 workers out of 2 ready
[17:44:24.553]  - [local output] 2 workers out of 2 ready
[17:44:24.553] [local output] Launching of workers completed
[17:44:24.553] [local output] Collecting session information from workers
[17:44:24.554] [local output]  - Worker #1 of 2
[17:44:24.555] [local output]  - Worker #2 of 2
[17:44:24.555] [local output] makeClusterPSOCK() ... done
[17:44:24.567] Packages needed by the future expression (n = 0): <none>
[17:44:24.567] Packages needed by future strategies (n = 0): <none>
[17:44:24.567] {
[17:44:24.567]     {
[17:44:24.567]         {
[17:44:24.567]             ...future.startTime <- base::Sys.time()
[17:44:24.567]             {
[17:44:24.567]                 {
[17:44:24.567]                   {
[17:44:24.567]                     {
[17:44:24.567]                       base::local({
[17:44:24.567]                         has_future <- base::requireNamespace("future", 
[17:44:24.567]                           quietly = TRUE)
[17:44:24.567]                         if (has_future) {
[17:44:24.567]                           ns <- base::getNamespace("future")
[17:44:24.567]                           version <- ns[[".package"]][["version"]]
[17:44:24.567]                           if (is.null(version)) 
[17:44:24.567]                             version <- utils::packageVersion("future")
[17:44:24.567]                         }
[17:44:24.567]                         else {
[17:44:24.567]                           version <- NULL
[17:44:24.567]                         }
[17:44:24.567]                         if (!has_future || version < "1.8.0") {
[17:44:24.567]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:24.567]                             "", base::R.version$version.string), 
[17:44:24.567]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:24.567]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:24.567]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:24.567]                               "release", "version")], collapse = " "), 
[17:44:24.567]                             hostname = base::Sys.info()[["nodename"]])
[17:44:24.567]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:24.567]                             info)
[17:44:24.567]                           info <- base::paste(info, collapse = "; ")
[17:44:24.567]                           if (!has_future) {
[17:44:24.567]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:24.567]                               info)
[17:44:24.567]                           }
[17:44:24.567]                           else {
[17:44:24.567]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:24.567]                               info, version)
[17:44:24.567]                           }
[17:44:24.567]                           base::stop(msg)
[17:44:24.567]                         }
[17:44:24.567]                       })
[17:44:24.567]                     }
[17:44:24.567]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:24.567]                     base::options(mc.cores = 1L)
[17:44:24.567]                   }
[17:44:24.567]                   options(future.plan = NULL)
[17:44:24.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:24.567]                 }
[17:44:24.567]                 ...future.workdir <- getwd()
[17:44:24.567]             }
[17:44:24.567]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:24.567]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:24.567]         }
[17:44:24.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:24.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:24.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:24.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:24.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:24.567]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:24.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:24.567]             base::names(...future.oldOptions))
[17:44:24.567]     }
[17:44:24.567]     if (FALSE) {
[17:44:24.567]     }
[17:44:24.567]     else {
[17:44:24.567]         if (TRUE) {
[17:44:24.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:24.567]                 open = "w")
[17:44:24.567]         }
[17:44:24.567]         else {
[17:44:24.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:24.567]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:24.567]         }
[17:44:24.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:24.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:24.567]             base::sink(type = "output", split = FALSE)
[17:44:24.567]             base::close(...future.stdout)
[17:44:24.567]         }, add = TRUE)
[17:44:24.567]     }
[17:44:24.567]     ...future.frame <- base::sys.nframe()
[17:44:24.567]     ...future.conditions <- base::list()
[17:44:24.567]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:24.567]     if (FALSE) {
[17:44:24.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:24.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:24.567]     }
[17:44:24.567]     ...future.result <- base::tryCatch({
[17:44:24.567]         base::withCallingHandlers({
[17:44:24.567]             ...future.value <- base::withVisible(base::local({
[17:44:24.567]                 ...future.makeSendCondition <- local({
[17:44:24.567]                   sendCondition <- NULL
[17:44:24.567]                   function(frame = 1L) {
[17:44:24.567]                     if (is.function(sendCondition)) 
[17:44:24.567]                       return(sendCondition)
[17:44:24.567]                     ns <- getNamespace("parallel")
[17:44:24.567]                     if (exists("sendData", mode = "function", 
[17:44:24.567]                       envir = ns)) {
[17:44:24.567]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:24.567]                         envir = ns)
[17:44:24.567]                       envir <- sys.frame(frame)
[17:44:24.567]                       master <- NULL
[17:44:24.567]                       while (!identical(envir, .GlobalEnv) && 
[17:44:24.567]                         !identical(envir, emptyenv())) {
[17:44:24.567]                         if (exists("master", mode = "list", envir = envir, 
[17:44:24.567]                           inherits = FALSE)) {
[17:44:24.567]                           master <- get("master", mode = "list", 
[17:44:24.567]                             envir = envir, inherits = FALSE)
[17:44:24.567]                           if (inherits(master, c("SOCKnode", 
[17:44:24.567]                             "SOCK0node"))) {
[17:44:24.567]                             sendCondition <<- function(cond) {
[17:44:24.567]                               data <- list(type = "VALUE", value = cond, 
[17:44:24.567]                                 success = TRUE)
[17:44:24.567]                               parallel_sendData(master, data)
[17:44:24.567]                             }
[17:44:24.567]                             return(sendCondition)
[17:44:24.567]                           }
[17:44:24.567]                         }
[17:44:24.567]                         frame <- frame + 1L
[17:44:24.567]                         envir <- sys.frame(frame)
[17:44:24.567]                       }
[17:44:24.567]                     }
[17:44:24.567]                     sendCondition <<- function(cond) NULL
[17:44:24.567]                   }
[17:44:24.567]                 })
[17:44:24.567]                 withCallingHandlers({
[17:44:24.567]                   NA
[17:44:24.567]                 }, immediateCondition = function(cond) {
[17:44:24.567]                   sendCondition <- ...future.makeSendCondition()
[17:44:24.567]                   sendCondition(cond)
[17:44:24.567]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.567]                   {
[17:44:24.567]                     inherits <- base::inherits
[17:44:24.567]                     invokeRestart <- base::invokeRestart
[17:44:24.567]                     is.null <- base::is.null
[17:44:24.567]                     muffled <- FALSE
[17:44:24.567]                     if (inherits(cond, "message")) {
[17:44:24.567]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:24.567]                       if (muffled) 
[17:44:24.567]                         invokeRestart("muffleMessage")
[17:44:24.567]                     }
[17:44:24.567]                     else if (inherits(cond, "warning")) {
[17:44:24.567]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:24.567]                       if (muffled) 
[17:44:24.567]                         invokeRestart("muffleWarning")
[17:44:24.567]                     }
[17:44:24.567]                     else if (inherits(cond, "condition")) {
[17:44:24.567]                       if (!is.null(pattern)) {
[17:44:24.567]                         computeRestarts <- base::computeRestarts
[17:44:24.567]                         grepl <- base::grepl
[17:44:24.567]                         restarts <- computeRestarts(cond)
[17:44:24.567]                         for (restart in restarts) {
[17:44:24.567]                           name <- restart$name
[17:44:24.567]                           if (is.null(name)) 
[17:44:24.567]                             next
[17:44:24.567]                           if (!grepl(pattern, name)) 
[17:44:24.567]                             next
[17:44:24.567]                           invokeRestart(restart)
[17:44:24.567]                           muffled <- TRUE
[17:44:24.567]                           break
[17:44:24.567]                         }
[17:44:24.567]                       }
[17:44:24.567]                     }
[17:44:24.567]                     invisible(muffled)
[17:44:24.567]                   }
[17:44:24.567]                   muffleCondition(cond)
[17:44:24.567]                 })
[17:44:24.567]             }))
[17:44:24.567]             future::FutureResult(value = ...future.value$value, 
[17:44:24.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.567]                   ...future.rng), globalenv = if (FALSE) 
[17:44:24.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:24.567]                     ...future.globalenv.names))
[17:44:24.567]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:24.567]         }, condition = base::local({
[17:44:24.567]             c <- base::c
[17:44:24.567]             inherits <- base::inherits
[17:44:24.567]             invokeRestart <- base::invokeRestart
[17:44:24.567]             length <- base::length
[17:44:24.567]             list <- base::list
[17:44:24.567]             seq.int <- base::seq.int
[17:44:24.567]             signalCondition <- base::signalCondition
[17:44:24.567]             sys.calls <- base::sys.calls
[17:44:24.567]             `[[` <- base::`[[`
[17:44:24.567]             `+` <- base::`+`
[17:44:24.567]             `<<-` <- base::`<<-`
[17:44:24.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:24.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:24.567]                   3L)]
[17:44:24.567]             }
[17:44:24.567]             function(cond) {
[17:44:24.567]                 is_error <- inherits(cond, "error")
[17:44:24.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:24.567]                   NULL)
[17:44:24.567]                 if (is_error) {
[17:44:24.567]                   sessionInformation <- function() {
[17:44:24.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:24.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:24.567]                       search = base::search(), system = base::Sys.info())
[17:44:24.567]                   }
[17:44:24.567]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:24.567]                     cond$call), session = sessionInformation(), 
[17:44:24.567]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:24.567]                   signalCondition(cond)
[17:44:24.567]                 }
[17:44:24.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:24.567]                 "immediateCondition"))) {
[17:44:24.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:24.567]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:24.567]                   if (TRUE && !signal) {
[17:44:24.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.567]                     {
[17:44:24.567]                       inherits <- base::inherits
[17:44:24.567]                       invokeRestart <- base::invokeRestart
[17:44:24.567]                       is.null <- base::is.null
[17:44:24.567]                       muffled <- FALSE
[17:44:24.567]                       if (inherits(cond, "message")) {
[17:44:24.567]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.567]                         if (muffled) 
[17:44:24.567]                           invokeRestart("muffleMessage")
[17:44:24.567]                       }
[17:44:24.567]                       else if (inherits(cond, "warning")) {
[17:44:24.567]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.567]                         if (muffled) 
[17:44:24.567]                           invokeRestart("muffleWarning")
[17:44:24.567]                       }
[17:44:24.567]                       else if (inherits(cond, "condition")) {
[17:44:24.567]                         if (!is.null(pattern)) {
[17:44:24.567]                           computeRestarts <- base::computeRestarts
[17:44:24.567]                           grepl <- base::grepl
[17:44:24.567]                           restarts <- computeRestarts(cond)
[17:44:24.567]                           for (restart in restarts) {
[17:44:24.567]                             name <- restart$name
[17:44:24.567]                             if (is.null(name)) 
[17:44:24.567]                               next
[17:44:24.567]                             if (!grepl(pattern, name)) 
[17:44:24.567]                               next
[17:44:24.567]                             invokeRestart(restart)
[17:44:24.567]                             muffled <- TRUE
[17:44:24.567]                             break
[17:44:24.567]                           }
[17:44:24.567]                         }
[17:44:24.567]                       }
[17:44:24.567]                       invisible(muffled)
[17:44:24.567]                     }
[17:44:24.567]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.567]                   }
[17:44:24.567]                 }
[17:44:24.567]                 else {
[17:44:24.567]                   if (TRUE) {
[17:44:24.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.567]                     {
[17:44:24.567]                       inherits <- base::inherits
[17:44:24.567]                       invokeRestart <- base::invokeRestart
[17:44:24.567]                       is.null <- base::is.null
[17:44:24.567]                       muffled <- FALSE
[17:44:24.567]                       if (inherits(cond, "message")) {
[17:44:24.567]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.567]                         if (muffled) 
[17:44:24.567]                           invokeRestart("muffleMessage")
[17:44:24.567]                       }
[17:44:24.567]                       else if (inherits(cond, "warning")) {
[17:44:24.567]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.567]                         if (muffled) 
[17:44:24.567]                           invokeRestart("muffleWarning")
[17:44:24.567]                       }
[17:44:24.567]                       else if (inherits(cond, "condition")) {
[17:44:24.567]                         if (!is.null(pattern)) {
[17:44:24.567]                           computeRestarts <- base::computeRestarts
[17:44:24.567]                           grepl <- base::grepl
[17:44:24.567]                           restarts <- computeRestarts(cond)
[17:44:24.567]                           for (restart in restarts) {
[17:44:24.567]                             name <- restart$name
[17:44:24.567]                             if (is.null(name)) 
[17:44:24.567]                               next
[17:44:24.567]                             if (!grepl(pattern, name)) 
[17:44:24.567]                               next
[17:44:24.567]                             invokeRestart(restart)
[17:44:24.567]                             muffled <- TRUE
[17:44:24.567]                             break
[17:44:24.567]                           }
[17:44:24.567]                         }
[17:44:24.567]                       }
[17:44:24.567]                       invisible(muffled)
[17:44:24.567]                     }
[17:44:24.567]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.567]                   }
[17:44:24.567]                 }
[17:44:24.567]             }
[17:44:24.567]         }))
[17:44:24.567]     }, error = function(ex) {
[17:44:24.567]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:24.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.567]                 ...future.rng), started = ...future.startTime, 
[17:44:24.567]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:24.567]             version = "1.8"), class = "FutureResult")
[17:44:24.567]     }, finally = {
[17:44:24.567]         if (!identical(...future.workdir, getwd())) 
[17:44:24.567]             setwd(...future.workdir)
[17:44:24.567]         {
[17:44:24.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:24.567]                 ...future.oldOptions$nwarnings <- NULL
[17:44:24.567]             }
[17:44:24.567]             base::options(...future.oldOptions)
[17:44:24.567]             if (.Platform$OS.type == "windows") {
[17:44:24.567]                 old_names <- names(...future.oldEnvVars)
[17:44:24.567]                 envs <- base::Sys.getenv()
[17:44:24.567]                 names <- names(envs)
[17:44:24.567]                 common <- intersect(names, old_names)
[17:44:24.567]                 added <- setdiff(names, old_names)
[17:44:24.567]                 removed <- setdiff(old_names, names)
[17:44:24.567]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:24.567]                   envs[common]]
[17:44:24.567]                 NAMES <- toupper(changed)
[17:44:24.567]                 args <- list()
[17:44:24.567]                 for (kk in seq_along(NAMES)) {
[17:44:24.567]                   name <- changed[[kk]]
[17:44:24.567]                   NAME <- NAMES[[kk]]
[17:44:24.567]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.567]                     next
[17:44:24.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.567]                 }
[17:44:24.567]                 NAMES <- toupper(added)
[17:44:24.567]                 for (kk in seq_along(NAMES)) {
[17:44:24.567]                   name <- added[[kk]]
[17:44:24.567]                   NAME <- NAMES[[kk]]
[17:44:24.567]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.567]                     next
[17:44:24.567]                   args[[name]] <- ""
[17:44:24.567]                 }
[17:44:24.567]                 NAMES <- toupper(removed)
[17:44:24.567]                 for (kk in seq_along(NAMES)) {
[17:44:24.567]                   name <- removed[[kk]]
[17:44:24.567]                   NAME <- NAMES[[kk]]
[17:44:24.567]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.567]                     next
[17:44:24.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.567]                 }
[17:44:24.567]                 if (length(args) > 0) 
[17:44:24.567]                   base::do.call(base::Sys.setenv, args = args)
[17:44:24.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:24.567]             }
[17:44:24.567]             else {
[17:44:24.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:24.567]             }
[17:44:24.567]             {
[17:44:24.567]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:24.567]                   0L) {
[17:44:24.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:24.567]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:24.567]                   base::options(opts)
[17:44:24.567]                 }
[17:44:24.567]                 {
[17:44:24.567]                   {
[17:44:24.567]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:24.567]                     NULL
[17:44:24.567]                   }
[17:44:24.567]                   options(future.plan = NULL)
[17:44:24.567]                   if (is.na(NA_character_)) 
[17:44:24.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:24.567]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:24.567]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:24.567]                     envir = parent.frame()) 
[17:44:24.567]                   {
[17:44:24.567]                     if (is.function(workers)) 
[17:44:24.567]                       workers <- workers()
[17:44:24.567]                     workers <- structure(as.integer(workers), 
[17:44:24.567]                       class = class(workers))
[17:44:24.567]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:24.567]                       workers >= 1)
[17:44:24.567]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:24.567]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:24.567]                     }
[17:44:24.567]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:24.567]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:24.567]                       envir = envir)
[17:44:24.567]                     if (!future$lazy) 
[17:44:24.567]                       future <- run(future)
[17:44:24.567]                     invisible(future)
[17:44:24.567]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:24.567]                 }
[17:44:24.567]             }
[17:44:24.567]         }
[17:44:24.567]     })
[17:44:24.567]     if (TRUE) {
[17:44:24.567]         base::sink(type = "output", split = FALSE)
[17:44:24.567]         if (TRUE) {
[17:44:24.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:24.567]         }
[17:44:24.567]         else {
[17:44:24.567]             ...future.result["stdout"] <- base::list(NULL)
[17:44:24.567]         }
[17:44:24.567]         base::close(...future.stdout)
[17:44:24.567]         ...future.stdout <- NULL
[17:44:24.567]     }
[17:44:24.567]     ...future.result$conditions <- ...future.conditions
[17:44:24.567]     ...future.result$finished <- base::Sys.time()
[17:44:24.567]     ...future.result
[17:44:24.567] }
[17:44:24.640] MultisessionFuture started
[17:44:24.640] result() for ClusterFuture ...
[17:44:24.641] receiveMessageFromWorker() for ClusterFuture ...
[17:44:24.641] - Validating connection of MultisessionFuture
[17:44:24.673] - received message: FutureResult
[17:44:24.674] - Received FutureResult
[17:44:24.674] - Erased future from FutureRegistry
[17:44:24.674] result() for ClusterFuture ...
[17:44:24.674] - result already collected: FutureResult
[17:44:24.674] result() for ClusterFuture ... done
[17:44:24.674] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:24.674] result() for ClusterFuture ... done
[17:44:24.675] result() for ClusterFuture ...
[17:44:24.675] - result already collected: FutureResult
[17:44:24.675] result() for ClusterFuture ... done
[17:44:24.675] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:44:24.679] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[17:44:24.679] getGlobalsAndPackages() ...
[17:44:24.679] Searching for globals...
[17:44:24.683] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:24.683] Searching for globals ... DONE
[17:44:24.683] Resolving globals: FALSE
[17:44:24.684] 
[17:44:24.684] - packages: [1] ‘utils’
[17:44:24.684] getGlobalsAndPackages() ... DONE
[17:44:24.685] run() for ‘Future’ ...
[17:44:24.685] - state: ‘created’
[17:44:24.685] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:24.700] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:24.700] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:24.700]   - Field: ‘node’
[17:44:24.700]   - Field: ‘label’
[17:44:24.701]   - Field: ‘local’
[17:44:24.701]   - Field: ‘owner’
[17:44:24.701]   - Field: ‘envir’
[17:44:24.701]   - Field: ‘workers’
[17:44:24.701]   - Field: ‘packages’
[17:44:24.701]   - Field: ‘gc’
[17:44:24.701]   - Field: ‘conditions’
[17:44:24.701]   - Field: ‘persistent’
[17:44:24.701]   - Field: ‘expr’
[17:44:24.702]   - Field: ‘uuid’
[17:44:24.702]   - Field: ‘seed’
[17:44:24.702]   - Field: ‘version’
[17:44:24.702]   - Field: ‘result’
[17:44:24.702]   - Field: ‘asynchronous’
[17:44:24.702]   - Field: ‘calls’
[17:44:24.702]   - Field: ‘globals’
[17:44:24.702]   - Field: ‘stdout’
[17:44:24.702]   - Field: ‘earlySignal’
[17:44:24.703]   - Field: ‘lazy’
[17:44:24.703]   - Field: ‘state’
[17:44:24.703] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:24.703] - Launch lazy future ...
[17:44:24.703] Packages needed by the future expression (n = 1): ‘utils’
[17:44:24.704] Packages needed by future strategies (n = 0): <none>
[17:44:24.704] {
[17:44:24.704]     {
[17:44:24.704]         {
[17:44:24.704]             ...future.startTime <- base::Sys.time()
[17:44:24.704]             {
[17:44:24.704]                 {
[17:44:24.704]                   {
[17:44:24.704]                     {
[17:44:24.704]                       {
[17:44:24.704]                         base::local({
[17:44:24.704]                           has_future <- base::requireNamespace("future", 
[17:44:24.704]                             quietly = TRUE)
[17:44:24.704]                           if (has_future) {
[17:44:24.704]                             ns <- base::getNamespace("future")
[17:44:24.704]                             version <- ns[[".package"]][["version"]]
[17:44:24.704]                             if (is.null(version)) 
[17:44:24.704]                               version <- utils::packageVersion("future")
[17:44:24.704]                           }
[17:44:24.704]                           else {
[17:44:24.704]                             version <- NULL
[17:44:24.704]                           }
[17:44:24.704]                           if (!has_future || version < "1.8.0") {
[17:44:24.704]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:24.704]                               "", base::R.version$version.string), 
[17:44:24.704]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:24.704]                                 base::R.version$platform, 8 * 
[17:44:24.704]                                   base::.Machine$sizeof.pointer), 
[17:44:24.704]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:24.704]                                 "release", "version")], collapse = " "), 
[17:44:24.704]                               hostname = base::Sys.info()[["nodename"]])
[17:44:24.704]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:24.704]                               info)
[17:44:24.704]                             info <- base::paste(info, collapse = "; ")
[17:44:24.704]                             if (!has_future) {
[17:44:24.704]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:24.704]                                 info)
[17:44:24.704]                             }
[17:44:24.704]                             else {
[17:44:24.704]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:24.704]                                 info, version)
[17:44:24.704]                             }
[17:44:24.704]                             base::stop(msg)
[17:44:24.704]                           }
[17:44:24.704]                         })
[17:44:24.704]                       }
[17:44:24.704]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:24.704]                       base::options(mc.cores = 1L)
[17:44:24.704]                     }
[17:44:24.704]                     base::local({
[17:44:24.704]                       for (pkg in "utils") {
[17:44:24.704]                         base::loadNamespace(pkg)
[17:44:24.704]                         base::library(pkg, character.only = TRUE)
[17:44:24.704]                       }
[17:44:24.704]                     })
[17:44:24.704]                   }
[17:44:24.704]                   options(future.plan = NULL)
[17:44:24.704]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.704]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:24.704]                 }
[17:44:24.704]                 ...future.workdir <- getwd()
[17:44:24.704]             }
[17:44:24.704]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:24.704]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:24.704]         }
[17:44:24.704]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:24.704]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:24.704]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:24.704]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:24.704]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:24.704]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:24.704]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:24.704]             base::names(...future.oldOptions))
[17:44:24.704]     }
[17:44:24.704]     if (FALSE) {
[17:44:24.704]     }
[17:44:24.704]     else {
[17:44:24.704]         if (TRUE) {
[17:44:24.704]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:24.704]                 open = "w")
[17:44:24.704]         }
[17:44:24.704]         else {
[17:44:24.704]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:24.704]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:24.704]         }
[17:44:24.704]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:24.704]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:24.704]             base::sink(type = "output", split = FALSE)
[17:44:24.704]             base::close(...future.stdout)
[17:44:24.704]         }, add = TRUE)
[17:44:24.704]     }
[17:44:24.704]     ...future.frame <- base::sys.nframe()
[17:44:24.704]     ...future.conditions <- base::list()
[17:44:24.704]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:24.704]     if (FALSE) {
[17:44:24.704]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:24.704]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:24.704]     }
[17:44:24.704]     ...future.result <- base::tryCatch({
[17:44:24.704]         base::withCallingHandlers({
[17:44:24.704]             ...future.value <- base::withVisible(base::local({
[17:44:24.704]                 ...future.makeSendCondition <- local({
[17:44:24.704]                   sendCondition <- NULL
[17:44:24.704]                   function(frame = 1L) {
[17:44:24.704]                     if (is.function(sendCondition)) 
[17:44:24.704]                       return(sendCondition)
[17:44:24.704]                     ns <- getNamespace("parallel")
[17:44:24.704]                     if (exists("sendData", mode = "function", 
[17:44:24.704]                       envir = ns)) {
[17:44:24.704]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:24.704]                         envir = ns)
[17:44:24.704]                       envir <- sys.frame(frame)
[17:44:24.704]                       master <- NULL
[17:44:24.704]                       while (!identical(envir, .GlobalEnv) && 
[17:44:24.704]                         !identical(envir, emptyenv())) {
[17:44:24.704]                         if (exists("master", mode = "list", envir = envir, 
[17:44:24.704]                           inherits = FALSE)) {
[17:44:24.704]                           master <- get("master", mode = "list", 
[17:44:24.704]                             envir = envir, inherits = FALSE)
[17:44:24.704]                           if (inherits(master, c("SOCKnode", 
[17:44:24.704]                             "SOCK0node"))) {
[17:44:24.704]                             sendCondition <<- function(cond) {
[17:44:24.704]                               data <- list(type = "VALUE", value = cond, 
[17:44:24.704]                                 success = TRUE)
[17:44:24.704]                               parallel_sendData(master, data)
[17:44:24.704]                             }
[17:44:24.704]                             return(sendCondition)
[17:44:24.704]                           }
[17:44:24.704]                         }
[17:44:24.704]                         frame <- frame + 1L
[17:44:24.704]                         envir <- sys.frame(frame)
[17:44:24.704]                       }
[17:44:24.704]                     }
[17:44:24.704]                     sendCondition <<- function(cond) NULL
[17:44:24.704]                   }
[17:44:24.704]                 })
[17:44:24.704]                 withCallingHandlers({
[17:44:24.704]                   {
[17:44:24.704]                     print(1:50)
[17:44:24.704]                     str(1:50)
[17:44:24.704]                     cat(letters, sep = "-")
[17:44:24.704]                     cat(1:6, collapse = "\n")
[17:44:24.704]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:24.704]                     42L
[17:44:24.704]                   }
[17:44:24.704]                 }, immediateCondition = function(cond) {
[17:44:24.704]                   sendCondition <- ...future.makeSendCondition()
[17:44:24.704]                   sendCondition(cond)
[17:44:24.704]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.704]                   {
[17:44:24.704]                     inherits <- base::inherits
[17:44:24.704]                     invokeRestart <- base::invokeRestart
[17:44:24.704]                     is.null <- base::is.null
[17:44:24.704]                     muffled <- FALSE
[17:44:24.704]                     if (inherits(cond, "message")) {
[17:44:24.704]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:24.704]                       if (muffled) 
[17:44:24.704]                         invokeRestart("muffleMessage")
[17:44:24.704]                     }
[17:44:24.704]                     else if (inherits(cond, "warning")) {
[17:44:24.704]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:24.704]                       if (muffled) 
[17:44:24.704]                         invokeRestart("muffleWarning")
[17:44:24.704]                     }
[17:44:24.704]                     else if (inherits(cond, "condition")) {
[17:44:24.704]                       if (!is.null(pattern)) {
[17:44:24.704]                         computeRestarts <- base::computeRestarts
[17:44:24.704]                         grepl <- base::grepl
[17:44:24.704]                         restarts <- computeRestarts(cond)
[17:44:24.704]                         for (restart in restarts) {
[17:44:24.704]                           name <- restart$name
[17:44:24.704]                           if (is.null(name)) 
[17:44:24.704]                             next
[17:44:24.704]                           if (!grepl(pattern, name)) 
[17:44:24.704]                             next
[17:44:24.704]                           invokeRestart(restart)
[17:44:24.704]                           muffled <- TRUE
[17:44:24.704]                           break
[17:44:24.704]                         }
[17:44:24.704]                       }
[17:44:24.704]                     }
[17:44:24.704]                     invisible(muffled)
[17:44:24.704]                   }
[17:44:24.704]                   muffleCondition(cond)
[17:44:24.704]                 })
[17:44:24.704]             }))
[17:44:24.704]             future::FutureResult(value = ...future.value$value, 
[17:44:24.704]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.704]                   ...future.rng), globalenv = if (FALSE) 
[17:44:24.704]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:24.704]                     ...future.globalenv.names))
[17:44:24.704]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:24.704]         }, condition = base::local({
[17:44:24.704]             c <- base::c
[17:44:24.704]             inherits <- base::inherits
[17:44:24.704]             invokeRestart <- base::invokeRestart
[17:44:24.704]             length <- base::length
[17:44:24.704]             list <- base::list
[17:44:24.704]             seq.int <- base::seq.int
[17:44:24.704]             signalCondition <- base::signalCondition
[17:44:24.704]             sys.calls <- base::sys.calls
[17:44:24.704]             `[[` <- base::`[[`
[17:44:24.704]             `+` <- base::`+`
[17:44:24.704]             `<<-` <- base::`<<-`
[17:44:24.704]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:24.704]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:24.704]                   3L)]
[17:44:24.704]             }
[17:44:24.704]             function(cond) {
[17:44:24.704]                 is_error <- inherits(cond, "error")
[17:44:24.704]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:24.704]                   NULL)
[17:44:24.704]                 if (is_error) {
[17:44:24.704]                   sessionInformation <- function() {
[17:44:24.704]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:24.704]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:24.704]                       search = base::search(), system = base::Sys.info())
[17:44:24.704]                   }
[17:44:24.704]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.704]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:24.704]                     cond$call), session = sessionInformation(), 
[17:44:24.704]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:24.704]                   signalCondition(cond)
[17:44:24.704]                 }
[17:44:24.704]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:24.704]                 "immediateCondition"))) {
[17:44:24.704]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:24.704]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.704]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:24.704]                   if (TRUE && !signal) {
[17:44:24.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.704]                     {
[17:44:24.704]                       inherits <- base::inherits
[17:44:24.704]                       invokeRestart <- base::invokeRestart
[17:44:24.704]                       is.null <- base::is.null
[17:44:24.704]                       muffled <- FALSE
[17:44:24.704]                       if (inherits(cond, "message")) {
[17:44:24.704]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.704]                         if (muffled) 
[17:44:24.704]                           invokeRestart("muffleMessage")
[17:44:24.704]                       }
[17:44:24.704]                       else if (inherits(cond, "warning")) {
[17:44:24.704]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.704]                         if (muffled) 
[17:44:24.704]                           invokeRestart("muffleWarning")
[17:44:24.704]                       }
[17:44:24.704]                       else if (inherits(cond, "condition")) {
[17:44:24.704]                         if (!is.null(pattern)) {
[17:44:24.704]                           computeRestarts <- base::computeRestarts
[17:44:24.704]                           grepl <- base::grepl
[17:44:24.704]                           restarts <- computeRestarts(cond)
[17:44:24.704]                           for (restart in restarts) {
[17:44:24.704]                             name <- restart$name
[17:44:24.704]                             if (is.null(name)) 
[17:44:24.704]                               next
[17:44:24.704]                             if (!grepl(pattern, name)) 
[17:44:24.704]                               next
[17:44:24.704]                             invokeRestart(restart)
[17:44:24.704]                             muffled <- TRUE
[17:44:24.704]                             break
[17:44:24.704]                           }
[17:44:24.704]                         }
[17:44:24.704]                       }
[17:44:24.704]                       invisible(muffled)
[17:44:24.704]                     }
[17:44:24.704]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.704]                   }
[17:44:24.704]                 }
[17:44:24.704]                 else {
[17:44:24.704]                   if (TRUE) {
[17:44:24.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.704]                     {
[17:44:24.704]                       inherits <- base::inherits
[17:44:24.704]                       invokeRestart <- base::invokeRestart
[17:44:24.704]                       is.null <- base::is.null
[17:44:24.704]                       muffled <- FALSE
[17:44:24.704]                       if (inherits(cond, "message")) {
[17:44:24.704]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.704]                         if (muffled) 
[17:44:24.704]                           invokeRestart("muffleMessage")
[17:44:24.704]                       }
[17:44:24.704]                       else if (inherits(cond, "warning")) {
[17:44:24.704]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.704]                         if (muffled) 
[17:44:24.704]                           invokeRestart("muffleWarning")
[17:44:24.704]                       }
[17:44:24.704]                       else if (inherits(cond, "condition")) {
[17:44:24.704]                         if (!is.null(pattern)) {
[17:44:24.704]                           computeRestarts <- base::computeRestarts
[17:44:24.704]                           grepl <- base::grepl
[17:44:24.704]                           restarts <- computeRestarts(cond)
[17:44:24.704]                           for (restart in restarts) {
[17:44:24.704]                             name <- restart$name
[17:44:24.704]                             if (is.null(name)) 
[17:44:24.704]                               next
[17:44:24.704]                             if (!grepl(pattern, name)) 
[17:44:24.704]                               next
[17:44:24.704]                             invokeRestart(restart)
[17:44:24.704]                             muffled <- TRUE
[17:44:24.704]                             break
[17:44:24.704]                           }
[17:44:24.704]                         }
[17:44:24.704]                       }
[17:44:24.704]                       invisible(muffled)
[17:44:24.704]                     }
[17:44:24.704]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.704]                   }
[17:44:24.704]                 }
[17:44:24.704]             }
[17:44:24.704]         }))
[17:44:24.704]     }, error = function(ex) {
[17:44:24.704]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:24.704]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.704]                 ...future.rng), started = ...future.startTime, 
[17:44:24.704]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:24.704]             version = "1.8"), class = "FutureResult")
[17:44:24.704]     }, finally = {
[17:44:24.704]         if (!identical(...future.workdir, getwd())) 
[17:44:24.704]             setwd(...future.workdir)
[17:44:24.704]         {
[17:44:24.704]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:24.704]                 ...future.oldOptions$nwarnings <- NULL
[17:44:24.704]             }
[17:44:24.704]             base::options(...future.oldOptions)
[17:44:24.704]             if (.Platform$OS.type == "windows") {
[17:44:24.704]                 old_names <- names(...future.oldEnvVars)
[17:44:24.704]                 envs <- base::Sys.getenv()
[17:44:24.704]                 names <- names(envs)
[17:44:24.704]                 common <- intersect(names, old_names)
[17:44:24.704]                 added <- setdiff(names, old_names)
[17:44:24.704]                 removed <- setdiff(old_names, names)
[17:44:24.704]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:24.704]                   envs[common]]
[17:44:24.704]                 NAMES <- toupper(changed)
[17:44:24.704]                 args <- list()
[17:44:24.704]                 for (kk in seq_along(NAMES)) {
[17:44:24.704]                   name <- changed[[kk]]
[17:44:24.704]                   NAME <- NAMES[[kk]]
[17:44:24.704]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.704]                     next
[17:44:24.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.704]                 }
[17:44:24.704]                 NAMES <- toupper(added)
[17:44:24.704]                 for (kk in seq_along(NAMES)) {
[17:44:24.704]                   name <- added[[kk]]
[17:44:24.704]                   NAME <- NAMES[[kk]]
[17:44:24.704]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.704]                     next
[17:44:24.704]                   args[[name]] <- ""
[17:44:24.704]                 }
[17:44:24.704]                 NAMES <- toupper(removed)
[17:44:24.704]                 for (kk in seq_along(NAMES)) {
[17:44:24.704]                   name <- removed[[kk]]
[17:44:24.704]                   NAME <- NAMES[[kk]]
[17:44:24.704]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.704]                     next
[17:44:24.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.704]                 }
[17:44:24.704]                 if (length(args) > 0) 
[17:44:24.704]                   base::do.call(base::Sys.setenv, args = args)
[17:44:24.704]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:24.704]             }
[17:44:24.704]             else {
[17:44:24.704]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:24.704]             }
[17:44:24.704]             {
[17:44:24.704]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:24.704]                   0L) {
[17:44:24.704]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:24.704]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:24.704]                   base::options(opts)
[17:44:24.704]                 }
[17:44:24.704]                 {
[17:44:24.704]                   {
[17:44:24.704]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:24.704]                     NULL
[17:44:24.704]                   }
[17:44:24.704]                   options(future.plan = NULL)
[17:44:24.704]                   if (is.na(NA_character_)) 
[17:44:24.704]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.704]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:24.704]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:24.704]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:24.704]                     envir = parent.frame()) 
[17:44:24.704]                   {
[17:44:24.704]                     if (is.function(workers)) 
[17:44:24.704]                       workers <- workers()
[17:44:24.704]                     workers <- structure(as.integer(workers), 
[17:44:24.704]                       class = class(workers))
[17:44:24.704]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:24.704]                       workers >= 1)
[17:44:24.704]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:24.704]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:24.704]                     }
[17:44:24.704]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:24.704]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:24.704]                       envir = envir)
[17:44:24.704]                     if (!future$lazy) 
[17:44:24.704]                       future <- run(future)
[17:44:24.704]                     invisible(future)
[17:44:24.704]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:24.704]                 }
[17:44:24.704]             }
[17:44:24.704]         }
[17:44:24.704]     })
[17:44:24.704]     if (TRUE) {
[17:44:24.704]         base::sink(type = "output", split = FALSE)
[17:44:24.704]         if (TRUE) {
[17:44:24.704]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:24.704]         }
[17:44:24.704]         else {
[17:44:24.704]             ...future.result["stdout"] <- base::list(NULL)
[17:44:24.704]         }
[17:44:24.704]         base::close(...future.stdout)
[17:44:24.704]         ...future.stdout <- NULL
[17:44:24.704]     }
[17:44:24.704]     ...future.result$conditions <- ...future.conditions
[17:44:24.704]     ...future.result$finished <- base::Sys.time()
[17:44:24.704]     ...future.result
[17:44:24.704] }
[17:44:24.708] MultisessionFuture started
[17:44:24.708] - Launch lazy future ... done
[17:44:24.708] run() for ‘MultisessionFuture’ ... done
[17:44:24.708] result() for ClusterFuture ...
[17:44:24.708] receiveMessageFromWorker() for ClusterFuture ...
[17:44:24.709] - Validating connection of MultisessionFuture
[17:44:24.760] - received message: FutureResult
[17:44:24.760] - Received FutureResult
[17:44:24.761] - Erased future from FutureRegistry
[17:44:24.761] result() for ClusterFuture ...
[17:44:24.761] - result already collected: FutureResult
[17:44:24.761] result() for ClusterFuture ... done
[17:44:24.761] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:24.761] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:24"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:24"
 $ session_uuid: chr "cdd94caa-24d8-2a42-81a0-fdd67ba33156"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53860
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:24"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:24.771] result() for ClusterFuture ...
[17:44:24.771] - result already collected: FutureResult
[17:44:24.772] result() for ClusterFuture ... done
[17:44:24.772] result() for ClusterFuture ...
[17:44:24.772] - result already collected: FutureResult
[17:44:24.772] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.00889802 secs (started 2024-12-19 17:44:24.751448)
version: 1.8
[17:44:24.773] getGlobalsAndPackages() ...
[17:44:24.773] Searching for globals...
[17:44:24.777] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:24.777] Searching for globals ... DONE
[17:44:24.777] Resolving globals: FALSE
[17:44:24.778] 
[17:44:24.778] - packages: [1] ‘utils’
[17:44:24.778] getGlobalsAndPackages() ... DONE
[17:44:24.778] run() for ‘Future’ ...
[17:44:24.778] - state: ‘created’
[17:44:24.779] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:24.794] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:24.794] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:24.794]   - Field: ‘node’
[17:44:24.794]   - Field: ‘label’
[17:44:24.794]   - Field: ‘local’
[17:44:24.794]   - Field: ‘owner’
[17:44:24.795]   - Field: ‘envir’
[17:44:24.795]   - Field: ‘workers’
[17:44:24.795]   - Field: ‘packages’
[17:44:24.795]   - Field: ‘gc’
[17:44:24.795]   - Field: ‘conditions’
[17:44:24.795]   - Field: ‘persistent’
[17:44:24.795]   - Field: ‘expr’
[17:44:24.795]   - Field: ‘uuid’
[17:44:24.796]   - Field: ‘seed’
[17:44:24.796]   - Field: ‘version’
[17:44:24.796]   - Field: ‘result’
[17:44:24.796]   - Field: ‘asynchronous’
[17:44:24.796]   - Field: ‘calls’
[17:44:24.796]   - Field: ‘globals’
[17:44:24.796]   - Field: ‘stdout’
[17:44:24.796]   - Field: ‘earlySignal’
[17:44:24.796]   - Field: ‘lazy’
[17:44:24.797]   - Field: ‘state’
[17:44:24.797] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:24.797] - Launch lazy future ...
[17:44:24.797] Packages needed by the future expression (n = 1): ‘utils’
[17:44:24.797] Packages needed by future strategies (n = 0): <none>
[17:44:24.798] {
[17:44:24.798]     {
[17:44:24.798]         {
[17:44:24.798]             ...future.startTime <- base::Sys.time()
[17:44:24.798]             {
[17:44:24.798]                 {
[17:44:24.798]                   {
[17:44:24.798]                     {
[17:44:24.798]                       {
[17:44:24.798]                         base::local({
[17:44:24.798]                           has_future <- base::requireNamespace("future", 
[17:44:24.798]                             quietly = TRUE)
[17:44:24.798]                           if (has_future) {
[17:44:24.798]                             ns <- base::getNamespace("future")
[17:44:24.798]                             version <- ns[[".package"]][["version"]]
[17:44:24.798]                             if (is.null(version)) 
[17:44:24.798]                               version <- utils::packageVersion("future")
[17:44:24.798]                           }
[17:44:24.798]                           else {
[17:44:24.798]                             version <- NULL
[17:44:24.798]                           }
[17:44:24.798]                           if (!has_future || version < "1.8.0") {
[17:44:24.798]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:24.798]                               "", base::R.version$version.string), 
[17:44:24.798]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:24.798]                                 base::R.version$platform, 8 * 
[17:44:24.798]                                   base::.Machine$sizeof.pointer), 
[17:44:24.798]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:24.798]                                 "release", "version")], collapse = " "), 
[17:44:24.798]                               hostname = base::Sys.info()[["nodename"]])
[17:44:24.798]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:24.798]                               info)
[17:44:24.798]                             info <- base::paste(info, collapse = "; ")
[17:44:24.798]                             if (!has_future) {
[17:44:24.798]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:24.798]                                 info)
[17:44:24.798]                             }
[17:44:24.798]                             else {
[17:44:24.798]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:24.798]                                 info, version)
[17:44:24.798]                             }
[17:44:24.798]                             base::stop(msg)
[17:44:24.798]                           }
[17:44:24.798]                         })
[17:44:24.798]                       }
[17:44:24.798]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:24.798]                       base::options(mc.cores = 1L)
[17:44:24.798]                     }
[17:44:24.798]                     base::local({
[17:44:24.798]                       for (pkg in "utils") {
[17:44:24.798]                         base::loadNamespace(pkg)
[17:44:24.798]                         base::library(pkg, character.only = TRUE)
[17:44:24.798]                       }
[17:44:24.798]                     })
[17:44:24.798]                   }
[17:44:24.798]                   options(future.plan = NULL)
[17:44:24.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:24.798]                 }
[17:44:24.798]                 ...future.workdir <- getwd()
[17:44:24.798]             }
[17:44:24.798]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:24.798]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:24.798]         }
[17:44:24.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:24.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:24.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:24.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:24.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:24.798]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:24.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:24.798]             base::names(...future.oldOptions))
[17:44:24.798]     }
[17:44:24.798]     if (FALSE) {
[17:44:24.798]     }
[17:44:24.798]     else {
[17:44:24.798]         if (TRUE) {
[17:44:24.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:24.798]                 open = "w")
[17:44:24.798]         }
[17:44:24.798]         else {
[17:44:24.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:24.798]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:24.798]         }
[17:44:24.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:24.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:24.798]             base::sink(type = "output", split = FALSE)
[17:44:24.798]             base::close(...future.stdout)
[17:44:24.798]         }, add = TRUE)
[17:44:24.798]     }
[17:44:24.798]     ...future.frame <- base::sys.nframe()
[17:44:24.798]     ...future.conditions <- base::list()
[17:44:24.798]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:24.798]     if (FALSE) {
[17:44:24.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:24.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:24.798]     }
[17:44:24.798]     ...future.result <- base::tryCatch({
[17:44:24.798]         base::withCallingHandlers({
[17:44:24.798]             ...future.value <- base::withVisible(base::local({
[17:44:24.798]                 ...future.makeSendCondition <- local({
[17:44:24.798]                   sendCondition <- NULL
[17:44:24.798]                   function(frame = 1L) {
[17:44:24.798]                     if (is.function(sendCondition)) 
[17:44:24.798]                       return(sendCondition)
[17:44:24.798]                     ns <- getNamespace("parallel")
[17:44:24.798]                     if (exists("sendData", mode = "function", 
[17:44:24.798]                       envir = ns)) {
[17:44:24.798]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:24.798]                         envir = ns)
[17:44:24.798]                       envir <- sys.frame(frame)
[17:44:24.798]                       master <- NULL
[17:44:24.798]                       while (!identical(envir, .GlobalEnv) && 
[17:44:24.798]                         !identical(envir, emptyenv())) {
[17:44:24.798]                         if (exists("master", mode = "list", envir = envir, 
[17:44:24.798]                           inherits = FALSE)) {
[17:44:24.798]                           master <- get("master", mode = "list", 
[17:44:24.798]                             envir = envir, inherits = FALSE)
[17:44:24.798]                           if (inherits(master, c("SOCKnode", 
[17:44:24.798]                             "SOCK0node"))) {
[17:44:24.798]                             sendCondition <<- function(cond) {
[17:44:24.798]                               data <- list(type = "VALUE", value = cond, 
[17:44:24.798]                                 success = TRUE)
[17:44:24.798]                               parallel_sendData(master, data)
[17:44:24.798]                             }
[17:44:24.798]                             return(sendCondition)
[17:44:24.798]                           }
[17:44:24.798]                         }
[17:44:24.798]                         frame <- frame + 1L
[17:44:24.798]                         envir <- sys.frame(frame)
[17:44:24.798]                       }
[17:44:24.798]                     }
[17:44:24.798]                     sendCondition <<- function(cond) NULL
[17:44:24.798]                   }
[17:44:24.798]                 })
[17:44:24.798]                 withCallingHandlers({
[17:44:24.798]                   {
[17:44:24.798]                     print(1:50)
[17:44:24.798]                     str(1:50)
[17:44:24.798]                     cat(letters, sep = "-")
[17:44:24.798]                     cat(1:6, collapse = "\n")
[17:44:24.798]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:24.798]                     42L
[17:44:24.798]                   }
[17:44:24.798]                 }, immediateCondition = function(cond) {
[17:44:24.798]                   sendCondition <- ...future.makeSendCondition()
[17:44:24.798]                   sendCondition(cond)
[17:44:24.798]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.798]                   {
[17:44:24.798]                     inherits <- base::inherits
[17:44:24.798]                     invokeRestart <- base::invokeRestart
[17:44:24.798]                     is.null <- base::is.null
[17:44:24.798]                     muffled <- FALSE
[17:44:24.798]                     if (inherits(cond, "message")) {
[17:44:24.798]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:24.798]                       if (muffled) 
[17:44:24.798]                         invokeRestart("muffleMessage")
[17:44:24.798]                     }
[17:44:24.798]                     else if (inherits(cond, "warning")) {
[17:44:24.798]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:24.798]                       if (muffled) 
[17:44:24.798]                         invokeRestart("muffleWarning")
[17:44:24.798]                     }
[17:44:24.798]                     else if (inherits(cond, "condition")) {
[17:44:24.798]                       if (!is.null(pattern)) {
[17:44:24.798]                         computeRestarts <- base::computeRestarts
[17:44:24.798]                         grepl <- base::grepl
[17:44:24.798]                         restarts <- computeRestarts(cond)
[17:44:24.798]                         for (restart in restarts) {
[17:44:24.798]                           name <- restart$name
[17:44:24.798]                           if (is.null(name)) 
[17:44:24.798]                             next
[17:44:24.798]                           if (!grepl(pattern, name)) 
[17:44:24.798]                             next
[17:44:24.798]                           invokeRestart(restart)
[17:44:24.798]                           muffled <- TRUE
[17:44:24.798]                           break
[17:44:24.798]                         }
[17:44:24.798]                       }
[17:44:24.798]                     }
[17:44:24.798]                     invisible(muffled)
[17:44:24.798]                   }
[17:44:24.798]                   muffleCondition(cond)
[17:44:24.798]                 })
[17:44:24.798]             }))
[17:44:24.798]             future::FutureResult(value = ...future.value$value, 
[17:44:24.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.798]                   ...future.rng), globalenv = if (FALSE) 
[17:44:24.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:24.798]                     ...future.globalenv.names))
[17:44:24.798]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:24.798]         }, condition = base::local({
[17:44:24.798]             c <- base::c
[17:44:24.798]             inherits <- base::inherits
[17:44:24.798]             invokeRestart <- base::invokeRestart
[17:44:24.798]             length <- base::length
[17:44:24.798]             list <- base::list
[17:44:24.798]             seq.int <- base::seq.int
[17:44:24.798]             signalCondition <- base::signalCondition
[17:44:24.798]             sys.calls <- base::sys.calls
[17:44:24.798]             `[[` <- base::`[[`
[17:44:24.798]             `+` <- base::`+`
[17:44:24.798]             `<<-` <- base::`<<-`
[17:44:24.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:24.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:24.798]                   3L)]
[17:44:24.798]             }
[17:44:24.798]             function(cond) {
[17:44:24.798]                 is_error <- inherits(cond, "error")
[17:44:24.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:24.798]                   NULL)
[17:44:24.798]                 if (is_error) {
[17:44:24.798]                   sessionInformation <- function() {
[17:44:24.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:24.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:24.798]                       search = base::search(), system = base::Sys.info())
[17:44:24.798]                   }
[17:44:24.798]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:24.798]                     cond$call), session = sessionInformation(), 
[17:44:24.798]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:24.798]                   signalCondition(cond)
[17:44:24.798]                 }
[17:44:24.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:24.798]                 "immediateCondition"))) {
[17:44:24.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:24.798]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:24.798]                   if (TRUE && !signal) {
[17:44:24.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.798]                     {
[17:44:24.798]                       inherits <- base::inherits
[17:44:24.798]                       invokeRestart <- base::invokeRestart
[17:44:24.798]                       is.null <- base::is.null
[17:44:24.798]                       muffled <- FALSE
[17:44:24.798]                       if (inherits(cond, "message")) {
[17:44:24.798]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.798]                         if (muffled) 
[17:44:24.798]                           invokeRestart("muffleMessage")
[17:44:24.798]                       }
[17:44:24.798]                       else if (inherits(cond, "warning")) {
[17:44:24.798]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.798]                         if (muffled) 
[17:44:24.798]                           invokeRestart("muffleWarning")
[17:44:24.798]                       }
[17:44:24.798]                       else if (inherits(cond, "condition")) {
[17:44:24.798]                         if (!is.null(pattern)) {
[17:44:24.798]                           computeRestarts <- base::computeRestarts
[17:44:24.798]                           grepl <- base::grepl
[17:44:24.798]                           restarts <- computeRestarts(cond)
[17:44:24.798]                           for (restart in restarts) {
[17:44:24.798]                             name <- restart$name
[17:44:24.798]                             if (is.null(name)) 
[17:44:24.798]                               next
[17:44:24.798]                             if (!grepl(pattern, name)) 
[17:44:24.798]                               next
[17:44:24.798]                             invokeRestart(restart)
[17:44:24.798]                             muffled <- TRUE
[17:44:24.798]                             break
[17:44:24.798]                           }
[17:44:24.798]                         }
[17:44:24.798]                       }
[17:44:24.798]                       invisible(muffled)
[17:44:24.798]                     }
[17:44:24.798]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.798]                   }
[17:44:24.798]                 }
[17:44:24.798]                 else {
[17:44:24.798]                   if (TRUE) {
[17:44:24.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.798]                     {
[17:44:24.798]                       inherits <- base::inherits
[17:44:24.798]                       invokeRestart <- base::invokeRestart
[17:44:24.798]                       is.null <- base::is.null
[17:44:24.798]                       muffled <- FALSE
[17:44:24.798]                       if (inherits(cond, "message")) {
[17:44:24.798]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.798]                         if (muffled) 
[17:44:24.798]                           invokeRestart("muffleMessage")
[17:44:24.798]                       }
[17:44:24.798]                       else if (inherits(cond, "warning")) {
[17:44:24.798]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.798]                         if (muffled) 
[17:44:24.798]                           invokeRestart("muffleWarning")
[17:44:24.798]                       }
[17:44:24.798]                       else if (inherits(cond, "condition")) {
[17:44:24.798]                         if (!is.null(pattern)) {
[17:44:24.798]                           computeRestarts <- base::computeRestarts
[17:44:24.798]                           grepl <- base::grepl
[17:44:24.798]                           restarts <- computeRestarts(cond)
[17:44:24.798]                           for (restart in restarts) {
[17:44:24.798]                             name <- restart$name
[17:44:24.798]                             if (is.null(name)) 
[17:44:24.798]                               next
[17:44:24.798]                             if (!grepl(pattern, name)) 
[17:44:24.798]                               next
[17:44:24.798]                             invokeRestart(restart)
[17:44:24.798]                             muffled <- TRUE
[17:44:24.798]                             break
[17:44:24.798]                           }
[17:44:24.798]                         }
[17:44:24.798]                       }
[17:44:24.798]                       invisible(muffled)
[17:44:24.798]                     }
[17:44:24.798]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.798]                   }
[17:44:24.798]                 }
[17:44:24.798]             }
[17:44:24.798]         }))
[17:44:24.798]     }, error = function(ex) {
[17:44:24.798]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:24.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.798]                 ...future.rng), started = ...future.startTime, 
[17:44:24.798]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:24.798]             version = "1.8"), class = "FutureResult")
[17:44:24.798]     }, finally = {
[17:44:24.798]         if (!identical(...future.workdir, getwd())) 
[17:44:24.798]             setwd(...future.workdir)
[17:44:24.798]         {
[17:44:24.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:24.798]                 ...future.oldOptions$nwarnings <- NULL
[17:44:24.798]             }
[17:44:24.798]             base::options(...future.oldOptions)
[17:44:24.798]             if (.Platform$OS.type == "windows") {
[17:44:24.798]                 old_names <- names(...future.oldEnvVars)
[17:44:24.798]                 envs <- base::Sys.getenv()
[17:44:24.798]                 names <- names(envs)
[17:44:24.798]                 common <- intersect(names, old_names)
[17:44:24.798]                 added <- setdiff(names, old_names)
[17:44:24.798]                 removed <- setdiff(old_names, names)
[17:44:24.798]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:24.798]                   envs[common]]
[17:44:24.798]                 NAMES <- toupper(changed)
[17:44:24.798]                 args <- list()
[17:44:24.798]                 for (kk in seq_along(NAMES)) {
[17:44:24.798]                   name <- changed[[kk]]
[17:44:24.798]                   NAME <- NAMES[[kk]]
[17:44:24.798]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.798]                     next
[17:44:24.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.798]                 }
[17:44:24.798]                 NAMES <- toupper(added)
[17:44:24.798]                 for (kk in seq_along(NAMES)) {
[17:44:24.798]                   name <- added[[kk]]
[17:44:24.798]                   NAME <- NAMES[[kk]]
[17:44:24.798]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.798]                     next
[17:44:24.798]                   args[[name]] <- ""
[17:44:24.798]                 }
[17:44:24.798]                 NAMES <- toupper(removed)
[17:44:24.798]                 for (kk in seq_along(NAMES)) {
[17:44:24.798]                   name <- removed[[kk]]
[17:44:24.798]                   NAME <- NAMES[[kk]]
[17:44:24.798]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.798]                     next
[17:44:24.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.798]                 }
[17:44:24.798]                 if (length(args) > 0) 
[17:44:24.798]                   base::do.call(base::Sys.setenv, args = args)
[17:44:24.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:24.798]             }
[17:44:24.798]             else {
[17:44:24.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:24.798]             }
[17:44:24.798]             {
[17:44:24.798]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:24.798]                   0L) {
[17:44:24.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:24.798]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:24.798]                   base::options(opts)
[17:44:24.798]                 }
[17:44:24.798]                 {
[17:44:24.798]                   {
[17:44:24.798]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:24.798]                     NULL
[17:44:24.798]                   }
[17:44:24.798]                   options(future.plan = NULL)
[17:44:24.798]                   if (is.na(NA_character_)) 
[17:44:24.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:24.798]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:24.798]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:24.798]                     envir = parent.frame()) 
[17:44:24.798]                   {
[17:44:24.798]                     if (is.function(workers)) 
[17:44:24.798]                       workers <- workers()
[17:44:24.798]                     workers <- structure(as.integer(workers), 
[17:44:24.798]                       class = class(workers))
[17:44:24.798]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:24.798]                       workers >= 1)
[17:44:24.798]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:24.798]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:24.798]                     }
[17:44:24.798]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:24.798]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:24.798]                       envir = envir)
[17:44:24.798]                     if (!future$lazy) 
[17:44:24.798]                       future <- run(future)
[17:44:24.798]                     invisible(future)
[17:44:24.798]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:24.798]                 }
[17:44:24.798]             }
[17:44:24.798]         }
[17:44:24.798]     })
[17:44:24.798]     if (TRUE) {
[17:44:24.798]         base::sink(type = "output", split = FALSE)
[17:44:24.798]         if (TRUE) {
[17:44:24.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:24.798]         }
[17:44:24.798]         else {
[17:44:24.798]             ...future.result["stdout"] <- base::list(NULL)
[17:44:24.798]         }
[17:44:24.798]         base::close(...future.stdout)
[17:44:24.798]         ...future.stdout <- NULL
[17:44:24.798]     }
[17:44:24.798]     ...future.result$conditions <- ...future.conditions
[17:44:24.798]     ...future.result$finished <- base::Sys.time()
[17:44:24.798]     ...future.result
[17:44:24.798] }
[17:44:24.802] MultisessionFuture started
[17:44:24.802] - Launch lazy future ... done
[17:44:24.802] run() for ‘MultisessionFuture’ ... done
[17:44:24.803] result() for ClusterFuture ...
[17:44:24.803] receiveMessageFromWorker() for ClusterFuture ...
[17:44:24.803] - Validating connection of MultisessionFuture
[17:44:24.849] - received message: FutureResult
[17:44:24.852] - Received FutureResult
[17:44:24.852] - Erased future from FutureRegistry
[17:44:24.852] result() for ClusterFuture ...
[17:44:24.852] - result already collected: FutureResult
[17:44:24.852] result() for ClusterFuture ... done
[17:44:24.852] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:24.852] result() for ClusterFuture ... done
[17:44:24.852] result() for ClusterFuture ...
[17:44:24.852] - result already collected: FutureResult
[17:44:24.853] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[17:44:24.853] getGlobalsAndPackages() ...
[17:44:24.853] Searching for globals...
[17:44:24.854] - globals found: [1] ‘print’
[17:44:24.854] Searching for globals ... DONE
[17:44:24.854] Resolving globals: FALSE
[17:44:24.854] 
[17:44:24.854] 
[17:44:24.854] getGlobalsAndPackages() ... DONE
[17:44:24.855] run() for ‘Future’ ...
[17:44:24.855] - state: ‘created’
[17:44:24.855] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:24.869] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:24.870] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:24.870]   - Field: ‘node’
[17:44:24.870]   - Field: ‘label’
[17:44:24.870]   - Field: ‘local’
[17:44:24.870]   - Field: ‘owner’
[17:44:24.870]   - Field: ‘envir’
[17:44:24.870]   - Field: ‘workers’
[17:44:24.870]   - Field: ‘packages’
[17:44:24.870]   - Field: ‘gc’
[17:44:24.870]   - Field: ‘conditions’
[17:44:24.871]   - Field: ‘persistent’
[17:44:24.871]   - Field: ‘expr’
[17:44:24.871]   - Field: ‘uuid’
[17:44:24.871]   - Field: ‘seed’
[17:44:24.871]   - Field: ‘version’
[17:44:24.871]   - Field: ‘result’
[17:44:24.871]   - Field: ‘asynchronous’
[17:44:24.871]   - Field: ‘calls’
[17:44:24.871]   - Field: ‘globals’
[17:44:24.871]   - Field: ‘stdout’
[17:44:24.872]   - Field: ‘earlySignal’
[17:44:24.872]   - Field: ‘lazy’
[17:44:24.872]   - Field: ‘state’
[17:44:24.872] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:24.872] - Launch lazy future ...
[17:44:24.872] Packages needed by the future expression (n = 0): <none>
[17:44:24.872] Packages needed by future strategies (n = 0): <none>
[17:44:24.873] {
[17:44:24.873]     {
[17:44:24.873]         {
[17:44:24.873]             ...future.startTime <- base::Sys.time()
[17:44:24.873]             {
[17:44:24.873]                 {
[17:44:24.873]                   {
[17:44:24.873]                     {
[17:44:24.873]                       base::local({
[17:44:24.873]                         has_future <- base::requireNamespace("future", 
[17:44:24.873]                           quietly = TRUE)
[17:44:24.873]                         if (has_future) {
[17:44:24.873]                           ns <- base::getNamespace("future")
[17:44:24.873]                           version <- ns[[".package"]][["version"]]
[17:44:24.873]                           if (is.null(version)) 
[17:44:24.873]                             version <- utils::packageVersion("future")
[17:44:24.873]                         }
[17:44:24.873]                         else {
[17:44:24.873]                           version <- NULL
[17:44:24.873]                         }
[17:44:24.873]                         if (!has_future || version < "1.8.0") {
[17:44:24.873]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:24.873]                             "", base::R.version$version.string), 
[17:44:24.873]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:24.873]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:24.873]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:24.873]                               "release", "version")], collapse = " "), 
[17:44:24.873]                             hostname = base::Sys.info()[["nodename"]])
[17:44:24.873]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:24.873]                             info)
[17:44:24.873]                           info <- base::paste(info, collapse = "; ")
[17:44:24.873]                           if (!has_future) {
[17:44:24.873]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:24.873]                               info)
[17:44:24.873]                           }
[17:44:24.873]                           else {
[17:44:24.873]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:24.873]                               info, version)
[17:44:24.873]                           }
[17:44:24.873]                           base::stop(msg)
[17:44:24.873]                         }
[17:44:24.873]                       })
[17:44:24.873]                     }
[17:44:24.873]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:24.873]                     base::options(mc.cores = 1L)
[17:44:24.873]                   }
[17:44:24.873]                   options(future.plan = NULL)
[17:44:24.873]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.873]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:24.873]                 }
[17:44:24.873]                 ...future.workdir <- getwd()
[17:44:24.873]             }
[17:44:24.873]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:24.873]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:24.873]         }
[17:44:24.873]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:24.873]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:24.873]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:24.873]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:24.873]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:24.873]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:24.873]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:24.873]             base::names(...future.oldOptions))
[17:44:24.873]     }
[17:44:24.873]     if (FALSE) {
[17:44:24.873]     }
[17:44:24.873]     else {
[17:44:24.873]         if (TRUE) {
[17:44:24.873]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:24.873]                 open = "w")
[17:44:24.873]         }
[17:44:24.873]         else {
[17:44:24.873]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:24.873]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:24.873]         }
[17:44:24.873]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:24.873]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:24.873]             base::sink(type = "output", split = FALSE)
[17:44:24.873]             base::close(...future.stdout)
[17:44:24.873]         }, add = TRUE)
[17:44:24.873]     }
[17:44:24.873]     ...future.frame <- base::sys.nframe()
[17:44:24.873]     ...future.conditions <- base::list()
[17:44:24.873]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:24.873]     if (FALSE) {
[17:44:24.873]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:24.873]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:24.873]     }
[17:44:24.873]     ...future.result <- base::tryCatch({
[17:44:24.873]         base::withCallingHandlers({
[17:44:24.873]             ...future.value <- base::withVisible(base::local({
[17:44:24.873]                 ...future.makeSendCondition <- local({
[17:44:24.873]                   sendCondition <- NULL
[17:44:24.873]                   function(frame = 1L) {
[17:44:24.873]                     if (is.function(sendCondition)) 
[17:44:24.873]                       return(sendCondition)
[17:44:24.873]                     ns <- getNamespace("parallel")
[17:44:24.873]                     if (exists("sendData", mode = "function", 
[17:44:24.873]                       envir = ns)) {
[17:44:24.873]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:24.873]                         envir = ns)
[17:44:24.873]                       envir <- sys.frame(frame)
[17:44:24.873]                       master <- NULL
[17:44:24.873]                       while (!identical(envir, .GlobalEnv) && 
[17:44:24.873]                         !identical(envir, emptyenv())) {
[17:44:24.873]                         if (exists("master", mode = "list", envir = envir, 
[17:44:24.873]                           inherits = FALSE)) {
[17:44:24.873]                           master <- get("master", mode = "list", 
[17:44:24.873]                             envir = envir, inherits = FALSE)
[17:44:24.873]                           if (inherits(master, c("SOCKnode", 
[17:44:24.873]                             "SOCK0node"))) {
[17:44:24.873]                             sendCondition <<- function(cond) {
[17:44:24.873]                               data <- list(type = "VALUE", value = cond, 
[17:44:24.873]                                 success = TRUE)
[17:44:24.873]                               parallel_sendData(master, data)
[17:44:24.873]                             }
[17:44:24.873]                             return(sendCondition)
[17:44:24.873]                           }
[17:44:24.873]                         }
[17:44:24.873]                         frame <- frame + 1L
[17:44:24.873]                         envir <- sys.frame(frame)
[17:44:24.873]                       }
[17:44:24.873]                     }
[17:44:24.873]                     sendCondition <<- function(cond) NULL
[17:44:24.873]                   }
[17:44:24.873]                 })
[17:44:24.873]                 withCallingHandlers({
[17:44:24.873]                   print(42)
[17:44:24.873]                 }, immediateCondition = function(cond) {
[17:44:24.873]                   sendCondition <- ...future.makeSendCondition()
[17:44:24.873]                   sendCondition(cond)
[17:44:24.873]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.873]                   {
[17:44:24.873]                     inherits <- base::inherits
[17:44:24.873]                     invokeRestart <- base::invokeRestart
[17:44:24.873]                     is.null <- base::is.null
[17:44:24.873]                     muffled <- FALSE
[17:44:24.873]                     if (inherits(cond, "message")) {
[17:44:24.873]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:24.873]                       if (muffled) 
[17:44:24.873]                         invokeRestart("muffleMessage")
[17:44:24.873]                     }
[17:44:24.873]                     else if (inherits(cond, "warning")) {
[17:44:24.873]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:24.873]                       if (muffled) 
[17:44:24.873]                         invokeRestart("muffleWarning")
[17:44:24.873]                     }
[17:44:24.873]                     else if (inherits(cond, "condition")) {
[17:44:24.873]                       if (!is.null(pattern)) {
[17:44:24.873]                         computeRestarts <- base::computeRestarts
[17:44:24.873]                         grepl <- base::grepl
[17:44:24.873]                         restarts <- computeRestarts(cond)
[17:44:24.873]                         for (restart in restarts) {
[17:44:24.873]                           name <- restart$name
[17:44:24.873]                           if (is.null(name)) 
[17:44:24.873]                             next
[17:44:24.873]                           if (!grepl(pattern, name)) 
[17:44:24.873]                             next
[17:44:24.873]                           invokeRestart(restart)
[17:44:24.873]                           muffled <- TRUE
[17:44:24.873]                           break
[17:44:24.873]                         }
[17:44:24.873]                       }
[17:44:24.873]                     }
[17:44:24.873]                     invisible(muffled)
[17:44:24.873]                   }
[17:44:24.873]                   muffleCondition(cond)
[17:44:24.873]                 })
[17:44:24.873]             }))
[17:44:24.873]             future::FutureResult(value = ...future.value$value, 
[17:44:24.873]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.873]                   ...future.rng), globalenv = if (FALSE) 
[17:44:24.873]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:24.873]                     ...future.globalenv.names))
[17:44:24.873]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:24.873]         }, condition = base::local({
[17:44:24.873]             c <- base::c
[17:44:24.873]             inherits <- base::inherits
[17:44:24.873]             invokeRestart <- base::invokeRestart
[17:44:24.873]             length <- base::length
[17:44:24.873]             list <- base::list
[17:44:24.873]             seq.int <- base::seq.int
[17:44:24.873]             signalCondition <- base::signalCondition
[17:44:24.873]             sys.calls <- base::sys.calls
[17:44:24.873]             `[[` <- base::`[[`
[17:44:24.873]             `+` <- base::`+`
[17:44:24.873]             `<<-` <- base::`<<-`
[17:44:24.873]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:24.873]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:24.873]                   3L)]
[17:44:24.873]             }
[17:44:24.873]             function(cond) {
[17:44:24.873]                 is_error <- inherits(cond, "error")
[17:44:24.873]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:24.873]                   NULL)
[17:44:24.873]                 if (is_error) {
[17:44:24.873]                   sessionInformation <- function() {
[17:44:24.873]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:24.873]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:24.873]                       search = base::search(), system = base::Sys.info())
[17:44:24.873]                   }
[17:44:24.873]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.873]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:24.873]                     cond$call), session = sessionInformation(), 
[17:44:24.873]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:24.873]                   signalCondition(cond)
[17:44:24.873]                 }
[17:44:24.873]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:24.873]                 "immediateCondition"))) {
[17:44:24.873]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:24.873]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.873]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:24.873]                   if (TRUE && !signal) {
[17:44:24.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.873]                     {
[17:44:24.873]                       inherits <- base::inherits
[17:44:24.873]                       invokeRestart <- base::invokeRestart
[17:44:24.873]                       is.null <- base::is.null
[17:44:24.873]                       muffled <- FALSE
[17:44:24.873]                       if (inherits(cond, "message")) {
[17:44:24.873]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.873]                         if (muffled) 
[17:44:24.873]                           invokeRestart("muffleMessage")
[17:44:24.873]                       }
[17:44:24.873]                       else if (inherits(cond, "warning")) {
[17:44:24.873]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.873]                         if (muffled) 
[17:44:24.873]                           invokeRestart("muffleWarning")
[17:44:24.873]                       }
[17:44:24.873]                       else if (inherits(cond, "condition")) {
[17:44:24.873]                         if (!is.null(pattern)) {
[17:44:24.873]                           computeRestarts <- base::computeRestarts
[17:44:24.873]                           grepl <- base::grepl
[17:44:24.873]                           restarts <- computeRestarts(cond)
[17:44:24.873]                           for (restart in restarts) {
[17:44:24.873]                             name <- restart$name
[17:44:24.873]                             if (is.null(name)) 
[17:44:24.873]                               next
[17:44:24.873]                             if (!grepl(pattern, name)) 
[17:44:24.873]                               next
[17:44:24.873]                             invokeRestart(restart)
[17:44:24.873]                             muffled <- TRUE
[17:44:24.873]                             break
[17:44:24.873]                           }
[17:44:24.873]                         }
[17:44:24.873]                       }
[17:44:24.873]                       invisible(muffled)
[17:44:24.873]                     }
[17:44:24.873]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.873]                   }
[17:44:24.873]                 }
[17:44:24.873]                 else {
[17:44:24.873]                   if (TRUE) {
[17:44:24.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.873]                     {
[17:44:24.873]                       inherits <- base::inherits
[17:44:24.873]                       invokeRestart <- base::invokeRestart
[17:44:24.873]                       is.null <- base::is.null
[17:44:24.873]                       muffled <- FALSE
[17:44:24.873]                       if (inherits(cond, "message")) {
[17:44:24.873]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.873]                         if (muffled) 
[17:44:24.873]                           invokeRestart("muffleMessage")
[17:44:24.873]                       }
[17:44:24.873]                       else if (inherits(cond, "warning")) {
[17:44:24.873]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.873]                         if (muffled) 
[17:44:24.873]                           invokeRestart("muffleWarning")
[17:44:24.873]                       }
[17:44:24.873]                       else if (inherits(cond, "condition")) {
[17:44:24.873]                         if (!is.null(pattern)) {
[17:44:24.873]                           computeRestarts <- base::computeRestarts
[17:44:24.873]                           grepl <- base::grepl
[17:44:24.873]                           restarts <- computeRestarts(cond)
[17:44:24.873]                           for (restart in restarts) {
[17:44:24.873]                             name <- restart$name
[17:44:24.873]                             if (is.null(name)) 
[17:44:24.873]                               next
[17:44:24.873]                             if (!grepl(pattern, name)) 
[17:44:24.873]                               next
[17:44:24.873]                             invokeRestart(restart)
[17:44:24.873]                             muffled <- TRUE
[17:44:24.873]                             break
[17:44:24.873]                           }
[17:44:24.873]                         }
[17:44:24.873]                       }
[17:44:24.873]                       invisible(muffled)
[17:44:24.873]                     }
[17:44:24.873]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.873]                   }
[17:44:24.873]                 }
[17:44:24.873]             }
[17:44:24.873]         }))
[17:44:24.873]     }, error = function(ex) {
[17:44:24.873]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:24.873]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.873]                 ...future.rng), started = ...future.startTime, 
[17:44:24.873]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:24.873]             version = "1.8"), class = "FutureResult")
[17:44:24.873]     }, finally = {
[17:44:24.873]         if (!identical(...future.workdir, getwd())) 
[17:44:24.873]             setwd(...future.workdir)
[17:44:24.873]         {
[17:44:24.873]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:24.873]                 ...future.oldOptions$nwarnings <- NULL
[17:44:24.873]             }
[17:44:24.873]             base::options(...future.oldOptions)
[17:44:24.873]             if (.Platform$OS.type == "windows") {
[17:44:24.873]                 old_names <- names(...future.oldEnvVars)
[17:44:24.873]                 envs <- base::Sys.getenv()
[17:44:24.873]                 names <- names(envs)
[17:44:24.873]                 common <- intersect(names, old_names)
[17:44:24.873]                 added <- setdiff(names, old_names)
[17:44:24.873]                 removed <- setdiff(old_names, names)
[17:44:24.873]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:24.873]                   envs[common]]
[17:44:24.873]                 NAMES <- toupper(changed)
[17:44:24.873]                 args <- list()
[17:44:24.873]                 for (kk in seq_along(NAMES)) {
[17:44:24.873]                   name <- changed[[kk]]
[17:44:24.873]                   NAME <- NAMES[[kk]]
[17:44:24.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.873]                     next
[17:44:24.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.873]                 }
[17:44:24.873]                 NAMES <- toupper(added)
[17:44:24.873]                 for (kk in seq_along(NAMES)) {
[17:44:24.873]                   name <- added[[kk]]
[17:44:24.873]                   NAME <- NAMES[[kk]]
[17:44:24.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.873]                     next
[17:44:24.873]                   args[[name]] <- ""
[17:44:24.873]                 }
[17:44:24.873]                 NAMES <- toupper(removed)
[17:44:24.873]                 for (kk in seq_along(NAMES)) {
[17:44:24.873]                   name <- removed[[kk]]
[17:44:24.873]                   NAME <- NAMES[[kk]]
[17:44:24.873]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.873]                     next
[17:44:24.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.873]                 }
[17:44:24.873]                 if (length(args) > 0) 
[17:44:24.873]                   base::do.call(base::Sys.setenv, args = args)
[17:44:24.873]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:24.873]             }
[17:44:24.873]             else {
[17:44:24.873]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:24.873]             }
[17:44:24.873]             {
[17:44:24.873]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:24.873]                   0L) {
[17:44:24.873]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:24.873]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:24.873]                   base::options(opts)
[17:44:24.873]                 }
[17:44:24.873]                 {
[17:44:24.873]                   {
[17:44:24.873]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:24.873]                     NULL
[17:44:24.873]                   }
[17:44:24.873]                   options(future.plan = NULL)
[17:44:24.873]                   if (is.na(NA_character_)) 
[17:44:24.873]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.873]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:24.873]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:24.873]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:24.873]                     envir = parent.frame()) 
[17:44:24.873]                   {
[17:44:24.873]                     if (is.function(workers)) 
[17:44:24.873]                       workers <- workers()
[17:44:24.873]                     workers <- structure(as.integer(workers), 
[17:44:24.873]                       class = class(workers))
[17:44:24.873]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:24.873]                       workers >= 1)
[17:44:24.873]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:24.873]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:24.873]                     }
[17:44:24.873]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:24.873]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:24.873]                       envir = envir)
[17:44:24.873]                     if (!future$lazy) 
[17:44:24.873]                       future <- run(future)
[17:44:24.873]                     invisible(future)
[17:44:24.873]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:24.873]                 }
[17:44:24.873]             }
[17:44:24.873]         }
[17:44:24.873]     })
[17:44:24.873]     if (TRUE) {
[17:44:24.873]         base::sink(type = "output", split = FALSE)
[17:44:24.873]         if (TRUE) {
[17:44:24.873]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:24.873]         }
[17:44:24.873]         else {
[17:44:24.873]             ...future.result["stdout"] <- base::list(NULL)
[17:44:24.873]         }
[17:44:24.873]         base::close(...future.stdout)
[17:44:24.873]         ...future.stdout <- NULL
[17:44:24.873]     }
[17:44:24.873]     ...future.result$conditions <- ...future.conditions
[17:44:24.873]     ...future.result$finished <- base::Sys.time()
[17:44:24.873]     ...future.result
[17:44:24.873] }
[17:44:24.876] MultisessionFuture started
[17:44:24.876] - Launch lazy future ... done
[17:44:24.876] run() for ‘MultisessionFuture’ ... done
[17:44:24.877] result() for ClusterFuture ...
[17:44:24.877] receiveMessageFromWorker() for ClusterFuture ...
[17:44:24.877] - Validating connection of MultisessionFuture
[17:44:24.924] - received message: FutureResult
[17:44:24.924] - Received FutureResult
[17:44:24.924] - Erased future from FutureRegistry
[17:44:24.924] result() for ClusterFuture ...
[17:44:24.925] - result already collected: FutureResult
[17:44:24.925] result() for ClusterFuture ... done
[17:44:24.925] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:24.925] result() for ClusterFuture ... done
[17:44:24.925] result() for ClusterFuture ...
[17:44:24.925] - result already collected: FutureResult
[17:44:24.925] result() for ClusterFuture ... done
[17:44:24.925] result() for ClusterFuture ...
[17:44:24.925] - result already collected: FutureResult
[17:44:24.926] result() for ClusterFuture ... done
[1] 42
[17:44:24.926] result() for ClusterFuture ...
[17:44:24.926] - result already collected: FutureResult
[17:44:24.926] result() for ClusterFuture ... done
- stdout = FALSE
[17:44:24.926] getGlobalsAndPackages() ...
[17:44:24.926] Searching for globals...
[17:44:24.929] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:24.929] Searching for globals ... DONE
[17:44:24.929] Resolving globals: FALSE
[17:44:24.930] 
[17:44:24.930] - packages: [1] ‘utils’
[17:44:24.930] getGlobalsAndPackages() ... DONE
[17:44:24.930] run() for ‘Future’ ...
[17:44:24.931] - state: ‘created’
[17:44:24.931] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:24.945] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:24.945] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:24.946]   - Field: ‘node’
[17:44:24.946]   - Field: ‘label’
[17:44:24.946]   - Field: ‘local’
[17:44:24.946]   - Field: ‘owner’
[17:44:24.946]   - Field: ‘envir’
[17:44:24.946]   - Field: ‘workers’
[17:44:24.946]   - Field: ‘packages’
[17:44:24.946]   - Field: ‘gc’
[17:44:24.946]   - Field: ‘conditions’
[17:44:24.946]   - Field: ‘persistent’
[17:44:24.946]   - Field: ‘expr’
[17:44:24.947]   - Field: ‘uuid’
[17:44:24.947]   - Field: ‘seed’
[17:44:24.947]   - Field: ‘version’
[17:44:24.947]   - Field: ‘result’
[17:44:24.947]   - Field: ‘asynchronous’
[17:44:24.947]   - Field: ‘calls’
[17:44:24.947]   - Field: ‘globals’
[17:44:24.947]   - Field: ‘stdout’
[17:44:24.947]   - Field: ‘earlySignal’
[17:44:24.947]   - Field: ‘lazy’
[17:44:24.948]   - Field: ‘state’
[17:44:24.948] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:24.948] - Launch lazy future ...
[17:44:24.948] Packages needed by the future expression (n = 1): ‘utils’
[17:44:24.948] Packages needed by future strategies (n = 0): <none>
[17:44:24.949] {
[17:44:24.949]     {
[17:44:24.949]         {
[17:44:24.949]             ...future.startTime <- base::Sys.time()
[17:44:24.949]             {
[17:44:24.949]                 {
[17:44:24.949]                   {
[17:44:24.949]                     {
[17:44:24.949]                       {
[17:44:24.949]                         base::local({
[17:44:24.949]                           has_future <- base::requireNamespace("future", 
[17:44:24.949]                             quietly = TRUE)
[17:44:24.949]                           if (has_future) {
[17:44:24.949]                             ns <- base::getNamespace("future")
[17:44:24.949]                             version <- ns[[".package"]][["version"]]
[17:44:24.949]                             if (is.null(version)) 
[17:44:24.949]                               version <- utils::packageVersion("future")
[17:44:24.949]                           }
[17:44:24.949]                           else {
[17:44:24.949]                             version <- NULL
[17:44:24.949]                           }
[17:44:24.949]                           if (!has_future || version < "1.8.0") {
[17:44:24.949]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:24.949]                               "", base::R.version$version.string), 
[17:44:24.949]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:24.949]                                 base::R.version$platform, 8 * 
[17:44:24.949]                                   base::.Machine$sizeof.pointer), 
[17:44:24.949]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:24.949]                                 "release", "version")], collapse = " "), 
[17:44:24.949]                               hostname = base::Sys.info()[["nodename"]])
[17:44:24.949]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:24.949]                               info)
[17:44:24.949]                             info <- base::paste(info, collapse = "; ")
[17:44:24.949]                             if (!has_future) {
[17:44:24.949]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:24.949]                                 info)
[17:44:24.949]                             }
[17:44:24.949]                             else {
[17:44:24.949]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:24.949]                                 info, version)
[17:44:24.949]                             }
[17:44:24.949]                             base::stop(msg)
[17:44:24.949]                           }
[17:44:24.949]                         })
[17:44:24.949]                       }
[17:44:24.949]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:24.949]                       base::options(mc.cores = 1L)
[17:44:24.949]                     }
[17:44:24.949]                     base::local({
[17:44:24.949]                       for (pkg in "utils") {
[17:44:24.949]                         base::loadNamespace(pkg)
[17:44:24.949]                         base::library(pkg, character.only = TRUE)
[17:44:24.949]                       }
[17:44:24.949]                     })
[17:44:24.949]                   }
[17:44:24.949]                   options(future.plan = NULL)
[17:44:24.949]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.949]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:24.949]                 }
[17:44:24.949]                 ...future.workdir <- getwd()
[17:44:24.949]             }
[17:44:24.949]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:24.949]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:24.949]         }
[17:44:24.949]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:24.949]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:24.949]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:24.949]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:24.949]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:24.949]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:24.949]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:24.949]             base::names(...future.oldOptions))
[17:44:24.949]     }
[17:44:24.949]     if (FALSE) {
[17:44:24.949]     }
[17:44:24.949]     else {
[17:44:24.949]         if (FALSE) {
[17:44:24.949]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:24.949]                 open = "w")
[17:44:24.949]         }
[17:44:24.949]         else {
[17:44:24.949]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:24.949]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:24.949]         }
[17:44:24.949]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:24.949]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:24.949]             base::sink(type = "output", split = FALSE)
[17:44:24.949]             base::close(...future.stdout)
[17:44:24.949]         }, add = TRUE)
[17:44:24.949]     }
[17:44:24.949]     ...future.frame <- base::sys.nframe()
[17:44:24.949]     ...future.conditions <- base::list()
[17:44:24.949]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:24.949]     if (FALSE) {
[17:44:24.949]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:24.949]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:24.949]     }
[17:44:24.949]     ...future.result <- base::tryCatch({
[17:44:24.949]         base::withCallingHandlers({
[17:44:24.949]             ...future.value <- base::withVisible(base::local({
[17:44:24.949]                 ...future.makeSendCondition <- local({
[17:44:24.949]                   sendCondition <- NULL
[17:44:24.949]                   function(frame = 1L) {
[17:44:24.949]                     if (is.function(sendCondition)) 
[17:44:24.949]                       return(sendCondition)
[17:44:24.949]                     ns <- getNamespace("parallel")
[17:44:24.949]                     if (exists("sendData", mode = "function", 
[17:44:24.949]                       envir = ns)) {
[17:44:24.949]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:24.949]                         envir = ns)
[17:44:24.949]                       envir <- sys.frame(frame)
[17:44:24.949]                       master <- NULL
[17:44:24.949]                       while (!identical(envir, .GlobalEnv) && 
[17:44:24.949]                         !identical(envir, emptyenv())) {
[17:44:24.949]                         if (exists("master", mode = "list", envir = envir, 
[17:44:24.949]                           inherits = FALSE)) {
[17:44:24.949]                           master <- get("master", mode = "list", 
[17:44:24.949]                             envir = envir, inherits = FALSE)
[17:44:24.949]                           if (inherits(master, c("SOCKnode", 
[17:44:24.949]                             "SOCK0node"))) {
[17:44:24.949]                             sendCondition <<- function(cond) {
[17:44:24.949]                               data <- list(type = "VALUE", value = cond, 
[17:44:24.949]                                 success = TRUE)
[17:44:24.949]                               parallel_sendData(master, data)
[17:44:24.949]                             }
[17:44:24.949]                             return(sendCondition)
[17:44:24.949]                           }
[17:44:24.949]                         }
[17:44:24.949]                         frame <- frame + 1L
[17:44:24.949]                         envir <- sys.frame(frame)
[17:44:24.949]                       }
[17:44:24.949]                     }
[17:44:24.949]                     sendCondition <<- function(cond) NULL
[17:44:24.949]                   }
[17:44:24.949]                 })
[17:44:24.949]                 withCallingHandlers({
[17:44:24.949]                   {
[17:44:24.949]                     print(1:50)
[17:44:24.949]                     str(1:50)
[17:44:24.949]                     cat(letters, sep = "-")
[17:44:24.949]                     cat(1:6, collapse = "\n")
[17:44:24.949]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:24.949]                     42L
[17:44:24.949]                   }
[17:44:24.949]                 }, immediateCondition = function(cond) {
[17:44:24.949]                   sendCondition <- ...future.makeSendCondition()
[17:44:24.949]                   sendCondition(cond)
[17:44:24.949]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.949]                   {
[17:44:24.949]                     inherits <- base::inherits
[17:44:24.949]                     invokeRestart <- base::invokeRestart
[17:44:24.949]                     is.null <- base::is.null
[17:44:24.949]                     muffled <- FALSE
[17:44:24.949]                     if (inherits(cond, "message")) {
[17:44:24.949]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:24.949]                       if (muffled) 
[17:44:24.949]                         invokeRestart("muffleMessage")
[17:44:24.949]                     }
[17:44:24.949]                     else if (inherits(cond, "warning")) {
[17:44:24.949]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:24.949]                       if (muffled) 
[17:44:24.949]                         invokeRestart("muffleWarning")
[17:44:24.949]                     }
[17:44:24.949]                     else if (inherits(cond, "condition")) {
[17:44:24.949]                       if (!is.null(pattern)) {
[17:44:24.949]                         computeRestarts <- base::computeRestarts
[17:44:24.949]                         grepl <- base::grepl
[17:44:24.949]                         restarts <- computeRestarts(cond)
[17:44:24.949]                         for (restart in restarts) {
[17:44:24.949]                           name <- restart$name
[17:44:24.949]                           if (is.null(name)) 
[17:44:24.949]                             next
[17:44:24.949]                           if (!grepl(pattern, name)) 
[17:44:24.949]                             next
[17:44:24.949]                           invokeRestart(restart)
[17:44:24.949]                           muffled <- TRUE
[17:44:24.949]                           break
[17:44:24.949]                         }
[17:44:24.949]                       }
[17:44:24.949]                     }
[17:44:24.949]                     invisible(muffled)
[17:44:24.949]                   }
[17:44:24.949]                   muffleCondition(cond)
[17:44:24.949]                 })
[17:44:24.949]             }))
[17:44:24.949]             future::FutureResult(value = ...future.value$value, 
[17:44:24.949]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.949]                   ...future.rng), globalenv = if (FALSE) 
[17:44:24.949]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:24.949]                     ...future.globalenv.names))
[17:44:24.949]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:24.949]         }, condition = base::local({
[17:44:24.949]             c <- base::c
[17:44:24.949]             inherits <- base::inherits
[17:44:24.949]             invokeRestart <- base::invokeRestart
[17:44:24.949]             length <- base::length
[17:44:24.949]             list <- base::list
[17:44:24.949]             seq.int <- base::seq.int
[17:44:24.949]             signalCondition <- base::signalCondition
[17:44:24.949]             sys.calls <- base::sys.calls
[17:44:24.949]             `[[` <- base::`[[`
[17:44:24.949]             `+` <- base::`+`
[17:44:24.949]             `<<-` <- base::`<<-`
[17:44:24.949]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:24.949]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:24.949]                   3L)]
[17:44:24.949]             }
[17:44:24.949]             function(cond) {
[17:44:24.949]                 is_error <- inherits(cond, "error")
[17:44:24.949]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:24.949]                   NULL)
[17:44:24.949]                 if (is_error) {
[17:44:24.949]                   sessionInformation <- function() {
[17:44:24.949]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:24.949]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:24.949]                       search = base::search(), system = base::Sys.info())
[17:44:24.949]                   }
[17:44:24.949]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.949]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:24.949]                     cond$call), session = sessionInformation(), 
[17:44:24.949]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:24.949]                   signalCondition(cond)
[17:44:24.949]                 }
[17:44:24.949]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:24.949]                 "immediateCondition"))) {
[17:44:24.949]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:24.949]                   ...future.conditions[[length(...future.conditions) + 
[17:44:24.949]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:24.949]                   if (TRUE && !signal) {
[17:44:24.949]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.949]                     {
[17:44:24.949]                       inherits <- base::inherits
[17:44:24.949]                       invokeRestart <- base::invokeRestart
[17:44:24.949]                       is.null <- base::is.null
[17:44:24.949]                       muffled <- FALSE
[17:44:24.949]                       if (inherits(cond, "message")) {
[17:44:24.949]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.949]                         if (muffled) 
[17:44:24.949]                           invokeRestart("muffleMessage")
[17:44:24.949]                       }
[17:44:24.949]                       else if (inherits(cond, "warning")) {
[17:44:24.949]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.949]                         if (muffled) 
[17:44:24.949]                           invokeRestart("muffleWarning")
[17:44:24.949]                       }
[17:44:24.949]                       else if (inherits(cond, "condition")) {
[17:44:24.949]                         if (!is.null(pattern)) {
[17:44:24.949]                           computeRestarts <- base::computeRestarts
[17:44:24.949]                           grepl <- base::grepl
[17:44:24.949]                           restarts <- computeRestarts(cond)
[17:44:24.949]                           for (restart in restarts) {
[17:44:24.949]                             name <- restart$name
[17:44:24.949]                             if (is.null(name)) 
[17:44:24.949]                               next
[17:44:24.949]                             if (!grepl(pattern, name)) 
[17:44:24.949]                               next
[17:44:24.949]                             invokeRestart(restart)
[17:44:24.949]                             muffled <- TRUE
[17:44:24.949]                             break
[17:44:24.949]                           }
[17:44:24.949]                         }
[17:44:24.949]                       }
[17:44:24.949]                       invisible(muffled)
[17:44:24.949]                     }
[17:44:24.949]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.949]                   }
[17:44:24.949]                 }
[17:44:24.949]                 else {
[17:44:24.949]                   if (TRUE) {
[17:44:24.949]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:24.949]                     {
[17:44:24.949]                       inherits <- base::inherits
[17:44:24.949]                       invokeRestart <- base::invokeRestart
[17:44:24.949]                       is.null <- base::is.null
[17:44:24.949]                       muffled <- FALSE
[17:44:24.949]                       if (inherits(cond, "message")) {
[17:44:24.949]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:24.949]                         if (muffled) 
[17:44:24.949]                           invokeRestart("muffleMessage")
[17:44:24.949]                       }
[17:44:24.949]                       else if (inherits(cond, "warning")) {
[17:44:24.949]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:24.949]                         if (muffled) 
[17:44:24.949]                           invokeRestart("muffleWarning")
[17:44:24.949]                       }
[17:44:24.949]                       else if (inherits(cond, "condition")) {
[17:44:24.949]                         if (!is.null(pattern)) {
[17:44:24.949]                           computeRestarts <- base::computeRestarts
[17:44:24.949]                           grepl <- base::grepl
[17:44:24.949]                           restarts <- computeRestarts(cond)
[17:44:24.949]                           for (restart in restarts) {
[17:44:24.949]                             name <- restart$name
[17:44:24.949]                             if (is.null(name)) 
[17:44:24.949]                               next
[17:44:24.949]                             if (!grepl(pattern, name)) 
[17:44:24.949]                               next
[17:44:24.949]                             invokeRestart(restart)
[17:44:24.949]                             muffled <- TRUE
[17:44:24.949]                             break
[17:44:24.949]                           }
[17:44:24.949]                         }
[17:44:24.949]                       }
[17:44:24.949]                       invisible(muffled)
[17:44:24.949]                     }
[17:44:24.949]                     muffleCondition(cond, pattern = "^muffle")
[17:44:24.949]                   }
[17:44:24.949]                 }
[17:44:24.949]             }
[17:44:24.949]         }))
[17:44:24.949]     }, error = function(ex) {
[17:44:24.949]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:24.949]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:24.949]                 ...future.rng), started = ...future.startTime, 
[17:44:24.949]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:24.949]             version = "1.8"), class = "FutureResult")
[17:44:24.949]     }, finally = {
[17:44:24.949]         if (!identical(...future.workdir, getwd())) 
[17:44:24.949]             setwd(...future.workdir)
[17:44:24.949]         {
[17:44:24.949]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:24.949]                 ...future.oldOptions$nwarnings <- NULL
[17:44:24.949]             }
[17:44:24.949]             base::options(...future.oldOptions)
[17:44:24.949]             if (.Platform$OS.type == "windows") {
[17:44:24.949]                 old_names <- names(...future.oldEnvVars)
[17:44:24.949]                 envs <- base::Sys.getenv()
[17:44:24.949]                 names <- names(envs)
[17:44:24.949]                 common <- intersect(names, old_names)
[17:44:24.949]                 added <- setdiff(names, old_names)
[17:44:24.949]                 removed <- setdiff(old_names, names)
[17:44:24.949]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:24.949]                   envs[common]]
[17:44:24.949]                 NAMES <- toupper(changed)
[17:44:24.949]                 args <- list()
[17:44:24.949]                 for (kk in seq_along(NAMES)) {
[17:44:24.949]                   name <- changed[[kk]]
[17:44:24.949]                   NAME <- NAMES[[kk]]
[17:44:24.949]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.949]                     next
[17:44:24.949]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.949]                 }
[17:44:24.949]                 NAMES <- toupper(added)
[17:44:24.949]                 for (kk in seq_along(NAMES)) {
[17:44:24.949]                   name <- added[[kk]]
[17:44:24.949]                   NAME <- NAMES[[kk]]
[17:44:24.949]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.949]                     next
[17:44:24.949]                   args[[name]] <- ""
[17:44:24.949]                 }
[17:44:24.949]                 NAMES <- toupper(removed)
[17:44:24.949]                 for (kk in seq_along(NAMES)) {
[17:44:24.949]                   name <- removed[[kk]]
[17:44:24.949]                   NAME <- NAMES[[kk]]
[17:44:24.949]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:24.949]                     next
[17:44:24.949]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:24.949]                 }
[17:44:24.949]                 if (length(args) > 0) 
[17:44:24.949]                   base::do.call(base::Sys.setenv, args = args)
[17:44:24.949]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:24.949]             }
[17:44:24.949]             else {
[17:44:24.949]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:24.949]             }
[17:44:24.949]             {
[17:44:24.949]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:24.949]                   0L) {
[17:44:24.949]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:24.949]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:24.949]                   base::options(opts)
[17:44:24.949]                 }
[17:44:24.949]                 {
[17:44:24.949]                   {
[17:44:24.949]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:24.949]                     NULL
[17:44:24.949]                   }
[17:44:24.949]                   options(future.plan = NULL)
[17:44:24.949]                   if (is.na(NA_character_)) 
[17:44:24.949]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:24.949]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:24.949]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:24.949]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:24.949]                     envir = parent.frame()) 
[17:44:24.949]                   {
[17:44:24.949]                     if (is.function(workers)) 
[17:44:24.949]                       workers <- workers()
[17:44:24.949]                     workers <- structure(as.integer(workers), 
[17:44:24.949]                       class = class(workers))
[17:44:24.949]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:24.949]                       workers >= 1)
[17:44:24.949]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:24.949]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:24.949]                     }
[17:44:24.949]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:24.949]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:24.949]                       envir = envir)
[17:44:24.949]                     if (!future$lazy) 
[17:44:24.949]                       future <- run(future)
[17:44:24.949]                     invisible(future)
[17:44:24.949]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:24.949]                 }
[17:44:24.949]             }
[17:44:24.949]         }
[17:44:24.949]     })
[17:44:24.949]     if (TRUE) {
[17:44:24.949]         base::sink(type = "output", split = FALSE)
[17:44:24.949]         if (FALSE) {
[17:44:24.949]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:24.949]         }
[17:44:24.949]         else {
[17:44:24.949]             ...future.result["stdout"] <- base::list(NULL)
[17:44:24.949]         }
[17:44:24.949]         base::close(...future.stdout)
[17:44:24.949]         ...future.stdout <- NULL
[17:44:24.949]     }
[17:44:24.949]     ...future.result$conditions <- ...future.conditions
[17:44:24.949]     ...future.result$finished <- base::Sys.time()
[17:44:24.949]     ...future.result
[17:44:24.949] }
[17:44:24.952] MultisessionFuture started
[17:44:24.952] - Launch lazy future ... done
[17:44:24.952] run() for ‘MultisessionFuture’ ... done
[17:44:24.953] result() for ClusterFuture ...
[17:44:24.953] receiveMessageFromWorker() for ClusterFuture ...
[17:44:24.953] - Validating connection of MultisessionFuture
[17:44:25.001] - received message: FutureResult
[17:44:25.001] - Received FutureResult
[17:44:25.001] - Erased future from FutureRegistry
[17:44:25.001] result() for ClusterFuture ...
[17:44:25.002] - result already collected: FutureResult
[17:44:25.002] result() for ClusterFuture ... done
[17:44:25.002] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:25.002] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:24"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:25"
 $ session_uuid: chr "cdd94caa-24d8-2a42-81a0-fdd67ba33156"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53860
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:24"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:25.010] result() for ClusterFuture ...
[17:44:25.010] - result already collected: FutureResult
[17:44:25.010] result() for ClusterFuture ... done
[17:44:25.010] result() for ClusterFuture ...
[17:44:25.010] - result already collected: FutureResult
[17:44:25.010] result() for ClusterFuture ... done
[17:44:25.011] getGlobalsAndPackages() ...
[17:44:25.011] Searching for globals...
[17:44:25.014] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:25.014] Searching for globals ... DONE
[17:44:25.014] Resolving globals: FALSE
[17:44:25.015] 
[17:44:25.015] - packages: [1] ‘utils’
[17:44:25.015] getGlobalsAndPackages() ... DONE
[17:44:25.015] run() for ‘Future’ ...
[17:44:25.015] - state: ‘created’
[17:44:25.016] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:25.030] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:25.030] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:25.030]   - Field: ‘node’
[17:44:25.030]   - Field: ‘label’
[17:44:25.030]   - Field: ‘local’
[17:44:25.031]   - Field: ‘owner’
[17:44:25.031]   - Field: ‘envir’
[17:44:25.031]   - Field: ‘workers’
[17:44:25.031]   - Field: ‘packages’
[17:44:25.031]   - Field: ‘gc’
[17:44:25.031]   - Field: ‘conditions’
[17:44:25.031]   - Field: ‘persistent’
[17:44:25.031]   - Field: ‘expr’
[17:44:25.031]   - Field: ‘uuid’
[17:44:25.031]   - Field: ‘seed’
[17:44:25.032]   - Field: ‘version’
[17:44:25.032]   - Field: ‘result’
[17:44:25.032]   - Field: ‘asynchronous’
[17:44:25.032]   - Field: ‘calls’
[17:44:25.032]   - Field: ‘globals’
[17:44:25.032]   - Field: ‘stdout’
[17:44:25.032]   - Field: ‘earlySignal’
[17:44:25.032]   - Field: ‘lazy’
[17:44:25.032]   - Field: ‘state’
[17:44:25.032] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:25.032] - Launch lazy future ...
[17:44:25.033] Packages needed by the future expression (n = 1): ‘utils’
[17:44:25.033] Packages needed by future strategies (n = 0): <none>
[17:44:25.033] {
[17:44:25.033]     {
[17:44:25.033]         {
[17:44:25.033]             ...future.startTime <- base::Sys.time()
[17:44:25.033]             {
[17:44:25.033]                 {
[17:44:25.033]                   {
[17:44:25.033]                     {
[17:44:25.033]                       {
[17:44:25.033]                         base::local({
[17:44:25.033]                           has_future <- base::requireNamespace("future", 
[17:44:25.033]                             quietly = TRUE)
[17:44:25.033]                           if (has_future) {
[17:44:25.033]                             ns <- base::getNamespace("future")
[17:44:25.033]                             version <- ns[[".package"]][["version"]]
[17:44:25.033]                             if (is.null(version)) 
[17:44:25.033]                               version <- utils::packageVersion("future")
[17:44:25.033]                           }
[17:44:25.033]                           else {
[17:44:25.033]                             version <- NULL
[17:44:25.033]                           }
[17:44:25.033]                           if (!has_future || version < "1.8.0") {
[17:44:25.033]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:25.033]                               "", base::R.version$version.string), 
[17:44:25.033]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:25.033]                                 base::R.version$platform, 8 * 
[17:44:25.033]                                   base::.Machine$sizeof.pointer), 
[17:44:25.033]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:25.033]                                 "release", "version")], collapse = " "), 
[17:44:25.033]                               hostname = base::Sys.info()[["nodename"]])
[17:44:25.033]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:25.033]                               info)
[17:44:25.033]                             info <- base::paste(info, collapse = "; ")
[17:44:25.033]                             if (!has_future) {
[17:44:25.033]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:25.033]                                 info)
[17:44:25.033]                             }
[17:44:25.033]                             else {
[17:44:25.033]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:25.033]                                 info, version)
[17:44:25.033]                             }
[17:44:25.033]                             base::stop(msg)
[17:44:25.033]                           }
[17:44:25.033]                         })
[17:44:25.033]                       }
[17:44:25.033]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:25.033]                       base::options(mc.cores = 1L)
[17:44:25.033]                     }
[17:44:25.033]                     base::local({
[17:44:25.033]                       for (pkg in "utils") {
[17:44:25.033]                         base::loadNamespace(pkg)
[17:44:25.033]                         base::library(pkg, character.only = TRUE)
[17:44:25.033]                       }
[17:44:25.033]                     })
[17:44:25.033]                   }
[17:44:25.033]                   options(future.plan = NULL)
[17:44:25.033]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.033]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:25.033]                 }
[17:44:25.033]                 ...future.workdir <- getwd()
[17:44:25.033]             }
[17:44:25.033]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:25.033]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:25.033]         }
[17:44:25.033]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:25.033]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:25.033]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:25.033]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:25.033]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:25.033]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:25.033]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:25.033]             base::names(...future.oldOptions))
[17:44:25.033]     }
[17:44:25.033]     if (FALSE) {
[17:44:25.033]     }
[17:44:25.033]     else {
[17:44:25.033]         if (FALSE) {
[17:44:25.033]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:25.033]                 open = "w")
[17:44:25.033]         }
[17:44:25.033]         else {
[17:44:25.033]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:25.033]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:25.033]         }
[17:44:25.033]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:25.033]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:25.033]             base::sink(type = "output", split = FALSE)
[17:44:25.033]             base::close(...future.stdout)
[17:44:25.033]         }, add = TRUE)
[17:44:25.033]     }
[17:44:25.033]     ...future.frame <- base::sys.nframe()
[17:44:25.033]     ...future.conditions <- base::list()
[17:44:25.033]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:25.033]     if (FALSE) {
[17:44:25.033]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:25.033]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:25.033]     }
[17:44:25.033]     ...future.result <- base::tryCatch({
[17:44:25.033]         base::withCallingHandlers({
[17:44:25.033]             ...future.value <- base::withVisible(base::local({
[17:44:25.033]                 ...future.makeSendCondition <- local({
[17:44:25.033]                   sendCondition <- NULL
[17:44:25.033]                   function(frame = 1L) {
[17:44:25.033]                     if (is.function(sendCondition)) 
[17:44:25.033]                       return(sendCondition)
[17:44:25.033]                     ns <- getNamespace("parallel")
[17:44:25.033]                     if (exists("sendData", mode = "function", 
[17:44:25.033]                       envir = ns)) {
[17:44:25.033]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:25.033]                         envir = ns)
[17:44:25.033]                       envir <- sys.frame(frame)
[17:44:25.033]                       master <- NULL
[17:44:25.033]                       while (!identical(envir, .GlobalEnv) && 
[17:44:25.033]                         !identical(envir, emptyenv())) {
[17:44:25.033]                         if (exists("master", mode = "list", envir = envir, 
[17:44:25.033]                           inherits = FALSE)) {
[17:44:25.033]                           master <- get("master", mode = "list", 
[17:44:25.033]                             envir = envir, inherits = FALSE)
[17:44:25.033]                           if (inherits(master, c("SOCKnode", 
[17:44:25.033]                             "SOCK0node"))) {
[17:44:25.033]                             sendCondition <<- function(cond) {
[17:44:25.033]                               data <- list(type = "VALUE", value = cond, 
[17:44:25.033]                                 success = TRUE)
[17:44:25.033]                               parallel_sendData(master, data)
[17:44:25.033]                             }
[17:44:25.033]                             return(sendCondition)
[17:44:25.033]                           }
[17:44:25.033]                         }
[17:44:25.033]                         frame <- frame + 1L
[17:44:25.033]                         envir <- sys.frame(frame)
[17:44:25.033]                       }
[17:44:25.033]                     }
[17:44:25.033]                     sendCondition <<- function(cond) NULL
[17:44:25.033]                   }
[17:44:25.033]                 })
[17:44:25.033]                 withCallingHandlers({
[17:44:25.033]                   {
[17:44:25.033]                     print(1:50)
[17:44:25.033]                     str(1:50)
[17:44:25.033]                     cat(letters, sep = "-")
[17:44:25.033]                     cat(1:6, collapse = "\n")
[17:44:25.033]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:25.033]                     42L
[17:44:25.033]                   }
[17:44:25.033]                 }, immediateCondition = function(cond) {
[17:44:25.033]                   sendCondition <- ...future.makeSendCondition()
[17:44:25.033]                   sendCondition(cond)
[17:44:25.033]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.033]                   {
[17:44:25.033]                     inherits <- base::inherits
[17:44:25.033]                     invokeRestart <- base::invokeRestart
[17:44:25.033]                     is.null <- base::is.null
[17:44:25.033]                     muffled <- FALSE
[17:44:25.033]                     if (inherits(cond, "message")) {
[17:44:25.033]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:25.033]                       if (muffled) 
[17:44:25.033]                         invokeRestart("muffleMessage")
[17:44:25.033]                     }
[17:44:25.033]                     else if (inherits(cond, "warning")) {
[17:44:25.033]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:25.033]                       if (muffled) 
[17:44:25.033]                         invokeRestart("muffleWarning")
[17:44:25.033]                     }
[17:44:25.033]                     else if (inherits(cond, "condition")) {
[17:44:25.033]                       if (!is.null(pattern)) {
[17:44:25.033]                         computeRestarts <- base::computeRestarts
[17:44:25.033]                         grepl <- base::grepl
[17:44:25.033]                         restarts <- computeRestarts(cond)
[17:44:25.033]                         for (restart in restarts) {
[17:44:25.033]                           name <- restart$name
[17:44:25.033]                           if (is.null(name)) 
[17:44:25.033]                             next
[17:44:25.033]                           if (!grepl(pattern, name)) 
[17:44:25.033]                             next
[17:44:25.033]                           invokeRestart(restart)
[17:44:25.033]                           muffled <- TRUE
[17:44:25.033]                           break
[17:44:25.033]                         }
[17:44:25.033]                       }
[17:44:25.033]                     }
[17:44:25.033]                     invisible(muffled)
[17:44:25.033]                   }
[17:44:25.033]                   muffleCondition(cond)
[17:44:25.033]                 })
[17:44:25.033]             }))
[17:44:25.033]             future::FutureResult(value = ...future.value$value, 
[17:44:25.033]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.033]                   ...future.rng), globalenv = if (FALSE) 
[17:44:25.033]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:25.033]                     ...future.globalenv.names))
[17:44:25.033]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:25.033]         }, condition = base::local({
[17:44:25.033]             c <- base::c
[17:44:25.033]             inherits <- base::inherits
[17:44:25.033]             invokeRestart <- base::invokeRestart
[17:44:25.033]             length <- base::length
[17:44:25.033]             list <- base::list
[17:44:25.033]             seq.int <- base::seq.int
[17:44:25.033]             signalCondition <- base::signalCondition
[17:44:25.033]             sys.calls <- base::sys.calls
[17:44:25.033]             `[[` <- base::`[[`
[17:44:25.033]             `+` <- base::`+`
[17:44:25.033]             `<<-` <- base::`<<-`
[17:44:25.033]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:25.033]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:25.033]                   3L)]
[17:44:25.033]             }
[17:44:25.033]             function(cond) {
[17:44:25.033]                 is_error <- inherits(cond, "error")
[17:44:25.033]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:25.033]                   NULL)
[17:44:25.033]                 if (is_error) {
[17:44:25.033]                   sessionInformation <- function() {
[17:44:25.033]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:25.033]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:25.033]                       search = base::search(), system = base::Sys.info())
[17:44:25.033]                   }
[17:44:25.033]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.033]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:25.033]                     cond$call), session = sessionInformation(), 
[17:44:25.033]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:25.033]                   signalCondition(cond)
[17:44:25.033]                 }
[17:44:25.033]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:25.033]                 "immediateCondition"))) {
[17:44:25.033]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:25.033]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.033]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:25.033]                   if (TRUE && !signal) {
[17:44:25.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.033]                     {
[17:44:25.033]                       inherits <- base::inherits
[17:44:25.033]                       invokeRestart <- base::invokeRestart
[17:44:25.033]                       is.null <- base::is.null
[17:44:25.033]                       muffled <- FALSE
[17:44:25.033]                       if (inherits(cond, "message")) {
[17:44:25.033]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.033]                         if (muffled) 
[17:44:25.033]                           invokeRestart("muffleMessage")
[17:44:25.033]                       }
[17:44:25.033]                       else if (inherits(cond, "warning")) {
[17:44:25.033]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.033]                         if (muffled) 
[17:44:25.033]                           invokeRestart("muffleWarning")
[17:44:25.033]                       }
[17:44:25.033]                       else if (inherits(cond, "condition")) {
[17:44:25.033]                         if (!is.null(pattern)) {
[17:44:25.033]                           computeRestarts <- base::computeRestarts
[17:44:25.033]                           grepl <- base::grepl
[17:44:25.033]                           restarts <- computeRestarts(cond)
[17:44:25.033]                           for (restart in restarts) {
[17:44:25.033]                             name <- restart$name
[17:44:25.033]                             if (is.null(name)) 
[17:44:25.033]                               next
[17:44:25.033]                             if (!grepl(pattern, name)) 
[17:44:25.033]                               next
[17:44:25.033]                             invokeRestart(restart)
[17:44:25.033]                             muffled <- TRUE
[17:44:25.033]                             break
[17:44:25.033]                           }
[17:44:25.033]                         }
[17:44:25.033]                       }
[17:44:25.033]                       invisible(muffled)
[17:44:25.033]                     }
[17:44:25.033]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.033]                   }
[17:44:25.033]                 }
[17:44:25.033]                 else {
[17:44:25.033]                   if (TRUE) {
[17:44:25.033]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.033]                     {
[17:44:25.033]                       inherits <- base::inherits
[17:44:25.033]                       invokeRestart <- base::invokeRestart
[17:44:25.033]                       is.null <- base::is.null
[17:44:25.033]                       muffled <- FALSE
[17:44:25.033]                       if (inherits(cond, "message")) {
[17:44:25.033]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.033]                         if (muffled) 
[17:44:25.033]                           invokeRestart("muffleMessage")
[17:44:25.033]                       }
[17:44:25.033]                       else if (inherits(cond, "warning")) {
[17:44:25.033]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.033]                         if (muffled) 
[17:44:25.033]                           invokeRestart("muffleWarning")
[17:44:25.033]                       }
[17:44:25.033]                       else if (inherits(cond, "condition")) {
[17:44:25.033]                         if (!is.null(pattern)) {
[17:44:25.033]                           computeRestarts <- base::computeRestarts
[17:44:25.033]                           grepl <- base::grepl
[17:44:25.033]                           restarts <- computeRestarts(cond)
[17:44:25.033]                           for (restart in restarts) {
[17:44:25.033]                             name <- restart$name
[17:44:25.033]                             if (is.null(name)) 
[17:44:25.033]                               next
[17:44:25.033]                             if (!grepl(pattern, name)) 
[17:44:25.033]                               next
[17:44:25.033]                             invokeRestart(restart)
[17:44:25.033]                             muffled <- TRUE
[17:44:25.033]                             break
[17:44:25.033]                           }
[17:44:25.033]                         }
[17:44:25.033]                       }
[17:44:25.033]                       invisible(muffled)
[17:44:25.033]                     }
[17:44:25.033]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.033]                   }
[17:44:25.033]                 }
[17:44:25.033]             }
[17:44:25.033]         }))
[17:44:25.033]     }, error = function(ex) {
[17:44:25.033]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:25.033]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.033]                 ...future.rng), started = ...future.startTime, 
[17:44:25.033]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:25.033]             version = "1.8"), class = "FutureResult")
[17:44:25.033]     }, finally = {
[17:44:25.033]         if (!identical(...future.workdir, getwd())) 
[17:44:25.033]             setwd(...future.workdir)
[17:44:25.033]         {
[17:44:25.033]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:25.033]                 ...future.oldOptions$nwarnings <- NULL
[17:44:25.033]             }
[17:44:25.033]             base::options(...future.oldOptions)
[17:44:25.033]             if (.Platform$OS.type == "windows") {
[17:44:25.033]                 old_names <- names(...future.oldEnvVars)
[17:44:25.033]                 envs <- base::Sys.getenv()
[17:44:25.033]                 names <- names(envs)
[17:44:25.033]                 common <- intersect(names, old_names)
[17:44:25.033]                 added <- setdiff(names, old_names)
[17:44:25.033]                 removed <- setdiff(old_names, names)
[17:44:25.033]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:25.033]                   envs[common]]
[17:44:25.033]                 NAMES <- toupper(changed)
[17:44:25.033]                 args <- list()
[17:44:25.033]                 for (kk in seq_along(NAMES)) {
[17:44:25.033]                   name <- changed[[kk]]
[17:44:25.033]                   NAME <- NAMES[[kk]]
[17:44:25.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.033]                     next
[17:44:25.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.033]                 }
[17:44:25.033]                 NAMES <- toupper(added)
[17:44:25.033]                 for (kk in seq_along(NAMES)) {
[17:44:25.033]                   name <- added[[kk]]
[17:44:25.033]                   NAME <- NAMES[[kk]]
[17:44:25.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.033]                     next
[17:44:25.033]                   args[[name]] <- ""
[17:44:25.033]                 }
[17:44:25.033]                 NAMES <- toupper(removed)
[17:44:25.033]                 for (kk in seq_along(NAMES)) {
[17:44:25.033]                   name <- removed[[kk]]
[17:44:25.033]                   NAME <- NAMES[[kk]]
[17:44:25.033]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.033]                     next
[17:44:25.033]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.033]                 }
[17:44:25.033]                 if (length(args) > 0) 
[17:44:25.033]                   base::do.call(base::Sys.setenv, args = args)
[17:44:25.033]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:25.033]             }
[17:44:25.033]             else {
[17:44:25.033]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:25.033]             }
[17:44:25.033]             {
[17:44:25.033]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:25.033]                   0L) {
[17:44:25.033]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:25.033]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:25.033]                   base::options(opts)
[17:44:25.033]                 }
[17:44:25.033]                 {
[17:44:25.033]                   {
[17:44:25.033]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:25.033]                     NULL
[17:44:25.033]                   }
[17:44:25.033]                   options(future.plan = NULL)
[17:44:25.033]                   if (is.na(NA_character_)) 
[17:44:25.033]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.033]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:25.033]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:25.033]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:25.033]                     envir = parent.frame()) 
[17:44:25.033]                   {
[17:44:25.033]                     if (is.function(workers)) 
[17:44:25.033]                       workers <- workers()
[17:44:25.033]                     workers <- structure(as.integer(workers), 
[17:44:25.033]                       class = class(workers))
[17:44:25.033]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:25.033]                       workers >= 1)
[17:44:25.033]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:25.033]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:25.033]                     }
[17:44:25.033]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:25.033]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:25.033]                       envir = envir)
[17:44:25.033]                     if (!future$lazy) 
[17:44:25.033]                       future <- run(future)
[17:44:25.033]                     invisible(future)
[17:44:25.033]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:25.033]                 }
[17:44:25.033]             }
[17:44:25.033]         }
[17:44:25.033]     })
[17:44:25.033]     if (TRUE) {
[17:44:25.033]         base::sink(type = "output", split = FALSE)
[17:44:25.033]         if (FALSE) {
[17:44:25.033]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:25.033]         }
[17:44:25.033]         else {
[17:44:25.033]             ...future.result["stdout"] <- base::list(NULL)
[17:44:25.033]         }
[17:44:25.033]         base::close(...future.stdout)
[17:44:25.033]         ...future.stdout <- NULL
[17:44:25.033]     }
[17:44:25.033]     ...future.result$conditions <- ...future.conditions
[17:44:25.033]     ...future.result$finished <- base::Sys.time()
[17:44:25.033]     ...future.result
[17:44:25.033] }
[17:44:25.037] MultisessionFuture started
[17:44:25.037] - Launch lazy future ... done
[17:44:25.037] run() for ‘MultisessionFuture’ ... done
[17:44:25.038] result() for ClusterFuture ...
[17:44:25.038] receiveMessageFromWorker() for ClusterFuture ...
[17:44:25.038] - Validating connection of MultisessionFuture
[17:44:25.085] - received message: FutureResult
[17:44:25.085] - Received FutureResult
[17:44:25.085] - Erased future from FutureRegistry
[17:44:25.085] result() for ClusterFuture ...
[17:44:25.085] - result already collected: FutureResult
[17:44:25.085] result() for ClusterFuture ... done
[17:44:25.086] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:25.086] result() for ClusterFuture ... done
[17:44:25.086] result() for ClusterFuture ...
[17:44:25.086] - result already collected: FutureResult
[17:44:25.086] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[17:44:25.086] getGlobalsAndPackages() ...
[17:44:25.086] Searching for globals...
[17:44:25.087] - globals found: [1] ‘print’
[17:44:25.087] Searching for globals ... DONE
[17:44:25.087] Resolving globals: FALSE
[17:44:25.087] 
[17:44:25.087] 
[17:44:25.088] getGlobalsAndPackages() ... DONE
[17:44:25.088] run() for ‘Future’ ...
[17:44:25.088] - state: ‘created’
[17:44:25.088] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:25.102] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:25.102] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:25.103]   - Field: ‘node’
[17:44:25.103]   - Field: ‘label’
[17:44:25.103]   - Field: ‘local’
[17:44:25.103]   - Field: ‘owner’
[17:44:25.103]   - Field: ‘envir’
[17:44:25.103]   - Field: ‘workers’
[17:44:25.103]   - Field: ‘packages’
[17:44:25.103]   - Field: ‘gc’
[17:44:25.103]   - Field: ‘conditions’
[17:44:25.103]   - Field: ‘persistent’
[17:44:25.104]   - Field: ‘expr’
[17:44:25.104]   - Field: ‘uuid’
[17:44:25.104]   - Field: ‘seed’
[17:44:25.104]   - Field: ‘version’
[17:44:25.104]   - Field: ‘result’
[17:44:25.104]   - Field: ‘asynchronous’
[17:44:25.104]   - Field: ‘calls’
[17:44:25.104]   - Field: ‘globals’
[17:44:25.104]   - Field: ‘stdout’
[17:44:25.104]   - Field: ‘earlySignal’
[17:44:25.104]   - Field: ‘lazy’
[17:44:25.105]   - Field: ‘state’
[17:44:25.105] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:25.105] - Launch lazy future ...
[17:44:25.105] Packages needed by the future expression (n = 0): <none>
[17:44:25.105] Packages needed by future strategies (n = 0): <none>
[17:44:25.106] {
[17:44:25.106]     {
[17:44:25.106]         {
[17:44:25.106]             ...future.startTime <- base::Sys.time()
[17:44:25.106]             {
[17:44:25.106]                 {
[17:44:25.106]                   {
[17:44:25.106]                     {
[17:44:25.106]                       base::local({
[17:44:25.106]                         has_future <- base::requireNamespace("future", 
[17:44:25.106]                           quietly = TRUE)
[17:44:25.106]                         if (has_future) {
[17:44:25.106]                           ns <- base::getNamespace("future")
[17:44:25.106]                           version <- ns[[".package"]][["version"]]
[17:44:25.106]                           if (is.null(version)) 
[17:44:25.106]                             version <- utils::packageVersion("future")
[17:44:25.106]                         }
[17:44:25.106]                         else {
[17:44:25.106]                           version <- NULL
[17:44:25.106]                         }
[17:44:25.106]                         if (!has_future || version < "1.8.0") {
[17:44:25.106]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:25.106]                             "", base::R.version$version.string), 
[17:44:25.106]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:25.106]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:25.106]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:25.106]                               "release", "version")], collapse = " "), 
[17:44:25.106]                             hostname = base::Sys.info()[["nodename"]])
[17:44:25.106]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:25.106]                             info)
[17:44:25.106]                           info <- base::paste(info, collapse = "; ")
[17:44:25.106]                           if (!has_future) {
[17:44:25.106]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:25.106]                               info)
[17:44:25.106]                           }
[17:44:25.106]                           else {
[17:44:25.106]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:25.106]                               info, version)
[17:44:25.106]                           }
[17:44:25.106]                           base::stop(msg)
[17:44:25.106]                         }
[17:44:25.106]                       })
[17:44:25.106]                     }
[17:44:25.106]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:25.106]                     base::options(mc.cores = 1L)
[17:44:25.106]                   }
[17:44:25.106]                   options(future.plan = NULL)
[17:44:25.106]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.106]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:25.106]                 }
[17:44:25.106]                 ...future.workdir <- getwd()
[17:44:25.106]             }
[17:44:25.106]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:25.106]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:25.106]         }
[17:44:25.106]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:25.106]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:25.106]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:25.106]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:25.106]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:25.106]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:25.106]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:25.106]             base::names(...future.oldOptions))
[17:44:25.106]     }
[17:44:25.106]     if (FALSE) {
[17:44:25.106]     }
[17:44:25.106]     else {
[17:44:25.106]         if (TRUE) {
[17:44:25.106]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:25.106]                 open = "w")
[17:44:25.106]         }
[17:44:25.106]         else {
[17:44:25.106]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:25.106]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:25.106]         }
[17:44:25.106]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:25.106]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:25.106]             base::sink(type = "output", split = FALSE)
[17:44:25.106]             base::close(...future.stdout)
[17:44:25.106]         }, add = TRUE)
[17:44:25.106]     }
[17:44:25.106]     ...future.frame <- base::sys.nframe()
[17:44:25.106]     ...future.conditions <- base::list()
[17:44:25.106]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:25.106]     if (FALSE) {
[17:44:25.106]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:25.106]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:25.106]     }
[17:44:25.106]     ...future.result <- base::tryCatch({
[17:44:25.106]         base::withCallingHandlers({
[17:44:25.106]             ...future.value <- base::withVisible(base::local({
[17:44:25.106]                 ...future.makeSendCondition <- local({
[17:44:25.106]                   sendCondition <- NULL
[17:44:25.106]                   function(frame = 1L) {
[17:44:25.106]                     if (is.function(sendCondition)) 
[17:44:25.106]                       return(sendCondition)
[17:44:25.106]                     ns <- getNamespace("parallel")
[17:44:25.106]                     if (exists("sendData", mode = "function", 
[17:44:25.106]                       envir = ns)) {
[17:44:25.106]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:25.106]                         envir = ns)
[17:44:25.106]                       envir <- sys.frame(frame)
[17:44:25.106]                       master <- NULL
[17:44:25.106]                       while (!identical(envir, .GlobalEnv) && 
[17:44:25.106]                         !identical(envir, emptyenv())) {
[17:44:25.106]                         if (exists("master", mode = "list", envir = envir, 
[17:44:25.106]                           inherits = FALSE)) {
[17:44:25.106]                           master <- get("master", mode = "list", 
[17:44:25.106]                             envir = envir, inherits = FALSE)
[17:44:25.106]                           if (inherits(master, c("SOCKnode", 
[17:44:25.106]                             "SOCK0node"))) {
[17:44:25.106]                             sendCondition <<- function(cond) {
[17:44:25.106]                               data <- list(type = "VALUE", value = cond, 
[17:44:25.106]                                 success = TRUE)
[17:44:25.106]                               parallel_sendData(master, data)
[17:44:25.106]                             }
[17:44:25.106]                             return(sendCondition)
[17:44:25.106]                           }
[17:44:25.106]                         }
[17:44:25.106]                         frame <- frame + 1L
[17:44:25.106]                         envir <- sys.frame(frame)
[17:44:25.106]                       }
[17:44:25.106]                     }
[17:44:25.106]                     sendCondition <<- function(cond) NULL
[17:44:25.106]                   }
[17:44:25.106]                 })
[17:44:25.106]                 withCallingHandlers({
[17:44:25.106]                   print(42)
[17:44:25.106]                 }, immediateCondition = function(cond) {
[17:44:25.106]                   sendCondition <- ...future.makeSendCondition()
[17:44:25.106]                   sendCondition(cond)
[17:44:25.106]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.106]                   {
[17:44:25.106]                     inherits <- base::inherits
[17:44:25.106]                     invokeRestart <- base::invokeRestart
[17:44:25.106]                     is.null <- base::is.null
[17:44:25.106]                     muffled <- FALSE
[17:44:25.106]                     if (inherits(cond, "message")) {
[17:44:25.106]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:25.106]                       if (muffled) 
[17:44:25.106]                         invokeRestart("muffleMessage")
[17:44:25.106]                     }
[17:44:25.106]                     else if (inherits(cond, "warning")) {
[17:44:25.106]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:25.106]                       if (muffled) 
[17:44:25.106]                         invokeRestart("muffleWarning")
[17:44:25.106]                     }
[17:44:25.106]                     else if (inherits(cond, "condition")) {
[17:44:25.106]                       if (!is.null(pattern)) {
[17:44:25.106]                         computeRestarts <- base::computeRestarts
[17:44:25.106]                         grepl <- base::grepl
[17:44:25.106]                         restarts <- computeRestarts(cond)
[17:44:25.106]                         for (restart in restarts) {
[17:44:25.106]                           name <- restart$name
[17:44:25.106]                           if (is.null(name)) 
[17:44:25.106]                             next
[17:44:25.106]                           if (!grepl(pattern, name)) 
[17:44:25.106]                             next
[17:44:25.106]                           invokeRestart(restart)
[17:44:25.106]                           muffled <- TRUE
[17:44:25.106]                           break
[17:44:25.106]                         }
[17:44:25.106]                       }
[17:44:25.106]                     }
[17:44:25.106]                     invisible(muffled)
[17:44:25.106]                   }
[17:44:25.106]                   muffleCondition(cond)
[17:44:25.106]                 })
[17:44:25.106]             }))
[17:44:25.106]             future::FutureResult(value = ...future.value$value, 
[17:44:25.106]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.106]                   ...future.rng), globalenv = if (FALSE) 
[17:44:25.106]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:25.106]                     ...future.globalenv.names))
[17:44:25.106]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:25.106]         }, condition = base::local({
[17:44:25.106]             c <- base::c
[17:44:25.106]             inherits <- base::inherits
[17:44:25.106]             invokeRestart <- base::invokeRestart
[17:44:25.106]             length <- base::length
[17:44:25.106]             list <- base::list
[17:44:25.106]             seq.int <- base::seq.int
[17:44:25.106]             signalCondition <- base::signalCondition
[17:44:25.106]             sys.calls <- base::sys.calls
[17:44:25.106]             `[[` <- base::`[[`
[17:44:25.106]             `+` <- base::`+`
[17:44:25.106]             `<<-` <- base::`<<-`
[17:44:25.106]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:25.106]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:25.106]                   3L)]
[17:44:25.106]             }
[17:44:25.106]             function(cond) {
[17:44:25.106]                 is_error <- inherits(cond, "error")
[17:44:25.106]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:25.106]                   NULL)
[17:44:25.106]                 if (is_error) {
[17:44:25.106]                   sessionInformation <- function() {
[17:44:25.106]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:25.106]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:25.106]                       search = base::search(), system = base::Sys.info())
[17:44:25.106]                   }
[17:44:25.106]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.106]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:25.106]                     cond$call), session = sessionInformation(), 
[17:44:25.106]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:25.106]                   signalCondition(cond)
[17:44:25.106]                 }
[17:44:25.106]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:25.106]                 "immediateCondition"))) {
[17:44:25.106]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:25.106]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.106]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:25.106]                   if (TRUE && !signal) {
[17:44:25.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.106]                     {
[17:44:25.106]                       inherits <- base::inherits
[17:44:25.106]                       invokeRestart <- base::invokeRestart
[17:44:25.106]                       is.null <- base::is.null
[17:44:25.106]                       muffled <- FALSE
[17:44:25.106]                       if (inherits(cond, "message")) {
[17:44:25.106]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.106]                         if (muffled) 
[17:44:25.106]                           invokeRestart("muffleMessage")
[17:44:25.106]                       }
[17:44:25.106]                       else if (inherits(cond, "warning")) {
[17:44:25.106]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.106]                         if (muffled) 
[17:44:25.106]                           invokeRestart("muffleWarning")
[17:44:25.106]                       }
[17:44:25.106]                       else if (inherits(cond, "condition")) {
[17:44:25.106]                         if (!is.null(pattern)) {
[17:44:25.106]                           computeRestarts <- base::computeRestarts
[17:44:25.106]                           grepl <- base::grepl
[17:44:25.106]                           restarts <- computeRestarts(cond)
[17:44:25.106]                           for (restart in restarts) {
[17:44:25.106]                             name <- restart$name
[17:44:25.106]                             if (is.null(name)) 
[17:44:25.106]                               next
[17:44:25.106]                             if (!grepl(pattern, name)) 
[17:44:25.106]                               next
[17:44:25.106]                             invokeRestart(restart)
[17:44:25.106]                             muffled <- TRUE
[17:44:25.106]                             break
[17:44:25.106]                           }
[17:44:25.106]                         }
[17:44:25.106]                       }
[17:44:25.106]                       invisible(muffled)
[17:44:25.106]                     }
[17:44:25.106]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.106]                   }
[17:44:25.106]                 }
[17:44:25.106]                 else {
[17:44:25.106]                   if (TRUE) {
[17:44:25.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.106]                     {
[17:44:25.106]                       inherits <- base::inherits
[17:44:25.106]                       invokeRestart <- base::invokeRestart
[17:44:25.106]                       is.null <- base::is.null
[17:44:25.106]                       muffled <- FALSE
[17:44:25.106]                       if (inherits(cond, "message")) {
[17:44:25.106]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.106]                         if (muffled) 
[17:44:25.106]                           invokeRestart("muffleMessage")
[17:44:25.106]                       }
[17:44:25.106]                       else if (inherits(cond, "warning")) {
[17:44:25.106]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.106]                         if (muffled) 
[17:44:25.106]                           invokeRestart("muffleWarning")
[17:44:25.106]                       }
[17:44:25.106]                       else if (inherits(cond, "condition")) {
[17:44:25.106]                         if (!is.null(pattern)) {
[17:44:25.106]                           computeRestarts <- base::computeRestarts
[17:44:25.106]                           grepl <- base::grepl
[17:44:25.106]                           restarts <- computeRestarts(cond)
[17:44:25.106]                           for (restart in restarts) {
[17:44:25.106]                             name <- restart$name
[17:44:25.106]                             if (is.null(name)) 
[17:44:25.106]                               next
[17:44:25.106]                             if (!grepl(pattern, name)) 
[17:44:25.106]                               next
[17:44:25.106]                             invokeRestart(restart)
[17:44:25.106]                             muffled <- TRUE
[17:44:25.106]                             break
[17:44:25.106]                           }
[17:44:25.106]                         }
[17:44:25.106]                       }
[17:44:25.106]                       invisible(muffled)
[17:44:25.106]                     }
[17:44:25.106]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.106]                   }
[17:44:25.106]                 }
[17:44:25.106]             }
[17:44:25.106]         }))
[17:44:25.106]     }, error = function(ex) {
[17:44:25.106]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:25.106]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.106]                 ...future.rng), started = ...future.startTime, 
[17:44:25.106]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:25.106]             version = "1.8"), class = "FutureResult")
[17:44:25.106]     }, finally = {
[17:44:25.106]         if (!identical(...future.workdir, getwd())) 
[17:44:25.106]             setwd(...future.workdir)
[17:44:25.106]         {
[17:44:25.106]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:25.106]                 ...future.oldOptions$nwarnings <- NULL
[17:44:25.106]             }
[17:44:25.106]             base::options(...future.oldOptions)
[17:44:25.106]             if (.Platform$OS.type == "windows") {
[17:44:25.106]                 old_names <- names(...future.oldEnvVars)
[17:44:25.106]                 envs <- base::Sys.getenv()
[17:44:25.106]                 names <- names(envs)
[17:44:25.106]                 common <- intersect(names, old_names)
[17:44:25.106]                 added <- setdiff(names, old_names)
[17:44:25.106]                 removed <- setdiff(old_names, names)
[17:44:25.106]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:25.106]                   envs[common]]
[17:44:25.106]                 NAMES <- toupper(changed)
[17:44:25.106]                 args <- list()
[17:44:25.106]                 for (kk in seq_along(NAMES)) {
[17:44:25.106]                   name <- changed[[kk]]
[17:44:25.106]                   NAME <- NAMES[[kk]]
[17:44:25.106]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.106]                     next
[17:44:25.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.106]                 }
[17:44:25.106]                 NAMES <- toupper(added)
[17:44:25.106]                 for (kk in seq_along(NAMES)) {
[17:44:25.106]                   name <- added[[kk]]
[17:44:25.106]                   NAME <- NAMES[[kk]]
[17:44:25.106]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.106]                     next
[17:44:25.106]                   args[[name]] <- ""
[17:44:25.106]                 }
[17:44:25.106]                 NAMES <- toupper(removed)
[17:44:25.106]                 for (kk in seq_along(NAMES)) {
[17:44:25.106]                   name <- removed[[kk]]
[17:44:25.106]                   NAME <- NAMES[[kk]]
[17:44:25.106]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.106]                     next
[17:44:25.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.106]                 }
[17:44:25.106]                 if (length(args) > 0) 
[17:44:25.106]                   base::do.call(base::Sys.setenv, args = args)
[17:44:25.106]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:25.106]             }
[17:44:25.106]             else {
[17:44:25.106]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:25.106]             }
[17:44:25.106]             {
[17:44:25.106]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:25.106]                   0L) {
[17:44:25.106]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:25.106]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:25.106]                   base::options(opts)
[17:44:25.106]                 }
[17:44:25.106]                 {
[17:44:25.106]                   {
[17:44:25.106]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:25.106]                     NULL
[17:44:25.106]                   }
[17:44:25.106]                   options(future.plan = NULL)
[17:44:25.106]                   if (is.na(NA_character_)) 
[17:44:25.106]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.106]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:25.106]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:25.106]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:25.106]                     envir = parent.frame()) 
[17:44:25.106]                   {
[17:44:25.106]                     if (is.function(workers)) 
[17:44:25.106]                       workers <- workers()
[17:44:25.106]                     workers <- structure(as.integer(workers), 
[17:44:25.106]                       class = class(workers))
[17:44:25.106]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:25.106]                       workers >= 1)
[17:44:25.106]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:25.106]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:25.106]                     }
[17:44:25.106]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:25.106]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:25.106]                       envir = envir)
[17:44:25.106]                     if (!future$lazy) 
[17:44:25.106]                       future <- run(future)
[17:44:25.106]                     invisible(future)
[17:44:25.106]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:25.106]                 }
[17:44:25.106]             }
[17:44:25.106]         }
[17:44:25.106]     })
[17:44:25.106]     if (TRUE) {
[17:44:25.106]         base::sink(type = "output", split = FALSE)
[17:44:25.106]         if (TRUE) {
[17:44:25.106]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:25.106]         }
[17:44:25.106]         else {
[17:44:25.106]             ...future.result["stdout"] <- base::list(NULL)
[17:44:25.106]         }
[17:44:25.106]         base::close(...future.stdout)
[17:44:25.106]         ...future.stdout <- NULL
[17:44:25.106]     }
[17:44:25.106]     ...future.result$conditions <- ...future.conditions
[17:44:25.106]     ...future.result$finished <- base::Sys.time()
[17:44:25.106]     ...future.result
[17:44:25.106] }
[17:44:25.109] MultisessionFuture started
[17:44:25.109] - Launch lazy future ... done
[17:44:25.109] run() for ‘MultisessionFuture’ ... done
[17:44:25.110] result() for ClusterFuture ...
[17:44:25.110] receiveMessageFromWorker() for ClusterFuture ...
[17:44:25.110] - Validating connection of MultisessionFuture
[17:44:25.156] - received message: FutureResult
[17:44:25.156] - Received FutureResult
[17:44:25.156] - Erased future from FutureRegistry
[17:44:25.157] result() for ClusterFuture ...
[17:44:25.157] - result already collected: FutureResult
[17:44:25.157] result() for ClusterFuture ... done
[17:44:25.157] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:25.157] result() for ClusterFuture ... done
[17:44:25.157] result() for ClusterFuture ...
[17:44:25.157] - result already collected: FutureResult
[17:44:25.157] result() for ClusterFuture ... done
[17:44:25.157] result() for ClusterFuture ...
[17:44:25.157] - result already collected: FutureResult
[17:44:25.157] result() for ClusterFuture ... done
[1] 42
[17:44:25.158] result() for ClusterFuture ...
[17:44:25.158] - result already collected: FutureResult
[17:44:25.158] result() for ClusterFuture ... done
- stdout = NA
[17:44:25.158] getGlobalsAndPackages() ...
[17:44:25.158] Searching for globals...
[17:44:25.161] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:25.161] Searching for globals ... DONE
[17:44:25.161] Resolving globals: FALSE
[17:44:25.162] 
[17:44:25.162] - packages: [1] ‘utils’
[17:44:25.162] getGlobalsAndPackages() ... DONE
[17:44:25.162] run() for ‘Future’ ...
[17:44:25.163] - state: ‘created’
[17:44:25.163] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:25.178] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:25.178] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:25.178]   - Field: ‘node’
[17:44:25.178]   - Field: ‘label’
[17:44:25.178]   - Field: ‘local’
[17:44:25.178]   - Field: ‘owner’
[17:44:25.178]   - Field: ‘envir’
[17:44:25.178]   - Field: ‘workers’
[17:44:25.179]   - Field: ‘packages’
[17:44:25.179]   - Field: ‘gc’
[17:44:25.181]   - Field: ‘conditions’
[17:44:25.181]   - Field: ‘persistent’
[17:44:25.181]   - Field: ‘expr’
[17:44:25.181]   - Field: ‘uuid’
[17:44:25.181]   - Field: ‘seed’
[17:44:25.181]   - Field: ‘version’
[17:44:25.182]   - Field: ‘result’
[17:44:25.182]   - Field: ‘asynchronous’
[17:44:25.182]   - Field: ‘calls’
[17:44:25.182]   - Field: ‘globals’
[17:44:25.182]   - Field: ‘stdout’
[17:44:25.182]   - Field: ‘earlySignal’
[17:44:25.182]   - Field: ‘lazy’
[17:44:25.182]   - Field: ‘state’
[17:44:25.182] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:25.182] - Launch lazy future ...
[17:44:25.183] Packages needed by the future expression (n = 1): ‘utils’
[17:44:25.183] Packages needed by future strategies (n = 0): <none>
[17:44:25.183] {
[17:44:25.183]     {
[17:44:25.183]         {
[17:44:25.183]             ...future.startTime <- base::Sys.time()
[17:44:25.183]             {
[17:44:25.183]                 {
[17:44:25.183]                   {
[17:44:25.183]                     {
[17:44:25.183]                       {
[17:44:25.183]                         base::local({
[17:44:25.183]                           has_future <- base::requireNamespace("future", 
[17:44:25.183]                             quietly = TRUE)
[17:44:25.183]                           if (has_future) {
[17:44:25.183]                             ns <- base::getNamespace("future")
[17:44:25.183]                             version <- ns[[".package"]][["version"]]
[17:44:25.183]                             if (is.null(version)) 
[17:44:25.183]                               version <- utils::packageVersion("future")
[17:44:25.183]                           }
[17:44:25.183]                           else {
[17:44:25.183]                             version <- NULL
[17:44:25.183]                           }
[17:44:25.183]                           if (!has_future || version < "1.8.0") {
[17:44:25.183]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:25.183]                               "", base::R.version$version.string), 
[17:44:25.183]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:25.183]                                 base::R.version$platform, 8 * 
[17:44:25.183]                                   base::.Machine$sizeof.pointer), 
[17:44:25.183]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:25.183]                                 "release", "version")], collapse = " "), 
[17:44:25.183]                               hostname = base::Sys.info()[["nodename"]])
[17:44:25.183]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:25.183]                               info)
[17:44:25.183]                             info <- base::paste(info, collapse = "; ")
[17:44:25.183]                             if (!has_future) {
[17:44:25.183]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:25.183]                                 info)
[17:44:25.183]                             }
[17:44:25.183]                             else {
[17:44:25.183]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:25.183]                                 info, version)
[17:44:25.183]                             }
[17:44:25.183]                             base::stop(msg)
[17:44:25.183]                           }
[17:44:25.183]                         })
[17:44:25.183]                       }
[17:44:25.183]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:25.183]                       base::options(mc.cores = 1L)
[17:44:25.183]                     }
[17:44:25.183]                     base::local({
[17:44:25.183]                       for (pkg in "utils") {
[17:44:25.183]                         base::loadNamespace(pkg)
[17:44:25.183]                         base::library(pkg, character.only = TRUE)
[17:44:25.183]                       }
[17:44:25.183]                     })
[17:44:25.183]                   }
[17:44:25.183]                   options(future.plan = NULL)
[17:44:25.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:25.183]                 }
[17:44:25.183]                 ...future.workdir <- getwd()
[17:44:25.183]             }
[17:44:25.183]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:25.183]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:25.183]         }
[17:44:25.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:25.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:25.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:25.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:25.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:25.183]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:25.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:25.183]             base::names(...future.oldOptions))
[17:44:25.183]     }
[17:44:25.183]     if (TRUE) {
[17:44:25.183]     }
[17:44:25.183]     else {
[17:44:25.183]         if (NA) {
[17:44:25.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:25.183]                 open = "w")
[17:44:25.183]         }
[17:44:25.183]         else {
[17:44:25.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:25.183]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:25.183]         }
[17:44:25.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:25.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:25.183]             base::sink(type = "output", split = FALSE)
[17:44:25.183]             base::close(...future.stdout)
[17:44:25.183]         }, add = TRUE)
[17:44:25.183]     }
[17:44:25.183]     ...future.frame <- base::sys.nframe()
[17:44:25.183]     ...future.conditions <- base::list()
[17:44:25.183]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:25.183]     if (FALSE) {
[17:44:25.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:25.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:25.183]     }
[17:44:25.183]     ...future.result <- base::tryCatch({
[17:44:25.183]         base::withCallingHandlers({
[17:44:25.183]             ...future.value <- base::withVisible(base::local({
[17:44:25.183]                 ...future.makeSendCondition <- local({
[17:44:25.183]                   sendCondition <- NULL
[17:44:25.183]                   function(frame = 1L) {
[17:44:25.183]                     if (is.function(sendCondition)) 
[17:44:25.183]                       return(sendCondition)
[17:44:25.183]                     ns <- getNamespace("parallel")
[17:44:25.183]                     if (exists("sendData", mode = "function", 
[17:44:25.183]                       envir = ns)) {
[17:44:25.183]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:25.183]                         envir = ns)
[17:44:25.183]                       envir <- sys.frame(frame)
[17:44:25.183]                       master <- NULL
[17:44:25.183]                       while (!identical(envir, .GlobalEnv) && 
[17:44:25.183]                         !identical(envir, emptyenv())) {
[17:44:25.183]                         if (exists("master", mode = "list", envir = envir, 
[17:44:25.183]                           inherits = FALSE)) {
[17:44:25.183]                           master <- get("master", mode = "list", 
[17:44:25.183]                             envir = envir, inherits = FALSE)
[17:44:25.183]                           if (inherits(master, c("SOCKnode", 
[17:44:25.183]                             "SOCK0node"))) {
[17:44:25.183]                             sendCondition <<- function(cond) {
[17:44:25.183]                               data <- list(type = "VALUE", value = cond, 
[17:44:25.183]                                 success = TRUE)
[17:44:25.183]                               parallel_sendData(master, data)
[17:44:25.183]                             }
[17:44:25.183]                             return(sendCondition)
[17:44:25.183]                           }
[17:44:25.183]                         }
[17:44:25.183]                         frame <- frame + 1L
[17:44:25.183]                         envir <- sys.frame(frame)
[17:44:25.183]                       }
[17:44:25.183]                     }
[17:44:25.183]                     sendCondition <<- function(cond) NULL
[17:44:25.183]                   }
[17:44:25.183]                 })
[17:44:25.183]                 withCallingHandlers({
[17:44:25.183]                   {
[17:44:25.183]                     print(1:50)
[17:44:25.183]                     str(1:50)
[17:44:25.183]                     cat(letters, sep = "-")
[17:44:25.183]                     cat(1:6, collapse = "\n")
[17:44:25.183]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:25.183]                     42L
[17:44:25.183]                   }
[17:44:25.183]                 }, immediateCondition = function(cond) {
[17:44:25.183]                   sendCondition <- ...future.makeSendCondition()
[17:44:25.183]                   sendCondition(cond)
[17:44:25.183]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.183]                   {
[17:44:25.183]                     inherits <- base::inherits
[17:44:25.183]                     invokeRestart <- base::invokeRestart
[17:44:25.183]                     is.null <- base::is.null
[17:44:25.183]                     muffled <- FALSE
[17:44:25.183]                     if (inherits(cond, "message")) {
[17:44:25.183]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:25.183]                       if (muffled) 
[17:44:25.183]                         invokeRestart("muffleMessage")
[17:44:25.183]                     }
[17:44:25.183]                     else if (inherits(cond, "warning")) {
[17:44:25.183]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:25.183]                       if (muffled) 
[17:44:25.183]                         invokeRestart("muffleWarning")
[17:44:25.183]                     }
[17:44:25.183]                     else if (inherits(cond, "condition")) {
[17:44:25.183]                       if (!is.null(pattern)) {
[17:44:25.183]                         computeRestarts <- base::computeRestarts
[17:44:25.183]                         grepl <- base::grepl
[17:44:25.183]                         restarts <- computeRestarts(cond)
[17:44:25.183]                         for (restart in restarts) {
[17:44:25.183]                           name <- restart$name
[17:44:25.183]                           if (is.null(name)) 
[17:44:25.183]                             next
[17:44:25.183]                           if (!grepl(pattern, name)) 
[17:44:25.183]                             next
[17:44:25.183]                           invokeRestart(restart)
[17:44:25.183]                           muffled <- TRUE
[17:44:25.183]                           break
[17:44:25.183]                         }
[17:44:25.183]                       }
[17:44:25.183]                     }
[17:44:25.183]                     invisible(muffled)
[17:44:25.183]                   }
[17:44:25.183]                   muffleCondition(cond)
[17:44:25.183]                 })
[17:44:25.183]             }))
[17:44:25.183]             future::FutureResult(value = ...future.value$value, 
[17:44:25.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.183]                   ...future.rng), globalenv = if (FALSE) 
[17:44:25.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:25.183]                     ...future.globalenv.names))
[17:44:25.183]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:25.183]         }, condition = base::local({
[17:44:25.183]             c <- base::c
[17:44:25.183]             inherits <- base::inherits
[17:44:25.183]             invokeRestart <- base::invokeRestart
[17:44:25.183]             length <- base::length
[17:44:25.183]             list <- base::list
[17:44:25.183]             seq.int <- base::seq.int
[17:44:25.183]             signalCondition <- base::signalCondition
[17:44:25.183]             sys.calls <- base::sys.calls
[17:44:25.183]             `[[` <- base::`[[`
[17:44:25.183]             `+` <- base::`+`
[17:44:25.183]             `<<-` <- base::`<<-`
[17:44:25.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:25.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:25.183]                   3L)]
[17:44:25.183]             }
[17:44:25.183]             function(cond) {
[17:44:25.183]                 is_error <- inherits(cond, "error")
[17:44:25.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:25.183]                   NULL)
[17:44:25.183]                 if (is_error) {
[17:44:25.183]                   sessionInformation <- function() {
[17:44:25.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:25.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:25.183]                       search = base::search(), system = base::Sys.info())
[17:44:25.183]                   }
[17:44:25.183]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:25.183]                     cond$call), session = sessionInformation(), 
[17:44:25.183]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:25.183]                   signalCondition(cond)
[17:44:25.183]                 }
[17:44:25.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:25.183]                 "immediateCondition"))) {
[17:44:25.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:25.183]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:25.183]                   if (TRUE && !signal) {
[17:44:25.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.183]                     {
[17:44:25.183]                       inherits <- base::inherits
[17:44:25.183]                       invokeRestart <- base::invokeRestart
[17:44:25.183]                       is.null <- base::is.null
[17:44:25.183]                       muffled <- FALSE
[17:44:25.183]                       if (inherits(cond, "message")) {
[17:44:25.183]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.183]                         if (muffled) 
[17:44:25.183]                           invokeRestart("muffleMessage")
[17:44:25.183]                       }
[17:44:25.183]                       else if (inherits(cond, "warning")) {
[17:44:25.183]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.183]                         if (muffled) 
[17:44:25.183]                           invokeRestart("muffleWarning")
[17:44:25.183]                       }
[17:44:25.183]                       else if (inherits(cond, "condition")) {
[17:44:25.183]                         if (!is.null(pattern)) {
[17:44:25.183]                           computeRestarts <- base::computeRestarts
[17:44:25.183]                           grepl <- base::grepl
[17:44:25.183]                           restarts <- computeRestarts(cond)
[17:44:25.183]                           for (restart in restarts) {
[17:44:25.183]                             name <- restart$name
[17:44:25.183]                             if (is.null(name)) 
[17:44:25.183]                               next
[17:44:25.183]                             if (!grepl(pattern, name)) 
[17:44:25.183]                               next
[17:44:25.183]                             invokeRestart(restart)
[17:44:25.183]                             muffled <- TRUE
[17:44:25.183]                             break
[17:44:25.183]                           }
[17:44:25.183]                         }
[17:44:25.183]                       }
[17:44:25.183]                       invisible(muffled)
[17:44:25.183]                     }
[17:44:25.183]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.183]                   }
[17:44:25.183]                 }
[17:44:25.183]                 else {
[17:44:25.183]                   if (TRUE) {
[17:44:25.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.183]                     {
[17:44:25.183]                       inherits <- base::inherits
[17:44:25.183]                       invokeRestart <- base::invokeRestart
[17:44:25.183]                       is.null <- base::is.null
[17:44:25.183]                       muffled <- FALSE
[17:44:25.183]                       if (inherits(cond, "message")) {
[17:44:25.183]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.183]                         if (muffled) 
[17:44:25.183]                           invokeRestart("muffleMessage")
[17:44:25.183]                       }
[17:44:25.183]                       else if (inherits(cond, "warning")) {
[17:44:25.183]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.183]                         if (muffled) 
[17:44:25.183]                           invokeRestart("muffleWarning")
[17:44:25.183]                       }
[17:44:25.183]                       else if (inherits(cond, "condition")) {
[17:44:25.183]                         if (!is.null(pattern)) {
[17:44:25.183]                           computeRestarts <- base::computeRestarts
[17:44:25.183]                           grepl <- base::grepl
[17:44:25.183]                           restarts <- computeRestarts(cond)
[17:44:25.183]                           for (restart in restarts) {
[17:44:25.183]                             name <- restart$name
[17:44:25.183]                             if (is.null(name)) 
[17:44:25.183]                               next
[17:44:25.183]                             if (!grepl(pattern, name)) 
[17:44:25.183]                               next
[17:44:25.183]                             invokeRestart(restart)
[17:44:25.183]                             muffled <- TRUE
[17:44:25.183]                             break
[17:44:25.183]                           }
[17:44:25.183]                         }
[17:44:25.183]                       }
[17:44:25.183]                       invisible(muffled)
[17:44:25.183]                     }
[17:44:25.183]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.183]                   }
[17:44:25.183]                 }
[17:44:25.183]             }
[17:44:25.183]         }))
[17:44:25.183]     }, error = function(ex) {
[17:44:25.183]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:25.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.183]                 ...future.rng), started = ...future.startTime, 
[17:44:25.183]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:25.183]             version = "1.8"), class = "FutureResult")
[17:44:25.183]     }, finally = {
[17:44:25.183]         if (!identical(...future.workdir, getwd())) 
[17:44:25.183]             setwd(...future.workdir)
[17:44:25.183]         {
[17:44:25.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:25.183]                 ...future.oldOptions$nwarnings <- NULL
[17:44:25.183]             }
[17:44:25.183]             base::options(...future.oldOptions)
[17:44:25.183]             if (.Platform$OS.type == "windows") {
[17:44:25.183]                 old_names <- names(...future.oldEnvVars)
[17:44:25.183]                 envs <- base::Sys.getenv()
[17:44:25.183]                 names <- names(envs)
[17:44:25.183]                 common <- intersect(names, old_names)
[17:44:25.183]                 added <- setdiff(names, old_names)
[17:44:25.183]                 removed <- setdiff(old_names, names)
[17:44:25.183]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:25.183]                   envs[common]]
[17:44:25.183]                 NAMES <- toupper(changed)
[17:44:25.183]                 args <- list()
[17:44:25.183]                 for (kk in seq_along(NAMES)) {
[17:44:25.183]                   name <- changed[[kk]]
[17:44:25.183]                   NAME <- NAMES[[kk]]
[17:44:25.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.183]                     next
[17:44:25.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.183]                 }
[17:44:25.183]                 NAMES <- toupper(added)
[17:44:25.183]                 for (kk in seq_along(NAMES)) {
[17:44:25.183]                   name <- added[[kk]]
[17:44:25.183]                   NAME <- NAMES[[kk]]
[17:44:25.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.183]                     next
[17:44:25.183]                   args[[name]] <- ""
[17:44:25.183]                 }
[17:44:25.183]                 NAMES <- toupper(removed)
[17:44:25.183]                 for (kk in seq_along(NAMES)) {
[17:44:25.183]                   name <- removed[[kk]]
[17:44:25.183]                   NAME <- NAMES[[kk]]
[17:44:25.183]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.183]                     next
[17:44:25.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.183]                 }
[17:44:25.183]                 if (length(args) > 0) 
[17:44:25.183]                   base::do.call(base::Sys.setenv, args = args)
[17:44:25.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:25.183]             }
[17:44:25.183]             else {
[17:44:25.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:25.183]             }
[17:44:25.183]             {
[17:44:25.183]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:25.183]                   0L) {
[17:44:25.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:25.183]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:25.183]                   base::options(opts)
[17:44:25.183]                 }
[17:44:25.183]                 {
[17:44:25.183]                   {
[17:44:25.183]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:25.183]                     NULL
[17:44:25.183]                   }
[17:44:25.183]                   options(future.plan = NULL)
[17:44:25.183]                   if (is.na(NA_character_)) 
[17:44:25.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:25.183]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:25.183]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:25.183]                     envir = parent.frame()) 
[17:44:25.183]                   {
[17:44:25.183]                     if (is.function(workers)) 
[17:44:25.183]                       workers <- workers()
[17:44:25.183]                     workers <- structure(as.integer(workers), 
[17:44:25.183]                       class = class(workers))
[17:44:25.183]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:25.183]                       workers >= 1)
[17:44:25.183]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:25.183]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:25.183]                     }
[17:44:25.183]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:25.183]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:25.183]                       envir = envir)
[17:44:25.183]                     if (!future$lazy) 
[17:44:25.183]                       future <- run(future)
[17:44:25.183]                     invisible(future)
[17:44:25.183]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:25.183]                 }
[17:44:25.183]             }
[17:44:25.183]         }
[17:44:25.183]     })
[17:44:25.183]     if (FALSE) {
[17:44:25.183]         base::sink(type = "output", split = FALSE)
[17:44:25.183]         if (NA) {
[17:44:25.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:25.183]         }
[17:44:25.183]         else {
[17:44:25.183]             ...future.result["stdout"] <- base::list(NULL)
[17:44:25.183]         }
[17:44:25.183]         base::close(...future.stdout)
[17:44:25.183]         ...future.stdout <- NULL
[17:44:25.183]     }
[17:44:25.183]     ...future.result$conditions <- ...future.conditions
[17:44:25.183]     ...future.result$finished <- base::Sys.time()
[17:44:25.183]     ...future.result
[17:44:25.183] }
[17:44:25.187] MultisessionFuture started
[17:44:25.187] - Launch lazy future ... done
[17:44:25.187] run() for ‘MultisessionFuture’ ... done
[17:44:25.187] result() for ClusterFuture ...
[17:44:25.187] receiveMessageFromWorker() for ClusterFuture ...
[17:44:25.187] - Validating connection of MultisessionFuture
[17:44:25.233] - received message: FutureResult
[17:44:25.233] - Received FutureResult
[17:44:25.233] - Erased future from FutureRegistry
[17:44:25.233] result() for ClusterFuture ...
[17:44:25.233] - result already collected: FutureResult
[17:44:25.233] result() for ClusterFuture ... done
[17:44:25.233] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:25.234] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-12-19 17:44:25"
 $ finished    : POSIXct[1:1], format: "2024-12-19 17:44:25"
 $ session_uuid: chr "cdd94caa-24d8-2a42-81a0-fdd67ba33156"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e448fae16456"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "e448fae16456" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 53860
  .. ..$ time  : POSIXct[1:1], format: "2024-12-19 17:44:24"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[17:44:25.241] result() for ClusterFuture ...
[17:44:25.241] - result already collected: FutureResult
[17:44:25.241] result() for ClusterFuture ... done
[17:44:25.241] result() for ClusterFuture ...
[17:44:25.242] - result already collected: FutureResult
[17:44:25.242] result() for ClusterFuture ... done
[17:44:25.242] getGlobalsAndPackages() ...
[17:44:25.242] Searching for globals...
[17:44:25.245] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[17:44:25.245] Searching for globals ... DONE
[17:44:25.245] Resolving globals: FALSE
[17:44:25.246] 
[17:44:25.246] - packages: [1] ‘utils’
[17:44:25.246] getGlobalsAndPackages() ... DONE
[17:44:25.246] run() for ‘Future’ ...
[17:44:25.246] - state: ‘created’
[17:44:25.246] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:25.261] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:25.261] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:25.261]   - Field: ‘node’
[17:44:25.261]   - Field: ‘label’
[17:44:25.262]   - Field: ‘local’
[17:44:25.262]   - Field: ‘owner’
[17:44:25.262]   - Field: ‘envir’
[17:44:25.262]   - Field: ‘workers’
[17:44:25.262]   - Field: ‘packages’
[17:44:25.262]   - Field: ‘gc’
[17:44:25.262]   - Field: ‘conditions’
[17:44:25.262]   - Field: ‘persistent’
[17:44:25.262]   - Field: ‘expr’
[17:44:25.262]   - Field: ‘uuid’
[17:44:25.263]   - Field: ‘seed’
[17:44:25.263]   - Field: ‘version’
[17:44:25.263]   - Field: ‘result’
[17:44:25.263]   - Field: ‘asynchronous’
[17:44:25.263]   - Field: ‘calls’
[17:44:25.263]   - Field: ‘globals’
[17:44:25.263]   - Field: ‘stdout’
[17:44:25.263]   - Field: ‘earlySignal’
[17:44:25.263]   - Field: ‘lazy’
[17:44:25.263]   - Field: ‘state’
[17:44:25.264] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:25.264] - Launch lazy future ...
[17:44:25.264] Packages needed by the future expression (n = 1): ‘utils’
[17:44:25.264] Packages needed by future strategies (n = 0): <none>
[17:44:25.265] {
[17:44:25.265]     {
[17:44:25.265]         {
[17:44:25.265]             ...future.startTime <- base::Sys.time()
[17:44:25.265]             {
[17:44:25.265]                 {
[17:44:25.265]                   {
[17:44:25.265]                     {
[17:44:25.265]                       {
[17:44:25.265]                         base::local({
[17:44:25.265]                           has_future <- base::requireNamespace("future", 
[17:44:25.265]                             quietly = TRUE)
[17:44:25.265]                           if (has_future) {
[17:44:25.265]                             ns <- base::getNamespace("future")
[17:44:25.265]                             version <- ns[[".package"]][["version"]]
[17:44:25.265]                             if (is.null(version)) 
[17:44:25.265]                               version <- utils::packageVersion("future")
[17:44:25.265]                           }
[17:44:25.265]                           else {
[17:44:25.265]                             version <- NULL
[17:44:25.265]                           }
[17:44:25.265]                           if (!has_future || version < "1.8.0") {
[17:44:25.265]                             info <- base::c(r_version = base::gsub("R version ", 
[17:44:25.265]                               "", base::R.version$version.string), 
[17:44:25.265]                               platform = base::sprintf("%s (%s-bit)", 
[17:44:25.265]                                 base::R.version$platform, 8 * 
[17:44:25.265]                                   base::.Machine$sizeof.pointer), 
[17:44:25.265]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:25.265]                                 "release", "version")], collapse = " "), 
[17:44:25.265]                               hostname = base::Sys.info()[["nodename"]])
[17:44:25.265]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:44:25.265]                               info)
[17:44:25.265]                             info <- base::paste(info, collapse = "; ")
[17:44:25.265]                             if (!has_future) {
[17:44:25.265]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:25.265]                                 info)
[17:44:25.265]                             }
[17:44:25.265]                             else {
[17:44:25.265]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:25.265]                                 info, version)
[17:44:25.265]                             }
[17:44:25.265]                             base::stop(msg)
[17:44:25.265]                           }
[17:44:25.265]                         })
[17:44:25.265]                       }
[17:44:25.265]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:25.265]                       base::options(mc.cores = 1L)
[17:44:25.265]                     }
[17:44:25.265]                     base::local({
[17:44:25.265]                       for (pkg in "utils") {
[17:44:25.265]                         base::loadNamespace(pkg)
[17:44:25.265]                         base::library(pkg, character.only = TRUE)
[17:44:25.265]                       }
[17:44:25.265]                     })
[17:44:25.265]                   }
[17:44:25.265]                   options(future.plan = NULL)
[17:44:25.265]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.265]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:25.265]                 }
[17:44:25.265]                 ...future.workdir <- getwd()
[17:44:25.265]             }
[17:44:25.265]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:25.265]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:25.265]         }
[17:44:25.265]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:25.265]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:25.265]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:25.265]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:25.265]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:25.265]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:25.265]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:25.265]             base::names(...future.oldOptions))
[17:44:25.265]     }
[17:44:25.265]     if (TRUE) {
[17:44:25.265]     }
[17:44:25.265]     else {
[17:44:25.265]         if (NA) {
[17:44:25.265]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:25.265]                 open = "w")
[17:44:25.265]         }
[17:44:25.265]         else {
[17:44:25.265]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:25.265]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:25.265]         }
[17:44:25.265]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:25.265]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:25.265]             base::sink(type = "output", split = FALSE)
[17:44:25.265]             base::close(...future.stdout)
[17:44:25.265]         }, add = TRUE)
[17:44:25.265]     }
[17:44:25.265]     ...future.frame <- base::sys.nframe()
[17:44:25.265]     ...future.conditions <- base::list()
[17:44:25.265]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:25.265]     if (FALSE) {
[17:44:25.265]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:25.265]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:25.265]     }
[17:44:25.265]     ...future.result <- base::tryCatch({
[17:44:25.265]         base::withCallingHandlers({
[17:44:25.265]             ...future.value <- base::withVisible(base::local({
[17:44:25.265]                 ...future.makeSendCondition <- local({
[17:44:25.265]                   sendCondition <- NULL
[17:44:25.265]                   function(frame = 1L) {
[17:44:25.265]                     if (is.function(sendCondition)) 
[17:44:25.265]                       return(sendCondition)
[17:44:25.265]                     ns <- getNamespace("parallel")
[17:44:25.265]                     if (exists("sendData", mode = "function", 
[17:44:25.265]                       envir = ns)) {
[17:44:25.265]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:25.265]                         envir = ns)
[17:44:25.265]                       envir <- sys.frame(frame)
[17:44:25.265]                       master <- NULL
[17:44:25.265]                       while (!identical(envir, .GlobalEnv) && 
[17:44:25.265]                         !identical(envir, emptyenv())) {
[17:44:25.265]                         if (exists("master", mode = "list", envir = envir, 
[17:44:25.265]                           inherits = FALSE)) {
[17:44:25.265]                           master <- get("master", mode = "list", 
[17:44:25.265]                             envir = envir, inherits = FALSE)
[17:44:25.265]                           if (inherits(master, c("SOCKnode", 
[17:44:25.265]                             "SOCK0node"))) {
[17:44:25.265]                             sendCondition <<- function(cond) {
[17:44:25.265]                               data <- list(type = "VALUE", value = cond, 
[17:44:25.265]                                 success = TRUE)
[17:44:25.265]                               parallel_sendData(master, data)
[17:44:25.265]                             }
[17:44:25.265]                             return(sendCondition)
[17:44:25.265]                           }
[17:44:25.265]                         }
[17:44:25.265]                         frame <- frame + 1L
[17:44:25.265]                         envir <- sys.frame(frame)
[17:44:25.265]                       }
[17:44:25.265]                     }
[17:44:25.265]                     sendCondition <<- function(cond) NULL
[17:44:25.265]                   }
[17:44:25.265]                 })
[17:44:25.265]                 withCallingHandlers({
[17:44:25.265]                   {
[17:44:25.265]                     print(1:50)
[17:44:25.265]                     str(1:50)
[17:44:25.265]                     cat(letters, sep = "-")
[17:44:25.265]                     cat(1:6, collapse = "\n")
[17:44:25.265]                     write.table(datasets::iris[1:10, ], sep = "\t")
[17:44:25.265]                     42L
[17:44:25.265]                   }
[17:44:25.265]                 }, immediateCondition = function(cond) {
[17:44:25.265]                   sendCondition <- ...future.makeSendCondition()
[17:44:25.265]                   sendCondition(cond)
[17:44:25.265]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.265]                   {
[17:44:25.265]                     inherits <- base::inherits
[17:44:25.265]                     invokeRestart <- base::invokeRestart
[17:44:25.265]                     is.null <- base::is.null
[17:44:25.265]                     muffled <- FALSE
[17:44:25.265]                     if (inherits(cond, "message")) {
[17:44:25.265]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:25.265]                       if (muffled) 
[17:44:25.265]                         invokeRestart("muffleMessage")
[17:44:25.265]                     }
[17:44:25.265]                     else if (inherits(cond, "warning")) {
[17:44:25.265]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:25.265]                       if (muffled) 
[17:44:25.265]                         invokeRestart("muffleWarning")
[17:44:25.265]                     }
[17:44:25.265]                     else if (inherits(cond, "condition")) {
[17:44:25.265]                       if (!is.null(pattern)) {
[17:44:25.265]                         computeRestarts <- base::computeRestarts
[17:44:25.265]                         grepl <- base::grepl
[17:44:25.265]                         restarts <- computeRestarts(cond)
[17:44:25.265]                         for (restart in restarts) {
[17:44:25.265]                           name <- restart$name
[17:44:25.265]                           if (is.null(name)) 
[17:44:25.265]                             next
[17:44:25.265]                           if (!grepl(pattern, name)) 
[17:44:25.265]                             next
[17:44:25.265]                           invokeRestart(restart)
[17:44:25.265]                           muffled <- TRUE
[17:44:25.265]                           break
[17:44:25.265]                         }
[17:44:25.265]                       }
[17:44:25.265]                     }
[17:44:25.265]                     invisible(muffled)
[17:44:25.265]                   }
[17:44:25.265]                   muffleCondition(cond)
[17:44:25.265]                 })
[17:44:25.265]             }))
[17:44:25.265]             future::FutureResult(value = ...future.value$value, 
[17:44:25.265]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.265]                   ...future.rng), globalenv = if (FALSE) 
[17:44:25.265]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:25.265]                     ...future.globalenv.names))
[17:44:25.265]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:25.265]         }, condition = base::local({
[17:44:25.265]             c <- base::c
[17:44:25.265]             inherits <- base::inherits
[17:44:25.265]             invokeRestart <- base::invokeRestart
[17:44:25.265]             length <- base::length
[17:44:25.265]             list <- base::list
[17:44:25.265]             seq.int <- base::seq.int
[17:44:25.265]             signalCondition <- base::signalCondition
[17:44:25.265]             sys.calls <- base::sys.calls
[17:44:25.265]             `[[` <- base::`[[`
[17:44:25.265]             `+` <- base::`+`
[17:44:25.265]             `<<-` <- base::`<<-`
[17:44:25.265]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:25.265]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:25.265]                   3L)]
[17:44:25.265]             }
[17:44:25.265]             function(cond) {
[17:44:25.265]                 is_error <- inherits(cond, "error")
[17:44:25.265]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:25.265]                   NULL)
[17:44:25.265]                 if (is_error) {
[17:44:25.265]                   sessionInformation <- function() {
[17:44:25.265]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:25.265]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:25.265]                       search = base::search(), system = base::Sys.info())
[17:44:25.265]                   }
[17:44:25.265]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.265]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:25.265]                     cond$call), session = sessionInformation(), 
[17:44:25.265]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:25.265]                   signalCondition(cond)
[17:44:25.265]                 }
[17:44:25.265]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:25.265]                 "immediateCondition"))) {
[17:44:25.265]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:25.265]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.265]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:25.265]                   if (TRUE && !signal) {
[17:44:25.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.265]                     {
[17:44:25.265]                       inherits <- base::inherits
[17:44:25.265]                       invokeRestart <- base::invokeRestart
[17:44:25.265]                       is.null <- base::is.null
[17:44:25.265]                       muffled <- FALSE
[17:44:25.265]                       if (inherits(cond, "message")) {
[17:44:25.265]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.265]                         if (muffled) 
[17:44:25.265]                           invokeRestart("muffleMessage")
[17:44:25.265]                       }
[17:44:25.265]                       else if (inherits(cond, "warning")) {
[17:44:25.265]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.265]                         if (muffled) 
[17:44:25.265]                           invokeRestart("muffleWarning")
[17:44:25.265]                       }
[17:44:25.265]                       else if (inherits(cond, "condition")) {
[17:44:25.265]                         if (!is.null(pattern)) {
[17:44:25.265]                           computeRestarts <- base::computeRestarts
[17:44:25.265]                           grepl <- base::grepl
[17:44:25.265]                           restarts <- computeRestarts(cond)
[17:44:25.265]                           for (restart in restarts) {
[17:44:25.265]                             name <- restart$name
[17:44:25.265]                             if (is.null(name)) 
[17:44:25.265]                               next
[17:44:25.265]                             if (!grepl(pattern, name)) 
[17:44:25.265]                               next
[17:44:25.265]                             invokeRestart(restart)
[17:44:25.265]                             muffled <- TRUE
[17:44:25.265]                             break
[17:44:25.265]                           }
[17:44:25.265]                         }
[17:44:25.265]                       }
[17:44:25.265]                       invisible(muffled)
[17:44:25.265]                     }
[17:44:25.265]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.265]                   }
[17:44:25.265]                 }
[17:44:25.265]                 else {
[17:44:25.265]                   if (TRUE) {
[17:44:25.265]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.265]                     {
[17:44:25.265]                       inherits <- base::inherits
[17:44:25.265]                       invokeRestart <- base::invokeRestart
[17:44:25.265]                       is.null <- base::is.null
[17:44:25.265]                       muffled <- FALSE
[17:44:25.265]                       if (inherits(cond, "message")) {
[17:44:25.265]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.265]                         if (muffled) 
[17:44:25.265]                           invokeRestart("muffleMessage")
[17:44:25.265]                       }
[17:44:25.265]                       else if (inherits(cond, "warning")) {
[17:44:25.265]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.265]                         if (muffled) 
[17:44:25.265]                           invokeRestart("muffleWarning")
[17:44:25.265]                       }
[17:44:25.265]                       else if (inherits(cond, "condition")) {
[17:44:25.265]                         if (!is.null(pattern)) {
[17:44:25.265]                           computeRestarts <- base::computeRestarts
[17:44:25.265]                           grepl <- base::grepl
[17:44:25.265]                           restarts <- computeRestarts(cond)
[17:44:25.265]                           for (restart in restarts) {
[17:44:25.265]                             name <- restart$name
[17:44:25.265]                             if (is.null(name)) 
[17:44:25.265]                               next
[17:44:25.265]                             if (!grepl(pattern, name)) 
[17:44:25.265]                               next
[17:44:25.265]                             invokeRestart(restart)
[17:44:25.265]                             muffled <- TRUE
[17:44:25.265]                             break
[17:44:25.265]                           }
[17:44:25.265]                         }
[17:44:25.265]                       }
[17:44:25.265]                       invisible(muffled)
[17:44:25.265]                     }
[17:44:25.265]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.265]                   }
[17:44:25.265]                 }
[17:44:25.265]             }
[17:44:25.265]         }))
[17:44:25.265]     }, error = function(ex) {
[17:44:25.265]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:25.265]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.265]                 ...future.rng), started = ...future.startTime, 
[17:44:25.265]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:25.265]             version = "1.8"), class = "FutureResult")
[17:44:25.265]     }, finally = {
[17:44:25.265]         if (!identical(...future.workdir, getwd())) 
[17:44:25.265]             setwd(...future.workdir)
[17:44:25.265]         {
[17:44:25.265]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:25.265]                 ...future.oldOptions$nwarnings <- NULL
[17:44:25.265]             }
[17:44:25.265]             base::options(...future.oldOptions)
[17:44:25.265]             if (.Platform$OS.type == "windows") {
[17:44:25.265]                 old_names <- names(...future.oldEnvVars)
[17:44:25.265]                 envs <- base::Sys.getenv()
[17:44:25.265]                 names <- names(envs)
[17:44:25.265]                 common <- intersect(names, old_names)
[17:44:25.265]                 added <- setdiff(names, old_names)
[17:44:25.265]                 removed <- setdiff(old_names, names)
[17:44:25.265]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:25.265]                   envs[common]]
[17:44:25.265]                 NAMES <- toupper(changed)
[17:44:25.265]                 args <- list()
[17:44:25.265]                 for (kk in seq_along(NAMES)) {
[17:44:25.265]                   name <- changed[[kk]]
[17:44:25.265]                   NAME <- NAMES[[kk]]
[17:44:25.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.265]                     next
[17:44:25.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.265]                 }
[17:44:25.265]                 NAMES <- toupper(added)
[17:44:25.265]                 for (kk in seq_along(NAMES)) {
[17:44:25.265]                   name <- added[[kk]]
[17:44:25.265]                   NAME <- NAMES[[kk]]
[17:44:25.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.265]                     next
[17:44:25.265]                   args[[name]] <- ""
[17:44:25.265]                 }
[17:44:25.265]                 NAMES <- toupper(removed)
[17:44:25.265]                 for (kk in seq_along(NAMES)) {
[17:44:25.265]                   name <- removed[[kk]]
[17:44:25.265]                   NAME <- NAMES[[kk]]
[17:44:25.265]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.265]                     next
[17:44:25.265]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.265]                 }
[17:44:25.265]                 if (length(args) > 0) 
[17:44:25.265]                   base::do.call(base::Sys.setenv, args = args)
[17:44:25.265]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:25.265]             }
[17:44:25.265]             else {
[17:44:25.265]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:25.265]             }
[17:44:25.265]             {
[17:44:25.265]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:25.265]                   0L) {
[17:44:25.265]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:25.265]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:25.265]                   base::options(opts)
[17:44:25.265]                 }
[17:44:25.265]                 {
[17:44:25.265]                   {
[17:44:25.265]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:25.265]                     NULL
[17:44:25.265]                   }
[17:44:25.265]                   options(future.plan = NULL)
[17:44:25.265]                   if (is.na(NA_character_)) 
[17:44:25.265]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.265]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:25.265]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:25.265]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:25.265]                     envir = parent.frame()) 
[17:44:25.265]                   {
[17:44:25.265]                     if (is.function(workers)) 
[17:44:25.265]                       workers <- workers()
[17:44:25.265]                     workers <- structure(as.integer(workers), 
[17:44:25.265]                       class = class(workers))
[17:44:25.265]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:25.265]                       workers >= 1)
[17:44:25.265]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:25.265]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:25.265]                     }
[17:44:25.265]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:25.265]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:25.265]                       envir = envir)
[17:44:25.265]                     if (!future$lazy) 
[17:44:25.265]                       future <- run(future)
[17:44:25.265]                     invisible(future)
[17:44:25.265]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:25.265]                 }
[17:44:25.265]             }
[17:44:25.265]         }
[17:44:25.265]     })
[17:44:25.265]     if (FALSE) {
[17:44:25.265]         base::sink(type = "output", split = FALSE)
[17:44:25.265]         if (NA) {
[17:44:25.265]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:25.265]         }
[17:44:25.265]         else {
[17:44:25.265]             ...future.result["stdout"] <- base::list(NULL)
[17:44:25.265]         }
[17:44:25.265]         base::close(...future.stdout)
[17:44:25.265]         ...future.stdout <- NULL
[17:44:25.265]     }
[17:44:25.265]     ...future.result$conditions <- ...future.conditions
[17:44:25.265]     ...future.result$finished <- base::Sys.time()
[17:44:25.265]     ...future.result
[17:44:25.265] }
[17:44:25.268] MultisessionFuture started
[17:44:25.268] - Launch lazy future ... done
[17:44:25.268] run() for ‘MultisessionFuture’ ... done
[17:44:25.269] result() for ClusterFuture ...
[17:44:25.269] receiveMessageFromWorker() for ClusterFuture ...
[17:44:25.269] - Validating connection of MultisessionFuture
[17:44:25.317] - received message: FutureResult
[17:44:25.317] - Received FutureResult
[17:44:25.317] - Erased future from FutureRegistry
[17:44:25.318] result() for ClusterFuture ...
[17:44:25.318] - result already collected: FutureResult
[17:44:25.318] result() for ClusterFuture ... done
[17:44:25.318] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:25.318] result() for ClusterFuture ... done
[17:44:25.318] result() for ClusterFuture ...
[17:44:25.318] - result already collected: FutureResult
[17:44:25.318] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[17:44:25.319] getGlobalsAndPackages() ...
[17:44:25.319] Searching for globals...
[17:44:25.319] - globals found: [1] ‘print’
[17:44:25.319] Searching for globals ... DONE
[17:44:25.320] Resolving globals: FALSE
[17:44:25.320] 
[17:44:25.320] 
[17:44:25.320] getGlobalsAndPackages() ... DONE
[17:44:25.320] run() for ‘Future’ ...
[17:44:25.320] - state: ‘created’
[17:44:25.321] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:44:25.335] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:44:25.335] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:44:25.336]   - Field: ‘node’
[17:44:25.336]   - Field: ‘label’
[17:44:25.336]   - Field: ‘local’
[17:44:25.336]   - Field: ‘owner’
[17:44:25.336]   - Field: ‘envir’
[17:44:25.336]   - Field: ‘workers’
[17:44:25.336]   - Field: ‘packages’
[17:44:25.336]   - Field: ‘gc’
[17:44:25.336]   - Field: ‘conditions’
[17:44:25.336]   - Field: ‘persistent’
[17:44:25.337]   - Field: ‘expr’
[17:44:25.337]   - Field: ‘uuid’
[17:44:25.337]   - Field: ‘seed’
[17:44:25.337]   - Field: ‘version’
[17:44:25.337]   - Field: ‘result’
[17:44:25.337]   - Field: ‘asynchronous’
[17:44:25.337]   - Field: ‘calls’
[17:44:25.337]   - Field: ‘globals’
[17:44:25.337]   - Field: ‘stdout’
[17:44:25.337]   - Field: ‘earlySignal’
[17:44:25.337]   - Field: ‘lazy’
[17:44:25.338]   - Field: ‘state’
[17:44:25.338] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:44:25.338] - Launch lazy future ...
[17:44:25.338] Packages needed by the future expression (n = 0): <none>
[17:44:25.338] Packages needed by future strategies (n = 0): <none>
[17:44:25.339] {
[17:44:25.339]     {
[17:44:25.339]         {
[17:44:25.339]             ...future.startTime <- base::Sys.time()
[17:44:25.339]             {
[17:44:25.339]                 {
[17:44:25.339]                   {
[17:44:25.339]                     {
[17:44:25.339]                       base::local({
[17:44:25.339]                         has_future <- base::requireNamespace("future", 
[17:44:25.339]                           quietly = TRUE)
[17:44:25.339]                         if (has_future) {
[17:44:25.339]                           ns <- base::getNamespace("future")
[17:44:25.339]                           version <- ns[[".package"]][["version"]]
[17:44:25.339]                           if (is.null(version)) 
[17:44:25.339]                             version <- utils::packageVersion("future")
[17:44:25.339]                         }
[17:44:25.339]                         else {
[17:44:25.339]                           version <- NULL
[17:44:25.339]                         }
[17:44:25.339]                         if (!has_future || version < "1.8.0") {
[17:44:25.339]                           info <- base::c(r_version = base::gsub("R version ", 
[17:44:25.339]                             "", base::R.version$version.string), 
[17:44:25.339]                             platform = base::sprintf("%s (%s-bit)", 
[17:44:25.339]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:44:25.339]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:44:25.339]                               "release", "version")], collapse = " "), 
[17:44:25.339]                             hostname = base::Sys.info()[["nodename"]])
[17:44:25.339]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:44:25.339]                             info)
[17:44:25.339]                           info <- base::paste(info, collapse = "; ")
[17:44:25.339]                           if (!has_future) {
[17:44:25.339]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:44:25.339]                               info)
[17:44:25.339]                           }
[17:44:25.339]                           else {
[17:44:25.339]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:44:25.339]                               info, version)
[17:44:25.339]                           }
[17:44:25.339]                           base::stop(msg)
[17:44:25.339]                         }
[17:44:25.339]                       })
[17:44:25.339]                     }
[17:44:25.339]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:44:25.339]                     base::options(mc.cores = 1L)
[17:44:25.339]                   }
[17:44:25.339]                   options(future.plan = NULL)
[17:44:25.339]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.339]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:44:25.339]                 }
[17:44:25.339]                 ...future.workdir <- getwd()
[17:44:25.339]             }
[17:44:25.339]             ...future.oldOptions <- base::as.list(base::.Options)
[17:44:25.339]             ...future.oldEnvVars <- base::Sys.getenv()
[17:44:25.339]         }
[17:44:25.339]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:44:25.339]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:44:25.339]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:44:25.339]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:44:25.339]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:44:25.339]             future.stdout.windows.reencode = NULL, width = 80L)
[17:44:25.339]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:44:25.339]             base::names(...future.oldOptions))
[17:44:25.339]     }
[17:44:25.339]     if (FALSE) {
[17:44:25.339]     }
[17:44:25.339]     else {
[17:44:25.339]         if (TRUE) {
[17:44:25.339]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:44:25.339]                 open = "w")
[17:44:25.339]         }
[17:44:25.339]         else {
[17:44:25.339]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:44:25.339]                 windows = "NUL", "/dev/null"), open = "w")
[17:44:25.339]         }
[17:44:25.339]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:44:25.339]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:44:25.339]             base::sink(type = "output", split = FALSE)
[17:44:25.339]             base::close(...future.stdout)
[17:44:25.339]         }, add = TRUE)
[17:44:25.339]     }
[17:44:25.339]     ...future.frame <- base::sys.nframe()
[17:44:25.339]     ...future.conditions <- base::list()
[17:44:25.339]     ...future.rng <- base::globalenv()$.Random.seed
[17:44:25.339]     if (FALSE) {
[17:44:25.339]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:44:25.339]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:44:25.339]     }
[17:44:25.339]     ...future.result <- base::tryCatch({
[17:44:25.339]         base::withCallingHandlers({
[17:44:25.339]             ...future.value <- base::withVisible(base::local({
[17:44:25.339]                 ...future.makeSendCondition <- local({
[17:44:25.339]                   sendCondition <- NULL
[17:44:25.339]                   function(frame = 1L) {
[17:44:25.339]                     if (is.function(sendCondition)) 
[17:44:25.339]                       return(sendCondition)
[17:44:25.339]                     ns <- getNamespace("parallel")
[17:44:25.339]                     if (exists("sendData", mode = "function", 
[17:44:25.339]                       envir = ns)) {
[17:44:25.339]                       parallel_sendData <- get("sendData", mode = "function", 
[17:44:25.339]                         envir = ns)
[17:44:25.339]                       envir <- sys.frame(frame)
[17:44:25.339]                       master <- NULL
[17:44:25.339]                       while (!identical(envir, .GlobalEnv) && 
[17:44:25.339]                         !identical(envir, emptyenv())) {
[17:44:25.339]                         if (exists("master", mode = "list", envir = envir, 
[17:44:25.339]                           inherits = FALSE)) {
[17:44:25.339]                           master <- get("master", mode = "list", 
[17:44:25.339]                             envir = envir, inherits = FALSE)
[17:44:25.339]                           if (inherits(master, c("SOCKnode", 
[17:44:25.339]                             "SOCK0node"))) {
[17:44:25.339]                             sendCondition <<- function(cond) {
[17:44:25.339]                               data <- list(type = "VALUE", value = cond, 
[17:44:25.339]                                 success = TRUE)
[17:44:25.339]                               parallel_sendData(master, data)
[17:44:25.339]                             }
[17:44:25.339]                             return(sendCondition)
[17:44:25.339]                           }
[17:44:25.339]                         }
[17:44:25.339]                         frame <- frame + 1L
[17:44:25.339]                         envir <- sys.frame(frame)
[17:44:25.339]                       }
[17:44:25.339]                     }
[17:44:25.339]                     sendCondition <<- function(cond) NULL
[17:44:25.339]                   }
[17:44:25.339]                 })
[17:44:25.339]                 withCallingHandlers({
[17:44:25.339]                   print(42)
[17:44:25.339]                 }, immediateCondition = function(cond) {
[17:44:25.339]                   sendCondition <- ...future.makeSendCondition()
[17:44:25.339]                   sendCondition(cond)
[17:44:25.339]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.339]                   {
[17:44:25.339]                     inherits <- base::inherits
[17:44:25.339]                     invokeRestart <- base::invokeRestart
[17:44:25.339]                     is.null <- base::is.null
[17:44:25.339]                     muffled <- FALSE
[17:44:25.339]                     if (inherits(cond, "message")) {
[17:44:25.339]                       muffled <- grepl(pattern, "muffleMessage")
[17:44:25.339]                       if (muffled) 
[17:44:25.339]                         invokeRestart("muffleMessage")
[17:44:25.339]                     }
[17:44:25.339]                     else if (inherits(cond, "warning")) {
[17:44:25.339]                       muffled <- grepl(pattern, "muffleWarning")
[17:44:25.339]                       if (muffled) 
[17:44:25.339]                         invokeRestart("muffleWarning")
[17:44:25.339]                     }
[17:44:25.339]                     else if (inherits(cond, "condition")) {
[17:44:25.339]                       if (!is.null(pattern)) {
[17:44:25.339]                         computeRestarts <- base::computeRestarts
[17:44:25.339]                         grepl <- base::grepl
[17:44:25.339]                         restarts <- computeRestarts(cond)
[17:44:25.339]                         for (restart in restarts) {
[17:44:25.339]                           name <- restart$name
[17:44:25.339]                           if (is.null(name)) 
[17:44:25.339]                             next
[17:44:25.339]                           if (!grepl(pattern, name)) 
[17:44:25.339]                             next
[17:44:25.339]                           invokeRestart(restart)
[17:44:25.339]                           muffled <- TRUE
[17:44:25.339]                           break
[17:44:25.339]                         }
[17:44:25.339]                       }
[17:44:25.339]                     }
[17:44:25.339]                     invisible(muffled)
[17:44:25.339]                   }
[17:44:25.339]                   muffleCondition(cond)
[17:44:25.339]                 })
[17:44:25.339]             }))
[17:44:25.339]             future::FutureResult(value = ...future.value$value, 
[17:44:25.339]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.339]                   ...future.rng), globalenv = if (FALSE) 
[17:44:25.339]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:44:25.339]                     ...future.globalenv.names))
[17:44:25.339]                 else NULL, started = ...future.startTime, version = "1.8")
[17:44:25.339]         }, condition = base::local({
[17:44:25.339]             c <- base::c
[17:44:25.339]             inherits <- base::inherits
[17:44:25.339]             invokeRestart <- base::invokeRestart
[17:44:25.339]             length <- base::length
[17:44:25.339]             list <- base::list
[17:44:25.339]             seq.int <- base::seq.int
[17:44:25.339]             signalCondition <- base::signalCondition
[17:44:25.339]             sys.calls <- base::sys.calls
[17:44:25.339]             `[[` <- base::`[[`
[17:44:25.339]             `+` <- base::`+`
[17:44:25.339]             `<<-` <- base::`<<-`
[17:44:25.339]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:44:25.339]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:44:25.339]                   3L)]
[17:44:25.339]             }
[17:44:25.339]             function(cond) {
[17:44:25.339]                 is_error <- inherits(cond, "error")
[17:44:25.339]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:44:25.339]                   NULL)
[17:44:25.339]                 if (is_error) {
[17:44:25.339]                   sessionInformation <- function() {
[17:44:25.339]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:44:25.339]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:44:25.339]                       search = base::search(), system = base::Sys.info())
[17:44:25.339]                   }
[17:44:25.339]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.339]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:44:25.339]                     cond$call), session = sessionInformation(), 
[17:44:25.339]                     timestamp = base::Sys.time(), signaled = 0L)
[17:44:25.339]                   signalCondition(cond)
[17:44:25.339]                 }
[17:44:25.339]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:44:25.339]                 "immediateCondition"))) {
[17:44:25.339]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:44:25.339]                   ...future.conditions[[length(...future.conditions) + 
[17:44:25.339]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:44:25.339]                   if (TRUE && !signal) {
[17:44:25.339]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.339]                     {
[17:44:25.339]                       inherits <- base::inherits
[17:44:25.339]                       invokeRestart <- base::invokeRestart
[17:44:25.339]                       is.null <- base::is.null
[17:44:25.339]                       muffled <- FALSE
[17:44:25.339]                       if (inherits(cond, "message")) {
[17:44:25.339]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.339]                         if (muffled) 
[17:44:25.339]                           invokeRestart("muffleMessage")
[17:44:25.339]                       }
[17:44:25.339]                       else if (inherits(cond, "warning")) {
[17:44:25.339]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.339]                         if (muffled) 
[17:44:25.339]                           invokeRestart("muffleWarning")
[17:44:25.339]                       }
[17:44:25.339]                       else if (inherits(cond, "condition")) {
[17:44:25.339]                         if (!is.null(pattern)) {
[17:44:25.339]                           computeRestarts <- base::computeRestarts
[17:44:25.339]                           grepl <- base::grepl
[17:44:25.339]                           restarts <- computeRestarts(cond)
[17:44:25.339]                           for (restart in restarts) {
[17:44:25.339]                             name <- restart$name
[17:44:25.339]                             if (is.null(name)) 
[17:44:25.339]                               next
[17:44:25.339]                             if (!grepl(pattern, name)) 
[17:44:25.339]                               next
[17:44:25.339]                             invokeRestart(restart)
[17:44:25.339]                             muffled <- TRUE
[17:44:25.339]                             break
[17:44:25.339]                           }
[17:44:25.339]                         }
[17:44:25.339]                       }
[17:44:25.339]                       invisible(muffled)
[17:44:25.339]                     }
[17:44:25.339]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.339]                   }
[17:44:25.339]                 }
[17:44:25.339]                 else {
[17:44:25.339]                   if (TRUE) {
[17:44:25.339]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:44:25.339]                     {
[17:44:25.339]                       inherits <- base::inherits
[17:44:25.339]                       invokeRestart <- base::invokeRestart
[17:44:25.339]                       is.null <- base::is.null
[17:44:25.339]                       muffled <- FALSE
[17:44:25.339]                       if (inherits(cond, "message")) {
[17:44:25.339]                         muffled <- grepl(pattern, "muffleMessage")
[17:44:25.339]                         if (muffled) 
[17:44:25.339]                           invokeRestart("muffleMessage")
[17:44:25.339]                       }
[17:44:25.339]                       else if (inherits(cond, "warning")) {
[17:44:25.339]                         muffled <- grepl(pattern, "muffleWarning")
[17:44:25.339]                         if (muffled) 
[17:44:25.339]                           invokeRestart("muffleWarning")
[17:44:25.339]                       }
[17:44:25.339]                       else if (inherits(cond, "condition")) {
[17:44:25.339]                         if (!is.null(pattern)) {
[17:44:25.339]                           computeRestarts <- base::computeRestarts
[17:44:25.339]                           grepl <- base::grepl
[17:44:25.339]                           restarts <- computeRestarts(cond)
[17:44:25.339]                           for (restart in restarts) {
[17:44:25.339]                             name <- restart$name
[17:44:25.339]                             if (is.null(name)) 
[17:44:25.339]                               next
[17:44:25.339]                             if (!grepl(pattern, name)) 
[17:44:25.339]                               next
[17:44:25.339]                             invokeRestart(restart)
[17:44:25.339]                             muffled <- TRUE
[17:44:25.339]                             break
[17:44:25.339]                           }
[17:44:25.339]                         }
[17:44:25.339]                       }
[17:44:25.339]                       invisible(muffled)
[17:44:25.339]                     }
[17:44:25.339]                     muffleCondition(cond, pattern = "^muffle")
[17:44:25.339]                   }
[17:44:25.339]                 }
[17:44:25.339]             }
[17:44:25.339]         }))
[17:44:25.339]     }, error = function(ex) {
[17:44:25.339]         base::structure(base::list(value = NULL, visible = NULL, 
[17:44:25.339]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:44:25.339]                 ...future.rng), started = ...future.startTime, 
[17:44:25.339]             finished = Sys.time(), session_uuid = NA_character_, 
[17:44:25.339]             version = "1.8"), class = "FutureResult")
[17:44:25.339]     }, finally = {
[17:44:25.339]         if (!identical(...future.workdir, getwd())) 
[17:44:25.339]             setwd(...future.workdir)
[17:44:25.339]         {
[17:44:25.339]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:44:25.339]                 ...future.oldOptions$nwarnings <- NULL
[17:44:25.339]             }
[17:44:25.339]             base::options(...future.oldOptions)
[17:44:25.339]             if (.Platform$OS.type == "windows") {
[17:44:25.339]                 old_names <- names(...future.oldEnvVars)
[17:44:25.339]                 envs <- base::Sys.getenv()
[17:44:25.339]                 names <- names(envs)
[17:44:25.339]                 common <- intersect(names, old_names)
[17:44:25.339]                 added <- setdiff(names, old_names)
[17:44:25.339]                 removed <- setdiff(old_names, names)
[17:44:25.339]                 changed <- common[...future.oldEnvVars[common] != 
[17:44:25.339]                   envs[common]]
[17:44:25.339]                 NAMES <- toupper(changed)
[17:44:25.339]                 args <- list()
[17:44:25.339]                 for (kk in seq_along(NAMES)) {
[17:44:25.339]                   name <- changed[[kk]]
[17:44:25.339]                   NAME <- NAMES[[kk]]
[17:44:25.339]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.339]                     next
[17:44:25.339]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.339]                 }
[17:44:25.339]                 NAMES <- toupper(added)
[17:44:25.339]                 for (kk in seq_along(NAMES)) {
[17:44:25.339]                   name <- added[[kk]]
[17:44:25.339]                   NAME <- NAMES[[kk]]
[17:44:25.339]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.339]                     next
[17:44:25.339]                   args[[name]] <- ""
[17:44:25.339]                 }
[17:44:25.339]                 NAMES <- toupper(removed)
[17:44:25.339]                 for (kk in seq_along(NAMES)) {
[17:44:25.339]                   name <- removed[[kk]]
[17:44:25.339]                   NAME <- NAMES[[kk]]
[17:44:25.339]                   if (name != NAME && is.element(NAME, old_names)) 
[17:44:25.339]                     next
[17:44:25.339]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:44:25.339]                 }
[17:44:25.339]                 if (length(args) > 0) 
[17:44:25.339]                   base::do.call(base::Sys.setenv, args = args)
[17:44:25.339]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:44:25.339]             }
[17:44:25.339]             else {
[17:44:25.339]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:44:25.339]             }
[17:44:25.339]             {
[17:44:25.339]                 if (base::length(...future.futureOptionsAdded) > 
[17:44:25.339]                   0L) {
[17:44:25.339]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:44:25.339]                   base::names(opts) <- ...future.futureOptionsAdded
[17:44:25.339]                   base::options(opts)
[17:44:25.339]                 }
[17:44:25.339]                 {
[17:44:25.339]                   {
[17:44:25.339]                     base::options(mc.cores = ...future.mc.cores.old)
[17:44:25.339]                     NULL
[17:44:25.339]                   }
[17:44:25.339]                   options(future.plan = NULL)
[17:44:25.339]                   if (is.na(NA_character_)) 
[17:44:25.339]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:44:25.339]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:44:25.339]                   future::plan(list(function (..., workers = availableCores(), 
[17:44:25.339]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:44:25.339]                     envir = parent.frame()) 
[17:44:25.339]                   {
[17:44:25.339]                     if (is.function(workers)) 
[17:44:25.339]                       workers <- workers()
[17:44:25.339]                     workers <- structure(as.integer(workers), 
[17:44:25.339]                       class = class(workers))
[17:44:25.339]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:44:25.339]                       workers >= 1)
[17:44:25.339]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:44:25.339]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:44:25.339]                     }
[17:44:25.339]                     future <- MultisessionFuture(..., workers = workers, 
[17:44:25.339]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:44:25.339]                       envir = envir)
[17:44:25.339]                     if (!future$lazy) 
[17:44:25.339]                       future <- run(future)
[17:44:25.339]                     invisible(future)
[17:44:25.339]                   }), .cleanup = FALSE, .init = FALSE)
[17:44:25.339]                 }
[17:44:25.339]             }
[17:44:25.339]         }
[17:44:25.339]     })
[17:44:25.339]     if (TRUE) {
[17:44:25.339]         base::sink(type = "output", split = FALSE)
[17:44:25.339]         if (TRUE) {
[17:44:25.339]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:44:25.339]         }
[17:44:25.339]         else {
[17:44:25.339]             ...future.result["stdout"] <- base::list(NULL)
[17:44:25.339]         }
[17:44:25.339]         base::close(...future.stdout)
[17:44:25.339]         ...future.stdout <- NULL
[17:44:25.339]     }
[17:44:25.339]     ...future.result$conditions <- ...future.conditions
[17:44:25.339]     ...future.result$finished <- base::Sys.time()
[17:44:25.339]     ...future.result
[17:44:25.339] }
[17:44:25.342] MultisessionFuture started
[17:44:25.342] - Launch lazy future ... done
[17:44:25.342] run() for ‘MultisessionFuture’ ... done
[17:44:25.342] result() for ClusterFuture ...
[17:44:25.343] receiveMessageFromWorker() for ClusterFuture ...
[17:44:25.343] - Validating connection of MultisessionFuture
[17:44:25.390] - received message: FutureResult
[17:44:25.391] - Received FutureResult
[17:44:25.391] - Erased future from FutureRegistry
[17:44:25.391] result() for ClusterFuture ...
[17:44:25.391] - result already collected: FutureResult
[17:44:25.391] result() for ClusterFuture ... done
[17:44:25.391] receiveMessageFromWorker() for ClusterFuture ... done
[17:44:25.391] result() for ClusterFuture ... done
[17:44:25.391] result() for ClusterFuture ...
[17:44:25.392] - result already collected: FutureResult
[17:44:25.392] result() for ClusterFuture ... done
[17:44:25.392] result() for ClusterFuture ...
[17:44:25.392] - result already collected: FutureResult
[17:44:25.392] result() for ClusterFuture ... done
[1] 42
[17:44:25.392] result() for ClusterFuture ...
[17:44:25.392] - result already collected: FutureResult
[17:44:25.392] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[17:44:25.393] plan(): Setting new future strategy stack:
[17:44:25.393] List of future strategies:
[17:44:25.393] 1. FutureStrategy:
[17:44:25.393]    - args: function (..., envir = parent.frame())
[17:44:25.393]    - tweaked: FALSE
[17:44:25.393]    - call: future::plan(oplan)
[17:44:25.394] plan(): nbrOfWorkers() = 1
> 
